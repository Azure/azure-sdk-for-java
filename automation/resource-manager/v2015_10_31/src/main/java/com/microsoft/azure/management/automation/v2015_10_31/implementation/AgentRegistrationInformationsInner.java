/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.automation.v2015_10_31.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.management.automation.v2015_10_31.AgentRegistrationRegenerateKeyParameter;
import com.microsoft.azure.management.automation.v2015_10_31.ErrorResponseException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in AgentRegistrationInformations.
 */
public class AgentRegistrationInformationsInner {
    /** The Retrofit service to perform REST calls. */
    private AgentRegistrationInformationsService service;
    /** The service client containing this operation class. */
    private AutomationClientImpl client;

    /**
     * Initializes an instance of AgentRegistrationInformationsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public AgentRegistrationInformationsInner(Retrofit retrofit, AutomationClientImpl client) {
        this.service = retrofit.create(AgentRegistrationInformationsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for AgentRegistrationInformations to be
     * used by Retrofit to perform actually REST calls.
     */
    interface AgentRegistrationInformationsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.automation.v2015_10_31.AgentRegistrationInformations get" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/agentRegistrationInformation")
        Observable<Response<ResponseBody>> get(@Path("resourceGroupName") String resourceGroupName, @Path("automationAccountName") String automationAccountName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.automation.v2015_10_31.AgentRegistrationInformations regenerateKey" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/agentRegistrationInformation/regenerateKey")
        Observable<Response<ResponseBody>> regenerateKey(@Path("resourceGroupName") String resourceGroupName, @Path("automationAccountName") String automationAccountName, @Path("subscriptionId") String subscriptionId, @Body AgentRegistrationRegenerateKeyParameter parameters, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Retrieve the automation agent registration information.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the AgentRegistrationInner object if successful.
     */
    public AgentRegistrationInner get(String resourceGroupName, String automationAccountName) {
        return getWithServiceResponseAsync(resourceGroupName, automationAccountName).toBlocking().single().body();
    }

    /**
     * Retrieve the automation agent registration information.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<AgentRegistrationInner> getAsync(String resourceGroupName, String automationAccountName, final ServiceCallback<AgentRegistrationInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(resourceGroupName, automationAccountName), serviceCallback);
    }

    /**
     * Retrieve the automation agent registration information.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AgentRegistrationInner object
     */
    public Observable<AgentRegistrationInner> getAsync(String resourceGroupName, String automationAccountName) {
        return getWithServiceResponseAsync(resourceGroupName, automationAccountName).map(new Func1<ServiceResponse<AgentRegistrationInner>, AgentRegistrationInner>() {
            @Override
            public AgentRegistrationInner call(ServiceResponse<AgentRegistrationInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Retrieve the automation agent registration information.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AgentRegistrationInner object
     */
    public Observable<ServiceResponse<AgentRegistrationInner>> getWithServiceResponseAsync(String resourceGroupName, String automationAccountName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (automationAccountName == null) {
            throw new IllegalArgumentException("Parameter automationAccountName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        final String apiVersion = "2015-10-31";
        return service.get(resourceGroupName, automationAccountName, this.client.subscriptionId(), apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<AgentRegistrationInner>>>() {
                @Override
                public Observable<ServiceResponse<AgentRegistrationInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<AgentRegistrationInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<AgentRegistrationInner> getDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<AgentRegistrationInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<AgentRegistrationInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Regenerate a primary or secondary agent registration key.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @param parameters The name of the agent registration key to be regenerated
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the AgentRegistrationInner object if successful.
     */
    public AgentRegistrationInner regenerateKey(String resourceGroupName, String automationAccountName, AgentRegistrationRegenerateKeyParameter parameters) {
        return regenerateKeyWithServiceResponseAsync(resourceGroupName, automationAccountName, parameters).toBlocking().single().body();
    }

    /**
     * Regenerate a primary or secondary agent registration key.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @param parameters The name of the agent registration key to be regenerated
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<AgentRegistrationInner> regenerateKeyAsync(String resourceGroupName, String automationAccountName, AgentRegistrationRegenerateKeyParameter parameters, final ServiceCallback<AgentRegistrationInner> serviceCallback) {
        return ServiceFuture.fromResponse(regenerateKeyWithServiceResponseAsync(resourceGroupName, automationAccountName, parameters), serviceCallback);
    }

    /**
     * Regenerate a primary or secondary agent registration key.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @param parameters The name of the agent registration key to be regenerated
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AgentRegistrationInner object
     */
    public Observable<AgentRegistrationInner> regenerateKeyAsync(String resourceGroupName, String automationAccountName, AgentRegistrationRegenerateKeyParameter parameters) {
        return regenerateKeyWithServiceResponseAsync(resourceGroupName, automationAccountName, parameters).map(new Func1<ServiceResponse<AgentRegistrationInner>, AgentRegistrationInner>() {
            @Override
            public AgentRegistrationInner call(ServiceResponse<AgentRegistrationInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Regenerate a primary or secondary agent registration key.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @param parameters The name of the agent registration key to be regenerated
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AgentRegistrationInner object
     */
    public Observable<ServiceResponse<AgentRegistrationInner>> regenerateKeyWithServiceResponseAsync(String resourceGroupName, String automationAccountName, AgentRegistrationRegenerateKeyParameter parameters) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (automationAccountName == null) {
            throw new IllegalArgumentException("Parameter automationAccountName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        Validator.validate(parameters);
        final String apiVersion = "2015-10-31";
        return service.regenerateKey(resourceGroupName, automationAccountName, this.client.subscriptionId(), parameters, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<AgentRegistrationInner>>>() {
                @Override
                public Observable<ServiceResponse<AgentRegistrationInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<AgentRegistrationInner> clientResponse = regenerateKeyDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<AgentRegistrationInner> regenerateKeyDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<AgentRegistrationInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<AgentRegistrationInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

}
