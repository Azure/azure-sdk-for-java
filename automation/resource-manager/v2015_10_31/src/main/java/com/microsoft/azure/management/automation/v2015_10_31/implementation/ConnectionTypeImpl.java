/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.automation.v2015_10_31.implementation;

import com.microsoft.azure.management.automation.v2015_10_31.ConnectionType;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import com.microsoft.azure.management.automation.v2015_10_31.ConnectionTypeCreateOrUpdateParameters;
import java.util.Map;
import org.joda.time.DateTime;
import com.microsoft.azure.management.automation.v2015_10_31.FieldDefinition;
import rx.functions.Func1;

class ConnectionTypeImpl extends CreatableUpdatableImpl<ConnectionType, ConnectionTypeInner, ConnectionTypeImpl> implements ConnectionType, ConnectionType.Definition, ConnectionType.Update {
    private final AutomationManager manager;
    private String resourceGroupName;
    private String automationAccountName;
    private String connectionTypeName;
    private ConnectionTypeCreateOrUpdateParameters createOrUpdateParameter;

    ConnectionTypeImpl(String name, AutomationManager manager) {
        super(name, new ConnectionTypeInner());
        this.manager = manager;
        // Set resource name
        this.connectionTypeName = name;
        //
        this.createOrUpdateParameter = new ConnectionTypeCreateOrUpdateParameters();
    }

    ConnectionTypeImpl(ConnectionTypeInner inner, AutomationManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.connectionTypeName = inner.name();
        // resource ancestor names
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.automationAccountName = IdParsingUtils.getValueFromIdByName(inner.id(), "automationAccounts");
        this.connectionTypeName = IdParsingUtils.getValueFromIdByName(inner.id(), "connectionTypes");
        //
        this.createOrUpdateParameter = new ConnectionTypeCreateOrUpdateParameters();
    }

    @Override
    public AutomationManager manager() {
        return this.manager;
    }

    @Override
    public Observable<ConnectionType> createResourceAsync() {
        ConnectionTypesInner client = this.manager().inner().connectionTypes();
        return client.createOrUpdateAsync(this.resourceGroupName, this.automationAccountName, this.connectionTypeName, this.createOrUpdateParameter)
            .map(new Func1<ConnectionTypeInner, ConnectionTypeInner>() {
               @Override
               public ConnectionTypeInner call(ConnectionTypeInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<ConnectionType> updateResourceAsync() {
        ConnectionTypesInner client = this.manager().inner().connectionTypes();
        return client.createOrUpdateAsync(this.resourceGroupName, this.automationAccountName, this.connectionTypeName, this.createOrUpdateParameter)
            .map(new Func1<ConnectionTypeInner, ConnectionTypeInner>() {
               @Override
               public ConnectionTypeInner call(ConnectionTypeInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<ConnectionTypeInner> getInnerAsync() {
        ConnectionTypesInner client = this.manager().inner().connectionTypes();
        return client.getAsync(this.resourceGroupName, this.automationAccountName, this.connectionTypeName);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }

    private void resetCreateUpdateParameters() {
        this.createOrUpdateParameter = new ConnectionTypeCreateOrUpdateParameters();
    }

    @Override
    public DateTime creationTime() {
        return this.inner().creationTime();
    }

    @Override
    public String description() {
        return this.inner().description();
    }

    @Override
    public Map<String, FieldDefinition> fieldDefinitions() {
        return this.inner().fieldDefinitions();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public Boolean isGlobal() {
        return this.inner().isGlobal();
    }

    @Override
    public DateTime lastModifiedTime() {
        return this.inner().lastModifiedTime();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public ConnectionTypeImpl withExistingAutomationAccount(String resourceGroupName, String automationAccountName) {
        this.resourceGroupName = resourceGroupName;
        this.automationAccountName = automationAccountName;
        return this;
    }

    @Override
    public ConnectionTypeImpl withFieldDefinitions(Map<String, FieldDefinition> fieldDefinitions) {
        this.createOrUpdateParameter.withFieldDefinitions(fieldDefinitions);
        return this;
    }

    @Override
    public ConnectionTypeImpl withName(String name) {
        this.createOrUpdateParameter.withName(name);
        return this;
    }

    @Override
    public ConnectionTypeImpl withIsGlobal(Boolean isGlobal) {
        this.createOrUpdateParameter.withIsGlobal(isGlobal);
        return this;
    }

}
