/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.automation.v2015_10_31.implementation;

import com.microsoft.azure.management.automation.v2015_10_31.Module;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import com.microsoft.azure.management.automation.v2015_10_31.ModuleUpdateParameters;
import java.util.Map;
import com.microsoft.azure.management.automation.v2015_10_31.ModuleCreateOrUpdateParameters;
import com.microsoft.azure.management.automation.v2015_10_31.ContentLink;
import org.joda.time.DateTime;
import com.microsoft.azure.management.automation.v2015_10_31.ModuleErrorInfo;
import com.microsoft.azure.management.automation.v2015_10_31.ModuleProvisioningState;
import rx.functions.Func1;

class ModuleImpl extends CreatableUpdatableImpl<Module, ModuleInner, ModuleImpl> implements Module, Module.Definition, Module.Update {
    private final AutomationManager manager;
    private String resourceGroupName;
    private String automationAccountName;
    private String moduleName;
    private ModuleCreateOrUpdateParameters createParameter;
    private ModuleUpdateParameters updateParameter;

    ModuleImpl(String name, AutomationManager manager) {
        super(name, new ModuleInner());
        this.manager = manager;
        // Set resource name
        this.moduleName = name;
        //
        this.createParameter = new ModuleCreateOrUpdateParameters();
        this.updateParameter = new ModuleUpdateParameters();
    }

    ModuleImpl(ModuleInner inner, AutomationManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.moduleName = inner.name();
        // resource ancestor names
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.automationAccountName = IdParsingUtils.getValueFromIdByName(inner.id(), "automationAccounts");
        this.moduleName = IdParsingUtils.getValueFromIdByName(inner.id(), "modules");
        //
        this.createParameter = new ModuleCreateOrUpdateParameters();
        this.updateParameter = new ModuleUpdateParameters();
    }

    @Override
    public AutomationManager manager() {
        return this.manager;
    }

    @Override
    public Observable<Module> createResourceAsync() {
        ModulesInner client = this.manager().inner().modules();
        return client.createOrUpdateAsync(this.resourceGroupName, this.automationAccountName, this.moduleName, this.createParameter)
            .map(new Func1<ModuleInner, ModuleInner>() {
               @Override
               public ModuleInner call(ModuleInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<Module> updateResourceAsync() {
        ModulesInner client = this.manager().inner().modules();
        return client.updateAsync(this.resourceGroupName, this.automationAccountName, this.moduleName, this.updateParameter)
            .map(new Func1<ModuleInner, ModuleInner>() {
               @Override
               public ModuleInner call(ModuleInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<ModuleInner> getInnerAsync() {
        ModulesInner client = this.manager().inner().modules();
        return client.getAsync(this.resourceGroupName, this.automationAccountName, this.moduleName);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }

    private void resetCreateUpdateParameters() {
        this.createParameter = new ModuleCreateOrUpdateParameters();
        this.updateParameter = new ModuleUpdateParameters();
    }

    @Override
    public Integer activityCount() {
        return this.inner().activityCount();
    }

    @Override
    public ContentLink contentLink() {
        return this.inner().contentLink();
    }

    @Override
    public DateTime creationTime() {
        return this.inner().creationTime();
    }

    @Override
    public String description() {
        return this.inner().description();
    }

    @Override
    public ModuleErrorInfo error() {
        return this.inner().error();
    }

    @Override
    public String etag() {
        return this.inner().etag();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public Boolean isGlobal() {
        return this.inner().isGlobal();
    }

    @Override
    public DateTime lastModifiedTime() {
        return this.inner().lastModifiedTime();
    }

    @Override
    public String location() {
        return this.inner().location();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public ModuleProvisioningState provisioningState() {
        return this.inner().provisioningState();
    }

    @Override
    public Long sizeInBytes() {
        return this.inner().sizeInBytes();
    }

    @Override
    public Map<String, String> tags() {
        return this.inner().getTags();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public String version() {
        return this.inner().version();
    }

    @Override
    public ModuleImpl withExistingAutomationAccount(String resourceGroupName, String automationAccountName) {
        this.resourceGroupName = resourceGroupName;
        this.automationAccountName = automationAccountName;
        return this;
    }

    @Override
    public ModuleImpl withContentLink(ContentLink contentLink) {
        if (isInCreateMode()) {
            this.createParameter.withContentLink(contentLink);
        } else {
            this.updateParameter.withContentLink(contentLink);
        }
        return this;
    }

    @Override
    public ModuleImpl withLocation(String location) {
        if (isInCreateMode()) {
            this.createParameter.withLocation(location);
        } else {
            this.updateParameter.withLocation(location);
        }
        return this;
    }

    @Override
    public ModuleImpl withName(String name) {
        if (isInCreateMode()) {
            this.createParameter.withName(name);
        } else {
            this.updateParameter.withName(name);
        }
        return this;
    }

    @Override
    public ModuleImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.createParameter.withTags(tags);
        } else {
            this.updateParameter.withTags(tags);
        }
        return this;
    }

}
