/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.automation.v2015_10_31.implementation;

import com.microsoft.azure.management.automation.v2015_10_31.Connection;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import com.microsoft.azure.management.automation.v2015_10_31.ConnectionUpdateParameters;
import java.util.Map;
import com.microsoft.azure.management.automation.v2015_10_31.ConnectionCreateOrUpdateParameters;
import com.microsoft.azure.management.automation.v2015_10_31.ConnectionTypeAssociationProperty;
import org.joda.time.DateTime;
import rx.functions.Func1;

class ConnectionImpl extends CreatableUpdatableImpl<Connection, ConnectionInner, ConnectionImpl> implements Connection, Connection.Definition, Connection.Update {
    private final AutomationManager manager;
    private String resourceGroupName;
    private String automationAccountName;
    private String connectionName;
    private ConnectionCreateOrUpdateParameters createParameter;
    private ConnectionUpdateParameters updateParameter;

    ConnectionImpl(String name, AutomationManager manager) {
        super(name, new ConnectionInner());
        this.manager = manager;
        // Set resource name
        this.connectionName = name;
        //
        this.createParameter = new ConnectionCreateOrUpdateParameters();
        this.updateParameter = new ConnectionUpdateParameters();
    }

    ConnectionImpl(ConnectionInner inner, AutomationManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.connectionName = inner.name();
        // resource ancestor names
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.automationAccountName = IdParsingUtils.getValueFromIdByName(inner.id(), "automationAccounts");
        this.connectionName = IdParsingUtils.getValueFromIdByName(inner.id(), "connections");
        //
        this.createParameter = new ConnectionCreateOrUpdateParameters();
        this.updateParameter = new ConnectionUpdateParameters();
    }

    @Override
    public AutomationManager manager() {
        return this.manager;
    }

    @Override
    public Observable<Connection> createResourceAsync() {
        ConnectionsInner client = this.manager().inner().connections();
        return client.createOrUpdateAsync(this.resourceGroupName, this.automationAccountName, this.connectionName, this.createParameter)
            .map(new Func1<ConnectionInner, ConnectionInner>() {
               @Override
               public ConnectionInner call(ConnectionInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<Connection> updateResourceAsync() {
        ConnectionsInner client = this.manager().inner().connections();
        return client.updateAsync(this.resourceGroupName, this.automationAccountName, this.connectionName, this.updateParameter)
            .map(new Func1<ConnectionInner, ConnectionInner>() {
               @Override
               public ConnectionInner call(ConnectionInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<ConnectionInner> getInnerAsync() {
        ConnectionsInner client = this.manager().inner().connections();
        return client.getAsync(this.resourceGroupName, this.automationAccountName, this.connectionName);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }

    private void resetCreateUpdateParameters() {
        this.createParameter = new ConnectionCreateOrUpdateParameters();
        this.updateParameter = new ConnectionUpdateParameters();
    }

    @Override
    public ConnectionTypeAssociationProperty connectionType() {
        return this.inner().connectionType();
    }

    @Override
    public DateTime creationTime() {
        return this.inner().creationTime();
    }

    @Override
    public String description() {
        return this.inner().description();
    }

    @Override
    public Map<String, String> fieldDefinitionValues() {
        return this.inner().fieldDefinitionValues();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public DateTime lastModifiedTime() {
        return this.inner().lastModifiedTime();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public ConnectionImpl withExistingAutomationAccount(String resourceGroupName, String automationAccountName) {
        this.resourceGroupName = resourceGroupName;
        this.automationAccountName = automationAccountName;
        return this;
    }

    @Override
    public ConnectionImpl withConnectionType(ConnectionTypeAssociationProperty connectionType) {
        this.createParameter.withConnectionType(connectionType);
        return this;
    }

    @Override
    public ConnectionImpl withName(String name) {
        if (isInCreateMode()) {
            this.createParameter.withName(name);
        } else {
            this.updateParameter.withName(name);
        }
        return this;
    }

    @Override
    public ConnectionImpl withDescription(String description) {
        if (isInCreateMode()) {
            this.createParameter.withDescription(description);
        } else {
            this.updateParameter.withDescription(description);
        }
        return this;
    }

    @Override
    public ConnectionImpl withFieldDefinitionValues(Map<String, String> fieldDefinitionValues) {
        if (isInCreateMode()) {
            this.createParameter.withFieldDefinitionValues(fieldDefinitionValues);
        } else {
            this.updateParameter.withFieldDefinitionValues(fieldDefinitionValues);
        }
        return this;
    }

}
