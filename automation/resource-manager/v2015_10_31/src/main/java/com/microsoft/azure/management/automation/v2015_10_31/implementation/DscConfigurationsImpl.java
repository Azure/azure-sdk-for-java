/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * abc
 */

package com.microsoft.azure.management.automation.v2015_10_31.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.automation.v2015_10_31.DscConfigurations;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.management.automation.v2015_10_31.DscConfiguration;
import com.microsoft.azure.Page;
import rx.Completable;

class DscConfigurationsImpl extends WrapperImpl<DscConfigurationsInner> implements DscConfigurations {
    private final AutomationManager manager;

    DscConfigurationsImpl(AutomationManager manager) {
        super(manager.inner().dscConfigurations());
        this.manager = manager;
    }

    public AutomationManager manager() {
        return this.manager;
    }

    @Override
    public DscConfigurationImpl defineConfiguration(String name) {
        return wrapConfigurationModel(name);
    }

    private DscConfigurationImpl wrapConfigurationModel(String name) {
        return new DscConfigurationImpl(name, this.manager());
    }

    private DscConfigurationImpl wrapDscConfigurationModel(DscConfigurationInner inner) {
        return  new DscConfigurationImpl(inner, manager());
    }

    private Observable<DscConfigurationInner> getDscConfigurationInnerUsingDscConfigurationsInnerAsync(String id) {
        String resourceGroupName = IdParsingUtils.getValueFromIdByName(id, "resourceGroups");
        String automationAccountName = IdParsingUtils.getValueFromIdByName(id, "automationAccounts");
        String configurationName = IdParsingUtils.getValueFromIdByName(id, "configurations");
        DscConfigurationsInner client = this.inner();
        return client.getAsync(resourceGroupName, automationAccountName, configurationName);
    }

    @Override
    public Observable<DscConfiguration> getAsync(String resourceGroupName, String automationAccountName, String configurationName) {
        DscConfigurationsInner client = this.inner();
        return client.getAsync(resourceGroupName, automationAccountName, configurationName)
        .map(new Func1<DscConfigurationInner, DscConfiguration>() {
            @Override
            public DscConfiguration call(DscConfigurationInner inner) {
                return wrapDscConfigurationModel(inner);
            }
       });
    }

    @Override
    public Observable<DscConfiguration> listByAutomationAccountAsync(final String resourceGroupName, final String automationAccountName) {
        DscConfigurationsInner client = this.inner();
        return client.listByAutomationAccountAsync(resourceGroupName, automationAccountName)
        .flatMapIterable(new Func1<Page<DscConfigurationInner>, Iterable<DscConfigurationInner>>() {
            @Override
            public Iterable<DscConfigurationInner> call(Page<DscConfigurationInner> page) {
                return page.items();
            }
        })
        .map(new Func1<DscConfigurationInner, DscConfiguration>() {
            @Override
            public DscConfiguration call(DscConfigurationInner inner) {
                return wrapDscConfigurationModel(inner);
            }
        });
    }

    @Override
    public Completable deleteAsync(String resourceGroupName, String automationAccountName, String configurationName) {
        DscConfigurationsInner client = this.inner();
        return client.deleteAsync(resourceGroupName, automationAccountName, configurationName).toCompletable();
    }

    @Override
    public Completable getContentAsync(String resourceGroupName, String automationAccountName, String configurationName) {
        DscConfigurationsInner client = this.inner();
        return client.getContentAsync(resourceGroupName, automationAccountName, configurationName).toCompletable();
    }

}
