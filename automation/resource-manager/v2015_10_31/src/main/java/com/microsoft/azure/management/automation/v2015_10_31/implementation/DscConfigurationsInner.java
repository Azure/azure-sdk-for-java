/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.automation.v2015_10_31.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.automation.v2015_10_31.DscConfigurationCreateOrUpdateParameters;
import com.microsoft.azure.management.automation.v2015_10_31.DscConfigurationUpdateParameters;
import com.microsoft.azure.management.automation.v2015_10_31.ErrorResponseException;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.PATCH;
import retrofit2.http.Path;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in DscConfigurations.
 */
public class DscConfigurationsInner {
    /** The Retrofit service to perform REST calls. */
    private DscConfigurationsService service;
    /** The service client containing this operation class. */
    private AutomationClientImpl client;

    /**
     * Initializes an instance of DscConfigurationsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public DscConfigurationsInner(Retrofit retrofit, AutomationClientImpl client) {
        this.service = retrofit.create(DscConfigurationsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for DscConfigurations to be
     * used by Retrofit to perform actually REST calls.
     */
    interface DscConfigurationsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.automation.v2015_10_31.DscConfigurations delete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/configurations/{configurationName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("resourceGroupName") String resourceGroupName, @Path("automationAccountName") String automationAccountName, @Path("configurationName") String configurationName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.automation.v2015_10_31.DscConfigurations get" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/configurations/{configurationName}")
        Observable<Response<ResponseBody>> get(@Path("resourceGroupName") String resourceGroupName, @Path("automationAccountName") String automationAccountName, @Path("configurationName") String configurationName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.automation.v2015_10_31.DscConfigurations createOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/configurations/{configurationName}")
        Observable<Response<ResponseBody>> createOrUpdate(@Path("resourceGroupName") String resourceGroupName, @Path("automationAccountName") String automationAccountName, @Path("configurationName") String configurationName, @Path("subscriptionId") String subscriptionId, @Body DscConfigurationCreateOrUpdateParameters parameters, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.automation.v2015_10_31.DscConfigurations update" })
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/configurations/{configurationName}")
        Observable<Response<ResponseBody>> update(@Path("resourceGroupName") String resourceGroupName, @Path("automationAccountName") String automationAccountName, @Path("configurationName") String configurationName, @Path("subscriptionId") String subscriptionId, @Body DscConfigurationUpdateParameters parameters, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.automation.v2015_10_31.DscConfigurations getContent" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/configurations/{configurationName}/content")
        Observable<Response<ResponseBody>> getContent(@Path("resourceGroupName") String resourceGroupName, @Path("automationAccountName") String automationAccountName, @Path("configurationName") String configurationName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.automation.v2015_10_31.DscConfigurations listByAutomationAccount" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/configurations")
        Observable<Response<ResponseBody>> listByAutomationAccount(@Path("resourceGroupName") String resourceGroupName, @Path("automationAccountName") String automationAccountName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Query("$filter") String filter, @Query("$skip") Integer skip, @Query("$top") Integer top, @Query("$inlinecount") String inlinecount, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.automation.v2015_10_31.DscConfigurations listByAutomationAccountNext" })
        @GET
        Observable<Response<ResponseBody>> listByAutomationAccountNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Delete the dsc configuration identified by configuration name.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @param configurationName The configuration name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String resourceGroupName, String automationAccountName, String configurationName) {
        deleteWithServiceResponseAsync(resourceGroupName, automationAccountName, configurationName).toBlocking().single().body();
    }

    /**
     * Delete the dsc configuration identified by configuration name.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @param configurationName The configuration name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String resourceGroupName, String automationAccountName, String configurationName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(resourceGroupName, automationAccountName, configurationName), serviceCallback);
    }

    /**
     * Delete the dsc configuration identified by configuration name.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @param configurationName The configuration name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> deleteAsync(String resourceGroupName, String automationAccountName, String configurationName) {
        return deleteWithServiceResponseAsync(resourceGroupName, automationAccountName, configurationName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Delete the dsc configuration identified by configuration name.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @param configurationName The configuration name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String resourceGroupName, String automationAccountName, String configurationName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (automationAccountName == null) {
            throw new IllegalArgumentException("Parameter automationAccountName is required and cannot be null.");
        }
        if (configurationName == null) {
            throw new IllegalArgumentException("Parameter configurationName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        final String apiVersion = "2015-10-31";
        return service.delete(resourceGroupName, automationAccountName, configurationName, this.client.subscriptionId(), apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> deleteDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Retrieve the configuration identified by configuration name.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @param configurationName The configuration name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the DscConfigurationInner object if successful.
     */
    public DscConfigurationInner get(String resourceGroupName, String automationAccountName, String configurationName) {
        return getWithServiceResponseAsync(resourceGroupName, automationAccountName, configurationName).toBlocking().single().body();
    }

    /**
     * Retrieve the configuration identified by configuration name.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @param configurationName The configuration name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<DscConfigurationInner> getAsync(String resourceGroupName, String automationAccountName, String configurationName, final ServiceCallback<DscConfigurationInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(resourceGroupName, automationAccountName, configurationName), serviceCallback);
    }

    /**
     * Retrieve the configuration identified by configuration name.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @param configurationName The configuration name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DscConfigurationInner object
     */
    public Observable<DscConfigurationInner> getAsync(String resourceGroupName, String automationAccountName, String configurationName) {
        return getWithServiceResponseAsync(resourceGroupName, automationAccountName, configurationName).map(new Func1<ServiceResponse<DscConfigurationInner>, DscConfigurationInner>() {
            @Override
            public DscConfigurationInner call(ServiceResponse<DscConfigurationInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Retrieve the configuration identified by configuration name.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @param configurationName The configuration name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DscConfigurationInner object
     */
    public Observable<ServiceResponse<DscConfigurationInner>> getWithServiceResponseAsync(String resourceGroupName, String automationAccountName, String configurationName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (automationAccountName == null) {
            throw new IllegalArgumentException("Parameter automationAccountName is required and cannot be null.");
        }
        if (configurationName == null) {
            throw new IllegalArgumentException("Parameter configurationName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        final String apiVersion = "2015-10-31";
        return service.get(resourceGroupName, automationAccountName, configurationName, this.client.subscriptionId(), apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<DscConfigurationInner>>>() {
                @Override
                public Observable<ServiceResponse<DscConfigurationInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<DscConfigurationInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<DscConfigurationInner> getDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<DscConfigurationInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<DscConfigurationInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Create the configuration identified by configuration name.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @param configurationName The create or update parameters for configuration.
     * @param parameters The create or update parameters for configuration.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the DscConfigurationInner object if successful.
     */
    public DscConfigurationInner createOrUpdate(String resourceGroupName, String automationAccountName, String configurationName, DscConfigurationCreateOrUpdateParameters parameters) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, automationAccountName, configurationName, parameters).toBlocking().single().body();
    }

    /**
     * Create the configuration identified by configuration name.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @param configurationName The create or update parameters for configuration.
     * @param parameters The create or update parameters for configuration.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<DscConfigurationInner> createOrUpdateAsync(String resourceGroupName, String automationAccountName, String configurationName, DscConfigurationCreateOrUpdateParameters parameters, final ServiceCallback<DscConfigurationInner> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateWithServiceResponseAsync(resourceGroupName, automationAccountName, configurationName, parameters), serviceCallback);
    }

    /**
     * Create the configuration identified by configuration name.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @param configurationName The create or update parameters for configuration.
     * @param parameters The create or update parameters for configuration.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DscConfigurationInner object
     */
    public Observable<DscConfigurationInner> createOrUpdateAsync(String resourceGroupName, String automationAccountName, String configurationName, DscConfigurationCreateOrUpdateParameters parameters) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, automationAccountName, configurationName, parameters).map(new Func1<ServiceResponse<DscConfigurationInner>, DscConfigurationInner>() {
            @Override
            public DscConfigurationInner call(ServiceResponse<DscConfigurationInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create the configuration identified by configuration name.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @param configurationName The create or update parameters for configuration.
     * @param parameters The create or update parameters for configuration.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DscConfigurationInner object
     */
    public Observable<ServiceResponse<DscConfigurationInner>> createOrUpdateWithServiceResponseAsync(String resourceGroupName, String automationAccountName, String configurationName, DscConfigurationCreateOrUpdateParameters parameters) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (automationAccountName == null) {
            throw new IllegalArgumentException("Parameter automationAccountName is required and cannot be null.");
        }
        if (configurationName == null) {
            throw new IllegalArgumentException("Parameter configurationName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        Validator.validate(parameters);
        final String apiVersion = "2015-10-31";
        return service.createOrUpdate(resourceGroupName, automationAccountName, configurationName, this.client.subscriptionId(), parameters, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<DscConfigurationInner>>>() {
                @Override
                public Observable<ServiceResponse<DscConfigurationInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<DscConfigurationInner> clientResponse = createOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<DscConfigurationInner> createOrUpdateDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<DscConfigurationInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<DscConfigurationInner>() { }.getType())
                .register(201, new TypeToken<DscConfigurationInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Create the configuration identified by configuration name.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @param configurationName The create or update parameters for configuration.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the DscConfigurationInner object if successful.
     */
    public DscConfigurationInner update(String resourceGroupName, String automationAccountName, String configurationName) {
        return updateWithServiceResponseAsync(resourceGroupName, automationAccountName, configurationName).toBlocking().single().body();
    }

    /**
     * Create the configuration identified by configuration name.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @param configurationName The create or update parameters for configuration.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<DscConfigurationInner> updateAsync(String resourceGroupName, String automationAccountName, String configurationName, final ServiceCallback<DscConfigurationInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(resourceGroupName, automationAccountName, configurationName), serviceCallback);
    }

    /**
     * Create the configuration identified by configuration name.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @param configurationName The create or update parameters for configuration.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DscConfigurationInner object
     */
    public Observable<DscConfigurationInner> updateAsync(String resourceGroupName, String automationAccountName, String configurationName) {
        return updateWithServiceResponseAsync(resourceGroupName, automationAccountName, configurationName).map(new Func1<ServiceResponse<DscConfigurationInner>, DscConfigurationInner>() {
            @Override
            public DscConfigurationInner call(ServiceResponse<DscConfigurationInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create the configuration identified by configuration name.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @param configurationName The create or update parameters for configuration.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DscConfigurationInner object
     */
    public Observable<ServiceResponse<DscConfigurationInner>> updateWithServiceResponseAsync(String resourceGroupName, String automationAccountName, String configurationName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (automationAccountName == null) {
            throw new IllegalArgumentException("Parameter automationAccountName is required and cannot be null.");
        }
        if (configurationName == null) {
            throw new IllegalArgumentException("Parameter configurationName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        final String apiVersion = "2015-10-31";
        final DscConfigurationUpdateParameters parameters = null;
        return service.update(resourceGroupName, automationAccountName, configurationName, this.client.subscriptionId(), parameters, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<DscConfigurationInner>>>() {
                @Override
                public Observable<ServiceResponse<DscConfigurationInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<DscConfigurationInner> clientResponse = updateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Create the configuration identified by configuration name.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @param configurationName The create or update parameters for configuration.
     * @param parameters The create or update parameters for configuration.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the DscConfigurationInner object if successful.
     */
    public DscConfigurationInner update(String resourceGroupName, String automationAccountName, String configurationName, DscConfigurationUpdateParameters parameters) {
        return updateWithServiceResponseAsync(resourceGroupName, automationAccountName, configurationName, parameters).toBlocking().single().body();
    }

    /**
     * Create the configuration identified by configuration name.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @param configurationName The create or update parameters for configuration.
     * @param parameters The create or update parameters for configuration.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<DscConfigurationInner> updateAsync(String resourceGroupName, String automationAccountName, String configurationName, DscConfigurationUpdateParameters parameters, final ServiceCallback<DscConfigurationInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(resourceGroupName, automationAccountName, configurationName, parameters), serviceCallback);
    }

    /**
     * Create the configuration identified by configuration name.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @param configurationName The create or update parameters for configuration.
     * @param parameters The create or update parameters for configuration.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DscConfigurationInner object
     */
    public Observable<DscConfigurationInner> updateAsync(String resourceGroupName, String automationAccountName, String configurationName, DscConfigurationUpdateParameters parameters) {
        return updateWithServiceResponseAsync(resourceGroupName, automationAccountName, configurationName, parameters).map(new Func1<ServiceResponse<DscConfigurationInner>, DscConfigurationInner>() {
            @Override
            public DscConfigurationInner call(ServiceResponse<DscConfigurationInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create the configuration identified by configuration name.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @param configurationName The create or update parameters for configuration.
     * @param parameters The create or update parameters for configuration.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DscConfigurationInner object
     */
    public Observable<ServiceResponse<DscConfigurationInner>> updateWithServiceResponseAsync(String resourceGroupName, String automationAccountName, String configurationName, DscConfigurationUpdateParameters parameters) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (automationAccountName == null) {
            throw new IllegalArgumentException("Parameter automationAccountName is required and cannot be null.");
        }
        if (configurationName == null) {
            throw new IllegalArgumentException("Parameter configurationName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        Validator.validate(parameters);
        final String apiVersion = "2015-10-31";
        return service.update(resourceGroupName, automationAccountName, configurationName, this.client.subscriptionId(), parameters, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<DscConfigurationInner>>>() {
                @Override
                public Observable<ServiceResponse<DscConfigurationInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<DscConfigurationInner> clientResponse = updateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<DscConfigurationInner> updateDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<DscConfigurationInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<DscConfigurationInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Retrieve the configuration script identified by configuration name.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @param configurationName The configuration name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the String object if successful.
     */
    public String getContent(String resourceGroupName, String automationAccountName, String configurationName) {
        return getContentWithServiceResponseAsync(resourceGroupName, automationAccountName, configurationName).toBlocking().single().body();
    }

    /**
     * Retrieve the configuration script identified by configuration name.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @param configurationName The configuration name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<String> getContentAsync(String resourceGroupName, String automationAccountName, String configurationName, final ServiceCallback<String> serviceCallback) {
        return ServiceFuture.fromResponse(getContentWithServiceResponseAsync(resourceGroupName, automationAccountName, configurationName), serviceCallback);
    }

    /**
     * Retrieve the configuration script identified by configuration name.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @param configurationName The configuration name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    public Observable<String> getContentAsync(String resourceGroupName, String automationAccountName, String configurationName) {
        return getContentWithServiceResponseAsync(resourceGroupName, automationAccountName, configurationName).map(new Func1<ServiceResponse<String>, String>() {
            @Override
            public String call(ServiceResponse<String> response) {
                return response.body();
            }
        });
    }

    /**
     * Retrieve the configuration script identified by configuration name.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @param configurationName The configuration name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    public Observable<ServiceResponse<String>> getContentWithServiceResponseAsync(String resourceGroupName, String automationAccountName, String configurationName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (automationAccountName == null) {
            throw new IllegalArgumentException("Parameter automationAccountName is required and cannot be null.");
        }
        if (configurationName == null) {
            throw new IllegalArgumentException("Parameter configurationName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        final String apiVersion = "2015-10-31";
        return service.getContent(resourceGroupName, automationAccountName, configurationName, this.client.subscriptionId(), apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<String>>>() {
                @Override
                public Observable<ServiceResponse<String>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<String> clientResponse = getContentDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<String> getContentDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<String, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<String>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Retrieve a list of configurations.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;DscConfigurationInner&gt; object if successful.
     */
    public PagedList<DscConfigurationInner> listByAutomationAccount(final String resourceGroupName, final String automationAccountName) {
        ServiceResponse<Page<DscConfigurationInner>> response = listByAutomationAccountSinglePageAsync(resourceGroupName, automationAccountName).toBlocking().single();
        return new PagedList<DscConfigurationInner>(response.body()) {
            @Override
            public Page<DscConfigurationInner> nextPage(String nextPageLink) {
                return listByAutomationAccountNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Retrieve a list of configurations.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<DscConfigurationInner>> listByAutomationAccountAsync(final String resourceGroupName, final String automationAccountName, final ListOperationCallback<DscConfigurationInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByAutomationAccountSinglePageAsync(resourceGroupName, automationAccountName),
            new Func1<String, Observable<ServiceResponse<Page<DscConfigurationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DscConfigurationInner>>> call(String nextPageLink) {
                    return listByAutomationAccountNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Retrieve a list of configurations.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;DscConfigurationInner&gt; object
     */
    public Observable<Page<DscConfigurationInner>> listByAutomationAccountAsync(final String resourceGroupName, final String automationAccountName) {
        return listByAutomationAccountWithServiceResponseAsync(resourceGroupName, automationAccountName)
            .map(new Func1<ServiceResponse<Page<DscConfigurationInner>>, Page<DscConfigurationInner>>() {
                @Override
                public Page<DscConfigurationInner> call(ServiceResponse<Page<DscConfigurationInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Retrieve a list of configurations.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;DscConfigurationInner&gt; object
     */
    public Observable<ServiceResponse<Page<DscConfigurationInner>>> listByAutomationAccountWithServiceResponseAsync(final String resourceGroupName, final String automationAccountName) {
        return listByAutomationAccountSinglePageAsync(resourceGroupName, automationAccountName)
            .concatMap(new Func1<ServiceResponse<Page<DscConfigurationInner>>, Observable<ServiceResponse<Page<DscConfigurationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DscConfigurationInner>>> call(ServiceResponse<Page<DscConfigurationInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByAutomationAccountNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Retrieve a list of configurations.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;DscConfigurationInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<DscConfigurationInner>>> listByAutomationAccountSinglePageAsync(final String resourceGroupName, final String automationAccountName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (automationAccountName == null) {
            throw new IllegalArgumentException("Parameter automationAccountName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        final String apiVersion = "2015-10-31";
        final String filter = null;
        final Integer skip = null;
        final Integer top = null;
        final String inlinecount = null;
        return service.listByAutomationAccount(resourceGroupName, automationAccountName, this.client.subscriptionId(), apiVersion, filter, skip, top, inlinecount, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<DscConfigurationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DscConfigurationInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<DscConfigurationInner>> result = listByAutomationAccountDelegate(response);
                        return Observable.just(new ServiceResponse<Page<DscConfigurationInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Retrieve a list of configurations.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @param filter The filter to apply on the operation.
     * @param skip The number of rows to skip.
     * @param top The the number of rows to take.
     * @param inlinecount Return total rows.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;DscConfigurationInner&gt; object if successful.
     */
    public PagedList<DscConfigurationInner> listByAutomationAccount(final String resourceGroupName, final String automationAccountName, final String filter, final Integer skip, final Integer top, final String inlinecount) {
        ServiceResponse<Page<DscConfigurationInner>> response = listByAutomationAccountSinglePageAsync(resourceGroupName, automationAccountName, filter, skip, top, inlinecount).toBlocking().single();
        return new PagedList<DscConfigurationInner>(response.body()) {
            @Override
            public Page<DscConfigurationInner> nextPage(String nextPageLink) {
                return listByAutomationAccountNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Retrieve a list of configurations.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @param filter The filter to apply on the operation.
     * @param skip The number of rows to skip.
     * @param top The the number of rows to take.
     * @param inlinecount Return total rows.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<DscConfigurationInner>> listByAutomationAccountAsync(final String resourceGroupName, final String automationAccountName, final String filter, final Integer skip, final Integer top, final String inlinecount, final ListOperationCallback<DscConfigurationInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByAutomationAccountSinglePageAsync(resourceGroupName, automationAccountName, filter, skip, top, inlinecount),
            new Func1<String, Observable<ServiceResponse<Page<DscConfigurationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DscConfigurationInner>>> call(String nextPageLink) {
                    return listByAutomationAccountNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Retrieve a list of configurations.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @param filter The filter to apply on the operation.
     * @param skip The number of rows to skip.
     * @param top The the number of rows to take.
     * @param inlinecount Return total rows.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;DscConfigurationInner&gt; object
     */
    public Observable<Page<DscConfigurationInner>> listByAutomationAccountAsync(final String resourceGroupName, final String automationAccountName, final String filter, final Integer skip, final Integer top, final String inlinecount) {
        return listByAutomationAccountWithServiceResponseAsync(resourceGroupName, automationAccountName, filter, skip, top, inlinecount)
            .map(new Func1<ServiceResponse<Page<DscConfigurationInner>>, Page<DscConfigurationInner>>() {
                @Override
                public Page<DscConfigurationInner> call(ServiceResponse<Page<DscConfigurationInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Retrieve a list of configurations.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @param filter The filter to apply on the operation.
     * @param skip The number of rows to skip.
     * @param top The the number of rows to take.
     * @param inlinecount Return total rows.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;DscConfigurationInner&gt; object
     */
    public Observable<ServiceResponse<Page<DscConfigurationInner>>> listByAutomationAccountWithServiceResponseAsync(final String resourceGroupName, final String automationAccountName, final String filter, final Integer skip, final Integer top, final String inlinecount) {
        return listByAutomationAccountSinglePageAsync(resourceGroupName, automationAccountName, filter, skip, top, inlinecount)
            .concatMap(new Func1<ServiceResponse<Page<DscConfigurationInner>>, Observable<ServiceResponse<Page<DscConfigurationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DscConfigurationInner>>> call(ServiceResponse<Page<DscConfigurationInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByAutomationAccountNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Retrieve a list of configurations.
     *
    ServiceResponse<PageImpl<DscConfigurationInner>> * @param resourceGroupName Name of an Azure Resource group.
    ServiceResponse<PageImpl<DscConfigurationInner>> * @param automationAccountName The name of the automation account.
    ServiceResponse<PageImpl<DscConfigurationInner>> * @param filter The filter to apply on the operation.
    ServiceResponse<PageImpl<DscConfigurationInner>> * @param skip The number of rows to skip.
    ServiceResponse<PageImpl<DscConfigurationInner>> * @param top The the number of rows to take.
    ServiceResponse<PageImpl<DscConfigurationInner>> * @param inlinecount Return total rows.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;DscConfigurationInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<DscConfigurationInner>>> listByAutomationAccountSinglePageAsync(final String resourceGroupName, final String automationAccountName, final String filter, final Integer skip, final Integer top, final String inlinecount) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (automationAccountName == null) {
            throw new IllegalArgumentException("Parameter automationAccountName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        final String apiVersion = "2015-10-31";
        return service.listByAutomationAccount(resourceGroupName, automationAccountName, this.client.subscriptionId(), apiVersion, filter, skip, top, inlinecount, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<DscConfigurationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DscConfigurationInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<DscConfigurationInner>> result = listByAutomationAccountDelegate(response);
                        return Observable.just(new ServiceResponse<Page<DscConfigurationInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<DscConfigurationInner>> listByAutomationAccountDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<DscConfigurationInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<DscConfigurationInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Retrieve a list of configurations.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;DscConfigurationInner&gt; object if successful.
     */
    public PagedList<DscConfigurationInner> listByAutomationAccountNext(final String nextPageLink) {
        ServiceResponse<Page<DscConfigurationInner>> response = listByAutomationAccountNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<DscConfigurationInner>(response.body()) {
            @Override
            public Page<DscConfigurationInner> nextPage(String nextPageLink) {
                return listByAutomationAccountNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Retrieve a list of configurations.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<DscConfigurationInner>> listByAutomationAccountNextAsync(final String nextPageLink, final ServiceFuture<List<DscConfigurationInner>> serviceFuture, final ListOperationCallback<DscConfigurationInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByAutomationAccountNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<DscConfigurationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DscConfigurationInner>>> call(String nextPageLink) {
                    return listByAutomationAccountNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Retrieve a list of configurations.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;DscConfigurationInner&gt; object
     */
    public Observable<Page<DscConfigurationInner>> listByAutomationAccountNextAsync(final String nextPageLink) {
        return listByAutomationAccountNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<DscConfigurationInner>>, Page<DscConfigurationInner>>() {
                @Override
                public Page<DscConfigurationInner> call(ServiceResponse<Page<DscConfigurationInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Retrieve a list of configurations.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;DscConfigurationInner&gt; object
     */
    public Observable<ServiceResponse<Page<DscConfigurationInner>>> listByAutomationAccountNextWithServiceResponseAsync(final String nextPageLink) {
        return listByAutomationAccountNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<DscConfigurationInner>>, Observable<ServiceResponse<Page<DscConfigurationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DscConfigurationInner>>> call(ServiceResponse<Page<DscConfigurationInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByAutomationAccountNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Retrieve a list of configurations.
     *
    ServiceResponse<PageImpl<DscConfigurationInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;DscConfigurationInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<DscConfigurationInner>>> listByAutomationAccountNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByAutomationAccountNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<DscConfigurationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DscConfigurationInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<DscConfigurationInner>> result = listByAutomationAccountNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<DscConfigurationInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<DscConfigurationInner>> listByAutomationAccountNextDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<DscConfigurationInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<DscConfigurationInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

}
