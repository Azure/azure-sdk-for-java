/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.automation.v2015_10_31.implementation;

import com.microsoft.azure.management.automation.v2015_10_31.Certificate;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import com.microsoft.azure.management.automation.v2015_10_31.CertificateUpdateParameters;
import com.microsoft.azure.management.automation.v2015_10_31.CertificateCreateOrUpdateParameters;
import org.joda.time.DateTime;
import rx.functions.Func1;

class CertificateImpl extends CreatableUpdatableImpl<Certificate, CertificateInner, CertificateImpl> implements Certificate, Certificate.Definition, Certificate.Update {
    private final AutomationManager manager;
    private String resourceGroupName;
    private String automationAccountName;
    private String certificateName;
    private CertificateCreateOrUpdateParameters createParameter;
    private CertificateUpdateParameters updateParameter;

    CertificateImpl(String name, AutomationManager manager) {
        super(name, new CertificateInner());
        this.manager = manager;
        // Set resource name
        this.certificateName = name;
        //
        this.createParameter = new CertificateCreateOrUpdateParameters();
        this.updateParameter = new CertificateUpdateParameters();
    }

    CertificateImpl(CertificateInner inner, AutomationManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.certificateName = inner.name();
        // resource ancestor names
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.automationAccountName = IdParsingUtils.getValueFromIdByName(inner.id(), "automationAccounts");
        this.certificateName = IdParsingUtils.getValueFromIdByName(inner.id(), "certificates");
        //
        this.createParameter = new CertificateCreateOrUpdateParameters();
        this.updateParameter = new CertificateUpdateParameters();
    }

    @Override
    public AutomationManager manager() {
        return this.manager;
    }

    @Override
    public Observable<Certificate> createResourceAsync() {
        CertificatesInner client = this.manager().inner().certificates();
        return client.createOrUpdateAsync(this.resourceGroupName, this.automationAccountName, this.certificateName, this.createParameter)
            .map(new Func1<CertificateInner, CertificateInner>() {
               @Override
               public CertificateInner call(CertificateInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<Certificate> updateResourceAsync() {
        CertificatesInner client = this.manager().inner().certificates();
        return client.updateAsync(this.resourceGroupName, this.automationAccountName, this.certificateName, this.updateParameter)
            .map(new Func1<CertificateInner, CertificateInner>() {
               @Override
               public CertificateInner call(CertificateInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<CertificateInner> getInnerAsync() {
        CertificatesInner client = this.manager().inner().certificates();
        return client.getAsync(this.resourceGroupName, this.automationAccountName, this.certificateName);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }

    private void resetCreateUpdateParameters() {
        this.createParameter = new CertificateCreateOrUpdateParameters();
        this.updateParameter = new CertificateUpdateParameters();
    }

    @Override
    public DateTime creationTime() {
        return this.inner().creationTime();
    }

    @Override
    public String description() {
        return this.inner().description();
    }

    @Override
    public DateTime expiryTime() {
        return this.inner().expiryTime();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public boolean isExportable() {
        return this.inner().isExportable();
    }

    @Override
    public DateTime lastModifiedTime() {
        return this.inner().lastModifiedTime();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public String thumbprint() {
        return this.inner().thumbprint();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public CertificateImpl withExistingAutomationAccount(String resourceGroupName, String automationAccountName) {
        this.resourceGroupName = resourceGroupName;
        this.automationAccountName = automationAccountName;
        return this;
    }

    @Override
    public CertificateImpl withBase64Value(String base64Value) {
        this.createParameter.withBase64Value(base64Value);
        return this;
    }

    @Override
    public CertificateImpl withIsExportable(boolean isExportable) {
        this.createParameter.withIsExportable(isExportable);
        return this;
    }

    @Override
    public CertificateImpl withThumbprint(String thumbprint) {
        this.createParameter.withThumbprint(thumbprint);
        return this;
    }

    @Override
    public CertificateImpl withName(String name) {
        if (isInCreateMode()) {
            this.createParameter.withName(name);
        } else {
            this.updateParameter.withName(name);
        }
        return this;
    }

    @Override
    public CertificateImpl withDescription(String description) {
        if (isInCreateMode()) {
            this.createParameter.withDescription(description);
        } else {
            this.updateParameter.withDescription(description);
        }
        return this;
    }

}
