/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.datalakestore.v2016_11_01;

import com.microsoft.azure.arm.model.HasInner;
import com.microsoft.azure.arm.resources.models.Resource;
import com.microsoft.azure.arm.resources.models.GroupableResourceCore;
import com.microsoft.azure.arm.resources.models.HasResourceGroup;
import com.microsoft.azure.arm.model.Refreshable;
import com.microsoft.azure.arm.model.Updatable;
import com.microsoft.azure.arm.model.Appliable;
import com.microsoft.azure.arm.model.Creatable;
import com.microsoft.azure.arm.resources.models.HasManager;
import com.microsoft.azure.management.datalakestore.v2016_11_01.implementation.DataLakeStoreManager;
import java.util.List;
import java.util.UUID;
import org.joda.time.DateTime;
import com.microsoft.azure.management.datalakestore.v2016_11_01.implementation.DataLakeStoreAccountInner;

/**
 * Type representing DataLakeStoreAccount.
 */
public interface DataLakeStoreAccount extends HasInner<DataLakeStoreAccountInner>, Resource, GroupableResourceCore<DataLakeStoreManager, DataLakeStoreAccountInner>, HasResourceGroup, Refreshable<DataLakeStoreAccount>, Updatable<DataLakeStoreAccount.Update>, HasManager<DataLakeStoreManager> {
    /**
     * @return the accountId value.
     */
    UUID accountId();

    /**
     * @return the creationTime value.
     */
    DateTime creationTime();

    /**
     * @return the currentTier value.
     */
    TierType currentTier();

    /**
     * @return the defaultGroup value.
     */
    String defaultGroup();

    /**
     * @return the encryptionConfig value.
     */
    EncryptionConfig encryptionConfig();

    /**
     * @return the encryptionProvisioningState value.
     */
    EncryptionProvisioningState encryptionProvisioningState();

    /**
     * @return the encryptionState value.
     */
    EncryptionState encryptionState();

    /**
     * @return the endpoint value.
     */
    String endpoint();

    /**
     * @return the firewallAllowAzureIps value.
     */
    FirewallAllowAzureIpsState firewallAllowAzureIps();

    /**
     * @return the firewallRules value.
     */
    List<FirewallRule> firewallRules();

    /**
     * @return the firewallState value.
     */
    FirewallState firewallState();

    /**
     * @return the identity value.
     */
    EncryptionIdentity identity();

    /**
     * @return the lastModifiedTime value.
     */
    DateTime lastModifiedTime();

    /**
     * @return the newTier value.
     */
    TierType newTier();

    /**
     * @return the provisioningState value.
     */
    DataLakeStoreAccountStatus provisioningState();

    /**
     * @return the state value.
     */
    DataLakeStoreAccountState state();

    /**
     * @return the trustedIdProviders value.
     */
    List<TrustedIdProvider> trustedIdProviders();

    /**
     * @return the trustedIdProviderState value.
     */
    TrustedIdProviderState trustedIdProviderState();

    /**
     * @return the virtualNetworkRules value.
     */
    List<VirtualNetworkRule> virtualNetworkRules();

    /**
     * The entirety of the DataLakeStoreAccount definition.
     */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithGroup, DefinitionStages.WithCreate {
    }

    /**
     * Grouping of DataLakeStoreAccount definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of a DataLakeStoreAccount definition.
         */
        interface Blank extends GroupableResourceCore.DefinitionWithRegion<WithGroup> {
        }

        /**
         * The stage of the DataLakeStoreAccount definition allowing to specify the resource group.
         */
        interface WithGroup extends GroupableResourceCore.DefinitionStages.WithGroup<WithCreate> {
        }

        /**
         * The stage of the datalakestoreaccount definition allowing to specify DefaultGroup.
         */
        interface WithDefaultGroup {
            /**
             * Specifies defaultGroup.
             * @param defaultGroup The default owner group for all new folders and files created in the Data Lake Store account
             * @return the next definition stage
             */
            WithCreate withDefaultGroup(String defaultGroup);
        }

        /**
         * The stage of the datalakestoreaccount definition allowing to specify EncryptionConfig.
         */
        interface WithEncryptionConfig {
            /**
             * Specifies encryptionConfig.
             * @param encryptionConfig The Key Vault encryption configuration
             * @return the next definition stage
             */
            WithCreate withEncryptionConfig(EncryptionConfig encryptionConfig);
        }

        /**
         * The stage of the datalakestoreaccount definition allowing to specify EncryptionState.
         */
        interface WithEncryptionState {
            /**
             * Specifies encryptionState.
             * @param encryptionState The current state of encryption for this Data Lake Store account. Possible values include: 'Enabled', 'Disabled'
             * @return the next definition stage
             */
            WithCreate withEncryptionState(EncryptionState encryptionState);
        }

        /**
         * The stage of the datalakestoreaccount definition allowing to specify FirewallAllowAzureIps.
         */
        interface WithFirewallAllowAzureIps {
            /**
             * Specifies firewallAllowAzureIps.
             * @param firewallAllowAzureIps The current state of allowing or disallowing IPs originating within Azure through the firewall. If the firewall is disabled, this is not enforced. Possible values include: 'Enabled', 'Disabled'
             * @return the next definition stage
             */
            WithCreate withFirewallAllowAzureIps(FirewallAllowAzureIpsState firewallAllowAzureIps);
        }

        /**
         * The stage of the datalakestoreaccount definition allowing to specify FirewallRules.
         */
        interface WithFirewallRules {
            /**
             * Specifies firewallRules.
             * @param firewallRules The list of firewall rules associated with this Data Lake Store account
             * @return the next definition stage
             */
            WithCreate withFirewallRulesForCreate(List<CreateFirewallRuleWithAccountParameters> firewallRules);
        }

        /**
         * The stage of the datalakestoreaccount definition allowing to specify FirewallState.
         */
        interface WithFirewallState {
            /**
             * Specifies firewallState.
             * @param firewallState The current state of the IP address firewall for this Data Lake Store account. Possible values include: 'Enabled', 'Disabled'
             * @return the next definition stage
             */
            WithCreate withFirewallState(FirewallState firewallState);
        }

        /**
         * The stage of the datalakestoreaccount definition allowing to specify Identity.
         */
        interface WithIdentity {
            /**
             * Specifies identity.
             * @param identity The Key Vault encryption identity, if any
             * @return the next definition stage
             */
            WithCreate withIdentity(EncryptionIdentity identity);
        }

        /**
         * The stage of the datalakestoreaccount definition allowing to specify NewTier.
         */
        interface WithNewTier {
            /**
             * Specifies newTier.
             * @param newTier The commitment tier to use for next month. Possible values include: 'Consumption', 'Commitment_1TB', 'Commitment_10TB', 'Commitment_100TB', 'Commitment_500TB', 'Commitment_1PB', 'Commitment_5PB'
             * @return the next definition stage
             */
            WithCreate withNewTier(TierType newTier);
        }

        /**
         * The stage of the datalakestoreaccount definition allowing to specify TrustedIdProviders.
         */
        interface WithTrustedIdProviders {
            /**
             * Specifies trustedIdProviders.
             * @param trustedIdProviders The list of trusted identity providers associated with this Data Lake Store account
             * @return the next definition stage
             */
            WithCreate withTrustedIdProvidersForCreate(List<CreateTrustedIdProviderWithAccountParameters> trustedIdProviders);
        }

        /**
         * The stage of the datalakestoreaccount definition allowing to specify TrustedIdProviderState.
         */
        interface WithTrustedIdProviderState {
            /**
             * Specifies trustedIdProviderState.
             * @param trustedIdProviderState The current state of the trusted identity provider feature for this Data Lake Store account. Possible values include: 'Enabled', 'Disabled'
             * @return the next definition stage
             */
            WithCreate withTrustedIdProviderState(TrustedIdProviderState trustedIdProviderState);
        }

        /**
         * The stage of the datalakestoreaccount definition allowing to specify VirtualNetworkRules.
         */
        interface WithVirtualNetworkRules {
            /**
             * Specifies virtualNetworkRules.
             * @param virtualNetworkRules The list of virtual network rules associated with this Data Lake Store account
             * @return the next definition stage
             */
            WithCreate withVirtualNetworkRulesForCreate(List<CreateVirtualNetworkRuleWithAccountParameters> virtualNetworkRules);
        }

        /**
         * The stage of the definition which contains all the minimum required inputs for
         * the resource to be created (via {@link WithCreate#create()}), but also allows
         * for any other optional settings to be specified.
         */
        interface WithCreate extends Creatable<DataLakeStoreAccount>, Resource.DefinitionWithTags<WithCreate>, DefinitionStages.WithDefaultGroup, DefinitionStages.WithEncryptionConfig, DefinitionStages.WithEncryptionState, DefinitionStages.WithFirewallAllowAzureIps, DefinitionStages.WithFirewallRules, DefinitionStages.WithFirewallState, DefinitionStages.WithIdentity, DefinitionStages.WithNewTier, DefinitionStages.WithTrustedIdProviders, DefinitionStages.WithTrustedIdProviderState, DefinitionStages.WithVirtualNetworkRules {
        }
    }
    /**
     * The template for a DataLakeStoreAccount update operation, containing all the settings that can be modified.
     */
    interface Update extends Appliable<DataLakeStoreAccount>, Resource.UpdateWithTags<Update>, UpdateStages.WithDefaultGroup, UpdateStages.WithEncryptionConfig, UpdateStages.WithFirewallAllowAzureIps, UpdateStages.WithFirewallRules, UpdateStages.WithFirewallState, UpdateStages.WithNewTier, UpdateStages.WithTrustedIdProviders, UpdateStages.WithTrustedIdProviderState, UpdateStages.WithVirtualNetworkRules {
    }

    /**
     * Grouping of DataLakeStoreAccount update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the datalakestoreaccount update allowing to specify DefaultGroup.
         */
        interface WithDefaultGroup {
            /**
             * Specifies defaultGroup.
             * @param defaultGroup The default owner group for all new folders and files created in the Data Lake Store account
             * @return the next update stage
             */
            Update withDefaultGroup(String defaultGroup);
        }

        /**
         * The stage of the datalakestoreaccount update allowing to specify EncryptionConfig.
         */
        interface WithEncryptionConfig {
            /**
             * Specifies encryptionConfig.
             * @param encryptionConfig Used for rotation of user managed Key Vault keys. Can only be used to rotate a user managed encryption Key Vault key
             * @return the next update stage
             */
            Update withEncryptionConfig(UpdateEncryptionConfig encryptionConfig);
        }

        /**
         * The stage of the datalakestoreaccount update allowing to specify FirewallAllowAzureIps.
         */
        interface WithFirewallAllowAzureIps {
            /**
             * Specifies firewallAllowAzureIps.
             * @param firewallAllowAzureIps The current state of allowing or disallowing IPs originating within Azure through the firewall. If the firewall is disabled, this is not enforced. Possible values include: 'Enabled', 'Disabled'
             * @return the next update stage
             */
            Update withFirewallAllowAzureIps(FirewallAllowAzureIpsState firewallAllowAzureIps);
        }

        /**
         * The stage of the datalakestoreaccount update allowing to specify FirewallRules.
         */
        interface WithFirewallRules {
            /**
             * Specifies firewallRules.
             * @param firewallRules The list of firewall rules associated with this Data Lake Store account
             * @return the next update stage
             */
            Update withFirewallRulesForUpdate(List<UpdateFirewallRuleWithAccountParameters> firewallRules);
        }

        /**
         * The stage of the datalakestoreaccount update allowing to specify FirewallState.
         */
        interface WithFirewallState {
            /**
             * Specifies firewallState.
             * @param firewallState The current state of the IP address firewall for this Data Lake Store account. Disabling the firewall does not remove existing rules, they will just be ignored until the firewall is re-enabled. Possible values include: 'Enabled', 'Disabled'
             * @return the next update stage
             */
            Update withFirewallState(FirewallState firewallState);
        }

        /**
         * The stage of the datalakestoreaccount update allowing to specify NewTier.
         */
        interface WithNewTier {
            /**
             * Specifies newTier.
             * @param newTier The commitment tier to use for next month. Possible values include: 'Consumption', 'Commitment_1TB', 'Commitment_10TB', 'Commitment_100TB', 'Commitment_500TB', 'Commitment_1PB', 'Commitment_5PB'
             * @return the next update stage
             */
            Update withNewTier(TierType newTier);
        }

        /**
         * The stage of the datalakestoreaccount update allowing to specify TrustedIdProviders.
         */
        interface WithTrustedIdProviders {
            /**
             * Specifies trustedIdProviders.
             * @param trustedIdProviders The list of trusted identity providers associated with this Data Lake Store account
             * @return the next update stage
             */
            Update withTrustedIdProvidersForUpdate(List<UpdateTrustedIdProviderWithAccountParameters> trustedIdProviders);
        }

        /**
         * The stage of the datalakestoreaccount update allowing to specify TrustedIdProviderState.
         */
        interface WithTrustedIdProviderState {
            /**
             * Specifies trustedIdProviderState.
             * @param trustedIdProviderState The current state of the trusted identity provider feature for this Data Lake Store account. Disabling trusted identity provider functionality does not remove the providers, they will just be ignored until this feature is re-enabled. Possible values include: 'Enabled', 'Disabled'
             * @return the next update stage
             */
            Update withTrustedIdProviderState(TrustedIdProviderState trustedIdProviderState);
        }

        /**
         * The stage of the datalakestoreaccount update allowing to specify VirtualNetworkRules.
         */
        interface WithVirtualNetworkRules {
            /**
             * Specifies virtualNetworkRules.
             * @param virtualNetworkRules The list of virtual network rules associated with this Data Lake Store account
             * @return the next update stage
             */
            Update withVirtualNetworkRulesForUpdate(List<UpdateVirtualNetworkRuleWithAccountParameters> virtualNetworkRules);
        }

    }
}
