/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * def
 */

package com.microsoft.azure.management.datalakestore.v2015_10_01_preview.implementation;

import com.microsoft.azure.arm.resources.collection.implementation.GroupableResourcesCoreImpl;
import com.microsoft.azure.management.datalakestore.v2015_10_01_preview.Accounts;
import com.microsoft.azure.management.datalakestore.v2015_10_01_preview.DataLakeStoreAccount;
import rx.Observable;
import rx.Completable;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import com.microsoft.azure.arm.resources.ResourceUtilsCore;
import com.microsoft.azure.arm.utils.RXMapper;
import rx.functions.Func1;
import com.microsoft.azure.PagedList;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.datalakestore.v2015_10_01_preview.FirewallRule;

class AccountsImpl extends GroupableResourcesCoreImpl<DataLakeStoreAccount, DataLakeStoreAccountImpl, DataLakeStoreAccountInner, AccountsInner, DataLakeStoreManager>  implements Accounts {
    protected AccountsImpl(DataLakeStoreManager manager) {
        super(manager.inner().accounts(), manager);
    }

    @Override
    protected Observable<DataLakeStoreAccountInner> getInnerAsync(String resourceGroupName, String name) {
        AccountsInner client = this.inner();
        return client.getByResourceGroupAsync(resourceGroupName, name);
    }

    @Override
    protected Completable deleteInnerAsync(String resourceGroupName, String name) {
        AccountsInner client = this.inner();
        return client.deleteAsync(resourceGroupName, name).toCompletable();
    }

    @Override
    public Observable<String> deleteByIdsAsync(Collection<String> ids) {
        if (ids == null || ids.isEmpty()) {
            return Observable.empty();
        }
        Collection<Observable<String>> observables = new ArrayList<>();
        for (String id : ids) {
            final String resourceGroupName = ResourceUtilsCore.groupFromResourceId(id);
            final String name = ResourceUtilsCore.nameFromResourceId(id);
            Observable<String> o = RXMapper.map(this.inner().deleteAsync(resourceGroupName, name), id);
            observables.add(o);
        }
        return Observable.mergeDelayError(observables);
    }

    @Override
    public Observable<String> deleteByIdsAsync(String...ids) {
        return this.deleteByIdsAsync(new ArrayList<String>(Arrays.asList(ids)));
    }

    @Override
    public void deleteByIds(Collection<String> ids) {
        if (ids != null && !ids.isEmpty()) {
            this.deleteByIdsAsync(ids).toBlocking().last();
        }
    }

    @Override
    public void deleteByIds(String...ids) {
        this.deleteByIds(new ArrayList<String>(Arrays.asList(ids)));
    }

    @Override
    public PagedList<DataLakeStoreAccount> listByResourceGroup(String resourceGroupName) {
        AccountsInner client = this.inner();
        return this.wrapList(client.listByResourceGroup(resourceGroupName));
    }

    @Override
    public Observable<DataLakeStoreAccount> listByResourceGroupAsync(String resourceGroupName) {
        AccountsInner client = this.inner();
        return client.listByResourceGroupAsync(resourceGroupName)
        .flatMapIterable(new Func1<Page<DataLakeStoreAccountInner>, Iterable<DataLakeStoreAccountInner>>() {
            @Override
            public Iterable<DataLakeStoreAccountInner> call(Page<DataLakeStoreAccountInner> page) {
                return page.items();
            }
        })
        .map(new Func1<DataLakeStoreAccountInner, DataLakeStoreAccount>() {
            @Override
            public DataLakeStoreAccount call(DataLakeStoreAccountInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public PagedList<DataLakeStoreAccount> list() {
        AccountsInner client = this.inner();
        return this.wrapList(client.list());
    }

    @Override
    public Observable<DataLakeStoreAccount> listAsync() {
        AccountsInner client = this.inner();
        return client.listAsync()
        .flatMapIterable(new Func1<Page<DataLakeStoreAccountInner>, Iterable<DataLakeStoreAccountInner>>() {
            @Override
            public Iterable<DataLakeStoreAccountInner> call(Page<DataLakeStoreAccountInner> page) {
                return page.items();
            }
        })
        .map(new Func1<DataLakeStoreAccountInner, DataLakeStoreAccount>() {
            @Override
            public DataLakeStoreAccount call(DataLakeStoreAccountInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public DataLakeStoreAccountImpl define(String name) {
        return wrapModel(name);
    }

    @Override
    public Completable enableKeyVaultAsync(String resourceGroupName, String accountName) {
        AccountsInner client = this.inner();
        return client.enableKeyVaultAsync(resourceGroupName, accountName).toCompletable();
    }

    @Override
    protected DataLakeStoreAccountImpl wrapModel(DataLakeStoreAccountInner inner) {
        return  new DataLakeStoreAccountImpl(inner.name(), inner, manager());
    }

    @Override
    protected DataLakeStoreAccountImpl wrapModel(String name) {
        return new DataLakeStoreAccountImpl(name, new DataLakeStoreAccountInner(), this.manager());
    }

    @Override
    public FirewallRuleImpl defineFirewallRule(String name) {
        return wrapFirewallRuleModel(name);
    }

    private FirewallRuleImpl wrapFirewallRuleModel(String name) {
        return new FirewallRuleImpl(name, this.manager());
    }

    private FirewallRuleImpl wrapFirewallRuleModel(FirewallRuleInner inner) {
        return  new FirewallRuleImpl(inner, manager());
    }

    private Observable<FirewallRuleInner> getFirewallRuleInnerUsingAccountsInnerAsync(String id) {
        String resourceGroupName = IdParsingUtils.getValueFromIdByName(id, "resourceGroups");
        String accountName = IdParsingUtils.getValueFromIdByName(id, "accounts");
        String firewallRuleName = IdParsingUtils.getValueFromIdByName(id, "firewallRules");
        AccountsInner client = this.inner();
        return client.getFirewallRuleAsync(resourceGroupName, accountName, firewallRuleName);
    }

    @Override
    public Observable<FirewallRule> getFirewallRuleAsync(String resourceGroupName, String accountName, String firewallRuleName) {
        AccountsInner client = this.inner();
        return client.getFirewallRuleAsync(resourceGroupName, accountName, firewallRuleName)
        .map(new Func1<FirewallRuleInner, FirewallRule>() {
            @Override
            public FirewallRule call(FirewallRuleInner inner) {
                return wrapFirewallRuleModel(inner);
            }
       });
    }

    @Override
    public Observable<FirewallRule> listFirewallRulesAsync(final String resourceGroupName, final String accountName) {
        AccountsInner client = this.inner();
        return client.listFirewallRulesAsync(resourceGroupName, accountName)
        .flatMapIterable(new Func1<Page<FirewallRuleInner>, Iterable<FirewallRuleInner>>() {
            @Override
            public Iterable<FirewallRuleInner> call(Page<FirewallRuleInner> page) {
                return page.items();
            }
        })
        .map(new Func1<FirewallRuleInner, FirewallRule>() {
            @Override
            public FirewallRule call(FirewallRuleInner inner) {
                return wrapFirewallRuleModel(inner);
            }
        });
    }

    @Override
    public Completable deleteFirewallRuleAsync(String resourceGroupName, String accountName, String firewallRuleName) {
        AccountsInner client = this.inner();
        return client.deleteFirewallRuleAsync(resourceGroupName, accountName, firewallRuleName).toCompletable();
    }

}
