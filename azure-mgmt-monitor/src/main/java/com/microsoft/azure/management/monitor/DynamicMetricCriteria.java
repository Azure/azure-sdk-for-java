/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.monitor;

import org.joda.time.DateTime;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Criterion for dynamic threshold.
 */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "criterionType")
@JsonTypeName("DynamicThresholdCriterion")
public class DynamicMetricCriteria extends MultiMetricCriteria {
    /**
     * The condition used to compare the metric value against the threshold.
     */
    @JsonProperty(value = "operator", required = true)
    private Object operator;

    /**
     * The sensitivity of the threshold.
     */
    @JsonProperty(value = "alertSensitivity", required = true)
    private Object alertSensitivity;

    /**
     * Select minimum number of violations within the selected lookback time
     * window required to raise an alert.
     */
    @JsonProperty(value = "failingPeriods", required = true)
    private DynamicThresholdFailingPeriods failingPeriods;

    /**
     * Use this option to set the date from which to start learning the metric
     * historical data and calculate the dynamic thresholds.
     */
    @JsonProperty(value = "ignoreDataBefore")
    private DateTime ignoreDataBefore;

    /**
     * Get the condition used to compare the metric value against the threshold.
     *
     * @return the operator value
     */
    public Object operator() {
        return this.operator;
    }

    /**
     * Set the condition used to compare the metric value against the threshold.
     *
     * @param operator the operator value to set
     * @return the DynamicMetricCriteria object itself.
     */
    public DynamicMetricCriteria withOperator(Object operator) {
        this.operator = operator;
        return this;
    }

    /**
     * Get the sensitivity of the threshold.
     *
     * @return the alertSensitivity value
     */
    public Object alertSensitivity() {
        return this.alertSensitivity;
    }

    /**
     * Set the sensitivity of the threshold.
     *
     * @param alertSensitivity the alertSensitivity value to set
     * @return the DynamicMetricCriteria object itself.
     */
    public DynamicMetricCriteria withAlertSensitivity(Object alertSensitivity) {
        this.alertSensitivity = alertSensitivity;
        return this;
    }

    /**
     * Get select minimum number of violations within the selected lookback time window required to raise an alert.
     *
     * @return the failingPeriods value
     */
    public DynamicThresholdFailingPeriods failingPeriods() {
        return this.failingPeriods;
    }

    /**
     * Set select minimum number of violations within the selected lookback time window required to raise an alert.
     *
     * @param failingPeriods the failingPeriods value to set
     * @return the DynamicMetricCriteria object itself.
     */
    public DynamicMetricCriteria withFailingPeriods(DynamicThresholdFailingPeriods failingPeriods) {
        this.failingPeriods = failingPeriods;
        return this;
    }

    /**
     * Get use this option to set the date from which to start learning the metric historical data and calculate the dynamic thresholds.
     *
     * @return the ignoreDataBefore value
     */
    public DateTime ignoreDataBefore() {
        return this.ignoreDataBefore;
    }

    /**
     * Set use this option to set the date from which to start learning the metric historical data and calculate the dynamic thresholds.
     *
     * @param ignoreDataBefore the ignoreDataBefore value to set
     * @return the DynamicMetricCriteria object itself.
     */
    public DynamicMetricCriteria withIgnoreDataBefore(DateTime ignoreDataBefore) {
        this.ignoreDataBefore = ignoreDataBefore;
        return this;
    }

}
