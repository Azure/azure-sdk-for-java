/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.storagecache.v2019_11_01;

import com.microsoft.azure.arm.collection.SupportsCreating;
import rx.Completable;
import rx.Observable;
import com.microsoft.azure.management.storagecache.v2019_11_01.implementation.StorageTargetsInner;
import com.microsoft.azure.arm.model.HasInner;

/**
 * Type representing StorageTargets.
 */
public interface StorageTargets extends SupportsCreating<StorageTarget.DefinitionStages.Blank>, HasInner<StorageTargetsInner> {
    /**
     * Returns a Storage Target from a Cache.
     *
     * @param resourceGroupName Target resource group.
     * @param cacheName Name of Cache.
     * @param storageTargetName Name of the Storage Target.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<StorageTarget> getAsync(String resourceGroupName, String cacheName, String storageTargetName);

    /**
     * Returns a list of Storage Targets for the specified Cache.
     *
     * @param resourceGroupName Target resource group.
     * @param cacheName Name of Cache.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<StorageTarget> listByCacheAsync(final String resourceGroupName, final String cacheName);

    /**
     * Removes a Storage Target from a Cache. This operation is allowed at any time, but if the Cache is down or unhealthy, the actual removal of the Storage Target may be delayed until the Cache is healthy again. Note that if the Cache has data to flush to the Storage Target, the data will be flushed before the Storage Target will be deleted.
     *
     * @param resourceGroupName Target resource group.
     * @param cacheName Name of Cache.
     * @param storageTargetName Name of Storage Target.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable deleteAsync(String resourceGroupName, String cacheName, String storageTargetName);

}
