/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.delegatednetwork.2020-08-08-preview.implementation;

import com.microsoft.azure.arm.collection.InnerSupportsListing;
import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.management.delegatednetwork.2020-08-08-preview.ErrorResponseException;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in DelegatedNetworks.
 */
public class DelegatedNetworksInner implements InnerSupportsListing<DelegatedControllerInner> {
    /** The Retrofit service to perform REST calls. */
    private DelegatedNetworksService service;
    /** The service client containing this operation class. */
    private DNCImpl client;

    /**
     * Initializes an instance of DelegatedNetworksInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public DelegatedNetworksInner(Retrofit retrofit, DNCImpl client) {
        this.service = retrofit.create(DelegatedNetworksService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for DelegatedNetworks to be
     * used by Retrofit to perform actually REST calls.
     */
    interface DelegatedNetworksService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.delegatednetwork.2020-08-08-preview.DelegatedNetworks list" })
        @GET("subscriptions/{subscriptionId}/providers/Microsoft.DelegatedNetwork/delegatedControllers")
        Observable<Response<ResponseBody>> list(@Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.delegatednetwork.2020-08-08-preview.DelegatedNetworks listByResourceGroup" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DelegatedNetwork/delegatedControllers")
        Observable<Response<ResponseBody>> listByResourceGroup(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Get all the delegatedController resources in a subscription.
     *
     * @return the PagedList<DelegatedControllerInner> object if successful.
     */
    public PagedList<DelegatedControllerInner> list() {
        PageImpl<DelegatedControllerInner> page = new PageImpl<>();
        page.setItems(listWithServiceResponseAsync().toBlocking().single().body());
        page.setNextPageLink(null);
        return new PagedList<DelegatedControllerInner>(page) {
            @Override
            public Page<DelegatedControllerInner> nextPage(String nextPageLink) {
                return null;
            }
        };
    }

    /**
     * Get all the delegatedController resources in a subscription.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<DelegatedControllerInner>> listAsync(final ServiceCallback<List<DelegatedControllerInner>> serviceCallback) {
        return ServiceFuture.fromResponse(listWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Get all the delegatedController resources in a subscription.
     *
     * @return the observable to the List&lt;DelegatedControllerInner&gt; object
     */
    public Observable<Page<DelegatedControllerInner>> listAsync() {
        return listWithServiceResponseAsync().map(new Func1<ServiceResponse<List<DelegatedControllerInner>>, Page<DelegatedControllerInner>>() {
            @Override
            public Page<DelegatedControllerInner> call(ServiceResponse<List<DelegatedControllerInner>> response) {
                PageImpl<DelegatedControllerInner> page = new PageImpl<>();
                page.setItems(response.body());
                return page;
            }
        });
    }

    /**
     * Get all the delegatedController resources in a subscription.
     *
     * @return the observable to the List&lt;DelegatedControllerInner&gt; object
     */
    public Observable<ServiceResponse<List<DelegatedControllerInner>>> listWithServiceResponseAsync() {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.list(this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<DelegatedControllerInner>>>>() {
                @Override
                public Observable<ServiceResponse<List<DelegatedControllerInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<DelegatedControllerInner>> result = listDelegate(response);
                        List<DelegatedControllerInner> items = null;
                        if (result.body() != null) {
                            items = result.body().items();
                        }
                        ServiceResponse<List<DelegatedControllerInner>> clientResponse = new ServiceResponse<List<DelegatedControllerInner>>(items, result.response());
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<DelegatedControllerInner>> listDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<DelegatedControllerInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<DelegatedControllerInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Get all the delegatedController resources in a resource group.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given DelegatedNetwork resource is part. This name must be at least 1 character in length, and no more than 90.
     * @return the PagedList<DelegatedControllerInner> object if successful.
     */
    public PagedList<DelegatedControllerInner> listByResourceGroup(String resourceGroupName) {
        PageImpl<DelegatedControllerInner> page = new PageImpl<>();
        page.setItems(listByResourceGroupWithServiceResponseAsync(resourceGroupName).toBlocking().single().body());
        page.setNextPageLink(null);
        return new PagedList<DelegatedControllerInner>(page) {
            @Override
            public Page<DelegatedControllerInner> nextPage(String nextPageLink) {
                return null;
            }
        };
    }

    /**
     * Get all the delegatedController resources in a resource group.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given DelegatedNetwork resource is part. This name must be at least 1 character in length, and no more than 90.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<DelegatedControllerInner>> listByResourceGroupAsync(String resourceGroupName, final ServiceCallback<List<DelegatedControllerInner>> serviceCallback) {
        return ServiceFuture.fromResponse(listByResourceGroupWithServiceResponseAsync(resourceGroupName), serviceCallback);
    }

    /**
     * Get all the delegatedController resources in a resource group.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given DelegatedNetwork resource is part. This name must be at least 1 character in length, and no more than 90.
     * @return the observable to the List&lt;DelegatedControllerInner&gt; object
     */
    public Observable<Page<DelegatedControllerInner>> listByResourceGroupAsync(String resourceGroupName) {
        return listByResourceGroupWithServiceResponseAsync(resourceGroupName).map(new Func1<ServiceResponse<List<DelegatedControllerInner>>, Page<DelegatedControllerInner>>() {
            @Override
            public Page<DelegatedControllerInner> call(ServiceResponse<List<DelegatedControllerInner>> response) {
                PageImpl<DelegatedControllerInner> page = new PageImpl<>();
                page.setItems(response.body());
                return page;
            }
        });
    }

    /**
     * Get all the delegatedController resources in a resource group.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given DelegatedNetwork resource is part. This name must be at least 1 character in length, and no more than 90.
     * @return the observable to the List&lt;DelegatedControllerInner&gt; object
     */
    public Observable<ServiceResponse<List<DelegatedControllerInner>>> listByResourceGroupWithServiceResponseAsync(String resourceGroupName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByResourceGroup(this.client.subscriptionId(), resourceGroupName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<DelegatedControllerInner>>>>() {
                @Override
                public Observable<ServiceResponse<List<DelegatedControllerInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<DelegatedControllerInner>> result = listByResourceGroupDelegate(response);
                        List<DelegatedControllerInner> items = null;
                        if (result.body() != null) {
                            items = result.body().items();
                        }
                        ServiceResponse<List<DelegatedControllerInner>> clientResponse = new ServiceResponse<List<DelegatedControllerInner>>(items, result.response());
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<DelegatedControllerInner>> listByResourceGroupDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<DelegatedControllerInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<DelegatedControllerInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

}
