/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.delegatednetwork.2020-08-08-preview.implementation;

import com.microsoft.azure.arm.resources.models.implementation.GroupableResourceCoreImpl;
import com.microsoft.azure.management.delegatednetwork.2020-08-08-preview.Orchestrator;
import rx.Observable;
import com.microsoft.azure.management.delegatednetwork.2020-08-08-preview.OrchestratorIdentity;
import com.microsoft.azure.management.delegatednetwork.2020-08-08-preview.OrchestratorInstanceState;
import com.microsoft.azure.management.delegatednetwork.2020-08-08-preview.ControllerDetails;

class OrchestratorImpl extends GroupableResourceCoreImpl<Orchestrator, OrchestratorInner, OrchestratorImpl, DelegatedNetworkManager> implements Orchestrator, Orchestrator.Definition, Orchestrator.Update {
    OrchestratorImpl(String name, OrchestratorInner inner, DelegatedNetworkManager manager) {
        super(name, inner, manager);
    }

    @Override
    public Observable<Orchestrator> createResourceAsync() {
        OrchestratorInstanceServicesInner client = this.manager().inner().orchestratorInstanceServices();
        return client.createAsync(this.resourceGroupName(), this.name(), this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<Orchestrator> updateResourceAsync() {
        OrchestratorInstanceServicesInner client = this.manager().inner().orchestratorInstanceServices();
        return client.createAsync(this.resourceGroupName(), this.name(), this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<OrchestratorInner> getInnerAsync() {
        OrchestratorInstanceServicesInner client = this.manager().inner().orchestratorInstanceServices();
        return client.getByResourceGroupAsync(this.resourceGroupName(), this.name());
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public String apiServerEndpoint() {
        return this.inner().apiServerEndpoint();
    }

    @Override
    public String clusterRootCA() {
        return this.inner().clusterRootCA();
    }

    @Override
    public ControllerDetails controllerDetails() {
        return this.inner().controllerDetails();
    }

    @Override
    public OrchestratorIdentity identity() {
        return this.inner().identity();
    }

    @Override
    public String kind() {
        return this.inner().kind();
    }

    @Override
    public String orchestratorAppId() {
        return this.inner().orchestratorAppId();
    }

    @Override
    public String orchestratorTenantId() {
        return this.inner().orchestratorTenantId();
    }

    @Override
    public OrchestratorInstanceState provisioningState() {
        return this.inner().provisioningState();
    }

    @Override
    public String resourceGuid() {
        return this.inner().resourceGuid();
    }

    @Override
    public OrchestratorImpl withControllerDetails(ControllerDetails controllerDetails) {
        this.inner().withControllerDetails(controllerDetails);
        return this;
    }

    @Override
    public OrchestratorImpl withKind(String kind) {
        this.inner().withKind(kind);
        return this;
    }

    @Override
    public OrchestratorImpl withApiServerEndpoint(String apiServerEndpoint) {
        this.inner().withApiServerEndpoint(apiServerEndpoint);
        return this;
    }

    @Override
    public OrchestratorImpl withClusterRootCA(String clusterRootCA) {
        this.inner().withClusterRootCA(clusterRootCA);
        return this;
    }

    @Override
    public OrchestratorImpl withIdentity(OrchestratorIdentity identity) {
        this.inner().withIdentity(identity);
        return this;
    }

    @Override
    public OrchestratorImpl withOrchestratorAppId(String orchestratorAppId) {
        this.inner().withOrchestratorAppId(orchestratorAppId);
        return this;
    }

    @Override
    public OrchestratorImpl withOrchestratorTenantId(String orchestratorTenantId) {
        this.inner().withOrchestratorTenantId(orchestratorTenantId);
        return this;
    }

}
