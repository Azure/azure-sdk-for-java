/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * abc
 */

package com.microsoft.azure.management.delegatednetwork.2020-08-08-preview.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.delegatednetwork.2020-08-08-preview.DelegatedSubnetServices;
import rx.functions.Func1;
import rx.Observable;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.delegatednetwork.2020-08-08-preview.DelegatedSubnet;
import rx.Completable;

class DelegatedSubnetServicesImpl extends WrapperImpl<DelegatedSubnetServicesInner> implements DelegatedSubnetServices {
    private final DelegatedNetworkManager manager;

    DelegatedSubnetServicesImpl(DelegatedNetworkManager manager) {
        super(manager.inner().delegatedSubnetServices());
        this.manager = manager;
    }

    public DelegatedNetworkManager manager() {
        return this.manager;
    }

    @Override
    public DelegatedSubnetImpl defineDelegatedSubnet(String name) {
        return wrapDelegatedSubnetModel(name);
    }

    private DelegatedSubnetImpl wrapDelegatedSubnetModel(String name) {
        return new DelegatedSubnetImpl(name, this.manager());
    }

    private DelegatedSubnetImpl wrapDelegatedSubnetModel(DelegatedSubnetInner inner) {
        return  new DelegatedSubnetImpl(inner, manager());
    }

    @Override
    public Observable<DelegatedSubnet> listAsync() {
        DelegatedSubnetServicesInner client = this.inner();
        return client.listAsync()
        .flatMap(new Func1<Page<DelegatedSubnetInner>, Observable<DelegatedSubnetInner>>() {
            @Override
            public Observable<DelegatedSubnetInner> call(Page<DelegatedSubnetInner> innerPage) {
                return Observable.from(innerPage.items());
            }
        })
        .map(new Func1<DelegatedSubnetInner, DelegatedSubnet>() {
            @Override
            public DelegatedSubnet call(DelegatedSubnetInner inner) {
                return new DelegatedSubnetImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<DelegatedSubnet> listByResourceGroupAsync(String resourceGroupName) {
        DelegatedSubnetServicesInner client = this.inner();
        return client.listByResourceGroupAsync(resourceGroupName)
        .flatMap(new Func1<Page<DelegatedSubnetInner>, Observable<DelegatedSubnetInner>>() {
            @Override
            public Observable<DelegatedSubnetInner> call(Page<DelegatedSubnetInner> innerPage) {
                return Observable.from(innerPage.items());
            }
        })
        .map(new Func1<DelegatedSubnetInner, DelegatedSubnet>() {
            @Override
            public DelegatedSubnet call(DelegatedSubnetInner inner) {
                return new DelegatedSubnetImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<DelegatedSubnet> getDetailsAsync(String resourceGroupName, String resourceName, String vnetName, String subnetName) {
        DelegatedSubnetServicesInner client = this.inner();
        return client.getDetailsAsync(resourceGroupName, resourceName, vnetName, subnetName)
        .map(new Func1<DelegatedSubnetInner, DelegatedSubnet>() {
            @Override
            public DelegatedSubnet call(DelegatedSubnetInner inner) {
                return new DelegatedSubnetImpl(inner, manager());
            }
        });
    }

    @Override
    public Completable deleteDetailsAsync(String resourceGroupName, String resourceName, String vnetName, String subnetName) {
        DelegatedSubnetServicesInner client = this.inner();
        return client.deleteDetailsAsync(resourceGroupName, resourceName, vnetName, subnetName).toCompletable();
    }

}
