/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.delegatednetwork.2020-08-08-preview.implementation;

import com.microsoft.azure.arm.collection.InnerSupportsGet;
import com.microsoft.azure.arm.collection.InnerSupportsDelete;
import com.microsoft.azure.arm.collection.InnerSupportsListing;
import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.delegatednetwork.2020-08-08-preview.ErrorResponseException;
import com.microsoft.azure.management.delegatednetwork.2020-08-08-preview.ResourceUpdateParameters;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import java.util.Map;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.PATCH;
import retrofit2.http.Path;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in DelegatedSubnetServices.
 */
public class DelegatedSubnetServicesInner implements InnerSupportsGet<DelegatedSubnetInner>, InnerSupportsDelete<Void>, InnerSupportsListing<DelegatedSubnetInner> {
    /** The Retrofit service to perform REST calls. */
    private DelegatedSubnetServicesService service;
    /** The service client containing this operation class. */
    private DNCImpl client;

    /**
     * Initializes an instance of DelegatedSubnetServicesInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public DelegatedSubnetServicesInner(Retrofit retrofit, DNCImpl client) {
        this.service = retrofit.create(DelegatedSubnetServicesService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for DelegatedSubnetServices to be
     * used by Retrofit to perform actually REST calls.
     */
    interface DelegatedSubnetServicesService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.delegatednetwork.2020-08-08-preview.DelegatedSubnetServices getByResourceGroup" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DelegatedNetwork/delegatedSubnets/{resourceName}")
        Observable<Response<ResponseBody>> getByResourceGroup(@Path("resourceGroupName") String resourceGroupName, @Path("resourceName") String resourceName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.delegatednetwork.2020-08-08-preview.DelegatedSubnetServices putDetails" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DelegatedNetwork/delegatedSubnets/{resourceName}")
        Observable<Response<ResponseBody>> putDetails(@Path("resourceGroupName") String resourceGroupName, @Path("resourceName") String resourceName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Body DelegatedSubnetInner parameters, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.delegatednetwork.2020-08-08-preview.DelegatedSubnetServices beginPutDetails" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DelegatedNetwork/delegatedSubnets/{resourceName}")
        Observable<Response<ResponseBody>> beginPutDetails(@Path("resourceGroupName") String resourceGroupName, @Path("resourceName") String resourceName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Body DelegatedSubnetInner parameters, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.delegatednetwork.2020-08-08-preview.DelegatedSubnetServices patchDetails" })
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DelegatedNetwork/delegatedSubnets/{resourceName}")
        Observable<Response<ResponseBody>> patchDetails(@Path("resourceGroupName") String resourceGroupName, @Path("resourceName") String resourceName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body ResourceUpdateParameters parameters, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.delegatednetwork.2020-08-08-preview.DelegatedSubnetServices beginPatchDetails" })
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DelegatedNetwork/delegatedSubnets/{resourceName}")
        Observable<Response<ResponseBody>> beginPatchDetails(@Path("resourceGroupName") String resourceGroupName, @Path("resourceName") String resourceName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body ResourceUpdateParameters parameters, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.delegatednetwork.2020-08-08-preview.DelegatedSubnetServices delete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DelegatedNetwork/delegatedSubnets/{resourceName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("resourceGroupName") String resourceGroupName, @Path("resourceName") String resourceName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.delegatednetwork.2020-08-08-preview.DelegatedSubnetServices beginDelete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DelegatedNetwork/delegatedSubnets/{resourceName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> beginDelete(@Path("resourceGroupName") String resourceGroupName, @Path("resourceName") String resourceName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.delegatednetwork.2020-08-08-preview.DelegatedSubnetServices list" })
        @GET("subscriptions/{subscriptionId}/providers/Microsoft.DelegatedNetwork/delegatedSubnets")
        Observable<Response<ResponseBody>> list(@Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.delegatednetwork.2020-08-08-preview.DelegatedSubnetServices listByResourceGroup" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DelegatedNetwork/delegatedSubnets")
        Observable<Response<ResponseBody>> listByResourceGroup(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.delegatednetwork.2020-08-08-preview.DelegatedSubnetServices listNext" })
        @GET
        Observable<Response<ResponseBody>> listNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.delegatednetwork.2020-08-08-preview.DelegatedSubnetServices listByResourceGroupNext" })
        @GET
        Observable<Response<ResponseBody>> listByResourceGroupNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Gets details about the specified dnc DelegatedSubnet Link.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given DelegatedNetwork resource is part. This name must be at least 1 character in length, and no more than 90.
     * @param resourceName The name of the resource. It must be a minimum of 3 characters, and a maximum of 63.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the DelegatedSubnetInner object if successful.
     */
    public DelegatedSubnetInner getByResourceGroup(String resourceGroupName, String resourceName) {
        return getByResourceGroupWithServiceResponseAsync(resourceGroupName, resourceName).toBlocking().single().body();
    }

    /**
     * Gets details about the specified dnc DelegatedSubnet Link.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given DelegatedNetwork resource is part. This name must be at least 1 character in length, and no more than 90.
     * @param resourceName The name of the resource. It must be a minimum of 3 characters, and a maximum of 63.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<DelegatedSubnetInner> getByResourceGroupAsync(String resourceGroupName, String resourceName, final ServiceCallback<DelegatedSubnetInner> serviceCallback) {
        return ServiceFuture.fromResponse(getByResourceGroupWithServiceResponseAsync(resourceGroupName, resourceName), serviceCallback);
    }

    /**
     * Gets details about the specified dnc DelegatedSubnet Link.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given DelegatedNetwork resource is part. This name must be at least 1 character in length, and no more than 90.
     * @param resourceName The name of the resource. It must be a minimum of 3 characters, and a maximum of 63.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DelegatedSubnetInner object
     */
    public Observable<DelegatedSubnetInner> getByResourceGroupAsync(String resourceGroupName, String resourceName) {
        return getByResourceGroupWithServiceResponseAsync(resourceGroupName, resourceName).map(new Func1<ServiceResponse<DelegatedSubnetInner>, DelegatedSubnetInner>() {
            @Override
            public DelegatedSubnetInner call(ServiceResponse<DelegatedSubnetInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets details about the specified dnc DelegatedSubnet Link.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given DelegatedNetwork resource is part. This name must be at least 1 character in length, and no more than 90.
     * @param resourceName The name of the resource. It must be a minimum of 3 characters, and a maximum of 63.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DelegatedSubnetInner object
     */
    public Observable<ServiceResponse<DelegatedSubnetInner>> getByResourceGroupWithServiceResponseAsync(String resourceGroupName, String resourceName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (resourceName == null) {
            throw new IllegalArgumentException("Parameter resourceName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.getByResourceGroup(resourceGroupName, resourceName, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<DelegatedSubnetInner>>>() {
                @Override
                public Observable<ServiceResponse<DelegatedSubnetInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<DelegatedSubnetInner> clientResponse = getByResourceGroupDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<DelegatedSubnetInner> getByResourceGroupDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<DelegatedSubnetInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<DelegatedSubnetInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Put delegated subnet resource.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given DelegatedNetwork resource is part. This name must be at least 1 character in length, and no more than 90.
     * @param resourceName The name of the resource. It must be a minimum of 3 characters, and a maximum of 63.
     * @param parameters Delegated subnet details.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the DelegatedSubnetInner object if successful.
     */
    public DelegatedSubnetInner putDetails(String resourceGroupName, String resourceName, DelegatedSubnetInner parameters) {
        return putDetailsWithServiceResponseAsync(resourceGroupName, resourceName, parameters).toBlocking().last().body();
    }

    /**
     * Put delegated subnet resource.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given DelegatedNetwork resource is part. This name must be at least 1 character in length, and no more than 90.
     * @param resourceName The name of the resource. It must be a minimum of 3 characters, and a maximum of 63.
     * @param parameters Delegated subnet details.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<DelegatedSubnetInner> putDetailsAsync(String resourceGroupName, String resourceName, DelegatedSubnetInner parameters, final ServiceCallback<DelegatedSubnetInner> serviceCallback) {
        return ServiceFuture.fromResponse(putDetailsWithServiceResponseAsync(resourceGroupName, resourceName, parameters), serviceCallback);
    }

    /**
     * Put delegated subnet resource.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given DelegatedNetwork resource is part. This name must be at least 1 character in length, and no more than 90.
     * @param resourceName The name of the resource. It must be a minimum of 3 characters, and a maximum of 63.
     * @param parameters Delegated subnet details.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<DelegatedSubnetInner> putDetailsAsync(String resourceGroupName, String resourceName, DelegatedSubnetInner parameters) {
        return putDetailsWithServiceResponseAsync(resourceGroupName, resourceName, parameters).map(new Func1<ServiceResponse<DelegatedSubnetInner>, DelegatedSubnetInner>() {
            @Override
            public DelegatedSubnetInner call(ServiceResponse<DelegatedSubnetInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Put delegated subnet resource.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given DelegatedNetwork resource is part. This name must be at least 1 character in length, and no more than 90.
     * @param resourceName The name of the resource. It must be a minimum of 3 characters, and a maximum of 63.
     * @param parameters Delegated subnet details.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<DelegatedSubnetInner>> putDetailsWithServiceResponseAsync(String resourceGroupName, String resourceName, DelegatedSubnetInner parameters) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (resourceName == null) {
            throw new IllegalArgumentException("Parameter resourceName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        Validator.validate(parameters);
        Observable<Response<ResponseBody>> observable = service.putDetails(resourceGroupName, resourceName, this.client.subscriptionId(), this.client.apiVersion(), parameters, this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<DelegatedSubnetInner>() { }.getType());
    }

    /**
     * Put delegated subnet resource.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given DelegatedNetwork resource is part. This name must be at least 1 character in length, and no more than 90.
     * @param resourceName The name of the resource. It must be a minimum of 3 characters, and a maximum of 63.
     * @param parameters Delegated subnet details.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the DelegatedSubnetInner object if successful.
     */
    public DelegatedSubnetInner beginPutDetails(String resourceGroupName, String resourceName, DelegatedSubnetInner parameters) {
        return beginPutDetailsWithServiceResponseAsync(resourceGroupName, resourceName, parameters).toBlocking().single().body();
    }

    /**
     * Put delegated subnet resource.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given DelegatedNetwork resource is part. This name must be at least 1 character in length, and no more than 90.
     * @param resourceName The name of the resource. It must be a minimum of 3 characters, and a maximum of 63.
     * @param parameters Delegated subnet details.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<DelegatedSubnetInner> beginPutDetailsAsync(String resourceGroupName, String resourceName, DelegatedSubnetInner parameters, final ServiceCallback<DelegatedSubnetInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginPutDetailsWithServiceResponseAsync(resourceGroupName, resourceName, parameters), serviceCallback);
    }

    /**
     * Put delegated subnet resource.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given DelegatedNetwork resource is part. This name must be at least 1 character in length, and no more than 90.
     * @param resourceName The name of the resource. It must be a minimum of 3 characters, and a maximum of 63.
     * @param parameters Delegated subnet details.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DelegatedSubnetInner object
     */
    public Observable<DelegatedSubnetInner> beginPutDetailsAsync(String resourceGroupName, String resourceName, DelegatedSubnetInner parameters) {
        return beginPutDetailsWithServiceResponseAsync(resourceGroupName, resourceName, parameters).map(new Func1<ServiceResponse<DelegatedSubnetInner>, DelegatedSubnetInner>() {
            @Override
            public DelegatedSubnetInner call(ServiceResponse<DelegatedSubnetInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Put delegated subnet resource.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given DelegatedNetwork resource is part. This name must be at least 1 character in length, and no more than 90.
     * @param resourceName The name of the resource. It must be a minimum of 3 characters, and a maximum of 63.
     * @param parameters Delegated subnet details.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DelegatedSubnetInner object
     */
    public Observable<ServiceResponse<DelegatedSubnetInner>> beginPutDetailsWithServiceResponseAsync(String resourceGroupName, String resourceName, DelegatedSubnetInner parameters) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (resourceName == null) {
            throw new IllegalArgumentException("Parameter resourceName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        Validator.validate(parameters);
        return service.beginPutDetails(resourceGroupName, resourceName, this.client.subscriptionId(), this.client.apiVersion(), parameters, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<DelegatedSubnetInner>>>() {
                @Override
                public Observable<ServiceResponse<DelegatedSubnetInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<DelegatedSubnetInner> clientResponse = beginPutDetailsDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<DelegatedSubnetInner> beginPutDetailsDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<DelegatedSubnetInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<DelegatedSubnetInner>() { }.getType())
                .register(201, new TypeToken<DelegatedSubnetInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Patch delegated subnet resource.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given DelegatedNetwork resource is part. This name must be at least 1 character in length, and no more than 90.
     * @param resourceName The name of the resource. It must be a minimum of 3 characters, and a maximum of 63.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the DelegatedSubnetInner object if successful.
     */
    public DelegatedSubnetInner patchDetails(String resourceGroupName, String resourceName) {
        return patchDetailsWithServiceResponseAsync(resourceGroupName, resourceName).toBlocking().last().body();
    }

    /**
     * Patch delegated subnet resource.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given DelegatedNetwork resource is part. This name must be at least 1 character in length, and no more than 90.
     * @param resourceName The name of the resource. It must be a minimum of 3 characters, and a maximum of 63.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<DelegatedSubnetInner> patchDetailsAsync(String resourceGroupName, String resourceName, final ServiceCallback<DelegatedSubnetInner> serviceCallback) {
        return ServiceFuture.fromResponse(patchDetailsWithServiceResponseAsync(resourceGroupName, resourceName), serviceCallback);
    }

    /**
     * Patch delegated subnet resource.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given DelegatedNetwork resource is part. This name must be at least 1 character in length, and no more than 90.
     * @param resourceName The name of the resource. It must be a minimum of 3 characters, and a maximum of 63.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<DelegatedSubnetInner> patchDetailsAsync(String resourceGroupName, String resourceName) {
        return patchDetailsWithServiceResponseAsync(resourceGroupName, resourceName).map(new Func1<ServiceResponse<DelegatedSubnetInner>, DelegatedSubnetInner>() {
            @Override
            public DelegatedSubnetInner call(ServiceResponse<DelegatedSubnetInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Patch delegated subnet resource.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given DelegatedNetwork resource is part. This name must be at least 1 character in length, and no more than 90.
     * @param resourceName The name of the resource. It must be a minimum of 3 characters, and a maximum of 63.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<DelegatedSubnetInner>> patchDetailsWithServiceResponseAsync(String resourceGroupName, String resourceName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (resourceName == null) {
            throw new IllegalArgumentException("Parameter resourceName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final Map<String, String> tags = null;
        ResourceUpdateParameters parameters = new ResourceUpdateParameters();
        parameters.withTags(null);
        Observable<Response<ResponseBody>> observable = service.patchDetails(resourceGroupName, resourceName, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), parameters, this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<DelegatedSubnetInner>() { }.getType());
    }
    /**
     * Patch delegated subnet resource.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given DelegatedNetwork resource is part. This name must be at least 1 character in length, and no more than 90.
     * @param resourceName The name of the resource. It must be a minimum of 3 characters, and a maximum of 63.
     * @param tags The resource tags.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the DelegatedSubnetInner object if successful.
     */
    public DelegatedSubnetInner patchDetails(String resourceGroupName, String resourceName, Map<String, String> tags) {
        return patchDetailsWithServiceResponseAsync(resourceGroupName, resourceName, tags).toBlocking().last().body();
    }

    /**
     * Patch delegated subnet resource.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given DelegatedNetwork resource is part. This name must be at least 1 character in length, and no more than 90.
     * @param resourceName The name of the resource. It must be a minimum of 3 characters, and a maximum of 63.
     * @param tags The resource tags.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<DelegatedSubnetInner> patchDetailsAsync(String resourceGroupName, String resourceName, Map<String, String> tags, final ServiceCallback<DelegatedSubnetInner> serviceCallback) {
        return ServiceFuture.fromResponse(patchDetailsWithServiceResponseAsync(resourceGroupName, resourceName, tags), serviceCallback);
    }

    /**
     * Patch delegated subnet resource.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given DelegatedNetwork resource is part. This name must be at least 1 character in length, and no more than 90.
     * @param resourceName The name of the resource. It must be a minimum of 3 characters, and a maximum of 63.
     * @param tags The resource tags.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<DelegatedSubnetInner> patchDetailsAsync(String resourceGroupName, String resourceName, Map<String, String> tags) {
        return patchDetailsWithServiceResponseAsync(resourceGroupName, resourceName, tags).map(new Func1<ServiceResponse<DelegatedSubnetInner>, DelegatedSubnetInner>() {
            @Override
            public DelegatedSubnetInner call(ServiceResponse<DelegatedSubnetInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Patch delegated subnet resource.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given DelegatedNetwork resource is part. This name must be at least 1 character in length, and no more than 90.
     * @param resourceName The name of the resource. It must be a minimum of 3 characters, and a maximum of 63.
     * @param tags The resource tags.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<DelegatedSubnetInner>> patchDetailsWithServiceResponseAsync(String resourceGroupName, String resourceName, Map<String, String> tags) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (resourceName == null) {
            throw new IllegalArgumentException("Parameter resourceName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(tags);
        ResourceUpdateParameters parameters = new ResourceUpdateParameters();
        parameters.withTags(tags);
        Observable<Response<ResponseBody>> observable = service.patchDetails(resourceGroupName, resourceName, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), parameters, this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<DelegatedSubnetInner>() { }.getType());
    }

    /**
     * Patch delegated subnet resource.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given DelegatedNetwork resource is part. This name must be at least 1 character in length, and no more than 90.
     * @param resourceName The name of the resource. It must be a minimum of 3 characters, and a maximum of 63.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the DelegatedSubnetInner object if successful.
     */
    public DelegatedSubnetInner beginPatchDetails(String resourceGroupName, String resourceName) {
        return beginPatchDetailsWithServiceResponseAsync(resourceGroupName, resourceName).toBlocking().single().body();
    }

    /**
     * Patch delegated subnet resource.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given DelegatedNetwork resource is part. This name must be at least 1 character in length, and no more than 90.
     * @param resourceName The name of the resource. It must be a minimum of 3 characters, and a maximum of 63.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<DelegatedSubnetInner> beginPatchDetailsAsync(String resourceGroupName, String resourceName, final ServiceCallback<DelegatedSubnetInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginPatchDetailsWithServiceResponseAsync(resourceGroupName, resourceName), serviceCallback);
    }

    /**
     * Patch delegated subnet resource.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given DelegatedNetwork resource is part. This name must be at least 1 character in length, and no more than 90.
     * @param resourceName The name of the resource. It must be a minimum of 3 characters, and a maximum of 63.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DelegatedSubnetInner object
     */
    public Observable<DelegatedSubnetInner> beginPatchDetailsAsync(String resourceGroupName, String resourceName) {
        return beginPatchDetailsWithServiceResponseAsync(resourceGroupName, resourceName).map(new Func1<ServiceResponse<DelegatedSubnetInner>, DelegatedSubnetInner>() {
            @Override
            public DelegatedSubnetInner call(ServiceResponse<DelegatedSubnetInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Patch delegated subnet resource.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given DelegatedNetwork resource is part. This name must be at least 1 character in length, and no more than 90.
     * @param resourceName The name of the resource. It must be a minimum of 3 characters, and a maximum of 63.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DelegatedSubnetInner object
     */
    public Observable<ServiceResponse<DelegatedSubnetInner>> beginPatchDetailsWithServiceResponseAsync(String resourceGroupName, String resourceName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (resourceName == null) {
            throw new IllegalArgumentException("Parameter resourceName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final Map<String, String> tags = null;
        ResourceUpdateParameters parameters = new ResourceUpdateParameters();
        parameters.withTags(null);
        return service.beginPatchDetails(resourceGroupName, resourceName, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), parameters, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<DelegatedSubnetInner>>>() {
                @Override
                public Observable<ServiceResponse<DelegatedSubnetInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<DelegatedSubnetInner> clientResponse = beginPatchDetailsDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Patch delegated subnet resource.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given DelegatedNetwork resource is part. This name must be at least 1 character in length, and no more than 90.
     * @param resourceName The name of the resource. It must be a minimum of 3 characters, and a maximum of 63.
     * @param tags The resource tags.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the DelegatedSubnetInner object if successful.
     */
    public DelegatedSubnetInner beginPatchDetails(String resourceGroupName, String resourceName, Map<String, String> tags) {
        return beginPatchDetailsWithServiceResponseAsync(resourceGroupName, resourceName, tags).toBlocking().single().body();
    }

    /**
     * Patch delegated subnet resource.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given DelegatedNetwork resource is part. This name must be at least 1 character in length, and no more than 90.
     * @param resourceName The name of the resource. It must be a minimum of 3 characters, and a maximum of 63.
     * @param tags The resource tags.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<DelegatedSubnetInner> beginPatchDetailsAsync(String resourceGroupName, String resourceName, Map<String, String> tags, final ServiceCallback<DelegatedSubnetInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginPatchDetailsWithServiceResponseAsync(resourceGroupName, resourceName, tags), serviceCallback);
    }

    /**
     * Patch delegated subnet resource.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given DelegatedNetwork resource is part. This name must be at least 1 character in length, and no more than 90.
     * @param resourceName The name of the resource. It must be a minimum of 3 characters, and a maximum of 63.
     * @param tags The resource tags.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DelegatedSubnetInner object
     */
    public Observable<DelegatedSubnetInner> beginPatchDetailsAsync(String resourceGroupName, String resourceName, Map<String, String> tags) {
        return beginPatchDetailsWithServiceResponseAsync(resourceGroupName, resourceName, tags).map(new Func1<ServiceResponse<DelegatedSubnetInner>, DelegatedSubnetInner>() {
            @Override
            public DelegatedSubnetInner call(ServiceResponse<DelegatedSubnetInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Patch delegated subnet resource.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given DelegatedNetwork resource is part. This name must be at least 1 character in length, and no more than 90.
     * @param resourceName The name of the resource. It must be a minimum of 3 characters, and a maximum of 63.
     * @param tags The resource tags.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DelegatedSubnetInner object
     */
    public Observable<ServiceResponse<DelegatedSubnetInner>> beginPatchDetailsWithServiceResponseAsync(String resourceGroupName, String resourceName, Map<String, String> tags) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (resourceName == null) {
            throw new IllegalArgumentException("Parameter resourceName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(tags);
        ResourceUpdateParameters parameters = new ResourceUpdateParameters();
        parameters.withTags(tags);
        return service.beginPatchDetails(resourceGroupName, resourceName, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), parameters, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<DelegatedSubnetInner>>>() {
                @Override
                public Observable<ServiceResponse<DelegatedSubnetInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<DelegatedSubnetInner> clientResponse = beginPatchDetailsDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<DelegatedSubnetInner> beginPatchDetailsDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<DelegatedSubnetInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<DelegatedSubnetInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Delete dnc DelegatedSubnet.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given DelegatedNetwork resource is part. This name must be at least 1 character in length, and no more than 90.
     * @param resourceName The name of the resource. It must be a minimum of 3 characters, and a maximum of 63.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String resourceGroupName, String resourceName) {
        deleteWithServiceResponseAsync(resourceGroupName, resourceName).toBlocking().last().body();
    }

    /**
     * Delete dnc DelegatedSubnet.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given DelegatedNetwork resource is part. This name must be at least 1 character in length, and no more than 90.
     * @param resourceName The name of the resource. It must be a minimum of 3 characters, and a maximum of 63.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String resourceGroupName, String resourceName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(resourceGroupName, resourceName), serviceCallback);
    }

    /**
     * Delete dnc DelegatedSubnet.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given DelegatedNetwork resource is part. This name must be at least 1 character in length, and no more than 90.
     * @param resourceName The name of the resource. It must be a minimum of 3 characters, and a maximum of 63.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Void> deleteAsync(String resourceGroupName, String resourceName) {
        return deleteWithServiceResponseAsync(resourceGroupName, resourceName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Delete dnc DelegatedSubnet.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given DelegatedNetwork resource is part. This name must be at least 1 character in length, and no more than 90.
     * @param resourceName The name of the resource. It must be a minimum of 3 characters, and a maximum of 63.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String resourceGroupName, String resourceName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (resourceName == null) {
            throw new IllegalArgumentException("Parameter resourceName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Observable<Response<ResponseBody>> observable = service.delete(resourceGroupName, resourceName, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<Void>() { }.getType());
    }

    /**
     * Delete dnc DelegatedSubnet.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given DelegatedNetwork resource is part. This name must be at least 1 character in length, and no more than 90.
     * @param resourceName The name of the resource. It must be a minimum of 3 characters, and a maximum of 63.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void beginDelete(String resourceGroupName, String resourceName) {
        beginDeleteWithServiceResponseAsync(resourceGroupName, resourceName).toBlocking().single().body();
    }

    /**
     * Delete dnc DelegatedSubnet.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given DelegatedNetwork resource is part. This name must be at least 1 character in length, and no more than 90.
     * @param resourceName The name of the resource. It must be a minimum of 3 characters, and a maximum of 63.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> beginDeleteAsync(String resourceGroupName, String resourceName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(beginDeleteWithServiceResponseAsync(resourceGroupName, resourceName), serviceCallback);
    }

    /**
     * Delete dnc DelegatedSubnet.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given DelegatedNetwork resource is part. This name must be at least 1 character in length, and no more than 90.
     * @param resourceName The name of the resource. It must be a minimum of 3 characters, and a maximum of 63.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> beginDeleteAsync(String resourceGroupName, String resourceName) {
        return beginDeleteWithServiceResponseAsync(resourceGroupName, resourceName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Delete dnc DelegatedSubnet.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given DelegatedNetwork resource is part. This name must be at least 1 character in length, and no more than 90.
     * @param resourceName The name of the resource. It must be a minimum of 3 characters, and a maximum of 63.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> beginDeleteWithServiceResponseAsync(String resourceGroupName, String resourceName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (resourceName == null) {
            throw new IllegalArgumentException("Parameter resourceName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.beginDelete(resourceGroupName, resourceName, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = beginDeleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> beginDeleteDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Get all the DelegatedSubnets resources in a subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;DelegatedSubnetInner&gt; object if successful.
     */
    public PagedList<DelegatedSubnetInner> list() {
        ServiceResponse<Page<DelegatedSubnetInner>> response = listSinglePageAsync().toBlocking().single();
        return new PagedList<DelegatedSubnetInner>(response.body()) {
            @Override
            public Page<DelegatedSubnetInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Get all the DelegatedSubnets resources in a subscription.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<DelegatedSubnetInner>> listAsync(final ListOperationCallback<DelegatedSubnetInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSinglePageAsync(),
            new Func1<String, Observable<ServiceResponse<Page<DelegatedSubnetInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DelegatedSubnetInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Get all the DelegatedSubnets resources in a subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;DelegatedSubnetInner&gt; object
     */
    public Observable<Page<DelegatedSubnetInner>> listAsync() {
        return listWithServiceResponseAsync()
            .map(new Func1<ServiceResponse<Page<DelegatedSubnetInner>>, Page<DelegatedSubnetInner>>() {
                @Override
                public Page<DelegatedSubnetInner> call(ServiceResponse<Page<DelegatedSubnetInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Get all the DelegatedSubnets resources in a subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;DelegatedSubnetInner&gt; object
     */
    public Observable<ServiceResponse<Page<DelegatedSubnetInner>>> listWithServiceResponseAsync() {
        return listSinglePageAsync()
            .concatMap(new Func1<ServiceResponse<Page<DelegatedSubnetInner>>, Observable<ServiceResponse<Page<DelegatedSubnetInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DelegatedSubnetInner>>> call(ServiceResponse<Page<DelegatedSubnetInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Get all the DelegatedSubnets resources in a subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;DelegatedSubnetInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<DelegatedSubnetInner>>> listSinglePageAsync() {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.list(this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<DelegatedSubnetInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DelegatedSubnetInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<DelegatedSubnetInner>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<DelegatedSubnetInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<DelegatedSubnetInner>> listDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<DelegatedSubnetInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<DelegatedSubnetInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Get all the DelegatedSubnets resources in a resource group.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given DelegatedNetwork resource is part. This name must be at least 1 character in length, and no more than 90.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;DelegatedSubnetInner&gt; object if successful.
     */
    public PagedList<DelegatedSubnetInner> listByResourceGroup(final String resourceGroupName) {
        ServiceResponse<Page<DelegatedSubnetInner>> response = listByResourceGroupSinglePageAsync(resourceGroupName).toBlocking().single();
        return new PagedList<DelegatedSubnetInner>(response.body()) {
            @Override
            public Page<DelegatedSubnetInner> nextPage(String nextPageLink) {
                return listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Get all the DelegatedSubnets resources in a resource group.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given DelegatedNetwork resource is part. This name must be at least 1 character in length, and no more than 90.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<DelegatedSubnetInner>> listByResourceGroupAsync(final String resourceGroupName, final ListOperationCallback<DelegatedSubnetInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByResourceGroupSinglePageAsync(resourceGroupName),
            new Func1<String, Observable<ServiceResponse<Page<DelegatedSubnetInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DelegatedSubnetInner>>> call(String nextPageLink) {
                    return listByResourceGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Get all the DelegatedSubnets resources in a resource group.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given DelegatedNetwork resource is part. This name must be at least 1 character in length, and no more than 90.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;DelegatedSubnetInner&gt; object
     */
    public Observable<Page<DelegatedSubnetInner>> listByResourceGroupAsync(final String resourceGroupName) {
        return listByResourceGroupWithServiceResponseAsync(resourceGroupName)
            .map(new Func1<ServiceResponse<Page<DelegatedSubnetInner>>, Page<DelegatedSubnetInner>>() {
                @Override
                public Page<DelegatedSubnetInner> call(ServiceResponse<Page<DelegatedSubnetInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Get all the DelegatedSubnets resources in a resource group.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given DelegatedNetwork resource is part. This name must be at least 1 character in length, and no more than 90.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;DelegatedSubnetInner&gt; object
     */
    public Observable<ServiceResponse<Page<DelegatedSubnetInner>>> listByResourceGroupWithServiceResponseAsync(final String resourceGroupName) {
        return listByResourceGroupSinglePageAsync(resourceGroupName)
            .concatMap(new Func1<ServiceResponse<Page<DelegatedSubnetInner>>, Observable<ServiceResponse<Page<DelegatedSubnetInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DelegatedSubnetInner>>> call(ServiceResponse<Page<DelegatedSubnetInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByResourceGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Get all the DelegatedSubnets resources in a resource group.
     *
    ServiceResponse<PageImpl<DelegatedSubnetInner>> * @param resourceGroupName The name of the Azure Resource group of which a given DelegatedNetwork resource is part. This name must be at least 1 character in length, and no more than 90.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;DelegatedSubnetInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<DelegatedSubnetInner>>> listByResourceGroupSinglePageAsync(final String resourceGroupName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByResourceGroup(this.client.subscriptionId(), resourceGroupName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<DelegatedSubnetInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DelegatedSubnetInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<DelegatedSubnetInner>> result = listByResourceGroupDelegate(response);
                        return Observable.just(new ServiceResponse<Page<DelegatedSubnetInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<DelegatedSubnetInner>> listByResourceGroupDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<DelegatedSubnetInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<DelegatedSubnetInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Get all the DelegatedSubnets resources in a subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;DelegatedSubnetInner&gt; object if successful.
     */
    public PagedList<DelegatedSubnetInner> listNext(final String nextPageLink) {
        ServiceResponse<Page<DelegatedSubnetInner>> response = listNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<DelegatedSubnetInner>(response.body()) {
            @Override
            public Page<DelegatedSubnetInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Get all the DelegatedSubnets resources in a subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<DelegatedSubnetInner>> listNextAsync(final String nextPageLink, final ServiceFuture<List<DelegatedSubnetInner>> serviceFuture, final ListOperationCallback<DelegatedSubnetInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<DelegatedSubnetInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DelegatedSubnetInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Get all the DelegatedSubnets resources in a subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;DelegatedSubnetInner&gt; object
     */
    public Observable<Page<DelegatedSubnetInner>> listNextAsync(final String nextPageLink) {
        return listNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<DelegatedSubnetInner>>, Page<DelegatedSubnetInner>>() {
                @Override
                public Page<DelegatedSubnetInner> call(ServiceResponse<Page<DelegatedSubnetInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Get all the DelegatedSubnets resources in a subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;DelegatedSubnetInner&gt; object
     */
    public Observable<ServiceResponse<Page<DelegatedSubnetInner>>> listNextWithServiceResponseAsync(final String nextPageLink) {
        return listNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<DelegatedSubnetInner>>, Observable<ServiceResponse<Page<DelegatedSubnetInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DelegatedSubnetInner>>> call(ServiceResponse<Page<DelegatedSubnetInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Get all the DelegatedSubnets resources in a subscription.
     *
    ServiceResponse<PageImpl<DelegatedSubnetInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;DelegatedSubnetInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<DelegatedSubnetInner>>> listNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<DelegatedSubnetInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DelegatedSubnetInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<DelegatedSubnetInner>> result = listNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<DelegatedSubnetInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<DelegatedSubnetInner>> listNextDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<DelegatedSubnetInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<DelegatedSubnetInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Get all the DelegatedSubnets resources in a resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;DelegatedSubnetInner&gt; object if successful.
     */
    public PagedList<DelegatedSubnetInner> listByResourceGroupNext(final String nextPageLink) {
        ServiceResponse<Page<DelegatedSubnetInner>> response = listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<DelegatedSubnetInner>(response.body()) {
            @Override
            public Page<DelegatedSubnetInner> nextPage(String nextPageLink) {
                return listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Get all the DelegatedSubnets resources in a resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<DelegatedSubnetInner>> listByResourceGroupNextAsync(final String nextPageLink, final ServiceFuture<List<DelegatedSubnetInner>> serviceFuture, final ListOperationCallback<DelegatedSubnetInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByResourceGroupNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<DelegatedSubnetInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DelegatedSubnetInner>>> call(String nextPageLink) {
                    return listByResourceGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Get all the DelegatedSubnets resources in a resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;DelegatedSubnetInner&gt; object
     */
    public Observable<Page<DelegatedSubnetInner>> listByResourceGroupNextAsync(final String nextPageLink) {
        return listByResourceGroupNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<DelegatedSubnetInner>>, Page<DelegatedSubnetInner>>() {
                @Override
                public Page<DelegatedSubnetInner> call(ServiceResponse<Page<DelegatedSubnetInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Get all the DelegatedSubnets resources in a resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;DelegatedSubnetInner&gt; object
     */
    public Observable<ServiceResponse<Page<DelegatedSubnetInner>>> listByResourceGroupNextWithServiceResponseAsync(final String nextPageLink) {
        return listByResourceGroupNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<DelegatedSubnetInner>>, Observable<ServiceResponse<Page<DelegatedSubnetInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DelegatedSubnetInner>>> call(ServiceResponse<Page<DelegatedSubnetInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByResourceGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Get all the DelegatedSubnets resources in a resource group.
     *
    ServiceResponse<PageImpl<DelegatedSubnetInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;DelegatedSubnetInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<DelegatedSubnetInner>>> listByResourceGroupNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByResourceGroupNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<DelegatedSubnetInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DelegatedSubnetInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<DelegatedSubnetInner>> result = listByResourceGroupNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<DelegatedSubnetInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<DelegatedSubnetInner>> listByResourceGroupNextDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<DelegatedSubnetInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<DelegatedSubnetInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

}
