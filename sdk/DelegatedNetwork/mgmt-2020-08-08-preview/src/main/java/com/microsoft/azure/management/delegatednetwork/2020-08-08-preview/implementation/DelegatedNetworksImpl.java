/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * abc
 */

package com.microsoft.azure.management.delegatednetwork.2020-08-08-preview.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.delegatednetwork.2020-08-08-preview.DelegatedNetworks;
import rx.functions.Func1;
import rx.Observable;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.delegatednetwork.2020-08-08-preview.DelegatedController;

class DelegatedNetworksImpl extends WrapperImpl<DelegatedNetworksInner> implements DelegatedNetworks {
    private final DelegatedNetworkManager manager;

    DelegatedNetworksImpl(DelegatedNetworkManager manager) {
        super(manager.inner().delegatedNetworks());
        this.manager = manager;
    }

    public DelegatedNetworkManager manager() {
        return this.manager;
    }

    @Override
    public Observable<DelegatedController> listAsync() {
        DelegatedNetworksInner client = this.inner();
        return client.listAsync()
        .flatMapIterable(new Func1<Page<DelegatedControllerInner>, Iterable<DelegatedControllerInner>>() {
            @Override
            public Iterable<DelegatedControllerInner> call(Page<DelegatedControllerInner> page) {
                return page.items();
            }
        })
        .map(new Func1<DelegatedControllerInner, DelegatedController>() {
            @Override
            public DelegatedController call(DelegatedControllerInner inner) {
                return new DelegatedControllerImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<DelegatedController> listByResourceGroupAsync(final String resourceGroupName) {
        DelegatedNetworksInner client = this.inner();
        return client.listByResourceGroupAsync(resourceGroupName)
        .flatMapIterable(new Func1<Page<DelegatedControllerInner>, Iterable<DelegatedControllerInner>>() {
            @Override
            public Iterable<DelegatedControllerInner> call(Page<DelegatedControllerInner> page) {
                return page.items();
            }
        })
        .map(new Func1<DelegatedControllerInner, DelegatedController>() {
            @Override
            public DelegatedController call(DelegatedControllerInner inner) {
                return new DelegatedControllerImpl(inner, manager());
            }
        });
    }

}
