/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.delegatednetwork.2020-08-08-preview;

import com.microsoft.azure.arm.model.HasInner;
import com.microsoft.azure.arm.resources.models.Resource;
import com.microsoft.azure.arm.resources.models.GroupableResourceCore;
import com.microsoft.azure.arm.resources.models.HasResourceGroup;
import com.microsoft.azure.arm.model.Refreshable;
import com.microsoft.azure.arm.model.Updatable;
import com.microsoft.azure.arm.model.Appliable;
import com.microsoft.azure.arm.model.Creatable;
import com.microsoft.azure.arm.resources.models.HasManager;
import com.microsoft.azure.management.delegatednetwork.2020-08-08-preview.implementation.DelegatedNetworkManager;
import com.microsoft.azure.management.delegatednetwork.2020-08-08-preview.implementation.OrchestratorInner;

/**
 * Type representing Orchestrator.
 */
public interface Orchestrator extends HasInner<OrchestratorInner>, Resource, GroupableResourceCore<DelegatedNetworkManager, OrchestratorInner>, HasResourceGroup, Refreshable<Orchestrator>, Updatable<Orchestrator.Update>, HasManager<DelegatedNetworkManager> {
    /**
     * @return the apiServerEndpoint value.
     */
    String apiServerEndpoint();

    /**
     * @return the clusterRootCA value.
     */
    String clusterRootCA();

    /**
     * @return the controllerDetails value.
     */
    ControllerDetails controllerDetails();

    /**
     * @return the identity value.
     */
    OrchestratorIdentity identity();

    /**
     * @return the kind value.
     */
    String kind();

    /**
     * @return the orchestratorAppId value.
     */
    String orchestratorAppId();

    /**
     * @return the orchestratorTenantId value.
     */
    String orchestratorTenantId();

    /**
     * @return the provisioningState value.
     */
    OrchestratorInstanceState provisioningState();

    /**
     * @return the resourceGuid value.
     */
    String resourceGuid();

    /**
     * The entirety of the Orchestrator definition.
     */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithGroup, DefinitionStages.WithControllerDetails, DefinitionStages.WithKind, DefinitionStages.WithCreate {
    }

    /**
     * Grouping of Orchestrator definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of a Orchestrator definition.
         */
        interface Blank extends GroupableResourceCore.DefinitionWithRegion<WithGroup> {
        }

        /**
         * The stage of the Orchestrator definition allowing to specify the resource group.
         */
        interface WithGroup extends GroupableResourceCore.DefinitionStages.WithGroup<WithControllerDetails> {
        }

        /**
         * The stage of the orchestrator definition allowing to specify ControllerDetails.
         */
        interface WithControllerDetails {
           /**
            * Specifies controllerDetails.
            * @param controllerDetails controller details
            * @return the next definition stage
*/
            WithKind withControllerDetails(ControllerDetails controllerDetails);
        }

        /**
         * The stage of the orchestrator definition allowing to specify Kind.
         */
        interface WithKind {
           /**
            * Specifies kind.
            * @param kind The kind of workbook. Choices are user and shared
            * @return the next definition stage
*/
            WithCreate withKind(String kind);
        }

        /**
         * The stage of the orchestrator definition allowing to specify ApiServerEndpoint.
         */
        interface WithApiServerEndpoint {
            /**
             * Specifies apiServerEndpoint.
             * @param apiServerEndpoint K8s APIServer url
             * @return the next definition stage
             */
            WithCreate withApiServerEndpoint(String apiServerEndpoint);
        }

        /**
         * The stage of the orchestrator definition allowing to specify ClusterRootCA.
         */
        interface WithClusterRootCA {
            /**
             * Specifies clusterRootCA.
             * @param clusterRootCA RootCA certificate of kubernetes cluster base64 encoded
             * @return the next definition stage
             */
            WithCreate withClusterRootCA(String clusterRootCA);
        }

        /**
         * The stage of the orchestrator definition allowing to specify Identity.
         */
        interface WithIdentity {
            /**
             * Specifies identity.
             * @param identity The identity of the orchestrator
             * @return the next definition stage
             */
            WithCreate withIdentity(OrchestratorIdentity identity);
        }

        /**
         * The stage of the orchestrator definition allowing to specify OrchestratorAppId.
         */
        interface WithOrchestratorAppId {
            /**
             * Specifies orchestratorAppId.
             * @param orchestratorAppId AAD ID used with apiserver
             * @return the next definition stage
             */
            WithCreate withOrchestratorAppId(String orchestratorAppId);
        }

        /**
         * The stage of the orchestrator definition allowing to specify OrchestratorTenantId.
         */
        interface WithOrchestratorTenantId {
            /**
             * Specifies orchestratorTenantId.
             * @param orchestratorTenantId TenantID of server App ID
             * @return the next definition stage
             */
            WithCreate withOrchestratorTenantId(String orchestratorTenantId);
        }

        /**
         * The stage of the definition which contains all the minimum required inputs for
         * the resource to be created (via {@link WithCreate#create()}), but also allows
         * for any other optional settings to be specified.
         */
        interface WithCreate extends Creatable<Orchestrator>, Resource.DefinitionWithTags<WithCreate>, DefinitionStages.WithApiServerEndpoint, DefinitionStages.WithClusterRootCA, DefinitionStages.WithIdentity, DefinitionStages.WithOrchestratorAppId, DefinitionStages.WithOrchestratorTenantId {
        }
    }
    /**
     * The template for a Orchestrator update operation, containing all the settings that can be modified.
     */
    interface Update extends Appliable<Orchestrator>, Resource.UpdateWithTags<Update>, UpdateStages.WithApiServerEndpoint, UpdateStages.WithClusterRootCA, UpdateStages.WithIdentity, UpdateStages.WithOrchestratorAppId, UpdateStages.WithOrchestratorTenantId {
    }

    /**
     * Grouping of Orchestrator update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the orchestrator update allowing to specify ApiServerEndpoint.
         */
        interface WithApiServerEndpoint {
            /**
             * Specifies apiServerEndpoint.
             * @param apiServerEndpoint K8s APIServer url
             * @return the next update stage
             */
            Update withApiServerEndpoint(String apiServerEndpoint);
        }

        /**
         * The stage of the orchestrator update allowing to specify ClusterRootCA.
         */
        interface WithClusterRootCA {
            /**
             * Specifies clusterRootCA.
             * @param clusterRootCA RootCA certificate of kubernetes cluster base64 encoded
             * @return the next update stage
             */
            Update withClusterRootCA(String clusterRootCA);
        }

        /**
         * The stage of the orchestrator update allowing to specify Identity.
         */
        interface WithIdentity {
            /**
             * Specifies identity.
             * @param identity The identity of the orchestrator
             * @return the next update stage
             */
            Update withIdentity(OrchestratorIdentity identity);
        }

        /**
         * The stage of the orchestrator update allowing to specify OrchestratorAppId.
         */
        interface WithOrchestratorAppId {
            /**
             * Specifies orchestratorAppId.
             * @param orchestratorAppId AAD ID used with apiserver
             * @return the next update stage
             */
            Update withOrchestratorAppId(String orchestratorAppId);
        }

        /**
         * The stage of the orchestrator update allowing to specify OrchestratorTenantId.
         */
        interface WithOrchestratorTenantId {
            /**
             * Specifies orchestratorTenantId.
             * @param orchestratorTenantId TenantID of server App ID
             * @return the next update stage
             */
            Update withOrchestratorTenantId(String orchestratorTenantId);
        }

    }
}
