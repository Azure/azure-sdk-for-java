/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.delegatednetwork.2020-08-08-preview.implementation;

import com.microsoft.azure.management.delegatednetwork.2020-08-08-preview.DelegatedSubnet;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import com.microsoft.azure.management.delegatednetwork.2020-08-08-preview.DelegatedSubnetState;

class DelegatedSubnetImpl extends CreatableUpdatableImpl<DelegatedSubnet, DelegatedSubnetInner, DelegatedSubnetImpl> implements DelegatedSubnet, DelegatedSubnet.Definition, DelegatedSubnet.Update {
    private final DelegatedNetworkManager manager;
    private String resourceGroupName;
    private String resourceName;
    private String vnetName;
    private String subnetName;
    private String ccontrollerID;
    private String ucontrollerID;

    DelegatedSubnetImpl(String name, DelegatedNetworkManager manager) {
        super(name, new DelegatedSubnetInner());
        this.manager = manager;
        // Set resource name
        this.resourceName = name;
        //
    }

    DelegatedSubnetImpl(DelegatedSubnetInner inner, DelegatedNetworkManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.resourceName = inner.name();
        // set resource ancestor and positional variables
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.resourceName = IdParsingUtils.getValueFromIdByName(inner.id(), "delegatedSubnets");
        this.vnetName = IdParsingUtils.getValueFromIdByName(inner.id(), "virtualNetworks");
        this.subnetName = IdParsingUtils.getValueFromIdByName(inner.id(), "subnets");
        //
    }

    @Override
    public DelegatedNetworkManager manager() {
        return this.manager;
    }

    @Override
    public Observable<DelegatedSubnet> createResourceAsync() {
        DelegatedSubnetServicesInner client = this.manager().inner().delegatedSubnetServices();
        return client.putDetailsAsync(this.resourceGroupName, this.resourceName, this.vnetName, this.subnetName, this.ccontrollerID)
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<DelegatedSubnet> updateResourceAsync() {
        DelegatedSubnetServicesInner client = this.manager().inner().delegatedSubnetServices();
        return client.patchDetailsAsync(this.resourceGroupName, this.resourceName, this.vnetName, this.subnetName, this.ucontrollerID)
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<DelegatedSubnetInner> getInnerAsync() {
        DelegatedSubnetServicesInner client = this.manager().inner().delegatedSubnetServices();
        return null; // NOP getInnerAsync implementation as get is not supported
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String location() {
        return this.inner().location();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public String resourceGuid() {
        return this.inner().resourceGuid();
    }

    @Override
    public DelegatedSubnetState state() {
        return this.inner().state();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public DelegatedSubnetImpl withExistingProvider(String resourceGroupName, String vnetName, String subnetName) {
        this.resourceGroupName = resourceGroupName;
        this.vnetName = vnetName;
        this.subnetName = subnetName;
        return this;
    }

    @Override
    public DelegatedSubnetImpl withControllerID(String controllerID) {
        if (isInCreateMode()) {
            this.ccontrollerID = controllerID;
        } else {
            this.ucontrollerID = controllerID;
        }
        return this;
    }

}
