/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.delegatednetwork.2020-08-08-preview.implementation;

import com.microsoft.azure.arm.resources.models.implementation.GroupableResourceCoreImpl;
import com.microsoft.azure.management.delegatednetwork.2020-08-08-preview.DelegatedSubnet;
import rx.Observable;
import com.microsoft.azure.management.delegatednetwork.2020-08-08-preview.DelegatedSubnetState;
import com.microsoft.azure.management.delegatednetwork.2020-08-08-preview.SubnetDetails;
import com.microsoft.azure.management.delegatednetwork.2020-08-08-preview.ControllerDetailsModel;

class DelegatedSubnetImpl extends GroupableResourceCoreImpl<DelegatedSubnet, DelegatedSubnetInner, DelegatedSubnetImpl, DelegatedNetworkManager> implements DelegatedSubnet, DelegatedSubnet.Definition, DelegatedSubnet.Update {
    DelegatedSubnetImpl(String name, DelegatedSubnetInner inner, DelegatedNetworkManager manager) {
        super(name, inner, manager);
    }

    @Override
    public Observable<DelegatedSubnet> createResourceAsync() {
        DelegatedSubnetServicesInner client = this.manager().inner().delegatedSubnetServices();
        return client.putDetailsAsync(this.resourceGroupName(), this.name(), this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<DelegatedSubnet> updateResourceAsync() {
        DelegatedSubnetServicesInner client = this.manager().inner().delegatedSubnetServices();
        return client.putDetailsAsync(this.resourceGroupName(), this.name(), this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<DelegatedSubnetInner> getInnerAsync() {
        DelegatedSubnetServicesInner client = this.manager().inner().delegatedSubnetServices();
        return client.getByResourceGroupAsync(this.resourceGroupName(), this.name());
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public ControllerDetailsModel controllerDetails() {
        return this.inner().controllerDetails();
    }

    @Override
    public DelegatedSubnetState provisioningState() {
        return this.inner().provisioningState();
    }

    @Override
    public String resourceGuid() {
        return this.inner().resourceGuid();
    }

    @Override
    public SubnetDetails subnetDetails() {
        return this.inner().subnetDetails();
    }

    @Override
    public DelegatedSubnetImpl withControllerDetails(ControllerDetailsModel controllerDetails) {
        this.inner().withControllerDetails(controllerDetails);
        return this;
    }

    @Override
    public DelegatedSubnetImpl withSubnetDetails(SubnetDetails subnetDetails) {
        this.inner().withSubnetDetails(subnetDetails);
        return this;
    }

}
