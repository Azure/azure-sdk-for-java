/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.delegatednetwork.2020-08-08-preview.implementation;

import com.microsoft.azure.management.delegatednetwork.2020-08-08-preview.OrchestratorInstanceState;
import com.microsoft.azure.management.delegatednetwork.2020-08-08-preview.ControllerDetails;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.microsoft.rest.serializer.JsonFlatten;
import com.microsoft.azure.management.delegatednetwork.2020-08-08-preview.OrchestratorResource;

/**
 * Represents an instance of a orchestrator.
 */
@JsonFlatten
public class OrchestratorInner extends OrchestratorResource {
    /**
     * Resource guid.
     */
    @JsonProperty(value = "properties.resourceGuid", access = JsonProperty.Access.WRITE_ONLY)
    private String resourceGuid;

    /**
     * The current state of orchestratorInstance resource. Possible values
     * include: 'Deleting', 'Succeeded', 'Failed', 'Provisioning'.
     */
    @JsonProperty(value = "properties.provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private OrchestratorInstanceState provisioningState;

    /**
     * AAD ID used with apiserver.
     */
    @JsonProperty(value = "properties.orchestratorAppId")
    private String orchestratorAppId;

    /**
     * TenantID of server App ID.
     */
    @JsonProperty(value = "properties.orchestratorTenantId")
    private String orchestratorTenantId;

    /**
     * RootCA certificate of kubernetes cluster base64 encoded.
     */
    @JsonProperty(value = "properties.clusterRootCA")
    private String clusterRootCA;

    /**
     * K8s APIServer url.
     */
    @JsonProperty(value = "properties.apiServerEndpoint")
    private String apiServerEndpoint;

    /**
     * controller details.
     */
    @JsonProperty(value = "properties.controllerDetails", required = true)
    private ControllerDetails controllerDetails;

    /**
     * Get resource guid.
     *
     * @return the resourceGuid value
     */
    public String resourceGuid() {
        return this.resourceGuid;
    }

    /**
     * Get the current state of orchestratorInstance resource. Possible values include: 'Deleting', 'Succeeded', 'Failed', 'Provisioning'.
     *
     * @return the provisioningState value
     */
    public OrchestratorInstanceState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get aAD ID used with apiserver.
     *
     * @return the orchestratorAppId value
     */
    public String orchestratorAppId() {
        return this.orchestratorAppId;
    }

    /**
     * Set aAD ID used with apiserver.
     *
     * @param orchestratorAppId the orchestratorAppId value to set
     * @return the OrchestratorInner object itself.
     */
    public OrchestratorInner withOrchestratorAppId(String orchestratorAppId) {
        this.orchestratorAppId = orchestratorAppId;
        return this;
    }

    /**
     * Get tenantID of server App ID.
     *
     * @return the orchestratorTenantId value
     */
    public String orchestratorTenantId() {
        return this.orchestratorTenantId;
    }

    /**
     * Set tenantID of server App ID.
     *
     * @param orchestratorTenantId the orchestratorTenantId value to set
     * @return the OrchestratorInner object itself.
     */
    public OrchestratorInner withOrchestratorTenantId(String orchestratorTenantId) {
        this.orchestratorTenantId = orchestratorTenantId;
        return this;
    }

    /**
     * Get rootCA certificate of kubernetes cluster base64 encoded.
     *
     * @return the clusterRootCA value
     */
    public String clusterRootCA() {
        return this.clusterRootCA;
    }

    /**
     * Set rootCA certificate of kubernetes cluster base64 encoded.
     *
     * @param clusterRootCA the clusterRootCA value to set
     * @return the OrchestratorInner object itself.
     */
    public OrchestratorInner withClusterRootCA(String clusterRootCA) {
        this.clusterRootCA = clusterRootCA;
        return this;
    }

    /**
     * Get k8s APIServer url.
     *
     * @return the apiServerEndpoint value
     */
    public String apiServerEndpoint() {
        return this.apiServerEndpoint;
    }

    /**
     * Set k8s APIServer url.
     *
     * @param apiServerEndpoint the apiServerEndpoint value to set
     * @return the OrchestratorInner object itself.
     */
    public OrchestratorInner withApiServerEndpoint(String apiServerEndpoint) {
        this.apiServerEndpoint = apiServerEndpoint;
        return this;
    }

    /**
     * Get controller details.
     *
     * @return the controllerDetails value
     */
    public ControllerDetails controllerDetails() {
        return this.controllerDetails;
    }

    /**
     * Set controller details.
     *
     * @param controllerDetails the controllerDetails value to set
     * @return the OrchestratorInner object itself.
     */
    public OrchestratorInner withControllerDetails(ControllerDetails controllerDetails) {
        this.controllerDetails = controllerDetails;
        return this;
    }

}
