// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.management.compute.models;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.management.CloudException;
import com.azure.core.util.polling.AsyncPollResponse;
import com.azure.management.compute.DedicatedHostUpdate;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in
 * DedicatedHosts.
 */
public final class DedicatedHostsInner {
    /**
     * The proxy service used to perform REST calls.
     */
    private DedicatedHostsService service;

    /**
     * The service client containing this operation class.
     */
    private ComputeManagementClientImpl client;

    /**
     * Initializes an instance of DedicatedHostsInner.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    public DedicatedHostsInner(ComputeManagementClientImpl client) {
        this.service = RestProxy.create(DedicatedHostsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for
     * ComputeManagementClientDedicatedHosts to be used by the proxy service to
     * perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "ComputeManagementClientDedicatedHosts")
    private interface DedicatedHostsService {
        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/hostGroups/{hostGroupName}/hosts/{hostName}")
        @ExpectedResponses({200, 201})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<SimpleResponse<Flux<ByteBuffer>>> createOrUpdate(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("hostGroupName") String hostGroupName, @PathParam("hostName") String hostName, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") DedicatedHostInner parameters, @QueryParam("api-version") String apiVersion);

        @Patch("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/hostGroups/{hostGroupName}/hosts/{hostName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<SimpleResponse<Flux<ByteBuffer>>> update(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("hostGroupName") String hostGroupName, @PathParam("hostName") String hostName, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") DedicatedHostUpdate parameters, @QueryParam("api-version") String apiVersion);

        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/hostGroups/{hostGroupName}/hosts/{hostName}")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<SimpleResponse<Flux<ByteBuffer>>> delete(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("hostGroupName") String hostGroupName, @PathParam("hostName") String hostName, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/hostGroups/{hostGroupName}/hosts/{hostName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<SimpleResponse<DedicatedHostInner>> get(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("hostGroupName") String hostGroupName, @PathParam("hostName") String hostName, @QueryParam("$expand") String expand, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/hostGroups/{hostGroupName}/hosts")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<SimpleResponse<DedicatedHostListResultInner>> listByHostGroup(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("hostGroupName") String hostGroupName, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/hostGroups/{hostGroupName}/hosts/{hostName}")
        @ExpectedResponses({200, 201})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<SimpleResponse<DedicatedHostInner>> beginCreateOrUpdate(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("hostGroupName") String hostGroupName, @PathParam("hostName") String hostName, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") DedicatedHostInner parameters, @QueryParam("api-version") String apiVersion);

        @Patch("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/hostGroups/{hostGroupName}/hosts/{hostName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<SimpleResponse<DedicatedHostInner>> beginUpdate(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("hostGroupName") String hostGroupName, @PathParam("hostName") String hostName, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") DedicatedHostUpdate parameters, @QueryParam("api-version") String apiVersion);

        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/hostGroups/{hostGroupName}/hosts/{hostName}")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<Response<Void>> beginDelete(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("hostGroupName") String hostGroupName, @PathParam("hostName") String hostName, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<SimpleResponse<DedicatedHostListResultInner>> listByHostGroupNext(@PathParam(value = "nextLink", encoded = true) String nextLink);
    }

    /**
     * Create or update a dedicated host .
     * 
     * @param resourceGroupName 
     * @param hostGroupName 
     * @param hostName 
     * @param parameters Specifies information about the Dedicated host.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(String resourceGroupName, String hostGroupName, String hostName, DedicatedHostInner parameters) {
        final String apiVersion = "2019-03-01";
        return service.createOrUpdate(this.client.getHost(), resourceGroupName, hostGroupName, hostName, this.client.getSubscriptionId(), parameters, apiVersion);
    }

    /**
     * Create or update a dedicated host .
     * 
     * @param resourceGroupName 
     * @param hostGroupName 
     * @param hostName 
     * @param parameters Specifies information about the Dedicated host.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DedicatedHostInner> createOrUpdateAsync(String resourceGroupName, String hostGroupName, String hostName, DedicatedHostInner parameters) {
        Mono<SimpleResponse<Flux<ByteBuffer>>> response = createOrUpdateWithResponseAsync(resourceGroupName, hostGroupName, hostName, parameters);
        return client.<DedicatedHostInner, DedicatedHostInner>getLroResultAsync(response, client.getHttpPipeline(), DedicatedHostInner.class, DedicatedHostInner.class)
            .last()
            .flatMap(AsyncPollResponse::getFinalResult);
    }

    /**
     * Create or update a dedicated host .
     * 
     * @param resourceGroupName 
     * @param hostGroupName 
     * @param hostName 
     * @param parameters Specifies information about the Dedicated host.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DedicatedHostInner createOrUpdate(String resourceGroupName, String hostGroupName, String hostName, DedicatedHostInner parameters) {
        return createOrUpdateAsync(resourceGroupName, hostGroupName, hostName, parameters).block();
    }

    /**
     * Update an dedicated host .
     * 
     * @param resourceGroupName 
     * @param hostGroupName 
     * @param hostName 
     * @param parameters Specifies information about the dedicated host. Only tags, autoReplaceOnFailure and licenseType may be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Flux<ByteBuffer>>> updateWithResponseAsync(String resourceGroupName, String hostGroupName, String hostName, DedicatedHostUpdate parameters) {
        final String apiVersion = "2019-03-01";
        return service.update(this.client.getHost(), resourceGroupName, hostGroupName, hostName, this.client.getSubscriptionId(), parameters, apiVersion);
    }

    /**
     * Update an dedicated host .
     * 
     * @param resourceGroupName 
     * @param hostGroupName 
     * @param hostName 
     * @param parameters Specifies information about the dedicated host. Only tags, autoReplaceOnFailure and licenseType may be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DedicatedHostInner> updateAsync(String resourceGroupName, String hostGroupName, String hostName, DedicatedHostUpdate parameters) {
        Mono<SimpleResponse<Flux<ByteBuffer>>> response = updateWithResponseAsync(resourceGroupName, hostGroupName, hostName, parameters);
        return client.<DedicatedHostInner, DedicatedHostInner>getLroResultAsync(response, client.getHttpPipeline(), DedicatedHostInner.class, DedicatedHostInner.class)
            .last()
            .flatMap(AsyncPollResponse::getFinalResult);
    }

    /**
     * Update an dedicated host .
     * 
     * @param resourceGroupName 
     * @param hostGroupName 
     * @param hostName 
     * @param parameters Specifies information about the dedicated host. Only tags, autoReplaceOnFailure and licenseType may be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DedicatedHostInner update(String resourceGroupName, String hostGroupName, String hostName, DedicatedHostUpdate parameters) {
        return updateAsync(resourceGroupName, hostGroupName, hostName, parameters).block();
    }

    /**
     * Delete a dedicated host.
     * 
     * @param resourceGroupName 
     * @param hostGroupName 
     * @param hostName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Flux<ByteBuffer>>> deleteWithResponseAsync(String resourceGroupName, String hostGroupName, String hostName) {
        final String apiVersion = "2019-03-01";
        return service.delete(this.client.getHost(), resourceGroupName, hostGroupName, hostName, this.client.getSubscriptionId(), apiVersion);
    }

    /**
     * Delete a dedicated host.
     * 
     * @param resourceGroupName 
     * @param hostGroupName 
     * @param hostName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteAsync(String resourceGroupName, String hostGroupName, String hostName) {
        Mono<SimpleResponse<Flux<ByteBuffer>>> response = deleteWithResponseAsync(resourceGroupName, hostGroupName, hostName);
        return client.<Void, Void>getLroResultAsync(response, client.getHttpPipeline(), Void.class, Void.class)
            .last()
            .flatMap(AsyncPollResponse::getFinalResult);
    }

    /**
     * Delete a dedicated host.
     * 
     * @param resourceGroupName 
     * @param hostGroupName 
     * @param hostName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String hostGroupName, String hostName) {
        deleteAsync(resourceGroupName, hostGroupName, hostName).block();
    }

    /**
     * Retrieves information about a dedicated host.
     * 
     * @param resourceGroupName 
     * @param hostGroupName 
     * @param hostName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<DedicatedHostInner>> getWithResponseAsync(String resourceGroupName, String hostGroupName, String hostName) {
        final String expand = "instanceView";
        final String apiVersion = "2019-03-01";
        return service.get(this.client.getHost(), resourceGroupName, hostGroupName, hostName, expand, this.client.getSubscriptionId(), apiVersion);
    }

    /**
     * Retrieves information about a dedicated host.
     * 
     * @param resourceGroupName 
     * @param hostGroupName 
     * @param hostName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DedicatedHostInner> getAsync(String resourceGroupName, String hostGroupName, String hostName) {
        return getWithResponseAsync(resourceGroupName, hostGroupName, hostName)
            .flatMap((SimpleResponse<DedicatedHostInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Retrieves information about a dedicated host.
     * 
     * @param resourceGroupName 
     * @param hostGroupName 
     * @param hostName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DedicatedHostInner get(String resourceGroupName, String hostGroupName, String hostName) {
        return getAsync(resourceGroupName, hostGroupName, hostName).block();
    }

    /**
     * Lists all of the dedicated hosts in the specified dedicated host group. Use the nextLink property in the response to get the next page of dedicated hosts.
     * 
     * @param resourceGroupName 
     * @param hostGroupName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<DedicatedHostInner>> listByHostGroupSinglePageAsync(String resourceGroupName, String hostGroupName) {
        final String apiVersion = "2019-03-01";
        return service.listByHostGroup(this.client.getHost(), resourceGroupName, hostGroupName, this.client.getSubscriptionId(), apiVersion).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Lists all of the dedicated hosts in the specified dedicated host group. Use the nextLink property in the response to get the next page of dedicated hosts.
     * 
     * @param resourceGroupName 
     * @param hostGroupName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<DedicatedHostInner> listByHostGroupAsync(String resourceGroupName, String hostGroupName) {
        return new PagedFlux<>(
            () -> listByHostGroupSinglePageAsync(resourceGroupName, hostGroupName),
            nextLink -> listByHostGroupNextSinglePageAsync(nextLink));
    }

    /**
     * Lists all of the dedicated hosts in the specified dedicated host group. Use the nextLink property in the response to get the next page of dedicated hosts.
     * 
     * @param resourceGroupName 
     * @param hostGroupName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DedicatedHostInner> listByHostGroup(String resourceGroupName, String hostGroupName) {
        return new PagedIterable<>(listByHostGroupAsync(resourceGroupName, hostGroupName));
    }

    /**
     * Create or update a dedicated host .
     * 
     * @param resourceGroupName 
     * @param hostGroupName 
     * @param hostName 
     * @param parameters Specifies information about the Dedicated host.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<DedicatedHostInner>> beginCreateOrUpdateWithResponseAsync(String resourceGroupName, String hostGroupName, String hostName, DedicatedHostInner parameters) {
        final String apiVersion = "2019-03-01";
        return service.beginCreateOrUpdate(this.client.getHost(), resourceGroupName, hostGroupName, hostName, this.client.getSubscriptionId(), parameters, apiVersion);
    }

    /**
     * Create or update a dedicated host .
     * 
     * @param resourceGroupName 
     * @param hostGroupName 
     * @param hostName 
     * @param parameters Specifies information about the Dedicated host.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DedicatedHostInner> beginCreateOrUpdateAsync(String resourceGroupName, String hostGroupName, String hostName, DedicatedHostInner parameters) {
        return beginCreateOrUpdateWithResponseAsync(resourceGroupName, hostGroupName, hostName, parameters)
            .flatMap((SimpleResponse<DedicatedHostInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Create or update a dedicated host .
     * 
     * @param resourceGroupName 
     * @param hostGroupName 
     * @param hostName 
     * @param parameters Specifies information about the Dedicated host.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DedicatedHostInner beginCreateOrUpdate(String resourceGroupName, String hostGroupName, String hostName, DedicatedHostInner parameters) {
        return beginCreateOrUpdateAsync(resourceGroupName, hostGroupName, hostName, parameters).block();
    }

    /**
     * Update an dedicated host .
     * 
     * @param resourceGroupName 
     * @param hostGroupName 
     * @param hostName 
     * @param parameters Specifies information about the dedicated host. Only tags, autoReplaceOnFailure and licenseType may be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<DedicatedHostInner>> beginUpdateWithResponseAsync(String resourceGroupName, String hostGroupName, String hostName, DedicatedHostUpdate parameters) {
        final String apiVersion = "2019-03-01";
        return service.beginUpdate(this.client.getHost(), resourceGroupName, hostGroupName, hostName, this.client.getSubscriptionId(), parameters, apiVersion);
    }

    /**
     * Update an dedicated host .
     * 
     * @param resourceGroupName 
     * @param hostGroupName 
     * @param hostName 
     * @param parameters Specifies information about the dedicated host. Only tags, autoReplaceOnFailure and licenseType may be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DedicatedHostInner> beginUpdateAsync(String resourceGroupName, String hostGroupName, String hostName, DedicatedHostUpdate parameters) {
        return beginUpdateWithResponseAsync(resourceGroupName, hostGroupName, hostName, parameters)
            .flatMap((SimpleResponse<DedicatedHostInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Update an dedicated host .
     * 
     * @param resourceGroupName 
     * @param hostGroupName 
     * @param hostName 
     * @param parameters Specifies information about the dedicated host. Only tags, autoReplaceOnFailure and licenseType may be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DedicatedHostInner beginUpdate(String resourceGroupName, String hostGroupName, String hostName, DedicatedHostUpdate parameters) {
        return beginUpdateAsync(resourceGroupName, hostGroupName, hostName, parameters).block();
    }

    /**
     * Delete a dedicated host.
     * 
     * @param resourceGroupName 
     * @param hostGroupName 
     * @param hostName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> beginDeleteWithResponseAsync(String resourceGroupName, String hostGroupName, String hostName) {
        final String apiVersion = "2019-03-01";
        return service.beginDelete(this.client.getHost(), resourceGroupName, hostGroupName, hostName, this.client.getSubscriptionId(), apiVersion);
    }

    /**
     * Delete a dedicated host.
     * 
     * @param resourceGroupName 
     * @param hostGroupName 
     * @param hostName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> beginDeleteAsync(String resourceGroupName, String hostGroupName, String hostName) {
        return beginDeleteWithResponseAsync(resourceGroupName, hostGroupName, hostName)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Delete a dedicated host.
     * 
     * @param resourceGroupName 
     * @param hostGroupName 
     * @param hostName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void beginDelete(String resourceGroupName, String hostGroupName, String hostName) {
        beginDeleteAsync(resourceGroupName, hostGroupName, hostName).block();
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink null
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<DedicatedHostInner>> listByHostGroupNextSinglePageAsync(String nextLink) {
        return service.listByHostGroupNext(nextLink).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }
}
