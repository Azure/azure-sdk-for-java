// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.compute.fluent;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.compute.ComputeManagementClient;
import com.azure.resourcemanager.compute.fluent.inner.GalleryApplicationInner;
import com.azure.resourcemanager.compute.fluent.inner.GalleryApplicationListInner;
import com.azure.resourcemanager.compute.models.ApiErrorException;
import com.azure.resourcemanager.compute.models.GalleryApplicationUpdate;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in GalleryApplications. */
public final class GalleryApplicationsClient {
    private final ClientLogger logger = new ClientLogger(GalleryApplicationsClient.class);

    /** The proxy service used to perform REST calls. */
    private final GalleryApplicationsService service;

    /** The service client containing this operation class. */
    private final ComputeManagementClient client;

    /**
     * Initializes an instance of GalleryApplicationsClient.
     *
     * @param client the instance of the service client containing this operation class.
     */
    public GalleryApplicationsClient(ComputeManagementClient client) {
        this.service =
            RestProxy.create(GalleryApplicationsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for ComputeManagementClientGalleryApplications to be used by the proxy
     * service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "ComputeManagementCli")
    private interface GalleryApplicationsService {
        @Headers({"Accept: application/json", "Content-Type: application/json"})
        @Put(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries"
                + "/{galleryName}/applications/{galleryApplicationName}")
        @ExpectedResponses({200, 201, 202})
        @UnexpectedResponseExceptionType(ApiErrorException.class)
        Mono<Response<Flux<ByteBuffer>>> createOrUpdate(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("galleryName") String galleryName,
            @PathParam("galleryApplicationName") String galleryApplicationName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") GalleryApplicationInner galleryApplication,
            Context context);

        @Headers({"Accept: application/json", "Content-Type: application/json"})
        @Patch(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries"
                + "/{galleryName}/applications/{galleryApplicationName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ApiErrorException.class)
        Mono<Response<Flux<ByteBuffer>>> update(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("galleryName") String galleryName,
            @PathParam("galleryApplicationName") String galleryApplicationName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") GalleryApplicationUpdate galleryApplication,
            Context context);

        @Headers({"Accept: application/json", "Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries"
                + "/{galleryName}/applications/{galleryApplicationName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ApiErrorException.class)
        Mono<Response<GalleryApplicationInner>> get(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("galleryName") String galleryName,
            @PathParam("galleryApplicationName") String galleryApplicationName,
            @QueryParam("api-version") String apiVersion,
            Context context);

        @Headers({"Accept: application/json;q=0.9", "Content-Type: application/json"})
        @Delete(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries"
                + "/{galleryName}/applications/{galleryApplicationName}")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(ApiErrorException.class)
        Mono<Response<Flux<ByteBuffer>>> delete(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("galleryName") String galleryName,
            @PathParam("galleryApplicationName") String galleryApplicationName,
            @QueryParam("api-version") String apiVersion,
            Context context);

        @Headers({"Accept: application/json", "Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries"
                + "/{galleryName}/applications")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ApiErrorException.class)
        Mono<Response<GalleryApplicationListInner>> listByGallery(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("galleryName") String galleryName,
            @QueryParam("api-version") String apiVersion,
            Context context);

        @Headers({"Accept: application/json", "Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ApiErrorException.class)
        Mono<Response<GalleryApplicationListInner>> listByGalleryNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, Context context);
    }

    /**
     * Create or update a gallery Application Definition.
     *
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Application Gallery in which the Application Definition is to be
     *     created.
     * @param galleryApplicationName The name of the gallery Application Definition to be created or updated. The
     *     allowed characters are alphabets and numbers with dots, dashes, and periods allowed in the middle. The
     *     maximum length is 80 characters.
     * @param galleryApplication Specifies information about the gallery Application Definition that you want to create
     *     or update.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return specifies information about the gallery Application Definition that you want to create or update.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(
        String resourceGroupName,
        String galleryName,
        String galleryApplicationName,
        GalleryApplicationInner galleryApplication) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (galleryName == null) {
            return Mono.error(new IllegalArgumentException("Parameter galleryName is required and cannot be null."));
        }
        if (galleryApplicationName == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter galleryApplicationName is required and cannot be null."));
        }
        if (galleryApplication == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter galleryApplication is required and cannot be null."));
        } else {
            galleryApplication.validate();
        }
        final String apiVersion = "2019-12-01";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .createOrUpdate(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            galleryName,
                            galleryApplicationName,
                            apiVersion,
                            galleryApplication,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Create or update a gallery Application Definition.
     *
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Application Gallery in which the Application Definition is to be
     *     created.
     * @param galleryApplicationName The name of the gallery Application Definition to be created or updated. The
     *     allowed characters are alphabets and numbers with dots, dashes, and periods allowed in the middle. The
     *     maximum length is 80 characters.
     * @param galleryApplication Specifies information about the gallery Application Definition that you want to create
     *     or update.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return specifies information about the gallery Application Definition that you want to create or update.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(
        String resourceGroupName,
        String galleryName,
        String galleryApplicationName,
        GalleryApplicationInner galleryApplication,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (galleryName == null) {
            return Mono.error(new IllegalArgumentException("Parameter galleryName is required and cannot be null."));
        }
        if (galleryApplicationName == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter galleryApplicationName is required and cannot be null."));
        }
        if (galleryApplication == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter galleryApplication is required and cannot be null."));
        } else {
            galleryApplication.validate();
        }
        final String apiVersion = "2019-12-01";
        context = this.client.mergeContext(context);
        return service
            .createOrUpdate(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                galleryName,
                galleryApplicationName,
                apiVersion,
                galleryApplication,
                context);
    }

    /**
     * Create or update a gallery Application Definition.
     *
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Application Gallery in which the Application Definition is to be
     *     created.
     * @param galleryApplicationName The name of the gallery Application Definition to be created or updated. The
     *     allowed characters are alphabets and numbers with dots, dashes, and periods allowed in the middle. The
     *     maximum length is 80 characters.
     * @param galleryApplication Specifies information about the gallery Application Definition that you want to create
     *     or update.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return specifies information about the gallery Application Definition that you want to create or update.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PollerFlux<PollResult<GalleryApplicationInner>, GalleryApplicationInner> beginCreateOrUpdateAsync(
        String resourceGroupName,
        String galleryName,
        String galleryApplicationName,
        GalleryApplicationInner galleryApplication) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            createOrUpdateWithResponseAsync(resourceGroupName, galleryName, galleryApplicationName, galleryApplication);
        return this
            .client
            .<GalleryApplicationInner, GalleryApplicationInner>getLroResultAsync(
                mono, this.client.getHttpPipeline(), GalleryApplicationInner.class, GalleryApplicationInner.class);
    }

    /**
     * Create or update a gallery Application Definition.
     *
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Application Gallery in which the Application Definition is to be
     *     created.
     * @param galleryApplicationName The name of the gallery Application Definition to be created or updated. The
     *     allowed characters are alphabets and numbers with dots, dashes, and periods allowed in the middle. The
     *     maximum length is 80 characters.
     * @param galleryApplication Specifies information about the gallery Application Definition that you want to create
     *     or update.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return specifies information about the gallery Application Definition that you want to create or update.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PollerFlux<PollResult<GalleryApplicationInner>, GalleryApplicationInner> beginCreateOrUpdateAsync(
        String resourceGroupName,
        String galleryName,
        String galleryApplicationName,
        GalleryApplicationInner galleryApplication,
        Context context) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            createOrUpdateWithResponseAsync(
                resourceGroupName, galleryName, galleryApplicationName, galleryApplication, context);
        return this
            .client
            .<GalleryApplicationInner, GalleryApplicationInner>getLroResultAsync(
                mono, this.client.getHttpPipeline(), GalleryApplicationInner.class, GalleryApplicationInner.class);
    }

    /**
     * Create or update a gallery Application Definition.
     *
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Application Gallery in which the Application Definition is to be
     *     created.
     * @param galleryApplicationName The name of the gallery Application Definition to be created or updated. The
     *     allowed characters are alphabets and numbers with dots, dashes, and periods allowed in the middle. The
     *     maximum length is 80 characters.
     * @param galleryApplication Specifies information about the gallery Application Definition that you want to create
     *     or update.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return specifies information about the gallery Application Definition that you want to create or update.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<GalleryApplicationInner>, GalleryApplicationInner> beginCreateOrUpdate(
        String resourceGroupName,
        String galleryName,
        String galleryApplicationName,
        GalleryApplicationInner galleryApplication) {
        return beginCreateOrUpdateAsync(resourceGroupName, galleryName, galleryApplicationName, galleryApplication)
            .getSyncPoller();
    }

    /**
     * Create or update a gallery Application Definition.
     *
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Application Gallery in which the Application Definition is to be
     *     created.
     * @param galleryApplicationName The name of the gallery Application Definition to be created or updated. The
     *     allowed characters are alphabets and numbers with dots, dashes, and periods allowed in the middle. The
     *     maximum length is 80 characters.
     * @param galleryApplication Specifies information about the gallery Application Definition that you want to create
     *     or update.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return specifies information about the gallery Application Definition that you want to create or update.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<GalleryApplicationInner>, GalleryApplicationInner> beginCreateOrUpdate(
        String resourceGroupName,
        String galleryName,
        String galleryApplicationName,
        GalleryApplicationInner galleryApplication,
        Context context) {
        return beginCreateOrUpdateAsync(
                resourceGroupName, galleryName, galleryApplicationName, galleryApplication, context)
            .getSyncPoller();
    }

    /**
     * Create or update a gallery Application Definition.
     *
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Application Gallery in which the Application Definition is to be
     *     created.
     * @param galleryApplicationName The name of the gallery Application Definition to be created or updated. The
     *     allowed characters are alphabets and numbers with dots, dashes, and periods allowed in the middle. The
     *     maximum length is 80 characters.
     * @param galleryApplication Specifies information about the gallery Application Definition that you want to create
     *     or update.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return specifies information about the gallery Application Definition that you want to create or update.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<GalleryApplicationInner> createOrUpdateAsync(
        String resourceGroupName,
        String galleryName,
        String galleryApplicationName,
        GalleryApplicationInner galleryApplication) {
        return beginCreateOrUpdateAsync(resourceGroupName, galleryName, galleryApplicationName, galleryApplication)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create or update a gallery Application Definition.
     *
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Application Gallery in which the Application Definition is to be
     *     created.
     * @param galleryApplicationName The name of the gallery Application Definition to be created or updated. The
     *     allowed characters are alphabets and numbers with dots, dashes, and periods allowed in the middle. The
     *     maximum length is 80 characters.
     * @param galleryApplication Specifies information about the gallery Application Definition that you want to create
     *     or update.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return specifies information about the gallery Application Definition that you want to create or update.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<GalleryApplicationInner> createOrUpdateAsync(
        String resourceGroupName,
        String galleryName,
        String galleryApplicationName,
        GalleryApplicationInner galleryApplication,
        Context context) {
        return beginCreateOrUpdateAsync(
                resourceGroupName, galleryName, galleryApplicationName, galleryApplication, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create or update a gallery Application Definition.
     *
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Application Gallery in which the Application Definition is to be
     *     created.
     * @param galleryApplicationName The name of the gallery Application Definition to be created or updated. The
     *     allowed characters are alphabets and numbers with dots, dashes, and periods allowed in the middle. The
     *     maximum length is 80 characters.
     * @param galleryApplication Specifies information about the gallery Application Definition that you want to create
     *     or update.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return specifies information about the gallery Application Definition that you want to create or update.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public GalleryApplicationInner createOrUpdate(
        String resourceGroupName,
        String galleryName,
        String galleryApplicationName,
        GalleryApplicationInner galleryApplication) {
        return createOrUpdateAsync(resourceGroupName, galleryName, galleryApplicationName, galleryApplication).block();
    }

    /**
     * Create or update a gallery Application Definition.
     *
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Application Gallery in which the Application Definition is to be
     *     created.
     * @param galleryApplicationName The name of the gallery Application Definition to be created or updated. The
     *     allowed characters are alphabets and numbers with dots, dashes, and periods allowed in the middle. The
     *     maximum length is 80 characters.
     * @param galleryApplication Specifies information about the gallery Application Definition that you want to create
     *     or update.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return specifies information about the gallery Application Definition that you want to create or update.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public GalleryApplicationInner createOrUpdate(
        String resourceGroupName,
        String galleryName,
        String galleryApplicationName,
        GalleryApplicationInner galleryApplication,
        Context context) {
        return createOrUpdateAsync(resourceGroupName, galleryName, galleryApplicationName, galleryApplication, context)
            .block();
    }

    /**
     * Update a gallery Application Definition.
     *
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Application Gallery in which the Application Definition is to be
     *     updated.
     * @param galleryApplicationName The name of the gallery Application Definition to be updated. The allowed
     *     characters are alphabets and numbers with dots, dashes, and periods allowed in the middle. The maximum length
     *     is 80 characters.
     * @param galleryApplication Specifies information about the gallery Application Definition that you want to update.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return specifies information about the gallery Application Definition that you want to create or update.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Flux<ByteBuffer>>> updateWithResponseAsync(
        String resourceGroupName,
        String galleryName,
        String galleryApplicationName,
        GalleryApplicationUpdate galleryApplication) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (galleryName == null) {
            return Mono.error(new IllegalArgumentException("Parameter galleryName is required and cannot be null."));
        }
        if (galleryApplicationName == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter galleryApplicationName is required and cannot be null."));
        }
        if (galleryApplication == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter galleryApplication is required and cannot be null."));
        } else {
            galleryApplication.validate();
        }
        final String apiVersion = "2019-12-01";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .update(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            galleryName,
                            galleryApplicationName,
                            apiVersion,
                            galleryApplication,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Update a gallery Application Definition.
     *
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Application Gallery in which the Application Definition is to be
     *     updated.
     * @param galleryApplicationName The name of the gallery Application Definition to be updated. The allowed
     *     characters are alphabets and numbers with dots, dashes, and periods allowed in the middle. The maximum length
     *     is 80 characters.
     * @param galleryApplication Specifies information about the gallery Application Definition that you want to update.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return specifies information about the gallery Application Definition that you want to create or update.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Flux<ByteBuffer>>> updateWithResponseAsync(
        String resourceGroupName,
        String galleryName,
        String galleryApplicationName,
        GalleryApplicationUpdate galleryApplication,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (galleryName == null) {
            return Mono.error(new IllegalArgumentException("Parameter galleryName is required and cannot be null."));
        }
        if (galleryApplicationName == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter galleryApplicationName is required and cannot be null."));
        }
        if (galleryApplication == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter galleryApplication is required and cannot be null."));
        } else {
            galleryApplication.validate();
        }
        final String apiVersion = "2019-12-01";
        context = this.client.mergeContext(context);
        return service
            .update(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                galleryName,
                galleryApplicationName,
                apiVersion,
                galleryApplication,
                context);
    }

    /**
     * Update a gallery Application Definition.
     *
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Application Gallery in which the Application Definition is to be
     *     updated.
     * @param galleryApplicationName The name of the gallery Application Definition to be updated. The allowed
     *     characters are alphabets and numbers with dots, dashes, and periods allowed in the middle. The maximum length
     *     is 80 characters.
     * @param galleryApplication Specifies information about the gallery Application Definition that you want to update.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return specifies information about the gallery Application Definition that you want to create or update.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PollerFlux<PollResult<GalleryApplicationInner>, GalleryApplicationInner> beginUpdateAsync(
        String resourceGroupName,
        String galleryName,
        String galleryApplicationName,
        GalleryApplicationUpdate galleryApplication) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            updateWithResponseAsync(resourceGroupName, galleryName, galleryApplicationName, galleryApplication);
        return this
            .client
            .<GalleryApplicationInner, GalleryApplicationInner>getLroResultAsync(
                mono, this.client.getHttpPipeline(), GalleryApplicationInner.class, GalleryApplicationInner.class);
    }

    /**
     * Update a gallery Application Definition.
     *
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Application Gallery in which the Application Definition is to be
     *     updated.
     * @param galleryApplicationName The name of the gallery Application Definition to be updated. The allowed
     *     characters are alphabets and numbers with dots, dashes, and periods allowed in the middle. The maximum length
     *     is 80 characters.
     * @param galleryApplication Specifies information about the gallery Application Definition that you want to update.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return specifies information about the gallery Application Definition that you want to create or update.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PollerFlux<PollResult<GalleryApplicationInner>, GalleryApplicationInner> beginUpdateAsync(
        String resourceGroupName,
        String galleryName,
        String galleryApplicationName,
        GalleryApplicationUpdate galleryApplication,
        Context context) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            updateWithResponseAsync(
                resourceGroupName, galleryName, galleryApplicationName, galleryApplication, context);
        return this
            .client
            .<GalleryApplicationInner, GalleryApplicationInner>getLroResultAsync(
                mono, this.client.getHttpPipeline(), GalleryApplicationInner.class, GalleryApplicationInner.class);
    }

    /**
     * Update a gallery Application Definition.
     *
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Application Gallery in which the Application Definition is to be
     *     updated.
     * @param galleryApplicationName The name of the gallery Application Definition to be updated. The allowed
     *     characters are alphabets and numbers with dots, dashes, and periods allowed in the middle. The maximum length
     *     is 80 characters.
     * @param galleryApplication Specifies information about the gallery Application Definition that you want to update.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return specifies information about the gallery Application Definition that you want to create or update.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<GalleryApplicationInner>, GalleryApplicationInner> beginUpdate(
        String resourceGroupName,
        String galleryName,
        String galleryApplicationName,
        GalleryApplicationUpdate galleryApplication) {
        return beginUpdateAsync(resourceGroupName, galleryName, galleryApplicationName, galleryApplication)
            .getSyncPoller();
    }

    /**
     * Update a gallery Application Definition.
     *
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Application Gallery in which the Application Definition is to be
     *     updated.
     * @param galleryApplicationName The name of the gallery Application Definition to be updated. The allowed
     *     characters are alphabets and numbers with dots, dashes, and periods allowed in the middle. The maximum length
     *     is 80 characters.
     * @param galleryApplication Specifies information about the gallery Application Definition that you want to update.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return specifies information about the gallery Application Definition that you want to create or update.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<GalleryApplicationInner>, GalleryApplicationInner> beginUpdate(
        String resourceGroupName,
        String galleryName,
        String galleryApplicationName,
        GalleryApplicationUpdate galleryApplication,
        Context context) {
        return beginUpdateAsync(resourceGroupName, galleryName, galleryApplicationName, galleryApplication, context)
            .getSyncPoller();
    }

    /**
     * Update a gallery Application Definition.
     *
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Application Gallery in which the Application Definition is to be
     *     updated.
     * @param galleryApplicationName The name of the gallery Application Definition to be updated. The allowed
     *     characters are alphabets and numbers with dots, dashes, and periods allowed in the middle. The maximum length
     *     is 80 characters.
     * @param galleryApplication Specifies information about the gallery Application Definition that you want to update.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return specifies information about the gallery Application Definition that you want to create or update.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<GalleryApplicationInner> updateAsync(
        String resourceGroupName,
        String galleryName,
        String galleryApplicationName,
        GalleryApplicationUpdate galleryApplication) {
        return beginUpdateAsync(resourceGroupName, galleryName, galleryApplicationName, galleryApplication)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Update a gallery Application Definition.
     *
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Application Gallery in which the Application Definition is to be
     *     updated.
     * @param galleryApplicationName The name of the gallery Application Definition to be updated. The allowed
     *     characters are alphabets and numbers with dots, dashes, and periods allowed in the middle. The maximum length
     *     is 80 characters.
     * @param galleryApplication Specifies information about the gallery Application Definition that you want to update.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return specifies information about the gallery Application Definition that you want to create or update.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<GalleryApplicationInner> updateAsync(
        String resourceGroupName,
        String galleryName,
        String galleryApplicationName,
        GalleryApplicationUpdate galleryApplication,
        Context context) {
        return beginUpdateAsync(resourceGroupName, galleryName, galleryApplicationName, galleryApplication, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Update a gallery Application Definition.
     *
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Application Gallery in which the Application Definition is to be
     *     updated.
     * @param galleryApplicationName The name of the gallery Application Definition to be updated. The allowed
     *     characters are alphabets and numbers with dots, dashes, and periods allowed in the middle. The maximum length
     *     is 80 characters.
     * @param galleryApplication Specifies information about the gallery Application Definition that you want to update.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return specifies information about the gallery Application Definition that you want to create or update.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public GalleryApplicationInner update(
        String resourceGroupName,
        String galleryName,
        String galleryApplicationName,
        GalleryApplicationUpdate galleryApplication) {
        return updateAsync(resourceGroupName, galleryName, galleryApplicationName, galleryApplication).block();
    }

    /**
     * Update a gallery Application Definition.
     *
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Application Gallery in which the Application Definition is to be
     *     updated.
     * @param galleryApplicationName The name of the gallery Application Definition to be updated. The allowed
     *     characters are alphabets and numbers with dots, dashes, and periods allowed in the middle. The maximum length
     *     is 80 characters.
     * @param galleryApplication Specifies information about the gallery Application Definition that you want to update.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return specifies information about the gallery Application Definition that you want to create or update.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public GalleryApplicationInner update(
        String resourceGroupName,
        String galleryName,
        String galleryApplicationName,
        GalleryApplicationUpdate galleryApplication,
        Context context) {
        return updateAsync(resourceGroupName, galleryName, galleryApplicationName, galleryApplication, context).block();
    }

    /**
     * Retrieves information about a gallery Application Definition.
     *
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Application Gallery from which the Application Definitions are to be
     *     retrieved.
     * @param galleryApplicationName The name of the gallery Application Definition to be retrieved.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return specifies information about the gallery Application Definition that you want to create or update.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<GalleryApplicationInner>> getWithResponseAsync(
        String resourceGroupName, String galleryName, String galleryApplicationName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (galleryName == null) {
            return Mono.error(new IllegalArgumentException("Parameter galleryName is required and cannot be null."));
        }
        if (galleryApplicationName == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter galleryApplicationName is required and cannot be null."));
        }
        final String apiVersion = "2019-12-01";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .get(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            galleryName,
                            galleryApplicationName,
                            apiVersion,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Retrieves information about a gallery Application Definition.
     *
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Application Gallery from which the Application Definitions are to be
     *     retrieved.
     * @param galleryApplicationName The name of the gallery Application Definition to be retrieved.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return specifies information about the gallery Application Definition that you want to create or update.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<GalleryApplicationInner>> getWithResponseAsync(
        String resourceGroupName, String galleryName, String galleryApplicationName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (galleryName == null) {
            return Mono.error(new IllegalArgumentException("Parameter galleryName is required and cannot be null."));
        }
        if (galleryApplicationName == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter galleryApplicationName is required and cannot be null."));
        }
        final String apiVersion = "2019-12-01";
        context = this.client.mergeContext(context);
        return service
            .get(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                galleryName,
                galleryApplicationName,
                apiVersion,
                context);
    }

    /**
     * Retrieves information about a gallery Application Definition.
     *
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Application Gallery from which the Application Definitions are to be
     *     retrieved.
     * @param galleryApplicationName The name of the gallery Application Definition to be retrieved.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return specifies information about the gallery Application Definition that you want to create or update.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<GalleryApplicationInner> getAsync(
        String resourceGroupName, String galleryName, String galleryApplicationName) {
        return getWithResponseAsync(resourceGroupName, galleryName, galleryApplicationName)
            .flatMap(
                (Response<GalleryApplicationInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Retrieves information about a gallery Application Definition.
     *
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Application Gallery from which the Application Definitions are to be
     *     retrieved.
     * @param galleryApplicationName The name of the gallery Application Definition to be retrieved.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return specifies information about the gallery Application Definition that you want to create or update.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<GalleryApplicationInner> getAsync(
        String resourceGroupName, String galleryName, String galleryApplicationName, Context context) {
        return getWithResponseAsync(resourceGroupName, galleryName, galleryApplicationName, context)
            .flatMap(
                (Response<GalleryApplicationInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Retrieves information about a gallery Application Definition.
     *
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Application Gallery from which the Application Definitions are to be
     *     retrieved.
     * @param galleryApplicationName The name of the gallery Application Definition to be retrieved.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return specifies information about the gallery Application Definition that you want to create or update.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public GalleryApplicationInner get(String resourceGroupName, String galleryName, String galleryApplicationName) {
        return getAsync(resourceGroupName, galleryName, galleryApplicationName).block();
    }

    /**
     * Retrieves information about a gallery Application Definition.
     *
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Application Gallery from which the Application Definitions are to be
     *     retrieved.
     * @param galleryApplicationName The name of the gallery Application Definition to be retrieved.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return specifies information about the gallery Application Definition that you want to create or update.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public GalleryApplicationInner get(
        String resourceGroupName, String galleryName, String galleryApplicationName, Context context) {
        return getAsync(resourceGroupName, galleryName, galleryApplicationName, context).block();
    }

    /**
     * Delete a gallery Application.
     *
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Application Gallery in which the Application Definition is to be
     *     deleted.
     * @param galleryApplicationName The name of the gallery Application Definition to be deleted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(
        String resourceGroupName, String galleryName, String galleryApplicationName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (galleryName == null) {
            return Mono.error(new IllegalArgumentException("Parameter galleryName is required and cannot be null."));
        }
        if (galleryApplicationName == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter galleryApplicationName is required and cannot be null."));
        }
        final String apiVersion = "2019-12-01";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .delete(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            galleryName,
                            galleryApplicationName,
                            apiVersion,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Delete a gallery Application.
     *
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Application Gallery in which the Application Definition is to be
     *     deleted.
     * @param galleryApplicationName The name of the gallery Application Definition to be deleted.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(
        String resourceGroupName, String galleryName, String galleryApplicationName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (galleryName == null) {
            return Mono.error(new IllegalArgumentException("Parameter galleryName is required and cannot be null."));
        }
        if (galleryApplicationName == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter galleryApplicationName is required and cannot be null."));
        }
        final String apiVersion = "2019-12-01";
        context = this.client.mergeContext(context);
        return service
            .delete(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                galleryName,
                galleryApplicationName,
                apiVersion,
                context);
    }

    /**
     * Delete a gallery Application.
     *
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Application Gallery in which the Application Definition is to be
     *     deleted.
     * @param galleryApplicationName The name of the gallery Application Definition to be deleted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PollerFlux<PollResult<Void>, Void> beginDeleteAsync(
        String resourceGroupName, String galleryName, String galleryApplicationName) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            deleteWithResponseAsync(resourceGroupName, galleryName, galleryApplicationName);
        return this.client.<Void, Void>getLroResultAsync(mono, this.client.getHttpPipeline(), Void.class, Void.class);
    }

    /**
     * Delete a gallery Application.
     *
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Application Gallery in which the Application Definition is to be
     *     deleted.
     * @param galleryApplicationName The name of the gallery Application Definition to be deleted.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PollerFlux<PollResult<Void>, Void> beginDeleteAsync(
        String resourceGroupName, String galleryName, String galleryApplicationName, Context context) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            deleteWithResponseAsync(resourceGroupName, galleryName, galleryApplicationName, context);
        return this.client.<Void, Void>getLroResultAsync(mono, this.client.getHttpPipeline(), Void.class, Void.class);
    }

    /**
     * Delete a gallery Application.
     *
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Application Gallery in which the Application Definition is to be
     *     deleted.
     * @param galleryApplicationName The name of the gallery Application Definition to be deleted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<Void>, Void> beginDelete(
        String resourceGroupName, String galleryName, String galleryApplicationName) {
        return beginDeleteAsync(resourceGroupName, galleryName, galleryApplicationName).getSyncPoller();
    }

    /**
     * Delete a gallery Application.
     *
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Application Gallery in which the Application Definition is to be
     *     deleted.
     * @param galleryApplicationName The name of the gallery Application Definition to be deleted.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<Void>, Void> beginDelete(
        String resourceGroupName, String galleryName, String galleryApplicationName, Context context) {
        return beginDeleteAsync(resourceGroupName, galleryName, galleryApplicationName, context).getSyncPoller();
    }

    /**
     * Delete a gallery Application.
     *
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Application Gallery in which the Application Definition is to be
     *     deleted.
     * @param galleryApplicationName The name of the gallery Application Definition to be deleted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteAsync(String resourceGroupName, String galleryName, String galleryApplicationName) {
        return beginDeleteAsync(resourceGroupName, galleryName, galleryApplicationName)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Delete a gallery Application.
     *
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Application Gallery in which the Application Definition is to be
     *     deleted.
     * @param galleryApplicationName The name of the gallery Application Definition to be deleted.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteAsync(
        String resourceGroupName, String galleryName, String galleryApplicationName, Context context) {
        return beginDeleteAsync(resourceGroupName, galleryName, galleryApplicationName, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Delete a gallery Application.
     *
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Application Gallery in which the Application Definition is to be
     *     deleted.
     * @param galleryApplicationName The name of the gallery Application Definition to be deleted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String galleryName, String galleryApplicationName) {
        deleteAsync(resourceGroupName, galleryName, galleryApplicationName).block();
    }

    /**
     * Delete a gallery Application.
     *
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Application Gallery in which the Application Definition is to be
     *     deleted.
     * @param galleryApplicationName The name of the gallery Application Definition to be deleted.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String galleryName, String galleryApplicationName, Context context) {
        deleteAsync(resourceGroupName, galleryName, galleryApplicationName, context).block();
    }

    /**
     * List gallery Application Definitions in a gallery.
     *
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Application Gallery from which Application Definitions are to be
     *     listed.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List Gallery Applications operation response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<GalleryApplicationInner>> listByGallerySinglePageAsync(
        String resourceGroupName, String galleryName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (galleryName == null) {
            return Mono.error(new IllegalArgumentException("Parameter galleryName is required and cannot be null."));
        }
        final String apiVersion = "2019-12-01";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .listByGallery(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            galleryName,
                            apiVersion,
                            context))
            .<PagedResponse<GalleryApplicationInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * List gallery Application Definitions in a gallery.
     *
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Application Gallery from which Application Definitions are to be
     *     listed.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List Gallery Applications operation response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<GalleryApplicationInner>> listByGallerySinglePageAsync(
        String resourceGroupName, String galleryName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (galleryName == null) {
            return Mono.error(new IllegalArgumentException("Parameter galleryName is required and cannot be null."));
        }
        final String apiVersion = "2019-12-01";
        context = this.client.mergeContext(context);
        return service
            .listByGallery(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                galleryName,
                apiVersion,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * List gallery Application Definitions in a gallery.
     *
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Application Gallery from which Application Definitions are to be
     *     listed.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List Gallery Applications operation response.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<GalleryApplicationInner> listByGalleryAsync(String resourceGroupName, String galleryName) {
        return new PagedFlux<>(
            () -> listByGallerySinglePageAsync(resourceGroupName, galleryName),
            nextLink -> listByGalleryNextSinglePageAsync(nextLink));
    }

    /**
     * List gallery Application Definitions in a gallery.
     *
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Application Gallery from which Application Definitions are to be
     *     listed.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List Gallery Applications operation response.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<GalleryApplicationInner> listByGalleryAsync(
        String resourceGroupName, String galleryName, Context context) {
        return new PagedFlux<>(
            () -> listByGallerySinglePageAsync(resourceGroupName, galleryName, context),
            nextLink -> listByGalleryNextSinglePageAsync(nextLink));
    }

    /**
     * List gallery Application Definitions in a gallery.
     *
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Application Gallery from which Application Definitions are to be
     *     listed.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List Gallery Applications operation response.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<GalleryApplicationInner> listByGallery(String resourceGroupName, String galleryName) {
        return new PagedIterable<>(listByGalleryAsync(resourceGroupName, galleryName));
    }

    /**
     * List gallery Application Definitions in a gallery.
     *
     * @param resourceGroupName The name of the resource group.
     * @param galleryName The name of the Shared Application Gallery from which Application Definitions are to be
     *     listed.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List Gallery Applications operation response.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<GalleryApplicationInner> listByGallery(
        String resourceGroupName, String galleryName, Context context) {
        return new PagedIterable<>(listByGalleryAsync(resourceGroupName, galleryName, context));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List Gallery Applications operation response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<GalleryApplicationInner>> listByGalleryNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        return FluxUtil
            .withContext(context -> service.listByGalleryNext(nextLink, context))
            .<PagedResponse<GalleryApplicationInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List Gallery Applications operation response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<GalleryApplicationInner>> listByGalleryNextSinglePageAsync(
        String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        context = this.client.mergeContext(context);
        return service
            .listByGalleryNext(nextLink, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }
}
