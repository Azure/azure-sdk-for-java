// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.management.compute.models;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.management.CloudException;
import com.azure.core.util.polling.AsyncPollResponse;
import com.azure.management.compute.RunCommandInput;
import com.azure.management.compute.VirtualMachineScaleSetVMReimageParameters;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in
 * VirtualMachineScaleSetVMs.
 */
public final class VirtualMachineScaleSetVMsInner {
    /**
     * The proxy service used to perform REST calls.
     */
    private VirtualMachineScaleSetVMsService service;

    /**
     * The service client containing this operation class.
     */
    private ComputeManagementClientImpl client;

    /**
     * Initializes an instance of VirtualMachineScaleSetVMsInner.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    public VirtualMachineScaleSetVMsInner(ComputeManagementClientImpl client) {
        this.service = RestProxy.create(VirtualMachineScaleSetVMsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for
     * ComputeManagementClientVirtualMachineScaleSetVMs to be used by the proxy
     * service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "ComputeManagementClientVirtualMachineScaleSetVMs")
    private interface VirtualMachineScaleSetVMsService {
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/virtualmachines/{instanceId}/reimage")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<SimpleResponse<Flux<ByteBuffer>>> reimage(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("vmScaleSetName") String vmScaleSetName, @PathParam("instanceId") String instanceId, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") VirtualMachineScaleSetVMReimageParameters vmScaleSetVMReimageInput, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/virtualmachines/{instanceId}/reimageall")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<SimpleResponse<Flux<ByteBuffer>>> reimageAll(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("vmScaleSetName") String vmScaleSetName, @PathParam("instanceId") String instanceId, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/virtualmachines/{instanceId}/deallocate")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<SimpleResponse<Flux<ByteBuffer>>> deallocate(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("vmScaleSetName") String vmScaleSetName, @PathParam("instanceId") String instanceId, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/virtualmachines/{instanceId}")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<SimpleResponse<Flux<ByteBuffer>>> update(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("vmScaleSetName") String vmScaleSetName, @PathParam("instanceId") String instanceId, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") VirtualMachineScaleSetVMInner parameters, @QueryParam("api-version") String apiVersion);

        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/virtualmachines/{instanceId}")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<SimpleResponse<Flux<ByteBuffer>>> delete(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("vmScaleSetName") String vmScaleSetName, @PathParam("instanceId") String instanceId, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/virtualmachines/{instanceId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<SimpleResponse<VirtualMachineScaleSetVMInner>> get(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("vmScaleSetName") String vmScaleSetName, @PathParam("instanceId") String instanceId, @QueryParam("$expand") String expand, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/virtualmachines/{instanceId}/instanceView")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<SimpleResponse<VirtualMachineScaleSetVMInstanceViewInner>> getInstanceView(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("vmScaleSetName") String vmScaleSetName, @PathParam("instanceId") String instanceId, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{virtualMachineScaleSetName}/virtualMachines")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<SimpleResponse<VirtualMachineScaleSetVMListResultInner>> list(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("virtualMachineScaleSetName") String virtualMachineScaleSetName, @QueryParam("$filter") String filter, @QueryParam("$select") String select, @QueryParam("$expand") String expand, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/virtualmachines/{instanceId}/poweroff")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<SimpleResponse<Flux<ByteBuffer>>> powerOff(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("vmScaleSetName") String vmScaleSetName, @PathParam("instanceId") String instanceId, @QueryParam("skipShutdown") Boolean skipShutdown, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/virtualmachines/{instanceId}/restart")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<SimpleResponse<Flux<ByteBuffer>>> restart(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("vmScaleSetName") String vmScaleSetName, @PathParam("instanceId") String instanceId, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/virtualmachines/{instanceId}/start")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<SimpleResponse<Flux<ByteBuffer>>> start(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("vmScaleSetName") String vmScaleSetName, @PathParam("instanceId") String instanceId, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/virtualmachines/{instanceId}/redeploy")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<SimpleResponse<Flux<ByteBuffer>>> redeploy(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("vmScaleSetName") String vmScaleSetName, @PathParam("instanceId") String instanceId, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/virtualmachines/{instanceId}/performMaintenance")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<SimpleResponse<Flux<ByteBuffer>>> performMaintenance(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("vmScaleSetName") String vmScaleSetName, @PathParam("instanceId") String instanceId, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/virtualmachines/{instanceId}/runCommand")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<SimpleResponse<Flux<ByteBuffer>>> runCommand(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("vmScaleSetName") String vmScaleSetName, @PathParam("instanceId") String instanceId, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") RunCommandInput parameters, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/virtualmachines/{instanceId}/reimage")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<Response<Void>> beginReimage(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("vmScaleSetName") String vmScaleSetName, @PathParam("instanceId") String instanceId, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") VirtualMachineScaleSetVMReimageParameters vmScaleSetVMReimageInput, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/virtualmachines/{instanceId}/reimageall")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<Response<Void>> beginReimageAll(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("vmScaleSetName") String vmScaleSetName, @PathParam("instanceId") String instanceId, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/virtualmachines/{instanceId}/deallocate")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<Response<Void>> beginDeallocate(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("vmScaleSetName") String vmScaleSetName, @PathParam("instanceId") String instanceId, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/virtualmachines/{instanceId}")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<SimpleResponse<VirtualMachineScaleSetVMInner>> beginUpdate(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("vmScaleSetName") String vmScaleSetName, @PathParam("instanceId") String instanceId, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") VirtualMachineScaleSetVMInner parameters, @QueryParam("api-version") String apiVersion);

        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/virtualmachines/{instanceId}")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<Response<Void>> beginDelete(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("vmScaleSetName") String vmScaleSetName, @PathParam("instanceId") String instanceId, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/virtualmachines/{instanceId}/poweroff")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<Response<Void>> beginPowerOff(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("vmScaleSetName") String vmScaleSetName, @PathParam("instanceId") String instanceId, @QueryParam("skipShutdown") Boolean skipShutdown, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/virtualmachines/{instanceId}/restart")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<Response<Void>> beginRestart(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("vmScaleSetName") String vmScaleSetName, @PathParam("instanceId") String instanceId, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/virtualmachines/{instanceId}/start")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<Response<Void>> beginStart(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("vmScaleSetName") String vmScaleSetName, @PathParam("instanceId") String instanceId, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/virtualmachines/{instanceId}/redeploy")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<Response<Void>> beginRedeploy(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("vmScaleSetName") String vmScaleSetName, @PathParam("instanceId") String instanceId, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/virtualmachines/{instanceId}/performMaintenance")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<Response<Void>> beginPerformMaintenance(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("vmScaleSetName") String vmScaleSetName, @PathParam("instanceId") String instanceId, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/virtualmachines/{instanceId}/runCommand")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<SimpleResponse<RunCommandResultInner>> beginRunCommand(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("vmScaleSetName") String vmScaleSetName, @PathParam("instanceId") String instanceId, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") RunCommandInput parameters, @QueryParam("api-version") String apiVersion);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<SimpleResponse<VirtualMachineScaleSetVMListResultInner>> listNext(@PathParam(value = "nextLink", encoded = true) String nextLink);
    }

    /**
     * Reimages (upgrade the operating system) a specific virtual machine in a VM scale set.
     * 
     * @param resourceGroupName 
     * @param vmScaleSetName 
     * @param instanceId 
     * @param tempDisk Specifies whether to reimage temp disk. Default value: false. Note: This temp disk reimage parameter is only supported for VM/VMSS with Ephemeral OS disk.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Flux<ByteBuffer>>> reimageWithResponseAsync(String resourceGroupName, String vmScaleSetName, String instanceId, Boolean tempDisk) {
        final String apiVersion = "2019-03-01";
        VirtualMachineScaleSetVMReimageParameters vmScaleSetVMReimageInput = null;
        if (tempDisk != null) {
            vmScaleSetVMReimageInput = new VirtualMachineScaleSetVMReimageParameters();
            vmScaleSetVMReimageInput.withTempDisk(tempDisk);
        }
        return service.reimage(this.client.getHost(), resourceGroupName, vmScaleSetName, instanceId, this.client.getSubscriptionId(), vmScaleSetVMReimageInput, apiVersion);
    }

    /**
     * Reimages (upgrade the operating system) a specific virtual machine in a VM scale set.
     * 
     * @param resourceGroupName 
     * @param vmScaleSetName 
     * @param instanceId 
     * @param tempDisk Specifies whether to reimage temp disk. Default value: false. Note: This temp disk reimage parameter is only supported for VM/VMSS with Ephemeral OS disk.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> reimageAsync(String resourceGroupName, String vmScaleSetName, String instanceId, Boolean tempDisk) {
        Mono<SimpleResponse<Flux<ByteBuffer>>> response = reimageWithResponseAsync(resourceGroupName, vmScaleSetName, instanceId, tempDisk);
        return client.<Void, Void>getLroResultAsync(response, client.getHttpPipeline(), Void.class, Void.class)
            .last()
            .flatMap(AsyncPollResponse::getFinalResult);
    }

    /**
     * Reimages (upgrade the operating system) a specific virtual machine in a VM scale set.
     * 
     * @param resourceGroupName 
     * @param vmScaleSetName 
     * @param instanceId 
     * @param tempDisk Specifies whether to reimage temp disk. Default value: false. Note: This temp disk reimage parameter is only supported for VM/VMSS with Ephemeral OS disk.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void reimage(String resourceGroupName, String vmScaleSetName, String instanceId, Boolean tempDisk) {
        reimageAsync(resourceGroupName, vmScaleSetName, instanceId, tempDisk).block();
    }

    /**
     * Allows you to re-image all the disks ( including data disks ) in the a VM scale set instance. This operation is only supported for managed disks.
     * 
     * @param resourceGroupName 
     * @param vmScaleSetName 
     * @param instanceId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Flux<ByteBuffer>>> reimageAllWithResponseAsync(String resourceGroupName, String vmScaleSetName, String instanceId) {
        final String apiVersion = "2019-03-01";
        return service.reimageAll(this.client.getHost(), resourceGroupName, vmScaleSetName, instanceId, this.client.getSubscriptionId(), apiVersion);
    }

    /**
     * Allows you to re-image all the disks ( including data disks ) in the a VM scale set instance. This operation is only supported for managed disks.
     * 
     * @param resourceGroupName 
     * @param vmScaleSetName 
     * @param instanceId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> reimageAllAsync(String resourceGroupName, String vmScaleSetName, String instanceId) {
        Mono<SimpleResponse<Flux<ByteBuffer>>> response = reimageAllWithResponseAsync(resourceGroupName, vmScaleSetName, instanceId);
        return client.<Void, Void>getLroResultAsync(response, client.getHttpPipeline(), Void.class, Void.class)
            .last()
            .flatMap(AsyncPollResponse::getFinalResult);
    }

    /**
     * Allows you to re-image all the disks ( including data disks ) in the a VM scale set instance. This operation is only supported for managed disks.
     * 
     * @param resourceGroupName 
     * @param vmScaleSetName 
     * @param instanceId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void reimageAll(String resourceGroupName, String vmScaleSetName, String instanceId) {
        reimageAllAsync(resourceGroupName, vmScaleSetName, instanceId).block();
    }

    /**
     * Deallocates a specific virtual machine in a VM scale set. Shuts down the virtual machine and releases the compute resources it uses. You are not billed for the compute resources of this virtual machine once it is deallocated.
     * 
     * @param resourceGroupName 
     * @param vmScaleSetName 
     * @param instanceId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Flux<ByteBuffer>>> deallocateWithResponseAsync(String resourceGroupName, String vmScaleSetName, String instanceId) {
        final String apiVersion = "2019-03-01";
        return service.deallocate(this.client.getHost(), resourceGroupName, vmScaleSetName, instanceId, this.client.getSubscriptionId(), apiVersion);
    }

    /**
     * Deallocates a specific virtual machine in a VM scale set. Shuts down the virtual machine and releases the compute resources it uses. You are not billed for the compute resources of this virtual machine once it is deallocated.
     * 
     * @param resourceGroupName 
     * @param vmScaleSetName 
     * @param instanceId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deallocateAsync(String resourceGroupName, String vmScaleSetName, String instanceId) {
        Mono<SimpleResponse<Flux<ByteBuffer>>> response = deallocateWithResponseAsync(resourceGroupName, vmScaleSetName, instanceId);
        return client.<Void, Void>getLroResultAsync(response, client.getHttpPipeline(), Void.class, Void.class)
            .last()
            .flatMap(AsyncPollResponse::getFinalResult);
    }

    /**
     * Deallocates a specific virtual machine in a VM scale set. Shuts down the virtual machine and releases the compute resources it uses. You are not billed for the compute resources of this virtual machine once it is deallocated.
     * 
     * @param resourceGroupName 
     * @param vmScaleSetName 
     * @param instanceId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deallocate(String resourceGroupName, String vmScaleSetName, String instanceId) {
        deallocateAsync(resourceGroupName, vmScaleSetName, instanceId).block();
    }

    /**
     * Updates a virtual machine of a VM scale set.
     * 
     * @param resourceGroupName 
     * @param vmScaleSetName 
     * @param instanceId 
     * @param parameters Describes a virtual machine scale set virtual machine.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Flux<ByteBuffer>>> updateWithResponseAsync(String resourceGroupName, String vmScaleSetName, String instanceId, VirtualMachineScaleSetVMInner parameters) {
        final String apiVersion = "2019-03-01";
        return service.update(this.client.getHost(), resourceGroupName, vmScaleSetName, instanceId, this.client.getSubscriptionId(), parameters, apiVersion);
    }

    /**
     * Updates a virtual machine of a VM scale set.
     * 
     * @param resourceGroupName 
     * @param vmScaleSetName 
     * @param instanceId 
     * @param parameters Describes a virtual machine scale set virtual machine.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VirtualMachineScaleSetVMInner> updateAsync(String resourceGroupName, String vmScaleSetName, String instanceId, VirtualMachineScaleSetVMInner parameters) {
        Mono<SimpleResponse<Flux<ByteBuffer>>> response = updateWithResponseAsync(resourceGroupName, vmScaleSetName, instanceId, parameters);
        return client.<VirtualMachineScaleSetVMInner, VirtualMachineScaleSetVMInner>getLroResultAsync(response, client.getHttpPipeline(), VirtualMachineScaleSetVMInner.class, VirtualMachineScaleSetVMInner.class)
            .last()
            .flatMap(AsyncPollResponse::getFinalResult);
    }

    /**
     * Updates a virtual machine of a VM scale set.
     * 
     * @param resourceGroupName 
     * @param vmScaleSetName 
     * @param instanceId 
     * @param parameters Describes a virtual machine scale set virtual machine.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public VirtualMachineScaleSetVMInner update(String resourceGroupName, String vmScaleSetName, String instanceId, VirtualMachineScaleSetVMInner parameters) {
        return updateAsync(resourceGroupName, vmScaleSetName, instanceId, parameters).block();
    }

    /**
     * Deletes a virtual machine from a VM scale set.
     * 
     * @param resourceGroupName 
     * @param vmScaleSetName 
     * @param instanceId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Flux<ByteBuffer>>> deleteWithResponseAsync(String resourceGroupName, String vmScaleSetName, String instanceId) {
        final String apiVersion = "2019-03-01";
        return service.delete(this.client.getHost(), resourceGroupName, vmScaleSetName, instanceId, this.client.getSubscriptionId(), apiVersion);
    }

    /**
     * Deletes a virtual machine from a VM scale set.
     * 
     * @param resourceGroupName 
     * @param vmScaleSetName 
     * @param instanceId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteAsync(String resourceGroupName, String vmScaleSetName, String instanceId) {
        Mono<SimpleResponse<Flux<ByteBuffer>>> response = deleteWithResponseAsync(resourceGroupName, vmScaleSetName, instanceId);
        return client.<Void, Void>getLroResultAsync(response, client.getHttpPipeline(), Void.class, Void.class)
            .last()
            .flatMap(AsyncPollResponse::getFinalResult);
    }

    /**
     * Deletes a virtual machine from a VM scale set.
     * 
     * @param resourceGroupName 
     * @param vmScaleSetName 
     * @param instanceId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String vmScaleSetName, String instanceId) {
        deleteAsync(resourceGroupName, vmScaleSetName, instanceId).block();
    }

    /**
     * Gets a virtual machine from a VM scale set.
     * 
     * @param resourceGroupName 
     * @param vmScaleSetName 
     * @param instanceId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<VirtualMachineScaleSetVMInner>> getWithResponseAsync(String resourceGroupName, String vmScaleSetName, String instanceId) {
        final String expand = "instanceView";
        final String apiVersion = "2019-03-01";
        return service.get(this.client.getHost(), resourceGroupName, vmScaleSetName, instanceId, expand, this.client.getSubscriptionId(), apiVersion);
    }

    /**
     * Gets a virtual machine from a VM scale set.
     * 
     * @param resourceGroupName 
     * @param vmScaleSetName 
     * @param instanceId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VirtualMachineScaleSetVMInner> getAsync(String resourceGroupName, String vmScaleSetName, String instanceId) {
        return getWithResponseAsync(resourceGroupName, vmScaleSetName, instanceId)
            .flatMap((SimpleResponse<VirtualMachineScaleSetVMInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Gets a virtual machine from a VM scale set.
     * 
     * @param resourceGroupName 
     * @param vmScaleSetName 
     * @param instanceId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public VirtualMachineScaleSetVMInner get(String resourceGroupName, String vmScaleSetName, String instanceId) {
        return getAsync(resourceGroupName, vmScaleSetName, instanceId).block();
    }

    /**
     * Gets the status of a virtual machine from a VM scale set.
     * 
     * @param resourceGroupName 
     * @param vmScaleSetName 
     * @param instanceId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<VirtualMachineScaleSetVMInstanceViewInner>> getInstanceViewWithResponseAsync(String resourceGroupName, String vmScaleSetName, String instanceId) {
        final String apiVersion = "2019-03-01";
        return service.getInstanceView(this.client.getHost(), resourceGroupName, vmScaleSetName, instanceId, this.client.getSubscriptionId(), apiVersion);
    }

    /**
     * Gets the status of a virtual machine from a VM scale set.
     * 
     * @param resourceGroupName 
     * @param vmScaleSetName 
     * @param instanceId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VirtualMachineScaleSetVMInstanceViewInner> getInstanceViewAsync(String resourceGroupName, String vmScaleSetName, String instanceId) {
        return getInstanceViewWithResponseAsync(resourceGroupName, vmScaleSetName, instanceId)
            .flatMap((SimpleResponse<VirtualMachineScaleSetVMInstanceViewInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Gets the status of a virtual machine from a VM scale set.
     * 
     * @param resourceGroupName 
     * @param vmScaleSetName 
     * @param instanceId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public VirtualMachineScaleSetVMInstanceViewInner getInstanceView(String resourceGroupName, String vmScaleSetName, String instanceId) {
        return getInstanceViewAsync(resourceGroupName, vmScaleSetName, instanceId).block();
    }

    /**
     * Gets a list of all virtual machines in a VM scale sets.
     * 
     * @param resourceGroupName 
     * @param virtualMachineScaleSetName 
     * @param filter 
     * @param select 
     * @param expand 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<VirtualMachineScaleSetVMInner>> listSinglePageAsync(String resourceGroupName, String virtualMachineScaleSetName, String filter, String select, String expand) {
        final String apiVersion = "2019-03-01";
        return service.list(this.client.getHost(), resourceGroupName, virtualMachineScaleSetName, filter, select, expand, this.client.getSubscriptionId(), apiVersion).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Gets a list of all virtual machines in a VM scale sets.
     * 
     * @param resourceGroupName 
     * @param virtualMachineScaleSetName 
     * @param filter 
     * @param select 
     * @param expand 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<VirtualMachineScaleSetVMInner> listAsync(String resourceGroupName, String virtualMachineScaleSetName, String filter, String select, String expand) {
        return new PagedFlux<>(
            () -> listSinglePageAsync(resourceGroupName, virtualMachineScaleSetName, filter, select, expand),
            nextLink -> listNextSinglePageAsync(nextLink));
    }

    /**
     * Gets a list of all virtual machines in a VM scale sets.
     * 
     * @param resourceGroupName 
     * @param virtualMachineScaleSetName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<VirtualMachineScaleSetVMInner> listAsync(String resourceGroupName, String virtualMachineScaleSetName) {
        final String filter = null;
        final String select = null;
        final String expand = null;
        final String apiVersion = "2019-03-01";
        return new PagedFlux<>(
            () -> listSinglePageAsync(resourceGroupName, virtualMachineScaleSetName, filter, select, expand),
            nextLink -> listNextSinglePageAsync(nextLink));
    }

    /**
     * Gets a list of all virtual machines in a VM scale sets.
     * 
     * @param resourceGroupName 
     * @param virtualMachineScaleSetName 
     * @param filter 
     * @param select 
     * @param expand 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<VirtualMachineScaleSetVMInner> list(String resourceGroupName, String virtualMachineScaleSetName, String filter, String select, String expand) {
        return new PagedIterable<>(listAsync(resourceGroupName, virtualMachineScaleSetName, filter, select, expand));
    }

    /**
     * Gets a list of all virtual machines in a VM scale sets.
     * 
     * @param resourceGroupName 
     * @param virtualMachineScaleSetName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<VirtualMachineScaleSetVMInner> list(String resourceGroupName, String virtualMachineScaleSetName) {
        final String filter = null;
        final String select = null;
        final String expand = null;
        final String apiVersion = "2019-03-01";
        return new PagedIterable<>(listAsync(resourceGroupName, virtualMachineScaleSetName, filter, select, expand));
    }

    /**
     * Power off (stop) a virtual machine in a VM scale set. Note that resources are still attached and you are getting charged for the resources. Instead, use deallocate to release resources and avoid charges.
     * 
     * @param resourceGroupName 
     * @param vmScaleSetName 
     * @param instanceId 
     * @param skipShutdown 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Flux<ByteBuffer>>> powerOffWithResponseAsync(String resourceGroupName, String vmScaleSetName, String instanceId, Boolean skipShutdown) {
        final String apiVersion = "2019-03-01";
        return service.powerOff(this.client.getHost(), resourceGroupName, vmScaleSetName, instanceId, skipShutdown, this.client.getSubscriptionId(), apiVersion);
    }

    /**
     * Power off (stop) a virtual machine in a VM scale set. Note that resources are still attached and you are getting charged for the resources. Instead, use deallocate to release resources and avoid charges.
     * 
     * @param resourceGroupName 
     * @param vmScaleSetName 
     * @param instanceId 
     * @param skipShutdown 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> powerOffAsync(String resourceGroupName, String vmScaleSetName, String instanceId, Boolean skipShutdown) {
        Mono<SimpleResponse<Flux<ByteBuffer>>> response = powerOffWithResponseAsync(resourceGroupName, vmScaleSetName, instanceId, skipShutdown);
        return client.<Void, Void>getLroResultAsync(response, client.getHttpPipeline(), Void.class, Void.class)
            .last()
            .flatMap(AsyncPollResponse::getFinalResult);
    }

    /**
     * Power off (stop) a virtual machine in a VM scale set. Note that resources are still attached and you are getting charged for the resources. Instead, use deallocate to release resources and avoid charges.
     * 
     * @param resourceGroupName 
     * @param vmScaleSetName 
     * @param instanceId 
     * @param skipShutdown 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void powerOff(String resourceGroupName, String vmScaleSetName, String instanceId, Boolean skipShutdown) {
        powerOffAsync(resourceGroupName, vmScaleSetName, instanceId, skipShutdown).block();
    }

    /**
     * Restarts a virtual machine in a VM scale set.
     * 
     * @param resourceGroupName 
     * @param vmScaleSetName 
     * @param instanceId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Flux<ByteBuffer>>> restartWithResponseAsync(String resourceGroupName, String vmScaleSetName, String instanceId) {
        final String apiVersion = "2019-03-01";
        return service.restart(this.client.getHost(), resourceGroupName, vmScaleSetName, instanceId, this.client.getSubscriptionId(), apiVersion);
    }

    /**
     * Restarts a virtual machine in a VM scale set.
     * 
     * @param resourceGroupName 
     * @param vmScaleSetName 
     * @param instanceId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> restartAsync(String resourceGroupName, String vmScaleSetName, String instanceId) {
        Mono<SimpleResponse<Flux<ByteBuffer>>> response = restartWithResponseAsync(resourceGroupName, vmScaleSetName, instanceId);
        return client.<Void, Void>getLroResultAsync(response, client.getHttpPipeline(), Void.class, Void.class)
            .last()
            .flatMap(AsyncPollResponse::getFinalResult);
    }

    /**
     * Restarts a virtual machine in a VM scale set.
     * 
     * @param resourceGroupName 
     * @param vmScaleSetName 
     * @param instanceId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void restart(String resourceGroupName, String vmScaleSetName, String instanceId) {
        restartAsync(resourceGroupName, vmScaleSetName, instanceId).block();
    }

    /**
     * Starts a virtual machine in a VM scale set.
     * 
     * @param resourceGroupName 
     * @param vmScaleSetName 
     * @param instanceId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Flux<ByteBuffer>>> startWithResponseAsync(String resourceGroupName, String vmScaleSetName, String instanceId) {
        final String apiVersion = "2019-03-01";
        return service.start(this.client.getHost(), resourceGroupName, vmScaleSetName, instanceId, this.client.getSubscriptionId(), apiVersion);
    }

    /**
     * Starts a virtual machine in a VM scale set.
     * 
     * @param resourceGroupName 
     * @param vmScaleSetName 
     * @param instanceId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> startAsync(String resourceGroupName, String vmScaleSetName, String instanceId) {
        Mono<SimpleResponse<Flux<ByteBuffer>>> response = startWithResponseAsync(resourceGroupName, vmScaleSetName, instanceId);
        return client.<Void, Void>getLroResultAsync(response, client.getHttpPipeline(), Void.class, Void.class)
            .last()
            .flatMap(AsyncPollResponse::getFinalResult);
    }

    /**
     * Starts a virtual machine in a VM scale set.
     * 
     * @param resourceGroupName 
     * @param vmScaleSetName 
     * @param instanceId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void start(String resourceGroupName, String vmScaleSetName, String instanceId) {
        startAsync(resourceGroupName, vmScaleSetName, instanceId).block();
    }

    /**
     * Shuts down the virtual machine in the virtual machine scale set, moves it to a new node, and powers it back on.
     * 
     * @param resourceGroupName 
     * @param vmScaleSetName 
     * @param instanceId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Flux<ByteBuffer>>> redeployWithResponseAsync(String resourceGroupName, String vmScaleSetName, String instanceId) {
        final String apiVersion = "2019-03-01";
        return service.redeploy(this.client.getHost(), resourceGroupName, vmScaleSetName, instanceId, this.client.getSubscriptionId(), apiVersion);
    }

    /**
     * Shuts down the virtual machine in the virtual machine scale set, moves it to a new node, and powers it back on.
     * 
     * @param resourceGroupName 
     * @param vmScaleSetName 
     * @param instanceId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> redeployAsync(String resourceGroupName, String vmScaleSetName, String instanceId) {
        Mono<SimpleResponse<Flux<ByteBuffer>>> response = redeployWithResponseAsync(resourceGroupName, vmScaleSetName, instanceId);
        return client.<Void, Void>getLroResultAsync(response, client.getHttpPipeline(), Void.class, Void.class)
            .last()
            .flatMap(AsyncPollResponse::getFinalResult);
    }

    /**
     * Shuts down the virtual machine in the virtual machine scale set, moves it to a new node, and powers it back on.
     * 
     * @param resourceGroupName 
     * @param vmScaleSetName 
     * @param instanceId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void redeploy(String resourceGroupName, String vmScaleSetName, String instanceId) {
        redeployAsync(resourceGroupName, vmScaleSetName, instanceId).block();
    }

    /**
     * Performs maintenance on a virtual machine in a VM scale set.
     * 
     * @param resourceGroupName 
     * @param vmScaleSetName 
     * @param instanceId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Flux<ByteBuffer>>> performMaintenanceWithResponseAsync(String resourceGroupName, String vmScaleSetName, String instanceId) {
        final String apiVersion = "2019-03-01";
        return service.performMaintenance(this.client.getHost(), resourceGroupName, vmScaleSetName, instanceId, this.client.getSubscriptionId(), apiVersion);
    }

    /**
     * Performs maintenance on a virtual machine in a VM scale set.
     * 
     * @param resourceGroupName 
     * @param vmScaleSetName 
     * @param instanceId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> performMaintenanceAsync(String resourceGroupName, String vmScaleSetName, String instanceId) {
        Mono<SimpleResponse<Flux<ByteBuffer>>> response = performMaintenanceWithResponseAsync(resourceGroupName, vmScaleSetName, instanceId);
        return client.<Void, Void>getLroResultAsync(response, client.getHttpPipeline(), Void.class, Void.class)
            .last()
            .flatMap(AsyncPollResponse::getFinalResult);
    }

    /**
     * Performs maintenance on a virtual machine in a VM scale set.
     * 
     * @param resourceGroupName 
     * @param vmScaleSetName 
     * @param instanceId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void performMaintenance(String resourceGroupName, String vmScaleSetName, String instanceId) {
        performMaintenanceAsync(resourceGroupName, vmScaleSetName, instanceId).block();
    }

    /**
     * Run command on a virtual machine in a VM scale set.
     * 
     * @param resourceGroupName 
     * @param vmScaleSetName 
     * @param instanceId 
     * @param parameters Capture Virtual Machine parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Flux<ByteBuffer>>> runCommandWithResponseAsync(String resourceGroupName, String vmScaleSetName, String instanceId, RunCommandInput parameters) {
        final String apiVersion = "2019-03-01";
        return service.runCommand(this.client.getHost(), resourceGroupName, vmScaleSetName, instanceId, this.client.getSubscriptionId(), parameters, apiVersion);
    }

    /**
     * Run command on a virtual machine in a VM scale set.
     * 
     * @param resourceGroupName 
     * @param vmScaleSetName 
     * @param instanceId 
     * @param parameters Capture Virtual Machine parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<RunCommandResultInner> runCommandAsync(String resourceGroupName, String vmScaleSetName, String instanceId, RunCommandInput parameters) {
        Mono<SimpleResponse<Flux<ByteBuffer>>> response = runCommandWithResponseAsync(resourceGroupName, vmScaleSetName, instanceId, parameters);
        return client.<RunCommandResultInner, RunCommandResultInner>getLroResultAsync(response, client.getHttpPipeline(), RunCommandResultInner.class, RunCommandResultInner.class)
            .last()
            .flatMap(AsyncPollResponse::getFinalResult);
    }

    /**
     * Run command on a virtual machine in a VM scale set.
     * 
     * @param resourceGroupName 
     * @param vmScaleSetName 
     * @param instanceId 
     * @param parameters Capture Virtual Machine parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RunCommandResultInner runCommand(String resourceGroupName, String vmScaleSetName, String instanceId, RunCommandInput parameters) {
        return runCommandAsync(resourceGroupName, vmScaleSetName, instanceId, parameters).block();
    }

    /**
     * Reimages (upgrade the operating system) a specific virtual machine in a VM scale set.
     * 
     * @param resourceGroupName 
     * @param vmScaleSetName 
     * @param instanceId 
     * @param tempDisk Specifies whether to reimage temp disk. Default value: false. Note: This temp disk reimage parameter is only supported for VM/VMSS with Ephemeral OS disk.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> beginReimageWithResponseAsync(String resourceGroupName, String vmScaleSetName, String instanceId, Boolean tempDisk) {
        final String apiVersion = "2019-03-01";
        VirtualMachineScaleSetVMReimageParameters vmScaleSetVMReimageInput = null;
        if (tempDisk != null) {
            vmScaleSetVMReimageInput = new VirtualMachineScaleSetVMReimageParameters();
            vmScaleSetVMReimageInput.withTempDisk(tempDisk);
        }
        return service.beginReimage(this.client.getHost(), resourceGroupName, vmScaleSetName, instanceId, this.client.getSubscriptionId(), vmScaleSetVMReimageInput, apiVersion);
    }

    /**
     * Reimages (upgrade the operating system) a specific virtual machine in a VM scale set.
     * 
     * @param resourceGroupName 
     * @param vmScaleSetName 
     * @param instanceId 
     * @param tempDisk Specifies whether to reimage temp disk. Default value: false. Note: This temp disk reimage parameter is only supported for VM/VMSS with Ephemeral OS disk.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> beginReimageAsync(String resourceGroupName, String vmScaleSetName, String instanceId, Boolean tempDisk) {
        return beginReimageWithResponseAsync(resourceGroupName, vmScaleSetName, instanceId, tempDisk)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Reimages (upgrade the operating system) a specific virtual machine in a VM scale set.
     * 
     * @param resourceGroupName 
     * @param vmScaleSetName 
     * @param instanceId 
     * @param tempDisk Specifies whether to reimage temp disk. Default value: false. Note: This temp disk reimage parameter is only supported for VM/VMSS with Ephemeral OS disk.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void beginReimage(String resourceGroupName, String vmScaleSetName, String instanceId, Boolean tempDisk) {
        beginReimageAsync(resourceGroupName, vmScaleSetName, instanceId, tempDisk).block();
    }

    /**
     * Allows you to re-image all the disks ( including data disks ) in the a VM scale set instance. This operation is only supported for managed disks.
     * 
     * @param resourceGroupName 
     * @param vmScaleSetName 
     * @param instanceId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> beginReimageAllWithResponseAsync(String resourceGroupName, String vmScaleSetName, String instanceId) {
        final String apiVersion = "2019-03-01";
        return service.beginReimageAll(this.client.getHost(), resourceGroupName, vmScaleSetName, instanceId, this.client.getSubscriptionId(), apiVersion);
    }

    /**
     * Allows you to re-image all the disks ( including data disks ) in the a VM scale set instance. This operation is only supported for managed disks.
     * 
     * @param resourceGroupName 
     * @param vmScaleSetName 
     * @param instanceId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> beginReimageAllAsync(String resourceGroupName, String vmScaleSetName, String instanceId) {
        return beginReimageAllWithResponseAsync(resourceGroupName, vmScaleSetName, instanceId)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Allows you to re-image all the disks ( including data disks ) in the a VM scale set instance. This operation is only supported for managed disks.
     * 
     * @param resourceGroupName 
     * @param vmScaleSetName 
     * @param instanceId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void beginReimageAll(String resourceGroupName, String vmScaleSetName, String instanceId) {
        beginReimageAllAsync(resourceGroupName, vmScaleSetName, instanceId).block();
    }

    /**
     * Deallocates a specific virtual machine in a VM scale set. Shuts down the virtual machine and releases the compute resources it uses. You are not billed for the compute resources of this virtual machine once it is deallocated.
     * 
     * @param resourceGroupName 
     * @param vmScaleSetName 
     * @param instanceId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> beginDeallocateWithResponseAsync(String resourceGroupName, String vmScaleSetName, String instanceId) {
        final String apiVersion = "2019-03-01";
        return service.beginDeallocate(this.client.getHost(), resourceGroupName, vmScaleSetName, instanceId, this.client.getSubscriptionId(), apiVersion);
    }

    /**
     * Deallocates a specific virtual machine in a VM scale set. Shuts down the virtual machine and releases the compute resources it uses. You are not billed for the compute resources of this virtual machine once it is deallocated.
     * 
     * @param resourceGroupName 
     * @param vmScaleSetName 
     * @param instanceId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> beginDeallocateAsync(String resourceGroupName, String vmScaleSetName, String instanceId) {
        return beginDeallocateWithResponseAsync(resourceGroupName, vmScaleSetName, instanceId)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Deallocates a specific virtual machine in a VM scale set. Shuts down the virtual machine and releases the compute resources it uses. You are not billed for the compute resources of this virtual machine once it is deallocated.
     * 
     * @param resourceGroupName 
     * @param vmScaleSetName 
     * @param instanceId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void beginDeallocate(String resourceGroupName, String vmScaleSetName, String instanceId) {
        beginDeallocateAsync(resourceGroupName, vmScaleSetName, instanceId).block();
    }

    /**
     * Updates a virtual machine of a VM scale set.
     * 
     * @param resourceGroupName 
     * @param vmScaleSetName 
     * @param instanceId 
     * @param parameters Describes a virtual machine scale set virtual machine.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<VirtualMachineScaleSetVMInner>> beginUpdateWithResponseAsync(String resourceGroupName, String vmScaleSetName, String instanceId, VirtualMachineScaleSetVMInner parameters) {
        final String apiVersion = "2019-03-01";
        return service.beginUpdate(this.client.getHost(), resourceGroupName, vmScaleSetName, instanceId, this.client.getSubscriptionId(), parameters, apiVersion);
    }

    /**
     * Updates a virtual machine of a VM scale set.
     * 
     * @param resourceGroupName 
     * @param vmScaleSetName 
     * @param instanceId 
     * @param parameters Describes a virtual machine scale set virtual machine.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VirtualMachineScaleSetVMInner> beginUpdateAsync(String resourceGroupName, String vmScaleSetName, String instanceId, VirtualMachineScaleSetVMInner parameters) {
        return beginUpdateWithResponseAsync(resourceGroupName, vmScaleSetName, instanceId, parameters)
            .flatMap((SimpleResponse<VirtualMachineScaleSetVMInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Updates a virtual machine of a VM scale set.
     * 
     * @param resourceGroupName 
     * @param vmScaleSetName 
     * @param instanceId 
     * @param parameters Describes a virtual machine scale set virtual machine.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public VirtualMachineScaleSetVMInner beginUpdate(String resourceGroupName, String vmScaleSetName, String instanceId, VirtualMachineScaleSetVMInner parameters) {
        return beginUpdateAsync(resourceGroupName, vmScaleSetName, instanceId, parameters).block();
    }

    /**
     * Deletes a virtual machine from a VM scale set.
     * 
     * @param resourceGroupName 
     * @param vmScaleSetName 
     * @param instanceId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> beginDeleteWithResponseAsync(String resourceGroupName, String vmScaleSetName, String instanceId) {
        final String apiVersion = "2019-03-01";
        return service.beginDelete(this.client.getHost(), resourceGroupName, vmScaleSetName, instanceId, this.client.getSubscriptionId(), apiVersion);
    }

    /**
     * Deletes a virtual machine from a VM scale set.
     * 
     * @param resourceGroupName 
     * @param vmScaleSetName 
     * @param instanceId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> beginDeleteAsync(String resourceGroupName, String vmScaleSetName, String instanceId) {
        return beginDeleteWithResponseAsync(resourceGroupName, vmScaleSetName, instanceId)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Deletes a virtual machine from a VM scale set.
     * 
     * @param resourceGroupName 
     * @param vmScaleSetName 
     * @param instanceId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void beginDelete(String resourceGroupName, String vmScaleSetName, String instanceId) {
        beginDeleteAsync(resourceGroupName, vmScaleSetName, instanceId).block();
    }

    /**
     * Power off (stop) a virtual machine in a VM scale set. Note that resources are still attached and you are getting charged for the resources. Instead, use deallocate to release resources and avoid charges.
     * 
     * @param resourceGroupName 
     * @param vmScaleSetName 
     * @param instanceId 
     * @param skipShutdown 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> beginPowerOffWithResponseAsync(String resourceGroupName, String vmScaleSetName, String instanceId, Boolean skipShutdown) {
        final String apiVersion = "2019-03-01";
        return service.beginPowerOff(this.client.getHost(), resourceGroupName, vmScaleSetName, instanceId, skipShutdown, this.client.getSubscriptionId(), apiVersion);
    }

    /**
     * Power off (stop) a virtual machine in a VM scale set. Note that resources are still attached and you are getting charged for the resources. Instead, use deallocate to release resources and avoid charges.
     * 
     * @param resourceGroupName 
     * @param vmScaleSetName 
     * @param instanceId 
     * @param skipShutdown 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> beginPowerOffAsync(String resourceGroupName, String vmScaleSetName, String instanceId, Boolean skipShutdown) {
        return beginPowerOffWithResponseAsync(resourceGroupName, vmScaleSetName, instanceId, skipShutdown)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Power off (stop) a virtual machine in a VM scale set. Note that resources are still attached and you are getting charged for the resources. Instead, use deallocate to release resources and avoid charges.
     * 
     * @param resourceGroupName 
     * @param vmScaleSetName 
     * @param instanceId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> beginPowerOffAsync(String resourceGroupName, String vmScaleSetName, String instanceId) {
        final Boolean skipShutdown = null;
        final String apiVersion = "2019-03-01";
        return beginPowerOffWithResponseAsync(resourceGroupName, vmScaleSetName, instanceId, skipShutdown)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Power off (stop) a virtual machine in a VM scale set. Note that resources are still attached and you are getting charged for the resources. Instead, use deallocate to release resources and avoid charges.
     * 
     * @param resourceGroupName 
     * @param vmScaleSetName 
     * @param instanceId 
     * @param skipShutdown 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void beginPowerOff(String resourceGroupName, String vmScaleSetName, String instanceId, Boolean skipShutdown) {
        beginPowerOffAsync(resourceGroupName, vmScaleSetName, instanceId, skipShutdown).block();
    }

    /**
     * Power off (stop) a virtual machine in a VM scale set. Note that resources are still attached and you are getting charged for the resources. Instead, use deallocate to release resources and avoid charges.
     * 
     * @param resourceGroupName 
     * @param vmScaleSetName 
     * @param instanceId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void beginPowerOff(String resourceGroupName, String vmScaleSetName, String instanceId) {
        final Boolean skipShutdown = null;
        final String apiVersion = "2019-03-01";
        beginPowerOffAsync(resourceGroupName, vmScaleSetName, instanceId, skipShutdown).block();
    }

    /**
     * Restarts a virtual machine in a VM scale set.
     * 
     * @param resourceGroupName 
     * @param vmScaleSetName 
     * @param instanceId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> beginRestartWithResponseAsync(String resourceGroupName, String vmScaleSetName, String instanceId) {
        final String apiVersion = "2019-03-01";
        return service.beginRestart(this.client.getHost(), resourceGroupName, vmScaleSetName, instanceId, this.client.getSubscriptionId(), apiVersion);
    }

    /**
     * Restarts a virtual machine in a VM scale set.
     * 
     * @param resourceGroupName 
     * @param vmScaleSetName 
     * @param instanceId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> beginRestartAsync(String resourceGroupName, String vmScaleSetName, String instanceId) {
        return beginRestartWithResponseAsync(resourceGroupName, vmScaleSetName, instanceId)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Restarts a virtual machine in a VM scale set.
     * 
     * @param resourceGroupName 
     * @param vmScaleSetName 
     * @param instanceId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void beginRestart(String resourceGroupName, String vmScaleSetName, String instanceId) {
        beginRestartAsync(resourceGroupName, vmScaleSetName, instanceId).block();
    }

    /**
     * Starts a virtual machine in a VM scale set.
     * 
     * @param resourceGroupName 
     * @param vmScaleSetName 
     * @param instanceId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> beginStartWithResponseAsync(String resourceGroupName, String vmScaleSetName, String instanceId) {
        final String apiVersion = "2019-03-01";
        return service.beginStart(this.client.getHost(), resourceGroupName, vmScaleSetName, instanceId, this.client.getSubscriptionId(), apiVersion);
    }

    /**
     * Starts a virtual machine in a VM scale set.
     * 
     * @param resourceGroupName 
     * @param vmScaleSetName 
     * @param instanceId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> beginStartAsync(String resourceGroupName, String vmScaleSetName, String instanceId) {
        return beginStartWithResponseAsync(resourceGroupName, vmScaleSetName, instanceId)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Starts a virtual machine in a VM scale set.
     * 
     * @param resourceGroupName 
     * @param vmScaleSetName 
     * @param instanceId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void beginStart(String resourceGroupName, String vmScaleSetName, String instanceId) {
        beginStartAsync(resourceGroupName, vmScaleSetName, instanceId).block();
    }

    /**
     * Shuts down the virtual machine in the virtual machine scale set, moves it to a new node, and powers it back on.
     * 
     * @param resourceGroupName 
     * @param vmScaleSetName 
     * @param instanceId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> beginRedeployWithResponseAsync(String resourceGroupName, String vmScaleSetName, String instanceId) {
        final String apiVersion = "2019-03-01";
        return service.beginRedeploy(this.client.getHost(), resourceGroupName, vmScaleSetName, instanceId, this.client.getSubscriptionId(), apiVersion);
    }

    /**
     * Shuts down the virtual machine in the virtual machine scale set, moves it to a new node, and powers it back on.
     * 
     * @param resourceGroupName 
     * @param vmScaleSetName 
     * @param instanceId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> beginRedeployAsync(String resourceGroupName, String vmScaleSetName, String instanceId) {
        return beginRedeployWithResponseAsync(resourceGroupName, vmScaleSetName, instanceId)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Shuts down the virtual machine in the virtual machine scale set, moves it to a new node, and powers it back on.
     * 
     * @param resourceGroupName 
     * @param vmScaleSetName 
     * @param instanceId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void beginRedeploy(String resourceGroupName, String vmScaleSetName, String instanceId) {
        beginRedeployAsync(resourceGroupName, vmScaleSetName, instanceId).block();
    }

    /**
     * Performs maintenance on a virtual machine in a VM scale set.
     * 
     * @param resourceGroupName 
     * @param vmScaleSetName 
     * @param instanceId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> beginPerformMaintenanceWithResponseAsync(String resourceGroupName, String vmScaleSetName, String instanceId) {
        final String apiVersion = "2019-03-01";
        return service.beginPerformMaintenance(this.client.getHost(), resourceGroupName, vmScaleSetName, instanceId, this.client.getSubscriptionId(), apiVersion);
    }

    /**
     * Performs maintenance on a virtual machine in a VM scale set.
     * 
     * @param resourceGroupName 
     * @param vmScaleSetName 
     * @param instanceId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> beginPerformMaintenanceAsync(String resourceGroupName, String vmScaleSetName, String instanceId) {
        return beginPerformMaintenanceWithResponseAsync(resourceGroupName, vmScaleSetName, instanceId)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Performs maintenance on a virtual machine in a VM scale set.
     * 
     * @param resourceGroupName 
     * @param vmScaleSetName 
     * @param instanceId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void beginPerformMaintenance(String resourceGroupName, String vmScaleSetName, String instanceId) {
        beginPerformMaintenanceAsync(resourceGroupName, vmScaleSetName, instanceId).block();
    }

    /**
     * Run command on a virtual machine in a VM scale set.
     * 
     * @param resourceGroupName 
     * @param vmScaleSetName 
     * @param instanceId 
     * @param parameters Capture Virtual Machine parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<RunCommandResultInner>> beginRunCommandWithResponseAsync(String resourceGroupName, String vmScaleSetName, String instanceId, RunCommandInput parameters) {
        final String apiVersion = "2019-03-01";
        return service.beginRunCommand(this.client.getHost(), resourceGroupName, vmScaleSetName, instanceId, this.client.getSubscriptionId(), parameters, apiVersion);
    }

    /**
     * Run command on a virtual machine in a VM scale set.
     * 
     * @param resourceGroupName 
     * @param vmScaleSetName 
     * @param instanceId 
     * @param parameters Capture Virtual Machine parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<RunCommandResultInner> beginRunCommandAsync(String resourceGroupName, String vmScaleSetName, String instanceId, RunCommandInput parameters) {
        return beginRunCommandWithResponseAsync(resourceGroupName, vmScaleSetName, instanceId, parameters)
            .flatMap((SimpleResponse<RunCommandResultInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Run command on a virtual machine in a VM scale set.
     * 
     * @param resourceGroupName 
     * @param vmScaleSetName 
     * @param instanceId 
     * @param parameters Capture Virtual Machine parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RunCommandResultInner beginRunCommand(String resourceGroupName, String vmScaleSetName, String instanceId, RunCommandInput parameters) {
        return beginRunCommandAsync(resourceGroupName, vmScaleSetName, instanceId, parameters).block();
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink null
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<VirtualMachineScaleSetVMInner>> listNextSinglePageAsync(String nextLink) {
        return service.listNext(nextLink).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }
}
