/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.compute.v2020_12_01.implementation;

import com.microsoft.azure.arm.resources.models.implementation.GroupableResourceCoreImpl;
import com.microsoft.azure.management.compute.v2020_12_01.DiskAccess;
import rx.Observable;
import java.util.List;
import org.joda.time.DateTime;
import java.util.ArrayList;
import com.microsoft.azure.management.compute.v2020_12_01.PrivateEndpointConnection;

class DiskAccessImpl extends GroupableResourceCoreImpl<DiskAccess, DiskAccessInner, DiskAccessImpl, ComputeManager> implements DiskAccess, DiskAccess.Definition, DiskAccess.Update {
    DiskAccessImpl(String name, DiskAccessInner inner, ComputeManager manager) {
        super(name, inner, manager);
    }

    @Override
    public Observable<DiskAccess> createResourceAsync() {
        DiskAccessesInner client = this.manager().inner().diskAccesses();
        return client.createOrUpdateAsync(this.resourceGroupName(), this.name(), this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<DiskAccess> updateResourceAsync() {
        DiskAccessesInner client = this.manager().inner().diskAccesses();
        return client.createOrUpdateAsync(this.resourceGroupName(), this.name(), this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<DiskAccessInner> getInnerAsync() {
        DiskAccessesInner client = this.manager().inner().diskAccesses();
        return client.getByResourceGroupAsync(this.resourceGroupName(), this.name());
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public List<PrivateEndpointConnection> privateEndpointConnections() {
        List<PrivateEndpointConnection> lst = new ArrayList<PrivateEndpointConnection>();
        if (this.inner().privateEndpointConnections() != null) {
            for (PrivateEndpointConnectionInner inner : this.inner().privateEndpointConnections()) {
                lst.add( new PrivateEndpointConnectionImpl(inner, manager()));
            }
        }
        return lst;
    }

    @Override
    public String provisioningState() {
        return this.inner().provisioningState();
    }

    @Override
    public DateTime timeCreated() {
        return this.inner().timeCreated();
    }

}
