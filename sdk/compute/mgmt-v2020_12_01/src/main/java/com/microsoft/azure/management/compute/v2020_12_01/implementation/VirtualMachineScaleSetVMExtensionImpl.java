/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.compute.v2020_12_01.implementation;

import com.microsoft.azure.management.compute.v2020_12_01.VirtualMachineScaleSetVMExtension;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import com.microsoft.azure.management.compute.v2020_12_01.VirtualMachineScaleSetVMExtensionUpdate;
import com.microsoft.azure.management.compute.v2020_12_01.VirtualMachineExtensionInstanceView;
import rx.functions.Func1;

class VirtualMachineScaleSetVMExtensionImpl extends CreatableUpdatableImpl<VirtualMachineScaleSetVMExtension, VirtualMachineScaleSetVMExtensionInner, VirtualMachineScaleSetVMExtensionImpl> implements VirtualMachineScaleSetVMExtension, VirtualMachineScaleSetVMExtension.Definition, VirtualMachineScaleSetVMExtension.Update {
    private final ComputeManager manager;
    private String resourceGroupName;
    private String vmScaleSetName;
    private String instanceId;
    private String vmExtensionName;
    private VirtualMachineScaleSetVMExtensionUpdate updateParameter;

    VirtualMachineScaleSetVMExtensionImpl(String name, ComputeManager manager) {
        super(name, new VirtualMachineScaleSetVMExtensionInner());
        this.manager = manager;
        // Set resource name
        this.vmExtensionName = name;
        //
        this.updateParameter = new VirtualMachineScaleSetVMExtensionUpdate();
    }

    VirtualMachineScaleSetVMExtensionImpl(VirtualMachineScaleSetVMExtensionInner inner, ComputeManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.vmExtensionName = inner.name();
        // set resource ancestor and positional variables
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.vmScaleSetName = IdParsingUtils.getValueFromIdByName(inner.id(), "virtualMachineScaleSets");
        this.instanceId = IdParsingUtils.getValueFromIdByName(inner.id(), "virtualMachines");
        this.vmExtensionName = IdParsingUtils.getValueFromIdByName(inner.id(), "extensions");
        //
        this.updateParameter = new VirtualMachineScaleSetVMExtensionUpdate();
    }

    @Override
    public ComputeManager manager() {
        return this.manager;
    }

    @Override
    public Observable<VirtualMachineScaleSetVMExtension> createResourceAsync() {
        VirtualMachineScaleSetVMExtensionsInner client = this.manager().inner().virtualMachineScaleSetVMExtensions();
        return client.createOrUpdateAsync(this.resourceGroupName, this.vmScaleSetName, this.instanceId, this.vmExtensionName, this.inner())
            .map(new Func1<VirtualMachineScaleSetVMExtensionInner, VirtualMachineScaleSetVMExtensionInner>() {
               @Override
               public VirtualMachineScaleSetVMExtensionInner call(VirtualMachineScaleSetVMExtensionInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<VirtualMachineScaleSetVMExtension> updateResourceAsync() {
        VirtualMachineScaleSetVMExtensionsInner client = this.manager().inner().virtualMachineScaleSetVMExtensions();
        return client.updateAsync(this.resourceGroupName, this.vmScaleSetName, this.instanceId, this.vmExtensionName, this.updateParameter)
            .map(new Func1<VirtualMachineScaleSetVMExtensionInner, VirtualMachineScaleSetVMExtensionInner>() {
               @Override
               public VirtualMachineScaleSetVMExtensionInner call(VirtualMachineScaleSetVMExtensionInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<VirtualMachineScaleSetVMExtensionInner> getInnerAsync() {
        VirtualMachineScaleSetVMExtensionsInner client = this.manager().inner().virtualMachineScaleSetVMExtensions();
        return client.getAsync(this.resourceGroupName, this.vmScaleSetName, this.instanceId, this.vmExtensionName);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }

    private void resetCreateUpdateParameters() {
        this.updateParameter = new VirtualMachineScaleSetVMExtensionUpdate();
    }

    @Override
    public Boolean autoUpgradeMinorVersion() {
        return this.inner().autoUpgradeMinorVersion();
    }

    @Override
    public Boolean enableAutomaticUpgrade() {
        return this.inner().enableAutomaticUpgrade();
    }

    @Override
    public String forceUpdateTag() {
        return this.inner().forceUpdateTag();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public VirtualMachineExtensionInstanceView instanceView() {
        return this.inner().instanceView();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public Object protectedSettings() {
        return this.inner().protectedSettings();
    }

    @Override
    public String provisioningState() {
        return this.inner().provisioningState();
    }

    @Override
    public String publisher() {
        return this.inner().publisher();
    }

    @Override
    public Object settings() {
        return this.inner().settings();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public String type1() {
        return this.inner().type1();
    }

    @Override
    public String typeHandlerVersion() {
        return this.inner().typeHandlerVersion();
    }

    @Override
    public VirtualMachineScaleSetVMExtensionImpl withExistingVirtualmachine(String resourceGroupName, String vmScaleSetName, String instanceId) {
        this.resourceGroupName = resourceGroupName;
        this.vmScaleSetName = vmScaleSetName;
        this.instanceId = instanceId;
        return this;
    }

    @Override
    public VirtualMachineScaleSetVMExtensionImpl withInstanceView(VirtualMachineExtensionInstanceView instanceView) {
        this.inner().withInstanceView(instanceView);
        return this;
    }

    @Override
    public VirtualMachineScaleSetVMExtensionImpl withAutoUpgradeMinorVersion(Boolean autoUpgradeMinorVersion) {
        if (isInCreateMode()) {
            this.inner().withAutoUpgradeMinorVersion(autoUpgradeMinorVersion);
        } else {
            this.updateParameter.withAutoUpgradeMinorVersion(autoUpgradeMinorVersion);
        }
        return this;
    }

    @Override
    public VirtualMachineScaleSetVMExtensionImpl withEnableAutomaticUpgrade(Boolean enableAutomaticUpgrade) {
        if (isInCreateMode()) {
            this.inner().withEnableAutomaticUpgrade(enableAutomaticUpgrade);
        } else {
            this.updateParameter.withEnableAutomaticUpgrade(enableAutomaticUpgrade);
        }
        return this;
    }

    @Override
    public VirtualMachineScaleSetVMExtensionImpl withForceUpdateTag(String forceUpdateTag) {
        if (isInCreateMode()) {
            this.inner().withForceUpdateTag(forceUpdateTag);
        } else {
            this.updateParameter.withForceUpdateTag(forceUpdateTag);
        }
        return this;
    }

    @Override
    public VirtualMachineScaleSetVMExtensionImpl withProtectedSettings(Object protectedSettings) {
        if (isInCreateMode()) {
            this.inner().withProtectedSettings(protectedSettings);
        } else {
            this.updateParameter.withProtectedSettings(protectedSettings);
        }
        return this;
    }

    @Override
    public VirtualMachineScaleSetVMExtensionImpl withPublisher(String publisher) {
        if (isInCreateMode()) {
            this.inner().withPublisher(publisher);
        } else {
            this.updateParameter.withPublisher(publisher);
        }
        return this;
    }

    @Override
    public VirtualMachineScaleSetVMExtensionImpl withSettings(Object settings) {
        if (isInCreateMode()) {
            this.inner().withSettings(settings);
        } else {
            this.updateParameter.withSettings(settings);
        }
        return this;
    }

    @Override
    public VirtualMachineScaleSetVMExtensionImpl withType1(String type1) {
        if (isInCreateMode()) {
            this.inner().withType1(type1);
        } else {
            this.updateParameter.withType1(type1);
        }
        return this;
    }

    @Override
    public VirtualMachineScaleSetVMExtensionImpl withTypeHandlerVersion(String typeHandlerVersion) {
        if (isInCreateMode()) {
            this.inner().withTypeHandlerVersion(typeHandlerVersion);
        } else {
            this.updateParameter.withTypeHandlerVersion(typeHandlerVersion);
        }
        return this;
    }

}
