/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.compute.v2020_12_01.implementation;

import com.microsoft.azure.management.compute.v2020_12_01.VirtualMachineAssessPatchesResult;
import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import java.util.List;
import com.microsoft.azure.management.compute.v2020_12_01.VirtualMachineSoftwarePatchProperties;
import com.microsoft.azure.management.compute.v2020_12_01.ApiError;
import org.joda.time.DateTime;
import com.microsoft.azure.management.compute.v2020_12_01.PatchOperationStatus;

class VirtualMachineAssessPatchesResultImpl extends WrapperImpl<VirtualMachineAssessPatchesResultInner> implements VirtualMachineAssessPatchesResult {
    private final ComputeManager manager;
    VirtualMachineAssessPatchesResultImpl(VirtualMachineAssessPatchesResultInner inner, ComputeManager manager) {
        super(inner);
        this.manager = manager;
    }

    @Override
    public ComputeManager manager() {
        return this.manager;
    }

    @Override
    public String assessmentActivityId() {
        return this.inner().assessmentActivityId();
    }

    @Override
    public List<VirtualMachineSoftwarePatchProperties> availablePatches() {
        return this.inner().availablePatches();
    }

    @Override
    public Integer criticalAndSecurityPatchCount() {
        return this.inner().criticalAndSecurityPatchCount();
    }

    @Override
    public ApiError error() {
        return this.inner().error();
    }

    @Override
    public Integer otherPatchCount() {
        return this.inner().otherPatchCount();
    }

    @Override
    public Boolean rebootPending() {
        return this.inner().rebootPending();
    }

    @Override
    public DateTime startDateTime() {
        return this.inner().startDateTime();
    }

    @Override
    public PatchOperationStatus status() {
        return this.inner().status();
    }

}
