/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * abc
 */

package com.microsoft.azure.management.compute.v2020_12_01.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.compute.v2020_12_01.VirtualMachineImagesEdgeZones;
import rx.Observable;
import rx.functions.Func1;
import java.util.List;
import com.microsoft.azure.management.compute.v2020_12_01.EdgeZoneLocationVirtualMachineImageResource;
import com.microsoft.azure.management.compute.v2020_12_01.EdgeZoneLocationVirtualMachineImage;
import com.microsoft.azure.management.compute.v2020_12_01.LocationVirtualMachineImageResource;

class VirtualMachineImagesEdgeZonesImpl extends WrapperImpl<VirtualMachineImagesEdgeZonesInner> implements VirtualMachineImagesEdgeZones {
    private final ComputeManager manager;

    VirtualMachineImagesEdgeZonesImpl(ComputeManager manager) {
        super(manager.inner().virtualMachineImagesEdgeZones());
        this.manager = manager;
    }

    public ComputeManager manager() {
        return this.manager;
    }

    private EdgeZoneLocationVirtualMachineImageResourceImpl wrapEdgeZoneLocationVirtualMachineImageResourceModel(VirtualMachineImageResourceInner inner) {
        return  new EdgeZoneLocationVirtualMachineImageResourceImpl(inner, manager());
    }

    private EdgeZoneLocationVirtualMachineImageImpl wrapEdgeZoneLocationVirtualMachineImageModel(VirtualMachineImageInner inner) {
        return  new EdgeZoneLocationVirtualMachineImageImpl(inner, manager());
    }

    private Observable<VirtualMachineImageInner> getVirtualMachineImageInnerUsingVirtualMachineImagesEdgeZonesInnerAsync(String id) {
        String location = IdParsingUtils.getValueFromIdByName(id, "locations");
        String edgeZone = IdParsingUtils.getValueFromIdByName(id, "edgeZones");
        String publisherName = IdParsingUtils.getValueFromIdByName(id, "publishers");
        String offer = IdParsingUtils.getValueFromIdByName(id, "offers");
        String skus = IdParsingUtils.getValueFromIdByName(id, "skus");
        String version = IdParsingUtils.getValueFromIdByName(id, "versions");
        VirtualMachineImagesEdgeZonesInner client = this.inner();
        return client.getAsync(location, edgeZone, publisherName, offer, skus, version);
    }

    @Override
    public Observable<EdgeZoneLocationVirtualMachineImageResource> listPublishersAsync(String location, String edgeZone) {
        VirtualMachineImagesEdgeZonesInner client = this.inner();
        return client.listPublishersAsync(location, edgeZone)
        .flatMap(new Func1<List<VirtualMachineImageResourceInner>, Observable<VirtualMachineImageResourceInner>>() {
            @Override
            public Observable<VirtualMachineImageResourceInner> call(List<VirtualMachineImageResourceInner> innerList) {
                return Observable.from(innerList);
            }
        })
        .map(new Func1<VirtualMachineImageResourceInner, EdgeZoneLocationVirtualMachineImageResource>() {
            @Override
            public EdgeZoneLocationVirtualMachineImageResource call(VirtualMachineImageResourceInner inner) {
                return wrapEdgeZoneLocationVirtualMachineImageResourceModel(inner);
            }
        });
    }

    @Override
    public Observable<EdgeZoneLocationVirtualMachineImage> getAsync(String location, String edgeZone, String publisherName, String offer, String skus, String version) {
        VirtualMachineImagesEdgeZonesInner client = this.inner();
        return client.getAsync(location, edgeZone, publisherName, offer, skus, version)
        .flatMap(new Func1<VirtualMachineImageInner, Observable<EdgeZoneLocationVirtualMachineImage>>() {
            @Override
            public Observable<EdgeZoneLocationVirtualMachineImage> call(VirtualMachineImageInner inner) {
                if (inner == null) {
                    return Observable.empty();
                } else {
                    return Observable.just((EdgeZoneLocationVirtualMachineImage)wrapEdgeZoneLocationVirtualMachineImageModel(inner));
                }
            }
       });
    }

    @Override
    public Observable<EdgeZoneLocationVirtualMachineImage> listAsync(String location, String edgeZone, String publisherName, String offer, String skus) {
        VirtualMachineImagesEdgeZonesInner client = this.inner();
        return client.listAsync(location, edgeZone, publisherName, offer, skus)
        .flatMap(new Func1<List<VirtualMachineImageResourceInner>, Observable<VirtualMachineImageResourceInner>>() {
            @Override
            public Observable<VirtualMachineImageResourceInner> call(List<VirtualMachineImageResourceInner> innerList) {
                return Observable.from(innerList);
            }
        })
        .flatMap(new Func1<VirtualMachineImageResourceInner, Observable<VirtualMachineImageInner>>() {
            @Override
            public Observable<VirtualMachineImageInner> call(VirtualMachineImageResourceInner inner) {
                return getVirtualMachineImageInnerUsingVirtualMachineImagesEdgeZonesInnerAsync(inner.id());
            }
        })
        .map(new Func1<VirtualMachineImageInner, EdgeZoneLocationVirtualMachineImage>() {
            @Override
            public EdgeZoneLocationVirtualMachineImage call(VirtualMachineImageInner inner) {
                return wrapEdgeZoneLocationVirtualMachineImageModel(inner);
            }
        });
    }

    @Override
    public Observable<LocationVirtualMachineImageResource> listOffersAsync(String location, String edgeZone, String publisherName) {
        VirtualMachineImagesEdgeZonesInner client = this.inner();
        return client.listOffersAsync(location, edgeZone, publisherName)
        .flatMap(new Func1<List<VirtualMachineImageResourceInner>, Observable<VirtualMachineImageResourceInner>>() {
            @Override
            public Observable<VirtualMachineImageResourceInner> call(List<VirtualMachineImageResourceInner> innerList) {
                return Observable.from(innerList);
            }
        })
        .map(new Func1<VirtualMachineImageResourceInner, LocationVirtualMachineImageResource>() {
            @Override
            public LocationVirtualMachineImageResource call(VirtualMachineImageResourceInner inner) {
                return new LocationVirtualMachineImageResourceImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<EdgeZoneLocationVirtualMachineImageResource> listSkusAsync(String location, String edgeZone, String publisherName, String offer) {
        VirtualMachineImagesEdgeZonesInner client = this.inner();
        return client.listSkusAsync(location, edgeZone, publisherName, offer)
        .flatMap(new Func1<List<VirtualMachineImageResourceInner>, Observable<VirtualMachineImageResourceInner>>() {
            @Override
            public Observable<VirtualMachineImageResourceInner> call(List<VirtualMachineImageResourceInner> innerList) {
                return Observable.from(innerList);
            }
        })
        .map(new Func1<VirtualMachineImageResourceInner, EdgeZoneLocationVirtualMachineImageResource>() {
            @Override
            public EdgeZoneLocationVirtualMachineImageResource call(VirtualMachineImageResourceInner inner) {
                return wrapEdgeZoneLocationVirtualMachineImageResourceModel(inner);
            }
        });
    }

}
