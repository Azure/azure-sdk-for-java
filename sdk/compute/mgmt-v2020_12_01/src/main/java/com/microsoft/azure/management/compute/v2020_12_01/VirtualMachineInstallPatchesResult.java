/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.compute.v2020_12_01;

import com.microsoft.azure.arm.model.HasInner;
import com.microsoft.azure.arm.resources.models.HasManager;
import com.microsoft.azure.management.compute.v2020_12_01.implementation.ComputeManager;
import com.microsoft.azure.management.compute.v2020_12_01.implementation.VirtualMachineInstallPatchesResultInner;
import java.util.List;
import org.joda.time.DateTime;

/**
 * Type representing VirtualMachineInstallPatchesResult.
 */
public interface VirtualMachineInstallPatchesResult extends HasInner<VirtualMachineInstallPatchesResultInner>, HasManager<ComputeManager> {
    /**
     * @return the error value.
     */
    ApiError error();

    /**
     * @return the excludedPatchCount value.
     */
    Integer excludedPatchCount();

    /**
     * @return the failedPatchCount value.
     */
    Integer failedPatchCount();

    /**
     * @return the installationActivityId value.
     */
    String installationActivityId();

    /**
     * @return the installedPatchCount value.
     */
    Integer installedPatchCount();

    /**
     * @return the maintenanceWindowExceeded value.
     */
    Boolean maintenanceWindowExceeded();

    /**
     * @return the notSelectedPatchCount value.
     */
    Integer notSelectedPatchCount();

    /**
     * @return the patches value.
     */
    List<PatchInstallationDetail> patches();

    /**
     * @return the pendingPatchCount value.
     */
    Integer pendingPatchCount();

    /**
     * @return the rebootStatus value.
     */
    VMGuestPatchRebootStatus rebootStatus();

    /**
     * @return the startDateTime value.
     */
    DateTime startDateTime();

    /**
     * @return the status value.
     */
    PatchOperationStatus status();

}
