// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.compute.generated.generated;

import com.azure.core.management.SubResource;
import com.azure.core.management.serializer.SerializerFactory;
import com.azure.core.util.Context;
import com.azure.core.util.serializer.SerializerEncoding;
import com.azure.resourcemanager.compute.generated.fluent.models.VirtualMachineScaleSetExtensionInner;
import com.azure.resourcemanager.compute.generated.models.AdditionalCapabilities;
import com.azure.resourcemanager.compute.generated.models.AdditionalUnattendContent;
import com.azure.resourcemanager.compute.generated.models.ApiEntityReference;
import com.azure.resourcemanager.compute.generated.models.AutomaticOSUpgradePolicy;
import com.azure.resourcemanager.compute.generated.models.AutomaticRepairsPolicy;
import com.azure.resourcemanager.compute.generated.models.BillingProfile;
import com.azure.resourcemanager.compute.generated.models.BootDiagnostics;
import com.azure.resourcemanager.compute.generated.models.CachingTypes;
import com.azure.resourcemanager.compute.generated.models.ComponentNames;
import com.azure.resourcemanager.compute.generated.models.DeleteOptions;
import com.azure.resourcemanager.compute.generated.models.DiagnosticsProfile;
import com.azure.resourcemanager.compute.generated.models.DiskCreateOptionTypes;
import com.azure.resourcemanager.compute.generated.models.DiskEncryptionSetParameters;
import com.azure.resourcemanager.compute.generated.models.ImageReference;
import com.azure.resourcemanager.compute.generated.models.IpVersion;
import com.azure.resourcemanager.compute.generated.models.LinuxConfiguration;
import com.azure.resourcemanager.compute.generated.models.LinuxPatchAssessmentMode;
import com.azure.resourcemanager.compute.generated.models.LinuxPatchSettings;
import com.azure.resourcemanager.compute.generated.models.LinuxVMGuestPatchMode;
import com.azure.resourcemanager.compute.generated.models.NetworkApiVersion;
import com.azure.resourcemanager.compute.generated.models.PassNames;
import com.azure.resourcemanager.compute.generated.models.PatchSettings;
import com.azure.resourcemanager.compute.generated.models.Plan;
import com.azure.resourcemanager.compute.generated.models.ProtocolTypes;
import com.azure.resourcemanager.compute.generated.models.ResourceIdentityType;
import com.azure.resourcemanager.compute.generated.models.RollingUpgradePolicy;
import com.azure.resourcemanager.compute.generated.models.ScaleInPolicy;
import com.azure.resourcemanager.compute.generated.models.ScheduledEventsProfile;
import com.azure.resourcemanager.compute.generated.models.SecurityProfile;
import com.azure.resourcemanager.compute.generated.models.SecurityTypes;
import com.azure.resourcemanager.compute.generated.models.SettingNames;
import com.azure.resourcemanager.compute.generated.models.Sku;
import com.azure.resourcemanager.compute.generated.models.SshConfiguration;
import com.azure.resourcemanager.compute.generated.models.SshPublicKey;
import com.azure.resourcemanager.compute.generated.models.StorageAccountTypes;
import com.azure.resourcemanager.compute.generated.models.TerminateNotificationProfile;
import com.azure.resourcemanager.compute.generated.models.UefiSettings;
import com.azure.resourcemanager.compute.generated.models.UpgradeMode;
import com.azure.resourcemanager.compute.generated.models.UpgradePolicy;
import com.azure.resourcemanager.compute.generated.models.VaultCertificate;
import com.azure.resourcemanager.compute.generated.models.VaultSecretGroup;
import com.azure.resourcemanager.compute.generated.models.VirtualHardDisk;
import com.azure.resourcemanager.compute.generated.models.VirtualMachineScaleSet;
import com.azure.resourcemanager.compute.generated.models.VirtualMachineScaleSetDataDisk;
import com.azure.resourcemanager.compute.generated.models.VirtualMachineScaleSetExtensionProfile;
import com.azure.resourcemanager.compute.generated.models.VirtualMachineScaleSetIdentity;
import com.azure.resourcemanager.compute.generated.models.VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue;
import com.azure.resourcemanager.compute.generated.models.VirtualMachineScaleSetManagedDiskParameters;
import com.azure.resourcemanager.compute.generated.models.VirtualMachineScaleSetNetworkConfigurationDnsSettings;
import com.azure.resourcemanager.compute.generated.models.VirtualMachineScaleSetPublicIpAddressConfigurationDnsSettings;
import com.azure.resourcemanager.compute.generated.models.VirtualMachineScaleSetScaleInRules;
import com.azure.resourcemanager.compute.generated.models.VirtualMachineScaleSetUpdateIpConfiguration;
import com.azure.resourcemanager.compute.generated.models.VirtualMachineScaleSetUpdateNetworkConfiguration;
import com.azure.resourcemanager.compute.generated.models.VirtualMachineScaleSetUpdateNetworkProfile;
import com.azure.resourcemanager.compute.generated.models.VirtualMachineScaleSetUpdateOSDisk;
import com.azure.resourcemanager.compute.generated.models.VirtualMachineScaleSetUpdateOSProfile;
import com.azure.resourcemanager.compute.generated.models.VirtualMachineScaleSetUpdatePublicIpAddressConfiguration;
import com.azure.resourcemanager.compute.generated.models.VirtualMachineScaleSetUpdateStorageProfile;
import com.azure.resourcemanager.compute.generated.models.VirtualMachineScaleSetUpdateVMProfile;
import com.azure.resourcemanager.compute.generated.models.WinRMConfiguration;
import com.azure.resourcemanager.compute.generated.models.WinRMListener;
import com.azure.resourcemanager.compute.generated.models.WindowsConfiguration;
import com.azure.resourcemanager.compute.generated.models.WindowsPatchAssessmentMode;
import com.azure.resourcemanager.compute.generated.models.WindowsVMGuestPatchMode;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/** Samples for VirtualMachineScaleSets Update. */
public final class VirtualMachineScaleSetsUpdateSamples {
    /*
     * x-ms-original-file: specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_Update_MinimumSet_Gen.json
     */
    /**
     * Sample code: VirtualMachineScaleSets_Update_MinimumSet_Gen.
     *
     * @param manager Entry point to ComputeManager.
     */
    public static void virtualMachineScaleSetsUpdateMinimumSetGen(
        com.azure.resourcemanager.compute.generated.ComputeManager manager) {
        VirtualMachineScaleSet resource =
            manager
                .virtualMachineScaleSets()
                .getByResourceGroupWithResponse("rgcompute", "aaaaaaaaaaaaaa", null, Context.NONE)
                .getValue();
        resource.update().apply();
    }

    /*
     * x-ms-original-file: specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_Update_MaximumSet_Gen.json
     */
    /**
     * Sample code: VirtualMachineScaleSets_Update_MaximumSet_Gen.
     *
     * @param manager Entry point to ComputeManager.
     */
    public static void virtualMachineScaleSetsUpdateMaximumSetGen(
        com.azure.resourcemanager.compute.generated.ComputeManager manager) throws IOException {
        VirtualMachineScaleSet resource =
            manager
                .virtualMachineScaleSets()
                .getByResourceGroupWithResponse("rgcompute", "aaaaaaaaaaaaa", null, Context.NONE)
                .getValue();
        resource
            .update()
            .withTags(mapOf("key246", "aaaaaaaaaaaaaaaaaaaaaaaa"))
            .withSku(new Sku().withName("DSv3-Type1").withTier("aaa").withCapacity(7L))
            .withPlan(
                new Plan()
                    .withName("windows2016")
                    .withPublisher("microsoft-ads")
                    .withProduct("windows-data-science-vm")
                    .withPromotionCode("aaaaaaaaaa"))
            .withIdentity(
                new VirtualMachineScaleSetIdentity()
                    .withType(ResourceIdentityType.SYSTEM_ASSIGNED)
                    .withUserAssignedIdentities(
                        mapOf("key3951", new VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue())))
            .withUpgradePolicy(
                new UpgradePolicy()
                    .withMode(UpgradeMode.MANUAL)
                    .withRollingUpgradePolicy(
                        new RollingUpgradePolicy()
                            .withMaxBatchInstancePercent(49)
                            .withMaxUnhealthyInstancePercent(81)
                            .withMaxUnhealthyUpgradedInstancePercent(98)
                            .withPauseTimeBetweenBatches("aaaaaaaaaaaaaaa")
                            .withEnableCrossZoneUpgrade(true)
                            .withPrioritizeUnhealthyInstances(true))
                    .withAutomaticOSUpgradePolicy(
                        new AutomaticOSUpgradePolicy()
                            .withEnableAutomaticOSUpgrade(true)
                            .withDisableAutomaticRollback(true)))
            .withAutomaticRepairsPolicy(new AutomaticRepairsPolicy().withEnabled(true).withGracePeriod("PT30M"))
            .withVirtualMachineProfile(
                new VirtualMachineScaleSetUpdateVMProfile()
                    .withOsProfile(
                        new VirtualMachineScaleSetUpdateOSProfile()
                            .withCustomData("aaaaaaaaaaaaaaaaaaaaaaaaaa")
                            .withWindowsConfiguration(
                                new WindowsConfiguration()
                                    .withProvisionVMAgent(true)
                                    .withEnableAutomaticUpdates(true)
                                    .withTimeZone("aaaaaaaaaaaaaaaa")
                                    .withAdditionalUnattendContent(
                                        Arrays
                                            .asList(
                                                new AdditionalUnattendContent()
                                                    .withPassName(PassNames.OOBE_SYSTEM)
                                                    .withComponentName(ComponentNames.MICROSOFT_WINDOWS_SHELL_SETUP)
                                                    .withSettingName(SettingNames.AUTO_LOGON)
                                                    .withContent("aaaaaaaaaaaaaaaaaaaa")))
                                    .withPatchSettings(
                                        new PatchSettings()
                                            .withPatchMode(WindowsVMGuestPatchMode.AUTOMATIC_BY_OS)
                                            .withEnableHotpatching(true)
                                            .withAssessmentMode(WindowsPatchAssessmentMode.IMAGE_DEFAULT))
                                    .withWinRM(
                                        new WinRMConfiguration()
                                            .withListeners(
                                                Arrays
                                                    .asList(
                                                        new WinRMListener()
                                                            .withProtocol(ProtocolTypes.HTTP)
                                                            .withCertificateUrl("aaaaaaaaaaaaaaaaaaaaaa")))))
                            .withLinuxConfiguration(
                                new LinuxConfiguration()
                                    .withDisablePasswordAuthentication(true)
                                    .withSsh(
                                        new SshConfiguration()
                                            .withPublicKeys(
                                                Arrays
                                                    .asList(
                                                        new SshPublicKey()
                                                            .withPath("/home/{your-username}/.ssh/authorized_keys")
                                                            .withKeyData(
                                                                "ssh-rsa"
                                                                    + " AAAAB3NzaC1yc2EAAAADAQABAAABAQCeClRAk2ipUs/l5voIsDC5q9RI+YSRd1Bvd/O+axgY4WiBzG+4FwJWZm/mLLe5DoOdHQwmU2FrKXZSW4w2sYE70KeWnrFViCOX5MTVvJgPE8ClugNl8RWth/tU849DvM9sT7vFgfVSHcAS2yDRyDlueii+8nF2ym8XWAPltFVCyLHRsyBp5YPqK8JFYIa1eybKsY3hEAxRCA+/7bq8et+Gj3coOsuRmrehav7rE6N12Pb80I6ofa6SM5XNYq4Xk0iYNx7R3kdz0Jj9XgZYWjAHjJmT0gTRoOnt6upOuxK7xI/ykWrllgpXrCPu3Ymz+c+ujaqcxDopnAl2lmf69/J1"))))
                                    .withProvisionVMAgent(true)
                                    .withPatchSettings(
                                        new LinuxPatchSettings()
                                            .withPatchMode(LinuxVMGuestPatchMode.IMAGE_DEFAULT)
                                            .withAssessmentMode(LinuxPatchAssessmentMode.IMAGE_DEFAULT)))
                            .withSecrets(
                                Arrays
                                    .asList(
                                        new VaultSecretGroup()
                                            .withSourceVault(
                                                new SubResource()
                                                    .withId(
                                                        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"))
                                            .withVaultCertificates(
                                                Arrays
                                                    .asList(
                                                        new VaultCertificate()
                                                            .withCertificateUrl("aaaaaaa")
                                                            .withCertificateStore("aaaaaaaaaaaaaaaaaaaaaaaaa"))))))
                    .withStorageProfile(
                        new VirtualMachineScaleSetUpdateStorageProfile()
                            .withImageReference(
                                new ImageReference()
                                    .withId("aaaaaaaaaaaaaaaaaaa")
                                    .withPublisher("MicrosoftWindowsServer")
                                    .withOffer("WindowsServer")
                                    .withSku("2016-Datacenter")
                                    .withVersion("latest")
                                    .withSharedGalleryImageId("aaaaaa"))
                            .withOsDisk(
                                new VirtualMachineScaleSetUpdateOSDisk()
                                    .withCaching(CachingTypes.READ_WRITE)
                                    .withWriteAcceleratorEnabled(true)
                                    .withDiskSizeGB(6)
                                    .withImage(
                                        new VirtualHardDisk()
                                            .withUri(
                                                "http://{existing-storage-account-name}.blob.core.windows.net/{existing-container-name}/myDisk.vhd"))
                                    .withVhdContainers(Arrays.asList("aa"))
                                    .withManagedDisk(
                                        new VirtualMachineScaleSetManagedDiskParameters()
                                            .withStorageAccountType(StorageAccountTypes.STANDARD_LRS)
                                            .withDiskEncryptionSet(
                                                new DiskEncryptionSetParameters().withId("aaaaaaaaaaaa"))))
                            .withDataDisks(
                                Arrays
                                    .asList(
                                        new VirtualMachineScaleSetDataDisk()
                                            .withName("aaaaaaaaaaaaaaaaaaaaaaaaaa")
                                            .withLun(26)
                                            .withCaching(CachingTypes.NONE)
                                            .withWriteAcceleratorEnabled(true)
                                            .withCreateOption(DiskCreateOptionTypes.EMPTY)
                                            .withDiskSizeGB(1023)
                                            .withManagedDisk(
                                                new VirtualMachineScaleSetManagedDiskParameters()
                                                    .withStorageAccountType(StorageAccountTypes.STANDARD_LRS)
                                                    .withDiskEncryptionSet(
                                                        new DiskEncryptionSetParameters().withId("aaaaaaaaaaaa")))
                                            .withDiskIopsReadWrite(28L)
                                            .withDiskMBpsReadWrite(15L))))
                    .withNetworkProfile(
                        new VirtualMachineScaleSetUpdateNetworkProfile()
                            .withHealthProbe(
                                new ApiEntityReference()
                                    .withId(
                                        "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/disk123"))
                            .withNetworkInterfaceConfigurations(
                                Arrays
                                    .asList(
                                        new VirtualMachineScaleSetUpdateNetworkConfiguration()
                                            .withId("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa")
                                            .withName("aaaaaaaa")
                                            .withPrimary(true)
                                            .withEnableAcceleratedNetworking(true)
                                            .withEnableFpga(true)
                                            .withNetworkSecurityGroup(
                                                new SubResource()
                                                    .withId(
                                                        "subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot"))
                                            .withDnsSettings(
                                                new VirtualMachineScaleSetNetworkConfigurationDnsSettings()
                                                    .withDnsServers(Arrays.asList()))
                                            .withIpConfigurations(
                                                Arrays
                                                    .asList(
                                                        new VirtualMachineScaleSetUpdateIpConfiguration()
                                                            .withId("aaaaaaaaaaaaaaaa")
                                                            .withName("aaaaaaaaaaaaaaaaaaaaaaaaaaaaa")
                                                            .withSubnet(
                                                                new ApiEntityReference()
                                                                    .withId(
                                                                        "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/disk123"))
                                                            .withPrimary(true)
                                                            .withPublicIpAddressConfiguration(
                                                                new VirtualMachineScaleSetUpdatePublicIpAddressConfiguration()
                                                                    .withName("a")
                                                                    .withIdleTimeoutInMinutes(3)
                                                                    .withDnsSettings(
                                                                        new VirtualMachineScaleSetPublicIpAddressConfigurationDnsSettings()
                                                                            .withDomainNameLabel("aaaaaaaaaaaaaaaaaa"))
                                                                    .withDeleteOption(DeleteOptions.DELETE))
                                                            .withPrivateIpAddressVersion(IpVersion.IPV4)
                                                            .withApplicationGatewayBackendAddressPools(
                                                                Arrays
                                                                    .asList(
                                                                        new SubResource()
                                                                            .withId(
                                                                                "subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot")))
                                                            .withApplicationSecurityGroups(
                                                                Arrays
                                                                    .asList(
                                                                        new SubResource()
                                                                            .withId(
                                                                                "subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot")))
                                                            .withLoadBalancerBackendAddressPools(
                                                                Arrays
                                                                    .asList(
                                                                        new SubResource()
                                                                            .withId(
                                                                                "subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot")))
                                                            .withLoadBalancerInboundNatPools(
                                                                Arrays
                                                                    .asList(
                                                                        new SubResource()
                                                                            .withId(
                                                                                "subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot")))))
                                            .withEnableIpForwarding(true)
                                            .withDeleteOption(DeleteOptions.DELETE)))
                            .withNetworkApiVersion(NetworkApiVersion.TWO_ZERO_TWO_ZERO_ONE_ONE_ZERO_ONE))
                    .withSecurityProfile(
                        new SecurityProfile()
                            .withUefiSettings(new UefiSettings().withSecureBootEnabled(true).withVTpmEnabled(true))
                            .withEncryptionAtHost(true)
                            .withSecurityType(SecurityTypes.TRUSTED_LAUNCH))
                    .withDiagnosticsProfile(
                        new DiagnosticsProfile()
                            .withBootDiagnostics(
                                new BootDiagnostics()
                                    .withEnabled(true)
                                    .withStorageUri("http://{existing-storage-account-name}.blob.core.windows.net")))
                    .withExtensionProfile(
                        new VirtualMachineScaleSetExtensionProfile()
                            .withExtensions(
                                Arrays
                                    .asList(
                                        new VirtualMachineScaleSetExtensionInner()
                                            .withName("{extension-name}")
                                            .withForceUpdateTag("aaaaaaaaa")
                                            .withPublisher("{extension-Publisher}")
                                            .withTypePropertiesType("{extension-Type}")
                                            .withTypeHandlerVersion("{handler-version}")
                                            .withAutoUpgradeMinorVersion(true)
                                            .withEnableAutomaticUpgrade(true)
                                            .withSettings(
                                                SerializerFactory
                                                    .createDefaultManagementSerializerAdapter()
                                                    .deserialize("{}", Object.class, SerializerEncoding.JSON))
                                            .withProtectedSettings(
                                                SerializerFactory
                                                    .createDefaultManagementSerializerAdapter()
                                                    .deserialize("{}", Object.class, SerializerEncoding.JSON))
                                            .withProvisionAfterExtensions(Arrays.asList("aa"))
                                            .withSuppressFailures(true)))
                            .withExtensionsTimeBudget("PT1H20M"))
                    .withLicenseType("aaaaaaaaaaaa")
                    .withBillingProfile(new BillingProfile().withMaxPrice(-1.0))
                    .withScheduledEventsProfile(
                        new ScheduledEventsProfile()
                            .withTerminateNotificationProfile(
                                new TerminateNotificationProfile().withNotBeforeTimeout("PT10M").withEnable(true)))
                    .withUserData("aaaaaaaaaaaaa"))
            .withOverprovision(true)
            .withDoNotRunExtensionsOnOverprovisionedVMs(true)
            .withSinglePlacementGroup(true)
            .withAdditionalCapabilities(
                new AdditionalCapabilities().withUltraSsdEnabled(true).withHibernationEnabled(true))
            .withScaleInPolicy(
                new ScaleInPolicy()
                    .withRules(Arrays.asList(VirtualMachineScaleSetScaleInRules.OLDEST_VM))
                    .withForceDeletion(true))
            .withProximityPlacementGroup(
                new SubResource()
                    .withId(
                        "subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot"))
            .apply();
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
