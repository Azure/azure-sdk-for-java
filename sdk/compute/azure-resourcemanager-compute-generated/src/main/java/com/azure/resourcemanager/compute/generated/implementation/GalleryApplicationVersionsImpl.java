// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.compute.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.resourcemanager.compute.generated.ComputeManager;
import com.azure.resourcemanager.compute.generated.fluent.GalleryApplicationVersionsClient;
import com.azure.resourcemanager.compute.generated.fluent.models.GalleryApplicationVersionInner;
import com.azure.resourcemanager.compute.generated.models.GalleryApplicationVersion;
import com.azure.resourcemanager.compute.generated.models.GalleryApplicationVersions;
import com.azure.resourcemanager.compute.generated.models.ReplicationStatusTypes;

public final class GalleryApplicationVersionsImpl implements GalleryApplicationVersions {
    private final GalleryApplicationVersionsClient innerClient;

    private final ComputeManager serviceManager;

    public GalleryApplicationVersionsImpl(GalleryApplicationVersionsClient innerClient, ComputeManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public GalleryApplicationVersion get(
        String resourceGroupName,
        String galleryName,
        String galleryApplicationName,
        String galleryApplicationVersionName) {
        GalleryApplicationVersionInner inner =
            this
                .serviceClient()
                .get(resourceGroupName, galleryName, galleryApplicationName, galleryApplicationVersionName);
        if (inner != null) {
            return new GalleryApplicationVersionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<GalleryApplicationVersion> getWithResponse(
        String resourceGroupName,
        String galleryName,
        String galleryApplicationName,
        String galleryApplicationVersionName,
        ReplicationStatusTypes expand,
        Context context) {
        Response<GalleryApplicationVersionInner> inner =
            this
                .serviceClient()
                .getWithResponse(
                    resourceGroupName,
                    galleryName,
                    galleryApplicationName,
                    galleryApplicationVersionName,
                    expand,
                    context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new GalleryApplicationVersionImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void delete(
        String resourceGroupName,
        String galleryName,
        String galleryApplicationName,
        String galleryApplicationVersionName) {
        this
            .serviceClient()
            .delete(resourceGroupName, galleryName, galleryApplicationName, galleryApplicationVersionName);
    }

    public void delete(
        String resourceGroupName,
        String galleryName,
        String galleryApplicationName,
        String galleryApplicationVersionName,
        Context context) {
        this
            .serviceClient()
            .delete(resourceGroupName, galleryName, galleryApplicationName, galleryApplicationVersionName, context);
    }

    public PagedIterable<GalleryApplicationVersion> listByGalleryApplication(
        String resourceGroupName, String galleryName, String galleryApplicationName) {
        PagedIterable<GalleryApplicationVersionInner> inner =
            this.serviceClient().listByGalleryApplication(resourceGroupName, galleryName, galleryApplicationName);
        return inner.mapPage(inner1 -> new GalleryApplicationVersionImpl(inner1, this.manager()));
    }

    public PagedIterable<GalleryApplicationVersion> listByGalleryApplication(
        String resourceGroupName, String galleryName, String galleryApplicationName, Context context) {
        PagedIterable<GalleryApplicationVersionInner> inner =
            this
                .serviceClient()
                .listByGalleryApplication(resourceGroupName, galleryName, galleryApplicationName, context);
        return inner.mapPage(inner1 -> new GalleryApplicationVersionImpl(inner1, this.manager()));
    }

    private GalleryApplicationVersionsClient serviceClient() {
        return this.innerClient;
    }

    private ComputeManager manager() {
        return this.serviceManager;
    }

    public GalleryApplicationVersionImpl define(String name) {
        return new GalleryApplicationVersionImpl(name, this.manager());
    }
}
