// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.compute.generated.implementation;

import com.azure.core.util.Context;
import com.azure.resourcemanager.compute.generated.ComputeManager;
import com.azure.resourcemanager.compute.generated.fluent.LogAnalyticsClient;
import com.azure.resourcemanager.compute.generated.fluent.models.LogAnalyticsOperationResultInner;
import com.azure.resourcemanager.compute.generated.models.LogAnalytics;
import com.azure.resourcemanager.compute.generated.models.LogAnalyticsInputBase;
import com.azure.resourcemanager.compute.generated.models.LogAnalyticsOperationResult;
import com.azure.resourcemanager.compute.generated.models.RequestRateByIntervalInput;

public final class LogAnalyticsImpl implements LogAnalytics {
    private final LogAnalyticsClient innerClient;

    private final ComputeManager serviceManager;

    public LogAnalyticsImpl(LogAnalyticsClient innerClient, ComputeManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public LogAnalyticsOperationResult exportRequestRateByInterval(
        String location, RequestRateByIntervalInput parameters) {
        LogAnalyticsOperationResultInner inner = this.serviceClient().exportRequestRateByInterval(location, parameters);
        if (inner != null) {
            return new LogAnalyticsOperationResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public LogAnalyticsOperationResult exportRequestRateByInterval(
        String location, RequestRateByIntervalInput parameters, Context context) {
        LogAnalyticsOperationResultInner inner =
            this.serviceClient().exportRequestRateByInterval(location, parameters, context);
        if (inner != null) {
            return new LogAnalyticsOperationResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public LogAnalyticsOperationResult exportThrottledRequests(String location, LogAnalyticsInputBase parameters) {
        LogAnalyticsOperationResultInner inner = this.serviceClient().exportThrottledRequests(location, parameters);
        if (inner != null) {
            return new LogAnalyticsOperationResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public LogAnalyticsOperationResult exportThrottledRequests(
        String location, LogAnalyticsInputBase parameters, Context context) {
        LogAnalyticsOperationResultInner inner =
            this.serviceClient().exportThrottledRequests(location, parameters, context);
        if (inner != null) {
            return new LogAnalyticsOperationResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    private LogAnalyticsClient serviceClient() {
        return this.innerClient;
    }

    private ComputeManager manager() {
        return this.serviceManager;
    }
}
