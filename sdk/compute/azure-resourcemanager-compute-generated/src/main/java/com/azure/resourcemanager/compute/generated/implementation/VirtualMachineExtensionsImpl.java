// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.compute.generated.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.resourcemanager.compute.generated.ComputeManager;
import com.azure.resourcemanager.compute.generated.fluent.VirtualMachineExtensionsClient;
import com.azure.resourcemanager.compute.generated.fluent.models.VirtualMachineExtensionInner;
import com.azure.resourcemanager.compute.generated.fluent.models.VirtualMachineExtensionsListResultInner;
import com.azure.resourcemanager.compute.generated.models.VirtualMachineExtension;
import com.azure.resourcemanager.compute.generated.models.VirtualMachineExtensions;
import com.azure.resourcemanager.compute.generated.models.VirtualMachineExtensionsListResult;

public final class VirtualMachineExtensionsImpl implements VirtualMachineExtensions {
    private final VirtualMachineExtensionsClient innerClient;

    private final ComputeManager serviceManager;

    public VirtualMachineExtensionsImpl(VirtualMachineExtensionsClient innerClient, ComputeManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public void delete(String resourceGroupName, String vmName, String vmExtensionName) {
        this.serviceClient().delete(resourceGroupName, vmName, vmExtensionName);
    }

    public void delete(String resourceGroupName, String vmName, String vmExtensionName, Context context) {
        this.serviceClient().delete(resourceGroupName, vmName, vmExtensionName, context);
    }

    public VirtualMachineExtension get(String resourceGroupName, String vmName, String vmExtensionName) {
        VirtualMachineExtensionInner inner = this.serviceClient().get(resourceGroupName, vmName, vmExtensionName);
        if (inner != null) {
            return new VirtualMachineExtensionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<VirtualMachineExtension> getWithResponse(
        String resourceGroupName, String vmName, String vmExtensionName, String expand, Context context) {
        Response<VirtualMachineExtensionInner> inner =
            this.serviceClient().getWithResponse(resourceGroupName, vmName, vmExtensionName, expand, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new VirtualMachineExtensionImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public VirtualMachineExtensionsListResult list(String resourceGroupName, String vmName) {
        VirtualMachineExtensionsListResultInner inner = this.serviceClient().list(resourceGroupName, vmName);
        if (inner != null) {
            return new VirtualMachineExtensionsListResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<VirtualMachineExtensionsListResult> listWithResponse(
        String resourceGroupName, String vmName, String expand, Context context) {
        Response<VirtualMachineExtensionsListResultInner> inner =
            this.serviceClient().listWithResponse(resourceGroupName, vmName, expand, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new VirtualMachineExtensionsListResultImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    private VirtualMachineExtensionsClient serviceClient() {
        return this.innerClient;
    }

    private ComputeManager manager() {
        return this.serviceManager;
    }

    public VirtualMachineExtensionImpl define(String name) {
        return new VirtualMachineExtensionImpl(name, this.manager());
    }
}
