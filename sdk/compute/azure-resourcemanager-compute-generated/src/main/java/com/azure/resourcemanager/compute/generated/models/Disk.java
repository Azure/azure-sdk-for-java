// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.compute.generated.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.management.Region;
import com.azure.core.util.Context;
import com.azure.resourcemanager.compute.generated.fluent.models.DiskInner;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;

/** An immutable client-side representation of Disk. */
@Immutable
public interface Disk {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     *
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     *
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     *
     * @return the type value.
     */
    String type();

    /**
     * Gets the location property: The geo-location where the resource lives.
     *
     * @return the location value.
     */
    String location();

    /**
     * Gets the tags property: Resource tags.
     *
     * @return the tags value.
     */
    Map<String, String> tags();

    /**
     * Gets the managedBy property: A relative URI containing the ID of the VM that has the disk attached.
     *
     * @return the managedBy value.
     */
    String managedBy();

    /**
     * Gets the managedByExtended property: List of relative URIs containing the IDs of the VMs that have the disk
     * attached. maxShares should be set to a value greater than one for disks to allow attaching them to multiple VMs.
     *
     * @return the managedByExtended value.
     */
    List<String> managedByExtended();

    /**
     * Gets the sku property: The disks sku name. Can be Standard_LRS, Premium_LRS, StandardSSD_LRS, or UltraSSD_LRS.
     *
     * @return the sku value.
     */
    DiskSku sku();

    /**
     * Gets the zones property: The Logical zone list for Disk.
     *
     * @return the zones value.
     */
    List<String> zones();

    /**
     * Gets the timeCreated property: The time when the disk was created.
     *
     * @return the timeCreated value.
     */
    OffsetDateTime timeCreated();

    /**
     * Gets the osType property: The Operating System type.
     *
     * @return the osType value.
     */
    OperatingSystemTypes osType();

    /**
     * Gets the hyperVGeneration property: The hypervisor generation of the Virtual Machine. Applicable to OS disks
     * only.
     *
     * @return the hyperVGeneration value.
     */
    HyperVGeneration hyperVGeneration();

    /**
     * Gets the creationData property: Disk source information. CreationData information cannot be changed after the
     * disk has been created.
     *
     * @return the creationData value.
     */
    CreationData creationData();

    /**
     * Gets the diskSizeGB property: If creationData.createOption is Empty, this field is mandatory and it indicates the
     * size of the disk to create. If this field is present for updates or creation with other options, it indicates a
     * resize. Resizes are only allowed if the disk is not attached to a running VM, and can only increase the disk's
     * size.
     *
     * @return the diskSizeGB value.
     */
    Integer diskSizeGB();

    /**
     * Gets the diskSizeBytes property: The size of the disk in bytes. This field is read only.
     *
     * @return the diskSizeBytes value.
     */
    Long diskSizeBytes();

    /**
     * Gets the uniqueId property: Unique Guid identifying the resource.
     *
     * @return the uniqueId value.
     */
    String uniqueId();

    /**
     * Gets the encryptionSettingsCollection property: Encryption settings collection used for Azure Disk Encryption,
     * can contain multiple encryption settings per disk or snapshot.
     *
     * @return the encryptionSettingsCollection value.
     */
    EncryptionSettingsCollection encryptionSettingsCollection();

    /**
     * Gets the provisioningState property: The disk provisioning state.
     *
     * @return the provisioningState value.
     */
    String provisioningState();

    /**
     * Gets the diskIopsReadWrite property: The number of IOPS allowed for this disk; only settable for UltraSSD disks.
     * One operation can transfer between 4k and 256k bytes.
     *
     * @return the diskIopsReadWrite value.
     */
    Long diskIopsReadWrite();

    /**
     * Gets the diskMBpsReadWrite property: The bandwidth allowed for this disk; only settable for UltraSSD disks. MBps
     * means millions of bytes per second - MB here uses the ISO notation, of powers of 10.
     *
     * @return the diskMBpsReadWrite value.
     */
    Long diskMBpsReadWrite();

    /**
     * Gets the diskIopsReadOnly property: The total number of IOPS that will be allowed across all VMs mounting the
     * shared disk as ReadOnly. One operation can transfer between 4k and 256k bytes.
     *
     * @return the diskIopsReadOnly value.
     */
    Long diskIopsReadOnly();

    /**
     * Gets the diskMBpsReadOnly property: The total throughput (MBps) that will be allowed across all VMs mounting the
     * shared disk as ReadOnly. MBps means millions of bytes per second - MB here uses the ISO notation, of powers of
     * 10.
     *
     * @return the diskMBpsReadOnly value.
     */
    Long diskMBpsReadOnly();

    /**
     * Gets the diskState property: The state of the disk.
     *
     * @return the diskState value.
     */
    DiskState diskState();

    /**
     * Gets the encryption property: Encryption property can be used to encrypt data at rest with customer managed keys
     * or platform managed keys.
     *
     * @return the encryption value.
     */
    Encryption encryption();

    /**
     * Gets the maxShares property: The maximum number of VMs that can attach to the disk at the same time. Value
     * greater than one indicates a disk that can be mounted on multiple VMs at the same time.
     *
     * @return the maxShares value.
     */
    Integer maxShares();

    /**
     * Gets the shareInfo property: Details of the list of all VMs that have the disk attached. maxShares should be set
     * to a value greater than one for disks to allow attaching them to multiple VMs.
     *
     * @return the shareInfo value.
     */
    List<ShareInfoElement> shareInfo();

    /**
     * Gets the networkAccessPolicy property: Policy for accessing the disk via network.
     *
     * @return the networkAccessPolicy value.
     */
    NetworkAccessPolicy networkAccessPolicy();

    /**
     * Gets the diskAccessId property: ARM id of the DiskAccess resource for using private endpoints on disks.
     *
     * @return the diskAccessId value.
     */
    String diskAccessId();

    /**
     * Gets the tier property: Performance tier of the disk (e.g, P4, S10) as described here:
     * https://azure.microsoft.com/en-us/pricing/details/managed-disks/. Does not apply to Ultra disks.
     *
     * @return the tier value.
     */
    String tier();

    /**
     * Gets the region of the resource.
     *
     * @return the region of the resource.
     */
    Region region();

    /**
     * Gets the name of the resource region.
     *
     * @return the name of the resource region.
     */
    String regionName();

    /**
     * Gets the inner com.azure.resourcemanager.compute.generated.fluent.models.DiskInner object.
     *
     * @return the inner object.
     */
    DiskInner innerModel();

    /** The entirety of the Disk definition. */
    interface Definition
        extends DefinitionStages.Blank,
            DefinitionStages.WithLocation,
            DefinitionStages.WithResourceGroup,
            DefinitionStages.WithCreate {
    }
    /** The Disk definition stages. */
    interface DefinitionStages {
        /** The first stage of the Disk definition. */
        interface Blank extends WithLocation {
        }
        /** The stage of the Disk definition allowing to specify location. */
        interface WithLocation {
            /**
             * Specifies the region for the resource.
             *
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithResourceGroup withRegion(Region location);

            /**
             * Specifies the region for the resource.
             *
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithResourceGroup withRegion(String location);
        }
        /** The stage of the Disk definition allowing to specify parent resource. */
        interface WithResourceGroup {
            /**
             * Specifies resourceGroupName.
             *
             * @param resourceGroupName The name of the resource group.
             * @return the next definition stage.
             */
            WithCreate withExistingResourceGroup(String resourceGroupName);
        }
        /**
         * The stage of the Disk definition which contains all the minimum required properties for the resource to be
         * created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate
            extends DefinitionStages.WithTags,
                DefinitionStages.WithSku,
                DefinitionStages.WithZones,
                DefinitionStages.WithOsType,
                DefinitionStages.WithHyperVGeneration,
                DefinitionStages.WithCreationData,
                DefinitionStages.WithDiskSizeGB,
                DefinitionStages.WithEncryptionSettingsCollection,
                DefinitionStages.WithDiskIopsReadWrite,
                DefinitionStages.WithDiskMBpsReadWrite,
                DefinitionStages.WithDiskIopsReadOnly,
                DefinitionStages.WithDiskMBpsReadOnly,
                DefinitionStages.WithEncryption,
                DefinitionStages.WithMaxShares,
                DefinitionStages.WithNetworkAccessPolicy,
                DefinitionStages.WithDiskAccessId,
                DefinitionStages.WithTier {
            /**
             * Executes the create request.
             *
             * @return the created resource.
             */
            Disk create();

            /**
             * Executes the create request.
             *
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            Disk create(Context context);
        }
        /** The stage of the Disk definition allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             *
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            WithCreate withTags(Map<String, String> tags);
        }
        /** The stage of the Disk definition allowing to specify sku. */
        interface WithSku {
            /**
             * Specifies the sku property: The disks sku name. Can be Standard_LRS, Premium_LRS, StandardSSD_LRS, or
             * UltraSSD_LRS..
             *
             * @param sku The disks sku name. Can be Standard_LRS, Premium_LRS, StandardSSD_LRS, or UltraSSD_LRS.
             * @return the next definition stage.
             */
            WithCreate withSku(DiskSku sku);
        }
        /** The stage of the Disk definition allowing to specify zones. */
        interface WithZones {
            /**
             * Specifies the zones property: The Logical zone list for Disk..
             *
             * @param zones The Logical zone list for Disk.
             * @return the next definition stage.
             */
            WithCreate withZones(List<String> zones);
        }
        /** The stage of the Disk definition allowing to specify osType. */
        interface WithOsType {
            /**
             * Specifies the osType property: The Operating System type..
             *
             * @param osType The Operating System type.
             * @return the next definition stage.
             */
            WithCreate withOsType(OperatingSystemTypes osType);
        }
        /** The stage of the Disk definition allowing to specify hyperVGeneration. */
        interface WithHyperVGeneration {
            /**
             * Specifies the hyperVGeneration property: The hypervisor generation of the Virtual Machine. Applicable to
             * OS disks only..
             *
             * @param hyperVGeneration The hypervisor generation of the Virtual Machine. Applicable to OS disks only.
             * @return the next definition stage.
             */
            WithCreate withHyperVGeneration(HyperVGeneration hyperVGeneration);
        }
        /** The stage of the Disk definition allowing to specify creationData. */
        interface WithCreationData {
            /**
             * Specifies the creationData property: Disk source information. CreationData information cannot be changed
             * after the disk has been created..
             *
             * @param creationData Disk source information. CreationData information cannot be changed after the disk
             *     has been created.
             * @return the next definition stage.
             */
            WithCreate withCreationData(CreationData creationData);
        }
        /** The stage of the Disk definition allowing to specify diskSizeGB. */
        interface WithDiskSizeGB {
            /**
             * Specifies the diskSizeGB property: If creationData.createOption is Empty, this field is mandatory and it
             * indicates the size of the disk to create. If this field is present for updates or creation with other
             * options, it indicates a resize. Resizes are only allowed if the disk is not attached to a running VM, and
             * can only increase the disk's size..
             *
             * @param diskSizeGB If creationData.createOption is Empty, this field is mandatory and it indicates the
             *     size of the disk to create. If this field is present for updates or creation with other options, it
             *     indicates a resize. Resizes are only allowed if the disk is not attached to a running VM, and can
             *     only increase the disk's size.
             * @return the next definition stage.
             */
            WithCreate withDiskSizeGB(Integer diskSizeGB);
        }
        /** The stage of the Disk definition allowing to specify encryptionSettingsCollection. */
        interface WithEncryptionSettingsCollection {
            /**
             * Specifies the encryptionSettingsCollection property: Encryption settings collection used for Azure Disk
             * Encryption, can contain multiple encryption settings per disk or snapshot..
             *
             * @param encryptionSettingsCollection Encryption settings collection used for Azure Disk Encryption, can
             *     contain multiple encryption settings per disk or snapshot.
             * @return the next definition stage.
             */
            WithCreate withEncryptionSettingsCollection(EncryptionSettingsCollection encryptionSettingsCollection);
        }
        /** The stage of the Disk definition allowing to specify diskIopsReadWrite. */
        interface WithDiskIopsReadWrite {
            /**
             * Specifies the diskIopsReadWrite property: The number of IOPS allowed for this disk; only settable for
             * UltraSSD disks. One operation can transfer between 4k and 256k bytes..
             *
             * @param diskIopsReadWrite The number of IOPS allowed for this disk; only settable for UltraSSD disks. One
             *     operation can transfer between 4k and 256k bytes.
             * @return the next definition stage.
             */
            WithCreate withDiskIopsReadWrite(Long diskIopsReadWrite);
        }
        /** The stage of the Disk definition allowing to specify diskMBpsReadWrite. */
        interface WithDiskMBpsReadWrite {
            /**
             * Specifies the diskMBpsReadWrite property: The bandwidth allowed for this disk; only settable for UltraSSD
             * disks. MBps means millions of bytes per second - MB here uses the ISO notation, of powers of 10..
             *
             * @param diskMBpsReadWrite The bandwidth allowed for this disk; only settable for UltraSSD disks. MBps
             *     means millions of bytes per second - MB here uses the ISO notation, of powers of 10.
             * @return the next definition stage.
             */
            WithCreate withDiskMBpsReadWrite(Long diskMBpsReadWrite);
        }
        /** The stage of the Disk definition allowing to specify diskIopsReadOnly. */
        interface WithDiskIopsReadOnly {
            /**
             * Specifies the diskIopsReadOnly property: The total number of IOPS that will be allowed across all VMs
             * mounting the shared disk as ReadOnly. One operation can transfer between 4k and 256k bytes..
             *
             * @param diskIopsReadOnly The total number of IOPS that will be allowed across all VMs mounting the shared
             *     disk as ReadOnly. One operation can transfer between 4k and 256k bytes.
             * @return the next definition stage.
             */
            WithCreate withDiskIopsReadOnly(Long diskIopsReadOnly);
        }
        /** The stage of the Disk definition allowing to specify diskMBpsReadOnly. */
        interface WithDiskMBpsReadOnly {
            /**
             * Specifies the diskMBpsReadOnly property: The total throughput (MBps) that will be allowed across all VMs
             * mounting the shared disk as ReadOnly. MBps means millions of bytes per second - MB here uses the ISO
             * notation, of powers of 10..
             *
             * @param diskMBpsReadOnly The total throughput (MBps) that will be allowed across all VMs mounting the
             *     shared disk as ReadOnly. MBps means millions of bytes per second - MB here uses the ISO notation, of
             *     powers of 10.
             * @return the next definition stage.
             */
            WithCreate withDiskMBpsReadOnly(Long diskMBpsReadOnly);
        }
        /** The stage of the Disk definition allowing to specify encryption. */
        interface WithEncryption {
            /**
             * Specifies the encryption property: Encryption property can be used to encrypt data at rest with customer
             * managed keys or platform managed keys..
             *
             * @param encryption Encryption property can be used to encrypt data at rest with customer managed keys or
             *     platform managed keys.
             * @return the next definition stage.
             */
            WithCreate withEncryption(Encryption encryption);
        }
        /** The stage of the Disk definition allowing to specify maxShares. */
        interface WithMaxShares {
            /**
             * Specifies the maxShares property: The maximum number of VMs that can attach to the disk at the same time.
             * Value greater than one indicates a disk that can be mounted on multiple VMs at the same time..
             *
             * @param maxShares The maximum number of VMs that can attach to the disk at the same time. Value greater
             *     than one indicates a disk that can be mounted on multiple VMs at the same time.
             * @return the next definition stage.
             */
            WithCreate withMaxShares(Integer maxShares);
        }
        /** The stage of the Disk definition allowing to specify networkAccessPolicy. */
        interface WithNetworkAccessPolicy {
            /**
             * Specifies the networkAccessPolicy property: Policy for accessing the disk via network..
             *
             * @param networkAccessPolicy Policy for accessing the disk via network.
             * @return the next definition stage.
             */
            WithCreate withNetworkAccessPolicy(NetworkAccessPolicy networkAccessPolicy);
        }
        /** The stage of the Disk definition allowing to specify diskAccessId. */
        interface WithDiskAccessId {
            /**
             * Specifies the diskAccessId property: ARM id of the DiskAccess resource for using private endpoints on
             * disks..
             *
             * @param diskAccessId ARM id of the DiskAccess resource for using private endpoints on disks.
             * @return the next definition stage.
             */
            WithCreate withDiskAccessId(String diskAccessId);
        }
        /** The stage of the Disk definition allowing to specify tier. */
        interface WithTier {
            /**
             * Specifies the tier property: Performance tier of the disk (e.g, P4, S10) as described here:
             * https://azure.microsoft.com/en-us/pricing/details/managed-disks/. Does not apply to Ultra disks..
             *
             * @param tier Performance tier of the disk (e.g, P4, S10) as described here:
             *     https://azure.microsoft.com/en-us/pricing/details/managed-disks/. Does not apply to Ultra disks.
             * @return the next definition stage.
             */
            WithCreate withTier(String tier);
        }
    }
    /**
     * Begins update for the Disk resource.
     *
     * @return the stage of resource update.
     */
    Disk.Update update();

    /** The template for Disk update. */
    interface Update
        extends UpdateStages.WithTags,
            UpdateStages.WithSku,
            UpdateStages.WithOsType,
            UpdateStages.WithDiskSizeGB,
            UpdateStages.WithEncryptionSettingsCollection,
            UpdateStages.WithDiskIopsReadWrite,
            UpdateStages.WithDiskMBpsReadWrite,
            UpdateStages.WithDiskIopsReadOnly,
            UpdateStages.WithDiskMBpsReadOnly,
            UpdateStages.WithMaxShares,
            UpdateStages.WithEncryption,
            UpdateStages.WithNetworkAccessPolicy,
            UpdateStages.WithDiskAccessId,
            UpdateStages.WithTier {
        /**
         * Executes the update request.
         *
         * @return the updated resource.
         */
        Disk apply();

        /**
         * Executes the update request.
         *
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        Disk apply(Context context);
    }
    /** The Disk update stages. */
    interface UpdateStages {
        /** The stage of the Disk update allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags.
             *
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            Update withTags(Map<String, String> tags);
        }
        /** The stage of the Disk update allowing to specify sku. */
        interface WithSku {
            /**
             * Specifies the sku property: The disks sku name. Can be Standard_LRS, Premium_LRS, StandardSSD_LRS, or
             * UltraSSD_LRS..
             *
             * @param sku The disks sku name. Can be Standard_LRS, Premium_LRS, StandardSSD_LRS, or UltraSSD_LRS.
             * @return the next definition stage.
             */
            Update withSku(DiskSku sku);
        }
        /** The stage of the Disk update allowing to specify osType. */
        interface WithOsType {
            /**
             * Specifies the osType property: the Operating System type..
             *
             * @param osType the Operating System type.
             * @return the next definition stage.
             */
            Update withOsType(OperatingSystemTypes osType);
        }
        /** The stage of the Disk update allowing to specify diskSizeGB. */
        interface WithDiskSizeGB {
            /**
             * Specifies the diskSizeGB property: If creationData.createOption is Empty, this field is mandatory and it
             * indicates the size of the disk to create. If this field is present for updates or creation with other
             * options, it indicates a resize. Resizes are only allowed if the disk is not attached to a running VM, and
             * can only increase the disk's size..
             *
             * @param diskSizeGB If creationData.createOption is Empty, this field is mandatory and it indicates the
             *     size of the disk to create. If this field is present for updates or creation with other options, it
             *     indicates a resize. Resizes are only allowed if the disk is not attached to a running VM, and can
             *     only increase the disk's size.
             * @return the next definition stage.
             */
            Update withDiskSizeGB(Integer diskSizeGB);
        }
        /** The stage of the Disk update allowing to specify encryptionSettingsCollection. */
        interface WithEncryptionSettingsCollection {
            /**
             * Specifies the encryptionSettingsCollection property: Encryption settings collection used be Azure Disk
             * Encryption, can contain multiple encryption settings per disk or snapshot..
             *
             * @param encryptionSettingsCollection Encryption settings collection used be Azure Disk Encryption, can
             *     contain multiple encryption settings per disk or snapshot.
             * @return the next definition stage.
             */
            Update withEncryptionSettingsCollection(EncryptionSettingsCollection encryptionSettingsCollection);
        }
        /** The stage of the Disk update allowing to specify diskIopsReadWrite. */
        interface WithDiskIopsReadWrite {
            /**
             * Specifies the diskIopsReadWrite property: The number of IOPS allowed for this disk; only settable for
             * UltraSSD disks. One operation can transfer between 4k and 256k bytes..
             *
             * @param diskIopsReadWrite The number of IOPS allowed for this disk; only settable for UltraSSD disks. One
             *     operation can transfer between 4k and 256k bytes.
             * @return the next definition stage.
             */
            Update withDiskIopsReadWrite(Long diskIopsReadWrite);
        }
        /** The stage of the Disk update allowing to specify diskMBpsReadWrite. */
        interface WithDiskMBpsReadWrite {
            /**
             * Specifies the diskMBpsReadWrite property: The bandwidth allowed for this disk; only settable for UltraSSD
             * disks. MBps means millions of bytes per second - MB here uses the ISO notation, of powers of 10..
             *
             * @param diskMBpsReadWrite The bandwidth allowed for this disk; only settable for UltraSSD disks. MBps
             *     means millions of bytes per second - MB here uses the ISO notation, of powers of 10.
             * @return the next definition stage.
             */
            Update withDiskMBpsReadWrite(Long diskMBpsReadWrite);
        }
        /** The stage of the Disk update allowing to specify diskIopsReadOnly. */
        interface WithDiskIopsReadOnly {
            /**
             * Specifies the diskIopsReadOnly property: The total number of IOPS that will be allowed across all VMs
             * mounting the shared disk as ReadOnly. One operation can transfer between 4k and 256k bytes..
             *
             * @param diskIopsReadOnly The total number of IOPS that will be allowed across all VMs mounting the shared
             *     disk as ReadOnly. One operation can transfer between 4k and 256k bytes.
             * @return the next definition stage.
             */
            Update withDiskIopsReadOnly(Long diskIopsReadOnly);
        }
        /** The stage of the Disk update allowing to specify diskMBpsReadOnly. */
        interface WithDiskMBpsReadOnly {
            /**
             * Specifies the diskMBpsReadOnly property: The total throughput (MBps) that will be allowed across all VMs
             * mounting the shared disk as ReadOnly. MBps means millions of bytes per second - MB here uses the ISO
             * notation, of powers of 10..
             *
             * @param diskMBpsReadOnly The total throughput (MBps) that will be allowed across all VMs mounting the
             *     shared disk as ReadOnly. MBps means millions of bytes per second - MB here uses the ISO notation, of
             *     powers of 10.
             * @return the next definition stage.
             */
            Update withDiskMBpsReadOnly(Long diskMBpsReadOnly);
        }
        /** The stage of the Disk update allowing to specify maxShares. */
        interface WithMaxShares {
            /**
             * Specifies the maxShares property: The maximum number of VMs that can attach to the disk at the same time.
             * Value greater than one indicates a disk that can be mounted on multiple VMs at the same time..
             *
             * @param maxShares The maximum number of VMs that can attach to the disk at the same time. Value greater
             *     than one indicates a disk that can be mounted on multiple VMs at the same time.
             * @return the next definition stage.
             */
            Update withMaxShares(Integer maxShares);
        }
        /** The stage of the Disk update allowing to specify encryption. */
        interface WithEncryption {
            /**
             * Specifies the encryption property: Encryption property can be used to encrypt data at rest with customer
             * managed keys or platform managed keys..
             *
             * @param encryption Encryption property can be used to encrypt data at rest with customer managed keys or
             *     platform managed keys.
             * @return the next definition stage.
             */
            Update withEncryption(Encryption encryption);
        }
        /** The stage of the Disk update allowing to specify networkAccessPolicy. */
        interface WithNetworkAccessPolicy {
            /**
             * Specifies the networkAccessPolicy property: Policy for accessing the disk via network..
             *
             * @param networkAccessPolicy Policy for accessing the disk via network.
             * @return the next definition stage.
             */
            Update withNetworkAccessPolicy(NetworkAccessPolicy networkAccessPolicy);
        }
        /** The stage of the Disk update allowing to specify diskAccessId. */
        interface WithDiskAccessId {
            /**
             * Specifies the diskAccessId property: ARM id of the DiskAccess resource for using private endpoints on
             * disks..
             *
             * @param diskAccessId ARM id of the DiskAccess resource for using private endpoints on disks.
             * @return the next definition stage.
             */
            Update withDiskAccessId(String diskAccessId);
        }
        /** The stage of the Disk update allowing to specify tier. */
        interface WithTier {
            /**
             * Specifies the tier property: Performance tier of the disk (e.g, P4, S10) as described here:
             * https://azure.microsoft.com/en-us/pricing/details/managed-disks/. Does not apply to Ultra disks..
             *
             * @param tier Performance tier of the disk (e.g, P4, S10) as described here:
             *     https://azure.microsoft.com/en-us/pricing/details/managed-disks/. Does not apply to Ultra disks.
             * @return the next definition stage.
             */
            Update withTier(String tier);
        }
    }
    /**
     * Refreshes the resource to sync with Azure.
     *
     * @return the refreshed resource.
     */
    Disk refresh();

    /**
     * Refreshes the resource to sync with Azure.
     *
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    Disk refresh(Context context);
}
