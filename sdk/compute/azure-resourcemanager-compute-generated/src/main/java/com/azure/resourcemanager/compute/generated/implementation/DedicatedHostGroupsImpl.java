// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.compute.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.compute.generated.fluent.DedicatedHostGroupsClient;
import com.azure.resourcemanager.compute.generated.fluent.models.DedicatedHostGroupInner;
import com.azure.resourcemanager.compute.generated.models.DedicatedHostGroup;
import com.azure.resourcemanager.compute.generated.models.DedicatedHostGroups;
import com.azure.resourcemanager.compute.generated.models.InstanceViewTypes;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class DedicatedHostGroupsImpl implements DedicatedHostGroups {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(DedicatedHostGroupsImpl.class);

    private final DedicatedHostGroupsClient innerClient;

    private final com.azure.resourcemanager.compute.generated.ComputeManager serviceManager;

    public DedicatedHostGroupsImpl(
        DedicatedHostGroupsClient innerClient,
        com.azure.resourcemanager.compute.generated.ComputeManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public void deleteByResourceGroup(String resourceGroupName, String hostGroupName) {
        this.serviceClient().delete(resourceGroupName, hostGroupName);
    }

    public Response<Void> deleteWithResponse(String resourceGroupName, String hostGroupName, Context context) {
        return this.serviceClient().deleteWithResponse(resourceGroupName, hostGroupName, context);
    }

    public DedicatedHostGroup getByResourceGroup(String resourceGroupName, String hostGroupName) {
        DedicatedHostGroupInner inner = this.serviceClient().getByResourceGroup(resourceGroupName, hostGroupName);
        if (inner != null) {
            return new DedicatedHostGroupImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<DedicatedHostGroup> getByResourceGroupWithResponse(
        String resourceGroupName, String hostGroupName, InstanceViewTypes expand, Context context) {
        Response<DedicatedHostGroupInner> inner =
            this.serviceClient().getByResourceGroupWithResponse(resourceGroupName, hostGroupName, expand, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new DedicatedHostGroupImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PagedIterable<DedicatedHostGroup> listByResourceGroup(String resourceGroupName) {
        PagedIterable<DedicatedHostGroupInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName);
        return Utils.mapPage(inner, inner1 -> new DedicatedHostGroupImpl(inner1, this.manager()));
    }

    public PagedIterable<DedicatedHostGroup> listByResourceGroup(String resourceGroupName, Context context) {
        PagedIterable<DedicatedHostGroupInner> inner =
            this.serviceClient().listByResourceGroup(resourceGroupName, context);
        return Utils.mapPage(inner, inner1 -> new DedicatedHostGroupImpl(inner1, this.manager()));
    }

    public PagedIterable<DedicatedHostGroup> list() {
        PagedIterable<DedicatedHostGroupInner> inner = this.serviceClient().list();
        return Utils.mapPage(inner, inner1 -> new DedicatedHostGroupImpl(inner1, this.manager()));
    }

    public PagedIterable<DedicatedHostGroup> list(Context context) {
        PagedIterable<DedicatedHostGroupInner> inner = this.serviceClient().list(context);
        return Utils.mapPage(inner, inner1 -> new DedicatedHostGroupImpl(inner1, this.manager()));
    }

    public DedicatedHostGroup getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String hostGroupName = Utils.getValueFromIdByName(id, "hostGroups");
        if (hostGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'hostGroups'.", id)));
        }
        InstanceViewTypes localExpand = null;
        return this
            .getByResourceGroupWithResponse(resourceGroupName, hostGroupName, localExpand, Context.NONE)
            .getValue();
    }

    public Response<DedicatedHostGroup> getByIdWithResponse(String id, InstanceViewTypes expand, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String hostGroupName = Utils.getValueFromIdByName(id, "hostGroups");
        if (hostGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'hostGroups'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, hostGroupName, expand, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String hostGroupName = Utils.getValueFromIdByName(id, "hostGroups");
        if (hostGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'hostGroups'.", id)));
        }
        this.deleteWithResponse(resourceGroupName, hostGroupName, Context.NONE).getValue();
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String hostGroupName = Utils.getValueFromIdByName(id, "hostGroups");
        if (hostGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'hostGroups'.", id)));
        }
        return this.deleteWithResponse(resourceGroupName, hostGroupName, context);
    }

    private DedicatedHostGroupsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.compute.generated.ComputeManager manager() {
        return this.serviceManager;
    }

    public DedicatedHostGroupImpl define(String name) {
        return new DedicatedHostGroupImpl(name, this.manager());
    }
}
