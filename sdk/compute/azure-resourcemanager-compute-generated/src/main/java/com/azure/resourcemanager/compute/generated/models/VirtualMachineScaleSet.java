// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.compute.generated.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.management.Region;
import com.azure.core.management.SubResource;
import com.azure.core.util.Context;
import com.azure.resourcemanager.compute.generated.fluent.models.VirtualMachineScaleSetInner;
import java.util.List;
import java.util.Map;

/** An immutable client-side representation of VirtualMachineScaleSet. */
@Immutable
public interface VirtualMachineScaleSet {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     *
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     *
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     *
     * @return the type value.
     */
    String type();

    /**
     * Gets the location property: The geo-location where the resource lives.
     *
     * @return the location value.
     */
    String location();

    /**
     * Gets the tags property: Resource tags.
     *
     * @return the tags value.
     */
    Map<String, String> tags();

    /**
     * Gets the sku property: The virtual machine scale set sku.
     *
     * @return the sku value.
     */
    Sku sku();

    /**
     * Gets the plan property: Specifies information about the marketplace image used to create the virtual machine.
     * This element is only used for marketplace images. Before you can use a marketplace image from an API, you must
     * enable the image for programmatic use. In the Azure portal, find the marketplace image that you want to use and
     * then click **Want to deploy programmatically, Get Started -&gt;**. Enter any required information and then click
     * **Save**.
     *
     * @return the plan value.
     */
    Plan plan();

    /**
     * Gets the identity property: The identity of the virtual machine scale set, if configured.
     *
     * @return the identity value.
     */
    VirtualMachineScaleSetIdentity identity();

    /**
     * Gets the zones property: The virtual machine scale set zones. NOTE: Availability zones can only be set when you
     * create the scale set.
     *
     * @return the zones value.
     */
    List<String> zones();

    /**
     * Gets the upgradePolicy property: The upgrade policy.
     *
     * @return the upgradePolicy value.
     */
    UpgradePolicy upgradePolicy();

    /**
     * Gets the automaticRepairsPolicy property: Policy for automatic repairs.
     *
     * @return the automaticRepairsPolicy value.
     */
    AutomaticRepairsPolicy automaticRepairsPolicy();

    /**
     * Gets the virtualMachineProfile property: The virtual machine profile.
     *
     * @return the virtualMachineProfile value.
     */
    VirtualMachineScaleSetVMProfile virtualMachineProfile();

    /**
     * Gets the provisioningState property: The provisioning state, which only appears in the response.
     *
     * @return the provisioningState value.
     */
    String provisioningState();

    /**
     * Gets the overprovision property: Specifies whether the Virtual Machine Scale Set should be overprovisioned.
     *
     * @return the overprovision value.
     */
    Boolean overprovision();

    /**
     * Gets the doNotRunExtensionsOnOverprovisionedVMs property: When Overprovision is enabled, extensions are launched
     * only on the requested number of VMs which are finally kept. This property will hence ensure that the extensions
     * do not run on the extra overprovisioned VMs.
     *
     * @return the doNotRunExtensionsOnOverprovisionedVMs value.
     */
    Boolean doNotRunExtensionsOnOverprovisionedVMs();

    /**
     * Gets the uniqueId property: Specifies the ID which uniquely identifies a Virtual Machine Scale Set.
     *
     * @return the uniqueId value.
     */
    String uniqueId();

    /**
     * Gets the singlePlacementGroup property: When true this limits the scale set to a single placement group, of max
     * size 100 virtual machines. NOTE: If singlePlacementGroup is true, it may be modified to false. However, if
     * singlePlacementGroup is false, it may not be modified to true.
     *
     * @return the singlePlacementGroup value.
     */
    Boolean singlePlacementGroup();

    /**
     * Gets the zoneBalance property: Whether to force strictly even Virtual Machine distribution cross x-zones in case
     * there is zone outage.
     *
     * @return the zoneBalance value.
     */
    Boolean zoneBalance();

    /**
     * Gets the platformFaultDomainCount property: Fault Domain count for each placement group.
     *
     * @return the platformFaultDomainCount value.
     */
    Integer platformFaultDomainCount();

    /**
     * Gets the proximityPlacementGroup property: Specifies information about the proximity placement group that the
     * virtual machine scale set should be assigned to. &lt;br&gt;&lt;br&gt;Minimum api-version: 2018-04-01.
     *
     * @return the proximityPlacementGroup value.
     */
    SubResource proximityPlacementGroup();

    /**
     * Gets the hostGroup property: Specifies information about the dedicated host group that the virtual machine scale
     * set resides in. &lt;br&gt;&lt;br&gt;Minimum api-version: 2020-06-01.
     *
     * @return the hostGroup value.
     */
    SubResource hostGroup();

    /**
     * Gets the additionalCapabilities property: Specifies additional capabilities enabled or disabled on the Virtual
     * Machines in the Virtual Machine Scale Set. For instance: whether the Virtual Machines have the capability to
     * support attaching managed data disks with UltraSSD_LRS storage account type.
     *
     * @return the additionalCapabilities value.
     */
    AdditionalCapabilities additionalCapabilities();

    /**
     * Gets the scaleInPolicy property: Specifies the scale-in policy that decides which virtual machines are chosen for
     * removal when a Virtual Machine Scale Set is scaled-in.
     *
     * @return the scaleInPolicy value.
     */
    ScaleInPolicy scaleInPolicy();

    /**
     * Gets the region of the resource.
     *
     * @return the region of the resource.
     */
    Region region();

    /**
     * Gets the name of the resource region.
     *
     * @return the name of the resource region.
     */
    String regionName();

    /**
     * Gets the inner com.azure.resourcemanager.compute.generated.fluent.models.VirtualMachineScaleSetInner object.
     *
     * @return the inner object.
     */
    VirtualMachineScaleSetInner innerModel();

    /** The entirety of the VirtualMachineScaleSet definition. */
    interface Definition
        extends DefinitionStages.Blank,
            DefinitionStages.WithLocation,
            DefinitionStages.WithResourceGroup,
            DefinitionStages.WithCreate {
    }
    /** The VirtualMachineScaleSet definition stages. */
    interface DefinitionStages {
        /** The first stage of the VirtualMachineScaleSet definition. */
        interface Blank extends WithLocation {
        }
        /** The stage of the VirtualMachineScaleSet definition allowing to specify location. */
        interface WithLocation {
            /**
             * Specifies the region for the resource.
             *
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithResourceGroup withRegion(Region location);

            /**
             * Specifies the region for the resource.
             *
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithResourceGroup withRegion(String location);
        }
        /** The stage of the VirtualMachineScaleSet definition allowing to specify parent resource. */
        interface WithResourceGroup {
            /**
             * Specifies resourceGroupName.
             *
             * @param resourceGroupName The name of the resource group.
             * @return the next definition stage.
             */
            WithCreate withExistingResourceGroup(String resourceGroupName);
        }
        /**
         * The stage of the VirtualMachineScaleSet definition which contains all the minimum required properties for the
         * resource to be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate
            extends DefinitionStages.WithTags,
                DefinitionStages.WithSku,
                DefinitionStages.WithPlan,
                DefinitionStages.WithIdentity,
                DefinitionStages.WithZones,
                DefinitionStages.WithUpgradePolicy,
                DefinitionStages.WithAutomaticRepairsPolicy,
                DefinitionStages.WithVirtualMachineProfile,
                DefinitionStages.WithOverprovision,
                DefinitionStages.WithDoNotRunExtensionsOnOverprovisionedVMs,
                DefinitionStages.WithSinglePlacementGroup,
                DefinitionStages.WithZoneBalance,
                DefinitionStages.WithPlatformFaultDomainCount,
                DefinitionStages.WithProximityPlacementGroup,
                DefinitionStages.WithHostGroup,
                DefinitionStages.WithAdditionalCapabilities,
                DefinitionStages.WithScaleInPolicy {
            /**
             * Executes the create request.
             *
             * @return the created resource.
             */
            VirtualMachineScaleSet create();

            /**
             * Executes the create request.
             *
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            VirtualMachineScaleSet create(Context context);
        }
        /** The stage of the VirtualMachineScaleSet definition allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             *
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            WithCreate withTags(Map<String, String> tags);
        }
        /** The stage of the VirtualMachineScaleSet definition allowing to specify sku. */
        interface WithSku {
            /**
             * Specifies the sku property: The virtual machine scale set sku..
             *
             * @param sku The virtual machine scale set sku.
             * @return the next definition stage.
             */
            WithCreate withSku(Sku sku);
        }
        /** The stage of the VirtualMachineScaleSet definition allowing to specify plan. */
        interface WithPlan {
            /**
             * Specifies the plan property: Specifies information about the marketplace image used to create the virtual
             * machine. This element is only used for marketplace images. Before you can use a marketplace image from an
             * API, you must enable the image for programmatic use. In the Azure portal, find the marketplace image that
             * you want to use and then click **Want to deploy programmatically, Get Started -&gt;**. Enter any required
             * information and then click **Save**..
             *
             * @param plan Specifies information about the marketplace image used to create the virtual machine. This
             *     element is only used for marketplace images. Before you can use a marketplace image from an API, you
             *     must enable the image for programmatic use. In the Azure portal, find the marketplace image that you
             *     want to use and then click **Want to deploy programmatically, Get Started -&gt;**. Enter any required
             *     information and then click **Save**.
             * @return the next definition stage.
             */
            WithCreate withPlan(Plan plan);
        }
        /** The stage of the VirtualMachineScaleSet definition allowing to specify identity. */
        interface WithIdentity {
            /**
             * Specifies the identity property: The identity of the virtual machine scale set, if configured..
             *
             * @param identity The identity of the virtual machine scale set, if configured.
             * @return the next definition stage.
             */
            WithCreate withIdentity(VirtualMachineScaleSetIdentity identity);
        }
        /** The stage of the VirtualMachineScaleSet definition allowing to specify zones. */
        interface WithZones {
            /**
             * Specifies the zones property: The virtual machine scale set zones. NOTE: Availability zones can only be
             * set when you create the scale set.
             *
             * @param zones The virtual machine scale set zones. NOTE: Availability zones can only be set when you
             *     create the scale set.
             * @return the next definition stage.
             */
            WithCreate withZones(List<String> zones);
        }
        /** The stage of the VirtualMachineScaleSet definition allowing to specify upgradePolicy. */
        interface WithUpgradePolicy {
            /**
             * Specifies the upgradePolicy property: The upgrade policy..
             *
             * @param upgradePolicy The upgrade policy.
             * @return the next definition stage.
             */
            WithCreate withUpgradePolicy(UpgradePolicy upgradePolicy);
        }
        /** The stage of the VirtualMachineScaleSet definition allowing to specify automaticRepairsPolicy. */
        interface WithAutomaticRepairsPolicy {
            /**
             * Specifies the automaticRepairsPolicy property: Policy for automatic repairs..
             *
             * @param automaticRepairsPolicy Policy for automatic repairs.
             * @return the next definition stage.
             */
            WithCreate withAutomaticRepairsPolicy(AutomaticRepairsPolicy automaticRepairsPolicy);
        }
        /** The stage of the VirtualMachineScaleSet definition allowing to specify virtualMachineProfile. */
        interface WithVirtualMachineProfile {
            /**
             * Specifies the virtualMachineProfile property: The virtual machine profile..
             *
             * @param virtualMachineProfile The virtual machine profile.
             * @return the next definition stage.
             */
            WithCreate withVirtualMachineProfile(VirtualMachineScaleSetVMProfile virtualMachineProfile);
        }
        /** The stage of the VirtualMachineScaleSet definition allowing to specify overprovision. */
        interface WithOverprovision {
            /**
             * Specifies the overprovision property: Specifies whether the Virtual Machine Scale Set should be
             * overprovisioned..
             *
             * @param overprovision Specifies whether the Virtual Machine Scale Set should be overprovisioned.
             * @return the next definition stage.
             */
            WithCreate withOverprovision(Boolean overprovision);
        }
        /**
         * The stage of the VirtualMachineScaleSet definition allowing to specify
         * doNotRunExtensionsOnOverprovisionedVMs.
         */
        interface WithDoNotRunExtensionsOnOverprovisionedVMs {
            /**
             * Specifies the doNotRunExtensionsOnOverprovisionedVMs property: When Overprovision is enabled, extensions
             * are launched only on the requested number of VMs which are finally kept. This property will hence ensure
             * that the extensions do not run on the extra overprovisioned VMs..
             *
             * @param doNotRunExtensionsOnOverprovisionedVMs When Overprovision is enabled, extensions are launched only
             *     on the requested number of VMs which are finally kept. This property will hence ensure that the
             *     extensions do not run on the extra overprovisioned VMs.
             * @return the next definition stage.
             */
            WithCreate withDoNotRunExtensionsOnOverprovisionedVMs(Boolean doNotRunExtensionsOnOverprovisionedVMs);
        }
        /** The stage of the VirtualMachineScaleSet definition allowing to specify singlePlacementGroup. */
        interface WithSinglePlacementGroup {
            /**
             * Specifies the singlePlacementGroup property: When true this limits the scale set to a single placement
             * group, of max size 100 virtual machines. NOTE: If singlePlacementGroup is true, it may be modified to
             * false. However, if singlePlacementGroup is false, it may not be modified to true..
             *
             * @param singlePlacementGroup When true this limits the scale set to a single placement group, of max size
             *     100 virtual machines. NOTE: If singlePlacementGroup is true, it may be modified to false. However, if
             *     singlePlacementGroup is false, it may not be modified to true.
             * @return the next definition stage.
             */
            WithCreate withSinglePlacementGroup(Boolean singlePlacementGroup);
        }
        /** The stage of the VirtualMachineScaleSet definition allowing to specify zoneBalance. */
        interface WithZoneBalance {
            /**
             * Specifies the zoneBalance property: Whether to force strictly even Virtual Machine distribution cross
             * x-zones in case there is zone outage..
             *
             * @param zoneBalance Whether to force strictly even Virtual Machine distribution cross x-zones in case
             *     there is zone outage.
             * @return the next definition stage.
             */
            WithCreate withZoneBalance(Boolean zoneBalance);
        }
        /** The stage of the VirtualMachineScaleSet definition allowing to specify platformFaultDomainCount. */
        interface WithPlatformFaultDomainCount {
            /**
             * Specifies the platformFaultDomainCount property: Fault Domain count for each placement group..
             *
             * @param platformFaultDomainCount Fault Domain count for each placement group.
             * @return the next definition stage.
             */
            WithCreate withPlatformFaultDomainCount(Integer platformFaultDomainCount);
        }
        /** The stage of the VirtualMachineScaleSet definition allowing to specify proximityPlacementGroup. */
        interface WithProximityPlacementGroup {
            /**
             * Specifies the proximityPlacementGroup property: Specifies information about the proximity placement group
             * that the virtual machine scale set should be assigned to. &lt;br&gt;&lt;br&gt;Minimum api-version:
             * 2018-04-01..
             *
             * @param proximityPlacementGroup Specifies information about the proximity placement group that the virtual
             *     machine scale set should be assigned to. &lt;br&gt;&lt;br&gt;Minimum api-version: 2018-04-01.
             * @return the next definition stage.
             */
            WithCreate withProximityPlacementGroup(SubResource proximityPlacementGroup);
        }
        /** The stage of the VirtualMachineScaleSet definition allowing to specify hostGroup. */
        interface WithHostGroup {
            /**
             * Specifies the hostGroup property: Specifies information about the dedicated host group that the virtual
             * machine scale set resides in. &lt;br&gt;&lt;br&gt;Minimum api-version: 2020-06-01..
             *
             * @param hostGroup Specifies information about the dedicated host group that the virtual machine scale set
             *     resides in. &lt;br&gt;&lt;br&gt;Minimum api-version: 2020-06-01.
             * @return the next definition stage.
             */
            WithCreate withHostGroup(SubResource hostGroup);
        }
        /** The stage of the VirtualMachineScaleSet definition allowing to specify additionalCapabilities. */
        interface WithAdditionalCapabilities {
            /**
             * Specifies the additionalCapabilities property: Specifies additional capabilities enabled or disabled on
             * the Virtual Machines in the Virtual Machine Scale Set. For instance: whether the Virtual Machines have
             * the capability to support attaching managed data disks with UltraSSD_LRS storage account type..
             *
             * @param additionalCapabilities Specifies additional capabilities enabled or disabled on the Virtual
             *     Machines in the Virtual Machine Scale Set. For instance: whether the Virtual Machines have the
             *     capability to support attaching managed data disks with UltraSSD_LRS storage account type.
             * @return the next definition stage.
             */
            WithCreate withAdditionalCapabilities(AdditionalCapabilities additionalCapabilities);
        }
        /** The stage of the VirtualMachineScaleSet definition allowing to specify scaleInPolicy. */
        interface WithScaleInPolicy {
            /**
             * Specifies the scaleInPolicy property: Specifies the scale-in policy that decides which virtual machines
             * are chosen for removal when a Virtual Machine Scale Set is scaled-in..
             *
             * @param scaleInPolicy Specifies the scale-in policy that decides which virtual machines are chosen for
             *     removal when a Virtual Machine Scale Set is scaled-in.
             * @return the next definition stage.
             */
            WithCreate withScaleInPolicy(ScaleInPolicy scaleInPolicy);
        }
    }
    /**
     * Begins update for the VirtualMachineScaleSet resource.
     *
     * @return the stage of resource update.
     */
    VirtualMachineScaleSet.Update update();

    /** The template for VirtualMachineScaleSet update. */
    interface Update
        extends UpdateStages.WithTags,
            UpdateStages.WithSku,
            UpdateStages.WithPlan,
            UpdateStages.WithIdentity,
            UpdateStages.WithUpgradePolicy,
            UpdateStages.WithAutomaticRepairsPolicy,
            UpdateStages.WithVirtualMachineProfile,
            UpdateStages.WithOverprovision,
            UpdateStages.WithDoNotRunExtensionsOnOverprovisionedVMs,
            UpdateStages.WithSinglePlacementGroup,
            UpdateStages.WithAdditionalCapabilities,
            UpdateStages.WithScaleInPolicy,
            UpdateStages.WithProximityPlacementGroup {
        /**
         * Executes the update request.
         *
         * @return the updated resource.
         */
        VirtualMachineScaleSet apply();

        /**
         * Executes the update request.
         *
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        VirtualMachineScaleSet apply(Context context);
    }
    /** The VirtualMachineScaleSet update stages. */
    interface UpdateStages {
        /** The stage of the VirtualMachineScaleSet update allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags.
             *
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            Update withTags(Map<String, String> tags);
        }
        /** The stage of the VirtualMachineScaleSet update allowing to specify sku. */
        interface WithSku {
            /**
             * Specifies the sku property: The virtual machine scale set sku..
             *
             * @param sku The virtual machine scale set sku.
             * @return the next definition stage.
             */
            Update withSku(Sku sku);
        }
        /** The stage of the VirtualMachineScaleSet update allowing to specify plan. */
        interface WithPlan {
            /**
             * Specifies the plan property: The purchase plan when deploying a virtual machine scale set from VM
             * Marketplace images..
             *
             * @param plan The purchase plan when deploying a virtual machine scale set from VM Marketplace images.
             * @return the next definition stage.
             */
            Update withPlan(Plan plan);
        }
        /** The stage of the VirtualMachineScaleSet update allowing to specify identity. */
        interface WithIdentity {
            /**
             * Specifies the identity property: The identity of the virtual machine scale set, if configured..
             *
             * @param identity The identity of the virtual machine scale set, if configured.
             * @return the next definition stage.
             */
            Update withIdentity(VirtualMachineScaleSetIdentity identity);
        }
        /** The stage of the VirtualMachineScaleSet update allowing to specify upgradePolicy. */
        interface WithUpgradePolicy {
            /**
             * Specifies the upgradePolicy property: The upgrade policy..
             *
             * @param upgradePolicy The upgrade policy.
             * @return the next definition stage.
             */
            Update withUpgradePolicy(UpgradePolicy upgradePolicy);
        }
        /** The stage of the VirtualMachineScaleSet update allowing to specify automaticRepairsPolicy. */
        interface WithAutomaticRepairsPolicy {
            /**
             * Specifies the automaticRepairsPolicy property: Policy for automatic repairs..
             *
             * @param automaticRepairsPolicy Policy for automatic repairs.
             * @return the next definition stage.
             */
            Update withAutomaticRepairsPolicy(AutomaticRepairsPolicy automaticRepairsPolicy);
        }
        /** The stage of the VirtualMachineScaleSet update allowing to specify virtualMachineProfile. */
        interface WithVirtualMachineProfile {
            /**
             * Specifies the virtualMachineProfile property: The virtual machine profile..
             *
             * @param virtualMachineProfile The virtual machine profile.
             * @return the next definition stage.
             */
            Update withVirtualMachineProfile(VirtualMachineScaleSetUpdateVMProfile virtualMachineProfile);
        }
        /** The stage of the VirtualMachineScaleSet update allowing to specify overprovision. */
        interface WithOverprovision {
            /**
             * Specifies the overprovision property: Specifies whether the Virtual Machine Scale Set should be
             * overprovisioned..
             *
             * @param overprovision Specifies whether the Virtual Machine Scale Set should be overprovisioned.
             * @return the next definition stage.
             */
            Update withOverprovision(Boolean overprovision);
        }
        /**
         * The stage of the VirtualMachineScaleSet update allowing to specify doNotRunExtensionsOnOverprovisionedVMs.
         */
        interface WithDoNotRunExtensionsOnOverprovisionedVMs {
            /**
             * Specifies the doNotRunExtensionsOnOverprovisionedVMs property: When Overprovision is enabled, extensions
             * are launched only on the requested number of VMs which are finally kept. This property will hence ensure
             * that the extensions do not run on the extra overprovisioned VMs..
             *
             * @param doNotRunExtensionsOnOverprovisionedVMs When Overprovision is enabled, extensions are launched only
             *     on the requested number of VMs which are finally kept. This property will hence ensure that the
             *     extensions do not run on the extra overprovisioned VMs.
             * @return the next definition stage.
             */
            Update withDoNotRunExtensionsOnOverprovisionedVMs(Boolean doNotRunExtensionsOnOverprovisionedVMs);
        }
        /** The stage of the VirtualMachineScaleSet update allowing to specify singlePlacementGroup. */
        interface WithSinglePlacementGroup {
            /**
             * Specifies the singlePlacementGroup property: When true this limits the scale set to a single placement
             * group, of max size 100 virtual machines. NOTE: If singlePlacementGroup is true, it may be modified to
             * false. However, if singlePlacementGroup is false, it may not be modified to true..
             *
             * @param singlePlacementGroup When true this limits the scale set to a single placement group, of max size
             *     100 virtual machines. NOTE: If singlePlacementGroup is true, it may be modified to false. However, if
             *     singlePlacementGroup is false, it may not be modified to true.
             * @return the next definition stage.
             */
            Update withSinglePlacementGroup(Boolean singlePlacementGroup);
        }
        /** The stage of the VirtualMachineScaleSet update allowing to specify additionalCapabilities. */
        interface WithAdditionalCapabilities {
            /**
             * Specifies the additionalCapabilities property: Specifies additional capabilities enabled or disabled on
             * the Virtual Machines in the Virtual Machine Scale Set. For instance: whether the Virtual Machines have
             * the capability to support attaching managed data disks with UltraSSD_LRS storage account type..
             *
             * @param additionalCapabilities Specifies additional capabilities enabled or disabled on the Virtual
             *     Machines in the Virtual Machine Scale Set. For instance: whether the Virtual Machines have the
             *     capability to support attaching managed data disks with UltraSSD_LRS storage account type.
             * @return the next definition stage.
             */
            Update withAdditionalCapabilities(AdditionalCapabilities additionalCapabilities);
        }
        /** The stage of the VirtualMachineScaleSet update allowing to specify scaleInPolicy. */
        interface WithScaleInPolicy {
            /**
             * Specifies the scaleInPolicy property: Specifies the scale-in policy that decides which virtual machines
             * are chosen for removal when a Virtual Machine Scale Set is scaled-in..
             *
             * @param scaleInPolicy Specifies the scale-in policy that decides which virtual machines are chosen for
             *     removal when a Virtual Machine Scale Set is scaled-in.
             * @return the next definition stage.
             */
            Update withScaleInPolicy(ScaleInPolicy scaleInPolicy);
        }
        /** The stage of the VirtualMachineScaleSet update allowing to specify proximityPlacementGroup. */
        interface WithProximityPlacementGroup {
            /**
             * Specifies the proximityPlacementGroup property: Specifies information about the proximity placement group
             * that the virtual machine scale set should be assigned to. &lt;br&gt;&lt;br&gt;Minimum api-version:
             * 2018-04-01..
             *
             * @param proximityPlacementGroup Specifies information about the proximity placement group that the virtual
             *     machine scale set should be assigned to. &lt;br&gt;&lt;br&gt;Minimum api-version: 2018-04-01.
             * @return the next definition stage.
             */
            Update withProximityPlacementGroup(SubResource proximityPlacementGroup);
        }
    }
    /**
     * Refreshes the resource to sync with Azure.
     *
     * @return the refreshed resource.
     */
    VirtualMachineScaleSet refresh();

    /**
     * Refreshes the resource to sync with Azure.
     *
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    VirtualMachineScaleSet refresh(Context context);
}
