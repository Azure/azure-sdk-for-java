// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.compute.generated.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.management.Region;
import com.azure.core.management.SubResource;
import com.azure.core.util.Context;
import com.azure.resourcemanager.compute.generated.fluent.models.VirtualMachineInner;
import java.util.List;
import java.util.Map;

/** An immutable client-side representation of VirtualMachine. */
@Immutable
public interface VirtualMachine {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     *
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     *
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     *
     * @return the type value.
     */
    String type();

    /**
     * Gets the location property: The geo-location where the resource lives.
     *
     * @return the location value.
     */
    String location();

    /**
     * Gets the tags property: Resource tags.
     *
     * @return the tags value.
     */
    Map<String, String> tags();

    /**
     * Gets the plan property: Specifies information about the marketplace image used to create the virtual machine.
     * This element is only used for marketplace images. Before you can use a marketplace image from an API, you must
     * enable the image for programmatic use. In the Azure portal, find the marketplace image that you want to use and
     * then click **Want to deploy programmatically, Get Started -&gt;**. Enter any required information and then click
     * **Save**.
     *
     * @return the plan value.
     */
    Plan plan();

    /**
     * Gets the resources property: The virtual machine child extension resources.
     *
     * @return the resources value.
     */
    List<VirtualMachineExtension> resources();

    /**
     * Gets the identity property: The identity of the virtual machine, if configured.
     *
     * @return the identity value.
     */
    VirtualMachineIdentity identity();

    /**
     * Gets the zones property: The virtual machine zones.
     *
     * @return the zones value.
     */
    List<String> zones();

    /**
     * Gets the hardwareProfile property: Specifies the hardware settings for the virtual machine.
     *
     * @return the hardwareProfile value.
     */
    HardwareProfile hardwareProfile();

    /**
     * Gets the storageProfile property: Specifies the storage settings for the virtual machine disks.
     *
     * @return the storageProfile value.
     */
    StorageProfile storageProfile();

    /**
     * Gets the additionalCapabilities property: Specifies additional capabilities enabled or disabled on the virtual
     * machine.
     *
     * @return the additionalCapabilities value.
     */
    AdditionalCapabilities additionalCapabilities();

    /**
     * Gets the osProfile property: Specifies the operating system settings used while creating the virtual machine.
     * Some of the settings cannot be changed once VM is provisioned.
     *
     * @return the osProfile value.
     */
    OSProfile osProfile();

    /**
     * Gets the networkProfile property: Specifies the network interfaces of the virtual machine.
     *
     * @return the networkProfile value.
     */
    NetworkProfile networkProfile();

    /**
     * Gets the securityProfile property: Specifies the Security related profile settings for the virtual machine.
     *
     * @return the securityProfile value.
     */
    SecurityProfile securityProfile();

    /**
     * Gets the diagnosticsProfile property: Specifies the boot diagnostic settings state. &lt;br&gt;&lt;br&gt;Minimum
     * api-version: 2015-06-15.
     *
     * @return the diagnosticsProfile value.
     */
    DiagnosticsProfile diagnosticsProfile();

    /**
     * Gets the availabilitySet property: Specifies information about the availability set that the virtual machine
     * should be assigned to. Virtual machines specified in the same availability set are allocated to different nodes
     * to maximize availability. For more information about availability sets, see [Manage the availability of virtual
     * machines](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-manage-availability?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json).
     * &lt;br&gt;&lt;br&gt; For more information on Azure planned maintenance, see [Planned maintenance for virtual
     * machines in
     * Azure](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-planned-maintenance?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json)
     * &lt;br&gt;&lt;br&gt; Currently, a VM can only be added to availability set at creation time. The availability set
     * to which the VM is being added should be under the same resource group as the availability set resource. An
     * existing VM cannot be added to an availability set. &lt;br&gt;&lt;br&gt;This property cannot exist along with a
     * non-null properties.virtualMachineScaleSet reference.
     *
     * @return the availabilitySet value.
     */
    SubResource availabilitySet();

    /**
     * Gets the virtualMachineScaleSet property: Specifies information about the virtual machine scale set that the
     * virtual machine should be assigned to. Virtual machines specified in the same virtual machine scale set are
     * allocated to different nodes to maximize availability. Currently, a VM can only be added to virtual machine scale
     * set at creation time. An existing VM cannot be added to a virtual machine scale set. &lt;br&gt;&lt;br&gt;This
     * property cannot exist along with a non-null properties.availabilitySet reference. &lt;br&gt;&lt;br&gt;Minimum
     * api‐version: 2019‐03‐01.
     *
     * @return the virtualMachineScaleSet value.
     */
    SubResource virtualMachineScaleSet();

    /**
     * Gets the proximityPlacementGroup property: Specifies information about the proximity placement group that the
     * virtual machine should be assigned to. &lt;br&gt;&lt;br&gt;Minimum api-version: 2018-04-01.
     *
     * @return the proximityPlacementGroup value.
     */
    SubResource proximityPlacementGroup();

    /**
     * Gets the priority property: Specifies the priority for the virtual machine. &lt;br&gt;&lt;br&gt;Minimum
     * api-version: 2019-03-01.
     *
     * @return the priority value.
     */
    VirtualMachinePriorityTypes priority();

    /**
     * Gets the evictionPolicy property: Specifies the eviction policy for the Azure Spot virtual machine and Azure Spot
     * scale set. &lt;br&gt;&lt;br&gt;For Azure Spot virtual machines, both 'Deallocate' and 'Delete' are supported and
     * the minimum api-version is 2019-03-01. &lt;br&gt;&lt;br&gt;For Azure Spot scale sets, both 'Deallocate' and
     * 'Delete' are supported and the minimum api-version is 2017-10-30-preview.
     *
     * @return the evictionPolicy value.
     */
    VirtualMachineEvictionPolicyTypes evictionPolicy();

    /**
     * Gets the billingProfile property: Specifies the billing related details of a Azure Spot virtual machine.
     * &lt;br&gt;&lt;br&gt;Minimum api-version: 2019-03-01.
     *
     * @return the billingProfile value.
     */
    BillingProfile billingProfile();

    /**
     * Gets the host property: Specifies information about the dedicated host that the virtual machine resides in.
     * &lt;br&gt;&lt;br&gt;Minimum api-version: 2018-10-01.
     *
     * @return the host value.
     */
    SubResource host();

    /**
     * Gets the hostGroup property: Specifies information about the dedicated host group that the virtual machine
     * resides in. &lt;br&gt;&lt;br&gt;Minimum api-version: 2020-06-01. &lt;br&gt;&lt;br&gt;NOTE: User cannot specify
     * both host and hostGroup properties.
     *
     * @return the hostGroup value.
     */
    SubResource hostGroup();

    /**
     * Gets the provisioningState property: The provisioning state, which only appears in the response.
     *
     * @return the provisioningState value.
     */
    String provisioningState();

    /**
     * Gets the instanceView property: The virtual machine instance view.
     *
     * @return the instanceView value.
     */
    VirtualMachineInstanceView instanceView();

    /**
     * Gets the licenseType property: Specifies that the image or disk that is being used was licensed on-premises.
     * &lt;br&gt;&lt;br&gt; Possible values for Windows Server operating system are: &lt;br&gt;&lt;br&gt; Windows_Client
     * &lt;br&gt;&lt;br&gt; Windows_Server &lt;br&gt;&lt;br&gt; Possible values for Linux Server operating system are:
     * &lt;br&gt;&lt;br&gt; RHEL_BYOS (for RHEL) &lt;br&gt;&lt;br&gt; SLES_BYOS (for SUSE) &lt;br&gt;&lt;br&gt; For more
     * information, see [Azure Hybrid Use Benefit for Windows
     * Server](https://docs.microsoft.com/azure/virtual-machines/windows/hybrid-use-benefit-licensing)
     * &lt;br&gt;&lt;br&gt; [Azure Hybrid Use Benefit for Linux
     * Server](https://docs.microsoft.com/azure/virtual-machines/linux/azure-hybrid-benefit-linux) &lt;br&gt;&lt;br&gt;
     * Minimum api-version: 2015-06-15.
     *
     * @return the licenseType value.
     */
    String licenseType();

    /**
     * Gets the vmId property: Specifies the VM unique ID which is a 128-bits identifier that is encoded and stored in
     * all Azure IaaS VMs SMBIOS and can be read using platform BIOS commands.
     *
     * @return the vmId value.
     */
    String vmId();

    /**
     * Gets the extensionsTimeBudget property: Specifies the time alloted for all extensions to start. The time duration
     * should be between 15 minutes and 120 minutes (inclusive) and should be specified in ISO 8601 format. The default
     * value is 90 minutes (PT1H30M). &lt;br&gt;&lt;br&gt; Minimum api-version: 2020-06-01.
     *
     * @return the extensionsTimeBudget value.
     */
    String extensionsTimeBudget();

    /**
     * Gets the region of the resource.
     *
     * @return the region of the resource.
     */
    Region region();

    /**
     * Gets the name of the resource region.
     *
     * @return the name of the resource region.
     */
    String regionName();

    /**
     * Gets the inner com.azure.resourcemanager.compute.generated.fluent.models.VirtualMachineInner object.
     *
     * @return the inner object.
     */
    VirtualMachineInner innerModel();

    /** The entirety of the VirtualMachine definition. */
    interface Definition
        extends DefinitionStages.Blank,
            DefinitionStages.WithLocation,
            DefinitionStages.WithResourceGroup,
            DefinitionStages.WithCreate {
    }
    /** The VirtualMachine definition stages. */
    interface DefinitionStages {
        /** The first stage of the VirtualMachine definition. */
        interface Blank extends WithLocation {
        }
        /** The stage of the VirtualMachine definition allowing to specify location. */
        interface WithLocation {
            /**
             * Specifies the region for the resource.
             *
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithResourceGroup withRegion(Region location);

            /**
             * Specifies the region for the resource.
             *
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithResourceGroup withRegion(String location);
        }
        /** The stage of the VirtualMachine definition allowing to specify parent resource. */
        interface WithResourceGroup {
            /**
             * Specifies resourceGroupName.
             *
             * @param resourceGroupName The name of the resource group.
             * @return the next definition stage.
             */
            WithCreate withExistingResourceGroup(String resourceGroupName);
        }
        /**
         * The stage of the VirtualMachine definition which contains all the minimum required properties for the
         * resource to be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate
            extends DefinitionStages.WithTags,
                DefinitionStages.WithPlan,
                DefinitionStages.WithIdentity,
                DefinitionStages.WithZones,
                DefinitionStages.WithHardwareProfile,
                DefinitionStages.WithStorageProfile,
                DefinitionStages.WithAdditionalCapabilities,
                DefinitionStages.WithOsProfile,
                DefinitionStages.WithNetworkProfile,
                DefinitionStages.WithSecurityProfile,
                DefinitionStages.WithDiagnosticsProfile,
                DefinitionStages.WithAvailabilitySet,
                DefinitionStages.WithVirtualMachineScaleSet,
                DefinitionStages.WithProximityPlacementGroup,
                DefinitionStages.WithPriority,
                DefinitionStages.WithEvictionPolicy,
                DefinitionStages.WithBillingProfile,
                DefinitionStages.WithHost,
                DefinitionStages.WithHostGroup,
                DefinitionStages.WithLicenseType,
                DefinitionStages.WithExtensionsTimeBudget {
            /**
             * Executes the create request.
             *
             * @return the created resource.
             */
            VirtualMachine create();

            /**
             * Executes the create request.
             *
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            VirtualMachine create(Context context);
        }
        /** The stage of the VirtualMachine definition allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             *
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            WithCreate withTags(Map<String, String> tags);
        }
        /** The stage of the VirtualMachine definition allowing to specify plan. */
        interface WithPlan {
            /**
             * Specifies the plan property: Specifies information about the marketplace image used to create the virtual
             * machine. This element is only used for marketplace images. Before you can use a marketplace image from an
             * API, you must enable the image for programmatic use. In the Azure portal, find the marketplace image that
             * you want to use and then click **Want to deploy programmatically, Get Started -&gt;**. Enter any required
             * information and then click **Save**..
             *
             * @param plan Specifies information about the marketplace image used to create the virtual machine. This
             *     element is only used for marketplace images. Before you can use a marketplace image from an API, you
             *     must enable the image for programmatic use. In the Azure portal, find the marketplace image that you
             *     want to use and then click **Want to deploy programmatically, Get Started -&gt;**. Enter any required
             *     information and then click **Save**.
             * @return the next definition stage.
             */
            WithCreate withPlan(Plan plan);
        }
        /** The stage of the VirtualMachine definition allowing to specify identity. */
        interface WithIdentity {
            /**
             * Specifies the identity property: The identity of the virtual machine, if configured..
             *
             * @param identity The identity of the virtual machine, if configured.
             * @return the next definition stage.
             */
            WithCreate withIdentity(VirtualMachineIdentity identity);
        }
        /** The stage of the VirtualMachine definition allowing to specify zones. */
        interface WithZones {
            /**
             * Specifies the zones property: The virtual machine zones..
             *
             * @param zones The virtual machine zones.
             * @return the next definition stage.
             */
            WithCreate withZones(List<String> zones);
        }
        /** The stage of the VirtualMachine definition allowing to specify hardwareProfile. */
        interface WithHardwareProfile {
            /**
             * Specifies the hardwareProfile property: Specifies the hardware settings for the virtual machine..
             *
             * @param hardwareProfile Specifies the hardware settings for the virtual machine.
             * @return the next definition stage.
             */
            WithCreate withHardwareProfile(HardwareProfile hardwareProfile);
        }
        /** The stage of the VirtualMachine definition allowing to specify storageProfile. */
        interface WithStorageProfile {
            /**
             * Specifies the storageProfile property: Specifies the storage settings for the virtual machine disks..
             *
             * @param storageProfile Specifies the storage settings for the virtual machine disks.
             * @return the next definition stage.
             */
            WithCreate withStorageProfile(StorageProfile storageProfile);
        }
        /** The stage of the VirtualMachine definition allowing to specify additionalCapabilities. */
        interface WithAdditionalCapabilities {
            /**
             * Specifies the additionalCapabilities property: Specifies additional capabilities enabled or disabled on
             * the virtual machine..
             *
             * @param additionalCapabilities Specifies additional capabilities enabled or disabled on the virtual
             *     machine.
             * @return the next definition stage.
             */
            WithCreate withAdditionalCapabilities(AdditionalCapabilities additionalCapabilities);
        }
        /** The stage of the VirtualMachine definition allowing to specify osProfile. */
        interface WithOsProfile {
            /**
             * Specifies the osProfile property: Specifies the operating system settings used while creating the virtual
             * machine. Some of the settings cannot be changed once VM is provisioned..
             *
             * @param osProfile Specifies the operating system settings used while creating the virtual machine. Some of
             *     the settings cannot be changed once VM is provisioned.
             * @return the next definition stage.
             */
            WithCreate withOsProfile(OSProfile osProfile);
        }
        /** The stage of the VirtualMachine definition allowing to specify networkProfile. */
        interface WithNetworkProfile {
            /**
             * Specifies the networkProfile property: Specifies the network interfaces of the virtual machine..
             *
             * @param networkProfile Specifies the network interfaces of the virtual machine.
             * @return the next definition stage.
             */
            WithCreate withNetworkProfile(NetworkProfile networkProfile);
        }
        /** The stage of the VirtualMachine definition allowing to specify securityProfile. */
        interface WithSecurityProfile {
            /**
             * Specifies the securityProfile property: Specifies the Security related profile settings for the virtual
             * machine..
             *
             * @param securityProfile Specifies the Security related profile settings for the virtual machine.
             * @return the next definition stage.
             */
            WithCreate withSecurityProfile(SecurityProfile securityProfile);
        }
        /** The stage of the VirtualMachine definition allowing to specify diagnosticsProfile. */
        interface WithDiagnosticsProfile {
            /**
             * Specifies the diagnosticsProfile property: Specifies the boot diagnostic settings state.
             * &lt;br&gt;&lt;br&gt;Minimum api-version: 2015-06-15..
             *
             * @param diagnosticsProfile Specifies the boot diagnostic settings state. &lt;br&gt;&lt;br&gt;Minimum
             *     api-version: 2015-06-15.
             * @return the next definition stage.
             */
            WithCreate withDiagnosticsProfile(DiagnosticsProfile diagnosticsProfile);
        }
        /** The stage of the VirtualMachine definition allowing to specify availabilitySet. */
        interface WithAvailabilitySet {
            /**
             * Specifies the availabilitySet property: Specifies information about the availability set that the virtual
             * machine should be assigned to. Virtual machines specified in the same availability set are allocated to
             * different nodes to maximize availability. For more information about availability sets, see [Manage the
             * availability of virtual
             * machines](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-manage-availability?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json).
             * &lt;br&gt;&lt;br&gt; For more information on Azure planned maintenance, see [Planned maintenance for
             * virtual machines in
             * Azure](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-planned-maintenance?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json)
             * &lt;br&gt;&lt;br&gt; Currently, a VM can only be added to availability set at creation time. The
             * availability set to which the VM is being added should be under the same resource group as the
             * availability set resource. An existing VM cannot be added to an availability set.
             * &lt;br&gt;&lt;br&gt;This property cannot exist along with a non-null properties.virtualMachineScaleSet
             * reference..
             *
             * @param availabilitySet Specifies information about the availability set that the virtual machine should
             *     be assigned to. Virtual machines specified in the same availability set are allocated to different
             *     nodes to maximize availability. For more information about availability sets, see [Manage the
             *     availability of virtual
             *     machines](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-manage-availability?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json).
             *     &lt;br&gt;&lt;br&gt; For more information on Azure planned maintenance, see [Planned maintenance for
             *     virtual machines in
             *     Azure](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-planned-maintenance?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json)
             *     &lt;br&gt;&lt;br&gt; Currently, a VM can only be added to availability set at creation time. The
             *     availability set to which the VM is being added should be under the same resource group as the
             *     availability set resource. An existing VM cannot be added to an availability set.
             *     &lt;br&gt;&lt;br&gt;This property cannot exist along with a non-null
             *     properties.virtualMachineScaleSet reference.
             * @return the next definition stage.
             */
            WithCreate withAvailabilitySet(SubResource availabilitySet);
        }
        /** The stage of the VirtualMachine definition allowing to specify virtualMachineScaleSet. */
        interface WithVirtualMachineScaleSet {
            /**
             * Specifies the virtualMachineScaleSet property: Specifies information about the virtual machine scale set
             * that the virtual machine should be assigned to. Virtual machines specified in the same virtual machine
             * scale set are allocated to different nodes to maximize availability. Currently, a VM can only be added to
             * virtual machine scale set at creation time. An existing VM cannot be added to a virtual machine scale
             * set. &lt;br&gt;&lt;br&gt;This property cannot exist along with a non-null properties.availabilitySet
             * reference. &lt;br&gt;&lt;br&gt;Minimum api‐version: 2019‐03‐01.
             *
             * @param virtualMachineScaleSet Specifies information about the virtual machine scale set that the virtual
             *     machine should be assigned to. Virtual machines specified in the same virtual machine scale set are
             *     allocated to different nodes to maximize availability. Currently, a VM can only be added to virtual
             *     machine scale set at creation time. An existing VM cannot be added to a virtual machine scale set.
             *     &lt;br&gt;&lt;br&gt;This property cannot exist along with a non-null properties.availabilitySet
             *     reference. &lt;br&gt;&lt;br&gt;Minimum api‐version: 2019‐03‐01.
             * @return the next definition stage.
             */
            WithCreate withVirtualMachineScaleSet(SubResource virtualMachineScaleSet);
        }
        /** The stage of the VirtualMachine definition allowing to specify proximityPlacementGroup. */
        interface WithProximityPlacementGroup {
            /**
             * Specifies the proximityPlacementGroup property: Specifies information about the proximity placement group
             * that the virtual machine should be assigned to. &lt;br&gt;&lt;br&gt;Minimum api-version: 2018-04-01..
             *
             * @param proximityPlacementGroup Specifies information about the proximity placement group that the virtual
             *     machine should be assigned to. &lt;br&gt;&lt;br&gt;Minimum api-version: 2018-04-01.
             * @return the next definition stage.
             */
            WithCreate withProximityPlacementGroup(SubResource proximityPlacementGroup);
        }
        /** The stage of the VirtualMachine definition allowing to specify priority. */
        interface WithPriority {
            /**
             * Specifies the priority property: Specifies the priority for the virtual machine.
             * &lt;br&gt;&lt;br&gt;Minimum api-version: 2019-03-01.
             *
             * @param priority Specifies the priority for the virtual machine. &lt;br&gt;&lt;br&gt;Minimum api-version:
             *     2019-03-01.
             * @return the next definition stage.
             */
            WithCreate withPriority(VirtualMachinePriorityTypes priority);
        }
        /** The stage of the VirtualMachine definition allowing to specify evictionPolicy. */
        interface WithEvictionPolicy {
            /**
             * Specifies the evictionPolicy property: Specifies the eviction policy for the Azure Spot virtual machine
             * and Azure Spot scale set. &lt;br&gt;&lt;br&gt;For Azure Spot virtual machines, both 'Deallocate' and
             * 'Delete' are supported and the minimum api-version is 2019-03-01. &lt;br&gt;&lt;br&gt;For Azure Spot
             * scale sets, both 'Deallocate' and 'Delete' are supported and the minimum api-version is
             * 2017-10-30-preview..
             *
             * @param evictionPolicy Specifies the eviction policy for the Azure Spot virtual machine and Azure Spot
             *     scale set. &lt;br&gt;&lt;br&gt;For Azure Spot virtual machines, both 'Deallocate' and 'Delete' are
             *     supported and the minimum api-version is 2019-03-01. &lt;br&gt;&lt;br&gt;For Azure Spot scale sets,
             *     both 'Deallocate' and 'Delete' are supported and the minimum api-version is 2017-10-30-preview.
             * @return the next definition stage.
             */
            WithCreate withEvictionPolicy(VirtualMachineEvictionPolicyTypes evictionPolicy);
        }
        /** The stage of the VirtualMachine definition allowing to specify billingProfile. */
        interface WithBillingProfile {
            /**
             * Specifies the billingProfile property: Specifies the billing related details of a Azure Spot virtual
             * machine. &lt;br&gt;&lt;br&gt;Minimum api-version: 2019-03-01..
             *
             * @param billingProfile Specifies the billing related details of a Azure Spot virtual machine.
             *     &lt;br&gt;&lt;br&gt;Minimum api-version: 2019-03-01.
             * @return the next definition stage.
             */
            WithCreate withBillingProfile(BillingProfile billingProfile);
        }
        /** The stage of the VirtualMachine definition allowing to specify host. */
        interface WithHost {
            /**
             * Specifies the host property: Specifies information about the dedicated host that the virtual machine
             * resides in. &lt;br&gt;&lt;br&gt;Minimum api-version: 2018-10-01..
             *
             * @param host Specifies information about the dedicated host that the virtual machine resides in.
             *     &lt;br&gt;&lt;br&gt;Minimum api-version: 2018-10-01.
             * @return the next definition stage.
             */
            WithCreate withHost(SubResource host);
        }
        /** The stage of the VirtualMachine definition allowing to specify hostGroup. */
        interface WithHostGroup {
            /**
             * Specifies the hostGroup property: Specifies information about the dedicated host group that the virtual
             * machine resides in. &lt;br&gt;&lt;br&gt;Minimum api-version: 2020-06-01. &lt;br&gt;&lt;br&gt;NOTE: User
             * cannot specify both host and hostGroup properties..
             *
             * @param hostGroup Specifies information about the dedicated host group that the virtual machine resides
             *     in. &lt;br&gt;&lt;br&gt;Minimum api-version: 2020-06-01. &lt;br&gt;&lt;br&gt;NOTE: User cannot
             *     specify both host and hostGroup properties.
             * @return the next definition stage.
             */
            WithCreate withHostGroup(SubResource hostGroup);
        }
        /** The stage of the VirtualMachine definition allowing to specify licenseType. */
        interface WithLicenseType {
            /**
             * Specifies the licenseType property: Specifies that the image or disk that is being used was licensed
             * on-premises. &lt;br&gt;&lt;br&gt; Possible values for Windows Server operating system are:
             * &lt;br&gt;&lt;br&gt; Windows_Client &lt;br&gt;&lt;br&gt; Windows_Server &lt;br&gt;&lt;br&gt; Possible
             * values for Linux Server operating system are: &lt;br&gt;&lt;br&gt; RHEL_BYOS (for RHEL)
             * &lt;br&gt;&lt;br&gt; SLES_BYOS (for SUSE) &lt;br&gt;&lt;br&gt; For more information, see [Azure Hybrid
             * Use Benefit for Windows
             * Server](https://docs.microsoft.com/azure/virtual-machines/windows/hybrid-use-benefit-licensing)
             * &lt;br&gt;&lt;br&gt; [Azure Hybrid Use Benefit for Linux
             * Server](https://docs.microsoft.com/azure/virtual-machines/linux/azure-hybrid-benefit-linux)
             * &lt;br&gt;&lt;br&gt; Minimum api-version: 2015-06-15.
             *
             * @param licenseType Specifies that the image or disk that is being used was licensed on-premises.
             *     &lt;br&gt;&lt;br&gt; Possible values for Windows Server operating system are: &lt;br&gt;&lt;br&gt;
             *     Windows_Client &lt;br&gt;&lt;br&gt; Windows_Server &lt;br&gt;&lt;br&gt; Possible values for Linux
             *     Server operating system are: &lt;br&gt;&lt;br&gt; RHEL_BYOS (for RHEL) &lt;br&gt;&lt;br&gt; SLES_BYOS
             *     (for SUSE) &lt;br&gt;&lt;br&gt; For more information, see [Azure Hybrid Use Benefit for Windows
             *     Server](https://docs.microsoft.com/azure/virtual-machines/windows/hybrid-use-benefit-licensing)
             *     &lt;br&gt;&lt;br&gt; [Azure Hybrid Use Benefit for Linux
             *     Server](https://docs.microsoft.com/azure/virtual-machines/linux/azure-hybrid-benefit-linux)
             *     &lt;br&gt;&lt;br&gt; Minimum api-version: 2015-06-15.
             * @return the next definition stage.
             */
            WithCreate withLicenseType(String licenseType);
        }
        /** The stage of the VirtualMachine definition allowing to specify extensionsTimeBudget. */
        interface WithExtensionsTimeBudget {
            /**
             * Specifies the extensionsTimeBudget property: Specifies the time alloted for all extensions to start. The
             * time duration should be between 15 minutes and 120 minutes (inclusive) and should be specified in ISO
             * 8601 format. The default value is 90 minutes (PT1H30M). &lt;br&gt;&lt;br&gt; Minimum api-version:
             * 2020-06-01.
             *
             * @param extensionsTimeBudget Specifies the time alloted for all extensions to start. The time duration
             *     should be between 15 minutes and 120 minutes (inclusive) and should be specified in ISO 8601 format.
             *     The default value is 90 minutes (PT1H30M). &lt;br&gt;&lt;br&gt; Minimum api-version: 2020-06-01.
             * @return the next definition stage.
             */
            WithCreate withExtensionsTimeBudget(String extensionsTimeBudget);
        }
    }
    /**
     * Begins update for the VirtualMachine resource.
     *
     * @return the stage of resource update.
     */
    VirtualMachine.Update update();

    /** The template for VirtualMachine update. */
    interface Update
        extends UpdateStages.WithTags,
            UpdateStages.WithPlan,
            UpdateStages.WithIdentity,
            UpdateStages.WithZones,
            UpdateStages.WithHardwareProfile,
            UpdateStages.WithStorageProfile,
            UpdateStages.WithAdditionalCapabilities,
            UpdateStages.WithOsProfile,
            UpdateStages.WithNetworkProfile,
            UpdateStages.WithSecurityProfile,
            UpdateStages.WithDiagnosticsProfile,
            UpdateStages.WithAvailabilitySet,
            UpdateStages.WithVirtualMachineScaleSet,
            UpdateStages.WithProximityPlacementGroup,
            UpdateStages.WithPriority,
            UpdateStages.WithEvictionPolicy,
            UpdateStages.WithBillingProfile,
            UpdateStages.WithHost,
            UpdateStages.WithHostGroup,
            UpdateStages.WithLicenseType,
            UpdateStages.WithExtensionsTimeBudget {
        /**
         * Executes the update request.
         *
         * @return the updated resource.
         */
        VirtualMachine apply();

        /**
         * Executes the update request.
         *
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        VirtualMachine apply(Context context);
    }
    /** The VirtualMachine update stages. */
    interface UpdateStages {
        /** The stage of the VirtualMachine update allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags.
             *
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            Update withTags(Map<String, String> tags);
        }
        /** The stage of the VirtualMachine update allowing to specify plan. */
        interface WithPlan {
            /**
             * Specifies the plan property: Specifies information about the marketplace image used to create the virtual
             * machine. This element is only used for marketplace images. Before you can use a marketplace image from an
             * API, you must enable the image for programmatic use. In the Azure portal, find the marketplace image that
             * you want to use and then click **Want to deploy programmatically, Get Started -&gt;**. Enter any required
             * information and then click **Save**..
             *
             * @param plan Specifies information about the marketplace image used to create the virtual machine. This
             *     element is only used for marketplace images. Before you can use a marketplace image from an API, you
             *     must enable the image for programmatic use. In the Azure portal, find the marketplace image that you
             *     want to use and then click **Want to deploy programmatically, Get Started -&gt;**. Enter any required
             *     information and then click **Save**.
             * @return the next definition stage.
             */
            Update withPlan(Plan plan);
        }
        /** The stage of the VirtualMachine update allowing to specify identity. */
        interface WithIdentity {
            /**
             * Specifies the identity property: The identity of the virtual machine, if configured..
             *
             * @param identity The identity of the virtual machine, if configured.
             * @return the next definition stage.
             */
            Update withIdentity(VirtualMachineIdentity identity);
        }
        /** The stage of the VirtualMachine update allowing to specify zones. */
        interface WithZones {
            /**
             * Specifies the zones property: The virtual machine zones..
             *
             * @param zones The virtual machine zones.
             * @return the next definition stage.
             */
            Update withZones(List<String> zones);
        }
        /** The stage of the VirtualMachine update allowing to specify hardwareProfile. */
        interface WithHardwareProfile {
            /**
             * Specifies the hardwareProfile property: Specifies the hardware settings for the virtual machine..
             *
             * @param hardwareProfile Specifies the hardware settings for the virtual machine.
             * @return the next definition stage.
             */
            Update withHardwareProfile(HardwareProfile hardwareProfile);
        }
        /** The stage of the VirtualMachine update allowing to specify storageProfile. */
        interface WithStorageProfile {
            /**
             * Specifies the storageProfile property: Specifies the storage settings for the virtual machine disks..
             *
             * @param storageProfile Specifies the storage settings for the virtual machine disks.
             * @return the next definition stage.
             */
            Update withStorageProfile(StorageProfile storageProfile);
        }
        /** The stage of the VirtualMachine update allowing to specify additionalCapabilities. */
        interface WithAdditionalCapabilities {
            /**
             * Specifies the additionalCapabilities property: Specifies additional capabilities enabled or disabled on
             * the virtual machine..
             *
             * @param additionalCapabilities Specifies additional capabilities enabled or disabled on the virtual
             *     machine.
             * @return the next definition stage.
             */
            Update withAdditionalCapabilities(AdditionalCapabilities additionalCapabilities);
        }
        /** The stage of the VirtualMachine update allowing to specify osProfile. */
        interface WithOsProfile {
            /**
             * Specifies the osProfile property: Specifies the operating system settings used while creating the virtual
             * machine. Some of the settings cannot be changed once VM is provisioned..
             *
             * @param osProfile Specifies the operating system settings used while creating the virtual machine. Some of
             *     the settings cannot be changed once VM is provisioned.
             * @return the next definition stage.
             */
            Update withOsProfile(OSProfile osProfile);
        }
        /** The stage of the VirtualMachine update allowing to specify networkProfile. */
        interface WithNetworkProfile {
            /**
             * Specifies the networkProfile property: Specifies the network interfaces of the virtual machine..
             *
             * @param networkProfile Specifies the network interfaces of the virtual machine.
             * @return the next definition stage.
             */
            Update withNetworkProfile(NetworkProfile networkProfile);
        }
        /** The stage of the VirtualMachine update allowing to specify securityProfile. */
        interface WithSecurityProfile {
            /**
             * Specifies the securityProfile property: Specifies the Security related profile settings for the virtual
             * machine..
             *
             * @param securityProfile Specifies the Security related profile settings for the virtual machine.
             * @return the next definition stage.
             */
            Update withSecurityProfile(SecurityProfile securityProfile);
        }
        /** The stage of the VirtualMachine update allowing to specify diagnosticsProfile. */
        interface WithDiagnosticsProfile {
            /**
             * Specifies the diagnosticsProfile property: Specifies the boot diagnostic settings state.
             * &lt;br&gt;&lt;br&gt;Minimum api-version: 2015-06-15..
             *
             * @param diagnosticsProfile Specifies the boot diagnostic settings state. &lt;br&gt;&lt;br&gt;Minimum
             *     api-version: 2015-06-15.
             * @return the next definition stage.
             */
            Update withDiagnosticsProfile(DiagnosticsProfile diagnosticsProfile);
        }
        /** The stage of the VirtualMachine update allowing to specify availabilitySet. */
        interface WithAvailabilitySet {
            /**
             * Specifies the availabilitySet property: Specifies information about the availability set that the virtual
             * machine should be assigned to. Virtual machines specified in the same availability set are allocated to
             * different nodes to maximize availability. For more information about availability sets, see [Manage the
             * availability of virtual
             * machines](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-manage-availability?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json).
             * &lt;br&gt;&lt;br&gt; For more information on Azure planned maintenance, see [Planned maintenance for
             * virtual machines in
             * Azure](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-planned-maintenance?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json)
             * &lt;br&gt;&lt;br&gt; Currently, a VM can only be added to availability set at creation time. The
             * availability set to which the VM is being added should be under the same resource group as the
             * availability set resource. An existing VM cannot be added to an availability set.
             * &lt;br&gt;&lt;br&gt;This property cannot exist along with a non-null properties.virtualMachineScaleSet
             * reference..
             *
             * @param availabilitySet Specifies information about the availability set that the virtual machine should
             *     be assigned to. Virtual machines specified in the same availability set are allocated to different
             *     nodes to maximize availability. For more information about availability sets, see [Manage the
             *     availability of virtual
             *     machines](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-manage-availability?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json).
             *     &lt;br&gt;&lt;br&gt; For more information on Azure planned maintenance, see [Planned maintenance for
             *     virtual machines in
             *     Azure](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-planned-maintenance?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json)
             *     &lt;br&gt;&lt;br&gt; Currently, a VM can only be added to availability set at creation time. The
             *     availability set to which the VM is being added should be under the same resource group as the
             *     availability set resource. An existing VM cannot be added to an availability set.
             *     &lt;br&gt;&lt;br&gt;This property cannot exist along with a non-null
             *     properties.virtualMachineScaleSet reference.
             * @return the next definition stage.
             */
            Update withAvailabilitySet(SubResource availabilitySet);
        }
        /** The stage of the VirtualMachine update allowing to specify virtualMachineScaleSet. */
        interface WithVirtualMachineScaleSet {
            /**
             * Specifies the virtualMachineScaleSet property: Specifies information about the virtual machine scale set
             * that the virtual machine should be assigned to. Virtual machines specified in the same virtual machine
             * scale set are allocated to different nodes to maximize availability. Currently, a VM can only be added to
             * virtual machine scale set at creation time. An existing VM cannot be added to a virtual machine scale
             * set. &lt;br&gt;&lt;br&gt;This property cannot exist along with a non-null properties.availabilitySet
             * reference. &lt;br&gt;&lt;br&gt;Minimum api‐version: 2019‐03‐01.
             *
             * @param virtualMachineScaleSet Specifies information about the virtual machine scale set that the virtual
             *     machine should be assigned to. Virtual machines specified in the same virtual machine scale set are
             *     allocated to different nodes to maximize availability. Currently, a VM can only be added to virtual
             *     machine scale set at creation time. An existing VM cannot be added to a virtual machine scale set.
             *     &lt;br&gt;&lt;br&gt;This property cannot exist along with a non-null properties.availabilitySet
             *     reference. &lt;br&gt;&lt;br&gt;Minimum api‐version: 2019‐03‐01.
             * @return the next definition stage.
             */
            Update withVirtualMachineScaleSet(SubResource virtualMachineScaleSet);
        }
        /** The stage of the VirtualMachine update allowing to specify proximityPlacementGroup. */
        interface WithProximityPlacementGroup {
            /**
             * Specifies the proximityPlacementGroup property: Specifies information about the proximity placement group
             * that the virtual machine should be assigned to. &lt;br&gt;&lt;br&gt;Minimum api-version: 2018-04-01..
             *
             * @param proximityPlacementGroup Specifies information about the proximity placement group that the virtual
             *     machine should be assigned to. &lt;br&gt;&lt;br&gt;Minimum api-version: 2018-04-01.
             * @return the next definition stage.
             */
            Update withProximityPlacementGroup(SubResource proximityPlacementGroup);
        }
        /** The stage of the VirtualMachine update allowing to specify priority. */
        interface WithPriority {
            /**
             * Specifies the priority property: Specifies the priority for the virtual machine.
             * &lt;br&gt;&lt;br&gt;Minimum api-version: 2019-03-01.
             *
             * @param priority Specifies the priority for the virtual machine. &lt;br&gt;&lt;br&gt;Minimum api-version:
             *     2019-03-01.
             * @return the next definition stage.
             */
            Update withPriority(VirtualMachinePriorityTypes priority);
        }
        /** The stage of the VirtualMachine update allowing to specify evictionPolicy. */
        interface WithEvictionPolicy {
            /**
             * Specifies the evictionPolicy property: Specifies the eviction policy for the Azure Spot virtual machine
             * and Azure Spot scale set. &lt;br&gt;&lt;br&gt;For Azure Spot virtual machines, both 'Deallocate' and
             * 'Delete' are supported and the minimum api-version is 2019-03-01. &lt;br&gt;&lt;br&gt;For Azure Spot
             * scale sets, both 'Deallocate' and 'Delete' are supported and the minimum api-version is
             * 2017-10-30-preview..
             *
             * @param evictionPolicy Specifies the eviction policy for the Azure Spot virtual machine and Azure Spot
             *     scale set. &lt;br&gt;&lt;br&gt;For Azure Spot virtual machines, both 'Deallocate' and 'Delete' are
             *     supported and the minimum api-version is 2019-03-01. &lt;br&gt;&lt;br&gt;For Azure Spot scale sets,
             *     both 'Deallocate' and 'Delete' are supported and the minimum api-version is 2017-10-30-preview.
             * @return the next definition stage.
             */
            Update withEvictionPolicy(VirtualMachineEvictionPolicyTypes evictionPolicy);
        }
        /** The stage of the VirtualMachine update allowing to specify billingProfile. */
        interface WithBillingProfile {
            /**
             * Specifies the billingProfile property: Specifies the billing related details of a Azure Spot virtual
             * machine. &lt;br&gt;&lt;br&gt;Minimum api-version: 2019-03-01..
             *
             * @param billingProfile Specifies the billing related details of a Azure Spot virtual machine.
             *     &lt;br&gt;&lt;br&gt;Minimum api-version: 2019-03-01.
             * @return the next definition stage.
             */
            Update withBillingProfile(BillingProfile billingProfile);
        }
        /** The stage of the VirtualMachine update allowing to specify host. */
        interface WithHost {
            /**
             * Specifies the host property: Specifies information about the dedicated host that the virtual machine
             * resides in. &lt;br&gt;&lt;br&gt;Minimum api-version: 2018-10-01..
             *
             * @param host Specifies information about the dedicated host that the virtual machine resides in.
             *     &lt;br&gt;&lt;br&gt;Minimum api-version: 2018-10-01.
             * @return the next definition stage.
             */
            Update withHost(SubResource host);
        }
        /** The stage of the VirtualMachine update allowing to specify hostGroup. */
        interface WithHostGroup {
            /**
             * Specifies the hostGroup property: Specifies information about the dedicated host group that the virtual
             * machine resides in. &lt;br&gt;&lt;br&gt;Minimum api-version: 2020-06-01. &lt;br&gt;&lt;br&gt;NOTE: User
             * cannot specify both host and hostGroup properties..
             *
             * @param hostGroup Specifies information about the dedicated host group that the virtual machine resides
             *     in. &lt;br&gt;&lt;br&gt;Minimum api-version: 2020-06-01. &lt;br&gt;&lt;br&gt;NOTE: User cannot
             *     specify both host and hostGroup properties.
             * @return the next definition stage.
             */
            Update withHostGroup(SubResource hostGroup);
        }
        /** The stage of the VirtualMachine update allowing to specify licenseType. */
        interface WithLicenseType {
            /**
             * Specifies the licenseType property: Specifies that the image or disk that is being used was licensed
             * on-premises. &lt;br&gt;&lt;br&gt; Possible values for Windows Server operating system are:
             * &lt;br&gt;&lt;br&gt; Windows_Client &lt;br&gt;&lt;br&gt; Windows_Server &lt;br&gt;&lt;br&gt; Possible
             * values for Linux Server operating system are: &lt;br&gt;&lt;br&gt; RHEL_BYOS (for RHEL)
             * &lt;br&gt;&lt;br&gt; SLES_BYOS (for SUSE) &lt;br&gt;&lt;br&gt; For more information, see [Azure Hybrid
             * Use Benefit for Windows
             * Server](https://docs.microsoft.com/azure/virtual-machines/windows/hybrid-use-benefit-licensing)
             * &lt;br&gt;&lt;br&gt; [Azure Hybrid Use Benefit for Linux
             * Server](https://docs.microsoft.com/azure/virtual-machines/linux/azure-hybrid-benefit-linux)
             * &lt;br&gt;&lt;br&gt; Minimum api-version: 2015-06-15.
             *
             * @param licenseType Specifies that the image or disk that is being used was licensed on-premises.
             *     &lt;br&gt;&lt;br&gt; Possible values for Windows Server operating system are: &lt;br&gt;&lt;br&gt;
             *     Windows_Client &lt;br&gt;&lt;br&gt; Windows_Server &lt;br&gt;&lt;br&gt; Possible values for Linux
             *     Server operating system are: &lt;br&gt;&lt;br&gt; RHEL_BYOS (for RHEL) &lt;br&gt;&lt;br&gt; SLES_BYOS
             *     (for SUSE) &lt;br&gt;&lt;br&gt; For more information, see [Azure Hybrid Use Benefit for Windows
             *     Server](https://docs.microsoft.com/azure/virtual-machines/windows/hybrid-use-benefit-licensing)
             *     &lt;br&gt;&lt;br&gt; [Azure Hybrid Use Benefit for Linux
             *     Server](https://docs.microsoft.com/azure/virtual-machines/linux/azure-hybrid-benefit-linux)
             *     &lt;br&gt;&lt;br&gt; Minimum api-version: 2015-06-15.
             * @return the next definition stage.
             */
            Update withLicenseType(String licenseType);
        }
        /** The stage of the VirtualMachine update allowing to specify extensionsTimeBudget. */
        interface WithExtensionsTimeBudget {
            /**
             * Specifies the extensionsTimeBudget property: Specifies the time alloted for all extensions to start. The
             * time duration should be between 15 minutes and 120 minutes (inclusive) and should be specified in ISO
             * 8601 format. The default value is 90 minutes (PT1H30M). &lt;br&gt;&lt;br&gt; Minimum api-version:
             * 2020-06-01.
             *
             * @param extensionsTimeBudget Specifies the time alloted for all extensions to start. The time duration
             *     should be between 15 minutes and 120 minutes (inclusive) and should be specified in ISO 8601 format.
             *     The default value is 90 minutes (PT1H30M). &lt;br&gt;&lt;br&gt; Minimum api-version: 2020-06-01.
             * @return the next definition stage.
             */
            Update withExtensionsTimeBudget(String extensionsTimeBudget);
        }
    }
    /**
     * Refreshes the resource to sync with Azure.
     *
     * @return the refreshed resource.
     */
    VirtualMachine refresh();

    /**
     * Refreshes the resource to sync with Azure.
     *
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    VirtualMachine refresh(Context context);
}
