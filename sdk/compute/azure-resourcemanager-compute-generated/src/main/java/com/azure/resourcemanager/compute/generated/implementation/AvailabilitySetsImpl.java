// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.compute.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.resourcemanager.compute.generated.ComputeManager;
import com.azure.resourcemanager.compute.generated.fluent.AvailabilitySetsClient;
import com.azure.resourcemanager.compute.generated.fluent.models.AvailabilitySetInner;
import com.azure.resourcemanager.compute.generated.fluent.models.VirtualMachineSizeInner;
import com.azure.resourcemanager.compute.generated.models.AvailabilitySet;
import com.azure.resourcemanager.compute.generated.models.AvailabilitySets;
import com.azure.resourcemanager.compute.generated.models.VirtualMachineSize;

public final class AvailabilitySetsImpl implements AvailabilitySets {
    private final AvailabilitySetsClient innerClient;

    private final ComputeManager serviceManager;

    public AvailabilitySetsImpl(AvailabilitySetsClient innerClient, ComputeManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public void delete(String resourceGroupName, String availabilitySetName) {
        this.serviceClient().delete(resourceGroupName, availabilitySetName);
    }

    public Response<Void> deleteWithResponse(String resourceGroupName, String availabilitySetName, Context context) {
        return this.serviceClient().deleteWithResponse(resourceGroupName, availabilitySetName, context);
    }

    public AvailabilitySet getByResourceGroup(String resourceGroupName, String availabilitySetName) {
        AvailabilitySetInner inner = this.serviceClient().getByResourceGroup(resourceGroupName, availabilitySetName);
        if (inner != null) {
            return new AvailabilitySetImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<AvailabilitySet> getByResourceGroupWithResponse(
        String resourceGroupName, String availabilitySetName, Context context) {
        Response<AvailabilitySetInner> inner =
            this.serviceClient().getByResourceGroupWithResponse(resourceGroupName, availabilitySetName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new AvailabilitySetImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PagedIterable<AvailabilitySet> list() {
        PagedIterable<AvailabilitySetInner> inner = this.serviceClient().list();
        return inner.mapPage(inner1 -> new AvailabilitySetImpl(inner1, this.manager()));
    }

    public PagedIterable<AvailabilitySet> list(String expand, Context context) {
        PagedIterable<AvailabilitySetInner> inner = this.serviceClient().list(expand, context);
        return inner.mapPage(inner1 -> new AvailabilitySetImpl(inner1, this.manager()));
    }

    public PagedIterable<AvailabilitySet> listByResourceGroup(String resourceGroupName) {
        PagedIterable<AvailabilitySetInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName);
        return inner.mapPage(inner1 -> new AvailabilitySetImpl(inner1, this.manager()));
    }

    public PagedIterable<AvailabilitySet> listByResourceGroup(String resourceGroupName, Context context) {
        PagedIterable<AvailabilitySetInner> inner =
            this.serviceClient().listByResourceGroup(resourceGroupName, context);
        return inner.mapPage(inner1 -> new AvailabilitySetImpl(inner1, this.manager()));
    }

    public PagedIterable<VirtualMachineSize> listAvailableSizes(String resourceGroupName, String availabilitySetName) {
        PagedIterable<VirtualMachineSizeInner> inner =
            this.serviceClient().listAvailableSizes(resourceGroupName, availabilitySetName);
        return inner.mapPage(inner1 -> new VirtualMachineSizeImpl(inner1, this.manager()));
    }

    public PagedIterable<VirtualMachineSize> listAvailableSizes(
        String resourceGroupName, String availabilitySetName, Context context) {
        PagedIterable<VirtualMachineSizeInner> inner =
            this.serviceClient().listAvailableSizes(resourceGroupName, availabilitySetName, context);
        return inner.mapPage(inner1 -> new VirtualMachineSizeImpl(inner1, this.manager()));
    }

    private AvailabilitySetsClient serviceClient() {
        return this.innerClient;
    }

    private ComputeManager manager() {
        return this.serviceManager;
    }

    public AvailabilitySetImpl define(String name) {
        return new AvailabilitySetImpl(name, this.manager());
    }
}
