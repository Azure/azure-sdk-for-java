// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.compute.generated.implementation;

import com.azure.core.management.Region;
import com.azure.core.util.Context;
import com.azure.resourcemanager.compute.generated.ComputeManager;
import com.azure.resourcemanager.compute.generated.fluent.models.GalleryApplicationVersionInner;
import com.azure.resourcemanager.compute.generated.models.GalleryApplicationVersion;
import com.azure.resourcemanager.compute.generated.models.GalleryApplicationVersionPropertiesProvisioningState;
import com.azure.resourcemanager.compute.generated.models.GalleryApplicationVersionPublishingProfile;
import com.azure.resourcemanager.compute.generated.models.GalleryApplicationVersionUpdate;
import com.azure.resourcemanager.compute.generated.models.ReplicationStatus;
import com.azure.resourcemanager.compute.generated.models.ReplicationStatusTypes;
import java.util.Collections;
import java.util.Map;

public final class GalleryApplicationVersionImpl
    implements GalleryApplicationVersion, GalleryApplicationVersion.Definition, GalleryApplicationVersion.Update {
    private GalleryApplicationVersionInner innerObject;

    private final ComputeManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return null;
        }
    }

    public GalleryApplicationVersionPublishingProfile publishingProfile() {
        return this.innerModel().publishingProfile();
    }

    public GalleryApplicationVersionPropertiesProvisioningState provisioningState() {
        return this.innerModel().provisioningState();
    }

    public ReplicationStatus replicationStatus() {
        return this.innerModel().replicationStatus();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public GalleryApplicationVersionInner innerModel() {
        return this.innerObject;
    }

    private ComputeManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String galleryName;

    private String galleryApplicationName;

    private String galleryApplicationVersionName;

    private GalleryApplicationVersionUpdate updateGalleryApplicationVersion;

    public GalleryApplicationVersionImpl withExistingApplication(
        String resourceGroupName, String galleryName, String galleryApplicationName) {
        this.resourceGroupName = resourceGroupName;
        this.galleryName = galleryName;
        this.galleryApplicationName = galleryApplicationName;
        return this;
    }

    public GalleryApplicationVersion create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getGalleryApplicationVersions()
                .createOrUpdate(
                    resourceGroupName,
                    galleryName,
                    galleryApplicationName,
                    galleryApplicationVersionName,
                    innerObject,
                    Context.NONE);
        return this;
    }

    public GalleryApplicationVersion create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getGalleryApplicationVersions()
                .createOrUpdate(
                    resourceGroupName,
                    galleryName,
                    galleryApplicationName,
                    galleryApplicationVersionName,
                    innerObject,
                    context);
        return this;
    }

    public GalleryApplicationVersionImpl(String name, ComputeManager serviceManager) {
        this.innerObject = new GalleryApplicationVersionInner();
        this.serviceManager = serviceManager;
        this.galleryApplicationVersionName = name;
    }

    public GalleryApplicationVersionImpl update() {
        this.updateGalleryApplicationVersion = new GalleryApplicationVersionUpdate();
        return this;
    }

    public GalleryApplicationVersion apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getGalleryApplicationVersions()
                .update(
                    resourceGroupName,
                    galleryName,
                    galleryApplicationName,
                    galleryApplicationVersionName,
                    updateGalleryApplicationVersion,
                    Context.NONE);
        return this;
    }

    public GalleryApplicationVersion apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getGalleryApplicationVersions()
                .update(
                    resourceGroupName,
                    galleryName,
                    galleryApplicationName,
                    galleryApplicationVersionName,
                    updateGalleryApplicationVersion,
                    context);
        return this;
    }

    public GalleryApplicationVersionImpl(GalleryApplicationVersionInner innerObject, ComputeManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.galleryName = Utils.getValueFromIdByName(innerObject.id(), "galleries");
        this.galleryApplicationName = Utils.getValueFromIdByName(innerObject.id(), "applications");
        this.galleryApplicationVersionName = Utils.getValueFromIdByName(innerObject.id(), "versions");
    }

    public GalleryApplicationVersion refresh() {
        ReplicationStatusTypes refreshExpand = null;
        this.innerObject =
            serviceManager
                .serviceClient()
                .getGalleryApplicationVersions()
                .getWithResponse(
                    resourceGroupName,
                    galleryName,
                    galleryApplicationName,
                    galleryApplicationVersionName,
                    refreshExpand,
                    Context.NONE)
                .getValue();
        return this;
    }

    public GalleryApplicationVersion refresh(Context context) {
        ReplicationStatusTypes refreshExpand = null;
        this.innerObject =
            serviceManager
                .serviceClient()
                .getGalleryApplicationVersions()
                .getWithResponse(
                    resourceGroupName,
                    galleryName,
                    galleryApplicationName,
                    galleryApplicationVersionName,
                    refreshExpand,
                    context)
                .getValue();
        return this;
    }

    public GalleryApplicationVersionImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public GalleryApplicationVersionImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public GalleryApplicationVersionImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateGalleryApplicationVersion.withTags(tags);
            return this;
        }
    }

    public GalleryApplicationVersionImpl withPublishingProfile(
        GalleryApplicationVersionPublishingProfile publishingProfile) {
        if (isInCreateMode()) {
            this.innerModel().withPublishingProfile(publishingProfile);
            return this;
        } else {
            this.updateGalleryApplicationVersion.withPublishingProfile(publishingProfile);
            return this;
        }
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
