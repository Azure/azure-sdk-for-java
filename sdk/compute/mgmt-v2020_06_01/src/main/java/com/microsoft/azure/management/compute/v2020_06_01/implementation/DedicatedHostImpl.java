/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.compute.v2020_06_01.implementation;

import com.microsoft.azure.management.compute.v2020_06_01.DedicatedHost;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import com.microsoft.azure.management.compute.v2020_06_01.DedicatedHostUpdate;
import java.util.Map;
import java.util.List;
import org.joda.time.DateTime;
import com.microsoft.azure.management.compute.v2020_06_01.SubResourceReadOnly;
import com.microsoft.azure.management.compute.v2020_06_01.DedicatedHostLicenseTypes;
import com.microsoft.azure.management.compute.v2020_06_01.DedicatedHostInstanceView;
import com.microsoft.azure.management.compute.v2020_06_01.Sku;
import rx.functions.Func1;

class DedicatedHostImpl extends CreatableUpdatableImpl<DedicatedHost, DedicatedHostInner, DedicatedHostImpl> implements DedicatedHost, DedicatedHost.Definition, DedicatedHost.Update {
    private final ComputeManager manager;
    private String resourceGroupName;
    private String hostGroupName;
    private String hostName;
    private DedicatedHostUpdate updateParameter;

    DedicatedHostImpl(String name, ComputeManager manager) {
        super(name, new DedicatedHostInner());
        this.manager = manager;
        // Set resource name
        this.hostName = name;
        //
        this.updateParameter = new DedicatedHostUpdate();
    }

    DedicatedHostImpl(DedicatedHostInner inner, ComputeManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.hostName = inner.name();
        // set resource ancestor and positional variables
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.hostGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "hostGroups");
        this.hostName = IdParsingUtils.getValueFromIdByName(inner.id(), "hosts");
        //
        this.updateParameter = new DedicatedHostUpdate();
    }

    @Override
    public ComputeManager manager() {
        return this.manager;
    }

    @Override
    public Observable<DedicatedHost> createResourceAsync() {
        DedicatedHostsInner client = this.manager().inner().dedicatedHosts();
        return client.createOrUpdateAsync(this.resourceGroupName, this.hostGroupName, this.hostName, this.inner())
            .map(new Func1<DedicatedHostInner, DedicatedHostInner>() {
               @Override
               public DedicatedHostInner call(DedicatedHostInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<DedicatedHost> updateResourceAsync() {
        DedicatedHostsInner client = this.manager().inner().dedicatedHosts();
        return client.updateAsync(this.resourceGroupName, this.hostGroupName, this.hostName, this.updateParameter)
            .map(new Func1<DedicatedHostInner, DedicatedHostInner>() {
               @Override
               public DedicatedHostInner call(DedicatedHostInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<DedicatedHostInner> getInnerAsync() {
        DedicatedHostsInner client = this.manager().inner().dedicatedHosts();
        return client.getAsync(this.resourceGroupName, this.hostGroupName, this.hostName);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }

    private void resetCreateUpdateParameters() {
        this.updateParameter = new DedicatedHostUpdate();
    }

    @Override
    public Boolean autoReplaceOnFailure() {
        return this.inner().autoReplaceOnFailure();
    }

    @Override
    public String hostId() {
        return this.inner().hostId();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public DedicatedHostInstanceView instanceView() {
        return this.inner().instanceView();
    }

    @Override
    public DedicatedHostLicenseTypes licenseType() {
        return this.inner().licenseType();
    }

    @Override
    public String location() {
        return this.inner().location();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public Integer platformFaultDomain() {
        return this.inner().platformFaultDomain();
    }

    @Override
    public String provisioningState() {
        return this.inner().provisioningState();
    }

    @Override
    public DateTime provisioningTime() {
        return this.inner().provisioningTime();
    }

    @Override
    public Sku sku() {
        return this.inner().sku();
    }

    @Override
    public Map<String, String> tags() {
        return this.inner().getTags();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public List<SubResourceReadOnly> virtualMachines() {
        return this.inner().virtualMachines();
    }

    @Override
    public DedicatedHostImpl withExistingHostGroup(String resourceGroupName, String hostGroupName) {
        this.resourceGroupName = resourceGroupName;
        this.hostGroupName = hostGroupName;
        return this;
    }

    @Override
    public DedicatedHostImpl withLocation(String location) {
        this.inner().withLocation(location);
        return this;
    }

    @Override
    public DedicatedHostImpl withSku(Sku sku) {
        this.inner().withSku(sku);
        return this;
    }

    @Override
    public DedicatedHostImpl withAutoReplaceOnFailure(Boolean autoReplaceOnFailure) {
        if (isInCreateMode()) {
            this.inner().withAutoReplaceOnFailure(autoReplaceOnFailure);
        } else {
            this.updateParameter.withAutoReplaceOnFailure(autoReplaceOnFailure);
        }
        return this;
    }

    @Override
    public DedicatedHostImpl withLicenseType(DedicatedHostLicenseTypes licenseType) {
        if (isInCreateMode()) {
            this.inner().withLicenseType(licenseType);
        } else {
            this.updateParameter.withLicenseType(licenseType);
        }
        return this;
    }

    @Override
    public DedicatedHostImpl withPlatformFaultDomain(Integer platformFaultDomain) {
        if (isInCreateMode()) {
            this.inner().withPlatformFaultDomain(platformFaultDomain);
        } else {
            this.updateParameter.withPlatformFaultDomain(platformFaultDomain);
        }
        return this;
    }

    @Override
    public DedicatedHostImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.inner().withTags(tags);
        } else {
            this.updateParameter.withTags(tags);
        }
        return this;
    }

}
