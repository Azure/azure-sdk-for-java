/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.compute.v2020_06_01.implementation;

import com.microsoft.azure.management.compute.v2020_06_01.RunCommandDocument;
import com.microsoft.azure.arm.model.implementation.IndexableRefreshableWrapperImpl;
import rx.Observable;
import com.microsoft.azure.management.compute.v2020_06_01.OperatingSystemTypes;
import java.util.List;
import com.microsoft.azure.management.compute.v2020_06_01.RunCommandParameterDefinition;

class RunCommandDocumentImpl extends IndexableRefreshableWrapperImpl<RunCommandDocument, RunCommandDocumentInner> implements RunCommandDocument {
    private final ComputeManager manager;
    private String location;
    private String commandId;

    RunCommandDocumentImpl(RunCommandDocumentInner inner,  ComputeManager manager) {
        super(null, inner);
        this.manager = manager;
        // set resource ancestor and positional variables
        this.location = IdParsingUtils.getValueFromIdByName(inner.id(), "locations");
        this.commandId = IdParsingUtils.getValueFromIdByName(inner.id(), "runCommands");
    }

    @Override
    public ComputeManager manager() {
        return this.manager;
    }

    @Override
    protected Observable<RunCommandDocumentInner> getInnerAsync() {
        VirtualMachineRunCommandsInner client = this.manager().inner().virtualMachineRunCommands();
        return client.getAsync(this.location, this.commandId);
    }



    @Override
    public String description() {
        return this.inner().description();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String label() {
        return this.inner().label();
    }

    @Override
    public OperatingSystemTypes osType() {
        return this.inner().osType();
    }

    @Override
    public List<RunCommandParameterDefinition> parameters() {
        return this.inner().parameters();
    }

    @Override
    public String schema() {
        return this.inner().schema();
    }

    @Override
    public List<String> script() {
        return this.inner().script();
    }

}
