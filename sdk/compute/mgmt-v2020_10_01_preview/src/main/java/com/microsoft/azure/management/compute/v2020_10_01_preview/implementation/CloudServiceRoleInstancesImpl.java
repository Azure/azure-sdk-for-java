/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * abc
 */

package com.microsoft.azure.management.compute.v2020_10_01_preview.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.compute.v2020_10_01_preview.CloudServiceRoleInstances;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.management.compute.v2020_10_01_preview.RoleInstance;
import com.microsoft.azure.Page;
import rx.Completable;
import com.microsoft.azure.management.compute.v2020_10_01_preview.RoleInstanceInstanceView;

import java.io.InputStream;

class CloudServiceRoleInstancesImpl extends WrapperImpl<CloudServiceRoleInstancesInner> implements CloudServiceRoleInstances {
    private final ComputeManager manager;

    CloudServiceRoleInstancesImpl(ComputeManager manager) {
        super(manager.inner().cloudServiceRoleInstances());
        this.manager = manager;
    }

    public ComputeManager manager() {
        return this.manager;
    }

    private RoleInstanceImpl wrapRoleInstanceModel(RoleInstanceInner inner) {
        return  new RoleInstanceImpl(inner, manager());
    }

    private Observable<RoleInstanceInner> getRoleInstanceInnerUsingCloudServiceRoleInstancesInnerAsync(String id) {
        String resourceGroupName = IdParsingUtils.getValueFromIdByName(id, "resourceGroups");
        String cloudServiceName = IdParsingUtils.getValueFromIdByName(id, "cloudServices");
        String roleInstanceName = IdParsingUtils.getValueFromIdByName(id, "roleInstances");
        CloudServiceRoleInstancesInner client = this.inner();
        return client.getAsync(roleInstanceName, resourceGroupName, cloudServiceName);
    }

    @Override
    public Observable<RoleInstance> getAsync(String roleInstanceName, String resourceGroupName, String cloudServiceName) {
        CloudServiceRoleInstancesInner client = this.inner();
        return client.getAsync(roleInstanceName, resourceGroupName, cloudServiceName)
        .flatMap(new Func1<RoleInstanceInner, Observable<RoleInstance>>() {
            @Override
            public Observable<RoleInstance> call(RoleInstanceInner inner) {
                if (inner == null) {
                    return Observable.empty();
                } else {
                    return Observable.just((RoleInstance)wrapRoleInstanceModel(inner));
                }
            }
       });
    }

    @Override
    public Observable<RoleInstance> listAsync(final String resourceGroupName, final String cloudServiceName) {
        CloudServiceRoleInstancesInner client = this.inner();
        return client.listAsync(resourceGroupName, cloudServiceName)
        .flatMapIterable(new Func1<Page<RoleInstanceInner>, Iterable<RoleInstanceInner>>() {
            @Override
            public Iterable<RoleInstanceInner> call(Page<RoleInstanceInner> page) {
                return page.items();
            }
        })
        .map(new Func1<RoleInstanceInner, RoleInstance>() {
            @Override
            public RoleInstance call(RoleInstanceInner inner) {
                return wrapRoleInstanceModel(inner);
            }
        });
    }

    @Override
    public Completable deleteAsync(String roleInstanceName, String resourceGroupName, String cloudServiceName) {
        CloudServiceRoleInstancesInner client = this.inner();
        return client.deleteAsync(roleInstanceName, resourceGroupName, cloudServiceName).toCompletable();
    }

    @Override
    public Observable<RoleInstanceInstanceView> getInstanceViewAsync(String roleInstanceName, String resourceGroupName, String cloudServiceName) {
        CloudServiceRoleInstancesInner client = this.inner();
        return client.getInstanceViewAsync(roleInstanceName, resourceGroupName, cloudServiceName)
        .map(new Func1<RoleInstanceInstanceViewInner, RoleInstanceInstanceView>() {
            @Override
            public RoleInstanceInstanceView call(RoleInstanceInstanceViewInner inner) {
                return new RoleInstanceInstanceViewImpl(inner, manager());
            }
        });
    }

    @Override
    public Completable restartAsync(String roleInstanceName, String resourceGroupName, String cloudServiceName) {
        CloudServiceRoleInstancesInner client = this.inner();
        return client.restartAsync(roleInstanceName, resourceGroupName, cloudServiceName).toCompletable();
    }

    @Override
    public Completable reimageAsync(String roleInstanceName, String resourceGroupName, String cloudServiceName) {
        CloudServiceRoleInstancesInner client = this.inner();
        return client.reimageAsync(roleInstanceName, resourceGroupName, cloudServiceName).toCompletable();
    }

    @Override
    public Completable rebuildAsync(String roleInstanceName, String resourceGroupName, String cloudServiceName) {
        CloudServiceRoleInstancesInner client = this.inner();
        return client.rebuildAsync(roleInstanceName, resourceGroupName, cloudServiceName).toCompletable();
    }

    @Override
    public Observable<InputStream> getRemoteDesktopFileAsync(String roleInstanceName, String resourceGroupName, String cloudServiceName) {
        CloudServiceRoleInstancesInner client = this.inner();
        return client.getRemoteDesktopFileAsync(roleInstanceName, resourceGroupName, cloudServiceName)
    ;}

}
