/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * abc
 */

package com.microsoft.azure.management.compute.v2020_10_01_preview.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.compute.v2020_10_01_preview.VirtualMachineSizes;
import rx.Observable;
import rx.functions.Func1;
import java.util.List;
import com.microsoft.azure.management.compute.v2020_10_01_preview.LocationVirtualMachineSize;

class VirtualMachineSizesImpl extends WrapperImpl<VirtualMachineSizesInner> implements VirtualMachineSizes {
    private final ComputeManager manager;

    VirtualMachineSizesImpl(ComputeManager manager) {
        super(manager.inner().virtualMachineSizes());
        this.manager = manager;
    }

    public ComputeManager manager() {
        return this.manager;
    }

    private LocationVirtualMachineSizeImpl wrapLocationVirtualMachineSizeModel(VirtualMachineSizeInner inner) {
        return  new LocationVirtualMachineSizeImpl(inner, manager());
    }

    @Override
    public Observable<LocationVirtualMachineSize> listAsync(String location) {
        VirtualMachineSizesInner client = this.inner();
        return client.listAsync(location)
        .flatMap(new Func1<List<VirtualMachineSizeInner>, Observable<VirtualMachineSizeInner>>() {
            @Override
            public Observable<VirtualMachineSizeInner> call(List<VirtualMachineSizeInner> innerList) {
                return Observable.from(innerList);
            }
        })
        .map(new Func1<VirtualMachineSizeInner, LocationVirtualMachineSize>() {
            @Override
            public LocationVirtualMachineSize call(VirtualMachineSizeInner inner) {
                return wrapLocationVirtualMachineSizeModel(inner);
            }
        });
    }

}
