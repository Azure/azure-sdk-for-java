/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.compute.v2020_10_01_preview.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.compute.v2020_10_01_preview.DiskRestorePoints;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.compute.v2020_10_01_preview.DiskRestorePoint;

class DiskRestorePointsImpl extends WrapperImpl<DiskRestorePointsInner> implements DiskRestorePoints {
    private final ComputeManager manager;

    DiskRestorePointsImpl(ComputeManager manager) {
        super(manager.inner().diskRestorePoints());
        this.manager = manager;
    }

    public ComputeManager manager() {
        return this.manager;
    }

    private DiskRestorePointImpl wrapModel(DiskRestorePointInner inner) {
        return  new DiskRestorePointImpl(inner, manager());
    }

    @Override
    public Observable<DiskRestorePoint> listByRestorePointAsync(final String resourceGroupName, final String restorePointCollectionName, final String vmRestorePointName) {
        DiskRestorePointsInner client = this.inner();
        return client.listByRestorePointAsync(resourceGroupName, restorePointCollectionName, vmRestorePointName)
        .flatMapIterable(new Func1<Page<DiskRestorePointInner>, Iterable<DiskRestorePointInner>>() {
            @Override
            public Iterable<DiskRestorePointInner> call(Page<DiskRestorePointInner> page) {
                return page.items();
            }
        })
        .map(new Func1<DiskRestorePointInner, DiskRestorePoint>() {
            @Override
            public DiskRestorePoint call(DiskRestorePointInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public Observable<DiskRestorePoint> getAsync(String resourceGroupName, String restorePointCollectionName, String vmRestorePointName, String diskRestorePointName) {
        DiskRestorePointsInner client = this.inner();
        return client.getAsync(resourceGroupName, restorePointCollectionName, vmRestorePointName, diskRestorePointName)
        .flatMap(new Func1<DiskRestorePointInner, Observable<DiskRestorePoint>>() {
            @Override
            public Observable<DiskRestorePoint> call(DiskRestorePointInner inner) {
                if (inner == null) {
                    return Observable.empty();
                } else {
                    return Observable.just((DiskRestorePoint)wrapModel(inner));
                }
            }
       });
    }

}
