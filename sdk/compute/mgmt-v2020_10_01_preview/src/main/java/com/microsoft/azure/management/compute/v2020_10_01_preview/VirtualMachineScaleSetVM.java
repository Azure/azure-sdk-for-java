/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.compute.v2020_10_01_preview;

import com.microsoft.azure.arm.model.HasInner;
import com.microsoft.azure.management.compute.v2020_10_01_preview.implementation.VirtualMachineScaleSetVMInner;
import com.microsoft.azure.arm.model.Indexable;
import com.microsoft.azure.arm.model.Refreshable;
import com.microsoft.azure.arm.model.Updatable;
import com.microsoft.azure.arm.model.Appliable;
import com.microsoft.azure.arm.resources.models.HasManager;
import com.microsoft.azure.management.compute.v2020_10_01_preview.implementation.ComputeManager;
import java.util.Map;
import com.microsoft.azure.SubResource;
import java.util.List;

/**
 * Type representing VirtualMachineScaleSetVM.
 */
public interface VirtualMachineScaleSetVM extends HasInner<VirtualMachineScaleSetVMInner>, Indexable, Refreshable<VirtualMachineScaleSetVM>, Updatable<VirtualMachineScaleSetVM.Update>, HasManager<ComputeManager> {
    /**
     * @return the additionalCapabilities value.
     */
    AdditionalCapabilities additionalCapabilities();

    /**
     * @return the availabilitySet value.
     */
    SubResource availabilitySet();

    /**
     * @return the diagnosticsProfile value.
     */
    DiagnosticsProfile diagnosticsProfile();

    /**
     * @return the hardwareProfile value.
     */
    HardwareProfile hardwareProfile();

    /**
     * @return the id value.
     */
    String id();

    /**
     * @return the instanceId value.
     */
    String instanceId();

    /**
     * @return the instanceView value.
     */
    VirtualMachineScaleSetVMInstanceView instanceView();

    /**
     * @return the latestModelApplied value.
     */
    Boolean latestModelApplied();

    /**
     * @return the licenseType value.
     */
    String licenseType();

    /**
     * @return the location value.
     */
    String location();

    /**
     * @return the modelDefinitionApplied value.
     */
    String modelDefinitionApplied();

    /**
     * @return the name value.
     */
    String name();

    /**
     * @return the networkProfile value.
     */
    NetworkProfile networkProfile();

    /**
     * @return the networkProfileConfiguration value.
     */
    VirtualMachineScaleSetVMNetworkProfileConfiguration networkProfileConfiguration();

    /**
     * @return the osProfile value.
     */
    OSProfile osProfile();

    /**
     * @return the plan value.
     */
    Plan plan();

    /**
     * @return the protectionPolicy value.
     */
    VirtualMachineScaleSetVMProtectionPolicy protectionPolicy();

    /**
     * @return the provisioningState value.
     */
    String provisioningState();

    /**
     * @return the resources value.
     */
    List<VirtualMachineExtension> resources();

    /**
     * @return the securityProfile value.
     */
    SecurityProfile securityProfile();

    /**
     * @return the sku value.
     */
    Sku sku();

    /**
     * @return the storageProfile value.
     */
    StorageProfile storageProfile();

    /**
     * @return the tags value.
     */
    Map<String, String> tags();

    /**
     * @return the type value.
     */
    String type();

    /**
     * @return the vmId value.
     */
    String vmId();

    /**
     * @return the zones value.
     */
    List<String> zones();

    /**
     * The template for a VirtualMachineScaleSetVM update operation, containing all the settings that can be modified.
     */
    interface Update extends Appliable<VirtualMachineScaleSetVM>, UpdateStages.WithAdditionalCapabilities, UpdateStages.WithAvailabilitySet, UpdateStages.WithDiagnosticsProfile, UpdateStages.WithHardwareProfile, UpdateStages.WithLicenseType, UpdateStages.WithNetworkProfile, UpdateStages.WithNetworkProfileConfiguration, UpdateStages.WithOsProfile, UpdateStages.WithPlan, UpdateStages.WithProtectionPolicy, UpdateStages.WithSecurityProfile, UpdateStages.WithStorageProfile, UpdateStages.WithTags {
    }

    /**
     * Grouping of VirtualMachineScaleSetVM update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the virtualmachinescalesetvm update allowing to specify AdditionalCapabilities.
         */
        interface WithAdditionalCapabilities {
            /**
             * Specifies additionalCapabilities.
             * @param additionalCapabilities Specifies additional capabilities enabled or disabled on the virtual machine in the scale set. For instance: whether the virtual machine has the capability to support attaching managed data disks with UltraSSD_LRS storage account type
             * @return the next update stage
             */
            Update withAdditionalCapabilities(AdditionalCapabilities additionalCapabilities);
        }

        /**
         * The stage of the virtualmachinescalesetvm update allowing to specify AvailabilitySet.
         */
        interface WithAvailabilitySet {
            /**
             * Specifies availabilitySet.
             * @param availabilitySet Specifies information about the availability set that the virtual machine should be assigned to. Virtual machines specified in the same availability set are allocated to different nodes to maximize availability. For more information about availability sets, see [Manage the availability of virtual machines](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-manage-availability?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json). &lt;br&gt;&lt;br&gt; For more information on Azure planned maintenance, see [Planned maintenance for virtual machines in Azure](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-planned-maintenance?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json) &lt;br&gt;&lt;br&gt; Currently, a VM can only be added to availability set at creation time. An existing VM cannot be added to an availability set
             * @return the next update stage
             */
            Update withAvailabilitySet(SubResource availabilitySet);
        }

        /**
         * The stage of the virtualmachinescalesetvm update allowing to specify DiagnosticsProfile.
         */
        interface WithDiagnosticsProfile {
            /**
             * Specifies diagnosticsProfile.
             * @param diagnosticsProfile Specifies the boot diagnostic settings state. &lt;br&gt;&lt;br&gt;Minimum api-version: 2015-06-15
             * @return the next update stage
             */
            Update withDiagnosticsProfile(DiagnosticsProfile diagnosticsProfile);
        }

        /**
         * The stage of the virtualmachinescalesetvm update allowing to specify HardwareProfile.
         */
        interface WithHardwareProfile {
            /**
             * Specifies hardwareProfile.
             * @param hardwareProfile Specifies the hardware settings for the virtual machine
             * @return the next update stage
             */
            Update withHardwareProfile(HardwareProfile hardwareProfile);
        }

        /**
         * The stage of the virtualmachinescalesetvm update allowing to specify LicenseType.
         */
        interface WithLicenseType {
            /**
             * Specifies licenseType.
             * @param licenseType Specifies that the image or disk that is being used was licensed on-premises. &lt;br&gt;&lt;br&gt; Possible values for Windows Server operating system are: &lt;br&gt;&lt;br&gt; Windows_Client &lt;br&gt;&lt;br&gt; Windows_Server &lt;br&gt;&lt;br&gt; Possible values for Linux Server operating system are: &lt;br&gt;&lt;br&gt; RHEL_BYOS (for RHEL) &lt;br&gt;&lt;br&gt; SLES_BYOS (for SUSE) &lt;br&gt;&lt;br&gt; For more information, see [Azure Hybrid Use Benefit for Windows Server](https://docs.microsoft.com/azure/virtual-machines/windows/hybrid-use-benefit-licensing) &lt;br&gt;&lt;br&gt; [Azure Hybrid Use Benefit for Linux Server](https://docs.microsoft.com/azure/virtual-machines/linux/azure-hybrid-benefit-linux) &lt;br&gt;&lt;br&gt; Minimum api-version: 2015-06-15
             * @return the next update stage
             */
            Update withLicenseType(String licenseType);
        }

        /**
         * The stage of the virtualmachinescalesetvm update allowing to specify NetworkProfile.
         */
        interface WithNetworkProfile {
            /**
             * Specifies networkProfile.
             * @param networkProfile Specifies the network interfaces of the virtual machine
             * @return the next update stage
             */
            Update withNetworkProfile(NetworkProfile networkProfile);
        }

        /**
         * The stage of the virtualmachinescalesetvm update allowing to specify NetworkProfileConfiguration.
         */
        interface WithNetworkProfileConfiguration {
            /**
             * Specifies networkProfileConfiguration.
             * @param networkProfileConfiguration Specifies the network profile configuration of the virtual machine
             * @return the next update stage
             */
            Update withNetworkProfileConfiguration(VirtualMachineScaleSetVMNetworkProfileConfiguration networkProfileConfiguration);
        }

        /**
         * The stage of the virtualmachinescalesetvm update allowing to specify OsProfile.
         */
        interface WithOsProfile {
            /**
             * Specifies osProfile.
             * @param osProfile Specifies the operating system settings for the virtual machine
             * @return the next update stage
             */
            Update withOsProfile(OSProfile osProfile);
        }

        /**
         * The stage of the virtualmachinescalesetvm update allowing to specify Plan.
         */
        interface WithPlan {
            /**
             * Specifies plan.
             * @param plan Specifies information about the marketplace image used to create the virtual machine. This element is only used for marketplace images. Before you can use a marketplace image from an API, you must enable the image for programmatic use.  In the Azure portal, find the marketplace image that you want to use and then click **Want to deploy programmatically, Get Started -&gt;**. Enter any required information and then click **Save**
             * @return the next update stage
             */
            Update withPlan(Plan plan);
        }

        /**
         * The stage of the virtualmachinescalesetvm update allowing to specify ProtectionPolicy.
         */
        interface WithProtectionPolicy {
            /**
             * Specifies protectionPolicy.
             * @param protectionPolicy Specifies the protection policy of the virtual machine
             * @return the next update stage
             */
            Update withProtectionPolicy(VirtualMachineScaleSetVMProtectionPolicy protectionPolicy);
        }

        /**
         * The stage of the virtualmachinescalesetvm update allowing to specify SecurityProfile.
         */
        interface WithSecurityProfile {
            /**
             * Specifies securityProfile.
             * @param securityProfile Specifies the Security related profile settings for the virtual machine
             * @return the next update stage
             */
            Update withSecurityProfile(SecurityProfile securityProfile);
        }

        /**
         * The stage of the virtualmachinescalesetvm update allowing to specify StorageProfile.
         */
        interface WithStorageProfile {
            /**
             * Specifies storageProfile.
             * @param storageProfile Specifies the storage settings for the virtual machine disks
             * @return the next update stage
             */
            Update withStorageProfile(StorageProfile storageProfile);
        }

        /**
         * The stage of the virtualmachinescalesetvm update allowing to specify Tags.
         */
        interface WithTags {
            /**
             * Specifies tags.
             * @param tags Resource tags
             * @return the next update stage
             */
            Update withTags(Map<String, String> tags);
        }

    }
}
