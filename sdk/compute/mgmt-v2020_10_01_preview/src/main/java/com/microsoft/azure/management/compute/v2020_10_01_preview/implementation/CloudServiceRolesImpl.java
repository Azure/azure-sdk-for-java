/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.compute.v2020_10_01_preview.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.compute.v2020_10_01_preview.CloudServiceRoles;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.compute.v2020_10_01_preview.CloudServiceRole;

class CloudServiceRolesImpl extends WrapperImpl<CloudServiceRolesInner> implements CloudServiceRoles {
    private final ComputeManager manager;

    CloudServiceRolesImpl(ComputeManager manager) {
        super(manager.inner().cloudServiceRoles());
        this.manager = manager;
    }

    public ComputeManager manager() {
        return this.manager;
    }

    private CloudServiceRoleImpl wrapModel(CloudServiceRoleInner inner) {
        return  new CloudServiceRoleImpl(inner, manager());
    }

    @Override
    public Observable<CloudServiceRole> listAsync(final String resourceGroupName, final String cloudServiceName) {
        CloudServiceRolesInner client = this.inner();
        return client.listAsync(resourceGroupName, cloudServiceName)
        .flatMapIterable(new Func1<Page<CloudServiceRoleInner>, Iterable<CloudServiceRoleInner>>() {
            @Override
            public Iterable<CloudServiceRoleInner> call(Page<CloudServiceRoleInner> page) {
                return page.items();
            }
        })
        .map(new Func1<CloudServiceRoleInner, CloudServiceRole>() {
            @Override
            public CloudServiceRole call(CloudServiceRoleInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public Observable<CloudServiceRole> getAsync(String roleName, String resourceGroupName, String cloudServiceName) {
        CloudServiceRolesInner client = this.inner();
        return client.getAsync(roleName, resourceGroupName, cloudServiceName)
        .flatMap(new Func1<CloudServiceRoleInner, Observable<CloudServiceRole>>() {
            @Override
            public Observable<CloudServiceRole> call(CloudServiceRoleInner inner) {
                if (inner == null) {
                    return Observable.empty();
                } else {
                    return Observable.just((CloudServiceRole)wrapModel(inner));
                }
            }
       });
    }

}
