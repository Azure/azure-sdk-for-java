/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.compute.v2020_10_01_preview;

import com.microsoft.azure.arm.model.HasInner;
import com.microsoft.azure.management.compute.v2020_10_01_preview.implementation.VirtualMachineRunCommandInner;
import com.microsoft.azure.arm.model.Indexable;
import com.microsoft.azure.arm.model.Updatable;
import com.microsoft.azure.arm.model.Appliable;
import com.microsoft.azure.arm.model.Creatable;
import com.microsoft.azure.arm.resources.models.HasManager;
import com.microsoft.azure.management.compute.v2020_10_01_preview.implementation.ComputeManager;
import java.util.Map;
import java.util.List;

/**
 * Type representing LocationVirtualMachineRunCommand.
 */
public interface LocationVirtualMachineRunCommand extends HasInner<VirtualMachineRunCommandInner>, Indexable, Updatable<LocationVirtualMachineRunCommand.Update>, HasManager<ComputeManager> {
    /**
     * @return the asyncExecution value.
     */
    Boolean asyncExecution();

    /**
     * @return the errorBlobUri value.
     */
    String errorBlobUri();

    /**
     * @return the id value.
     */
    String id();

    /**
     * @return the instanceView value.
     */
    VirtualMachineRunCommandInstanceView instanceView();

    /**
     * @return the location value.
     */
    String location();

    /**
     * @return the name value.
     */
    String name();

    /**
     * @return the outputBlobUri value.
     */
    String outputBlobUri();

    /**
     * @return the parameters value.
     */
    List<RunCommandInputParameter> parameters();

    /**
     * @return the protectedParameters value.
     */
    List<RunCommandInputParameter> protectedParameters();

    /**
     * @return the provisioningState value.
     */
    String provisioningState();

    /**
     * @return the runAsPassword value.
     */
    String runAsPassword();

    /**
     * @return the runAsUser value.
     */
    String runAsUser();

    /**
     * @return the source value.
     */
    VirtualMachineRunCommandScriptSource source();

    /**
     * @return the tags value.
     */
    Map<String, String> tags();

    /**
     * @return the timeoutInSeconds value.
     */
    Integer timeoutInSeconds();

    /**
     * @return the type value.
     */
    String type();

    /**
     * The entirety of the LocationVirtualMachineRunCommand definition.
     */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithResourceGroup, DefinitionStages.WithLocation, DefinitionStages.WithCreate {
    }

    /**
     * Grouping of LocationVirtualMachineRunCommand definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of a LocationVirtualMachineRunCommand definition.
         */
        interface Blank extends WithResourceGroup {
        }

        /**
         * The stage of the locationvirtualmachineruncommand definition allowing to specify Location.
         */
        interface WithResourceGroup {
           /**
            * Specifies resourceGroupName, vmName.
            * @param resourceGroupName The name of the resource group
            * @param vmName The name of the virtual machine where the run command should be created or updated
            * @return the next definition stage
            */
            WithLocation withExistingResourceGroup(String resourceGroupName, String vmName);
        }

        /**
         * The stage of the locationvirtualmachineruncommand definition allowing to specify Location.
         */
        interface WithLocation {
           /**
            * Specifies location.
            * @param location Resource location
            * @return the next definition stage
            */
            WithCreate withLocation(String location);
        }

        /**
         * The stage of the locationvirtualmachineruncommand definition allowing to specify AsyncExecution.
         */
        interface WithAsyncExecution {
            /**
             * Specifies asyncExecution.
             * @param asyncExecution Optional. If set to true, provisioning will complete as soon as the script starts and will not wait for script to complete
             * @return the next definition stage
             */
            WithCreate withAsyncExecution(Boolean asyncExecution);
        }

        /**
         * The stage of the locationvirtualmachineruncommand definition allowing to specify ErrorBlobUri.
         */
        interface WithErrorBlobUri {
            /**
             * Specifies errorBlobUri.
             * @param errorBlobUri Specifies the Azure storage blob where script error stream will be uploaded
             * @return the next definition stage
             */
            WithCreate withErrorBlobUri(String errorBlobUri);
        }

        /**
         * The stage of the locationvirtualmachineruncommand definition allowing to specify OutputBlobUri.
         */
        interface WithOutputBlobUri {
            /**
             * Specifies outputBlobUri.
             * @param outputBlobUri Specifies the Azure storage blob where script output stream will be uploaded
             * @return the next definition stage
             */
            WithCreate withOutputBlobUri(String outputBlobUri);
        }

        /**
         * The stage of the locationvirtualmachineruncommand definition allowing to specify Parameters.
         */
        interface WithParameters {
            /**
             * Specifies parameters.
             * @param parameters The parameters used by the script
             * @return the next definition stage
             */
            WithCreate withParameters(List<RunCommandInputParameter> parameters);
        }

        /**
         * The stage of the locationvirtualmachineruncommand definition allowing to specify ProtectedParameters.
         */
        interface WithProtectedParameters {
            /**
             * Specifies protectedParameters.
             * @param protectedParameters The parameters used by the script
             * @return the next definition stage
             */
            WithCreate withProtectedParameters(List<RunCommandInputParameter> protectedParameters);
        }

        /**
         * The stage of the locationvirtualmachineruncommand definition allowing to specify RunAsPassword.
         */
        interface WithRunAsPassword {
            /**
             * Specifies runAsPassword.
             * @param runAsPassword Specifies the user account password on the VM when executing the run command
             * @return the next definition stage
             */
            WithCreate withRunAsPassword(String runAsPassword);
        }

        /**
         * The stage of the locationvirtualmachineruncommand definition allowing to specify RunAsUser.
         */
        interface WithRunAsUser {
            /**
             * Specifies runAsUser.
             * @param runAsUser Specifies the user account on the VM when executing the run command
             * @return the next definition stage
             */
            WithCreate withRunAsUser(String runAsUser);
        }

        /**
         * The stage of the locationvirtualmachineruncommand definition allowing to specify Source.
         */
        interface WithSource {
            /**
             * Specifies source.
             * @param source The source of the run command script
             * @return the next definition stage
             */
            WithCreate withSource(VirtualMachineRunCommandScriptSource source);
        }

        /**
         * The stage of the locationvirtualmachineruncommand definition allowing to specify Tags.
         */
        interface WithTags {
            /**
             * Specifies tags.
             * @param tags Resource tags
             * @return the next definition stage
             */
            WithCreate withTags(Map<String, String> tags);
        }

        /**
         * The stage of the locationvirtualmachineruncommand definition allowing to specify TimeoutInSeconds.
         */
        interface WithTimeoutInSeconds {
            /**
             * Specifies timeoutInSeconds.
             * @param timeoutInSeconds The timeout in seconds to execute the run command
             * @return the next definition stage
             */
            WithCreate withTimeoutInSeconds(Integer timeoutInSeconds);
        }

        /**
         * The stage of the definition which contains all the minimum required inputs for
         * the resource to be created (via {@link WithCreate#create()}), but also allows
         * for any other optional settings to be specified.
         */
        interface WithCreate extends Creatable<LocationVirtualMachineRunCommand>, DefinitionStages.WithAsyncExecution, DefinitionStages.WithErrorBlobUri, DefinitionStages.WithOutputBlobUri, DefinitionStages.WithParameters, DefinitionStages.WithProtectedParameters, DefinitionStages.WithRunAsPassword, DefinitionStages.WithRunAsUser, DefinitionStages.WithSource, DefinitionStages.WithTags, DefinitionStages.WithTimeoutInSeconds {
        }
    }
    /**
     * The template for a LocationVirtualMachineRunCommand update operation, containing all the settings that can be modified.
     */
    interface Update extends Appliable<LocationVirtualMachineRunCommand>, UpdateStages.WithAsyncExecution, UpdateStages.WithErrorBlobUri, UpdateStages.WithOutputBlobUri, UpdateStages.WithParameters, UpdateStages.WithProtectedParameters, UpdateStages.WithRunAsPassword, UpdateStages.WithRunAsUser, UpdateStages.WithSource, UpdateStages.WithTags, UpdateStages.WithTimeoutInSeconds {
    }

    /**
     * Grouping of LocationVirtualMachineRunCommand update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the locationvirtualmachineruncommand update allowing to specify AsyncExecution.
         */
        interface WithAsyncExecution {
            /**
             * Specifies asyncExecution.
             * @param asyncExecution Optional. If set to true, provisioning will complete as soon as the script starts and will not wait for script to complete
             * @return the next update stage
             */
            Update withAsyncExecution(Boolean asyncExecution);
        }

        /**
         * The stage of the locationvirtualmachineruncommand update allowing to specify ErrorBlobUri.
         */
        interface WithErrorBlobUri {
            /**
             * Specifies errorBlobUri.
             * @param errorBlobUri Specifies the Azure storage blob where script error stream will be uploaded
             * @return the next update stage
             */
            Update withErrorBlobUri(String errorBlobUri);
        }

        /**
         * The stage of the locationvirtualmachineruncommand update allowing to specify OutputBlobUri.
         */
        interface WithOutputBlobUri {
            /**
             * Specifies outputBlobUri.
             * @param outputBlobUri Specifies the Azure storage blob where script output stream will be uploaded
             * @return the next update stage
             */
            Update withOutputBlobUri(String outputBlobUri);
        }

        /**
         * The stage of the locationvirtualmachineruncommand update allowing to specify Parameters.
         */
        interface WithParameters {
            /**
             * Specifies parameters.
             * @param parameters The parameters used by the script
             * @return the next update stage
             */
            Update withParameters(List<RunCommandInputParameter> parameters);
        }

        /**
         * The stage of the locationvirtualmachineruncommand update allowing to specify ProtectedParameters.
         */
        interface WithProtectedParameters {
            /**
             * Specifies protectedParameters.
             * @param protectedParameters The parameters used by the script
             * @return the next update stage
             */
            Update withProtectedParameters(List<RunCommandInputParameter> protectedParameters);
        }

        /**
         * The stage of the locationvirtualmachineruncommand update allowing to specify RunAsPassword.
         */
        interface WithRunAsPassword {
            /**
             * Specifies runAsPassword.
             * @param runAsPassword Specifies the user account password on the VM when executing the run command
             * @return the next update stage
             */
            Update withRunAsPassword(String runAsPassword);
        }

        /**
         * The stage of the locationvirtualmachineruncommand update allowing to specify RunAsUser.
         */
        interface WithRunAsUser {
            /**
             * Specifies runAsUser.
             * @param runAsUser Specifies the user account on the VM when executing the run command
             * @return the next update stage
             */
            Update withRunAsUser(String runAsUser);
        }

        /**
         * The stage of the locationvirtualmachineruncommand update allowing to specify Source.
         */
        interface WithSource {
            /**
             * Specifies source.
             * @param source The source of the run command script
             * @return the next update stage
             */
            Update withSource(VirtualMachineRunCommandScriptSource source);
        }

        /**
         * The stage of the locationvirtualmachineruncommand update allowing to specify Tags.
         */
        interface WithTags {
            /**
             * Specifies tags.
             * @param tags Resource tags
             * @return the next update stage
             */
            Update withTags(Map<String, String> tags);
        }

        /**
         * The stage of the locationvirtualmachineruncommand update allowing to specify TimeoutInSeconds.
         */
        interface WithTimeoutInSeconds {
            /**
             * Specifies timeoutInSeconds.
             * @param timeoutInSeconds The timeout in seconds to execute the run command
             * @return the next update stage
             */
            Update withTimeoutInSeconds(Integer timeoutInSeconds);
        }

    }
}
