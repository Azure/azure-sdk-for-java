/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.compute.v2020_10_01_preview.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.CloudException;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.compute.v2020_10_01_preview.InstanceViewTypes;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.InputStream;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.Query;
import retrofit2.http.Streaming;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in CloudServiceRoleInstances.
 */
public class CloudServiceRoleInstancesInner {
    /** The Retrofit service to perform REST calls. */
    private CloudServiceRoleInstancesService service;
    /** The service client containing this operation class. */
    private ComputeManagementClientImpl client;

    /**
     * Initializes an instance of CloudServiceRoleInstancesInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public CloudServiceRoleInstancesInner(Retrofit retrofit, ComputeManagementClientImpl client) {
        this.service = retrofit.create(CloudServiceRoleInstancesService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for CloudServiceRoleInstances to be
     * used by Retrofit to perform actually REST calls.
     */
    interface CloudServiceRoleInstancesService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.compute.v2020_10_01_preview.CloudServiceRoleInstances delete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/cloudServices/{cloudServiceName}/roleInstances/{roleInstanceName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("roleInstanceName") String roleInstanceName, @Path("resourceGroupName") String resourceGroupName, @Path("cloudServiceName") String cloudServiceName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.compute.v2020_10_01_preview.CloudServiceRoleInstances beginDelete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/cloudServices/{cloudServiceName}/roleInstances/{roleInstanceName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> beginDelete(@Path("roleInstanceName") String roleInstanceName, @Path("resourceGroupName") String resourceGroupName, @Path("cloudServiceName") String cloudServiceName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.compute.v2020_10_01_preview.CloudServiceRoleInstances get" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/cloudServices/{cloudServiceName}/roleInstances/{roleInstanceName}")
        Observable<Response<ResponseBody>> get(@Path("roleInstanceName") String roleInstanceName, @Path("resourceGroupName") String resourceGroupName, @Path("cloudServiceName") String cloudServiceName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Query("$expand") InstanceViewTypes expand, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.compute.v2020_10_01_preview.CloudServiceRoleInstances getInstanceView" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/cloudServices/{cloudServiceName}/roleInstances/{roleInstanceName}/instanceView")
        Observable<Response<ResponseBody>> getInstanceView(@Path("roleInstanceName") String roleInstanceName, @Path("resourceGroupName") String resourceGroupName, @Path("cloudServiceName") String cloudServiceName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.compute.v2020_10_01_preview.CloudServiceRoleInstances list" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/cloudServices/{cloudServiceName}/roleInstances")
        Observable<Response<ResponseBody>> list(@Path("resourceGroupName") String resourceGroupName, @Path("cloudServiceName") String cloudServiceName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Query("$expand") InstanceViewTypes expand, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.compute.v2020_10_01_preview.CloudServiceRoleInstances restart" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/cloudServices/{cloudServiceName}/roleInstances/{roleInstanceName}/restart")
        Observable<Response<ResponseBody>> restart(@Path("roleInstanceName") String roleInstanceName, @Path("resourceGroupName") String resourceGroupName, @Path("cloudServiceName") String cloudServiceName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.compute.v2020_10_01_preview.CloudServiceRoleInstances beginRestart" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/cloudServices/{cloudServiceName}/roleInstances/{roleInstanceName}/restart")
        Observable<Response<ResponseBody>> beginRestart(@Path("roleInstanceName") String roleInstanceName, @Path("resourceGroupName") String resourceGroupName, @Path("cloudServiceName") String cloudServiceName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.compute.v2020_10_01_preview.CloudServiceRoleInstances reimage" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/cloudServices/{cloudServiceName}/roleInstances/{roleInstanceName}/reimage")
        Observable<Response<ResponseBody>> reimage(@Path("roleInstanceName") String roleInstanceName, @Path("resourceGroupName") String resourceGroupName, @Path("cloudServiceName") String cloudServiceName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.compute.v2020_10_01_preview.CloudServiceRoleInstances beginReimage" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/cloudServices/{cloudServiceName}/roleInstances/{roleInstanceName}/reimage")
        Observable<Response<ResponseBody>> beginReimage(@Path("roleInstanceName") String roleInstanceName, @Path("resourceGroupName") String resourceGroupName, @Path("cloudServiceName") String cloudServiceName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.compute.v2020_10_01_preview.CloudServiceRoleInstances rebuild" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/cloudServices/{cloudServiceName}/roleInstances/{roleInstanceName}/rebuild")
        Observable<Response<ResponseBody>> rebuild(@Path("roleInstanceName") String roleInstanceName, @Path("resourceGroupName") String resourceGroupName, @Path("cloudServiceName") String cloudServiceName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.compute.v2020_10_01_preview.CloudServiceRoleInstances beginRebuild" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/cloudServices/{cloudServiceName}/roleInstances/{roleInstanceName}/rebuild")
        Observable<Response<ResponseBody>> beginRebuild(@Path("roleInstanceName") String roleInstanceName, @Path("resourceGroupName") String resourceGroupName, @Path("cloudServiceName") String cloudServiceName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.compute.v2020_10_01_preview.CloudServiceRoleInstances getRemoteDesktopFile" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/cloudServices/{cloudServiceName}/roleInstances/{roleInstanceName}/remoteDesktopFile")
        @Streaming
        Observable<Response<ResponseBody>> getRemoteDesktopFile(@Path("roleInstanceName") String roleInstanceName, @Path("resourceGroupName") String resourceGroupName, @Path("cloudServiceName") String cloudServiceName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.compute.v2020_10_01_preview.CloudServiceRoleInstances listNext" })
        @GET
        Observable<Response<ResponseBody>> listNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Deletes a role instance from a cloud service.
     *
     * @param roleInstanceName Name of the role instance.
     * @param resourceGroupName the String value
     * @param cloudServiceName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String roleInstanceName, String resourceGroupName, String cloudServiceName) {
        deleteWithServiceResponseAsync(roleInstanceName, resourceGroupName, cloudServiceName).toBlocking().last().body();
    }

    /**
     * Deletes a role instance from a cloud service.
     *
     * @param roleInstanceName Name of the role instance.
     * @param resourceGroupName the String value
     * @param cloudServiceName the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String roleInstanceName, String resourceGroupName, String cloudServiceName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(roleInstanceName, resourceGroupName, cloudServiceName), serviceCallback);
    }

    /**
     * Deletes a role instance from a cloud service.
     *
     * @param roleInstanceName Name of the role instance.
     * @param resourceGroupName the String value
     * @param cloudServiceName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Void> deleteAsync(String roleInstanceName, String resourceGroupName, String cloudServiceName) {
        return deleteWithServiceResponseAsync(roleInstanceName, resourceGroupName, cloudServiceName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes a role instance from a cloud service.
     *
     * @param roleInstanceName Name of the role instance.
     * @param resourceGroupName the String value
     * @param cloudServiceName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String roleInstanceName, String resourceGroupName, String cloudServiceName) {
        if (roleInstanceName == null) {
            throw new IllegalArgumentException("Parameter roleInstanceName is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (cloudServiceName == null) {
            throw new IllegalArgumentException("Parameter cloudServiceName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        final String apiVersion = "2020-10-01-preview";
        Observable<Response<ResponseBody>> observable = service.delete(roleInstanceName, resourceGroupName, cloudServiceName, this.client.subscriptionId(), apiVersion, this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<Void>() { }.getType());
    }

    /**
     * Deletes a role instance from a cloud service.
     *
     * @param roleInstanceName Name of the role instance.
     * @param resourceGroupName the String value
     * @param cloudServiceName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void beginDelete(String roleInstanceName, String resourceGroupName, String cloudServiceName) {
        beginDeleteWithServiceResponseAsync(roleInstanceName, resourceGroupName, cloudServiceName).toBlocking().single().body();
    }

    /**
     * Deletes a role instance from a cloud service.
     *
     * @param roleInstanceName Name of the role instance.
     * @param resourceGroupName the String value
     * @param cloudServiceName the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> beginDeleteAsync(String roleInstanceName, String resourceGroupName, String cloudServiceName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(beginDeleteWithServiceResponseAsync(roleInstanceName, resourceGroupName, cloudServiceName), serviceCallback);
    }

    /**
     * Deletes a role instance from a cloud service.
     *
     * @param roleInstanceName Name of the role instance.
     * @param resourceGroupName the String value
     * @param cloudServiceName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> beginDeleteAsync(String roleInstanceName, String resourceGroupName, String cloudServiceName) {
        return beginDeleteWithServiceResponseAsync(roleInstanceName, resourceGroupName, cloudServiceName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes a role instance from a cloud service.
     *
     * @param roleInstanceName Name of the role instance.
     * @param resourceGroupName the String value
     * @param cloudServiceName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> beginDeleteWithServiceResponseAsync(String roleInstanceName, String resourceGroupName, String cloudServiceName) {
        if (roleInstanceName == null) {
            throw new IllegalArgumentException("Parameter roleInstanceName is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (cloudServiceName == null) {
            throw new IllegalArgumentException("Parameter cloudServiceName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        final String apiVersion = "2020-10-01-preview";
        return service.beginDelete(roleInstanceName, resourceGroupName, cloudServiceName, this.client.subscriptionId(), apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = beginDeleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> beginDeleteDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets a role instance from a cloud service.
     *
     * @param roleInstanceName Name of the role instance.
     * @param resourceGroupName the String value
     * @param cloudServiceName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the RoleInstanceInner object if successful.
     */
    public RoleInstanceInner get(String roleInstanceName, String resourceGroupName, String cloudServiceName) {
        return getWithServiceResponseAsync(roleInstanceName, resourceGroupName, cloudServiceName).toBlocking().single().body();
    }

    /**
     * Gets a role instance from a cloud service.
     *
     * @param roleInstanceName Name of the role instance.
     * @param resourceGroupName the String value
     * @param cloudServiceName the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<RoleInstanceInner> getAsync(String roleInstanceName, String resourceGroupName, String cloudServiceName, final ServiceCallback<RoleInstanceInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(roleInstanceName, resourceGroupName, cloudServiceName), serviceCallback);
    }

    /**
     * Gets a role instance from a cloud service.
     *
     * @param roleInstanceName Name of the role instance.
     * @param resourceGroupName the String value
     * @param cloudServiceName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RoleInstanceInner object
     */
    public Observable<RoleInstanceInner> getAsync(String roleInstanceName, String resourceGroupName, String cloudServiceName) {
        return getWithServiceResponseAsync(roleInstanceName, resourceGroupName, cloudServiceName).map(new Func1<ServiceResponse<RoleInstanceInner>, RoleInstanceInner>() {
            @Override
            public RoleInstanceInner call(ServiceResponse<RoleInstanceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets a role instance from a cloud service.
     *
     * @param roleInstanceName Name of the role instance.
     * @param resourceGroupName the String value
     * @param cloudServiceName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RoleInstanceInner object
     */
    public Observable<ServiceResponse<RoleInstanceInner>> getWithServiceResponseAsync(String roleInstanceName, String resourceGroupName, String cloudServiceName) {
        if (roleInstanceName == null) {
            throw new IllegalArgumentException("Parameter roleInstanceName is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (cloudServiceName == null) {
            throw new IllegalArgumentException("Parameter cloudServiceName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        final String apiVersion = "2020-10-01-preview";
        final InstanceViewTypes expand = null;
        return service.get(roleInstanceName, resourceGroupName, cloudServiceName, this.client.subscriptionId(), apiVersion, expand, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<RoleInstanceInner>>>() {
                @Override
                public Observable<ServiceResponse<RoleInstanceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<RoleInstanceInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Gets a role instance from a cloud service.
     *
     * @param roleInstanceName Name of the role instance.
     * @param resourceGroupName the String value
     * @param cloudServiceName the String value
     * @param expand The expand expression to apply to the operation. Possible values include: 'instanceView'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the RoleInstanceInner object if successful.
     */
    public RoleInstanceInner get(String roleInstanceName, String resourceGroupName, String cloudServiceName, InstanceViewTypes expand) {
        return getWithServiceResponseAsync(roleInstanceName, resourceGroupName, cloudServiceName, expand).toBlocking().single().body();
    }

    /**
     * Gets a role instance from a cloud service.
     *
     * @param roleInstanceName Name of the role instance.
     * @param resourceGroupName the String value
     * @param cloudServiceName the String value
     * @param expand The expand expression to apply to the operation. Possible values include: 'instanceView'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<RoleInstanceInner> getAsync(String roleInstanceName, String resourceGroupName, String cloudServiceName, InstanceViewTypes expand, final ServiceCallback<RoleInstanceInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(roleInstanceName, resourceGroupName, cloudServiceName, expand), serviceCallback);
    }

    /**
     * Gets a role instance from a cloud service.
     *
     * @param roleInstanceName Name of the role instance.
     * @param resourceGroupName the String value
     * @param cloudServiceName the String value
     * @param expand The expand expression to apply to the operation. Possible values include: 'instanceView'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RoleInstanceInner object
     */
    public Observable<RoleInstanceInner> getAsync(String roleInstanceName, String resourceGroupName, String cloudServiceName, InstanceViewTypes expand) {
        return getWithServiceResponseAsync(roleInstanceName, resourceGroupName, cloudServiceName, expand).map(new Func1<ServiceResponse<RoleInstanceInner>, RoleInstanceInner>() {
            @Override
            public RoleInstanceInner call(ServiceResponse<RoleInstanceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets a role instance from a cloud service.
     *
     * @param roleInstanceName Name of the role instance.
     * @param resourceGroupName the String value
     * @param cloudServiceName the String value
     * @param expand The expand expression to apply to the operation. Possible values include: 'instanceView'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RoleInstanceInner object
     */
    public Observable<ServiceResponse<RoleInstanceInner>> getWithServiceResponseAsync(String roleInstanceName, String resourceGroupName, String cloudServiceName, InstanceViewTypes expand) {
        if (roleInstanceName == null) {
            throw new IllegalArgumentException("Parameter roleInstanceName is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (cloudServiceName == null) {
            throw new IllegalArgumentException("Parameter cloudServiceName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        final String apiVersion = "2020-10-01-preview";
        return service.get(roleInstanceName, resourceGroupName, cloudServiceName, this.client.subscriptionId(), apiVersion, expand, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<RoleInstanceInner>>>() {
                @Override
                public Observable<ServiceResponse<RoleInstanceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<RoleInstanceInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<RoleInstanceInner> getDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<RoleInstanceInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<RoleInstanceInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Retrieves information about the run-time state of a role instance in a cloud service.
     *
     * @param roleInstanceName Name of the role instance.
     * @param resourceGroupName the String value
     * @param cloudServiceName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the RoleInstanceInstanceViewInner object if successful.
     */
    public RoleInstanceInstanceViewInner getInstanceView(String roleInstanceName, String resourceGroupName, String cloudServiceName) {
        return getInstanceViewWithServiceResponseAsync(roleInstanceName, resourceGroupName, cloudServiceName).toBlocking().single().body();
    }

    /**
     * Retrieves information about the run-time state of a role instance in a cloud service.
     *
     * @param roleInstanceName Name of the role instance.
     * @param resourceGroupName the String value
     * @param cloudServiceName the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<RoleInstanceInstanceViewInner> getInstanceViewAsync(String roleInstanceName, String resourceGroupName, String cloudServiceName, final ServiceCallback<RoleInstanceInstanceViewInner> serviceCallback) {
        return ServiceFuture.fromResponse(getInstanceViewWithServiceResponseAsync(roleInstanceName, resourceGroupName, cloudServiceName), serviceCallback);
    }

    /**
     * Retrieves information about the run-time state of a role instance in a cloud service.
     *
     * @param roleInstanceName Name of the role instance.
     * @param resourceGroupName the String value
     * @param cloudServiceName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RoleInstanceInstanceViewInner object
     */
    public Observable<RoleInstanceInstanceViewInner> getInstanceViewAsync(String roleInstanceName, String resourceGroupName, String cloudServiceName) {
        return getInstanceViewWithServiceResponseAsync(roleInstanceName, resourceGroupName, cloudServiceName).map(new Func1<ServiceResponse<RoleInstanceInstanceViewInner>, RoleInstanceInstanceViewInner>() {
            @Override
            public RoleInstanceInstanceViewInner call(ServiceResponse<RoleInstanceInstanceViewInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Retrieves information about the run-time state of a role instance in a cloud service.
     *
     * @param roleInstanceName Name of the role instance.
     * @param resourceGroupName the String value
     * @param cloudServiceName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RoleInstanceInstanceViewInner object
     */
    public Observable<ServiceResponse<RoleInstanceInstanceViewInner>> getInstanceViewWithServiceResponseAsync(String roleInstanceName, String resourceGroupName, String cloudServiceName) {
        if (roleInstanceName == null) {
            throw new IllegalArgumentException("Parameter roleInstanceName is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (cloudServiceName == null) {
            throw new IllegalArgumentException("Parameter cloudServiceName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        final String apiVersion = "2020-10-01-preview";
        return service.getInstanceView(roleInstanceName, resourceGroupName, cloudServiceName, this.client.subscriptionId(), apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<RoleInstanceInstanceViewInner>>>() {
                @Override
                public Observable<ServiceResponse<RoleInstanceInstanceViewInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<RoleInstanceInstanceViewInner> clientResponse = getInstanceViewDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<RoleInstanceInstanceViewInner> getInstanceViewDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<RoleInstanceInstanceViewInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<RoleInstanceInstanceViewInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets the list of all role instances in a cloud service. Use nextLink property in the response to get the next page of role instances. Do this till nextLink is null to fetch all the role instances.
     *
     * @param resourceGroupName the String value
     * @param cloudServiceName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;RoleInstanceInner&gt; object if successful.
     */
    public PagedList<RoleInstanceInner> list(final String resourceGroupName, final String cloudServiceName) {
        ServiceResponse<Page<RoleInstanceInner>> response = listSinglePageAsync(resourceGroupName, cloudServiceName).toBlocking().single();
        return new PagedList<RoleInstanceInner>(response.body()) {
            @Override
            public Page<RoleInstanceInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets the list of all role instances in a cloud service. Use nextLink property in the response to get the next page of role instances. Do this till nextLink is null to fetch all the role instances.
     *
     * @param resourceGroupName the String value
     * @param cloudServiceName the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<RoleInstanceInner>> listAsync(final String resourceGroupName, final String cloudServiceName, final ListOperationCallback<RoleInstanceInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSinglePageAsync(resourceGroupName, cloudServiceName),
            new Func1<String, Observable<ServiceResponse<Page<RoleInstanceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RoleInstanceInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets the list of all role instances in a cloud service. Use nextLink property in the response to get the next page of role instances. Do this till nextLink is null to fetch all the role instances.
     *
     * @param resourceGroupName the String value
     * @param cloudServiceName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;RoleInstanceInner&gt; object
     */
    public Observable<Page<RoleInstanceInner>> listAsync(final String resourceGroupName, final String cloudServiceName) {
        return listWithServiceResponseAsync(resourceGroupName, cloudServiceName)
            .map(new Func1<ServiceResponse<Page<RoleInstanceInner>>, Page<RoleInstanceInner>>() {
                @Override
                public Page<RoleInstanceInner> call(ServiceResponse<Page<RoleInstanceInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets the list of all role instances in a cloud service. Use nextLink property in the response to get the next page of role instances. Do this till nextLink is null to fetch all the role instances.
     *
     * @param resourceGroupName the String value
     * @param cloudServiceName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;RoleInstanceInner&gt; object
     */
    public Observable<ServiceResponse<Page<RoleInstanceInner>>> listWithServiceResponseAsync(final String resourceGroupName, final String cloudServiceName) {
        return listSinglePageAsync(resourceGroupName, cloudServiceName)
            .concatMap(new Func1<ServiceResponse<Page<RoleInstanceInner>>, Observable<ServiceResponse<Page<RoleInstanceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RoleInstanceInner>>> call(ServiceResponse<Page<RoleInstanceInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets the list of all role instances in a cloud service. Use nextLink property in the response to get the next page of role instances. Do this till nextLink is null to fetch all the role instances.
     *
     * @param resourceGroupName the String value
     * @param cloudServiceName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;RoleInstanceInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<RoleInstanceInner>>> listSinglePageAsync(final String resourceGroupName, final String cloudServiceName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (cloudServiceName == null) {
            throw new IllegalArgumentException("Parameter cloudServiceName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        final String apiVersion = "2020-10-01-preview";
        final InstanceViewTypes expand = null;
        return service.list(resourceGroupName, cloudServiceName, this.client.subscriptionId(), apiVersion, expand, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<RoleInstanceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RoleInstanceInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl1<RoleInstanceInner>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<RoleInstanceInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Gets the list of all role instances in a cloud service. Use nextLink property in the response to get the next page of role instances. Do this till nextLink is null to fetch all the role instances.
     *
     * @param resourceGroupName the String value
     * @param cloudServiceName the String value
     * @param expand The expand expression to apply to the operation. Possible values include: 'instanceView'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;RoleInstanceInner&gt; object if successful.
     */
    public PagedList<RoleInstanceInner> list(final String resourceGroupName, final String cloudServiceName, final InstanceViewTypes expand) {
        ServiceResponse<Page<RoleInstanceInner>> response = listSinglePageAsync(resourceGroupName, cloudServiceName, expand).toBlocking().single();
        return new PagedList<RoleInstanceInner>(response.body()) {
            @Override
            public Page<RoleInstanceInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets the list of all role instances in a cloud service. Use nextLink property in the response to get the next page of role instances. Do this till nextLink is null to fetch all the role instances.
     *
     * @param resourceGroupName the String value
     * @param cloudServiceName the String value
     * @param expand The expand expression to apply to the operation. Possible values include: 'instanceView'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<RoleInstanceInner>> listAsync(final String resourceGroupName, final String cloudServiceName, final InstanceViewTypes expand, final ListOperationCallback<RoleInstanceInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSinglePageAsync(resourceGroupName, cloudServiceName, expand),
            new Func1<String, Observable<ServiceResponse<Page<RoleInstanceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RoleInstanceInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets the list of all role instances in a cloud service. Use nextLink property in the response to get the next page of role instances. Do this till nextLink is null to fetch all the role instances.
     *
     * @param resourceGroupName the String value
     * @param cloudServiceName the String value
     * @param expand The expand expression to apply to the operation. Possible values include: 'instanceView'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;RoleInstanceInner&gt; object
     */
    public Observable<Page<RoleInstanceInner>> listAsync(final String resourceGroupName, final String cloudServiceName, final InstanceViewTypes expand) {
        return listWithServiceResponseAsync(resourceGroupName, cloudServiceName, expand)
            .map(new Func1<ServiceResponse<Page<RoleInstanceInner>>, Page<RoleInstanceInner>>() {
                @Override
                public Page<RoleInstanceInner> call(ServiceResponse<Page<RoleInstanceInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets the list of all role instances in a cloud service. Use nextLink property in the response to get the next page of role instances. Do this till nextLink is null to fetch all the role instances.
     *
     * @param resourceGroupName the String value
     * @param cloudServiceName the String value
     * @param expand The expand expression to apply to the operation. Possible values include: 'instanceView'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;RoleInstanceInner&gt; object
     */
    public Observable<ServiceResponse<Page<RoleInstanceInner>>> listWithServiceResponseAsync(final String resourceGroupName, final String cloudServiceName, final InstanceViewTypes expand) {
        return listSinglePageAsync(resourceGroupName, cloudServiceName, expand)
            .concatMap(new Func1<ServiceResponse<Page<RoleInstanceInner>>, Observable<ServiceResponse<Page<RoleInstanceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RoleInstanceInner>>> call(ServiceResponse<Page<RoleInstanceInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets the list of all role instances in a cloud service. Use nextLink property in the response to get the next page of role instances. Do this till nextLink is null to fetch all the role instances.
     *
    ServiceResponse<PageImpl1<RoleInstanceInner>> * @param resourceGroupName the String value
    ServiceResponse<PageImpl1<RoleInstanceInner>> * @param cloudServiceName the String value
    ServiceResponse<PageImpl1<RoleInstanceInner>> * @param expand The expand expression to apply to the operation. Possible values include: 'instanceView'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;RoleInstanceInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<RoleInstanceInner>>> listSinglePageAsync(final String resourceGroupName, final String cloudServiceName, final InstanceViewTypes expand) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (cloudServiceName == null) {
            throw new IllegalArgumentException("Parameter cloudServiceName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        final String apiVersion = "2020-10-01-preview";
        return service.list(resourceGroupName, cloudServiceName, this.client.subscriptionId(), apiVersion, expand, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<RoleInstanceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RoleInstanceInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl1<RoleInstanceInner>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<RoleInstanceInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl1<RoleInstanceInner>> listDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl1<RoleInstanceInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl1<RoleInstanceInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * The Reboot Role Instance asynchronous operation requests a reboot of a role instance in the cloud service.
     *
     * @param roleInstanceName Name of the role instance.
     * @param resourceGroupName the String value
     * @param cloudServiceName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void restart(String roleInstanceName, String resourceGroupName, String cloudServiceName) {
        restartWithServiceResponseAsync(roleInstanceName, resourceGroupName, cloudServiceName).toBlocking().last().body();
    }

    /**
     * The Reboot Role Instance asynchronous operation requests a reboot of a role instance in the cloud service.
     *
     * @param roleInstanceName Name of the role instance.
     * @param resourceGroupName the String value
     * @param cloudServiceName the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> restartAsync(String roleInstanceName, String resourceGroupName, String cloudServiceName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(restartWithServiceResponseAsync(roleInstanceName, resourceGroupName, cloudServiceName), serviceCallback);
    }

    /**
     * The Reboot Role Instance asynchronous operation requests a reboot of a role instance in the cloud service.
     *
     * @param roleInstanceName Name of the role instance.
     * @param resourceGroupName the String value
     * @param cloudServiceName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Void> restartAsync(String roleInstanceName, String resourceGroupName, String cloudServiceName) {
        return restartWithServiceResponseAsync(roleInstanceName, resourceGroupName, cloudServiceName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * The Reboot Role Instance asynchronous operation requests a reboot of a role instance in the cloud service.
     *
     * @param roleInstanceName Name of the role instance.
     * @param resourceGroupName the String value
     * @param cloudServiceName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<Void>> restartWithServiceResponseAsync(String roleInstanceName, String resourceGroupName, String cloudServiceName) {
        if (roleInstanceName == null) {
            throw new IllegalArgumentException("Parameter roleInstanceName is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (cloudServiceName == null) {
            throw new IllegalArgumentException("Parameter cloudServiceName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        final String apiVersion = "2020-10-01-preview";
        Observable<Response<ResponseBody>> observable = service.restart(roleInstanceName, resourceGroupName, cloudServiceName, this.client.subscriptionId(), apiVersion, this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<Void>() { }.getType());
    }

    /**
     * The Reboot Role Instance asynchronous operation requests a reboot of a role instance in the cloud service.
     *
     * @param roleInstanceName Name of the role instance.
     * @param resourceGroupName the String value
     * @param cloudServiceName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void beginRestart(String roleInstanceName, String resourceGroupName, String cloudServiceName) {
        beginRestartWithServiceResponseAsync(roleInstanceName, resourceGroupName, cloudServiceName).toBlocking().single().body();
    }

    /**
     * The Reboot Role Instance asynchronous operation requests a reboot of a role instance in the cloud service.
     *
     * @param roleInstanceName Name of the role instance.
     * @param resourceGroupName the String value
     * @param cloudServiceName the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> beginRestartAsync(String roleInstanceName, String resourceGroupName, String cloudServiceName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(beginRestartWithServiceResponseAsync(roleInstanceName, resourceGroupName, cloudServiceName), serviceCallback);
    }

    /**
     * The Reboot Role Instance asynchronous operation requests a reboot of a role instance in the cloud service.
     *
     * @param roleInstanceName Name of the role instance.
     * @param resourceGroupName the String value
     * @param cloudServiceName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> beginRestartAsync(String roleInstanceName, String resourceGroupName, String cloudServiceName) {
        return beginRestartWithServiceResponseAsync(roleInstanceName, resourceGroupName, cloudServiceName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * The Reboot Role Instance asynchronous operation requests a reboot of a role instance in the cloud service.
     *
     * @param roleInstanceName Name of the role instance.
     * @param resourceGroupName the String value
     * @param cloudServiceName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> beginRestartWithServiceResponseAsync(String roleInstanceName, String resourceGroupName, String cloudServiceName) {
        if (roleInstanceName == null) {
            throw new IllegalArgumentException("Parameter roleInstanceName is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (cloudServiceName == null) {
            throw new IllegalArgumentException("Parameter cloudServiceName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        final String apiVersion = "2020-10-01-preview";
        return service.beginRestart(roleInstanceName, resourceGroupName, cloudServiceName, this.client.subscriptionId(), apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = beginRestartDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> beginRestartDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * The Reimage Role Instance asynchronous operation reinstalls the operating system on instances of web roles or worker roles.
     *
     * @param roleInstanceName Name of the role instance.
     * @param resourceGroupName the String value
     * @param cloudServiceName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void reimage(String roleInstanceName, String resourceGroupName, String cloudServiceName) {
        reimageWithServiceResponseAsync(roleInstanceName, resourceGroupName, cloudServiceName).toBlocking().last().body();
    }

    /**
     * The Reimage Role Instance asynchronous operation reinstalls the operating system on instances of web roles or worker roles.
     *
     * @param roleInstanceName Name of the role instance.
     * @param resourceGroupName the String value
     * @param cloudServiceName the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> reimageAsync(String roleInstanceName, String resourceGroupName, String cloudServiceName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(reimageWithServiceResponseAsync(roleInstanceName, resourceGroupName, cloudServiceName), serviceCallback);
    }

    /**
     * The Reimage Role Instance asynchronous operation reinstalls the operating system on instances of web roles or worker roles.
     *
     * @param roleInstanceName Name of the role instance.
     * @param resourceGroupName the String value
     * @param cloudServiceName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Void> reimageAsync(String roleInstanceName, String resourceGroupName, String cloudServiceName) {
        return reimageWithServiceResponseAsync(roleInstanceName, resourceGroupName, cloudServiceName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * The Reimage Role Instance asynchronous operation reinstalls the operating system on instances of web roles or worker roles.
     *
     * @param roleInstanceName Name of the role instance.
     * @param resourceGroupName the String value
     * @param cloudServiceName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<Void>> reimageWithServiceResponseAsync(String roleInstanceName, String resourceGroupName, String cloudServiceName) {
        if (roleInstanceName == null) {
            throw new IllegalArgumentException("Parameter roleInstanceName is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (cloudServiceName == null) {
            throw new IllegalArgumentException("Parameter cloudServiceName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        final String apiVersion = "2020-10-01-preview";
        Observable<Response<ResponseBody>> observable = service.reimage(roleInstanceName, resourceGroupName, cloudServiceName, this.client.subscriptionId(), apiVersion, this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<Void>() { }.getType());
    }

    /**
     * The Reimage Role Instance asynchronous operation reinstalls the operating system on instances of web roles or worker roles.
     *
     * @param roleInstanceName Name of the role instance.
     * @param resourceGroupName the String value
     * @param cloudServiceName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void beginReimage(String roleInstanceName, String resourceGroupName, String cloudServiceName) {
        beginReimageWithServiceResponseAsync(roleInstanceName, resourceGroupName, cloudServiceName).toBlocking().single().body();
    }

    /**
     * The Reimage Role Instance asynchronous operation reinstalls the operating system on instances of web roles or worker roles.
     *
     * @param roleInstanceName Name of the role instance.
     * @param resourceGroupName the String value
     * @param cloudServiceName the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> beginReimageAsync(String roleInstanceName, String resourceGroupName, String cloudServiceName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(beginReimageWithServiceResponseAsync(roleInstanceName, resourceGroupName, cloudServiceName), serviceCallback);
    }

    /**
     * The Reimage Role Instance asynchronous operation reinstalls the operating system on instances of web roles or worker roles.
     *
     * @param roleInstanceName Name of the role instance.
     * @param resourceGroupName the String value
     * @param cloudServiceName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> beginReimageAsync(String roleInstanceName, String resourceGroupName, String cloudServiceName) {
        return beginReimageWithServiceResponseAsync(roleInstanceName, resourceGroupName, cloudServiceName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * The Reimage Role Instance asynchronous operation reinstalls the operating system on instances of web roles or worker roles.
     *
     * @param roleInstanceName Name of the role instance.
     * @param resourceGroupName the String value
     * @param cloudServiceName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> beginReimageWithServiceResponseAsync(String roleInstanceName, String resourceGroupName, String cloudServiceName) {
        if (roleInstanceName == null) {
            throw new IllegalArgumentException("Parameter roleInstanceName is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (cloudServiceName == null) {
            throw new IllegalArgumentException("Parameter cloudServiceName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        final String apiVersion = "2020-10-01-preview";
        return service.beginReimage(roleInstanceName, resourceGroupName, cloudServiceName, this.client.subscriptionId(), apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = beginReimageDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> beginReimageDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * The Rebuild Role Instance asynchronous operation reinstalls the operating system on instances of web roles or worker roles and initializes the storage resources that are used by them. If you do not want to initialize storage resources, you can use Reimage Role Instance.
     *
     * @param roleInstanceName Name of the role instance.
     * @param resourceGroupName the String value
     * @param cloudServiceName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void rebuild(String roleInstanceName, String resourceGroupName, String cloudServiceName) {
        rebuildWithServiceResponseAsync(roleInstanceName, resourceGroupName, cloudServiceName).toBlocking().last().body();
    }

    /**
     * The Rebuild Role Instance asynchronous operation reinstalls the operating system on instances of web roles or worker roles and initializes the storage resources that are used by them. If you do not want to initialize storage resources, you can use Reimage Role Instance.
     *
     * @param roleInstanceName Name of the role instance.
     * @param resourceGroupName the String value
     * @param cloudServiceName the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> rebuildAsync(String roleInstanceName, String resourceGroupName, String cloudServiceName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(rebuildWithServiceResponseAsync(roleInstanceName, resourceGroupName, cloudServiceName), serviceCallback);
    }

    /**
     * The Rebuild Role Instance asynchronous operation reinstalls the operating system on instances of web roles or worker roles and initializes the storage resources that are used by them. If you do not want to initialize storage resources, you can use Reimage Role Instance.
     *
     * @param roleInstanceName Name of the role instance.
     * @param resourceGroupName the String value
     * @param cloudServiceName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Void> rebuildAsync(String roleInstanceName, String resourceGroupName, String cloudServiceName) {
        return rebuildWithServiceResponseAsync(roleInstanceName, resourceGroupName, cloudServiceName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * The Rebuild Role Instance asynchronous operation reinstalls the operating system on instances of web roles or worker roles and initializes the storage resources that are used by them. If you do not want to initialize storage resources, you can use Reimage Role Instance.
     *
     * @param roleInstanceName Name of the role instance.
     * @param resourceGroupName the String value
     * @param cloudServiceName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<Void>> rebuildWithServiceResponseAsync(String roleInstanceName, String resourceGroupName, String cloudServiceName) {
        if (roleInstanceName == null) {
            throw new IllegalArgumentException("Parameter roleInstanceName is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (cloudServiceName == null) {
            throw new IllegalArgumentException("Parameter cloudServiceName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        final String apiVersion = "2020-10-01-preview";
        Observable<Response<ResponseBody>> observable = service.rebuild(roleInstanceName, resourceGroupName, cloudServiceName, this.client.subscriptionId(), apiVersion, this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<Void>() { }.getType());
    }

    /**
     * The Rebuild Role Instance asynchronous operation reinstalls the operating system on instances of web roles or worker roles and initializes the storage resources that are used by them. If you do not want to initialize storage resources, you can use Reimage Role Instance.
     *
     * @param roleInstanceName Name of the role instance.
     * @param resourceGroupName the String value
     * @param cloudServiceName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void beginRebuild(String roleInstanceName, String resourceGroupName, String cloudServiceName) {
        beginRebuildWithServiceResponseAsync(roleInstanceName, resourceGroupName, cloudServiceName).toBlocking().single().body();
    }

    /**
     * The Rebuild Role Instance asynchronous operation reinstalls the operating system on instances of web roles or worker roles and initializes the storage resources that are used by them. If you do not want to initialize storage resources, you can use Reimage Role Instance.
     *
     * @param roleInstanceName Name of the role instance.
     * @param resourceGroupName the String value
     * @param cloudServiceName the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> beginRebuildAsync(String roleInstanceName, String resourceGroupName, String cloudServiceName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(beginRebuildWithServiceResponseAsync(roleInstanceName, resourceGroupName, cloudServiceName), serviceCallback);
    }

    /**
     * The Rebuild Role Instance asynchronous operation reinstalls the operating system on instances of web roles or worker roles and initializes the storage resources that are used by them. If you do not want to initialize storage resources, you can use Reimage Role Instance.
     *
     * @param roleInstanceName Name of the role instance.
     * @param resourceGroupName the String value
     * @param cloudServiceName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> beginRebuildAsync(String roleInstanceName, String resourceGroupName, String cloudServiceName) {
        return beginRebuildWithServiceResponseAsync(roleInstanceName, resourceGroupName, cloudServiceName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * The Rebuild Role Instance asynchronous operation reinstalls the operating system on instances of web roles or worker roles and initializes the storage resources that are used by them. If you do not want to initialize storage resources, you can use Reimage Role Instance.
     *
     * @param roleInstanceName Name of the role instance.
     * @param resourceGroupName the String value
     * @param cloudServiceName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> beginRebuildWithServiceResponseAsync(String roleInstanceName, String resourceGroupName, String cloudServiceName) {
        if (roleInstanceName == null) {
            throw new IllegalArgumentException("Parameter roleInstanceName is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (cloudServiceName == null) {
            throw new IllegalArgumentException("Parameter cloudServiceName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        final String apiVersion = "2020-10-01-preview";
        return service.beginRebuild(roleInstanceName, resourceGroupName, cloudServiceName, this.client.subscriptionId(), apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = beginRebuildDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> beginRebuildDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets a remote desktop file for a role instance in a cloud service.
     *
     * @param roleInstanceName Name of the role instance.
     * @param resourceGroupName the String value
     * @param cloudServiceName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the InputStream object if successful.
     */
    public InputStream getRemoteDesktopFile(String roleInstanceName, String resourceGroupName, String cloudServiceName) {
        return getRemoteDesktopFileWithServiceResponseAsync(roleInstanceName, resourceGroupName, cloudServiceName).toBlocking().single().body();
    }

    /**
     * Gets a remote desktop file for a role instance in a cloud service.
     *
     * @param roleInstanceName Name of the role instance.
     * @param resourceGroupName the String value
     * @param cloudServiceName the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<InputStream> getRemoteDesktopFileAsync(String roleInstanceName, String resourceGroupName, String cloudServiceName, final ServiceCallback<InputStream> serviceCallback) {
        return ServiceFuture.fromResponse(getRemoteDesktopFileWithServiceResponseAsync(roleInstanceName, resourceGroupName, cloudServiceName), serviceCallback);
    }

    /**
     * Gets a remote desktop file for a role instance in a cloud service.
     *
     * @param roleInstanceName Name of the role instance.
     * @param resourceGroupName the String value
     * @param cloudServiceName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the InputStream object
     */
    public Observable<InputStream> getRemoteDesktopFileAsync(String roleInstanceName, String resourceGroupName, String cloudServiceName) {
        return getRemoteDesktopFileWithServiceResponseAsync(roleInstanceName, resourceGroupName, cloudServiceName).map(new Func1<ServiceResponse<InputStream>, InputStream>() {
            @Override
            public InputStream call(ServiceResponse<InputStream> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets a remote desktop file for a role instance in a cloud service.
     *
     * @param roleInstanceName Name of the role instance.
     * @param resourceGroupName the String value
     * @param cloudServiceName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the InputStream object
     */
    public Observable<ServiceResponse<InputStream>> getRemoteDesktopFileWithServiceResponseAsync(String roleInstanceName, String resourceGroupName, String cloudServiceName) {
        if (roleInstanceName == null) {
            throw new IllegalArgumentException("Parameter roleInstanceName is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (cloudServiceName == null) {
            throw new IllegalArgumentException("Parameter cloudServiceName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        final String apiVersion = "2020-10-01-preview";
        return service.getRemoteDesktopFile(roleInstanceName, resourceGroupName, cloudServiceName, this.client.subscriptionId(), apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<InputStream>>>() {
                @Override
                public Observable<ServiceResponse<InputStream>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<InputStream> clientResponse = getRemoteDesktopFileDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<InputStream> getRemoteDesktopFileDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<InputStream, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<InputStream>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets the list of all role instances in a cloud service. Use nextLink property in the response to get the next page of role instances. Do this till nextLink is null to fetch all the role instances.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;RoleInstanceInner&gt; object if successful.
     */
    public PagedList<RoleInstanceInner> listNext(final String nextPageLink) {
        ServiceResponse<Page<RoleInstanceInner>> response = listNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<RoleInstanceInner>(response.body()) {
            @Override
            public Page<RoleInstanceInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets the list of all role instances in a cloud service. Use nextLink property in the response to get the next page of role instances. Do this till nextLink is null to fetch all the role instances.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<RoleInstanceInner>> listNextAsync(final String nextPageLink, final ServiceFuture<List<RoleInstanceInner>> serviceFuture, final ListOperationCallback<RoleInstanceInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<RoleInstanceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RoleInstanceInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets the list of all role instances in a cloud service. Use nextLink property in the response to get the next page of role instances. Do this till nextLink is null to fetch all the role instances.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;RoleInstanceInner&gt; object
     */
    public Observable<Page<RoleInstanceInner>> listNextAsync(final String nextPageLink) {
        return listNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<RoleInstanceInner>>, Page<RoleInstanceInner>>() {
                @Override
                public Page<RoleInstanceInner> call(ServiceResponse<Page<RoleInstanceInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets the list of all role instances in a cloud service. Use nextLink property in the response to get the next page of role instances. Do this till nextLink is null to fetch all the role instances.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;RoleInstanceInner&gt; object
     */
    public Observable<ServiceResponse<Page<RoleInstanceInner>>> listNextWithServiceResponseAsync(final String nextPageLink) {
        return listNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<RoleInstanceInner>>, Observable<ServiceResponse<Page<RoleInstanceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RoleInstanceInner>>> call(ServiceResponse<Page<RoleInstanceInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets the list of all role instances in a cloud service. Use nextLink property in the response to get the next page of role instances. Do this till nextLink is null to fetch all the role instances.
     *
    ServiceResponse<PageImpl1<RoleInstanceInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;RoleInstanceInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<RoleInstanceInner>>> listNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<RoleInstanceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RoleInstanceInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl1<RoleInstanceInner>> result = listNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<RoleInstanceInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl1<RoleInstanceInner>> listNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl1<RoleInstanceInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl1<RoleInstanceInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
