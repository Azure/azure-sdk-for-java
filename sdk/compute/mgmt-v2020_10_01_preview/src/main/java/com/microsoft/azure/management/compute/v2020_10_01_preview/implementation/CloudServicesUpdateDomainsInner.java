/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.compute.v2020_10_01_preview.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.CloudException;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in CloudServicesUpdateDomains.
 */
public class CloudServicesUpdateDomainsInner {
    /** The Retrofit service to perform REST calls. */
    private CloudServicesUpdateDomainsService service;
    /** The service client containing this operation class. */
    private ComputeManagementClientImpl client;

    /**
     * Initializes an instance of CloudServicesUpdateDomainsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public CloudServicesUpdateDomainsInner(Retrofit retrofit, ComputeManagementClientImpl client) {
        this.service = retrofit.create(CloudServicesUpdateDomainsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for CloudServicesUpdateDomains to be
     * used by Retrofit to perform actually REST calls.
     */
    interface CloudServicesUpdateDomainsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.compute.v2020_10_01_preview.CloudServicesUpdateDomains walkUpdateDomain" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/cloudServices/{cloudServiceName}/updateDomains/{updateDomain}")
        Observable<Response<ResponseBody>> walkUpdateDomain(@Path("resourceGroupName") String resourceGroupName, @Path("cloudServiceName") String cloudServiceName, @Path("updateDomain") int updateDomain, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body UpdateDomainInner parameters, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.compute.v2020_10_01_preview.CloudServicesUpdateDomains beginWalkUpdateDomain" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/cloudServices/{cloudServiceName}/updateDomains/{updateDomain}")
        Observable<Response<ResponseBody>> beginWalkUpdateDomain(@Path("resourceGroupName") String resourceGroupName, @Path("cloudServiceName") String cloudServiceName, @Path("updateDomain") int updateDomain, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body UpdateDomainInner parameters, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.compute.v2020_10_01_preview.CloudServicesUpdateDomains getUpdateDomain" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/cloudServices/{cloudServiceName}/updateDomains/{updateDomain}")
        Observable<Response<ResponseBody>> getUpdateDomain(@Path("resourceGroupName") String resourceGroupName, @Path("cloudServiceName") String cloudServiceName, @Path("updateDomain") int updateDomain, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.compute.v2020_10_01_preview.CloudServicesUpdateDomains listUpdateDomains" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/cloudServices/{cloudServiceName}/updateDomains")
        Observable<Response<ResponseBody>> listUpdateDomains(@Path("resourceGroupName") String resourceGroupName, @Path("cloudServiceName") String cloudServiceName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.compute.v2020_10_01_preview.CloudServicesUpdateDomains listUpdateDomainsNext" })
        @GET
        Observable<Response<ResponseBody>> listUpdateDomainsNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Updates the role instances in the specified update domain.
     *
     * @param resourceGroupName Name of the resource group.
     * @param cloudServiceName Name of the cloud service.
     * @param updateDomain Specifies an integer value that identifies the update domain. Update domains are identified with a zero-based index: the first update domain has an ID of 0, the second has an ID of 1, and so on.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void walkUpdateDomain(String resourceGroupName, String cloudServiceName, int updateDomain) {
        walkUpdateDomainWithServiceResponseAsync(resourceGroupName, cloudServiceName, updateDomain).toBlocking().last().body();
    }

    /**
     * Updates the role instances in the specified update domain.
     *
     * @param resourceGroupName Name of the resource group.
     * @param cloudServiceName Name of the cloud service.
     * @param updateDomain Specifies an integer value that identifies the update domain. Update domains are identified with a zero-based index: the first update domain has an ID of 0, the second has an ID of 1, and so on.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> walkUpdateDomainAsync(String resourceGroupName, String cloudServiceName, int updateDomain, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(walkUpdateDomainWithServiceResponseAsync(resourceGroupName, cloudServiceName, updateDomain), serviceCallback);
    }

    /**
     * Updates the role instances in the specified update domain.
     *
     * @param resourceGroupName Name of the resource group.
     * @param cloudServiceName Name of the cloud service.
     * @param updateDomain Specifies an integer value that identifies the update domain. Update domains are identified with a zero-based index: the first update domain has an ID of 0, the second has an ID of 1, and so on.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Void> walkUpdateDomainAsync(String resourceGroupName, String cloudServiceName, int updateDomain) {
        return walkUpdateDomainWithServiceResponseAsync(resourceGroupName, cloudServiceName, updateDomain).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Updates the role instances in the specified update domain.
     *
     * @param resourceGroupName Name of the resource group.
     * @param cloudServiceName Name of the cloud service.
     * @param updateDomain Specifies an integer value that identifies the update domain. Update domains are identified with a zero-based index: the first update domain has an ID of 0, the second has an ID of 1, and so on.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<Void>> walkUpdateDomainWithServiceResponseAsync(String resourceGroupName, String cloudServiceName, int updateDomain) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (cloudServiceName == null) {
            throw new IllegalArgumentException("Parameter cloudServiceName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        final String apiVersion = "2020-10-01-preview";
        Observable<Response<ResponseBody>> observable = service.walkUpdateDomain(resourceGroupName, cloudServiceName, updateDomain, this.client.subscriptionId(), apiVersion, this.client.acceptLanguage(), new UpdateDomainInner(), this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<Void>() { }.getType());
    }

    /**
     * Updates the role instances in the specified update domain.
     *
     * @param resourceGroupName Name of the resource group.
     * @param cloudServiceName Name of the cloud service.
     * @param updateDomain Specifies an integer value that identifies the update domain. Update domains are identified with a zero-based index: the first update domain has an ID of 0, the second has an ID of 1, and so on.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void beginWalkUpdateDomain(String resourceGroupName, String cloudServiceName, int updateDomain) {
        beginWalkUpdateDomainWithServiceResponseAsync(resourceGroupName, cloudServiceName, updateDomain).toBlocking().single().body();
    }

    /**
     * Updates the role instances in the specified update domain.
     *
     * @param resourceGroupName Name of the resource group.
     * @param cloudServiceName Name of the cloud service.
     * @param updateDomain Specifies an integer value that identifies the update domain. Update domains are identified with a zero-based index: the first update domain has an ID of 0, the second has an ID of 1, and so on.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> beginWalkUpdateDomainAsync(String resourceGroupName, String cloudServiceName, int updateDomain, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(beginWalkUpdateDomainWithServiceResponseAsync(resourceGroupName, cloudServiceName, updateDomain), serviceCallback);
    }

    /**
     * Updates the role instances in the specified update domain.
     *
     * @param resourceGroupName Name of the resource group.
     * @param cloudServiceName Name of the cloud service.
     * @param updateDomain Specifies an integer value that identifies the update domain. Update domains are identified with a zero-based index: the first update domain has an ID of 0, the second has an ID of 1, and so on.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> beginWalkUpdateDomainAsync(String resourceGroupName, String cloudServiceName, int updateDomain) {
        return beginWalkUpdateDomainWithServiceResponseAsync(resourceGroupName, cloudServiceName, updateDomain).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Updates the role instances in the specified update domain.
     *
     * @param resourceGroupName Name of the resource group.
     * @param cloudServiceName Name of the cloud service.
     * @param updateDomain Specifies an integer value that identifies the update domain. Update domains are identified with a zero-based index: the first update domain has an ID of 0, the second has an ID of 1, and so on.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> beginWalkUpdateDomainWithServiceResponseAsync(String resourceGroupName, String cloudServiceName, int updateDomain) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (cloudServiceName == null) {
            throw new IllegalArgumentException("Parameter cloudServiceName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        final String apiVersion = "2020-10-01-preview";
        return service.beginWalkUpdateDomain(resourceGroupName, cloudServiceName, updateDomain, this.client.subscriptionId(), apiVersion, this.client.acceptLanguage(), new UpdateDomainInner(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = beginWalkUpdateDomainDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> beginWalkUpdateDomainDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets the specified update domain of a cloud service. Use nextLink property in the response to get the next page of update domains. Do this till nextLink is null to fetch all the update domains.
     *
     * @param resourceGroupName Name of the resource group.
     * @param cloudServiceName Name of the cloud service.
     * @param updateDomain Specifies an integer value that identifies the update domain. Update domains are identified with a zero-based index: the first update domain has an ID of 0, the second has an ID of 1, and so on.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the UpdateDomainInner object if successful.
     */
    public UpdateDomainInner getUpdateDomain(String resourceGroupName, String cloudServiceName, int updateDomain) {
        return getUpdateDomainWithServiceResponseAsync(resourceGroupName, cloudServiceName, updateDomain).toBlocking().single().body();
    }

    /**
     * Gets the specified update domain of a cloud service. Use nextLink property in the response to get the next page of update domains. Do this till nextLink is null to fetch all the update domains.
     *
     * @param resourceGroupName Name of the resource group.
     * @param cloudServiceName Name of the cloud service.
     * @param updateDomain Specifies an integer value that identifies the update domain. Update domains are identified with a zero-based index: the first update domain has an ID of 0, the second has an ID of 1, and so on.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<UpdateDomainInner> getUpdateDomainAsync(String resourceGroupName, String cloudServiceName, int updateDomain, final ServiceCallback<UpdateDomainInner> serviceCallback) {
        return ServiceFuture.fromResponse(getUpdateDomainWithServiceResponseAsync(resourceGroupName, cloudServiceName, updateDomain), serviceCallback);
    }

    /**
     * Gets the specified update domain of a cloud service. Use nextLink property in the response to get the next page of update domains. Do this till nextLink is null to fetch all the update domains.
     *
     * @param resourceGroupName Name of the resource group.
     * @param cloudServiceName Name of the cloud service.
     * @param updateDomain Specifies an integer value that identifies the update domain. Update domains are identified with a zero-based index: the first update domain has an ID of 0, the second has an ID of 1, and so on.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the UpdateDomainInner object
     */
    public Observable<UpdateDomainInner> getUpdateDomainAsync(String resourceGroupName, String cloudServiceName, int updateDomain) {
        return getUpdateDomainWithServiceResponseAsync(resourceGroupName, cloudServiceName, updateDomain).map(new Func1<ServiceResponse<UpdateDomainInner>, UpdateDomainInner>() {
            @Override
            public UpdateDomainInner call(ServiceResponse<UpdateDomainInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets the specified update domain of a cloud service. Use nextLink property in the response to get the next page of update domains. Do this till nextLink is null to fetch all the update domains.
     *
     * @param resourceGroupName Name of the resource group.
     * @param cloudServiceName Name of the cloud service.
     * @param updateDomain Specifies an integer value that identifies the update domain. Update domains are identified with a zero-based index: the first update domain has an ID of 0, the second has an ID of 1, and so on.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the UpdateDomainInner object
     */
    public Observable<ServiceResponse<UpdateDomainInner>> getUpdateDomainWithServiceResponseAsync(String resourceGroupName, String cloudServiceName, int updateDomain) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (cloudServiceName == null) {
            throw new IllegalArgumentException("Parameter cloudServiceName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        final String apiVersion = "2020-10-01-preview";
        return service.getUpdateDomain(resourceGroupName, cloudServiceName, updateDomain, this.client.subscriptionId(), apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<UpdateDomainInner>>>() {
                @Override
                public Observable<ServiceResponse<UpdateDomainInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<UpdateDomainInner> clientResponse = getUpdateDomainDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<UpdateDomainInner> getUpdateDomainDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<UpdateDomainInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<UpdateDomainInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets a list of all update domains in a cloud service.
     *
     * @param resourceGroupName Name of the resource group.
     * @param cloudServiceName Name of the cloud service.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;UpdateDomainInner&gt; object if successful.
     */
    public PagedList<UpdateDomainInner> listUpdateDomains(final String resourceGroupName, final String cloudServiceName) {
        ServiceResponse<Page<UpdateDomainInner>> response = listUpdateDomainsSinglePageAsync(resourceGroupName, cloudServiceName).toBlocking().single();
        return new PagedList<UpdateDomainInner>(response.body()) {
            @Override
            public Page<UpdateDomainInner> nextPage(String nextPageLink) {
                return listUpdateDomainsNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets a list of all update domains in a cloud service.
     *
     * @param resourceGroupName Name of the resource group.
     * @param cloudServiceName Name of the cloud service.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<UpdateDomainInner>> listUpdateDomainsAsync(final String resourceGroupName, final String cloudServiceName, final ListOperationCallback<UpdateDomainInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listUpdateDomainsSinglePageAsync(resourceGroupName, cloudServiceName),
            new Func1<String, Observable<ServiceResponse<Page<UpdateDomainInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<UpdateDomainInner>>> call(String nextPageLink) {
                    return listUpdateDomainsNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets a list of all update domains in a cloud service.
     *
     * @param resourceGroupName Name of the resource group.
     * @param cloudServiceName Name of the cloud service.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;UpdateDomainInner&gt; object
     */
    public Observable<Page<UpdateDomainInner>> listUpdateDomainsAsync(final String resourceGroupName, final String cloudServiceName) {
        return listUpdateDomainsWithServiceResponseAsync(resourceGroupName, cloudServiceName)
            .map(new Func1<ServiceResponse<Page<UpdateDomainInner>>, Page<UpdateDomainInner>>() {
                @Override
                public Page<UpdateDomainInner> call(ServiceResponse<Page<UpdateDomainInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets a list of all update domains in a cloud service.
     *
     * @param resourceGroupName Name of the resource group.
     * @param cloudServiceName Name of the cloud service.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;UpdateDomainInner&gt; object
     */
    public Observable<ServiceResponse<Page<UpdateDomainInner>>> listUpdateDomainsWithServiceResponseAsync(final String resourceGroupName, final String cloudServiceName) {
        return listUpdateDomainsSinglePageAsync(resourceGroupName, cloudServiceName)
            .concatMap(new Func1<ServiceResponse<Page<UpdateDomainInner>>, Observable<ServiceResponse<Page<UpdateDomainInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<UpdateDomainInner>>> call(ServiceResponse<Page<UpdateDomainInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listUpdateDomainsNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets a list of all update domains in a cloud service.
     *
    ServiceResponse<PageImpl1<UpdateDomainInner>> * @param resourceGroupName Name of the resource group.
    ServiceResponse<PageImpl1<UpdateDomainInner>> * @param cloudServiceName Name of the cloud service.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;UpdateDomainInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<UpdateDomainInner>>> listUpdateDomainsSinglePageAsync(final String resourceGroupName, final String cloudServiceName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (cloudServiceName == null) {
            throw new IllegalArgumentException("Parameter cloudServiceName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        final String apiVersion = "2020-10-01-preview";
        return service.listUpdateDomains(resourceGroupName, cloudServiceName, this.client.subscriptionId(), apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<UpdateDomainInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<UpdateDomainInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl1<UpdateDomainInner>> result = listUpdateDomainsDelegate(response);
                        return Observable.just(new ServiceResponse<Page<UpdateDomainInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl1<UpdateDomainInner>> listUpdateDomainsDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl1<UpdateDomainInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl1<UpdateDomainInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets a list of all update domains in a cloud service.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;UpdateDomainInner&gt; object if successful.
     */
    public PagedList<UpdateDomainInner> listUpdateDomainsNext(final String nextPageLink) {
        ServiceResponse<Page<UpdateDomainInner>> response = listUpdateDomainsNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<UpdateDomainInner>(response.body()) {
            @Override
            public Page<UpdateDomainInner> nextPage(String nextPageLink) {
                return listUpdateDomainsNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets a list of all update domains in a cloud service.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<UpdateDomainInner>> listUpdateDomainsNextAsync(final String nextPageLink, final ServiceFuture<List<UpdateDomainInner>> serviceFuture, final ListOperationCallback<UpdateDomainInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listUpdateDomainsNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<UpdateDomainInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<UpdateDomainInner>>> call(String nextPageLink) {
                    return listUpdateDomainsNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets a list of all update domains in a cloud service.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;UpdateDomainInner&gt; object
     */
    public Observable<Page<UpdateDomainInner>> listUpdateDomainsNextAsync(final String nextPageLink) {
        return listUpdateDomainsNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<UpdateDomainInner>>, Page<UpdateDomainInner>>() {
                @Override
                public Page<UpdateDomainInner> call(ServiceResponse<Page<UpdateDomainInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets a list of all update domains in a cloud service.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;UpdateDomainInner&gt; object
     */
    public Observable<ServiceResponse<Page<UpdateDomainInner>>> listUpdateDomainsNextWithServiceResponseAsync(final String nextPageLink) {
        return listUpdateDomainsNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<UpdateDomainInner>>, Observable<ServiceResponse<Page<UpdateDomainInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<UpdateDomainInner>>> call(ServiceResponse<Page<UpdateDomainInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listUpdateDomainsNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets a list of all update domains in a cloud service.
     *
    ServiceResponse<PageImpl1<UpdateDomainInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;UpdateDomainInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<UpdateDomainInner>>> listUpdateDomainsNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listUpdateDomainsNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<UpdateDomainInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<UpdateDomainInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl1<UpdateDomainInner>> result = listUpdateDomainsNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<UpdateDomainInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl1<UpdateDomainInner>> listUpdateDomainsNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl1<UpdateDomainInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl1<UpdateDomainInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
