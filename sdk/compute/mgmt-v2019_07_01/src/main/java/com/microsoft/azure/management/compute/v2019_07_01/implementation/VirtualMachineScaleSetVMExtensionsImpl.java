/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.compute.v2019_07_01.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.compute.v2019_07_01.VirtualMachineScaleSetVMExtensions;
import rx.Completable;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.management.compute.v2019_07_01.VirtualMachineExtensionsListResult;
import com.microsoft.azure.management.compute.v2019_07_01.VirtualMachineScaleSetVirtualMachineExtension;

class VirtualMachineScaleSetVMExtensionsImpl extends WrapperImpl<VirtualMachineScaleSetVMExtensionsInner> implements VirtualMachineScaleSetVMExtensions {
    private final ComputeManager manager;

    VirtualMachineScaleSetVMExtensionsImpl(ComputeManager manager) {
        super(manager.inner().virtualMachineScaleSetVMExtensions());
        this.manager = manager;
    }

    public ComputeManager manager() {
        return this.manager;
    }

    @Override
    public VirtualMachineScaleSetVirtualMachineExtensionImpl define(String name) {
        return wrapModel(name);
    }

    private VirtualMachineScaleSetVirtualMachineExtensionImpl wrapModel(VirtualMachineExtensionInner inner) {
        return  new VirtualMachineScaleSetVirtualMachineExtensionImpl(inner, manager());
    }

    private VirtualMachineScaleSetVirtualMachineExtensionImpl wrapModel(String name) {
        return new VirtualMachineScaleSetVirtualMachineExtensionImpl(name, this.manager());
    }

    @Override
    public Observable<VirtualMachineExtensionsListResult> listAsync(String resourceGroupName, String vmScaleSetName, String instanceId) {
        VirtualMachineScaleSetVMExtensionsInner client = this.inner();
        return client.listAsync(resourceGroupName, vmScaleSetName, instanceId)
        .map(new Func1<VirtualMachineExtensionsListResultInner, VirtualMachineExtensionsListResult>() {
            @Override
            public VirtualMachineExtensionsListResult call(VirtualMachineExtensionsListResultInner inner) {
                return new VirtualMachineExtensionsListResultImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<VirtualMachineScaleSetVirtualMachineExtension> getAsync(String resourceGroupName, String vmScaleSetName, String instanceId, String vmExtensionName) {
        VirtualMachineScaleSetVMExtensionsInner client = this.inner();
        return client.getAsync(resourceGroupName, vmScaleSetName, instanceId, vmExtensionName)
        .flatMap(new Func1<VirtualMachineExtensionInner, Observable<VirtualMachineScaleSetVirtualMachineExtension>>() {
            @Override
            public Observable<VirtualMachineScaleSetVirtualMachineExtension> call(VirtualMachineExtensionInner inner) {
                if (inner == null) {
                    return Observable.empty();
                } else {
                    return Observable.just((VirtualMachineScaleSetVirtualMachineExtension)wrapModel(inner));
                }
            }
       });
    }

    @Override
    public Completable deleteAsync(String resourceGroupName, String vmScaleSetName, String instanceId, String vmExtensionName) {
        VirtualMachineScaleSetVMExtensionsInner client = this.inner();
        return client.deleteAsync(resourceGroupName, vmScaleSetName, instanceId, vmExtensionName).toCompletable();
    }

}
