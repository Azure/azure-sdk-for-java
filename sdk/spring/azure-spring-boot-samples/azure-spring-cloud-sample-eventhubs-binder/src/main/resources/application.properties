# ------------------------------- Connection string based usage ---------------------------------
# Fill event hub namespace connection string copied from portal
# spring.cloud.azure.eventhub.connection-string=[eventhub-namespace-connection-string]

# Fill checkpoint storage account name and access key
# spring.cloud.azure.eventhub.checkpoint-access-key=[checkpoint-accesskey]

# ------------------------------- Credential file based usage -----------------------------------

# Credential file based usage
spring.cloud.azure.credential-file-path=[credential-file-path]

spring.cloud.azure.resource-group=[resource-group]
spring.cloud.azure.eventhub.namespace=[eventhub-namespace]

# ------------------------------- MSI Credential based usage -----------------------------------

#spring.cloud.azure.msi-enabled=true
#spring.cloud.azure.subscription-id=[subscription-id]
#spring.cloud.azure.managed-identity.client-id=[The ID of managed identity]

#spring.cloud.azure.resource-group=[resource-group]
#spring.cloud.azure.eventhub.namespace=[eventhub-namespace]

# ------------------------------- Common Properties --------------------------------------------

# For example here, the destination name of input and output should be the same.
# Eventhub name can contain only lowercase letters, numbers, and the dash (-) character.
# Every dash (-) character must be immediately preceded and followed by a letter or number.
# Must be from 3 to 63 characters long.
spring.cloud.stream.bindings.input.destination=[eventhub-name]
spring.cloud.stream.bindings.input.group=[consumer-group]
spring.cloud.stream.bindings.output.destination=[eventhub-name-same-as-above]


# Storage account name length should be between 3 and 24
# and use numbers and lower-case letters only.
spring.cloud.azure.eventhub.checkpoint-storage-account=[checkpoint-storage-account]
spring.cloud.azure.eventhub.checkpoint-container=[checkpoint-container]


# Use manual checkpoint mode
spring.cloud.stream.eventhub.bindings.input.consumer.checkpoint-mode=MANUAL

# Config this property if you want to create resource automatically
# spring.cloud.azure.auto-create-resources=true

# Default environment is AZURE. Provide your own if in another environment
# Example environment is AZURE, AZURE_CHINA
# spring.cloud.azure.environment=[environment]

# Example region is westUS, northchina
# spring.cloud.azure.region=[region]

# enable producer error channel, it is closed by default
spring.cloud.stream.default.producer.errorChannelEnabled=true
