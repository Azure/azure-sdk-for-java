parameters:
  - name: Artifacts
    type: object
    default: []
  - name: TestPipeline
    type: boolean
    default: false
  - name: AdditionalModules
    type: object
    default: []
  - name: SDKType
    type: string
    default: client
  - name: ServiceDirectory
    type: string
    default: spring
  - name: MatrixConfigs
    type: object
    default:
      - Name: Java_ci_test_base
        Path: eng/pipelines/templates/stages/platform-matrix.json
        Selection: sparse
        NonSparseParameters: Agent
        GenerateVMJobs: true
  - name: AdditionalMatrixConfigs
    type: object
    default: []
  - name: MatrixFilters
    type: object
    default: []
  - name: MatrixReplace
    type: object
    default: []
  - name: SkipAggregateReports
    type: boolean
    default: false
  - name: PreBuildSteps
    type: object
    default: []
  - name: SpringBootVersion
    type: string
    default: 'not-specified' # Set a default that breaks in obvious ways.
  - name: SpringCloudVersion
    type: string
    default: 'not-specified' # Set a default that breaks in obvious ways.
  - name: AdditionalBuildOptions
    type: string
    default: ''
  - name: BuildParallelization
    type: string
    default: '2C'
  - name: TestParallelization
    type: string
    default: '1C'
  - name: ParallelTestPlayback
    type: string
    default: 'false'
  - name: TestOptions
    type: string
    default: ''
  - name: TestGoals
    type: string
    default: $(TestGoals)
  - name: TestEnvVars
    type: object
    default: {}

stages:
  - stage: 'Compatibility Check'
    jobs:
      - job: 'Test ubuntu2004_111'
        variables:
          - template: ../../eng/pipelines/templates/variables/globals.yml
        pool:
          name: azsdk-pool-mms-ubuntu-2004-general
          vmImage: MMSUbuntu20.04
        steps:
          - template: /eng/common/pipelines/templates/steps/sparse-checkout.yml
            parameters:
              Paths:
                - 'sdk/${{ parameters.ServiceDirectory }}'
                - '**/*.xml'
                - '**/*.md'
                - '.vscode/cspell.json'
                - '!sdk/**/test-recordings'
                - '!sdk/**/session-records'
          - template: ../../eng/pipelines/templates/steps/generate-project-list.yml
            parameters:
              Artifacts: ${{ parameters.Artifacts }}
              AdditionalModules: ${{ parameters.AdditionalModules }}
              JobType: 'Test ubuntu2004_111'
              SDKType: ${{parameters.SDKType}}
              ServiceDirectory: ${{parameters.ServiceDirectory}}
          - task: PythonScript@0
            displayName: 'Generate directories variable for sparse checkout'
            inputs:
              scriptPath: 'eng/scripts/generate_from_source_pom.py'
              arguments: '--set-pipeline-variable CheckoutDirectories --project-list $(ProjectList)'
              workingDirectory: '$(System.DefaultWorkingDirectory)'
          - template: /eng/common/pipelines/templates/steps/sparse-checkout.yml
            parameters:
              Paths: $(CheckoutDirectories)
              SkipDefaultCheckout: true
          - template: ../../eng/pipelines/templates/steps/install-reporting-tools.yml
          - task: Maven@3
            displayName: 'Build for From Source run'
            inputs:
              mavenPomFile: ClientFromSourcePom.xml
              goals: 'install'
              # Build and install every track 2, client, library. The purpose is to have all the libraries installed on the
              # machine, so we can simply run tests with the -amd switch and we can remove the SNAFU of dependencies that
              # bloated the ci.yml files' AdditionalModules because we ended up having to list every transitive azure client
              # dependency. Note: The -T 1C says spin up a build thread per core. Since we're building
              # all the track 2, client, libraries (which is now over 100) this effectively cuts the build time in half.
              options: $(DefaultOptions) -DskipTests $(DefaultSkipOptions) -Djacoco.skip=true -T ${{ parameters.BuildParallelization }} ${{ parameters.AdditionalBuildOptions }}
              mavenOptions: '$(MemoryOptions) $(LoggingOptions)'
              javaHomeOption: 'JDKVersion'
              jdkVersionOption: $(JavaTestVersion)
              jdkArchitectureOption: 'x64'
              publishJUnitResults: false
            condition: and(succeeded(), eq(variables['TestFromSource'], 'true'))
          - task: Maven@3
            displayName: 'Run tests for From Source run'
            inputs:
              mavenPomFile: ClientFromSourcePom.xml
              # For the "From Source" runs we don't want the -am switch as we don't care about running tests for our
              # dependencies, but we do want the -amd switch because we want to run tests on things that depend on us.
              ${{ if eq(parameters.IsLiveTest, 'true') }}:
                options: $(DefaultTestOptions) -DAZURE_TEST_DEBUG=$(IsDebug) -Dparallel-test-playback=${{ parameters.ParallelTestPlayback }} ${{ parameters.TestOptions }} -T ${{ parameters.TestParallelization }}
              ${{ else }}:
                options: $(DefaultTestOptions) -DAZURE_TEST_DEBUG=$(IsDebug) -Dparallel-test-playback=${{ parameters.ParallelTestPlayback }} ${{ parameters.TestOptions }} -amd -T ${{ parameters.TestParallelization }}
              mavenOptions: '$(MemoryOptions) $(LoggingOptions)'
              javaHomeOption: 'JDKVersion'
              jdkVersionOption: $(JavaTestVersion)
              jdkArchitectureOption: 'x64'
              publishJUnitResults: false
              # The "From Source" runs only care about running tests for libraries within an SDK/area
              # as well as libraries which depend on them and not the other stages in the Maven
              # lifecycle that test or verify targets would execute. The libraries were already
              # compiled and installed in the previous task, this tasks only runs tests.
              goals: ${{ parameters.TestGoals }}
            env: ${{ parameters.TestEnvVars }}
            condition: and(succeeded(), eq(variables['TestFromSource'], 'true'))