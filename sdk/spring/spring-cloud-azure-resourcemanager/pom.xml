<?xml version="1.0" encoding="UTF-8"?>
<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns="http://maven.apache.org/POM/4.0.0"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <parent>
    <groupId>com.azure</groupId>
    <artifactId>azure-client-sdk-parent</artifactId>
    <version>1.7.0</version> <!-- {x-version-update;com.azure:azure-client-sdk-parent;current} -->
    <relativePath>../../parents/azure-client-sdk-parent</relativePath>
  </parent>
  <modelVersion>4.0.0</modelVersion>

  <groupId>com.azure.spring</groupId>
  <artifactId>spring-cloud-azure-resourcemanager</artifactId>
  <version>4.0.0-beta.4</version> <!-- {x-version-update;com.azure.spring:spring-cloud-azure-resourcemanager;current} -->

  <name>Spring Cloud Azure Resource Manager</name>
  <description>Spring Cloud Azure Resource Manager</description>
  <url>https://microsoft.github.io/spring-cloud-azure</url>
  <developers>
    <developer>
      <name>Spring Cloud Azure</name>
      <email>SpringIntegSupport@microsoft.com</email>
    </developer>
  </developers>
  <scm>
    <connection>scm:git:git@github.com:Azure/azure-sdk-for-java.git</connection>
    <developerConnection>scm:git:ssh://git@github.com:Azure/azure-sdk-for-java.git</developerConnection>
    <url>https://github.com/Azure/azure-sdk-for-java</url>
  </scm>
  <issueManagement>
    <system>GitHub</system>
    <url>https://github.com/Azure/azure-sdk-for-java/issues</url>
  </issueManagement>

  <properties>
    <javaModulesSurefireArgLine>
      --add-opens com.azure.spring.resourcemanager/com.azure.spring.resourcemanager.connectionstring=ALL-UNNAMED
    </javaModulesSurefireArgLine>
    <jacoco.min.linecoverage>0.40</jacoco.min.linecoverage>
    <jacoco.min.branchcoverage>0.30</jacoco.min.branchcoverage>
    <jacoco.skip>false</jacoco.skip>

    <!-- This property determines the relative path from a pom.xml to the eng/ folder. -->
    <relative.path.to.eng.folder>../../..</relative.path.to.eng.folder>

    <!-- This property determines the max heap size of the Surefire JVM. By default 3GB, or 3096MB, is used. -->
    <surefireXmx>3096m</surefireXmx>

    <!-- This property configures the max heap size of the Surefire JVM. -->
    <surefireJvmXmx>-Xmx${surefireXmx}</surefireJvmXmx>

    <!-- This property configures creating a heap dump if the Surefire JVM fails with an OutOfMemoryError. -->
    <heapDumpOnOom>
      -XX:+HeapDumpOnOutOfMemoryError
      -XX:HeapDumpPath=${packageOutputDirectory}${file.separator}${project.artifactId}-oom.hprof
    </heapDumpOnOom>

    <!-- Reserved for general Surefire JVM arguments that affect all SDKs. -->
    <defaultSurefireArgLine>
      ${surefireJvmXmx}
      ${heapDumpOnOom}
    </defaultSurefireArgLine>

    <!-- This property configures whether PLAYBACK tests are ran in parallel. Default is true. -->
    <parallelizeTests>true</parallelizeTests>

    <!-- This property configures whether LIVE or RECORD tests are ran in parallel. Default is false. -->
    <parallelizeLiveTests>false</parallelizeLiveTests>

    <!-- This property configures whether the codesnippet-maven-plugin should be used. -->
    <codesnippet.skip>true</codesnippet.skip>

    <!-- The following properties configure the maven-checkstyle-plugin. -->
    <!-- This property configures whether the maven-checkstyle-plugin should be used. -->
    <checkstyle.skip>false</checkstyle.skip>

    <!-- The following properties configure the spotbugs-maven-plugin. -->
    <!-- This property configures whether the spotbugs-maven-plugin should be used. -->
    <spotbugs.skip>false</spotbugs.skip>

    <!-- This property configures whether Spotbugs analysis is ran on samples and tests. Default is false. -->
    <spotbugs.includeTests>false</spotbugs.includeTests>

    <!-- These properties exist for libraries using the new codesnippet-maven-plugin can easily disable the old doclet. -->
    <javadocDoclet>org.apidesign.javadoc.codesnippet.Doclet</javadocDoclet>
    <javadocDocletOptions>-maxLineLength 120 -snippetpath ${project.basedir}/src/samples/java -suppressMissingLinkWarnings</javadocDocletOptions>
  </properties>
  <dependencies>
    <dependency>
      <groupId>com.azure.spring</groupId>
      <artifactId>spring-cloud-azure-core</artifactId>
      <version>4.0.0-beta.4</version> <!-- {x-version-update;com.azure.spring:spring-cloud-azure-core;current} -->
    </dependency>

    <!-- com.azure.resourcemanager dependencies -->
    <dependency>
      <groupId>com.azure.resourcemanager</groupId>
      <artifactId>azure-resourcemanager</artifactId>
      <version>2.10.0</version> <!-- {x-version-update;com.azure.resourcemanager:azure-resourcemanager;dependency} -->
    </dependency>

    <dependency>
      <groupId>org.mockito</groupId>
      <artifactId>mockito-core</artifactId>
      <version>4.0.0</version><!-- {x-version-update;org.mockito:mockito-core;external_dependency} -->
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter</artifactId>
      <version>5.8.1</version> <!-- {x-version-update;org.junit.jupiter:junit-jupiter;external_dependency} -->
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-test</artifactId>
      <version>5.3.13</version> <!-- {x-version-update;org.springframework:spring-test;external_dependency} -->
      <scope>test</scope>
    </dependency>

    <!-- Used to eliminate warnings when generate Java Docs.
        Added this dependency to include necessary annotations used by reactor core.
        Without this dependency, javadoc throws a warning as it cannot find enum When.MAYBE
        which is used in @Nullable annotation in reactor core classes -->
    <dependency>
      <groupId>com.google.code.findbugs</groupId>
      <artifactId>jsr305</artifactId>
      <version>3.0.2</version> <!-- {x-version-update;com.google.code.findbugs:jsr305;external_dependency} -->
      <scope>provided</scope>
    </dependency>
  </dependencies>

  <build>
    <resources>
      <resource>
        <directory>src/main/resources</directory>
        <filtering>true</filtering>
      </resource>
    </resources>

    <plugins>
      <!-- This plugin configures the bas requirements for compilation -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.8.1</version> <!-- {x-version-update;org.apache.maven.plugins:maven-compiler-plugin;external_dependency} -->
      </plugin>

      <!-- This plugin scans checkstyle issues in the code -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-checkstyle-plugin</artifactId>
        <version>3.1.2</version> <!-- {x-version-update;org.apache.maven.plugins:maven-checkstyle-plugin;external_dependency} -->
        <executions>
          <execution>
            <phase>verify</phase>
            <goals>
              <goal>check</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <!-- This plugin scans reports spotbugs in the code -->
      <plugin>
        <groupId>com.github.spotbugs</groupId>
        <artifactId>spotbugs-maven-plugin</artifactId>
        <version>4.2.2</version> <!-- {x-version-update;com.github.spotbugs:spotbugs-maven-plugin;external_dependency} -->
        <executions>
          <execution>
            <phase>verify</phase>
            <goals>
              <goal>check</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <!-- Configure the jar plugin -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jar-plugin</artifactId>
        <version>3.1.2</version> <!-- {x-version-update;org.apache.maven.plugins:maven-jar-plugin;external_dependency} -->
        <configuration>
          <outputDirectory>${packageOutputDirectory}</outputDirectory>
          <archive combine.children="append">
            <manifest>
              <addDefaultImplementationEntries>true</addDefaultImplementationEntries>
            </manifest>
          </archive>
        </configuration>
      </plugin>

      <!-- Configures the codesnippet replacement plugin -->
      <plugin>
        <groupId>com.azure.tools</groupId>
        <artifactId>codesnippet-maven-plugin</artifactId>
        <version>1.0.0-beta.2</version> <!-- {x-version-update;com.azure.tools:codesnippet-maven-plugin;external_dependency} -->
        <configuration>
          <skip>${codesnippet.skip}</skip>
        </configuration>
        <executions>
          <execution>
            <id>update-codesnippets</id>
            <goals>
              <goal>update-codesnippet</goal>
            </goals>
          </execution>
          <execution>
            <id>verify-codesnippets</id>
            <goals>
              <goal>verify-codesnippet</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <!-- Configure the javadoc plugin -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-javadoc-plugin</artifactId>
        <version>3.3.1</version> <!-- {x-version-update;org.apache.maven.plugins:maven-javadoc-plugin;external_dependency} -->
        <executions>
          <execution>
            <id>attach-javadocs</id>
            <goals>
              <goal>jar</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <!-- Configure the source plugin -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-source-plugin</artifactId>
        <version>3.0.1</version> <!-- {x-version-update;org.apache.maven.plugins:maven-source-plugin;external_dependency} -->
        <executions>
          <execution>
            <id>attach-sources</id>
            <goals>
              <goal>jar</goal>
            </goals>
            <configuration>
              <outputDirectory>${packageOutputDirectory}</outputDirectory>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!-- Copy the pom file to output -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-antrun-plugin</artifactId>
        <version>1.8</version> <!-- {x-version-update;org.apache.maven.plugins:maven-antrun-plugin;external_dependency} -->
        <executions>
          <execution>
            <id>copy</id>
            <phase>package</phase>
            <configuration>
              <target>
                <copy file="${project.pomFile}" tofile="${packageOutputDirectory}/${project.build.finalName}.pom"/>
              </target>
            </configuration>
            <goals>
              <goal>run</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.jacoco</groupId>
        <artifactId>jacoco-maven-plugin</artifactId>
        <version>0.8.7</version> <!-- {x-version-update;org.jacoco:jacoco-maven-plugin;external_dependency} -->
        <configuration>
          <dataFileIncludes>
            <dataFileInclude>${project.build.directory}/jacoco.exec</dataFileInclude>
          </dataFileIncludes>
          <excludes combine.children="append">
            <exclude>META-INF/**</exclude>
          </excludes>
        </configuration>
        <executions>
          <execution>
            <id>prepare-agent</id>
            <goals>
              <goal>prepare-agent</goal>
            </goals>
          </execution>
          <execution>
            <id>default-instrument</id>
            <goals>
              <goal>instrument</goal>
            </goals>
          </execution>
          <execution>
            <id>default-restore-instrumented-classes</id>
            <goals>
              <goal>restore-instrumented-classes</goal>
            </goals>
          </execution>
          <execution>
            <id>post-unit-test</id>
            <phase>package</phase>
            <goals>
              <goal>report</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.reporting.outputDirectory}/test-coverage</outputDirectory>
              <excludes combine.children="append">
                <exclude>**/com/azure/cosmos/implementation/apachecommons/**/*</exclude>
                <exclude>**/com/azure/cosmos/implementation/guava25/**/*</exclude>
                <exclude>**/com/azure/cosmos/implementation/guava27/**/*</exclude>
              </excludes>
            </configuration>
          </execution>
          <execution>
            <id>check</id>
            <goals>
              <goal>check</goal>
            </goals>
            <configuration>
              <skip>${jacoco.skip}</skip>
              <rules>
                <rule>
                  <element>BUNDLE</element>
                  <limits>
                    <limit>
                      <counter>LINE</counter>
                      <value>COVEREDRATIO</value>
                      <minimum>${jacoco.min.linecoverage}</minimum>
                    </limit>
                    <limit>
                      <counter>BRANCH</counter>
                      <value>COVEREDRATIO</value>
                      <minimum>${jacoco.min.branchcoverage}</minimum>
                    </limit>
                  </limits>
                </rule>
              </rules>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!-- Allows the sample sources to be built during test-compile phase. -->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>build-helper-maven-plugin</artifactId>
        <version>3.0.0</version> <!-- {x-version-update;org.codehaus.mojo:build-helper-maven-plugin;external_dependency} -->
        <executions>
          <execution>
            <id>attach-artifacts</id>
            <phase>package</phase>
            <goals>
              <goal>attach-artifact</goal>
            </goals>
            <configuration>
              <artifacts>
                <artifact>
                  <file>${basedir}/README.md</file>
                  <type>md</type>
                  <classifier>readme</classifier>
                </artifact>
                <artifact>
                  <file>${basedir}/CHANGELOG.md</file>
                  <type>md</type>
                  <classifier>changelog</classifier>
                </artifact>
              </artifacts>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!-- Checks public surface area for breaking changes. -->
      <plugin>
        <groupId>org.revapi</groupId>
        <artifactId>revapi-maven-plugin</artifactId>
        <version>0.11.2</version> <!-- {x-version-update;org.revapi:revapi-maven-plugin;external_dependency} -->
        <executions>
          <execution>
            <goals>
              <goal>check</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-enforcer-plugin</artifactId>
        <version>3.0.0-M3</version> <!-- {x-version-update;org.apache.maven.plugins:maven-enforcer-plugin;external_dependency} -->
        <configuration>
          <rules>
            <!--
            Rule: https://maven.apache.org/enforcer/enforcer-rules/bannedDependencies.html
            We have a list of blessed dependencies here: https://azure.github.io/azure-sdk/java_implementation.html#dependencies
            Format of includes / excludes is the following: 'groupId[:artifactId][:version][:type][:scope][:classifier]'.
            Wildcards can be used.
            -->
            <bannedDependencies>
              <searchTransitive>false</searchTransitive>
              <excludes>
                <!-- We exclude everything that is runtime-time, compile-time, or provided scoped (i.e. we allow
                dependencies when they are used for test scope or otherwise) -->
                <exclude>*:*:*:*:runtime</exclude>
                <exclude>*:*:*:*:compile</exclude>
                <exclude>*:*:*:*:provided</exclude>
              </excludes>
              <includes combine.children="append">
                <include>com.azure:*</include>
                <include>com.azure.resourcemanager:*</include>
                <include>com.azure.spring:*</include>

                <!-- Used by many libraries to bring in annotations used by Reactor -->
                <include>com.google.code.findbugs:jsr305:[3.0.2]</include> <!-- {x-include-update;com.google.code.findbugs:jsr305;external_dependency} -->
              </includes>
            </bannedDependencies>

            <!--
            Rule: https://maven.apache.org/enforcer/enforcer-rules/requireReleaseDeps.html
            -->
            <requireReleaseDeps>
              <message>No Snapshots Allowed!</message>
            </requireReleaseDeps>

            <!--
            Rule: https://maven.apache.org/enforcer/enforcer-rules/requireSameVersions.html
            This rule is used to enforce that all modules depend on the same version of particular dependencies or
            plugins.
            -->
          </rules>
          <fail>true</fail>
        </configuration>
        <executions>
          <execution>
            <id>default-cli</id>
            <goals>
              <goal>enforce</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
    </plugins>

    <pluginManagement>
      <plugins>
        <!-- This plugin configures the bas requirements for compilation -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>3.8.1</version> <!-- {x-version-update;org.apache.maven.plugins:maven-compiler-plugin;external_dependency} -->
          <configuration>
            <showWarnings>true</showWarnings>
            <failOnWarning>true</failOnWarning>
            <compilerArgs combine.children="append" combine.self="append">
              <!-- Turn off annotation processing -->
              <arg>-proc:none</arg>

              <!-- https://docs.oracle.com/javase/7/docs/technotes/tools/windows/javac.html#xlintwarnings -->
              <arg>-Xlint:cast</arg>
              <arg>-Xlint:classfile</arg>
              <!-- <arg>-Xlint:deprecation</arg> --> <!-- FIXME: We should enable this ASAP -->
              <arg>-Xlint:dep-ann</arg>
              <arg>-Xlint:divzero</arg>
              <arg>-Xlint:empty</arg>
              <arg>-Xlint:fallthrough</arg>
              <arg>-Xlint:finally</arg>
              <arg>-Xlint:options</arg>
              <arg>-Xlint:overrides</arg>
              <arg>-Xlint:path</arg>
              <!-- <arg>-Xlint:processing</arg> -->
              <arg>-Xlint:rawtypes</arg>
              <!-- <arg>-Xlint:serial</arg> -->
              <arg>-Xlint:static</arg>
              <arg>-Xlint:try</arg>
              <arg>-Xlint:unchecked</arg>
              <arg>-Xlint:varargs</arg>
            </compilerArgs>
          </configuration>
        </plugin>

        <!-- This plugin scans checkstyle issues in the code -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-checkstyle-plugin</artifactId>
          <version>3.1.2</version> <!-- {x-version-update;org.apache.maven.plugins:maven-checkstyle-plugin;external_dependency} -->
          <dependencies>
            <dependency>
              <groupId>com.azure</groupId>
              <artifactId>sdk-build-tools</artifactId>
              <version>1.0.0</version> <!-- {x-version-update;com.azure:sdk-build-tools;external_dependency} -->
            </dependency>
            <dependency>
              <groupId>com.puppycrawl.tools</groupId>
              <artifactId>checkstyle</artifactId>
              <version>9.2</version> <!-- {x-version-update;com.puppycrawl.tools:checkstyle;external_dependency} -->
            </dependency>
          </dependencies>
          <configuration>
            <skip>${checkstyle.skip}</skip>
            <configLocation>${project.basedir}/${relative.path.to.eng.folder}/eng/code-quality-reports/src/main/resources/checkstyle/checkstyle.xml</configLocation>
            <suppressionsLocation>${project.basedir}/${relative.path.to.eng.folder}/eng/code-quality-reports/src/main/resources/checkstyle/checkstyle-suppressions.xml</suppressionsLocation>
            <headerLocation>${project.basedir}/${relative.path.to.eng.folder}/eng/code-quality-reports/src/main/resources/checkstyle/java.header</headerLocation>
            <propertyExpansion>samedir=</propertyExpansion>
            <encoding>UTF-8</encoding>
            <consoleOutput>true</consoleOutput>
            <includeTestSourceDirectory>true</includeTestSourceDirectory>
            <linkXRef>true</linkXRef>
            <failsOnError>true</failsOnError>
            <failOnViolation>true</failOnViolation>
          </configuration>
        </plugin>

        <!-- This plugin scans reports spotbugs in the code -->
        <plugin>
          <groupId>com.github.spotbugs</groupId>
          <artifactId>spotbugs-maven-plugin</artifactId>
          <version>4.2.2</version> <!-- {x-version-update;com.github.spotbugs:spotbugs-maven-plugin;external_dependency} -->
          <dependencies>
            <dependency>
              <groupId>com.azure</groupId>
              <artifactId>sdk-build-tools</artifactId>
              <version>1.0.0</version> <!-- {x-version-update;com.azure:sdk-build-tools;external_dependency} -->
            </dependency>
            <dependency>
              <groupId>com.github.spotbugs</groupId>
              <artifactId>spotbugs</artifactId>
              <version>4.2.2</version> <!-- {x-version-update;com.github.spotbugs:spotbugs;external_dependency} -->
            </dependency>
          </dependencies>
          <configuration>
            <skip>${spotbugs.skip}</skip>
            <effort>max</effort>
            <threshold>Low</threshold>
            <xmlOutput>true</xmlOutput>
            <spotbugsXmlOutputDirectory>${project.build.directory}/spotbugs</spotbugsXmlOutputDirectory>
            <excludeFilterFile>spotbugs/spotbugs-exclude.xml</excludeFilterFile>
            <fork>true</fork>
            <failOnError>true</failOnError>
            <!-- Set this to true when src/samples and src/test are spotbugs clean in all Track 2 SDKs -->
            <includeTests>${spotbugs.includeTests}</includeTests>

            <!-- Enable this plugin when issues documented are fixed -->
            <!--          <plugins>-->
            <!--            <plugin>-->
            <!--              <groupId>com.h3xstream.findsecbugs</groupId>-->
            <!--              <artifactId>findsecbugs-plugin</artifactId>-->
            <!--              <version>1.9.0</version> &lt;!&ndash; {x-version-update;com.h3xstream.findsecbugs:findsecbugs-plugin;external_dependency} &ndash;&gt;-->
            <!--            </plugin>-->
            <!--          </plugins>-->
          </configuration>
        </plugin>

        <!-- This plugin generates Javadocs -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-javadoc-plugin</artifactId>
          <version>3.3.1</version> <!-- {x-version-update;org.apache.maven.plugins:maven-javadoc-plugin;external_dependency} -->
          <configuration>
            <source>1.8</source>
            <doctitle>Azure SDK for Java Reference Documentation</doctitle>
            <windowtitle>Azure SDK for Java Reference Documentation</windowtitle>
            <bottom>Visit the &lt;a href="https://docs.microsoft.com/java/azure/"&gt;Azure for Java Developers&lt;/a&gt; site
              for more Java documentation, including quick starts, tutorials, and code samples.
            </bottom>
            <linksource>false</linksource>
            <excludePackageNames>
              *.impl*:
              *.implementation*:
              *.samples:
              com.azure.tools.checkstyle*:
              com.azure.core.test*:
              com.azure.endtoend*:
              com.azure.perf*:
              com.azure.storage.internal.avro*
            </excludePackageNames>
            <!-- CosmosSkip - This is temporary, BridgeInternal gets converted to implementation -->
            <sourceFileExcludes>
              <sourceFileExclude>com/azure/cosmos/*BridgeInternal.java</sourceFileExclude>
              <sourceFileExclude>com/azure/cosmos/models/*BridgeInternal.java</sourceFileExclude>
              <sourceFileExclude>com/azure/cosmos/util/*BridgeInternal.java</sourceFileExclude>
              <sourceFileExclude>com/azure/cosmos/encryption/*BridgeInternal.java</sourceFileExclude>
              <sourceFileExclude>com/azure/cosmos/encryption/models/*BridgeInternal.java</sourceFileExclude>
              <sourceFileExclude>module-info.java</sourceFileExclude>
            </sourceFileExcludes>
            <links combine.children="append">
              <!-- JDK APIs -->
              <link>https://docs.oracle.com/javase/8/docs/api/</link>

              <!-- Reactor APIs -->
              <link>https://projectreactor.io/docs/core/release/api/</link> <!-- TODO (alzimmer): We need to version this. Right now it is always going to point to latest which may be wrong -->
              <link>https://projectreactor.io/docs/netty/release/api/</link>

              <!-- Jackson APIs -->
              <link>https://fasterxml.github.io/jackson-annotations/javadoc/2.12/</link>
              <link>https://fasterxml.github.io/jackson-core/javadoc/2.12/</link>
              <link>https://fasterxml.github.io/jackson-databind/javadoc/2.12/</link>

              <!-- Netty APIs -->
              <link>https://netty.io/4.1/api/</link>

              <!-- Avro APIs -->
              <link>https://avro.apache.org/docs/current/api/java/</link>
            </links>
            <detectJavaApiLink>false</detectJavaApiLink>
            <isOffline>true</isOffline>
            <offlineLinks>
              <!-- JDK APIs -->
              <offlineLink>
                <url>https://docs.oracle.com/javase/8/docs/api/</url>
                <location>${project.basedir}/${relative.path.to.eng.folder}/eng/javadoc-package-lists/java8/</location>
              </offlineLink>

              <!-- Reactor APIs -->
              <offlineLink>
                <url>https://projectreactor.io/docs/core/release/api/</url>
                <location>${project.basedir}/${relative.path.to.eng.folder}/eng/javadoc-package-lists/reactor-core/</location>
              </offlineLink>
              <offlineLink>
                <url>https://projectreactor.io/docs/netty/release/api/</url>
                <location>${project.basedir}/${relative.path.to.eng.folder}/eng/javadoc-package-lists/reactor-netty/</location>
              </offlineLink>

              <!-- Jackson APIs -->
              <offlineLink>
                <url>https://fasterxml.github.io/jackson-annotations/javadoc/2.12/</url>
                <location>${project.basedir}/${relative.path.to.eng.folder}/eng/javadoc-package-lists/jackson-annotations/</location>
              </offlineLink>
              <offlineLink>
                <url>https://fasterxml.github.io/jackson-core/javadoc/2.12/</url>
                <location>${project.basedir}/${relative.path.to.eng.folder}/eng/javadoc-package-lists/jackson-core/</location>
              </offlineLink>
              <offlineLink>
                <url>https://fasterxml.github.io/jackson-databind/javadoc/2.12/</url>
                <location>${project.basedir}/${relative.path.to.eng.folder}/eng/javadoc-package-lists/jackson-databind/</location>
              </offlineLink>

              <!-- Netty APIs -->
              <offlineLink>
                <url>https://netty.io/4.1/api/</url>
                <location>${project.basedir}/${relative.path.to.eng.folder}/eng/javadoc-package-lists/netty/</location>
              </offlineLink>

              <!-- Avro APIs -->
              <offlineLink>
                <url>https://avro.apache.org/docs/current/api/java/</url>
                <location>${project.basedir}/${relative.path.to.eng.folder}/eng/javadoc-package-lists/apache-avro/</location>
              </offlineLink>
            </offlineLinks>
            <failOnError>true</failOnError>
            <failOnWarnings>true</failOnWarnings>
            <doclint>all</doclint>
            <quiet>true</quiet>
            <jarOutputDirectory>${packageOutputDirectory}</jarOutputDirectory>
            <doclet>${javadocDoclet}</doclet>
            <docletArtifact>
              <groupId>org.apidesign.javadoc</groupId>
              <artifactId>codesnippet-doclet</artifactId>
              <version>0.53</version> <!-- {x-version-update;org.apidesign.javadoc:codesnippet-doclet;external_dependency} -->
            </docletArtifact>
            <additionalOptions>
              <!-- '-version' is a dummy option, it's needed to prevent the Javadoc plugin from throwing a NullPointerException when '${javadocDocletOptions}' is empty. -->
              <!-- '${javadocDocletOptions}' will be empty when the new codesnippet tooling is being used. -->
              <!-- '-version' will indicate to Javadoc to include '@version' tags in generation, but none of the SDKs use this, so it is a good dummy option. -->
              <additionalOption>-version ${javadocDocletOptions}</additionalOption>
            </additionalOptions>
          </configuration>
        </plugin>

        <!-- This plugin runs tests -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-surefire-plugin</artifactId>
          <version>3.0.0-M3</version> <!-- {x-version-update;org.apache.maven.plugins:maven-surefire-plugin;external_dependency} -->
          <configuration>
            <runOrder>alphabetical</runOrder>
            <useSystemClassLoader>false</useSystemClassLoader>
            <systemPropertyVariables combine.children="append">
              <junit.jupiter.extensions.autodetection.enabled>true</junit.jupiter.extensions.autodetection.enabled>
              <junit.jupiter.execution.parallel.mode.default>concurrent</junit.jupiter.execution.parallel.mode.default>
              <junit.jupiter.execution.parallel.enabled>${parallelizeTests}</junit.jupiter.execution.parallel.enabled>
            </systemPropertyVariables>
            <forkCount>1</forkCount>
            <testFailureIgnore>false</testFailureIgnore>
            <argLine>
              ${defaultSurefireArgLine}
              ${additionalSurefireArgLine}
            </argLine>
          </configuration>
          <dependencies>
            <!-- This dependency is required until maven-surefire-plugin updates the version they use. -->
            <!-- The current dependency version doesn't support Java 17. -->
            <dependency>
              <groupId>org.ow2.asm</groupId>
              <artifactId>asm</artifactId>
              <version>9.1</version> <!-- {x-version-update;org.ow2.asm:asm;external_dependency} -->
            </dependency>
          </dependencies>
        </plugin>

        <!-- Checks public surface area for breaking changes. -->
        <plugin>
          <groupId>org.revapi</groupId>
          <artifactId>revapi-maven-plugin</artifactId>
          <version>0.11.2</version> <!-- {x-version-update;org.revapi:revapi-maven-plugin;external_dependency} -->
          <configuration>
            <analysisConfigurationFiles>
              <configurationFile>
                <resource>revapi/revapi.json</resource>
              </configurationFile>
            </analysisConfigurationFiles>
            <versionFormat>^\d+\.\d+\.\d+$</versionFormat>
            <checkDependencies>true</checkDependencies>
            <failBuildOnProblemsFound>true</failBuildOnProblemsFound>
          </configuration>
          <dependencies>
            <dependency>
              <groupId>com.azure</groupId>
              <artifactId>sdk-build-tools</artifactId>
              <version>1.0.0</version> <!-- {x-version-update;com.azure:sdk-build-tools;external_dependency} -->
            </dependency>
            <dependency>
              <groupId>org.revapi</groupId>
              <artifactId>revapi-java</artifactId>
              <version>0.20.0</version> <!-- {x-version-update;org.revapi:revapi-java;external_dependency} -->
            </dependency>
          </dependencies>
        </plugin>
      </plugins>
    </pluginManagement>
  </build>

  <reporting>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-checkstyle-plugin</artifactId>
        <version>3.1.2</version> <!-- {x-version-update;org.apache.maven.plugins:maven-checkstyle-plugin;external_dependency} -->
        <reportSets>
          <reportSet>
            <id>non-aggregate</id>
            <reports>
              <report>checkstyle</report>
            </reports>
          </reportSet>
        </reportSets>
      </plugin>
      <plugin>
        <groupId>com.github.spotbugs</groupId>
        <artifactId>spotbugs-maven-plugin</artifactId>
        <version>4.2.2</version> <!-- {x-version-update;com.github.spotbugs:spotbugs-maven-plugin;external_dependency} -->
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-javadoc-plugin</artifactId>
        <version>3.3.1</version> <!-- {x-version-update;org.apache.maven.plugins:maven-javadoc-plugin;external_dependency} -->
        <reportSets>
          <reportSet>
            <id>non-aggregate</id>
            <reports>
              <report>javadoc</report>
            </reports>
          </reportSet>
        </reportSets>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-project-info-reports-plugin</artifactId>
        <version>3.0.0</version> <!-- {x-version-update;org.apache.maven.plugins:maven-project-info-reports-plugin;external_dependency} -->
        <reportSets>
          <reportSet>
            <reports>
              <report>index</report>
              <report>summary</report>
              <report>dependency-info</report>
              <report>dependency-management</report>
              <report>dependency-convergence</report>
              <report>ci-management</report>
              <report>dependencies</report>
              <report>issue-management</report>
            </reports>
          </reportSet>
        </reportSets>
      </plugin>
      <plugin>
        <groupId>org.revapi</groupId>
        <artifactId>revapi-maven-plugin</artifactId>
        <version>0.11.2</version> <!-- {x-version-update;org.revapi:revapi-maven-plugin;external_dependency} -->
        <configuration>
          <checkDependencies>false</checkDependencies>
        </configuration>
        <reportSets>
          <reportSet>
            <reports>
              <report>report</report>
            </reports>
          </reportSet>
        </reportSets>
      </plugin>
    </plugins>
  </reporting>
</project>
