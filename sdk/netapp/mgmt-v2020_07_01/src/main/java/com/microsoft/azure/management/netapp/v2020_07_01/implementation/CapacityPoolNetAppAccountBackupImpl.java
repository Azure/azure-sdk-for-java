/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.netapp.v2020_07_01.implementation;

import com.microsoft.azure.management.netapp.v2020_07_01.CapacityPoolNetAppAccountBackup;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import com.microsoft.azure.management.netapp.v2020_07_01.BackupPatch;
import java.util.Map;
import org.joda.time.DateTime;
import rx.functions.Func1;

class CapacityPoolNetAppAccountBackupImpl extends CreatableUpdatableImpl<CapacityPoolNetAppAccountBackup, BackupInner, CapacityPoolNetAppAccountBackupImpl> implements CapacityPoolNetAppAccountBackup, CapacityPoolNetAppAccountBackup.Definition, CapacityPoolNetAppAccountBackup.Update {
    private final NetAppManager manager;
    private String resourceGroupName;
    private String accountName;
    private String poolName;
    private String volumeName;
    private String backupName;
    private BackupPatch updateParameter;

    CapacityPoolNetAppAccountBackupImpl(String name, NetAppManager manager) {
        super(name, new BackupInner());
        this.manager = manager;
        // Set resource name
        this.backupName = name;
        //
        this.updateParameter = new BackupPatch();
    }

    CapacityPoolNetAppAccountBackupImpl(BackupInner inner, NetAppManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.backupName = inner.name();
        // set resource ancestor and positional variables
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.accountName = IdParsingUtils.getValueFromIdByName(inner.id(), "netAppAccounts");
        this.poolName = IdParsingUtils.getValueFromIdByName(inner.id(), "capacityPools");
        this.volumeName = IdParsingUtils.getValueFromIdByName(inner.id(), "volumes");
        this.backupName = IdParsingUtils.getValueFromIdByName(inner.id(), "backups");
        //
        this.updateParameter = new BackupPatch();
    }

    @Override
    public NetAppManager manager() {
        return this.manager;
    }

    @Override
    public Observable<CapacityPoolNetAppAccountBackup> createResourceAsync() {
        BackupsInner client = this.manager().inner().backups();
        return client.createAsync(this.resourceGroupName, this.accountName, this.poolName, this.volumeName, this.backupName, this.inner())
            .map(new Func1<BackupInner, BackupInner>() {
               @Override
               public BackupInner call(BackupInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<CapacityPoolNetAppAccountBackup> updateResourceAsync() {
        BackupsInner client = this.manager().inner().backups();
        return client.updateAsync(this.resourceGroupName, this.accountName, this.poolName, this.volumeName, this.backupName, this.updateParameter)
            .map(new Func1<BackupInner, BackupInner>() {
               @Override
               public BackupInner call(BackupInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<BackupInner> getInnerAsync() {
        BackupsInner client = this.manager().inner().backups();
        return client.getAsync(this.resourceGroupName, this.accountName, this.poolName, this.volumeName, this.backupName);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }

    private void resetCreateUpdateParameters() {
        this.updateParameter = new BackupPatch();
    }

    @Override
    public String backupId() {
        return this.inner().backupId();
    }

    @Override
    public String backupType() {
        return this.inner().backupType();
    }

    @Override
    public DateTime creationDate() {
        return this.inner().creationDate();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String label() {
        return this.inner().label();
    }

    @Override
    public String location() {
        return this.inner().location();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public String provisioningState() {
        return this.inner().provisioningState();
    }

    @Override
    public Long size() {
        return this.inner().size();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public CapacityPoolNetAppAccountBackupImpl withExistingVolume(String resourceGroupName, String accountName, String poolName, String volumeName) {
        this.resourceGroupName = resourceGroupName;
        this.accountName = accountName;
        this.poolName = poolName;
        this.volumeName = volumeName;
        return this;
    }

    @Override
    public CapacityPoolNetAppAccountBackupImpl withLocation(String location) {
        this.inner().withLocation(location);
        return this;
    }

    @Override
    public CapacityPoolNetAppAccountBackupImpl withTags(Map<String, String> tags) {
        this.updateParameter.withTags(tags);
        return this;
    }

    @Override
    public CapacityPoolNetAppAccountBackupImpl withLabel(String label) {
        if (isInCreateMode()) {
            this.inner().withLabel(label);
        } else {
            this.updateParameter.withLabel(label);
        }
        return this;
    }

}
