/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.netapp.v2020_07_01.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.netapp.v2020_07_01.Vaults;
import rx.Observable;
import rx.functions.Func1;
import java.util.List;
import com.microsoft.azure.management.netapp.v2020_07_01.Vault;

class VaultsImpl extends WrapperImpl<VaultsInner> implements Vaults {
    private final NetAppManager manager;

    VaultsImpl(NetAppManager manager) {
        super(manager.inner().vaults());
        this.manager = manager;
    }

    public NetAppManager manager() {
        return this.manager;
    }

    private VaultImpl wrapModel(VaultInner inner) {
        return  new VaultImpl(inner, manager());
    }

    @Override
    public Observable<Vault> listAsync(String resourceGroupName, String accountName) {
        VaultsInner client = this.inner();
        return client.listAsync(resourceGroupName, accountName)
        .flatMap(new Func1<List<VaultInner>, Observable<VaultInner>>() {
            @Override
            public Observable<VaultInner> call(List<VaultInner> innerList) {
                return Observable.from(innerList);
            }
        })
        .map(new Func1<VaultInner, Vault>() {
            @Override
            public Vault call(VaultInner inner) {
                return wrapModel(inner);
            }
        });
    }

}
