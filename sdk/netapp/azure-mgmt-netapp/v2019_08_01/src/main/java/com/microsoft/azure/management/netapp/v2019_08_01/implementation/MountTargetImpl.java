/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.netapp.v2019_08_01.implementation;

import com.microsoft.azure.management.netapp.v2019_08_01.MountTarget;
import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import rx.Observable;
import java.util.Map;

class MountTargetImpl extends WrapperImpl<MountTargetInner> implements MountTarget {
    private final NetAppManager manager;

    MountTargetImpl(MountTargetInner inner,  NetAppManager manager) {
        super(inner);
        this.manager = manager;
    }

    @Override
    public NetAppManager manager() {
        return this.manager;
    }



    @Override
    public String endIp() {
        return this.inner().endIp();
    }

    @Override
    public String fileSystemId() {
        return this.inner().fileSystemId();
    }

    @Override
    public String gateway() {
        return this.inner().gateway();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String ipAddress() {
        return this.inner().ipAddress();
    }

    @Override
    public String location() {
        return this.inner().location();
    }

    @Override
    public String mountTargetId() {
        return this.inner().mountTargetId();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public String netmask() {
        return this.inner().netmask();
    }

    @Override
    public String provisioningState() {
        return this.inner().provisioningState();
    }

    @Override
    public String smbServerFqdn() {
        return this.inner().smbServerFqdn();
    }

    @Override
    public String startIp() {
        return this.inner().startIp();
    }

    @Override
    public String subnet() {
        return this.inner().subnet();
    }

    @Override
    public Map<String, String> tags() {
        return this.inner().tags();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

}
