// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.netapp.fluent.models.NetworkSiblingSetInner;
import com.azure.resourcemanager.netapp.models.NetworkFeatures;
import com.azure.resourcemanager.netapp.models.NicInfo;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class NetworkSiblingSetInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        NetworkSiblingSetInner model = BinaryData.fromString(
            "{\"networkSiblingSetId\":\"pwhonowkg\",\"subnetId\":\"wankixzbi\",\"networkSiblingSetStateId\":\"eputtmrywnuzoqf\",\"networkFeatures\":\"Standard_Basic\",\"provisioningState\":\"Canceled\",\"nicInfoList\":[{\"ipAddress\":\"cqvyxlwhzlsico\",\"volumeResourceIds\":[\"qnwvlrya\"]}]}")
            .toObject(NetworkSiblingSetInner.class);
        Assertions.assertEquals("pwhonowkg", model.networkSiblingSetId());
        Assertions.assertEquals("wankixzbi", model.subnetId());
        Assertions.assertEquals("eputtmrywnuzoqf", model.networkSiblingSetStateId());
        Assertions.assertEquals(NetworkFeatures.STANDARD_BASIC, model.networkFeatures());
        Assertions.assertEquals("qnwvlrya", model.nicInfoList().get(0).volumeResourceIds().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        NetworkSiblingSetInner model
            = new NetworkSiblingSetInner().withNetworkSiblingSetId("pwhonowkg").withSubnetId("wankixzbi")
                .withNetworkSiblingSetStateId("eputtmrywnuzoqf").withNetworkFeatures(NetworkFeatures.STANDARD_BASIC)
                .withNicInfoList(Arrays.asList(new NicInfo().withVolumeResourceIds(Arrays.asList("qnwvlrya"))));
        model = BinaryData.fromObject(model).toObject(NetworkSiblingSetInner.class);
        Assertions.assertEquals("pwhonowkg", model.networkSiblingSetId());
        Assertions.assertEquals("wankixzbi", model.subnetId());
        Assertions.assertEquals("eputtmrywnuzoqf", model.networkSiblingSetStateId());
        Assertions.assertEquals(NetworkFeatures.STANDARD_BASIC, model.networkFeatures());
        Assertions.assertEquals("qnwvlrya", model.nicInfoList().get(0).volumeResourceIds().get(0));
    }
}
