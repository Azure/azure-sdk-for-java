// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.netapp.fluent.models.RegionInfoResourceInner;
import com.azure.resourcemanager.netapp.models.RegionInfoAvailabilityZoneMappingsItem;
import com.azure.resourcemanager.netapp.models.RegionInfosList;
import com.azure.resourcemanager.netapp.models.RegionStorageToNetworkProximity;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class RegionInfosListTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        RegionInfosList model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"storageToNetworkProximity\":\"T1AndT2AndAcrossT2\",\"availabilityZoneMappings\":[{\"availabilityZone\":\"qjsdpydnfyhxdeo\",\"isAvailable\":false},{\"availabilityZone\":\"cwif\",\"isAvailable\":false}]},\"id\":\"gzfbishcbk\",\"name\":\"ajdeyeamdphaga\",\"type\":\"pbuxwgipwhon\"},{\"properties\":{\"storageToNetworkProximity\":\"T1AndT2\",\"availabilityZoneMappings\":[{\"availabilityZone\":\"ankixzbinjeput\",\"isAvailable\":false},{\"availabilityZone\":\"wnuzoqftiyqzrnkc\",\"isAvailable\":false},{\"availabilityZone\":\"lwh\",\"isAvailable\":true},{\"availabilityZone\":\"cohoq\",\"isAvailable\":false}]},\"id\":\"lryav\",\"name\":\"hheunmmqhgyx\",\"type\":\"konocu\"},{\"properties\":{\"storageToNetworkProximity\":\"T2\",\"availabilityZoneMappings\":[{\"availabilityZone\":\"uconuqszfkbey\",\"isAvailable\":true},{\"availabilityZone\":\"mjmwvvjektcx\",\"isAvailable\":true}]},\"id\":\"wlrsffrzpwv\",\"name\":\"qdqgbi\",\"type\":\"ylihkaetckt\"},{\"properties\":{\"storageToNetworkProximity\":\"T2\",\"availabilityZoneMappings\":[{\"availabilityZone\":\"nkymuctqhjfbebrj\",\"isAvailable\":true},{\"availabilityZone\":\"fuwutttxf\",\"isAvailable\":false},{\"availabilityZone\":\"i\",\"isAvailable\":true}]},\"id\":\"epcyvahfnlj\",\"name\":\"yq\",\"type\":\"j\"}],\"nextLink\":\"ujqgidok\"}")
            .toObject(RegionInfosList.class);
        Assertions.assertEquals(RegionStorageToNetworkProximity.T1AND_T2AND_ACROSS_T2,
            model.value().get(0).storageToNetworkProximity());
        Assertions.assertEquals("qjsdpydnfyhxdeo",
            model.value().get(0).availabilityZoneMappings().get(0).availabilityZone());
        Assertions.assertEquals(false, model.value().get(0).availabilityZoneMappings().get(0).isAvailable());
        Assertions.assertEquals("ujqgidok", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        RegionInfosList model = new RegionInfosList()
            .withValue(Arrays.asList(new RegionInfoResourceInner()
                .withStorageToNetworkProximity(RegionStorageToNetworkProximity.T1AND_T2AND_ACROSS_T2)
                .withAvailabilityZoneMappings(Arrays.asList(
                    new RegionInfoAvailabilityZoneMappingsItem().withAvailabilityZone("qjsdpydnfyhxdeo")
                        .withIsAvailable(false),
                    new RegionInfoAvailabilityZoneMappingsItem().withAvailabilityZone("cwif").withIsAvailable(false))),
                new RegionInfoResourceInner().withStorageToNetworkProximity(RegionStorageToNetworkProximity.T1AND_T2)
                    .withAvailabilityZoneMappings(Arrays.asList(
                        new RegionInfoAvailabilityZoneMappingsItem().withAvailabilityZone("ankixzbinjeput")
                            .withIsAvailable(false),
                        new RegionInfoAvailabilityZoneMappingsItem().withAvailabilityZone("wnuzoqftiyqzrnkc")
                            .withIsAvailable(false),
                        new RegionInfoAvailabilityZoneMappingsItem().withAvailabilityZone("lwh").withIsAvailable(true),
                        new RegionInfoAvailabilityZoneMappingsItem().withAvailabilityZone("cohoq")
                            .withIsAvailable(false))),
                new RegionInfoResourceInner().withStorageToNetworkProximity(RegionStorageToNetworkProximity.T2)
                    .withAvailabilityZoneMappings(Arrays.asList(
                        new RegionInfoAvailabilityZoneMappingsItem().withAvailabilityZone("uconuqszfkbey")
                            .withIsAvailable(true),
                        new RegionInfoAvailabilityZoneMappingsItem().withAvailabilityZone("mjmwvvjektcx")
                            .withIsAvailable(true))),
                new RegionInfoResourceInner().withStorageToNetworkProximity(RegionStorageToNetworkProximity.T2)
                    .withAvailabilityZoneMappings(Arrays.asList(
                        new RegionInfoAvailabilityZoneMappingsItem().withAvailabilityZone("nkymuctqhjfbebrj")
                            .withIsAvailable(true),
                        new RegionInfoAvailabilityZoneMappingsItem().withAvailabilityZone("fuwutttxf")
                            .withIsAvailable(false),
                        new RegionInfoAvailabilityZoneMappingsItem().withAvailabilityZone("i").withIsAvailable(true)))))
            .withNextLink("ujqgidok");
        model = BinaryData.fromObject(model).toObject(RegionInfosList.class);
        Assertions.assertEquals(RegionStorageToNetworkProximity.T1AND_T2AND_ACROSS_T2,
            model.value().get(0).storageToNetworkProximity());
        Assertions.assertEquals("qjsdpydnfyhxdeo",
            model.value().get(0).availabilityZoneMappings().get(0).availabilityZone());
        Assertions.assertEquals(false, model.value().get(0).availabilityZoneMappings().get(0).isAvailable());
        Assertions.assertEquals("ujqgidok", model.nextLink());
    }
}
