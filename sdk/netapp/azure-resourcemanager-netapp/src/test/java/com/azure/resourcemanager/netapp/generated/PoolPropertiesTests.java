// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.netapp.fluent.models.PoolProperties;
import com.azure.resourcemanager.netapp.models.EncryptionType;
import com.azure.resourcemanager.netapp.models.QosType;
import com.azure.resourcemanager.netapp.models.ServiceLevel;
import org.junit.jupiter.api.Assertions;

public final class PoolPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PoolProperties model = BinaryData.fromString(
            "{\"poolId\":\"kv\",\"size\":989086550960883148,\"serviceLevel\":\"Ultra\",\"provisioningState\":\"qkrhahvljua\",\"totalThroughputMibps\":69.46674,\"utilizedThroughputMibps\":50.34383,\"qosType\":\"Auto\",\"coolAccess\":false,\"encryptionType\":\"Double\"}")
            .toObject(PoolProperties.class);
        Assertions.assertEquals(989086550960883148L, model.size());
        Assertions.assertEquals(ServiceLevel.ULTRA, model.serviceLevel());
        Assertions.assertEquals(QosType.AUTO, model.qosType());
        Assertions.assertEquals(false, model.coolAccess());
        Assertions.assertEquals(EncryptionType.DOUBLE, model.encryptionType());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PoolProperties model = new PoolProperties().withSize(989086550960883148L).withServiceLevel(ServiceLevel.ULTRA)
            .withQosType(QosType.AUTO).withCoolAccess(false).withEncryptionType(EncryptionType.DOUBLE);
        model = BinaryData.fromObject(model).toObject(PoolProperties.class);
        Assertions.assertEquals(989086550960883148L, model.size());
        Assertions.assertEquals(ServiceLevel.ULTRA, model.serviceLevel());
        Assertions.assertEquals(QosType.AUTO, model.qosType());
        Assertions.assertEquals(false, model.coolAccess());
        Assertions.assertEquals(EncryptionType.DOUBLE, model.encryptionType());
    }
}
