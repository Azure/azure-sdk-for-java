// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.netapp.fluent.models.BucketProperties;
import com.azure.resourcemanager.netapp.models.BucketPermissions;
import com.azure.resourcemanager.netapp.models.BucketServerProperties;
import com.azure.resourcemanager.netapp.models.CifsUser;
import com.azure.resourcemanager.netapp.models.FileSystemUser;
import com.azure.resourcemanager.netapp.models.NfsUser;
import org.junit.jupiter.api.Assertions;

public final class BucketPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        BucketProperties model = BinaryData.fromString(
            "{\"path\":\"nwy\",\"fileSystemUser\":{\"nfsUser\":{\"userId\":2401123487237665785,\"groupId\":9080277930297911514},\"cifsUser\":{\"username\":\"aawzqadfl\"}},\"provisioningState\":\"Succeeded\",\"status\":\"CredentialsExpired\",\"server\":{\"fqdn\":\"aecxndtic\",\"certificateCommonName\":\"pvz\",\"certificateExpiryDate\":\"2021-12-05T05:29:15Z\",\"ipAddress\":\"mldgxobfirc\",\"certificateObject\":\"pkc\"},\"permissions\":\"ReadOnly\"}")
            .toObject(BucketProperties.class);
        Assertions.assertEquals("nwy", model.path());
        Assertions.assertEquals(2401123487237665785L, model.fileSystemUser().nfsUser().userId());
        Assertions.assertEquals(9080277930297911514L, model.fileSystemUser().nfsUser().groupId());
        Assertions.assertEquals("aawzqadfl", model.fileSystemUser().cifsUser().username());
        Assertions.assertEquals("aecxndtic", model.server().fqdn());
        Assertions.assertEquals("pkc", model.server().certificateObject());
        Assertions.assertEquals(BucketPermissions.READ_ONLY, model.permissions());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        BucketProperties model = new BucketProperties().withPath("nwy")
            .withFileSystemUser(new FileSystemUser()
                .withNfsUser(new NfsUser().withUserId(2401123487237665785L).withGroupId(9080277930297911514L))
                .withCifsUser(new CifsUser().withUsername("aawzqadfl")))
            .withServer(new BucketServerProperties().withFqdn("aecxndtic").withCertificateObject("pkc"))
            .withPermissions(BucketPermissions.READ_ONLY);
        model = BinaryData.fromObject(model).toObject(BucketProperties.class);
        Assertions.assertEquals("nwy", model.path());
        Assertions.assertEquals(2401123487237665785L, model.fileSystemUser().nfsUser().userId());
        Assertions.assertEquals(9080277930297911514L, model.fileSystemUser().nfsUser().groupId());
        Assertions.assertEquals("aawzqadfl", model.fileSystemUser().cifsUser().username());
        Assertions.assertEquals("aecxndtic", model.server().fqdn());
        Assertions.assertEquals("pkc", model.server().certificateObject());
        Assertions.assertEquals(BucketPermissions.READ_ONLY, model.permissions());
    }
}
