// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.netapp.models.ChownMode;
import com.azure.resourcemanager.netapp.models.ExportPolicyRule;
import com.azure.resourcemanager.netapp.models.VolumePropertiesExportPolicy;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class VolumePropertiesExportPolicyTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        VolumePropertiesExportPolicy model = BinaryData.fromString(
            "{\"rules\":[{\"ruleIndex\":1248197676,\"unixReadOnly\":false,\"unixReadWrite\":true,\"kerberos5ReadOnly\":true,\"kerberos5ReadWrite\":true,\"kerberos5iReadOnly\":true,\"kerberos5iReadWrite\":false,\"kerberos5pReadOnly\":true,\"kerberos5pReadWrite\":true,\"cifs\":false,\"nfsv3\":true,\"nfsv41\":true,\"allowedClients\":\"lixhnrztfol\",\"hasRootAccess\":true,\"chownMode\":\"Unrestricted\"},{\"ruleIndex\":2006567111,\"unixReadOnly\":false,\"unixReadWrite\":false,\"kerberos5ReadOnly\":false,\"kerberos5ReadWrite\":true,\"kerberos5iReadOnly\":true,\"kerberos5iReadWrite\":true,\"kerberos5pReadOnly\":true,\"kerberos5pReadWrite\":false,\"cifs\":true,\"nfsv3\":false,\"nfsv41\":false,\"allowedClients\":\"igvpgylg\",\"hasRootAccess\":true,\"chownMode\":\"Unrestricted\"}]}")
            .toObject(VolumePropertiesExportPolicy.class);
        Assertions.assertEquals(1248197676, model.rules().get(0).ruleIndex());
        Assertions.assertEquals(false, model.rules().get(0).unixReadOnly());
        Assertions.assertEquals(true, model.rules().get(0).unixReadWrite());
        Assertions.assertEquals(true, model.rules().get(0).kerberos5ReadOnly());
        Assertions.assertEquals(true, model.rules().get(0).kerberos5ReadWrite());
        Assertions.assertEquals(true, model.rules().get(0).kerberos5IReadOnly());
        Assertions.assertEquals(false, model.rules().get(0).kerberos5IReadWrite());
        Assertions.assertEquals(true, model.rules().get(0).kerberos5PReadOnly());
        Assertions.assertEquals(true, model.rules().get(0).kerberos5PReadWrite());
        Assertions.assertEquals(false, model.rules().get(0).cifs());
        Assertions.assertEquals(true, model.rules().get(0).nfsv3());
        Assertions.assertEquals(true, model.rules().get(0).nfsv41());
        Assertions.assertEquals("lixhnrztfol", model.rules().get(0).allowedClients());
        Assertions.assertEquals(true, model.rules().get(0).hasRootAccess());
        Assertions.assertEquals(ChownMode.UNRESTRICTED, model.rules().get(0).chownMode());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        VolumePropertiesExportPolicy model = new VolumePropertiesExportPolicy().withRules(Arrays.asList(
            new ExportPolicyRule().withRuleIndex(1248197676)
                .withUnixReadOnly(false)
                .withUnixReadWrite(true)
                .withKerberos5ReadOnly(true)
                .withKerberos5ReadWrite(true)
                .withKerberos5IReadOnly(true)
                .withKerberos5IReadWrite(false)
                .withKerberos5PReadOnly(true)
                .withKerberos5PReadWrite(true)
                .withCifs(false)
                .withNfsv3(true)
                .withNfsv41(true)
                .withAllowedClients("lixhnrztfol")
                .withHasRootAccess(true)
                .withChownMode(ChownMode.UNRESTRICTED),
            new ExportPolicyRule().withRuleIndex(2006567111)
                .withUnixReadOnly(false)
                .withUnixReadWrite(false)
                .withKerberos5ReadOnly(false)
                .withKerberos5ReadWrite(true)
                .withKerberos5IReadOnly(true)
                .withKerberos5IReadWrite(true)
                .withKerberos5PReadOnly(true)
                .withKerberos5PReadWrite(false)
                .withCifs(true)
                .withNfsv3(false)
                .withNfsv41(false)
                .withAllowedClients("igvpgylg")
                .withHasRootAccess(true)
                .withChownMode(ChownMode.UNRESTRICTED)));
        model = BinaryData.fromObject(model).toObject(VolumePropertiesExportPolicy.class);
        Assertions.assertEquals(1248197676, model.rules().get(0).ruleIndex());
        Assertions.assertEquals(false, model.rules().get(0).unixReadOnly());
        Assertions.assertEquals(true, model.rules().get(0).unixReadWrite());
        Assertions.assertEquals(true, model.rules().get(0).kerberos5ReadOnly());
        Assertions.assertEquals(true, model.rules().get(0).kerberos5ReadWrite());
        Assertions.assertEquals(true, model.rules().get(0).kerberos5IReadOnly());
        Assertions.assertEquals(false, model.rules().get(0).kerberos5IReadWrite());
        Assertions.assertEquals(true, model.rules().get(0).kerberos5PReadOnly());
        Assertions.assertEquals(true, model.rules().get(0).kerberos5PReadWrite());
        Assertions.assertEquals(false, model.rules().get(0).cifs());
        Assertions.assertEquals(true, model.rules().get(0).nfsv3());
        Assertions.assertEquals(true, model.rules().get(0).nfsv41());
        Assertions.assertEquals("lixhnrztfol", model.rules().get(0).allowedClients());
        Assertions.assertEquals(true, model.rules().get(0).hasRootAccess());
        Assertions.assertEquals(ChownMode.UNRESTRICTED, model.rules().get(0).chownMode());
    }
}
