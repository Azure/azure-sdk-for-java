// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.netapp.NetAppFilesManager;
import com.azure.resourcemanager.netapp.models.CapacityPool;
import com.azure.resourcemanager.netapp.models.EncryptionType;
import com.azure.resourcemanager.netapp.models.QosType;
import com.azure.resourcemanager.netapp.models.ServiceLevel;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class PoolsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"etag\":\"fuojrngif\",\"properties\":{\"poolId\":\"z\",\"size\":8761692939426802425,\"serviceLevel\":\"Ultra\",\"provisioningState\":\"Succeeded\",\"totalThroughputMibps\":47.9407,\"utilizedThroughputMibps\":9.529722,\"customThroughputMibps\":40.48493,\"qosType\":\"Manual\",\"coolAccess\":false,\"encryptionType\":\"Single\"},\"location\":\"lzo\",\"tags\":{\"dgug\":\"ctfnmdxotng\"},\"id\":\"yzihgrkyuizabsn\",\"name\":\"fpphoj\",\"type\":\"evy\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        NetAppFilesManager manager = NetAppFilesManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        CapacityPool response = manager.pools()
            .define("xkjibnxmy")
            .withRegion("wmqs")
            .withExistingNetAppAccount("tybbwwpgda", "chzyvlixqnrk")
            .withSize(8488562628713523190L)
            .withServiceLevel(ServiceLevel.FLEXIBLE)
            .withTags(mapOf("ctddun", "dqzh", "pchrqbn", "ndy", "gydcw", "jrcg"))
            .withCustomThroughputMibps(59.372757F)
            .withQosType(QosType.MANUAL)
            .withCoolAccess(false)
            .withEncryptionType(EncryptionType.SINGLE)
            .create();

        Assertions.assertEquals("lzo", response.location());
        Assertions.assertEquals("ctfnmdxotng", response.tags().get("dgug"));
        Assertions.assertEquals(8761692939426802425L, response.size());
        Assertions.assertEquals(ServiceLevel.ULTRA, response.serviceLevel());
        Assertions.assertEquals(40.48493F, response.customThroughputMibps());
        Assertions.assertEquals(QosType.MANUAL, response.qosType());
        Assertions.assertFalse(response.coolAccess());
        Assertions.assertEquals(EncryptionType.SINGLE, response.encryptionType());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
