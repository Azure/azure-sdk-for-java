// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.netapp.models.CapacityPoolPatch;
import com.azure.resourcemanager.netapp.models.QosType;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class CapacityPoolPatchTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CapacityPoolPatch model = BinaryData.fromString(
            "{\"properties\":{\"size\":6983403361765190016,\"qosType\":\"Auto\",\"coolAccess\":false,\"customThroughputMibps\":96.34032},\"location\":\"e\",\"tags\":{\"ali\":\"wkz\"},\"id\":\"urqhaka\",\"name\":\"hashsfwxosow\",\"type\":\"xcug\"}")
            .toObject(CapacityPoolPatch.class);
        Assertions.assertEquals("e", model.location());
        Assertions.assertEquals("wkz", model.tags().get("ali"));
        Assertions.assertEquals(6983403361765190016L, model.size());
        Assertions.assertEquals(QosType.AUTO, model.qosType());
        Assertions.assertFalse(model.coolAccess());
        Assertions.assertEquals(96.34032F, model.customThroughputMibps());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CapacityPoolPatch model = new CapacityPoolPatch().withLocation("e")
            .withTags(mapOf("ali", "wkz"))
            .withSize(6983403361765190016L)
            .withQosType(QosType.AUTO)
            .withCoolAccess(false)
            .withCustomThroughputMibps(96.34032F);
        model = BinaryData.fromObject(model).toObject(CapacityPoolPatch.class);
        Assertions.assertEquals("e", model.location());
        Assertions.assertEquals("wkz", model.tags().get("ali"));
        Assertions.assertEquals(6983403361765190016L, model.size());
        Assertions.assertEquals(QosType.AUTO, model.qosType());
        Assertions.assertFalse(model.coolAccess());
        Assertions.assertEquals(96.34032F, model.customThroughputMibps());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
