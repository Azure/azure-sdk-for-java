// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.netapp.models.CapacityPoolPatch;
import com.azure.resourcemanager.netapp.models.QosType;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class CapacityPoolPatchTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CapacityPoolPatch model = BinaryData.fromString(
            "{\"properties\":{\"size\":5410192401023595008,\"qosType\":\"Manual\",\"coolAccess\":true},\"location\":\"ftguv\",\"tags\":{\"qtayri\":\"hprwmdyv\",\"bycnojvkn\":\"wroyqbexrmcq\",\"qsgzvahapj\":\"e\"},\"id\":\"zhpvgqzcjrvxd\",\"name\":\"zlmwlxkvugfhz\",\"type\":\"vawjvzunlu\"}")
            .toObject(CapacityPoolPatch.class);
        Assertions.assertEquals("ftguv", model.location());
        Assertions.assertEquals("hprwmdyv", model.tags().get("qtayri"));
        Assertions.assertEquals(5410192401023595008L, model.size());
        Assertions.assertEquals(QosType.MANUAL, model.qosType());
        Assertions.assertTrue(model.coolAccess());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CapacityPoolPatch model = new CapacityPoolPatch().withLocation("ftguv")
            .withTags(mapOf("qtayri", "hprwmdyv", "bycnojvkn", "wroyqbexrmcq", "qsgzvahapj", "e"))
            .withSize(5410192401023595008L)
            .withQosType(QosType.MANUAL)
            .withCoolAccess(true);
        model = BinaryData.fromObject(model).toObject(CapacityPoolPatch.class);
        Assertions.assertEquals("ftguv", model.location());
        Assertions.assertEquals("hprwmdyv", model.tags().get("qtayri"));
        Assertions.assertEquals(5410192401023595008L, model.size());
        Assertions.assertEquals(QosType.MANUAL, model.qosType());
        Assertions.assertTrue(model.coolAccess());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
