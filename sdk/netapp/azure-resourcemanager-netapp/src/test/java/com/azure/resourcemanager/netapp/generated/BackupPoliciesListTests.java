// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.netapp.fluent.models.BackupPolicyInner;
import com.azure.resourcemanager.netapp.models.BackupPoliciesList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class BackupPoliciesListTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        BackupPoliciesList model = BinaryData.fromString(
            "{\"value\":[{\"etag\":\"dut\",\"properties\":{\"backupPolicyId\":\"ormrlxqtvcofudfl\",\"provisioningState\":\"gj\",\"dailyBackupsToKeep\":1622767746,\"weeklyBackupsToKeep\":310195791,\"monthlyBackupsToKeep\":612947091,\"volumesAssigned\":1588096441,\"enabled\":true,\"volumeBackups\":[{\"volumeName\":\"n\",\"volumeResourceId\":\"rudsg\",\"backupsCount\":760670144,\"policyEnabled\":true},{\"volumeName\":\"c\",\"volumeResourceId\":\"auwjuetaebu\",\"backupsCount\":1406520561,\"policyEnabled\":true},{\"volumeName\":\"vsmzlxwab\",\"volumeResourceId\":\"oefki\",\"backupsCount\":841009999,\"policyEnabled\":true},{\"volumeName\":\"qujmqlgkf\",\"volumeResourceId\":\"ndo\",\"backupsCount\":146248988,\"policyEnabled\":true}]},\"location\":\"cn\",\"tags\":{\"c\":\"i\",\"twwaezkojvdcpzf\":\"ed\",\"foxciq\":\"qouicybxarzgsz\",\"doamciodhkha\":\"p\"},\"id\":\"xkhnzbonlwnto\",\"name\":\"gokdwbwhks\",\"type\":\"zcmrvexztvb\"},{\"etag\":\"gsfraoyzkoow\",\"properties\":{\"backupPolicyId\":\"mnguxawqaldsyu\",\"provisioningState\":\"imerqfobwyznk\",\"dailyBackupsToKeep\":1383706321,\"weeklyBackupsToKeep\":189482477,\"monthlyBackupsToKeep\":2069495604,\"volumesAssigned\":1229081734,\"enabled\":false,\"volumeBackups\":[{\"volumeName\":\"r\",\"volumeResourceId\":\"dsnfdsdoakgtdl\",\"backupsCount\":1535187364,\"policyEnabled\":false}]},\"location\":\"dlhewp\",\"tags\":{\"dcngqqmoakufgmj\":\"sttwvogvbbe\",\"grtwae\":\"rwr\"},\"id\":\"u\",\"name\":\"zkopb\",\"type\":\"inrfdwoyu\"},{\"etag\":\"ziuiefozbhdm\",\"properties\":{\"backupPolicyId\":\"l\",\"provisioningState\":\"qhoftrmaequiah\",\"dailyBackupsToKeep\":1867167840,\"weeklyBackupsToKeep\":1714280581,\"monthlyBackupsToKeep\":1274843530,\"volumesAssigned\":1615859989,\"enabled\":true,\"volumeBackups\":[{\"volumeName\":\"lhalnswh\",\"volumeResourceId\":\"sp\",\"backupsCount\":896458989,\"policyEnabled\":true},{\"volumeName\":\"itqscywuggwoluhc\",\"volumeResourceId\":\"wem\",\"backupsCount\":19957652,\"policyEnabled\":false},{\"volumeName\":\"rgzdwmsweyp\",\"volumeResourceId\":\"dxggicccnxqhuexm\",\"backupsCount\":735026566,\"policyEnabled\":true},{\"volumeName\":\"vlz\",\"volumeResourceId\":\"emhzrncsdtc\",\"backupsCount\":1367209105,\"policyEnabled\":true}]},\"location\":\"bsfgytguslfea\",\"tags\":{\"kyhejhzisxgf\":\"gq\",\"raehtwdwrft\":\"elolppvksrpqvuj\",\"rcdlbhshfwpr\":\"wib\"},\"id\":\"cstwity\",\"name\":\"hevxcced\",\"type\":\"pnmdyodnwzxltjcv\"}]}")
            .toObject(BackupPoliciesList.class);
        Assertions.assertEquals("cn", model.value().get(0).location());
        Assertions.assertEquals("i", model.value().get(0).tags().get("c"));
        Assertions.assertEquals(1622767746, model.value().get(0).dailyBackupsToKeep());
        Assertions.assertEquals(310195791, model.value().get(0).weeklyBackupsToKeep());
        Assertions.assertEquals(612947091, model.value().get(0).monthlyBackupsToKeep());
        Assertions.assertTrue(model.value().get(0).enabled());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        BackupPoliciesList model
            = new BackupPoliciesList()
                .withValue(
                    Arrays.asList(
                        new BackupPolicyInner().withLocation("cn")
                            .withTags(mapOf("c", "i", "twwaezkojvdcpzf", "ed", "foxciq", "qouicybxarzgsz",
                                "doamciodhkha", "p"))
                            .withDailyBackupsToKeep(1622767746)
                            .withWeeklyBackupsToKeep(310195791)
                            .withMonthlyBackupsToKeep(612947091)
                            .withEnabled(true),
                        new BackupPolicyInner().withLocation("dlhewp")
                            .withTags(mapOf("dcngqqmoakufgmj", "sttwvogvbbe", "grtwae", "rwr"))
                            .withDailyBackupsToKeep(1383706321)
                            .withWeeklyBackupsToKeep(189482477)
                            .withMonthlyBackupsToKeep(2069495604)
                            .withEnabled(false),
                        new BackupPolicyInner().withLocation("bsfgytguslfea")
                            .withTags(
                                mapOf("kyhejhzisxgf", "gq", "raehtwdwrft", "elolppvksrpqvuj", "rcdlbhshfwpr", "wib"))
                            .withDailyBackupsToKeep(1867167840)
                            .withWeeklyBackupsToKeep(1714280581)
                            .withMonthlyBackupsToKeep(1274843530)
                            .withEnabled(true)));
        model = BinaryData.fromObject(model).toObject(BackupPoliciesList.class);
        Assertions.assertEquals("cn", model.value().get(0).location());
        Assertions.assertEquals("i", model.value().get(0).tags().get("c"));
        Assertions.assertEquals(1622767746, model.value().get(0).dailyBackupsToKeep());
        Assertions.assertEquals(310195791, model.value().get(0).weeklyBackupsToKeep());
        Assertions.assertEquals(612947091, model.value().get(0).monthlyBackupsToKeep());
        Assertions.assertTrue(model.value().get(0).enabled());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
