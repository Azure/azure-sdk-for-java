// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.netapp.fluent.models.VolumePatchProperties;
import com.azure.resourcemanager.netapp.models.ChownMode;
import com.azure.resourcemanager.netapp.models.CoolAccessRetrievalPolicy;
import com.azure.resourcemanager.netapp.models.ExportPolicyRule;
import com.azure.resourcemanager.netapp.models.ServiceLevel;
import com.azure.resourcemanager.netapp.models.SmbAccessBasedEnumeration;
import com.azure.resourcemanager.netapp.models.SmbNonBrowsable;
import com.azure.resourcemanager.netapp.models.VolumeBackupProperties;
import com.azure.resourcemanager.netapp.models.VolumePatchPropertiesDataProtection;
import com.azure.resourcemanager.netapp.models.VolumePatchPropertiesExportPolicy;
import com.azure.resourcemanager.netapp.models.VolumeSnapshotProperties;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class VolumePatchPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        VolumePatchProperties model = BinaryData.fromString(
            "{\"serviceLevel\":\"Premium\",\"usageThreshold\":6214959618688242083,\"exportPolicy\":{\"rules\":[{\"ruleIndex\":1505312683,\"unixReadOnly\":false,\"unixReadWrite\":false,\"kerberos5ReadOnly\":true,\"kerberos5ReadWrite\":false,\"kerberos5iReadOnly\":false,\"kerberos5iReadWrite\":true,\"kerberos5pReadOnly\":true,\"kerberos5pReadWrite\":false,\"cifs\":false,\"nfsv3\":true,\"nfsv41\":true,\"allowedClients\":\"tiiswacffg\",\"hasRootAccess\":true,\"chownMode\":\"Unrestricted\"},{\"ruleIndex\":1258640156,\"unixReadOnly\":false,\"unixReadWrite\":true,\"kerberos5ReadOnly\":true,\"kerberos5ReadWrite\":true,\"kerberos5iReadOnly\":false,\"kerberos5iReadWrite\":false,\"kerberos5pReadOnly\":false,\"kerberos5pReadWrite\":false,\"cifs\":true,\"nfsv3\":true,\"nfsv41\":false,\"allowedClients\":\"dlxyjrxs\",\"hasRootAccess\":false,\"chownMode\":\"Unrestricted\"},{\"ruleIndex\":1665526827,\"unixReadOnly\":false,\"unixReadWrite\":true,\"kerberos5ReadOnly\":false,\"kerberos5ReadWrite\":true,\"kerberos5iReadOnly\":false,\"kerberos5iReadWrite\":true,\"kerberos5pReadOnly\":true,\"kerberos5pReadWrite\":true,\"cifs\":false,\"nfsv3\":true,\"nfsv41\":false,\"allowedClients\":\"dcvd\",\"hasRootAccess\":false,\"chownMode\":\"Unrestricted\"}]},\"protocolTypes\":[\"otbobzdopcj\",\"vnhdldwmgxcxr\"],\"throughputMibps\":40.924366,\"dataProtection\":{\"backup\":{\"backupPolicyId\":\"wuoegrpk\",\"policyEnforced\":true,\"backupVaultId\":\"iyq\"},\"snapshot\":{\"snapshotPolicyId\":\"i\"}},\"isDefaultQuotaEnabled\":true,\"defaultUserQuotaInKiBs\":1543596458273044776,\"defaultGroupQuotaInKiBs\":2246531138644222618,\"unixPermissions\":\"mbmpaxmodfvuefy\",\"coolAccess\":false,\"coolnessPeriod\":1288756278,\"coolAccessRetrievalPolicy\":\"OnRead\",\"snapshotDirectoryVisible\":true,\"smbAccessBasedEnumeration\":\"Enabled\",\"smbNonBrowsable\":\"Enabled\"}")
            .toObject(VolumePatchProperties.class);
        Assertions.assertEquals(ServiceLevel.PREMIUM, model.serviceLevel());
        Assertions.assertEquals(6214959618688242083L, model.usageThreshold());
        Assertions.assertEquals(1505312683, model.exportPolicy().rules().get(0).ruleIndex());
        Assertions.assertEquals(false, model.exportPolicy().rules().get(0).unixReadOnly());
        Assertions.assertEquals(false, model.exportPolicy().rules().get(0).unixReadWrite());
        Assertions.assertEquals(true, model.exportPolicy().rules().get(0).kerberos5ReadOnly());
        Assertions.assertEquals(false, model.exportPolicy().rules().get(0).kerberos5ReadWrite());
        Assertions.assertEquals(false, model.exportPolicy().rules().get(0).kerberos5IReadOnly());
        Assertions.assertEquals(true, model.exportPolicy().rules().get(0).kerberos5IReadWrite());
        Assertions.assertEquals(true, model.exportPolicy().rules().get(0).kerberos5PReadOnly());
        Assertions.assertEquals(false, model.exportPolicy().rules().get(0).kerberos5PReadWrite());
        Assertions.assertEquals(false, model.exportPolicy().rules().get(0).cifs());
        Assertions.assertEquals(true, model.exportPolicy().rules().get(0).nfsv3());
        Assertions.assertEquals(true, model.exportPolicy().rules().get(0).nfsv41());
        Assertions.assertEquals("tiiswacffg", model.exportPolicy().rules().get(0).allowedClients());
        Assertions.assertEquals(true, model.exportPolicy().rules().get(0).hasRootAccess());
        Assertions.assertEquals(ChownMode.UNRESTRICTED, model.exportPolicy().rules().get(0).chownMode());
        Assertions.assertEquals("otbobzdopcj", model.protocolTypes().get(0));
        Assertions.assertEquals(40.924366F, model.throughputMibps());
        Assertions.assertEquals("wuoegrpk", model.dataProtection().backup().backupPolicyId());
        Assertions.assertEquals(true, model.dataProtection().backup().policyEnforced());
        Assertions.assertEquals("iyq", model.dataProtection().backup().backupVaultId());
        Assertions.assertEquals("i", model.dataProtection().snapshot().snapshotPolicyId());
        Assertions.assertEquals(true, model.isDefaultQuotaEnabled());
        Assertions.assertEquals(1543596458273044776L, model.defaultUserQuotaInKiBs());
        Assertions.assertEquals(2246531138644222618L, model.defaultGroupQuotaInKiBs());
        Assertions.assertEquals("mbmpaxmodfvuefy", model.unixPermissions());
        Assertions.assertEquals(false, model.coolAccess());
        Assertions.assertEquals(1288756278, model.coolnessPeriod());
        Assertions.assertEquals(CoolAccessRetrievalPolicy.ON_READ, model.coolAccessRetrievalPolicy());
        Assertions.assertEquals(true, model.snapshotDirectoryVisible());
        Assertions.assertEquals(SmbAccessBasedEnumeration.ENABLED, model.smbAccessBasedEnumeration());
        Assertions.assertEquals(SmbNonBrowsable.ENABLED, model.smbNonBrowsable());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        VolumePatchProperties model
            = new VolumePatchProperties().withServiceLevel(ServiceLevel.PREMIUM)
                .withUsageThreshold(6214959618688242083L)
                .withExportPolicy(new VolumePatchPropertiesExportPolicy().withRules(Arrays.asList(
                    new ExportPolicyRule().withRuleIndex(1505312683)
                        .withUnixReadOnly(false)
                        .withUnixReadWrite(false)
                        .withKerberos5ReadOnly(true)
                        .withKerberos5ReadWrite(false)
                        .withKerberos5IReadOnly(false)
                        .withKerberos5IReadWrite(true)
                        .withKerberos5PReadOnly(true)
                        .withKerberos5PReadWrite(false)
                        .withCifs(false)
                        .withNfsv3(true)
                        .withNfsv41(true)
                        .withAllowedClients("tiiswacffg")
                        .withHasRootAccess(true)
                        .withChownMode(ChownMode.UNRESTRICTED),
                    new ExportPolicyRule().withRuleIndex(1258640156)
                        .withUnixReadOnly(false)
                        .withUnixReadWrite(true)
                        .withKerberos5ReadOnly(true)
                        .withKerberos5ReadWrite(true)
                        .withKerberos5IReadOnly(false)
                        .withKerberos5IReadWrite(false)
                        .withKerberos5PReadOnly(false)
                        .withKerberos5PReadWrite(false)
                        .withCifs(true)
                        .withNfsv3(true)
                        .withNfsv41(false)
                        .withAllowedClients("dlxyjrxs")
                        .withHasRootAccess(false)
                        .withChownMode(ChownMode.UNRESTRICTED),
                    new ExportPolicyRule().withRuleIndex(1665526827)
                        .withUnixReadOnly(false)
                        .withUnixReadWrite(true)
                        .withKerberos5ReadOnly(false)
                        .withKerberos5ReadWrite(true)
                        .withKerberos5IReadOnly(false)
                        .withKerberos5IReadWrite(true)
                        .withKerberos5PReadOnly(true)
                        .withKerberos5PReadWrite(true)
                        .withCifs(false)
                        .withNfsv3(true)
                        .withNfsv41(false)
                        .withAllowedClients("dcvd")
                        .withHasRootAccess(false)
                        .withChownMode(ChownMode.UNRESTRICTED))))
                .withProtocolTypes(Arrays.asList("otbobzdopcj", "vnhdldwmgxcxr"))
                .withThroughputMibps(40.924366F)
                .withDataProtection(new VolumePatchPropertiesDataProtection()
                    .withBackup(new VolumeBackupProperties().withBackupPolicyId("wuoegrpk")
                        .withPolicyEnforced(true)
                        .withBackupVaultId("iyq"))
                    .withSnapshot(new VolumeSnapshotProperties().withSnapshotPolicyId("i")))
                .withIsDefaultQuotaEnabled(true)
                .withDefaultUserQuotaInKiBs(1543596458273044776L)
                .withDefaultGroupQuotaInKiBs(2246531138644222618L)
                .withUnixPermissions("mbmpaxmodfvuefy")
                .withCoolAccess(false)
                .withCoolnessPeriod(1288756278)
                .withCoolAccessRetrievalPolicy(CoolAccessRetrievalPolicy.ON_READ)
                .withSnapshotDirectoryVisible(true)
                .withSmbAccessBasedEnumeration(SmbAccessBasedEnumeration.ENABLED)
                .withSmbNonBrowsable(SmbNonBrowsable.ENABLED);
        model = BinaryData.fromObject(model).toObject(VolumePatchProperties.class);
        Assertions.assertEquals(ServiceLevel.PREMIUM, model.serviceLevel());
        Assertions.assertEquals(6214959618688242083L, model.usageThreshold());
        Assertions.assertEquals(1505312683, model.exportPolicy().rules().get(0).ruleIndex());
        Assertions.assertEquals(false, model.exportPolicy().rules().get(0).unixReadOnly());
        Assertions.assertEquals(false, model.exportPolicy().rules().get(0).unixReadWrite());
        Assertions.assertEquals(true, model.exportPolicy().rules().get(0).kerberos5ReadOnly());
        Assertions.assertEquals(false, model.exportPolicy().rules().get(0).kerberos5ReadWrite());
        Assertions.assertEquals(false, model.exportPolicy().rules().get(0).kerberos5IReadOnly());
        Assertions.assertEquals(true, model.exportPolicy().rules().get(0).kerberos5IReadWrite());
        Assertions.assertEquals(true, model.exportPolicy().rules().get(0).kerberos5PReadOnly());
        Assertions.assertEquals(false, model.exportPolicy().rules().get(0).kerberos5PReadWrite());
        Assertions.assertEquals(false, model.exportPolicy().rules().get(0).cifs());
        Assertions.assertEquals(true, model.exportPolicy().rules().get(0).nfsv3());
        Assertions.assertEquals(true, model.exportPolicy().rules().get(0).nfsv41());
        Assertions.assertEquals("tiiswacffg", model.exportPolicy().rules().get(0).allowedClients());
        Assertions.assertEquals(true, model.exportPolicy().rules().get(0).hasRootAccess());
        Assertions.assertEquals(ChownMode.UNRESTRICTED, model.exportPolicy().rules().get(0).chownMode());
        Assertions.assertEquals("otbobzdopcj", model.protocolTypes().get(0));
        Assertions.assertEquals(40.924366F, model.throughputMibps());
        Assertions.assertEquals("wuoegrpk", model.dataProtection().backup().backupPolicyId());
        Assertions.assertEquals(true, model.dataProtection().backup().policyEnforced());
        Assertions.assertEquals("iyq", model.dataProtection().backup().backupVaultId());
        Assertions.assertEquals("i", model.dataProtection().snapshot().snapshotPolicyId());
        Assertions.assertEquals(true, model.isDefaultQuotaEnabled());
        Assertions.assertEquals(1543596458273044776L, model.defaultUserQuotaInKiBs());
        Assertions.assertEquals(2246531138644222618L, model.defaultGroupQuotaInKiBs());
        Assertions.assertEquals("mbmpaxmodfvuefy", model.unixPermissions());
        Assertions.assertEquals(false, model.coolAccess());
        Assertions.assertEquals(1288756278, model.coolnessPeriod());
        Assertions.assertEquals(CoolAccessRetrievalPolicy.ON_READ, model.coolAccessRetrievalPolicy());
        Assertions.assertEquals(true, model.snapshotDirectoryVisible());
        Assertions.assertEquals(SmbAccessBasedEnumeration.ENABLED, model.smbAccessBasedEnumeration());
        Assertions.assertEquals(SmbNonBrowsable.ENABLED, model.smbNonBrowsable());
    }
}
