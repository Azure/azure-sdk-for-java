// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.netapp.fluent.models.VolumePatchProperties;
import com.azure.resourcemanager.netapp.models.ChownMode;
import com.azure.resourcemanager.netapp.models.CoolAccessRetrievalPolicy;
import com.azure.resourcemanager.netapp.models.CoolAccessTieringPolicy;
import com.azure.resourcemanager.netapp.models.ExportPolicyRule;
import com.azure.resourcemanager.netapp.models.ServiceLevel;
import com.azure.resourcemanager.netapp.models.SmbAccessBasedEnumeration;
import com.azure.resourcemanager.netapp.models.SmbNonBrowsable;
import com.azure.resourcemanager.netapp.models.VolumeBackupProperties;
import com.azure.resourcemanager.netapp.models.VolumePatchPropertiesDataProtection;
import com.azure.resourcemanager.netapp.models.VolumePatchPropertiesExportPolicy;
import com.azure.resourcemanager.netapp.models.VolumeSnapshotProperties;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class VolumePatchPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        VolumePatchProperties model = BinaryData.fromString(
            "{\"serviceLevel\":\"Ultra\",\"usageThreshold\":877746656530607911,\"exportPolicy\":{\"rules\":[{\"ruleIndex\":1995245792,\"unixReadOnly\":false,\"unixReadWrite\":false,\"kerberos5ReadOnly\":true,\"kerberos5ReadWrite\":true,\"kerberos5iReadOnly\":false,\"kerberos5iReadWrite\":true,\"kerberos5pReadOnly\":true,\"kerberos5pReadWrite\":false,\"cifs\":false,\"nfsv3\":true,\"nfsv41\":false,\"allowedClients\":\"odkwobd\",\"hasRootAccess\":true,\"chownMode\":\"Unrestricted\"},{\"ruleIndex\":1795454962,\"unixReadOnly\":false,\"unixReadWrite\":false,\"kerberos5ReadOnly\":true,\"kerberos5ReadWrite\":true,\"kerberos5iReadOnly\":true,\"kerberos5iReadWrite\":true,\"kerberos5pReadOnly\":true,\"kerberos5pReadWrite\":true,\"cifs\":true,\"nfsv3\":false,\"nfsv41\":false,\"allowedClients\":\"plbpodxun\",\"hasRootAccess\":true,\"chownMode\":\"Unrestricted\"},{\"ruleIndex\":1819295736,\"unixReadOnly\":false,\"unixReadWrite\":true,\"kerberos5ReadOnly\":true,\"kerberos5ReadWrite\":false,\"kerberos5iReadOnly\":false,\"kerberos5iReadWrite\":false,\"kerberos5pReadOnly\":true,\"kerberos5pReadWrite\":true,\"cifs\":false,\"nfsv3\":false,\"nfsv41\":false,\"allowedClients\":\"l\",\"hasRootAccess\":true,\"chownMode\":\"Unrestricted\"}]},\"protocolTypes\":[\"uwz\",\"zxb\",\"pgcjefuzmuvp\"],\"throughputMibps\":20.674778,\"dataProtection\":{\"backup\":{\"backupPolicyId\":\"orppxebmnzbtb\",\"policyEnforced\":false,\"backupVaultId\":\"lkfg\"},\"snapshot\":{\"snapshotPolicyId\":\"neuelfphsdyhtoz\"}},\"isDefaultQuotaEnabled\":false,\"defaultUserQuotaInKiBs\":1123884029466838588,\"defaultGroupQuotaInKiBs\":739493966833728448,\"unixPermissions\":\"v\",\"coolAccess\":false,\"coolnessPeriod\":1447033048,\"coolAccessRetrievalPolicy\":\"Never\",\"coolAccessTieringPolicy\":\"SnapshotOnly\",\"snapshotDirectoryVisible\":true,\"smbAccessBasedEnumeration\":\"Disabled\",\"smbNonBrowsable\":\"Disabled\"}")
            .toObject(VolumePatchProperties.class);
        Assertions.assertEquals(ServiceLevel.ULTRA, model.serviceLevel());
        Assertions.assertEquals(877746656530607911L, model.usageThreshold());
        Assertions.assertEquals(1995245792, model.exportPolicy().rules().get(0).ruleIndex());
        Assertions.assertFalse(model.exportPolicy().rules().get(0).unixReadOnly());
        Assertions.assertFalse(model.exportPolicy().rules().get(0).unixReadWrite());
        Assertions.assertTrue(model.exportPolicy().rules().get(0).kerberos5ReadOnly());
        Assertions.assertTrue(model.exportPolicy().rules().get(0).kerberos5ReadWrite());
        Assertions.assertFalse(model.exportPolicy().rules().get(0).kerberos5IReadOnly());
        Assertions.assertTrue(model.exportPolicy().rules().get(0).kerberos5IReadWrite());
        Assertions.assertTrue(model.exportPolicy().rules().get(0).kerberos5PReadOnly());
        Assertions.assertFalse(model.exportPolicy().rules().get(0).kerberos5PReadWrite());
        Assertions.assertFalse(model.exportPolicy().rules().get(0).cifs());
        Assertions.assertTrue(model.exportPolicy().rules().get(0).nfsv3());
        Assertions.assertFalse(model.exportPolicy().rules().get(0).nfsv41());
        Assertions.assertEquals("odkwobd", model.exportPolicy().rules().get(0).allowedClients());
        Assertions.assertTrue(model.exportPolicy().rules().get(0).hasRootAccess());
        Assertions.assertEquals(ChownMode.UNRESTRICTED, model.exportPolicy().rules().get(0).chownMode());
        Assertions.assertEquals("uwz", model.protocolTypes().get(0));
        Assertions.assertEquals(20.674778F, model.throughputMibps());
        Assertions.assertEquals("orppxebmnzbtb", model.dataProtection().backup().backupPolicyId());
        Assertions.assertFalse(model.dataProtection().backup().policyEnforced());
        Assertions.assertEquals("lkfg", model.dataProtection().backup().backupVaultId());
        Assertions.assertEquals("neuelfphsdyhtoz", model.dataProtection().snapshot().snapshotPolicyId());
        Assertions.assertFalse(model.isDefaultQuotaEnabled());
        Assertions.assertEquals(1123884029466838588L, model.defaultUserQuotaInKiBs());
        Assertions.assertEquals(739493966833728448L, model.defaultGroupQuotaInKiBs());
        Assertions.assertEquals("v", model.unixPermissions());
        Assertions.assertFalse(model.coolAccess());
        Assertions.assertEquals(1447033048, model.coolnessPeriod());
        Assertions.assertEquals(CoolAccessRetrievalPolicy.NEVER, model.coolAccessRetrievalPolicy());
        Assertions.assertEquals(CoolAccessTieringPolicy.SNAPSHOT_ONLY, model.coolAccessTieringPolicy());
        Assertions.assertTrue(model.snapshotDirectoryVisible());
        Assertions.assertEquals(SmbAccessBasedEnumeration.DISABLED, model.smbAccessBasedEnumeration());
        Assertions.assertEquals(SmbNonBrowsable.DISABLED, model.smbNonBrowsable());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        VolumePatchProperties model = new VolumePatchProperties().withServiceLevel(ServiceLevel.ULTRA)
            .withUsageThreshold(877746656530607911L)
            .withExportPolicy(new VolumePatchPropertiesExportPolicy().withRules(Arrays.asList(
                new ExportPolicyRule().withRuleIndex(1995245792)
                    .withUnixReadOnly(false)
                    .withUnixReadWrite(false)
                    .withKerberos5ReadOnly(true)
                    .withKerberos5ReadWrite(true)
                    .withKerberos5IReadOnly(false)
                    .withKerberos5IReadWrite(true)
                    .withKerberos5PReadOnly(true)
                    .withKerberos5PReadWrite(false)
                    .withCifs(false)
                    .withNfsv3(true)
                    .withNfsv41(false)
                    .withAllowedClients("odkwobd")
                    .withHasRootAccess(true)
                    .withChownMode(ChownMode.UNRESTRICTED),
                new ExportPolicyRule().withRuleIndex(1795454962)
                    .withUnixReadOnly(false)
                    .withUnixReadWrite(false)
                    .withKerberos5ReadOnly(true)
                    .withKerberos5ReadWrite(true)
                    .withKerberos5IReadOnly(true)
                    .withKerberos5IReadWrite(true)
                    .withKerberos5PReadOnly(true)
                    .withKerberos5PReadWrite(true)
                    .withCifs(true)
                    .withNfsv3(false)
                    .withNfsv41(false)
                    .withAllowedClients("plbpodxun")
                    .withHasRootAccess(true)
                    .withChownMode(ChownMode.UNRESTRICTED),
                new ExportPolicyRule().withRuleIndex(1819295736)
                    .withUnixReadOnly(false)
                    .withUnixReadWrite(true)
                    .withKerberos5ReadOnly(true)
                    .withKerberos5ReadWrite(false)
                    .withKerberos5IReadOnly(false)
                    .withKerberos5IReadWrite(false)
                    .withKerberos5PReadOnly(true)
                    .withKerberos5PReadWrite(true)
                    .withCifs(false)
                    .withNfsv3(false)
                    .withNfsv41(false)
                    .withAllowedClients("l")
                    .withHasRootAccess(true)
                    .withChownMode(ChownMode.UNRESTRICTED))))
            .withProtocolTypes(Arrays.asList("uwz", "zxb", "pgcjefuzmuvp"))
            .withThroughputMibps(20.674778F)
            .withDataProtection(new VolumePatchPropertiesDataProtection()
                .withBackup(new VolumeBackupProperties().withBackupPolicyId("orppxebmnzbtb")
                    .withPolicyEnforced(false)
                    .withBackupVaultId("lkfg"))
                .withSnapshot(new VolumeSnapshotProperties().withSnapshotPolicyId("neuelfphsdyhtoz")))
            .withIsDefaultQuotaEnabled(false)
            .withDefaultUserQuotaInKiBs(1123884029466838588L)
            .withDefaultGroupQuotaInKiBs(739493966833728448L)
            .withUnixPermissions("v")
            .withCoolAccess(false)
            .withCoolnessPeriod(1447033048)
            .withCoolAccessRetrievalPolicy(CoolAccessRetrievalPolicy.NEVER)
            .withCoolAccessTieringPolicy(CoolAccessTieringPolicy.SNAPSHOT_ONLY)
            .withSnapshotDirectoryVisible(true)
            .withSmbAccessBasedEnumeration(SmbAccessBasedEnumeration.DISABLED)
            .withSmbNonBrowsable(SmbNonBrowsable.DISABLED);
        model = BinaryData.fromObject(model).toObject(VolumePatchProperties.class);
        Assertions.assertEquals(ServiceLevel.ULTRA, model.serviceLevel());
        Assertions.assertEquals(877746656530607911L, model.usageThreshold());
        Assertions.assertEquals(1995245792, model.exportPolicy().rules().get(0).ruleIndex());
        Assertions.assertFalse(model.exportPolicy().rules().get(0).unixReadOnly());
        Assertions.assertFalse(model.exportPolicy().rules().get(0).unixReadWrite());
        Assertions.assertTrue(model.exportPolicy().rules().get(0).kerberos5ReadOnly());
        Assertions.assertTrue(model.exportPolicy().rules().get(0).kerberos5ReadWrite());
        Assertions.assertFalse(model.exportPolicy().rules().get(0).kerberos5IReadOnly());
        Assertions.assertTrue(model.exportPolicy().rules().get(0).kerberos5IReadWrite());
        Assertions.assertTrue(model.exportPolicy().rules().get(0).kerberos5PReadOnly());
        Assertions.assertFalse(model.exportPolicy().rules().get(0).kerberos5PReadWrite());
        Assertions.assertFalse(model.exportPolicy().rules().get(0).cifs());
        Assertions.assertTrue(model.exportPolicy().rules().get(0).nfsv3());
        Assertions.assertFalse(model.exportPolicy().rules().get(0).nfsv41());
        Assertions.assertEquals("odkwobd", model.exportPolicy().rules().get(0).allowedClients());
        Assertions.assertTrue(model.exportPolicy().rules().get(0).hasRootAccess());
        Assertions.assertEquals(ChownMode.UNRESTRICTED, model.exportPolicy().rules().get(0).chownMode());
        Assertions.assertEquals("uwz", model.protocolTypes().get(0));
        Assertions.assertEquals(20.674778F, model.throughputMibps());
        Assertions.assertEquals("orppxebmnzbtb", model.dataProtection().backup().backupPolicyId());
        Assertions.assertFalse(model.dataProtection().backup().policyEnforced());
        Assertions.assertEquals("lkfg", model.dataProtection().backup().backupVaultId());
        Assertions.assertEquals("neuelfphsdyhtoz", model.dataProtection().snapshot().snapshotPolicyId());
        Assertions.assertFalse(model.isDefaultQuotaEnabled());
        Assertions.assertEquals(1123884029466838588L, model.defaultUserQuotaInKiBs());
        Assertions.assertEquals(739493966833728448L, model.defaultGroupQuotaInKiBs());
        Assertions.assertEquals("v", model.unixPermissions());
        Assertions.assertFalse(model.coolAccess());
        Assertions.assertEquals(1447033048, model.coolnessPeriod());
        Assertions.assertEquals(CoolAccessRetrievalPolicy.NEVER, model.coolAccessRetrievalPolicy());
        Assertions.assertEquals(CoolAccessTieringPolicy.SNAPSHOT_ONLY, model.coolAccessTieringPolicy());
        Assertions.assertTrue(model.snapshotDirectoryVisible());
        Assertions.assertEquals(SmbAccessBasedEnumeration.DISABLED, model.smbAccessBasedEnumeration());
        Assertions.assertEquals(SmbNonBrowsable.DISABLED, model.smbNonBrowsable());
    }
}
