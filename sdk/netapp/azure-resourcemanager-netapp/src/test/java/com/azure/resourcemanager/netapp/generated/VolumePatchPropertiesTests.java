// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.netapp.fluent.models.VolumePatchProperties;
import com.azure.resourcemanager.netapp.models.ChownMode;
import com.azure.resourcemanager.netapp.models.CoolAccessRetrievalPolicy;
import com.azure.resourcemanager.netapp.models.CoolAccessTieringPolicy;
import com.azure.resourcemanager.netapp.models.ExportPolicyRule;
import com.azure.resourcemanager.netapp.models.ServiceLevel;
import com.azure.resourcemanager.netapp.models.SmbAccessBasedEnumeration;
import com.azure.resourcemanager.netapp.models.SmbNonBrowsable;
import com.azure.resourcemanager.netapp.models.VolumeBackupProperties;
import com.azure.resourcemanager.netapp.models.VolumePatchPropertiesDataProtection;
import com.azure.resourcemanager.netapp.models.VolumePatchPropertiesExportPolicy;
import com.azure.resourcemanager.netapp.models.VolumeSnapshotProperties;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class VolumePatchPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        VolumePatchProperties model = BinaryData.fromString(
            "{\"serviceLevel\":\"StandardZRS\",\"usageThreshold\":3173619590401188232,\"exportPolicy\":{\"rules\":[{\"ruleIndex\":498267166,\"unixReadOnly\":true,\"unixReadWrite\":false,\"kerberos5ReadOnly\":true,\"kerberos5ReadWrite\":false,\"kerberos5iReadOnly\":false,\"kerberos5iReadWrite\":false,\"kerberos5pReadOnly\":true,\"kerberos5pReadWrite\":false,\"cifs\":false,\"nfsv3\":true,\"nfsv41\":false,\"allowedClients\":\"xe\",\"hasRootAccess\":false,\"chownMode\":\"Unrestricted\"}]},\"protocolTypes\":[\"hjpglkf\",\"ohdneuel\",\"phsdyhto\",\"fikdowwqu\"],\"throughputMibps\":25.578917,\"dataProtection\":{\"backup\":{\"backupPolicyId\":\"lvithhqzonosgg\",\"policyEnforced\":false,\"backupVaultId\":\"hfwdsjnkaljutiis\"},\"snapshot\":{\"snapshotPolicyId\":\"ffgdkz\"}},\"isDefaultQuotaEnabled\":true,\"defaultUserQuotaInKiBs\":4896642944442173063,\"defaultGroupQuotaInKiBs\":7601643489481740629,\"unixPermissions\":\"a\",\"coolAccess\":false,\"coolnessPeriod\":70247298,\"coolAccessRetrievalPolicy\":\"Never\",\"coolAccessTieringPolicy\":\"Auto\",\"snapshotDirectoryVisible\":true,\"smbAccessBasedEnumeration\":\"Enabled\",\"smbNonBrowsable\":\"Disabled\"}")
            .toObject(VolumePatchProperties.class);
        Assertions.assertEquals(ServiceLevel.STANDARD_ZRS, model.serviceLevel());
        Assertions.assertEquals(3173619590401188232L, model.usageThreshold());
        Assertions.assertEquals(498267166, model.exportPolicy().rules().get(0).ruleIndex());
        Assertions.assertEquals(true, model.exportPolicy().rules().get(0).unixReadOnly());
        Assertions.assertEquals(false, model.exportPolicy().rules().get(0).unixReadWrite());
        Assertions.assertEquals(true, model.exportPolicy().rules().get(0).kerberos5ReadOnly());
        Assertions.assertEquals(false, model.exportPolicy().rules().get(0).kerberos5ReadWrite());
        Assertions.assertEquals(false, model.exportPolicy().rules().get(0).kerberos5IReadOnly());
        Assertions.assertEquals(false, model.exportPolicy().rules().get(0).kerberos5IReadWrite());
        Assertions.assertEquals(true, model.exportPolicy().rules().get(0).kerberos5PReadOnly());
        Assertions.assertEquals(false, model.exportPolicy().rules().get(0).kerberos5PReadWrite());
        Assertions.assertEquals(false, model.exportPolicy().rules().get(0).cifs());
        Assertions.assertEquals(true, model.exportPolicy().rules().get(0).nfsv3());
        Assertions.assertEquals(false, model.exportPolicy().rules().get(0).nfsv41());
        Assertions.assertEquals("xe", model.exportPolicy().rules().get(0).allowedClients());
        Assertions.assertEquals(false, model.exportPolicy().rules().get(0).hasRootAccess());
        Assertions.assertEquals(ChownMode.UNRESTRICTED, model.exportPolicy().rules().get(0).chownMode());
        Assertions.assertEquals("hjpglkf", model.protocolTypes().get(0));
        Assertions.assertEquals(25.578917F, model.throughputMibps());
        Assertions.assertEquals("lvithhqzonosgg", model.dataProtection().backup().backupPolicyId());
        Assertions.assertEquals(false, model.dataProtection().backup().policyEnforced());
        Assertions.assertEquals("hfwdsjnkaljutiis", model.dataProtection().backup().backupVaultId());
        Assertions.assertEquals("ffgdkz", model.dataProtection().snapshot().snapshotPolicyId());
        Assertions.assertEquals(true, model.isDefaultQuotaEnabled());
        Assertions.assertEquals(4896642944442173063L, model.defaultUserQuotaInKiBs());
        Assertions.assertEquals(7601643489481740629L, model.defaultGroupQuotaInKiBs());
        Assertions.assertEquals("a", model.unixPermissions());
        Assertions.assertEquals(false, model.coolAccess());
        Assertions.assertEquals(70247298, model.coolnessPeriod());
        Assertions.assertEquals(CoolAccessRetrievalPolicy.NEVER, model.coolAccessRetrievalPolicy());
        Assertions.assertEquals(CoolAccessTieringPolicy.AUTO, model.coolAccessTieringPolicy());
        Assertions.assertEquals(true, model.snapshotDirectoryVisible());
        Assertions.assertEquals(SmbAccessBasedEnumeration.ENABLED, model.smbAccessBasedEnumeration());
        Assertions.assertEquals(SmbNonBrowsable.DISABLED, model.smbNonBrowsable());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        VolumePatchProperties model = new VolumePatchProperties().withServiceLevel(ServiceLevel.STANDARD_ZRS)
            .withUsageThreshold(3173619590401188232L)
            .withExportPolicy(new VolumePatchPropertiesExportPolicy()
                .withRules(Arrays.asList(new ExportPolicyRule().withRuleIndex(498267166)
                    .withUnixReadOnly(true)
                    .withUnixReadWrite(false)
                    .withKerberos5ReadOnly(true)
                    .withKerberos5ReadWrite(false)
                    .withKerberos5IReadOnly(false)
                    .withKerberos5IReadWrite(false)
                    .withKerberos5PReadOnly(true)
                    .withKerberos5PReadWrite(false)
                    .withCifs(false)
                    .withNfsv3(true)
                    .withNfsv41(false)
                    .withAllowedClients("xe")
                    .withHasRootAccess(false)
                    .withChownMode(ChownMode.UNRESTRICTED))))
            .withProtocolTypes(Arrays.asList("hjpglkf", "ohdneuel", "phsdyhto", "fikdowwqu"))
            .withThroughputMibps(25.578917F)
            .withDataProtection(new VolumePatchPropertiesDataProtection()
                .withBackup(new VolumeBackupProperties().withBackupPolicyId("lvithhqzonosgg")
                    .withPolicyEnforced(false)
                    .withBackupVaultId("hfwdsjnkaljutiis"))
                .withSnapshot(new VolumeSnapshotProperties().withSnapshotPolicyId("ffgdkz")))
            .withIsDefaultQuotaEnabled(true)
            .withDefaultUserQuotaInKiBs(4896642944442173063L)
            .withDefaultGroupQuotaInKiBs(7601643489481740629L)
            .withUnixPermissions("a")
            .withCoolAccess(false)
            .withCoolnessPeriod(70247298)
            .withCoolAccessRetrievalPolicy(CoolAccessRetrievalPolicy.NEVER)
            .withCoolAccessTieringPolicy(CoolAccessTieringPolicy.AUTO)
            .withSnapshotDirectoryVisible(true)
            .withSmbAccessBasedEnumeration(SmbAccessBasedEnumeration.ENABLED)
            .withSmbNonBrowsable(SmbNonBrowsable.DISABLED);
        model = BinaryData.fromObject(model).toObject(VolumePatchProperties.class);
        Assertions.assertEquals(ServiceLevel.STANDARD_ZRS, model.serviceLevel());
        Assertions.assertEquals(3173619590401188232L, model.usageThreshold());
        Assertions.assertEquals(498267166, model.exportPolicy().rules().get(0).ruleIndex());
        Assertions.assertEquals(true, model.exportPolicy().rules().get(0).unixReadOnly());
        Assertions.assertEquals(false, model.exportPolicy().rules().get(0).unixReadWrite());
        Assertions.assertEquals(true, model.exportPolicy().rules().get(0).kerberos5ReadOnly());
        Assertions.assertEquals(false, model.exportPolicy().rules().get(0).kerberos5ReadWrite());
        Assertions.assertEquals(false, model.exportPolicy().rules().get(0).kerberos5IReadOnly());
        Assertions.assertEquals(false, model.exportPolicy().rules().get(0).kerberos5IReadWrite());
        Assertions.assertEquals(true, model.exportPolicy().rules().get(0).kerberos5PReadOnly());
        Assertions.assertEquals(false, model.exportPolicy().rules().get(0).kerberos5PReadWrite());
        Assertions.assertEquals(false, model.exportPolicy().rules().get(0).cifs());
        Assertions.assertEquals(true, model.exportPolicy().rules().get(0).nfsv3());
        Assertions.assertEquals(false, model.exportPolicy().rules().get(0).nfsv41());
        Assertions.assertEquals("xe", model.exportPolicy().rules().get(0).allowedClients());
        Assertions.assertEquals(false, model.exportPolicy().rules().get(0).hasRootAccess());
        Assertions.assertEquals(ChownMode.UNRESTRICTED, model.exportPolicy().rules().get(0).chownMode());
        Assertions.assertEquals("hjpglkf", model.protocolTypes().get(0));
        Assertions.assertEquals(25.578917F, model.throughputMibps());
        Assertions.assertEquals("lvithhqzonosgg", model.dataProtection().backup().backupPolicyId());
        Assertions.assertEquals(false, model.dataProtection().backup().policyEnforced());
        Assertions.assertEquals("hfwdsjnkaljutiis", model.dataProtection().backup().backupVaultId());
        Assertions.assertEquals("ffgdkz", model.dataProtection().snapshot().snapshotPolicyId());
        Assertions.assertEquals(true, model.isDefaultQuotaEnabled());
        Assertions.assertEquals(4896642944442173063L, model.defaultUserQuotaInKiBs());
        Assertions.assertEquals(7601643489481740629L, model.defaultGroupQuotaInKiBs());
        Assertions.assertEquals("a", model.unixPermissions());
        Assertions.assertEquals(false, model.coolAccess());
        Assertions.assertEquals(70247298, model.coolnessPeriod());
        Assertions.assertEquals(CoolAccessRetrievalPolicy.NEVER, model.coolAccessRetrievalPolicy());
        Assertions.assertEquals(CoolAccessTieringPolicy.AUTO, model.coolAccessTieringPolicy());
        Assertions.assertEquals(true, model.snapshotDirectoryVisible());
        Assertions.assertEquals(SmbAccessBasedEnumeration.ENABLED, model.smbAccessBasedEnumeration());
        Assertions.assertEquals(SmbNonBrowsable.DISABLED, model.smbNonBrowsable());
    }
}
