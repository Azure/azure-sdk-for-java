// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.netapp.NetAppFilesManager;
import com.azure.resourcemanager.netapp.models.Type;
import com.azure.resourcemanager.netapp.models.VolumeQuotaRule;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class VolumeQuotaRulesCreateMockTests {
    @Test
    public void testCreate() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Succeeded\",\"quotaSizeInKiBs\":4883723719993336594,\"quotaType\":\"DefaultGroupQuota\",\"quotaTarget\":\"vwgf\"},\"location\":\"mhqykizmdksa\",\"tags\":{\"mycjimryvwgcwwp\":\"cluqvo\",\"ydsx\":\"mzgwe\"},\"id\":\"efoh\",\"name\":\"cbvopwndyqleallk\",\"type\":\"mtkhlowkxxpvbr\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        NetAppFilesManager manager = NetAppFilesManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        VolumeQuotaRule response = manager.volumeQuotaRules()
            .define("phaimmoi")
            .withRegion("avbopfp")
            .withExistingVolume("ybww", "bdvibidmhmwffpl", "muvapc", "ccrrvweyoxoyyu")
            .withTags(mapOf("asjcaacfdmmcpu", "wnupgahxku", "zeh", "mehqepvufh", "clgsc", "whoqhnlbqnbldxe",
                "rsrrmoucsofldp", "orim"))
            .withQuotaSizeInKiBs(7090520103790484172L)
            .withQuotaType(Type.INDIVIDUAL_GROUP_QUOTA)
            .withQuotaTarget("gapyyrmfsv")
            .create();

        Assertions.assertEquals("mhqykizmdksa", response.location());
        Assertions.assertEquals("cluqvo", response.tags().get("mycjimryvwgcwwp"));
        Assertions.assertEquals(4883723719993336594L, response.quotaSizeInKiBs());
        Assertions.assertEquals(Type.DEFAULT_GROUP_QUOTA, response.quotaType());
        Assertions.assertEquals("vwgf", response.quotaTarget());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
