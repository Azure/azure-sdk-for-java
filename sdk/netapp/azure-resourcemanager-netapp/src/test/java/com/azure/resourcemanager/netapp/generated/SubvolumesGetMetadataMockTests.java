// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.netapp.NetAppFilesManager;
import com.azure.resourcemanager.netapp.models.SubvolumeModel;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class SubvolumesGetMetadataMockTests {
    @Test
    public void testGetMetadata() throws Exception {
        String responseStr
            = "{\"id\":\"hqepvufhbzehewh\",\"name\":\"hnl\",\"type\":\"nbldxeaclgschori\",\"properties\":{\"path\":\"srrm\",\"parentPath\":\"cso\",\"size\":7867618325110851655,\"bytesUsed\":8595062410321775415,\"permissions\":\"fcaabe\",\"creationTimeStamp\":\"2021-02-18T03:11:59Z\",\"accessedTimeStamp\":\"2021-04-13T17:27:35Z\",\"modifiedTimeStamp\":\"2021-11-09T12:03:01Z\",\"changedTimeStamp\":\"2021-04-04T02:27:51Z\",\"provisioningState\":\"Succeeded\"}}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        NetAppFilesManager manager = NetAppFilesManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        SubvolumeModel response = manager.subvolumes()
            .getMetadata("shbraga", "yyrmfsvbp", "vbopfppdbwnu", "gahxkumasjcaa", "fdmmcpug",
                com.azure.core.util.Context.NONE);

        Assertions.assertEquals("srrm", response.path());
        Assertions.assertEquals("cso", response.parentPath());
        Assertions.assertEquals(7867618325110851655L, response.size());
        Assertions.assertEquals(8595062410321775415L, response.bytesUsed());
        Assertions.assertEquals("fcaabe", response.permissions());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-18T03:11:59Z"), response.creationTimestamp());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-13T17:27:35Z"), response.accessedTimestamp());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-09T12:03:01Z"), response.modifiedTimestamp());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-04T02:27:51Z"), response.changedTimestamp());
        Assertions.assertEquals("Succeeded", response.provisioningState());
    }
}
