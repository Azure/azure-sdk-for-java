// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.netapp.NetAppFilesManager;
import com.azure.resourcemanager.netapp.models.Backup;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class BackupsCreateMockTests {
    @Test
    public void testCreate() throws Exception {
        String responseStr
            = "{\"properties\":{\"backupId\":\"emv\",\"creationDate\":\"2021-10-29T03:31:17Z\",\"snapshotCreationDate\":\"2020-12-21T13:58:30Z\",\"completionDate\":\"2021-10-12T19:17Z\",\"provisioningState\":\"Succeeded\",\"size\":1001715825375079315,\"label\":\"ysprq\",\"backupType\":\"Scheduled\",\"failureReason\":\"xojpslsvjgp\",\"volumeResourceId\":\"iufiqwo\",\"useExistingSnapshot\":true,\"snapshotName\":\"apcohhouc\",\"backupPolicyResourceId\":\"q\",\"isLargeVolume\":true},\"id\":\"x\",\"name\":\"rzdcgdzbenribcaw\",\"type\":\"tzqdd\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        NetAppFilesManager manager = NetAppFilesManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        Backup response = manager.backups()
            .define("oyueayfbpcmsp")
            .withExistingBackupVault("sgl", "rczezkhhlt", "jadhqoawj")
            .withVolumeResourceId("e")
            .withLabel("idlopedbwdpy")
            .withUseExistingSnapshot(false)
            .withSnapshotName("aqacigeleohd")
            .create();

        Assertions.assertEquals("ysprq", response.label());
        Assertions.assertEquals("iufiqwo", response.volumeResourceId());
        Assertions.assertTrue(response.useExistingSnapshot());
        Assertions.assertEquals("apcohhouc", response.snapshotName());
    }
}
