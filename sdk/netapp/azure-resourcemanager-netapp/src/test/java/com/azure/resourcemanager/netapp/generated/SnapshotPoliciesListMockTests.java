// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.netapp.NetAppFilesManager;
import com.azure.resourcemanager.netapp.models.SnapshotPolicy;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class SnapshotPoliciesListMockTests {
    @Test
    public void testList() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"value\":[{\"etag\":\"jdqnsdfzpbgt\",\"properties\":{\"hourlySchedule\":{\"snapshotsToKeep\":1497839405,\"minute\":572336200,\"usedBytes\":389647341638304834},\"dailySchedule\":{\"snapshotsToKeep\":1083166173,\"hour\":285687573,\"minute\":218055811,\"usedBytes\":1758043806434431493},\"weeklySchedule\":{\"snapshotsToKeep\":2023455303,\"day\":\"kvbwnhhtqlgeh\",\"hour\":1490409574,\"minute\":2068572785,\"usedBytes\":6815889330554986027},\"monthlySchedule\":{\"snapshotsToKeep\":248320498,\"daysOfMonth\":\"ajvgcxtxjcsheafi\",\"hour\":1160608642,\"minute\":441171448,\"usedBytes\":8187666305787624959},\"enabled\":false,\"provisioningState\":\"ssjhoiftxfkf\"},\"location\":\"gpr\",\"tags\":{\"cbiqtgdqoh\":\"ill\",\"etpwbralll\":\"cwsldri\",\"p\":\"bphbqzmizakakank\"},\"id\":\"n\",\"name\":\"zhajoylhjlmuo\",\"type\":\"xprimrsop\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        NetAppFilesManager manager =
            NetAppFilesManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<SnapshotPolicy> response =
            manager.snapshotPolicies().list("a", "fedxihchrphkm", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("gpr", response.iterator().next().location());
        Assertions.assertEquals("ill", response.iterator().next().tags().get("cbiqtgdqoh"));
        Assertions.assertEquals(1497839405, response.iterator().next().hourlySchedule().snapshotsToKeep());
        Assertions.assertEquals(572336200, response.iterator().next().hourlySchedule().minute());
        Assertions.assertEquals(389647341638304834L, response.iterator().next().hourlySchedule().usedBytes());
        Assertions.assertEquals(1083166173, response.iterator().next().dailySchedule().snapshotsToKeep());
        Assertions.assertEquals(285687573, response.iterator().next().dailySchedule().hour());
        Assertions.assertEquals(218055811, response.iterator().next().dailySchedule().minute());
        Assertions.assertEquals(1758043806434431493L, response.iterator().next().dailySchedule().usedBytes());
        Assertions.assertEquals(2023455303, response.iterator().next().weeklySchedule().snapshotsToKeep());
        Assertions.assertEquals("kvbwnhhtqlgeh", response.iterator().next().weeklySchedule().day());
        Assertions.assertEquals(1490409574, response.iterator().next().weeklySchedule().hour());
        Assertions.assertEquals(2068572785, response.iterator().next().weeklySchedule().minute());
        Assertions.assertEquals(6815889330554986027L, response.iterator().next().weeklySchedule().usedBytes());
        Assertions.assertEquals(248320498, response.iterator().next().monthlySchedule().snapshotsToKeep());
        Assertions.assertEquals("ajvgcxtxjcsheafi", response.iterator().next().monthlySchedule().daysOfMonth());
        Assertions.assertEquals(1160608642, response.iterator().next().monthlySchedule().hour());
        Assertions.assertEquals(441171448, response.iterator().next().monthlySchedule().minute());
        Assertions.assertEquals(8187666305787624959L, response.iterator().next().monthlySchedule().usedBytes());
        Assertions.assertEquals(false, response.iterator().next().enabled());
    }
}
