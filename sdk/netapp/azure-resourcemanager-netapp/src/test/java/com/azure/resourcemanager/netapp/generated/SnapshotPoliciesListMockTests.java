// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.netapp.NetAppFilesManager;
import com.azure.resourcemanager.netapp.models.SnapshotPolicy;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class SnapshotPoliciesListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"etag\":\"f\",\"properties\":{\"hourlySchedule\":{\"snapshotsToKeep\":1581636189,\"minute\":808176503,\"usedBytes\":3058208759647015148},\"dailySchedule\":{\"snapshotsToKeep\":1104394000,\"hour\":1824383862,\"minute\":119038812,\"usedBytes\":4921201776852197011},\"weeklySchedule\":{\"snapshotsToKeep\":564009831,\"day\":\"ivqiheb\",\"hour\":1610520770,\"minute\":730785712,\"usedBytes\":7870539155851006016},\"monthlySchedule\":{\"snapshotsToKeep\":612164385,\"daysOfMonth\":\"ragegi\",\"hour\":1313000122,\"minute\":87980458,\"usedBytes\":2970204567624224767},\"enabled\":false,\"provisioningState\":\"ubggbqigkxkb\"},\"location\":\"zgakgacyrcmj\",\"tags\":{\"uhrylniofr\":\"pofap\",\"l\":\"gbzjedmstkv\",\"f\":\"xbcuiiznkt\"},\"id\":\"nsnvpd\",\"name\":\"bmikost\",\"type\":\"z\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        NetAppFilesManager manager = NetAppFilesManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<SnapshotPolicy> response
            = manager.snapshotPolicies().list("iiqbi", "htmwwinh", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("zgakgacyrcmj", response.iterator().next().location());
        Assertions.assertEquals("pofap", response.iterator().next().tags().get("uhrylniofr"));
        Assertions.assertEquals(1581636189, response.iterator().next().hourlySchedule().snapshotsToKeep());
        Assertions.assertEquals(808176503, response.iterator().next().hourlySchedule().minute());
        Assertions.assertEquals(3058208759647015148L, response.iterator().next().hourlySchedule().usedBytes());
        Assertions.assertEquals(1104394000, response.iterator().next().dailySchedule().snapshotsToKeep());
        Assertions.assertEquals(1824383862, response.iterator().next().dailySchedule().hour());
        Assertions.assertEquals(119038812, response.iterator().next().dailySchedule().minute());
        Assertions.assertEquals(4921201776852197011L, response.iterator().next().dailySchedule().usedBytes());
        Assertions.assertEquals(564009831, response.iterator().next().weeklySchedule().snapshotsToKeep());
        Assertions.assertEquals("ivqiheb", response.iterator().next().weeklySchedule().day());
        Assertions.assertEquals(1610520770, response.iterator().next().weeklySchedule().hour());
        Assertions.assertEquals(730785712, response.iterator().next().weeklySchedule().minute());
        Assertions.assertEquals(7870539155851006016L, response.iterator().next().weeklySchedule().usedBytes());
        Assertions.assertEquals(612164385, response.iterator().next().monthlySchedule().snapshotsToKeep());
        Assertions.assertEquals("ragegi", response.iterator().next().monthlySchedule().daysOfMonth());
        Assertions.assertEquals(1313000122, response.iterator().next().monthlySchedule().hour());
        Assertions.assertEquals(87980458, response.iterator().next().monthlySchedule().minute());
        Assertions.assertEquals(2970204567624224767L, response.iterator().next().monthlySchedule().usedBytes());
        Assertions.assertEquals(false, response.iterator().next().enabled());
    }
}
