// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.netapp.NetAppFilesManager;
import com.azure.resourcemanager.netapp.models.SnapshotPolicy;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class SnapshotPoliciesListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"etag\":\"qtferrqwexjkmf\",\"properties\":{\"hourlySchedule\":{\"snapshotsToKeep\":1312828875,\"minute\":401804668,\"usedBytes\":1578368566615591581},\"dailySchedule\":{\"snapshotsToKeep\":1928590225,\"hour\":1623831151,\"minute\":623740399,\"usedBytes\":8136923718683522380},\"weeklySchedule\":{\"snapshotsToKeep\":1883762381,\"day\":\"wyawbzasqbuc\",\"hour\":288358350,\"minute\":1920790528,\"usedBytes\":2208113191642538147},\"monthlySchedule\":{\"snapshotsToKeep\":509797508,\"daysOfMonth\":\"aipidsdaultxi\",\"hour\":306440698,\"minute\":1155806912,\"usedBytes\":2598506191015352872},\"enabled\":false,\"provisioningState\":\"qnmcjngzqdqx\"},\"location\":\"jw\",\"tags\":{\"lcfhmlrqryxy\":\"fusfzsvtuikzhajq\"},\"id\":\"qnzrd\",\"name\":\"sovwxznptgoeiyb\",\"type\":\"abpfhvfs\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        NetAppFilesManager manager = NetAppFilesManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<SnapshotPolicy> response
            = manager.snapshotPolicies().list("ewjwiuubw", "fqsfa", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("jw", response.iterator().next().location());
        Assertions.assertEquals("fusfzsvtuikzhajq", response.iterator().next().tags().get("lcfhmlrqryxy"));
        Assertions.assertEquals(1312828875, response.iterator().next().hourlySchedule().snapshotsToKeep());
        Assertions.assertEquals(401804668, response.iterator().next().hourlySchedule().minute());
        Assertions.assertEquals(1578368566615591581L, response.iterator().next().hourlySchedule().usedBytes());
        Assertions.assertEquals(1928590225, response.iterator().next().dailySchedule().snapshotsToKeep());
        Assertions.assertEquals(1623831151, response.iterator().next().dailySchedule().hour());
        Assertions.assertEquals(623740399, response.iterator().next().dailySchedule().minute());
        Assertions.assertEquals(8136923718683522380L, response.iterator().next().dailySchedule().usedBytes());
        Assertions.assertEquals(1883762381, response.iterator().next().weeklySchedule().snapshotsToKeep());
        Assertions.assertEquals("wyawbzasqbuc", response.iterator().next().weeklySchedule().day());
        Assertions.assertEquals(288358350, response.iterator().next().weeklySchedule().hour());
        Assertions.assertEquals(1920790528, response.iterator().next().weeklySchedule().minute());
        Assertions.assertEquals(2208113191642538147L, response.iterator().next().weeklySchedule().usedBytes());
        Assertions.assertEquals(509797508, response.iterator().next().monthlySchedule().snapshotsToKeep());
        Assertions.assertEquals("aipidsdaultxi", response.iterator().next().monthlySchedule().daysOfMonth());
        Assertions.assertEquals(306440698, response.iterator().next().monthlySchedule().hour());
        Assertions.assertEquals(1155806912, response.iterator().next().monthlySchedule().minute());
        Assertions.assertEquals(2598506191015352872L, response.iterator().next().monthlySchedule().usedBytes());
        Assertions.assertEquals(false, response.iterator().next().enabled());
    }
}
