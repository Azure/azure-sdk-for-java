// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.netapp.models.BackupPolicyPatch;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class BackupPolicyPatchTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        BackupPolicyPatch model = BinaryData.fromString(
            "{\"properties\":{\"backupPolicyId\":\"evzhfsto\",\"provisioningState\":\"hojujbypelmcuv\",\"dailyBackupsToKeep\":1912851765,\"weeklyBackupsToKeep\":1882216522,\"monthlyBackupsToKeep\":1696706590,\"volumesAssigned\":12838706,\"enabled\":false,\"volumeBackups\":[{\"volumeName\":\"ool\",\"volumeResourceId\":\"tpkiwkkbnujry\",\"backupsCount\":1368964811,\"policyEnabled\":true}]},\"location\":\"bfpncurdo\",\"tags\":{\"xcbihw\":\"ithtywu\",\"twjchrdg\":\"knfd\"},\"id\":\"ihxumwctondzj\",\"name\":\"uu\",\"type\":\"fdlwg\"}")
            .toObject(BackupPolicyPatch.class);
        Assertions.assertEquals("bfpncurdo", model.location());
        Assertions.assertEquals("ithtywu", model.tags().get("xcbihw"));
        Assertions.assertEquals(1912851765, model.dailyBackupsToKeep());
        Assertions.assertEquals(1882216522, model.weeklyBackupsToKeep());
        Assertions.assertEquals(1696706590, model.monthlyBackupsToKeep());
        Assertions.assertFalse(model.enabled());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        BackupPolicyPatch model = new BackupPolicyPatch().withLocation("bfpncurdo")
            .withTags(mapOf("xcbihw", "ithtywu", "twjchrdg", "knfd"))
            .withDailyBackupsToKeep(1912851765)
            .withWeeklyBackupsToKeep(1882216522)
            .withMonthlyBackupsToKeep(1696706590)
            .withEnabled(false);
        model = BinaryData.fromObject(model).toObject(BackupPolicyPatch.class);
        Assertions.assertEquals("bfpncurdo", model.location());
        Assertions.assertEquals("ithtywu", model.tags().get("xcbihw"));
        Assertions.assertEquals(1912851765, model.dailyBackupsToKeep());
        Assertions.assertEquals(1882216522, model.weeklyBackupsToKeep());
        Assertions.assertEquals(1696706590, model.monthlyBackupsToKeep());
        Assertions.assertFalse(model.enabled());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
