// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.netapp.models.BackupPolicyPatch;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class BackupPolicyPatchTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        BackupPolicyPatch model = BinaryData.fromString(
            "{\"properties\":{\"backupPolicyId\":\"fbgofeljagrqmqh\",\"provisioningState\":\"vriiio\",\"dailyBackupsToKeep\":514038226,\"weeklyBackupsToKeep\":664044730,\"monthlyBackupsToKeep\":524245347,\"volumesAssigned\":1358973508,\"enabled\":true,\"volumeBackups\":[{\"volumeName\":\"sowueluqhhahhx\",\"volumeResourceId\":\"hmzk\",\"backupsCount\":968064298,\"policyEnabled\":false}]},\"location\":\"wspughftqsxhqx\",\"tags\":{\"fzdm\":\"ukndxdigrjgu\",\"otzi\":\"yqtfihwh\",\"phoszqz\":\"gamv\"},\"id\":\"dphqamv\",\"name\":\"kfwynw\",\"type\":\"vtbvkayh\"}")
            .toObject(BackupPolicyPatch.class);
        Assertions.assertEquals("wspughftqsxhqx", model.location());
        Assertions.assertEquals("ukndxdigrjgu", model.tags().get("fzdm"));
        Assertions.assertEquals(514038226, model.dailyBackupsToKeep());
        Assertions.assertEquals(664044730, model.weeklyBackupsToKeep());
        Assertions.assertEquals(524245347, model.monthlyBackupsToKeep());
        Assertions.assertEquals(true, model.enabled());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        BackupPolicyPatch model = new BackupPolicyPatch().withLocation("wspughftqsxhqx")
            .withTags(mapOf("fzdm", "ukndxdigrjgu", "otzi", "yqtfihwh", "phoszqz", "gamv"))
            .withDailyBackupsToKeep(514038226)
            .withWeeklyBackupsToKeep(664044730)
            .withMonthlyBackupsToKeep(524245347)
            .withEnabled(true);
        model = BinaryData.fromObject(model).toObject(BackupPolicyPatch.class);
        Assertions.assertEquals("wspughftqsxhqx", model.location());
        Assertions.assertEquals("ukndxdigrjgu", model.tags().get("fzdm"));
        Assertions.assertEquals(514038226, model.dailyBackupsToKeep());
        Assertions.assertEquals(664044730, model.weeklyBackupsToKeep());
        Assertions.assertEquals(524245347, model.monthlyBackupsToKeep());
        Assertions.assertEquals(true, model.enabled());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
