// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.netapp.NetAppFilesManager;
import com.azure.resourcemanager.netapp.models.SnapshotPolicyVolumeList;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class SnapshotPoliciesListVolumesWithResponseMockTests {
    @Test
    public void testListVolumesWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"value\":[{\"etag\":\"ttwgdsl\",\"zones\":[\"hhrmooizqsey\",\"xiutcx\"],\"location\":\"zhyrpeto\",\"tags\":{\"rqnkkzjcjbtr\":\"joxslhvnhla\",\"eitpkxztmo\":\"aehvvibrxjjstoq\"},\"id\":\"bklftidgfcwqmpim\",\"name\":\"qxzhem\",\"type\":\"yhohujswtwkozzwc\"},{\"etag\":\"kb\",\"zones\":[\"fajnjwltlwtjjguk\",\"alhsnvkc\",\"mxzrpoa\",\"mlnwiaaomylweazu\"],\"location\":\"sethwwn\",\"tags\":{\"zswpchwa\":\"l\"},\"id\":\"fb\",\"name\":\"usnfepgfewet\",\"type\":\"l\"},{\"etag\":\"gncxykxhdj\",\"zones\":[\"mmbcxfhbcp\",\"rxvxcjzh\"],\"location\":\"zxfpxtgqsc\",\"tags\":{\"qaz\":\"ftjuh\",\"pijrajcivmmghf\":\"mtggu\"},\"id\":\"fiwrxgkn\",\"name\":\"uvyinzqodfvpgs\",\"type\":\"oxgsgbpfgzdjtx\"},{\"etag\":\"flbqvgaq\",\"zones\":[\"a\",\"cqusr\"],\"location\":\"etnwsdtutnw\",\"tags\":{\"k\":\"ycvuzhyrmewipmv\",\"xundxgk\":\"xukuqgsj\",\"muvgp\":\"twzhhzjhfjmhv\",\"uzjyihsasbhudypo\":\"uneqsxvmhf\"},\"id\":\"yue\",\"name\":\"slynsqyrpfoo\",\"type\":\"rlttymsjnygqdnfw\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        NetAppFilesManager manager =
            NetAppFilesManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        SnapshotPolicyVolumeList response =
            manager
                .snapshotPolicies()
                .listVolumesWithResponse("kvyklxubyjaffmm", "bl", "qcuubgqibrta", com.azure.core.util.Context.NONE)
                .getValue();

        Assertions.assertEquals("zhyrpeto", response.value().get(0).location());
        Assertions.assertEquals("joxslhvnhla", response.value().get(0).tags().get("rqnkkzjcjbtr"));
        Assertions.assertEquals("hhrmooizqsey", response.value().get(0).zones().get(0));
    }
}
