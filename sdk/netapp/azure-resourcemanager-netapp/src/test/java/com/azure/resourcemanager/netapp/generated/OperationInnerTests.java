// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.netapp.fluent.models.OperationInner;
import com.azure.resourcemanager.netapp.models.Dimension;
import com.azure.resourcemanager.netapp.models.LogSpecification;
import com.azure.resourcemanager.netapp.models.MetricAggregationType;
import com.azure.resourcemanager.netapp.models.MetricSpecification;
import com.azure.resourcemanager.netapp.models.OperationDisplay;
import com.azure.resourcemanager.netapp.models.ServiceSpecification;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class OperationInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        OperationInner model = BinaryData.fromString(
            "{\"name\":\"pewnw\",\"display\":{\"provider\":\"tjzyflus\",\"resource\":\"hmofc\",\"operation\":\"smy\",\"description\":\"kdtmlxhekuk\"},\"origin\":\"txukcdmp\",\"properties\":{\"serviceSpecification\":{\"metricSpecifications\":[{\"name\":\"anzwuxzdxta\",\"displayName\":\"lhmwhfpmrqobm\",\"displayDescription\":\"kknryrtihf\",\"unit\":\"ijbpzvgnwzsymgl\",\"supportedAggregationTypes\":[\"Average\",\"Average\",\"Average\",\"Average\"],\"supportedTimeGrainTypes\":[\"dbihanufhfcbj\",\"s\"],\"internalMetricName\":\"ithxqhabifpi\",\"enableRegionalMdmAccount\":false,\"sourceMdmAccount\":\"zb\",\"sourceMdmNamespace\":\"cnpqxuhivyqniwby\",\"dimensions\":[{}],\"aggregationType\":\"vd\",\"fillGapWithZero\":true,\"category\":\"rtfw\",\"resourceIdDimensionNameOverride\":\"k\",\"isInternal\":true}],\"logSpecifications\":[{\"name\":\"cs\",\"displayName\":\"s\"}]}}}")
            .toObject(OperationInner.class);
        Assertions.assertEquals("pewnw", model.name());
        Assertions.assertEquals("tjzyflus", model.display().provider());
        Assertions.assertEquals("hmofc", model.display().resource());
        Assertions.assertEquals("smy", model.display().operation());
        Assertions.assertEquals("kdtmlxhekuk", model.display().description());
        Assertions.assertEquals("txukcdmp", model.origin());
        Assertions.assertEquals("anzwuxzdxta", model.serviceSpecification().metricSpecifications().get(0).name());
        Assertions.assertEquals("lhmwhfpmrqobm",
            model.serviceSpecification().metricSpecifications().get(0).displayName());
        Assertions.assertEquals("kknryrtihf",
            model.serviceSpecification().metricSpecifications().get(0).displayDescription());
        Assertions.assertEquals("ijbpzvgnwzsymgl", model.serviceSpecification().metricSpecifications().get(0).unit());
        Assertions.assertEquals(MetricAggregationType.AVERAGE,
            model.serviceSpecification().metricSpecifications().get(0).supportedAggregationTypes().get(0));
        Assertions.assertEquals("dbihanufhfcbj",
            model.serviceSpecification().metricSpecifications().get(0).supportedTimeGrainTypes().get(0));
        Assertions.assertEquals("ithxqhabifpi",
            model.serviceSpecification().metricSpecifications().get(0).internalMetricName());
        Assertions.assertEquals(false,
            model.serviceSpecification().metricSpecifications().get(0).enableRegionalMdmAccount());
        Assertions.assertEquals("zb", model.serviceSpecification().metricSpecifications().get(0).sourceMdmAccount());
        Assertions.assertEquals("cnpqxuhivyqniwby",
            model.serviceSpecification().metricSpecifications().get(0).sourceMdmNamespace());
        Assertions.assertEquals("vd", model.serviceSpecification().metricSpecifications().get(0).aggregationType());
        Assertions.assertEquals(true, model.serviceSpecification().metricSpecifications().get(0).fillGapWithZero());
        Assertions.assertEquals("rtfw", model.serviceSpecification().metricSpecifications().get(0).category());
        Assertions.assertEquals("k",
            model.serviceSpecification().metricSpecifications().get(0).resourceIdDimensionNameOverride());
        Assertions.assertEquals(true, model.serviceSpecification().metricSpecifications().get(0).isInternal());
        Assertions.assertEquals("cs", model.serviceSpecification().logSpecifications().get(0).name());
        Assertions.assertEquals("s", model.serviceSpecification().logSpecifications().get(0).displayName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        OperationInner model = new OperationInner().withName("pewnw")
            .withDisplay(new OperationDisplay().withProvider("tjzyflus")
                .withResource("hmofc")
                .withOperation("smy")
                .withDescription("kdtmlxhekuk"))
            .withOrigin("txukcdmp")
            .withServiceSpecification(new ServiceSpecification()
                .withMetricSpecifications(Arrays.asList(new MetricSpecification().withName("anzwuxzdxta")
                    .withDisplayName("lhmwhfpmrqobm")
                    .withDisplayDescription("kknryrtihf")
                    .withUnit("ijbpzvgnwzsymgl")
                    .withSupportedAggregationTypes(Arrays.asList(MetricAggregationType.AVERAGE,
                        MetricAggregationType.AVERAGE, MetricAggregationType.AVERAGE, MetricAggregationType.AVERAGE))
                    .withSupportedTimeGrainTypes(Arrays.asList("dbihanufhfcbj", "s"))
                    .withInternalMetricName("ithxqhabifpi")
                    .withEnableRegionalMdmAccount(false)
                    .withSourceMdmAccount("zb")
                    .withSourceMdmNamespace("cnpqxuhivyqniwby")
                    .withDimensions(Arrays.asList(new Dimension()))
                    .withAggregationType("vd")
                    .withFillGapWithZero(true)
                    .withCategory("rtfw")
                    .withResourceIdDimensionNameOverride("k")
                    .withIsInternal(true)))
                .withLogSpecifications(Arrays.asList(new LogSpecification().withName("cs").withDisplayName("s"))));
        model = BinaryData.fromObject(model).toObject(OperationInner.class);
        Assertions.assertEquals("pewnw", model.name());
        Assertions.assertEquals("tjzyflus", model.display().provider());
        Assertions.assertEquals("hmofc", model.display().resource());
        Assertions.assertEquals("smy", model.display().operation());
        Assertions.assertEquals("kdtmlxhekuk", model.display().description());
        Assertions.assertEquals("txukcdmp", model.origin());
        Assertions.assertEquals("anzwuxzdxta", model.serviceSpecification().metricSpecifications().get(0).name());
        Assertions.assertEquals("lhmwhfpmrqobm",
            model.serviceSpecification().metricSpecifications().get(0).displayName());
        Assertions.assertEquals("kknryrtihf",
            model.serviceSpecification().metricSpecifications().get(0).displayDescription());
        Assertions.assertEquals("ijbpzvgnwzsymgl", model.serviceSpecification().metricSpecifications().get(0).unit());
        Assertions.assertEquals(MetricAggregationType.AVERAGE,
            model.serviceSpecification().metricSpecifications().get(0).supportedAggregationTypes().get(0));
        Assertions.assertEquals("dbihanufhfcbj",
            model.serviceSpecification().metricSpecifications().get(0).supportedTimeGrainTypes().get(0));
        Assertions.assertEquals("ithxqhabifpi",
            model.serviceSpecification().metricSpecifications().get(0).internalMetricName());
        Assertions.assertEquals(false,
            model.serviceSpecification().metricSpecifications().get(0).enableRegionalMdmAccount());
        Assertions.assertEquals("zb", model.serviceSpecification().metricSpecifications().get(0).sourceMdmAccount());
        Assertions.assertEquals("cnpqxuhivyqniwby",
            model.serviceSpecification().metricSpecifications().get(0).sourceMdmNamespace());
        Assertions.assertEquals("vd", model.serviceSpecification().metricSpecifications().get(0).aggregationType());
        Assertions.assertEquals(true, model.serviceSpecification().metricSpecifications().get(0).fillGapWithZero());
        Assertions.assertEquals("rtfw", model.serviceSpecification().metricSpecifications().get(0).category());
        Assertions.assertEquals("k",
            model.serviceSpecification().metricSpecifications().get(0).resourceIdDimensionNameOverride());
        Assertions.assertEquals(true, model.serviceSpecification().metricSpecifications().get(0).isInternal());
        Assertions.assertEquals("cs", model.serviceSpecification().logSpecifications().get(0).name());
        Assertions.assertEquals("s", model.serviceSpecification().logSpecifications().get(0).displayName());
    }
}
