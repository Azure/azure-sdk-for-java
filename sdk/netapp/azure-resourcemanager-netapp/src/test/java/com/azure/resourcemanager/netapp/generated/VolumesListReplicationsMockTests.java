// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.netapp.NetAppFilesManager;
import com.azure.resourcemanager.netapp.models.EndpointType;
import com.azure.resourcemanager.netapp.models.Replication;
import com.azure.resourcemanager.netapp.models.ReplicationSchedule;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class VolumesListReplicationsMockTests {
    @Test
    public void testListReplications() throws Exception {
        String responseStr
            = "{\"value\":[{\"replicationId\":\"cu\",\"endpointType\":\"dst\",\"replicationSchedule\":\"daily\",\"remoteVolumeResourceId\":\"srboldforobw\",\"remoteVolumeRegion\":\"vizbfhfo\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        NetAppFilesManager manager = NetAppFilesManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<Replication> response = manager.volumes()
            .listReplications("uqj", "tzenk", "if", "zhmkdasvflyh", com.azure.core.util.Context.NONE);

        Assertions.assertEquals(EndpointType.DST, response.iterator().next().endpointType());
        Assertions.assertEquals(ReplicationSchedule.DAILY, response.iterator().next().replicationSchedule());
        Assertions.assertEquals("srboldforobw", response.iterator().next().remoteVolumeResourceId());
        Assertions.assertEquals("vizbfhfo", response.iterator().next().remoteVolumeRegion());
    }
}
