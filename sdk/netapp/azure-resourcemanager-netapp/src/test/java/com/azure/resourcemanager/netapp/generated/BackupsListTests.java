// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.netapp.fluent.models.BackupInner;
import com.azure.resourcemanager.netapp.models.BackupsList;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class BackupsListTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        BackupsList model =
            BinaryData
                .fromString(
                    "{\"value\":[{\"location\":\"oulpjrv\",\"properties\":{\"backupId\":\"glrvimjwosytxi\",\"creationDate\":\"2021-07-16T14:06:20Z\",\"provisioningState\":\"fcktqumiekke\",\"size\":2995905724691168353,\"label\":\"ly\",\"backupType\":\"Manual\",\"failureReason\":\"gqggebdunygae\",\"volumeName\":\"db\",\"useExistingSnapshot\":false},\"id\":\"t\",\"name\":\"xllrxcyjm\",\"type\":\"a\"},{\"location\":\"su\",\"properties\":{\"backupId\":\"r\",\"creationDate\":\"2021-01-14T00:07:34Z\",\"provisioningState\":\"mjsjqb\",\"size\":7225316446060950851,\"label\":\"xrwlyc\",\"backupType\":\"Scheduled\",\"failureReason\":\"p\",\"volumeName\":\"kgymareqnajxqug\",\"useExistingSnapshot\":false},\"id\":\"ycubeddgs\",\"name\":\"ofwq\",\"type\":\"zqalkrmnjijpx\"}]}")
                .toObject(BackupsList.class);
        Assertions.assertEquals("oulpjrv", model.value().get(0).location());
        Assertions.assertEquals("ly", model.value().get(0).label());
        Assertions.assertEquals(false, model.value().get(0).useExistingSnapshot());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        BackupsList model =
            new BackupsList()
                .withValue(
                    Arrays
                        .asList(
                            new BackupInner().withLocation("oulpjrv").withLabel("ly").withUseExistingSnapshot(false),
                            new BackupInner().withLocation("su").withLabel("xrwlyc").withUseExistingSnapshot(false)));
        model = BinaryData.fromObject(model).toObject(BackupsList.class);
        Assertions.assertEquals("oulpjrv", model.value().get(0).location());
        Assertions.assertEquals("ly", model.value().get(0).label());
        Assertions.assertEquals(false, model.value().get(0).useExistingSnapshot());
    }
}
