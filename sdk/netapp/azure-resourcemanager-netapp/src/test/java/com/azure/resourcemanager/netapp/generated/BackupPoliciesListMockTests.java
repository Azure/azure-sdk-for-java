// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.netapp.NetAppFilesManager;
import com.azure.resourcemanager.netapp.models.BackupPolicy;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class BackupPoliciesListMockTests {
    @Test
    public void testList() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"value\":[{\"etag\":\"pv\",\"properties\":{\"backupPolicyId\":\"rylniofrzg\",\"provisioningState\":\"jed\",\"dailyBackupsToKeep\":1946171356,\"weeklyBackupsToKeep\":2142933776,\"monthlyBackupsToKeep\":25820211,\"volumesAssigned\":280758159,\"enabled\":false,\"volumeBackups\":[{\"volumeName\":\"znktwfansnv\",\"backupsCount\":556245699,\"policyEnabled\":false},{\"volumeName\":\"kostbzbki\",\"backupsCount\":775922838,\"policyEnabled\":false},{\"volumeName\":\"ophzfylsgcrp\",\"backupsCount\":1192657678,\"policyEnabled\":true}]},\"location\":\"zzcezelfwyfwlw\",\"tags\":{\"fzvaylptr\":\"etnpsihcl\",\"mwqkchcxwaxf\":\"qqwzt\",\"jkjexf\":\"w\"},\"id\":\"eqvhpsylkk\",\"name\":\"hkbffmbm\",\"type\":\"zjrgyww\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        NetAppFilesManager manager =
            NetAppFilesManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<BackupPolicy> response =
            manager.backupPolicies().list("igkxkbsazga", "gacyrcmjdmspo", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("zzcezelfwyfwlw", response.iterator().next().location());
        Assertions.assertEquals("etnpsihcl", response.iterator().next().tags().get("fzvaylptr"));
        Assertions.assertEquals(1946171356, response.iterator().next().dailyBackupsToKeep());
        Assertions.assertEquals(2142933776, response.iterator().next().weeklyBackupsToKeep());
        Assertions.assertEquals(25820211, response.iterator().next().monthlyBackupsToKeep());
        Assertions.assertEquals(false, response.iterator().next().enabled());
    }
}
