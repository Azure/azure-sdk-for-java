// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.netapp.fluent.models.ReplicationInner;
import com.azure.resourcemanager.netapp.models.EndpointType;
import com.azure.resourcemanager.netapp.models.ListReplications;
import com.azure.resourcemanager.netapp.models.ReplicationSchedule;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class ListReplicationsTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ListReplications model = BinaryData.fromString(
            "{\"value\":[{\"endpointType\":\"src\",\"replicationSchedule\":\"_10minutely\",\"remoteVolumeResourceId\":\"xogaokonzmnsikv\",\"remoteVolumeRegion\":\"qzeqqkdltfzxm\"},{\"endpointType\":\"src\",\"replicationSchedule\":\"daily\",\"remoteVolumeResourceId\":\"ur\",\"remoteVolumeRegion\":\"dkwobdagx\"},{\"endpointType\":\"src\",\"replicationSchedule\":\"_10minutely\",\"remoteVolumeResourceId\":\"xbxwa\",\"remoteVolumeRegion\":\"ogqxndlkzgxhuri\"}]}")
            .toObject(ListReplications.class);
        Assertions.assertEquals(EndpointType.SRC, model.value().get(0).endpointType());
        Assertions.assertEquals(ReplicationSchedule.ONE_ZEROMINUTELY, model.value().get(0).replicationSchedule());
        Assertions.assertEquals("xogaokonzmnsikv", model.value().get(0).remoteVolumeResourceId());
        Assertions.assertEquals("qzeqqkdltfzxm", model.value().get(0).remoteVolumeRegion());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ListReplications model = new ListReplications().withValue(Arrays.asList(
            new ReplicationInner().withEndpointType(EndpointType.SRC)
                .withReplicationSchedule(ReplicationSchedule.ONE_ZEROMINUTELY)
                .withRemoteVolumeResourceId("xogaokonzmnsikv").withRemoteVolumeRegion("qzeqqkdltfzxm"),
            new ReplicationInner().withEndpointType(EndpointType.SRC).withReplicationSchedule(ReplicationSchedule.DAILY)
                .withRemoteVolumeResourceId("ur").withRemoteVolumeRegion("dkwobdagx"),
            new ReplicationInner().withEndpointType(EndpointType.SRC)
                .withReplicationSchedule(ReplicationSchedule.ONE_ZEROMINUTELY).withRemoteVolumeResourceId("xbxwa")
                .withRemoteVolumeRegion("ogqxndlkzgxhuri")));
        model = BinaryData.fromObject(model).toObject(ListReplications.class);
        Assertions.assertEquals(EndpointType.SRC, model.value().get(0).endpointType());
        Assertions.assertEquals(ReplicationSchedule.ONE_ZEROMINUTELY, model.value().get(0).replicationSchedule());
        Assertions.assertEquals("xogaokonzmnsikv", model.value().get(0).remoteVolumeResourceId());
        Assertions.assertEquals("qzeqqkdltfzxm", model.value().get(0).remoteVolumeRegion());
    }
}
