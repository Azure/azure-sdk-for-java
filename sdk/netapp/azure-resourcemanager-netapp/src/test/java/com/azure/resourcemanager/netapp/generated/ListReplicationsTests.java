// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.netapp.fluent.models.ReplicationInner;
import com.azure.resourcemanager.netapp.models.EndpointType;
import com.azure.resourcemanager.netapp.models.ListReplications;
import com.azure.resourcemanager.netapp.models.ReplicationSchedule;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class ListReplicationsTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ListReplications model =
            BinaryData
                .fromString(
                    "{\"value\":[{\"endpointType\":\"src\",\"replicationSchedule\":\"_10minutely\",\"remoteVolumeResourceId\":\"iplbpodxunkbebxm\",\"remoteVolumeRegion\":\"yyntwl\"},{\"endpointType\":\"src\",\"replicationSchedule\":\"hourly\",\"remoteVolumeResourceId\":\"oievseotgqrlltm\",\"remoteVolumeRegion\":\"lauwzizxbmpgcjef\"},{\"endpointType\":\"src\",\"replicationSchedule\":\"daily\",\"remoteVolumeResourceId\":\"pbttdum\",\"remoteVolumeRegion\":\"p\"}]}")
                .toObject(ListReplications.class);
        Assertions.assertEquals(EndpointType.SRC, model.value().get(0).endpointType());
        Assertions.assertEquals(ReplicationSchedule.ONE_ZEROMINUTELY, model.value().get(0).replicationSchedule());
        Assertions.assertEquals("iplbpodxunkbebxm", model.value().get(0).remoteVolumeResourceId());
        Assertions.assertEquals("yyntwl", model.value().get(0).remoteVolumeRegion());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ListReplications model =
            new ListReplications()
                .withValue(
                    Arrays
                        .asList(
                            new ReplicationInner()
                                .withEndpointType(EndpointType.SRC)
                                .withReplicationSchedule(ReplicationSchedule.ONE_ZEROMINUTELY)
                                .withRemoteVolumeResourceId("iplbpodxunkbebxm")
                                .withRemoteVolumeRegion("yyntwl"),
                            new ReplicationInner()
                                .withEndpointType(EndpointType.SRC)
                                .withReplicationSchedule(ReplicationSchedule.HOURLY)
                                .withRemoteVolumeResourceId("oievseotgqrlltm")
                                .withRemoteVolumeRegion("lauwzizxbmpgcjef"),
                            new ReplicationInner()
                                .withEndpointType(EndpointType.SRC)
                                .withReplicationSchedule(ReplicationSchedule.DAILY)
                                .withRemoteVolumeResourceId("pbttdum")
                                .withRemoteVolumeRegion("p")));
        model = BinaryData.fromObject(model).toObject(ListReplications.class);
        Assertions.assertEquals(EndpointType.SRC, model.value().get(0).endpointType());
        Assertions.assertEquals(ReplicationSchedule.ONE_ZEROMINUTELY, model.value().get(0).replicationSchedule());
        Assertions.assertEquals("iplbpodxunkbebxm", model.value().get(0).remoteVolumeResourceId());
        Assertions.assertEquals("yyntwl", model.value().get(0).remoteVolumeRegion());
    }
}
