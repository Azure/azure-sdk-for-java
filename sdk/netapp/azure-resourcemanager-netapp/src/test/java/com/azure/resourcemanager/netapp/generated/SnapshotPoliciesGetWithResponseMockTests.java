// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.netapp.NetAppFilesManager;
import com.azure.resourcemanager.netapp.models.SnapshotPolicy;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class SnapshotPoliciesGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"etag\":\"uzboyjathw\",\"properties\":{\"hourlySchedule\":{\"snapshotsToKeep\":943860065,\"minute\":125606938,\"usedBytes\":7359436654104402484},\"dailySchedule\":{\"snapshotsToKeep\":989403174,\"hour\":1764407789,\"minute\":1974218119,\"usedBytes\":34566941819509688},\"weeklySchedule\":{\"snapshotsToKeep\":1124568750,\"day\":\"lxveabfqx\",\"hour\":1695920381,\"minute\":1009857472,\"usedBytes\":3669713870974720724},\"monthlySchedule\":{\"snapshotsToKeep\":2075787893,\"daysOfMonth\":\"ddtvqctt\",\"hour\":1692920118,\"minute\":1119917570,\"usedBytes\":2333089062747558812},\"enabled\":false,\"provisioningState\":\"ieekpndzaa\"},\"location\":\"udqmeqwigpibudq\",\"tags\":{\"ybpmzznrtffyaq\":\"eb\",\"hvseufuqyrx\":\"tmhheioqa\",\"dgamquhiosrsj\":\"dlcgqlsismjqfr\"},\"id\":\"ivfcdisyirnx\",\"name\":\"hcz\",\"type\":\"xrxzbujrtr\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        NetAppFilesManager manager =
            NetAppFilesManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        SnapshotPolicy response =
            manager
                .snapshotPolicies()
                .getWithResponse("eecjmeis", "stvasylwxdzaumw", "oohgu", com.azure.core.util.Context.NONE)
                .getValue();

        Assertions.assertEquals("udqmeqwigpibudq", response.location());
        Assertions.assertEquals("eb", response.tags().get("ybpmzznrtffyaq"));
        Assertions.assertEquals(943860065, response.hourlySchedule().snapshotsToKeep());
        Assertions.assertEquals(125606938, response.hourlySchedule().minute());
        Assertions.assertEquals(7359436654104402484L, response.hourlySchedule().usedBytes());
        Assertions.assertEquals(989403174, response.dailySchedule().snapshotsToKeep());
        Assertions.assertEquals(1764407789, response.dailySchedule().hour());
        Assertions.assertEquals(1974218119, response.dailySchedule().minute());
        Assertions.assertEquals(34566941819509688L, response.dailySchedule().usedBytes());
        Assertions.assertEquals(1124568750, response.weeklySchedule().snapshotsToKeep());
        Assertions.assertEquals("lxveabfqx", response.weeklySchedule().day());
        Assertions.assertEquals(1695920381, response.weeklySchedule().hour());
        Assertions.assertEquals(1009857472, response.weeklySchedule().minute());
        Assertions.assertEquals(3669713870974720724L, response.weeklySchedule().usedBytes());
        Assertions.assertEquals(2075787893, response.monthlySchedule().snapshotsToKeep());
        Assertions.assertEquals("ddtvqctt", response.monthlySchedule().daysOfMonth());
        Assertions.assertEquals(1692920118, response.monthlySchedule().hour());
        Assertions.assertEquals(1119917570, response.monthlySchedule().minute());
        Assertions.assertEquals(2333089062747558812L, response.monthlySchedule().usedBytes());
        Assertions.assertEquals(false, response.enabled());
    }
}
