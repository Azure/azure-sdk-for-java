// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.netapp.models.ChownMode;
import com.azure.resourcemanager.netapp.models.ExportPolicyRule;
import org.junit.jupiter.api.Assertions;

public final class ExportPolicyRuleTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ExportPolicyRule model =
            BinaryData
                .fromString(
                    "{\"ruleIndex\":1665079577,\"unixReadOnly\":false,\"unixReadWrite\":false,\"kerberos5ReadOnly\":true,\"kerberos5ReadWrite\":false,\"kerberos5iReadOnly\":false,\"kerberos5iReadWrite\":true,\"kerberos5pReadOnly\":false,\"kerberos5pReadWrite\":false,\"cifs\":true,\"nfsv3\":false,\"nfsv41\":false,\"allowedClients\":\"jcbpwxqpsrknft\",\"hasRootAccess\":true,\"chownMode\":\"Unrestricted\"}")
                .toObject(ExportPolicyRule.class);
        Assertions.assertEquals(1665079577, model.ruleIndex());
        Assertions.assertEquals(false, model.unixReadOnly());
        Assertions.assertEquals(false, model.unixReadWrite());
        Assertions.assertEquals(true, model.kerberos5ReadOnly());
        Assertions.assertEquals(false, model.kerberos5ReadWrite());
        Assertions.assertEquals(false, model.kerberos5IReadOnly());
        Assertions.assertEquals(true, model.kerberos5IReadWrite());
        Assertions.assertEquals(false, model.kerberos5PReadOnly());
        Assertions.assertEquals(false, model.kerberos5PReadWrite());
        Assertions.assertEquals(true, model.cifs());
        Assertions.assertEquals(false, model.nfsv3());
        Assertions.assertEquals(false, model.nfsv41());
        Assertions.assertEquals("jcbpwxqpsrknft", model.allowedClients());
        Assertions.assertEquals(true, model.hasRootAccess());
        Assertions.assertEquals(ChownMode.UNRESTRICTED, model.chownMode());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ExportPolicyRule model =
            new ExportPolicyRule()
                .withRuleIndex(1665079577)
                .withUnixReadOnly(false)
                .withUnixReadWrite(false)
                .withKerberos5ReadOnly(true)
                .withKerberos5ReadWrite(false)
                .withKerberos5IReadOnly(false)
                .withKerberos5IReadWrite(true)
                .withKerberos5PReadOnly(false)
                .withKerberos5PReadWrite(false)
                .withCifs(true)
                .withNfsv3(false)
                .withNfsv41(false)
                .withAllowedClients("jcbpwxqpsrknft")
                .withHasRootAccess(true)
                .withChownMode(ChownMode.UNRESTRICTED);
        model = BinaryData.fromObject(model).toObject(ExportPolicyRule.class);
        Assertions.assertEquals(1665079577, model.ruleIndex());
        Assertions.assertEquals(false, model.unixReadOnly());
        Assertions.assertEquals(false, model.unixReadWrite());
        Assertions.assertEquals(true, model.kerberos5ReadOnly());
        Assertions.assertEquals(false, model.kerberos5ReadWrite());
        Assertions.assertEquals(false, model.kerberos5IReadOnly());
        Assertions.assertEquals(true, model.kerberos5IReadWrite());
        Assertions.assertEquals(false, model.kerberos5PReadOnly());
        Assertions.assertEquals(false, model.kerberos5PReadWrite());
        Assertions.assertEquals(true, model.cifs());
        Assertions.assertEquals(false, model.nfsv3());
        Assertions.assertEquals(false, model.nfsv41());
        Assertions.assertEquals("jcbpwxqpsrknft", model.allowedClients());
        Assertions.assertEquals(true, model.hasRootAccess());
        Assertions.assertEquals(ChownMode.UNRESTRICTED, model.chownMode());
    }
}
