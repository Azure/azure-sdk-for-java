// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.netapp.fluent.models.CapacityPoolInner;
import com.azure.resourcemanager.netapp.models.EncryptionType;
import com.azure.resourcemanager.netapp.models.QosType;
import com.azure.resourcemanager.netapp.models.ServiceLevel;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class CapacityPoolInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CapacityPoolInner model = BinaryData.fromString(
            "{\"etag\":\"fmisg\",\"properties\":{\"poolId\":\"nbbelda\",\"size\":547140611004295932,\"serviceLevel\":\"StandardZRS\",\"provisioningState\":\"liourqhak\",\"totalThroughputMibps\":74.19552,\"utilizedThroughputMibps\":82.035736,\"qosType\":\"Manual\",\"coolAccess\":true,\"encryptionType\":\"Single\"},\"location\":\"owzxcu\",\"tags\":{\"ucww\":\"jooxdjebw\",\"bvmeuecivy\":\"vo\",\"ueiotwmcdyt\":\"zceuojgjrw\",\"it\":\"x\"},\"id\":\"nrjawgqwg\",\"name\":\"hniskxfbkpyc\",\"type\":\"klwndnhjdauwhv\"}")
            .toObject(CapacityPoolInner.class);
        Assertions.assertEquals("owzxcu", model.location());
        Assertions.assertEquals("jooxdjebw", model.tags().get("ucww"));
        Assertions.assertEquals(547140611004295932L, model.size());
        Assertions.assertEquals(ServiceLevel.STANDARD_ZRS, model.serviceLevel());
        Assertions.assertEquals(QosType.MANUAL, model.qosType());
        Assertions.assertEquals(true, model.coolAccess());
        Assertions.assertEquals(EncryptionType.SINGLE, model.encryptionType());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CapacityPoolInner model = new CapacityPoolInner().withLocation("owzxcu")
            .withTags(mapOf("ucww", "jooxdjebw", "bvmeuecivy", "vo", "ueiotwmcdyt", "zceuojgjrw", "it", "x"))
            .withSize(547140611004295932L)
            .withServiceLevel(ServiceLevel.STANDARD_ZRS)
            .withQosType(QosType.MANUAL)
            .withCoolAccess(true)
            .withEncryptionType(EncryptionType.SINGLE);
        model = BinaryData.fromObject(model).toObject(CapacityPoolInner.class);
        Assertions.assertEquals("owzxcu", model.location());
        Assertions.assertEquals("jooxdjebw", model.tags().get("ucww"));
        Assertions.assertEquals(547140611004295932L, model.size());
        Assertions.assertEquals(ServiceLevel.STANDARD_ZRS, model.serviceLevel());
        Assertions.assertEquals(QosType.MANUAL, model.qosType());
        Assertions.assertEquals(true, model.coolAccess());
        Assertions.assertEquals(EncryptionType.SINGLE, model.encryptionType());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
