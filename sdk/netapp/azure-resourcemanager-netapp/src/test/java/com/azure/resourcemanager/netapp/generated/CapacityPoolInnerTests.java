// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.netapp.fluent.models.CapacityPoolInner;
import com.azure.resourcemanager.netapp.models.EncryptionType;
import com.azure.resourcemanager.netapp.models.QosType;
import com.azure.resourcemanager.netapp.models.ServiceLevel;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class CapacityPoolInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CapacityPoolInner model = BinaryData.fromString(
            "{\"etag\":\"wgxhn\",\"properties\":{\"poolId\":\"kxfbkpycgklwndn\",\"size\":8301108996863671678,\"serviceLevel\":\"StandardZRS\",\"provisioningState\":\"whvylw\",\"totalThroughputMibps\":95.03192,\"utilizedThroughputMibps\":3.2213032,\"qosType\":\"Auto\",\"coolAccess\":true,\"encryptionType\":\"Single\"},\"location\":\"pow\",\"tags\":{\"lupj\":\"rzqlveu\",\"riplrbpbewtg\":\"khfxobbcswsrt\"},\"id\":\"fgb\",\"name\":\"c\",\"type\":\"wxzvlvqhjkb\"}")
            .toObject(CapacityPoolInner.class);
        Assertions.assertEquals("pow", model.location());
        Assertions.assertEquals("rzqlveu", model.tags().get("lupj"));
        Assertions.assertEquals(8301108996863671678L, model.size());
        Assertions.assertEquals(ServiceLevel.STANDARD_ZRS, model.serviceLevel());
        Assertions.assertEquals(QosType.AUTO, model.qosType());
        Assertions.assertTrue(model.coolAccess());
        Assertions.assertEquals(EncryptionType.SINGLE, model.encryptionType());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CapacityPoolInner model = new CapacityPoolInner().withLocation("pow")
            .withTags(mapOf("lupj", "rzqlveu", "riplrbpbewtg", "khfxobbcswsrt"))
            .withSize(8301108996863671678L)
            .withServiceLevel(ServiceLevel.STANDARD_ZRS)
            .withQosType(QosType.AUTO)
            .withCoolAccess(true)
            .withEncryptionType(EncryptionType.SINGLE);
        model = BinaryData.fromObject(model).toObject(CapacityPoolInner.class);
        Assertions.assertEquals("pow", model.location());
        Assertions.assertEquals("rzqlveu", model.tags().get("lupj"));
        Assertions.assertEquals(8301108996863671678L, model.size());
        Assertions.assertEquals(ServiceLevel.STANDARD_ZRS, model.serviceLevel());
        Assertions.assertEquals(QosType.AUTO, model.qosType());
        Assertions.assertTrue(model.coolAccess());
        Assertions.assertEquals(EncryptionType.SINGLE, model.encryptionType());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
