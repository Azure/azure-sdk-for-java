// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.netapp.fluent.models.VolumeQuotaRuleInner;
import com.azure.resourcemanager.netapp.models.Type;
import com.azure.resourcemanager.netapp.models.VolumeQuotaRulesList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class VolumeQuotaRulesListTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        VolumeQuotaRulesList model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"provisioningState\":\"Moving\",\"quotaSizeInKiBs\":3246376180272255433,\"quotaType\":\"IndividualGroupQuota\",\"quotaTarget\":\"pwp\"},\"location\":\"lwbtlhf\",\"tags\":{\"vfbgofeljagrqmqh\":\"cdhszf\"},\"id\":\"dvriiiojnal\",\"name\":\"hfkvtvsexsowuel\",\"type\":\"qhhahhxvrhmzkwpj\"}]}")
            .toObject(VolumeQuotaRulesList.class);
        Assertions.assertEquals("lwbtlhf", model.value().get(0).location());
        Assertions.assertEquals("cdhszf", model.value().get(0).tags().get("vfbgofeljagrqmqh"));
        Assertions.assertEquals(3246376180272255433L, model.value().get(0).quotaSizeInKiBs());
        Assertions.assertEquals(Type.INDIVIDUAL_GROUP_QUOTA, model.value().get(0).quotaType());
        Assertions.assertEquals("pwp", model.value().get(0).quotaTarget());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        VolumeQuotaRulesList model
            = new VolumeQuotaRulesList().withValue(Arrays.asList(new VolumeQuotaRuleInner().withLocation("lwbtlhf")
                .withTags(mapOf("vfbgofeljagrqmqh", "cdhszf"))
                .withQuotaSizeInKiBs(3246376180272255433L)
                .withQuotaType(Type.INDIVIDUAL_GROUP_QUOTA)
                .withQuotaTarget("pwp")));
        model = BinaryData.fromObject(model).toObject(VolumeQuotaRulesList.class);
        Assertions.assertEquals("lwbtlhf", model.value().get(0).location());
        Assertions.assertEquals("cdhszf", model.value().get(0).tags().get("vfbgofeljagrqmqh"));
        Assertions.assertEquals(3246376180272255433L, model.value().get(0).quotaSizeInKiBs());
        Assertions.assertEquals(Type.INDIVIDUAL_GROUP_QUOTA, model.value().get(0).quotaType());
        Assertions.assertEquals("pwp", model.value().get(0).quotaTarget());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
