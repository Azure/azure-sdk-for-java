// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.netapp.fluent.models.VolumeQuotaRuleInner;
import com.azure.resourcemanager.netapp.models.Type;
import com.azure.resourcemanager.netapp.models.VolumeQuotaRulesList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class VolumeQuotaRulesListTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        VolumeQuotaRulesList model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"provisioningState\":\"Deleting\",\"quotaSizeInKiBs\":4753379128237183611,\"quotaType\":\"DefaultGroupQuota\",\"quotaTarget\":\"tsgumhj\"},\"location\":\"ikkx\",\"tags\":{\"vuzlm\":\"olbq\"},\"id\":\"felfktg\",\"name\":\"lcrpw\",\"type\":\"xeznoi\"},{\"properties\":{\"provisioningState\":\"Patching\",\"quotaSizeInKiBs\":336408309015246228,\"quotaType\":\"DefaultUserQuota\",\"quotaTarget\":\"nbsazejjoqkag\"},\"location\":\"sxtta\",\"tags\":{\"mkqjj\":\"xnfaazpxdtnk\",\"pyouaibrebqaays\":\"wuenvr\"},\"id\":\"kixqtnqtt\",\"name\":\"zlwfffiakp\",\"type\":\"pqqmted\"}]}")
            .toObject(VolumeQuotaRulesList.class);
        Assertions.assertEquals("ikkx", model.value().get(0).location());
        Assertions.assertEquals("olbq", model.value().get(0).tags().get("vuzlm"));
        Assertions.assertEquals(4753379128237183611L, model.value().get(0).quotaSizeInKiBs());
        Assertions.assertEquals(Type.DEFAULT_GROUP_QUOTA, model.value().get(0).quotaType());
        Assertions.assertEquals("tsgumhj", model.value().get(0).quotaTarget());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        VolumeQuotaRulesList model = new VolumeQuotaRulesList().withValue(Arrays.asList(
            new VolumeQuotaRuleInner().withLocation("ikkx")
                .withTags(mapOf("vuzlm", "olbq"))
                .withQuotaSizeInKiBs(4753379128237183611L)
                .withQuotaType(Type.DEFAULT_GROUP_QUOTA)
                .withQuotaTarget("tsgumhj"),
            new VolumeQuotaRuleInner().withLocation("sxtta")
                .withTags(mapOf("mkqjj", "xnfaazpxdtnk", "pyouaibrebqaays", "wuenvr"))
                .withQuotaSizeInKiBs(336408309015246228L)
                .withQuotaType(Type.DEFAULT_USER_QUOTA)
                .withQuotaTarget("nbsazejjoqkag")));
        model = BinaryData.fromObject(model).toObject(VolumeQuotaRulesList.class);
        Assertions.assertEquals("ikkx", model.value().get(0).location());
        Assertions.assertEquals("olbq", model.value().get(0).tags().get("vuzlm"));
        Assertions.assertEquals(4753379128237183611L, model.value().get(0).quotaSizeInKiBs());
        Assertions.assertEquals(Type.DEFAULT_GROUP_QUOTA, model.value().get(0).quotaType());
        Assertions.assertEquals("tsgumhj", model.value().get(0).quotaTarget());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
