// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.netapp.fluent.models.VolumeQuotaRuleInner;
import com.azure.resourcemanager.netapp.models.Type;
import com.azure.resourcemanager.netapp.models.VolumeQuotaRulesList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class VolumeQuotaRulesListTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        VolumeQuotaRulesList model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"provisioningState\":\"Failed\",\"quotaSizeInKiBs\":364088888984952408,\"quotaType\":\"IndividualUserQuota\",\"quotaTarget\":\"kvi\"},\"location\":\"dscwxqupevzhf\",\"tags\":{\"pelmcuvhixbjxyf\":\"txhojujb\",\"lrcoolsttpki\":\"n\",\"rywvtylbfpn\":\"kkbnu\"},\"id\":\"urdoi\",\"name\":\"iithtywu\",\"type\":\"xcbihw\"},{\"properties\":{\"provisioningState\":\"Moving\",\"quotaSizeInKiBs\":6534046956232130142,\"quotaType\":\"IndividualGroupQuota\",\"quotaTarget\":\"hrdgoihxumwcto\"},\"location\":\"zj\",\"tags\":{\"wtovvtgsein\":\"dfdlwggyts\",\"knpirgnepttwq\":\"fiufx\"},\"id\":\"sniffc\",\"name\":\"mqnrojlpijnkr\",\"type\":\"frddhcrati\"},{\"properties\":{\"provisioningState\":\"Deleting\",\"quotaSizeInKiBs\":6975705229161373381,\"quotaType\":\"DefaultUserQuota\",\"quotaTarget\":\"tozqyzhftwesgo\"},\"location\":\"zhonnxkrlgnyhmo\",\"tags\":{\"gh\":\"kkgthr\"},\"id\":\"jbdhqxvc\",\"name\":\"gf\",\"type\":\"pdso\"}]}")
            .toObject(VolumeQuotaRulesList.class);
        Assertions.assertEquals("dscwxqupevzhf", model.value().get(0).location());
        Assertions.assertEquals("txhojujb", model.value().get(0).tags().get("pelmcuvhixbjxyf"));
        Assertions.assertEquals(364088888984952408L, model.value().get(0).quotaSizeInKiBs());
        Assertions.assertEquals(Type.INDIVIDUAL_USER_QUOTA, model.value().get(0).quotaType());
        Assertions.assertEquals("kvi", model.value().get(0).quotaTarget());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        VolumeQuotaRulesList model
            = new VolumeQuotaRulesList()
                .withValue(
                    Arrays
                        .asList(
                            new VolumeQuotaRuleInner().withLocation("dscwxqupevzhf")
                                .withTags(
                                    mapOf("pelmcuvhixbjxyf", "txhojujb", "lrcoolsttpki", "n", "rywvtylbfpn", "kkbnu"))
                                .withQuotaSizeInKiBs(364088888984952408L)
                                .withQuotaType(Type.INDIVIDUAL_USER_QUOTA)
                                .withQuotaTarget("kvi"),
                            new VolumeQuotaRuleInner().withLocation("zj")
                                .withTags(mapOf("wtovvtgsein", "dfdlwggyts", "knpirgnepttwq", "fiufx"))
                                .withQuotaSizeInKiBs(6534046956232130142L)
                                .withQuotaType(Type.INDIVIDUAL_GROUP_QUOTA)
                                .withQuotaTarget("hrdgoihxumwcto"),
                            new VolumeQuotaRuleInner().withLocation("zhonnxkrlgnyhmo")
                                .withTags(mapOf("gh", "kkgthr"))
                                .withQuotaSizeInKiBs(6975705229161373381L)
                                .withQuotaType(Type.DEFAULT_USER_QUOTA)
                                .withQuotaTarget("tozqyzhftwesgo")));
        model = BinaryData.fromObject(model).toObject(VolumeQuotaRulesList.class);
        Assertions.assertEquals("dscwxqupevzhf", model.value().get(0).location());
        Assertions.assertEquals("txhojujb", model.value().get(0).tags().get("pelmcuvhixbjxyf"));
        Assertions.assertEquals(364088888984952408L, model.value().get(0).quotaSizeInKiBs());
        Assertions.assertEquals(Type.INDIVIDUAL_USER_QUOTA, model.value().get(0).quotaType());
        Assertions.assertEquals("kvi", model.value().get(0).quotaTarget());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
