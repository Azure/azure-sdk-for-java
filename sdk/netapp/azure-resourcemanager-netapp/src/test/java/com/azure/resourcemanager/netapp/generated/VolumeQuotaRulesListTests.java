// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.netapp.fluent.models.VolumeQuotaRuleInner;
import com.azure.resourcemanager.netapp.models.Type;
import com.azure.resourcemanager.netapp.models.VolumeQuotaRulesList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class VolumeQuotaRulesListTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        VolumeQuotaRulesList model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"provisioningState\":\"Creating\",\"quotaSizeInKiBs\":4051356742453567951,\"quotaType\":\"DefaultUserQuota\",\"quotaTarget\":\"mqhldvrii\"},\"location\":\"jnalghf\",\"tags\":{\"hhahhxvrhmzkwpjg\":\"vsexsowuelu\",\"j\":\"wspughftqsxhqx\",\"fzdm\":\"ukndxdigrjgu\"},\"id\":\"yqtfihwh\",\"name\":\"otzi\",\"type\":\"gamv\"},{\"properties\":{\"provisioningState\":\"Creating\",\"quotaSizeInKiBs\":7578366703491273982,\"quotaType\":\"IndividualGroupQuota\",\"quotaTarget\":\"phqamvdkfwynwcvt\"},\"location\":\"kayh\",\"tags\":{\"kzwpcnpw\":\"vyqia\"},\"id\":\"cjaesgvvs\",\"name\":\"cyajguqf\",\"type\":\"wygzlvdnkfxusem\"}]}")
            .toObject(VolumeQuotaRulesList.class);
        Assertions.assertEquals("jnalghf", model.value().get(0).location());
        Assertions.assertEquals("vsexsowuelu", model.value().get(0).tags().get("hhahhxvrhmzkwpjg"));
        Assertions.assertEquals(4051356742453567951L, model.value().get(0).quotaSizeInKiBs());
        Assertions.assertEquals(Type.DEFAULT_USER_QUOTA, model.value().get(0).quotaType());
        Assertions.assertEquals("mqhldvrii", model.value().get(0).quotaTarget());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        VolumeQuotaRulesList model
            = new VolumeQuotaRulesList()
                .withValue(
                    Arrays
                        .asList(
                            new VolumeQuotaRuleInner().withLocation("jnalghf")
                                .withTags(mapOf("hhahhxvrhmzkwpjg", "vsexsowuelu", "j", "wspughftqsxhqx", "fzdm",
                                    "ukndxdigrjgu"))
                                .withQuotaSizeInKiBs(4051356742453567951L)
                                .withQuotaType(Type.DEFAULT_USER_QUOTA)
                                .withQuotaTarget("mqhldvrii"),
                            new VolumeQuotaRuleInner().withLocation("kayh")
                                .withTags(mapOf("kzwpcnpw", "vyqia"))
                                .withQuotaSizeInKiBs(7578366703491273982L)
                                .withQuotaType(Type.INDIVIDUAL_GROUP_QUOTA)
                                .withQuotaTarget("phqamvdkfwynwcvt")));
        model = BinaryData.fromObject(model).toObject(VolumeQuotaRulesList.class);
        Assertions.assertEquals("jnalghf", model.value().get(0).location());
        Assertions.assertEquals("vsexsowuelu", model.value().get(0).tags().get("hhahhxvrhmzkwpjg"));
        Assertions.assertEquals(4051356742453567951L, model.value().get(0).quotaSizeInKiBs());
        Assertions.assertEquals(Type.DEFAULT_USER_QUOTA, model.value().get(0).quotaType());
        Assertions.assertEquals("mqhldvrii", model.value().get(0).quotaTarget());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
