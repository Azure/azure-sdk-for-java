// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.netapp.fluent.models.VolumeQuotaRuleInner;
import com.azure.resourcemanager.netapp.models.Type;
import com.azure.resourcemanager.netapp.models.VolumeQuotaRulesList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class VolumeQuotaRulesListTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        VolumeQuotaRulesList model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"provisioningState\":\"Moving\",\"quotaSizeInKiBs\":4636975595873300719,\"quotaType\":\"IndividualGroupQuota\",\"quotaTarget\":\"qknp\"},\"location\":\"gnepttwqmsni\",\"tags\":{\"k\":\"dmqnrojlpij\"},\"id\":\"xfrdd\",\"name\":\"c\",\"type\":\"atiz\"},{\"properties\":{\"provisioningState\":\"Patching\",\"quotaSizeInKiBs\":8214458814642000161,\"quotaType\":\"DefaultUserQuota\",\"quotaTarget\":\"ozqyzh\"},\"location\":\"wesgogczh\",\"tags\":{\"gnyhmossxkkg\":\"xkr\",\"rghxjb\":\"h\",\"rnsvbuswd\":\"hqxvcxgfrpdsofbs\",\"ybycnunvj\":\"z\"},\"id\":\"rtkfawnopq\",\"name\":\"ikyzirtxdy\",\"type\":\"x\"},{\"properties\":{\"provisioningState\":\"Patching\",\"quotaSizeInKiBs\":4096359137880605579,\"quotaType\":\"IndividualUserQuota\",\"quotaTarget\":\"ioilqukrydxtq\"},\"location\":\"eoxorggufhyao\",\"tags\":{\"jzhpjbibgjmfx\":\"ghhavgrvkffo\",\"cluyovwxnbkf\":\"mv\",\"zbomvzzbtdcqvpni\":\"zzxscyhwzdgiruj\"},\"id\":\"ujviylwdshfs\",\"name\":\"n\",\"type\":\"bgye\"}]}")
            .toObject(VolumeQuotaRulesList.class);
        Assertions.assertEquals("gnepttwqmsni", model.value().get(0).location());
        Assertions.assertEquals("dmqnrojlpij", model.value().get(0).tags().get("k"));
        Assertions.assertEquals(4636975595873300719L, model.value().get(0).quotaSizeInKiBs());
        Assertions.assertEquals(Type.INDIVIDUAL_GROUP_QUOTA, model.value().get(0).quotaType());
        Assertions.assertEquals("qknp", model.value().get(0).quotaTarget());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        VolumeQuotaRulesList model = new VolumeQuotaRulesList().withValue(Arrays.asList(
            new VolumeQuotaRuleInner().withLocation("gnepttwqmsni")
                .withTags(mapOf("k", "dmqnrojlpij"))
                .withQuotaSizeInKiBs(4636975595873300719L)
                .withQuotaType(Type.INDIVIDUAL_GROUP_QUOTA)
                .withQuotaTarget("qknp"),
            new VolumeQuotaRuleInner().withLocation("wesgogczh")
                .withTags(
                    mapOf("gnyhmossxkkg", "xkr", "rghxjb", "h", "rnsvbuswd", "hqxvcxgfrpdsofbs", "ybycnunvj", "z"))
                .withQuotaSizeInKiBs(8214458814642000161L)
                .withQuotaType(Type.DEFAULT_USER_QUOTA)
                .withQuotaTarget("ozqyzh"),
            new VolumeQuotaRuleInner().withLocation("eoxorggufhyao")
                .withTags(
                    mapOf("jzhpjbibgjmfx", "ghhavgrvkffo", "cluyovwxnbkf", "mv", "zbomvzzbtdcqvpni", "zzxscyhwzdgiruj"))
                .withQuotaSizeInKiBs(4096359137880605579L)
                .withQuotaType(Type.INDIVIDUAL_USER_QUOTA)
                .withQuotaTarget("ioilqukrydxtq")));
        model = BinaryData.fromObject(model).toObject(VolumeQuotaRulesList.class);
        Assertions.assertEquals("gnepttwqmsni", model.value().get(0).location());
        Assertions.assertEquals("dmqnrojlpij", model.value().get(0).tags().get("k"));
        Assertions.assertEquals(4636975595873300719L, model.value().get(0).quotaSizeInKiBs());
        Assertions.assertEquals(Type.INDIVIDUAL_GROUP_QUOTA, model.value().get(0).quotaType());
        Assertions.assertEquals("qknp", model.value().get(0).quotaTarget());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
