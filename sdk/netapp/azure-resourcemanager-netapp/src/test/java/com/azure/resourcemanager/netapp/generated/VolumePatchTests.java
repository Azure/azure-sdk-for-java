// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.netapp.models.ChownMode;
import com.azure.resourcemanager.netapp.models.CoolAccessRetrievalPolicy;
import com.azure.resourcemanager.netapp.models.CoolAccessTieringPolicy;
import com.azure.resourcemanager.netapp.models.ExportPolicyRule;
import com.azure.resourcemanager.netapp.models.ServiceLevel;
import com.azure.resourcemanager.netapp.models.SmbAccessBasedEnumeration;
import com.azure.resourcemanager.netapp.models.SmbNonBrowsable;
import com.azure.resourcemanager.netapp.models.VolumeBackupProperties;
import com.azure.resourcemanager.netapp.models.VolumePatch;
import com.azure.resourcemanager.netapp.models.VolumePatchPropertiesDataProtection;
import com.azure.resourcemanager.netapp.models.VolumePatchPropertiesExportPolicy;
import com.azure.resourcemanager.netapp.models.VolumeSnapshotProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class VolumePatchTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        VolumePatch model = BinaryData.fromString(
            "{\"properties\":{\"serviceLevel\":\"Flexible\",\"usageThreshold\":411911013999749991,\"exportPolicy\":{\"rules\":[{\"ruleIndex\":1702938248,\"unixReadOnly\":true,\"unixReadWrite\":true,\"kerberos5ReadOnly\":true,\"kerberos5ReadWrite\":false,\"kerberos5iReadOnly\":true,\"kerberos5iReadWrite\":true,\"kerberos5pReadOnly\":true,\"kerberos5pReadWrite\":true,\"cifs\":false,\"nfsv3\":true,\"nfsv41\":false,\"allowedClients\":\"sdyhtozfikdowwq\",\"hasRootAccess\":false,\"chownMode\":\"Restricted\"},{\"ruleIndex\":1319405146,\"unixReadOnly\":false,\"unixReadWrite\":true,\"kerberos5ReadOnly\":true,\"kerberos5ReadWrite\":false,\"kerberos5iReadOnly\":true,\"kerberos5iReadWrite\":false,\"kerberos5pReadOnly\":true,\"kerberos5pReadWrite\":true,\"cifs\":false,\"nfsv3\":false,\"nfsv41\":false,\"allowedClients\":\"jnkaljutiiswacff\",\"hasRootAccess\":false,\"chownMode\":\"Restricted\"},{\"ruleIndex\":1157139188,\"unixReadOnly\":false,\"unixReadWrite\":true,\"kerberos5ReadOnly\":false,\"kerberos5ReadWrite\":false,\"kerberos5iReadOnly\":false,\"kerberos5iReadWrite\":false,\"kerberos5pReadOnly\":false,\"kerberos5pReadWrite\":true,\"cifs\":false,\"nfsv3\":true,\"nfsv41\":true,\"allowedClients\":\"hdlxyjrxsagafcn\",\"hasRootAccess\":false,\"chownMode\":\"Unrestricted\"}]},\"protocolTypes\":[\"nedgfbc\",\"kcvqvpke\"],\"throughputMibps\":71.283,\"dataProtection\":{\"backup\":{\"backupPolicyId\":\"hvoodsotbobzd\",\"policyEnforced\":false,\"backupVaultId\":\"wvnhdldwmgx\"},\"snapshot\":{\"snapshotPolicyId\":\"slpmutwuo\"}},\"isDefaultQuotaEnabled\":false,\"defaultUserQuotaInKiBs\":5722379398974283920,\"defaultGroupQuotaInKiBs\":3859577697194270181,\"unixPermissions\":\"yqsluic\",\"coolAccess\":true,\"coolnessPeriod\":1810528552,\"coolAccessRetrievalPolicy\":\"Never\",\"coolAccessTieringPolicy\":\"Auto\",\"snapshotDirectoryVisible\":true,\"smbAccessBasedEnumeration\":\"Enabled\",\"smbNonBrowsable\":\"Disabled\"},\"location\":\"modfvuefywsbpfvm\",\"tags\":{\"yzvqt\":\"rfouyftaakcpw\",\"zksmondj\":\"nubexk\"},\"id\":\"quxvypomgkop\",\"name\":\"whojvp\",\"type\":\"jqg\"}")
            .toObject(VolumePatch.class);
        Assertions.assertEquals("modfvuefywsbpfvm", model.location());
        Assertions.assertEquals("rfouyftaakcpw", model.tags().get("yzvqt"));
        Assertions.assertEquals(ServiceLevel.FLEXIBLE, model.serviceLevel());
        Assertions.assertEquals(411911013999749991L, model.usageThreshold());
        Assertions.assertEquals(1702938248, model.exportPolicy().rules().get(0).ruleIndex());
        Assertions.assertTrue(model.exportPolicy().rules().get(0).unixReadOnly());
        Assertions.assertTrue(model.exportPolicy().rules().get(0).unixReadWrite());
        Assertions.assertTrue(model.exportPolicy().rules().get(0).kerberos5ReadOnly());
        Assertions.assertFalse(model.exportPolicy().rules().get(0).kerberos5ReadWrite());
        Assertions.assertTrue(model.exportPolicy().rules().get(0).kerberos5IReadOnly());
        Assertions.assertTrue(model.exportPolicy().rules().get(0).kerberos5IReadWrite());
        Assertions.assertTrue(model.exportPolicy().rules().get(0).kerberos5PReadOnly());
        Assertions.assertTrue(model.exportPolicy().rules().get(0).kerberos5PReadWrite());
        Assertions.assertFalse(model.exportPolicy().rules().get(0).cifs());
        Assertions.assertTrue(model.exportPolicy().rules().get(0).nfsv3());
        Assertions.assertFalse(model.exportPolicy().rules().get(0).nfsv41());
        Assertions.assertEquals("sdyhtozfikdowwq", model.exportPolicy().rules().get(0).allowedClients());
        Assertions.assertFalse(model.exportPolicy().rules().get(0).hasRootAccess());
        Assertions.assertEquals(ChownMode.RESTRICTED, model.exportPolicy().rules().get(0).chownMode());
        Assertions.assertEquals("nedgfbc", model.protocolTypes().get(0));
        Assertions.assertEquals(71.283F, model.throughputMibps());
        Assertions.assertEquals("hvoodsotbobzd", model.dataProtection().backup().backupPolicyId());
        Assertions.assertFalse(model.dataProtection().backup().policyEnforced());
        Assertions.assertEquals("wvnhdldwmgx", model.dataProtection().backup().backupVaultId());
        Assertions.assertEquals("slpmutwuo", model.dataProtection().snapshot().snapshotPolicyId());
        Assertions.assertFalse(model.isDefaultQuotaEnabled());
        Assertions.assertEquals(5722379398974283920L, model.defaultUserQuotaInKiBs());
        Assertions.assertEquals(3859577697194270181L, model.defaultGroupQuotaInKiBs());
        Assertions.assertEquals("yqsluic", model.unixPermissions());
        Assertions.assertTrue(model.coolAccess());
        Assertions.assertEquals(1810528552, model.coolnessPeriod());
        Assertions.assertEquals(CoolAccessRetrievalPolicy.NEVER, model.coolAccessRetrievalPolicy());
        Assertions.assertEquals(CoolAccessTieringPolicy.AUTO, model.coolAccessTieringPolicy());
        Assertions.assertTrue(model.snapshotDirectoryVisible());
        Assertions.assertEquals(SmbAccessBasedEnumeration.ENABLED, model.smbAccessBasedEnumeration());
        Assertions.assertEquals(SmbNonBrowsable.DISABLED, model.smbNonBrowsable());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        VolumePatch model = new VolumePatch().withLocation("modfvuefywsbpfvm")
            .withTags(mapOf("yzvqt", "rfouyftaakcpw", "zksmondj", "nubexk"))
            .withServiceLevel(ServiceLevel.FLEXIBLE)
            .withUsageThreshold(411911013999749991L)
            .withExportPolicy(new VolumePatchPropertiesExportPolicy().withRules(Arrays.asList(
                new ExportPolicyRule().withRuleIndex(1702938248)
                    .withUnixReadOnly(true)
                    .withUnixReadWrite(true)
                    .withKerberos5ReadOnly(true)
                    .withKerberos5ReadWrite(false)
                    .withKerberos5IReadOnly(true)
                    .withKerberos5IReadWrite(true)
                    .withKerberos5PReadOnly(true)
                    .withKerberos5PReadWrite(true)
                    .withCifs(false)
                    .withNfsv3(true)
                    .withNfsv41(false)
                    .withAllowedClients("sdyhtozfikdowwq")
                    .withHasRootAccess(false)
                    .withChownMode(ChownMode.RESTRICTED),
                new ExportPolicyRule().withRuleIndex(1319405146)
                    .withUnixReadOnly(false)
                    .withUnixReadWrite(true)
                    .withKerberos5ReadOnly(true)
                    .withKerberos5ReadWrite(false)
                    .withKerberos5IReadOnly(true)
                    .withKerberos5IReadWrite(false)
                    .withKerberos5PReadOnly(true)
                    .withKerberos5PReadWrite(true)
                    .withCifs(false)
                    .withNfsv3(false)
                    .withNfsv41(false)
                    .withAllowedClients("jnkaljutiiswacff")
                    .withHasRootAccess(false)
                    .withChownMode(ChownMode.RESTRICTED),
                new ExportPolicyRule().withRuleIndex(1157139188)
                    .withUnixReadOnly(false)
                    .withUnixReadWrite(true)
                    .withKerberos5ReadOnly(false)
                    .withKerberos5ReadWrite(false)
                    .withKerberos5IReadOnly(false)
                    .withKerberos5IReadWrite(false)
                    .withKerberos5PReadOnly(false)
                    .withKerberos5PReadWrite(true)
                    .withCifs(false)
                    .withNfsv3(true)
                    .withNfsv41(true)
                    .withAllowedClients("hdlxyjrxsagafcn")
                    .withHasRootAccess(false)
                    .withChownMode(ChownMode.UNRESTRICTED))))
            .withProtocolTypes(Arrays.asList("nedgfbc", "kcvqvpke"))
            .withThroughputMibps(71.283F)
            .withDataProtection(new VolumePatchPropertiesDataProtection()
                .withBackup(new VolumeBackupProperties().withBackupPolicyId("hvoodsotbobzd")
                    .withPolicyEnforced(false)
                    .withBackupVaultId("wvnhdldwmgx"))
                .withSnapshot(new VolumeSnapshotProperties().withSnapshotPolicyId("slpmutwuo")))
            .withIsDefaultQuotaEnabled(false)
            .withDefaultUserQuotaInKiBs(5722379398974283920L)
            .withDefaultGroupQuotaInKiBs(3859577697194270181L)
            .withUnixPermissions("yqsluic")
            .withCoolAccess(true)
            .withCoolnessPeriod(1810528552)
            .withCoolAccessRetrievalPolicy(CoolAccessRetrievalPolicy.NEVER)
            .withCoolAccessTieringPolicy(CoolAccessTieringPolicy.AUTO)
            .withSnapshotDirectoryVisible(true)
            .withSmbAccessBasedEnumeration(SmbAccessBasedEnumeration.ENABLED)
            .withSmbNonBrowsable(SmbNonBrowsable.DISABLED);
        model = BinaryData.fromObject(model).toObject(VolumePatch.class);
        Assertions.assertEquals("modfvuefywsbpfvm", model.location());
        Assertions.assertEquals("rfouyftaakcpw", model.tags().get("yzvqt"));
        Assertions.assertEquals(ServiceLevel.FLEXIBLE, model.serviceLevel());
        Assertions.assertEquals(411911013999749991L, model.usageThreshold());
        Assertions.assertEquals(1702938248, model.exportPolicy().rules().get(0).ruleIndex());
        Assertions.assertTrue(model.exportPolicy().rules().get(0).unixReadOnly());
        Assertions.assertTrue(model.exportPolicy().rules().get(0).unixReadWrite());
        Assertions.assertTrue(model.exportPolicy().rules().get(0).kerberos5ReadOnly());
        Assertions.assertFalse(model.exportPolicy().rules().get(0).kerberos5ReadWrite());
        Assertions.assertTrue(model.exportPolicy().rules().get(0).kerberos5IReadOnly());
        Assertions.assertTrue(model.exportPolicy().rules().get(0).kerberos5IReadWrite());
        Assertions.assertTrue(model.exportPolicy().rules().get(0).kerberos5PReadOnly());
        Assertions.assertTrue(model.exportPolicy().rules().get(0).kerberos5PReadWrite());
        Assertions.assertFalse(model.exportPolicy().rules().get(0).cifs());
        Assertions.assertTrue(model.exportPolicy().rules().get(0).nfsv3());
        Assertions.assertFalse(model.exportPolicy().rules().get(0).nfsv41());
        Assertions.assertEquals("sdyhtozfikdowwq", model.exportPolicy().rules().get(0).allowedClients());
        Assertions.assertFalse(model.exportPolicy().rules().get(0).hasRootAccess());
        Assertions.assertEquals(ChownMode.RESTRICTED, model.exportPolicy().rules().get(0).chownMode());
        Assertions.assertEquals("nedgfbc", model.protocolTypes().get(0));
        Assertions.assertEquals(71.283F, model.throughputMibps());
        Assertions.assertEquals("hvoodsotbobzd", model.dataProtection().backup().backupPolicyId());
        Assertions.assertFalse(model.dataProtection().backup().policyEnforced());
        Assertions.assertEquals("wvnhdldwmgx", model.dataProtection().backup().backupVaultId());
        Assertions.assertEquals("slpmutwuo", model.dataProtection().snapshot().snapshotPolicyId());
        Assertions.assertFalse(model.isDefaultQuotaEnabled());
        Assertions.assertEquals(5722379398974283920L, model.defaultUserQuotaInKiBs());
        Assertions.assertEquals(3859577697194270181L, model.defaultGroupQuotaInKiBs());
        Assertions.assertEquals("yqsluic", model.unixPermissions());
        Assertions.assertTrue(model.coolAccess());
        Assertions.assertEquals(1810528552, model.coolnessPeriod());
        Assertions.assertEquals(CoolAccessRetrievalPolicy.NEVER, model.coolAccessRetrievalPolicy());
        Assertions.assertEquals(CoolAccessTieringPolicy.AUTO, model.coolAccessTieringPolicy());
        Assertions.assertTrue(model.snapshotDirectoryVisible());
        Assertions.assertEquals(SmbAccessBasedEnumeration.ENABLED, model.smbAccessBasedEnumeration());
        Assertions.assertEquals(SmbNonBrowsable.DISABLED, model.smbNonBrowsable());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
