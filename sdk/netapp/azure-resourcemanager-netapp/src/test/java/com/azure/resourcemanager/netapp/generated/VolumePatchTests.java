// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.netapp.models.ChownMode;
import com.azure.resourcemanager.netapp.models.CoolAccessRetrievalPolicy;
import com.azure.resourcemanager.netapp.models.ExportPolicyRule;
import com.azure.resourcemanager.netapp.models.ServiceLevel;
import com.azure.resourcemanager.netapp.models.SmbAccessBasedEnumeration;
import com.azure.resourcemanager.netapp.models.SmbNonBrowsable;
import com.azure.resourcemanager.netapp.models.VolumeBackupProperties;
import com.azure.resourcemanager.netapp.models.VolumePatch;
import com.azure.resourcemanager.netapp.models.VolumePatchPropertiesDataProtection;
import com.azure.resourcemanager.netapp.models.VolumePatchPropertiesExportPolicy;
import com.azure.resourcemanager.netapp.models.VolumeSnapshotProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class VolumePatchTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        VolumePatch model = BinaryData.fromString(
            "{\"properties\":{\"serviceLevel\":\"StandardZRS\",\"usageThreshold\":3683939108270418339,\"exportPolicy\":{\"rules\":[{\"ruleIndex\":1259752874,\"unixReadOnly\":true,\"unixReadWrite\":true,\"kerberos5ReadOnly\":true,\"kerberos5ReadWrite\":false,\"kerberos5iReadOnly\":false,\"kerberos5iReadWrite\":true,\"kerberos5pReadOnly\":false,\"kerberos5pReadWrite\":false,\"cifs\":true,\"nfsv3\":true,\"nfsv41\":true,\"allowedClients\":\"ygtdsslswt\",\"hasRootAccess\":true,\"chownMode\":\"Restricted\"},{\"ruleIndex\":539976297,\"unixReadOnly\":false,\"unixReadWrite\":true,\"kerberos5ReadOnly\":false,\"kerberos5ReadWrite\":false,\"kerberos5iReadOnly\":false,\"kerberos5iReadWrite\":false,\"kerberos5pReadOnly\":true,\"kerberos5pReadWrite\":true,\"cifs\":true,\"nfsv3\":true,\"nfsv41\":true,\"allowedClients\":\"vwiwubmwmbesld\",\"hasRootAccess\":false,\"chownMode\":\"Restricted\"},{\"ruleIndex\":363667258,\"unixReadOnly\":false,\"unixReadWrite\":true,\"kerberos5ReadOnly\":false,\"kerberos5ReadWrite\":true,\"kerberos5iReadOnly\":true,\"kerberos5iReadWrite\":true,\"kerberos5pReadOnly\":false,\"kerberos5pReadWrite\":true,\"cifs\":true,\"nfsv3\":true,\"nfsv41\":true,\"allowedClients\":\"eqqkdltfzxm\",\"hasRootAccess\":false,\"chownMode\":\"Unrestricted\"}]},\"protocolTypes\":[\"eodkwobda\"],\"throughputMibps\":71.73575,\"dataProtection\":{\"backup\":{\"backupPolicyId\":\"dxbx\",\"policyEnforced\":true,\"backupVaultId\":\"ogqxndlkzgxhuri\"},\"snapshot\":{\"snapshotPolicyId\":\"podxunkb\"}},\"isDefaultQuotaEnabled\":true,\"defaultUserQuotaInKiBs\":7813815686449278533,\"defaultGroupQuotaInKiBs\":8625022038464827540,\"unixPermissions\":\"wlrbqtkoievseo\",\"coolAccess\":false,\"coolnessPeriod\":209864806,\"coolAccessRetrievalPolicy\":\"Never\",\"snapshotDirectoryVisible\":false,\"smbAccessBasedEnumeration\":\"Enabled\",\"smbNonBrowsable\":\"Disabled\"},\"location\":\"wzizxbmpgcjefuzm\",\"tags\":{\"mnzb\":\"bttdumorppxe\",\"el\":\"bhjpglkfgohdne\"},\"id\":\"phsdyhto\",\"name\":\"fikdowwqu\",\"type\":\"v\"}")
            .toObject(VolumePatch.class);
        Assertions.assertEquals("wzizxbmpgcjefuzm", model.location());
        Assertions.assertEquals("bttdumorppxe", model.tags().get("mnzb"));
        Assertions.assertEquals(ServiceLevel.STANDARD_ZRS, model.serviceLevel());
        Assertions.assertEquals(3683939108270418339L, model.usageThreshold());
        Assertions.assertEquals(1259752874, model.exportPolicy().rules().get(0).ruleIndex());
        Assertions.assertEquals(true, model.exportPolicy().rules().get(0).unixReadOnly());
        Assertions.assertEquals(true, model.exportPolicy().rules().get(0).unixReadWrite());
        Assertions.assertEquals(true, model.exportPolicy().rules().get(0).kerberos5ReadOnly());
        Assertions.assertEquals(false, model.exportPolicy().rules().get(0).kerberos5ReadWrite());
        Assertions.assertEquals(false, model.exportPolicy().rules().get(0).kerberos5IReadOnly());
        Assertions.assertEquals(true, model.exportPolicy().rules().get(0).kerberos5IReadWrite());
        Assertions.assertEquals(false, model.exportPolicy().rules().get(0).kerberos5PReadOnly());
        Assertions.assertEquals(false, model.exportPolicy().rules().get(0).kerberos5PReadWrite());
        Assertions.assertEquals(true, model.exportPolicy().rules().get(0).cifs());
        Assertions.assertEquals(true, model.exportPolicy().rules().get(0).nfsv3());
        Assertions.assertEquals(true, model.exportPolicy().rules().get(0).nfsv41());
        Assertions.assertEquals("ygtdsslswt", model.exportPolicy().rules().get(0).allowedClients());
        Assertions.assertEquals(true, model.exportPolicy().rules().get(0).hasRootAccess());
        Assertions.assertEquals(ChownMode.RESTRICTED, model.exportPolicy().rules().get(0).chownMode());
        Assertions.assertEquals("eodkwobda", model.protocolTypes().get(0));
        Assertions.assertEquals(71.73575F, model.throughputMibps());
        Assertions.assertEquals("dxbx", model.dataProtection().backup().backupPolicyId());
        Assertions.assertEquals(true, model.dataProtection().backup().policyEnforced());
        Assertions.assertEquals("ogqxndlkzgxhuri", model.dataProtection().backup().backupVaultId());
        Assertions.assertEquals("podxunkb", model.dataProtection().snapshot().snapshotPolicyId());
        Assertions.assertEquals(true, model.isDefaultQuotaEnabled());
        Assertions.assertEquals(7813815686449278533L, model.defaultUserQuotaInKiBs());
        Assertions.assertEquals(8625022038464827540L, model.defaultGroupQuotaInKiBs());
        Assertions.assertEquals("wlrbqtkoievseo", model.unixPermissions());
        Assertions.assertEquals(false, model.coolAccess());
        Assertions.assertEquals(209864806, model.coolnessPeriod());
        Assertions.assertEquals(CoolAccessRetrievalPolicy.NEVER, model.coolAccessRetrievalPolicy());
        Assertions.assertEquals(false, model.snapshotDirectoryVisible());
        Assertions.assertEquals(SmbAccessBasedEnumeration.ENABLED, model.smbAccessBasedEnumeration());
        Assertions.assertEquals(SmbNonBrowsable.DISABLED, model.smbNonBrowsable());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        VolumePatch model = new VolumePatch().withLocation("wzizxbmpgcjefuzm")
            .withTags(mapOf("mnzb", "bttdumorppxe", "el", "bhjpglkfgohdne"))
            .withServiceLevel(ServiceLevel.STANDARD_ZRS)
            .withUsageThreshold(3683939108270418339L)
            .withExportPolicy(new VolumePatchPropertiesExportPolicy().withRules(Arrays.asList(
                new ExportPolicyRule().withRuleIndex(1259752874)
                    .withUnixReadOnly(true)
                    .withUnixReadWrite(true)
                    .withKerberos5ReadOnly(true)
                    .withKerberos5ReadWrite(false)
                    .withKerberos5IReadOnly(false)
                    .withKerberos5IReadWrite(true)
                    .withKerberos5PReadOnly(false)
                    .withKerberos5PReadWrite(false)
                    .withCifs(true)
                    .withNfsv3(true)
                    .withNfsv41(true)
                    .withAllowedClients("ygtdsslswt")
                    .withHasRootAccess(true)
                    .withChownMode(ChownMode.RESTRICTED),
                new ExportPolicyRule().withRuleIndex(539976297)
                    .withUnixReadOnly(false)
                    .withUnixReadWrite(true)
                    .withKerberos5ReadOnly(false)
                    .withKerberos5ReadWrite(false)
                    .withKerberos5IReadOnly(false)
                    .withKerberos5IReadWrite(false)
                    .withKerberos5PReadOnly(true)
                    .withKerberos5PReadWrite(true)
                    .withCifs(true)
                    .withNfsv3(true)
                    .withNfsv41(true)
                    .withAllowedClients("vwiwubmwmbesld")
                    .withHasRootAccess(false)
                    .withChownMode(ChownMode.RESTRICTED),
                new ExportPolicyRule().withRuleIndex(363667258)
                    .withUnixReadOnly(false)
                    .withUnixReadWrite(true)
                    .withKerberos5ReadOnly(false)
                    .withKerberos5ReadWrite(true)
                    .withKerberos5IReadOnly(true)
                    .withKerberos5IReadWrite(true)
                    .withKerberos5PReadOnly(false)
                    .withKerberos5PReadWrite(true)
                    .withCifs(true)
                    .withNfsv3(true)
                    .withNfsv41(true)
                    .withAllowedClients("eqqkdltfzxm")
                    .withHasRootAccess(false)
                    .withChownMode(ChownMode.UNRESTRICTED))))
            .withProtocolTypes(Arrays.asList("eodkwobda"))
            .withThroughputMibps(71.73575F)
            .withDataProtection(new VolumePatchPropertiesDataProtection()
                .withBackup(new VolumeBackupProperties().withBackupPolicyId("dxbx")
                    .withPolicyEnforced(true)
                    .withBackupVaultId("ogqxndlkzgxhuri"))
                .withSnapshot(new VolumeSnapshotProperties().withSnapshotPolicyId("podxunkb")))
            .withIsDefaultQuotaEnabled(true)
            .withDefaultUserQuotaInKiBs(7813815686449278533L)
            .withDefaultGroupQuotaInKiBs(8625022038464827540L)
            .withUnixPermissions("wlrbqtkoievseo")
            .withCoolAccess(false)
            .withCoolnessPeriod(209864806)
            .withCoolAccessRetrievalPolicy(CoolAccessRetrievalPolicy.NEVER)
            .withSnapshotDirectoryVisible(false)
            .withSmbAccessBasedEnumeration(SmbAccessBasedEnumeration.ENABLED)
            .withSmbNonBrowsable(SmbNonBrowsable.DISABLED);
        model = BinaryData.fromObject(model).toObject(VolumePatch.class);
        Assertions.assertEquals("wzizxbmpgcjefuzm", model.location());
        Assertions.assertEquals("bttdumorppxe", model.tags().get("mnzb"));
        Assertions.assertEquals(ServiceLevel.STANDARD_ZRS, model.serviceLevel());
        Assertions.assertEquals(3683939108270418339L, model.usageThreshold());
        Assertions.assertEquals(1259752874, model.exportPolicy().rules().get(0).ruleIndex());
        Assertions.assertEquals(true, model.exportPolicy().rules().get(0).unixReadOnly());
        Assertions.assertEquals(true, model.exportPolicy().rules().get(0).unixReadWrite());
        Assertions.assertEquals(true, model.exportPolicy().rules().get(0).kerberos5ReadOnly());
        Assertions.assertEquals(false, model.exportPolicy().rules().get(0).kerberos5ReadWrite());
        Assertions.assertEquals(false, model.exportPolicy().rules().get(0).kerberos5IReadOnly());
        Assertions.assertEquals(true, model.exportPolicy().rules().get(0).kerberos5IReadWrite());
        Assertions.assertEquals(false, model.exportPolicy().rules().get(0).kerberos5PReadOnly());
        Assertions.assertEquals(false, model.exportPolicy().rules().get(0).kerberos5PReadWrite());
        Assertions.assertEquals(true, model.exportPolicy().rules().get(0).cifs());
        Assertions.assertEquals(true, model.exportPolicy().rules().get(0).nfsv3());
        Assertions.assertEquals(true, model.exportPolicy().rules().get(0).nfsv41());
        Assertions.assertEquals("ygtdsslswt", model.exportPolicy().rules().get(0).allowedClients());
        Assertions.assertEquals(true, model.exportPolicy().rules().get(0).hasRootAccess());
        Assertions.assertEquals(ChownMode.RESTRICTED, model.exportPolicy().rules().get(0).chownMode());
        Assertions.assertEquals("eodkwobda", model.protocolTypes().get(0));
        Assertions.assertEquals(71.73575F, model.throughputMibps());
        Assertions.assertEquals("dxbx", model.dataProtection().backup().backupPolicyId());
        Assertions.assertEquals(true, model.dataProtection().backup().policyEnforced());
        Assertions.assertEquals("ogqxndlkzgxhuri", model.dataProtection().backup().backupVaultId());
        Assertions.assertEquals("podxunkb", model.dataProtection().snapshot().snapshotPolicyId());
        Assertions.assertEquals(true, model.isDefaultQuotaEnabled());
        Assertions.assertEquals(7813815686449278533L, model.defaultUserQuotaInKiBs());
        Assertions.assertEquals(8625022038464827540L, model.defaultGroupQuotaInKiBs());
        Assertions.assertEquals("wlrbqtkoievseo", model.unixPermissions());
        Assertions.assertEquals(false, model.coolAccess());
        Assertions.assertEquals(209864806, model.coolnessPeriod());
        Assertions.assertEquals(CoolAccessRetrievalPolicy.NEVER, model.coolAccessRetrievalPolicy());
        Assertions.assertEquals(false, model.snapshotDirectoryVisible());
        Assertions.assertEquals(SmbAccessBasedEnumeration.ENABLED, model.smbAccessBasedEnumeration());
        Assertions.assertEquals(SmbNonBrowsable.DISABLED, model.smbNonBrowsable());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
