// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.netapp.models.ChownMode;
import com.azure.resourcemanager.netapp.models.CoolAccessRetrievalPolicy;
import com.azure.resourcemanager.netapp.models.CoolAccessTieringPolicy;
import com.azure.resourcemanager.netapp.models.ExportPolicyRule;
import com.azure.resourcemanager.netapp.models.ServiceLevel;
import com.azure.resourcemanager.netapp.models.SmbAccessBasedEnumeration;
import com.azure.resourcemanager.netapp.models.SmbNonBrowsable;
import com.azure.resourcemanager.netapp.models.VolumeBackupProperties;
import com.azure.resourcemanager.netapp.models.VolumePatch;
import com.azure.resourcemanager.netapp.models.VolumePatchPropertiesDataProtection;
import com.azure.resourcemanager.netapp.models.VolumePatchPropertiesExportPolicy;
import com.azure.resourcemanager.netapp.models.VolumeSnapshotProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class VolumePatchTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        VolumePatch model = BinaryData.fromString(
            "{\"properties\":{\"serviceLevel\":\"Ultra\",\"usageThreshold\":6783178562921072735,\"exportPolicy\":{\"rules\":[{\"ruleIndex\":1133541665,\"unixReadOnly\":false,\"unixReadWrite\":true,\"kerberos5ReadOnly\":true,\"kerberos5ReadWrite\":false,\"kerberos5iReadOnly\":true,\"kerberos5iReadWrite\":true,\"kerberos5pReadOnly\":true,\"kerberos5pReadWrite\":true,\"cifs\":true,\"nfsv3\":true,\"nfsv41\":true,\"allowedClients\":\"ybn\",\"hasRootAccess\":true,\"chownMode\":\"Unrestricted\"},{\"ruleIndex\":1130044611,\"unixReadOnly\":true,\"unixReadWrite\":true,\"kerberos5ReadOnly\":false,\"kerberos5ReadWrite\":false,\"kerberos5iReadOnly\":true,\"kerberos5iReadWrite\":false,\"kerberos5pReadOnly\":true,\"kerberos5pReadWrite\":false,\"cifs\":true,\"nfsv3\":false,\"nfsv41\":false,\"allowedClients\":\"nzdndslgna\",\"hasRootAccess\":true,\"chownMode\":\"Restricted\"}]},\"protocolTypes\":[\"uhavhql\",\"thuma\",\"olbgycduiertgccy\"],\"throughputMibps\":30.20277,\"dataProtection\":{\"backup\":{\"backupPolicyId\":\"ssl\",\"policyEnforced\":false,\"backupVaultId\":\"mdnbbglzpswiy\"},\"snapshot\":{\"snapshotPolicyId\":\"wyhzdx\"}},\"isDefaultQuotaEnabled\":true,\"defaultUserQuotaInKiBs\":3261490626317443130,\"defaultGroupQuotaInKiBs\":527102059874859174,\"unixPermissions\":\"fznudaodvxzb\",\"coolAccess\":true,\"coolnessPeriod\":1795882398,\"coolAccessRetrievalPolicy\":\"Never\",\"coolAccessTieringPolicy\":\"SnapshotOnly\",\"snapshotDirectoryVisible\":true,\"smbAccessBasedEnumeration\":\"Enabled\",\"smbNonBrowsable\":\"Enabled\"},\"location\":\"rzdzucerscdnt\",\"tags\":{\"tmweriofzpyq\":\"fiwjmygtdssls\",\"hhszh\":\"emwabnet\",\"lvwiwubmwmbesl\":\"d\"},\"id\":\"nkww\",\"name\":\"pp\",\"type\":\"flcxoga\"}")
            .toObject(VolumePatch.class);
        Assertions.assertEquals("rzdzucerscdnt", model.location());
        Assertions.assertEquals("fiwjmygtdssls", model.tags().get("tmweriofzpyq"));
        Assertions.assertEquals(ServiceLevel.ULTRA, model.serviceLevel());
        Assertions.assertEquals(6783178562921072735L, model.usageThreshold());
        Assertions.assertEquals(1133541665, model.exportPolicy().rules().get(0).ruleIndex());
        Assertions.assertFalse(model.exportPolicy().rules().get(0).unixReadOnly());
        Assertions.assertTrue(model.exportPolicy().rules().get(0).unixReadWrite());
        Assertions.assertTrue(model.exportPolicy().rules().get(0).kerberos5ReadOnly());
        Assertions.assertFalse(model.exportPolicy().rules().get(0).kerberos5ReadWrite());
        Assertions.assertTrue(model.exportPolicy().rules().get(0).kerberos5IReadOnly());
        Assertions.assertTrue(model.exportPolicy().rules().get(0).kerberos5IReadWrite());
        Assertions.assertTrue(model.exportPolicy().rules().get(0).kerberos5PReadOnly());
        Assertions.assertTrue(model.exportPolicy().rules().get(0).kerberos5PReadWrite());
        Assertions.assertTrue(model.exportPolicy().rules().get(0).cifs());
        Assertions.assertTrue(model.exportPolicy().rules().get(0).nfsv3());
        Assertions.assertTrue(model.exportPolicy().rules().get(0).nfsv41());
        Assertions.assertEquals("ybn", model.exportPolicy().rules().get(0).allowedClients());
        Assertions.assertTrue(model.exportPolicy().rules().get(0).hasRootAccess());
        Assertions.assertEquals(ChownMode.UNRESTRICTED, model.exportPolicy().rules().get(0).chownMode());
        Assertions.assertEquals("uhavhql", model.protocolTypes().get(0));
        Assertions.assertEquals(30.20277F, model.throughputMibps());
        Assertions.assertEquals("ssl", model.dataProtection().backup().backupPolicyId());
        Assertions.assertFalse(model.dataProtection().backup().policyEnforced());
        Assertions.assertEquals("mdnbbglzpswiy", model.dataProtection().backup().backupVaultId());
        Assertions.assertEquals("wyhzdx", model.dataProtection().snapshot().snapshotPolicyId());
        Assertions.assertTrue(model.isDefaultQuotaEnabled());
        Assertions.assertEquals(3261490626317443130L, model.defaultUserQuotaInKiBs());
        Assertions.assertEquals(527102059874859174L, model.defaultGroupQuotaInKiBs());
        Assertions.assertEquals("fznudaodvxzb", model.unixPermissions());
        Assertions.assertTrue(model.coolAccess());
        Assertions.assertEquals(1795882398, model.coolnessPeriod());
        Assertions.assertEquals(CoolAccessRetrievalPolicy.NEVER, model.coolAccessRetrievalPolicy());
        Assertions.assertEquals(CoolAccessTieringPolicy.SNAPSHOT_ONLY, model.coolAccessTieringPolicy());
        Assertions.assertTrue(model.snapshotDirectoryVisible());
        Assertions.assertEquals(SmbAccessBasedEnumeration.ENABLED, model.smbAccessBasedEnumeration());
        Assertions.assertEquals(SmbNonBrowsable.ENABLED, model.smbNonBrowsable());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        VolumePatch model = new VolumePatch().withLocation("rzdzucerscdnt")
            .withTags(mapOf("tmweriofzpyq", "fiwjmygtdssls", "hhszh", "emwabnet", "lvwiwubmwmbesl", "d"))
            .withServiceLevel(ServiceLevel.ULTRA)
            .withUsageThreshold(6783178562921072735L)
            .withExportPolicy(new VolumePatchPropertiesExportPolicy().withRules(Arrays.asList(
                new ExportPolicyRule().withRuleIndex(1133541665)
                    .withUnixReadOnly(false)
                    .withUnixReadWrite(true)
                    .withKerberos5ReadOnly(true)
                    .withKerberos5ReadWrite(false)
                    .withKerberos5IReadOnly(true)
                    .withKerberos5IReadWrite(true)
                    .withKerberos5PReadOnly(true)
                    .withKerberos5PReadWrite(true)
                    .withCifs(true)
                    .withNfsv3(true)
                    .withNfsv41(true)
                    .withAllowedClients("ybn")
                    .withHasRootAccess(true)
                    .withChownMode(ChownMode.UNRESTRICTED),
                new ExportPolicyRule().withRuleIndex(1130044611)
                    .withUnixReadOnly(true)
                    .withUnixReadWrite(true)
                    .withKerberos5ReadOnly(false)
                    .withKerberos5ReadWrite(false)
                    .withKerberos5IReadOnly(true)
                    .withKerberos5IReadWrite(false)
                    .withKerberos5PReadOnly(true)
                    .withKerberos5PReadWrite(false)
                    .withCifs(true)
                    .withNfsv3(false)
                    .withNfsv41(false)
                    .withAllowedClients("nzdndslgna")
                    .withHasRootAccess(true)
                    .withChownMode(ChownMode.RESTRICTED))))
            .withProtocolTypes(Arrays.asList("uhavhql", "thuma", "olbgycduiertgccy"))
            .withThroughputMibps(30.20277F)
            .withDataProtection(new VolumePatchPropertiesDataProtection()
                .withBackup(new VolumeBackupProperties().withBackupPolicyId("ssl")
                    .withPolicyEnforced(false)
                    .withBackupVaultId("mdnbbglzpswiy"))
                .withSnapshot(new VolumeSnapshotProperties().withSnapshotPolicyId("wyhzdx")))
            .withIsDefaultQuotaEnabled(true)
            .withDefaultUserQuotaInKiBs(3261490626317443130L)
            .withDefaultGroupQuotaInKiBs(527102059874859174L)
            .withUnixPermissions("fznudaodvxzb")
            .withCoolAccess(true)
            .withCoolnessPeriod(1795882398)
            .withCoolAccessRetrievalPolicy(CoolAccessRetrievalPolicy.NEVER)
            .withCoolAccessTieringPolicy(CoolAccessTieringPolicy.SNAPSHOT_ONLY)
            .withSnapshotDirectoryVisible(true)
            .withSmbAccessBasedEnumeration(SmbAccessBasedEnumeration.ENABLED)
            .withSmbNonBrowsable(SmbNonBrowsable.ENABLED);
        model = BinaryData.fromObject(model).toObject(VolumePatch.class);
        Assertions.assertEquals("rzdzucerscdnt", model.location());
        Assertions.assertEquals("fiwjmygtdssls", model.tags().get("tmweriofzpyq"));
        Assertions.assertEquals(ServiceLevel.ULTRA, model.serviceLevel());
        Assertions.assertEquals(6783178562921072735L, model.usageThreshold());
        Assertions.assertEquals(1133541665, model.exportPolicy().rules().get(0).ruleIndex());
        Assertions.assertFalse(model.exportPolicy().rules().get(0).unixReadOnly());
        Assertions.assertTrue(model.exportPolicy().rules().get(0).unixReadWrite());
        Assertions.assertTrue(model.exportPolicy().rules().get(0).kerberos5ReadOnly());
        Assertions.assertFalse(model.exportPolicy().rules().get(0).kerberos5ReadWrite());
        Assertions.assertTrue(model.exportPolicy().rules().get(0).kerberos5IReadOnly());
        Assertions.assertTrue(model.exportPolicy().rules().get(0).kerberos5IReadWrite());
        Assertions.assertTrue(model.exportPolicy().rules().get(0).kerberos5PReadOnly());
        Assertions.assertTrue(model.exportPolicy().rules().get(0).kerberos5PReadWrite());
        Assertions.assertTrue(model.exportPolicy().rules().get(0).cifs());
        Assertions.assertTrue(model.exportPolicy().rules().get(0).nfsv3());
        Assertions.assertTrue(model.exportPolicy().rules().get(0).nfsv41());
        Assertions.assertEquals("ybn", model.exportPolicy().rules().get(0).allowedClients());
        Assertions.assertTrue(model.exportPolicy().rules().get(0).hasRootAccess());
        Assertions.assertEquals(ChownMode.UNRESTRICTED, model.exportPolicy().rules().get(0).chownMode());
        Assertions.assertEquals("uhavhql", model.protocolTypes().get(0));
        Assertions.assertEquals(30.20277F, model.throughputMibps());
        Assertions.assertEquals("ssl", model.dataProtection().backup().backupPolicyId());
        Assertions.assertFalse(model.dataProtection().backup().policyEnforced());
        Assertions.assertEquals("mdnbbglzpswiy", model.dataProtection().backup().backupVaultId());
        Assertions.assertEquals("wyhzdx", model.dataProtection().snapshot().snapshotPolicyId());
        Assertions.assertTrue(model.isDefaultQuotaEnabled());
        Assertions.assertEquals(3261490626317443130L, model.defaultUserQuotaInKiBs());
        Assertions.assertEquals(527102059874859174L, model.defaultGroupQuotaInKiBs());
        Assertions.assertEquals("fznudaodvxzb", model.unixPermissions());
        Assertions.assertTrue(model.coolAccess());
        Assertions.assertEquals(1795882398, model.coolnessPeriod());
        Assertions.assertEquals(CoolAccessRetrievalPolicy.NEVER, model.coolAccessRetrievalPolicy());
        Assertions.assertEquals(CoolAccessTieringPolicy.SNAPSHOT_ONLY, model.coolAccessTieringPolicy());
        Assertions.assertTrue(model.snapshotDirectoryVisible());
        Assertions.assertEquals(SmbAccessBasedEnumeration.ENABLED, model.smbAccessBasedEnumeration());
        Assertions.assertEquals(SmbNonBrowsable.ENABLED, model.smbNonBrowsable());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
