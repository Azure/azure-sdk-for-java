// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.netapp.models.ChownMode;
import com.azure.resourcemanager.netapp.models.CoolAccessRetrievalPolicy;
import com.azure.resourcemanager.netapp.models.CoolAccessTieringPolicy;
import com.azure.resourcemanager.netapp.models.ExportPolicyRule;
import com.azure.resourcemanager.netapp.models.ServiceLevel;
import com.azure.resourcemanager.netapp.models.SmbAccessBasedEnumeration;
import com.azure.resourcemanager.netapp.models.SmbNonBrowsable;
import com.azure.resourcemanager.netapp.models.VolumeBackupProperties;
import com.azure.resourcemanager.netapp.models.VolumePatch;
import com.azure.resourcemanager.netapp.models.VolumePatchPropertiesDataProtection;
import com.azure.resourcemanager.netapp.models.VolumePatchPropertiesExportPolicy;
import com.azure.resourcemanager.netapp.models.VolumeSnapshotProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class VolumePatchTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        VolumePatch model = BinaryData.fromString(
            "{\"properties\":{\"serviceLevel\":\"Standard\",\"usageThreshold\":5656325235866740661,\"exportPolicy\":{\"rules\":[{\"ruleIndex\":1008975068,\"unixReadOnly\":true,\"unixReadWrite\":true,\"kerberos5ReadOnly\":true,\"kerberos5ReadWrite\":false,\"kerberos5iReadOnly\":true,\"kerberos5iReadWrite\":true,\"kerberos5pReadOnly\":false,\"kerberos5pReadWrite\":true,\"cifs\":true,\"nfsv3\":false,\"nfsv41\":false,\"allowedClients\":\"pyqs\",\"hasRootAccess\":false,\"chownMode\":\"Restricted\"}]},\"protocolTypes\":[\"tshhszhedp\"],\"throughputMibps\":32.709515,\"dataProtection\":{\"backup\":{\"backupPolicyId\":\"bmwmbesldnkw\",\"policyEnforced\":false,\"backupVaultId\":\"jflcxog\"},\"snapshot\":{\"snapshotPolicyId\":\"onz\"}},\"isDefaultQuotaEnabled\":true,\"defaultUserQuotaInKiBs\":771395266731116768,\"defaultGroupQuotaInKiBs\":4352288907832795001,\"unixPermissions\":\"eqqkdltfzxm\",\"coolAccess\":false,\"coolnessPeriod\":1300207263,\"coolAccessRetrievalPolicy\":\"Default\",\"coolAccessTieringPolicy\":\"Auto\",\"snapshotDirectoryVisible\":true,\"smbAccessBasedEnumeration\":\"Enabled\",\"smbNonBrowsable\":\"Enabled\"},\"location\":\"agxti\",\"tags\":{\"bogqxndlkzgxhu\":\"xbxwa\"},\"id\":\"iplbpodxunkbebxm\",\"name\":\"byyntwlrbqt\",\"type\":\"oievseotgqrlltm\"}")
            .toObject(VolumePatch.class);
        Assertions.assertEquals("agxti", model.location());
        Assertions.assertEquals("xbxwa", model.tags().get("bogqxndlkzgxhu"));
        Assertions.assertEquals(ServiceLevel.STANDARD, model.serviceLevel());
        Assertions.assertEquals(5656325235866740661L, model.usageThreshold());
        Assertions.assertEquals(1008975068, model.exportPolicy().rules().get(0).ruleIndex());
        Assertions.assertEquals(true, model.exportPolicy().rules().get(0).unixReadOnly());
        Assertions.assertEquals(true, model.exportPolicy().rules().get(0).unixReadWrite());
        Assertions.assertEquals(true, model.exportPolicy().rules().get(0).kerberos5ReadOnly());
        Assertions.assertEquals(false, model.exportPolicy().rules().get(0).kerberos5ReadWrite());
        Assertions.assertEquals(true, model.exportPolicy().rules().get(0).kerberos5IReadOnly());
        Assertions.assertEquals(true, model.exportPolicy().rules().get(0).kerberos5IReadWrite());
        Assertions.assertEquals(false, model.exportPolicy().rules().get(0).kerberos5PReadOnly());
        Assertions.assertEquals(true, model.exportPolicy().rules().get(0).kerberos5PReadWrite());
        Assertions.assertEquals(true, model.exportPolicy().rules().get(0).cifs());
        Assertions.assertEquals(false, model.exportPolicy().rules().get(0).nfsv3());
        Assertions.assertEquals(false, model.exportPolicy().rules().get(0).nfsv41());
        Assertions.assertEquals("pyqs", model.exportPolicy().rules().get(0).allowedClients());
        Assertions.assertEquals(false, model.exportPolicy().rules().get(0).hasRootAccess());
        Assertions.assertEquals(ChownMode.RESTRICTED, model.exportPolicy().rules().get(0).chownMode());
        Assertions.assertEquals("tshhszhedp", model.protocolTypes().get(0));
        Assertions.assertEquals(32.709515F, model.throughputMibps());
        Assertions.assertEquals("bmwmbesldnkw", model.dataProtection().backup().backupPolicyId());
        Assertions.assertEquals(false, model.dataProtection().backup().policyEnforced());
        Assertions.assertEquals("jflcxog", model.dataProtection().backup().backupVaultId());
        Assertions.assertEquals("onz", model.dataProtection().snapshot().snapshotPolicyId());
        Assertions.assertEquals(true, model.isDefaultQuotaEnabled());
        Assertions.assertEquals(771395266731116768L, model.defaultUserQuotaInKiBs());
        Assertions.assertEquals(4352288907832795001L, model.defaultGroupQuotaInKiBs());
        Assertions.assertEquals("eqqkdltfzxm", model.unixPermissions());
        Assertions.assertEquals(false, model.coolAccess());
        Assertions.assertEquals(1300207263, model.coolnessPeriod());
        Assertions.assertEquals(CoolAccessRetrievalPolicy.DEFAULT, model.coolAccessRetrievalPolicy());
        Assertions.assertEquals(CoolAccessTieringPolicy.AUTO, model.coolAccessTieringPolicy());
        Assertions.assertEquals(true, model.snapshotDirectoryVisible());
        Assertions.assertEquals(SmbAccessBasedEnumeration.ENABLED, model.smbAccessBasedEnumeration());
        Assertions.assertEquals(SmbNonBrowsable.ENABLED, model.smbNonBrowsable());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        VolumePatch model = new VolumePatch().withLocation("agxti")
            .withTags(mapOf("bogqxndlkzgxhu", "xbxwa"))
            .withServiceLevel(ServiceLevel.STANDARD)
            .withUsageThreshold(5656325235866740661L)
            .withExportPolicy(new VolumePatchPropertiesExportPolicy()
                .withRules(Arrays.asList(new ExportPolicyRule().withRuleIndex(1008975068)
                    .withUnixReadOnly(true)
                    .withUnixReadWrite(true)
                    .withKerberos5ReadOnly(true)
                    .withKerberos5ReadWrite(false)
                    .withKerberos5IReadOnly(true)
                    .withKerberos5IReadWrite(true)
                    .withKerberos5PReadOnly(false)
                    .withKerberos5PReadWrite(true)
                    .withCifs(true)
                    .withNfsv3(false)
                    .withNfsv41(false)
                    .withAllowedClients("pyqs")
                    .withHasRootAccess(false)
                    .withChownMode(ChownMode.RESTRICTED))))
            .withProtocolTypes(Arrays.asList("tshhszhedp"))
            .withThroughputMibps(32.709515F)
            .withDataProtection(new VolumePatchPropertiesDataProtection()
                .withBackup(new VolumeBackupProperties().withBackupPolicyId("bmwmbesldnkw")
                    .withPolicyEnforced(false)
                    .withBackupVaultId("jflcxog"))
                .withSnapshot(new VolumeSnapshotProperties().withSnapshotPolicyId("onz")))
            .withIsDefaultQuotaEnabled(true)
            .withDefaultUserQuotaInKiBs(771395266731116768L)
            .withDefaultGroupQuotaInKiBs(4352288907832795001L)
            .withUnixPermissions("eqqkdltfzxm")
            .withCoolAccess(false)
            .withCoolnessPeriod(1300207263)
            .withCoolAccessRetrievalPolicy(CoolAccessRetrievalPolicy.DEFAULT)
            .withCoolAccessTieringPolicy(CoolAccessTieringPolicy.AUTO)
            .withSnapshotDirectoryVisible(true)
            .withSmbAccessBasedEnumeration(SmbAccessBasedEnumeration.ENABLED)
            .withSmbNonBrowsable(SmbNonBrowsable.ENABLED);
        model = BinaryData.fromObject(model).toObject(VolumePatch.class);
        Assertions.assertEquals("agxti", model.location());
        Assertions.assertEquals("xbxwa", model.tags().get("bogqxndlkzgxhu"));
        Assertions.assertEquals(ServiceLevel.STANDARD, model.serviceLevel());
        Assertions.assertEquals(5656325235866740661L, model.usageThreshold());
        Assertions.assertEquals(1008975068, model.exportPolicy().rules().get(0).ruleIndex());
        Assertions.assertEquals(true, model.exportPolicy().rules().get(0).unixReadOnly());
        Assertions.assertEquals(true, model.exportPolicy().rules().get(0).unixReadWrite());
        Assertions.assertEquals(true, model.exportPolicy().rules().get(0).kerberos5ReadOnly());
        Assertions.assertEquals(false, model.exportPolicy().rules().get(0).kerberos5ReadWrite());
        Assertions.assertEquals(true, model.exportPolicy().rules().get(0).kerberos5IReadOnly());
        Assertions.assertEquals(true, model.exportPolicy().rules().get(0).kerberos5IReadWrite());
        Assertions.assertEquals(false, model.exportPolicy().rules().get(0).kerberos5PReadOnly());
        Assertions.assertEquals(true, model.exportPolicy().rules().get(0).kerberos5PReadWrite());
        Assertions.assertEquals(true, model.exportPolicy().rules().get(0).cifs());
        Assertions.assertEquals(false, model.exportPolicy().rules().get(0).nfsv3());
        Assertions.assertEquals(false, model.exportPolicy().rules().get(0).nfsv41());
        Assertions.assertEquals("pyqs", model.exportPolicy().rules().get(0).allowedClients());
        Assertions.assertEquals(false, model.exportPolicy().rules().get(0).hasRootAccess());
        Assertions.assertEquals(ChownMode.RESTRICTED, model.exportPolicy().rules().get(0).chownMode());
        Assertions.assertEquals("tshhszhedp", model.protocolTypes().get(0));
        Assertions.assertEquals(32.709515F, model.throughputMibps());
        Assertions.assertEquals("bmwmbesldnkw", model.dataProtection().backup().backupPolicyId());
        Assertions.assertEquals(false, model.dataProtection().backup().policyEnforced());
        Assertions.assertEquals("jflcxog", model.dataProtection().backup().backupVaultId());
        Assertions.assertEquals("onz", model.dataProtection().snapshot().snapshotPolicyId());
        Assertions.assertEquals(true, model.isDefaultQuotaEnabled());
        Assertions.assertEquals(771395266731116768L, model.defaultUserQuotaInKiBs());
        Assertions.assertEquals(4352288907832795001L, model.defaultGroupQuotaInKiBs());
        Assertions.assertEquals("eqqkdltfzxm", model.unixPermissions());
        Assertions.assertEquals(false, model.coolAccess());
        Assertions.assertEquals(1300207263, model.coolnessPeriod());
        Assertions.assertEquals(CoolAccessRetrievalPolicy.DEFAULT, model.coolAccessRetrievalPolicy());
        Assertions.assertEquals(CoolAccessTieringPolicy.AUTO, model.coolAccessTieringPolicy());
        Assertions.assertEquals(true, model.snapshotDirectoryVisible());
        Assertions.assertEquals(SmbAccessBasedEnumeration.ENABLED, model.smbAccessBasedEnumeration());
        Assertions.assertEquals(SmbNonBrowsable.ENABLED, model.smbNonBrowsable());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
