// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.netapp.models.ChownMode;
import com.azure.resourcemanager.netapp.models.CoolAccessRetrievalPolicy;
import com.azure.resourcemanager.netapp.models.ExportPolicyRule;
import com.azure.resourcemanager.netapp.models.ServiceLevel;
import com.azure.resourcemanager.netapp.models.SmbAccessBasedEnumeration;
import com.azure.resourcemanager.netapp.models.SmbNonBrowsable;
import com.azure.resourcemanager.netapp.models.VolumeBackupProperties;
import com.azure.resourcemanager.netapp.models.VolumePatch;
import com.azure.resourcemanager.netapp.models.VolumePatchPropertiesDataProtection;
import com.azure.resourcemanager.netapp.models.VolumePatchPropertiesExportPolicy;
import com.azure.resourcemanager.netapp.models.VolumeSnapshotProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class VolumePatchTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        VolumePatch model = BinaryData.fromString(
            "{\"properties\":{\"serviceLevel\":\"Ultra\",\"usageThreshold\":326462522043604891,\"exportPolicy\":{\"rules\":[{\"ruleIndex\":1979529158,\"unixReadOnly\":true,\"unixReadWrite\":false,\"kerberos5ReadOnly\":false,\"kerberos5ReadWrite\":true,\"kerberos5iReadOnly\":true,\"kerberos5iReadWrite\":true,\"kerberos5pReadOnly\":true,\"kerberos5pReadWrite\":true,\"cifs\":false,\"nfsv3\":true,\"nfsv41\":true,\"allowedClients\":\"ss\",\"hasRootAccess\":true,\"chownMode\":\"Restricted\"},{\"ruleIndex\":1597487270,\"unixReadOnly\":true,\"unixReadWrite\":false,\"kerberos5ReadOnly\":true,\"kerberos5ReadWrite\":false,\"kerberos5iReadOnly\":false,\"kerberos5iReadWrite\":false,\"kerberos5pReadOnly\":true,\"kerberos5pReadWrite\":true,\"cifs\":true,\"nfsv3\":true,\"nfsv41\":true,\"allowedClients\":\"bhhxsrzdzuc\",\"hasRootAccess\":true,\"chownMode\":\"Restricted\"},{\"ruleIndex\":42562338,\"unixReadOnly\":true,\"unixReadWrite\":true,\"kerberos5ReadOnly\":false,\"kerberos5ReadWrite\":true,\"kerberos5iReadOnly\":true,\"kerberos5iReadWrite\":false,\"kerberos5pReadOnly\":false,\"kerberos5pReadWrite\":false,\"cifs\":true,\"nfsv3\":true,\"nfsv41\":true,\"allowedClients\":\"ofz\",\"hasRootAccess\":true,\"chownMode\":\"Restricted\"}]},\"protocolTypes\":[\"abnetshh\"],\"throughputMibps\":4.6342373,\"dataProtection\":{\"backup\":{\"backupPolicyId\":\"lvwiwubmwmbesl\",\"policyEnforced\":false,\"backupVaultId\":\"wtppjflcxogaoko\"},\"snapshot\":{\"snapshotPolicyId\":\"nsikvmkqzeqqkdl\"}},\"isDefaultQuotaEnabled\":true,\"defaultUserQuotaInKiBs\":4356525289424860284,\"defaultGroupQuotaInKiBs\":740779033834050622,\"unixPermissions\":\"ur\",\"coolAccess\":true,\"coolnessPeriod\":1245356368,\"coolAccessRetrievalPolicy\":\"OnRead\",\"snapshotDirectoryVisible\":false,\"smbAccessBasedEnumeration\":\"Enabled\",\"smbNonBrowsable\":\"Enabled\"},\"location\":\"bqdxbx\",\"tags\":{\"iplbpodxunkbebxm\":\"bogqxndlkzgxhu\",\"oievseotgqrlltm\":\"byyntwlrbqt\",\"jefuzmuvpbttdumo\":\"wlauwzizxbmpg\",\"xe\":\"p\"},\"id\":\"mnzb\",\"name\":\"bhjpglkfgohdne\",\"type\":\"el\"}")
            .toObject(VolumePatch.class);
        Assertions.assertEquals("bqdxbx", model.location());
        Assertions.assertEquals("bogqxndlkzgxhu", model.tags().get("iplbpodxunkbebxm"));
        Assertions.assertEquals(ServiceLevel.ULTRA, model.serviceLevel());
        Assertions.assertEquals(326462522043604891L, model.usageThreshold());
        Assertions.assertEquals(1979529158, model.exportPolicy().rules().get(0).ruleIndex());
        Assertions.assertEquals(true, model.exportPolicy().rules().get(0).unixReadOnly());
        Assertions.assertEquals(false, model.exportPolicy().rules().get(0).unixReadWrite());
        Assertions.assertEquals(false, model.exportPolicy().rules().get(0).kerberos5ReadOnly());
        Assertions.assertEquals(true, model.exportPolicy().rules().get(0).kerberos5ReadWrite());
        Assertions.assertEquals(true, model.exportPolicy().rules().get(0).kerberos5IReadOnly());
        Assertions.assertEquals(true, model.exportPolicy().rules().get(0).kerberos5IReadWrite());
        Assertions.assertEquals(true, model.exportPolicy().rules().get(0).kerberos5PReadOnly());
        Assertions.assertEquals(true, model.exportPolicy().rules().get(0).kerberos5PReadWrite());
        Assertions.assertEquals(false, model.exportPolicy().rules().get(0).cifs());
        Assertions.assertEquals(true, model.exportPolicy().rules().get(0).nfsv3());
        Assertions.assertEquals(true, model.exportPolicy().rules().get(0).nfsv41());
        Assertions.assertEquals("ss", model.exportPolicy().rules().get(0).allowedClients());
        Assertions.assertEquals(true, model.exportPolicy().rules().get(0).hasRootAccess());
        Assertions.assertEquals(ChownMode.RESTRICTED, model.exportPolicy().rules().get(0).chownMode());
        Assertions.assertEquals("abnetshh", model.protocolTypes().get(0));
        Assertions.assertEquals(4.6342373F, model.throughputMibps());
        Assertions.assertEquals("lvwiwubmwmbesl", model.dataProtection().backup().backupPolicyId());
        Assertions.assertEquals(false, model.dataProtection().backup().policyEnforced());
        Assertions.assertEquals("wtppjflcxogaoko", model.dataProtection().backup().backupVaultId());
        Assertions.assertEquals("nsikvmkqzeqqkdl", model.dataProtection().snapshot().snapshotPolicyId());
        Assertions.assertEquals(true, model.isDefaultQuotaEnabled());
        Assertions.assertEquals(4356525289424860284L, model.defaultUserQuotaInKiBs());
        Assertions.assertEquals(740779033834050622L, model.defaultGroupQuotaInKiBs());
        Assertions.assertEquals("ur", model.unixPermissions());
        Assertions.assertEquals(true, model.coolAccess());
        Assertions.assertEquals(1245356368, model.coolnessPeriod());
        Assertions.assertEquals(CoolAccessRetrievalPolicy.ON_READ, model.coolAccessRetrievalPolicy());
        Assertions.assertEquals(false, model.snapshotDirectoryVisible());
        Assertions.assertEquals(SmbAccessBasedEnumeration.ENABLED, model.smbAccessBasedEnumeration());
        Assertions.assertEquals(SmbNonBrowsable.ENABLED, model.smbNonBrowsable());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        VolumePatch model = new VolumePatch().withLocation("bqdxbx")
            .withTags(mapOf("iplbpodxunkbebxm", "bogqxndlkzgxhu", "oievseotgqrlltm", "byyntwlrbqt", "jefuzmuvpbttdumo",
                "wlauwzizxbmpg", "xe", "p"))
            .withServiceLevel(ServiceLevel.ULTRA)
            .withUsageThreshold(326462522043604891L)
            .withExportPolicy(new VolumePatchPropertiesExportPolicy().withRules(Arrays.asList(
                new ExportPolicyRule().withRuleIndex(1979529158)
                    .withUnixReadOnly(true)
                    .withUnixReadWrite(false)
                    .withKerberos5ReadOnly(false)
                    .withKerberos5ReadWrite(true)
                    .withKerberos5IReadOnly(true)
                    .withKerberos5IReadWrite(true)
                    .withKerberos5PReadOnly(true)
                    .withKerberos5PReadWrite(true)
                    .withCifs(false)
                    .withNfsv3(true)
                    .withNfsv41(true)
                    .withAllowedClients("ss")
                    .withHasRootAccess(true)
                    .withChownMode(ChownMode.RESTRICTED),
                new ExportPolicyRule().withRuleIndex(1597487270)
                    .withUnixReadOnly(true)
                    .withUnixReadWrite(false)
                    .withKerberos5ReadOnly(true)
                    .withKerberos5ReadWrite(false)
                    .withKerberos5IReadOnly(false)
                    .withKerberos5IReadWrite(false)
                    .withKerberos5PReadOnly(true)
                    .withKerberos5PReadWrite(true)
                    .withCifs(true)
                    .withNfsv3(true)
                    .withNfsv41(true)
                    .withAllowedClients("bhhxsrzdzuc")
                    .withHasRootAccess(true)
                    .withChownMode(ChownMode.RESTRICTED),
                new ExportPolicyRule().withRuleIndex(42562338)
                    .withUnixReadOnly(true)
                    .withUnixReadWrite(true)
                    .withKerberos5ReadOnly(false)
                    .withKerberos5ReadWrite(true)
                    .withKerberos5IReadOnly(true)
                    .withKerberos5IReadWrite(false)
                    .withKerberos5PReadOnly(false)
                    .withKerberos5PReadWrite(false)
                    .withCifs(true)
                    .withNfsv3(true)
                    .withNfsv41(true)
                    .withAllowedClients("ofz")
                    .withHasRootAccess(true)
                    .withChownMode(ChownMode.RESTRICTED))))
            .withProtocolTypes(Arrays.asList("abnetshh"))
            .withThroughputMibps(4.6342373F)
            .withDataProtection(new VolumePatchPropertiesDataProtection()
                .withBackup(new VolumeBackupProperties().withBackupPolicyId("lvwiwubmwmbesl")
                    .withPolicyEnforced(false)
                    .withBackupVaultId("wtppjflcxogaoko"))
                .withSnapshot(new VolumeSnapshotProperties().withSnapshotPolicyId("nsikvmkqzeqqkdl")))
            .withIsDefaultQuotaEnabled(true)
            .withDefaultUserQuotaInKiBs(4356525289424860284L)
            .withDefaultGroupQuotaInKiBs(740779033834050622L)
            .withUnixPermissions("ur")
            .withCoolAccess(true)
            .withCoolnessPeriod(1245356368)
            .withCoolAccessRetrievalPolicy(CoolAccessRetrievalPolicy.ON_READ)
            .withSnapshotDirectoryVisible(false)
            .withSmbAccessBasedEnumeration(SmbAccessBasedEnumeration.ENABLED)
            .withSmbNonBrowsable(SmbNonBrowsable.ENABLED);
        model = BinaryData.fromObject(model).toObject(VolumePatch.class);
        Assertions.assertEquals("bqdxbx", model.location());
        Assertions.assertEquals("bogqxndlkzgxhu", model.tags().get("iplbpodxunkbebxm"));
        Assertions.assertEquals(ServiceLevel.ULTRA, model.serviceLevel());
        Assertions.assertEquals(326462522043604891L, model.usageThreshold());
        Assertions.assertEquals(1979529158, model.exportPolicy().rules().get(0).ruleIndex());
        Assertions.assertEquals(true, model.exportPolicy().rules().get(0).unixReadOnly());
        Assertions.assertEquals(false, model.exportPolicy().rules().get(0).unixReadWrite());
        Assertions.assertEquals(false, model.exportPolicy().rules().get(0).kerberos5ReadOnly());
        Assertions.assertEquals(true, model.exportPolicy().rules().get(0).kerberos5ReadWrite());
        Assertions.assertEquals(true, model.exportPolicy().rules().get(0).kerberos5IReadOnly());
        Assertions.assertEquals(true, model.exportPolicy().rules().get(0).kerberos5IReadWrite());
        Assertions.assertEquals(true, model.exportPolicy().rules().get(0).kerberos5PReadOnly());
        Assertions.assertEquals(true, model.exportPolicy().rules().get(0).kerberos5PReadWrite());
        Assertions.assertEquals(false, model.exportPolicy().rules().get(0).cifs());
        Assertions.assertEquals(true, model.exportPolicy().rules().get(0).nfsv3());
        Assertions.assertEquals(true, model.exportPolicy().rules().get(0).nfsv41());
        Assertions.assertEquals("ss", model.exportPolicy().rules().get(0).allowedClients());
        Assertions.assertEquals(true, model.exportPolicy().rules().get(0).hasRootAccess());
        Assertions.assertEquals(ChownMode.RESTRICTED, model.exportPolicy().rules().get(0).chownMode());
        Assertions.assertEquals("abnetshh", model.protocolTypes().get(0));
        Assertions.assertEquals(4.6342373F, model.throughputMibps());
        Assertions.assertEquals("lvwiwubmwmbesl", model.dataProtection().backup().backupPolicyId());
        Assertions.assertEquals(false, model.dataProtection().backup().policyEnforced());
        Assertions.assertEquals("wtppjflcxogaoko", model.dataProtection().backup().backupVaultId());
        Assertions.assertEquals("nsikvmkqzeqqkdl", model.dataProtection().snapshot().snapshotPolicyId());
        Assertions.assertEquals(true, model.isDefaultQuotaEnabled());
        Assertions.assertEquals(4356525289424860284L, model.defaultUserQuotaInKiBs());
        Assertions.assertEquals(740779033834050622L, model.defaultGroupQuotaInKiBs());
        Assertions.assertEquals("ur", model.unixPermissions());
        Assertions.assertEquals(true, model.coolAccess());
        Assertions.assertEquals(1245356368, model.coolnessPeriod());
        Assertions.assertEquals(CoolAccessRetrievalPolicy.ON_READ, model.coolAccessRetrievalPolicy());
        Assertions.assertEquals(false, model.snapshotDirectoryVisible());
        Assertions.assertEquals(SmbAccessBasedEnumeration.ENABLED, model.smbAccessBasedEnumeration());
        Assertions.assertEquals(SmbNonBrowsable.ENABLED, model.smbNonBrowsable());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
