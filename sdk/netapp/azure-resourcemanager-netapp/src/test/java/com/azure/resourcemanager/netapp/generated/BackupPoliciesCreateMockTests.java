// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.netapp.NetAppFilesManager;
import com.azure.resourcemanager.netapp.models.BackupPolicy;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class BackupPoliciesCreateMockTests {
    @Test
    public void testCreate() throws Exception {
        String responseStr
            = "{\"etag\":\"crymodizrxklobd\",\"properties\":{\"backupPolicyId\":\"azpmkmlmv\",\"provisioningState\":\"Succeeded\",\"dailyBackupsToKeep\":343155487,\"weeklyBackupsToKeep\":1612379087,\"monthlyBackupsToKeep\":1939182119,\"volumesAssigned\":315314299,\"enabled\":true,\"volumeBackups\":[{\"volumeName\":\"d\",\"volumeResourceId\":\"tfgxqbawpcb\",\"backupsCount\":2068748786,\"policyEnabled\":true}]},\"location\":\"knapq\",\"tags\":{\"d\":\"uicdhzbdybwwg\",\"fmuvapckccr\":\"ibidmhmwffp\",\"oxoyyukp\":\"vwe\"},\"id\":\"aimmoiroqb\",\"name\":\"shbraga\",\"type\":\"yyrmfsvbp\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        NetAppFilesManager manager = NetAppFilesManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        BackupPolicy response = manager.backupPolicies()
            .define("alhhjnhgwydyynfs")
            .withRegion("vnafvvkyfedevjbo")
            .withExistingNetAppAccount("kpigqfusu", "kzmkwklsnoxaxmqe")
            .withTags(mapOf("ymc", "qxypokkhminq", "ninvudbchaqdt", "ngnbdxxew", "tddmf", "qecrqctmxx", "pxbannovvoxc",
                "huytxzvtzn"))
            .withDailyBackupsToKeep(758863003)
            .withWeeklyBackupsToKeep(535214888)
            .withMonthlyBackupsToKeep(331228198)
            .withEnabled(false)
            .create();

        Assertions.assertEquals("knapq", response.location());
        Assertions.assertEquals("uicdhzbdybwwg", response.tags().get("d"));
        Assertions.assertEquals(343155487, response.dailyBackupsToKeep());
        Assertions.assertEquals(1612379087, response.weeklyBackupsToKeep());
        Assertions.assertEquals(1939182119, response.monthlyBackupsToKeep());
        Assertions.assertTrue(response.enabled());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
