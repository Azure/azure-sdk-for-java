// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.netapp.NetAppFilesManager;
import com.azure.resourcemanager.netapp.models.BackupPolicy;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class BackupPoliciesCreateMockTests {
    @Test
    public void testCreate() throws Exception {
        String responseStr
            = "{\"etag\":\"pizruwnpqxpxiw\",\"properties\":{\"backupPolicyId\":\"ngjsaasi\",\"provisioningState\":\"Succeeded\",\"dailyBackupsToKeep\":1075405640,\"weeklyBackupsToKeep\":2000308446,\"monthlyBackupsToKeep\":1006538190,\"volumesAssigned\":145136330,\"enabled\":false,\"volumeBackups\":[{\"volumeName\":\"byvi\",\"volumeResourceId\":\"ctbrxkjzwrgxffm\",\"backupsCount\":1765809359,\"policyEnabled\":true},{\"volumeName\":\"kgozxwop\",\"volumeResourceId\":\"yd\",\"backupsCount\":1805819824,\"policyEnabled\":true}]},\"location\":\"lnapxbiygn\",\"tags\":{\"lq\":\"knfsmfcttuxuuyil\"},\"id\":\"iquvrehm\",\"name\":\"njhvsujztc\",\"type\":\"ytqj\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        NetAppFilesManager manager = NetAppFilesManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        BackupPolicy response = manager.backupPolicies()
            .define("agunbtgfebw")
            .withRegion("enx")
            .withExistingNetAppAccount("rltzkatbhjmz", "nbsoqeqalarv")
            .withTags(mapOf("kifmjn", "kpak"))
            .withDailyBackupsToKeep(1206140205)
            .withWeeklyBackupsToKeep(238207505)
            .withMonthlyBackupsToKeep(627117693)
            .withEnabled(true)
            .create();

        Assertions.assertEquals("lnapxbiygn", response.location());
        Assertions.assertEquals("knfsmfcttuxuuyil", response.tags().get("lq"));
        Assertions.assertEquals(1075405640, response.dailyBackupsToKeep());
        Assertions.assertEquals(2000308446, response.weeklyBackupsToKeep());
        Assertions.assertEquals(1006538190, response.monthlyBackupsToKeep());
        Assertions.assertEquals(false, response.enabled());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
