// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.netapp.NetAppFilesManager;
import com.azure.resourcemanager.netapp.models.BackupPolicy;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class BackupPoliciesCreateMockTests {
    @Test
    public void testCreate() throws Exception {
        String responseStr
            = "{\"etag\":\"iwtglxxhljfpg\",\"properties\":{\"backupPolicyId\":\"crmnzhrgmqgjs\",\"provisioningState\":\"Succeeded\",\"dailyBackupsToKeep\":1490710976,\"weeklyBackupsToKeep\":1847709743,\"monthlyBackupsToKeep\":1825879009,\"volumesAssigned\":10992776,\"enabled\":true,\"volumeBackups\":[{\"volumeName\":\"fr\",\"volumeResourceId\":\"ousxauzlwvsgmw\",\"backupsCount\":414245170,\"policyEnabled\":true}]},\"location\":\"zvuxm\",\"tags\":{\"wpztekovmribia\":\"svth\",\"gcfh\":\"tgplucfota\",\"zqwmvt\":\"ykzcugswvxwl\",\"ynpdkvgfab\":\"njmxmcuqudtcvcl\"},\"id\":\"iyji\",\"name\":\"uzphdugnei\",\"type\":\"n\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        NetAppFilesManager manager = NetAppFilesManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        BackupPolicy response = manager.backupPolicies()
            .define("auunfprnjletlx")
            .withRegion("bgkc")
            .withExistingNetAppAccount("ytqj", "w")
            .withTags(mapOf("iypfp", "pzvuqdflvo", "knidib", "bcpzgpxtivh", "kqmhhaowjr", "qjxgpnrhgovfgp", "kfvxcnq",
                "zvuporqzdfuydz"))
            .withDailyBackupsToKeep(1077547683)
            .withWeeklyBackupsToKeep(801550005)
            .withMonthlyBackupsToKeep(1096789874)
            .withEnabled(true)
            .create();

        Assertions.assertEquals("zvuxm", response.location());
        Assertions.assertEquals("svth", response.tags().get("wpztekovmribia"));
        Assertions.assertEquals(1490710976, response.dailyBackupsToKeep());
        Assertions.assertEquals(1847709743, response.weeklyBackupsToKeep());
        Assertions.assertEquals(1825879009, response.monthlyBackupsToKeep());
        Assertions.assertEquals(true, response.enabled());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
