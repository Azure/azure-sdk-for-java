// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.netapp.fluent.models.VolumeQuotaRuleInner;
import com.azure.resourcemanager.netapp.models.Type;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class VolumeQuotaRuleInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        VolumeQuotaRuleInner model = BinaryData.fromString(
            "{\"properties\":{\"provisioningState\":\"Deleting\",\"quotaSizeInKiBs\":688449282856193915,\"quotaType\":\"IndividualUserQuota\",\"quotaTarget\":\"swdvzyybycnun\"},\"location\":\"srtkfa\",\"tags\":{\"zirtxdyuxzejntps\":\"pqgik\",\"xtqmieoxor\":\"wgioilqukry\",\"havgrvk\":\"gufhyaomtbg\",\"jzhpjbibgjmfx\":\"fo\"},\"id\":\"mv\",\"name\":\"cluyovwxnbkf\",\"type\":\"zzxscyhwzdgiruj\"}")
            .toObject(VolumeQuotaRuleInner.class);
        Assertions.assertEquals("srtkfa", model.location());
        Assertions.assertEquals("pqgik", model.tags().get("zirtxdyuxzejntps"));
        Assertions.assertEquals(688449282856193915L, model.quotaSizeInKiBs());
        Assertions.assertEquals(Type.INDIVIDUAL_USER_QUOTA, model.quotaType());
        Assertions.assertEquals("swdvzyybycnun", model.quotaTarget());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        VolumeQuotaRuleInner model = new VolumeQuotaRuleInner().withLocation("srtkfa")
            .withTags(mapOf("zirtxdyuxzejntps", "pqgik", "xtqmieoxor", "wgioilqukry", "havgrvk", "gufhyaomtbg",
                "jzhpjbibgjmfx", "fo"))
            .withQuotaSizeInKiBs(688449282856193915L)
            .withQuotaType(Type.INDIVIDUAL_USER_QUOTA)
            .withQuotaTarget("swdvzyybycnun");
        model = BinaryData.fromObject(model).toObject(VolumeQuotaRuleInner.class);
        Assertions.assertEquals("srtkfa", model.location());
        Assertions.assertEquals("pqgik", model.tags().get("zirtxdyuxzejntps"));
        Assertions.assertEquals(688449282856193915L, model.quotaSizeInKiBs());
        Assertions.assertEquals(Type.INDIVIDUAL_USER_QUOTA, model.quotaType());
        Assertions.assertEquals("swdvzyybycnun", model.quotaTarget());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
