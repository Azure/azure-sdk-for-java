// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.netapp.fluent.models.VolumeQuotaRuleInner;
import com.azure.resourcemanager.netapp.models.Type;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class VolumeQuotaRuleInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        VolumeQuotaRuleInner model = BinaryData.fromString(
            "{\"properties\":{\"provisioningState\":\"Failed\",\"quotaSizeInKiBs\":6267067833178554211,\"quotaType\":\"DefaultGroupQuota\",\"quotaTarget\":\"kfxu\"},\"location\":\"mdwzrmuhapfcqdps\",\"tags\":{\"vezrypqlmfeo\":\"vpsvuoymgcce\",\"edkowepbqpcrfk\":\"erqwkyhkobopg\",\"tn\":\"wccsnjvcdwxlpqek\"},\"id\":\"htjsying\",\"name\":\"fq\",\"type\":\"tmtdhtmdvypgik\"}")
            .toObject(VolumeQuotaRuleInner.class);
        Assertions.assertEquals("mdwzrmuhapfcqdps", model.location());
        Assertions.assertEquals("vpsvuoymgcce", model.tags().get("vezrypqlmfeo"));
        Assertions.assertEquals(6267067833178554211L, model.quotaSizeInKiBs());
        Assertions.assertEquals(Type.DEFAULT_GROUP_QUOTA, model.quotaType());
        Assertions.assertEquals("kfxu", model.quotaTarget());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        VolumeQuotaRuleInner model = new VolumeQuotaRuleInner().withLocation("mdwzrmuhapfcqdps")
            .withTags(
                mapOf("vezrypqlmfeo", "vpsvuoymgcce", "edkowepbqpcrfk", "erqwkyhkobopg", "tn", "wccsnjvcdwxlpqek"))
            .withQuotaSizeInKiBs(6267067833178554211L)
            .withQuotaType(Type.DEFAULT_GROUP_QUOTA)
            .withQuotaTarget("kfxu");
        model = BinaryData.fromObject(model).toObject(VolumeQuotaRuleInner.class);
        Assertions.assertEquals("mdwzrmuhapfcqdps", model.location());
        Assertions.assertEquals("vpsvuoymgcce", model.tags().get("vezrypqlmfeo"));
        Assertions.assertEquals(6267067833178554211L, model.quotaSizeInKiBs());
        Assertions.assertEquals(Type.DEFAULT_GROUP_QUOTA, model.quotaType());
        Assertions.assertEquals("kfxu", model.quotaTarget());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
