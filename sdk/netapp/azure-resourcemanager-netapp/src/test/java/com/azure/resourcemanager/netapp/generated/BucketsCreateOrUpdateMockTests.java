// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.netapp.NetAppFilesManager;
import com.azure.resourcemanager.netapp.models.Bucket;
import com.azure.resourcemanager.netapp.models.BucketPermissions;
import com.azure.resourcemanager.netapp.models.BucketServerProperties;
import com.azure.resourcemanager.netapp.models.CifsUser;
import com.azure.resourcemanager.netapp.models.FileSystemUser;
import com.azure.resourcemanager.netapp.models.NfsUser;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class BucketsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"path\":\"oyzbamwineofvf\",\"fileSystemUser\":{\"nfsUser\":{\"userId\":6634708207074157916,\"groupId\":961650519866515302},\"cifsUser\":{\"username\":\"boclzhzjknyuxgv\"}},\"provisioningState\":\"Succeeded\",\"status\":\"NoCredentialsSet\",\"server\":{\"fqdn\":\"pzaamrdixtreki\",\"certificateCommonName\":\"wyskbruffgll\",\"certificateExpiryDate\":\"2021-02-08T16:15:08Z\",\"ipAddress\":\"tvlxhrpqh\",\"certificateObject\":\"blcouqehbhbcdszi\"},\"permissions\":\"ReadWrite\"},\"id\":\"ndo\",\"name\":\"pmbltoormkfql\",\"type\":\"xldykalsygaolnjp\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        NetAppFilesManager manager = NetAppFilesManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        Bucket response = manager.buckets()
            .define("sryjqgdkfno")
            .withExistingVolume("lrtywikdmhlakuf", "gbhgau", "cdixmx", "f")
            .withPath("oqbvjhvefgwbmqj")
            .withFileSystemUser(new FileSystemUser()
                .withNfsUser(new NfsUser().withUserId(4828105529763249652L).withGroupId(1533925900451984741L))
                .withCifsUser(new CifsUser().withUsername("b")))
            .withServer(new BucketServerProperties().withFqdn("b").withCertificateObject("jcmmzrrscub"))
            .withPermissions(BucketPermissions.READ_ONLY)
            .create();

        Assertions.assertEquals("oyzbamwineofvf", response.path());
        Assertions.assertEquals(6634708207074157916L, response.fileSystemUser().nfsUser().userId());
        Assertions.assertEquals(961650519866515302L, response.fileSystemUser().nfsUser().groupId());
        Assertions.assertEquals("boclzhzjknyuxgv", response.fileSystemUser().cifsUser().username());
        Assertions.assertEquals("pzaamrdixtreki", response.server().fqdn());
        Assertions.assertEquals("blcouqehbhbcdszi", response.server().certificateObject());
        Assertions.assertEquals(BucketPermissions.READ_WRITE, response.permissions());
    }
}
