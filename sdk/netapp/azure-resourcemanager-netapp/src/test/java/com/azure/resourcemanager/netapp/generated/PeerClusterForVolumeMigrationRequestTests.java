// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.netapp.models.PeerClusterForVolumeMigrationRequest;
import com.azure.resourcemanager.netapp.models.RemotePath;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class PeerClusterForVolumeMigrationRequestTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PeerClusterForVolumeMigrationRequest model = BinaryData.fromString(
            "{\"peerAddresses\":[\"mslyzrpzbchckqqz\",\"ioxiysuiizyn\",\"edyatrwyhqmibzyh\",\"itsmypyyn\"],\"remotePath\":{\"externalHostName\":\"dpumnzgmw\",\"serverName\":\"nmabik\",\"volumeName\":\"sorgj\"}}")
            .toObject(PeerClusterForVolumeMigrationRequest.class);
        Assertions.assertEquals("mslyzrpzbchckqqz", model.peerAddresses().get(0));
        Assertions.assertEquals("dpumnzgmw", model.remotePath().externalHostname());
        Assertions.assertEquals("nmabik", model.remotePath().serverName());
        Assertions.assertEquals("sorgj", model.remotePath().volumeName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PeerClusterForVolumeMigrationRequest model = new PeerClusterForVolumeMigrationRequest()
            .withPeerAddresses(Arrays.asList("mslyzrpzbchckqqz", "ioxiysuiizyn", "edyatrwyhqmibzyh", "itsmypyyn"))
            .withRemotePath(
                new RemotePath().withExternalHostname("dpumnzgmw").withServerName("nmabik").withVolumeName("sorgj"));
        model = BinaryData.fromObject(model).toObject(PeerClusterForVolumeMigrationRequest.class);
        Assertions.assertEquals("mslyzrpzbchckqqz", model.peerAddresses().get(0));
        Assertions.assertEquals("dpumnzgmw", model.remotePath().externalHostname());
        Assertions.assertEquals("nmabik", model.remotePath().serverName());
        Assertions.assertEquals("sorgj", model.remotePath().volumeName());
    }
}
