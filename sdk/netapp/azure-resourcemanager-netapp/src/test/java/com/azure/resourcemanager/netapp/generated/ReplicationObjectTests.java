// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.netapp.models.RemotePath;
import com.azure.resourcemanager.netapp.models.ReplicationObject;
import com.azure.resourcemanager.netapp.models.ReplicationSchedule;
import org.junit.jupiter.api.Assertions;

public final class ReplicationObjectTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ReplicationObject model = BinaryData.fromString(
            "{\"replicationId\":\"pcqeqx\",\"endpointType\":\"src\",\"replicationSchedule\":\"hourly\",\"remoteVolumeResourceId\":\"zxctobgb\",\"remotePath\":{\"externalHostName\":\"moizpos\",\"serverName\":\"mgrcfbu\",\"volumeName\":\"rmfqjhhkxbpvj\"},\"remoteVolumeRegion\":\"jhxxjyn\",\"destinationReplications\":[{\"resourceId\":\"vkr\",\"replicationType\":\"CrossZoneReplication\",\"region\":\"xqzvszjfa\",\"zone\":\"j\"},{\"resourceId\":\"xxivetv\",\"replicationType\":\"CrossZoneReplication\",\"region\":\"qtdo\",\"zone\":\"cbxvwvxyslqbh\"}],\"externalReplicationSetupStatus\":\"ClusterPeerRequired\",\"externalReplicationSetupInfo\":\"blytk\",\"mirrorState\":\"Uninitialized\",\"relationshipStatus\":\"Transferring\"}")
            .toObject(ReplicationObject.class);
        Assertions.assertEquals(ReplicationSchedule.HOURLY, model.replicationSchedule());
        Assertions.assertEquals("zxctobgb", model.remoteVolumeResourceId());
        Assertions.assertEquals("moizpos", model.remotePath().externalHostname());
        Assertions.assertEquals("mgrcfbu", model.remotePath().serverName());
        Assertions.assertEquals("rmfqjhhkxbpvj", model.remotePath().volumeName());
        Assertions.assertEquals("jhxxjyn", model.remoteVolumeRegion());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ReplicationObject model = new ReplicationObject().withReplicationSchedule(ReplicationSchedule.HOURLY)
            .withRemoteVolumeResourceId("zxctobgb")
            .withRemotePath(new RemotePath().withExternalHostname("moizpos")
                .withServerName("mgrcfbu")
                .withVolumeName("rmfqjhhkxbpvj"))
            .withRemoteVolumeRegion("jhxxjyn");
        model = BinaryData.fromObject(model).toObject(ReplicationObject.class);
        Assertions.assertEquals(ReplicationSchedule.HOURLY, model.replicationSchedule());
        Assertions.assertEquals("zxctobgb", model.remoteVolumeResourceId());
        Assertions.assertEquals("moizpos", model.remotePath().externalHostname());
        Assertions.assertEquals("mgrcfbu", model.remotePath().serverName());
        Assertions.assertEquals("rmfqjhhkxbpvj", model.remotePath().volumeName());
        Assertions.assertEquals("jhxxjyn", model.remoteVolumeRegion());
    }
}
