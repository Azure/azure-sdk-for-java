// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.netapp.models.RemotePath;
import com.azure.resourcemanager.netapp.models.ReplicationObject;
import com.azure.resourcemanager.netapp.models.ReplicationSchedule;
import org.junit.jupiter.api.Assertions;

public final class ReplicationObjectTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ReplicationObject model = BinaryData.fromString(
            "{\"replicationId\":\"obgbkdmoizp\",\"endpointType\":\"dst\",\"replicationSchedule\":\"daily\",\"remoteVolumeResourceId\":\"cfbu\",\"remotePath\":{\"externalHostName\":\"mfqjhhkxbp\",\"serverName\":\"jy\",\"volumeName\":\"jhxxjyn\"},\"remoteVolumeRegion\":\"divkrt\",\"destinationReplications\":[{\"resourceId\":\"qzvszjf\",\"replicationType\":\"CrossRegionReplication\",\"region\":\"fdxxivetvtcqaqtd\",\"zone\":\"mcbxvwvxysl\"}],\"externalReplicationSetupStatus\":\"ReplicationCreateRequired\",\"externalReplicationSetupInfo\":\"fxoblytkb\"}")
            .toObject(ReplicationObject.class);
        Assertions.assertEquals(ReplicationSchedule.DAILY, model.replicationSchedule());
        Assertions.assertEquals("cfbu", model.remoteVolumeResourceId());
        Assertions.assertEquals("mfqjhhkxbp", model.remotePath().externalHostname());
        Assertions.assertEquals("jy", model.remotePath().serverName());
        Assertions.assertEquals("jhxxjyn", model.remotePath().volumeName());
        Assertions.assertEquals("divkrt", model.remoteVolumeRegion());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ReplicationObject model = new ReplicationObject().withReplicationSchedule(ReplicationSchedule.DAILY)
            .withRemoteVolumeResourceId("cfbu")
            .withRemotePath(
                new RemotePath().withExternalHostname("mfqjhhkxbp").withServerName("jy").withVolumeName("jhxxjyn"))
            .withRemoteVolumeRegion("divkrt");
        model = BinaryData.fromObject(model).toObject(ReplicationObject.class);
        Assertions.assertEquals(ReplicationSchedule.DAILY, model.replicationSchedule());
        Assertions.assertEquals("cfbu", model.remoteVolumeResourceId());
        Assertions.assertEquals("mfqjhhkxbp", model.remotePath().externalHostname());
        Assertions.assertEquals("jy", model.remotePath().serverName());
        Assertions.assertEquals("jhxxjyn", model.remotePath().volumeName());
        Assertions.assertEquals("divkrt", model.remoteVolumeRegion());
    }
}
