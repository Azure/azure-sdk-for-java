// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.netapp.fluent.models.SnapshotPolicyInner;
import com.azure.resourcemanager.netapp.models.DailySchedule;
import com.azure.resourcemanager.netapp.models.HourlySchedule;
import com.azure.resourcemanager.netapp.models.MonthlySchedule;
import com.azure.resourcemanager.netapp.models.SnapshotPoliciesList;
import com.azure.resourcemanager.netapp.models.WeeklySchedule;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SnapshotPoliciesListTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SnapshotPoliciesList model = BinaryData.fromString(
            "{\"value\":[{\"etag\":\"beyvpnqicvinvkjj\",\"properties\":{\"hourlySchedule\":{\"snapshotsToKeep\":1970800751,\"minute\":1127292795,\"usedBytes\":8804003083177191933},\"dailySchedule\":{\"snapshotsToKeep\":1482696459,\"hour\":553106392,\"minute\":1827391658,\"usedBytes\":1979647328600963385},\"weeklySchedule\":{\"snapshotsToKeep\":1363862891,\"day\":\"pofncck\",\"hour\":335733577,\"minute\":2123947982,\"usedBytes\":3042520873756069098},\"monthlySchedule\":{\"snapshotsToKeep\":1513228319,\"daysOfMonth\":\"qa\",\"hour\":804013471,\"minute\":1280631673,\"usedBytes\":2612817560508512911},\"enabled\":true,\"provisioningState\":\"o\"},\"location\":\"or\",\"tags\":{\"sdbnwdcfhucqdpf\":\"tolmncwsobqw\"},\"id\":\"vglsbjjca\",\"name\":\"vxb\",\"type\":\"t\"}]}")
            .toObject(SnapshotPoliciesList.class);
        Assertions.assertEquals("or", model.value().get(0).location());
        Assertions.assertEquals("tolmncwsobqw", model.value().get(0).tags().get("sdbnwdcfhucqdpf"));
        Assertions.assertEquals(1970800751, model.value().get(0).hourlySchedule().snapshotsToKeep());
        Assertions.assertEquals(1127292795, model.value().get(0).hourlySchedule().minute());
        Assertions.assertEquals(8804003083177191933L, model.value().get(0).hourlySchedule().usedBytes());
        Assertions.assertEquals(1482696459, model.value().get(0).dailySchedule().snapshotsToKeep());
        Assertions.assertEquals(553106392, model.value().get(0).dailySchedule().hour());
        Assertions.assertEquals(1827391658, model.value().get(0).dailySchedule().minute());
        Assertions.assertEquals(1979647328600963385L, model.value().get(0).dailySchedule().usedBytes());
        Assertions.assertEquals(1363862891, model.value().get(0).weeklySchedule().snapshotsToKeep());
        Assertions.assertEquals("pofncck", model.value().get(0).weeklySchedule().day());
        Assertions.assertEquals(335733577, model.value().get(0).weeklySchedule().hour());
        Assertions.assertEquals(2123947982, model.value().get(0).weeklySchedule().minute());
        Assertions.assertEquals(3042520873756069098L, model.value().get(0).weeklySchedule().usedBytes());
        Assertions.assertEquals(1513228319, model.value().get(0).monthlySchedule().snapshotsToKeep());
        Assertions.assertEquals("qa", model.value().get(0).monthlySchedule().daysOfMonth());
        Assertions.assertEquals(804013471, model.value().get(0).monthlySchedule().hour());
        Assertions.assertEquals(1280631673, model.value().get(0).monthlySchedule().minute());
        Assertions.assertEquals(2612817560508512911L, model.value().get(0).monthlySchedule().usedBytes());
        Assertions.assertEquals(true, model.value().get(0).enabled());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SnapshotPoliciesList model
            = new SnapshotPoliciesList().withValue(Arrays.asList(new SnapshotPolicyInner().withLocation("or")
                .withTags(mapOf("sdbnwdcfhucqdpf", "tolmncwsobqw"))
                .withHourlySchedule(new HourlySchedule().withSnapshotsToKeep(1970800751)
                    .withMinute(1127292795)
                    .withUsedBytes(8804003083177191933L))
                .withDailySchedule(new DailySchedule().withSnapshotsToKeep(1482696459)
                    .withHour(553106392)
                    .withMinute(1827391658)
                    .withUsedBytes(1979647328600963385L))
                .withWeeklySchedule(new WeeklySchedule().withSnapshotsToKeep(1363862891)
                    .withDay("pofncck")
                    .withHour(335733577)
                    .withMinute(2123947982)
                    .withUsedBytes(3042520873756069098L))
                .withMonthlySchedule(new MonthlySchedule().withSnapshotsToKeep(1513228319)
                    .withDaysOfMonth("qa")
                    .withHour(804013471)
                    .withMinute(1280631673)
                    .withUsedBytes(2612817560508512911L))
                .withEnabled(true)));
        model = BinaryData.fromObject(model).toObject(SnapshotPoliciesList.class);
        Assertions.assertEquals("or", model.value().get(0).location());
        Assertions.assertEquals("tolmncwsobqw", model.value().get(0).tags().get("sdbnwdcfhucqdpf"));
        Assertions.assertEquals(1970800751, model.value().get(0).hourlySchedule().snapshotsToKeep());
        Assertions.assertEquals(1127292795, model.value().get(0).hourlySchedule().minute());
        Assertions.assertEquals(8804003083177191933L, model.value().get(0).hourlySchedule().usedBytes());
        Assertions.assertEquals(1482696459, model.value().get(0).dailySchedule().snapshotsToKeep());
        Assertions.assertEquals(553106392, model.value().get(0).dailySchedule().hour());
        Assertions.assertEquals(1827391658, model.value().get(0).dailySchedule().minute());
        Assertions.assertEquals(1979647328600963385L, model.value().get(0).dailySchedule().usedBytes());
        Assertions.assertEquals(1363862891, model.value().get(0).weeklySchedule().snapshotsToKeep());
        Assertions.assertEquals("pofncck", model.value().get(0).weeklySchedule().day());
        Assertions.assertEquals(335733577, model.value().get(0).weeklySchedule().hour());
        Assertions.assertEquals(2123947982, model.value().get(0).weeklySchedule().minute());
        Assertions.assertEquals(3042520873756069098L, model.value().get(0).weeklySchedule().usedBytes());
        Assertions.assertEquals(1513228319, model.value().get(0).monthlySchedule().snapshotsToKeep());
        Assertions.assertEquals("qa", model.value().get(0).monthlySchedule().daysOfMonth());
        Assertions.assertEquals(804013471, model.value().get(0).monthlySchedule().hour());
        Assertions.assertEquals(1280631673, model.value().get(0).monthlySchedule().minute());
        Assertions.assertEquals(2612817560508512911L, model.value().get(0).monthlySchedule().usedBytes());
        Assertions.assertEquals(true, model.value().get(0).enabled());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
