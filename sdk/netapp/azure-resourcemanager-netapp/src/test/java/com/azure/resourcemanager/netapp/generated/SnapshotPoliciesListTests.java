// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.netapp.fluent.models.SnapshotPolicyInner;
import com.azure.resourcemanager.netapp.models.DailySchedule;
import com.azure.resourcemanager.netapp.models.HourlySchedule;
import com.azure.resourcemanager.netapp.models.MonthlySchedule;
import com.azure.resourcemanager.netapp.models.SnapshotPoliciesList;
import com.azure.resourcemanager.netapp.models.WeeklySchedule;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SnapshotPoliciesListTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SnapshotPoliciesList model =
            BinaryData
                .fromString(
                    "{\"value\":[{\"etag\":\"yw\",\"properties\":{\"hourlySchedule\":{\"snapshotsToKeep\":1288756278,\"minute\":1216827134,\"usedBytes\":7141166949546611504},\"dailySchedule\":{\"snapshotsToKeep\":22897042,\"hour\":192759077,\"minute\":1120299710,\"usedBytes\":4031326214587068225},\"weeklySchedule\":{\"snapshotsToKeep\":1662588727,\"day\":\"yzvqt\",\"hour\":876098210,\"minute\":1500004458,\"usedBytes\":3901581715856749689},\"monthlySchedule\":{\"snapshotsToKeep\":1254452597,\"daysOfMonth\":\"ondjmq\",\"hour\":1083170526,\"minute\":1371154692,\"usedBytes\":1404344423312280860},\"enabled\":false,\"provisioningState\":\"kwhojvpaj\"},\"location\":\"xysmoc\",\"tags\":{\"cxozapvhelxp\":\"fqvm\",\"jxgciqibrh\":\"glyatddckcbcuej\"},\"id\":\"sxsdqrhzoymibm\",\"name\":\"qyib\",\"type\":\"hwflu\"}]}")
                .toObject(SnapshotPoliciesList.class);
        Assertions.assertEquals("xysmoc", model.value().get(0).location());
        Assertions.assertEquals("fqvm", model.value().get(0).tags().get("cxozapvhelxp"));
        Assertions.assertEquals(1288756278, model.value().get(0).hourlySchedule().snapshotsToKeep());
        Assertions.assertEquals(1216827134, model.value().get(0).hourlySchedule().minute());
        Assertions.assertEquals(7141166949546611504L, model.value().get(0).hourlySchedule().usedBytes());
        Assertions.assertEquals(22897042, model.value().get(0).dailySchedule().snapshotsToKeep());
        Assertions.assertEquals(192759077, model.value().get(0).dailySchedule().hour());
        Assertions.assertEquals(1120299710, model.value().get(0).dailySchedule().minute());
        Assertions.assertEquals(4031326214587068225L, model.value().get(0).dailySchedule().usedBytes());
        Assertions.assertEquals(1662588727, model.value().get(0).weeklySchedule().snapshotsToKeep());
        Assertions.assertEquals("yzvqt", model.value().get(0).weeklySchedule().day());
        Assertions.assertEquals(876098210, model.value().get(0).weeklySchedule().hour());
        Assertions.assertEquals(1500004458, model.value().get(0).weeklySchedule().minute());
        Assertions.assertEquals(3901581715856749689L, model.value().get(0).weeklySchedule().usedBytes());
        Assertions.assertEquals(1254452597, model.value().get(0).monthlySchedule().snapshotsToKeep());
        Assertions.assertEquals("ondjmq", model.value().get(0).monthlySchedule().daysOfMonth());
        Assertions.assertEquals(1083170526, model.value().get(0).monthlySchedule().hour());
        Assertions.assertEquals(1371154692, model.value().get(0).monthlySchedule().minute());
        Assertions.assertEquals(1404344423312280860L, model.value().get(0).monthlySchedule().usedBytes());
        Assertions.assertEquals(false, model.value().get(0).enabled());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SnapshotPoliciesList model =
            new SnapshotPoliciesList()
                .withValue(
                    Arrays
                        .asList(
                            new SnapshotPolicyInner()
                                .withLocation("xysmoc")
                                .withTags(mapOf("cxozapvhelxp", "fqvm", "jxgciqibrh", "glyatddckcbcuej"))
                                .withHourlySchedule(
                                    new HourlySchedule()
                                        .withSnapshotsToKeep(1288756278)
                                        .withMinute(1216827134)
                                        .withUsedBytes(7141166949546611504L))
                                .withDailySchedule(
                                    new DailySchedule()
                                        .withSnapshotsToKeep(22897042)
                                        .withHour(192759077)
                                        .withMinute(1120299710)
                                        .withUsedBytes(4031326214587068225L))
                                .withWeeklySchedule(
                                    new WeeklySchedule()
                                        .withSnapshotsToKeep(1662588727)
                                        .withDay("yzvqt")
                                        .withHour(876098210)
                                        .withMinute(1500004458)
                                        .withUsedBytes(3901581715856749689L))
                                .withMonthlySchedule(
                                    new MonthlySchedule()
                                        .withSnapshotsToKeep(1254452597)
                                        .withDaysOfMonth("ondjmq")
                                        .withHour(1083170526)
                                        .withMinute(1371154692)
                                        .withUsedBytes(1404344423312280860L))
                                .withEnabled(false)));
        model = BinaryData.fromObject(model).toObject(SnapshotPoliciesList.class);
        Assertions.assertEquals("xysmoc", model.value().get(0).location());
        Assertions.assertEquals("fqvm", model.value().get(0).tags().get("cxozapvhelxp"));
        Assertions.assertEquals(1288756278, model.value().get(0).hourlySchedule().snapshotsToKeep());
        Assertions.assertEquals(1216827134, model.value().get(0).hourlySchedule().minute());
        Assertions.assertEquals(7141166949546611504L, model.value().get(0).hourlySchedule().usedBytes());
        Assertions.assertEquals(22897042, model.value().get(0).dailySchedule().snapshotsToKeep());
        Assertions.assertEquals(192759077, model.value().get(0).dailySchedule().hour());
        Assertions.assertEquals(1120299710, model.value().get(0).dailySchedule().minute());
        Assertions.assertEquals(4031326214587068225L, model.value().get(0).dailySchedule().usedBytes());
        Assertions.assertEquals(1662588727, model.value().get(0).weeklySchedule().snapshotsToKeep());
        Assertions.assertEquals("yzvqt", model.value().get(0).weeklySchedule().day());
        Assertions.assertEquals(876098210, model.value().get(0).weeklySchedule().hour());
        Assertions.assertEquals(1500004458, model.value().get(0).weeklySchedule().minute());
        Assertions.assertEquals(3901581715856749689L, model.value().get(0).weeklySchedule().usedBytes());
        Assertions.assertEquals(1254452597, model.value().get(0).monthlySchedule().snapshotsToKeep());
        Assertions.assertEquals("ondjmq", model.value().get(0).monthlySchedule().daysOfMonth());
        Assertions.assertEquals(1083170526, model.value().get(0).monthlySchedule().hour());
        Assertions.assertEquals(1371154692, model.value().get(0).monthlySchedule().minute());
        Assertions.assertEquals(1404344423312280860L, model.value().get(0).monthlySchedule().usedBytes());
        Assertions.assertEquals(false, model.value().get(0).enabled());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
