// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.netapp.fluent.models.SnapshotPolicyInner;
import com.azure.resourcemanager.netapp.models.DailySchedule;
import com.azure.resourcemanager.netapp.models.HourlySchedule;
import com.azure.resourcemanager.netapp.models.MonthlySchedule;
import com.azure.resourcemanager.netapp.models.SnapshotPoliciesList;
import com.azure.resourcemanager.netapp.models.WeeklySchedule;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SnapshotPoliciesListTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SnapshotPoliciesList model = BinaryData.fromString(
            "{\"value\":[{\"etag\":\"mqg\",\"properties\":{\"hourlySchedule\":{\"snapshotsToKeep\":191460496,\"minute\":1862318440,\"usedBytes\":7805373587347139701},\"dailySchedule\":{\"snapshotsToKeep\":566556548,\"hour\":33393175,\"minute\":798268380,\"usedBytes\":8276594751557118493},\"weeklySchedule\":{\"snapshotsToKeep\":1280357892,\"day\":\"uipiccjzk\",\"hour\":154268521,\"minute\":1783583685,\"usedBytes\":454934935875462533},\"monthlySchedule\":{\"snapshotsToKeep\":980473752,\"daysOfMonth\":\"yrnxxmueedn\",\"hour\":1429248323,\"minute\":233559890,\"usedBytes\":3986326733214005817},\"enabled\":false,\"provisioningState\":\"chea\"},\"location\":\"fmtdaaygdvwvgp\",\"tags\":{\"xrtfudxep\":\"g\",\"himdbl\":\"gyqagvrvmnpkuk\",\"hfjx\":\"gwimfn\"},\"id\":\"mszkkfo\",\"name\":\"rey\",\"type\":\"kzikfjawneaivxwc\"}]}")
            .toObject(SnapshotPoliciesList.class);
        Assertions.assertEquals("fmtdaaygdvwvgp", model.value().get(0).location());
        Assertions.assertEquals("g", model.value().get(0).tags().get("xrtfudxep"));
        Assertions.assertEquals(191460496, model.value().get(0).hourlySchedule().snapshotsToKeep());
        Assertions.assertEquals(1862318440, model.value().get(0).hourlySchedule().minute());
        Assertions.assertEquals(7805373587347139701L, model.value().get(0).hourlySchedule().usedBytes());
        Assertions.assertEquals(566556548, model.value().get(0).dailySchedule().snapshotsToKeep());
        Assertions.assertEquals(33393175, model.value().get(0).dailySchedule().hour());
        Assertions.assertEquals(798268380, model.value().get(0).dailySchedule().minute());
        Assertions.assertEquals(8276594751557118493L, model.value().get(0).dailySchedule().usedBytes());
        Assertions.assertEquals(1280357892, model.value().get(0).weeklySchedule().snapshotsToKeep());
        Assertions.assertEquals("uipiccjzk", model.value().get(0).weeklySchedule().day());
        Assertions.assertEquals(154268521, model.value().get(0).weeklySchedule().hour());
        Assertions.assertEquals(1783583685, model.value().get(0).weeklySchedule().minute());
        Assertions.assertEquals(454934935875462533L, model.value().get(0).weeklySchedule().usedBytes());
        Assertions.assertEquals(980473752, model.value().get(0).monthlySchedule().snapshotsToKeep());
        Assertions.assertEquals("yrnxxmueedn", model.value().get(0).monthlySchedule().daysOfMonth());
        Assertions.assertEquals(1429248323, model.value().get(0).monthlySchedule().hour());
        Assertions.assertEquals(233559890, model.value().get(0).monthlySchedule().minute());
        Assertions.assertEquals(3986326733214005817L, model.value().get(0).monthlySchedule().usedBytes());
        Assertions.assertEquals(false, model.value().get(0).enabled());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SnapshotPoliciesList model = new SnapshotPoliciesList()
            .withValue(Arrays.asList(new SnapshotPolicyInner().withLocation("fmtdaaygdvwvgp")
                .withTags(mapOf("xrtfudxep", "g", "himdbl", "gyqagvrvmnpkuk", "hfjx", "gwimfn"))
                .withHourlySchedule(new HourlySchedule().withSnapshotsToKeep(191460496)
                    .withMinute(1862318440)
                    .withUsedBytes(7805373587347139701L))
                .withDailySchedule(new DailySchedule().withSnapshotsToKeep(566556548)
                    .withHour(33393175)
                    .withMinute(798268380)
                    .withUsedBytes(8276594751557118493L))
                .withWeeklySchedule(new WeeklySchedule().withSnapshotsToKeep(1280357892)
                    .withDay("uipiccjzk")
                    .withHour(154268521)
                    .withMinute(1783583685)
                    .withUsedBytes(454934935875462533L))
                .withMonthlySchedule(new MonthlySchedule().withSnapshotsToKeep(980473752)
                    .withDaysOfMonth("yrnxxmueedn")
                    .withHour(1429248323)
                    .withMinute(233559890)
                    .withUsedBytes(3986326733214005817L))
                .withEnabled(false)));
        model = BinaryData.fromObject(model).toObject(SnapshotPoliciesList.class);
        Assertions.assertEquals("fmtdaaygdvwvgp", model.value().get(0).location());
        Assertions.assertEquals("g", model.value().get(0).tags().get("xrtfudxep"));
        Assertions.assertEquals(191460496, model.value().get(0).hourlySchedule().snapshotsToKeep());
        Assertions.assertEquals(1862318440, model.value().get(0).hourlySchedule().minute());
        Assertions.assertEquals(7805373587347139701L, model.value().get(0).hourlySchedule().usedBytes());
        Assertions.assertEquals(566556548, model.value().get(0).dailySchedule().snapshotsToKeep());
        Assertions.assertEquals(33393175, model.value().get(0).dailySchedule().hour());
        Assertions.assertEquals(798268380, model.value().get(0).dailySchedule().minute());
        Assertions.assertEquals(8276594751557118493L, model.value().get(0).dailySchedule().usedBytes());
        Assertions.assertEquals(1280357892, model.value().get(0).weeklySchedule().snapshotsToKeep());
        Assertions.assertEquals("uipiccjzk", model.value().get(0).weeklySchedule().day());
        Assertions.assertEquals(154268521, model.value().get(0).weeklySchedule().hour());
        Assertions.assertEquals(1783583685, model.value().get(0).weeklySchedule().minute());
        Assertions.assertEquals(454934935875462533L, model.value().get(0).weeklySchedule().usedBytes());
        Assertions.assertEquals(980473752, model.value().get(0).monthlySchedule().snapshotsToKeep());
        Assertions.assertEquals("yrnxxmueedn", model.value().get(0).monthlySchedule().daysOfMonth());
        Assertions.assertEquals(1429248323, model.value().get(0).monthlySchedule().hour());
        Assertions.assertEquals(233559890, model.value().get(0).monthlySchedule().minute());
        Assertions.assertEquals(3986326733214005817L, model.value().get(0).monthlySchedule().usedBytes());
        Assertions.assertEquals(false, model.value().get(0).enabled());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
