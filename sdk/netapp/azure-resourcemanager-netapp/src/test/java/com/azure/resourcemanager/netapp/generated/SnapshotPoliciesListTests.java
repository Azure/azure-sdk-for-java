// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.netapp.fluent.models.SnapshotPolicyInner;
import com.azure.resourcemanager.netapp.models.DailySchedule;
import com.azure.resourcemanager.netapp.models.HourlySchedule;
import com.azure.resourcemanager.netapp.models.MonthlySchedule;
import com.azure.resourcemanager.netapp.models.SnapshotPoliciesList;
import com.azure.resourcemanager.netapp.models.WeeklySchedule;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SnapshotPoliciesListTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SnapshotPoliciesList model = BinaryData.fromString(
            "{\"value\":[{\"etag\":\"rvimjwosytxitcsk\",\"properties\":{\"hourlySchedule\":{\"snapshotsToKeep\":468391476,\"minute\":279496369,\"usedBytes\":7242879018847488252},\"dailySchedule\":{\"snapshotsToKeep\":344602824,\"hour\":1320070179,\"minute\":885439585,\"usedBytes\":1161458603044308575},\"weeklySchedule\":{\"snapshotsToKeep\":1943663819,\"day\":\"gqggebdunygae\",\"hour\":277220596,\"minute\":1475802306,\"usedBytes\":5297129345434396660},\"monthlySchedule\":{\"snapshotsToKeep\":570824615,\"daysOfMonth\":\"rxcyjmoad\",\"hour\":59301648,\"minute\":239264688,\"usedBytes\":3120227000201481868},\"enabled\":false,\"provisioningState\":\"sjqbjhhyxxrw\"},\"location\":\"co\",\"tags\":{\"xkgymareqnajxqu\":\"p\"},\"id\":\"jhkycub\",\"name\":\"ddg\",\"type\":\"sofwqmzqalkrmnji\"},{\"etag\":\"xacqqudfnbyx\",\"properties\":{\"hourlySchedule\":{\"snapshotsToKeep\":1026503088,\"minute\":1791584007,\"usedBytes\":3453666268896237887},\"dailySchedule\":{\"snapshotsToKeep\":1602757195,\"hour\":221742108,\"minute\":1578513386,\"usedBytes\":2334961314382685770},\"weeklySchedule\":{\"snapshotsToKeep\":769547097,\"day\":\"sexnevfdnw\",\"hour\":2059840008,\"minute\":377160768,\"usedBytes\":6186896239001555469},\"monthlySchedule\":{\"snapshotsToKeep\":1475196585,\"daysOfMonth\":\"zsoibjudpfrxtr\",\"hour\":747190122,\"minute\":383996827,\"usedBytes\":8358866216552319675},\"enabled\":false,\"provisioningState\":\"brqubp\"},\"location\":\"h\",\"tags\":{\"ivpdtiir\":\"i\",\"yfxrx\":\"tdqoaxoruzfgsq\",\"ptramxj\":\"l\",\"nwxuqlcvydyp\":\"zwl\"},\"id\":\"tdooaoj\",\"name\":\"niodkooeb\",\"type\":\"nuj\"},{\"etag\":\"mmsbvdkcrodtjin\",\"properties\":{\"hourlySchedule\":{\"snapshotsToKeep\":1492452539,\"minute\":274733430,\"usedBytes\":3850222588525127321},\"dailySchedule\":{\"snapshotsToKeep\":1199723350,\"hour\":216115077,\"minute\":632843013,\"usedBytes\":6193547240906523394},\"weeklySchedule\":{\"snapshotsToKeep\":1252976241,\"day\":\"kfpagao\",\"hour\":1739461107,\"minute\":1784212142,\"usedBytes\":5057262440850695627},\"monthlySchedule\":{\"snapshotsToKeep\":97386610,\"daysOfMonth\":\"xkqjnsjervt\",\"hour\":1109301596,\"minute\":1353667842,\"usedBytes\":1824695374727321161},\"enabled\":false,\"provisioningState\":\"psbzkfzbeyvpn\"},\"location\":\"cvinvkjjxdxrbuuk\",\"tags\":{\"paztzpofncck\":\"ewyhml\",\"qa\":\"yfzqwhxxbu\",\"lxorjaltolmncws\":\"zfeqztppri\"},\"id\":\"bqwcsdbnwdcf\",\"name\":\"ucqdpfuvglsb\",\"type\":\"jcanvxbvtvudut\"},{\"etag\":\"ormrlxqtvcofudfl\",\"properties\":{\"hourlySchedule\":{\"snapshotsToKeep\":585875953,\"minute\":1902610413,\"usedBytes\":1267263221635298895},\"dailySchedule\":{\"snapshotsToKeep\":1113141227,\"hour\":974608303,\"minute\":1989846717,\"usedBytes\":8761404710437342780},\"weeklySchedule\":{\"snapshotsToKeep\":1165613569,\"day\":\"dsg\",\"hour\":760670144,\"minute\":220532000,\"usedBytes\":445403329310862805},\"monthlySchedule\":{\"snapshotsToKeep\":1951519053,\"daysOfMonth\":\"juetaebur\",\"hour\":1552436434,\"minute\":973815152,\"usedBytes\":588408385246434864},\"enabled\":false,\"provisioningState\":\"wabm\"},\"location\":\"efkifr\",\"tags\":{\"ujmqlgkfbtndoa\":\"u\",\"bjcntujitc\":\"n\",\"twwaezkojvdcpzf\":\"ed\",\"foxciq\":\"qouicybxarzgsz\"},\"id\":\"p\",\"name\":\"doamciodhkha\",\"type\":\"xkhnzbonlwnto\"}]}")
            .toObject(SnapshotPoliciesList.class);
        Assertions.assertEquals("co", model.value().get(0).location());
        Assertions.assertEquals("p", model.value().get(0).tags().get("xkgymareqnajxqu"));
        Assertions.assertEquals(468391476, model.value().get(0).hourlySchedule().snapshotsToKeep());
        Assertions.assertEquals(279496369, model.value().get(0).hourlySchedule().minute());
        Assertions.assertEquals(7242879018847488252L, model.value().get(0).hourlySchedule().usedBytes());
        Assertions.assertEquals(344602824, model.value().get(0).dailySchedule().snapshotsToKeep());
        Assertions.assertEquals(1320070179, model.value().get(0).dailySchedule().hour());
        Assertions.assertEquals(885439585, model.value().get(0).dailySchedule().minute());
        Assertions.assertEquals(1161458603044308575L, model.value().get(0).dailySchedule().usedBytes());
        Assertions.assertEquals(1943663819, model.value().get(0).weeklySchedule().snapshotsToKeep());
        Assertions.assertEquals("gqggebdunygae", model.value().get(0).weeklySchedule().day());
        Assertions.assertEquals(277220596, model.value().get(0).weeklySchedule().hour());
        Assertions.assertEquals(1475802306, model.value().get(0).weeklySchedule().minute());
        Assertions.assertEquals(5297129345434396660L, model.value().get(0).weeklySchedule().usedBytes());
        Assertions.assertEquals(570824615, model.value().get(0).monthlySchedule().snapshotsToKeep());
        Assertions.assertEquals("rxcyjmoad", model.value().get(0).monthlySchedule().daysOfMonth());
        Assertions.assertEquals(59301648, model.value().get(0).monthlySchedule().hour());
        Assertions.assertEquals(239264688, model.value().get(0).monthlySchedule().minute());
        Assertions.assertEquals(3120227000201481868L, model.value().get(0).monthlySchedule().usedBytes());
        Assertions.assertEquals(false, model.value().get(0).enabled());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SnapshotPoliciesList model = new SnapshotPoliciesList().withValue(Arrays.asList(
            new SnapshotPolicyInner().withLocation("co")
                .withTags(mapOf("xkgymareqnajxqu", "p"))
                .withHourlySchedule(new HourlySchedule().withSnapshotsToKeep(468391476)
                    .withMinute(279496369)
                    .withUsedBytes(7242879018847488252L))
                .withDailySchedule(new DailySchedule().withSnapshotsToKeep(344602824)
                    .withHour(1320070179)
                    .withMinute(885439585)
                    .withUsedBytes(1161458603044308575L))
                .withWeeklySchedule(new WeeklySchedule().withSnapshotsToKeep(1943663819)
                    .withDay("gqggebdunygae")
                    .withHour(277220596)
                    .withMinute(1475802306)
                    .withUsedBytes(5297129345434396660L))
                .withMonthlySchedule(new MonthlySchedule().withSnapshotsToKeep(570824615)
                    .withDaysOfMonth("rxcyjmoad")
                    .withHour(59301648)
                    .withMinute(239264688)
                    .withUsedBytes(3120227000201481868L))
                .withEnabled(false),
            new SnapshotPolicyInner().withLocation("h")
                .withTags(mapOf("ivpdtiir", "i", "yfxrx", "tdqoaxoruzfgsq", "ptramxj", "l", "nwxuqlcvydyp", "zwl"))
                .withHourlySchedule(new HourlySchedule().withSnapshotsToKeep(1026503088)
                    .withMinute(1791584007)
                    .withUsedBytes(3453666268896237887L))
                .withDailySchedule(new DailySchedule().withSnapshotsToKeep(1602757195)
                    .withHour(221742108)
                    .withMinute(1578513386)
                    .withUsedBytes(2334961314382685770L))
                .withWeeklySchedule(new WeeklySchedule().withSnapshotsToKeep(769547097)
                    .withDay("sexnevfdnw")
                    .withHour(2059840008)
                    .withMinute(377160768)
                    .withUsedBytes(6186896239001555469L))
                .withMonthlySchedule(new MonthlySchedule().withSnapshotsToKeep(1475196585)
                    .withDaysOfMonth("zsoibjudpfrxtr")
                    .withHour(747190122)
                    .withMinute(383996827)
                    .withUsedBytes(8358866216552319675L))
                .withEnabled(false),
            new SnapshotPolicyInner().withLocation("cvinvkjjxdxrbuuk")
                .withTags(mapOf("paztzpofncck", "ewyhml", "qa", "yfzqwhxxbu", "lxorjaltolmncws", "zfeqztppri"))
                .withHourlySchedule(new HourlySchedule().withSnapshotsToKeep(1492452539)
                    .withMinute(274733430)
                    .withUsedBytes(3850222588525127321L))
                .withDailySchedule(new DailySchedule().withSnapshotsToKeep(1199723350)
                    .withHour(216115077)
                    .withMinute(632843013)
                    .withUsedBytes(6193547240906523394L))
                .withWeeklySchedule(new WeeklySchedule().withSnapshotsToKeep(1252976241)
                    .withDay("kfpagao")
                    .withHour(1739461107)
                    .withMinute(1784212142)
                    .withUsedBytes(5057262440850695627L))
                .withMonthlySchedule(new MonthlySchedule().withSnapshotsToKeep(97386610)
                    .withDaysOfMonth("xkqjnsjervt")
                    .withHour(1109301596)
                    .withMinute(1353667842)
                    .withUsedBytes(1824695374727321161L))
                .withEnabled(false),
            new SnapshotPolicyInner().withLocation("efkifr")
                .withTags(mapOf("ujmqlgkfbtndoa", "u", "bjcntujitc", "n", "twwaezkojvdcpzf", "ed", "foxciq",
                    "qouicybxarzgsz"))
                .withHourlySchedule(new HourlySchedule().withSnapshotsToKeep(585875953)
                    .withMinute(1902610413)
                    .withUsedBytes(1267263221635298895L))
                .withDailySchedule(new DailySchedule().withSnapshotsToKeep(1113141227)
                    .withHour(974608303)
                    .withMinute(1989846717)
                    .withUsedBytes(8761404710437342780L))
                .withWeeklySchedule(new WeeklySchedule().withSnapshotsToKeep(1165613569)
                    .withDay("dsg")
                    .withHour(760670144)
                    .withMinute(220532000)
                    .withUsedBytes(445403329310862805L))
                .withMonthlySchedule(new MonthlySchedule().withSnapshotsToKeep(1951519053)
                    .withDaysOfMonth("juetaebur")
                    .withHour(1552436434)
                    .withMinute(973815152)
                    .withUsedBytes(588408385246434864L))
                .withEnabled(false)));
        model = BinaryData.fromObject(model).toObject(SnapshotPoliciesList.class);
        Assertions.assertEquals("co", model.value().get(0).location());
        Assertions.assertEquals("p", model.value().get(0).tags().get("xkgymareqnajxqu"));
        Assertions.assertEquals(468391476, model.value().get(0).hourlySchedule().snapshotsToKeep());
        Assertions.assertEquals(279496369, model.value().get(0).hourlySchedule().minute());
        Assertions.assertEquals(7242879018847488252L, model.value().get(0).hourlySchedule().usedBytes());
        Assertions.assertEquals(344602824, model.value().get(0).dailySchedule().snapshotsToKeep());
        Assertions.assertEquals(1320070179, model.value().get(0).dailySchedule().hour());
        Assertions.assertEquals(885439585, model.value().get(0).dailySchedule().minute());
        Assertions.assertEquals(1161458603044308575L, model.value().get(0).dailySchedule().usedBytes());
        Assertions.assertEquals(1943663819, model.value().get(0).weeklySchedule().snapshotsToKeep());
        Assertions.assertEquals("gqggebdunygae", model.value().get(0).weeklySchedule().day());
        Assertions.assertEquals(277220596, model.value().get(0).weeklySchedule().hour());
        Assertions.assertEquals(1475802306, model.value().get(0).weeklySchedule().minute());
        Assertions.assertEquals(5297129345434396660L, model.value().get(0).weeklySchedule().usedBytes());
        Assertions.assertEquals(570824615, model.value().get(0).monthlySchedule().snapshotsToKeep());
        Assertions.assertEquals("rxcyjmoad", model.value().get(0).monthlySchedule().daysOfMonth());
        Assertions.assertEquals(59301648, model.value().get(0).monthlySchedule().hour());
        Assertions.assertEquals(239264688, model.value().get(0).monthlySchedule().minute());
        Assertions.assertEquals(3120227000201481868L, model.value().get(0).monthlySchedule().usedBytes());
        Assertions.assertEquals(false, model.value().get(0).enabled());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
