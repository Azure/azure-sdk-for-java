// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.netapp.fluent.models.SnapshotPolicyInner;
import com.azure.resourcemanager.netapp.models.DailySchedule;
import com.azure.resourcemanager.netapp.models.HourlySchedule;
import com.azure.resourcemanager.netapp.models.MonthlySchedule;
import com.azure.resourcemanager.netapp.models.SnapshotPoliciesList;
import com.azure.resourcemanager.netapp.models.WeeklySchedule;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SnapshotPoliciesListTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SnapshotPoliciesList model = BinaryData.fromString(
            "{\"value\":[{\"etag\":\"hfjx\",\"properties\":{\"hourlySchedule\":{\"snapshotsToKeep\":279128548,\"minute\":1364854501,\"usedBytes\":7589435135200737860},\"dailySchedule\":{\"snapshotsToKeep\":1563203885,\"hour\":1941529863,\"minute\":648968318,\"usedBytes\":7080556178524665851},\"weeklySchedule\":{\"snapshotsToKeep\":195683064,\"day\":\"a\",\"hour\":641008490,\"minute\":322973840,\"usedBytes\":8376736309034828237},\"monthlySchedule\":{\"snapshotsToKeep\":1240770029,\"daysOfMonth\":\"elsfeaen\",\"hour\":1417911120,\"minute\":1448389214,\"usedBytes\":1313618193928876084},\"enabled\":true,\"provisioningState\":\"bjhwuaan\"},\"location\":\"jos\",\"tags\":{\"ag\":\"oulpjrv\",\"cktqumiekkezzi\":\"rvimjwosytxitcsk\"},\"id\":\"hlyfjhdgqgg\",\"name\":\"bdunygaeqid\",\"type\":\"qfatpxllrxcyjm\"}]}")
            .toObject(SnapshotPoliciesList.class);
        Assertions.assertEquals("jos", model.value().get(0).location());
        Assertions.assertEquals("oulpjrv", model.value().get(0).tags().get("ag"));
        Assertions.assertEquals(279128548, model.value().get(0).hourlySchedule().snapshotsToKeep());
        Assertions.assertEquals(1364854501, model.value().get(0).hourlySchedule().minute());
        Assertions.assertEquals(7589435135200737860L, model.value().get(0).hourlySchedule().usedBytes());
        Assertions.assertEquals(1563203885, model.value().get(0).dailySchedule().snapshotsToKeep());
        Assertions.assertEquals(1941529863, model.value().get(0).dailySchedule().hour());
        Assertions.assertEquals(648968318, model.value().get(0).dailySchedule().minute());
        Assertions.assertEquals(7080556178524665851L, model.value().get(0).dailySchedule().usedBytes());
        Assertions.assertEquals(195683064, model.value().get(0).weeklySchedule().snapshotsToKeep());
        Assertions.assertEquals("a", model.value().get(0).weeklySchedule().day());
        Assertions.assertEquals(641008490, model.value().get(0).weeklySchedule().hour());
        Assertions.assertEquals(322973840, model.value().get(0).weeklySchedule().minute());
        Assertions.assertEquals(8376736309034828237L, model.value().get(0).weeklySchedule().usedBytes());
        Assertions.assertEquals(1240770029, model.value().get(0).monthlySchedule().snapshotsToKeep());
        Assertions.assertEquals("elsfeaen", model.value().get(0).monthlySchedule().daysOfMonth());
        Assertions.assertEquals(1417911120, model.value().get(0).monthlySchedule().hour());
        Assertions.assertEquals(1448389214, model.value().get(0).monthlySchedule().minute());
        Assertions.assertEquals(1313618193928876084L, model.value().get(0).monthlySchedule().usedBytes());
        Assertions.assertTrue(model.value().get(0).enabled());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SnapshotPoliciesList model
            = new SnapshotPoliciesList().withValue(Arrays.asList(new SnapshotPolicyInner().withLocation("jos")
                .withTags(mapOf("ag", "oulpjrv", "cktqumiekkezzi", "rvimjwosytxitcsk"))
                .withHourlySchedule(new HourlySchedule().withSnapshotsToKeep(279128548)
                    .withMinute(1364854501)
                    .withUsedBytes(7589435135200737860L))
                .withDailySchedule(new DailySchedule().withSnapshotsToKeep(1563203885)
                    .withHour(1941529863)
                    .withMinute(648968318)
                    .withUsedBytes(7080556178524665851L))
                .withWeeklySchedule(new WeeklySchedule().withSnapshotsToKeep(195683064)
                    .withDay("a")
                    .withHour(641008490)
                    .withMinute(322973840)
                    .withUsedBytes(8376736309034828237L))
                .withMonthlySchedule(new MonthlySchedule().withSnapshotsToKeep(1240770029)
                    .withDaysOfMonth("elsfeaen")
                    .withHour(1417911120)
                    .withMinute(1448389214)
                    .withUsedBytes(1313618193928876084L))
                .withEnabled(true)));
        model = BinaryData.fromObject(model).toObject(SnapshotPoliciesList.class);
        Assertions.assertEquals("jos", model.value().get(0).location());
        Assertions.assertEquals("oulpjrv", model.value().get(0).tags().get("ag"));
        Assertions.assertEquals(279128548, model.value().get(0).hourlySchedule().snapshotsToKeep());
        Assertions.assertEquals(1364854501, model.value().get(0).hourlySchedule().minute());
        Assertions.assertEquals(7589435135200737860L, model.value().get(0).hourlySchedule().usedBytes());
        Assertions.assertEquals(1563203885, model.value().get(0).dailySchedule().snapshotsToKeep());
        Assertions.assertEquals(1941529863, model.value().get(0).dailySchedule().hour());
        Assertions.assertEquals(648968318, model.value().get(0).dailySchedule().minute());
        Assertions.assertEquals(7080556178524665851L, model.value().get(0).dailySchedule().usedBytes());
        Assertions.assertEquals(195683064, model.value().get(0).weeklySchedule().snapshotsToKeep());
        Assertions.assertEquals("a", model.value().get(0).weeklySchedule().day());
        Assertions.assertEquals(641008490, model.value().get(0).weeklySchedule().hour());
        Assertions.assertEquals(322973840, model.value().get(0).weeklySchedule().minute());
        Assertions.assertEquals(8376736309034828237L, model.value().get(0).weeklySchedule().usedBytes());
        Assertions.assertEquals(1240770029, model.value().get(0).monthlySchedule().snapshotsToKeep());
        Assertions.assertEquals("elsfeaen", model.value().get(0).monthlySchedule().daysOfMonth());
        Assertions.assertEquals(1417911120, model.value().get(0).monthlySchedule().hour());
        Assertions.assertEquals(1448389214, model.value().get(0).monthlySchedule().minute());
        Assertions.assertEquals(1313618193928876084L, model.value().get(0).monthlySchedule().usedBytes());
        Assertions.assertTrue(model.value().get(0).enabled());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
