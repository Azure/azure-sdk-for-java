// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.netapp.models.EndpointType;
import com.azure.resourcemanager.netapp.models.RemotePath;
import com.azure.resourcemanager.netapp.models.ReplicationObject;
import com.azure.resourcemanager.netapp.models.ReplicationSchedule;
import com.azure.resourcemanager.netapp.models.VolumeBackupProperties;
import com.azure.resourcemanager.netapp.models.VolumePropertiesDataProtection;
import com.azure.resourcemanager.netapp.models.VolumeRelocationProperties;
import com.azure.resourcemanager.netapp.models.VolumeSnapshotProperties;
import org.junit.jupiter.api.Assertions;

public final class VolumePropertiesDataProtectionTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        VolumePropertiesDataProtection model = BinaryData.fromString(
            "{\"backup\":{\"backupPolicyId\":\"fthnzdn\",\"policyEnforced\":false,\"backupVaultId\":\"nayqi\"},\"replication\":{\"replicationId\":\"duhavhqlkt\",\"endpointType\":\"dst\",\"replicationSchedule\":\"hourly\",\"remoteVolumeResourceId\":\"lbg\",\"remotePath\":{\"externalHostName\":\"duiertgcc\",\"serverName\":\"mvaolps\",\"volumeName\":\"lqlfm\"},\"remoteVolumeRegion\":\"n\",\"destinationReplications\":[{\"resourceId\":\"zpswiydmc\",\"replicationType\":\"CrossZoneReplication\",\"region\":\"dxssadbzm\",\"zone\":\"dfznudaodv\"},{\"resourceId\":\"bncblylpstdbhhx\",\"replicationType\":\"CrossZoneReplication\",\"region\":\"zucerscdntnev\",\"zone\":\"wjmy\"},{\"resourceId\":\"dsslswt\",\"replicationType\":\"CrossZoneReplication\",\"region\":\"iofz\",\"zone\":\"qsemwabne\"}]},\"snapshot\":{\"snapshotPolicyId\":\"hszhedplvwiwu\"},\"volumeRelocation\":{\"relocationRequested\":false,\"readyToBeFinalized\":false}}")
            .toObject(VolumePropertiesDataProtection.class);
        Assertions.assertEquals("fthnzdn", model.backup().backupPolicyId());
        Assertions.assertEquals(false, model.backup().policyEnforced());
        Assertions.assertEquals("nayqi", model.backup().backupVaultId());
        Assertions.assertEquals(EndpointType.DST, model.replication().endpointType());
        Assertions.assertEquals(ReplicationSchedule.HOURLY, model.replication().replicationSchedule());
        Assertions.assertEquals("lbg", model.replication().remoteVolumeResourceId());
        Assertions.assertEquals("duiertgcc", model.replication().remotePath().externalHostname());
        Assertions.assertEquals("mvaolps", model.replication().remotePath().serverName());
        Assertions.assertEquals("lqlfm", model.replication().remotePath().volumeName());
        Assertions.assertEquals("n", model.replication().remoteVolumeRegion());
        Assertions.assertEquals("hszhedplvwiwu", model.snapshot().snapshotPolicyId());
        Assertions.assertEquals(false, model.volumeRelocation().relocationRequested());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        VolumePropertiesDataProtection model = new VolumePropertiesDataProtection()
            .withBackup(new VolumeBackupProperties().withBackupPolicyId("fthnzdn")
                .withPolicyEnforced(false)
                .withBackupVaultId("nayqi"))
            .withReplication(new ReplicationObject().withEndpointType(EndpointType.DST)
                .withReplicationSchedule(ReplicationSchedule.HOURLY)
                .withRemoteVolumeResourceId("lbg")
                .withRemotePath(new RemotePath().withExternalHostname("duiertgcc")
                    .withServerName("mvaolps")
                    .withVolumeName("lqlfm"))
                .withRemoteVolumeRegion("n"))
            .withSnapshot(new VolumeSnapshotProperties().withSnapshotPolicyId("hszhedplvwiwu"))
            .withVolumeRelocation(new VolumeRelocationProperties().withRelocationRequested(false));
        model = BinaryData.fromObject(model).toObject(VolumePropertiesDataProtection.class);
        Assertions.assertEquals("fthnzdn", model.backup().backupPolicyId());
        Assertions.assertEquals(false, model.backup().policyEnforced());
        Assertions.assertEquals("nayqi", model.backup().backupVaultId());
        Assertions.assertEquals(EndpointType.DST, model.replication().endpointType());
        Assertions.assertEquals(ReplicationSchedule.HOURLY, model.replication().replicationSchedule());
        Assertions.assertEquals("lbg", model.replication().remoteVolumeResourceId());
        Assertions.assertEquals("duiertgcc", model.replication().remotePath().externalHostname());
        Assertions.assertEquals("mvaolps", model.replication().remotePath().serverName());
        Assertions.assertEquals("lqlfm", model.replication().remotePath().volumeName());
        Assertions.assertEquals("n", model.replication().remoteVolumeRegion());
        Assertions.assertEquals("hszhedplvwiwu", model.snapshot().snapshotPolicyId());
        Assertions.assertEquals(false, model.volumeRelocation().relocationRequested());
    }
}
