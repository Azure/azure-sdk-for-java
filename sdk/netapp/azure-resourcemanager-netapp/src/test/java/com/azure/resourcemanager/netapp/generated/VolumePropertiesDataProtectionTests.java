// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.netapp.models.RemotePath;
import com.azure.resourcemanager.netapp.models.ReplicationObject;
import com.azure.resourcemanager.netapp.models.ReplicationSchedule;
import com.azure.resourcemanager.netapp.models.VolumeBackupProperties;
import com.azure.resourcemanager.netapp.models.VolumePropertiesDataProtection;
import com.azure.resourcemanager.netapp.models.VolumeRelocationProperties;
import com.azure.resourcemanager.netapp.models.VolumeSnapshotProperties;
import org.junit.jupiter.api.Assertions;

public final class VolumePropertiesDataProtectionTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        VolumePropertiesDataProtection model = BinaryData.fromString(
            "{\"backup\":{\"backupPolicyId\":\"vgqzcjrvxd\",\"policyEnforced\":true,\"backupVaultId\":\"wlxkvugfhzovaw\"},\"replication\":{\"replicationId\":\"u\",\"endpointType\":\"dst\",\"replicationSchedule\":\"_10minutely\",\"remoteVolumeResourceId\":\"n\",\"remotePath\":{\"externalHostName\":\"nxipeil\",\"serverName\":\"jzuaejxdultskzbb\",\"volumeName\":\"dzumveekg\"},\"remoteVolumeRegion\":\"ozuhkfp\",\"destinationReplications\":[{\"resourceId\":\"ofd\",\"replicationType\":\"CrossZoneReplication\",\"region\":\"sd\",\"zone\":\"ouwaboekqvkeln\"},{\"resourceId\":\"vbxwyjsflhh\",\"replicationType\":\"CrossRegionReplication\",\"region\":\"n\",\"zone\":\"xisxyawjoyaqcsl\"},{\"resourceId\":\"pkii\",\"replicationType\":\"CrossRegionReplication\",\"region\":\"xznelixhnrztf\",\"zone\":\"hb\"},{\"resourceId\":\"knalaulppg\",\"replicationType\":\"CrossZoneReplication\",\"region\":\"napnyiropuhpigv\",\"zone\":\"ylgqgitxmedjvcsl\"}],\"externalReplicationSetupStatus\":\"ClusterPeerRequired\",\"externalReplicationSetupInfo\":\"wncwzzhxgktrmg\"},\"snapshot\":{\"snapshotPolicyId\":\"apkteoellwptfdyg\"},\"volumeRelocation\":{\"relocationRequested\":false,\"readyToBeFinalized\":false}}")
            .toObject(VolumePropertiesDataProtection.class);
        Assertions.assertEquals("vgqzcjrvxd", model.backup().backupPolicyId());
        Assertions.assertTrue(model.backup().policyEnforced());
        Assertions.assertEquals("wlxkvugfhzovaw", model.backup().backupVaultId());
        Assertions.assertEquals(ReplicationSchedule.ONE_ZEROMINUTELY, model.replication().replicationSchedule());
        Assertions.assertEquals("n", model.replication().remoteVolumeResourceId());
        Assertions.assertEquals("nxipeil", model.replication().remotePath().externalHostname());
        Assertions.assertEquals("jzuaejxdultskzbb", model.replication().remotePath().serverName());
        Assertions.assertEquals("dzumveekg", model.replication().remotePath().volumeName());
        Assertions.assertEquals("ozuhkfp", model.replication().remoteVolumeRegion());
        Assertions.assertEquals("apkteoellwptfdyg", model.snapshot().snapshotPolicyId());
        Assertions.assertFalse(model.volumeRelocation().relocationRequested());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        VolumePropertiesDataProtection model = new VolumePropertiesDataProtection()
            .withBackup(new VolumeBackupProperties().withBackupPolicyId("vgqzcjrvxd")
                .withPolicyEnforced(true)
                .withBackupVaultId("wlxkvugfhzovaw"))
            .withReplication(new ReplicationObject().withReplicationSchedule(ReplicationSchedule.ONE_ZEROMINUTELY)
                .withRemoteVolumeResourceId("n")
                .withRemotePath(new RemotePath().withExternalHostname("nxipeil")
                    .withServerName("jzuaejxdultskzbb")
                    .withVolumeName("dzumveekg"))
                .withRemoteVolumeRegion("ozuhkfp"))
            .withSnapshot(new VolumeSnapshotProperties().withSnapshotPolicyId("apkteoellwptfdyg"))
            .withVolumeRelocation(new VolumeRelocationProperties().withRelocationRequested(false));
        model = BinaryData.fromObject(model).toObject(VolumePropertiesDataProtection.class);
        Assertions.assertEquals("vgqzcjrvxd", model.backup().backupPolicyId());
        Assertions.assertTrue(model.backup().policyEnforced());
        Assertions.assertEquals("wlxkvugfhzovaw", model.backup().backupVaultId());
        Assertions.assertEquals(ReplicationSchedule.ONE_ZEROMINUTELY, model.replication().replicationSchedule());
        Assertions.assertEquals("n", model.replication().remoteVolumeResourceId());
        Assertions.assertEquals("nxipeil", model.replication().remotePath().externalHostname());
        Assertions.assertEquals("jzuaejxdultskzbb", model.replication().remotePath().serverName());
        Assertions.assertEquals("dzumveekg", model.replication().remotePath().volumeName());
        Assertions.assertEquals("ozuhkfp", model.replication().remoteVolumeRegion());
        Assertions.assertEquals("apkteoellwptfdyg", model.snapshot().snapshotPolicyId());
        Assertions.assertFalse(model.volumeRelocation().relocationRequested());
    }
}
