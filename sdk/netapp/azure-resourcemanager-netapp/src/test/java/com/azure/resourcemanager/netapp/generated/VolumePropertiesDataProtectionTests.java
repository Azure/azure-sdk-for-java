// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.netapp.models.EndpointType;
import com.azure.resourcemanager.netapp.models.RemotePath;
import com.azure.resourcemanager.netapp.models.ReplicationObject;
import com.azure.resourcemanager.netapp.models.ReplicationSchedule;
import com.azure.resourcemanager.netapp.models.VolumeBackupProperties;
import com.azure.resourcemanager.netapp.models.VolumePropertiesDataProtection;
import com.azure.resourcemanager.netapp.models.VolumeRelocationProperties;
import com.azure.resourcemanager.netapp.models.VolumeSnapshotProperties;
import org.junit.jupiter.api.Assertions;

public final class VolumePropertiesDataProtectionTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        VolumePropertiesDataProtection model = BinaryData.fromString(
            "{\"backup\":{\"backupPolicyId\":\"dahzxctobg\",\"policyEnforced\":true,\"backupVaultId\":\"oizpostmgrcfbun\"},\"replication\":{\"replicationId\":\"qjhhkxbpv\",\"endpointType\":\"src\",\"replicationSchedule\":\"daily\",\"remoteVolumeResourceId\":\"xjyngudivk\",\"remotePath\":{\"externalHostName\":\"swbxqz\",\"serverName\":\"szjfauvjfdxxivet\",\"volumeName\":\"t\"},\"remoteVolumeRegion\":\"aqtdoqmcbx\",\"destinationReplications\":[{\"resourceId\":\"yslqbhsfx\",\"replicationType\":\"CrossRegionReplication\",\"region\":\"tkblmpewww\",\"zone\":\"krvrns\"},{\"resourceId\":\"hqjohxcrsbfova\",\"replicationType\":\"CrossRegionReplication\",\"region\":\"v\",\"zone\":\"hsqfsubcgjbirxbp\"}]},\"snapshot\":{\"snapshotPolicyId\":\"rfbjf\"},\"volumeRelocation\":{\"relocationRequested\":false,\"readyToBeFinalized\":true}}")
            .toObject(VolumePropertiesDataProtection.class);
        Assertions.assertEquals("dahzxctobg", model.backup().backupPolicyId());
        Assertions.assertEquals(true, model.backup().policyEnforced());
        Assertions.assertEquals("oizpostmgrcfbun", model.backup().backupVaultId());
        Assertions.assertEquals(EndpointType.SRC, model.replication().endpointType());
        Assertions.assertEquals(ReplicationSchedule.DAILY, model.replication().replicationSchedule());
        Assertions.assertEquals("xjyngudivk", model.replication().remoteVolumeResourceId());
        Assertions.assertEquals("swbxqz", model.replication().remotePath().externalHostname());
        Assertions.assertEquals("szjfauvjfdxxivet", model.replication().remotePath().serverName());
        Assertions.assertEquals("t", model.replication().remotePath().volumeName());
        Assertions.assertEquals("aqtdoqmcbx", model.replication().remoteVolumeRegion());
        Assertions.assertEquals("rfbjf", model.snapshot().snapshotPolicyId());
        Assertions.assertEquals(false, model.volumeRelocation().relocationRequested());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        VolumePropertiesDataProtection model = new VolumePropertiesDataProtection()
            .withBackup(new VolumeBackupProperties().withBackupPolicyId("dahzxctobg")
                .withPolicyEnforced(true)
                .withBackupVaultId("oizpostmgrcfbun"))
            .withReplication(new ReplicationObject().withEndpointType(EndpointType.SRC)
                .withReplicationSchedule(ReplicationSchedule.DAILY)
                .withRemoteVolumeResourceId("xjyngudivk")
                .withRemotePath(new RemotePath().withExternalHostname("swbxqz")
                    .withServerName("szjfauvjfdxxivet")
                    .withVolumeName("t"))
                .withRemoteVolumeRegion("aqtdoqmcbx"))
            .withSnapshot(new VolumeSnapshotProperties().withSnapshotPolicyId("rfbjf"))
            .withVolumeRelocation(new VolumeRelocationProperties().withRelocationRequested(false));
        model = BinaryData.fromObject(model).toObject(VolumePropertiesDataProtection.class);
        Assertions.assertEquals("dahzxctobg", model.backup().backupPolicyId());
        Assertions.assertEquals(true, model.backup().policyEnforced());
        Assertions.assertEquals("oizpostmgrcfbun", model.backup().backupVaultId());
        Assertions.assertEquals(EndpointType.SRC, model.replication().endpointType());
        Assertions.assertEquals(ReplicationSchedule.DAILY, model.replication().replicationSchedule());
        Assertions.assertEquals("xjyngudivk", model.replication().remoteVolumeResourceId());
        Assertions.assertEquals("swbxqz", model.replication().remotePath().externalHostname());
        Assertions.assertEquals("szjfauvjfdxxivet", model.replication().remotePath().serverName());
        Assertions.assertEquals("t", model.replication().remotePath().volumeName());
        Assertions.assertEquals("aqtdoqmcbx", model.replication().remoteVolumeRegion());
        Assertions.assertEquals("rfbjf", model.snapshot().snapshotPolicyId());
        Assertions.assertEquals(false, model.volumeRelocation().relocationRequested());
    }
}
