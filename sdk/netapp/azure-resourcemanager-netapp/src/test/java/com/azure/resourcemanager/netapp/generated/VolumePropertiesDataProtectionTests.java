// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.netapp.models.EndpointType;
import com.azure.resourcemanager.netapp.models.RemotePath;
import com.azure.resourcemanager.netapp.models.ReplicationObject;
import com.azure.resourcemanager.netapp.models.ReplicationSchedule;
import com.azure.resourcemanager.netapp.models.VolumeBackupProperties;
import com.azure.resourcemanager.netapp.models.VolumePropertiesDataProtection;
import com.azure.resourcemanager.netapp.models.VolumeRelocationProperties;
import com.azure.resourcemanager.netapp.models.VolumeSnapshotProperties;
import org.junit.jupiter.api.Assertions;

public final class VolumePropertiesDataProtectionTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        VolumePropertiesDataProtection model = BinaryData.fromString(
            "{\"backup\":{\"backupPolicyId\":\"q\",\"policyEnforced\":false,\"backupVaultId\":\"crsbfovasr\"},\"replication\":{\"replicationId\":\"wbhsqfsub\",\"endpointType\":\"src\",\"replicationSchedule\":\"_10minutely\",\"remoteVolumeResourceId\":\"xb\",\"remotePath\":{\"externalHostName\":\"bsrfbj\",\"serverName\":\"dtws\",\"volumeName\":\"otftpvjzbexilz\"},\"remoteVolumeRegion\":\"fqqnvwpmqtaruo\"},\"snapshot\":{\"snapshotPolicyId\":\"kcjhwqytjrybnwj\"},\"volumeRelocation\":{\"relocationRequested\":true,\"readyToBeFinalized\":true}}")
            .toObject(VolumePropertiesDataProtection.class);
        Assertions.assertEquals("q", model.backup().backupPolicyId());
        Assertions.assertEquals(false, model.backup().policyEnforced());
        Assertions.assertEquals("crsbfovasr", model.backup().backupVaultId());
        Assertions.assertEquals(EndpointType.SRC, model.replication().endpointType());
        Assertions.assertEquals(ReplicationSchedule.ONE_ZEROMINUTELY, model.replication().replicationSchedule());
        Assertions.assertEquals("xb", model.replication().remoteVolumeResourceId());
        Assertions.assertEquals("bsrfbj", model.replication().remotePath().externalHostname());
        Assertions.assertEquals("dtws", model.replication().remotePath().serverName());
        Assertions.assertEquals("otftpvjzbexilz", model.replication().remotePath().volumeName());
        Assertions.assertEquals("fqqnvwpmqtaruo", model.replication().remoteVolumeRegion());
        Assertions.assertEquals("kcjhwqytjrybnwj", model.snapshot().snapshotPolicyId());
        Assertions.assertEquals(true, model.volumeRelocation().relocationRequested());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        VolumePropertiesDataProtection model = new VolumePropertiesDataProtection()
            .withBackup(new VolumeBackupProperties().withBackupPolicyId("q")
                .withPolicyEnforced(false)
                .withBackupVaultId("crsbfovasr"))
            .withReplication(new ReplicationObject().withEndpointType(EndpointType.SRC)
                .withReplicationSchedule(ReplicationSchedule.ONE_ZEROMINUTELY)
                .withRemoteVolumeResourceId("xb")
                .withRemotePath(new RemotePath().withExternalHostname("bsrfbj")
                    .withServerName("dtws")
                    .withVolumeName("otftpvjzbexilz"))
                .withRemoteVolumeRegion("fqqnvwpmqtaruo"))
            .withSnapshot(new VolumeSnapshotProperties().withSnapshotPolicyId("kcjhwqytjrybnwj"))
            .withVolumeRelocation(new VolumeRelocationProperties().withRelocationRequested(true));
        model = BinaryData.fromObject(model).toObject(VolumePropertiesDataProtection.class);
        Assertions.assertEquals("q", model.backup().backupPolicyId());
        Assertions.assertEquals(false, model.backup().policyEnforced());
        Assertions.assertEquals("crsbfovasr", model.backup().backupVaultId());
        Assertions.assertEquals(EndpointType.SRC, model.replication().endpointType());
        Assertions.assertEquals(ReplicationSchedule.ONE_ZEROMINUTELY, model.replication().replicationSchedule());
        Assertions.assertEquals("xb", model.replication().remoteVolumeResourceId());
        Assertions.assertEquals("bsrfbj", model.replication().remotePath().externalHostname());
        Assertions.assertEquals("dtws", model.replication().remotePath().serverName());
        Assertions.assertEquals("otftpvjzbexilz", model.replication().remotePath().volumeName());
        Assertions.assertEquals("fqqnvwpmqtaruo", model.replication().remoteVolumeRegion());
        Assertions.assertEquals("kcjhwqytjrybnwj", model.snapshot().snapshotPolicyId());
        Assertions.assertEquals(true, model.volumeRelocation().relocationRequested());
    }
}
