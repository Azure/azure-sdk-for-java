// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.netapp.models.EndpointType;
import com.azure.resourcemanager.netapp.models.ReplicationObject;
import com.azure.resourcemanager.netapp.models.ReplicationSchedule;
import com.azure.resourcemanager.netapp.models.VolumePropertiesDataProtection;
import com.azure.resourcemanager.netapp.models.VolumeRelocationProperties;
import com.azure.resourcemanager.netapp.models.VolumeSnapshotProperties;
import org.junit.jupiter.api.Assertions;

public final class VolumePropertiesDataProtectionTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        VolumePropertiesDataProtection model = BinaryData.fromString(
            "{\"replication\":{\"replicationId\":\"vgqzcjrvxd\",\"endpointType\":\"dst\",\"replicationSchedule\":\"_10minutely\",\"remoteVolumeResourceId\":\"lxkvu\",\"remoteVolumeRegion\":\"hzovawjvzunlut\"},\"snapshot\":{\"snapshotPolicyId\":\"prnxipeil\"},\"volumeRelocation\":{\"relocationRequested\":true,\"readyToBeFinalized\":false}}")
            .toObject(VolumePropertiesDataProtection.class);
        Assertions.assertEquals(EndpointType.DST, model.replication().endpointType());
        Assertions.assertEquals(ReplicationSchedule.ONE_ZEROMINUTELY, model.replication().replicationSchedule());
        Assertions.assertEquals("lxkvu", model.replication().remoteVolumeResourceId());
        Assertions.assertEquals("hzovawjvzunlut", model.replication().remoteVolumeRegion());
        Assertions.assertEquals("prnxipeil", model.snapshot().snapshotPolicyId());
        Assertions.assertEquals(true, model.volumeRelocation().relocationRequested());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        VolumePropertiesDataProtection model = new VolumePropertiesDataProtection()
            .withReplication(new ReplicationObject().withEndpointType(EndpointType.DST)
                .withReplicationSchedule(ReplicationSchedule.ONE_ZEROMINUTELY).withRemoteVolumeResourceId("lxkvu")
                .withRemoteVolumeRegion("hzovawjvzunlut"))
            .withSnapshot(new VolumeSnapshotProperties().withSnapshotPolicyId("prnxipeil"))
            .withVolumeRelocation(new VolumeRelocationProperties().withRelocationRequested(true));
        model = BinaryData.fromObject(model).toObject(VolumePropertiesDataProtection.class);
        Assertions.assertEquals(EndpointType.DST, model.replication().endpointType());
        Assertions.assertEquals(ReplicationSchedule.ONE_ZEROMINUTELY, model.replication().replicationSchedule());
        Assertions.assertEquals("lxkvu", model.replication().remoteVolumeResourceId());
        Assertions.assertEquals("hzovawjvzunlut", model.replication().remoteVolumeRegion());
        Assertions.assertEquals("prnxipeil", model.snapshot().snapshotPolicyId());
        Assertions.assertEquals(true, model.volumeRelocation().relocationRequested());
    }
}
