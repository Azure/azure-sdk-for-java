// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.netapp.models.RemotePath;
import com.azure.resourcemanager.netapp.models.ReplicationObject;
import com.azure.resourcemanager.netapp.models.ReplicationSchedule;
import com.azure.resourcemanager.netapp.models.VolumeBackupProperties;
import com.azure.resourcemanager.netapp.models.VolumePropertiesDataProtection;
import com.azure.resourcemanager.netapp.models.VolumeRelocationProperties;
import com.azure.resourcemanager.netapp.models.VolumeSnapshotProperties;
import org.junit.jupiter.api.Assertions;

public final class VolumePropertiesDataProtectionTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        VolumePropertiesDataProtection model = BinaryData.fromString(
            "{\"backup\":{\"backupPolicyId\":\"bcgjbirxbp\",\"policyEnforced\":true,\"backupVaultId\":\"fbjfdtwssotftpvj\"},\"replication\":{\"replicationId\":\"xilzznf\",\"endpointType\":\"dst\",\"replicationSchedule\":\"hourly\",\"remoteVolumeResourceId\":\"mqtaruoujmkcjh\",\"remotePath\":{\"externalHostName\":\"ytjrybnwjewgdr\",\"serverName\":\"ervnaenqpehi\",\"volumeName\":\"doy\"},\"remoteVolumeRegion\":\"ifthnz\",\"destinationReplications\":[{\"resourceId\":\"l\",\"replicationType\":\"CrossZoneReplication\",\"region\":\"qig\",\"zone\":\"duhavhqlkt\"},{\"resourceId\":\"maqolbgycduie\",\"replicationType\":\"CrossZoneReplication\",\"region\":\"cym\",\"zone\":\"olpsslqlf\"},{\"resourceId\":\"dnbbglzps\",\"replicationType\":\"CrossZoneReplication\",\"region\":\"mcwyhzdxssadb\",\"zone\":\"nvdfznuda\"},{\"resourceId\":\"vxzbncb\",\"replicationType\":\"CrossZoneReplication\",\"region\":\"stdbhhxsrzdzu\",\"zone\":\"rsc\"}]},\"snapshot\":{\"snapshotPolicyId\":\"nevf\"},\"volumeRelocation\":{\"relocationRequested\":true,\"readyToBeFinalized\":true}}")
            .toObject(VolumePropertiesDataProtection.class);
        Assertions.assertEquals("bcgjbirxbp", model.backup().backupPolicyId());
        Assertions.assertTrue(model.backup().policyEnforced());
        Assertions.assertEquals("fbjfdtwssotftpvj", model.backup().backupVaultId());
        Assertions.assertEquals(ReplicationSchedule.HOURLY, model.replication().replicationSchedule());
        Assertions.assertEquals("mqtaruoujmkcjh", model.replication().remoteVolumeResourceId());
        Assertions.assertEquals("ytjrybnwjewgdr", model.replication().remotePath().externalHostname());
        Assertions.assertEquals("ervnaenqpehi", model.replication().remotePath().serverName());
        Assertions.assertEquals("doy", model.replication().remotePath().volumeName());
        Assertions.assertEquals("ifthnz", model.replication().remoteVolumeRegion());
        Assertions.assertEquals("nevf", model.snapshot().snapshotPolicyId());
        Assertions.assertTrue(model.volumeRelocation().relocationRequested());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        VolumePropertiesDataProtection model = new VolumePropertiesDataProtection()
            .withBackup(new VolumeBackupProperties().withBackupPolicyId("bcgjbirxbp")
                .withPolicyEnforced(true)
                .withBackupVaultId("fbjfdtwssotftpvj"))
            .withReplication(new ReplicationObject().withReplicationSchedule(ReplicationSchedule.HOURLY)
                .withRemoteVolumeResourceId("mqtaruoujmkcjh")
                .withRemotePath(new RemotePath().withExternalHostname("ytjrybnwjewgdr")
                    .withServerName("ervnaenqpehi")
                    .withVolumeName("doy"))
                .withRemoteVolumeRegion("ifthnz"))
            .withSnapshot(new VolumeSnapshotProperties().withSnapshotPolicyId("nevf"))
            .withVolumeRelocation(new VolumeRelocationProperties().withRelocationRequested(true));
        model = BinaryData.fromObject(model).toObject(VolumePropertiesDataProtection.class);
        Assertions.assertEquals("bcgjbirxbp", model.backup().backupPolicyId());
        Assertions.assertTrue(model.backup().policyEnforced());
        Assertions.assertEquals("fbjfdtwssotftpvj", model.backup().backupVaultId());
        Assertions.assertEquals(ReplicationSchedule.HOURLY, model.replication().replicationSchedule());
        Assertions.assertEquals("mqtaruoujmkcjh", model.replication().remoteVolumeResourceId());
        Assertions.assertEquals("ytjrybnwjewgdr", model.replication().remotePath().externalHostname());
        Assertions.assertEquals("ervnaenqpehi", model.replication().remotePath().serverName());
        Assertions.assertEquals("doy", model.replication().remotePath().volumeName());
        Assertions.assertEquals("ifthnz", model.replication().remoteVolumeRegion());
        Assertions.assertEquals("nevf", model.snapshot().snapshotPolicyId());
        Assertions.assertTrue(model.volumeRelocation().relocationRequested());
    }
}
