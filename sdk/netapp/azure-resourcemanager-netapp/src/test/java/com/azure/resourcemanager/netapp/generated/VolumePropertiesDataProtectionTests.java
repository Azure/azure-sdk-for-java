// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.netapp.models.EndpointType;
import com.azure.resourcemanager.netapp.models.RemotePath;
import com.azure.resourcemanager.netapp.models.ReplicationObject;
import com.azure.resourcemanager.netapp.models.ReplicationSchedule;
import com.azure.resourcemanager.netapp.models.VolumeBackupProperties;
import com.azure.resourcemanager.netapp.models.VolumePropertiesDataProtection;
import com.azure.resourcemanager.netapp.models.VolumeRelocationProperties;
import com.azure.resourcemanager.netapp.models.VolumeSnapshotProperties;
import org.junit.jupiter.api.Assertions;

public final class VolumePropertiesDataProtectionTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        VolumePropertiesDataProtection model = BinaryData.fromString(
            "{\"backup\":{\"backupPolicyId\":\"cym\",\"policyEnforced\":true,\"backupVaultId\":\"psslqlfmm\"},\"replication\":{\"replicationId\":\"bglzpswi\",\"endpointType\":\"dst\",\"replicationSchedule\":\"hourly\",\"remoteVolumeResourceId\":\"hzdxssadbzm\",\"remotePath\":{\"externalHostName\":\"dfznudaodv\",\"serverName\":\"zbn\",\"volumeName\":\"blylpstdbh\"},\"remoteVolumeRegion\":\"srzdzucerscdn\"},\"snapshot\":{\"snapshotPolicyId\":\"vfiwjmygtdss\"},\"volumeRelocation\":{\"relocationRequested\":true,\"readyToBeFinalized\":true}}")
            .toObject(VolumePropertiesDataProtection.class);
        Assertions.assertEquals("cym", model.backup().backupPolicyId());
        Assertions.assertEquals(true, model.backup().policyEnforced());
        Assertions.assertEquals("psslqlfmm", model.backup().backupVaultId());
        Assertions.assertEquals(EndpointType.DST, model.replication().endpointType());
        Assertions.assertEquals(ReplicationSchedule.HOURLY, model.replication().replicationSchedule());
        Assertions.assertEquals("hzdxssadbzm", model.replication().remoteVolumeResourceId());
        Assertions.assertEquals("dfznudaodv", model.replication().remotePath().externalHostname());
        Assertions.assertEquals("zbn", model.replication().remotePath().serverName());
        Assertions.assertEquals("blylpstdbh", model.replication().remotePath().volumeName());
        Assertions.assertEquals("srzdzucerscdn", model.replication().remoteVolumeRegion());
        Assertions.assertEquals("vfiwjmygtdss", model.snapshot().snapshotPolicyId());
        Assertions.assertEquals(true, model.volumeRelocation().relocationRequested());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        VolumePropertiesDataProtection model = new VolumePropertiesDataProtection()
            .withBackup(new VolumeBackupProperties().withBackupPolicyId("cym")
                .withPolicyEnforced(true)
                .withBackupVaultId("psslqlfmm"))
            .withReplication(new ReplicationObject().withEndpointType(EndpointType.DST)
                .withReplicationSchedule(ReplicationSchedule.HOURLY)
                .withRemoteVolumeResourceId("hzdxssadbzm")
                .withRemotePath(new RemotePath().withExternalHostname("dfznudaodv")
                    .withServerName("zbn")
                    .withVolumeName("blylpstdbh"))
                .withRemoteVolumeRegion("srzdzucerscdn"))
            .withSnapshot(new VolumeSnapshotProperties().withSnapshotPolicyId("vfiwjmygtdss"))
            .withVolumeRelocation(new VolumeRelocationProperties().withRelocationRequested(true));
        model = BinaryData.fromObject(model).toObject(VolumePropertiesDataProtection.class);
        Assertions.assertEquals("cym", model.backup().backupPolicyId());
        Assertions.assertEquals(true, model.backup().policyEnforced());
        Assertions.assertEquals("psslqlfmm", model.backup().backupVaultId());
        Assertions.assertEquals(EndpointType.DST, model.replication().endpointType());
        Assertions.assertEquals(ReplicationSchedule.HOURLY, model.replication().replicationSchedule());
        Assertions.assertEquals("hzdxssadbzm", model.replication().remoteVolumeResourceId());
        Assertions.assertEquals("dfznudaodv", model.replication().remotePath().externalHostname());
        Assertions.assertEquals("zbn", model.replication().remotePath().serverName());
        Assertions.assertEquals("blylpstdbh", model.replication().remotePath().volumeName());
        Assertions.assertEquals("srzdzucerscdn", model.replication().remoteVolumeRegion());
        Assertions.assertEquals("vfiwjmygtdss", model.snapshot().snapshotPolicyId());
        Assertions.assertEquals(true, model.volumeRelocation().relocationRequested());
    }
}
