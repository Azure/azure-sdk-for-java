// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.netapp.fluent.models.SubvolumeModelInner;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;

public final class SubvolumeModelInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SubvolumeModelInner model = BinaryData.fromString(
            "{\"id\":\"yklyhpluodpvruud\",\"name\":\"zibt\",\"type\":\"stgktst\",\"properties\":{\"path\":\"eclze\",\"parentPath\":\"bcvhzlhpl\",\"size\":4639837566947642597,\"bytesUsed\":7621126373333808650,\"permissions\":\"qfbumlkxtrqjf\",\"creationTimeStamp\":\"2021-09-13T05:47Z\",\"accessedTimeStamp\":\"2021-09-19T15:04:58Z\",\"modifiedTimeStamp\":\"2021-04-24T16:12:25Z\",\"changedTimeStamp\":\"2021-03-23T13:40:47Z\",\"provisioningState\":\"fwsrtawcoezbrhu\"}}")
            .toObject(SubvolumeModelInner.class);
        Assertions.assertEquals("eclze", model.path());
        Assertions.assertEquals("bcvhzlhpl", model.parentPath());
        Assertions.assertEquals(4639837566947642597L, model.size());
        Assertions.assertEquals(7621126373333808650L, model.bytesUsed());
        Assertions.assertEquals("qfbumlkxtrqjf", model.permissions());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-13T05:47Z"), model.creationTimestamp());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-19T15:04:58Z"), model.accessedTimestamp());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-24T16:12:25Z"), model.modifiedTimestamp());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-23T13:40:47Z"), model.changedTimestamp());
        Assertions.assertEquals("fwsrtawcoezbrhu", model.provisioningState());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SubvolumeModelInner model = new SubvolumeModelInner().withPath("eclze")
            .withParentPath("bcvhzlhpl")
            .withSize(4639837566947642597L)
            .withBytesUsed(7621126373333808650L)
            .withPermissions("qfbumlkxtrqjf")
            .withCreationTimestamp(OffsetDateTime.parse("2021-09-13T05:47Z"))
            .withAccessedTimestamp(OffsetDateTime.parse("2021-09-19T15:04:58Z"))
            .withModifiedTimestamp(OffsetDateTime.parse("2021-04-24T16:12:25Z"))
            .withChangedTimestamp(OffsetDateTime.parse("2021-03-23T13:40:47Z"))
            .withProvisioningState("fwsrtawcoezbrhu");
        model = BinaryData.fromObject(model).toObject(SubvolumeModelInner.class);
        Assertions.assertEquals("eclze", model.path());
        Assertions.assertEquals("bcvhzlhpl", model.parentPath());
        Assertions.assertEquals(4639837566947642597L, model.size());
        Assertions.assertEquals(7621126373333808650L, model.bytesUsed());
        Assertions.assertEquals("qfbumlkxtrqjf", model.permissions());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-13T05:47Z"), model.creationTimestamp());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-19T15:04:58Z"), model.accessedTimestamp());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-24T16:12:25Z"), model.modifiedTimestamp());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-23T13:40:47Z"), model.changedTimestamp());
        Assertions.assertEquals("fwsrtawcoezbrhu", model.provisioningState());
    }
}
