// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.netapp.fluent.models.SubvolumeModelInner;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;

public final class SubvolumeModelInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SubvolumeModelInner model = BinaryData.fromString(
            "{\"id\":\"cwrwfs\",\"name\":\"fnynszqujizdvoqy\",\"type\":\"byowbblgyavutp\",\"properties\":{\"path\":\"oxoismsksbpim\",\"parentPath\":\"oljxkcgx\",\"size\":1099091758856498635,\"bytesUsed\":5824973782109910502,\"permissions\":\"vizqzdwl\",\"creationTimeStamp\":\"2021-04-04T23:05:36Z\",\"accessedTimeStamp\":\"2021-03-22T22:39:30Z\",\"modifiedTimeStamp\":\"2021-10-25T23:33:10Z\",\"changedTimeStamp\":\"2021-11-27T21:02:31Z\",\"provisioningState\":\"bkjubdyhgkfmins\"}}")
            .toObject(SubvolumeModelInner.class);
        Assertions.assertEquals("oxoismsksbpim", model.path());
        Assertions.assertEquals("oljxkcgx", model.parentPath());
        Assertions.assertEquals(1099091758856498635L, model.size());
        Assertions.assertEquals(5824973782109910502L, model.bytesUsed());
        Assertions.assertEquals("vizqzdwl", model.permissions());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-04T23:05:36Z"), model.creationTimestamp());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-22T22:39:30Z"), model.accessedTimestamp());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-25T23:33:10Z"), model.modifiedTimestamp());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-27T21:02:31Z"), model.changedTimestamp());
        Assertions.assertEquals("bkjubdyhgkfmins", model.provisioningState());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SubvolumeModelInner model = new SubvolumeModelInner().withPath("oxoismsksbpim")
            .withParentPath("oljxkcgx")
            .withSize(1099091758856498635L)
            .withBytesUsed(5824973782109910502L)
            .withPermissions("vizqzdwl")
            .withCreationTimestamp(OffsetDateTime.parse("2021-04-04T23:05:36Z"))
            .withAccessedTimestamp(OffsetDateTime.parse("2021-03-22T22:39:30Z"))
            .withModifiedTimestamp(OffsetDateTime.parse("2021-10-25T23:33:10Z"))
            .withChangedTimestamp(OffsetDateTime.parse("2021-11-27T21:02:31Z"))
            .withProvisioningState("bkjubdyhgkfmins");
        model = BinaryData.fromObject(model).toObject(SubvolumeModelInner.class);
        Assertions.assertEquals("oxoismsksbpim", model.path());
        Assertions.assertEquals("oljxkcgx", model.parentPath());
        Assertions.assertEquals(1099091758856498635L, model.size());
        Assertions.assertEquals(5824973782109910502L, model.bytesUsed());
        Assertions.assertEquals("vizqzdwl", model.permissions());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-04T23:05:36Z"), model.creationTimestamp());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-22T22:39:30Z"), model.accessedTimestamp());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-25T23:33:10Z"), model.modifiedTimestamp());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-27T21:02:31Z"), model.changedTimestamp());
        Assertions.assertEquals("bkjubdyhgkfmins", model.provisioningState());
    }
}
