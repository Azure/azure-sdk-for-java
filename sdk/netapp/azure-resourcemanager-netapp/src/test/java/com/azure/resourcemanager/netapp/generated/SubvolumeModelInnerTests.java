// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.netapp.fluent.models.SubvolumeModelInner;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;

public final class SubvolumeModelInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SubvolumeModelInner model = BinaryData.fromString(
            "{\"id\":\"nxkrlgnyhmossxkk\",\"name\":\"h\",\"type\":\"gh\",\"properties\":{\"path\":\"dhqxvcx\",\"parentPath\":\"rpdsof\",\"size\":8026332849436071798,\"bytesUsed\":2775360292908899149,\"permissions\":\"uswdv\",\"creationTimeStamp\":\"2021-07-28T13:53:22Z\",\"accessedTimeStamp\":\"2021-02-22T05:56:13Z\",\"modifiedTimeStamp\":\"2021-04-06T20:50:40Z\",\"changedTimeStamp\":\"2021-03-14T19:09:50Z\",\"provisioningState\":\"jsrtk\"}}")
            .toObject(SubvolumeModelInner.class);
        Assertions.assertEquals("dhqxvcx", model.path());
        Assertions.assertEquals("rpdsof", model.parentPath());
        Assertions.assertEquals(8026332849436071798L, model.size());
        Assertions.assertEquals(2775360292908899149L, model.bytesUsed());
        Assertions.assertEquals("uswdv", model.permissions());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-28T13:53:22Z"), model.creationTimestamp());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-22T05:56:13Z"), model.accessedTimestamp());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-06T20:50:40Z"), model.modifiedTimestamp());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-14T19:09:50Z"), model.changedTimestamp());
        Assertions.assertEquals("jsrtk", model.provisioningState());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SubvolumeModelInner model = new SubvolumeModelInner().withPath("dhqxvcx")
            .withParentPath("rpdsof")
            .withSize(8026332849436071798L)
            .withBytesUsed(2775360292908899149L)
            .withPermissions("uswdv")
            .withCreationTimestamp(OffsetDateTime.parse("2021-07-28T13:53:22Z"))
            .withAccessedTimestamp(OffsetDateTime.parse("2021-02-22T05:56:13Z"))
            .withModifiedTimestamp(OffsetDateTime.parse("2021-04-06T20:50:40Z"))
            .withChangedTimestamp(OffsetDateTime.parse("2021-03-14T19:09:50Z"))
            .withProvisioningState("jsrtk");
        model = BinaryData.fromObject(model).toObject(SubvolumeModelInner.class);
        Assertions.assertEquals("dhqxvcx", model.path());
        Assertions.assertEquals("rpdsof", model.parentPath());
        Assertions.assertEquals(8026332849436071798L, model.size());
        Assertions.assertEquals(2775360292908899149L, model.bytesUsed());
        Assertions.assertEquals("uswdv", model.permissions());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-28T13:53:22Z"), model.creationTimestamp());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-22T05:56:13Z"), model.accessedTimestamp());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-06T20:50:40Z"), model.modifiedTimestamp());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-14T19:09:50Z"), model.changedTimestamp());
        Assertions.assertEquals("jsrtk", model.provisioningState());
    }
}
