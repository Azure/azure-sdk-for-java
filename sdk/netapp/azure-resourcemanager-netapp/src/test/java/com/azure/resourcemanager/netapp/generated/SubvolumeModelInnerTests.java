// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.netapp.fluent.models.SubvolumeModelInner;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;

public final class SubvolumeModelInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SubvolumeModelInner model = BinaryData.fromString(
            "{\"id\":\"gioilqu\",\"name\":\"ydxtqm\",\"type\":\"ox\",\"properties\":{\"path\":\"gufhyaomtbg\",\"parentPath\":\"avgrvkffovjz\",\"size\":5645922877678061686,\"bytesUsed\":2314195344847215175,\"permissions\":\"mfxumvfcluyovw\",\"creationTimeStamp\":\"2021-07-15T13:35:55Z\",\"accessedTimeStamp\":\"2021-04-25T08:04:37Z\",\"modifiedTimeStamp\":\"2021-01-15T15:47:25Z\",\"changedTimeStamp\":\"2021-12-07T02:03:19Z\",\"provisioningState\":\"yhwzdgiruj\"}}")
            .toObject(SubvolumeModelInner.class);
        Assertions.assertEquals("gufhyaomtbg", model.path());
        Assertions.assertEquals("avgrvkffovjz", model.parentPath());
        Assertions.assertEquals(5645922877678061686L, model.size());
        Assertions.assertEquals(2314195344847215175L, model.bytesUsed());
        Assertions.assertEquals("mfxumvfcluyovw", model.permissions());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-15T13:35:55Z"), model.creationTimestamp());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-25T08:04:37Z"), model.accessedTimestamp());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-15T15:47:25Z"), model.modifiedTimestamp());
        Assertions.assertEquals(OffsetDateTime.parse("2021-12-07T02:03:19Z"), model.changedTimestamp());
        Assertions.assertEquals("yhwzdgiruj", model.provisioningState());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SubvolumeModelInner model = new SubvolumeModelInner().withPath("gufhyaomtbg")
            .withParentPath("avgrvkffovjz")
            .withSize(5645922877678061686L)
            .withBytesUsed(2314195344847215175L)
            .withPermissions("mfxumvfcluyovw")
            .withCreationTimestamp(OffsetDateTime.parse("2021-07-15T13:35:55Z"))
            .withAccessedTimestamp(OffsetDateTime.parse("2021-04-25T08:04:37Z"))
            .withModifiedTimestamp(OffsetDateTime.parse("2021-01-15T15:47:25Z"))
            .withChangedTimestamp(OffsetDateTime.parse("2021-12-07T02:03:19Z"))
            .withProvisioningState("yhwzdgiruj");
        model = BinaryData.fromObject(model).toObject(SubvolumeModelInner.class);
        Assertions.assertEquals("gufhyaomtbg", model.path());
        Assertions.assertEquals("avgrvkffovjz", model.parentPath());
        Assertions.assertEquals(5645922877678061686L, model.size());
        Assertions.assertEquals(2314195344847215175L, model.bytesUsed());
        Assertions.assertEquals("mfxumvfcluyovw", model.permissions());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-15T13:35:55Z"), model.creationTimestamp());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-25T08:04:37Z"), model.accessedTimestamp());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-15T15:47:25Z"), model.modifiedTimestamp());
        Assertions.assertEquals(OffsetDateTime.parse("2021-12-07T02:03:19Z"), model.changedTimestamp());
        Assertions.assertEquals("yhwzdgiruj", model.provisioningState());
    }
}
