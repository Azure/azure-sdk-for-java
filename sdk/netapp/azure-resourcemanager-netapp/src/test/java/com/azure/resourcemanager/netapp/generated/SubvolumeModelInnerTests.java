// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.netapp.fluent.models.SubvolumeModelInner;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;

public final class SubvolumeModelInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SubvolumeModelInner model = BinaryData.fromString(
            "{\"id\":\"xmrhu\",\"name\":\"wp\",\"type\":\"sutrgjup\",\"properties\":{\"path\":\"tpwoqhihejq\",\"parentPath\":\"zpnfqntcypsxj\",\"size\":1949293716771945472,\"bytesUsed\":6047137828551232297,\"permissions\":\"lirc\",\"creationTimeStamp\":\"2021-07-08T14:21:01Z\",\"accessedTimeStamp\":\"2021-11-01T05:11:39Z\",\"modifiedTimeStamp\":\"2021-01-08T09:26:16Z\",\"changedTimeStamp\":\"2021-07-27T07:50:33Z\",\"provisioningState\":\"acvlhv\"}}")
            .toObject(SubvolumeModelInner.class);
        Assertions.assertEquals("tpwoqhihejq", model.path());
        Assertions.assertEquals("zpnfqntcypsxj", model.parentPath());
        Assertions.assertEquals(1949293716771945472L, model.size());
        Assertions.assertEquals(6047137828551232297L, model.bytesUsed());
        Assertions.assertEquals("lirc", model.permissions());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-08T14:21:01Z"), model.creationTimestamp());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-01T05:11:39Z"), model.accessedTimestamp());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-08T09:26:16Z"), model.modifiedTimestamp());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-27T07:50:33Z"), model.changedTimestamp());
        Assertions.assertEquals("acvlhv", model.provisioningState());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SubvolumeModelInner model = new SubvolumeModelInner().withPath("tpwoqhihejq")
            .withParentPath("zpnfqntcypsxj")
            .withSize(1949293716771945472L)
            .withBytesUsed(6047137828551232297L)
            .withPermissions("lirc")
            .withCreationTimestamp(OffsetDateTime.parse("2021-07-08T14:21:01Z"))
            .withAccessedTimestamp(OffsetDateTime.parse("2021-11-01T05:11:39Z"))
            .withModifiedTimestamp(OffsetDateTime.parse("2021-01-08T09:26:16Z"))
            .withChangedTimestamp(OffsetDateTime.parse("2021-07-27T07:50:33Z"))
            .withProvisioningState("acvlhv");
        model = BinaryData.fromObject(model).toObject(SubvolumeModelInner.class);
        Assertions.assertEquals("tpwoqhihejq", model.path());
        Assertions.assertEquals("zpnfqntcypsxj", model.parentPath());
        Assertions.assertEquals(1949293716771945472L, model.size());
        Assertions.assertEquals(6047137828551232297L, model.bytesUsed());
        Assertions.assertEquals("lirc", model.permissions());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-08T14:21:01Z"), model.creationTimestamp());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-01T05:11:39Z"), model.accessedTimestamp());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-08T09:26:16Z"), model.modifiedTimestamp());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-27T07:50:33Z"), model.changedTimestamp());
        Assertions.assertEquals("acvlhv", model.provisioningState());
    }
}
