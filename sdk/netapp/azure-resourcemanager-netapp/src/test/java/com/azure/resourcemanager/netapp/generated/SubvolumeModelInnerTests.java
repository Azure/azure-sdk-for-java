// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.netapp.fluent.models.SubvolumeModelInner;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;

public final class SubvolumeModelInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SubvolumeModelInner model = BinaryData.fromString(
            "{\"id\":\"klvxwmyg\",\"name\":\"pgpqchiszepnnb\",\"type\":\"rxgibbd\",\"properties\":{\"path\":\"onfo\",\"parentPath\":\"uors\",\"size\":8150670572969062689,\"bytesUsed\":5619179077709143106,\"permissions\":\"lhlv\",\"creationTimeStamp\":\"2021-01-24T14:33:20Z\",\"accessedTimeStamp\":\"2021-08-29T14:02:44Z\",\"modifiedTimeStamp\":\"2021-05-23T19:05:13Z\",\"changedTimeStamp\":\"2021-03-16T20:13:21Z\",\"provisioningState\":\"wzsoldweyuqdunv\"}}")
            .toObject(SubvolumeModelInner.class);
        Assertions.assertEquals("onfo", model.path());
        Assertions.assertEquals("uors", model.parentPath());
        Assertions.assertEquals(8150670572969062689L, model.size());
        Assertions.assertEquals(5619179077709143106L, model.bytesUsed());
        Assertions.assertEquals("lhlv", model.permissions());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-24T14:33:20Z"), model.creationTimestamp());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-29T14:02:44Z"), model.accessedTimestamp());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-23T19:05:13Z"), model.modifiedTimestamp());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-16T20:13:21Z"), model.changedTimestamp());
        Assertions.assertEquals("wzsoldweyuqdunv", model.provisioningState());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SubvolumeModelInner model = new SubvolumeModelInner().withPath("onfo")
            .withParentPath("uors")
            .withSize(8150670572969062689L)
            .withBytesUsed(5619179077709143106L)
            .withPermissions("lhlv")
            .withCreationTimestamp(OffsetDateTime.parse("2021-01-24T14:33:20Z"))
            .withAccessedTimestamp(OffsetDateTime.parse("2021-08-29T14:02:44Z"))
            .withModifiedTimestamp(OffsetDateTime.parse("2021-05-23T19:05:13Z"))
            .withChangedTimestamp(OffsetDateTime.parse("2021-03-16T20:13:21Z"))
            .withProvisioningState("wzsoldweyuqdunv");
        model = BinaryData.fromObject(model).toObject(SubvolumeModelInner.class);
        Assertions.assertEquals("onfo", model.path());
        Assertions.assertEquals("uors", model.parentPath());
        Assertions.assertEquals(8150670572969062689L, model.size());
        Assertions.assertEquals(5619179077709143106L, model.bytesUsed());
        Assertions.assertEquals("lhlv", model.permissions());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-24T14:33:20Z"), model.creationTimestamp());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-29T14:02:44Z"), model.accessedTimestamp());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-23T19:05:13Z"), model.modifiedTimestamp());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-16T20:13:21Z"), model.changedTimestamp());
        Assertions.assertEquals("wzsoldweyuqdunv", model.provisioningState());
    }
}
