// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.netapp.fluent.models.SubvolumeModelInner;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;

public final class SubvolumeModelInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SubvolumeModelInner model = BinaryData.fromString(
            "{\"id\":\"pwoqo\",\"name\":\"acjekni\",\"type\":\"hqvcimpevfgmblr\",\"properties\":{\"path\":\"bywdxsmicc\",\"parentPath\":\"wfscjfn\",\"size\":3356941705017248900,\"bytesUsed\":3993016236836672672,\"permissions\":\"zdvoqytibyowbb\",\"creationTimeStamp\":\"2021-04-29T06:10:08Z\",\"accessedTimeStamp\":\"2021-02-16T13:24:10Z\",\"modifiedTimeStamp\":\"2021-11-21T21:14:42Z\",\"changedTimeStamp\":\"2021-11-26T06:56:03Z\",\"provisioningState\":\"joxoism\"}}")
            .toObject(SubvolumeModelInner.class);
        Assertions.assertEquals("bywdxsmicc", model.path());
        Assertions.assertEquals("wfscjfn", model.parentPath());
        Assertions.assertEquals(3356941705017248900L, model.size());
        Assertions.assertEquals(3993016236836672672L, model.bytesUsed());
        Assertions.assertEquals("zdvoqytibyowbb", model.permissions());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-29T06:10:08Z"), model.creationTimestamp());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-16T13:24:10Z"), model.accessedTimestamp());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-21T21:14:42Z"), model.modifiedTimestamp());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-26T06:56:03Z"), model.changedTimestamp());
        Assertions.assertEquals("joxoism", model.provisioningState());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SubvolumeModelInner model = new SubvolumeModelInner().withPath("bywdxsmicc")
            .withParentPath("wfscjfn")
            .withSize(3356941705017248900L)
            .withBytesUsed(3993016236836672672L)
            .withPermissions("zdvoqytibyowbb")
            .withCreationTimestamp(OffsetDateTime.parse("2021-04-29T06:10:08Z"))
            .withAccessedTimestamp(OffsetDateTime.parse("2021-02-16T13:24:10Z"))
            .withModifiedTimestamp(OffsetDateTime.parse("2021-11-21T21:14:42Z"))
            .withChangedTimestamp(OffsetDateTime.parse("2021-11-26T06:56:03Z"))
            .withProvisioningState("joxoism");
        model = BinaryData.fromObject(model).toObject(SubvolumeModelInner.class);
        Assertions.assertEquals("bywdxsmicc", model.path());
        Assertions.assertEquals("wfscjfn", model.parentPath());
        Assertions.assertEquals(3356941705017248900L, model.size());
        Assertions.assertEquals(3993016236836672672L, model.bytesUsed());
        Assertions.assertEquals("zdvoqytibyowbb", model.permissions());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-29T06:10:08Z"), model.creationTimestamp());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-16T13:24:10Z"), model.accessedTimestamp());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-21T21:14:42Z"), model.modifiedTimestamp());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-26T06:56:03Z"), model.changedTimestamp());
        Assertions.assertEquals("joxoism", model.provisioningState());
    }
}
