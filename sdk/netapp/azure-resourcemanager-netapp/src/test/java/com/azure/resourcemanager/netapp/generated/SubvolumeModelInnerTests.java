// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.netapp.fluent.models.SubvolumeModelInner;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;

public final class SubvolumeModelInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SubvolumeModelInner model = BinaryData.fromString(
            "{\"id\":\"sutrgjup\",\"name\":\"utpwoqhihejqgw\",\"type\":\"nfqn\",\"properties\":{\"path\":\"psxjvf\",\"parentPath\":\"mwks\",\"size\":139453520421525767,\"bytesUsed\":1648418859978390426,\"permissions\":\"vydfceacvlhvygdy\",\"creationTimeStamp\":\"2021-04-02T04:25:09Z\",\"accessedTimeStamp\":\"2021-04-26T02:40:30Z\",\"modifiedTimeStamp\":\"2021-01-27T11:41:35Z\",\"changedTimeStamp\":\"2021-05-06T02:12:21Z\",\"provisioningState\":\"jslb\"}}")
            .toObject(SubvolumeModelInner.class);
        Assertions.assertEquals("psxjvf", model.path());
        Assertions.assertEquals("mwks", model.parentPath());
        Assertions.assertEquals(139453520421525767L, model.size());
        Assertions.assertEquals(1648418859978390426L, model.bytesUsed());
        Assertions.assertEquals("vydfceacvlhvygdy", model.permissions());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-02T04:25:09Z"), model.creationTimestamp());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-26T02:40:30Z"), model.accessedTimestamp());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-27T11:41:35Z"), model.modifiedTimestamp());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-06T02:12:21Z"), model.changedTimestamp());
        Assertions.assertEquals("jslb", model.provisioningState());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SubvolumeModelInner model = new SubvolumeModelInner().withPath("psxjvf")
            .withParentPath("mwks")
            .withSize(139453520421525767L)
            .withBytesUsed(1648418859978390426L)
            .withPermissions("vydfceacvlhvygdy")
            .withCreationTimestamp(OffsetDateTime.parse("2021-04-02T04:25:09Z"))
            .withAccessedTimestamp(OffsetDateTime.parse("2021-04-26T02:40:30Z"))
            .withModifiedTimestamp(OffsetDateTime.parse("2021-01-27T11:41:35Z"))
            .withChangedTimestamp(OffsetDateTime.parse("2021-05-06T02:12:21Z"))
            .withProvisioningState("jslb");
        model = BinaryData.fromObject(model).toObject(SubvolumeModelInner.class);
        Assertions.assertEquals("psxjvf", model.path());
        Assertions.assertEquals("mwks", model.parentPath());
        Assertions.assertEquals(139453520421525767L, model.size());
        Assertions.assertEquals(1648418859978390426L, model.bytesUsed());
        Assertions.assertEquals("vydfceacvlhvygdy", model.permissions());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-02T04:25:09Z"), model.creationTimestamp());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-26T02:40:30Z"), model.accessedTimestamp());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-27T11:41:35Z"), model.modifiedTimestamp());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-06T02:12:21Z"), model.changedTimestamp());
        Assertions.assertEquals("jslb", model.provisioningState());
    }
}
