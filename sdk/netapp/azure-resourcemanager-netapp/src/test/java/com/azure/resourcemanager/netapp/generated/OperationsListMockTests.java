// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.netapp.NetAppFilesManager;
import com.azure.resourcemanager.netapp.models.MetricAggregationType;
import com.azure.resourcemanager.netapp.models.Operation;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class OperationsListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"name\":\"gy\",\"display\":{\"provider\":\"fbylyrfg\",\"resource\":\"gtcojocqwo\",\"operation\":\"nzjvusfzldm\",\"description\":\"uxylfsbtkadpy\"},\"origin\":\"wn\",\"properties\":{\"serviceSpecification\":{\"metricSpecifications\":[{\"name\":\"grjqctojcmi\",\"displayName\":\"fieypefojyqdhcup\",\"displayDescription\":\"plcwkhi\",\"unit\":\"hlhzdsqtzbsrgno\",\"supportedAggregationTypes\":[\"Average\"],\"supportedTimeGrainTypes\":[\"mvec\",\"ctxmwoteyowcluq\",\"vekqvgqo\"],\"internalMetricName\":\"ifzmpjwyivqi\",\"enableRegionalMdmAccount\":false,\"sourceMdmAccount\":\"vhrfsphuagrt\",\"sourceMdmNamespace\":\"kteusqczk\",\"dimensions\":[{},{}],\"aggregationType\":\"xubyjaffmmfblcqc\",\"fillGapWithZero\":false,\"category\":\"qibrtalme\",\"resourceIdDimensionNameOverride\":\"t\",\"isInternal\":true},{\"name\":\"lqxihhrmooiz\",\"displayName\":\"eypxiutcxapzhyr\",\"displayDescription\":\"togebjoxsl\",\"unit\":\"nhl\",\"supportedAggregationTypes\":[\"Average\",\"Average\",\"Average\"],\"supportedTimeGrainTypes\":[\"jcjbt\",\"gaehvvibrxjjst\"],\"internalMetricName\":\"beitpkx\",\"enableRegionalMdmAccount\":false,\"sourceMdmAccount\":\"ob\",\"sourceMdmNamespace\":\"ft\",\"dimensions\":[{},{},{},{}],\"aggregationType\":\"cwq\",\"fillGapWithZero\":false,\"category\":\"aqxzhemjyho\",\"resourceIdDimensionNameOverride\":\"jswtwkozzwc\",\"isInternal\":false}],\"logSpecifications\":[{\"name\":\"pfajnjwltlwtjj\",\"displayName\":\"ktalhsnvkcdmxz\"},{\"name\":\"oaimlnw\",\"displayName\":\"aomylwea\"},{\"name\":\"lcsethwwnpj\",\"displayName\":\"fz\"},{\"name\":\"pchwa\",\"displayName\":\"bousn\"}]}}}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        NetAppFilesManager manager = NetAppFilesManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<Operation> response = manager.operations().list(com.azure.core.util.Context.NONE);

        Assertions.assertEquals("gy", response.iterator().next().name());
        Assertions.assertEquals("fbylyrfg", response.iterator().next().display().provider());
        Assertions.assertEquals("gtcojocqwo", response.iterator().next().display().resource());
        Assertions.assertEquals("nzjvusfzldm", response.iterator().next().display().operation());
        Assertions.assertEquals("uxylfsbtkadpy", response.iterator().next().display().description());
        Assertions.assertEquals("wn", response.iterator().next().origin());
        Assertions.assertEquals("grjqctojcmi",
            response.iterator().next().serviceSpecification().metricSpecifications().get(0).name());
        Assertions.assertEquals("fieypefojyqdhcup",
            response.iterator().next().serviceSpecification().metricSpecifications().get(0).displayName());
        Assertions.assertEquals("plcwkhi",
            response.iterator().next().serviceSpecification().metricSpecifications().get(0).displayDescription());
        Assertions.assertEquals("hlhzdsqtzbsrgno",
            response.iterator().next().serviceSpecification().metricSpecifications().get(0).unit());
        Assertions.assertEquals(MetricAggregationType.AVERAGE,
            response.iterator()
                .next()
                .serviceSpecification()
                .metricSpecifications()
                .get(0)
                .supportedAggregationTypes()
                .get(0));
        Assertions.assertEquals("mvec",
            response.iterator()
                .next()
                .serviceSpecification()
                .metricSpecifications()
                .get(0)
                .supportedTimeGrainTypes()
                .get(0));
        Assertions.assertEquals("ifzmpjwyivqi",
            response.iterator().next().serviceSpecification().metricSpecifications().get(0).internalMetricName());
        Assertions.assertEquals(false,
            response.iterator().next().serviceSpecification().metricSpecifications().get(0).enableRegionalMdmAccount());
        Assertions.assertEquals("vhrfsphuagrt",
            response.iterator().next().serviceSpecification().metricSpecifications().get(0).sourceMdmAccount());
        Assertions.assertEquals("kteusqczk",
            response.iterator().next().serviceSpecification().metricSpecifications().get(0).sourceMdmNamespace());
        Assertions.assertEquals("xubyjaffmmfblcqc",
            response.iterator().next().serviceSpecification().metricSpecifications().get(0).aggregationType());
        Assertions.assertEquals(false,
            response.iterator().next().serviceSpecification().metricSpecifications().get(0).fillGapWithZero());
        Assertions.assertEquals("qibrtalme",
            response.iterator().next().serviceSpecification().metricSpecifications().get(0).category());
        Assertions.assertEquals("t",
            response.iterator()
                .next()
                .serviceSpecification()
                .metricSpecifications()
                .get(0)
                .resourceIdDimensionNameOverride());
        Assertions.assertEquals(true,
            response.iterator().next().serviceSpecification().metricSpecifications().get(0).isInternal());
        Assertions.assertEquals("pfajnjwltlwtjj",
            response.iterator().next().serviceSpecification().logSpecifications().get(0).name());
        Assertions.assertEquals("ktalhsnvkcdmxz",
            response.iterator().next().serviceSpecification().logSpecifications().get(0).displayName());
    }
}
