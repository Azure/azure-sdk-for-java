// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.netapp.NetAppFilesManager;
import com.azure.resourcemanager.netapp.models.MetricAggregationType;
import com.azure.resourcemanager.netapp.models.Operation;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class OperationsListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"name\":\"qqfkuv\",\"display\":{\"provider\":\"kdmligovi\",\"resource\":\"xk\",\"operation\":\"loazuruocbgoo\",\"description\":\"te\"},\"origin\":\"bfhjxakvvjgsl\",\"properties\":{\"serviceSpecification\":{\"metricSpecifications\":[{\"name\":\"yw\",\"displayName\":\"kgkxn\",\"displayDescription\":\"dabg\",\"unit\":\"udtjuewbc\",\"supportedAggregationTypes\":[\"Average\",\"Average\"],\"supportedTimeGrainTypes\":[\"c\",\"yxccyb\"],\"internalMetricName\":\"ayakkudzpx\",\"enableRegionalMdmAccount\":true,\"sourceMdmAccount\":\"lma\",\"sourceMdmNamespace\":\"tcyohpfkyrk\",\"dimensions\":[{}],\"aggregationType\":\"iogsjkmnwq\",\"fillGapWithZero\":true,\"category\":\"aiy\",\"resourceIdDimensionNameOverride\":\"d\",\"isInternal\":true},{\"name\":\"egfnmntfpmvmemfn\",\"displayName\":\"dwvvba\",\"displayDescription\":\"lllchpodb\",\"unit\":\"vwrdnhfukuvsj\",\"supportedAggregationTypes\":[\"Average\",\"Average\",\"Average\",\"Average\"],\"supportedTimeGrainTypes\":[\"luqypfcvlerch\",\"qbmfpjbabwidf\"],\"internalMetricName\":\"sspuunnoxyhkx\",\"enableRegionalMdmAccount\":false,\"sourceMdmAccount\":\"rihpfhoq\",\"sourceMdmNamespace\":\"a\",\"dimensions\":[{}],\"aggregationType\":\"omdjvlpjxxkzbrm\",\"fillGapWithZero\":true,\"category\":\"vsiykzkdncjdxon\",\"resourceIdDimensionNameOverride\":\"oggculapz\",\"isInternal\":true},{\"name\":\"gogtqxepnylbf\",\"displayName\":\"jlyjtlvofq\",\"displayDescription\":\"vfcibyfmowux\",\"unit\":\"jpvd\",\"supportedAggregationTypes\":[\"Average\",\"Average\",\"Average\",\"Average\"],\"supportedTimeGrainTypes\":[\"zjb\",\"yzsxjrkambtrne\"],\"internalMetricName\":\"mnvuqe\",\"enableRegionalMdmAccount\":false,\"sourceMdmAccount\":\"spastjbkkdmf\",\"sourceMdmNamespace\":\"est\",\"dimensions\":[{}],\"aggregationType\":\"rriloz\",\"fillGapWithZero\":true,\"category\":\"wchpxlk\",\"resourceIdDimensionNameOverride\":\"kuziycsle\",\"isInternal\":false},{\"name\":\"ztcktyh\",\"displayName\":\"qedcgzulwm\",\"displayDescription\":\"qzz\",\"unit\":\"jvpglydzgk\",\"supportedAggregationTypes\":[\"Average\",\"Average\"],\"supportedTimeGrainTypes\":[\"oepry\",\"t\"],\"internalMetricName\":\"ytp\",\"enableRegionalMdmAccount\":false,\"sourceMdmAccount\":\"vzvfvaawzqadfl\",\"sourceMdmNamespace\":\"ur\",\"dimensions\":[{},{},{}],\"aggregationType\":\"ecxn\",\"fillGapWithZero\":false,\"category\":\"okpvzm\",\"resourceIdDimensionNameOverride\":\"t\",\"isInternal\":true}],\"logSpecifications\":[{\"name\":\"bf\",\"displayName\":\"clnpkci\"}]}}}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        NetAppFilesManager manager = NetAppFilesManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<Operation> response = manager.operations().list(com.azure.core.util.Context.NONE);

        Assertions.assertEquals("qqfkuv", response.iterator().next().name());
        Assertions.assertEquals("kdmligovi", response.iterator().next().display().provider());
        Assertions.assertEquals("xk", response.iterator().next().display().resource());
        Assertions.assertEquals("loazuruocbgoo", response.iterator().next().display().operation());
        Assertions.assertEquals("te", response.iterator().next().display().description());
        Assertions.assertEquals("bfhjxakvvjgsl", response.iterator().next().origin());
        Assertions.assertEquals("yw",
            response.iterator().next().serviceSpecification().metricSpecifications().get(0).name());
        Assertions.assertEquals("kgkxn",
            response.iterator().next().serviceSpecification().metricSpecifications().get(0).displayName());
        Assertions.assertEquals("dabg",
            response.iterator().next().serviceSpecification().metricSpecifications().get(0).displayDescription());
        Assertions.assertEquals("udtjuewbc",
            response.iterator().next().serviceSpecification().metricSpecifications().get(0).unit());
        Assertions.assertEquals(MetricAggregationType.AVERAGE,
            response.iterator()
                .next()
                .serviceSpecification()
                .metricSpecifications()
                .get(0)
                .supportedAggregationTypes()
                .get(0));
        Assertions.assertEquals("c",
            response.iterator()
                .next()
                .serviceSpecification()
                .metricSpecifications()
                .get(0)
                .supportedTimeGrainTypes()
                .get(0));
        Assertions.assertEquals("ayakkudzpx",
            response.iterator().next().serviceSpecification().metricSpecifications().get(0).internalMetricName());
        Assertions.assertEquals(true,
            response.iterator().next().serviceSpecification().metricSpecifications().get(0).enableRegionalMdmAccount());
        Assertions.assertEquals("lma",
            response.iterator().next().serviceSpecification().metricSpecifications().get(0).sourceMdmAccount());
        Assertions.assertEquals("tcyohpfkyrk",
            response.iterator().next().serviceSpecification().metricSpecifications().get(0).sourceMdmNamespace());
        Assertions.assertEquals("iogsjkmnwq",
            response.iterator().next().serviceSpecification().metricSpecifications().get(0).aggregationType());
        Assertions.assertEquals(true,
            response.iterator().next().serviceSpecification().metricSpecifications().get(0).fillGapWithZero());
        Assertions.assertEquals("aiy",
            response.iterator().next().serviceSpecification().metricSpecifications().get(0).category());
        Assertions.assertEquals("d",
            response.iterator()
                .next()
                .serviceSpecification()
                .metricSpecifications()
                .get(0)
                .resourceIdDimensionNameOverride());
        Assertions.assertEquals(true,
            response.iterator().next().serviceSpecification().metricSpecifications().get(0).isInternal());
        Assertions.assertEquals("bf",
            response.iterator().next().serviceSpecification().logSpecifications().get(0).name());
        Assertions.assertEquals("clnpkci",
            response.iterator().next().serviceSpecification().logSpecifications().get(0).displayName());
    }
}
