// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.netapp.NetAppFilesManager;
import com.azure.resourcemanager.netapp.models.MetricAggregationType;
import com.azure.resourcemanager.netapp.models.Operation;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class OperationsListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"name\":\"qxihhrmooi\",\"display\":{\"provider\":\"eypxiutcxapzhyr\",\"resource\":\"togebjoxsl\",\"operation\":\"nhl\",\"description\":\"rqnkkzjcjbtr\"},\"origin\":\"ehvvib\",\"properties\":{\"serviceSpecification\":{\"metricSpecifications\":[{\"name\":\"oqbeitpkxzt\",\"displayName\":\"ob\",\"displayDescription\":\"ft\",\"unit\":\"gfcwqmpimaqxzhem\",\"supportedAggregationTypes\":[\"Average\"],\"supportedTimeGrainTypes\":[\"jswtwkozzwc\"],\"internalMetricName\":\"kb\",\"enableRegionalMdmAccount\":true,\"sourceMdmAccount\":\"ajnjwltlwtjj\",\"sourceMdmNamespace\":\"ktalhsnvkcdmxz\",\"dimensions\":[{},{}],\"aggregationType\":\"imlnwiaaomylw\",\"fillGapWithZero\":false,\"category\":\"lcsethwwnpj\",\"resourceIdDimensionNameOverride\":\"fz\",\"isInternal\":false}],\"logSpecifications\":[{\"name\":\"ahfbous\",\"displayName\":\"epgfew\"},{\"name\":\"wlyxgncxyk\",\"displayName\":\"djhlimm\"},{\"name\":\"x\",\"displayName\":\"bcporxvxcjzhqizx\"}]}}}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        NetAppFilesManager manager = NetAppFilesManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PagedIterable<Operation> response = manager.operations().list(com.azure.core.util.Context.NONE);

        Assertions.assertEquals("qxihhrmooi", response.iterator().next().name());
        Assertions.assertEquals("eypxiutcxapzhyr", response.iterator().next().display().provider());
        Assertions.assertEquals("togebjoxsl", response.iterator().next().display().resource());
        Assertions.assertEquals("nhl", response.iterator().next().display().operation());
        Assertions.assertEquals("rqnkkzjcjbtr", response.iterator().next().display().description());
        Assertions.assertEquals("ehvvib", response.iterator().next().origin());
        Assertions.assertEquals("oqbeitpkxzt",
            response.iterator().next().serviceSpecification().metricSpecifications().get(0).name());
        Assertions.assertEquals("ob",
            response.iterator().next().serviceSpecification().metricSpecifications().get(0).displayName());
        Assertions.assertEquals("ft",
            response.iterator().next().serviceSpecification().metricSpecifications().get(0).displayDescription());
        Assertions.assertEquals("gfcwqmpimaqxzhem",
            response.iterator().next().serviceSpecification().metricSpecifications().get(0).unit());
        Assertions.assertEquals(MetricAggregationType.AVERAGE,
            response.iterator()
                .next()
                .serviceSpecification()
                .metricSpecifications()
                .get(0)
                .supportedAggregationTypes()
                .get(0));
        Assertions.assertEquals("jswtwkozzwc",
            response.iterator()
                .next()
                .serviceSpecification()
                .metricSpecifications()
                .get(0)
                .supportedTimeGrainTypes()
                .get(0));
        Assertions.assertEquals("kb",
            response.iterator().next().serviceSpecification().metricSpecifications().get(0).internalMetricName());
        Assertions.assertTrue(
            response.iterator().next().serviceSpecification().metricSpecifications().get(0).enableRegionalMdmAccount());
        Assertions.assertEquals("ajnjwltlwtjj",
            response.iterator().next().serviceSpecification().metricSpecifications().get(0).sourceMdmAccount());
        Assertions.assertEquals("ktalhsnvkcdmxz",
            response.iterator().next().serviceSpecification().metricSpecifications().get(0).sourceMdmNamespace());
        Assertions.assertEquals("imlnwiaaomylw",
            response.iterator().next().serviceSpecification().metricSpecifications().get(0).aggregationType());
        Assertions.assertFalse(
            response.iterator().next().serviceSpecification().metricSpecifications().get(0).fillGapWithZero());
        Assertions.assertEquals("lcsethwwnpj",
            response.iterator().next().serviceSpecification().metricSpecifications().get(0).category());
        Assertions.assertEquals("fz",
            response.iterator()
                .next()
                .serviceSpecification()
                .metricSpecifications()
                .get(0)
                .resourceIdDimensionNameOverride());
        Assertions
            .assertFalse(response.iterator().next().serviceSpecification().metricSpecifications().get(0).isInternal());
        Assertions.assertEquals("ahfbous",
            response.iterator().next().serviceSpecification().logSpecifications().get(0).name());
        Assertions.assertEquals("epgfew",
            response.iterator().next().serviceSpecification().logSpecifications().get(0).displayName());
    }
}
