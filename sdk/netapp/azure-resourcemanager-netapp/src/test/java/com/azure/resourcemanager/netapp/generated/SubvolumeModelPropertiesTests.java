// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.netapp.fluent.models.SubvolumeModelProperties;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;

public final class SubvolumeModelPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SubvolumeModelProperties model = BinaryData.fromString(
            "{\"path\":\"bomvzzbtdcqv\",\"parentPath\":\"iyujviylwdshfs\",\"size\":9196123884907355895,\"bytesUsed\":2213740000240343636,\"permissions\":\"rymsgaojfmw\",\"creationTimeStamp\":\"2021-01-11T05:05:32Z\",\"accessedTimeStamp\":\"2021-04-29T14:25:51Z\",\"modifiedTimeStamp\":\"2021-07-03T18:59:53Z\",\"changedTimeStamp\":\"2021-11-17T23:30:45Z\",\"provisioningState\":\"ctymoxoftp\"}")
            .toObject(SubvolumeModelProperties.class);
        Assertions.assertEquals("bomvzzbtdcqv", model.path());
        Assertions.assertEquals("iyujviylwdshfs", model.parentPath());
        Assertions.assertEquals(9196123884907355895L, model.size());
        Assertions.assertEquals(2213740000240343636L, model.bytesUsed());
        Assertions.assertEquals("rymsgaojfmw", model.permissions());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-11T05:05:32Z"), model.creationTimestamp());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-29T14:25:51Z"), model.accessedTimestamp());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-03T18:59:53Z"), model.modifiedTimestamp());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-17T23:30:45Z"), model.changedTimestamp());
        Assertions.assertEquals("ctymoxoftp", model.provisioningState());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SubvolumeModelProperties model = new SubvolumeModelProperties().withPath("bomvzzbtdcqv")
            .withParentPath("iyujviylwdshfs")
            .withSize(9196123884907355895L)
            .withBytesUsed(2213740000240343636L)
            .withPermissions("rymsgaojfmw")
            .withCreationTimestamp(OffsetDateTime.parse("2021-01-11T05:05:32Z"))
            .withAccessedTimestamp(OffsetDateTime.parse("2021-04-29T14:25:51Z"))
            .withModifiedTimestamp(OffsetDateTime.parse("2021-07-03T18:59:53Z"))
            .withChangedTimestamp(OffsetDateTime.parse("2021-11-17T23:30:45Z"))
            .withProvisioningState("ctymoxoftp");
        model = BinaryData.fromObject(model).toObject(SubvolumeModelProperties.class);
        Assertions.assertEquals("bomvzzbtdcqv", model.path());
        Assertions.assertEquals("iyujviylwdshfs", model.parentPath());
        Assertions.assertEquals(9196123884907355895L, model.size());
        Assertions.assertEquals(2213740000240343636L, model.bytesUsed());
        Assertions.assertEquals("rymsgaojfmw", model.permissions());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-11T05:05:32Z"), model.creationTimestamp());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-29T14:25:51Z"), model.accessedTimestamp());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-03T18:59:53Z"), model.modifiedTimestamp());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-17T23:30:45Z"), model.changedTimestamp());
        Assertions.assertEquals("ctymoxoftp", model.provisioningState());
    }
}
