// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.netapp.fluent.models.SubvolumeModelProperties;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;

public final class SubvolumeModelPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SubvolumeModelProperties model =
            BinaryData
                .fromString(
                    "{\"path\":\"ybycnunvj\",\"parentPath\":\"tkfa\",\"size\":8400151885530005764,\"bytesUsed\":877559643182004257,\"permissions\":\"yzirtxdyuxzejn\",\"creationTimeStamp\":\"2021-07-14T22:05:57Z\",\"accessedTimeStamp\":\"2021-11-18T04:28:14Z\",\"modifiedTimeStamp\":\"2021-10-25T06:30:28Z\",\"changedTimeStamp\":\"2021-07-11T20:25:22Z\",\"provisioningState\":\"qukrydxt\"}")
                .toObject(SubvolumeModelProperties.class);
        Assertions.assertEquals("ybycnunvj", model.path());
        Assertions.assertEquals("tkfa", model.parentPath());
        Assertions.assertEquals(8400151885530005764L, model.size());
        Assertions.assertEquals(877559643182004257L, model.bytesUsed());
        Assertions.assertEquals("yzirtxdyuxzejn", model.permissions());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-14T22:05:57Z"), model.creationTimestamp());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-18T04:28:14Z"), model.accessedTimestamp());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-25T06:30:28Z"), model.modifiedTimestamp());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-11T20:25:22Z"), model.changedTimestamp());
        Assertions.assertEquals("qukrydxt", model.provisioningState());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SubvolumeModelProperties model =
            new SubvolumeModelProperties()
                .withPath("ybycnunvj")
                .withParentPath("tkfa")
                .withSize(8400151885530005764L)
                .withBytesUsed(877559643182004257L)
                .withPermissions("yzirtxdyuxzejn")
                .withCreationTimestamp(OffsetDateTime.parse("2021-07-14T22:05:57Z"))
                .withAccessedTimestamp(OffsetDateTime.parse("2021-11-18T04:28:14Z"))
                .withModifiedTimestamp(OffsetDateTime.parse("2021-10-25T06:30:28Z"))
                .withChangedTimestamp(OffsetDateTime.parse("2021-07-11T20:25:22Z"))
                .withProvisioningState("qukrydxt");
        model = BinaryData.fromObject(model).toObject(SubvolumeModelProperties.class);
        Assertions.assertEquals("ybycnunvj", model.path());
        Assertions.assertEquals("tkfa", model.parentPath());
        Assertions.assertEquals(8400151885530005764L, model.size());
        Assertions.assertEquals(877559643182004257L, model.bytesUsed());
        Assertions.assertEquals("yzirtxdyuxzejn", model.permissions());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-14T22:05:57Z"), model.creationTimestamp());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-18T04:28:14Z"), model.accessedTimestamp());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-25T06:30:28Z"), model.modifiedTimestamp());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-11T20:25:22Z"), model.changedTimestamp());
        Assertions.assertEquals("qukrydxt", model.provisioningState());
    }
}
