// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.netapp.fluent.models.SubvolumeModelProperties;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;

public final class SubvolumeModelPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SubvolumeModelProperties model = BinaryData.fromString(
            "{\"path\":\"nrwrbiork\",\"parentPath\":\"lywjhh\",\"size\":6322848214394065275,\"bytesUsed\":3127614334065666845,\"permissions\":\"v\",\"creationTimeStamp\":\"2021-07-20T04:17:10Z\",\"accessedTimeStamp\":\"2021-04-28T21:19:50Z\",\"modifiedTimeStamp\":\"2020-12-27T23:16:18Z\",\"changedTimeStamp\":\"2021-10-29T08:24:04Z\",\"provisioningState\":\"ufiqndieuzaof\"}")
            .toObject(SubvolumeModelProperties.class);
        Assertions.assertEquals("nrwrbiork", model.path());
        Assertions.assertEquals("lywjhh", model.parentPath());
        Assertions.assertEquals(6322848214394065275L, model.size());
        Assertions.assertEquals(3127614334065666845L, model.bytesUsed());
        Assertions.assertEquals("v", model.permissions());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-20T04:17:10Z"), model.creationTimestamp());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-28T21:19:50Z"), model.accessedTimestamp());
        Assertions.assertEquals(OffsetDateTime.parse("2020-12-27T23:16:18Z"), model.modifiedTimestamp());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-29T08:24:04Z"), model.changedTimestamp());
        Assertions.assertEquals("ufiqndieuzaof", model.provisioningState());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SubvolumeModelProperties model = new SubvolumeModelProperties().withPath("nrwrbiork")
            .withParentPath("lywjhh")
            .withSize(6322848214394065275L)
            .withBytesUsed(3127614334065666845L)
            .withPermissions("v")
            .withCreationTimestamp(OffsetDateTime.parse("2021-07-20T04:17:10Z"))
            .withAccessedTimestamp(OffsetDateTime.parse("2021-04-28T21:19:50Z"))
            .withModifiedTimestamp(OffsetDateTime.parse("2020-12-27T23:16:18Z"))
            .withChangedTimestamp(OffsetDateTime.parse("2021-10-29T08:24:04Z"))
            .withProvisioningState("ufiqndieuzaof");
        model = BinaryData.fromObject(model).toObject(SubvolumeModelProperties.class);
        Assertions.assertEquals("nrwrbiork", model.path());
        Assertions.assertEquals("lywjhh", model.parentPath());
        Assertions.assertEquals(6322848214394065275L, model.size());
        Assertions.assertEquals(3127614334065666845L, model.bytesUsed());
        Assertions.assertEquals("v", model.permissions());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-20T04:17:10Z"), model.creationTimestamp());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-28T21:19:50Z"), model.accessedTimestamp());
        Assertions.assertEquals(OffsetDateTime.parse("2020-12-27T23:16:18Z"), model.modifiedTimestamp());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-29T08:24:04Z"), model.changedTimestamp());
        Assertions.assertEquals("ufiqndieuzaof", model.provisioningState());
    }
}
