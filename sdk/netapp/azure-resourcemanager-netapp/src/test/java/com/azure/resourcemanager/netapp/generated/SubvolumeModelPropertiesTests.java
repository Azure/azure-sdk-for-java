// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.netapp.fluent.models.SubvolumeModelProperties;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;

public final class SubvolumeModelPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SubvolumeModelProperties model = BinaryData.fromString(
            "{\"path\":\"dyftumrtwna\",\"parentPath\":\"slbi\",\"size\":7011165739080555732,\"bytesUsed\":5993525094166687580,\"permissions\":\"tsf\",\"creationTimeStamp\":\"2021-10-17T10:06:27Z\",\"accessedTimeStamp\":\"2021-07-03T06:16:35Z\",\"modifiedTimeStamp\":\"2021-03-07T16:28:02Z\",\"changedTimeStamp\":\"2021-03-23T01:57:59Z\",\"provisioningState\":\"hqnrn\"}")
            .toObject(SubvolumeModelProperties.class);
        Assertions.assertEquals("dyftumrtwna", model.path());
        Assertions.assertEquals("slbi", model.parentPath());
        Assertions.assertEquals(7011165739080555732L, model.size());
        Assertions.assertEquals(5993525094166687580L, model.bytesUsed());
        Assertions.assertEquals("tsf", model.permissions());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-17T10:06:27Z"), model.creationTimestamp());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-03T06:16:35Z"), model.accessedTimestamp());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-07T16:28:02Z"), model.modifiedTimestamp());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-23T01:57:59Z"), model.changedTimestamp());
        Assertions.assertEquals("hqnrn", model.provisioningState());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SubvolumeModelProperties model = new SubvolumeModelProperties().withPath("dyftumrtwna")
            .withParentPath("slbi")
            .withSize(7011165739080555732L)
            .withBytesUsed(5993525094166687580L)
            .withPermissions("tsf")
            .withCreationTimestamp(OffsetDateTime.parse("2021-10-17T10:06:27Z"))
            .withAccessedTimestamp(OffsetDateTime.parse("2021-07-03T06:16:35Z"))
            .withModifiedTimestamp(OffsetDateTime.parse("2021-03-07T16:28:02Z"))
            .withChangedTimestamp(OffsetDateTime.parse("2021-03-23T01:57:59Z"))
            .withProvisioningState("hqnrn");
        model = BinaryData.fromObject(model).toObject(SubvolumeModelProperties.class);
        Assertions.assertEquals("dyftumrtwna", model.path());
        Assertions.assertEquals("slbi", model.parentPath());
        Assertions.assertEquals(7011165739080555732L, model.size());
        Assertions.assertEquals(5993525094166687580L, model.bytesUsed());
        Assertions.assertEquals("tsf", model.permissions());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-17T10:06:27Z"), model.creationTimestamp());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-03T06:16:35Z"), model.accessedTimestamp());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-07T16:28:02Z"), model.modifiedTimestamp());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-23T01:57:59Z"), model.changedTimestamp());
        Assertions.assertEquals("hqnrn", model.provisioningState());
    }
}
