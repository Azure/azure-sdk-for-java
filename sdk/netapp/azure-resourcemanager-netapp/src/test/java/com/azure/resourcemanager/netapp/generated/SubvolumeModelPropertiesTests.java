// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.netapp.fluent.models.SubvolumeModelProperties;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;

public final class SubvolumeModelPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SubvolumeModelProperties model = BinaryData.fromString(
            "{\"path\":\"sbpimlq\",\"parentPath\":\"jxkcgxxlxsff\",\"size\":8913545670750605330,\"bytesUsed\":3973378741757225824,\"permissions\":\"wlvwlyoupf\",\"creationTimeStamp\":\"2021-07-15T15:51:01Z\",\"accessedTimeStamp\":\"2021-11-17T00:06:30Z\",\"modifiedTimeStamp\":\"2021-03-29T18:48:16Z\",\"changedTimeStamp\":\"2021-04-30T06:19:59Z\",\"provisioningState\":\"gkfmins\"}")
            .toObject(SubvolumeModelProperties.class);
        Assertions.assertEquals("sbpimlq", model.path());
        Assertions.assertEquals("jxkcgxxlxsff", model.parentPath());
        Assertions.assertEquals(8913545670750605330L, model.size());
        Assertions.assertEquals(3973378741757225824L, model.bytesUsed());
        Assertions.assertEquals("wlvwlyoupf", model.permissions());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-15T15:51:01Z"), model.creationTimestamp());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-17T00:06:30Z"), model.accessedTimestamp());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-29T18:48:16Z"), model.modifiedTimestamp());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-30T06:19:59Z"), model.changedTimestamp());
        Assertions.assertEquals("gkfmins", model.provisioningState());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SubvolumeModelProperties model = new SubvolumeModelProperties().withPath("sbpimlq")
            .withParentPath("jxkcgxxlxsff")
            .withSize(8913545670750605330L)
            .withBytesUsed(3973378741757225824L)
            .withPermissions("wlvwlyoupf")
            .withCreationTimestamp(OffsetDateTime.parse("2021-07-15T15:51:01Z"))
            .withAccessedTimestamp(OffsetDateTime.parse("2021-11-17T00:06:30Z"))
            .withModifiedTimestamp(OffsetDateTime.parse("2021-03-29T18:48:16Z"))
            .withChangedTimestamp(OffsetDateTime.parse("2021-04-30T06:19:59Z"))
            .withProvisioningState("gkfmins");
        model = BinaryData.fromObject(model).toObject(SubvolumeModelProperties.class);
        Assertions.assertEquals("sbpimlq", model.path());
        Assertions.assertEquals("jxkcgxxlxsff", model.parentPath());
        Assertions.assertEquals(8913545670750605330L, model.size());
        Assertions.assertEquals(3973378741757225824L, model.bytesUsed());
        Assertions.assertEquals("wlvwlyoupf", model.permissions());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-15T15:51:01Z"), model.creationTimestamp());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-17T00:06:30Z"), model.accessedTimestamp());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-29T18:48:16Z"), model.modifiedTimestamp());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-30T06:19:59Z"), model.changedTimestamp());
        Assertions.assertEquals("gkfmins", model.provisioningState());
    }
}
