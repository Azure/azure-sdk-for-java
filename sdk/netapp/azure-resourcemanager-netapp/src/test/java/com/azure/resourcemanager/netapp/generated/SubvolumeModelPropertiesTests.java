// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.netapp.fluent.models.SubvolumeModelProperties;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;

public final class SubvolumeModelPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SubvolumeModelProperties model = BinaryData.fromString(
            "{\"path\":\"wnopqgikyzirtx\",\"parentPath\":\"uxzejntpsew\",\"size\":1522642877560405861,\"bytesUsed\":8904068616929586404,\"permissions\":\"rydxtqm\",\"creationTimeStamp\":\"2021-03-22T23:05:26Z\",\"accessedTimeStamp\":\"2021-09-30T07:53:59Z\",\"modifiedTimeStamp\":\"2021-10-02T03:50:47Z\",\"changedTimeStamp\":\"2021-01-30T19:33:22Z\",\"provisioningState\":\"hyaomtbghhavgr\"}")
            .toObject(SubvolumeModelProperties.class);
        Assertions.assertEquals("wnopqgikyzirtx", model.path());
        Assertions.assertEquals("uxzejntpsew", model.parentPath());
        Assertions.assertEquals(1522642877560405861L, model.size());
        Assertions.assertEquals(8904068616929586404L, model.bytesUsed());
        Assertions.assertEquals("rydxtqm", model.permissions());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-22T23:05:26Z"), model.creationTimestamp());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-30T07:53:59Z"), model.accessedTimestamp());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-02T03:50:47Z"), model.modifiedTimestamp());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-30T19:33:22Z"), model.changedTimestamp());
        Assertions.assertEquals("hyaomtbghhavgr", model.provisioningState());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SubvolumeModelProperties model = new SubvolumeModelProperties().withPath("wnopqgikyzirtx")
            .withParentPath("uxzejntpsew")
            .withSize(1522642877560405861L)
            .withBytesUsed(8904068616929586404L)
            .withPermissions("rydxtqm")
            .withCreationTimestamp(OffsetDateTime.parse("2021-03-22T23:05:26Z"))
            .withAccessedTimestamp(OffsetDateTime.parse("2021-09-30T07:53:59Z"))
            .withModifiedTimestamp(OffsetDateTime.parse("2021-10-02T03:50:47Z"))
            .withChangedTimestamp(OffsetDateTime.parse("2021-01-30T19:33:22Z"))
            .withProvisioningState("hyaomtbghhavgr");
        model = BinaryData.fromObject(model).toObject(SubvolumeModelProperties.class);
        Assertions.assertEquals("wnopqgikyzirtx", model.path());
        Assertions.assertEquals("uxzejntpsew", model.parentPath());
        Assertions.assertEquals(1522642877560405861L, model.size());
        Assertions.assertEquals(8904068616929586404L, model.bytesUsed());
        Assertions.assertEquals("rydxtqm", model.permissions());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-22T23:05:26Z"), model.creationTimestamp());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-30T07:53:59Z"), model.accessedTimestamp());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-02T03:50:47Z"), model.modifiedTimestamp());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-30T19:33:22Z"), model.changedTimestamp());
        Assertions.assertEquals("hyaomtbghhavgr", model.provisioningState());
    }
}
