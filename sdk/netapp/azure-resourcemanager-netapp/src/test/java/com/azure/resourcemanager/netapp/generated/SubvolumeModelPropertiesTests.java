// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.netapp.fluent.models.SubvolumeModelProperties;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;

public final class SubvolumeModelPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SubvolumeModelProperties model = BinaryData.fromString(
            "{\"path\":\"wzf\",\"parentPath\":\"sttktlahbqa\",\"size\":8616212085400187990,\"bytesUsed\":5269080860796174079,\"permissions\":\"xitmmqtgqqq\",\"creationTimeStamp\":\"2021-09-05T22:16:51Z\",\"accessedTimeStamp\":\"2021-09-26T11:40:15Z\",\"modifiedTimeStamp\":\"2021-07-18T12:52:35Z\",\"changedTimeStamp\":\"2021-11-27T09:39:12Z\",\"provisioningState\":\"uisavokq\"}")
            .toObject(SubvolumeModelProperties.class);
        Assertions.assertEquals("wzf", model.path());
        Assertions.assertEquals("sttktlahbqa", model.parentPath());
        Assertions.assertEquals(8616212085400187990L, model.size());
        Assertions.assertEquals(5269080860796174079L, model.bytesUsed());
        Assertions.assertEquals("xitmmqtgqqq", model.permissions());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-05T22:16:51Z"), model.creationTimestamp());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-26T11:40:15Z"), model.accessedTimestamp());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-18T12:52:35Z"), model.modifiedTimestamp());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-27T09:39:12Z"), model.changedTimestamp());
        Assertions.assertEquals("uisavokq", model.provisioningState());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SubvolumeModelProperties model = new SubvolumeModelProperties().withPath("wzf")
            .withParentPath("sttktlahbqa")
            .withSize(8616212085400187990L)
            .withBytesUsed(5269080860796174079L)
            .withPermissions("xitmmqtgqqq")
            .withCreationTimestamp(OffsetDateTime.parse("2021-09-05T22:16:51Z"))
            .withAccessedTimestamp(OffsetDateTime.parse("2021-09-26T11:40:15Z"))
            .withModifiedTimestamp(OffsetDateTime.parse("2021-07-18T12:52:35Z"))
            .withChangedTimestamp(OffsetDateTime.parse("2021-11-27T09:39:12Z"))
            .withProvisioningState("uisavokq");
        model = BinaryData.fromObject(model).toObject(SubvolumeModelProperties.class);
        Assertions.assertEquals("wzf", model.path());
        Assertions.assertEquals("sttktlahbqa", model.parentPath());
        Assertions.assertEquals(8616212085400187990L, model.size());
        Assertions.assertEquals(5269080860796174079L, model.bytesUsed());
        Assertions.assertEquals("xitmmqtgqqq", model.permissions());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-05T22:16:51Z"), model.creationTimestamp());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-26T11:40:15Z"), model.accessedTimestamp());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-18T12:52:35Z"), model.modifiedTimestamp());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-27T09:39:12Z"), model.changedTimestamp());
        Assertions.assertEquals("uisavokq", model.provisioningState());
    }
}
