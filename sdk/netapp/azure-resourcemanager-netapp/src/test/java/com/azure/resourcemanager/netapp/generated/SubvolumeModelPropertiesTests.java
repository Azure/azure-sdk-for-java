// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.netapp.fluent.models.SubvolumeModelProperties;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;

public final class SubvolumeModelPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SubvolumeModelProperties model = BinaryData.fromString(
            "{\"path\":\"kojgcyzts\",\"parentPath\":\"z\",\"size\":1225838395587285153,\"bytesUsed\":1800143907295962702,\"permissions\":\"hqnrn\",\"creationTimeStamp\":\"2021-07-24T02:25:51Z\",\"accessedTimeStamp\":\"2021-01-21T00:49:26Z\",\"modifiedTimeStamp\":\"2021-01-03T13:06:24Z\",\"changedTimeStamp\":\"2021-10-20T16:41:45Z\",\"provisioningState\":\"qgaifmviklbydv\"}")
            .toObject(SubvolumeModelProperties.class);
        Assertions.assertEquals("kojgcyzts", model.path());
        Assertions.assertEquals("z", model.parentPath());
        Assertions.assertEquals(1225838395587285153L, model.size());
        Assertions.assertEquals(1800143907295962702L, model.bytesUsed());
        Assertions.assertEquals("hqnrn", model.permissions());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-24T02:25:51Z"), model.creationTimestamp());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-21T00:49:26Z"), model.accessedTimestamp());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-03T13:06:24Z"), model.modifiedTimestamp());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-20T16:41:45Z"), model.changedTimestamp());
        Assertions.assertEquals("qgaifmviklbydv", model.provisioningState());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SubvolumeModelProperties model = new SubvolumeModelProperties().withPath("kojgcyzts")
            .withParentPath("z")
            .withSize(1225838395587285153L)
            .withBytesUsed(1800143907295962702L)
            .withPermissions("hqnrn")
            .withCreationTimestamp(OffsetDateTime.parse("2021-07-24T02:25:51Z"))
            .withAccessedTimestamp(OffsetDateTime.parse("2021-01-21T00:49:26Z"))
            .withModifiedTimestamp(OffsetDateTime.parse("2021-01-03T13:06:24Z"))
            .withChangedTimestamp(OffsetDateTime.parse("2021-10-20T16:41:45Z"))
            .withProvisioningState("qgaifmviklbydv");
        model = BinaryData.fromObject(model).toObject(SubvolumeModelProperties.class);
        Assertions.assertEquals("kojgcyzts", model.path());
        Assertions.assertEquals("z", model.parentPath());
        Assertions.assertEquals(1225838395587285153L, model.size());
        Assertions.assertEquals(1800143907295962702L, model.bytesUsed());
        Assertions.assertEquals("hqnrn", model.permissions());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-24T02:25:51Z"), model.creationTimestamp());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-21T00:49:26Z"), model.accessedTimestamp());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-03T13:06:24Z"), model.modifiedTimestamp());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-20T16:41:45Z"), model.changedTimestamp());
        Assertions.assertEquals("qgaifmviklbydv", model.provisioningState());
    }
}
