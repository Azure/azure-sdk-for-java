// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.netapp.models.Type;
import com.azure.resourcemanager.netapp.models.VolumeQuotaRulePatch;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class VolumeQuotaRulePatchTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        VolumeQuotaRulePatch model = BinaryData.fromString(
            "{\"tags\":{\"xcbihw\":\"ithtywu\",\"twjchrdg\":\"knfd\"},\"properties\":{\"provisioningState\":\"Creating\",\"quotaSizeInKiBs\":7107037042754238104,\"quotaType\":\"DefaultUserQuota\",\"quotaTarget\":\"ndz\"}}")
            .toObject(VolumeQuotaRulePatch.class);
        Assertions.assertEquals("ithtywu", model.tags().get("xcbihw"));
        Assertions.assertEquals(7107037042754238104L, model.quotaSizeInKiBs());
        Assertions.assertEquals(Type.DEFAULT_USER_QUOTA, model.quotaType());
        Assertions.assertEquals("ndz", model.quotaTarget());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        VolumeQuotaRulePatch model = new VolumeQuotaRulePatch().withTags(mapOf("xcbihw", "ithtywu", "twjchrdg", "knfd"))
            .withQuotaSizeInKiBs(7107037042754238104L)
            .withQuotaType(Type.DEFAULT_USER_QUOTA)
            .withQuotaTarget("ndz");
        model = BinaryData.fromObject(model).toObject(VolumeQuotaRulePatch.class);
        Assertions.assertEquals("ithtywu", model.tags().get("xcbihw"));
        Assertions.assertEquals(7107037042754238104L, model.quotaSizeInKiBs());
        Assertions.assertEquals(Type.DEFAULT_USER_QUOTA, model.quotaType());
        Assertions.assertEquals("ndz", model.quotaTarget());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
