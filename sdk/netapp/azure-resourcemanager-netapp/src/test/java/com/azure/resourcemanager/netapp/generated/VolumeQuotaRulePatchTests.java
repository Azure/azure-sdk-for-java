// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.netapp.models.Type;
import com.azure.resourcemanager.netapp.models.VolumeQuotaRulePatch;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class VolumeQuotaRulePatchTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        VolumeQuotaRulePatch model =
            BinaryData
                .fromString(
                    "{\"tags\":{\"syqtfi\":\"guufzd\",\"phoszqz\":\"whbotzingamv\"},\"properties\":{\"provisioningState\":\"Accepted\",\"quotaSizeInKiBs\":7279242451300460541,\"quotaType\":\"DefaultUserQuota\",\"quotaTarget\":\"fwynwcvtbvkay\"}}")
                .toObject(VolumeQuotaRulePatch.class);
        Assertions.assertEquals("guufzd", model.tags().get("syqtfi"));
        Assertions.assertEquals(7279242451300460541L, model.quotaSizeInKiBs());
        Assertions.assertEquals(Type.DEFAULT_USER_QUOTA, model.quotaType());
        Assertions.assertEquals("fwynwcvtbvkay", model.quotaTarget());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        VolumeQuotaRulePatch model =
            new VolumeQuotaRulePatch()
                .withTags(mapOf("syqtfi", "guufzd", "phoszqz", "whbotzingamv"))
                .withQuotaSizeInKiBs(7279242451300460541L)
                .withQuotaType(Type.DEFAULT_USER_QUOTA)
                .withQuotaTarget("fwynwcvtbvkay");
        model = BinaryData.fromObject(model).toObject(VolumeQuotaRulePatch.class);
        Assertions.assertEquals("guufzd", model.tags().get("syqtfi"));
        Assertions.assertEquals(7279242451300460541L, model.quotaSizeInKiBs());
        Assertions.assertEquals(Type.DEFAULT_USER_QUOTA, model.quotaType());
        Assertions.assertEquals("fwynwcvtbvkay", model.quotaTarget());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
