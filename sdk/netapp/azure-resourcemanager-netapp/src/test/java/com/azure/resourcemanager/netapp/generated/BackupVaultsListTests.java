// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.netapp.fluent.models.BackupVaultInner;
import com.azure.resourcemanager.netapp.models.BackupVaultsList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class BackupVaultsListTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        BackupVaultsList model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"provisioningState\":\"gohbuffkmrq\"},\"location\":\"vvhmxtdrj\",\"tags\":{\"ewzcjznmwcp\":\"acoebj\"},\"id\":\"guaadraufactkahz\",\"name\":\"v\",\"type\":\"jjziuxxpsh\"},{\"properties\":{\"provisioningState\":\"kulfg\"},\"location\":\"qubkw\",\"tags\":{\"inyflnorwmduvwp\":\"nrdsutujbazpjuoh\"},\"id\":\"lvxwmyg\",\"name\":\"xpgpq\",\"type\":\"hiszepnnbjcrxgib\"},{\"properties\":{\"provisioningState\":\"xconfozauors\"},\"location\":\"okwbqplh\",\"tags\":{\"yuqdu\":\"uuepzlrphwzsoldw\",\"biorktal\":\"vmnnrw\",\"miloxggdufiqndie\":\"wjhhgdnhxmsivf\"},\"id\":\"zaofjchvcyy\",\"name\":\"s\",\"type\":\"gdotcubiipuipwo\"},{\"properties\":{\"provisioningState\":\"macjekn\"},\"location\":\"shqvcimpev\",\"tags\":{\"rrilbywdxsmic\":\"b\",\"qujizdvo\":\"wrwfscjfnyns\",\"blgyavutpthj\":\"ytibyow\"},\"id\":\"xoi\",\"name\":\"msksbp\",\"type\":\"mlqoljx\"}],\"nextLink\":\"gxxlxsffgcvizq\"}")
            .toObject(BackupVaultsList.class);
        Assertions.assertEquals("vvhmxtdrj", model.value().get(0).location());
        Assertions.assertEquals("acoebj", model.value().get(0).tags().get("ewzcjznmwcp"));
        Assertions.assertEquals("gxxlxsffgcvizq", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        BackupVaultsList model = new BackupVaultsList()
            .withValue(
                Arrays.asList(new BackupVaultInner().withLocation("vvhmxtdrj").withTags(mapOf("ewzcjznmwcp", "acoebj")),
                    new BackupVaultInner().withLocation("qubkw").withTags(mapOf("inyflnorwmduvwp", "nrdsutujbazpjuoh")),
                    new BackupVaultInner().withLocation("okwbqplh")
                        .withTags(mapOf("yuqdu", "uuepzlrphwzsoldw", "biorktal", "vmnnrw", "miloxggdufiqndie",
                            "wjhhgdnhxmsivf")),
                    new BackupVaultInner().withLocation("shqvcimpev")
                        .withTags(mapOf("rrilbywdxsmic", "b", "qujizdvo", "wrwfscjfnyns", "blgyavutpthj", "ytibyow"))))
            .withNextLink("gxxlxsffgcvizq");
        model = BinaryData.fromObject(model).toObject(BackupVaultsList.class);
        Assertions.assertEquals("vvhmxtdrj", model.value().get(0).location());
        Assertions.assertEquals("acoebj", model.value().get(0).tags().get("ewzcjznmwcp"));
        Assertions.assertEquals("gxxlxsffgcvizq", model.nextLink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
