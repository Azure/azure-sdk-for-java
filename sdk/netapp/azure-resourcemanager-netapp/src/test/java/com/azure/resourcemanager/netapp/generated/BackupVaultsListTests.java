// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.netapp.fluent.models.BackupVaultInner;
import com.azure.resourcemanager.netapp.models.BackupVaultsList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class BackupVaultsListTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        BackupVaultsList model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"provisioningState\":\"slordilmyww\"},\"location\":\"gkxnyedabg\",\"tags\":{\"ewbcihxuuw\":\"dtj\",\"yxccyb\":\"c\",\"px\":\"payakkud\"},\"id\":\"wjplma\",\"name\":\"stcyohpfkyrkdbd\",\"type\":\"iogsjkmnwq\"},{\"properties\":{\"provisioningState\":\"baiyhddviaceg\"},\"location\":\"m\",\"tags\":{\"alxlllchp\":\"pmvmemfnczdwvv\",\"evwrdnhfuk\":\"db\",\"fcvlerch\":\"vsjcswsmystuluqy\"},\"id\":\"qbmfpjbabwidf\",\"name\":\"xsspuunnoxyhk\",\"type\":\"g\"}],\"nextLink\":\"drihpfhoqcaaewda\"}")
            .toObject(BackupVaultsList.class);
        Assertions.assertEquals("gkxnyedabg", model.value().get(0).location());
        Assertions.assertEquals("dtj", model.value().get(0).tags().get("ewbcihxuuw"));
        Assertions.assertEquals("drihpfhoqcaaewda", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        BackupVaultsList model = new BackupVaultsList().withValue(Arrays.asList(
            new BackupVaultInner().withLocation("gkxnyedabg")
                .withTags(mapOf("ewbcihxuuw", "dtj", "yxccyb", "c", "px", "payakkud")),
            new BackupVaultInner().withLocation("m")
                .withTags(mapOf("alxlllchp", "pmvmemfnczdwvv", "evwrdnhfuk", "db", "fcvlerch", "vsjcswsmystuluqy"))))
            .withNextLink("drihpfhoqcaaewda");
        model = BinaryData.fromObject(model).toObject(BackupVaultsList.class);
        Assertions.assertEquals("gkxnyedabg", model.value().get(0).location());
        Assertions.assertEquals("dtj", model.value().get(0).tags().get("ewbcihxuuw"));
        Assertions.assertEquals("drihpfhoqcaaewda", model.nextLink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
