// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.netapp.fluent.models.BackupVaultInner;
import com.azure.resourcemanager.netapp.models.BackupVaultsList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class BackupVaultsListTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        BackupVaultsList model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"provisioningState\":\"bcvhzlhpl\"},\"location\":\"qkdlw\",\"tags\":{\"kxtrq\":\"bum\",\"rtawcoezb\":\"fsmlmbtxhwgfw\"},\"id\":\"hubskhudygooo\",\"name\":\"kqfqjbvl\",\"type\":\"orfmluiqt\"},{\"properties\":{\"provisioningState\":\"avyvnqqyba\"},\"location\":\"euayjkqabqgzsles\",\"tags\":{\"bquwrbehw\":\"hernntiewdjc\",\"mvvhmxtdrjfuta\":\"gohbuffkmrq\",\"jvewzcjznmwcp\":\"oe\"},\"id\":\"guaadraufactkahz\",\"name\":\"v\",\"type\":\"jjziuxxpsh\"}],\"nextLink\":\"e\"}")
            .toObject(BackupVaultsList.class);
        Assertions.assertEquals("qkdlw", model.value().get(0).location());
        Assertions.assertEquals("bum", model.value().get(0).tags().get("kxtrq"));
        Assertions.assertEquals("e", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        BackupVaultsList model
            = new BackupVaultsList()
                .withValue(
                    Arrays
                        .asList(
                            new BackupVaultInner().withLocation("qkdlw")
                                .withTags(mapOf("kxtrq", "bum", "rtawcoezb", "fsmlmbtxhwgfw")),
                            new BackupVaultInner().withLocation("euayjkqabqgzsles")
                                .withTags(mapOf("bquwrbehw", "hernntiewdjc", "mvvhmxtdrjfuta", "gohbuffkmrq",
                                    "jvewzcjznmwcp", "oe"))))
                .withNextLink("e");
        model = BinaryData.fromObject(model).toObject(BackupVaultsList.class);
        Assertions.assertEquals("qkdlw", model.value().get(0).location());
        Assertions.assertEquals("bum", model.value().get(0).tags().get("kxtrq"));
        Assertions.assertEquals("e", model.nextLink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
