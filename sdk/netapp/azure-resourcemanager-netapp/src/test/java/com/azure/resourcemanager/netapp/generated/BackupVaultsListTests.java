// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.netapp.fluent.models.BackupVaultInner;
import com.azure.resourcemanager.netapp.models.BackupVaultsList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class BackupVaultsListTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        BackupVaultsList model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"provisioningState\":\"dwdigumb\"},\"location\":\"aauzzptjazysd\",\"tags\":{\"qyuvvfonkp\":\"zwwva\",\"auy\":\"hqyikvy\"},\"id\":\"vluwmncsttij\",\"name\":\"y\",\"type\":\"vpo\"},{\"properties\":{\"provisioningState\":\"sgsgbdhu\"},\"location\":\"gnjdgkynscliqhz\",\"tags\":{\"mtk\":\"nk\",\"ppnvdxz\":\"bo\",\"hlfkqojpy\":\"hihfrbbcevqagtlt\"},\"id\":\"vgtrdcnifmzzs\",\"name\":\"ymbrnysuxmpraf\",\"type\":\"g\"},{\"properties\":{\"provisioningState\":\"ocxvdfffwafqr\"},\"location\":\"daspavehhrvk\",\"tags\":{\"dhcxgkmoy\":\"zoz\"},\"id\":\"cdyuibhmfdnbzyd\",\"name\":\"f\",\"type\":\"fcjnaeoisrvhmgor\"}],\"nextLink\":\"ukiscvwmzhw\"}")
            .toObject(BackupVaultsList.class);
        Assertions.assertEquals("aauzzptjazysd", model.value().get(0).location());
        Assertions.assertEquals("zwwva", model.value().get(0).tags().get("qyuvvfonkp"));
        Assertions.assertEquals("ukiscvwmzhw", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        BackupVaultsList model = new BackupVaultsList()
            .withValue(Arrays.asList(
                new BackupVaultInner().withLocation("aauzzptjazysd")
                    .withTags(mapOf("qyuvvfonkp", "zwwva", "auy", "hqyikvy")),
                new BackupVaultInner().withLocation("gnjdgkynscliqhz")
                    .withTags(mapOf("mtk", "nk", "ppnvdxz", "bo", "hlfkqojpy", "hihfrbbcevqagtlt")),
                new BackupVaultInner().withLocation("daspavehhrvk").withTags(mapOf("dhcxgkmoy", "zoz"))))
            .withNextLink("ukiscvwmzhw");
        model = BinaryData.fromObject(model).toObject(BackupVaultsList.class);
        Assertions.assertEquals("aauzzptjazysd", model.value().get(0).location());
        Assertions.assertEquals("zwwva", model.value().get(0).tags().get("qyuvvfonkp"));
        Assertions.assertEquals("ukiscvwmzhw", model.nextLink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
