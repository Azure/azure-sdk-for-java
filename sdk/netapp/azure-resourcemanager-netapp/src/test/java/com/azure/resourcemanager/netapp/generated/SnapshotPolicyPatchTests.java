// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.netapp.models.DailySchedule;
import com.azure.resourcemanager.netapp.models.HourlySchedule;
import com.azure.resourcemanager.netapp.models.MonthlySchedule;
import com.azure.resourcemanager.netapp.models.SnapshotPolicyPatch;
import com.azure.resourcemanager.netapp.models.WeeklySchedule;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SnapshotPolicyPatchTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SnapshotPolicyPatch model = BinaryData.fromString(
            "{\"location\":\"bjyvay\",\"id\":\"imrzrtuzqog\",\"name\":\"xnevfdnwn\",\"type\":\"ewzsyyceuzsoib\",\"tags\":{\"dwkqbrq\":\"pfrxtrthzvay\",\"irqtdqoa\":\"bpaxhexiilivpdt\",\"eptra\":\"oruzfgsquyfxrxx\",\"wlwnwxuqlcv\":\"xje\"},\"properties\":{\"hourlySchedule\":{\"snapshotsToKeep\":1148696906,\"minute\":1248229075,\"usedBytes\":1507224315581735893},\"dailySchedule\":{\"snapshotsToKeep\":1080524607,\"hour\":1614496522,\"minute\":77495916,\"usedBytes\":1911538746456059968},\"weeklySchedule\":{\"snapshotsToKeep\":1225956555,\"day\":\"ujhemmsbvdkcrodt\",\"hour\":1997229408,\"minute\":291950475,\"usedBytes\":6410034847924566454},\"monthlySchedule\":{\"snapshotsToKeep\":896449803,\"daysOfMonth\":\"cjvefkdlfo\",\"hour\":1252976241,\"minute\":1706699033,\"usedBytes\":5309095811404897814},\"enabled\":false,\"provisioningState\":\"wpu\"}}")
            .toObject(SnapshotPolicyPatch.class);
        Assertions.assertEquals("bjyvay", model.location());
        Assertions.assertEquals("pfrxtrthzvay", model.tags().get("dwkqbrq"));
        Assertions.assertEquals(1148696906, model.hourlySchedule().snapshotsToKeep());
        Assertions.assertEquals(1248229075, model.hourlySchedule().minute());
        Assertions.assertEquals(1507224315581735893L, model.hourlySchedule().usedBytes());
        Assertions.assertEquals(1080524607, model.dailySchedule().snapshotsToKeep());
        Assertions.assertEquals(1614496522, model.dailySchedule().hour());
        Assertions.assertEquals(77495916, model.dailySchedule().minute());
        Assertions.assertEquals(1911538746456059968L, model.dailySchedule().usedBytes());
        Assertions.assertEquals(1225956555, model.weeklySchedule().snapshotsToKeep());
        Assertions.assertEquals("ujhemmsbvdkcrodt", model.weeklySchedule().day());
        Assertions.assertEquals(1997229408, model.weeklySchedule().hour());
        Assertions.assertEquals(291950475, model.weeklySchedule().minute());
        Assertions.assertEquals(6410034847924566454L, model.weeklySchedule().usedBytes());
        Assertions.assertEquals(896449803, model.monthlySchedule().snapshotsToKeep());
        Assertions.assertEquals("cjvefkdlfo", model.monthlySchedule().daysOfMonth());
        Assertions.assertEquals(1252976241, model.monthlySchedule().hour());
        Assertions.assertEquals(1706699033, model.monthlySchedule().minute());
        Assertions.assertEquals(5309095811404897814L, model.monthlySchedule().usedBytes());
        Assertions.assertEquals(false, model.enabled());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SnapshotPolicyPatch model = new SnapshotPolicyPatch().withLocation("bjyvay")
            .withTags(mapOf("dwkqbrq", "pfrxtrthzvay", "irqtdqoa", "bpaxhexiilivpdt", "eptra", "oruzfgsquyfxrxx",
                "wlwnwxuqlcv", "xje"))
            .withHourlySchedule(new HourlySchedule().withSnapshotsToKeep(1148696906).withMinute(1248229075)
                .withUsedBytes(1507224315581735893L))
            .withDailySchedule(new DailySchedule().withSnapshotsToKeep(1080524607).withHour(1614496522)
                .withMinute(77495916).withUsedBytes(1911538746456059968L))
            .withWeeklySchedule(new WeeklySchedule().withSnapshotsToKeep(1225956555).withDay("ujhemmsbvdkcrodt")
                .withHour(1997229408).withMinute(291950475).withUsedBytes(6410034847924566454L))
            .withMonthlySchedule(new MonthlySchedule().withSnapshotsToKeep(896449803).withDaysOfMonth("cjvefkdlfo")
                .withHour(1252976241).withMinute(1706699033).withUsedBytes(5309095811404897814L))
            .withEnabled(false);
        model = BinaryData.fromObject(model).toObject(SnapshotPolicyPatch.class);
        Assertions.assertEquals("bjyvay", model.location());
        Assertions.assertEquals("pfrxtrthzvay", model.tags().get("dwkqbrq"));
        Assertions.assertEquals(1148696906, model.hourlySchedule().snapshotsToKeep());
        Assertions.assertEquals(1248229075, model.hourlySchedule().minute());
        Assertions.assertEquals(1507224315581735893L, model.hourlySchedule().usedBytes());
        Assertions.assertEquals(1080524607, model.dailySchedule().snapshotsToKeep());
        Assertions.assertEquals(1614496522, model.dailySchedule().hour());
        Assertions.assertEquals(77495916, model.dailySchedule().minute());
        Assertions.assertEquals(1911538746456059968L, model.dailySchedule().usedBytes());
        Assertions.assertEquals(1225956555, model.weeklySchedule().snapshotsToKeep());
        Assertions.assertEquals("ujhemmsbvdkcrodt", model.weeklySchedule().day());
        Assertions.assertEquals(1997229408, model.weeklySchedule().hour());
        Assertions.assertEquals(291950475, model.weeklySchedule().minute());
        Assertions.assertEquals(6410034847924566454L, model.weeklySchedule().usedBytes());
        Assertions.assertEquals(896449803, model.monthlySchedule().snapshotsToKeep());
        Assertions.assertEquals("cjvefkdlfo", model.monthlySchedule().daysOfMonth());
        Assertions.assertEquals(1252976241, model.monthlySchedule().hour());
        Assertions.assertEquals(1706699033, model.monthlySchedule().minute());
        Assertions.assertEquals(5309095811404897814L, model.monthlySchedule().usedBytes());
        Assertions.assertEquals(false, model.enabled());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
