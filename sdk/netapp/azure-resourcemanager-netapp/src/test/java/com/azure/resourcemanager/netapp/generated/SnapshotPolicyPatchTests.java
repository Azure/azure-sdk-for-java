// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.netapp.models.DailySchedule;
import com.azure.resourcemanager.netapp.models.HourlySchedule;
import com.azure.resourcemanager.netapp.models.MonthlySchedule;
import com.azure.resourcemanager.netapp.models.SnapshotPolicyPatch;
import com.azure.resourcemanager.netapp.models.WeeklySchedule;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SnapshotPolicyPatchTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SnapshotPolicyPatch model =
            BinaryData
                .fromString(
                    "{\"location\":\"cdpu\",\"id\":\"zgmwznmabikns\",\"name\":\"gj\",\"type\":\"bldtlww\",\"tags\":{\"ok\":\"dmtnc\",\"tdtbnnhadooc\":\"tllxdyhgsyocogj\",\"hnvpamqgxq\":\"kvci\",\"zikywgg\":\"u\"},\"properties\":{\"hourlySchedule\":{\"snapshotsToKeep\":395512854,\"minute\":1147972125,\"usedBytes\":8033658748454090244},\"dailySchedule\":{\"snapshotsToKeep\":1138450132,\"hour\":1750624466,\"minute\":1103817240,\"usedBytes\":3582818879320857671},\"weeklySchedule\":{\"snapshotsToKeep\":154268521,\"day\":\"vvcnayr\",\"hour\":108895877,\"minute\":1925040131,\"usedBytes\":5726286891049833981},\"monthlySchedule\":{\"snapshotsToKeep\":2127430069,\"daysOfMonth\":\"drd\",\"hour\":817024636,\"minute\":467483193,\"usedBytes\":3301219158336825133},\"enabled\":true,\"provisioningState\":\"alm\"}}")
                .toObject(SnapshotPolicyPatch.class);
        Assertions.assertEquals("cdpu", model.location());
        Assertions.assertEquals("dmtnc", model.tags().get("ok"));
        Assertions.assertEquals(395512854, model.hourlySchedule().snapshotsToKeep());
        Assertions.assertEquals(1147972125, model.hourlySchedule().minute());
        Assertions.assertEquals(8033658748454090244L, model.hourlySchedule().usedBytes());
        Assertions.assertEquals(1138450132, model.dailySchedule().snapshotsToKeep());
        Assertions.assertEquals(1750624466, model.dailySchedule().hour());
        Assertions.assertEquals(1103817240, model.dailySchedule().minute());
        Assertions.assertEquals(3582818879320857671L, model.dailySchedule().usedBytes());
        Assertions.assertEquals(154268521, model.weeklySchedule().snapshotsToKeep());
        Assertions.assertEquals("vvcnayr", model.weeklySchedule().day());
        Assertions.assertEquals(108895877, model.weeklySchedule().hour());
        Assertions.assertEquals(1925040131, model.weeklySchedule().minute());
        Assertions.assertEquals(5726286891049833981L, model.weeklySchedule().usedBytes());
        Assertions.assertEquals(2127430069, model.monthlySchedule().snapshotsToKeep());
        Assertions.assertEquals("drd", model.monthlySchedule().daysOfMonth());
        Assertions.assertEquals(817024636, model.monthlySchedule().hour());
        Assertions.assertEquals(467483193, model.monthlySchedule().minute());
        Assertions.assertEquals(3301219158336825133L, model.monthlySchedule().usedBytes());
        Assertions.assertEquals(true, model.enabled());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SnapshotPolicyPatch model =
            new SnapshotPolicyPatch()
                .withLocation("cdpu")
                .withTags(mapOf("ok", "dmtnc", "tdtbnnhadooc", "tllxdyhgsyocogj", "hnvpamqgxq", "kvci", "zikywgg", "u"))
                .withHourlySchedule(
                    new HourlySchedule()
                        .withSnapshotsToKeep(395512854)
                        .withMinute(1147972125)
                        .withUsedBytes(8033658748454090244L))
                .withDailySchedule(
                    new DailySchedule()
                        .withSnapshotsToKeep(1138450132)
                        .withHour(1750624466)
                        .withMinute(1103817240)
                        .withUsedBytes(3582818879320857671L))
                .withWeeklySchedule(
                    new WeeklySchedule()
                        .withSnapshotsToKeep(154268521)
                        .withDay("vvcnayr")
                        .withHour(108895877)
                        .withMinute(1925040131)
                        .withUsedBytes(5726286891049833981L))
                .withMonthlySchedule(
                    new MonthlySchedule()
                        .withSnapshotsToKeep(2127430069)
                        .withDaysOfMonth("drd")
                        .withHour(817024636)
                        .withMinute(467483193)
                        .withUsedBytes(3301219158336825133L))
                .withEnabled(true);
        model = BinaryData.fromObject(model).toObject(SnapshotPolicyPatch.class);
        Assertions.assertEquals("cdpu", model.location());
        Assertions.assertEquals("dmtnc", model.tags().get("ok"));
        Assertions.assertEquals(395512854, model.hourlySchedule().snapshotsToKeep());
        Assertions.assertEquals(1147972125, model.hourlySchedule().minute());
        Assertions.assertEquals(8033658748454090244L, model.hourlySchedule().usedBytes());
        Assertions.assertEquals(1138450132, model.dailySchedule().snapshotsToKeep());
        Assertions.assertEquals(1750624466, model.dailySchedule().hour());
        Assertions.assertEquals(1103817240, model.dailySchedule().minute());
        Assertions.assertEquals(3582818879320857671L, model.dailySchedule().usedBytes());
        Assertions.assertEquals(154268521, model.weeklySchedule().snapshotsToKeep());
        Assertions.assertEquals("vvcnayr", model.weeklySchedule().day());
        Assertions.assertEquals(108895877, model.weeklySchedule().hour());
        Assertions.assertEquals(1925040131, model.weeklySchedule().minute());
        Assertions.assertEquals(5726286891049833981L, model.weeklySchedule().usedBytes());
        Assertions.assertEquals(2127430069, model.monthlySchedule().snapshotsToKeep());
        Assertions.assertEquals("drd", model.monthlySchedule().daysOfMonth());
        Assertions.assertEquals(817024636, model.monthlySchedule().hour());
        Assertions.assertEquals(467483193, model.monthlySchedule().minute());
        Assertions.assertEquals(3301219158336825133L, model.monthlySchedule().usedBytes());
        Assertions.assertEquals(true, model.enabled());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
