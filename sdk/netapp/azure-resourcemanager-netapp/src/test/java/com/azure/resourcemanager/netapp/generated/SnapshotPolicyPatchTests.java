// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.netapp.models.DailySchedule;
import com.azure.resourcemanager.netapp.models.HourlySchedule;
import com.azure.resourcemanager.netapp.models.MonthlySchedule;
import com.azure.resourcemanager.netapp.models.SnapshotPolicyPatch;
import com.azure.resourcemanager.netapp.models.WeeklySchedule;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SnapshotPolicyPatchTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SnapshotPolicyPatch model = BinaryData.fromString(
            "{\"location\":\"r\",\"id\":\"dsnfdsdoakgtdl\",\"name\":\"kzevdlhewpusds\",\"type\":\"wvogvbbejdc\",\"tags\":{\"ufgmjzrwrdg\":\"qmoa\",\"bminrfdwoyuhhzi\":\"twaenuuzko\"},\"properties\":{\"hourlySchedule\":{\"snapshotsToKeep\":1032750510,\"minute\":1209152959,\"usedBytes\":6074773218082221902},\"dailySchedule\":{\"snapshotsToKeep\":9753041,\"hour\":1101350352,\"minute\":1130868680,\"usedBytes\":1203862565285552699},\"weeklySchedule\":{\"snapshotsToKeep\":466480272,\"day\":\"qu\",\"hour\":674060065,\"minute\":1894418598,\"usedBytes\":4284376679308974213},\"monthlySchedule\":{\"snapshotsToKeep\":326357229,\"daysOfMonth\":\"z\",\"hour\":1413149705,\"minute\":2064945633,\"usedBytes\":4209147679224285340},\"enabled\":true,\"provisioningState\":\"hc\"}}")
            .toObject(SnapshotPolicyPatch.class);
        Assertions.assertEquals("r", model.location());
        Assertions.assertEquals("qmoa", model.tags().get("ufgmjzrwrdg"));
        Assertions.assertEquals(1032750510, model.hourlySchedule().snapshotsToKeep());
        Assertions.assertEquals(1209152959, model.hourlySchedule().minute());
        Assertions.assertEquals(6074773218082221902L, model.hourlySchedule().usedBytes());
        Assertions.assertEquals(9753041, model.dailySchedule().snapshotsToKeep());
        Assertions.assertEquals(1101350352, model.dailySchedule().hour());
        Assertions.assertEquals(1130868680, model.dailySchedule().minute());
        Assertions.assertEquals(1203862565285552699L, model.dailySchedule().usedBytes());
        Assertions.assertEquals(466480272, model.weeklySchedule().snapshotsToKeep());
        Assertions.assertEquals("qu", model.weeklySchedule().day());
        Assertions.assertEquals(674060065, model.weeklySchedule().hour());
        Assertions.assertEquals(1894418598, model.weeklySchedule().minute());
        Assertions.assertEquals(4284376679308974213L, model.weeklySchedule().usedBytes());
        Assertions.assertEquals(326357229, model.monthlySchedule().snapshotsToKeep());
        Assertions.assertEquals("z", model.monthlySchedule().daysOfMonth());
        Assertions.assertEquals(1413149705, model.monthlySchedule().hour());
        Assertions.assertEquals(2064945633, model.monthlySchedule().minute());
        Assertions.assertEquals(4209147679224285340L, model.monthlySchedule().usedBytes());
        Assertions.assertEquals(true, model.enabled());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SnapshotPolicyPatch model = new SnapshotPolicyPatch().withLocation("r")
            .withTags(mapOf("ufgmjzrwrdg", "qmoa", "bminrfdwoyuhhzi", "twaenuuzko"))
            .withHourlySchedule(new HourlySchedule().withSnapshotsToKeep(1032750510)
                .withMinute(1209152959)
                .withUsedBytes(6074773218082221902L))
            .withDailySchedule(new DailySchedule().withSnapshotsToKeep(9753041)
                .withHour(1101350352)
                .withMinute(1130868680)
                .withUsedBytes(1203862565285552699L))
            .withWeeklySchedule(new WeeklySchedule().withSnapshotsToKeep(466480272)
                .withDay("qu")
                .withHour(674060065)
                .withMinute(1894418598)
                .withUsedBytes(4284376679308974213L))
            .withMonthlySchedule(new MonthlySchedule().withSnapshotsToKeep(326357229)
                .withDaysOfMonth("z")
                .withHour(1413149705)
                .withMinute(2064945633)
                .withUsedBytes(4209147679224285340L))
            .withEnabled(true);
        model = BinaryData.fromObject(model).toObject(SnapshotPolicyPatch.class);
        Assertions.assertEquals("r", model.location());
        Assertions.assertEquals("qmoa", model.tags().get("ufgmjzrwrdg"));
        Assertions.assertEquals(1032750510, model.hourlySchedule().snapshotsToKeep());
        Assertions.assertEquals(1209152959, model.hourlySchedule().minute());
        Assertions.assertEquals(6074773218082221902L, model.hourlySchedule().usedBytes());
        Assertions.assertEquals(9753041, model.dailySchedule().snapshotsToKeep());
        Assertions.assertEquals(1101350352, model.dailySchedule().hour());
        Assertions.assertEquals(1130868680, model.dailySchedule().minute());
        Assertions.assertEquals(1203862565285552699L, model.dailySchedule().usedBytes());
        Assertions.assertEquals(466480272, model.weeklySchedule().snapshotsToKeep());
        Assertions.assertEquals("qu", model.weeklySchedule().day());
        Assertions.assertEquals(674060065, model.weeklySchedule().hour());
        Assertions.assertEquals(1894418598, model.weeklySchedule().minute());
        Assertions.assertEquals(4284376679308974213L, model.weeklySchedule().usedBytes());
        Assertions.assertEquals(326357229, model.monthlySchedule().snapshotsToKeep());
        Assertions.assertEquals("z", model.monthlySchedule().daysOfMonth());
        Assertions.assertEquals(1413149705, model.monthlySchedule().hour());
        Assertions.assertEquals(2064945633, model.monthlySchedule().minute());
        Assertions.assertEquals(4209147679224285340L, model.monthlySchedule().usedBytes());
        Assertions.assertEquals(true, model.enabled());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
