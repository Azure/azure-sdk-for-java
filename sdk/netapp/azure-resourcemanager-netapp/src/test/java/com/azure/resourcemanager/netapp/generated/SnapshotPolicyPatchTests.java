// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.netapp.models.DailySchedule;
import com.azure.resourcemanager.netapp.models.HourlySchedule;
import com.azure.resourcemanager.netapp.models.MonthlySchedule;
import com.azure.resourcemanager.netapp.models.SnapshotPolicyPatch;
import com.azure.resourcemanager.netapp.models.WeeklySchedule;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SnapshotPolicyPatchTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SnapshotPolicyPatch model = BinaryData.fromString(
            "{\"location\":\"uximerqfobw\",\"id\":\"nkbykutwpfhp\",\"name\":\"m\",\"type\":\"skdsnfdsdoakg\",\"tags\":{\"pusdstt\":\"mkkzevdlhe\"},\"properties\":{\"hourlySchedule\":{\"snapshotsToKeep\":221713689,\"minute\":1374887959,\"usedBytes\":8961912277389186223},\"dailySchedule\":{\"snapshotsToKeep\":764265895,\"hour\":963593520,\"minute\":1707404477,\"usedBytes\":6280653773540023560},\"weeklySchedule\":{\"snapshotsToKeep\":127978460,\"day\":\"zr\",\"hour\":1964426059,\"minute\":632499232,\"usedBytes\":3176004789206636237},\"monthlySchedule\":{\"snapshotsToKeep\":130436359,\"daysOfMonth\":\"zkopb\",\"hour\":1224978784,\"minute\":2010767026,\"usedBytes\":3596766973567409685},\"enabled\":true,\"provisioningState\":\"hziuiefozbhdms\"}}")
            .toObject(SnapshotPolicyPatch.class);
        Assertions.assertEquals("uximerqfobw", model.location());
        Assertions.assertEquals("mkkzevdlhe", model.tags().get("pusdstt"));
        Assertions.assertEquals(221713689, model.hourlySchedule().snapshotsToKeep());
        Assertions.assertEquals(1374887959, model.hourlySchedule().minute());
        Assertions.assertEquals(8961912277389186223L, model.hourlySchedule().usedBytes());
        Assertions.assertEquals(764265895, model.dailySchedule().snapshotsToKeep());
        Assertions.assertEquals(963593520, model.dailySchedule().hour());
        Assertions.assertEquals(1707404477, model.dailySchedule().minute());
        Assertions.assertEquals(6280653773540023560L, model.dailySchedule().usedBytes());
        Assertions.assertEquals(127978460, model.weeklySchedule().snapshotsToKeep());
        Assertions.assertEquals("zr", model.weeklySchedule().day());
        Assertions.assertEquals(1964426059, model.weeklySchedule().hour());
        Assertions.assertEquals(632499232, model.weeklySchedule().minute());
        Assertions.assertEquals(3176004789206636237L, model.weeklySchedule().usedBytes());
        Assertions.assertEquals(130436359, model.monthlySchedule().snapshotsToKeep());
        Assertions.assertEquals("zkopb", model.monthlySchedule().daysOfMonth());
        Assertions.assertEquals(1224978784, model.monthlySchedule().hour());
        Assertions.assertEquals(2010767026, model.monthlySchedule().minute());
        Assertions.assertEquals(3596766973567409685L, model.monthlySchedule().usedBytes());
        Assertions.assertEquals(true, model.enabled());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SnapshotPolicyPatch model = new SnapshotPolicyPatch().withLocation("uximerqfobw")
            .withTags(mapOf("pusdstt", "mkkzevdlhe"))
            .withHourlySchedule(new HourlySchedule().withSnapshotsToKeep(221713689)
                .withMinute(1374887959)
                .withUsedBytes(8961912277389186223L))
            .withDailySchedule(new DailySchedule().withSnapshotsToKeep(764265895)
                .withHour(963593520)
                .withMinute(1707404477)
                .withUsedBytes(6280653773540023560L))
            .withWeeklySchedule(new WeeklySchedule().withSnapshotsToKeep(127978460)
                .withDay("zr")
                .withHour(1964426059)
                .withMinute(632499232)
                .withUsedBytes(3176004789206636237L))
            .withMonthlySchedule(new MonthlySchedule().withSnapshotsToKeep(130436359)
                .withDaysOfMonth("zkopb")
                .withHour(1224978784)
                .withMinute(2010767026)
                .withUsedBytes(3596766973567409685L))
            .withEnabled(true);
        model = BinaryData.fromObject(model).toObject(SnapshotPolicyPatch.class);
        Assertions.assertEquals("uximerqfobw", model.location());
        Assertions.assertEquals("mkkzevdlhe", model.tags().get("pusdstt"));
        Assertions.assertEquals(221713689, model.hourlySchedule().snapshotsToKeep());
        Assertions.assertEquals(1374887959, model.hourlySchedule().minute());
        Assertions.assertEquals(8961912277389186223L, model.hourlySchedule().usedBytes());
        Assertions.assertEquals(764265895, model.dailySchedule().snapshotsToKeep());
        Assertions.assertEquals(963593520, model.dailySchedule().hour());
        Assertions.assertEquals(1707404477, model.dailySchedule().minute());
        Assertions.assertEquals(6280653773540023560L, model.dailySchedule().usedBytes());
        Assertions.assertEquals(127978460, model.weeklySchedule().snapshotsToKeep());
        Assertions.assertEquals("zr", model.weeklySchedule().day());
        Assertions.assertEquals(1964426059, model.weeklySchedule().hour());
        Assertions.assertEquals(632499232, model.weeklySchedule().minute());
        Assertions.assertEquals(3176004789206636237L, model.weeklySchedule().usedBytes());
        Assertions.assertEquals(130436359, model.monthlySchedule().snapshotsToKeep());
        Assertions.assertEquals("zkopb", model.monthlySchedule().daysOfMonth());
        Assertions.assertEquals(1224978784, model.monthlySchedule().hour());
        Assertions.assertEquals(2010767026, model.monthlySchedule().minute());
        Assertions.assertEquals(3596766973567409685L, model.monthlySchedule().usedBytes());
        Assertions.assertEquals(true, model.enabled());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
