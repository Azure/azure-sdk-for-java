// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.netapp.models.DailySchedule;
import com.azure.resourcemanager.netapp.models.HourlySchedule;
import com.azure.resourcemanager.netapp.models.MonthlySchedule;
import com.azure.resourcemanager.netapp.models.SnapshotPolicyPatch;
import com.azure.resourcemanager.netapp.models.WeeklySchedule;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SnapshotPolicyPatchTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SnapshotPolicyPatch model = BinaryData.fromString(
            "{\"location\":\"trthzvaytdwkqbr\",\"id\":\"bpaxhexiilivpdt\",\"name\":\"r\",\"type\":\"d\",\"tags\":{\"l\":\"xoruzfgsquyfxrx\",\"zwl\":\"ptramxj\",\"tdooaoj\":\"nwxuqlcvydyp\"},\"properties\":{\"hourlySchedule\":{\"snapshotsToKeep\":77495916,\"minute\":445064797,\"usedBytes\":9027749367936542516},\"dailySchedule\":{\"snapshotsToKeep\":2091031438,\"hour\":1107083346,\"minute\":1652844269,\"usedBytes\":7020759596140290301},\"weeklySchedule\":{\"snapshotsToKeep\":640428654,\"day\":\"rodtjinfwjlfl\",\"hour\":2134484633,\"minute\":1895840108,\"usedBytes\":6554962517387487109},\"monthlySchedule\":{\"snapshotsToKeep\":1598132802,\"daysOfMonth\":\"oakggkfpag\",\"hour\":577549105,\"minute\":1739461107,\"usedBytes\":7663132797462319571},\"enabled\":false,\"provisioningState\":\"lsyxkqjnsjervt\"}}")
            .toObject(SnapshotPolicyPatch.class);
        Assertions.assertEquals("trthzvaytdwkqbr", model.location());
        Assertions.assertEquals("xoruzfgsquyfxrx", model.tags().get("l"));
        Assertions.assertEquals(77495916, model.hourlySchedule().snapshotsToKeep());
        Assertions.assertEquals(445064797, model.hourlySchedule().minute());
        Assertions.assertEquals(9027749367936542516L, model.hourlySchedule().usedBytes());
        Assertions.assertEquals(2091031438, model.dailySchedule().snapshotsToKeep());
        Assertions.assertEquals(1107083346, model.dailySchedule().hour());
        Assertions.assertEquals(1652844269, model.dailySchedule().minute());
        Assertions.assertEquals(7020759596140290301L, model.dailySchedule().usedBytes());
        Assertions.assertEquals(640428654, model.weeklySchedule().snapshotsToKeep());
        Assertions.assertEquals("rodtjinfwjlfl", model.weeklySchedule().day());
        Assertions.assertEquals(2134484633, model.weeklySchedule().hour());
        Assertions.assertEquals(1895840108, model.weeklySchedule().minute());
        Assertions.assertEquals(6554962517387487109L, model.weeklySchedule().usedBytes());
        Assertions.assertEquals(1598132802, model.monthlySchedule().snapshotsToKeep());
        Assertions.assertEquals("oakggkfpag", model.monthlySchedule().daysOfMonth());
        Assertions.assertEquals(577549105, model.monthlySchedule().hour());
        Assertions.assertEquals(1739461107, model.monthlySchedule().minute());
        Assertions.assertEquals(7663132797462319571L, model.monthlySchedule().usedBytes());
        Assertions.assertEquals(false, model.enabled());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SnapshotPolicyPatch model = new SnapshotPolicyPatch().withLocation("trthzvaytdwkqbr")
            .withTags(mapOf("l", "xoruzfgsquyfxrx", "zwl", "ptramxj", "tdooaoj", "nwxuqlcvydyp"))
            .withHourlySchedule(new HourlySchedule().withSnapshotsToKeep(77495916)
                .withMinute(445064797)
                .withUsedBytes(9027749367936542516L))
            .withDailySchedule(new DailySchedule().withSnapshotsToKeep(2091031438)
                .withHour(1107083346)
                .withMinute(1652844269)
                .withUsedBytes(7020759596140290301L))
            .withWeeklySchedule(new WeeklySchedule().withSnapshotsToKeep(640428654)
                .withDay("rodtjinfwjlfl")
                .withHour(2134484633)
                .withMinute(1895840108)
                .withUsedBytes(6554962517387487109L))
            .withMonthlySchedule(new MonthlySchedule().withSnapshotsToKeep(1598132802)
                .withDaysOfMonth("oakggkfpag")
                .withHour(577549105)
                .withMinute(1739461107)
                .withUsedBytes(7663132797462319571L))
            .withEnabled(false);
        model = BinaryData.fromObject(model).toObject(SnapshotPolicyPatch.class);
        Assertions.assertEquals("trthzvaytdwkqbr", model.location());
        Assertions.assertEquals("xoruzfgsquyfxrx", model.tags().get("l"));
        Assertions.assertEquals(77495916, model.hourlySchedule().snapshotsToKeep());
        Assertions.assertEquals(445064797, model.hourlySchedule().minute());
        Assertions.assertEquals(9027749367936542516L, model.hourlySchedule().usedBytes());
        Assertions.assertEquals(2091031438, model.dailySchedule().snapshotsToKeep());
        Assertions.assertEquals(1107083346, model.dailySchedule().hour());
        Assertions.assertEquals(1652844269, model.dailySchedule().minute());
        Assertions.assertEquals(7020759596140290301L, model.dailySchedule().usedBytes());
        Assertions.assertEquals(640428654, model.weeklySchedule().snapshotsToKeep());
        Assertions.assertEquals("rodtjinfwjlfl", model.weeklySchedule().day());
        Assertions.assertEquals(2134484633, model.weeklySchedule().hour());
        Assertions.assertEquals(1895840108, model.weeklySchedule().minute());
        Assertions.assertEquals(6554962517387487109L, model.weeklySchedule().usedBytes());
        Assertions.assertEquals(1598132802, model.monthlySchedule().snapshotsToKeep());
        Assertions.assertEquals("oakggkfpag", model.monthlySchedule().daysOfMonth());
        Assertions.assertEquals(577549105, model.monthlySchedule().hour());
        Assertions.assertEquals(1739461107, model.monthlySchedule().minute());
        Assertions.assertEquals(7663132797462319571L, model.monthlySchedule().usedBytes());
        Assertions.assertEquals(false, model.enabled());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
