// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.netapp.models.DailySchedule;
import com.azure.resourcemanager.netapp.models.HourlySchedule;
import com.azure.resourcemanager.netapp.models.MonthlySchedule;
import com.azure.resourcemanager.netapp.models.SnapshotPolicyPatch;
import com.azure.resourcemanager.netapp.models.WeeklySchedule;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SnapshotPolicyPatchTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SnapshotPolicyPatch model = BinaryData.fromString(
            "{\"location\":\"htwdwrftswibyrcd\",\"id\":\"h\",\"name\":\"fwpracstwi\",\"type\":\"khevxccedc\",\"tags\":{\"vnhltiugcx\":\"dyodnwzxltj\"},\"properties\":{\"hourlySchedule\":{\"snapshotsToKeep\":1627588082,\"minute\":836619519,\"usedBytes\":8209456551947561442},\"dailySchedule\":{\"snapshotsToKeep\":1643458041,\"hour\":601869733,\"minute\":1874068657,\"usedBytes\":8184174444781433747},\"weeklySchedule\":{\"snapshotsToKeep\":1183604183,\"day\":\"vfgbvfvpdboda\",\"hour\":1592823352,\"minute\":218756340,\"usedBytes\":8303913431627699430},\"monthlySchedule\":{\"snapshotsToKeep\":218475539,\"daysOfMonth\":\"bdeibqipqk\",\"hour\":1234217414,\"minute\":370586550,\"usedBytes\":4034217572792949127},\"enabled\":true,\"provisioningState\":\"efajpj\"}}")
            .toObject(SnapshotPolicyPatch.class);
        Assertions.assertEquals("htwdwrftswibyrcd", model.location());
        Assertions.assertEquals("dyodnwzxltj", model.tags().get("vnhltiugcx"));
        Assertions.assertEquals(1627588082, model.hourlySchedule().snapshotsToKeep());
        Assertions.assertEquals(836619519, model.hourlySchedule().minute());
        Assertions.assertEquals(8209456551947561442L, model.hourlySchedule().usedBytes());
        Assertions.assertEquals(1643458041, model.dailySchedule().snapshotsToKeep());
        Assertions.assertEquals(601869733, model.dailySchedule().hour());
        Assertions.assertEquals(1874068657, model.dailySchedule().minute());
        Assertions.assertEquals(8184174444781433747L, model.dailySchedule().usedBytes());
        Assertions.assertEquals(1183604183, model.weeklySchedule().snapshotsToKeep());
        Assertions.assertEquals("vfgbvfvpdboda", model.weeklySchedule().day());
        Assertions.assertEquals(1592823352, model.weeklySchedule().hour());
        Assertions.assertEquals(218756340, model.weeklySchedule().minute());
        Assertions.assertEquals(8303913431627699430L, model.weeklySchedule().usedBytes());
        Assertions.assertEquals(218475539, model.monthlySchedule().snapshotsToKeep());
        Assertions.assertEquals("bdeibqipqk", model.monthlySchedule().daysOfMonth());
        Assertions.assertEquals(1234217414, model.monthlySchedule().hour());
        Assertions.assertEquals(370586550, model.monthlySchedule().minute());
        Assertions.assertEquals(4034217572792949127L, model.monthlySchedule().usedBytes());
        Assertions.assertTrue(model.enabled());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SnapshotPolicyPatch model = new SnapshotPolicyPatch().withLocation("htwdwrftswibyrcd")
            .withTags(mapOf("vnhltiugcx", "dyodnwzxltj"))
            .withHourlySchedule(new HourlySchedule().withSnapshotsToKeep(1627588082)
                .withMinute(836619519)
                .withUsedBytes(8209456551947561442L))
            .withDailySchedule(new DailySchedule().withSnapshotsToKeep(1643458041)
                .withHour(601869733)
                .withMinute(1874068657)
                .withUsedBytes(8184174444781433747L))
            .withWeeklySchedule(new WeeklySchedule().withSnapshotsToKeep(1183604183)
                .withDay("vfgbvfvpdboda")
                .withHour(1592823352)
                .withMinute(218756340)
                .withUsedBytes(8303913431627699430L))
            .withMonthlySchedule(new MonthlySchedule().withSnapshotsToKeep(218475539)
                .withDaysOfMonth("bdeibqipqk")
                .withHour(1234217414)
                .withMinute(370586550)
                .withUsedBytes(4034217572792949127L))
            .withEnabled(true);
        model = BinaryData.fromObject(model).toObject(SnapshotPolicyPatch.class);
        Assertions.assertEquals("htwdwrftswibyrcd", model.location());
        Assertions.assertEquals("dyodnwzxltj", model.tags().get("vnhltiugcx"));
        Assertions.assertEquals(1627588082, model.hourlySchedule().snapshotsToKeep());
        Assertions.assertEquals(836619519, model.hourlySchedule().minute());
        Assertions.assertEquals(8209456551947561442L, model.hourlySchedule().usedBytes());
        Assertions.assertEquals(1643458041, model.dailySchedule().snapshotsToKeep());
        Assertions.assertEquals(601869733, model.dailySchedule().hour());
        Assertions.assertEquals(1874068657, model.dailySchedule().minute());
        Assertions.assertEquals(8184174444781433747L, model.dailySchedule().usedBytes());
        Assertions.assertEquals(1183604183, model.weeklySchedule().snapshotsToKeep());
        Assertions.assertEquals("vfgbvfvpdboda", model.weeklySchedule().day());
        Assertions.assertEquals(1592823352, model.weeklySchedule().hour());
        Assertions.assertEquals(218756340, model.weeklySchedule().minute());
        Assertions.assertEquals(8303913431627699430L, model.weeklySchedule().usedBytes());
        Assertions.assertEquals(218475539, model.monthlySchedule().snapshotsToKeep());
        Assertions.assertEquals("bdeibqipqk", model.monthlySchedule().daysOfMonth());
        Assertions.assertEquals(1234217414, model.monthlySchedule().hour());
        Assertions.assertEquals(370586550, model.monthlySchedule().minute());
        Assertions.assertEquals(4034217572792949127L, model.monthlySchedule().usedBytes());
        Assertions.assertTrue(model.enabled());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
