// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.netapp.models.DailySchedule;
import com.azure.resourcemanager.netapp.models.HourlySchedule;
import com.azure.resourcemanager.netapp.models.MonthlySchedule;
import com.azure.resourcemanager.netapp.models.SnapshotPolicyPatch;
import com.azure.resourcemanager.netapp.models.WeeklySchedule;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SnapshotPolicyPatchTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SnapshotPolicyPatch model = BinaryData.fromString(
            "{\"location\":\"sttwvogvbbe\",\"id\":\"cngqqmoakufgmjz\",\"name\":\"rdgrtw\",\"type\":\"nuuzkopbm\",\"tags\":{\"iuiefozbhdmsm\":\"fdwoyuhh\",\"hxicslfaoqz\":\"mzqhoftrmaequi\"},\"properties\":{\"hourlySchedule\":{\"snapshotsToKeep\":2064945633,\"minute\":980018563,\"usedBytes\":6031076886992856914},\"dailySchedule\":{\"snapshotsToKeep\":794293283,\"hour\":343960452,\"minute\":790351827,\"usedBytes\":3850262039144476972},\"weeklySchedule\":{\"snapshotsToKeep\":2011273129,\"day\":\"qscywu\",\"hour\":1839231877,\"minute\":1724962177,\"usedBytes\":405539869253425983},\"monthlySchedule\":{\"snapshotsToKeep\":600880906,\"daysOfMonth\":\"mhairsbrgzdwmsw\",\"hour\":827255205,\"minute\":101691596,\"usedBytes\":8266081369241174614},\"enabled\":false,\"provisioningState\":\"ccnxqhuex\"}}")
            .toObject(SnapshotPolicyPatch.class);
        Assertions.assertEquals("sttwvogvbbe", model.location());
        Assertions.assertEquals("fdwoyuhh", model.tags().get("iuiefozbhdmsm"));
        Assertions.assertEquals(2064945633, model.hourlySchedule().snapshotsToKeep());
        Assertions.assertEquals(980018563, model.hourlySchedule().minute());
        Assertions.assertEquals(6031076886992856914L, model.hourlySchedule().usedBytes());
        Assertions.assertEquals(794293283, model.dailySchedule().snapshotsToKeep());
        Assertions.assertEquals(343960452, model.dailySchedule().hour());
        Assertions.assertEquals(790351827, model.dailySchedule().minute());
        Assertions.assertEquals(3850262039144476972L, model.dailySchedule().usedBytes());
        Assertions.assertEquals(2011273129, model.weeklySchedule().snapshotsToKeep());
        Assertions.assertEquals("qscywu", model.weeklySchedule().day());
        Assertions.assertEquals(1839231877, model.weeklySchedule().hour());
        Assertions.assertEquals(1724962177, model.weeklySchedule().minute());
        Assertions.assertEquals(405539869253425983L, model.weeklySchedule().usedBytes());
        Assertions.assertEquals(600880906, model.monthlySchedule().snapshotsToKeep());
        Assertions.assertEquals("mhairsbrgzdwmsw", model.monthlySchedule().daysOfMonth());
        Assertions.assertEquals(827255205, model.monthlySchedule().hour());
        Assertions.assertEquals(101691596, model.monthlySchedule().minute());
        Assertions.assertEquals(8266081369241174614L, model.monthlySchedule().usedBytes());
        Assertions.assertEquals(false, model.enabled());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SnapshotPolicyPatch model = new SnapshotPolicyPatch().withLocation("sttwvogvbbe")
            .withTags(mapOf("iuiefozbhdmsm", "fdwoyuhh", "hxicslfaoqz", "mzqhoftrmaequi"))
            .withHourlySchedule(new HourlySchedule().withSnapshotsToKeep(2064945633)
                .withMinute(980018563)
                .withUsedBytes(6031076886992856914L))
            .withDailySchedule(new DailySchedule().withSnapshotsToKeep(794293283)
                .withHour(343960452)
                .withMinute(790351827)
                .withUsedBytes(3850262039144476972L))
            .withWeeklySchedule(new WeeklySchedule().withSnapshotsToKeep(2011273129)
                .withDay("qscywu")
                .withHour(1839231877)
                .withMinute(1724962177)
                .withUsedBytes(405539869253425983L))
            .withMonthlySchedule(new MonthlySchedule().withSnapshotsToKeep(600880906)
                .withDaysOfMonth("mhairsbrgzdwmsw")
                .withHour(827255205)
                .withMinute(101691596)
                .withUsedBytes(8266081369241174614L))
            .withEnabled(false);
        model = BinaryData.fromObject(model).toObject(SnapshotPolicyPatch.class);
        Assertions.assertEquals("sttwvogvbbe", model.location());
        Assertions.assertEquals("fdwoyuhh", model.tags().get("iuiefozbhdmsm"));
        Assertions.assertEquals(2064945633, model.hourlySchedule().snapshotsToKeep());
        Assertions.assertEquals(980018563, model.hourlySchedule().minute());
        Assertions.assertEquals(6031076886992856914L, model.hourlySchedule().usedBytes());
        Assertions.assertEquals(794293283, model.dailySchedule().snapshotsToKeep());
        Assertions.assertEquals(343960452, model.dailySchedule().hour());
        Assertions.assertEquals(790351827, model.dailySchedule().minute());
        Assertions.assertEquals(3850262039144476972L, model.dailySchedule().usedBytes());
        Assertions.assertEquals(2011273129, model.weeklySchedule().snapshotsToKeep());
        Assertions.assertEquals("qscywu", model.weeklySchedule().day());
        Assertions.assertEquals(1839231877, model.weeklySchedule().hour());
        Assertions.assertEquals(1724962177, model.weeklySchedule().minute());
        Assertions.assertEquals(405539869253425983L, model.weeklySchedule().usedBytes());
        Assertions.assertEquals(600880906, model.monthlySchedule().snapshotsToKeep());
        Assertions.assertEquals("mhairsbrgzdwmsw", model.monthlySchedule().daysOfMonth());
        Assertions.assertEquals(827255205, model.monthlySchedule().hour());
        Assertions.assertEquals(101691596, model.monthlySchedule().minute());
        Assertions.assertEquals(8266081369241174614L, model.monthlySchedule().usedBytes());
        Assertions.assertEquals(false, model.enabled());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
