// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.netapp.models.DailySchedule;
import com.azure.resourcemanager.netapp.models.HourlySchedule;
import com.azure.resourcemanager.netapp.models.MonthlySchedule;
import com.azure.resourcemanager.netapp.models.SnapshotPolicyPatch;
import com.azure.resourcemanager.netapp.models.WeeklySchedule;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SnapshotPolicyPatchTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SnapshotPolicyPatch model = BinaryData.fromString(
            "{\"location\":\"sz\",\"id\":\"mpsbzkfzbeyv\",\"name\":\"qi\",\"type\":\"invkjjxdxrbuu\",\"tags\":{\"zpof\":\"lewyhmlwpaz\",\"qa\":\"cckwyfzqwhxxbu\"},\"properties\":{\"hourlySchedule\":{\"snapshotsToKeep\":1280631673,\"minute\":608343994,\"usedBytes\":5894027165628852811},\"dailySchedule\":{\"snapshotsToKeep\":1872827948,\"hour\":411799174,\"minute\":110839155,\"usedBytes\":1269488169933236475},\"weeklySchedule\":{\"snapshotsToKeep\":1325987050,\"day\":\"cwsobqwcs\",\"hour\":1806206586,\"minute\":358085488,\"usedBytes\":1296933680465064139},\"monthlySchedule\":{\"snapshotsToKeep\":1589501712,\"daysOfMonth\":\"pfuvglsbjjca\",\"hour\":1995846414,\"minute\":1075232734,\"usedBytes\":652867049720214090},\"enabled\":false,\"provisioningState\":\"ncormrlxqtvcof\"}}")
            .toObject(SnapshotPolicyPatch.class);
        Assertions.assertEquals("sz", model.location());
        Assertions.assertEquals("lewyhmlwpaz", model.tags().get("zpof"));
        Assertions.assertEquals(1280631673, model.hourlySchedule().snapshotsToKeep());
        Assertions.assertEquals(608343994, model.hourlySchedule().minute());
        Assertions.assertEquals(5894027165628852811L, model.hourlySchedule().usedBytes());
        Assertions.assertEquals(1872827948, model.dailySchedule().snapshotsToKeep());
        Assertions.assertEquals(411799174, model.dailySchedule().hour());
        Assertions.assertEquals(110839155, model.dailySchedule().minute());
        Assertions.assertEquals(1269488169933236475L, model.dailySchedule().usedBytes());
        Assertions.assertEquals(1325987050, model.weeklySchedule().snapshotsToKeep());
        Assertions.assertEquals("cwsobqwcs", model.weeklySchedule().day());
        Assertions.assertEquals(1806206586, model.weeklySchedule().hour());
        Assertions.assertEquals(358085488, model.weeklySchedule().minute());
        Assertions.assertEquals(1296933680465064139L, model.weeklySchedule().usedBytes());
        Assertions.assertEquals(1589501712, model.monthlySchedule().snapshotsToKeep());
        Assertions.assertEquals("pfuvglsbjjca", model.monthlySchedule().daysOfMonth());
        Assertions.assertEquals(1995846414, model.monthlySchedule().hour());
        Assertions.assertEquals(1075232734, model.monthlySchedule().minute());
        Assertions.assertEquals(652867049720214090L, model.monthlySchedule().usedBytes());
        Assertions.assertEquals(false, model.enabled());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SnapshotPolicyPatch model = new SnapshotPolicyPatch().withLocation("sz")
            .withTags(mapOf("zpof", "lewyhmlwpaz", "qa", "cckwyfzqwhxxbu"))
            .withHourlySchedule(new HourlySchedule().withSnapshotsToKeep(1280631673)
                .withMinute(608343994)
                .withUsedBytes(5894027165628852811L))
            .withDailySchedule(new DailySchedule().withSnapshotsToKeep(1872827948)
                .withHour(411799174)
                .withMinute(110839155)
                .withUsedBytes(1269488169933236475L))
            .withWeeklySchedule(new WeeklySchedule().withSnapshotsToKeep(1325987050)
                .withDay("cwsobqwcs")
                .withHour(1806206586)
                .withMinute(358085488)
                .withUsedBytes(1296933680465064139L))
            .withMonthlySchedule(new MonthlySchedule().withSnapshotsToKeep(1589501712)
                .withDaysOfMonth("pfuvglsbjjca")
                .withHour(1995846414)
                .withMinute(1075232734)
                .withUsedBytes(652867049720214090L))
            .withEnabled(false);
        model = BinaryData.fromObject(model).toObject(SnapshotPolicyPatch.class);
        Assertions.assertEquals("sz", model.location());
        Assertions.assertEquals("lewyhmlwpaz", model.tags().get("zpof"));
        Assertions.assertEquals(1280631673, model.hourlySchedule().snapshotsToKeep());
        Assertions.assertEquals(608343994, model.hourlySchedule().minute());
        Assertions.assertEquals(5894027165628852811L, model.hourlySchedule().usedBytes());
        Assertions.assertEquals(1872827948, model.dailySchedule().snapshotsToKeep());
        Assertions.assertEquals(411799174, model.dailySchedule().hour());
        Assertions.assertEquals(110839155, model.dailySchedule().minute());
        Assertions.assertEquals(1269488169933236475L, model.dailySchedule().usedBytes());
        Assertions.assertEquals(1325987050, model.weeklySchedule().snapshotsToKeep());
        Assertions.assertEquals("cwsobqwcs", model.weeklySchedule().day());
        Assertions.assertEquals(1806206586, model.weeklySchedule().hour());
        Assertions.assertEquals(358085488, model.weeklySchedule().minute());
        Assertions.assertEquals(1296933680465064139L, model.weeklySchedule().usedBytes());
        Assertions.assertEquals(1589501712, model.monthlySchedule().snapshotsToKeep());
        Assertions.assertEquals("pfuvglsbjjca", model.monthlySchedule().daysOfMonth());
        Assertions.assertEquals(1995846414, model.monthlySchedule().hour());
        Assertions.assertEquals(1075232734, model.monthlySchedule().minute());
        Assertions.assertEquals(652867049720214090L, model.monthlySchedule().usedBytes());
        Assertions.assertEquals(false, model.enabled());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
