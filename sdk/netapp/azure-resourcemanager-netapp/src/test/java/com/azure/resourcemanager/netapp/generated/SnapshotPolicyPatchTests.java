// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.netapp.models.DailySchedule;
import com.azure.resourcemanager.netapp.models.HourlySchedule;
import com.azure.resourcemanager.netapp.models.MonthlySchedule;
import com.azure.resourcemanager.netapp.models.SnapshotPolicyPatch;
import com.azure.resourcemanager.netapp.models.WeeklySchedule;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SnapshotPolicyPatchTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SnapshotPolicyPatch model = BinaryData.fromString(
            "{\"location\":\"ojvdcpzfoqo\",\"id\":\"cybxa\",\"name\":\"gszufoxciqopid\",\"type\":\"mciodhkhazxkhn\",\"tags\":{\"okdwb\":\"nlwntoe\",\"cmrvexzt\":\"hksz\",\"gsfraoyzkoow\":\"bt\"},\"properties\":{\"hourlySchedule\":{\"snapshotsToKeep\":1663606623,\"minute\":1523878268,\"usedBytes\":8390359388948965260},\"dailySchedule\":{\"snapshotsToKeep\":1506529335,\"hour\":2048944312,\"minute\":590697552,\"usedBytes\":4613349711608649524},\"weeklySchedule\":{\"snapshotsToKeep\":1784889478,\"day\":\"obwyznkb\",\"hour\":1828204425,\"minute\":1183252215,\"usedBytes\":6293103125482065030},\"monthlySchedule\":{\"snapshotsToKeep\":2014772944,\"daysOfMonth\":\"hrskdsnfd\",\"hour\":1139028210,\"minute\":357492176,\"usedBytes\":2205573976502795115},\"enabled\":true,\"provisioningState\":\"kzevdlhewpusds\"}}")
            .toObject(SnapshotPolicyPatch.class);
        Assertions.assertEquals("ojvdcpzfoqo", model.location());
        Assertions.assertEquals("nlwntoe", model.tags().get("okdwb"));
        Assertions.assertEquals(1663606623, model.hourlySchedule().snapshotsToKeep());
        Assertions.assertEquals(1523878268, model.hourlySchedule().minute());
        Assertions.assertEquals(8390359388948965260L, model.hourlySchedule().usedBytes());
        Assertions.assertEquals(1506529335, model.dailySchedule().snapshotsToKeep());
        Assertions.assertEquals(2048944312, model.dailySchedule().hour());
        Assertions.assertEquals(590697552, model.dailySchedule().minute());
        Assertions.assertEquals(4613349711608649524L, model.dailySchedule().usedBytes());
        Assertions.assertEquals(1784889478, model.weeklySchedule().snapshotsToKeep());
        Assertions.assertEquals("obwyznkb", model.weeklySchedule().day());
        Assertions.assertEquals(1828204425, model.weeklySchedule().hour());
        Assertions.assertEquals(1183252215, model.weeklySchedule().minute());
        Assertions.assertEquals(6293103125482065030L, model.weeklySchedule().usedBytes());
        Assertions.assertEquals(2014772944, model.monthlySchedule().snapshotsToKeep());
        Assertions.assertEquals("hrskdsnfd", model.monthlySchedule().daysOfMonth());
        Assertions.assertEquals(1139028210, model.monthlySchedule().hour());
        Assertions.assertEquals(357492176, model.monthlySchedule().minute());
        Assertions.assertEquals(2205573976502795115L, model.monthlySchedule().usedBytes());
        Assertions.assertEquals(true, model.enabled());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SnapshotPolicyPatch model = new SnapshotPolicyPatch().withLocation("ojvdcpzfoqo")
            .withTags(mapOf("okdwb", "nlwntoe", "cmrvexzt", "hksz", "gsfraoyzkoow", "bt"))
            .withHourlySchedule(new HourlySchedule().withSnapshotsToKeep(1663606623)
                .withMinute(1523878268)
                .withUsedBytes(8390359388948965260L))
            .withDailySchedule(new DailySchedule().withSnapshotsToKeep(1506529335)
                .withHour(2048944312)
                .withMinute(590697552)
                .withUsedBytes(4613349711608649524L))
            .withWeeklySchedule(new WeeklySchedule().withSnapshotsToKeep(1784889478)
                .withDay("obwyznkb")
                .withHour(1828204425)
                .withMinute(1183252215)
                .withUsedBytes(6293103125482065030L))
            .withMonthlySchedule(new MonthlySchedule().withSnapshotsToKeep(2014772944)
                .withDaysOfMonth("hrskdsnfd")
                .withHour(1139028210)
                .withMinute(357492176)
                .withUsedBytes(2205573976502795115L))
            .withEnabled(true);
        model = BinaryData.fromObject(model).toObject(SnapshotPolicyPatch.class);
        Assertions.assertEquals("ojvdcpzfoqo", model.location());
        Assertions.assertEquals("nlwntoe", model.tags().get("okdwb"));
        Assertions.assertEquals(1663606623, model.hourlySchedule().snapshotsToKeep());
        Assertions.assertEquals(1523878268, model.hourlySchedule().minute());
        Assertions.assertEquals(8390359388948965260L, model.hourlySchedule().usedBytes());
        Assertions.assertEquals(1506529335, model.dailySchedule().snapshotsToKeep());
        Assertions.assertEquals(2048944312, model.dailySchedule().hour());
        Assertions.assertEquals(590697552, model.dailySchedule().minute());
        Assertions.assertEquals(4613349711608649524L, model.dailySchedule().usedBytes());
        Assertions.assertEquals(1784889478, model.weeklySchedule().snapshotsToKeep());
        Assertions.assertEquals("obwyznkb", model.weeklySchedule().day());
        Assertions.assertEquals(1828204425, model.weeklySchedule().hour());
        Assertions.assertEquals(1183252215, model.weeklySchedule().minute());
        Assertions.assertEquals(6293103125482065030L, model.weeklySchedule().usedBytes());
        Assertions.assertEquals(2014772944, model.monthlySchedule().snapshotsToKeep());
        Assertions.assertEquals("hrskdsnfd", model.monthlySchedule().daysOfMonth());
        Assertions.assertEquals(1139028210, model.monthlySchedule().hour());
        Assertions.assertEquals(357492176, model.monthlySchedule().minute());
        Assertions.assertEquals(2205573976502795115L, model.monthlySchedule().usedBytes());
        Assertions.assertEquals(true, model.enabled());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
