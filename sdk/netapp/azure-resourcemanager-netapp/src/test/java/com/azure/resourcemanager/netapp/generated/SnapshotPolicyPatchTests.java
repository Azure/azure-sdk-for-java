// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.netapp.models.DailySchedule;
import com.azure.resourcemanager.netapp.models.HourlySchedule;
import com.azure.resourcemanager.netapp.models.MonthlySchedule;
import com.azure.resourcemanager.netapp.models.SnapshotPolicyPatch;
import com.azure.resourcemanager.netapp.models.WeeklySchedule;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SnapshotPolicyPatchTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SnapshotPolicyPatch model = BinaryData.fromString(
            "{\"location\":\"ylsyxkqjnsje\",\"id\":\"tiagx\",\"name\":\"sz\",\"type\":\"mpsbzkfzbeyv\",\"tags\":{\"v\":\"icvi\"},\"properties\":{\"hourlySchedule\":{\"snapshotsToKeep\":611015935,\"minute\":1970800751,\"usedBytes\":4841685687030485565},\"dailySchedule\":{\"snapshotsToKeep\":1867961627,\"hour\":1482696459,\"minute\":553106392,\"usedBytes\":7848587408426181580},\"weeklySchedule\":{\"snapshotsToKeep\":963182303,\"day\":\"tzpofncckwyfzq\",\"hour\":1576078570,\"minute\":722524915,\"usedBytes\":1576468622567723241},\"monthlySchedule\":{\"snapshotsToKeep\":437954475,\"daysOfMonth\":\"eqz\",\"hour\":1372310139,\"minute\":1415965286,\"usedBytes\":8043734787641480835},\"enabled\":true,\"provisioningState\":\"altol\"}}")
            .toObject(SnapshotPolicyPatch.class);
        Assertions.assertEquals("ylsyxkqjnsje", model.location());
        Assertions.assertEquals("icvi", model.tags().get("v"));
        Assertions.assertEquals(611015935, model.hourlySchedule().snapshotsToKeep());
        Assertions.assertEquals(1970800751, model.hourlySchedule().minute());
        Assertions.assertEquals(4841685687030485565L, model.hourlySchedule().usedBytes());
        Assertions.assertEquals(1867961627, model.dailySchedule().snapshotsToKeep());
        Assertions.assertEquals(1482696459, model.dailySchedule().hour());
        Assertions.assertEquals(553106392, model.dailySchedule().minute());
        Assertions.assertEquals(7848587408426181580L, model.dailySchedule().usedBytes());
        Assertions.assertEquals(963182303, model.weeklySchedule().snapshotsToKeep());
        Assertions.assertEquals("tzpofncckwyfzq", model.weeklySchedule().day());
        Assertions.assertEquals(1576078570, model.weeklySchedule().hour());
        Assertions.assertEquals(722524915, model.weeklySchedule().minute());
        Assertions.assertEquals(1576468622567723241L, model.weeklySchedule().usedBytes());
        Assertions.assertEquals(437954475, model.monthlySchedule().snapshotsToKeep());
        Assertions.assertEquals("eqz", model.monthlySchedule().daysOfMonth());
        Assertions.assertEquals(1372310139, model.monthlySchedule().hour());
        Assertions.assertEquals(1415965286, model.monthlySchedule().minute());
        Assertions.assertEquals(8043734787641480835L, model.monthlySchedule().usedBytes());
        Assertions.assertTrue(model.enabled());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SnapshotPolicyPatch model = new SnapshotPolicyPatch().withLocation("ylsyxkqjnsje")
            .withTags(mapOf("v", "icvi"))
            .withHourlySchedule(new HourlySchedule().withSnapshotsToKeep(611015935)
                .withMinute(1970800751)
                .withUsedBytes(4841685687030485565L))
            .withDailySchedule(new DailySchedule().withSnapshotsToKeep(1867961627)
                .withHour(1482696459)
                .withMinute(553106392)
                .withUsedBytes(7848587408426181580L))
            .withWeeklySchedule(new WeeklySchedule().withSnapshotsToKeep(963182303)
                .withDay("tzpofncckwyfzq")
                .withHour(1576078570)
                .withMinute(722524915)
                .withUsedBytes(1576468622567723241L))
            .withMonthlySchedule(new MonthlySchedule().withSnapshotsToKeep(437954475)
                .withDaysOfMonth("eqz")
                .withHour(1372310139)
                .withMinute(1415965286)
                .withUsedBytes(8043734787641480835L))
            .withEnabled(true);
        model = BinaryData.fromObject(model).toObject(SnapshotPolicyPatch.class);
        Assertions.assertEquals("ylsyxkqjnsje", model.location());
        Assertions.assertEquals("icvi", model.tags().get("v"));
        Assertions.assertEquals(611015935, model.hourlySchedule().snapshotsToKeep());
        Assertions.assertEquals(1970800751, model.hourlySchedule().minute());
        Assertions.assertEquals(4841685687030485565L, model.hourlySchedule().usedBytes());
        Assertions.assertEquals(1867961627, model.dailySchedule().snapshotsToKeep());
        Assertions.assertEquals(1482696459, model.dailySchedule().hour());
        Assertions.assertEquals(553106392, model.dailySchedule().minute());
        Assertions.assertEquals(7848587408426181580L, model.dailySchedule().usedBytes());
        Assertions.assertEquals(963182303, model.weeklySchedule().snapshotsToKeep());
        Assertions.assertEquals("tzpofncckwyfzq", model.weeklySchedule().day());
        Assertions.assertEquals(1576078570, model.weeklySchedule().hour());
        Assertions.assertEquals(722524915, model.weeklySchedule().minute());
        Assertions.assertEquals(1576468622567723241L, model.weeklySchedule().usedBytes());
        Assertions.assertEquals(437954475, model.monthlySchedule().snapshotsToKeep());
        Assertions.assertEquals("eqz", model.monthlySchedule().daysOfMonth());
        Assertions.assertEquals(1372310139, model.monthlySchedule().hour());
        Assertions.assertEquals(1415965286, model.monthlySchedule().minute());
        Assertions.assertEquals(8043734787641480835L, model.monthlySchedule().usedBytes());
        Assertions.assertTrue(model.enabled());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
