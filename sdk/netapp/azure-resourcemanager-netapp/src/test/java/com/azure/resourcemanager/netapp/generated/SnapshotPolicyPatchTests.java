// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.netapp.models.DailySchedule;
import com.azure.resourcemanager.netapp.models.HourlySchedule;
import com.azure.resourcemanager.netapp.models.MonthlySchedule;
import com.azure.resourcemanager.netapp.models.SnapshotPolicyPatch;
import com.azure.resourcemanager.netapp.models.WeeklySchedule;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SnapshotPolicyPatchTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SnapshotPolicyPatch model = BinaryData.fromString(
            "{\"location\":\"ypbsfgytguslfead\",\"id\":\"gq\",\"name\":\"yhejhzisxgfp\",\"type\":\"olppvksrpqvujz\",\"tags\":{\"bhshfwpracstwity\":\"htwdwrftswibyrcd\",\"pnmdyodnwzxltjcv\":\"hevxcced\",\"ugcxnavvwxq\":\"hlt\"},\"properties\":{\"hourlySchedule\":{\"snapshotsToKeep\":1920410421,\"minute\":88106486,\"usedBytes\":5250086231147283633},\"dailySchedule\":{\"snapshotsToKeep\":1090974611,\"hour\":1597116231,\"minute\":351776134,\"usedBytes\":1828246953948060971},\"weeklySchedule\":{\"snapshotsToKeep\":1410181750,\"day\":\"p\",\"hour\":1723513014,\"minute\":939691982,\"usedBytes\":2008164106035564088},\"monthlySchedule\":{\"snapshotsToKeep\":242566551,\"daysOfMonth\":\"hkr\",\"hour\":268834532,\"minute\":991301746,\"usedBytes\":775620038195341343},\"enabled\":false,\"provisioningState\":\"kghv\"}}")
            .toObject(SnapshotPolicyPatch.class);
        Assertions.assertEquals("ypbsfgytguslfead", model.location());
        Assertions.assertEquals("htwdwrftswibyrcd", model.tags().get("bhshfwpracstwity"));
        Assertions.assertEquals(1920410421, model.hourlySchedule().snapshotsToKeep());
        Assertions.assertEquals(88106486, model.hourlySchedule().minute());
        Assertions.assertEquals(5250086231147283633L, model.hourlySchedule().usedBytes());
        Assertions.assertEquals(1090974611, model.dailySchedule().snapshotsToKeep());
        Assertions.assertEquals(1597116231, model.dailySchedule().hour());
        Assertions.assertEquals(351776134, model.dailySchedule().minute());
        Assertions.assertEquals(1828246953948060971L, model.dailySchedule().usedBytes());
        Assertions.assertEquals(1410181750, model.weeklySchedule().snapshotsToKeep());
        Assertions.assertEquals("p", model.weeklySchedule().day());
        Assertions.assertEquals(1723513014, model.weeklySchedule().hour());
        Assertions.assertEquals(939691982, model.weeklySchedule().minute());
        Assertions.assertEquals(2008164106035564088L, model.weeklySchedule().usedBytes());
        Assertions.assertEquals(242566551, model.monthlySchedule().snapshotsToKeep());
        Assertions.assertEquals("hkr", model.monthlySchedule().daysOfMonth());
        Assertions.assertEquals(268834532, model.monthlySchedule().hour());
        Assertions.assertEquals(991301746, model.monthlySchedule().minute());
        Assertions.assertEquals(775620038195341343L, model.monthlySchedule().usedBytes());
        Assertions.assertEquals(false, model.enabled());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SnapshotPolicyPatch model = new SnapshotPolicyPatch().withLocation("ypbsfgytguslfead")
            .withTags(
                mapOf("bhshfwpracstwity", "htwdwrftswibyrcd", "pnmdyodnwzxltjcv", "hevxcced", "ugcxnavvwxq", "hlt"))
            .withHourlySchedule(new HourlySchedule().withSnapshotsToKeep(1920410421)
                .withMinute(88106486)
                .withUsedBytes(5250086231147283633L))
            .withDailySchedule(new DailySchedule().withSnapshotsToKeep(1090974611)
                .withHour(1597116231)
                .withMinute(351776134)
                .withUsedBytes(1828246953948060971L))
            .withWeeklySchedule(new WeeklySchedule().withSnapshotsToKeep(1410181750)
                .withDay("p")
                .withHour(1723513014)
                .withMinute(939691982)
                .withUsedBytes(2008164106035564088L))
            .withMonthlySchedule(new MonthlySchedule().withSnapshotsToKeep(242566551)
                .withDaysOfMonth("hkr")
                .withHour(268834532)
                .withMinute(991301746)
                .withUsedBytes(775620038195341343L))
            .withEnabled(false);
        model = BinaryData.fromObject(model).toObject(SnapshotPolicyPatch.class);
        Assertions.assertEquals("ypbsfgytguslfead", model.location());
        Assertions.assertEquals("htwdwrftswibyrcd", model.tags().get("bhshfwpracstwity"));
        Assertions.assertEquals(1920410421, model.hourlySchedule().snapshotsToKeep());
        Assertions.assertEquals(88106486, model.hourlySchedule().minute());
        Assertions.assertEquals(5250086231147283633L, model.hourlySchedule().usedBytes());
        Assertions.assertEquals(1090974611, model.dailySchedule().snapshotsToKeep());
        Assertions.assertEquals(1597116231, model.dailySchedule().hour());
        Assertions.assertEquals(351776134, model.dailySchedule().minute());
        Assertions.assertEquals(1828246953948060971L, model.dailySchedule().usedBytes());
        Assertions.assertEquals(1410181750, model.weeklySchedule().snapshotsToKeep());
        Assertions.assertEquals("p", model.weeklySchedule().day());
        Assertions.assertEquals(1723513014, model.weeklySchedule().hour());
        Assertions.assertEquals(939691982, model.weeklySchedule().minute());
        Assertions.assertEquals(2008164106035564088L, model.weeklySchedule().usedBytes());
        Assertions.assertEquals(242566551, model.monthlySchedule().snapshotsToKeep());
        Assertions.assertEquals("hkr", model.monthlySchedule().daysOfMonth());
        Assertions.assertEquals(268834532, model.monthlySchedule().hour());
        Assertions.assertEquals(991301746, model.monthlySchedule().minute());
        Assertions.assertEquals(775620038195341343L, model.monthlySchedule().usedBytes());
        Assertions.assertEquals(false, model.enabled());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
