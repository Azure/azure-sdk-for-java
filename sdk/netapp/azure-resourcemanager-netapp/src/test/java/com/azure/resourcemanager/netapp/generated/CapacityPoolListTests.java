// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.netapp.fluent.models.CapacityPoolInner;
import com.azure.resourcemanager.netapp.models.CapacityPoolList;
import com.azure.resourcemanager.netapp.models.EncryptionType;
import com.azure.resourcemanager.netapp.models.QosType;
import com.azure.resourcemanager.netapp.models.ServiceLevel;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class CapacityPoolListTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CapacityPoolList model = BinaryData.fromString(
            "{\"value\":[{\"etag\":\"ovplw\",\"properties\":{\"poolId\":\"hvgyuguosvmk\",\"size\":1888744128895186672,\"serviceLevel\":\"Ultra\",\"provisioningState\":\"ukkfplgmgs\",\"totalThroughputMibps\":12.549341,\"utilizedThroughputMibps\":12.664736,\"customThroughputMibps\":27.84288,\"qosType\":\"Auto\",\"coolAccess\":true,\"encryptionType\":\"Single\"},\"location\":\"pwiyig\",\"tags\":{\"upedeojnabckhs\":\"kdwzbaiuebbaumny\",\"ie\":\"txp\"},\"id\":\"tfhvpesapskrdqmh\",\"name\":\"jdhtldwkyzxu\",\"type\":\"tkncwsc\"},{\"etag\":\"vlxotogtwrupqsx\",\"properties\":{\"poolId\":\"micykvceoveilo\",\"size\":5776325152256074523,\"serviceLevel\":\"Standard\",\"provisioningState\":\"fj\",\"totalThroughputMibps\":90.63137,\"utilizedThroughputMibps\":14.5528555,\"customThroughputMibps\":12.441629,\"qosType\":\"Auto\",\"coolAccess\":true,\"encryptionType\":\"Double\"},\"location\":\"kphywpnvjto\",\"tags\":{\"crpab\":\"rmclfplphoxu\",\"sbj\":\"ye\",\"wfqkquj\":\"azqugxywpmueefj\",\"cq\":\"dsuyonobgla\"},\"id\":\"tcc\",\"name\":\"g\",\"type\":\"udxytlmoyrx\"},{\"etag\":\"fudwpznt\",\"properties\":{\"poolId\":\"dzhlrq\",\"size\":1353160377015146530,\"serviceLevel\":\"Standard\",\"provisioningState\":\"frlh\",\"totalThroughputMibps\":84.460884,\"utilizedThroughputMibps\":17.647808,\"customThroughputMibps\":60.66745,\"qosType\":\"Manual\",\"coolAccess\":true,\"encryptionType\":\"Double\"},\"location\":\"bpzkafkuwbc\",\"tags\":{\"eyvjusrtslhspkde\":\"bmehh\"},\"id\":\"maofmxagkv\",\"name\":\"melmqkrha\",\"type\":\"vljua\"},{\"etag\":\"quhcdhmduala\",\"properties\":{\"poolId\":\"qpv\",\"size\":3403871146459803360,\"serviceLevel\":\"Standard\",\"provisioningState\":\"sr\",\"totalThroughputMibps\":20.306206,\"utilizedThroughputMibps\":29.336273,\"customThroughputMibps\":29.841852,\"qosType\":\"Auto\",\"coolAccess\":true,\"encryptionType\":\"Single\"},\"location\":\"isgwbnbbeldawkz\",\"tags\":{\"rqhakauha\":\"io\",\"cjooxdjebwpucwwf\":\"hsfwxosowzxcug\",\"hzceuojgjrwjue\":\"ovbvmeueciv\"},\"id\":\"otwmcdyt\",\"name\":\"x\",\"type\":\"it\"}],\"nextLink\":\"rjaw\"}")
            .toObject(CapacityPoolList.class);
        Assertions.assertEquals("pwiyig", model.value().get(0).location());
        Assertions.assertEquals("kdwzbaiuebbaumny", model.value().get(0).tags().get("upedeojnabckhs"));
        Assertions.assertEquals(1888744128895186672L, model.value().get(0).size());
        Assertions.assertEquals(ServiceLevel.ULTRA, model.value().get(0).serviceLevel());
        Assertions.assertEquals(27.84288F, model.value().get(0).customThroughputMibps());
        Assertions.assertEquals(QosType.AUTO, model.value().get(0).qosType());
        Assertions.assertTrue(model.value().get(0).coolAccess());
        Assertions.assertEquals(EncryptionType.SINGLE, model.value().get(0).encryptionType());
        Assertions.assertEquals("rjaw", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CapacityPoolList model = new CapacityPoolList().withValue(Arrays.asList(
            new CapacityPoolInner().withLocation("pwiyig")
                .withTags(mapOf("upedeojnabckhs", "kdwzbaiuebbaumny", "ie", "txp"))
                .withSize(1888744128895186672L)
                .withServiceLevel(ServiceLevel.ULTRA)
                .withCustomThroughputMibps(27.84288F)
                .withQosType(QosType.AUTO)
                .withCoolAccess(true)
                .withEncryptionType(EncryptionType.SINGLE),
            new CapacityPoolInner().withLocation("kphywpnvjto")
                .withTags(
                    mapOf("crpab", "rmclfplphoxu", "sbj", "ye", "wfqkquj", "azqugxywpmueefj", "cq", "dsuyonobgla"))
                .withSize(5776325152256074523L)
                .withServiceLevel(ServiceLevel.STANDARD)
                .withCustomThroughputMibps(12.441629F)
                .withQosType(QosType.AUTO)
                .withCoolAccess(true)
                .withEncryptionType(EncryptionType.DOUBLE),
            new CapacityPoolInner().withLocation("bpzkafkuwbc")
                .withTags(mapOf("eyvjusrtslhspkde", "bmehh"))
                .withSize(1353160377015146530L)
                .withServiceLevel(ServiceLevel.STANDARD)
                .withCustomThroughputMibps(60.66745F)
                .withQosType(QosType.MANUAL)
                .withCoolAccess(true)
                .withEncryptionType(EncryptionType.DOUBLE),
            new CapacityPoolInner().withLocation("isgwbnbbeldawkz")
                .withTags(
                    mapOf("rqhakauha", "io", "cjooxdjebwpucwwf", "hsfwxosowzxcug", "hzceuojgjrwjue", "ovbvmeueciv"))
                .withSize(3403871146459803360L)
                .withServiceLevel(ServiceLevel.STANDARD)
                .withCustomThroughputMibps(29.841852F)
                .withQosType(QosType.AUTO)
                .withCoolAccess(true)
                .withEncryptionType(EncryptionType.SINGLE)))
            .withNextLink("rjaw");
        model = BinaryData.fromObject(model).toObject(CapacityPoolList.class);
        Assertions.assertEquals("pwiyig", model.value().get(0).location());
        Assertions.assertEquals("kdwzbaiuebbaumny", model.value().get(0).tags().get("upedeojnabckhs"));
        Assertions.assertEquals(1888744128895186672L, model.value().get(0).size());
        Assertions.assertEquals(ServiceLevel.ULTRA, model.value().get(0).serviceLevel());
        Assertions.assertEquals(27.84288F, model.value().get(0).customThroughputMibps());
        Assertions.assertEquals(QosType.AUTO, model.value().get(0).qosType());
        Assertions.assertTrue(model.value().get(0).coolAccess());
        Assertions.assertEquals(EncryptionType.SINGLE, model.value().get(0).encryptionType());
        Assertions.assertEquals("rjaw", model.nextLink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
