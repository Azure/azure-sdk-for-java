// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.netapp.fluent.models.CapacityPoolInner;
import com.azure.resourcemanager.netapp.models.CapacityPoolList;
import com.azure.resourcemanager.netapp.models.EncryptionType;
import com.azure.resourcemanager.netapp.models.QosType;
import com.azure.resourcemanager.netapp.models.ServiceLevel;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class CapacityPoolListTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CapacityPoolList model = BinaryData.fromString(
            "{\"value\":[{\"etag\":\"bpzkafkuwbc\",\"properties\":{\"poolId\":\"wbme\",\"size\":7252038308965637311,\"serviceLevel\":\"StandardZRS\",\"provisioningState\":\"v\",\"totalThroughputMibps\":77.41172,\"utilizedThroughputMibps\":64.93837,\"qosType\":\"Auto\",\"coolAccess\":false,\"encryptionType\":\"Double\"},\"location\":\"eemaofmxagkvtme\",\"tags\":{\"hvljuahaquh\":\"krh\",\"aex\":\"dhmdua\",\"vxpvgomz\":\"pvfadmwsrcr\"},\"id\":\"fmisg\",\"name\":\"bnbbeldawkz\",\"type\":\"ali\"},{\"etag\":\"rqhakauha\",\"properties\":{\"poolId\":\"sfwxosowzxc\",\"size\":2516732809766062265,\"serviceLevel\":\"StandardZRS\",\"provisioningState\":\"ooxdjebwpuc\",\"totalThroughputMibps\":83.48158,\"utilizedThroughputMibps\":65.76169,\"qosType\":\"Manual\",\"coolAccess\":false,\"encryptionType\":\"Single\"},\"location\":\"civyhzceuo\",\"tags\":{\"ueiotwmcdyt\":\"rw\",\"it\":\"x\",\"hniskxfbkpyc\":\"nrjawgqwg\"},\"id\":\"klwndnhjdauwhv\",\"name\":\"l\",\"type\":\"zbtd\"},{\"etag\":\"ujznb\",\"properties\":{\"poolId\":\"ow\",\"size\":3222705953592047297,\"serviceLevel\":\"Premium\",\"provisioningState\":\"qlveualupjmkh\",\"totalThroughputMibps\":23.892725,\"utilizedThroughputMibps\":43.313354,\"qosType\":\"Auto\",\"coolAccess\":false,\"encryptionType\":\"Single\"},\"location\":\"riplrbpbewtg\",\"tags\":{\"xzvlvqhjkbegib\":\"blcg\",\"wrtz\":\"nmxiebwwaloayqc\",\"ngmtsavjcb\":\"uzgwyzmhtx\"},\"id\":\"wxqpsrknftguvri\",\"name\":\"hprwmdyv\",\"type\":\"qtayri\"}],\"nextLink\":\"ro\"}")
            .toObject(CapacityPoolList.class);
        Assertions.assertEquals("eemaofmxagkvtme", model.value().get(0).location());
        Assertions.assertEquals("krh", model.value().get(0).tags().get("hvljuahaquh"));
        Assertions.assertEquals(7252038308965637311L, model.value().get(0).size());
        Assertions.assertEquals(ServiceLevel.STANDARD_ZRS, model.value().get(0).serviceLevel());
        Assertions.assertEquals(QosType.AUTO, model.value().get(0).qosType());
        Assertions.assertEquals(false, model.value().get(0).coolAccess());
        Assertions.assertEquals(EncryptionType.DOUBLE, model.value().get(0).encryptionType());
        Assertions.assertEquals("ro", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CapacityPoolList model = new CapacityPoolList().withValue(Arrays.asList(
            new CapacityPoolInner().withLocation("eemaofmxagkvtme")
                .withTags(mapOf("hvljuahaquh", "krh", "aex", "dhmdua", "vxpvgomz", "pvfadmwsrcr"))
                .withSize(7252038308965637311L)
                .withServiceLevel(ServiceLevel.STANDARD_ZRS)
                .withQosType(QosType.AUTO)
                .withCoolAccess(false)
                .withEncryptionType(EncryptionType.DOUBLE),
            new CapacityPoolInner().withLocation("civyhzceuo")
                .withTags(mapOf("ueiotwmcdyt", "rw", "it", "x", "hniskxfbkpyc", "nrjawgqwg"))
                .withSize(2516732809766062265L)
                .withServiceLevel(ServiceLevel.STANDARD_ZRS)
                .withQosType(QosType.MANUAL)
                .withCoolAccess(false)
                .withEncryptionType(EncryptionType.SINGLE),
            new CapacityPoolInner().withLocation("riplrbpbewtg")
                .withTags(mapOf("xzvlvqhjkbegib", "blcg", "wrtz", "nmxiebwwaloayqc", "ngmtsavjcb", "uzgwyzmhtx"))
                .withSize(3222705953592047297L)
                .withServiceLevel(ServiceLevel.PREMIUM)
                .withQosType(QosType.AUTO)
                .withCoolAccess(false)
                .withEncryptionType(EncryptionType.SINGLE)))
            .withNextLink("ro");
        model = BinaryData.fromObject(model).toObject(CapacityPoolList.class);
        Assertions.assertEquals("eemaofmxagkvtme", model.value().get(0).location());
        Assertions.assertEquals("krh", model.value().get(0).tags().get("hvljuahaquh"));
        Assertions.assertEquals(7252038308965637311L, model.value().get(0).size());
        Assertions.assertEquals(ServiceLevel.STANDARD_ZRS, model.value().get(0).serviceLevel());
        Assertions.assertEquals(QosType.AUTO, model.value().get(0).qosType());
        Assertions.assertEquals(false, model.value().get(0).coolAccess());
        Assertions.assertEquals(EncryptionType.DOUBLE, model.value().get(0).encryptionType());
        Assertions.assertEquals("ro", model.nextLink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
