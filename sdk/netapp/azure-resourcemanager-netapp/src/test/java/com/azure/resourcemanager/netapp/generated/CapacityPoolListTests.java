// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.netapp.fluent.models.CapacityPoolInner;
import com.azure.resourcemanager.netapp.models.CapacityPoolList;
import com.azure.resourcemanager.netapp.models.EncryptionType;
import com.azure.resourcemanager.netapp.models.QosType;
import com.azure.resourcemanager.netapp.models.ServiceLevel;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class CapacityPoolListTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CapacityPoolList model = BinaryData.fromString(
            "{\"value\":[{\"etag\":\"ovplw\",\"properties\":{\"poolId\":\"hvgyuguosvmk\",\"size\":1888744128895186672,\"serviceLevel\":\"Standard\",\"provisioningState\":\"ukkfplgmgs\",\"totalThroughputMibps\":12.549341,\"utilizedThroughputMibps\":12.664736,\"qosType\":\"Auto\",\"coolAccess\":false,\"encryptionType\":\"Double\"},\"location\":\"lopwiyig\",\"tags\":{\"upedeojnabckhs\":\"kdwzbaiuebbaumny\",\"ie\":\"txp\"},\"id\":\"tfhvpesapskrdqmh\",\"name\":\"jdhtldwkyzxu\",\"type\":\"tkncwsc\"},{\"etag\":\"vlxotogtwrupqsx\",\"properties\":{\"poolId\":\"micykvceoveilo\",\"size\":5776325152256074523,\"serviceLevel\":\"StandardZRS\",\"provisioningState\":\"fj\",\"totalThroughputMibps\":90.63137,\"utilizedThroughputMibps\":14.5528555,\"qosType\":\"Auto\",\"coolAccess\":false,\"encryptionType\":\"Double\"},\"location\":\"ttkphywpnvjtoqne\",\"tags\":{\"oxuscrpabgyepsbj\":\"lfplp\"},\"id\":\"azqugxywpmueefj\",\"name\":\"wfqkquj\",\"type\":\"dsuyonobgla\"},{\"etag\":\"qxtccmgyudx\",\"properties\":{\"poolId\":\"lmoyrx\",\"size\":7703197767912555921,\"serviceLevel\":\"Standard\",\"provisioningState\":\"wpzntxhdzh\",\"totalThroughputMibps\":11.246896,\"utilizedThroughputMibps\":7.335496,\"qosType\":\"Auto\",\"coolAccess\":false,\"encryptionType\":\"Double\"},\"location\":\"rxsbkyvp\",\"tags\":{\"z\":\"n\",\"kafkuwbcrnwbm\":\"p\",\"us\":\"hhseyv\",\"ofmxagkvtmelmqkr\":\"tslhspkdeem\"},\"id\":\"ahvljuaha\",\"name\":\"uhcdhm\",\"type\":\"ualaexqpvfadmw\"},{\"etag\":\"crgvxpvgom\",\"properties\":{\"poolId\":\"fmisg\",\"size\":2957493200250609198,\"serviceLevel\":\"Standard\",\"provisioningState\":\"e\",\"totalThroughputMibps\":21.927637,\"utilizedThroughputMibps\":2.9660523,\"qosType\":\"Manual\",\"coolAccess\":true,\"encryptionType\":\"Double\"},\"location\":\"rqhakauha\",\"tags\":{\"i\":\"fwxosowzxcu\",\"ucww\":\"jooxdjebw\",\"bvmeuecivy\":\"vo\"},\"id\":\"zceuojgjrw\",\"name\":\"ueiotwmcdyt\",\"type\":\"x\"}],\"nextLink\":\"txnrjaw\"}")
            .toObject(CapacityPoolList.class);
        Assertions.assertEquals("lopwiyig", model.value().get(0).location());
        Assertions.assertEquals("kdwzbaiuebbaumny", model.value().get(0).tags().get("upedeojnabckhs"));
        Assertions.assertEquals(1888744128895186672L, model.value().get(0).size());
        Assertions.assertEquals(ServiceLevel.STANDARD, model.value().get(0).serviceLevel());
        Assertions.assertEquals(QosType.AUTO, model.value().get(0).qosType());
        Assertions.assertFalse(model.value().get(0).coolAccess());
        Assertions.assertEquals(EncryptionType.DOUBLE, model.value().get(0).encryptionType());
        Assertions.assertEquals("txnrjaw", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CapacityPoolList model = new CapacityPoolList().withValue(Arrays.asList(
            new CapacityPoolInner().withLocation("lopwiyig")
                .withTags(mapOf("upedeojnabckhs", "kdwzbaiuebbaumny", "ie", "txp"))
                .withSize(1888744128895186672L)
                .withServiceLevel(ServiceLevel.STANDARD)
                .withQosType(QosType.AUTO)
                .withCoolAccess(false)
                .withEncryptionType(EncryptionType.DOUBLE),
            new CapacityPoolInner().withLocation("ttkphywpnvjtoqne")
                .withTags(mapOf("oxuscrpabgyepsbj", "lfplp"))
                .withSize(5776325152256074523L)
                .withServiceLevel(ServiceLevel.STANDARD_ZRS)
                .withQosType(QosType.AUTO)
                .withCoolAccess(false)
                .withEncryptionType(EncryptionType.DOUBLE),
            new CapacityPoolInner().withLocation("rxsbkyvp")
                .withTags(mapOf("z", "n", "kafkuwbcrnwbm", "p", "us", "hhseyv", "ofmxagkvtmelmqkr", "tslhspkdeem"))
                .withSize(7703197767912555921L)
                .withServiceLevel(ServiceLevel.STANDARD)
                .withQosType(QosType.AUTO)
                .withCoolAccess(false)
                .withEncryptionType(EncryptionType.DOUBLE),
            new CapacityPoolInner().withLocation("rqhakauha")
                .withTags(mapOf("i", "fwxosowzxcu", "ucww", "jooxdjebw", "bvmeuecivy", "vo"))
                .withSize(2957493200250609198L)
                .withServiceLevel(ServiceLevel.STANDARD)
                .withQosType(QosType.MANUAL)
                .withCoolAccess(true)
                .withEncryptionType(EncryptionType.DOUBLE)))
            .withNextLink("txnrjaw");
        model = BinaryData.fromObject(model).toObject(CapacityPoolList.class);
        Assertions.assertEquals("lopwiyig", model.value().get(0).location());
        Assertions.assertEquals("kdwzbaiuebbaumny", model.value().get(0).tags().get("upedeojnabckhs"));
        Assertions.assertEquals(1888744128895186672L, model.value().get(0).size());
        Assertions.assertEquals(ServiceLevel.STANDARD, model.value().get(0).serviceLevel());
        Assertions.assertEquals(QosType.AUTO, model.value().get(0).qosType());
        Assertions.assertFalse(model.value().get(0).coolAccess());
        Assertions.assertEquals(EncryptionType.DOUBLE, model.value().get(0).encryptionType());
        Assertions.assertEquals("txnrjaw", model.nextLink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
