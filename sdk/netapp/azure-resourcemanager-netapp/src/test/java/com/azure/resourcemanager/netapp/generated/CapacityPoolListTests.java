// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.netapp.fluent.models.CapacityPoolInner;
import com.azure.resourcemanager.netapp.models.CapacityPoolList;
import com.azure.resourcemanager.netapp.models.EncryptionType;
import com.azure.resourcemanager.netapp.models.QosType;
import com.azure.resourcemanager.netapp.models.ServiceLevel;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class CapacityPoolListTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CapacityPoolList model = BinaryData.fromString(
            "{\"value\":[{\"etag\":\"i\",\"properties\":{\"poolId\":\"kvceoveilovnotyf\",\"size\":3928242933963476014,\"serviceLevel\":\"Standard\",\"provisioningState\":\"bkc\",\"totalThroughputMibps\":22.10667,\"utilizedThroughputMibps\":20.912487,\"customThroughputMibps\":83.024284,\"qosType\":\"Auto\",\"coolAccess\":false,\"encryptionType\":\"Double\"},\"location\":\"vjtoqnermclfp\",\"tags\":{\"azqugxywpmueefj\":\"oxuscrpabgyepsbj\",\"dsuyonobgla\":\"wfqkquj\"},\"id\":\"cq\",\"name\":\"tcc\",\"type\":\"g\"}],\"nextLink\":\"dxyt\"}")
            .toObject(CapacityPoolList.class);
        Assertions.assertEquals("vjtoqnermclfp", model.value().get(0).location());
        Assertions.assertEquals("oxuscrpabgyepsbj", model.value().get(0).tags().get("azqugxywpmueefj"));
        Assertions.assertEquals(3928242933963476014L, model.value().get(0).size());
        Assertions.assertEquals(ServiceLevel.STANDARD, model.value().get(0).serviceLevel());
        Assertions.assertEquals(83.024284F, model.value().get(0).customThroughputMibps());
        Assertions.assertEquals(QosType.AUTO, model.value().get(0).qosType());
        Assertions.assertFalse(model.value().get(0).coolAccess());
        Assertions.assertEquals(EncryptionType.DOUBLE, model.value().get(0).encryptionType());
        Assertions.assertEquals("dxyt", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CapacityPoolList model
            = new CapacityPoolList().withValue(Arrays.asList(new CapacityPoolInner().withLocation("vjtoqnermclfp")
                .withTags(mapOf("azqugxywpmueefj", "oxuscrpabgyepsbj", "dsuyonobgla", "wfqkquj"))
                .withSize(3928242933963476014L)
                .withServiceLevel(ServiceLevel.STANDARD)
                .withCustomThroughputMibps(83.024284F)
                .withQosType(QosType.AUTO)
                .withCoolAccess(false)
                .withEncryptionType(EncryptionType.DOUBLE))).withNextLink("dxyt");
        model = BinaryData.fromObject(model).toObject(CapacityPoolList.class);
        Assertions.assertEquals("vjtoqnermclfp", model.value().get(0).location());
        Assertions.assertEquals("oxuscrpabgyepsbj", model.value().get(0).tags().get("azqugxywpmueefj"));
        Assertions.assertEquals(3928242933963476014L, model.value().get(0).size());
        Assertions.assertEquals(ServiceLevel.STANDARD, model.value().get(0).serviceLevel());
        Assertions.assertEquals(83.024284F, model.value().get(0).customThroughputMibps());
        Assertions.assertEquals(QosType.AUTO, model.value().get(0).qosType());
        Assertions.assertFalse(model.value().get(0).coolAccess());
        Assertions.assertEquals(EncryptionType.DOUBLE, model.value().get(0).encryptionType());
        Assertions.assertEquals("dxyt", model.nextLink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
