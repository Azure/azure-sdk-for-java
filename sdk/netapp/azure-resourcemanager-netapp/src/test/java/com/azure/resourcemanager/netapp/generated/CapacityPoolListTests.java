// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.netapp.fluent.models.CapacityPoolInner;
import com.azure.resourcemanager.netapp.models.CapacityPoolList;
import com.azure.resourcemanager.netapp.models.EncryptionType;
import com.azure.resourcemanager.netapp.models.QosType;
import com.azure.resourcemanager.netapp.models.ServiceLevel;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class CapacityPoolListTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CapacityPoolList model = BinaryData.fromString(
            "{\"value\":[{\"etag\":\"dw\",\"properties\":{\"poolId\":\"ntxhdzhlrqjbhck\",\"size\":6374623406138918990,\"serviceLevel\":\"Premium\",\"provisioningState\":\"xsbkyvpyca\",\"totalThroughputMibps\":2.4879217,\"utilizedThroughputMibps\":2.0240128,\"qosType\":\"Manual\",\"coolAccess\":true,\"encryptionType\":\"Single\"},\"location\":\"b\",\"tags\":{\"hseyvju\":\"wbme\",\"hspkdeemao\":\"rts\"},\"id\":\"mx\",\"name\":\"gkvtmelmqkrhah\",\"type\":\"ljuahaquhcdh\"},{\"etag\":\"ualaexqpvfadmw\",\"properties\":{\"poolId\":\"crgvxpvgom\",\"size\":1626678916991140455,\"serviceLevel\":\"Premium\",\"provisioningState\":\"sgwbnbbeld\",\"totalThroughputMibps\":2.9660523,\"utilizedThroughputMibps\":91.50517,\"qosType\":\"Manual\",\"coolAccess\":true,\"encryptionType\":\"Double\"},\"location\":\"hakauhashsf\",\"tags\":{\"jooxdjebw\":\"sowzxcugi\"},\"id\":\"ucww\",\"name\":\"vo\",\"type\":\"bvmeuecivy\"}],\"nextLink\":\"ce\"}")
            .toObject(CapacityPoolList.class);
        Assertions.assertEquals("b", model.value().get(0).location());
        Assertions.assertEquals("wbme", model.value().get(0).tags().get("hseyvju"));
        Assertions.assertEquals(6374623406138918990L, model.value().get(0).size());
        Assertions.assertEquals(ServiceLevel.PREMIUM, model.value().get(0).serviceLevel());
        Assertions.assertEquals(QosType.MANUAL, model.value().get(0).qosType());
        Assertions.assertEquals(true, model.value().get(0).coolAccess());
        Assertions.assertEquals(EncryptionType.SINGLE, model.value().get(0).encryptionType());
        Assertions.assertEquals("ce", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CapacityPoolList model = new CapacityPoolList().withValue(Arrays.asList(
            new CapacityPoolInner().withLocation("b")
                .withTags(mapOf("hseyvju", "wbme", "hspkdeemao", "rts"))
                .withSize(6374623406138918990L)
                .withServiceLevel(ServiceLevel.PREMIUM)
                .withQosType(QosType.MANUAL)
                .withCoolAccess(true)
                .withEncryptionType(EncryptionType.SINGLE),
            new CapacityPoolInner().withLocation("hakauhashsf")
                .withTags(mapOf("jooxdjebw", "sowzxcugi"))
                .withSize(1626678916991140455L)
                .withServiceLevel(ServiceLevel.PREMIUM)
                .withQosType(QosType.MANUAL)
                .withCoolAccess(true)
                .withEncryptionType(EncryptionType.DOUBLE)))
            .withNextLink("ce");
        model = BinaryData.fromObject(model).toObject(CapacityPoolList.class);
        Assertions.assertEquals("b", model.value().get(0).location());
        Assertions.assertEquals("wbme", model.value().get(0).tags().get("hseyvju"));
        Assertions.assertEquals(6374623406138918990L, model.value().get(0).size());
        Assertions.assertEquals(ServiceLevel.PREMIUM, model.value().get(0).serviceLevel());
        Assertions.assertEquals(QosType.MANUAL, model.value().get(0).qosType());
        Assertions.assertEquals(true, model.value().get(0).coolAccess());
        Assertions.assertEquals(EncryptionType.SINGLE, model.value().get(0).encryptionType());
        Assertions.assertEquals("ce", model.nextLink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
