// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.netapp.fluent.models.SnapshotPolicyInner;
import com.azure.resourcemanager.netapp.models.DailySchedule;
import com.azure.resourcemanager.netapp.models.HourlySchedule;
import com.azure.resourcemanager.netapp.models.MonthlySchedule;
import com.azure.resourcemanager.netapp.models.WeeklySchedule;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SnapshotPolicyInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SnapshotPolicyInner model = BinaryData.fromString(
            "{\"etag\":\"ormrlxqtvcofudfl\",\"properties\":{\"hourlySchedule\":{\"snapshotsToKeep\":585875953,\"minute\":1902610413,\"usedBytes\":1267263221635298895},\"dailySchedule\":{\"snapshotsToKeep\":1113141227,\"hour\":974608303,\"minute\":1989846717,\"usedBytes\":8761404710437342780},\"weeklySchedule\":{\"snapshotsToKeep\":1165613569,\"day\":\"dsg\",\"hour\":760670144,\"minute\":220532000,\"usedBytes\":445403329310862805},\"monthlySchedule\":{\"snapshotsToKeep\":1951519053,\"daysOfMonth\":\"juetaebur\",\"hour\":1552436434,\"minute\":973815152,\"usedBytes\":588408385246434864},\"enabled\":false,\"provisioningState\":\"wabm\"},\"location\":\"efkifr\",\"tags\":{\"ujmqlgkfbtndoa\":\"u\",\"bjcntujitc\":\"n\",\"twwaezkojvdcpzf\":\"ed\",\"foxciq\":\"qouicybxarzgsz\"},\"id\":\"p\",\"name\":\"doamciodhkha\",\"type\":\"xkhnzbonlwnto\"}")
            .toObject(SnapshotPolicyInner.class);
        Assertions.assertEquals("efkifr", model.location());
        Assertions.assertEquals("u", model.tags().get("ujmqlgkfbtndoa"));
        Assertions.assertEquals(585875953, model.hourlySchedule().snapshotsToKeep());
        Assertions.assertEquals(1902610413, model.hourlySchedule().minute());
        Assertions.assertEquals(1267263221635298895L, model.hourlySchedule().usedBytes());
        Assertions.assertEquals(1113141227, model.dailySchedule().snapshotsToKeep());
        Assertions.assertEquals(974608303, model.dailySchedule().hour());
        Assertions.assertEquals(1989846717, model.dailySchedule().minute());
        Assertions.assertEquals(8761404710437342780L, model.dailySchedule().usedBytes());
        Assertions.assertEquals(1165613569, model.weeklySchedule().snapshotsToKeep());
        Assertions.assertEquals("dsg", model.weeklySchedule().day());
        Assertions.assertEquals(760670144, model.weeklySchedule().hour());
        Assertions.assertEquals(220532000, model.weeklySchedule().minute());
        Assertions.assertEquals(445403329310862805L, model.weeklySchedule().usedBytes());
        Assertions.assertEquals(1951519053, model.monthlySchedule().snapshotsToKeep());
        Assertions.assertEquals("juetaebur", model.monthlySchedule().daysOfMonth());
        Assertions.assertEquals(1552436434, model.monthlySchedule().hour());
        Assertions.assertEquals(973815152, model.monthlySchedule().minute());
        Assertions.assertEquals(588408385246434864L, model.monthlySchedule().usedBytes());
        Assertions.assertEquals(false, model.enabled());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SnapshotPolicyInner model = new SnapshotPolicyInner().withLocation("efkifr")
            .withTags(
                mapOf("ujmqlgkfbtndoa", "u", "bjcntujitc", "n", "twwaezkojvdcpzf", "ed", "foxciq", "qouicybxarzgsz"))
            .withHourlySchedule(new HourlySchedule().withSnapshotsToKeep(585875953)
                .withMinute(1902610413)
                .withUsedBytes(1267263221635298895L))
            .withDailySchedule(new DailySchedule().withSnapshotsToKeep(1113141227)
                .withHour(974608303)
                .withMinute(1989846717)
                .withUsedBytes(8761404710437342780L))
            .withWeeklySchedule(new WeeklySchedule().withSnapshotsToKeep(1165613569)
                .withDay("dsg")
                .withHour(760670144)
                .withMinute(220532000)
                .withUsedBytes(445403329310862805L))
            .withMonthlySchedule(new MonthlySchedule().withSnapshotsToKeep(1951519053)
                .withDaysOfMonth("juetaebur")
                .withHour(1552436434)
                .withMinute(973815152)
                .withUsedBytes(588408385246434864L))
            .withEnabled(false);
        model = BinaryData.fromObject(model).toObject(SnapshotPolicyInner.class);
        Assertions.assertEquals("efkifr", model.location());
        Assertions.assertEquals("u", model.tags().get("ujmqlgkfbtndoa"));
        Assertions.assertEquals(585875953, model.hourlySchedule().snapshotsToKeep());
        Assertions.assertEquals(1902610413, model.hourlySchedule().minute());
        Assertions.assertEquals(1267263221635298895L, model.hourlySchedule().usedBytes());
        Assertions.assertEquals(1113141227, model.dailySchedule().snapshotsToKeep());
        Assertions.assertEquals(974608303, model.dailySchedule().hour());
        Assertions.assertEquals(1989846717, model.dailySchedule().minute());
        Assertions.assertEquals(8761404710437342780L, model.dailySchedule().usedBytes());
        Assertions.assertEquals(1165613569, model.weeklySchedule().snapshotsToKeep());
        Assertions.assertEquals("dsg", model.weeklySchedule().day());
        Assertions.assertEquals(760670144, model.weeklySchedule().hour());
        Assertions.assertEquals(220532000, model.weeklySchedule().minute());
        Assertions.assertEquals(445403329310862805L, model.weeklySchedule().usedBytes());
        Assertions.assertEquals(1951519053, model.monthlySchedule().snapshotsToKeep());
        Assertions.assertEquals("juetaebur", model.monthlySchedule().daysOfMonth());
        Assertions.assertEquals(1552436434, model.monthlySchedule().hour());
        Assertions.assertEquals(973815152, model.monthlySchedule().minute());
        Assertions.assertEquals(588408385246434864L, model.monthlySchedule().usedBytes());
        Assertions.assertEquals(false, model.enabled());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
