// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.netapp.fluent.models.SnapshotPolicyInner;
import com.azure.resourcemanager.netapp.models.DailySchedule;
import com.azure.resourcemanager.netapp.models.HourlySchedule;
import com.azure.resourcemanager.netapp.models.MonthlySchedule;
import com.azure.resourcemanager.netapp.models.WeeklySchedule;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SnapshotPolicyInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SnapshotPolicyInner model = BinaryData.fromString(
            "{\"etag\":\"fw\",\"properties\":{\"hourlySchedule\":{\"snapshotsToKeep\":274733430,\"minute\":896449803,\"usedBytes\":2193419628649134444},\"dailySchedule\":{\"snapshotsToKeep\":216115077,\"hour\":632843013,\"minute\":1442047591,\"usedBytes\":104331388781277512},\"weeklySchedule\":{\"snapshotsToKeep\":1706699033,\"day\":\"pagao\",\"hour\":1739461107,\"minute\":1784212142,\"usedBytes\":5057262440850695627},\"monthlySchedule\":{\"snapshotsToKeep\":97386610,\"daysOfMonth\":\"xkqjnsjervt\",\"hour\":1109301596,\"minute\":1353667842,\"usedBytes\":1824695374727321161},\"enabled\":false,\"provisioningState\":\"psbzkfzbeyvpn\"},\"location\":\"cvinvkjjxdxrbuuk\",\"tags\":{\"paztzpofncck\":\"ewyhml\",\"qa\":\"yfzqwhxxbu\",\"lxorjaltolmncws\":\"zfeqztppri\"},\"id\":\"bqwcsdbnwdcf\",\"name\":\"ucqdpfuvglsb\",\"type\":\"jcanvxbvtvudut\"}")
            .toObject(SnapshotPolicyInner.class);
        Assertions.assertEquals("cvinvkjjxdxrbuuk", model.location());
        Assertions.assertEquals("ewyhml", model.tags().get("paztzpofncck"));
        Assertions.assertEquals(274733430, model.hourlySchedule().snapshotsToKeep());
        Assertions.assertEquals(896449803, model.hourlySchedule().minute());
        Assertions.assertEquals(2193419628649134444L, model.hourlySchedule().usedBytes());
        Assertions.assertEquals(216115077, model.dailySchedule().snapshotsToKeep());
        Assertions.assertEquals(632843013, model.dailySchedule().hour());
        Assertions.assertEquals(1442047591, model.dailySchedule().minute());
        Assertions.assertEquals(104331388781277512L, model.dailySchedule().usedBytes());
        Assertions.assertEquals(1706699033, model.weeklySchedule().snapshotsToKeep());
        Assertions.assertEquals("pagao", model.weeklySchedule().day());
        Assertions.assertEquals(1739461107, model.weeklySchedule().hour());
        Assertions.assertEquals(1784212142, model.weeklySchedule().minute());
        Assertions.assertEquals(5057262440850695627L, model.weeklySchedule().usedBytes());
        Assertions.assertEquals(97386610, model.monthlySchedule().snapshotsToKeep());
        Assertions.assertEquals("xkqjnsjervt", model.monthlySchedule().daysOfMonth());
        Assertions.assertEquals(1109301596, model.monthlySchedule().hour());
        Assertions.assertEquals(1353667842, model.monthlySchedule().minute());
        Assertions.assertEquals(1824695374727321161L, model.monthlySchedule().usedBytes());
        Assertions.assertEquals(false, model.enabled());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SnapshotPolicyInner model = new SnapshotPolicyInner().withLocation("cvinvkjjxdxrbuuk")
            .withTags(mapOf("paztzpofncck", "ewyhml", "qa", "yfzqwhxxbu", "lxorjaltolmncws", "zfeqztppri"))
            .withHourlySchedule(new HourlySchedule().withSnapshotsToKeep(274733430)
                .withMinute(896449803)
                .withUsedBytes(2193419628649134444L))
            .withDailySchedule(new DailySchedule().withSnapshotsToKeep(216115077)
                .withHour(632843013)
                .withMinute(1442047591)
                .withUsedBytes(104331388781277512L))
            .withWeeklySchedule(new WeeklySchedule().withSnapshotsToKeep(1706699033)
                .withDay("pagao")
                .withHour(1739461107)
                .withMinute(1784212142)
                .withUsedBytes(5057262440850695627L))
            .withMonthlySchedule(new MonthlySchedule().withSnapshotsToKeep(97386610)
                .withDaysOfMonth("xkqjnsjervt")
                .withHour(1109301596)
                .withMinute(1353667842)
                .withUsedBytes(1824695374727321161L))
            .withEnabled(false);
        model = BinaryData.fromObject(model).toObject(SnapshotPolicyInner.class);
        Assertions.assertEquals("cvinvkjjxdxrbuuk", model.location());
        Assertions.assertEquals("ewyhml", model.tags().get("paztzpofncck"));
        Assertions.assertEquals(274733430, model.hourlySchedule().snapshotsToKeep());
        Assertions.assertEquals(896449803, model.hourlySchedule().minute());
        Assertions.assertEquals(2193419628649134444L, model.hourlySchedule().usedBytes());
        Assertions.assertEquals(216115077, model.dailySchedule().snapshotsToKeep());
        Assertions.assertEquals(632843013, model.dailySchedule().hour());
        Assertions.assertEquals(1442047591, model.dailySchedule().minute());
        Assertions.assertEquals(104331388781277512L, model.dailySchedule().usedBytes());
        Assertions.assertEquals(1706699033, model.weeklySchedule().snapshotsToKeep());
        Assertions.assertEquals("pagao", model.weeklySchedule().day());
        Assertions.assertEquals(1739461107, model.weeklySchedule().hour());
        Assertions.assertEquals(1784212142, model.weeklySchedule().minute());
        Assertions.assertEquals(5057262440850695627L, model.weeklySchedule().usedBytes());
        Assertions.assertEquals(97386610, model.monthlySchedule().snapshotsToKeep());
        Assertions.assertEquals("xkqjnsjervt", model.monthlySchedule().daysOfMonth());
        Assertions.assertEquals(1109301596, model.monthlySchedule().hour());
        Assertions.assertEquals(1353667842, model.monthlySchedule().minute());
        Assertions.assertEquals(1824695374727321161L, model.monthlySchedule().usedBytes());
        Assertions.assertEquals(false, model.enabled());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
