// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.netapp.fluent.models.SnapshotPolicyInner;
import com.azure.resourcemanager.netapp.models.DailySchedule;
import com.azure.resourcemanager.netapp.models.HourlySchedule;
import com.azure.resourcemanager.netapp.models.MonthlySchedule;
import com.azure.resourcemanager.netapp.models.WeeklySchedule;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SnapshotPolicyInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SnapshotPolicyInner model = BinaryData.fromString(
            "{\"etag\":\"okdwb\",\"properties\":{\"hourlySchedule\":{\"snapshotsToKeep\":924333329,\"minute\":724568755,\"usedBytes\":3410027219832432949},\"dailySchedule\":{\"snapshotsToKeep\":2100538893,\"hour\":648975494,\"minute\":465027307,\"usedBytes\":4981925315017214440},\"weeklySchedule\":{\"snapshotsToKeep\":505924755,\"day\":\"oyzko\",\"hour\":1383394473,\"minute\":1422593899,\"usedBytes\":7145136039500222920},\"monthlySchedule\":{\"snapshotsToKeep\":1953532777,\"daysOfMonth\":\"aldsy\",\"hour\":1439928585,\"minute\":1091934004,\"usedBytes\":2775429777088266374},\"enabled\":false,\"provisioningState\":\"wyznkbyku\"},\"location\":\"pfhpagmhrskdsnfd\",\"tags\":{\"wpusdsttwvogv\":\"akgtdlmkkzevdlh\",\"qqmoaku\":\"bejdcn\",\"zr\":\"gm\",\"enuuzkopbm\":\"rdgrtw\"},\"id\":\"nrfdw\",\"name\":\"yuhhziu\",\"type\":\"efozbhdms\"}")
            .toObject(SnapshotPolicyInner.class);
        Assertions.assertEquals("pfhpagmhrskdsnfd", model.location());
        Assertions.assertEquals("akgtdlmkkzevdlh", model.tags().get("wpusdsttwvogv"));
        Assertions.assertEquals(924333329, model.hourlySchedule().snapshotsToKeep());
        Assertions.assertEquals(724568755, model.hourlySchedule().minute());
        Assertions.assertEquals(3410027219832432949L, model.hourlySchedule().usedBytes());
        Assertions.assertEquals(2100538893, model.dailySchedule().snapshotsToKeep());
        Assertions.assertEquals(648975494, model.dailySchedule().hour());
        Assertions.assertEquals(465027307, model.dailySchedule().minute());
        Assertions.assertEquals(4981925315017214440L, model.dailySchedule().usedBytes());
        Assertions.assertEquals(505924755, model.weeklySchedule().snapshotsToKeep());
        Assertions.assertEquals("oyzko", model.weeklySchedule().day());
        Assertions.assertEquals(1383394473, model.weeklySchedule().hour());
        Assertions.assertEquals(1422593899, model.weeklySchedule().minute());
        Assertions.assertEquals(7145136039500222920L, model.weeklySchedule().usedBytes());
        Assertions.assertEquals(1953532777, model.monthlySchedule().snapshotsToKeep());
        Assertions.assertEquals("aldsy", model.monthlySchedule().daysOfMonth());
        Assertions.assertEquals(1439928585, model.monthlySchedule().hour());
        Assertions.assertEquals(1091934004, model.monthlySchedule().minute());
        Assertions.assertEquals(2775429777088266374L, model.monthlySchedule().usedBytes());
        Assertions.assertEquals(false, model.enabled());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SnapshotPolicyInner model = new SnapshotPolicyInner().withLocation("pfhpagmhrskdsnfd")
            .withTags(
                mapOf("wpusdsttwvogv", "akgtdlmkkzevdlh", "qqmoaku", "bejdcn", "zr", "gm", "enuuzkopbm", "rdgrtw"))
            .withHourlySchedule(new HourlySchedule().withSnapshotsToKeep(924333329)
                .withMinute(724568755)
                .withUsedBytes(3410027219832432949L))
            .withDailySchedule(new DailySchedule().withSnapshotsToKeep(2100538893)
                .withHour(648975494)
                .withMinute(465027307)
                .withUsedBytes(4981925315017214440L))
            .withWeeklySchedule(new WeeklySchedule().withSnapshotsToKeep(505924755)
                .withDay("oyzko")
                .withHour(1383394473)
                .withMinute(1422593899)
                .withUsedBytes(7145136039500222920L))
            .withMonthlySchedule(new MonthlySchedule().withSnapshotsToKeep(1953532777)
                .withDaysOfMonth("aldsy")
                .withHour(1439928585)
                .withMinute(1091934004)
                .withUsedBytes(2775429777088266374L))
            .withEnabled(false);
        model = BinaryData.fromObject(model).toObject(SnapshotPolicyInner.class);
        Assertions.assertEquals("pfhpagmhrskdsnfd", model.location());
        Assertions.assertEquals("akgtdlmkkzevdlh", model.tags().get("wpusdsttwvogv"));
        Assertions.assertEquals(924333329, model.hourlySchedule().snapshotsToKeep());
        Assertions.assertEquals(724568755, model.hourlySchedule().minute());
        Assertions.assertEquals(3410027219832432949L, model.hourlySchedule().usedBytes());
        Assertions.assertEquals(2100538893, model.dailySchedule().snapshotsToKeep());
        Assertions.assertEquals(648975494, model.dailySchedule().hour());
        Assertions.assertEquals(465027307, model.dailySchedule().minute());
        Assertions.assertEquals(4981925315017214440L, model.dailySchedule().usedBytes());
        Assertions.assertEquals(505924755, model.weeklySchedule().snapshotsToKeep());
        Assertions.assertEquals("oyzko", model.weeklySchedule().day());
        Assertions.assertEquals(1383394473, model.weeklySchedule().hour());
        Assertions.assertEquals(1422593899, model.weeklySchedule().minute());
        Assertions.assertEquals(7145136039500222920L, model.weeklySchedule().usedBytes());
        Assertions.assertEquals(1953532777, model.monthlySchedule().snapshotsToKeep());
        Assertions.assertEquals("aldsy", model.monthlySchedule().daysOfMonth());
        Assertions.assertEquals(1439928585, model.monthlySchedule().hour());
        Assertions.assertEquals(1091934004, model.monthlySchedule().minute());
        Assertions.assertEquals(2775429777088266374L, model.monthlySchedule().usedBytes());
        Assertions.assertEquals(false, model.enabled());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
