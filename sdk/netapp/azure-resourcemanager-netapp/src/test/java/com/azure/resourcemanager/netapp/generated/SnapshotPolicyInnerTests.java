// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.netapp.fluent.models.SnapshotPolicyInner;
import com.azure.resourcemanager.netapp.models.DailySchedule;
import com.azure.resourcemanager.netapp.models.HourlySchedule;
import com.azure.resourcemanager.netapp.models.MonthlySchedule;
import com.azure.resourcemanager.netapp.models.WeeklySchedule;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SnapshotPolicyInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SnapshotPolicyInner model = BinaryData.fromString(
            "{\"etag\":\"buukzclewyhml\",\"properties\":{\"hourlySchedule\":{\"snapshotsToKeep\":1059529277,\"minute\":1019657066,\"usedBytes\":8151754821944685957},\"dailySchedule\":{\"snapshotsToKeep\":637378408,\"hour\":1454988388,\"minute\":335733577,\"usedBytes\":9122287119355467185},\"weeklySchedule\":{\"snapshotsToKeep\":1032331086,\"day\":\"uyqaxzfeqztppr\",\"hour\":1872827948,\"minute\":411799174,\"usedBytes\":476050547111706606},\"monthlySchedule\":{\"snapshotsToKeep\":1263192387,\"daysOfMonth\":\"mncwsobqwcsdb\",\"hour\":358085488,\"minute\":301965904,\"usedBytes\":4564036703914866280},\"enabled\":false,\"provisioningState\":\"fuvglsbjjca\"},\"location\":\"xbvtvudu\",\"tags\":{\"kgjubgdknnqvsazn\":\"ormrlxqtvcofudfl\",\"orudsgsa\":\"n\"},\"id\":\"mkycgra\",\"name\":\"wjue\",\"type\":\"aeburuvdmo\"}")
            .toObject(SnapshotPolicyInner.class);
        Assertions.assertEquals("xbvtvudu", model.location());
        Assertions.assertEquals("ormrlxqtvcofudfl", model.tags().get("kgjubgdknnqvsazn"));
        Assertions.assertEquals(1059529277, model.hourlySchedule().snapshotsToKeep());
        Assertions.assertEquals(1019657066, model.hourlySchedule().minute());
        Assertions.assertEquals(8151754821944685957L, model.hourlySchedule().usedBytes());
        Assertions.assertEquals(637378408, model.dailySchedule().snapshotsToKeep());
        Assertions.assertEquals(1454988388, model.dailySchedule().hour());
        Assertions.assertEquals(335733577, model.dailySchedule().minute());
        Assertions.assertEquals(9122287119355467185L, model.dailySchedule().usedBytes());
        Assertions.assertEquals(1032331086, model.weeklySchedule().snapshotsToKeep());
        Assertions.assertEquals("uyqaxzfeqztppr", model.weeklySchedule().day());
        Assertions.assertEquals(1872827948, model.weeklySchedule().hour());
        Assertions.assertEquals(411799174, model.weeklySchedule().minute());
        Assertions.assertEquals(476050547111706606L, model.weeklySchedule().usedBytes());
        Assertions.assertEquals(1263192387, model.monthlySchedule().snapshotsToKeep());
        Assertions.assertEquals("mncwsobqwcsdb", model.monthlySchedule().daysOfMonth());
        Assertions.assertEquals(358085488, model.monthlySchedule().hour());
        Assertions.assertEquals(301965904, model.monthlySchedule().minute());
        Assertions.assertEquals(4564036703914866280L, model.monthlySchedule().usedBytes());
        Assertions.assertEquals(false, model.enabled());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SnapshotPolicyInner model = new SnapshotPolicyInner().withLocation("xbvtvudu")
            .withTags(mapOf("kgjubgdknnqvsazn", "ormrlxqtvcofudfl", "orudsgsa", "n"))
            .withHourlySchedule(new HourlySchedule().withSnapshotsToKeep(1059529277)
                .withMinute(1019657066)
                .withUsedBytes(8151754821944685957L))
            .withDailySchedule(new DailySchedule().withSnapshotsToKeep(637378408)
                .withHour(1454988388)
                .withMinute(335733577)
                .withUsedBytes(9122287119355467185L))
            .withWeeklySchedule(new WeeklySchedule().withSnapshotsToKeep(1032331086)
                .withDay("uyqaxzfeqztppr")
                .withHour(1872827948)
                .withMinute(411799174)
                .withUsedBytes(476050547111706606L))
            .withMonthlySchedule(new MonthlySchedule().withSnapshotsToKeep(1263192387)
                .withDaysOfMonth("mncwsobqwcsdb")
                .withHour(358085488)
                .withMinute(301965904)
                .withUsedBytes(4564036703914866280L))
            .withEnabled(false);
        model = BinaryData.fromObject(model).toObject(SnapshotPolicyInner.class);
        Assertions.assertEquals("xbvtvudu", model.location());
        Assertions.assertEquals("ormrlxqtvcofudfl", model.tags().get("kgjubgdknnqvsazn"));
        Assertions.assertEquals(1059529277, model.hourlySchedule().snapshotsToKeep());
        Assertions.assertEquals(1019657066, model.hourlySchedule().minute());
        Assertions.assertEquals(8151754821944685957L, model.hourlySchedule().usedBytes());
        Assertions.assertEquals(637378408, model.dailySchedule().snapshotsToKeep());
        Assertions.assertEquals(1454988388, model.dailySchedule().hour());
        Assertions.assertEquals(335733577, model.dailySchedule().minute());
        Assertions.assertEquals(9122287119355467185L, model.dailySchedule().usedBytes());
        Assertions.assertEquals(1032331086, model.weeklySchedule().snapshotsToKeep());
        Assertions.assertEquals("uyqaxzfeqztppr", model.weeklySchedule().day());
        Assertions.assertEquals(1872827948, model.weeklySchedule().hour());
        Assertions.assertEquals(411799174, model.weeklySchedule().minute());
        Assertions.assertEquals(476050547111706606L, model.weeklySchedule().usedBytes());
        Assertions.assertEquals(1263192387, model.monthlySchedule().snapshotsToKeep());
        Assertions.assertEquals("mncwsobqwcsdb", model.monthlySchedule().daysOfMonth());
        Assertions.assertEquals(358085488, model.monthlySchedule().hour());
        Assertions.assertEquals(301965904, model.monthlySchedule().minute());
        Assertions.assertEquals(4564036703914866280L, model.monthlySchedule().usedBytes());
        Assertions.assertEquals(false, model.enabled());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
