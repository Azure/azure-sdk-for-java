// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.netapp.fluent.models.SnapshotPolicyInner;
import com.azure.resourcemanager.netapp.models.DailySchedule;
import com.azure.resourcemanager.netapp.models.HourlySchedule;
import com.azure.resourcemanager.netapp.models.MonthlySchedule;
import com.azure.resourcemanager.netapp.models.WeeklySchedule;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SnapshotPolicyInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SnapshotPolicyInner model = BinaryData.fromString(
            "{\"etag\":\"ky\",\"properties\":{\"hourlySchedule\":{\"snapshotsToKeep\":32675843,\"minute\":1237082530,\"usedBytes\":1731792145789040801},\"dailySchedule\":{\"snapshotsToKeep\":583924547,\"hour\":879645241,\"minute\":761384571,\"usedBytes\":3973281254631070018},\"weeklySchedule\":{\"snapshotsToKeep\":1090573693,\"day\":\"i\",\"hour\":988494266,\"minute\":1400063393,\"usedBytes\":4017859491636830437},\"monthlySchedule\":{\"snapshotsToKeep\":942836166,\"daysOfMonth\":\"yxbaaabjyvayf\",\"hour\":221742108,\"minute\":1578513386,\"usedBytes\":2334961314382685770},\"enabled\":true,\"provisioningState\":\"gsexne\"},\"location\":\"dnw\",\"tags\":{\"ud\":\"ewzsyyceuzsoib\",\"brqubp\":\"frxtrthzvaytdwk\"},\"id\":\"xhexiilivpdti\",\"name\":\"r\",\"type\":\"tdqoaxoruzfgsq\"}")
            .toObject(SnapshotPolicyInner.class);
        Assertions.assertEquals("dnw", model.location());
        Assertions.assertEquals("ewzsyyceuzsoib", model.tags().get("ud"));
        Assertions.assertEquals(32675843, model.hourlySchedule().snapshotsToKeep());
        Assertions.assertEquals(1237082530, model.hourlySchedule().minute());
        Assertions.assertEquals(1731792145789040801L, model.hourlySchedule().usedBytes());
        Assertions.assertEquals(583924547, model.dailySchedule().snapshotsToKeep());
        Assertions.assertEquals(879645241, model.dailySchedule().hour());
        Assertions.assertEquals(761384571, model.dailySchedule().minute());
        Assertions.assertEquals(3973281254631070018L, model.dailySchedule().usedBytes());
        Assertions.assertEquals(1090573693, model.weeklySchedule().snapshotsToKeep());
        Assertions.assertEquals("i", model.weeklySchedule().day());
        Assertions.assertEquals(988494266, model.weeklySchedule().hour());
        Assertions.assertEquals(1400063393, model.weeklySchedule().minute());
        Assertions.assertEquals(4017859491636830437L, model.weeklySchedule().usedBytes());
        Assertions.assertEquals(942836166, model.monthlySchedule().snapshotsToKeep());
        Assertions.assertEquals("yxbaaabjyvayf", model.monthlySchedule().daysOfMonth());
        Assertions.assertEquals(221742108, model.monthlySchedule().hour());
        Assertions.assertEquals(1578513386, model.monthlySchedule().minute());
        Assertions.assertEquals(2334961314382685770L, model.monthlySchedule().usedBytes());
        Assertions.assertEquals(true, model.enabled());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SnapshotPolicyInner model = new SnapshotPolicyInner().withLocation("dnw")
            .withTags(mapOf("ud", "ewzsyyceuzsoib", "brqubp", "frxtrthzvaytdwk"))
            .withHourlySchedule(new HourlySchedule().withSnapshotsToKeep(32675843)
                .withMinute(1237082530)
                .withUsedBytes(1731792145789040801L))
            .withDailySchedule(new DailySchedule().withSnapshotsToKeep(583924547)
                .withHour(879645241)
                .withMinute(761384571)
                .withUsedBytes(3973281254631070018L))
            .withWeeklySchedule(new WeeklySchedule().withSnapshotsToKeep(1090573693)
                .withDay("i")
                .withHour(988494266)
                .withMinute(1400063393)
                .withUsedBytes(4017859491636830437L))
            .withMonthlySchedule(new MonthlySchedule().withSnapshotsToKeep(942836166)
                .withDaysOfMonth("yxbaaabjyvayf")
                .withHour(221742108)
                .withMinute(1578513386)
                .withUsedBytes(2334961314382685770L))
            .withEnabled(true);
        model = BinaryData.fromObject(model).toObject(SnapshotPolicyInner.class);
        Assertions.assertEquals("dnw", model.location());
        Assertions.assertEquals("ewzsyyceuzsoib", model.tags().get("ud"));
        Assertions.assertEquals(32675843, model.hourlySchedule().snapshotsToKeep());
        Assertions.assertEquals(1237082530, model.hourlySchedule().minute());
        Assertions.assertEquals(1731792145789040801L, model.hourlySchedule().usedBytes());
        Assertions.assertEquals(583924547, model.dailySchedule().snapshotsToKeep());
        Assertions.assertEquals(879645241, model.dailySchedule().hour());
        Assertions.assertEquals(761384571, model.dailySchedule().minute());
        Assertions.assertEquals(3973281254631070018L, model.dailySchedule().usedBytes());
        Assertions.assertEquals(1090573693, model.weeklySchedule().snapshotsToKeep());
        Assertions.assertEquals("i", model.weeklySchedule().day());
        Assertions.assertEquals(988494266, model.weeklySchedule().hour());
        Assertions.assertEquals(1400063393, model.weeklySchedule().minute());
        Assertions.assertEquals(4017859491636830437L, model.weeklySchedule().usedBytes());
        Assertions.assertEquals(942836166, model.monthlySchedule().snapshotsToKeep());
        Assertions.assertEquals("yxbaaabjyvayf", model.monthlySchedule().daysOfMonth());
        Assertions.assertEquals(221742108, model.monthlySchedule().hour());
        Assertions.assertEquals(1578513386, model.monthlySchedule().minute());
        Assertions.assertEquals(2334961314382685770L, model.monthlySchedule().usedBytes());
        Assertions.assertEquals(true, model.enabled());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
