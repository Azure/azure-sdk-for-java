// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.netapp.fluent.models.SnapshotPolicyInner;
import com.azure.resourcemanager.netapp.models.DailySchedule;
import com.azure.resourcemanager.netapp.models.HourlySchedule;
import com.azure.resourcemanager.netapp.models.MonthlySchedule;
import com.azure.resourcemanager.netapp.models.WeeklySchedule;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SnapshotPolicyInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SnapshotPolicyInner model = BinaryData.fromString(
            "{\"etag\":\"gpiohgwxrtfudxe\",\"properties\":{\"hourlySchedule\":{\"snapshotsToKeep\":1902888428,\"minute\":682770513,\"usedBytes\":5596269908877645907},\"dailySchedule\":{\"snapshotsToKeep\":1104557585,\"hour\":128514806,\"minute\":1947559864,\"usedBytes\":6566741920348285642},\"weeklySchedule\":{\"snapshotsToKeep\":2068705398,\"day\":\"xgwim\",\"hour\":1697714955,\"minute\":1799565782,\"usedBytes\":2192828191882361978},\"monthlySchedule\":{\"snapshotsToKeep\":279128548,\"daysOfMonth\":\"kfoqreyfkzikfj\",\"hour\":195683064,\"minute\":113630721,\"usedBytes\":3613181819399504746},\"enabled\":true,\"provisioningState\":\"elpcirelsfeaenwa\"},\"location\":\"atklddxbjhwuaa\",\"tags\":{\"hyoulpjr\":\"jos\",\"vimjwos\":\"xagl\"},\"id\":\"tx\",\"name\":\"tcs\",\"type\":\"fcktqumiekke\"}")
            .toObject(SnapshotPolicyInner.class);
        Assertions.assertEquals("atklddxbjhwuaa", model.location());
        Assertions.assertEquals("jos", model.tags().get("hyoulpjr"));
        Assertions.assertEquals(1902888428, model.hourlySchedule().snapshotsToKeep());
        Assertions.assertEquals(682770513, model.hourlySchedule().minute());
        Assertions.assertEquals(5596269908877645907L, model.hourlySchedule().usedBytes());
        Assertions.assertEquals(1104557585, model.dailySchedule().snapshotsToKeep());
        Assertions.assertEquals(128514806, model.dailySchedule().hour());
        Assertions.assertEquals(1947559864, model.dailySchedule().minute());
        Assertions.assertEquals(6566741920348285642L, model.dailySchedule().usedBytes());
        Assertions.assertEquals(2068705398, model.weeklySchedule().snapshotsToKeep());
        Assertions.assertEquals("xgwim", model.weeklySchedule().day());
        Assertions.assertEquals(1697714955, model.weeklySchedule().hour());
        Assertions.assertEquals(1799565782, model.weeklySchedule().minute());
        Assertions.assertEquals(2192828191882361978L, model.weeklySchedule().usedBytes());
        Assertions.assertEquals(279128548, model.monthlySchedule().snapshotsToKeep());
        Assertions.assertEquals("kfoqreyfkzikfj", model.monthlySchedule().daysOfMonth());
        Assertions.assertEquals(195683064, model.monthlySchedule().hour());
        Assertions.assertEquals(113630721, model.monthlySchedule().minute());
        Assertions.assertEquals(3613181819399504746L, model.monthlySchedule().usedBytes());
        Assertions.assertEquals(true, model.enabled());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SnapshotPolicyInner model = new SnapshotPolicyInner().withLocation("atklddxbjhwuaa")
            .withTags(mapOf("hyoulpjr", "jos", "vimjwos", "xagl"))
            .withHourlySchedule(new HourlySchedule().withSnapshotsToKeep(1902888428).withMinute(682770513)
                .withUsedBytes(5596269908877645907L))
            .withDailySchedule(new DailySchedule().withSnapshotsToKeep(1104557585).withHour(128514806)
                .withMinute(1947559864).withUsedBytes(6566741920348285642L))
            .withWeeklySchedule(new WeeklySchedule().withSnapshotsToKeep(2068705398).withDay("xgwim")
                .withHour(1697714955).withMinute(1799565782).withUsedBytes(2192828191882361978L))
            .withMonthlySchedule(new MonthlySchedule().withSnapshotsToKeep(279128548).withDaysOfMonth("kfoqreyfkzikfj")
                .withHour(195683064).withMinute(113630721).withUsedBytes(3613181819399504746L))
            .withEnabled(true);
        model = BinaryData.fromObject(model).toObject(SnapshotPolicyInner.class);
        Assertions.assertEquals("atklddxbjhwuaa", model.location());
        Assertions.assertEquals("jos", model.tags().get("hyoulpjr"));
        Assertions.assertEquals(1902888428, model.hourlySchedule().snapshotsToKeep());
        Assertions.assertEquals(682770513, model.hourlySchedule().minute());
        Assertions.assertEquals(5596269908877645907L, model.hourlySchedule().usedBytes());
        Assertions.assertEquals(1104557585, model.dailySchedule().snapshotsToKeep());
        Assertions.assertEquals(128514806, model.dailySchedule().hour());
        Assertions.assertEquals(1947559864, model.dailySchedule().minute());
        Assertions.assertEquals(6566741920348285642L, model.dailySchedule().usedBytes());
        Assertions.assertEquals(2068705398, model.weeklySchedule().snapshotsToKeep());
        Assertions.assertEquals("xgwim", model.weeklySchedule().day());
        Assertions.assertEquals(1697714955, model.weeklySchedule().hour());
        Assertions.assertEquals(1799565782, model.weeklySchedule().minute());
        Assertions.assertEquals(2192828191882361978L, model.weeklySchedule().usedBytes());
        Assertions.assertEquals(279128548, model.monthlySchedule().snapshotsToKeep());
        Assertions.assertEquals("kfoqreyfkzikfj", model.monthlySchedule().daysOfMonth());
        Assertions.assertEquals(195683064, model.monthlySchedule().hour());
        Assertions.assertEquals(113630721, model.monthlySchedule().minute());
        Assertions.assertEquals(3613181819399504746L, model.monthlySchedule().usedBytes());
        Assertions.assertEquals(true, model.enabled());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
