// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.netapp.fluent.models.SnapshotPolicyInner;
import com.azure.resourcemanager.netapp.models.DailySchedule;
import com.azure.resourcemanager.netapp.models.HourlySchedule;
import com.azure.resourcemanager.netapp.models.MonthlySchedule;
import com.azure.resourcemanager.netapp.models.WeeklySchedule;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SnapshotPolicyInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SnapshotPolicyInner model = BinaryData.fromString(
            "{\"etag\":\"l\",\"properties\":{\"hourlySchedule\":{\"snapshotsToKeep\":1686383029,\"minute\":39972053,\"usedBytes\":2495517310112510640},\"dailySchedule\":{\"snapshotsToKeep\":2145512273,\"hour\":494596236,\"minute\":661100043,\"usedBytes\":6615521098570079164},\"weeklySchedule\":{\"snapshotsToKeep\":308243032,\"day\":\"qqmoaku\",\"hour\":127978460,\"minute\":328261823,\"usedBytes\":1502170199128472445},\"monthlySchedule\":{\"snapshotsToKeep\":632499232,\"daysOfMonth\":\"wae\",\"hour\":809360205,\"minute\":32016010,\"usedBytes\":6235701474270002775},\"enabled\":true,\"provisioningState\":\"rfdwoyu\"},\"location\":\"ziuiefozbhdm\",\"tags\":{\"hxicslfaoqz\":\"mzqhoftrmaequi\"},\"id\":\"iyylhalnswhccsp\",\"name\":\"kaivwit\",\"type\":\"scywuggwoluhc\"}")
            .toObject(SnapshotPolicyInner.class);
        Assertions.assertEquals("ziuiefozbhdm", model.location());
        Assertions.assertEquals("mzqhoftrmaequi", model.tags().get("hxicslfaoqz"));
        Assertions.assertEquals(1686383029, model.hourlySchedule().snapshotsToKeep());
        Assertions.assertEquals(39972053, model.hourlySchedule().minute());
        Assertions.assertEquals(2495517310112510640L, model.hourlySchedule().usedBytes());
        Assertions.assertEquals(2145512273, model.dailySchedule().snapshotsToKeep());
        Assertions.assertEquals(494596236, model.dailySchedule().hour());
        Assertions.assertEquals(661100043, model.dailySchedule().minute());
        Assertions.assertEquals(6615521098570079164L, model.dailySchedule().usedBytes());
        Assertions.assertEquals(308243032, model.weeklySchedule().snapshotsToKeep());
        Assertions.assertEquals("qqmoaku", model.weeklySchedule().day());
        Assertions.assertEquals(127978460, model.weeklySchedule().hour());
        Assertions.assertEquals(328261823, model.weeklySchedule().minute());
        Assertions.assertEquals(1502170199128472445L, model.weeklySchedule().usedBytes());
        Assertions.assertEquals(632499232, model.monthlySchedule().snapshotsToKeep());
        Assertions.assertEquals("wae", model.monthlySchedule().daysOfMonth());
        Assertions.assertEquals(809360205, model.monthlySchedule().hour());
        Assertions.assertEquals(32016010, model.monthlySchedule().minute());
        Assertions.assertEquals(6235701474270002775L, model.monthlySchedule().usedBytes());
        Assertions.assertTrue(model.enabled());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SnapshotPolicyInner model = new SnapshotPolicyInner().withLocation("ziuiefozbhdm")
            .withTags(mapOf("hxicslfaoqz", "mzqhoftrmaequi"))
            .withHourlySchedule(new HourlySchedule().withSnapshotsToKeep(1686383029)
                .withMinute(39972053)
                .withUsedBytes(2495517310112510640L))
            .withDailySchedule(new DailySchedule().withSnapshotsToKeep(2145512273)
                .withHour(494596236)
                .withMinute(661100043)
                .withUsedBytes(6615521098570079164L))
            .withWeeklySchedule(new WeeklySchedule().withSnapshotsToKeep(308243032)
                .withDay("qqmoaku")
                .withHour(127978460)
                .withMinute(328261823)
                .withUsedBytes(1502170199128472445L))
            .withMonthlySchedule(new MonthlySchedule().withSnapshotsToKeep(632499232)
                .withDaysOfMonth("wae")
                .withHour(809360205)
                .withMinute(32016010)
                .withUsedBytes(6235701474270002775L))
            .withEnabled(true);
        model = BinaryData.fromObject(model).toObject(SnapshotPolicyInner.class);
        Assertions.assertEquals("ziuiefozbhdm", model.location());
        Assertions.assertEquals("mzqhoftrmaequi", model.tags().get("hxicslfaoqz"));
        Assertions.assertEquals(1686383029, model.hourlySchedule().snapshotsToKeep());
        Assertions.assertEquals(39972053, model.hourlySchedule().minute());
        Assertions.assertEquals(2495517310112510640L, model.hourlySchedule().usedBytes());
        Assertions.assertEquals(2145512273, model.dailySchedule().snapshotsToKeep());
        Assertions.assertEquals(494596236, model.dailySchedule().hour());
        Assertions.assertEquals(661100043, model.dailySchedule().minute());
        Assertions.assertEquals(6615521098570079164L, model.dailySchedule().usedBytes());
        Assertions.assertEquals(308243032, model.weeklySchedule().snapshotsToKeep());
        Assertions.assertEquals("qqmoaku", model.weeklySchedule().day());
        Assertions.assertEquals(127978460, model.weeklySchedule().hour());
        Assertions.assertEquals(328261823, model.weeklySchedule().minute());
        Assertions.assertEquals(1502170199128472445L, model.weeklySchedule().usedBytes());
        Assertions.assertEquals(632499232, model.monthlySchedule().snapshotsToKeep());
        Assertions.assertEquals("wae", model.monthlySchedule().daysOfMonth());
        Assertions.assertEquals(809360205, model.monthlySchedule().hour());
        Assertions.assertEquals(32016010, model.monthlySchedule().minute());
        Assertions.assertEquals(6235701474270002775L, model.monthlySchedule().usedBytes());
        Assertions.assertTrue(model.enabled());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
