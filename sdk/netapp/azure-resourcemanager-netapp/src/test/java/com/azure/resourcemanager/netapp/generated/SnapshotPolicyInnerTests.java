// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.netapp.fluent.models.SnapshotPolicyInner;
import com.azure.resourcemanager.netapp.models.DailySchedule;
import com.azure.resourcemanager.netapp.models.HourlySchedule;
import com.azure.resourcemanager.netapp.models.MonthlySchedule;
import com.azure.resourcemanager.netapp.models.WeeklySchedule;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SnapshotPolicyInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SnapshotPolicyInner model = BinaryData.fromString(
            "{\"etag\":\"dsuvarmywdmjsjqb\",\"properties\":{\"hourlySchedule\":{\"snapshotsToKeep\":1027618115,\"minute\":1555252966,\"usedBytes\":5744286568716968585},\"dailySchedule\":{\"snapshotsToKeep\":1115314881,\"hour\":803302222,\"minute\":141819927,\"usedBytes\":7914857163807651319},\"weeklySchedule\":{\"snapshotsToKeep\":1081662268,\"day\":\"re\",\"hour\":999279087,\"minute\":1478958255,\"usedBytes\":6736972913480201725},\"monthlySchedule\":{\"snapshotsToKeep\":432489630,\"daysOfMonth\":\"cubeddgssofw\",\"hour\":1153520576,\"minute\":1521931041,\"usedBytes\":7998631817770989072},\"enabled\":true,\"provisioningState\":\"i\"},\"location\":\"xacqqudfnbyx\",\"tags\":{\"ayffim\":\"abjy\",\"gsexne\":\"zrtuzq\",\"wmewzsyy\":\"fdnw\",\"judpfrxt\":\"euzsoi\"},\"id\":\"thzvaytdwkqbrqu\",\"name\":\"paxh\",\"type\":\"xiilivpdtiirqt\"}")
            .toObject(SnapshotPolicyInner.class);
        Assertions.assertEquals("xacqqudfnbyx", model.location());
        Assertions.assertEquals("abjy", model.tags().get("ayffim"));
        Assertions.assertEquals(1027618115, model.hourlySchedule().snapshotsToKeep());
        Assertions.assertEquals(1555252966, model.hourlySchedule().minute());
        Assertions.assertEquals(5744286568716968585L, model.hourlySchedule().usedBytes());
        Assertions.assertEquals(1115314881, model.dailySchedule().snapshotsToKeep());
        Assertions.assertEquals(803302222, model.dailySchedule().hour());
        Assertions.assertEquals(141819927, model.dailySchedule().minute());
        Assertions.assertEquals(7914857163807651319L, model.dailySchedule().usedBytes());
        Assertions.assertEquals(1081662268, model.weeklySchedule().snapshotsToKeep());
        Assertions.assertEquals("re", model.weeklySchedule().day());
        Assertions.assertEquals(999279087, model.weeklySchedule().hour());
        Assertions.assertEquals(1478958255, model.weeklySchedule().minute());
        Assertions.assertEquals(6736972913480201725L, model.weeklySchedule().usedBytes());
        Assertions.assertEquals(432489630, model.monthlySchedule().snapshotsToKeep());
        Assertions.assertEquals("cubeddgssofw", model.monthlySchedule().daysOfMonth());
        Assertions.assertEquals(1153520576, model.monthlySchedule().hour());
        Assertions.assertEquals(1521931041, model.monthlySchedule().minute());
        Assertions.assertEquals(7998631817770989072L, model.monthlySchedule().usedBytes());
        Assertions.assertTrue(model.enabled());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SnapshotPolicyInner model = new SnapshotPolicyInner().withLocation("xacqqudfnbyx")
            .withTags(mapOf("ayffim", "abjy", "gsexne", "zrtuzq", "wmewzsyy", "fdnw", "judpfrxt", "euzsoi"))
            .withHourlySchedule(new HourlySchedule().withSnapshotsToKeep(1027618115)
                .withMinute(1555252966)
                .withUsedBytes(5744286568716968585L))
            .withDailySchedule(new DailySchedule().withSnapshotsToKeep(1115314881)
                .withHour(803302222)
                .withMinute(141819927)
                .withUsedBytes(7914857163807651319L))
            .withWeeklySchedule(new WeeklySchedule().withSnapshotsToKeep(1081662268)
                .withDay("re")
                .withHour(999279087)
                .withMinute(1478958255)
                .withUsedBytes(6736972913480201725L))
            .withMonthlySchedule(new MonthlySchedule().withSnapshotsToKeep(432489630)
                .withDaysOfMonth("cubeddgssofw")
                .withHour(1153520576)
                .withMinute(1521931041)
                .withUsedBytes(7998631817770989072L))
            .withEnabled(true);
        model = BinaryData.fromObject(model).toObject(SnapshotPolicyInner.class);
        Assertions.assertEquals("xacqqudfnbyx", model.location());
        Assertions.assertEquals("abjy", model.tags().get("ayffim"));
        Assertions.assertEquals(1027618115, model.hourlySchedule().snapshotsToKeep());
        Assertions.assertEquals(1555252966, model.hourlySchedule().minute());
        Assertions.assertEquals(5744286568716968585L, model.hourlySchedule().usedBytes());
        Assertions.assertEquals(1115314881, model.dailySchedule().snapshotsToKeep());
        Assertions.assertEquals(803302222, model.dailySchedule().hour());
        Assertions.assertEquals(141819927, model.dailySchedule().minute());
        Assertions.assertEquals(7914857163807651319L, model.dailySchedule().usedBytes());
        Assertions.assertEquals(1081662268, model.weeklySchedule().snapshotsToKeep());
        Assertions.assertEquals("re", model.weeklySchedule().day());
        Assertions.assertEquals(999279087, model.weeklySchedule().hour());
        Assertions.assertEquals(1478958255, model.weeklySchedule().minute());
        Assertions.assertEquals(6736972913480201725L, model.weeklySchedule().usedBytes());
        Assertions.assertEquals(432489630, model.monthlySchedule().snapshotsToKeep());
        Assertions.assertEquals("cubeddgssofw", model.monthlySchedule().daysOfMonth());
        Assertions.assertEquals(1153520576, model.monthlySchedule().hour());
        Assertions.assertEquals(1521931041, model.monthlySchedule().minute());
        Assertions.assertEquals(7998631817770989072L, model.monthlySchedule().usedBytes());
        Assertions.assertTrue(model.enabled());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
