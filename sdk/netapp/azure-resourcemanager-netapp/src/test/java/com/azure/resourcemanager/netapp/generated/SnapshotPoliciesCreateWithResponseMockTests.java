// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.netapp.NetAppFilesManager;
import com.azure.resourcemanager.netapp.models.DailySchedule;
import com.azure.resourcemanager.netapp.models.HourlySchedule;
import com.azure.resourcemanager.netapp.models.MonthlySchedule;
import com.azure.resourcemanager.netapp.models.SnapshotPolicy;
import com.azure.resourcemanager.netapp.models.WeeklySchedule;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class SnapshotPoliciesCreateWithResponseMockTests {
    @Test
    public void testCreateWithResponse() throws Exception {
        String responseStr
            = "{\"etag\":\"pofoi\",\"properties\":{\"hourlySchedule\":{\"snapshotsToKeep\":179547673,\"minute\":1217605698,\"usedBytes\":3076873232947895029},\"dailySchedule\":{\"snapshotsToKeep\":1510318129,\"hour\":59722653,\"minute\":272074002,\"usedBytes\":8388081220495319367},\"weeklySchedule\":{\"snapshotsToKeep\":1834993865,\"day\":\"gphuartvtiu\",\"hour\":1323258140,\"minute\":1475609054,\"usedBytes\":8570024839367974546},\"monthlySchedule\":{\"snapshotsToKeep\":490468657,\"daysOfMonth\":\"nxhkxjqi\",\"hour\":994792416,\"minute\":172621613,\"usedBytes\":6225651252305347741},\"enabled\":true,\"provisioningState\":\"fhxwrsne\"},\"location\":\"ozqvbubqmam\",\"tags\":{\"xz\":\"cx\",\"ppu\":\"azttaboidvmfq\",\"btcjuah\":\"owsepdfgkmtdhern\"},\"id\":\"kqtob\",\"name\":\"auxofshfph\",\"type\":\"pnulaiywzej\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        NetAppFilesManager manager = NetAppFilesManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        SnapshotPolicy response = manager.snapshotPolicies()
            .define("ttgplucfotangcf")
            .withRegion("mur")
            .withExistingNetAppAccount("ekov", "ribi")
            .withTags(mapOf("wpktvqylkmqpzoyh", "g"))
            .withHourlySchedule(new HourlySchedule().withSnapshotsToKeep(2107871356)
                .withMinute(1129614200)
                .withUsedBytes(6906743101666991339L))
            .withDailySchedule(new DailySchedule().withSnapshotsToKeep(1707570357)
                .withHour(1038183797)
                .withMinute(84697617)
                .withUsedBytes(6585872083691327234L))
            .withWeeklySchedule(new WeeklySchedule().withSnapshotsToKeep(1226161915)
                .withDay("xynpdkvgf")
                .withHour(1392311287)
                .withMinute(1082360596)
                .withUsedBytes(4461489025878240096L))
            .withMonthlySchedule(new MonthlySchedule().withSnapshotsToKeep(874901455)
                .withDaysOfMonth("dugneiknp")
                .withHour(1795509017)
                .withMinute(679525953)
                .withUsedBytes(2310378494180433800L))
            .withEnabled(true)
            .create();

        Assertions.assertEquals("ozqvbubqmam", response.location());
        Assertions.assertEquals("cx", response.tags().get("xz"));
        Assertions.assertEquals(179547673, response.hourlySchedule().snapshotsToKeep());
        Assertions.assertEquals(1217605698, response.hourlySchedule().minute());
        Assertions.assertEquals(3076873232947895029L, response.hourlySchedule().usedBytes());
        Assertions.assertEquals(1510318129, response.dailySchedule().snapshotsToKeep());
        Assertions.assertEquals(59722653, response.dailySchedule().hour());
        Assertions.assertEquals(272074002, response.dailySchedule().minute());
        Assertions.assertEquals(8388081220495319367L, response.dailySchedule().usedBytes());
        Assertions.assertEquals(1834993865, response.weeklySchedule().snapshotsToKeep());
        Assertions.assertEquals("gphuartvtiu", response.weeklySchedule().day());
        Assertions.assertEquals(1323258140, response.weeklySchedule().hour());
        Assertions.assertEquals(1475609054, response.weeklySchedule().minute());
        Assertions.assertEquals(8570024839367974546L, response.weeklySchedule().usedBytes());
        Assertions.assertEquals(490468657, response.monthlySchedule().snapshotsToKeep());
        Assertions.assertEquals("nxhkxjqi", response.monthlySchedule().daysOfMonth());
        Assertions.assertEquals(994792416, response.monthlySchedule().hour());
        Assertions.assertEquals(172621613, response.monthlySchedule().minute());
        Assertions.assertEquals(6225651252305347741L, response.monthlySchedule().usedBytes());
        Assertions.assertTrue(response.enabled());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
