// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.netapp.NetAppFilesManager;
import com.azure.resourcemanager.netapp.models.DailySchedule;
import com.azure.resourcemanager.netapp.models.HourlySchedule;
import com.azure.resourcemanager.netapp.models.MonthlySchedule;
import com.azure.resourcemanager.netapp.models.SnapshotPolicy;
import com.azure.resourcemanager.netapp.models.WeeklySchedule;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class SnapshotPoliciesCreateWithResponseMockTests {
    @Test
    public void testCreateWithResponse() throws Exception {
        String responseStr
            = "{\"etag\":\"mik\",\"properties\":{\"hourlySchedule\":{\"snapshotsToKeep\":1481332567,\"minute\":1007357311,\"usedBytes\":8037698697643250777},\"dailySchedule\":{\"snapshotsToKeep\":676807161,\"hour\":1276364779,\"minute\":739962917,\"usedBytes\":5887805559370172927},\"weeklySchedule\":{\"snapshotsToKeep\":1683087482,\"day\":\"crpfbcunez\",\"hour\":262075273,\"minute\":1261110082,\"usedBytes\":4477654614915843418},\"monthlySchedule\":{\"snapshotsToKeep\":446778446,\"daysOfMonth\":\"wx\",\"hour\":139746588,\"minute\":228143723,\"usedBytes\":5757660492867019477},\"enabled\":true,\"provisioningState\":\"afzvaylptrs\"},\"location\":\"wztcmwqkchc\",\"tags\":{\"zjkjexfdeqv\":\"xfe\"},\"id\":\"psylkkshkbffmbmx\",\"name\":\"jrgywwpgjxsn\",\"type\":\"tf\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        NetAppFilesManager manager = NetAppFilesManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        SnapshotPolicy response = manager.snapshotPolicies()
            .define("pofvwb")
            .withRegion("vuhrylni")
            .withExistingNetAppAccount("iqxeiiqbimht", "wwinhehf")
            .withTags(mapOf("jed", "zgb"))
            .withHourlySchedule(new HourlySchedule().withSnapshotsToKeep(644541941)
                .withMinute(229905373)
                .withUsedBytes(1797830291176200386L))
            .withDailySchedule(new DailySchedule().withSnapshotsToKeep(2078185567)
                .withHour(256725056)
                .withMinute(59905727)
                .withUsedBytes(6356214281466171581L))
            .withWeeklySchedule(new WeeklySchedule().withSnapshotsToKeep(1298087244)
                .withDay("izvcjfe")
                .withHour(2118325917)
                .withMinute(1329122271)
                .withUsedBytes(5681024110622720495L))
            .withMonthlySchedule(new MonthlySchedule().withSnapshotsToKeep(1287952694)
                .withDaysOfMonth("gkxkbsazgakg")
                .withHour(1269328196)
                .withMinute(246436279)
                .withUsedBytes(8753212877691139590L))
            .withEnabled(true)
            .create();

        Assertions.assertEquals("wztcmwqkchc", response.location());
        Assertions.assertEquals("xfe", response.tags().get("zjkjexfdeqv"));
        Assertions.assertEquals(1481332567, response.hourlySchedule().snapshotsToKeep());
        Assertions.assertEquals(1007357311, response.hourlySchedule().minute());
        Assertions.assertEquals(8037698697643250777L, response.hourlySchedule().usedBytes());
        Assertions.assertEquals(676807161, response.dailySchedule().snapshotsToKeep());
        Assertions.assertEquals(1276364779, response.dailySchedule().hour());
        Assertions.assertEquals(739962917, response.dailySchedule().minute());
        Assertions.assertEquals(5887805559370172927L, response.dailySchedule().usedBytes());
        Assertions.assertEquals(1683087482, response.weeklySchedule().snapshotsToKeep());
        Assertions.assertEquals("crpfbcunez", response.weeklySchedule().day());
        Assertions.assertEquals(262075273, response.weeklySchedule().hour());
        Assertions.assertEquals(1261110082, response.weeklySchedule().minute());
        Assertions.assertEquals(4477654614915843418L, response.weeklySchedule().usedBytes());
        Assertions.assertEquals(446778446, response.monthlySchedule().snapshotsToKeep());
        Assertions.assertEquals("wx", response.monthlySchedule().daysOfMonth());
        Assertions.assertEquals(139746588, response.monthlySchedule().hour());
        Assertions.assertEquals(228143723, response.monthlySchedule().minute());
        Assertions.assertEquals(5757660492867019477L, response.monthlySchedule().usedBytes());
        Assertions.assertEquals(true, response.enabled());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
