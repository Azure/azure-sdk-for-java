// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.netapp.NetAppFilesManager;
import com.azure.resourcemanager.netapp.models.DailySchedule;
import com.azure.resourcemanager.netapp.models.HourlySchedule;
import com.azure.resourcemanager.netapp.models.MonthlySchedule;
import com.azure.resourcemanager.netapp.models.SnapshotPolicy;
import com.azure.resourcemanager.netapp.models.WeeklySchedule;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class SnapshotPoliciesCreateWithResponseMockTests {
    @Test
    public void testCreateWithResponse() throws Exception {
        String responseStr
            = "{\"etag\":\"kyefchnmnahmnxhk\",\"properties\":{\"hourlySchedule\":{\"snapshotsToKeep\":1375223336,\"minute\":1523309198,\"usedBytes\":6875461100902154029},\"dailySchedule\":{\"snapshotsToKeep\":1025524893,\"hour\":641060199,\"minute\":1908059989,\"usedBytes\":6980954745708555342},\"weeklySchedule\":{\"snapshotsToKeep\":109793124,\"day\":\"wmozqvbub\",\"hour\":1359553105,\"minute\":584332320,\"usedBytes\":4252712587815072260},\"monthlySchedule\":{\"snapshotsToKeep\":459336606,\"daysOfMonth\":\"gaztt\",\"hour\":184475150,\"minute\":459855545,\"usedBytes\":3462457286901025092},\"enabled\":true,\"provisioningState\":\"pubowsepdfg\"},\"location\":\"tdherngbtcjuahok\",\"tags\":{\"ofshfphwpnulaiyw\":\"bkau\",\"ywhslwkojpllndnp\":\"e\",\"yetefyp\":\"wrpqafgfugsnnf\"},\"id\":\"coc\",\"name\":\"fjgtixrjvzuy\",\"type\":\"urmlmuo\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        NetAppFilesManager manager = NetAppFilesManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        SnapshotPolicy response = manager.snapshotPolicies()
            .define("xgjiuqh")
            .withRegion("pofoi")
            .withExistingNetAppAccount("phdu", "neiknpg")
            .withTags(mapOf("ilkmk", "p"))
            .withHourlySchedule(new HourlySchedule().withSnapshotsToKeep(1063877777)
                .withMinute(189610286)
                .withUsedBytes(994426263609562850L))
            .withDailySchedule(new DailySchedule().withSnapshotsToKeep(783540465)
                .withHour(2101350417)
                .withMinute(1212082891)
                .withUsedBytes(2313274218462985682L))
            .withWeeklySchedule(new WeeklySchedule().withSnapshotsToKeep(455213677)
                .withDay("o")
                .withHour(172898691)
                .withMinute(726864279)
                .withUsedBytes(5332986278611814316L))
            .withMonthlySchedule(new MonthlySchedule().withSnapshotsToKeep(125495169)
                .withDaysOfMonth("xoe")
                .withHour(189021776)
                .withMinute(1567586671)
                .withUsedBytes(9143156260970924467L))
            .withEnabled(false)
            .create();

        Assertions.assertEquals("tdherngbtcjuahok", response.location());
        Assertions.assertEquals("bkau", response.tags().get("ofshfphwpnulaiyw"));
        Assertions.assertEquals(1375223336, response.hourlySchedule().snapshotsToKeep());
        Assertions.assertEquals(1523309198, response.hourlySchedule().minute());
        Assertions.assertEquals(6875461100902154029L, response.hourlySchedule().usedBytes());
        Assertions.assertEquals(1025524893, response.dailySchedule().snapshotsToKeep());
        Assertions.assertEquals(641060199, response.dailySchedule().hour());
        Assertions.assertEquals(1908059989, response.dailySchedule().minute());
        Assertions.assertEquals(6980954745708555342L, response.dailySchedule().usedBytes());
        Assertions.assertEquals(109793124, response.weeklySchedule().snapshotsToKeep());
        Assertions.assertEquals("wmozqvbub", response.weeklySchedule().day());
        Assertions.assertEquals(1359553105, response.weeklySchedule().hour());
        Assertions.assertEquals(584332320, response.weeklySchedule().minute());
        Assertions.assertEquals(4252712587815072260L, response.weeklySchedule().usedBytes());
        Assertions.assertEquals(459336606, response.monthlySchedule().snapshotsToKeep());
        Assertions.assertEquals("gaztt", response.monthlySchedule().daysOfMonth());
        Assertions.assertEquals(184475150, response.monthlySchedule().hour());
        Assertions.assertEquals(459855545, response.monthlySchedule().minute());
        Assertions.assertEquals(3462457286901025092L, response.monthlySchedule().usedBytes());
        Assertions.assertTrue(response.enabled());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
