// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.netapp.NetAppFilesManager;
import com.azure.resourcemanager.netapp.models.DailySchedule;
import com.azure.resourcemanager.netapp.models.HourlySchedule;
import com.azure.resourcemanager.netapp.models.MonthlySchedule;
import com.azure.resourcemanager.netapp.models.SnapshotPolicy;
import com.azure.resourcemanager.netapp.models.WeeklySchedule;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class SnapshotPoliciesCreateWithResponseMockTests {
    @Test
    public void testCreateWithResponse() throws Exception {
        String responseStr
            = "{\"etag\":\"vclx\",\"properties\":{\"hourlySchedule\":{\"snapshotsToKeep\":1944925015,\"minute\":1087876109,\"usedBytes\":1260989656124162695},\"dailySchedule\":{\"snapshotsToKeep\":979398617,\"hour\":269435268,\"minute\":214346592,\"usedBytes\":3653577462373543887},\"weeklySchedule\":{\"snapshotsToKeep\":1714041739,\"day\":\"neiknpg\",\"hour\":323067026,\"minute\":1475727026,\"usedBytes\":7085182045067811229},\"monthlySchedule\":{\"snapshotsToKeep\":2045628523,\"daysOfMonth\":\"z\",\"hour\":470619426,\"minute\":1115717793,\"usedBytes\":411051946078248406},\"enabled\":true,\"provisioningState\":\"xxgewpk\"},\"location\":\"qylkmqpzoyhlf\",\"tags\":{\"nwjfu\":\"wgcloxoebqinji\",\"jwpfilkm\":\"qlafcbahhpzpofoi\"},\"id\":\"kholvd\",\"name\":\"dviauogp\",\"type\":\"uartvti\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        NetAppFilesManager manager = NetAppFilesManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        SnapshotPolicy response = manager.snapshotPolicies()
            .define("pubcpzgpxtivhjk")
            .withRegion("glxxhljfpgpic")
            .withExistingNetAppAccount("zvuqdflvon", "yp")
            .withTags(mapOf("frmbodthsqq", "zhrgmqgjsxvpqc", "xousxauzl", "vriibakclacjfr", "wohqfzizvu", "vsg",
                "vmribiat", "mmkjsvthnwpztek"))
            .withHourlySchedule(new HourlySchedule().withSnapshotsToKeep(517414798)
                .withMinute(2002912568)
                .withUsedBytes(1894847131734717959L))
            .withDailySchedule(new DailySchedule().withSnapshotsToKeep(1307435225)
                .withHour(1733167142)
                .withMinute(1551621761)
                .withUsedBytes(453619823533094312L))
            .withWeeklySchedule(new WeeklySchedule().withSnapshotsToKeep(1820552719)
                .withDay("dfuyd")
                .withHour(1783861602)
                .withMinute(506984335)
                .withUsedBytes(718585270565089372L))
            .withMonthlySchedule(new MonthlySchedule().withSnapshotsToKeep(1675068224)
                .withDaysOfMonth("psw")
                .withHour(2027239261)
                .withMinute(1070878319)
                .withUsedBytes(3305243407074909374L))
            .withEnabled(true)
            .create();

        Assertions.assertEquals("qylkmqpzoyhlf", response.location());
        Assertions.assertEquals("wgcloxoebqinji", response.tags().get("nwjfu"));
        Assertions.assertEquals(1944925015, response.hourlySchedule().snapshotsToKeep());
        Assertions.assertEquals(1087876109, response.hourlySchedule().minute());
        Assertions.assertEquals(1260989656124162695L, response.hourlySchedule().usedBytes());
        Assertions.assertEquals(979398617, response.dailySchedule().snapshotsToKeep());
        Assertions.assertEquals(269435268, response.dailySchedule().hour());
        Assertions.assertEquals(214346592, response.dailySchedule().minute());
        Assertions.assertEquals(3653577462373543887L, response.dailySchedule().usedBytes());
        Assertions.assertEquals(1714041739, response.weeklySchedule().snapshotsToKeep());
        Assertions.assertEquals("neiknpg", response.weeklySchedule().day());
        Assertions.assertEquals(323067026, response.weeklySchedule().hour());
        Assertions.assertEquals(1475727026, response.weeklySchedule().minute());
        Assertions.assertEquals(7085182045067811229L, response.weeklySchedule().usedBytes());
        Assertions.assertEquals(2045628523, response.monthlySchedule().snapshotsToKeep());
        Assertions.assertEquals("z", response.monthlySchedule().daysOfMonth());
        Assertions.assertEquals(470619426, response.monthlySchedule().hour());
        Assertions.assertEquals(1115717793, response.monthlySchedule().minute());
        Assertions.assertEquals(411051946078248406L, response.monthlySchedule().usedBytes());
        Assertions.assertEquals(true, response.enabled());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
