// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.netapp.NetAppFilesManager;
import com.azure.resourcemanager.netapp.models.DailySchedule;
import com.azure.resourcemanager.netapp.models.HourlySchedule;
import com.azure.resourcemanager.netapp.models.MonthlySchedule;
import com.azure.resourcemanager.netapp.models.SnapshotPolicy;
import com.azure.resourcemanager.netapp.models.WeeklySchedule;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class SnapshotPoliciesCreateWithResponseMockTests {
    @Test
    public void testCreateWithResponse() throws Exception {
        String responseStr
            = "{\"etag\":\"kdk\",\"properties\":{\"hourlySchedule\":{\"snapshotsToKeep\":2145222324,\"minute\":211340974,\"usedBytes\":2755469222712772213},\"dailySchedule\":{\"snapshotsToKeep\":1667262093,\"hour\":1385405898,\"minute\":1193273500,\"usedBytes\":1035962610522456238},\"weeklySchedule\":{\"snapshotsToKeep\":644079964,\"day\":\"eyirdhlisngw\",\"hour\":1258635298,\"minute\":1354932365,\"usedBytes\":7225725672768775525},\"monthlySchedule\":{\"snapshotsToKeep\":21737184,\"daysOfMonth\":\"pqxpx\",\"hour\":1760888733,\"minute\":2135849980,\"usedBytes\":3198963628835972526},\"enabled\":false,\"provisioningState\":\"iixtmkzj\"},\"location\":\"viirhgfgrws\",\"tags\":{\"zvzbglbyv\":\"ra\",\"rgxffmshkw\":\"ctctbrxkjz\",\"qaclnapxbiy\":\"bkgozxwopdbydpi\",\"nfsm\":\"nugj\"},\"id\":\"cttuxuu\",\"name\":\"i\",\"type\":\"flqo\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        NetAppFilesManager manager = NetAppFilesManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        SnapshotPolicy response = manager.snapshotPolicies()
            .define("laprlt")
            .withRegion("lmjjyuo")
            .withExistingNetAppAccount("ktcqio", "mgbzahgxqdlyrtl")
            .withTags(mapOf("lbfjkwr", "obaxkjeytu"))
            .withHourlySchedule(new HourlySchedule().withSnapshotsToKeep(1452545825)
                .withMinute(1574788888)
                .withUsedBytes(4404103409694460959L))
            .withDailySchedule(new DailySchedule().withSnapshotsToKeep(1340564567)
                .withHour(1515346381)
                .withMinute(226736084)
                .withUsedBytes(9185198515701434959L))
            .withWeeklySchedule(new WeeklySchedule().withSnapshotsToKeep(860612333)
                .withDay("l")
                .withHour(101279026)
                .withMinute(1797453594)
                .withUsedBytes(448677184186092036L))
            .withMonthlySchedule(new MonthlySchedule().withSnapshotsToKeep(721207223)
                .withDaysOfMonth("av")
                .withHour(1704124687)
                .withMinute(1319470940)
                .withUsedBytes(1465450309959087886L))
            .withEnabled(false)
            .create();

        Assertions.assertEquals("viirhgfgrws", response.location());
        Assertions.assertEquals("ra", response.tags().get("zvzbglbyv"));
        Assertions.assertEquals(2145222324, response.hourlySchedule().snapshotsToKeep());
        Assertions.assertEquals(211340974, response.hourlySchedule().minute());
        Assertions.assertEquals(2755469222712772213L, response.hourlySchedule().usedBytes());
        Assertions.assertEquals(1667262093, response.dailySchedule().snapshotsToKeep());
        Assertions.assertEquals(1385405898, response.dailySchedule().hour());
        Assertions.assertEquals(1193273500, response.dailySchedule().minute());
        Assertions.assertEquals(1035962610522456238L, response.dailySchedule().usedBytes());
        Assertions.assertEquals(644079964, response.weeklySchedule().snapshotsToKeep());
        Assertions.assertEquals("eyirdhlisngw", response.weeklySchedule().day());
        Assertions.assertEquals(1258635298, response.weeklySchedule().hour());
        Assertions.assertEquals(1354932365, response.weeklySchedule().minute());
        Assertions.assertEquals(7225725672768775525L, response.weeklySchedule().usedBytes());
        Assertions.assertEquals(21737184, response.monthlySchedule().snapshotsToKeep());
        Assertions.assertEquals("pqxpx", response.monthlySchedule().daysOfMonth());
        Assertions.assertEquals(1760888733, response.monthlySchedule().hour());
        Assertions.assertEquals(2135849980, response.monthlySchedule().minute());
        Assertions.assertEquals(3198963628835972526L, response.monthlySchedule().usedBytes());
        Assertions.assertEquals(false, response.enabled());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
