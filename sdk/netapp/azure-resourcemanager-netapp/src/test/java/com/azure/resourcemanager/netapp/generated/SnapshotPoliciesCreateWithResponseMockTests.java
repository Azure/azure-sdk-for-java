// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.netapp.NetAppFilesManager;
import com.azure.resourcemanager.netapp.models.DailySchedule;
import com.azure.resourcemanager.netapp.models.HourlySchedule;
import com.azure.resourcemanager.netapp.models.MonthlySchedule;
import com.azure.resourcemanager.netapp.models.SnapshotPolicy;
import com.azure.resourcemanager.netapp.models.WeeklySchedule;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class SnapshotPoliciesCreateWithResponseMockTests {
    @Test
    public void testCreateWithResponse() throws Exception {
        String responseStr
            = "{\"etag\":\"tft\",\"properties\":{\"hourlySchedule\":{\"snapshotsToKeep\":1034709707,\"minute\":498260807,\"usedBytes\":5239547603354777125},\"dailySchedule\":{\"snapshotsToKeep\":1037799347,\"hour\":1872397233,\"minute\":505151536,\"usedBytes\":3502756066973311769},\"weeklySchedule\":{\"snapshotsToKeep\":1808572524,\"day\":\"ipgawtxx\",\"hour\":156137612,\"minute\":2059766507,\"usedBytes\":8743829512964463352},\"monthlySchedule\":{\"snapshotsToKeep\":607861165,\"daysOfMonth\":\"tfmpcycilrmcayk\",\"hour\":297687924,\"minute\":275753325,\"usedBytes\":3377592071635505398},\"enabled\":false,\"provisioningState\":\"xwpndfcpf\"},\"location\":\"nthjtwkjaosrxuzv\",\"tags\":{\"mgbzahgxqdlyrtl\":\"ktcqio\",\"katbhjm\":\"laprlt\",\"arvlagunbt\":\"nnbsoqeqa\",\"av\":\"febwlnbmhyreeudz\"},\"id\":\"pdqmjxlyyzglgouw\",\"name\":\"lmjjyuo\",\"type\":\"qtobaxkjeyt\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        NetAppFilesManager manager = NetAppFilesManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        SnapshotPolicy response = manager.snapshotPolicies()
            .define("qwhix")
            .withRegion("crwnamikz")
            .withExistingNetAppAccount("gehkfkimrtixokff", "yinljqe")
            .withTags(mapOf("ziqgfuh", "qbsms", "hczznvf", "kzruswh", "wwixzvumw", "ycjsx"))
            .withHourlySchedule(new HourlySchedule().withSnapshotsToKeep(2089696921)
                .withMinute(1519805829)
                .withUsedBytes(4952257041034089193L))
            .withDailySchedule(new DailySchedule().withSnapshotsToKeep(1065880701)
                .withHour(1806892496)
                .withMinute(667519337)
                .withUsedBytes(3451295234524077317L))
            .withWeeklySchedule(new WeeklySchedule().withSnapshotsToKeep(1949096000)
                .withDay("b")
                .withHour(1840305152)
                .withMinute(1547135133)
                .withUsedBytes(8260240583130824742L))
            .withMonthlySchedule(new MonthlySchedule().withSnapshotsToKeep(648351672)
                .withDaysOfMonth("zcilnghg")
                .withHour(403294934)
                .withMinute(884114239)
                .withUsedBytes(4618802136241516087L))
            .withEnabled(false)
            .create();

        Assertions.assertEquals("nthjtwkjaosrxuzv", response.location());
        Assertions.assertEquals("ktcqio", response.tags().get("mgbzahgxqdlyrtl"));
        Assertions.assertEquals(1034709707, response.hourlySchedule().snapshotsToKeep());
        Assertions.assertEquals(498260807, response.hourlySchedule().minute());
        Assertions.assertEquals(5239547603354777125L, response.hourlySchedule().usedBytes());
        Assertions.assertEquals(1037799347, response.dailySchedule().snapshotsToKeep());
        Assertions.assertEquals(1872397233, response.dailySchedule().hour());
        Assertions.assertEquals(505151536, response.dailySchedule().minute());
        Assertions.assertEquals(3502756066973311769L, response.dailySchedule().usedBytes());
        Assertions.assertEquals(1808572524, response.weeklySchedule().snapshotsToKeep());
        Assertions.assertEquals("ipgawtxx", response.weeklySchedule().day());
        Assertions.assertEquals(156137612, response.weeklySchedule().hour());
        Assertions.assertEquals(2059766507, response.weeklySchedule().minute());
        Assertions.assertEquals(8743829512964463352L, response.weeklySchedule().usedBytes());
        Assertions.assertEquals(607861165, response.monthlySchedule().snapshotsToKeep());
        Assertions.assertEquals("tfmpcycilrmcayk", response.monthlySchedule().daysOfMonth());
        Assertions.assertEquals(297687924, response.monthlySchedule().hour());
        Assertions.assertEquals(275753325, response.monthlySchedule().minute());
        Assertions.assertEquals(3377592071635505398L, response.monthlySchedule().usedBytes());
        Assertions.assertEquals(false, response.enabled());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
