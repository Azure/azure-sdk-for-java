// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.netapp.NetAppFilesManager;
import com.azure.resourcemanager.netapp.models.DailySchedule;
import com.azure.resourcemanager.netapp.models.HourlySchedule;
import com.azure.resourcemanager.netapp.models.MonthlySchedule;
import com.azure.resourcemanager.netapp.models.SnapshotPolicy;
import com.azure.resourcemanager.netapp.models.WeeklySchedule;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class SnapshotPoliciesCreateWithResponseMockTests {
    @Test
    public void testCreateWithResponse() throws Exception {
        String responseStr
            = "{\"etag\":\"h\",\"properties\":{\"hourlySchedule\":{\"snapshotsToKeep\":897856665,\"minute\":828921483,\"usedBytes\":3522262881342173226},\"dailySchedule\":{\"snapshotsToKeep\":1072949444,\"hour\":1744260958,\"minute\":373432473,\"usedBytes\":8927877098345650470},\"weeklySchedule\":{\"snapshotsToKeep\":2070557844,\"day\":\"fa\",\"hour\":1329774917,\"minute\":244946884,\"usedBytes\":1721764598490696593},\"monthlySchedule\":{\"snapshotsToKeep\":1562293671,\"daysOfMonth\":\"wzdvpiwh\",\"hour\":801550005,\"minute\":1096789874,\"usedBytes\":4550472352331294604},\"enabled\":true,\"provisioningState\":\"uhuxylrjvmtyg\"},\"location\":\"mzyospspshck\",\"tags\":{\"gt\":\"jpmspbpssdfppy\",\"unjdx\":\"eyujtvczkcnyxrx\",\"ivbgkcv\":\"glnkvxlxpagl\",\"pubcpzgpxtivhjk\":\"hpzvuqdflvoniyp\"},\"id\":\"idibgqjxgpn\",\"name\":\"hgovfgp\",\"type\":\"kqmhhaowjr\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        NetAppFilesManager manager = NetAppFilesManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        SnapshotPolicy response = manager.snapshotPolicies()
            .define("wtqabpxuckp")
            .withRegion("ctctbrxkjz")
            .withExistingNetAppAccount("ulkpakd", "ifmjnn")
            .withTags(mapOf("shkwfbkgozxwopd", "xff", "izqaclnapxbiyg", "yd", "mfcttux", "ugjknf"))
            .withHourlySchedule(new HourlySchedule().withSnapshotsToKeep(1189308614)
                .withMinute(351115849)
                .withUsedBytes(5405797443088065857L))
            .withDailySchedule(new DailySchedule().withSnapshotsToKeep(1682370359)
                .withHour(254570862)
                .withMinute(21737184)
                .withUsedBytes(4881754570538060934L))
            .withWeeklySchedule(new WeeklySchedule().withSnapshotsToKeep(717298847)
                .withDay("wfcngjsaas")
                .withHour(1007355900)
                .withMinute(352154258)
                .withUsedBytes(7947475498891793194L))
            .withMonthlySchedule(new MonthlySchedule().withSnapshotsToKeep(671429821)
                .withDaysOfMonth("irhgfgrwsdp")
                .withHour(1006538190)
                .withMinute(145136330)
                .withUsedBytes(1716738927704410418L))
            .withEnabled(true)
            .create();

        Assertions.assertEquals("mzyospspshck", response.location());
        Assertions.assertEquals("jpmspbpssdfppy", response.tags().get("gt"));
        Assertions.assertEquals(897856665, response.hourlySchedule().snapshotsToKeep());
        Assertions.assertEquals(828921483, response.hourlySchedule().minute());
        Assertions.assertEquals(3522262881342173226L, response.hourlySchedule().usedBytes());
        Assertions.assertEquals(1072949444, response.dailySchedule().snapshotsToKeep());
        Assertions.assertEquals(1744260958, response.dailySchedule().hour());
        Assertions.assertEquals(373432473, response.dailySchedule().minute());
        Assertions.assertEquals(8927877098345650470L, response.dailySchedule().usedBytes());
        Assertions.assertEquals(2070557844, response.weeklySchedule().snapshotsToKeep());
        Assertions.assertEquals("fa", response.weeklySchedule().day());
        Assertions.assertEquals(1329774917, response.weeklySchedule().hour());
        Assertions.assertEquals(244946884, response.weeklySchedule().minute());
        Assertions.assertEquals(1721764598490696593L, response.weeklySchedule().usedBytes());
        Assertions.assertEquals(1562293671, response.monthlySchedule().snapshotsToKeep());
        Assertions.assertEquals("wzdvpiwh", response.monthlySchedule().daysOfMonth());
        Assertions.assertEquals(801550005, response.monthlySchedule().hour());
        Assertions.assertEquals(1096789874, response.monthlySchedule().minute());
        Assertions.assertEquals(4550472352331294604L, response.monthlySchedule().usedBytes());
        Assertions.assertEquals(true, response.enabled());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
