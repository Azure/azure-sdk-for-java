// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.netapp.NetAppFilesManager;
import com.azure.resourcemanager.netapp.models.DailySchedule;
import com.azure.resourcemanager.netapp.models.HourlySchedule;
import com.azure.resourcemanager.netapp.models.MonthlySchedule;
import com.azure.resourcemanager.netapp.models.SnapshotPolicy;
import com.azure.resourcemanager.netapp.models.WeeklySchedule;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class SnapshotPoliciesCreateWithResponseMockTests {
    @Test
    public void testCreateWithResponse() throws Exception {
        String responseStr
            = "{\"etag\":\"jgtixr\",\"properties\":{\"hourlySchedule\":{\"snapshotsToKeep\":1870960882,\"minute\":96011732,\"usedBytes\":8653893395762749083},\"dailySchedule\":{\"snapshotsToKeep\":1133060500,\"hour\":1311601904,\"minute\":956907772,\"usedBytes\":1919510727252688432},\"weeklySchedule\":{\"snapshotsToKeep\":139700298,\"day\":\"ionszonwp\",\"hour\":2022776068,\"minute\":1491253083,\"usedBytes\":6898929909926119274},\"monthlySchedule\":{\"snapshotsToKeep\":1627836178,\"daysOfMonth\":\"rtmjfj\",\"hour\":1418512133,\"minute\":1315835072,\"usedBytes\":4502124904557617067},\"enabled\":true,\"provisioningState\":\"ovne\"},\"location\":\"enlusfn\",\"tags\":{\"tjvidt\":\"jxtxrdc\",\"uwkasiz\":\"gepuslvyjtc\"},\"id\":\"esfuught\",\"name\":\"qfecjxeygtuhx\",\"type\":\"ic\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        NetAppFilesManager manager = NetAppFilesManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        SnapshotPolicy response = manager.snapshotPolicies()
            .define("uartvti")
            .withRegion("ubowsepdfgkm")
            .withExistingNetAppAccount("l", "dndviauogp")
            .withTags(mapOf("kauxof", "erngbtcjuahokqto", "ywhslwkojpllndnp", "hfphwpnulaiywze"))
            .withHourlySchedule(new HourlySchedule().withSnapshotsToKeep(1660290051)
                .withMinute(784447482)
                .withUsedBytes(1062959938745096772L))
            .withDailySchedule(new DailySchedule().withSnapshotsToKeep(1375223336)
                .withHour(1523309198)
                .withMinute(1600818034)
                .withUsedBytes(4542043090812531924L))
            .withWeeklySchedule(new WeeklySchedule().withSnapshotsToKeep(641060199)
                .withDay("fhxwrsne")
                .withHour(682704724)
                .withMinute(557932259)
                .withUsedBytes(5325894233408276718L))
            .withMonthlySchedule(new MonthlySchedule().withSnapshotsToKeep(352304296)
                .withDaysOfMonth("m")
                .withHour(990161809)
                .withMinute(1991354905)
                .withUsedBytes(1972835701500093810L))
            .withEnabled(true)
            .create();

        Assertions.assertEquals("enlusfn", response.location());
        Assertions.assertEquals("jxtxrdc", response.tags().get("tjvidt"));
        Assertions.assertEquals(1870960882, response.hourlySchedule().snapshotsToKeep());
        Assertions.assertEquals(96011732, response.hourlySchedule().minute());
        Assertions.assertEquals(8653893395762749083L, response.hourlySchedule().usedBytes());
        Assertions.assertEquals(1133060500, response.dailySchedule().snapshotsToKeep());
        Assertions.assertEquals(1311601904, response.dailySchedule().hour());
        Assertions.assertEquals(956907772, response.dailySchedule().minute());
        Assertions.assertEquals(1919510727252688432L, response.dailySchedule().usedBytes());
        Assertions.assertEquals(139700298, response.weeklySchedule().snapshotsToKeep());
        Assertions.assertEquals("ionszonwp", response.weeklySchedule().day());
        Assertions.assertEquals(2022776068, response.weeklySchedule().hour());
        Assertions.assertEquals(1491253083, response.weeklySchedule().minute());
        Assertions.assertEquals(6898929909926119274L, response.weeklySchedule().usedBytes());
        Assertions.assertEquals(1627836178, response.monthlySchedule().snapshotsToKeep());
        Assertions.assertEquals("rtmjfj", response.monthlySchedule().daysOfMonth());
        Assertions.assertEquals(1418512133, response.monthlySchedule().hour());
        Assertions.assertEquals(1315835072, response.monthlySchedule().minute());
        Assertions.assertEquals(4502124904557617067L, response.monthlySchedule().usedBytes());
        Assertions.assertTrue(response.enabled());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
