// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.netapp.NetAppFilesManager;
import com.azure.resourcemanager.netapp.models.DailySchedule;
import com.azure.resourcemanager.netapp.models.HourlySchedule;
import com.azure.resourcemanager.netapp.models.MonthlySchedule;
import com.azure.resourcemanager.netapp.models.SnapshotPolicy;
import com.azure.resourcemanager.netapp.models.WeeklySchedule;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class SnapshotPoliciesCreateWithResponseMockTests {
    @Test
    public void testCreateWithResponse() throws Exception {
        String responseStr
            = "{\"etag\":\"smgbzahgxqdl\",\"properties\":{\"hourlySchedule\":{\"snapshotsToKeep\":1765998535,\"minute\":1395240119,\"usedBytes\":5185737430210196834},\"dailySchedule\":{\"snapshotsToKeep\":1339106898,\"hour\":179999920,\"minute\":2087309055,\"usedBytes\":2141409666351005246},\"weeklySchedule\":{\"snapshotsToKeep\":872350807,\"day\":\"s\",\"hour\":421693668,\"minute\":604410280,\"usedBytes\":1796034784759984348},\"monthlySchedule\":{\"snapshotsToKeep\":758343350,\"daysOfMonth\":\"un\",\"hour\":2144619087,\"minute\":2074593754,\"usedBytes\":5317962973329949472},\"enabled\":true,\"provisioningState\":\"hyreeu\"},\"location\":\"qavbpdqmj\",\"tags\":{\"wtlmjjyuo\":\"yzglgo\",\"nlb\":\"qtobaxkjeyt\",\"hsyrqunj\":\"jkwrusnkq\",\"akdkifmjnnawtqab\":\"hdenxaulk\"},\"id\":\"xuckpggqoweyir\",\"name\":\"hlisngw\",\"type\":\"lqqmpiz\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        NetAppFilesManager manager = NetAppFilesManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        SnapshotPolicy response = manager.snapshotPolicies()
            .define("haohdjhhflzokxc")
            .withRegion("ilrmcaykggnox")
            .withExistingNetAppAccount("wwixzvumw", "xqhndvnoamlds")
            .withTags(mapOf("fnznth", "rksxwpndfc"))
            .withHourlySchedule(new HourlySchedule().withSnapshotsToKeep(514838413)
                .withMinute(836185484)
                .withUsedBytes(3687767077886662538L))
            .withDailySchedule(new DailySchedule().withSnapshotsToKeep(1097989023)
                .withHour(1425632159)
                .withMinute(1570561230)
                .withUsedBytes(8193725736051268150L))
            .withWeeklySchedule(new WeeklySchedule().withSnapshotsToKeep(1075307971)
                .withDay("cs")
                .withHour(583656217)
                .withMinute(1317782310)
                .withUsedBytes(656347553959289729L))
            .withMonthlySchedule(new MonthlySchedule().withSnapshotsToKeep(1836690192)
                .withDaysOfMonth("txx")
                .withHour(156137612)
                .withMinute(2059766507)
                .withUsedBytes(8743829512964463352L))
            .withEnabled(true)
            .create();

        Assertions.assertEquals("qavbpdqmj", response.location());
        Assertions.assertEquals("yzglgo", response.tags().get("wtlmjjyuo"));
        Assertions.assertEquals(1765998535, response.hourlySchedule().snapshotsToKeep());
        Assertions.assertEquals(1395240119, response.hourlySchedule().minute());
        Assertions.assertEquals(5185737430210196834L, response.hourlySchedule().usedBytes());
        Assertions.assertEquals(1339106898, response.dailySchedule().snapshotsToKeep());
        Assertions.assertEquals(179999920, response.dailySchedule().hour());
        Assertions.assertEquals(2087309055, response.dailySchedule().minute());
        Assertions.assertEquals(2141409666351005246L, response.dailySchedule().usedBytes());
        Assertions.assertEquals(872350807, response.weeklySchedule().snapshotsToKeep());
        Assertions.assertEquals("s", response.weeklySchedule().day());
        Assertions.assertEquals(421693668, response.weeklySchedule().hour());
        Assertions.assertEquals(604410280, response.weeklySchedule().minute());
        Assertions.assertEquals(1796034784759984348L, response.weeklySchedule().usedBytes());
        Assertions.assertEquals(758343350, response.monthlySchedule().snapshotsToKeep());
        Assertions.assertEquals("un", response.monthlySchedule().daysOfMonth());
        Assertions.assertEquals(2144619087, response.monthlySchedule().hour());
        Assertions.assertEquals(2074593754, response.monthlySchedule().minute());
        Assertions.assertEquals(5317962973329949472L, response.monthlySchedule().usedBytes());
        Assertions.assertEquals(true, response.enabled());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
