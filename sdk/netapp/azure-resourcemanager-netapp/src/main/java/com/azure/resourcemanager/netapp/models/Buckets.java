// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.models;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;

/**
 * Resource collection API of Buckets.
 */
public interface Buckets {
    /**
     * Describes all buckets belonging to a volume
     * 
     * Describes all buckets belonging to a volume. Buckets allow additional services, such as AI services, connect to
     * the volume data contained in those buckets.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of the NetApp account.
     * @param poolName The name of the capacity pool.
     * @param volumeName The name of the volume.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of volume bucket resources as paginated response with {@link PagedIterable}.
     */
    PagedIterable<Bucket> list(String resourceGroupName, String accountName, String poolName, String volumeName);

    /**
     * Describes all buckets belonging to a volume
     * 
     * Describes all buckets belonging to a volume. Buckets allow additional services, such as AI services, connect to
     * the volume data contained in those buckets.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of the NetApp account.
     * @param poolName The name of the capacity pool.
     * @param volumeName The name of the volume.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of volume bucket resources as paginated response with {@link PagedIterable}.
     */
    PagedIterable<Bucket> list(String resourceGroupName, String accountName, String poolName, String volumeName,
        Context context);

    /**
     * Describe a volume's bucket
     * 
     * Get the details of the specified volume's bucket. A bucket allows additional services, such as AI services,
     * connect to the volume data contained in those buckets.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of the NetApp account.
     * @param poolName The name of the capacity pool.
     * @param volumeName The name of the volume.
     * @param bucketName The name of the bucket.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the details of the specified volume's bucket along with {@link Response}.
     */
    Response<Bucket> getWithResponse(String resourceGroupName, String accountName, String poolName, String volumeName,
        String bucketName, Context context);

    /**
     * Describe a volume's bucket
     * 
     * Get the details of the specified volume's bucket. A bucket allows additional services, such as AI services,
     * connect to the volume data contained in those buckets.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of the NetApp account.
     * @param poolName The name of the capacity pool.
     * @param volumeName The name of the volume.
     * @param bucketName The name of the bucket.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the details of the specified volume's bucket.
     */
    Bucket get(String resourceGroupName, String accountName, String poolName, String volumeName, String bucketName);

    /**
     * Delete a volume's bucket
     * 
     * Delete a volume's bucket.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of the NetApp account.
     * @param poolName The name of the capacity pool.
     * @param volumeName The name of the volume.
     * @param bucketName The name of the bucket.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void delete(String resourceGroupName, String accountName, String poolName, String volumeName, String bucketName);

    /**
     * Delete a volume's bucket
     * 
     * Delete a volume's bucket.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of the NetApp account.
     * @param poolName The name of the capacity pool.
     * @param volumeName The name of the volume.
     * @param bucketName The name of the bucket.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void delete(String resourceGroupName, String accountName, String poolName, String volumeName, String bucketName,
        Context context);

    /**
     * Generate bucket access credentials
     * 
     * Generate the access key and secret key used for accessing the specified volume bucket. Also return expiry date
     * and time of key pair (in UTC).
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of the NetApp account.
     * @param poolName The name of the capacity pool.
     * @param volumeName The name of the volume.
     * @param bucketName The name of the bucket.
     * @param body The bucket's Access and Secret key pair expiry time expressed as the number of days from now.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return bucket Access Key, Secret Key, and Expiry date and time of the key pair along with {@link Response}.
     */
    Response<BucketGenerateCredentials> generateCredentialsWithResponse(String resourceGroupName, String accountName,
        String poolName, String volumeName, String bucketName, BucketCredentialsExpiry body, Context context);

    /**
     * Generate bucket access credentials
     * 
     * Generate the access key and secret key used for accessing the specified volume bucket. Also return expiry date
     * and time of key pair (in UTC).
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of the NetApp account.
     * @param poolName The name of the capacity pool.
     * @param volumeName The name of the volume.
     * @param bucketName The name of the bucket.
     * @param body The bucket's Access and Secret key pair expiry time expressed as the number of days from now.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return bucket Access Key, Secret Key, and Expiry date and time of the key pair.
     */
    BucketGenerateCredentials generateCredentials(String resourceGroupName, String accountName, String poolName,
        String volumeName, String bucketName, BucketCredentialsExpiry body);

    /**
     * Describe a volume's bucket
     * 
     * Get the details of the specified volume's bucket. A bucket allows additional services, such as AI services,
     * connect to the volume data contained in those buckets.
     * 
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the details of the specified volume's bucket along with {@link Response}.
     */
    Bucket getById(String id);

    /**
     * Describe a volume's bucket
     * 
     * Get the details of the specified volume's bucket. A bucket allows additional services, such as AI services,
     * connect to the volume data contained in those buckets.
     * 
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the details of the specified volume's bucket along with {@link Response}.
     */
    Response<Bucket> getByIdWithResponse(String id, Context context);

    /**
     * Delete a volume's bucket
     * 
     * Delete a volume's bucket.
     * 
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteById(String id);

    /**
     * Delete a volume's bucket
     * 
     * Delete a volume's bucket.
     * 
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteByIdWithResponse(String id, Context context);

    /**
     * Begins definition for a new Bucket resource.
     * 
     * @param name resource name.
     * @return the first stage of the new Bucket definition.
     */
    Bucket.DefinitionStages.Blank define(String name);
}
