// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.netapp.models.KeyVaultPrivateEndpoint;
import java.io.IOException;
import java.util.List;

/**
 * Result of getKeyVaultStatus with information about how volumes under NetApp account are encrypted.
 */
@Fluent
public final class GetKeyVaultStatusResponseInner implements JsonSerializable<GetKeyVaultStatusResponseInner> {
    /*
     * Represents the properties of the getKeyVaultStatus.
     */
    private GetKeyVaultStatusResponseProperties innerProperties;

    /**
     * Creates an instance of GetKeyVaultStatusResponseInner class.
     */
    public GetKeyVaultStatusResponseInner() {
    }

    /**
     * Get the innerProperties property: Represents the properties of the getKeyVaultStatus.
     * 
     * @return the innerProperties value.
     */
    private GetKeyVaultStatusResponseProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the keyVaultUri property: The URI of the key vault/managed HSM that should be used for encryption.
     * 
     * @return the keyVaultUri value.
     */
    public String keyVaultUri() {
        return this.innerProperties() == null ? null : this.innerProperties().keyVaultUri();
    }

    /**
     * Set the keyVaultUri property: The URI of the key vault/managed HSM that should be used for encryption.
     * 
     * @param keyVaultUri the keyVaultUri value to set.
     * @return the GetKeyVaultStatusResponseInner object itself.
     */
    public GetKeyVaultStatusResponseInner withKeyVaultUri(String keyVaultUri) {
        if (this.innerProperties() == null) {
            this.innerProperties = new GetKeyVaultStatusResponseProperties();
        }
        this.innerProperties().withKeyVaultUri(keyVaultUri);
        return this;
    }

    /**
     * Get the keyName property: The name of the key that should be used for encryption.
     * 
     * @return the keyName value.
     */
    public String keyName() {
        return this.innerProperties() == null ? null : this.innerProperties().keyName();
    }

    /**
     * Set the keyName property: The name of the key that should be used for encryption.
     * 
     * @param keyName the keyName value to set.
     * @return the GetKeyVaultStatusResponseInner object itself.
     */
    public GetKeyVaultStatusResponseInner withKeyName(String keyName) {
        if (this.innerProperties() == null) {
            this.innerProperties = new GetKeyVaultStatusResponseProperties();
        }
        this.innerProperties().withKeyName(keyName);
        return this;
    }

    /**
     * Get the keyVaultResourceId property: Azure resource ID of the key vault/managed HSM that should be used for
     * encryption.
     * 
     * @return the keyVaultResourceId value.
     */
    public String keyVaultResourceId() {
        return this.innerProperties() == null ? null : this.innerProperties().keyVaultResourceId();
    }

    /**
     * Set the keyVaultResourceId property: Azure resource ID of the key vault/managed HSM that should be used for
     * encryption.
     * 
     * @param keyVaultResourceId the keyVaultResourceId value to set.
     * @return the GetKeyVaultStatusResponseInner object itself.
     */
    public GetKeyVaultStatusResponseInner withKeyVaultResourceId(String keyVaultResourceId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new GetKeyVaultStatusResponseProperties();
        }
        this.innerProperties().withKeyVaultResourceId(keyVaultResourceId);
        return this;
    }

    /**
     * Get the keyVaultPrivateEndpoints property: Pairs of virtual network ID and private endpoint ID. Every virtual
     * network that has volumes encrypted with customer-managed keys needs its own key vault private endpoint.
     * 
     * @return the keyVaultPrivateEndpoints value.
     */
    public List<KeyVaultPrivateEndpoint> keyVaultPrivateEndpoints() {
        return this.innerProperties() == null ? null : this.innerProperties().keyVaultPrivateEndpoints();
    }

    /**
     * Set the keyVaultPrivateEndpoints property: Pairs of virtual network ID and private endpoint ID. Every virtual
     * network that has volumes encrypted with customer-managed keys needs its own key vault private endpoint.
     * 
     * @param keyVaultPrivateEndpoints the keyVaultPrivateEndpoints value to set.
     * @return the GetKeyVaultStatusResponseInner object itself.
     */
    public GetKeyVaultStatusResponseInner
        withKeyVaultPrivateEndpoints(List<KeyVaultPrivateEndpoint> keyVaultPrivateEndpoints) {
        if (this.innerProperties() == null) {
            this.innerProperties = new GetKeyVaultStatusResponseProperties();
        }
        this.innerProperties().withKeyVaultPrivateEndpoints(keyVaultPrivateEndpoints);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of GetKeyVaultStatusResponseInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of GetKeyVaultStatusResponseInner if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the GetKeyVaultStatusResponseInner.
     */
    public static GetKeyVaultStatusResponseInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            GetKeyVaultStatusResponseInner deserializedGetKeyVaultStatusResponseInner
                = new GetKeyVaultStatusResponseInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("properties".equals(fieldName)) {
                    deserializedGetKeyVaultStatusResponseInner.innerProperties
                        = GetKeyVaultStatusResponseProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedGetKeyVaultStatusResponseInner;
        });
    }
}
