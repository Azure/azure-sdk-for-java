// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.netapp.fluent.BackupsUnderBackupVaultsClient;
import com.azure.resourcemanager.netapp.models.BackupRestoreFiles;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in BackupsUnderBackupVaultsClient.
 */
public final class BackupsUnderBackupVaultsClientImpl implements BackupsUnderBackupVaultsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final BackupsUnderBackupVaultsService service;

    /**
     * The service client containing this operation class.
     */
    private final NetAppManagementClientImpl client;

    /**
     * Initializes an instance of BackupsUnderBackupVaultsClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    BackupsUnderBackupVaultsClientImpl(NetAppManagementClientImpl client) {
        this.service = RestProxy.create(BackupsUnderBackupVaultsService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for NetAppManagementClientBackupsUnderBackupVaults to be used by the
     * proxy service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "NetAppManagementClie")
    public interface BackupsUnderBackupVaultsService {
        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/backupVaults/{backupVaultName}/backups/{backupName}/restoreFiles")
        @ExpectedResponses({ 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> restoreFiles(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("accountName") String accountName,
            @PathParam("backupVaultName") String backupVaultName, @PathParam("backupName") String backupName,
            @QueryParam("api-version") String apiVersion, @BodyParam("application/json") BackupRestoreFiles body,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Create a new Backup Restore Files request
     * 
     * Restore the specified files from the specified backup to the active filesystem.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of the NetApp account.
     * @param backupVaultName The name of the Backup Vault.
     * @param backupName The name of the backup.
     * @param body Restore payload supplied in the body of the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> restoreFilesWithResponseAsync(String resourceGroupName, String accountName,
        String backupVaultName, String backupName, BackupRestoreFiles body) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (accountName == null) {
            return Mono.error(new IllegalArgumentException("Parameter accountName is required and cannot be null."));
        }
        if (backupVaultName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter backupVaultName is required and cannot be null."));
        }
        if (backupName == null) {
            return Mono.error(new IllegalArgumentException("Parameter backupName is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.restoreFiles(this.client.getEndpoint(), this.client.getSubscriptionId(),
                resourceGroupName, accountName, backupVaultName, backupName, this.client.getApiVersion(), body, accept,
                context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Create a new Backup Restore Files request
     * 
     * Restore the specified files from the specified backup to the active filesystem.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of the NetApp account.
     * @param backupVaultName The name of the Backup Vault.
     * @param backupName The name of the backup.
     * @param body Restore payload supplied in the body of the operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> restoreFilesWithResponseAsync(String resourceGroupName, String accountName,
        String backupVaultName, String backupName, BackupRestoreFiles body, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (accountName == null) {
            return Mono.error(new IllegalArgumentException("Parameter accountName is required and cannot be null."));
        }
        if (backupVaultName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter backupVaultName is required and cannot be null."));
        }
        if (backupName == null) {
            return Mono.error(new IllegalArgumentException("Parameter backupName is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.restoreFiles(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
            accountName, backupVaultName, backupName, this.client.getApiVersion(), body, accept, context);
    }

    /**
     * Create a new Backup Restore Files request
     * 
     * Restore the specified files from the specified backup to the active filesystem.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of the NetApp account.
     * @param backupVaultName The name of the Backup Vault.
     * @param backupName The name of the backup.
     * @param body Restore payload supplied in the body of the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginRestoreFilesAsync(String resourceGroupName, String accountName,
        String backupVaultName, String backupName, BackupRestoreFiles body) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = restoreFilesWithResponseAsync(resourceGroupName, accountName, backupVaultName, backupName, body);
        return this.client.<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class,
            this.client.getContext());
    }

    /**
     * Create a new Backup Restore Files request
     * 
     * Restore the specified files from the specified backup to the active filesystem.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of the NetApp account.
     * @param backupVaultName The name of the Backup Vault.
     * @param backupName The name of the backup.
     * @param body Restore payload supplied in the body of the operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginRestoreFilesAsync(String resourceGroupName, String accountName,
        String backupVaultName, String backupName, BackupRestoreFiles body, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono
            = restoreFilesWithResponseAsync(resourceGroupName, accountName, backupVaultName, backupName, body, context);
        return this.client.<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class,
            context);
    }

    /**
     * Create a new Backup Restore Files request
     * 
     * Restore the specified files from the specified backup to the active filesystem.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of the NetApp account.
     * @param backupVaultName The name of the Backup Vault.
     * @param backupName The name of the backup.
     * @param body Restore payload supplied in the body of the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginRestoreFiles(String resourceGroupName, String accountName,
        String backupVaultName, String backupName, BackupRestoreFiles body) {
        return this.beginRestoreFilesAsync(resourceGroupName, accountName, backupVaultName, backupName, body)
            .getSyncPoller();
    }

    /**
     * Create a new Backup Restore Files request
     * 
     * Restore the specified files from the specified backup to the active filesystem.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of the NetApp account.
     * @param backupVaultName The name of the Backup Vault.
     * @param backupName The name of the backup.
     * @param body Restore payload supplied in the body of the operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginRestoreFiles(String resourceGroupName, String accountName,
        String backupVaultName, String backupName, BackupRestoreFiles body, Context context) {
        return this.beginRestoreFilesAsync(resourceGroupName, accountName, backupVaultName, backupName, body, context)
            .getSyncPoller();
    }

    /**
     * Create a new Backup Restore Files request
     * 
     * Restore the specified files from the specified backup to the active filesystem.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of the NetApp account.
     * @param backupVaultName The name of the Backup Vault.
     * @param backupName The name of the backup.
     * @param body Restore payload supplied in the body of the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> restoreFilesAsync(String resourceGroupName, String accountName, String backupVaultName,
        String backupName, BackupRestoreFiles body) {
        return beginRestoreFilesAsync(resourceGroupName, accountName, backupVaultName, backupName, body).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create a new Backup Restore Files request
     * 
     * Restore the specified files from the specified backup to the active filesystem.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of the NetApp account.
     * @param backupVaultName The name of the Backup Vault.
     * @param backupName The name of the backup.
     * @param body Restore payload supplied in the body of the operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> restoreFilesAsync(String resourceGroupName, String accountName, String backupVaultName,
        String backupName, BackupRestoreFiles body, Context context) {
        return beginRestoreFilesAsync(resourceGroupName, accountName, backupVaultName, backupName, body, context).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create a new Backup Restore Files request
     * 
     * Restore the specified files from the specified backup to the active filesystem.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of the NetApp account.
     * @param backupVaultName The name of the Backup Vault.
     * @param backupName The name of the backup.
     * @param body Restore payload supplied in the body of the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void restoreFiles(String resourceGroupName, String accountName, String backupVaultName, String backupName,
        BackupRestoreFiles body) {
        restoreFilesAsync(resourceGroupName, accountName, backupVaultName, backupName, body).block();
    }

    /**
     * Create a new Backup Restore Files request
     * 
     * Restore the specified files from the specified backup to the active filesystem.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of the NetApp account.
     * @param backupVaultName The name of the Backup Vault.
     * @param backupName The name of the backup.
     * @param body Restore payload supplied in the body of the operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void restoreFiles(String resourceGroupName, String accountName, String backupVaultName, String backupName,
        BackupRestoreFiles body, Context context) {
        restoreFilesAsync(resourceGroupName, accountName, backupVaultName, backupName, body, context).block();
    }
}
