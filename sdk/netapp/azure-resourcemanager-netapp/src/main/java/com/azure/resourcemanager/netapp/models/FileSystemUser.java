// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * File System User
 * 
 * File System user having access to volume data. For Unix, this is the user's uid and gid. For Windows, this is the
 * user's username. Note that the Unix and Windows user details are mutually exclusive, meaning one or other must be
 * supplied, but not both.
 */
@Fluent
public final class FileSystemUser implements JsonSerializable<FileSystemUser> {
    /*
     * The effective NFS User ID and Group ID when accessing the volume data.
     */
    private NfsUser nfsUser;

    /*
     * The effective CIFS username when accessing the volume data.
     */
    private CifsUser cifsUser;

    /**
     * Creates an instance of FileSystemUser class.
     */
    public FileSystemUser() {
    }

    /**
     * Get the nfsUser property: The effective NFS User ID and Group ID when accessing the volume data.
     * 
     * @return the nfsUser value.
     */
    public NfsUser nfsUser() {
        return this.nfsUser;
    }

    /**
     * Set the nfsUser property: The effective NFS User ID and Group ID when accessing the volume data.
     * 
     * @param nfsUser the nfsUser value to set.
     * @return the FileSystemUser object itself.
     */
    public FileSystemUser withNfsUser(NfsUser nfsUser) {
        this.nfsUser = nfsUser;
        return this;
    }

    /**
     * Get the cifsUser property: The effective CIFS username when accessing the volume data.
     * 
     * @return the cifsUser value.
     */
    public CifsUser cifsUser() {
        return this.cifsUser;
    }

    /**
     * Set the cifsUser property: The effective CIFS username when accessing the volume data.
     * 
     * @param cifsUser the cifsUser value to set.
     * @return the FileSystemUser object itself.
     */
    public FileSystemUser withCifsUser(CifsUser cifsUser) {
        this.cifsUser = cifsUser;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (nfsUser() != null) {
            nfsUser().validate();
        }
        if (cifsUser() != null) {
            cifsUser().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("nfsUser", this.nfsUser);
        jsonWriter.writeJsonField("cifsUser", this.cifsUser);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FileSystemUser from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FileSystemUser if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the FileSystemUser.
     */
    public static FileSystemUser fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FileSystemUser deserializedFileSystemUser = new FileSystemUser();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("nfsUser".equals(fieldName)) {
                    deserializedFileSystemUser.nfsUser = NfsUser.fromJson(reader);
                } else if ("cifsUser".equals(fieldName)) {
                    deserializedFileSystemUser.cifsUser = CifsUser.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedFileSystemUser;
        });
    }
}
