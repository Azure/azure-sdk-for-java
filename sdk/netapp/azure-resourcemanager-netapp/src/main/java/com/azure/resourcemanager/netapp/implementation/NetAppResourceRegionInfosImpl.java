// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.netapp.fluent.NetAppResourceRegionInfosClient;
import com.azure.resourcemanager.netapp.fluent.models.RegionInfoResourceInner;
import com.azure.resourcemanager.netapp.models.NetAppResourceRegionInfos;
import com.azure.resourcemanager.netapp.models.RegionInfoResource;

public final class NetAppResourceRegionInfosImpl implements NetAppResourceRegionInfos {
    private static final ClientLogger LOGGER = new ClientLogger(NetAppResourceRegionInfosImpl.class);

    private final NetAppResourceRegionInfosClient innerClient;

    private final com.azure.resourcemanager.netapp.NetAppFilesManager serviceManager;

    public NetAppResourceRegionInfosImpl(NetAppResourceRegionInfosClient innerClient,
        com.azure.resourcemanager.netapp.NetAppFilesManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<RegionInfoResource> list(String location) {
        PagedIterable<RegionInfoResourceInner> inner = this.serviceClient().list(location);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new RegionInfoResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<RegionInfoResource> list(String location, Context context) {
        PagedIterable<RegionInfoResourceInner> inner = this.serviceClient().list(location, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new RegionInfoResourceImpl(inner1, this.manager()));
    }

    public Response<RegionInfoResource> getWithResponse(String location, Context context) {
        Response<RegionInfoResourceInner> inner = this.serviceClient().getWithResponse(location, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new RegionInfoResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public RegionInfoResource get(String location) {
        RegionInfoResourceInner inner = this.serviceClient().get(location);
        if (inner != null) {
            return new RegionInfoResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    private NetAppResourceRegionInfosClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.netapp.NetAppFilesManager manager() {
        return this.serviceManager;
    }
}
