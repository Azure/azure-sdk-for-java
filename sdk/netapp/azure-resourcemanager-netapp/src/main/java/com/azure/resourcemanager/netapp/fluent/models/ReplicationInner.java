// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.netapp.models.EndpointType;
import com.azure.resourcemanager.netapp.models.ReplicationSchedule;
import java.io.IOException;

/**
 * Replication properties.
 */
@Fluent
public final class ReplicationInner implements JsonSerializable<ReplicationInner> {
    /*
     * UUID v4 used to identify the replication.
     */
    private String replicationId;

    /*
     * Indicates whether the local volume is the source or destination for the Volume Replication
     */
    private EndpointType endpointType;

    /*
     * Schedule
     */
    private ReplicationSchedule replicationSchedule;

    /*
     * The resource ID of the remote volume.
     */
    private String remoteVolumeResourceId;

    /*
     * The remote region for the other end of the Volume Replication.
     */
    private String remoteVolumeRegion;

    /**
     * Creates an instance of ReplicationInner class.
     */
    public ReplicationInner() {
    }

    /**
     * Get the replicationId property: UUID v4 used to identify the replication.
     * 
     * @return the replicationId value.
     */
    public String replicationId() {
        return this.replicationId;
    }

    /**
     * Get the endpointType property: Indicates whether the local volume is the source or destination for the Volume
     * Replication.
     * 
     * @return the endpointType value.
     */
    public EndpointType endpointType() {
        return this.endpointType;
    }

    /**
     * Set the endpointType property: Indicates whether the local volume is the source or destination for the Volume
     * Replication.
     * 
     * @param endpointType the endpointType value to set.
     * @return the ReplicationInner object itself.
     */
    public ReplicationInner withEndpointType(EndpointType endpointType) {
        this.endpointType = endpointType;
        return this;
    }

    /**
     * Get the replicationSchedule property: Schedule.
     * 
     * @return the replicationSchedule value.
     */
    public ReplicationSchedule replicationSchedule() {
        return this.replicationSchedule;
    }

    /**
     * Set the replicationSchedule property: Schedule.
     * 
     * @param replicationSchedule the replicationSchedule value to set.
     * @return the ReplicationInner object itself.
     */
    public ReplicationInner withReplicationSchedule(ReplicationSchedule replicationSchedule) {
        this.replicationSchedule = replicationSchedule;
        return this;
    }

    /**
     * Get the remoteVolumeResourceId property: The resource ID of the remote volume.
     * 
     * @return the remoteVolumeResourceId value.
     */
    public String remoteVolumeResourceId() {
        return this.remoteVolumeResourceId;
    }

    /**
     * Set the remoteVolumeResourceId property: The resource ID of the remote volume.
     * 
     * @param remoteVolumeResourceId the remoteVolumeResourceId value to set.
     * @return the ReplicationInner object itself.
     */
    public ReplicationInner withRemoteVolumeResourceId(String remoteVolumeResourceId) {
        this.remoteVolumeResourceId = remoteVolumeResourceId;
        return this;
    }

    /**
     * Get the remoteVolumeRegion property: The remote region for the other end of the Volume Replication.
     * 
     * @return the remoteVolumeRegion value.
     */
    public String remoteVolumeRegion() {
        return this.remoteVolumeRegion;
    }

    /**
     * Set the remoteVolumeRegion property: The remote region for the other end of the Volume Replication.
     * 
     * @param remoteVolumeRegion the remoteVolumeRegion value to set.
     * @return the ReplicationInner object itself.
     */
    public ReplicationInner withRemoteVolumeRegion(String remoteVolumeRegion) {
        this.remoteVolumeRegion = remoteVolumeRegion;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (remoteVolumeResourceId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property remoteVolumeResourceId in model ReplicationInner"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ReplicationInner.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("remoteVolumeResourceId", this.remoteVolumeResourceId);
        jsonWriter.writeStringField("endpointType", this.endpointType == null ? null : this.endpointType.toString());
        jsonWriter.writeStringField("replicationSchedule",
            this.replicationSchedule == null ? null : this.replicationSchedule.toString());
        jsonWriter.writeStringField("remoteVolumeRegion", this.remoteVolumeRegion);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ReplicationInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ReplicationInner if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ReplicationInner.
     */
    public static ReplicationInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ReplicationInner deserializedReplicationInner = new ReplicationInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("remoteVolumeResourceId".equals(fieldName)) {
                    deserializedReplicationInner.remoteVolumeResourceId = reader.getString();
                } else if ("replicationId".equals(fieldName)) {
                    deserializedReplicationInner.replicationId = reader.getString();
                } else if ("endpointType".equals(fieldName)) {
                    deserializedReplicationInner.endpointType = EndpointType.fromString(reader.getString());
                } else if ("replicationSchedule".equals(fieldName)) {
                    deserializedReplicationInner.replicationSchedule
                        = ReplicationSchedule.fromString(reader.getString());
                } else if ("remoteVolumeRegion".equals(fieldName)) {
                    deserializedReplicationInner.remoteVolumeRegion = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedReplicationInner;
        });
    }
}
