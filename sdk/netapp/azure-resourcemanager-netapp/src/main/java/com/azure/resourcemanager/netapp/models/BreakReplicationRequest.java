// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Break replication request.
 */
@Fluent
public final class BreakReplicationRequest implements JsonSerializable<BreakReplicationRequest> {
    /*
     * If replication is in status transferring and you want to force break the replication, set to true
     */
    private Boolean forceBreakReplication;

    /**
     * Creates an instance of BreakReplicationRequest class.
     */
    public BreakReplicationRequest() {
    }

    /**
     * Get the forceBreakReplication property: If replication is in status transferring and you want to force break the
     * replication, set to true.
     * 
     * @return the forceBreakReplication value.
     */
    public Boolean forceBreakReplication() {
        return this.forceBreakReplication;
    }

    /**
     * Set the forceBreakReplication property: If replication is in status transferring and you want to force break the
     * replication, set to true.
     * 
     * @param forceBreakReplication the forceBreakReplication value to set.
     * @return the BreakReplicationRequest object itself.
     */
    public BreakReplicationRequest withForceBreakReplication(Boolean forceBreakReplication) {
        this.forceBreakReplication = forceBreakReplication;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("forceBreakReplication", this.forceBreakReplication);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BreakReplicationRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of BreakReplicationRequest if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the BreakReplicationRequest.
     */
    public static BreakReplicationRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BreakReplicationRequest deserializedBreakReplicationRequest = new BreakReplicationRequest();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("forceBreakReplication".equals(fieldName)) {
                    deserializedBreakReplicationRequest.forceBreakReplication
                        = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedBreakReplicationRequest;
        });
    }
}
