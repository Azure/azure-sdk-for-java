// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * LDAP configuration.
 */
@Fluent
public final class LdapConfiguration implements JsonSerializable<LdapConfiguration> {
    /*
     * Name of the LDAP configuration domain
     */
    private String domain;

    /*
     * List of LDAP server IP addresses (IPv4 only) for the LDAP domain.
     */
    private List<String> ldapServers;

    /*
     * Specifies whether or not the LDAP traffic needs to be secured via TLS.
     */
    private Boolean ldapOverTls;

    /*
     * When LDAP over SSL/TLS is enabled, the LDAP client is required to have base64 encoded ldap servers CA
     * certificate.
     */
    private String serverCACertificate;

    /*
     * The CN host name used while generating the certificate, LDAP Over TLS requires the CN host name to create DNS
     * host entry.
     */
    private String certificateCNHost;

    /**
     * Creates an instance of LdapConfiguration class.
     */
    public LdapConfiguration() {
    }

    /**
     * Get the domain property: Name of the LDAP configuration domain.
     * 
     * @return the domain value.
     */
    public String domain() {
        return this.domain;
    }

    /**
     * Set the domain property: Name of the LDAP configuration domain.
     * 
     * @param domain the domain value to set.
     * @return the LdapConfiguration object itself.
     */
    public LdapConfiguration withDomain(String domain) {
        this.domain = domain;
        return this;
    }

    /**
     * Get the ldapServers property: List of LDAP server IP addresses (IPv4 only) for the LDAP domain.
     * 
     * @return the ldapServers value.
     */
    public List<String> ldapServers() {
        return this.ldapServers;
    }

    /**
     * Set the ldapServers property: List of LDAP server IP addresses (IPv4 only) for the LDAP domain.
     * 
     * @param ldapServers the ldapServers value to set.
     * @return the LdapConfiguration object itself.
     */
    public LdapConfiguration withLdapServers(List<String> ldapServers) {
        this.ldapServers = ldapServers;
        return this;
    }

    /**
     * Get the ldapOverTls property: Specifies whether or not the LDAP traffic needs to be secured via TLS.
     * 
     * @return the ldapOverTls value.
     */
    public Boolean ldapOverTls() {
        return this.ldapOverTls;
    }

    /**
     * Set the ldapOverTls property: Specifies whether or not the LDAP traffic needs to be secured via TLS.
     * 
     * @param ldapOverTls the ldapOverTls value to set.
     * @return the LdapConfiguration object itself.
     */
    public LdapConfiguration withLdapOverTls(Boolean ldapOverTls) {
        this.ldapOverTls = ldapOverTls;
        return this;
    }

    /**
     * Get the serverCACertificate property: When LDAP over SSL/TLS is enabled, the LDAP client is required to have
     * base64 encoded ldap servers CA certificate.
     * 
     * @return the serverCACertificate value.
     */
    public String serverCACertificate() {
        return this.serverCACertificate;
    }

    /**
     * Set the serverCACertificate property: When LDAP over SSL/TLS is enabled, the LDAP client is required to have
     * base64 encoded ldap servers CA certificate.
     * 
     * @param serverCACertificate the serverCACertificate value to set.
     * @return the LdapConfiguration object itself.
     */
    public LdapConfiguration withServerCACertificate(String serverCACertificate) {
        this.serverCACertificate = serverCACertificate;
        return this;
    }

    /**
     * Get the certificateCNHost property: The CN host name used while generating the certificate, LDAP Over TLS
     * requires the CN host name to create DNS host entry.
     * 
     * @return the certificateCNHost value.
     */
    public String certificateCNHost() {
        return this.certificateCNHost;
    }

    /**
     * Set the certificateCNHost property: The CN host name used while generating the certificate, LDAP Over TLS
     * requires the CN host name to create DNS host entry.
     * 
     * @param certificateCNHost the certificateCNHost value to set.
     * @return the LdapConfiguration object itself.
     */
    public LdapConfiguration withCertificateCNHost(String certificateCNHost) {
        this.certificateCNHost = certificateCNHost;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("domain", this.domain);
        jsonWriter.writeArrayField("ldapServers", this.ldapServers, (writer, element) -> writer.writeString(element));
        jsonWriter.writeBooleanField("ldapOverTLS", this.ldapOverTls);
        jsonWriter.writeStringField("serverCACertificate", this.serverCACertificate);
        jsonWriter.writeStringField("certificateCNHost", this.certificateCNHost);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LdapConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LdapConfiguration if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the LdapConfiguration.
     */
    public static LdapConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LdapConfiguration deserializedLdapConfiguration = new LdapConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("domain".equals(fieldName)) {
                    deserializedLdapConfiguration.domain = reader.getString();
                } else if ("ldapServers".equals(fieldName)) {
                    List<String> ldapServers = reader.readArray(reader1 -> reader1.getString());
                    deserializedLdapConfiguration.ldapServers = ldapServers;
                } else if ("ldapOverTLS".equals(fieldName)) {
                    deserializedLdapConfiguration.ldapOverTls = reader.getNullable(JsonReader::getBoolean);
                } else if ("serverCACertificate".equals(fieldName)) {
                    deserializedLdapConfiguration.serverCACertificate = reader.getString();
                } else if ("certificateCNHost".equals(fieldName)) {
                    deserializedLdapConfiguration.certificateCNHost = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLdapConfiguration;
        });
    }
}
