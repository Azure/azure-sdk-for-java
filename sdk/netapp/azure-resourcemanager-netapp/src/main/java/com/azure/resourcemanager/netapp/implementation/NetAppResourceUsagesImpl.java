// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.netapp.fluent.NetAppResourceUsagesClient;
import com.azure.resourcemanager.netapp.fluent.models.UsageResultInner;
import com.azure.resourcemanager.netapp.models.NetAppResourceUsages;
import com.azure.resourcemanager.netapp.models.UsageResult;

public final class NetAppResourceUsagesImpl implements NetAppResourceUsages {
    private static final ClientLogger LOGGER = new ClientLogger(NetAppResourceUsagesImpl.class);

    private final NetAppResourceUsagesClient innerClient;

    private final com.azure.resourcemanager.netapp.NetAppFilesManager serviceManager;

    public NetAppResourceUsagesImpl(NetAppResourceUsagesClient innerClient,
        com.azure.resourcemanager.netapp.NetAppFilesManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<UsageResult> list(String location) {
        PagedIterable<UsageResultInner> inner = this.serviceClient().list(location);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new UsageResultImpl(inner1, this.manager()));
    }

    public PagedIterable<UsageResult> list(String location, Context context) {
        PagedIterable<UsageResultInner> inner = this.serviceClient().list(location, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new UsageResultImpl(inner1, this.manager()));
    }

    public Response<UsageResult> getWithResponse(String location, String usageType, Context context) {
        Response<UsageResultInner> inner = this.serviceClient().getWithResponse(location, usageType, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new UsageResultImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public UsageResult get(String location, String usageType) {
        UsageResultInner inner = this.serviceClient().get(location, usageType);
        if (inner != null) {
            return new UsageResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    private NetAppResourceUsagesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.netapp.NetAppFilesManager manager() {
        return this.serviceManager;
    }
}
