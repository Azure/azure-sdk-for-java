// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.netapp.models.BucketPermissions;
import com.azure.resourcemanager.netapp.models.BucketServerProperties;
import com.azure.resourcemanager.netapp.models.CredentialsStatus;
import com.azure.resourcemanager.netapp.models.FileSystemUser;
import com.azure.resourcemanager.netapp.models.NetAppProvisioningState;
import java.io.IOException;

/**
 * Bucket resource properties.
 */
@Fluent
public final class BucketProperties implements JsonSerializable<BucketProperties> {
    /*
     * The volume path mounted inside the bucket. The default is the root path '/' if no value is provided when the
     * bucket is created.
     */
    private String path;

    /*
     * File System user having access to volume data. For Unix, this is the user's uid and gid. For Windows, this is the
     * user's username. Note that the Unix and Windows user details are mutually exclusive, meaning one or other must be
     * supplied, but not both.
     */
    private FileSystemUser fileSystemUser;

    /*
     * Provisioning state of the resource
     */
    private NetAppProvisioningState provisioningState;

    /*
     * The bucket credentials status. There states:
     * 
     * "NoCredentialsSet": Access and Secret key pair have not been generated.
     * "CredentialsExpired": Access and Secret key pair have expired.
     * "Active": The certificate has been installed and credentials are unexpired.
     */
    private CredentialsStatus status;

    /*
     * Properties of the server managing the lifecycle of volume buckets
     */
    private BucketServerProperties server;

    /*
     * Access permissions for the bucket. Either ReadOnly or ReadWrite. The default is ReadOnly if no value is provided
     * during bucket creation.
     */
    private BucketPermissions permissions;

    /**
     * Creates an instance of BucketProperties class.
     */
    public BucketProperties() {
    }

    /**
     * Get the path property: The volume path mounted inside the bucket. The default is the root path '/' if no value is
     * provided when the bucket is created.
     * 
     * @return the path value.
     */
    public String path() {
        return this.path;
    }

    /**
     * Set the path property: The volume path mounted inside the bucket. The default is the root path '/' if no value is
     * provided when the bucket is created.
     * 
     * @param path the path value to set.
     * @return the BucketProperties object itself.
     */
    public BucketProperties withPath(String path) {
        this.path = path;
        return this;
    }

    /**
     * Get the fileSystemUser property: File System user having access to volume data. For Unix, this is the user's uid
     * and gid. For Windows, this is the user's username. Note that the Unix and Windows user details are mutually
     * exclusive, meaning one or other must be supplied, but not both.
     * 
     * @return the fileSystemUser value.
     */
    public FileSystemUser fileSystemUser() {
        return this.fileSystemUser;
    }

    /**
     * Set the fileSystemUser property: File System user having access to volume data. For Unix, this is the user's uid
     * and gid. For Windows, this is the user's username. Note that the Unix and Windows user details are mutually
     * exclusive, meaning one or other must be supplied, but not both.
     * 
     * @param fileSystemUser the fileSystemUser value to set.
     * @return the BucketProperties object itself.
     */
    public BucketProperties withFileSystemUser(FileSystemUser fileSystemUser) {
        this.fileSystemUser = fileSystemUser;
        return this;
    }

    /**
     * Get the provisioningState property: Provisioning state of the resource.
     * 
     * @return the provisioningState value.
     */
    public NetAppProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the status property: The bucket credentials status. There states:
     * 
     * "NoCredentialsSet": Access and Secret key pair have not been generated.
     * "CredentialsExpired": Access and Secret key pair have expired.
     * "Active": The certificate has been installed and credentials are unexpired.
     * 
     * @return the status value.
     */
    public CredentialsStatus status() {
        return this.status;
    }

    /**
     * Get the server property: Properties of the server managing the lifecycle of volume buckets.
     * 
     * @return the server value.
     */
    public BucketServerProperties server() {
        return this.server;
    }

    /**
     * Set the server property: Properties of the server managing the lifecycle of volume buckets.
     * 
     * @param server the server value to set.
     * @return the BucketProperties object itself.
     */
    public BucketProperties withServer(BucketServerProperties server) {
        this.server = server;
        return this;
    }

    /**
     * Get the permissions property: Access permissions for the bucket. Either ReadOnly or ReadWrite. The default is
     * ReadOnly if no value is provided during bucket creation.
     * 
     * @return the permissions value.
     */
    public BucketPermissions permissions() {
        return this.permissions;
    }

    /**
     * Set the permissions property: Access permissions for the bucket. Either ReadOnly or ReadWrite. The default is
     * ReadOnly if no value is provided during bucket creation.
     * 
     * @param permissions the permissions value to set.
     * @return the BucketProperties object itself.
     */
    public BucketProperties withPermissions(BucketPermissions permissions) {
        this.permissions = permissions;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (fileSystemUser() != null) {
            fileSystemUser().validate();
        }
        if (server() != null) {
            server().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("path", this.path);
        jsonWriter.writeJsonField("fileSystemUser", this.fileSystemUser);
        jsonWriter.writeJsonField("server", this.server);
        jsonWriter.writeStringField("permissions", this.permissions == null ? null : this.permissions.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BucketProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of BucketProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the BucketProperties.
     */
    public static BucketProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BucketProperties deserializedBucketProperties = new BucketProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("path".equals(fieldName)) {
                    deserializedBucketProperties.path = reader.getString();
                } else if ("fileSystemUser".equals(fieldName)) {
                    deserializedBucketProperties.fileSystemUser = FileSystemUser.fromJson(reader);
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedBucketProperties.provisioningState
                        = NetAppProvisioningState.fromString(reader.getString());
                } else if ("status".equals(fieldName)) {
                    deserializedBucketProperties.status = CredentialsStatus.fromString(reader.getString());
                } else if ("server".equals(fieldName)) {
                    deserializedBucketProperties.server = BucketServerProperties.fromJson(reader);
                } else if ("permissions".equals(fieldName)) {
                    deserializedBucketProperties.permissions = BucketPermissions.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedBucketProperties;
        });
    }
}
