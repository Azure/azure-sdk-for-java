// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * UpdateNetworkSiblingSetRequest
 * 
 * Network sibling set update.
 */
@Fluent
public final class UpdateNetworkSiblingSetRequest {
    /*
     * Network Sibling Set ID
     * 
     * Network Sibling Set ID for a group of volumes sharing networking resources in a subnet.
     */
    @JsonProperty(value = "networkSiblingSetId", required = true)
    private String networkSiblingSetId;

    /*
     * Subnet resource Id
     * 
     * The Azure Resource URI for a delegated subnet. Must have the delegation Microsoft.NetApp/volumes. Example /subscriptions/subscriptionId/resourceGroups/resourceGroup/providers/Microsoft.Network/virtualNetworks/testVnet/subnets/{mySubnet}
     */
    @JsonProperty(value = "subnetId", required = true)
    private String subnetId;

    /*
     * Network sibling set state Id
     * 
     * Network sibling set state Id identifying the current state of the sibling set.
     */
    @JsonProperty(value = "networkSiblingSetStateId", required = true)
    private String networkSiblingSetStateId;

    /*
     * Network features
     * 
     * Network features available to the volume.
     */
    @JsonProperty(value = "networkFeatures", required = true)
    private NetworkFeatures networkFeatures;

    /**
     * Creates an instance of UpdateNetworkSiblingSetRequest class.
     */
    public UpdateNetworkSiblingSetRequest() {
    }

    /**
     * Get the networkSiblingSetId property: Network Sibling Set ID
     * 
     * Network Sibling Set ID for a group of volumes sharing networking resources in a subnet.
     * 
     * @return the networkSiblingSetId value.
     */
    public String networkSiblingSetId() {
        return this.networkSiblingSetId;
    }

    /**
     * Set the networkSiblingSetId property: Network Sibling Set ID
     * 
     * Network Sibling Set ID for a group of volumes sharing networking resources in a subnet.
     * 
     * @param networkSiblingSetId the networkSiblingSetId value to set.
     * @return the UpdateNetworkSiblingSetRequest object itself.
     */
    public UpdateNetworkSiblingSetRequest withNetworkSiblingSetId(String networkSiblingSetId) {
        this.networkSiblingSetId = networkSiblingSetId;
        return this;
    }

    /**
     * Get the subnetId property: Subnet resource Id
     * 
     * The Azure Resource URI for a delegated subnet. Must have the delegation Microsoft.NetApp/volumes. Example
     * /subscriptions/subscriptionId/resourceGroups/resourceGroup/providers/Microsoft.Network/virtualNetworks/testVnet/subnets/{mySubnet}.
     * 
     * @return the subnetId value.
     */
    public String subnetId() {
        return this.subnetId;
    }

    /**
     * Set the subnetId property: Subnet resource Id
     * 
     * The Azure Resource URI for a delegated subnet. Must have the delegation Microsoft.NetApp/volumes. Example
     * /subscriptions/subscriptionId/resourceGroups/resourceGroup/providers/Microsoft.Network/virtualNetworks/testVnet/subnets/{mySubnet}.
     * 
     * @param subnetId the subnetId value to set.
     * @return the UpdateNetworkSiblingSetRequest object itself.
     */
    public UpdateNetworkSiblingSetRequest withSubnetId(String subnetId) {
        this.subnetId = subnetId;
        return this;
    }

    /**
     * Get the networkSiblingSetStateId property: Network sibling set state Id
     * 
     * Network sibling set state Id identifying the current state of the sibling set.
     * 
     * @return the networkSiblingSetStateId value.
     */
    public String networkSiblingSetStateId() {
        return this.networkSiblingSetStateId;
    }

    /**
     * Set the networkSiblingSetStateId property: Network sibling set state Id
     * 
     * Network sibling set state Id identifying the current state of the sibling set.
     * 
     * @param networkSiblingSetStateId the networkSiblingSetStateId value to set.
     * @return the UpdateNetworkSiblingSetRequest object itself.
     */
    public UpdateNetworkSiblingSetRequest withNetworkSiblingSetStateId(String networkSiblingSetStateId) {
        this.networkSiblingSetStateId = networkSiblingSetStateId;
        return this;
    }

    /**
     * Get the networkFeatures property: Network features
     * 
     * Network features available to the volume.
     * 
     * @return the networkFeatures value.
     */
    public NetworkFeatures networkFeatures() {
        return this.networkFeatures;
    }

    /**
     * Set the networkFeatures property: Network features
     * 
     * Network features available to the volume.
     * 
     * @param networkFeatures the networkFeatures value to set.
     * @return the UpdateNetworkSiblingSetRequest object itself.
     */
    public UpdateNetworkSiblingSetRequest withNetworkFeatures(NetworkFeatures networkFeatures) {
        this.networkFeatures = networkFeatures;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (networkSiblingSetId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property networkSiblingSetId in model UpdateNetworkSiblingSetRequest"));
        }
        if (subnetId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property subnetId in model UpdateNetworkSiblingSetRequest"));
        }
        if (networkSiblingSetStateId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property networkSiblingSetStateId in model UpdateNetworkSiblingSetRequest"));
        }
        if (networkFeatures() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property networkFeatures in model UpdateNetworkSiblingSetRequest"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(UpdateNetworkSiblingSetRequest.class);
}
