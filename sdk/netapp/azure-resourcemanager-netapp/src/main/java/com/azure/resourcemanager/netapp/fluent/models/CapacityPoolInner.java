// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.JsonFlatten;
import com.azure.core.management.Resource;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.netapp.models.QosType;
import com.azure.resourcemanager.netapp.models.ServiceLevel;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.Map;

/** Capacity pool resource. */
@JsonFlatten
@Fluent
public class CapacityPoolInner extends Resource {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(CapacityPoolInner.class);

    /*
     * UUID v4 used to identify the Pool
     */
    @JsonProperty(value = "properties.poolId", access = JsonProperty.Access.WRITE_ONLY)
    private String poolId;

    /*
     * Provisioned size of the pool (in bytes). Allowed values are in 4TiB
     * chunks (value must be multiply of 4398046511104).
     */
    @JsonProperty(value = "properties.size", required = true)
    private long size;

    /*
     * The service level of the file system
     */
    @JsonProperty(value = "properties.serviceLevel", required = true)
    private ServiceLevel serviceLevel;

    /*
     * Azure lifecycle management
     */
    @JsonProperty(value = "properties.provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private String provisioningState;

    /*
     * Total throughput of pool in Mibps
     */
    @JsonProperty(value = "properties.totalThroughputMibps", access = JsonProperty.Access.WRITE_ONLY)
    private Float totalThroughputMibps;

    /*
     * Utilized throughput of pool in Mibps
     */
    @JsonProperty(value = "properties.utilizedThroughputMibps", access = JsonProperty.Access.WRITE_ONLY)
    private Float utilizedThroughputMibps;

    /*
     * The qos type of the pool
     */
    @JsonProperty(value = "properties.qosType")
    private QosType qosType;

    /**
     * Get the poolId property: UUID v4 used to identify the Pool.
     *
     * @return the poolId value.
     */
    public String poolId() {
        return this.poolId;
    }

    /**
     * Get the size property: Provisioned size of the pool (in bytes). Allowed values are in 4TiB chunks (value must be
     * multiply of 4398046511104).
     *
     * @return the size value.
     */
    public long size() {
        return this.size;
    }

    /**
     * Set the size property: Provisioned size of the pool (in bytes). Allowed values are in 4TiB chunks (value must be
     * multiply of 4398046511104).
     *
     * @param size the size value to set.
     * @return the CapacityPoolInner object itself.
     */
    public CapacityPoolInner withSize(long size) {
        this.size = size;
        return this;
    }

    /**
     * Get the serviceLevel property: The service level of the file system.
     *
     * @return the serviceLevel value.
     */
    public ServiceLevel serviceLevel() {
        return this.serviceLevel;
    }

    /**
     * Set the serviceLevel property: The service level of the file system.
     *
     * @param serviceLevel the serviceLevel value to set.
     * @return the CapacityPoolInner object itself.
     */
    public CapacityPoolInner withServiceLevel(ServiceLevel serviceLevel) {
        this.serviceLevel = serviceLevel;
        return this;
    }

    /**
     * Get the provisioningState property: Azure lifecycle management.
     *
     * @return the provisioningState value.
     */
    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the totalThroughputMibps property: Total throughput of pool in Mibps.
     *
     * @return the totalThroughputMibps value.
     */
    public Float totalThroughputMibps() {
        return this.totalThroughputMibps;
    }

    /**
     * Get the utilizedThroughputMibps property: Utilized throughput of pool in Mibps.
     *
     * @return the utilizedThroughputMibps value.
     */
    public Float utilizedThroughputMibps() {
        return this.utilizedThroughputMibps;
    }

    /**
     * Get the qosType property: The qos type of the pool.
     *
     * @return the qosType value.
     */
    public QosType qosType() {
        return this.qosType;
    }

    /**
     * Set the qosType property: The qos type of the pool.
     *
     * @param qosType the qosType value to set.
     * @return the CapacityPoolInner object itself.
     */
    public CapacityPoolInner withQosType(QosType qosType) {
        this.qosType = qosType;
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public CapacityPoolInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public CapacityPoolInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (serviceLevel() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property serviceLevel in model CapacityPoolInner"));
        }
    }
}
