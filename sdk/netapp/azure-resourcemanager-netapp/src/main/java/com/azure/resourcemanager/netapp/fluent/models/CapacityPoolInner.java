// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.Resource;
import com.azure.core.management.SystemData;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.netapp.models.EncryptionType;
import com.azure.resourcemanager.netapp.models.QosType;
import com.azure.resourcemanager.netapp.models.ServiceLevel;
import java.io.IOException;
import java.util.Map;

/**
 * Capacity pool resource.
 */
@Fluent
public final class CapacityPoolInner extends Resource {
    /*
     * A unique read-only string that changes whenever the resource is updated.
     */
    private String etag;

    /*
     * Capacity pool properties
     */
    private PoolProperties innerProperties = new PoolProperties();

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    private SystemData systemData;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * The type of the resource.
     */
    private String type;

    /**
     * Creates an instance of CapacityPoolInner class.
     */
    public CapacityPoolInner() {
    }

    /**
     * Get the etag property: A unique read-only string that changes whenever the resource is updated.
     * 
     * @return the etag value.
     */
    public String etag() {
        return this.etag;
    }

    /**
     * Get the innerProperties property: Capacity pool properties.
     * 
     * @return the innerProperties value.
     */
    private PoolProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CapacityPoolInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CapacityPoolInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Get the poolId property: UUID v4 used to identify the Pool.
     * 
     * @return the poolId value.
     */
    public String poolId() {
        return this.innerProperties() == null ? null : this.innerProperties().poolId();
    }

    /**
     * Get the size property: Provisioned size of the pool (in bytes). Allowed values are in 1TiB chunks (value must be
     * multiple of 1099511627776).
     * 
     * @return the size value.
     */
    public long size() {
        return this.innerProperties() == null ? 0L : this.innerProperties().size();
    }

    /**
     * Set the size property: Provisioned size of the pool (in bytes). Allowed values are in 1TiB chunks (value must be
     * multiple of 1099511627776).
     * 
     * @param size the size value to set.
     * @return the CapacityPoolInner object itself.
     */
    public CapacityPoolInner withSize(long size) {
        if (this.innerProperties() == null) {
            this.innerProperties = new PoolProperties();
        }
        this.innerProperties().withSize(size);
        return this;
    }

    /**
     * Get the serviceLevel property: The service level of the file system.
     * 
     * @return the serviceLevel value.
     */
    public ServiceLevel serviceLevel() {
        return this.innerProperties() == null ? null : this.innerProperties().serviceLevel();
    }

    /**
     * Set the serviceLevel property: The service level of the file system.
     * 
     * @param serviceLevel the serviceLevel value to set.
     * @return the CapacityPoolInner object itself.
     */
    public CapacityPoolInner withServiceLevel(ServiceLevel serviceLevel) {
        if (this.innerProperties() == null) {
            this.innerProperties = new PoolProperties();
        }
        this.innerProperties().withServiceLevel(serviceLevel);
        return this;
    }

    /**
     * Get the provisioningState property: Azure lifecycle management.
     * 
     * @return the provisioningState value.
     */
    public String provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Get the totalThroughputMibps property: Total throughput of pool in MiB/s.
     * 
     * @return the totalThroughputMibps value.
     */
    public Float totalThroughputMibps() {
        return this.innerProperties() == null ? null : this.innerProperties().totalThroughputMibps();
    }

    /**
     * Get the utilizedThroughputMibps property: Utilized throughput of pool in MiB/s.
     * 
     * @return the utilizedThroughputMibps value.
     */
    public Float utilizedThroughputMibps() {
        return this.innerProperties() == null ? null : this.innerProperties().utilizedThroughputMibps();
    }

    /**
     * Get the qosType property: The qos type of the pool.
     * 
     * @return the qosType value.
     */
    public QosType qosType() {
        return this.innerProperties() == null ? null : this.innerProperties().qosType();
    }

    /**
     * Set the qosType property: The qos type of the pool.
     * 
     * @param qosType the qosType value to set.
     * @return the CapacityPoolInner object itself.
     */
    public CapacityPoolInner withQosType(QosType qosType) {
        if (this.innerProperties() == null) {
            this.innerProperties = new PoolProperties();
        }
        this.innerProperties().withQosType(qosType);
        return this;
    }

    /**
     * Get the coolAccess property: If enabled (true) the pool can contain cool Access enabled volumes.
     * 
     * @return the coolAccess value.
     */
    public Boolean coolAccess() {
        return this.innerProperties() == null ? null : this.innerProperties().coolAccess();
    }

    /**
     * Set the coolAccess property: If enabled (true) the pool can contain cool Access enabled volumes.
     * 
     * @param coolAccess the coolAccess value to set.
     * @return the CapacityPoolInner object itself.
     */
    public CapacityPoolInner withCoolAccess(Boolean coolAccess) {
        if (this.innerProperties() == null) {
            this.innerProperties = new PoolProperties();
        }
        this.innerProperties().withCoolAccess(coolAccess);
        return this;
    }

    /**
     * Get the encryptionType property: Encryption type of the capacity pool, set encryption type for data at rest for
     * this pool and all volumes in it. This value can only be set when creating new pool.
     * 
     * @return the encryptionType value.
     */
    public EncryptionType encryptionType() {
        return this.innerProperties() == null ? null : this.innerProperties().encryptionType();
    }

    /**
     * Set the encryptionType property: Encryption type of the capacity pool, set encryption type for data at rest for
     * this pool and all volumes in it. This value can only be set when creating new pool.
     * 
     * @param encryptionType the encryptionType value to set.
     * @return the CapacityPoolInner object itself.
     */
    public CapacityPoolInner withEncryptionType(EncryptionType encryptionType) {
        if (this.innerProperties() == null) {
            this.innerProperties = new PoolProperties();
        }
        this.innerProperties().withEncryptionType(encryptionType);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property innerProperties in model CapacityPoolInner"));
        } else {
            innerProperties().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(CapacityPoolInner.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("location", location());
        jsonWriter.writeMapField("tags", tags(), (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CapacityPoolInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CapacityPoolInner if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CapacityPoolInner.
     */
    public static CapacityPoolInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CapacityPoolInner deserializedCapacityPoolInner = new CapacityPoolInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedCapacityPoolInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedCapacityPoolInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedCapacityPoolInner.type = reader.getString();
                } else if ("location".equals(fieldName)) {
                    deserializedCapacityPoolInner.withLocation(reader.getString());
                } else if ("tags".equals(fieldName)) {
                    Map<String, String> tags = reader.readMap(reader1 -> reader1.getString());
                    deserializedCapacityPoolInner.withTags(tags);
                } else if ("properties".equals(fieldName)) {
                    deserializedCapacityPoolInner.innerProperties = PoolProperties.fromJson(reader);
                } else if ("etag".equals(fieldName)) {
                    deserializedCapacityPoolInner.etag = reader.getString();
                } else if ("systemData".equals(fieldName)) {
                    deserializedCapacityPoolInner.systemData = SystemData.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCapacityPoolInner;
        });
    }
}
