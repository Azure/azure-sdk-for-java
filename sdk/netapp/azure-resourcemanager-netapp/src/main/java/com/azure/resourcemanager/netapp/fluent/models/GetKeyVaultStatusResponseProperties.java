// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.netapp.models.KeyVaultPrivateEndpoint;
import java.io.IOException;
import java.util.List;

/**
 * Properties which represents Change key vault status.
 */
@Fluent
public final class GetKeyVaultStatusResponseProperties
    implements JsonSerializable<GetKeyVaultStatusResponseProperties> {
    /*
     * The URI of the key vault/managed HSM that should be used for encryption.
     */
    private String keyVaultUri;

    /*
     * The name of the key that should be used for encryption.
     */
    private String keyName;

    /*
     * Azure resource ID of the key vault/managed HSM that should be used for encryption.
     */
    private String keyVaultResourceId;

    /*
     * Pairs of virtual network ID and private endpoint ID. Every virtual network that has volumes encrypted with
     * customer-managed keys needs its own key vault private endpoint.
     */
    private List<KeyVaultPrivateEndpoint> keyVaultPrivateEndpoints;

    /**
     * Creates an instance of GetKeyVaultStatusResponseProperties class.
     */
    public GetKeyVaultStatusResponseProperties() {
    }

    /**
     * Get the keyVaultUri property: The URI of the key vault/managed HSM that should be used for encryption.
     * 
     * @return the keyVaultUri value.
     */
    public String keyVaultUri() {
        return this.keyVaultUri;
    }

    /**
     * Set the keyVaultUri property: The URI of the key vault/managed HSM that should be used for encryption.
     * 
     * @param keyVaultUri the keyVaultUri value to set.
     * @return the GetKeyVaultStatusResponseProperties object itself.
     */
    public GetKeyVaultStatusResponseProperties withKeyVaultUri(String keyVaultUri) {
        this.keyVaultUri = keyVaultUri;
        return this;
    }

    /**
     * Get the keyName property: The name of the key that should be used for encryption.
     * 
     * @return the keyName value.
     */
    public String keyName() {
        return this.keyName;
    }

    /**
     * Set the keyName property: The name of the key that should be used for encryption.
     * 
     * @param keyName the keyName value to set.
     * @return the GetKeyVaultStatusResponseProperties object itself.
     */
    public GetKeyVaultStatusResponseProperties withKeyName(String keyName) {
        this.keyName = keyName;
        return this;
    }

    /**
     * Get the keyVaultResourceId property: Azure resource ID of the key vault/managed HSM that should be used for
     * encryption.
     * 
     * @return the keyVaultResourceId value.
     */
    public String keyVaultResourceId() {
        return this.keyVaultResourceId;
    }

    /**
     * Set the keyVaultResourceId property: Azure resource ID of the key vault/managed HSM that should be used for
     * encryption.
     * 
     * @param keyVaultResourceId the keyVaultResourceId value to set.
     * @return the GetKeyVaultStatusResponseProperties object itself.
     */
    public GetKeyVaultStatusResponseProperties withKeyVaultResourceId(String keyVaultResourceId) {
        this.keyVaultResourceId = keyVaultResourceId;
        return this;
    }

    /**
     * Get the keyVaultPrivateEndpoints property: Pairs of virtual network ID and private endpoint ID. Every virtual
     * network that has volumes encrypted with customer-managed keys needs its own key vault private endpoint.
     * 
     * @return the keyVaultPrivateEndpoints value.
     */
    public List<KeyVaultPrivateEndpoint> keyVaultPrivateEndpoints() {
        return this.keyVaultPrivateEndpoints;
    }

    /**
     * Set the keyVaultPrivateEndpoints property: Pairs of virtual network ID and private endpoint ID. Every virtual
     * network that has volumes encrypted with customer-managed keys needs its own key vault private endpoint.
     * 
     * @param keyVaultPrivateEndpoints the keyVaultPrivateEndpoints value to set.
     * @return the GetKeyVaultStatusResponseProperties object itself.
     */
    public GetKeyVaultStatusResponseProperties
        withKeyVaultPrivateEndpoints(List<KeyVaultPrivateEndpoint> keyVaultPrivateEndpoints) {
        this.keyVaultPrivateEndpoints = keyVaultPrivateEndpoints;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (keyVaultPrivateEndpoints() != null) {
            keyVaultPrivateEndpoints().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("keyVaultUri", this.keyVaultUri);
        jsonWriter.writeStringField("keyName", this.keyName);
        jsonWriter.writeStringField("keyVaultResourceId", this.keyVaultResourceId);
        jsonWriter.writeArrayField("keyVaultPrivateEndpoints", this.keyVaultPrivateEndpoints,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of GetKeyVaultStatusResponseProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of GetKeyVaultStatusResponseProperties if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the GetKeyVaultStatusResponseProperties.
     */
    public static GetKeyVaultStatusResponseProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            GetKeyVaultStatusResponseProperties deserializedGetKeyVaultStatusResponseProperties
                = new GetKeyVaultStatusResponseProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("keyVaultUri".equals(fieldName)) {
                    deserializedGetKeyVaultStatusResponseProperties.keyVaultUri = reader.getString();
                } else if ("keyName".equals(fieldName)) {
                    deserializedGetKeyVaultStatusResponseProperties.keyName = reader.getString();
                } else if ("keyVaultResourceId".equals(fieldName)) {
                    deserializedGetKeyVaultStatusResponseProperties.keyVaultResourceId = reader.getString();
                } else if ("keyVaultPrivateEndpoints".equals(fieldName)) {
                    List<KeyVaultPrivateEndpoint> keyVaultPrivateEndpoints
                        = reader.readArray(reader1 -> KeyVaultPrivateEndpoint.fromJson(reader1));
                    deserializedGetKeyVaultStatusResponseProperties.keyVaultPrivateEndpoints = keyVaultPrivateEndpoints;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedGetKeyVaultStatusResponseProperties;
        });
    }
}
