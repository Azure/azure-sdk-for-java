// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * NIC information
 * 
 * NIC information and list of volumes for which the NIC has the primary mount ip address.
 */
@Fluent
public final class NicInfo implements JsonSerializable<NicInfo> {
    /*
     * ipAddress
     */
    private String ipAddress;

    /*
     * Volume resource Ids
     */
    private List<String> volumeResourceIds;

    /**
     * Creates an instance of NicInfo class.
     */
    public NicInfo() {
    }

    /**
     * Get the ipAddress property: ipAddress.
     * 
     * @return the ipAddress value.
     */
    public String ipAddress() {
        return this.ipAddress;
    }

    /**
     * Get the volumeResourceIds property: Volume resource Ids.
     * 
     * @return the volumeResourceIds value.
     */
    public List<String> volumeResourceIds() {
        return this.volumeResourceIds;
    }

    /**
     * Set the volumeResourceIds property: Volume resource Ids.
     * 
     * @param volumeResourceIds the volumeResourceIds value to set.
     * @return the NicInfo object itself.
     */
    public NicInfo withVolumeResourceIds(List<String> volumeResourceIds) {
        this.volumeResourceIds = volumeResourceIds;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("volumeResourceIds", this.volumeResourceIds,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NicInfo from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NicInfo if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IOException If an error occurs while reading the NicInfo.
     */
    public static NicInfo fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NicInfo deserializedNicInfo = new NicInfo();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("ipAddress".equals(fieldName)) {
                    deserializedNicInfo.ipAddress = reader.getString();
                } else if ("volumeResourceIds".equals(fieldName)) {
                    List<String> volumeResourceIds = reader.readArray(reader1 -> reader1.getString());
                    deserializedNicInfo.volumeResourceIds = volumeResourceIds;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNicInfo;
        });
    }
}
