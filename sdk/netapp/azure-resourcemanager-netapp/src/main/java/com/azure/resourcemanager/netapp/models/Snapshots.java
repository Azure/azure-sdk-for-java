// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.models;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;

/** Resource collection API of Snapshots. */
public interface Snapshots {
    /**
     * Describe all snapshots
     *
     * <p>List all snapshots associated with the volume.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of the NetApp account.
     * @param poolName The name of the capacity pool.
     * @param volumeName The name of the volume.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of Snapshots as paginated response with {@link PagedIterable}.
     */
    PagedIterable<Snapshot> list(String resourceGroupName, String accountName, String poolName, String volumeName);

    /**
     * Describe all snapshots
     *
     * <p>List all snapshots associated with the volume.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of the NetApp account.
     * @param poolName The name of the capacity pool.
     * @param volumeName The name of the volume.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of Snapshots as paginated response with {@link PagedIterable}.
     */
    PagedIterable<Snapshot> list(
        String resourceGroupName, String accountName, String poolName, String volumeName, Context context);

    /**
     * Describe a snapshot
     *
     * <p>Get details of the specified snapshot.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of the NetApp account.
     * @param poolName The name of the capacity pool.
     * @param volumeName The name of the volume.
     * @param snapshotName The name of the snapshot.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return details of the specified snapshot along with {@link Response}.
     */
    Response<Snapshot> getWithResponse(
        String resourceGroupName,
        String accountName,
        String poolName,
        String volumeName,
        String snapshotName,
        Context context);

    /**
     * Describe a snapshot
     *
     * <p>Get details of the specified snapshot.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of the NetApp account.
     * @param poolName The name of the capacity pool.
     * @param volumeName The name of the volume.
     * @param snapshotName The name of the snapshot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return details of the specified snapshot.
     */
    Snapshot get(String resourceGroupName, String accountName, String poolName, String volumeName, String snapshotName);

    /**
     * Update a snapshot
     *
     * <p>Patch a snapshot.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of the NetApp account.
     * @param poolName The name of the capacity pool.
     * @param volumeName The name of the volume.
     * @param snapshotName The name of the snapshot.
     * @param body Snapshot object supplied in the body of the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return snapshot of a Volume.
     */
    Snapshot update(
        String resourceGroupName,
        String accountName,
        String poolName,
        String volumeName,
        String snapshotName,
        Object body);

    /**
     * Update a snapshot
     *
     * <p>Patch a snapshot.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of the NetApp account.
     * @param poolName The name of the capacity pool.
     * @param volumeName The name of the volume.
     * @param snapshotName The name of the snapshot.
     * @param body Snapshot object supplied in the body of the operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return snapshot of a Volume.
     */
    Snapshot update(
        String resourceGroupName,
        String accountName,
        String poolName,
        String volumeName,
        String snapshotName,
        Object body,
        Context context);

    /**
     * Delete a snapshot
     *
     * <p>Delete snapshot.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of the NetApp account.
     * @param poolName The name of the capacity pool.
     * @param volumeName The name of the volume.
     * @param snapshotName The name of the snapshot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void delete(String resourceGroupName, String accountName, String poolName, String volumeName, String snapshotName);

    /**
     * Delete a snapshot
     *
     * <p>Delete snapshot.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of the NetApp account.
     * @param poolName The name of the capacity pool.
     * @param volumeName The name of the volume.
     * @param snapshotName The name of the snapshot.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void delete(
        String resourceGroupName,
        String accountName,
        String poolName,
        String volumeName,
        String snapshotName,
        Context context);

    /**
     * Create a new Snapshot Restore Files request
     *
     * <p>Restore the specified files from the specified snapshot to the active filesystem.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of the NetApp account.
     * @param poolName The name of the capacity pool.
     * @param volumeName The name of the volume.
     * @param snapshotName The name of the snapshot.
     * @param body Restore payload supplied in the body of the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void restoreFiles(
        String resourceGroupName,
        String accountName,
        String poolName,
        String volumeName,
        String snapshotName,
        SnapshotRestoreFiles body);

    /**
     * Create a new Snapshot Restore Files request
     *
     * <p>Restore the specified files from the specified snapshot to the active filesystem.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of the NetApp account.
     * @param poolName The name of the capacity pool.
     * @param volumeName The name of the volume.
     * @param snapshotName The name of the snapshot.
     * @param body Restore payload supplied in the body of the operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void restoreFiles(
        String resourceGroupName,
        String accountName,
        String poolName,
        String volumeName,
        String snapshotName,
        SnapshotRestoreFiles body,
        Context context);

    /**
     * Describe a snapshot
     *
     * <p>Get details of the specified snapshot.
     *
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return details of the specified snapshot along with {@link Response}.
     */
    Snapshot getById(String id);

    /**
     * Describe a snapshot
     *
     * <p>Get details of the specified snapshot.
     *
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return details of the specified snapshot along with {@link Response}.
     */
    Response<Snapshot> getByIdWithResponse(String id, Context context);

    /**
     * Delete a snapshot
     *
     * <p>Delete snapshot.
     *
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteById(String id);

    /**
     * Delete a snapshot
     *
     * <p>Delete snapshot.
     *
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteByIdWithResponse(String id, Context context);

    /**
     * Begins definition for a new Snapshot resource.
     *
     * @param name resource name.
     * @return the first stage of the new Snapshot definition.
     */
    Snapshot.DefinitionStages.Blank define(String name);
}
