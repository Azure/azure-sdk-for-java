// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Properties of the server managing the lifecycle of volume buckets.
 */
@Fluent
public final class BucketServerPatchProperties implements JsonSerializable<BucketServerPatchProperties> {
    /*
     * The host part of the bucket URL, resolving to the bucket IP address and allowed by the server certificate.
     */
    private String fqdn;

    /*
     * A base64-encoded PEM file, which includes both the bucket server's certificate and private key. It is used to
     * authenticate the user and allows access to volume data in a read-only manner.
     */
    private String certificateObject;

    /**
     * Creates an instance of BucketServerPatchProperties class.
     */
    public BucketServerPatchProperties() {
    }

    /**
     * Get the fqdn property: The host part of the bucket URL, resolving to the bucket IP address and allowed by the
     * server certificate.
     * 
     * @return the fqdn value.
     */
    public String fqdn() {
        return this.fqdn;
    }

    /**
     * Set the fqdn property: The host part of the bucket URL, resolving to the bucket IP address and allowed by the
     * server certificate.
     * 
     * @param fqdn the fqdn value to set.
     * @return the BucketServerPatchProperties object itself.
     */
    public BucketServerPatchProperties withFqdn(String fqdn) {
        this.fqdn = fqdn;
        return this;
    }

    /**
     * Get the certificateObject property: A base64-encoded PEM file, which includes both the bucket server's
     * certificate and private key. It is used to authenticate the user and allows access to volume data in a read-only
     * manner.
     * 
     * @return the certificateObject value.
     */
    public String certificateObject() {
        return this.certificateObject;
    }

    /**
     * Set the certificateObject property: A base64-encoded PEM file, which includes both the bucket server's
     * certificate and private key. It is used to authenticate the user and allows access to volume data in a read-only
     * manner.
     * 
     * @param certificateObject the certificateObject value to set.
     * @return the BucketServerPatchProperties object itself.
     */
    public BucketServerPatchProperties withCertificateObject(String certificateObject) {
        this.certificateObject = certificateObject;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("fqdn", this.fqdn);
        jsonWriter.writeStringField("certificateObject", this.certificateObject);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BucketServerPatchProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of BucketServerPatchProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the BucketServerPatchProperties.
     */
    public static BucketServerPatchProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BucketServerPatchProperties deserializedBucketServerPatchProperties = new BucketServerPatchProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("fqdn".equals(fieldName)) {
                    deserializedBucketServerPatchProperties.fqdn = reader.getString();
                } else if ("certificateObject".equals(fieldName)) {
                    deserializedBucketServerPatchProperties.certificateObject = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedBucketServerPatchProperties;
        });
    }
}
