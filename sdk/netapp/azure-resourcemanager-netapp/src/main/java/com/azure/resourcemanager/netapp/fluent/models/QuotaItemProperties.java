// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * QuotaItem Properties.
 */
@Immutable
public final class QuotaItemProperties implements JsonSerializable<QuotaItemProperties> {
    /*
     * The current quota value.
     */
    private Integer current;

    /*
     * The default quota value.
     */
    private Integer defaultProperty;

    /*
     * The usage quota value.
     */
    private Integer usage;

    /**
     * Creates an instance of QuotaItemProperties class.
     */
    public QuotaItemProperties() {
    }

    /**
     * Get the current property: The current quota value.
     * 
     * @return the current value.
     */
    public Integer current() {
        return this.current;
    }

    /**
     * Get the defaultProperty property: The default quota value.
     * 
     * @return the defaultProperty value.
     */
    public Integer defaultProperty() {
        return this.defaultProperty;
    }

    /**
     * Get the usage property: The usage quota value.
     * 
     * @return the usage value.
     */
    public Integer usage() {
        return this.usage;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of QuotaItemProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of QuotaItemProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the QuotaItemProperties.
     */
    public static QuotaItemProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            QuotaItemProperties deserializedQuotaItemProperties = new QuotaItemProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("current".equals(fieldName)) {
                    deserializedQuotaItemProperties.current = reader.getNullable(JsonReader::getInt);
                } else if ("default".equals(fieldName)) {
                    deserializedQuotaItemProperties.defaultProperty = reader.getNullable(JsonReader::getInt);
                } else if ("usage".equals(fieldName)) {
                    deserializedQuotaItemProperties.usage = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedQuotaItemProperties;
        });
    }
}
