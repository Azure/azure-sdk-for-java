// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * NFS user details
 * 
 * The effective NFS User ID and Group ID when accessing the volume data.
 */
@Fluent
public final class NfsUser implements JsonSerializable<NfsUser> {
    /*
     * The NFS user's UID
     */
    private Long userId;

    /*
     * The NFS user's GID
     */
    private Long groupId;

    /**
     * Creates an instance of NfsUser class.
     */
    public NfsUser() {
    }

    /**
     * Get the userId property: The NFS user's UID.
     * 
     * @return the userId value.
     */
    public Long userId() {
        return this.userId;
    }

    /**
     * Set the userId property: The NFS user's UID.
     * 
     * @param userId the userId value to set.
     * @return the NfsUser object itself.
     */
    public NfsUser withUserId(Long userId) {
        this.userId = userId;
        return this;
    }

    /**
     * Get the groupId property: The NFS user's GID.
     * 
     * @return the groupId value.
     */
    public Long groupId() {
        return this.groupId;
    }

    /**
     * Set the groupId property: The NFS user's GID.
     * 
     * @param groupId the groupId value to set.
     * @return the NfsUser object itself.
     */
    public NfsUser withGroupId(Long groupId) {
        this.groupId = groupId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("userId", this.userId);
        jsonWriter.writeNumberField("groupId", this.groupId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NfsUser from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NfsUser if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IOException If an error occurs while reading the NfsUser.
     */
    public static NfsUser fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NfsUser deserializedNfsUser = new NfsUser();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("userId".equals(fieldName)) {
                    deserializedNfsUser.userId = reader.getNullable(JsonReader::getLong);
                } else if ("groupId".equals(fieldName)) {
                    deserializedNfsUser.groupId = reader.getNullable(JsonReader::getLong);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNfsUser;
        });
    }
}
