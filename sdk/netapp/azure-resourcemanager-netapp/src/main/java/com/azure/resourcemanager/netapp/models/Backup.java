// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.models;

import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.netapp.fluent.models.BackupInner;
import java.time.OffsetDateTime;

/**
 * An immutable client-side representation of Backup.
 */
public interface Backup {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     * 
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     * 
     * @return the type value.
     */
    String type();

    /**
     * Gets the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    SystemData systemData();

    /**
     * Gets the backupId property: UUID v4 used to identify the Backup.
     * 
     * @return the backupId value.
     */
    String backupId();

    /**
     * Gets the creationDate property: The creation date of the backup.
     * 
     * @return the creationDate value.
     */
    OffsetDateTime creationDate();

    /**
     * Gets the provisioningState property: Azure lifecycle management.
     * 
     * @return the provisioningState value.
     */
    String provisioningState();

    /**
     * Gets the size property: Size of backup in bytes.
     * 
     * @return the size value.
     */
    Long size();

    /**
     * Gets the label property: Label for backup.
     * 
     * @return the label value.
     */
    String label();

    /**
     * Gets the backupType property: Type of backup Manual or Scheduled.
     * 
     * @return the backupType value.
     */
    BackupType backupType();

    /**
     * Gets the failureReason property: Failure reason.
     * 
     * @return the failureReason value.
     */
    String failureReason();

    /**
     * Gets the volumeResourceId property: ResourceId used to identify the Volume.
     * 
     * @return the volumeResourceId value.
     */
    String volumeResourceId();

    /**
     * Gets the useExistingSnapshot property: Manual backup an already existing snapshot. This will always be false for
     * scheduled backups and true/false for manual backups.
     * 
     * @return the useExistingSnapshot value.
     */
    Boolean useExistingSnapshot();

    /**
     * Gets the snapshotName property: The name of the snapshot.
     * 
     * @return the snapshotName value.
     */
    String snapshotName();

    /**
     * Gets the backupPolicyResourceId property: ResourceId used to identify the backup policy.
     * 
     * @return the backupPolicyResourceId value.
     */
    String backupPolicyResourceId();

    /**
     * Gets the name of the resource group.
     * 
     * @return the name of the resource group.
     */
    String resourceGroupName();

    /**
     * Gets the inner com.azure.resourcemanager.netapp.fluent.models.BackupInner object.
     * 
     * @return the inner object.
     */
    BackupInner innerModel();

    /**
     * The entirety of the Backup definition.
     */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithParentResource,
        DefinitionStages.WithVolumeResourceId, DefinitionStages.WithCreate {
    }

    /**
     * The Backup definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of the Backup definition.
         */
        interface Blank extends WithParentResource {
        }

        /**
         * The stage of the Backup definition allowing to specify parent resource.
         */
        interface WithParentResource {
            /**
             * Specifies resourceGroupName, accountName, backupVaultName.
             * 
             * @param resourceGroupName The name of the resource group. The name is case insensitive.
             * @param accountName The name of the NetApp account.
             * @param backupVaultName The name of the Backup Vault.
             * @return the next definition stage.
             */
            WithVolumeResourceId withExistingBackupVault(String resourceGroupName, String accountName,
                String backupVaultName);
        }

        /**
         * The stage of the Backup definition allowing to specify volumeResourceId.
         */
        interface WithVolumeResourceId {
            /**
             * Specifies the volumeResourceId property: ResourceId used to identify the Volume.
             * 
             * @param volumeResourceId ResourceId used to identify the Volume.
             * @return the next definition stage.
             */
            WithCreate withVolumeResourceId(String volumeResourceId);
        }

        /**
         * The stage of the Backup definition which contains all the minimum required properties for the resource to be
         * created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate extends DefinitionStages.WithLabel, DefinitionStages.WithUseExistingSnapshot,
            DefinitionStages.WithSnapshotName {
            /**
             * Executes the create request.
             * 
             * @return the created resource.
             */
            Backup create();

            /**
             * Executes the create request.
             * 
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            Backup create(Context context);
        }

        /**
         * The stage of the Backup definition allowing to specify label.
         */
        interface WithLabel {
            /**
             * Specifies the label property: Label for backup.
             * 
             * @param label Label for backup.
             * @return the next definition stage.
             */
            WithCreate withLabel(String label);
        }

        /**
         * The stage of the Backup definition allowing to specify useExistingSnapshot.
         */
        interface WithUseExistingSnapshot {
            /**
             * Specifies the useExistingSnapshot property: Manual backup an already existing snapshot. This will always
             * be false for scheduled backups and true/false for manual backups.
             * 
             * @param useExistingSnapshot Manual backup an already existing snapshot. This will always be false for
             * scheduled backups and true/false for manual backups.
             * @return the next definition stage.
             */
            WithCreate withUseExistingSnapshot(Boolean useExistingSnapshot);
        }

        /**
         * The stage of the Backup definition allowing to specify snapshotName.
         */
        interface WithSnapshotName {
            /**
             * Specifies the snapshotName property: The name of the snapshot.
             * 
             * @param snapshotName The name of the snapshot.
             * @return the next definition stage.
             */
            WithCreate withSnapshotName(String snapshotName);
        }
    }

    /**
     * Begins update for the Backup resource.
     * 
     * @return the stage of resource update.
     */
    Backup.Update update();

    /**
     * The template for Backup update.
     */
    interface Update extends UpdateStages.WithLabel {
        /**
         * Executes the update request.
         * 
         * @return the updated resource.
         */
        Backup apply();

        /**
         * Executes the update request.
         * 
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        Backup apply(Context context);
    }

    /**
     * The Backup update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the Backup update allowing to specify label.
         */
        interface WithLabel {
            /**
             * Specifies the label property: Label for backup.
             * 
             * @param label Label for backup.
             * @return the next definition stage.
             */
            Update withLabel(String label);
        }
    }

    /**
     * Refreshes the resource to sync with Azure.
     * 
     * @return the refreshed resource.
     */
    Backup refresh();

    /**
     * Refreshes the resource to sync with Azure.
     * 
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    Backup refresh(Context context);
}
