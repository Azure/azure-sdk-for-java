// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Monthly Schedule properties.
 */
@Fluent
public final class MonthlySchedule implements JsonSerializable<MonthlySchedule> {
    /*
     * Monthly snapshot count to keep
     */
    private Integer snapshotsToKeep;

    /*
     * Indicates which days of the month snapshot should be taken. A comma delimited string.
     */
    private String daysOfMonth;

    /*
     * Indicates which hour in UTC timezone a snapshot should be taken
     */
    private Integer hour;

    /*
     * Indicates which minute snapshot should be taken
     */
    private Integer minute;

    /*
     * Resource size in bytes, current storage usage for the volume in bytes
     */
    private Long usedBytes;

    /**
     * Creates an instance of MonthlySchedule class.
     */
    public MonthlySchedule() {
    }

    /**
     * Get the snapshotsToKeep property: Monthly snapshot count to keep.
     * 
     * @return the snapshotsToKeep value.
     */
    public Integer snapshotsToKeep() {
        return this.snapshotsToKeep;
    }

    /**
     * Set the snapshotsToKeep property: Monthly snapshot count to keep.
     * 
     * @param snapshotsToKeep the snapshotsToKeep value to set.
     * @return the MonthlySchedule object itself.
     */
    public MonthlySchedule withSnapshotsToKeep(Integer snapshotsToKeep) {
        this.snapshotsToKeep = snapshotsToKeep;
        return this;
    }

    /**
     * Get the daysOfMonth property: Indicates which days of the month snapshot should be taken. A comma delimited
     * string.
     * 
     * @return the daysOfMonth value.
     */
    public String daysOfMonth() {
        return this.daysOfMonth;
    }

    /**
     * Set the daysOfMonth property: Indicates which days of the month snapshot should be taken. A comma delimited
     * string.
     * 
     * @param daysOfMonth the daysOfMonth value to set.
     * @return the MonthlySchedule object itself.
     */
    public MonthlySchedule withDaysOfMonth(String daysOfMonth) {
        this.daysOfMonth = daysOfMonth;
        return this;
    }

    /**
     * Get the hour property: Indicates which hour in UTC timezone a snapshot should be taken.
     * 
     * @return the hour value.
     */
    public Integer hour() {
        return this.hour;
    }

    /**
     * Set the hour property: Indicates which hour in UTC timezone a snapshot should be taken.
     * 
     * @param hour the hour value to set.
     * @return the MonthlySchedule object itself.
     */
    public MonthlySchedule withHour(Integer hour) {
        this.hour = hour;
        return this;
    }

    /**
     * Get the minute property: Indicates which minute snapshot should be taken.
     * 
     * @return the minute value.
     */
    public Integer minute() {
        return this.minute;
    }

    /**
     * Set the minute property: Indicates which minute snapshot should be taken.
     * 
     * @param minute the minute value to set.
     * @return the MonthlySchedule object itself.
     */
    public MonthlySchedule withMinute(Integer minute) {
        this.minute = minute;
        return this;
    }

    /**
     * Get the usedBytes property: Resource size in bytes, current storage usage for the volume in bytes.
     * 
     * @return the usedBytes value.
     */
    public Long usedBytes() {
        return this.usedBytes;
    }

    /**
     * Set the usedBytes property: Resource size in bytes, current storage usage for the volume in bytes.
     * 
     * @param usedBytes the usedBytes value to set.
     * @return the MonthlySchedule object itself.
     */
    public MonthlySchedule withUsedBytes(Long usedBytes) {
        this.usedBytes = usedBytes;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("snapshotsToKeep", this.snapshotsToKeep);
        jsonWriter.writeStringField("daysOfMonth", this.daysOfMonth);
        jsonWriter.writeNumberField("hour", this.hour);
        jsonWriter.writeNumberField("minute", this.minute);
        jsonWriter.writeNumberField("usedBytes", this.usedBytes);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MonthlySchedule from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MonthlySchedule if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the MonthlySchedule.
     */
    public static MonthlySchedule fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MonthlySchedule deserializedMonthlySchedule = new MonthlySchedule();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("snapshotsToKeep".equals(fieldName)) {
                    deserializedMonthlySchedule.snapshotsToKeep = reader.getNullable(JsonReader::getInt);
                } else if ("daysOfMonth".equals(fieldName)) {
                    deserializedMonthlySchedule.daysOfMonth = reader.getString();
                } else if ("hour".equals(fieldName)) {
                    deserializedMonthlySchedule.hour = reader.getNullable(JsonReader::getInt);
                } else if ("minute".equals(fieldName)) {
                    deserializedMonthlySchedule.minute = reader.getNullable(JsonReader::getInt);
                } else if ("usedBytes".equals(fieldName)) {
                    deserializedMonthlySchedule.usedBytes = reader.getNullable(JsonReader::getLong);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMonthlySchedule;
        });
    }
}
