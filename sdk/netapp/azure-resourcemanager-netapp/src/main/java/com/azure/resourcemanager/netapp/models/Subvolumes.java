// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.models;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;

/** Resource collection API of Subvolumes. */
public interface Subvolumes {
    /**
     * List of all the subvolumes
     *
     * <p>Returns a list of the subvolumes in the volume.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of the NetApp account.
     * @param poolName The name of the capacity pool.
     * @param volumeName The name of the volume.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of Subvolumes as paginated response with {@link PagedIterable}.
     */
    PagedIterable<SubvolumeInfo> listByVolume(
        String resourceGroupName, String accountName, String poolName, String volumeName);

    /**
     * List of all the subvolumes
     *
     * <p>Returns a list of the subvolumes in the volume.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of the NetApp account.
     * @param poolName The name of the capacity pool.
     * @param volumeName The name of the volume.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of Subvolumes as paginated response with {@link PagedIterable}.
     */
    PagedIterable<SubvolumeInfo> listByVolume(
        String resourceGroupName, String accountName, String poolName, String volumeName, Context context);

    /**
     * Get the path associated with the subvolumeName
     *
     * <p>Returns the path associated with the subvolumeName provided.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of the NetApp account.
     * @param poolName The name of the capacity pool.
     * @param volumeName The name of the volume.
     * @param subvolumeName The name of the subvolume.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return subvolume Information properties along with {@link Response}.
     */
    Response<SubvolumeInfo> getWithResponse(
        String resourceGroupName,
        String accountName,
        String poolName,
        String volumeName,
        String subvolumeName,
        Context context);

    /**
     * Get the path associated with the subvolumeName
     *
     * <p>Returns the path associated with the subvolumeName provided.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of the NetApp account.
     * @param poolName The name of the capacity pool.
     * @param volumeName The name of the volume.
     * @param subvolumeName The name of the subvolume.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return subvolume Information properties.
     */
    SubvolumeInfo get(
        String resourceGroupName, String accountName, String poolName, String volumeName, String subvolumeName);

    /**
     * Delete a subvolume
     *
     * <p>Delete subvolume.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of the NetApp account.
     * @param poolName The name of the capacity pool.
     * @param volumeName The name of the volume.
     * @param subvolumeName The name of the subvolume.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void delete(String resourceGroupName, String accountName, String poolName, String volumeName, String subvolumeName);

    /**
     * Delete a subvolume
     *
     * <p>Delete subvolume.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of the NetApp account.
     * @param poolName The name of the capacity pool.
     * @param volumeName The name of the volume.
     * @param subvolumeName The name of the subvolume.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void delete(
        String resourceGroupName,
        String accountName,
        String poolName,
        String volumeName,
        String subvolumeName,
        Context context);

    /**
     * Describe a subvolume
     *
     * <p>Get details of the specified subvolume.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of the NetApp account.
     * @param poolName The name of the capacity pool.
     * @param volumeName The name of the volume.
     * @param subvolumeName The name of the subvolume.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return details of the specified subvolume.
     */
    SubvolumeModel getMetadata(
        String resourceGroupName, String accountName, String poolName, String volumeName, String subvolumeName);

    /**
     * Describe a subvolume
     *
     * <p>Get details of the specified subvolume.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of the NetApp account.
     * @param poolName The name of the capacity pool.
     * @param volumeName The name of the volume.
     * @param subvolumeName The name of the subvolume.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return details of the specified subvolume.
     */
    SubvolumeModel getMetadata(
        String resourceGroupName,
        String accountName,
        String poolName,
        String volumeName,
        String subvolumeName,
        Context context);

    /**
     * Get the path associated with the subvolumeName
     *
     * <p>Returns the path associated with the subvolumeName provided.
     *
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return subvolume Information properties along with {@link Response}.
     */
    SubvolumeInfo getById(String id);

    /**
     * Get the path associated with the subvolumeName
     *
     * <p>Returns the path associated with the subvolumeName provided.
     *
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return subvolume Information properties along with {@link Response}.
     */
    Response<SubvolumeInfo> getByIdWithResponse(String id, Context context);

    /**
     * Delete a subvolume
     *
     * <p>Delete subvolume.
     *
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteById(String id);

    /**
     * Delete a subvolume
     *
     * <p>Delete subvolume.
     *
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteByIdWithResponse(String id, Context context);

    /**
     * Begins definition for a new SubvolumeInfo resource.
     *
     * @param name resource name.
     * @return the first stage of the new SubvolumeInfo definition.
     */
    SubvolumeInfo.DefinitionStages.Blank define(String name);
}
