// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.netapp.models.AvsDataStore;
import com.azure.resourcemanager.netapp.models.CoolAccessRetrievalPolicy;
import com.azure.resourcemanager.netapp.models.EnableSubvolumes;
import com.azure.resourcemanager.netapp.models.EncryptionKeySource;
import com.azure.resourcemanager.netapp.models.FileAccessLogs;
import com.azure.resourcemanager.netapp.models.NetworkFeatures;
import com.azure.resourcemanager.netapp.models.PlacementKeyValuePairs;
import com.azure.resourcemanager.netapp.models.SecurityStyle;
import com.azure.resourcemanager.netapp.models.ServiceLevel;
import com.azure.resourcemanager.netapp.models.SmbAccessBasedEnumeration;
import com.azure.resourcemanager.netapp.models.SmbNonBrowsable;
import com.azure.resourcemanager.netapp.models.VolumePropertiesDataProtection;
import com.azure.resourcemanager.netapp.models.VolumePropertiesExportPolicy;
import com.azure.resourcemanager.netapp.models.VolumeStorageToNetworkProximity;
import java.io.IOException;
import java.util.List;

/**
 * Volume properties.
 */
@Fluent
public final class VolumeProperties implements JsonSerializable<VolumeProperties> {
    /*
     * Unique FileSystem Identifier.
     */
    private String fileSystemId;

    /*
     * A unique file path for the volume. Used when creating mount targets
     */
    private String creationToken;

    /*
     * The service level of the file system
     */
    private ServiceLevel serviceLevel;

    /*
     * Maximum storage quota allowed for a file system in bytes. This is a soft quota used for alerting only. For
     * regular volumes, valid values are in the range 50GiB to 100TiB. For large volumes, valid values are in the range
     * 100TiB to 500TiB, and on an exceptional basis, from to 2400GiB to 2400TiB. Values expressed in bytes as multiples
     * of 1 GiB.
     */
    private long usageThreshold;

    /*
     * Set of export policy rules
     */
    private VolumePropertiesExportPolicy exportPolicy;

    /*
     * Set of protocol types, default NFSv3, CIFS for SMB protocol
     */
    private List<String> protocolTypes;

    /*
     * Azure lifecycle management
     */
    private String provisioningState;

    /*
     * Resource identifier used to identify the Snapshot.
     */
    private String snapshotId;

    /*
     * If enabled (true) the snapshot the volume was created from will be automatically deleted after the volume create
     * operation has finished. Defaults to false
     */
    private Boolean deleteBaseSnapshot;

    /*
     * Resource identifier used to identify the Backup.
     */
    private String backupId;

    /*
     * Unique Baremetal Tenant Identifier.
     */
    private String baremetalTenantId;

    /*
     * The Azure Resource URI for a delegated subnet. Must have the delegation Microsoft.NetApp/volumes
     */
    private String subnetId;

    /*
     * The original value of the network features type available to the volume at the time it was created.
     */
    private NetworkFeatures networkFeatures;

    /*
     * The effective value of the network features type available to the volume, or current effective state of update.
     */
    private NetworkFeatures effectiveNetworkFeatures;

    /*
     * Network Sibling Set ID for the the group of volumes sharing networking resources.
     */
    private String networkSiblingSetId;

    /*
     * Provides storage to network proximity information for the volume.
     */
    private VolumeStorageToNetworkProximity storageToNetworkProximity;

    /*
     * List of mount targets
     */
    private List<MountTargetProperties> mountTargets;

    /*
     * What type of volume is this. For destination volumes in Cross Region Replication, set type to DataProtection
     */
    private String volumeType;

    /*
     * DataProtection type volumes include an object containing details of the replication
     */
    private VolumePropertiesDataProtection dataProtection;

    /*
     * Restoring
     */
    private Boolean isRestoring;

    /*
     * If enabled (true) the volume will contain a read-only snapshot directory which provides access to each of the
     * volume's snapshots (defaults to true).
     */
    private Boolean snapshotDirectoryVisible;

    /*
     * Describe if a volume is KerberosEnabled. To be use with swagger version 2020-05-01 or later
     */
    private Boolean kerberosEnabled;

    /*
     * The security style of volume, default unix, defaults to ntfs for dual protocol or CIFS protocol
     */
    private SecurityStyle securityStyle;

    /*
     * Enables encryption for in-flight smb3 data. Only applicable for SMB/DualProtocol volume. To be used with swagger
     * version 2020-08-01 or later
     */
    private Boolean smbEncryption;

    /*
     * Enables access-based enumeration share property for SMB Shares. Only applicable for SMB/DualProtocol volume
     */
    private SmbAccessBasedEnumeration smbAccessBasedEnumeration;

    /*
     * Enables non-browsable property for SMB Shares. Only applicable for SMB/DualProtocol volume
     */
    private SmbNonBrowsable smbNonBrowsable;

    /*
     * Enables continuously available share property for smb volume. Only applicable for SMB volume
     */
    private Boolean smbContinuouslyAvailable;

    /*
     * Maximum throughput in MiB/s that can be achieved by this volume and this will be accepted as input only for
     * manual qosType volume
     */
    private Float throughputMibps;

    /*
     * Actual throughput in MiB/s for auto qosType volumes calculated based on size and serviceLevel
     */
    private Float actualThroughputMibps;

    /*
     * Source of key used to encrypt data in volume. Applicable if NetApp account has encryption.keySource =
     * 'Microsoft.KeyVault'. Possible values (case-insensitive) are: 'Microsoft.NetApp, Microsoft.KeyVault'
     */
    private EncryptionKeySource encryptionKeySource;

    /*
     * The resource ID of private endpoint for KeyVault. It must reside in the same VNET as the volume. Only applicable
     * if encryptionKeySource = 'Microsoft.KeyVault'.
     */
    private String keyVaultPrivateEndpointResourceId;

    /*
     * Specifies whether LDAP is enabled or not for a given NFS volume.
     */
    private Boolean ldapEnabled;

    /*
     * Specifies whether Cool Access(tiering) is enabled for the volume.
     */
    private Boolean coolAccess;

    /*
     * Specifies the number of days after which data that is not accessed by clients will be tiered.
     */
    private Integer coolnessPeriod;

    /*
     * coolAccessRetrievalPolicy determines the data retrieval behavior from the cool tier to standard storage based on
     * the read pattern for cool access enabled volumes. The possible values for this field are:
     * Default - Data will be pulled from cool tier to standard storage on random reads. This policy is the default.
     * OnRead - All client-driven data read is pulled from cool tier to standard storage on both sequential and random
     * reads.
     * Never - No client-driven data is pulled from cool tier to standard storage.
     */
    private CoolAccessRetrievalPolicy coolAccessRetrievalPolicy;

    /*
     * UNIX permissions for NFS volume accepted in octal 4 digit format. First digit selects the set user ID(4), set
     * group ID (2) and sticky (1) attributes. Second digit selects permission for the owner of the file: read (4),
     * write (2) and execute (1). Third selects permissions for other users in the same group. the fourth for other
     * users not in the group. 0755 - gives read/write/execute permissions to owner and read/execute to group and other
     * users.
     */
    private String unixPermissions;

    /*
     * When a volume is being restored from another volume's snapshot, will show the percentage completion of this
     * cloning process. When this value is empty/null there is no cloning process currently happening on this volume.
     * This value will update every 5 minutes during cloning.
     */
    private Integer cloneProgress;

    /*
     * Flag indicating whether file access logs are enabled for the volume, based on active diagnostic settings present
     * on the volume.
     */
    private FileAccessLogs fileAccessLogs;

    /*
     * Specifies whether the volume is enabled for Azure VMware Solution (AVS) datastore purpose
     */
    private AvsDataStore avsDataStore;

    /*
     * Data store resource unique identifier
     */
    private List<String> dataStoreResourceId;

    /*
     * Specifies if default quota is enabled for the volume.
     */
    private Boolean isDefaultQuotaEnabled;

    /*
     * Default user quota for volume in KiBs. If isDefaultQuotaEnabled is set, the minimum value of 4 KiBs applies .
     */
    private Long defaultUserQuotaInKiBs;

    /*
     * Default group quota for volume in KiBs. If isDefaultQuotaEnabled is set, the minimum value of 4 KiBs applies.
     */
    private Long defaultGroupQuotaInKiBs;

    /*
     * Maximum number of files allowed. Needs a service request in order to be changed. Only allowed to be changed if
     * volume quota is more than 4TiB.
     */
    private Long maximumNumberOfFiles;

    /*
     * Volume Group Name
     */
    private String volumeGroupName;

    /*
     * Pool Resource Id used in case of creating a volume through volume group
     */
    private String capacityPoolResourceId;

    /*
     * Proximity placement group associated with the volume
     */
    private String proximityPlacementGroup;

    /*
     * T2 network information
     */
    private String t2Network;

    /*
     * Volume spec name is the application specific designation or identifier for the particular volume in a volume
     * group for e.g. data, log
     */
    private String volumeSpecName;

    /*
     * Specifies if the volume is encrypted or not. Only available on volumes created or updated after 2022-01-01.
     */
    private Boolean encrypted;

    /*
     * Application specific placement rules for the particular volume
     */
    private List<PlacementKeyValuePairs> placementRules;

    /*
     * Flag indicating whether subvolume operations are enabled on the volume
     */
    private EnableSubvolumes enableSubvolumes;

    /*
     * The availability zone where the volume is provisioned. This refers to the logical availability zone where the
     * volume resides.
     */
    private String provisionedAvailabilityZone;

    /*
     * Specifies whether volume is a Large Volume or Regular Volume.
     */
    private Boolean isLargeVolume;

    /*
     * Id of the snapshot or backup that the volume is restored from.
     */
    private String originatingResourceId;

    /**
     * Creates an instance of VolumeProperties class.
     */
    public VolumeProperties() {
    }

    /**
     * Get the fileSystemId property: Unique FileSystem Identifier.
     * 
     * @return the fileSystemId value.
     */
    public String fileSystemId() {
        return this.fileSystemId;
    }

    /**
     * Get the creationToken property: A unique file path for the volume. Used when creating mount targets.
     * 
     * @return the creationToken value.
     */
    public String creationToken() {
        return this.creationToken;
    }

    /**
     * Set the creationToken property: A unique file path for the volume. Used when creating mount targets.
     * 
     * @param creationToken the creationToken value to set.
     * @return the VolumeProperties object itself.
     */
    public VolumeProperties withCreationToken(String creationToken) {
        this.creationToken = creationToken;
        return this;
    }

    /**
     * Get the serviceLevel property: The service level of the file system.
     * 
     * @return the serviceLevel value.
     */
    public ServiceLevel serviceLevel() {
        return this.serviceLevel;
    }

    /**
     * Set the serviceLevel property: The service level of the file system.
     * 
     * @param serviceLevel the serviceLevel value to set.
     * @return the VolumeProperties object itself.
     */
    public VolumeProperties withServiceLevel(ServiceLevel serviceLevel) {
        this.serviceLevel = serviceLevel;
        return this;
    }

    /**
     * Get the usageThreshold property: Maximum storage quota allowed for a file system in bytes. This is a soft quota
     * used for alerting only. For regular volumes, valid values are in the range 50GiB to 100TiB. For large volumes,
     * valid values are in the range 100TiB to 500TiB, and on an exceptional basis, from to 2400GiB to 2400TiB. Values
     * expressed in bytes as multiples of 1 GiB.
     * 
     * @return the usageThreshold value.
     */
    public long usageThreshold() {
        return this.usageThreshold;
    }

    /**
     * Set the usageThreshold property: Maximum storage quota allowed for a file system in bytes. This is a soft quota
     * used for alerting only. For regular volumes, valid values are in the range 50GiB to 100TiB. For large volumes,
     * valid values are in the range 100TiB to 500TiB, and on an exceptional basis, from to 2400GiB to 2400TiB. Values
     * expressed in bytes as multiples of 1 GiB.
     * 
     * @param usageThreshold the usageThreshold value to set.
     * @return the VolumeProperties object itself.
     */
    public VolumeProperties withUsageThreshold(long usageThreshold) {
        this.usageThreshold = usageThreshold;
        return this;
    }

    /**
     * Get the exportPolicy property: Set of export policy rules.
     * 
     * @return the exportPolicy value.
     */
    public VolumePropertiesExportPolicy exportPolicy() {
        return this.exportPolicy;
    }

    /**
     * Set the exportPolicy property: Set of export policy rules.
     * 
     * @param exportPolicy the exportPolicy value to set.
     * @return the VolumeProperties object itself.
     */
    public VolumeProperties withExportPolicy(VolumePropertiesExportPolicy exportPolicy) {
        this.exportPolicy = exportPolicy;
        return this;
    }

    /**
     * Get the protocolTypes property: Set of protocol types, default NFSv3, CIFS for SMB protocol.
     * 
     * @return the protocolTypes value.
     */
    public List<String> protocolTypes() {
        return this.protocolTypes;
    }

    /**
     * Set the protocolTypes property: Set of protocol types, default NFSv3, CIFS for SMB protocol.
     * 
     * @param protocolTypes the protocolTypes value to set.
     * @return the VolumeProperties object itself.
     */
    public VolumeProperties withProtocolTypes(List<String> protocolTypes) {
        this.protocolTypes = protocolTypes;
        return this;
    }

    /**
     * Get the provisioningState property: Azure lifecycle management.
     * 
     * @return the provisioningState value.
     */
    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the snapshotId property: Resource identifier used to identify the Snapshot.
     * 
     * @return the snapshotId value.
     */
    public String snapshotId() {
        return this.snapshotId;
    }

    /**
     * Set the snapshotId property: Resource identifier used to identify the Snapshot.
     * 
     * @param snapshotId the snapshotId value to set.
     * @return the VolumeProperties object itself.
     */
    public VolumeProperties withSnapshotId(String snapshotId) {
        this.snapshotId = snapshotId;
        return this;
    }

    /**
     * Get the deleteBaseSnapshot property: If enabled (true) the snapshot the volume was created from will be
     * automatically deleted after the volume create operation has finished. Defaults to false.
     * 
     * @return the deleteBaseSnapshot value.
     */
    public Boolean deleteBaseSnapshot() {
        return this.deleteBaseSnapshot;
    }

    /**
     * Set the deleteBaseSnapshot property: If enabled (true) the snapshot the volume was created from will be
     * automatically deleted after the volume create operation has finished. Defaults to false.
     * 
     * @param deleteBaseSnapshot the deleteBaseSnapshot value to set.
     * @return the VolumeProperties object itself.
     */
    public VolumeProperties withDeleteBaseSnapshot(Boolean deleteBaseSnapshot) {
        this.deleteBaseSnapshot = deleteBaseSnapshot;
        return this;
    }

    /**
     * Get the backupId property: Resource identifier used to identify the Backup.
     * 
     * @return the backupId value.
     */
    public String backupId() {
        return this.backupId;
    }

    /**
     * Set the backupId property: Resource identifier used to identify the Backup.
     * 
     * @param backupId the backupId value to set.
     * @return the VolumeProperties object itself.
     */
    public VolumeProperties withBackupId(String backupId) {
        this.backupId = backupId;
        return this;
    }

    /**
     * Get the baremetalTenantId property: Unique Baremetal Tenant Identifier.
     * 
     * @return the baremetalTenantId value.
     */
    public String baremetalTenantId() {
        return this.baremetalTenantId;
    }

    /**
     * Get the subnetId property: The Azure Resource URI for a delegated subnet. Must have the delegation
     * Microsoft.NetApp/volumes.
     * 
     * @return the subnetId value.
     */
    public String subnetId() {
        return this.subnetId;
    }

    /**
     * Set the subnetId property: The Azure Resource URI for a delegated subnet. Must have the delegation
     * Microsoft.NetApp/volumes.
     * 
     * @param subnetId the subnetId value to set.
     * @return the VolumeProperties object itself.
     */
    public VolumeProperties withSubnetId(String subnetId) {
        this.subnetId = subnetId;
        return this;
    }

    /**
     * Get the networkFeatures property: The original value of the network features type available to the volume at the
     * time it was created.
     * 
     * @return the networkFeatures value.
     */
    public NetworkFeatures networkFeatures() {
        return this.networkFeatures;
    }

    /**
     * Set the networkFeatures property: The original value of the network features type available to the volume at the
     * time it was created.
     * 
     * @param networkFeatures the networkFeatures value to set.
     * @return the VolumeProperties object itself.
     */
    public VolumeProperties withNetworkFeatures(NetworkFeatures networkFeatures) {
        this.networkFeatures = networkFeatures;
        return this;
    }

    /**
     * Get the effectiveNetworkFeatures property: The effective value of the network features type available to the
     * volume, or current effective state of update.
     * 
     * @return the effectiveNetworkFeatures value.
     */
    public NetworkFeatures effectiveNetworkFeatures() {
        return this.effectiveNetworkFeatures;
    }

    /**
     * Get the networkSiblingSetId property: Network Sibling Set ID for the the group of volumes sharing networking
     * resources.
     * 
     * @return the networkSiblingSetId value.
     */
    public String networkSiblingSetId() {
        return this.networkSiblingSetId;
    }

    /**
     * Get the storageToNetworkProximity property: Provides storage to network proximity information for the volume.
     * 
     * @return the storageToNetworkProximity value.
     */
    public VolumeStorageToNetworkProximity storageToNetworkProximity() {
        return this.storageToNetworkProximity;
    }

    /**
     * Get the mountTargets property: List of mount targets.
     * 
     * @return the mountTargets value.
     */
    public List<MountTargetProperties> mountTargets() {
        return this.mountTargets;
    }

    /**
     * Get the volumeType property: What type of volume is this. For destination volumes in Cross Region Replication,
     * set type to DataProtection.
     * 
     * @return the volumeType value.
     */
    public String volumeType() {
        return this.volumeType;
    }

    /**
     * Set the volumeType property: What type of volume is this. For destination volumes in Cross Region Replication,
     * set type to DataProtection.
     * 
     * @param volumeType the volumeType value to set.
     * @return the VolumeProperties object itself.
     */
    public VolumeProperties withVolumeType(String volumeType) {
        this.volumeType = volumeType;
        return this;
    }

    /**
     * Get the dataProtection property: DataProtection type volumes include an object containing details of the
     * replication.
     * 
     * @return the dataProtection value.
     */
    public VolumePropertiesDataProtection dataProtection() {
        return this.dataProtection;
    }

    /**
     * Set the dataProtection property: DataProtection type volumes include an object containing details of the
     * replication.
     * 
     * @param dataProtection the dataProtection value to set.
     * @return the VolumeProperties object itself.
     */
    public VolumeProperties withDataProtection(VolumePropertiesDataProtection dataProtection) {
        this.dataProtection = dataProtection;
        return this;
    }

    /**
     * Get the isRestoring property: Restoring.
     * 
     * @return the isRestoring value.
     */
    public Boolean isRestoring() {
        return this.isRestoring;
    }

    /**
     * Set the isRestoring property: Restoring.
     * 
     * @param isRestoring the isRestoring value to set.
     * @return the VolumeProperties object itself.
     */
    public VolumeProperties withIsRestoring(Boolean isRestoring) {
        this.isRestoring = isRestoring;
        return this;
    }

    /**
     * Get the snapshotDirectoryVisible property: If enabled (true) the volume will contain a read-only snapshot
     * directory which provides access to each of the volume's snapshots (defaults to true).
     * 
     * @return the snapshotDirectoryVisible value.
     */
    public Boolean snapshotDirectoryVisible() {
        return this.snapshotDirectoryVisible;
    }

    /**
     * Set the snapshotDirectoryVisible property: If enabled (true) the volume will contain a read-only snapshot
     * directory which provides access to each of the volume's snapshots (defaults to true).
     * 
     * @param snapshotDirectoryVisible the snapshotDirectoryVisible value to set.
     * @return the VolumeProperties object itself.
     */
    public VolumeProperties withSnapshotDirectoryVisible(Boolean snapshotDirectoryVisible) {
        this.snapshotDirectoryVisible = snapshotDirectoryVisible;
        return this;
    }

    /**
     * Get the kerberosEnabled property: Describe if a volume is KerberosEnabled. To be use with swagger version
     * 2020-05-01 or later.
     * 
     * @return the kerberosEnabled value.
     */
    public Boolean kerberosEnabled() {
        return this.kerberosEnabled;
    }

    /**
     * Set the kerberosEnabled property: Describe if a volume is KerberosEnabled. To be use with swagger version
     * 2020-05-01 or later.
     * 
     * @param kerberosEnabled the kerberosEnabled value to set.
     * @return the VolumeProperties object itself.
     */
    public VolumeProperties withKerberosEnabled(Boolean kerberosEnabled) {
        this.kerberosEnabled = kerberosEnabled;
        return this;
    }

    /**
     * Get the securityStyle property: The security style of volume, default unix, defaults to ntfs for dual protocol or
     * CIFS protocol.
     * 
     * @return the securityStyle value.
     */
    public SecurityStyle securityStyle() {
        return this.securityStyle;
    }

    /**
     * Set the securityStyle property: The security style of volume, default unix, defaults to ntfs for dual protocol or
     * CIFS protocol.
     * 
     * @param securityStyle the securityStyle value to set.
     * @return the VolumeProperties object itself.
     */
    public VolumeProperties withSecurityStyle(SecurityStyle securityStyle) {
        this.securityStyle = securityStyle;
        return this;
    }

    /**
     * Get the smbEncryption property: Enables encryption for in-flight smb3 data. Only applicable for SMB/DualProtocol
     * volume. To be used with swagger version 2020-08-01 or later.
     * 
     * @return the smbEncryption value.
     */
    public Boolean smbEncryption() {
        return this.smbEncryption;
    }

    /**
     * Set the smbEncryption property: Enables encryption for in-flight smb3 data. Only applicable for SMB/DualProtocol
     * volume. To be used with swagger version 2020-08-01 or later.
     * 
     * @param smbEncryption the smbEncryption value to set.
     * @return the VolumeProperties object itself.
     */
    public VolumeProperties withSmbEncryption(Boolean smbEncryption) {
        this.smbEncryption = smbEncryption;
        return this;
    }

    /**
     * Get the smbAccessBasedEnumeration property: Enables access-based enumeration share property for SMB Shares. Only
     * applicable for SMB/DualProtocol volume.
     * 
     * @return the smbAccessBasedEnumeration value.
     */
    public SmbAccessBasedEnumeration smbAccessBasedEnumeration() {
        return this.smbAccessBasedEnumeration;
    }

    /**
     * Set the smbAccessBasedEnumeration property: Enables access-based enumeration share property for SMB Shares. Only
     * applicable for SMB/DualProtocol volume.
     * 
     * @param smbAccessBasedEnumeration the smbAccessBasedEnumeration value to set.
     * @return the VolumeProperties object itself.
     */
    public VolumeProperties withSmbAccessBasedEnumeration(SmbAccessBasedEnumeration smbAccessBasedEnumeration) {
        this.smbAccessBasedEnumeration = smbAccessBasedEnumeration;
        return this;
    }

    /**
     * Get the smbNonBrowsable property: Enables non-browsable property for SMB Shares. Only applicable for
     * SMB/DualProtocol volume.
     * 
     * @return the smbNonBrowsable value.
     */
    public SmbNonBrowsable smbNonBrowsable() {
        return this.smbNonBrowsable;
    }

    /**
     * Set the smbNonBrowsable property: Enables non-browsable property for SMB Shares. Only applicable for
     * SMB/DualProtocol volume.
     * 
     * @param smbNonBrowsable the smbNonBrowsable value to set.
     * @return the VolumeProperties object itself.
     */
    public VolumeProperties withSmbNonBrowsable(SmbNonBrowsable smbNonBrowsable) {
        this.smbNonBrowsable = smbNonBrowsable;
        return this;
    }

    /**
     * Get the smbContinuouslyAvailable property: Enables continuously available share property for smb volume. Only
     * applicable for SMB volume.
     * 
     * @return the smbContinuouslyAvailable value.
     */
    public Boolean smbContinuouslyAvailable() {
        return this.smbContinuouslyAvailable;
    }

    /**
     * Set the smbContinuouslyAvailable property: Enables continuously available share property for smb volume. Only
     * applicable for SMB volume.
     * 
     * @param smbContinuouslyAvailable the smbContinuouslyAvailable value to set.
     * @return the VolumeProperties object itself.
     */
    public VolumeProperties withSmbContinuouslyAvailable(Boolean smbContinuouslyAvailable) {
        this.smbContinuouslyAvailable = smbContinuouslyAvailable;
        return this;
    }

    /**
     * Get the throughputMibps property: Maximum throughput in MiB/s that can be achieved by this volume and this will
     * be accepted as input only for manual qosType volume.
     * 
     * @return the throughputMibps value.
     */
    public Float throughputMibps() {
        return this.throughputMibps;
    }

    /**
     * Set the throughputMibps property: Maximum throughput in MiB/s that can be achieved by this volume and this will
     * be accepted as input only for manual qosType volume.
     * 
     * @param throughputMibps the throughputMibps value to set.
     * @return the VolumeProperties object itself.
     */
    public VolumeProperties withThroughputMibps(Float throughputMibps) {
        this.throughputMibps = throughputMibps;
        return this;
    }

    /**
     * Get the actualThroughputMibps property: Actual throughput in MiB/s for auto qosType volumes calculated based on
     * size and serviceLevel.
     * 
     * @return the actualThroughputMibps value.
     */
    public Float actualThroughputMibps() {
        return this.actualThroughputMibps;
    }

    /**
     * Get the encryptionKeySource property: Source of key used to encrypt data in volume. Applicable if NetApp account
     * has encryption.keySource = 'Microsoft.KeyVault'. Possible values (case-insensitive) are: 'Microsoft.NetApp,
     * Microsoft.KeyVault'.
     * 
     * @return the encryptionKeySource value.
     */
    public EncryptionKeySource encryptionKeySource() {
        return this.encryptionKeySource;
    }

    /**
     * Set the encryptionKeySource property: Source of key used to encrypt data in volume. Applicable if NetApp account
     * has encryption.keySource = 'Microsoft.KeyVault'. Possible values (case-insensitive) are: 'Microsoft.NetApp,
     * Microsoft.KeyVault'.
     * 
     * @param encryptionKeySource the encryptionKeySource value to set.
     * @return the VolumeProperties object itself.
     */
    public VolumeProperties withEncryptionKeySource(EncryptionKeySource encryptionKeySource) {
        this.encryptionKeySource = encryptionKeySource;
        return this;
    }

    /**
     * Get the keyVaultPrivateEndpointResourceId property: The resource ID of private endpoint for KeyVault. It must
     * reside in the same VNET as the volume. Only applicable if encryptionKeySource = 'Microsoft.KeyVault'.
     * 
     * @return the keyVaultPrivateEndpointResourceId value.
     */
    public String keyVaultPrivateEndpointResourceId() {
        return this.keyVaultPrivateEndpointResourceId;
    }

    /**
     * Set the keyVaultPrivateEndpointResourceId property: The resource ID of private endpoint for KeyVault. It must
     * reside in the same VNET as the volume. Only applicable if encryptionKeySource = 'Microsoft.KeyVault'.
     * 
     * @param keyVaultPrivateEndpointResourceId the keyVaultPrivateEndpointResourceId value to set.
     * @return the VolumeProperties object itself.
     */
    public VolumeProperties withKeyVaultPrivateEndpointResourceId(String keyVaultPrivateEndpointResourceId) {
        this.keyVaultPrivateEndpointResourceId = keyVaultPrivateEndpointResourceId;
        return this;
    }

    /**
     * Get the ldapEnabled property: Specifies whether LDAP is enabled or not for a given NFS volume.
     * 
     * @return the ldapEnabled value.
     */
    public Boolean ldapEnabled() {
        return this.ldapEnabled;
    }

    /**
     * Set the ldapEnabled property: Specifies whether LDAP is enabled or not for a given NFS volume.
     * 
     * @param ldapEnabled the ldapEnabled value to set.
     * @return the VolumeProperties object itself.
     */
    public VolumeProperties withLdapEnabled(Boolean ldapEnabled) {
        this.ldapEnabled = ldapEnabled;
        return this;
    }

    /**
     * Get the coolAccess property: Specifies whether Cool Access(tiering) is enabled for the volume.
     * 
     * @return the coolAccess value.
     */
    public Boolean coolAccess() {
        return this.coolAccess;
    }

    /**
     * Set the coolAccess property: Specifies whether Cool Access(tiering) is enabled for the volume.
     * 
     * @param coolAccess the coolAccess value to set.
     * @return the VolumeProperties object itself.
     */
    public VolumeProperties withCoolAccess(Boolean coolAccess) {
        this.coolAccess = coolAccess;
        return this;
    }

    /**
     * Get the coolnessPeriod property: Specifies the number of days after which data that is not accessed by clients
     * will be tiered.
     * 
     * @return the coolnessPeriod value.
     */
    public Integer coolnessPeriod() {
        return this.coolnessPeriod;
    }

    /**
     * Set the coolnessPeriod property: Specifies the number of days after which data that is not accessed by clients
     * will be tiered.
     * 
     * @param coolnessPeriod the coolnessPeriod value to set.
     * @return the VolumeProperties object itself.
     */
    public VolumeProperties withCoolnessPeriod(Integer coolnessPeriod) {
        this.coolnessPeriod = coolnessPeriod;
        return this;
    }

    /**
     * Get the coolAccessRetrievalPolicy property: coolAccessRetrievalPolicy determines the data retrieval behavior from
     * the cool tier to standard storage based on the read pattern for cool access enabled volumes. The possible values
     * for this field are:
     * Default - Data will be pulled from cool tier to standard storage on random reads. This policy is the default.
     * OnRead - All client-driven data read is pulled from cool tier to standard storage on both sequential and random
     * reads.
     * Never - No client-driven data is pulled from cool tier to standard storage.
     * 
     * @return the coolAccessRetrievalPolicy value.
     */
    public CoolAccessRetrievalPolicy coolAccessRetrievalPolicy() {
        return this.coolAccessRetrievalPolicy;
    }

    /**
     * Set the coolAccessRetrievalPolicy property: coolAccessRetrievalPolicy determines the data retrieval behavior from
     * the cool tier to standard storage based on the read pattern for cool access enabled volumes. The possible values
     * for this field are:
     * Default - Data will be pulled from cool tier to standard storage on random reads. This policy is the default.
     * OnRead - All client-driven data read is pulled from cool tier to standard storage on both sequential and random
     * reads.
     * Never - No client-driven data is pulled from cool tier to standard storage.
     * 
     * @param coolAccessRetrievalPolicy the coolAccessRetrievalPolicy value to set.
     * @return the VolumeProperties object itself.
     */
    public VolumeProperties withCoolAccessRetrievalPolicy(CoolAccessRetrievalPolicy coolAccessRetrievalPolicy) {
        this.coolAccessRetrievalPolicy = coolAccessRetrievalPolicy;
        return this;
    }

    /**
     * Get the unixPermissions property: UNIX permissions for NFS volume accepted in octal 4 digit format. First digit
     * selects the set user ID(4), set group ID (2) and sticky (1) attributes. Second digit selects permission for the
     * owner of the file: read (4), write (2) and execute (1). Third selects permissions for other users in the same
     * group. the fourth for other users not in the group. 0755 - gives read/write/execute permissions to owner and
     * read/execute to group and other users.
     * 
     * @return the unixPermissions value.
     */
    public String unixPermissions() {
        return this.unixPermissions;
    }

    /**
     * Set the unixPermissions property: UNIX permissions for NFS volume accepted in octal 4 digit format. First digit
     * selects the set user ID(4), set group ID (2) and sticky (1) attributes. Second digit selects permission for the
     * owner of the file: read (4), write (2) and execute (1). Third selects permissions for other users in the same
     * group. the fourth for other users not in the group. 0755 - gives read/write/execute permissions to owner and
     * read/execute to group and other users.
     * 
     * @param unixPermissions the unixPermissions value to set.
     * @return the VolumeProperties object itself.
     */
    public VolumeProperties withUnixPermissions(String unixPermissions) {
        this.unixPermissions = unixPermissions;
        return this;
    }

    /**
     * Get the cloneProgress property: When a volume is being restored from another volume's snapshot, will show the
     * percentage completion of this cloning process. When this value is empty/null there is no cloning process
     * currently happening on this volume. This value will update every 5 minutes during cloning.
     * 
     * @return the cloneProgress value.
     */
    public Integer cloneProgress() {
        return this.cloneProgress;
    }

    /**
     * Get the fileAccessLogs property: Flag indicating whether file access logs are enabled for the volume, based on
     * active diagnostic settings present on the volume.
     * 
     * @return the fileAccessLogs value.
     */
    public FileAccessLogs fileAccessLogs() {
        return this.fileAccessLogs;
    }

    /**
     * Get the avsDataStore property: Specifies whether the volume is enabled for Azure VMware Solution (AVS) datastore
     * purpose.
     * 
     * @return the avsDataStore value.
     */
    public AvsDataStore avsDataStore() {
        return this.avsDataStore;
    }

    /**
     * Set the avsDataStore property: Specifies whether the volume is enabled for Azure VMware Solution (AVS) datastore
     * purpose.
     * 
     * @param avsDataStore the avsDataStore value to set.
     * @return the VolumeProperties object itself.
     */
    public VolumeProperties withAvsDataStore(AvsDataStore avsDataStore) {
        this.avsDataStore = avsDataStore;
        return this;
    }

    /**
     * Get the dataStoreResourceId property: Data store resource unique identifier.
     * 
     * @return the dataStoreResourceId value.
     */
    public List<String> dataStoreResourceId() {
        return this.dataStoreResourceId;
    }

    /**
     * Get the isDefaultQuotaEnabled property: Specifies if default quota is enabled for the volume.
     * 
     * @return the isDefaultQuotaEnabled value.
     */
    public Boolean isDefaultQuotaEnabled() {
        return this.isDefaultQuotaEnabled;
    }

    /**
     * Set the isDefaultQuotaEnabled property: Specifies if default quota is enabled for the volume.
     * 
     * @param isDefaultQuotaEnabled the isDefaultQuotaEnabled value to set.
     * @return the VolumeProperties object itself.
     */
    public VolumeProperties withIsDefaultQuotaEnabled(Boolean isDefaultQuotaEnabled) {
        this.isDefaultQuotaEnabled = isDefaultQuotaEnabled;
        return this;
    }

    /**
     * Get the defaultUserQuotaInKiBs property: Default user quota for volume in KiBs. If isDefaultQuotaEnabled is set,
     * the minimum value of 4 KiBs applies .
     * 
     * @return the defaultUserQuotaInKiBs value.
     */
    public Long defaultUserQuotaInKiBs() {
        return this.defaultUserQuotaInKiBs;
    }

    /**
     * Set the defaultUserQuotaInKiBs property: Default user quota for volume in KiBs. If isDefaultQuotaEnabled is set,
     * the minimum value of 4 KiBs applies .
     * 
     * @param defaultUserQuotaInKiBs the defaultUserQuotaInKiBs value to set.
     * @return the VolumeProperties object itself.
     */
    public VolumeProperties withDefaultUserQuotaInKiBs(Long defaultUserQuotaInKiBs) {
        this.defaultUserQuotaInKiBs = defaultUserQuotaInKiBs;
        return this;
    }

    /**
     * Get the defaultGroupQuotaInKiBs property: Default group quota for volume in KiBs. If isDefaultQuotaEnabled is
     * set, the minimum value of 4 KiBs applies.
     * 
     * @return the defaultGroupQuotaInKiBs value.
     */
    public Long defaultGroupQuotaInKiBs() {
        return this.defaultGroupQuotaInKiBs;
    }

    /**
     * Set the defaultGroupQuotaInKiBs property: Default group quota for volume in KiBs. If isDefaultQuotaEnabled is
     * set, the minimum value of 4 KiBs applies.
     * 
     * @param defaultGroupQuotaInKiBs the defaultGroupQuotaInKiBs value to set.
     * @return the VolumeProperties object itself.
     */
    public VolumeProperties withDefaultGroupQuotaInKiBs(Long defaultGroupQuotaInKiBs) {
        this.defaultGroupQuotaInKiBs = defaultGroupQuotaInKiBs;
        return this;
    }

    /**
     * Get the maximumNumberOfFiles property: Maximum number of files allowed. Needs a service request in order to be
     * changed. Only allowed to be changed if volume quota is more than 4TiB.
     * 
     * @return the maximumNumberOfFiles value.
     */
    public Long maximumNumberOfFiles() {
        return this.maximumNumberOfFiles;
    }

    /**
     * Get the volumeGroupName property: Volume Group Name.
     * 
     * @return the volumeGroupName value.
     */
    public String volumeGroupName() {
        return this.volumeGroupName;
    }

    /**
     * Get the capacityPoolResourceId property: Pool Resource Id used in case of creating a volume through volume group.
     * 
     * @return the capacityPoolResourceId value.
     */
    public String capacityPoolResourceId() {
        return this.capacityPoolResourceId;
    }

    /**
     * Set the capacityPoolResourceId property: Pool Resource Id used in case of creating a volume through volume group.
     * 
     * @param capacityPoolResourceId the capacityPoolResourceId value to set.
     * @return the VolumeProperties object itself.
     */
    public VolumeProperties withCapacityPoolResourceId(String capacityPoolResourceId) {
        this.capacityPoolResourceId = capacityPoolResourceId;
        return this;
    }

    /**
     * Get the proximityPlacementGroup property: Proximity placement group associated with the volume.
     * 
     * @return the proximityPlacementGroup value.
     */
    public String proximityPlacementGroup() {
        return this.proximityPlacementGroup;
    }

    /**
     * Set the proximityPlacementGroup property: Proximity placement group associated with the volume.
     * 
     * @param proximityPlacementGroup the proximityPlacementGroup value to set.
     * @return the VolumeProperties object itself.
     */
    public VolumeProperties withProximityPlacementGroup(String proximityPlacementGroup) {
        this.proximityPlacementGroup = proximityPlacementGroup;
        return this;
    }

    /**
     * Get the t2Network property: T2 network information.
     * 
     * @return the t2Network value.
     */
    public String t2Network() {
        return this.t2Network;
    }

    /**
     * Get the volumeSpecName property: Volume spec name is the application specific designation or identifier for the
     * particular volume in a volume group for e.g. data, log.
     * 
     * @return the volumeSpecName value.
     */
    public String volumeSpecName() {
        return this.volumeSpecName;
    }

    /**
     * Set the volumeSpecName property: Volume spec name is the application specific designation or identifier for the
     * particular volume in a volume group for e.g. data, log.
     * 
     * @param volumeSpecName the volumeSpecName value to set.
     * @return the VolumeProperties object itself.
     */
    public VolumeProperties withVolumeSpecName(String volumeSpecName) {
        this.volumeSpecName = volumeSpecName;
        return this;
    }

    /**
     * Get the encrypted property: Specifies if the volume is encrypted or not. Only available on volumes created or
     * updated after 2022-01-01.
     * 
     * @return the encrypted value.
     */
    public Boolean encrypted() {
        return this.encrypted;
    }

    /**
     * Get the placementRules property: Application specific placement rules for the particular volume.
     * 
     * @return the placementRules value.
     */
    public List<PlacementKeyValuePairs> placementRules() {
        return this.placementRules;
    }

    /**
     * Set the placementRules property: Application specific placement rules for the particular volume.
     * 
     * @param placementRules the placementRules value to set.
     * @return the VolumeProperties object itself.
     */
    public VolumeProperties withPlacementRules(List<PlacementKeyValuePairs> placementRules) {
        this.placementRules = placementRules;
        return this;
    }

    /**
     * Get the enableSubvolumes property: Flag indicating whether subvolume operations are enabled on the volume.
     * 
     * @return the enableSubvolumes value.
     */
    public EnableSubvolumes enableSubvolumes() {
        return this.enableSubvolumes;
    }

    /**
     * Set the enableSubvolumes property: Flag indicating whether subvolume operations are enabled on the volume.
     * 
     * @param enableSubvolumes the enableSubvolumes value to set.
     * @return the VolumeProperties object itself.
     */
    public VolumeProperties withEnableSubvolumes(EnableSubvolumes enableSubvolumes) {
        this.enableSubvolumes = enableSubvolumes;
        return this;
    }

    /**
     * Get the provisionedAvailabilityZone property: The availability zone where the volume is provisioned. This refers
     * to the logical availability zone where the volume resides.
     * 
     * @return the provisionedAvailabilityZone value.
     */
    public String provisionedAvailabilityZone() {
        return this.provisionedAvailabilityZone;
    }

    /**
     * Get the isLargeVolume property: Specifies whether volume is a Large Volume or Regular Volume.
     * 
     * @return the isLargeVolume value.
     */
    public Boolean isLargeVolume() {
        return this.isLargeVolume;
    }

    /**
     * Set the isLargeVolume property: Specifies whether volume is a Large Volume or Regular Volume.
     * 
     * @param isLargeVolume the isLargeVolume value to set.
     * @return the VolumeProperties object itself.
     */
    public VolumeProperties withIsLargeVolume(Boolean isLargeVolume) {
        this.isLargeVolume = isLargeVolume;
        return this;
    }

    /**
     * Get the originatingResourceId property: Id of the snapshot or backup that the volume is restored from.
     * 
     * @return the originatingResourceId value.
     */
    public String originatingResourceId() {
        return this.originatingResourceId;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (creationToken() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property creationToken in model VolumeProperties"));
        }
        if (exportPolicy() != null) {
            exportPolicy().validate();
        }
        if (subnetId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property subnetId in model VolumeProperties"));
        }
        if (mountTargets() != null) {
            mountTargets().forEach(e -> e.validate());
        }
        if (dataProtection() != null) {
            dataProtection().validate();
        }
        if (placementRules() != null) {
            placementRules().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(VolumeProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("creationToken", this.creationToken);
        jsonWriter.writeLongField("usageThreshold", this.usageThreshold);
        jsonWriter.writeStringField("subnetId", this.subnetId);
        jsonWriter.writeStringField("serviceLevel", this.serviceLevel == null ? null : this.serviceLevel.toString());
        jsonWriter.writeJsonField("exportPolicy", this.exportPolicy);
        jsonWriter.writeArrayField("protocolTypes", this.protocolTypes,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("snapshotId", this.snapshotId);
        jsonWriter.writeBooleanField("deleteBaseSnapshot", this.deleteBaseSnapshot);
        jsonWriter.writeStringField("backupId", this.backupId);
        jsonWriter.writeStringField("networkFeatures",
            this.networkFeatures == null ? null : this.networkFeatures.toString());
        jsonWriter.writeStringField("volumeType", this.volumeType);
        jsonWriter.writeJsonField("dataProtection", this.dataProtection);
        jsonWriter.writeBooleanField("isRestoring", this.isRestoring);
        jsonWriter.writeBooleanField("snapshotDirectoryVisible", this.snapshotDirectoryVisible);
        jsonWriter.writeBooleanField("kerberosEnabled", this.kerberosEnabled);
        jsonWriter.writeStringField("securityStyle", this.securityStyle == null ? null : this.securityStyle.toString());
        jsonWriter.writeBooleanField("smbEncryption", this.smbEncryption);
        jsonWriter.writeStringField("smbAccessBasedEnumeration",
            this.smbAccessBasedEnumeration == null ? null : this.smbAccessBasedEnumeration.toString());
        jsonWriter.writeStringField("smbNonBrowsable",
            this.smbNonBrowsable == null ? null : this.smbNonBrowsable.toString());
        jsonWriter.writeBooleanField("smbContinuouslyAvailable", this.smbContinuouslyAvailable);
        jsonWriter.writeNumberField("throughputMibps", this.throughputMibps);
        jsonWriter.writeStringField("encryptionKeySource",
            this.encryptionKeySource == null ? null : this.encryptionKeySource.toString());
        jsonWriter.writeStringField("keyVaultPrivateEndpointResourceId", this.keyVaultPrivateEndpointResourceId);
        jsonWriter.writeBooleanField("ldapEnabled", this.ldapEnabled);
        jsonWriter.writeBooleanField("coolAccess", this.coolAccess);
        jsonWriter.writeNumberField("coolnessPeriod", this.coolnessPeriod);
        jsonWriter.writeStringField("coolAccessRetrievalPolicy",
            this.coolAccessRetrievalPolicy == null ? null : this.coolAccessRetrievalPolicy.toString());
        jsonWriter.writeStringField("unixPermissions", this.unixPermissions);
        jsonWriter.writeStringField("avsDataStore", this.avsDataStore == null ? null : this.avsDataStore.toString());
        jsonWriter.writeBooleanField("isDefaultQuotaEnabled", this.isDefaultQuotaEnabled);
        jsonWriter.writeNumberField("defaultUserQuotaInKiBs", this.defaultUserQuotaInKiBs);
        jsonWriter.writeNumberField("defaultGroupQuotaInKiBs", this.defaultGroupQuotaInKiBs);
        jsonWriter.writeStringField("capacityPoolResourceId", this.capacityPoolResourceId);
        jsonWriter.writeStringField("proximityPlacementGroup", this.proximityPlacementGroup);
        jsonWriter.writeStringField("volumeSpecName", this.volumeSpecName);
        jsonWriter.writeArrayField("placementRules", this.placementRules,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("enableSubvolumes",
            this.enableSubvolumes == null ? null : this.enableSubvolumes.toString());
        jsonWriter.writeBooleanField("isLargeVolume", this.isLargeVolume);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of VolumeProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of VolumeProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the VolumeProperties.
     */
    public static VolumeProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            VolumeProperties deserializedVolumeProperties = new VolumeProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("creationToken".equals(fieldName)) {
                    deserializedVolumeProperties.creationToken = reader.getString();
                } else if ("usageThreshold".equals(fieldName)) {
                    deserializedVolumeProperties.usageThreshold = reader.getLong();
                } else if ("subnetId".equals(fieldName)) {
                    deserializedVolumeProperties.subnetId = reader.getString();
                } else if ("fileSystemId".equals(fieldName)) {
                    deserializedVolumeProperties.fileSystemId = reader.getString();
                } else if ("serviceLevel".equals(fieldName)) {
                    deserializedVolumeProperties.serviceLevel = ServiceLevel.fromString(reader.getString());
                } else if ("exportPolicy".equals(fieldName)) {
                    deserializedVolumeProperties.exportPolicy = VolumePropertiesExportPolicy.fromJson(reader);
                } else if ("protocolTypes".equals(fieldName)) {
                    List<String> protocolTypes = reader.readArray(reader1 -> reader1.getString());
                    deserializedVolumeProperties.protocolTypes = protocolTypes;
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedVolumeProperties.provisioningState = reader.getString();
                } else if ("snapshotId".equals(fieldName)) {
                    deserializedVolumeProperties.snapshotId = reader.getString();
                } else if ("deleteBaseSnapshot".equals(fieldName)) {
                    deserializedVolumeProperties.deleteBaseSnapshot = reader.getNullable(JsonReader::getBoolean);
                } else if ("backupId".equals(fieldName)) {
                    deserializedVolumeProperties.backupId = reader.getString();
                } else if ("baremetalTenantId".equals(fieldName)) {
                    deserializedVolumeProperties.baremetalTenantId = reader.getString();
                } else if ("networkFeatures".equals(fieldName)) {
                    deserializedVolumeProperties.networkFeatures = NetworkFeatures.fromString(reader.getString());
                } else if ("effectiveNetworkFeatures".equals(fieldName)) {
                    deserializedVolumeProperties.effectiveNetworkFeatures
                        = NetworkFeatures.fromString(reader.getString());
                } else if ("networkSiblingSetId".equals(fieldName)) {
                    deserializedVolumeProperties.networkSiblingSetId = reader.getString();
                } else if ("storageToNetworkProximity".equals(fieldName)) {
                    deserializedVolumeProperties.storageToNetworkProximity
                        = VolumeStorageToNetworkProximity.fromString(reader.getString());
                } else if ("mountTargets".equals(fieldName)) {
                    List<MountTargetProperties> mountTargets
                        = reader.readArray(reader1 -> MountTargetProperties.fromJson(reader1));
                    deserializedVolumeProperties.mountTargets = mountTargets;
                } else if ("volumeType".equals(fieldName)) {
                    deserializedVolumeProperties.volumeType = reader.getString();
                } else if ("dataProtection".equals(fieldName)) {
                    deserializedVolumeProperties.dataProtection = VolumePropertiesDataProtection.fromJson(reader);
                } else if ("isRestoring".equals(fieldName)) {
                    deserializedVolumeProperties.isRestoring = reader.getNullable(JsonReader::getBoolean);
                } else if ("snapshotDirectoryVisible".equals(fieldName)) {
                    deserializedVolumeProperties.snapshotDirectoryVisible = reader.getNullable(JsonReader::getBoolean);
                } else if ("kerberosEnabled".equals(fieldName)) {
                    deserializedVolumeProperties.kerberosEnabled = reader.getNullable(JsonReader::getBoolean);
                } else if ("securityStyle".equals(fieldName)) {
                    deserializedVolumeProperties.securityStyle = SecurityStyle.fromString(reader.getString());
                } else if ("smbEncryption".equals(fieldName)) {
                    deserializedVolumeProperties.smbEncryption = reader.getNullable(JsonReader::getBoolean);
                } else if ("smbAccessBasedEnumeration".equals(fieldName)) {
                    deserializedVolumeProperties.smbAccessBasedEnumeration
                        = SmbAccessBasedEnumeration.fromString(reader.getString());
                } else if ("smbNonBrowsable".equals(fieldName)) {
                    deserializedVolumeProperties.smbNonBrowsable = SmbNonBrowsable.fromString(reader.getString());
                } else if ("smbContinuouslyAvailable".equals(fieldName)) {
                    deserializedVolumeProperties.smbContinuouslyAvailable = reader.getNullable(JsonReader::getBoolean);
                } else if ("throughputMibps".equals(fieldName)) {
                    deserializedVolumeProperties.throughputMibps = reader.getNullable(JsonReader::getFloat);
                } else if ("actualThroughputMibps".equals(fieldName)) {
                    deserializedVolumeProperties.actualThroughputMibps = reader.getNullable(JsonReader::getFloat);
                } else if ("encryptionKeySource".equals(fieldName)) {
                    deserializedVolumeProperties.encryptionKeySource
                        = EncryptionKeySource.fromString(reader.getString());
                } else if ("keyVaultPrivateEndpointResourceId".equals(fieldName)) {
                    deserializedVolumeProperties.keyVaultPrivateEndpointResourceId = reader.getString();
                } else if ("ldapEnabled".equals(fieldName)) {
                    deserializedVolumeProperties.ldapEnabled = reader.getNullable(JsonReader::getBoolean);
                } else if ("coolAccess".equals(fieldName)) {
                    deserializedVolumeProperties.coolAccess = reader.getNullable(JsonReader::getBoolean);
                } else if ("coolnessPeriod".equals(fieldName)) {
                    deserializedVolumeProperties.coolnessPeriod = reader.getNullable(JsonReader::getInt);
                } else if ("coolAccessRetrievalPolicy".equals(fieldName)) {
                    deserializedVolumeProperties.coolAccessRetrievalPolicy
                        = CoolAccessRetrievalPolicy.fromString(reader.getString());
                } else if ("unixPermissions".equals(fieldName)) {
                    deserializedVolumeProperties.unixPermissions = reader.getString();
                } else if ("cloneProgress".equals(fieldName)) {
                    deserializedVolumeProperties.cloneProgress = reader.getNullable(JsonReader::getInt);
                } else if ("fileAccessLogs".equals(fieldName)) {
                    deserializedVolumeProperties.fileAccessLogs = FileAccessLogs.fromString(reader.getString());
                } else if ("avsDataStore".equals(fieldName)) {
                    deserializedVolumeProperties.avsDataStore = AvsDataStore.fromString(reader.getString());
                } else if ("dataStoreResourceId".equals(fieldName)) {
                    List<String> dataStoreResourceId = reader.readArray(reader1 -> reader1.getString());
                    deserializedVolumeProperties.dataStoreResourceId = dataStoreResourceId;
                } else if ("isDefaultQuotaEnabled".equals(fieldName)) {
                    deserializedVolumeProperties.isDefaultQuotaEnabled = reader.getNullable(JsonReader::getBoolean);
                } else if ("defaultUserQuotaInKiBs".equals(fieldName)) {
                    deserializedVolumeProperties.defaultUserQuotaInKiBs = reader.getNullable(JsonReader::getLong);
                } else if ("defaultGroupQuotaInKiBs".equals(fieldName)) {
                    deserializedVolumeProperties.defaultGroupQuotaInKiBs = reader.getNullable(JsonReader::getLong);
                } else if ("maximumNumberOfFiles".equals(fieldName)) {
                    deserializedVolumeProperties.maximumNumberOfFiles = reader.getNullable(JsonReader::getLong);
                } else if ("volumeGroupName".equals(fieldName)) {
                    deserializedVolumeProperties.volumeGroupName = reader.getString();
                } else if ("capacityPoolResourceId".equals(fieldName)) {
                    deserializedVolumeProperties.capacityPoolResourceId = reader.getString();
                } else if ("proximityPlacementGroup".equals(fieldName)) {
                    deserializedVolumeProperties.proximityPlacementGroup = reader.getString();
                } else if ("t2Network".equals(fieldName)) {
                    deserializedVolumeProperties.t2Network = reader.getString();
                } else if ("volumeSpecName".equals(fieldName)) {
                    deserializedVolumeProperties.volumeSpecName = reader.getString();
                } else if ("encrypted".equals(fieldName)) {
                    deserializedVolumeProperties.encrypted = reader.getNullable(JsonReader::getBoolean);
                } else if ("placementRules".equals(fieldName)) {
                    List<PlacementKeyValuePairs> placementRules
                        = reader.readArray(reader1 -> PlacementKeyValuePairs.fromJson(reader1));
                    deserializedVolumeProperties.placementRules = placementRules;
                } else if ("enableSubvolumes".equals(fieldName)) {
                    deserializedVolumeProperties.enableSubvolumes = EnableSubvolumes.fromString(reader.getString());
                } else if ("provisionedAvailabilityZone".equals(fieldName)) {
                    deserializedVolumeProperties.provisionedAvailabilityZone = reader.getString();
                } else if ("isLargeVolume".equals(fieldName)) {
                    deserializedVolumeProperties.isLargeVolume = reader.getNullable(JsonReader::getBoolean);
                } else if ("originatingResourceId".equals(fieldName)) {
                    deserializedVolumeProperties.originatingResourceId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedVolumeProperties;
        });
    }
}
