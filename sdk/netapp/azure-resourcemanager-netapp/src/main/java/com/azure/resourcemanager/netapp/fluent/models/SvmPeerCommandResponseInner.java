// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Information about svm peering process.
 */
@Fluent
public final class SvmPeerCommandResponseInner implements JsonSerializable<SvmPeerCommandResponseInner> {
    /*
     * A command that needs to be run on the external ONTAP to accept svm peering. Will only be present if
     * <code>svmPeeringStatus</code> is <code>pending</code>
     */
    private String svmPeeringCommand;

    /**
     * Creates an instance of SvmPeerCommandResponseInner class.
     */
    public SvmPeerCommandResponseInner() {
    }

    /**
     * Get the svmPeeringCommand property: A command that needs to be run on the external ONTAP to accept svm peering.
     * Will only be present if &lt;code&gt;svmPeeringStatus&lt;/code&gt; is &lt;code&gt;pending&lt;/code&gt;.
     * 
     * @return the svmPeeringCommand value.
     */
    public String svmPeeringCommand() {
        return this.svmPeeringCommand;
    }

    /**
     * Set the svmPeeringCommand property: A command that needs to be run on the external ONTAP to accept svm peering.
     * Will only be present if &lt;code&gt;svmPeeringStatus&lt;/code&gt; is &lt;code&gt;pending&lt;/code&gt;.
     * 
     * @param svmPeeringCommand the svmPeeringCommand value to set.
     * @return the SvmPeerCommandResponseInner object itself.
     */
    public SvmPeerCommandResponseInner withSvmPeeringCommand(String svmPeeringCommand) {
        this.svmPeeringCommand = svmPeeringCommand;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("svmPeeringCommand", this.svmPeeringCommand);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SvmPeerCommandResponseInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SvmPeerCommandResponseInner if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SvmPeerCommandResponseInner.
     */
    public static SvmPeerCommandResponseInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SvmPeerCommandResponseInner deserializedSvmPeerCommandResponseInner = new SvmPeerCommandResponseInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("svmPeeringCommand".equals(fieldName)) {
                    deserializedSvmPeerCommandResponseInner.svmPeeringCommand = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSvmPeerCommandResponseInner;
        });
    }
}
