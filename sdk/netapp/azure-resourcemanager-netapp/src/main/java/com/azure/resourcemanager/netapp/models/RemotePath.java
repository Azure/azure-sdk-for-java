// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * The full path to a volume that is to be migrated into ANF. Required for Migration volumes.
 */
@Fluent
public final class RemotePath {
    /*
     * The Path to a Ontap Host
     */
    @JsonProperty(value = "externalHostName", required = true)
    private String externalHostname;

    /*
     * The name of a server on the Ontap Host
     */
    @JsonProperty(value = "serverName", required = true)
    private String serverName;

    /*
     * The name of a volume on the server
     */
    @JsonProperty(value = "volumeName", required = true)
    private String volumeName;

    /**
     * Creates an instance of RemotePath class.
     */
    public RemotePath() {
    }

    /**
     * Get the externalHostname property: The Path to a Ontap Host.
     * 
     * @return the externalHostname value.
     */
    public String externalHostname() {
        return this.externalHostname;
    }

    /**
     * Set the externalHostname property: The Path to a Ontap Host.
     * 
     * @param externalHostname the externalHostname value to set.
     * @return the RemotePath object itself.
     */
    public RemotePath withExternalHostname(String externalHostname) {
        this.externalHostname = externalHostname;
        return this;
    }

    /**
     * Get the serverName property: The name of a server on the Ontap Host.
     * 
     * @return the serverName value.
     */
    public String serverName() {
        return this.serverName;
    }

    /**
     * Set the serverName property: The name of a server on the Ontap Host.
     * 
     * @param serverName the serverName value to set.
     * @return the RemotePath object itself.
     */
    public RemotePath withServerName(String serverName) {
        this.serverName = serverName;
        return this;
    }

    /**
     * Get the volumeName property: The name of a volume on the server.
     * 
     * @return the volumeName value.
     */
    public String volumeName() {
        return this.volumeName;
    }

    /**
     * Set the volumeName property: The name of a volume on the server.
     * 
     * @param volumeName the volumeName value to set.
     * @return the RemotePath object itself.
     */
    public RemotePath withVolumeName(String volumeName) {
        this.volumeName = volumeName;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (externalHostname() == null) {
            throw LOGGER.logExceptionAsError(
                new IllegalArgumentException("Missing required property externalHostname in model RemotePath"));
        }
        if (serverName() == null) {
            throw LOGGER.logExceptionAsError(
                new IllegalArgumentException("Missing required property serverName in model RemotePath"));
        }
        if (volumeName() == null) {
            throw LOGGER.logExceptionAsError(
                new IllegalArgumentException("Missing required property volumeName in model RemotePath"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(RemotePath.class);
}
