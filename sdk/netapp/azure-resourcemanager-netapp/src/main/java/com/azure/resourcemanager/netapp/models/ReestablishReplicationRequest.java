// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Re-establish request object supplied in the body of the operation.
 */
@Fluent
public final class ReestablishReplicationRequest implements JsonSerializable<ReestablishReplicationRequest> {
    /*
     * Resource id of the source volume for the replication
     */
    private String sourceVolumeId;

    /**
     * Creates an instance of ReestablishReplicationRequest class.
     */
    public ReestablishReplicationRequest() {
    }

    /**
     * Get the sourceVolumeId property: Resource id of the source volume for the replication.
     * 
     * @return the sourceVolumeId value.
     */
    public String sourceVolumeId() {
        return this.sourceVolumeId;
    }

    /**
     * Set the sourceVolumeId property: Resource id of the source volume for the replication.
     * 
     * @param sourceVolumeId the sourceVolumeId value to set.
     * @return the ReestablishReplicationRequest object itself.
     */
    public ReestablishReplicationRequest withSourceVolumeId(String sourceVolumeId) {
        this.sourceVolumeId = sourceVolumeId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("sourceVolumeId", this.sourceVolumeId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ReestablishReplicationRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ReestablishReplicationRequest if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ReestablishReplicationRequest.
     */
    public static ReestablishReplicationRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ReestablishReplicationRequest deserializedReestablishReplicationRequest
                = new ReestablishReplicationRequest();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("sourceVolumeId".equals(fieldName)) {
                    deserializedReestablishReplicationRequest.sourceVolumeId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedReestablishReplicationRequest;
        });
    }
}
