// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Volume details using the backup policy.
 */
@Fluent
public final class VolumeBackups implements JsonSerializable<VolumeBackups> {
    /*
     * Volume name
     */
    private String volumeName;

    /*
     * ResourceId used to identify the Volume
     */
    private String volumeResourceId;

    /*
     * Total count of backups for volume
     */
    private Integer backupsCount;

    /*
     * Policy enabled
     */
    private Boolean policyEnabled;

    /**
     * Creates an instance of VolumeBackups class.
     */
    public VolumeBackups() {
    }

    /**
     * Get the volumeName property: Volume name.
     * 
     * @return the volumeName value.
     */
    public String volumeName() {
        return this.volumeName;
    }

    /**
     * Set the volumeName property: Volume name.
     * 
     * @param volumeName the volumeName value to set.
     * @return the VolumeBackups object itself.
     */
    public VolumeBackups withVolumeName(String volumeName) {
        this.volumeName = volumeName;
        return this;
    }

    /**
     * Get the volumeResourceId property: ResourceId used to identify the Volume.
     * 
     * @return the volumeResourceId value.
     */
    public String volumeResourceId() {
        return this.volumeResourceId;
    }

    /**
     * Set the volumeResourceId property: ResourceId used to identify the Volume.
     * 
     * @param volumeResourceId the volumeResourceId value to set.
     * @return the VolumeBackups object itself.
     */
    public VolumeBackups withVolumeResourceId(String volumeResourceId) {
        this.volumeResourceId = volumeResourceId;
        return this;
    }

    /**
     * Get the backupsCount property: Total count of backups for volume.
     * 
     * @return the backupsCount value.
     */
    public Integer backupsCount() {
        return this.backupsCount;
    }

    /**
     * Set the backupsCount property: Total count of backups for volume.
     * 
     * @param backupsCount the backupsCount value to set.
     * @return the VolumeBackups object itself.
     */
    public VolumeBackups withBackupsCount(Integer backupsCount) {
        this.backupsCount = backupsCount;
        return this;
    }

    /**
     * Get the policyEnabled property: Policy enabled.
     * 
     * @return the policyEnabled value.
     */
    public Boolean policyEnabled() {
        return this.policyEnabled;
    }

    /**
     * Set the policyEnabled property: Policy enabled.
     * 
     * @param policyEnabled the policyEnabled value to set.
     * @return the VolumeBackups object itself.
     */
    public VolumeBackups withPolicyEnabled(Boolean policyEnabled) {
        this.policyEnabled = policyEnabled;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("volumeName", this.volumeName);
        jsonWriter.writeStringField("volumeResourceId", this.volumeResourceId);
        jsonWriter.writeNumberField("backupsCount", this.backupsCount);
        jsonWriter.writeBooleanField("policyEnabled", this.policyEnabled);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of VolumeBackups from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of VolumeBackups if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the VolumeBackups.
     */
    public static VolumeBackups fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            VolumeBackups deserializedVolumeBackups = new VolumeBackups();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("volumeName".equals(fieldName)) {
                    deserializedVolumeBackups.volumeName = reader.getString();
                } else if ("volumeResourceId".equals(fieldName)) {
                    deserializedVolumeBackups.volumeResourceId = reader.getString();
                } else if ("backupsCount".equals(fieldName)) {
                    deserializedVolumeBackups.backupsCount = reader.getNullable(JsonReader::getInt);
                } else if ("policyEnabled".equals(fieldName)) {
                    deserializedVolumeBackups.policyEnabled = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedVolumeBackups;
        });
    }
}
