// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.netapp.models.EncryptionType;
import com.azure.resourcemanager.netapp.models.QosType;
import com.azure.resourcemanager.netapp.models.ServiceLevel;
import java.io.IOException;

/**
 * Pool properties.
 */
@Fluent
public final class PoolProperties implements JsonSerializable<PoolProperties> {
    /*
     * UUID v4 used to identify the Pool
     */
    private String poolId;

    /*
     * Provisioned size of the pool (in bytes). Allowed values are in 1TiB chunks (value must be multiple of
     * 1099511627776).
     */
    private long size;

    /*
     * The service level of the file system
     */
    private ServiceLevel serviceLevel;

    /*
     * Azure lifecycle management
     */
    private String provisioningState;

    /*
     * Total throughput of pool in MiB/s
     */
    private Float totalThroughputMibps;

    /*
     * Utilized throughput of pool in MiB/s
     */
    private Float utilizedThroughputMibps;

    /*
     * The qos type of the pool
     */
    private QosType qosType;

    /*
     * If enabled (true) the pool can contain cool Access enabled volumes.
     */
    private Boolean coolAccess;

    /*
     * Encryption type of the capacity pool, set encryption type for data at rest for this pool and all volumes in it.
     * This value can only be set when creating new pool.
     */
    private EncryptionType encryptionType;

    /**
     * Creates an instance of PoolProperties class.
     */
    public PoolProperties() {
    }

    /**
     * Get the poolId property: UUID v4 used to identify the Pool.
     * 
     * @return the poolId value.
     */
    public String poolId() {
        return this.poolId;
    }

    /**
     * Get the size property: Provisioned size of the pool (in bytes). Allowed values are in 1TiB chunks (value must be
     * multiple of 1099511627776).
     * 
     * @return the size value.
     */
    public long size() {
        return this.size;
    }

    /**
     * Set the size property: Provisioned size of the pool (in bytes). Allowed values are in 1TiB chunks (value must be
     * multiple of 1099511627776).
     * 
     * @param size the size value to set.
     * @return the PoolProperties object itself.
     */
    public PoolProperties withSize(long size) {
        this.size = size;
        return this;
    }

    /**
     * Get the serviceLevel property: The service level of the file system.
     * 
     * @return the serviceLevel value.
     */
    public ServiceLevel serviceLevel() {
        return this.serviceLevel;
    }

    /**
     * Set the serviceLevel property: The service level of the file system.
     * 
     * @param serviceLevel the serviceLevel value to set.
     * @return the PoolProperties object itself.
     */
    public PoolProperties withServiceLevel(ServiceLevel serviceLevel) {
        this.serviceLevel = serviceLevel;
        return this;
    }

    /**
     * Get the provisioningState property: Azure lifecycle management.
     * 
     * @return the provisioningState value.
     */
    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the totalThroughputMibps property: Total throughput of pool in MiB/s.
     * 
     * @return the totalThroughputMibps value.
     */
    public Float totalThroughputMibps() {
        return this.totalThroughputMibps;
    }

    /**
     * Get the utilizedThroughputMibps property: Utilized throughput of pool in MiB/s.
     * 
     * @return the utilizedThroughputMibps value.
     */
    public Float utilizedThroughputMibps() {
        return this.utilizedThroughputMibps;
    }

    /**
     * Get the qosType property: The qos type of the pool.
     * 
     * @return the qosType value.
     */
    public QosType qosType() {
        return this.qosType;
    }

    /**
     * Set the qosType property: The qos type of the pool.
     * 
     * @param qosType the qosType value to set.
     * @return the PoolProperties object itself.
     */
    public PoolProperties withQosType(QosType qosType) {
        this.qosType = qosType;
        return this;
    }

    /**
     * Get the coolAccess property: If enabled (true) the pool can contain cool Access enabled volumes.
     * 
     * @return the coolAccess value.
     */
    public Boolean coolAccess() {
        return this.coolAccess;
    }

    /**
     * Set the coolAccess property: If enabled (true) the pool can contain cool Access enabled volumes.
     * 
     * @param coolAccess the coolAccess value to set.
     * @return the PoolProperties object itself.
     */
    public PoolProperties withCoolAccess(Boolean coolAccess) {
        this.coolAccess = coolAccess;
        return this;
    }

    /**
     * Get the encryptionType property: Encryption type of the capacity pool, set encryption type for data at rest for
     * this pool and all volumes in it. This value can only be set when creating new pool.
     * 
     * @return the encryptionType value.
     */
    public EncryptionType encryptionType() {
        return this.encryptionType;
    }

    /**
     * Set the encryptionType property: Encryption type of the capacity pool, set encryption type for data at rest for
     * this pool and all volumes in it. This value can only be set when creating new pool.
     * 
     * @param encryptionType the encryptionType value to set.
     * @return the PoolProperties object itself.
     */
    public PoolProperties withEncryptionType(EncryptionType encryptionType) {
        this.encryptionType = encryptionType;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (serviceLevel() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property serviceLevel in model PoolProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(PoolProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeLongField("size", this.size);
        jsonWriter.writeStringField("serviceLevel", this.serviceLevel == null ? null : this.serviceLevel.toString());
        jsonWriter.writeStringField("qosType", this.qosType == null ? null : this.qosType.toString());
        jsonWriter.writeBooleanField("coolAccess", this.coolAccess);
        jsonWriter.writeStringField("encryptionType",
            this.encryptionType == null ? null : this.encryptionType.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PoolProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PoolProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the PoolProperties.
     */
    public static PoolProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PoolProperties deserializedPoolProperties = new PoolProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("size".equals(fieldName)) {
                    deserializedPoolProperties.size = reader.getLong();
                } else if ("serviceLevel".equals(fieldName)) {
                    deserializedPoolProperties.serviceLevel = ServiceLevel.fromString(reader.getString());
                } else if ("poolId".equals(fieldName)) {
                    deserializedPoolProperties.poolId = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedPoolProperties.provisioningState = reader.getString();
                } else if ("totalThroughputMibps".equals(fieldName)) {
                    deserializedPoolProperties.totalThroughputMibps = reader.getNullable(JsonReader::getFloat);
                } else if ("utilizedThroughputMibps".equals(fieldName)) {
                    deserializedPoolProperties.utilizedThroughputMibps = reader.getNullable(JsonReader::getFloat);
                } else if ("qosType".equals(fieldName)) {
                    deserializedPoolProperties.qosType = QosType.fromString(reader.getString());
                } else if ("coolAccess".equals(fieldName)) {
                    deserializedPoolProperties.coolAccess = reader.getNullable(JsonReader::getBoolean);
                } else if ("encryptionType".equals(fieldName)) {
                    deserializedPoolProperties.encryptionType = EncryptionType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPoolProperties;
        });
    }
}
