// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.netapp.models.QosType;
import java.io.IOException;

/**
 * Patchable pool properties.
 */
@Fluent
public final class PoolPatchProperties implements JsonSerializable<PoolPatchProperties> {
    /*
     * Provisioned size of the pool (in bytes). Allowed values are in 1TiB chunks (value must be multiple of
     * 1099511627776).
     */
    private Long size;

    /*
     * The qos type of the pool
     */
    private QosType qosType;

    /*
     * If enabled (true) the pool can contain cool Access enabled volumes.
     */
    private Boolean coolAccess;

    /*
     * Maximum throughput in MiB/s that can be achieved by this pool and this will be accepted as input only for manual
     * qosType pool with Flexible service level
     */
    private Float customThroughputMibps;

    /**
     * Creates an instance of PoolPatchProperties class.
     */
    public PoolPatchProperties() {
    }

    /**
     * Get the size property: Provisioned size of the pool (in bytes). Allowed values are in 1TiB chunks (value must be
     * multiple of 1099511627776).
     * 
     * @return the size value.
     */
    public Long size() {
        return this.size;
    }

    /**
     * Set the size property: Provisioned size of the pool (in bytes). Allowed values are in 1TiB chunks (value must be
     * multiple of 1099511627776).
     * 
     * @param size the size value to set.
     * @return the PoolPatchProperties object itself.
     */
    public PoolPatchProperties withSize(Long size) {
        this.size = size;
        return this;
    }

    /**
     * Get the qosType property: The qos type of the pool.
     * 
     * @return the qosType value.
     */
    public QosType qosType() {
        return this.qosType;
    }

    /**
     * Set the qosType property: The qos type of the pool.
     * 
     * @param qosType the qosType value to set.
     * @return the PoolPatchProperties object itself.
     */
    public PoolPatchProperties withQosType(QosType qosType) {
        this.qosType = qosType;
        return this;
    }

    /**
     * Get the coolAccess property: If enabled (true) the pool can contain cool Access enabled volumes.
     * 
     * @return the coolAccess value.
     */
    public Boolean coolAccess() {
        return this.coolAccess;
    }

    /**
     * Set the coolAccess property: If enabled (true) the pool can contain cool Access enabled volumes.
     * 
     * @param coolAccess the coolAccess value to set.
     * @return the PoolPatchProperties object itself.
     */
    public PoolPatchProperties withCoolAccess(Boolean coolAccess) {
        this.coolAccess = coolAccess;
        return this;
    }

    /**
     * Get the customThroughputMibps property: Maximum throughput in MiB/s that can be achieved by this pool and this
     * will be accepted as input only for manual qosType pool with Flexible service level.
     * 
     * @return the customThroughputMibps value.
     */
    public Float customThroughputMibps() {
        return this.customThroughputMibps;
    }

    /**
     * Set the customThroughputMibps property: Maximum throughput in MiB/s that can be achieved by this pool and this
     * will be accepted as input only for manual qosType pool with Flexible service level.
     * 
     * @param customThroughputMibps the customThroughputMibps value to set.
     * @return the PoolPatchProperties object itself.
     */
    public PoolPatchProperties withCustomThroughputMibps(Float customThroughputMibps) {
        this.customThroughputMibps = customThroughputMibps;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("size", this.size);
        jsonWriter.writeStringField("qosType", this.qosType == null ? null : this.qosType.toString());
        jsonWriter.writeBooleanField("coolAccess", this.coolAccess);
        jsonWriter.writeNumberField("customThroughputMibps", this.customThroughputMibps);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PoolPatchProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PoolPatchProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the PoolPatchProperties.
     */
    public static PoolPatchProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PoolPatchProperties deserializedPoolPatchProperties = new PoolPatchProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("size".equals(fieldName)) {
                    deserializedPoolPatchProperties.size = reader.getNullable(JsonReader::getLong);
                } else if ("qosType".equals(fieldName)) {
                    deserializedPoolPatchProperties.qosType = QosType.fromString(reader.getString());
                } else if ("coolAccess".equals(fieldName)) {
                    deserializedPoolPatchProperties.coolAccess = reader.getNullable(JsonReader::getBoolean);
                } else if ("customThroughputMibps".equals(fieldName)) {
                    deserializedPoolPatchProperties.customThroughputMibps = reader.getNullable(JsonReader::getFloat);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPoolPatchProperties;
        });
    }
}
