// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.netapp.fluent.models.BackupPolicyInner;
import com.azure.resourcemanager.netapp.models.BackupPolicyPatch;

/** An instance of this class provides access to all the operations defined in BackupPoliciesClient. */
public interface BackupPoliciesClient {
    /**
     * List backup policies for Netapp Account.
     *
     * @param resourceGroupName The name of the resource group.
     * @param accountName The name of the NetApp account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of Backup Policies.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<BackupPolicyInner> list(String resourceGroupName, String accountName);

    /**
     * List backup policies for Netapp Account.
     *
     * @param resourceGroupName The name of the resource group.
     * @param accountName The name of the NetApp account.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of Backup Policies.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<BackupPolicyInner> list(String resourceGroupName, String accountName, Context context);

    /**
     * Get a particular backup Policy.
     *
     * @param resourceGroupName The name of the resource group.
     * @param accountName The name of the NetApp account.
     * @param backupPolicyName Backup policy Name which uniquely identify backup policy.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a particular backup Policy.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    BackupPolicyInner get(String resourceGroupName, String accountName, String backupPolicyName);

    /**
     * Get a particular backup Policy.
     *
     * @param resourceGroupName The name of the resource group.
     * @param accountName The name of the NetApp account.
     * @param backupPolicyName Backup policy Name which uniquely identify backup policy.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a particular backup Policy.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<BackupPolicyInner> getWithResponse(
        String resourceGroupName, String accountName, String backupPolicyName, Context context);

    /**
     * Create a backup policy for Netapp Account.
     *
     * @param resourceGroupName The name of the resource group.
     * @param accountName The name of the NetApp account.
     * @param backupPolicyName Backup policy Name which uniquely identify backup policy.
     * @param body Backup policy object supplied in the body of the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return backup policy information.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SyncPoller<PollResult<BackupPolicyInner>, BackupPolicyInner> beginCreate(
        String resourceGroupName, String accountName, String backupPolicyName, BackupPolicyInner body);

    /**
     * Create a backup policy for Netapp Account.
     *
     * @param resourceGroupName The name of the resource group.
     * @param accountName The name of the NetApp account.
     * @param backupPolicyName Backup policy Name which uniquely identify backup policy.
     * @param body Backup policy object supplied in the body of the operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return backup policy information.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SyncPoller<PollResult<BackupPolicyInner>, BackupPolicyInner> beginCreate(
        String resourceGroupName, String accountName, String backupPolicyName, BackupPolicyInner body, Context context);

    /**
     * Create a backup policy for Netapp Account.
     *
     * @param resourceGroupName The name of the resource group.
     * @param accountName The name of the NetApp account.
     * @param backupPolicyName Backup policy Name which uniquely identify backup policy.
     * @param body Backup policy object supplied in the body of the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return backup policy information.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    BackupPolicyInner create(
        String resourceGroupName, String accountName, String backupPolicyName, BackupPolicyInner body);

    /**
     * Create a backup policy for Netapp Account.
     *
     * @param resourceGroupName The name of the resource group.
     * @param accountName The name of the NetApp account.
     * @param backupPolicyName Backup policy Name which uniquely identify backup policy.
     * @param body Backup policy object supplied in the body of the operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return backup policy information.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    BackupPolicyInner create(
        String resourceGroupName, String accountName, String backupPolicyName, BackupPolicyInner body, Context context);

    /**
     * Patch a backup policy for Netapp Account.
     *
     * @param resourceGroupName The name of the resource group.
     * @param accountName The name of the NetApp account.
     * @param backupPolicyName Backup policy Name which uniquely identify backup policy.
     * @param body Backup policy object supplied in the body of the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return backup policy information.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    BackupPolicyInner update(
        String resourceGroupName, String accountName, String backupPolicyName, BackupPolicyPatch body);

    /**
     * Patch a backup policy for Netapp Account.
     *
     * @param resourceGroupName The name of the resource group.
     * @param accountName The name of the NetApp account.
     * @param backupPolicyName Backup policy Name which uniquely identify backup policy.
     * @param body Backup policy object supplied in the body of the operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return backup policy information.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<BackupPolicyInner> updateWithResponse(
        String resourceGroupName, String accountName, String backupPolicyName, BackupPolicyPatch body, Context context);

    /**
     * Delete backup policy.
     *
     * @param resourceGroupName The name of the resource group.
     * @param accountName The name of the NetApp account.
     * @param backupPolicyName Backup policy Name which uniquely identify backup policy.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SyncPoller<PollResult<Void>, Void> beginDelete(
        String resourceGroupName, String accountName, String backupPolicyName);

    /**
     * Delete backup policy.
     *
     * @param resourceGroupName The name of the resource group.
     * @param accountName The name of the NetApp account.
     * @param backupPolicyName Backup policy Name which uniquely identify backup policy.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SyncPoller<PollResult<Void>, Void> beginDelete(
        String resourceGroupName, String accountName, String backupPolicyName, Context context);

    /**
     * Delete backup policy.
     *
     * @param resourceGroupName The name of the resource group.
     * @param accountName The name of the NetApp account.
     * @param backupPolicyName Backup policy Name which uniquely identify backup policy.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String accountName, String backupPolicyName);

    /**
     * Delete backup policy.
     *
     * @param resourceGroupName The name of the resource group.
     * @param accountName The name of the NetApp account.
     * @param backupPolicyName Backup policy Name which uniquely identify backup policy.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String accountName, String backupPolicyName, Context context);
}
