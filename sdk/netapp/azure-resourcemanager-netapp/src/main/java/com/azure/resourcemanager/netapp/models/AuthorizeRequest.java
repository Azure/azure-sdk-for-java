// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Authorize request.
 */
@Fluent
public final class AuthorizeRequest implements JsonSerializable<AuthorizeRequest> {
    /*
     * Resource id of the remote volume
     */
    private String remoteVolumeResourceId;

    /**
     * Creates an instance of AuthorizeRequest class.
     */
    public AuthorizeRequest() {
    }

    /**
     * Get the remoteVolumeResourceId property: Resource id of the remote volume.
     * 
     * @return the remoteVolumeResourceId value.
     */
    public String remoteVolumeResourceId() {
        return this.remoteVolumeResourceId;
    }

    /**
     * Set the remoteVolumeResourceId property: Resource id of the remote volume.
     * 
     * @param remoteVolumeResourceId the remoteVolumeResourceId value to set.
     * @return the AuthorizeRequest object itself.
     */
    public AuthorizeRequest withRemoteVolumeResourceId(String remoteVolumeResourceId) {
        this.remoteVolumeResourceId = remoteVolumeResourceId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("remoteVolumeResourceId", this.remoteVolumeResourceId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AuthorizeRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AuthorizeRequest if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the AuthorizeRequest.
     */
    public static AuthorizeRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AuthorizeRequest deserializedAuthorizeRequest = new AuthorizeRequest();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("remoteVolumeResourceId".equals(fieldName)) {
                    deserializedAuthorizeRequest.remoteVolumeResourceId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAuthorizeRequest;
        });
    }
}
