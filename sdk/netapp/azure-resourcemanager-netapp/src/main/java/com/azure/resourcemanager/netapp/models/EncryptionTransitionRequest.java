// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Encryption transition request.
 */
@Fluent
public final class EncryptionTransitionRequest implements JsonSerializable<EncryptionTransitionRequest> {
    /*
     * Identifier for the virtual network
     */
    private String virtualNetworkId;

    /*
     * Identifier of the private endpoint to reach the Azure Key Vault
     */
    private String privateEndpointId;

    /**
     * Creates an instance of EncryptionTransitionRequest class.
     */
    public EncryptionTransitionRequest() {
    }

    /**
     * Get the virtualNetworkId property: Identifier for the virtual network.
     * 
     * @return the virtualNetworkId value.
     */
    public String virtualNetworkId() {
        return this.virtualNetworkId;
    }

    /**
     * Set the virtualNetworkId property: Identifier for the virtual network.
     * 
     * @param virtualNetworkId the virtualNetworkId value to set.
     * @return the EncryptionTransitionRequest object itself.
     */
    public EncryptionTransitionRequest withVirtualNetworkId(String virtualNetworkId) {
        this.virtualNetworkId = virtualNetworkId;
        return this;
    }

    /**
     * Get the privateEndpointId property: Identifier of the private endpoint to reach the Azure Key Vault.
     * 
     * @return the privateEndpointId value.
     */
    public String privateEndpointId() {
        return this.privateEndpointId;
    }

    /**
     * Set the privateEndpointId property: Identifier of the private endpoint to reach the Azure Key Vault.
     * 
     * @param privateEndpointId the privateEndpointId value to set.
     * @return the EncryptionTransitionRequest object itself.
     */
    public EncryptionTransitionRequest withPrivateEndpointId(String privateEndpointId) {
        this.privateEndpointId = privateEndpointId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (virtualNetworkId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property virtualNetworkId in model EncryptionTransitionRequest"));
        }
        if (privateEndpointId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property privateEndpointId in model EncryptionTransitionRequest"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(EncryptionTransitionRequest.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("virtualNetworkId", this.virtualNetworkId);
        jsonWriter.writeStringField("privateEndpointId", this.privateEndpointId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EncryptionTransitionRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of EncryptionTransitionRequest if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the EncryptionTransitionRequest.
     */
    public static EncryptionTransitionRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            EncryptionTransitionRequest deserializedEncryptionTransitionRequest = new EncryptionTransitionRequest();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("virtualNetworkId".equals(fieldName)) {
                    deserializedEncryptionTransitionRequest.virtualNetworkId = reader.getString();
                } else if ("privateEndpointId".equals(fieldName)) {
                    deserializedEncryptionTransitionRequest.privateEndpointId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedEncryptionTransitionRequest;
        });
    }
}
