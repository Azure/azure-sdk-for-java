// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.netapp.models.ProvisioningState;
import com.azure.resourcemanager.netapp.models.Type;
import java.io.IOException;

/**
 * Volume Quota Rule properties.
 */
@Fluent
public final class VolumeQuotaRulesProperties implements JsonSerializable<VolumeQuotaRulesProperties> {
    /*
     * Gets the status of the VolumeQuotaRule at the time the operation was called.
     */
    private ProvisioningState provisioningState;

    /*
     * Size of quota
     */
    private Long quotaSizeInKiBs;

    /*
     * Type of quota
     */
    private Type quotaType;

    /*
     * UserID/GroupID/SID based on the quota target type. UserID and groupID can be found by running ‘id’ or ‘getent’
     * command for the user or group and SID can be found by running <wmic useraccount where name='user-name' get sid>
     */
    private String quotaTarget;

    /**
     * Creates an instance of VolumeQuotaRulesProperties class.
     */
    public VolumeQuotaRulesProperties() {
    }

    /**
     * Get the provisioningState property: Gets the status of the VolumeQuotaRule at the time the operation was called.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the quotaSizeInKiBs property: Size of quota.
     * 
     * @return the quotaSizeInKiBs value.
     */
    public Long quotaSizeInKiBs() {
        return this.quotaSizeInKiBs;
    }

    /**
     * Set the quotaSizeInKiBs property: Size of quota.
     * 
     * @param quotaSizeInKiBs the quotaSizeInKiBs value to set.
     * @return the VolumeQuotaRulesProperties object itself.
     */
    public VolumeQuotaRulesProperties withQuotaSizeInKiBs(Long quotaSizeInKiBs) {
        this.quotaSizeInKiBs = quotaSizeInKiBs;
        return this;
    }

    /**
     * Get the quotaType property: Type of quota.
     * 
     * @return the quotaType value.
     */
    public Type quotaType() {
        return this.quotaType;
    }

    /**
     * Set the quotaType property: Type of quota.
     * 
     * @param quotaType the quotaType value to set.
     * @return the VolumeQuotaRulesProperties object itself.
     */
    public VolumeQuotaRulesProperties withQuotaType(Type quotaType) {
        this.quotaType = quotaType;
        return this;
    }

    /**
     * Get the quotaTarget property: UserID/GroupID/SID based on the quota target type. UserID and groupID can be found
     * by running ‘id’ or ‘getent’ command for the user or group and SID can be found by running &lt;wmic useraccount
     * where name='user-name' get sid&gt;.
     * 
     * @return the quotaTarget value.
     */
    public String quotaTarget() {
        return this.quotaTarget;
    }

    /**
     * Set the quotaTarget property: UserID/GroupID/SID based on the quota target type. UserID and groupID can be found
     * by running ‘id’ or ‘getent’ command for the user or group and SID can be found by running &lt;wmic useraccount
     * where name='user-name' get sid&gt;.
     * 
     * @param quotaTarget the quotaTarget value to set.
     * @return the VolumeQuotaRulesProperties object itself.
     */
    public VolumeQuotaRulesProperties withQuotaTarget(String quotaTarget) {
        this.quotaTarget = quotaTarget;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("quotaSizeInKiBs", this.quotaSizeInKiBs);
        jsonWriter.writeStringField("quotaType", this.quotaType == null ? null : this.quotaType.toString());
        jsonWriter.writeStringField("quotaTarget", this.quotaTarget);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of VolumeQuotaRulesProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of VolumeQuotaRulesProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the VolumeQuotaRulesProperties.
     */
    public static VolumeQuotaRulesProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            VolumeQuotaRulesProperties deserializedVolumeQuotaRulesProperties = new VolumeQuotaRulesProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("provisioningState".equals(fieldName)) {
                    deserializedVolumeQuotaRulesProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else if ("quotaSizeInKiBs".equals(fieldName)) {
                    deserializedVolumeQuotaRulesProperties.quotaSizeInKiBs = reader.getNullable(JsonReader::getLong);
                } else if ("quotaType".equals(fieldName)) {
                    deserializedVolumeQuotaRulesProperties.quotaType = Type.fromString(reader.getString());
                } else if ("quotaTarget".equals(fieldName)) {
                    deserializedVolumeQuotaRulesProperties.quotaTarget = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedVolumeQuotaRulesProperties;
        });
    }
}
