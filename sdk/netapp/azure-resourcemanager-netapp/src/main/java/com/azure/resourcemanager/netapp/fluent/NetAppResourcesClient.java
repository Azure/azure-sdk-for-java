// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;
import com.azure.resourcemanager.netapp.fluent.models.CheckAvailabilityResponseInner;
import com.azure.resourcemanager.netapp.fluent.models.RegionInfoInner;
import com.azure.resourcemanager.netapp.models.FilePathAvailabilityRequest;
import com.azure.resourcemanager.netapp.models.QuotaAvailabilityRequest;
import com.azure.resourcemanager.netapp.models.ResourceNameAvailabilityRequest;

/** An instance of this class provides access to all the operations defined in NetAppResourcesClient. */
public interface NetAppResourcesClient {
    /**
     * Check resource name availability
     *
     * <p>Check if a resource name is available.
     *
     * @param location The name of Azure region.
     * @param body Name availability request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information regarding availability of a resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<CheckAvailabilityResponseInner> checkNameAvailabilityWithResponse(
        String location, ResourceNameAvailabilityRequest body, Context context);

    /**
     * Check resource name availability
     *
     * <p>Check if a resource name is available.
     *
     * @param location The name of Azure region.
     * @param body Name availability request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information regarding availability of a resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    CheckAvailabilityResponseInner checkNameAvailability(String location, ResourceNameAvailabilityRequest body);

    /**
     * Check file path availability
     *
     * <p>Check if a file path is available.
     *
     * @param location The name of Azure region.
     * @param body File path availability request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information regarding availability of a resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<CheckAvailabilityResponseInner> checkFilePathAvailabilityWithResponse(
        String location, FilePathAvailabilityRequest body, Context context);

    /**
     * Check file path availability
     *
     * <p>Check if a file path is available.
     *
     * @param location The name of Azure region.
     * @param body File path availability request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information regarding availability of a resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    CheckAvailabilityResponseInner checkFilePathAvailability(String location, FilePathAvailabilityRequest body);

    /**
     * Check quota availability
     *
     * <p>Check if a quota is available.
     *
     * @param location The name of Azure region.
     * @param body Quota availability request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information regarding availability of a resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<CheckAvailabilityResponseInner> checkQuotaAvailabilityWithResponse(
        String location, QuotaAvailabilityRequest body, Context context);

    /**
     * Check quota availability
     *
     * <p>Check if a quota is available.
     *
     * @param location The name of Azure region.
     * @param body Quota availability request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information regarding availability of a resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    CheckAvailabilityResponseInner checkQuotaAvailability(String location, QuotaAvailabilityRequest body);

    /**
     * Describes region specific information.
     *
     * <p>Provides storage to network proximity and logical zone mapping information.
     *
     * @param location The name of Azure region.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return provides region specific information along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<RegionInfoInner> queryRegionInfoWithResponse(String location, Context context);

    /**
     * Describes region specific information.
     *
     * <p>Provides storage to network proximity and logical zone mapping information.
     *
     * @param location The name of Azure region.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return provides region specific information.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    RegionInfoInner queryRegionInfo(String location);
}
