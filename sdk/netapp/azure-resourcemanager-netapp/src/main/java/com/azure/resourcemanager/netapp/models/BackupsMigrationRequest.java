// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Migrate Backups Request.
 */
@Fluent
public final class BackupsMigrationRequest implements JsonSerializable<BackupsMigrationRequest> {
    /*
     * The ResourceId of the Backup Vault
     */
    private String backupVaultId;

    /**
     * Creates an instance of BackupsMigrationRequest class.
     */
    public BackupsMigrationRequest() {
    }

    /**
     * Get the backupVaultId property: The ResourceId of the Backup Vault.
     * 
     * @return the backupVaultId value.
     */
    public String backupVaultId() {
        return this.backupVaultId;
    }

    /**
     * Set the backupVaultId property: The ResourceId of the Backup Vault.
     * 
     * @param backupVaultId the backupVaultId value to set.
     * @return the BackupsMigrationRequest object itself.
     */
    public BackupsMigrationRequest withBackupVaultId(String backupVaultId) {
        this.backupVaultId = backupVaultId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (backupVaultId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property backupVaultId in model BackupsMigrationRequest"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(BackupsMigrationRequest.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("backupVaultId", this.backupVaultId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BackupsMigrationRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of BackupsMigrationRequest if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the BackupsMigrationRequest.
     */
    public static BackupsMigrationRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BackupsMigrationRequest deserializedBackupsMigrationRequest = new BackupsMigrationRequest();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("backupVaultId".equals(fieldName)) {
                    deserializedBackupsMigrationRequest.backupVaultId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedBackupsMigrationRequest;
        });
    }
}
