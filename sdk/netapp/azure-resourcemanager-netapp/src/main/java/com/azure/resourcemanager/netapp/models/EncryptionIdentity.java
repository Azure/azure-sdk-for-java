// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Identity used to authenticate with key vault.
 */
@Fluent
public final class EncryptionIdentity implements JsonSerializable<EncryptionIdentity> {
    /*
     * The principal ID (object ID) of the identity used to authenticate with key vault. Read-only.
     */
    private String principalId;

    /*
     * The ARM resource identifier of the user assigned identity used to authenticate with key vault. Applicable if
     * identity.type has 'UserAssigned'. It should match key of identity.userAssignedIdentities.
     */
    private String userAssignedIdentity;

    /*
     * ClientId of the multi-tenant AAD Application. Used to access cross-tenant KeyVaults.
     */
    private String federatedClientId;

    /**
     * Creates an instance of EncryptionIdentity class.
     */
    public EncryptionIdentity() {
    }

    /**
     * Get the principalId property: The principal ID (object ID) of the identity used to authenticate with key vault.
     * Read-only.
     * 
     * @return the principalId value.
     */
    public String principalId() {
        return this.principalId;
    }

    /**
     * Get the userAssignedIdentity property: The ARM resource identifier of the user assigned identity used to
     * authenticate with key vault. Applicable if identity.type has 'UserAssigned'. It should match key of
     * identity.userAssignedIdentities.
     * 
     * @return the userAssignedIdentity value.
     */
    public String userAssignedIdentity() {
        return this.userAssignedIdentity;
    }

    /**
     * Set the userAssignedIdentity property: The ARM resource identifier of the user assigned identity used to
     * authenticate with key vault. Applicable if identity.type has 'UserAssigned'. It should match key of
     * identity.userAssignedIdentities.
     * 
     * @param userAssignedIdentity the userAssignedIdentity value to set.
     * @return the EncryptionIdentity object itself.
     */
    public EncryptionIdentity withUserAssignedIdentity(String userAssignedIdentity) {
        this.userAssignedIdentity = userAssignedIdentity;
        return this;
    }

    /**
     * Get the federatedClientId property: ClientId of the multi-tenant AAD Application. Used to access cross-tenant
     * KeyVaults.
     * 
     * @return the federatedClientId value.
     */
    public String federatedClientId() {
        return this.federatedClientId;
    }

    /**
     * Set the federatedClientId property: ClientId of the multi-tenant AAD Application. Used to access cross-tenant
     * KeyVaults.
     * 
     * @param federatedClientId the federatedClientId value to set.
     * @return the EncryptionIdentity object itself.
     */
    public EncryptionIdentity withFederatedClientId(String federatedClientId) {
        this.federatedClientId = federatedClientId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("userAssignedIdentity", this.userAssignedIdentity);
        jsonWriter.writeStringField("federatedClientId", this.federatedClientId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EncryptionIdentity from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of EncryptionIdentity if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the EncryptionIdentity.
     */
    public static EncryptionIdentity fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            EncryptionIdentity deserializedEncryptionIdentity = new EncryptionIdentity();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("principalId".equals(fieldName)) {
                    deserializedEncryptionIdentity.principalId = reader.getString();
                } else if ("userAssignedIdentity".equals(fieldName)) {
                    deserializedEncryptionIdentity.userAssignedIdentity = reader.getString();
                } else if ("federatedClientId".equals(fieldName)) {
                    deserializedEncryptionIdentity.federatedClientId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedEncryptionIdentity;
        });
    }
}
