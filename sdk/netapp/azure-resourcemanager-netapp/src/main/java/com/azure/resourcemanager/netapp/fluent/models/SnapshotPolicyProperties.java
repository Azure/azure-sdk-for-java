// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.netapp.models.DailySchedule;
import com.azure.resourcemanager.netapp.models.HourlySchedule;
import com.azure.resourcemanager.netapp.models.MonthlySchedule;
import com.azure.resourcemanager.netapp.models.WeeklySchedule;
import java.io.IOException;

/**
 * Snapshot policy properties.
 */
@Fluent
public final class SnapshotPolicyProperties implements JsonSerializable<SnapshotPolicyProperties> {
    /*
     * Schedule for hourly snapshots
     */
    private HourlySchedule hourlySchedule;

    /*
     * Schedule for daily snapshots
     */
    private DailySchedule dailySchedule;

    /*
     * Schedule for weekly snapshots
     */
    private WeeklySchedule weeklySchedule;

    /*
     * Schedule for monthly snapshots
     */
    private MonthlySchedule monthlySchedule;

    /*
     * The property to decide policy is enabled or not
     */
    private Boolean enabled;

    /*
     * Azure lifecycle management
     */
    private String provisioningState;

    /**
     * Creates an instance of SnapshotPolicyProperties class.
     */
    public SnapshotPolicyProperties() {
    }

    /**
     * Get the hourlySchedule property: Schedule for hourly snapshots.
     * 
     * @return the hourlySchedule value.
     */
    public HourlySchedule hourlySchedule() {
        return this.hourlySchedule;
    }

    /**
     * Set the hourlySchedule property: Schedule for hourly snapshots.
     * 
     * @param hourlySchedule the hourlySchedule value to set.
     * @return the SnapshotPolicyProperties object itself.
     */
    public SnapshotPolicyProperties withHourlySchedule(HourlySchedule hourlySchedule) {
        this.hourlySchedule = hourlySchedule;
        return this;
    }

    /**
     * Get the dailySchedule property: Schedule for daily snapshots.
     * 
     * @return the dailySchedule value.
     */
    public DailySchedule dailySchedule() {
        return this.dailySchedule;
    }

    /**
     * Set the dailySchedule property: Schedule for daily snapshots.
     * 
     * @param dailySchedule the dailySchedule value to set.
     * @return the SnapshotPolicyProperties object itself.
     */
    public SnapshotPolicyProperties withDailySchedule(DailySchedule dailySchedule) {
        this.dailySchedule = dailySchedule;
        return this;
    }

    /**
     * Get the weeklySchedule property: Schedule for weekly snapshots.
     * 
     * @return the weeklySchedule value.
     */
    public WeeklySchedule weeklySchedule() {
        return this.weeklySchedule;
    }

    /**
     * Set the weeklySchedule property: Schedule for weekly snapshots.
     * 
     * @param weeklySchedule the weeklySchedule value to set.
     * @return the SnapshotPolicyProperties object itself.
     */
    public SnapshotPolicyProperties withWeeklySchedule(WeeklySchedule weeklySchedule) {
        this.weeklySchedule = weeklySchedule;
        return this;
    }

    /**
     * Get the monthlySchedule property: Schedule for monthly snapshots.
     * 
     * @return the monthlySchedule value.
     */
    public MonthlySchedule monthlySchedule() {
        return this.monthlySchedule;
    }

    /**
     * Set the monthlySchedule property: Schedule for monthly snapshots.
     * 
     * @param monthlySchedule the monthlySchedule value to set.
     * @return the SnapshotPolicyProperties object itself.
     */
    public SnapshotPolicyProperties withMonthlySchedule(MonthlySchedule monthlySchedule) {
        this.monthlySchedule = monthlySchedule;
        return this;
    }

    /**
     * Get the enabled property: The property to decide policy is enabled or not.
     * 
     * @return the enabled value.
     */
    public Boolean enabled() {
        return this.enabled;
    }

    /**
     * Set the enabled property: The property to decide policy is enabled or not.
     * 
     * @param enabled the enabled value to set.
     * @return the SnapshotPolicyProperties object itself.
     */
    public SnapshotPolicyProperties withEnabled(Boolean enabled) {
        this.enabled = enabled;
        return this;
    }

    /**
     * Get the provisioningState property: Azure lifecycle management.
     * 
     * @return the provisioningState value.
     */
    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (hourlySchedule() != null) {
            hourlySchedule().validate();
        }
        if (dailySchedule() != null) {
            dailySchedule().validate();
        }
        if (weeklySchedule() != null) {
            weeklySchedule().validate();
        }
        if (monthlySchedule() != null) {
            monthlySchedule().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("hourlySchedule", this.hourlySchedule);
        jsonWriter.writeJsonField("dailySchedule", this.dailySchedule);
        jsonWriter.writeJsonField("weeklySchedule", this.weeklySchedule);
        jsonWriter.writeJsonField("monthlySchedule", this.monthlySchedule);
        jsonWriter.writeBooleanField("enabled", this.enabled);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SnapshotPolicyProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SnapshotPolicyProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SnapshotPolicyProperties.
     */
    public static SnapshotPolicyProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SnapshotPolicyProperties deserializedSnapshotPolicyProperties = new SnapshotPolicyProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("hourlySchedule".equals(fieldName)) {
                    deserializedSnapshotPolicyProperties.hourlySchedule = HourlySchedule.fromJson(reader);
                } else if ("dailySchedule".equals(fieldName)) {
                    deserializedSnapshotPolicyProperties.dailySchedule = DailySchedule.fromJson(reader);
                } else if ("weeklySchedule".equals(fieldName)) {
                    deserializedSnapshotPolicyProperties.weeklySchedule = WeeklySchedule.fromJson(reader);
                } else if ("monthlySchedule".equals(fieldName)) {
                    deserializedSnapshotPolicyProperties.monthlySchedule = MonthlySchedule.fromJson(reader);
                } else if ("enabled".equals(fieldName)) {
                    deserializedSnapshotPolicyProperties.enabled = reader.getNullable(JsonReader::getBoolean);
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedSnapshotPolicyProperties.provisioningState = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSnapshotPolicyProperties;
        });
    }
}
