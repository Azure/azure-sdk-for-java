// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.ProxyResource;
import com.azure.core.management.SystemData;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.netapp.fluent.models.BucketPatchProperties;
import java.io.IOException;

/**
 * Bucket resource.
 */
@Fluent
public final class BucketPatch extends ProxyResource {
    /*
     * Bucket properties
     */
    private BucketPatchProperties innerProperties;

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    private SystemData systemData;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of BucketPatch class.
     */
    public BucketPatch() {
    }

    /**
     * Get the innerProperties property: Bucket properties.
     * 
     * @return the innerProperties value.
     */
    private BucketPatchProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * Get the path property: The volume path mounted inside the bucket.
     * 
     * @return the path value.
     */
    public String path() {
        return this.innerProperties() == null ? null : this.innerProperties().path();
    }

    /**
     * Set the path property: The volume path mounted inside the bucket.
     * 
     * @param path the path value to set.
     * @return the BucketPatch object itself.
     */
    public BucketPatch withPath(String path) {
        if (this.innerProperties() == null) {
            this.innerProperties = new BucketPatchProperties();
        }
        this.innerProperties().withPath(path);
        return this;
    }

    /**
     * Get the fileSystemUser property: File System user having access to volume data. For Unix, this is the user's uid
     * and gid. For Windows, this is the user's username. Note that the Unix and Windows user details are mutually
     * exclusive, meaning one or other must be supplied, but not both.
     * 
     * @return the fileSystemUser value.
     */
    public FileSystemUser fileSystemUser() {
        return this.innerProperties() == null ? null : this.innerProperties().fileSystemUser();
    }

    /**
     * Set the fileSystemUser property: File System user having access to volume data. For Unix, this is the user's uid
     * and gid. For Windows, this is the user's username. Note that the Unix and Windows user details are mutually
     * exclusive, meaning one or other must be supplied, but not both.
     * 
     * @param fileSystemUser the fileSystemUser value to set.
     * @return the BucketPatch object itself.
     */
    public BucketPatch withFileSystemUser(FileSystemUser fileSystemUser) {
        if (this.innerProperties() == null) {
            this.innerProperties = new BucketPatchProperties();
        }
        this.innerProperties().withFileSystemUser(fileSystemUser);
        return this;
    }

    /**
     * Get the provisioningState property: Provisioning state of the resource.
     * 
     * @return the provisioningState value.
     */
    public NetappProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Get the server property: Properties of the server managing the lifecycle of volume buckets.
     * 
     * @return the server value.
     */
    public BucketServerPatchProperties server() {
        return this.innerProperties() == null ? null : this.innerProperties().server();
    }

    /**
     * Set the server property: Properties of the server managing the lifecycle of volume buckets.
     * 
     * @param server the server value to set.
     * @return the BucketPatch object itself.
     */
    public BucketPatch withServer(BucketServerPatchProperties server) {
        if (this.innerProperties() == null) {
            this.innerProperties = new BucketPatchProperties();
        }
        this.innerProperties().withServer(server);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BucketPatch from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of BucketPatch if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the BucketPatch.
     */
    public static BucketPatch fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BucketPatch deserializedBucketPatch = new BucketPatch();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedBucketPatch.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedBucketPatch.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedBucketPatch.type = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    deserializedBucketPatch.innerProperties = BucketPatchProperties.fromJson(reader);
                } else if ("systemData".equals(fieldName)) {
                    deserializedBucketPatch.systemData = SystemData.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedBucketPatch;
        });
    }
}
