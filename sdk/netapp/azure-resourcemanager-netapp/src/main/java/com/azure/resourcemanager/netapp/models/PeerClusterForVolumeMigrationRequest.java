// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Source cluster properties for a cluster peer request.
 */
@Fluent
public final class PeerClusterForVolumeMigrationRequest
    implements JsonSerializable<PeerClusterForVolumeMigrationRequest> {
    /*
     * A list of IC-LIF IPs that can be used to connect to the on-prem cluster
     */
    private List<String> peerAddresses;

    /*
     * The full path to a volume that is to be migrated into ANF. Required for Migration volumes
     */
    private RemotePath remotePath;

    /**
     * Creates an instance of PeerClusterForVolumeMigrationRequest class.
     */
    public PeerClusterForVolumeMigrationRequest() {
    }

    /**
     * Get the peerAddresses property: A list of IC-LIF IPs that can be used to connect to the on-prem cluster.
     * 
     * @return the peerAddresses value.
     */
    public List<String> peerAddresses() {
        return this.peerAddresses;
    }

    /**
     * Set the peerAddresses property: A list of IC-LIF IPs that can be used to connect to the on-prem cluster.
     * 
     * @param peerAddresses the peerAddresses value to set.
     * @return the PeerClusterForVolumeMigrationRequest object itself.
     */
    public PeerClusterForVolumeMigrationRequest withPeerAddresses(List<String> peerAddresses) {
        this.peerAddresses = peerAddresses;
        return this;
    }

    /**
     * Get the remotePath property: The full path to a volume that is to be migrated into ANF. Required for Migration
     * volumes.
     * 
     * @return the remotePath value.
     */
    public RemotePath remotePath() {
        return this.remotePath;
    }

    /**
     * Set the remotePath property: The full path to a volume that is to be migrated into ANF. Required for Migration
     * volumes.
     * 
     * @param remotePath the remotePath value to set.
     * @return the PeerClusterForVolumeMigrationRequest object itself.
     */
    public PeerClusterForVolumeMigrationRequest withRemotePath(RemotePath remotePath) {
        this.remotePath = remotePath;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (peerAddresses() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property peerAddresses in model PeerClusterForVolumeMigrationRequest"));
        }
        if (remotePath() != null) {
            remotePath().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(PeerClusterForVolumeMigrationRequest.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("peerAddresses", this.peerAddresses,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("remotePath", this.remotePath);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PeerClusterForVolumeMigrationRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PeerClusterForVolumeMigrationRequest if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the PeerClusterForVolumeMigrationRequest.
     */
    public static PeerClusterForVolumeMigrationRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PeerClusterForVolumeMigrationRequest deserializedPeerClusterForVolumeMigrationRequest
                = new PeerClusterForVolumeMigrationRequest();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("peerAddresses".equals(fieldName)) {
                    List<String> peerAddresses = reader.readArray(reader1 -> reader1.getString());
                    deserializedPeerClusterForVolumeMigrationRequest.peerAddresses = peerAddresses;
                } else if ("remotePath".equals(fieldName)) {
                    deserializedPeerClusterForVolumeMigrationRequest.remotePath = RemotePath.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPeerClusterForVolumeMigrationRequest;
        });
    }
}
