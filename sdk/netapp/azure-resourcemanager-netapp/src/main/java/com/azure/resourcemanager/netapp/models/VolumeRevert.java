// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.netapp.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * revert a volume to the snapshot.
 */
@Fluent
public final class VolumeRevert implements JsonSerializable<VolumeRevert> {
    /*
     * Resource id of the snapshot
     */
    private String snapshotId;

    /**
     * Creates an instance of VolumeRevert class.
     */
    public VolumeRevert() {
    }

    /**
     * Get the snapshotId property: Resource id of the snapshot.
     * 
     * @return the snapshotId value.
     */
    public String snapshotId() {
        return this.snapshotId;
    }

    /**
     * Set the snapshotId property: Resource id of the snapshot.
     * 
     * @param snapshotId the snapshotId value to set.
     * @return the VolumeRevert object itself.
     */
    public VolumeRevert withSnapshotId(String snapshotId) {
        this.snapshotId = snapshotId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("snapshotId", this.snapshotId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of VolumeRevert from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of VolumeRevert if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the VolumeRevert.
     */
    public static VolumeRevert fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            VolumeRevert deserializedVolumeRevert = new VolumeRevert();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("snapshotId".equals(fieldName)) {
                    deserializedVolumeRevert.snapshotId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedVolumeRevert;
        });
    }
}
