/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.netapp.v2020_06_01.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.CloudException;
import com.microsoft.azure.management.netapp.v2020_06_01.BackupPatch;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.PATCH;
import retrofit2.http.Path;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Backups.
 */
public class BackupsInner {
    /** The Retrofit service to perform REST calls. */
    private BackupsService service;
    /** The service client containing this operation class. */
    private AzureNetAppFilesManagementClientImpl client;

    /**
     * Initializes an instance of BackupsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public BackupsInner(Retrofit retrofit, AzureNetAppFilesManagementClientImpl client) {
        this.service = retrofit.create(BackupsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Backups to be
     * used by Retrofit to perform actually REST calls.
     */
    interface BackupsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.netapp.v2020_06_01.Backups list" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/capacityPools/{poolName}/volumes/{volumeName}/backups")
        Observable<Response<ResponseBody>> list(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("accountName") String accountName, @Path("poolName") String poolName, @Path("volumeName") String volumeName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.netapp.v2020_06_01.Backups get" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/capacityPools/{poolName}/volumes/{volumeName}/backups/{backupName}")
        Observable<Response<ResponseBody>> get(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("accountName") String accountName, @Path("poolName") String poolName, @Path("volumeName") String volumeName, @Path("backupName") String backupName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.netapp.v2020_06_01.Backups create" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/capacityPools/{poolName}/volumes/{volumeName}/backups/{backupName}")
        Observable<Response<ResponseBody>> create(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("accountName") String accountName, @Path("poolName") String poolName, @Path("volumeName") String volumeName, @Path("backupName") String backupName, @Query("api-version") String apiVersion, @Body BackupInner body, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.netapp.v2020_06_01.Backups beginCreate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/capacityPools/{poolName}/volumes/{volumeName}/backups/{backupName}")
        Observable<Response<ResponseBody>> beginCreate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("accountName") String accountName, @Path("poolName") String poolName, @Path("volumeName") String volumeName, @Path("backupName") String backupName, @Query("api-version") String apiVersion, @Body BackupInner body, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.netapp.v2020_06_01.Backups update" })
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/capacityPools/{poolName}/volumes/{volumeName}/backups/{backupName}")
        Observable<Response<ResponseBody>> update(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("accountName") String accountName, @Path("poolName") String poolName, @Path("volumeName") String volumeName, @Path("backupName") String backupName, @Query("api-version") String apiVersion, @Body BackupPatch body, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.netapp.v2020_06_01.Backups delete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/capacityPools/{poolName}/volumes/{volumeName}/backups/{backupName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("accountName") String accountName, @Path("poolName") String poolName, @Path("volumeName") String volumeName, @Path("backupName") String backupName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.netapp.v2020_06_01.Backups beginDelete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/capacityPools/{poolName}/volumes/{volumeName}/backups/{backupName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> beginDelete(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("accountName") String accountName, @Path("poolName") String poolName, @Path("volumeName") String volumeName, @Path("backupName") String backupName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * List Backups.
     * List all backups for a volume.
     *
     * @param resourceGroupName The name of the resource group.
     * @param accountName The name of the NetApp account
     * @param poolName The name of the capacity pool
     * @param volumeName The name of the volume
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;BackupInner&gt; object if successful.
     */
    public List<BackupInner> list(String resourceGroupName, String accountName, String poolName, String volumeName) {
        return listWithServiceResponseAsync(resourceGroupName, accountName, poolName, volumeName).toBlocking().single().body();
    }

    /**
     * List Backups.
     * List all backups for a volume.
     *
     * @param resourceGroupName The name of the resource group.
     * @param accountName The name of the NetApp account
     * @param poolName The name of the capacity pool
     * @param volumeName The name of the volume
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<BackupInner>> listAsync(String resourceGroupName, String accountName, String poolName, String volumeName, final ServiceCallback<List<BackupInner>> serviceCallback) {
        return ServiceFuture.fromResponse(listWithServiceResponseAsync(resourceGroupName, accountName, poolName, volumeName), serviceCallback);
    }

    /**
     * List Backups.
     * List all backups for a volume.
     *
     * @param resourceGroupName The name of the resource group.
     * @param accountName The name of the NetApp account
     * @param poolName The name of the capacity pool
     * @param volumeName The name of the volume
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;BackupInner&gt; object
     */
    public Observable<List<BackupInner>> listAsync(String resourceGroupName, String accountName, String poolName, String volumeName) {
        return listWithServiceResponseAsync(resourceGroupName, accountName, poolName, volumeName).map(new Func1<ServiceResponse<List<BackupInner>>, List<BackupInner>>() {
            @Override
            public List<BackupInner> call(ServiceResponse<List<BackupInner>> response) {
                return response.body();
            }
        });
    }

    /**
     * List Backups.
     * List all backups for a volume.
     *
     * @param resourceGroupName The name of the resource group.
     * @param accountName The name of the NetApp account
     * @param poolName The name of the capacity pool
     * @param volumeName The name of the volume
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;BackupInner&gt; object
     */
    public Observable<ServiceResponse<List<BackupInner>>> listWithServiceResponseAsync(String resourceGroupName, String accountName, String poolName, String volumeName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (accountName == null) {
            throw new IllegalArgumentException("Parameter accountName is required and cannot be null.");
        }
        if (poolName == null) {
            throw new IllegalArgumentException("Parameter poolName is required and cannot be null.");
        }
        if (volumeName == null) {
            throw new IllegalArgumentException("Parameter volumeName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.list(this.client.subscriptionId(), resourceGroupName, accountName, poolName, volumeName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<BackupInner>>>>() {
                @Override
                public Observable<ServiceResponse<List<BackupInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<BackupInner>> result = listDelegate(response);
                        List<BackupInner> items = null;
                        if (result.body() != null) {
                            items = result.body().items();
                        }
                        ServiceResponse<List<BackupInner>> clientResponse = new ServiceResponse<List<BackupInner>>(items, result.response());
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<BackupInner>> listDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<BackupInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<BackupInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Get a backup.
     * Get a particular backup of the volume.
     *
     * @param resourceGroupName The name of the resource group.
     * @param accountName The name of the NetApp account
     * @param poolName The name of the capacity pool
     * @param volumeName The name of the volume
     * @param backupName The name of the backup
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BackupInner object if successful.
     */
    public BackupInner get(String resourceGroupName, String accountName, String poolName, String volumeName, String backupName) {
        return getWithServiceResponseAsync(resourceGroupName, accountName, poolName, volumeName, backupName).toBlocking().single().body();
    }

    /**
     * Get a backup.
     * Get a particular backup of the volume.
     *
     * @param resourceGroupName The name of the resource group.
     * @param accountName The name of the NetApp account
     * @param poolName The name of the capacity pool
     * @param volumeName The name of the volume
     * @param backupName The name of the backup
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<BackupInner> getAsync(String resourceGroupName, String accountName, String poolName, String volumeName, String backupName, final ServiceCallback<BackupInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(resourceGroupName, accountName, poolName, volumeName, backupName), serviceCallback);
    }

    /**
     * Get a backup.
     * Get a particular backup of the volume.
     *
     * @param resourceGroupName The name of the resource group.
     * @param accountName The name of the NetApp account
     * @param poolName The name of the capacity pool
     * @param volumeName The name of the volume
     * @param backupName The name of the backup
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BackupInner object
     */
    public Observable<BackupInner> getAsync(String resourceGroupName, String accountName, String poolName, String volumeName, String backupName) {
        return getWithServiceResponseAsync(resourceGroupName, accountName, poolName, volumeName, backupName).map(new Func1<ServiceResponse<BackupInner>, BackupInner>() {
            @Override
            public BackupInner call(ServiceResponse<BackupInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Get a backup.
     * Get a particular backup of the volume.
     *
     * @param resourceGroupName The name of the resource group.
     * @param accountName The name of the NetApp account
     * @param poolName The name of the capacity pool
     * @param volumeName The name of the volume
     * @param backupName The name of the backup
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BackupInner object
     */
    public Observable<ServiceResponse<BackupInner>> getWithServiceResponseAsync(String resourceGroupName, String accountName, String poolName, String volumeName, String backupName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (accountName == null) {
            throw new IllegalArgumentException("Parameter accountName is required and cannot be null.");
        }
        if (poolName == null) {
            throw new IllegalArgumentException("Parameter poolName is required and cannot be null.");
        }
        if (volumeName == null) {
            throw new IllegalArgumentException("Parameter volumeName is required and cannot be null.");
        }
        if (backupName == null) {
            throw new IllegalArgumentException("Parameter backupName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.get(this.client.subscriptionId(), resourceGroupName, accountName, poolName, volumeName, backupName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<BackupInner>>>() {
                @Override
                public Observable<ServiceResponse<BackupInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<BackupInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<BackupInner> getDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<BackupInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<BackupInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Create a backup.
     * Create a backup for the volume.
     *
     * @param resourceGroupName The name of the resource group.
     * @param accountName The name of the NetApp account
     * @param poolName The name of the capacity pool
     * @param volumeName The name of the volume
     * @param backupName The name of the backup
     * @param body Backup object supplied in the body of the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BackupInner object if successful.
     */
    public BackupInner create(String resourceGroupName, String accountName, String poolName, String volumeName, String backupName, BackupInner body) {
        return createWithServiceResponseAsync(resourceGroupName, accountName, poolName, volumeName, backupName, body).toBlocking().last().body();
    }

    /**
     * Create a backup.
     * Create a backup for the volume.
     *
     * @param resourceGroupName The name of the resource group.
     * @param accountName The name of the NetApp account
     * @param poolName The name of the capacity pool
     * @param volumeName The name of the volume
     * @param backupName The name of the backup
     * @param body Backup object supplied in the body of the operation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<BackupInner> createAsync(String resourceGroupName, String accountName, String poolName, String volumeName, String backupName, BackupInner body, final ServiceCallback<BackupInner> serviceCallback) {
        return ServiceFuture.fromResponse(createWithServiceResponseAsync(resourceGroupName, accountName, poolName, volumeName, backupName, body), serviceCallback);
    }

    /**
     * Create a backup.
     * Create a backup for the volume.
     *
     * @param resourceGroupName The name of the resource group.
     * @param accountName The name of the NetApp account
     * @param poolName The name of the capacity pool
     * @param volumeName The name of the volume
     * @param backupName The name of the backup
     * @param body Backup object supplied in the body of the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<BackupInner> createAsync(String resourceGroupName, String accountName, String poolName, String volumeName, String backupName, BackupInner body) {
        return createWithServiceResponseAsync(resourceGroupName, accountName, poolName, volumeName, backupName, body).map(new Func1<ServiceResponse<BackupInner>, BackupInner>() {
            @Override
            public BackupInner call(ServiceResponse<BackupInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create a backup.
     * Create a backup for the volume.
     *
     * @param resourceGroupName The name of the resource group.
     * @param accountName The name of the NetApp account
     * @param poolName The name of the capacity pool
     * @param volumeName The name of the volume
     * @param backupName The name of the backup
     * @param body Backup object supplied in the body of the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<BackupInner>> createWithServiceResponseAsync(String resourceGroupName, String accountName, String poolName, String volumeName, String backupName, BackupInner body) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (accountName == null) {
            throw new IllegalArgumentException("Parameter accountName is required and cannot be null.");
        }
        if (poolName == null) {
            throw new IllegalArgumentException("Parameter poolName is required and cannot be null.");
        }
        if (volumeName == null) {
            throw new IllegalArgumentException("Parameter volumeName is required and cannot be null.");
        }
        if (backupName == null) {
            throw new IllegalArgumentException("Parameter backupName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (body == null) {
            throw new IllegalArgumentException("Parameter body is required and cannot be null.");
        }
        Validator.validate(body);
        Observable<Response<ResponseBody>> observable = service.create(this.client.subscriptionId(), resourceGroupName, accountName, poolName, volumeName, backupName, this.client.apiVersion(), body, this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<BackupInner>() { }.getType());
    }

    /**
     * Create a backup.
     * Create a backup for the volume.
     *
     * @param resourceGroupName The name of the resource group.
     * @param accountName The name of the NetApp account
     * @param poolName The name of the capacity pool
     * @param volumeName The name of the volume
     * @param backupName The name of the backup
     * @param body Backup object supplied in the body of the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BackupInner object if successful.
     */
    public BackupInner beginCreate(String resourceGroupName, String accountName, String poolName, String volumeName, String backupName, BackupInner body) {
        return beginCreateWithServiceResponseAsync(resourceGroupName, accountName, poolName, volumeName, backupName, body).toBlocking().single().body();
    }

    /**
     * Create a backup.
     * Create a backup for the volume.
     *
     * @param resourceGroupName The name of the resource group.
     * @param accountName The name of the NetApp account
     * @param poolName The name of the capacity pool
     * @param volumeName The name of the volume
     * @param backupName The name of the backup
     * @param body Backup object supplied in the body of the operation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<BackupInner> beginCreateAsync(String resourceGroupName, String accountName, String poolName, String volumeName, String backupName, BackupInner body, final ServiceCallback<BackupInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginCreateWithServiceResponseAsync(resourceGroupName, accountName, poolName, volumeName, backupName, body), serviceCallback);
    }

    /**
     * Create a backup.
     * Create a backup for the volume.
     *
     * @param resourceGroupName The name of the resource group.
     * @param accountName The name of the NetApp account
     * @param poolName The name of the capacity pool
     * @param volumeName The name of the volume
     * @param backupName The name of the backup
     * @param body Backup object supplied in the body of the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BackupInner object
     */
    public Observable<BackupInner> beginCreateAsync(String resourceGroupName, String accountName, String poolName, String volumeName, String backupName, BackupInner body) {
        return beginCreateWithServiceResponseAsync(resourceGroupName, accountName, poolName, volumeName, backupName, body).map(new Func1<ServiceResponse<BackupInner>, BackupInner>() {
            @Override
            public BackupInner call(ServiceResponse<BackupInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create a backup.
     * Create a backup for the volume.
     *
     * @param resourceGroupName The name of the resource group.
     * @param accountName The name of the NetApp account
     * @param poolName The name of the capacity pool
     * @param volumeName The name of the volume
     * @param backupName The name of the backup
     * @param body Backup object supplied in the body of the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BackupInner object
     */
    public Observable<ServiceResponse<BackupInner>> beginCreateWithServiceResponseAsync(String resourceGroupName, String accountName, String poolName, String volumeName, String backupName, BackupInner body) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (accountName == null) {
            throw new IllegalArgumentException("Parameter accountName is required and cannot be null.");
        }
        if (poolName == null) {
            throw new IllegalArgumentException("Parameter poolName is required and cannot be null.");
        }
        if (volumeName == null) {
            throw new IllegalArgumentException("Parameter volumeName is required and cannot be null.");
        }
        if (backupName == null) {
            throw new IllegalArgumentException("Parameter backupName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (body == null) {
            throw new IllegalArgumentException("Parameter body is required and cannot be null.");
        }
        Validator.validate(body);
        return service.beginCreate(this.client.subscriptionId(), resourceGroupName, accountName, poolName, volumeName, backupName, this.client.apiVersion(), body, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<BackupInner>>>() {
                @Override
                public Observable<ServiceResponse<BackupInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<BackupInner> clientResponse = beginCreateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<BackupInner> beginCreateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<BackupInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<BackupInner>() { }.getType())
                .register(201, new TypeToken<BackupInner>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Patch a backup.
     * Patch a backup for the volume.
     *
     * @param resourceGroupName The name of the resource group.
     * @param accountName The name of the NetApp account
     * @param poolName The name of the capacity pool
     * @param volumeName The name of the volume
     * @param backupName The name of the backup
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BackupInner object if successful.
     */
    public BackupInner update(String resourceGroupName, String accountName, String poolName, String volumeName, String backupName) {
        return updateWithServiceResponseAsync(resourceGroupName, accountName, poolName, volumeName, backupName).toBlocking().single().body();
    }

    /**
     * Patch a backup.
     * Patch a backup for the volume.
     *
     * @param resourceGroupName The name of the resource group.
     * @param accountName The name of the NetApp account
     * @param poolName The name of the capacity pool
     * @param volumeName The name of the volume
     * @param backupName The name of the backup
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<BackupInner> updateAsync(String resourceGroupName, String accountName, String poolName, String volumeName, String backupName, final ServiceCallback<BackupInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(resourceGroupName, accountName, poolName, volumeName, backupName), serviceCallback);
    }

    /**
     * Patch a backup.
     * Patch a backup for the volume.
     *
     * @param resourceGroupName The name of the resource group.
     * @param accountName The name of the NetApp account
     * @param poolName The name of the capacity pool
     * @param volumeName The name of the volume
     * @param backupName The name of the backup
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BackupInner object
     */
    public Observable<BackupInner> updateAsync(String resourceGroupName, String accountName, String poolName, String volumeName, String backupName) {
        return updateWithServiceResponseAsync(resourceGroupName, accountName, poolName, volumeName, backupName).map(new Func1<ServiceResponse<BackupInner>, BackupInner>() {
            @Override
            public BackupInner call(ServiceResponse<BackupInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Patch a backup.
     * Patch a backup for the volume.
     *
     * @param resourceGroupName The name of the resource group.
     * @param accountName The name of the NetApp account
     * @param poolName The name of the capacity pool
     * @param volumeName The name of the volume
     * @param backupName The name of the backup
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BackupInner object
     */
    public Observable<ServiceResponse<BackupInner>> updateWithServiceResponseAsync(String resourceGroupName, String accountName, String poolName, String volumeName, String backupName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (accountName == null) {
            throw new IllegalArgumentException("Parameter accountName is required and cannot be null.");
        }
        if (poolName == null) {
            throw new IllegalArgumentException("Parameter poolName is required and cannot be null.");
        }
        if (volumeName == null) {
            throw new IllegalArgumentException("Parameter volumeName is required and cannot be null.");
        }
        if (backupName == null) {
            throw new IllegalArgumentException("Parameter backupName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final BackupPatch body = null;
        return service.update(this.client.subscriptionId(), resourceGroupName, accountName, poolName, volumeName, backupName, this.client.apiVersion(), body, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<BackupInner>>>() {
                @Override
                public Observable<ServiceResponse<BackupInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<BackupInner> clientResponse = updateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Patch a backup.
     * Patch a backup for the volume.
     *
     * @param resourceGroupName The name of the resource group.
     * @param accountName The name of the NetApp account
     * @param poolName The name of the capacity pool
     * @param volumeName The name of the volume
     * @param backupName The name of the backup
     * @param body Backup object supplied in the body of the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BackupInner object if successful.
     */
    public BackupInner update(String resourceGroupName, String accountName, String poolName, String volumeName, String backupName, BackupPatch body) {
        return updateWithServiceResponseAsync(resourceGroupName, accountName, poolName, volumeName, backupName, body).toBlocking().single().body();
    }

    /**
     * Patch a backup.
     * Patch a backup for the volume.
     *
     * @param resourceGroupName The name of the resource group.
     * @param accountName The name of the NetApp account
     * @param poolName The name of the capacity pool
     * @param volumeName The name of the volume
     * @param backupName The name of the backup
     * @param body Backup object supplied in the body of the operation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<BackupInner> updateAsync(String resourceGroupName, String accountName, String poolName, String volumeName, String backupName, BackupPatch body, final ServiceCallback<BackupInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(resourceGroupName, accountName, poolName, volumeName, backupName, body), serviceCallback);
    }

    /**
     * Patch a backup.
     * Patch a backup for the volume.
     *
     * @param resourceGroupName The name of the resource group.
     * @param accountName The name of the NetApp account
     * @param poolName The name of the capacity pool
     * @param volumeName The name of the volume
     * @param backupName The name of the backup
     * @param body Backup object supplied in the body of the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BackupInner object
     */
    public Observable<BackupInner> updateAsync(String resourceGroupName, String accountName, String poolName, String volumeName, String backupName, BackupPatch body) {
        return updateWithServiceResponseAsync(resourceGroupName, accountName, poolName, volumeName, backupName, body).map(new Func1<ServiceResponse<BackupInner>, BackupInner>() {
            @Override
            public BackupInner call(ServiceResponse<BackupInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Patch a backup.
     * Patch a backup for the volume.
     *
     * @param resourceGroupName The name of the resource group.
     * @param accountName The name of the NetApp account
     * @param poolName The name of the capacity pool
     * @param volumeName The name of the volume
     * @param backupName The name of the backup
     * @param body Backup object supplied in the body of the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BackupInner object
     */
    public Observable<ServiceResponse<BackupInner>> updateWithServiceResponseAsync(String resourceGroupName, String accountName, String poolName, String volumeName, String backupName, BackupPatch body) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (accountName == null) {
            throw new IllegalArgumentException("Parameter accountName is required and cannot be null.");
        }
        if (poolName == null) {
            throw new IllegalArgumentException("Parameter poolName is required and cannot be null.");
        }
        if (volumeName == null) {
            throw new IllegalArgumentException("Parameter volumeName is required and cannot be null.");
        }
        if (backupName == null) {
            throw new IllegalArgumentException("Parameter backupName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(body);
        return service.update(this.client.subscriptionId(), resourceGroupName, accountName, poolName, volumeName, backupName, this.client.apiVersion(), body, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<BackupInner>>>() {
                @Override
                public Observable<ServiceResponse<BackupInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<BackupInner> clientResponse = updateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<BackupInner> updateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<BackupInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<BackupInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Delete backup.
     * Delete a backup of the volume.
     *
     * @param resourceGroupName The name of the resource group.
     * @param accountName The name of the NetApp account
     * @param poolName The name of the capacity pool
     * @param volumeName The name of the volume
     * @param backupName The name of the backup
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String resourceGroupName, String accountName, String poolName, String volumeName, String backupName) {
        deleteWithServiceResponseAsync(resourceGroupName, accountName, poolName, volumeName, backupName).toBlocking().last().body();
    }

    /**
     * Delete backup.
     * Delete a backup of the volume.
     *
     * @param resourceGroupName The name of the resource group.
     * @param accountName The name of the NetApp account
     * @param poolName The name of the capacity pool
     * @param volumeName The name of the volume
     * @param backupName The name of the backup
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String resourceGroupName, String accountName, String poolName, String volumeName, String backupName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(resourceGroupName, accountName, poolName, volumeName, backupName), serviceCallback);
    }

    /**
     * Delete backup.
     * Delete a backup of the volume.
     *
     * @param resourceGroupName The name of the resource group.
     * @param accountName The name of the NetApp account
     * @param poolName The name of the capacity pool
     * @param volumeName The name of the volume
     * @param backupName The name of the backup
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Void> deleteAsync(String resourceGroupName, String accountName, String poolName, String volumeName, String backupName) {
        return deleteWithServiceResponseAsync(resourceGroupName, accountName, poolName, volumeName, backupName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Delete backup.
     * Delete a backup of the volume.
     *
     * @param resourceGroupName The name of the resource group.
     * @param accountName The name of the NetApp account
     * @param poolName The name of the capacity pool
     * @param volumeName The name of the volume
     * @param backupName The name of the backup
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String resourceGroupName, String accountName, String poolName, String volumeName, String backupName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (accountName == null) {
            throw new IllegalArgumentException("Parameter accountName is required and cannot be null.");
        }
        if (poolName == null) {
            throw new IllegalArgumentException("Parameter poolName is required and cannot be null.");
        }
        if (volumeName == null) {
            throw new IllegalArgumentException("Parameter volumeName is required and cannot be null.");
        }
        if (backupName == null) {
            throw new IllegalArgumentException("Parameter backupName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Observable<Response<ResponseBody>> observable = service.delete(this.client.subscriptionId(), resourceGroupName, accountName, poolName, volumeName, backupName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<Void>() { }.getType());
    }

    /**
     * Delete backup.
     * Delete a backup of the volume.
     *
     * @param resourceGroupName The name of the resource group.
     * @param accountName The name of the NetApp account
     * @param poolName The name of the capacity pool
     * @param volumeName The name of the volume
     * @param backupName The name of the backup
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void beginDelete(String resourceGroupName, String accountName, String poolName, String volumeName, String backupName) {
        beginDeleteWithServiceResponseAsync(resourceGroupName, accountName, poolName, volumeName, backupName).toBlocking().single().body();
    }

    /**
     * Delete backup.
     * Delete a backup of the volume.
     *
     * @param resourceGroupName The name of the resource group.
     * @param accountName The name of the NetApp account
     * @param poolName The name of the capacity pool
     * @param volumeName The name of the volume
     * @param backupName The name of the backup
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> beginDeleteAsync(String resourceGroupName, String accountName, String poolName, String volumeName, String backupName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(beginDeleteWithServiceResponseAsync(resourceGroupName, accountName, poolName, volumeName, backupName), serviceCallback);
    }

    /**
     * Delete backup.
     * Delete a backup of the volume.
     *
     * @param resourceGroupName The name of the resource group.
     * @param accountName The name of the NetApp account
     * @param poolName The name of the capacity pool
     * @param volumeName The name of the volume
     * @param backupName The name of the backup
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> beginDeleteAsync(String resourceGroupName, String accountName, String poolName, String volumeName, String backupName) {
        return beginDeleteWithServiceResponseAsync(resourceGroupName, accountName, poolName, volumeName, backupName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Delete backup.
     * Delete a backup of the volume.
     *
     * @param resourceGroupName The name of the resource group.
     * @param accountName The name of the NetApp account
     * @param poolName The name of the capacity pool
     * @param volumeName The name of the volume
     * @param backupName The name of the backup
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> beginDeleteWithServiceResponseAsync(String resourceGroupName, String accountName, String poolName, String volumeName, String backupName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (accountName == null) {
            throw new IllegalArgumentException("Parameter accountName is required and cannot be null.");
        }
        if (poolName == null) {
            throw new IllegalArgumentException("Parameter poolName is required and cannot be null.");
        }
        if (volumeName == null) {
            throw new IllegalArgumentException("Parameter volumeName is required and cannot be null.");
        }
        if (backupName == null) {
            throw new IllegalArgumentException("Parameter backupName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.beginDelete(this.client.subscriptionId(), resourceGroupName, accountName, poolName, volumeName, backupName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = beginDeleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> beginDeleteDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
