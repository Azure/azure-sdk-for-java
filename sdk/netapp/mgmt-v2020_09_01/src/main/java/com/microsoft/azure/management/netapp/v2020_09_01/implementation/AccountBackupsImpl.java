/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.netapp.v2020_09_01.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.netapp.v2020_09_01.AccountBackups;
import rx.Completable;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.management.netapp.v2020_09_01.BackupsList;
import com.microsoft.azure.management.netapp.v2020_09_01.NetAppAccountBackup;

class AccountBackupsImpl extends WrapperImpl<AccountBackupsInner> implements AccountBackups {
    private final NetAppManager manager;

    AccountBackupsImpl(NetAppManager manager) {
        super(manager.inner().accountBackups());
        this.manager = manager;
    }

    public NetAppManager manager() {
        return this.manager;
    }

    private NetAppAccountBackupImpl wrapModel(BackupInner inner) {
        return  new NetAppAccountBackupImpl(inner, manager());
    }

    @Override
    public Observable<BackupsList> listAsync(String resourceGroupName, String accountName) {
        AccountBackupsInner client = this.inner();
        return client.listAsync(resourceGroupName, accountName)
        .map(new Func1<BackupsListInner, BackupsList>() {
            @Override
            public BackupsList call(BackupsListInner inner) {
                return new BackupsListImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<NetAppAccountBackup> getAsync(String resourceGroupName, String accountName, String backupName) {
        AccountBackupsInner client = this.inner();
        return client.getAsync(resourceGroupName, accountName, backupName)
        .flatMap(new Func1<BackupInner, Observable<NetAppAccountBackup>>() {
            @Override
            public Observable<NetAppAccountBackup> call(BackupInner inner) {
                if (inner == null) {
                    return Observable.empty();
                } else {
                    return Observable.just((NetAppAccountBackup)wrapModel(inner));
                }
            }
       });
    }

    @Override
    public Completable deleteAsync(String resourceGroupName, String accountName, String backupName) {
        AccountBackupsInner client = this.inner();
        return client.deleteAsync(resourceGroupName, accountName, backupName).toCompletable();
    }

}
