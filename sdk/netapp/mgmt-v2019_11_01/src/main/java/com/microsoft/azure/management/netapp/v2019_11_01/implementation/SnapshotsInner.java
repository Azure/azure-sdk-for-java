/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.netapp.v2019_11_01.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.CloudException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.PATCH;
import retrofit2.http.Path;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Snapshots.
 */
public class SnapshotsInner {
    /** The Retrofit service to perform REST calls. */
    private SnapshotsService service;
    /** The service client containing this operation class. */
    private AzureNetAppFilesManagementClientImpl client;

    /**
     * Initializes an instance of SnapshotsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public SnapshotsInner(Retrofit retrofit, AzureNetAppFilesManagementClientImpl client) {
        this.service = retrofit.create(SnapshotsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Snapshots to be
     * used by Retrofit to perform actually REST calls.
     */
    interface SnapshotsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.netapp.v2019_11_01.Snapshots list" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/capacityPools/{poolName}/volumes/{volumeName}/snapshots")
        Observable<Response<ResponseBody>> list(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("accountName") String accountName, @Path("poolName") String poolName, @Path("volumeName") String volumeName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.netapp.v2019_11_01.Snapshots get" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/capacityPools/{poolName}/volumes/{volumeName}/snapshots/{snapshotName}")
        Observable<Response<ResponseBody>> get(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("accountName") String accountName, @Path("poolName") String poolName, @Path("volumeName") String volumeName, @Path("snapshotName") String snapshotName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.netapp.v2019_11_01.Snapshots create" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/capacityPools/{poolName}/volumes/{volumeName}/snapshots/{snapshotName}")
        Observable<Response<ResponseBody>> create(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("accountName") String accountName, @Path("poolName") String poolName, @Path("volumeName") String volumeName, @Path("snapshotName") String snapshotName, @Body SnapshotInner body, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.netapp.v2019_11_01.Snapshots beginCreate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/capacityPools/{poolName}/volumes/{volumeName}/snapshots/{snapshotName}")
        Observable<Response<ResponseBody>> beginCreate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("accountName") String accountName, @Path("poolName") String poolName, @Path("volumeName") String volumeName, @Path("snapshotName") String snapshotName, @Body SnapshotInner body, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.netapp.v2019_11_01.Snapshots update" })
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/capacityPools/{poolName}/volumes/{volumeName}/snapshots/{snapshotName}")
        Observable<Response<ResponseBody>> update(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("accountName") String accountName, @Path("poolName") String poolName, @Path("volumeName") String volumeName, @Path("snapshotName") String snapshotName, @Body Object body, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.netapp.v2019_11_01.Snapshots beginUpdate" })
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/capacityPools/{poolName}/volumes/{volumeName}/snapshots/{snapshotName}")
        Observable<Response<ResponseBody>> beginUpdate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("accountName") String accountName, @Path("poolName") String poolName, @Path("volumeName") String volumeName, @Path("snapshotName") String snapshotName, @Body Object body, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.netapp.v2019_11_01.Snapshots delete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/capacityPools/{poolName}/volumes/{volumeName}/snapshots/{snapshotName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("accountName") String accountName, @Path("poolName") String poolName, @Path("volumeName") String volumeName, @Path("snapshotName") String snapshotName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.netapp.v2019_11_01.Snapshots beginDelete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/capacityPools/{poolName}/volumes/{volumeName}/snapshots/{snapshotName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> beginDelete(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("accountName") String accountName, @Path("poolName") String poolName, @Path("volumeName") String volumeName, @Path("snapshotName") String snapshotName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Describe all snapshots.
     * List all snapshots associated with the volume.
     *
     * @param resourceGroupName The name of the resource group.
     * @param accountName The name of the NetApp account
     * @param poolName The name of the capacity pool
     * @param volumeName The name of the volume
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;SnapshotInner&gt; object if successful.
     */
    public List<SnapshotInner> list(String resourceGroupName, String accountName, String poolName, String volumeName) {
        return listWithServiceResponseAsync(resourceGroupName, accountName, poolName, volumeName).toBlocking().single().body();
    }

    /**
     * Describe all snapshots.
     * List all snapshots associated with the volume.
     *
     * @param resourceGroupName The name of the resource group.
     * @param accountName The name of the NetApp account
     * @param poolName The name of the capacity pool
     * @param volumeName The name of the volume
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<SnapshotInner>> listAsync(String resourceGroupName, String accountName, String poolName, String volumeName, final ServiceCallback<List<SnapshotInner>> serviceCallback) {
        return ServiceFuture.fromResponse(listWithServiceResponseAsync(resourceGroupName, accountName, poolName, volumeName), serviceCallback);
    }

    /**
     * Describe all snapshots.
     * List all snapshots associated with the volume.
     *
     * @param resourceGroupName The name of the resource group.
     * @param accountName The name of the NetApp account
     * @param poolName The name of the capacity pool
     * @param volumeName The name of the volume
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;SnapshotInner&gt; object
     */
    public Observable<List<SnapshotInner>> listAsync(String resourceGroupName, String accountName, String poolName, String volumeName) {
        return listWithServiceResponseAsync(resourceGroupName, accountName, poolName, volumeName).map(new Func1<ServiceResponse<List<SnapshotInner>>, List<SnapshotInner>>() {
            @Override
            public List<SnapshotInner> call(ServiceResponse<List<SnapshotInner>> response) {
                return response.body();
            }
        });
    }

    /**
     * Describe all snapshots.
     * List all snapshots associated with the volume.
     *
     * @param resourceGroupName The name of the resource group.
     * @param accountName The name of the NetApp account
     * @param poolName The name of the capacity pool
     * @param volumeName The name of the volume
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;SnapshotInner&gt; object
     */
    public Observable<ServiceResponse<List<SnapshotInner>>> listWithServiceResponseAsync(String resourceGroupName, String accountName, String poolName, String volumeName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (accountName == null) {
            throw new IllegalArgumentException("Parameter accountName is required and cannot be null.");
        }
        if (poolName == null) {
            throw new IllegalArgumentException("Parameter poolName is required and cannot be null.");
        }
        if (volumeName == null) {
            throw new IllegalArgumentException("Parameter volumeName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.list(this.client.subscriptionId(), resourceGroupName, accountName, poolName, volumeName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<SnapshotInner>>>>() {
                @Override
                public Observable<ServiceResponse<List<SnapshotInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<SnapshotInner>> result = listDelegate(response);
                        List<SnapshotInner> items = null;
                        if (result.body() != null) {
                            items = result.body().items();
                        }
                        ServiceResponse<List<SnapshotInner>> clientResponse = new ServiceResponse<List<SnapshotInner>>(items, result.response());
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<SnapshotInner>> listDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<SnapshotInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<SnapshotInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Describe a snapshot.
     * Get details of the specified snapshot.
     *
     * @param resourceGroupName The name of the resource group.
     * @param accountName The name of the NetApp account
     * @param poolName The name of the capacity pool
     * @param volumeName The name of the volume
     * @param snapshotName The name of the mount target
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SnapshotInner object if successful.
     */
    public SnapshotInner get(String resourceGroupName, String accountName, String poolName, String volumeName, String snapshotName) {
        return getWithServiceResponseAsync(resourceGroupName, accountName, poolName, volumeName, snapshotName).toBlocking().single().body();
    }

    /**
     * Describe a snapshot.
     * Get details of the specified snapshot.
     *
     * @param resourceGroupName The name of the resource group.
     * @param accountName The name of the NetApp account
     * @param poolName The name of the capacity pool
     * @param volumeName The name of the volume
     * @param snapshotName The name of the mount target
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<SnapshotInner> getAsync(String resourceGroupName, String accountName, String poolName, String volumeName, String snapshotName, final ServiceCallback<SnapshotInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(resourceGroupName, accountName, poolName, volumeName, snapshotName), serviceCallback);
    }

    /**
     * Describe a snapshot.
     * Get details of the specified snapshot.
     *
     * @param resourceGroupName The name of the resource group.
     * @param accountName The name of the NetApp account
     * @param poolName The name of the capacity pool
     * @param volumeName The name of the volume
     * @param snapshotName The name of the mount target
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SnapshotInner object
     */
    public Observable<SnapshotInner> getAsync(String resourceGroupName, String accountName, String poolName, String volumeName, String snapshotName) {
        return getWithServiceResponseAsync(resourceGroupName, accountName, poolName, volumeName, snapshotName).map(new Func1<ServiceResponse<SnapshotInner>, SnapshotInner>() {
            @Override
            public SnapshotInner call(ServiceResponse<SnapshotInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Describe a snapshot.
     * Get details of the specified snapshot.
     *
     * @param resourceGroupName The name of the resource group.
     * @param accountName The name of the NetApp account
     * @param poolName The name of the capacity pool
     * @param volumeName The name of the volume
     * @param snapshotName The name of the mount target
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SnapshotInner object
     */
    public Observable<ServiceResponse<SnapshotInner>> getWithServiceResponseAsync(String resourceGroupName, String accountName, String poolName, String volumeName, String snapshotName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (accountName == null) {
            throw new IllegalArgumentException("Parameter accountName is required and cannot be null.");
        }
        if (poolName == null) {
            throw new IllegalArgumentException("Parameter poolName is required and cannot be null.");
        }
        if (volumeName == null) {
            throw new IllegalArgumentException("Parameter volumeName is required and cannot be null.");
        }
        if (snapshotName == null) {
            throw new IllegalArgumentException("Parameter snapshotName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.get(this.client.subscriptionId(), resourceGroupName, accountName, poolName, volumeName, snapshotName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<SnapshotInner>>>() {
                @Override
                public Observable<ServiceResponse<SnapshotInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<SnapshotInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<SnapshotInner> getDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<SnapshotInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<SnapshotInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Create a snapshot.
     * Create the specified snapshot within the given volume.
     *
     * @param resourceGroupName The name of the resource group.
     * @param accountName The name of the NetApp account
     * @param poolName The name of the capacity pool
     * @param volumeName The name of the volume
     * @param snapshotName The name of the mount target
     * @param body Snapshot object supplied in the body of the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SnapshotInner object if successful.
     */
    public SnapshotInner create(String resourceGroupName, String accountName, String poolName, String volumeName, String snapshotName, SnapshotInner body) {
        return createWithServiceResponseAsync(resourceGroupName, accountName, poolName, volumeName, snapshotName, body).toBlocking().last().body();
    }

    /**
     * Create a snapshot.
     * Create the specified snapshot within the given volume.
     *
     * @param resourceGroupName The name of the resource group.
     * @param accountName The name of the NetApp account
     * @param poolName The name of the capacity pool
     * @param volumeName The name of the volume
     * @param snapshotName The name of the mount target
     * @param body Snapshot object supplied in the body of the operation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<SnapshotInner> createAsync(String resourceGroupName, String accountName, String poolName, String volumeName, String snapshotName, SnapshotInner body, final ServiceCallback<SnapshotInner> serviceCallback) {
        return ServiceFuture.fromResponse(createWithServiceResponseAsync(resourceGroupName, accountName, poolName, volumeName, snapshotName, body), serviceCallback);
    }

    /**
     * Create a snapshot.
     * Create the specified snapshot within the given volume.
     *
     * @param resourceGroupName The name of the resource group.
     * @param accountName The name of the NetApp account
     * @param poolName The name of the capacity pool
     * @param volumeName The name of the volume
     * @param snapshotName The name of the mount target
     * @param body Snapshot object supplied in the body of the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<SnapshotInner> createAsync(String resourceGroupName, String accountName, String poolName, String volumeName, String snapshotName, SnapshotInner body) {
        return createWithServiceResponseAsync(resourceGroupName, accountName, poolName, volumeName, snapshotName, body).map(new Func1<ServiceResponse<SnapshotInner>, SnapshotInner>() {
            @Override
            public SnapshotInner call(ServiceResponse<SnapshotInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create a snapshot.
     * Create the specified snapshot within the given volume.
     *
     * @param resourceGroupName The name of the resource group.
     * @param accountName The name of the NetApp account
     * @param poolName The name of the capacity pool
     * @param volumeName The name of the volume
     * @param snapshotName The name of the mount target
     * @param body Snapshot object supplied in the body of the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<SnapshotInner>> createWithServiceResponseAsync(String resourceGroupName, String accountName, String poolName, String volumeName, String snapshotName, SnapshotInner body) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (accountName == null) {
            throw new IllegalArgumentException("Parameter accountName is required and cannot be null.");
        }
        if (poolName == null) {
            throw new IllegalArgumentException("Parameter poolName is required and cannot be null.");
        }
        if (volumeName == null) {
            throw new IllegalArgumentException("Parameter volumeName is required and cannot be null.");
        }
        if (snapshotName == null) {
            throw new IllegalArgumentException("Parameter snapshotName is required and cannot be null.");
        }
        if (body == null) {
            throw new IllegalArgumentException("Parameter body is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(body);
        Observable<Response<ResponseBody>> observable = service.create(this.client.subscriptionId(), resourceGroupName, accountName, poolName, volumeName, snapshotName, body, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<SnapshotInner>() { }.getType());
    }

    /**
     * Create a snapshot.
     * Create the specified snapshot within the given volume.
     *
     * @param resourceGroupName The name of the resource group.
     * @param accountName The name of the NetApp account
     * @param poolName The name of the capacity pool
     * @param volumeName The name of the volume
     * @param snapshotName The name of the mount target
     * @param body Snapshot object supplied in the body of the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SnapshotInner object if successful.
     */
    public SnapshotInner beginCreate(String resourceGroupName, String accountName, String poolName, String volumeName, String snapshotName, SnapshotInner body) {
        return beginCreateWithServiceResponseAsync(resourceGroupName, accountName, poolName, volumeName, snapshotName, body).toBlocking().single().body();
    }

    /**
     * Create a snapshot.
     * Create the specified snapshot within the given volume.
     *
     * @param resourceGroupName The name of the resource group.
     * @param accountName The name of the NetApp account
     * @param poolName The name of the capacity pool
     * @param volumeName The name of the volume
     * @param snapshotName The name of the mount target
     * @param body Snapshot object supplied in the body of the operation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<SnapshotInner> beginCreateAsync(String resourceGroupName, String accountName, String poolName, String volumeName, String snapshotName, SnapshotInner body, final ServiceCallback<SnapshotInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginCreateWithServiceResponseAsync(resourceGroupName, accountName, poolName, volumeName, snapshotName, body), serviceCallback);
    }

    /**
     * Create a snapshot.
     * Create the specified snapshot within the given volume.
     *
     * @param resourceGroupName The name of the resource group.
     * @param accountName The name of the NetApp account
     * @param poolName The name of the capacity pool
     * @param volumeName The name of the volume
     * @param snapshotName The name of the mount target
     * @param body Snapshot object supplied in the body of the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SnapshotInner object
     */
    public Observable<SnapshotInner> beginCreateAsync(String resourceGroupName, String accountName, String poolName, String volumeName, String snapshotName, SnapshotInner body) {
        return beginCreateWithServiceResponseAsync(resourceGroupName, accountName, poolName, volumeName, snapshotName, body).map(new Func1<ServiceResponse<SnapshotInner>, SnapshotInner>() {
            @Override
            public SnapshotInner call(ServiceResponse<SnapshotInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create a snapshot.
     * Create the specified snapshot within the given volume.
     *
     * @param resourceGroupName The name of the resource group.
     * @param accountName The name of the NetApp account
     * @param poolName The name of the capacity pool
     * @param volumeName The name of the volume
     * @param snapshotName The name of the mount target
     * @param body Snapshot object supplied in the body of the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SnapshotInner object
     */
    public Observable<ServiceResponse<SnapshotInner>> beginCreateWithServiceResponseAsync(String resourceGroupName, String accountName, String poolName, String volumeName, String snapshotName, SnapshotInner body) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (accountName == null) {
            throw new IllegalArgumentException("Parameter accountName is required and cannot be null.");
        }
        if (poolName == null) {
            throw new IllegalArgumentException("Parameter poolName is required and cannot be null.");
        }
        if (volumeName == null) {
            throw new IllegalArgumentException("Parameter volumeName is required and cannot be null.");
        }
        if (snapshotName == null) {
            throw new IllegalArgumentException("Parameter snapshotName is required and cannot be null.");
        }
        if (body == null) {
            throw new IllegalArgumentException("Parameter body is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(body);
        return service.beginCreate(this.client.subscriptionId(), resourceGroupName, accountName, poolName, volumeName, snapshotName, body, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<SnapshotInner>>>() {
                @Override
                public Observable<ServiceResponse<SnapshotInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<SnapshotInner> clientResponse = beginCreateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<SnapshotInner> beginCreateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<SnapshotInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(201, new TypeToken<SnapshotInner>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Update a snapshot.
     * Patch a snapshot.
     *
     * @param resourceGroupName The name of the resource group.
     * @param accountName The name of the NetApp account
     * @param poolName The name of the capacity pool
     * @param volumeName The name of the volume
     * @param snapshotName The name of the mount target
     * @param body Snapshot object supplied in the body of the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SnapshotInner object if successful.
     */
    public SnapshotInner update(String resourceGroupName, String accountName, String poolName, String volumeName, String snapshotName, Object body) {
        return updateWithServiceResponseAsync(resourceGroupName, accountName, poolName, volumeName, snapshotName, body).toBlocking().last().body();
    }

    /**
     * Update a snapshot.
     * Patch a snapshot.
     *
     * @param resourceGroupName The name of the resource group.
     * @param accountName The name of the NetApp account
     * @param poolName The name of the capacity pool
     * @param volumeName The name of the volume
     * @param snapshotName The name of the mount target
     * @param body Snapshot object supplied in the body of the operation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<SnapshotInner> updateAsync(String resourceGroupName, String accountName, String poolName, String volumeName, String snapshotName, Object body, final ServiceCallback<SnapshotInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(resourceGroupName, accountName, poolName, volumeName, snapshotName, body), serviceCallback);
    }

    /**
     * Update a snapshot.
     * Patch a snapshot.
     *
     * @param resourceGroupName The name of the resource group.
     * @param accountName The name of the NetApp account
     * @param poolName The name of the capacity pool
     * @param volumeName The name of the volume
     * @param snapshotName The name of the mount target
     * @param body Snapshot object supplied in the body of the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<SnapshotInner> updateAsync(String resourceGroupName, String accountName, String poolName, String volumeName, String snapshotName, Object body) {
        return updateWithServiceResponseAsync(resourceGroupName, accountName, poolName, volumeName, snapshotName, body).map(new Func1<ServiceResponse<SnapshotInner>, SnapshotInner>() {
            @Override
            public SnapshotInner call(ServiceResponse<SnapshotInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Update a snapshot.
     * Patch a snapshot.
     *
     * @param resourceGroupName The name of the resource group.
     * @param accountName The name of the NetApp account
     * @param poolName The name of the capacity pool
     * @param volumeName The name of the volume
     * @param snapshotName The name of the mount target
     * @param body Snapshot object supplied in the body of the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<SnapshotInner>> updateWithServiceResponseAsync(String resourceGroupName, String accountName, String poolName, String volumeName, String snapshotName, Object body) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (accountName == null) {
            throw new IllegalArgumentException("Parameter accountName is required and cannot be null.");
        }
        if (poolName == null) {
            throw new IllegalArgumentException("Parameter poolName is required and cannot be null.");
        }
        if (volumeName == null) {
            throw new IllegalArgumentException("Parameter volumeName is required and cannot be null.");
        }
        if (snapshotName == null) {
            throw new IllegalArgumentException("Parameter snapshotName is required and cannot be null.");
        }
        if (body == null) {
            throw new IllegalArgumentException("Parameter body is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Observable<Response<ResponseBody>> observable = service.update(this.client.subscriptionId(), resourceGroupName, accountName, poolName, volumeName, snapshotName, body, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<SnapshotInner>() { }.getType());
    }

    /**
     * Update a snapshot.
     * Patch a snapshot.
     *
     * @param resourceGroupName The name of the resource group.
     * @param accountName The name of the NetApp account
     * @param poolName The name of the capacity pool
     * @param volumeName The name of the volume
     * @param snapshotName The name of the mount target
     * @param body Snapshot object supplied in the body of the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SnapshotInner object if successful.
     */
    public SnapshotInner beginUpdate(String resourceGroupName, String accountName, String poolName, String volumeName, String snapshotName, Object body) {
        return beginUpdateWithServiceResponseAsync(resourceGroupName, accountName, poolName, volumeName, snapshotName, body).toBlocking().single().body();
    }

    /**
     * Update a snapshot.
     * Patch a snapshot.
     *
     * @param resourceGroupName The name of the resource group.
     * @param accountName The name of the NetApp account
     * @param poolName The name of the capacity pool
     * @param volumeName The name of the volume
     * @param snapshotName The name of the mount target
     * @param body Snapshot object supplied in the body of the operation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<SnapshotInner> beginUpdateAsync(String resourceGroupName, String accountName, String poolName, String volumeName, String snapshotName, Object body, final ServiceCallback<SnapshotInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginUpdateWithServiceResponseAsync(resourceGroupName, accountName, poolName, volumeName, snapshotName, body), serviceCallback);
    }

    /**
     * Update a snapshot.
     * Patch a snapshot.
     *
     * @param resourceGroupName The name of the resource group.
     * @param accountName The name of the NetApp account
     * @param poolName The name of the capacity pool
     * @param volumeName The name of the volume
     * @param snapshotName The name of the mount target
     * @param body Snapshot object supplied in the body of the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SnapshotInner object
     */
    public Observable<SnapshotInner> beginUpdateAsync(String resourceGroupName, String accountName, String poolName, String volumeName, String snapshotName, Object body) {
        return beginUpdateWithServiceResponseAsync(resourceGroupName, accountName, poolName, volumeName, snapshotName, body).map(new Func1<ServiceResponse<SnapshotInner>, SnapshotInner>() {
            @Override
            public SnapshotInner call(ServiceResponse<SnapshotInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Update a snapshot.
     * Patch a snapshot.
     *
     * @param resourceGroupName The name of the resource group.
     * @param accountName The name of the NetApp account
     * @param poolName The name of the capacity pool
     * @param volumeName The name of the volume
     * @param snapshotName The name of the mount target
     * @param body Snapshot object supplied in the body of the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SnapshotInner object
     */
    public Observable<ServiceResponse<SnapshotInner>> beginUpdateWithServiceResponseAsync(String resourceGroupName, String accountName, String poolName, String volumeName, String snapshotName, Object body) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (accountName == null) {
            throw new IllegalArgumentException("Parameter accountName is required and cannot be null.");
        }
        if (poolName == null) {
            throw new IllegalArgumentException("Parameter poolName is required and cannot be null.");
        }
        if (volumeName == null) {
            throw new IllegalArgumentException("Parameter volumeName is required and cannot be null.");
        }
        if (snapshotName == null) {
            throw new IllegalArgumentException("Parameter snapshotName is required and cannot be null.");
        }
        if (body == null) {
            throw new IllegalArgumentException("Parameter body is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.beginUpdate(this.client.subscriptionId(), resourceGroupName, accountName, poolName, volumeName, snapshotName, body, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<SnapshotInner>>>() {
                @Override
                public Observable<ServiceResponse<SnapshotInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<SnapshotInner> clientResponse = beginUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<SnapshotInner> beginUpdateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<SnapshotInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<SnapshotInner>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Delete a snapshot.
     * Delete snapshot.
     *
     * @param resourceGroupName The name of the resource group.
     * @param accountName The name of the NetApp account
     * @param poolName The name of the capacity pool
     * @param volumeName The name of the volume
     * @param snapshotName The name of the mount target
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String resourceGroupName, String accountName, String poolName, String volumeName, String snapshotName) {
        deleteWithServiceResponseAsync(resourceGroupName, accountName, poolName, volumeName, snapshotName).toBlocking().last().body();
    }

    /**
     * Delete a snapshot.
     * Delete snapshot.
     *
     * @param resourceGroupName The name of the resource group.
     * @param accountName The name of the NetApp account
     * @param poolName The name of the capacity pool
     * @param volumeName The name of the volume
     * @param snapshotName The name of the mount target
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String resourceGroupName, String accountName, String poolName, String volumeName, String snapshotName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(resourceGroupName, accountName, poolName, volumeName, snapshotName), serviceCallback);
    }

    /**
     * Delete a snapshot.
     * Delete snapshot.
     *
     * @param resourceGroupName The name of the resource group.
     * @param accountName The name of the NetApp account
     * @param poolName The name of the capacity pool
     * @param volumeName The name of the volume
     * @param snapshotName The name of the mount target
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Void> deleteAsync(String resourceGroupName, String accountName, String poolName, String volumeName, String snapshotName) {
        return deleteWithServiceResponseAsync(resourceGroupName, accountName, poolName, volumeName, snapshotName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Delete a snapshot.
     * Delete snapshot.
     *
     * @param resourceGroupName The name of the resource group.
     * @param accountName The name of the NetApp account
     * @param poolName The name of the capacity pool
     * @param volumeName The name of the volume
     * @param snapshotName The name of the mount target
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String resourceGroupName, String accountName, String poolName, String volumeName, String snapshotName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (accountName == null) {
            throw new IllegalArgumentException("Parameter accountName is required and cannot be null.");
        }
        if (poolName == null) {
            throw new IllegalArgumentException("Parameter poolName is required and cannot be null.");
        }
        if (volumeName == null) {
            throw new IllegalArgumentException("Parameter volumeName is required and cannot be null.");
        }
        if (snapshotName == null) {
            throw new IllegalArgumentException("Parameter snapshotName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Observable<Response<ResponseBody>> observable = service.delete(this.client.subscriptionId(), resourceGroupName, accountName, poolName, volumeName, snapshotName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<Void>() { }.getType());
    }

    /**
     * Delete a snapshot.
     * Delete snapshot.
     *
     * @param resourceGroupName The name of the resource group.
     * @param accountName The name of the NetApp account
     * @param poolName The name of the capacity pool
     * @param volumeName The name of the volume
     * @param snapshotName The name of the mount target
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void beginDelete(String resourceGroupName, String accountName, String poolName, String volumeName, String snapshotName) {
        beginDeleteWithServiceResponseAsync(resourceGroupName, accountName, poolName, volumeName, snapshotName).toBlocking().single().body();
    }

    /**
     * Delete a snapshot.
     * Delete snapshot.
     *
     * @param resourceGroupName The name of the resource group.
     * @param accountName The name of the NetApp account
     * @param poolName The name of the capacity pool
     * @param volumeName The name of the volume
     * @param snapshotName The name of the mount target
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> beginDeleteAsync(String resourceGroupName, String accountName, String poolName, String volumeName, String snapshotName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(beginDeleteWithServiceResponseAsync(resourceGroupName, accountName, poolName, volumeName, snapshotName), serviceCallback);
    }

    /**
     * Delete a snapshot.
     * Delete snapshot.
     *
     * @param resourceGroupName The name of the resource group.
     * @param accountName The name of the NetApp account
     * @param poolName The name of the capacity pool
     * @param volumeName The name of the volume
     * @param snapshotName The name of the mount target
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> beginDeleteAsync(String resourceGroupName, String accountName, String poolName, String volumeName, String snapshotName) {
        return beginDeleteWithServiceResponseAsync(resourceGroupName, accountName, poolName, volumeName, snapshotName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Delete a snapshot.
     * Delete snapshot.
     *
     * @param resourceGroupName The name of the resource group.
     * @param accountName The name of the NetApp account
     * @param poolName The name of the capacity pool
     * @param volumeName The name of the volume
     * @param snapshotName The name of the mount target
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> beginDeleteWithServiceResponseAsync(String resourceGroupName, String accountName, String poolName, String volumeName, String snapshotName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (accountName == null) {
            throw new IllegalArgumentException("Parameter accountName is required and cannot be null.");
        }
        if (poolName == null) {
            throw new IllegalArgumentException("Parameter poolName is required and cannot be null.");
        }
        if (volumeName == null) {
            throw new IllegalArgumentException("Parameter volumeName is required and cannot be null.");
        }
        if (snapshotName == null) {
            throw new IllegalArgumentException("Parameter snapshotName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.beginDelete(this.client.subscriptionId(), resourceGroupName, accountName, poolName, volumeName, snapshotName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = beginDeleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> beginDeleteDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
