// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.workloads.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.workloads.WorkloadsManager;
import com.azure.resourcemanager.workloads.models.OperationStatusResult;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class SapCentralInstancesStartInstanceMockTests {
    @Test
    public void testStartInstance() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"id\":\"wwnpj\",\"name\":\"fz\",\"status\":\"wpchwahf\",\"percentComplete\":69.62483,\"startTime\":\"2021-04-23T04:46:24Z\",\"endTime\":\"2021-10-20T07:30:59Z\",\"operations\":[{\"id\":\"ewetwlyxgncxykxh\",\"name\":\"h\",\"status\":\"immbcx\",\"percentComplete\":95.871994,\"startTime\":\"2021-05-04T19:01:44Z\",\"endTime\":\"2021-08-24T02:48:56Z\",\"operations\":[]},{\"id\":\"jzh\",\"name\":\"zxfpxtgqsc\",\"status\":\"avft\",\"percentComplete\":76.74104,\"startTime\":\"2021-02-07T10:07:03Z\",\"endTime\":\"2021-06-22T03:40:10Z\",\"operations\":[]},{\"id\":\"guwpi\",\"name\":\"ajc\",\"status\":\"vmmghfcfiwrxgk\",\"percentComplete\":87.17602,\"startTime\":\"2021-03-10T19:40:09Z\",\"endTime\":\"2021-10-18T16:16:50Z\",\"operations\":[]},{\"id\":\"fvpgshoxgsg\",\"name\":\"fgzdjtxvz\",\"status\":\"lbqvgaqvlgafcqu\",\"percentComplete\":38.974415,\"startTime\":\"2021-10-19T12:31:55Z\",\"endTime\":\"2021-10-16T19:18:21Z\",\"operations\":[]}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        WorkloadsManager manager =
            WorkloadsManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        OperationStatusResult response =
            manager
                .sapCentralInstances()
                .startInstance("oaimlnw", "aaomylweazu", "cse", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("wwnpj", response.id());
        Assertions.assertEquals("fz", response.name());
        Assertions.assertEquals("wpchwahf", response.status());
        Assertions.assertEquals(69.62483F, response.percentComplete());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-23T04:46:24Z"), response.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-20T07:30:59Z"), response.endTime());
        Assertions.assertEquals("ewetwlyxgncxykxh", response.operations().get(0).id());
        Assertions.assertEquals("h", response.operations().get(0).name());
        Assertions.assertEquals("immbcx", response.operations().get(0).status());
        Assertions.assertEquals(95.871994F, response.operations().get(0).percentComplete());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-04T19:01:44Z"), response.operations().get(0).startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-24T02:48:56Z"), response.operations().get(0).endTime());
    }
}
