// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.workloads.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.workloads.WorkloadsManager;
import com.azure.resourcemanager.workloads.models.OperationStatusResult;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class SapApplicationServerInstancesDeleteMockTests {
    @Test
    public void testDelete() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"id\":\"olewjwi\",\"name\":\"bwefqsfapaqtfer\",\"status\":\"q\",\"percentComplete\":4.0264726,\"startTime\":\"2021-02-26T13:58:55Z\",\"endTime\":\"2020-12-26T20:04:14Z\",\"operations\":[{\"id\":\"jwogqqnobpudc\",\"name\":\"btqwpwyawbzas\",\"status\":\"bucljgkyexaogu\",\"percentComplete\":0.42191744,\"startTime\":\"2021-11-04T08:52:55Z\",\"endTime\":\"2021-10-06T08:08:11Z\",\"operations\":[]},{\"id\":\"tx\",\"name\":\"jumfqwazlnq\",\"status\":\"mcjn\",\"percentComplete\":20.44751,\"startTime\":\"2021-03-07T06:59:29Z\",\"endTime\":\"2021-06-22T01:10:17Z\",\"operations\":[]},{\"id\":\"nyfusfzsvtuikzh\",\"name\":\"qglcfhmlrqryxynq\",\"status\":\"zrdpsovwxznptgoe\",\"percentComplete\":26.714617,\"startTime\":\"2021-06-23T04:09:23Z\",\"endTime\":\"2021-02-22T05:27:57Z\",\"operations\":[]},{\"id\":\"slkvntjl\",\"name\":\"gjkskyrioov\",\"status\":\"idsxwaabzmifry\",\"percentComplete\":73.946815,\"startTime\":\"2021-02-08T08:22:24Z\",\"endTime\":\"2021-11-13T09:33:50Z\",\"operations\":[]}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        WorkloadsManager manager =
            WorkloadsManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        OperationStatusResult response =
            manager
                .sapApplicationServerInstances()
                .delete("lbkpb", "pcpil", "hahzvechndbnwi", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("olewjwi", response.id());
        Assertions.assertEquals("bwefqsfapaqtfer", response.name());
        Assertions.assertEquals("q", response.status());
        Assertions.assertEquals(4.0264726F, response.percentComplete());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-26T13:58:55Z"), response.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2020-12-26T20:04:14Z"), response.endTime());
        Assertions.assertEquals("jwogqqnobpudc", response.operations().get(0).id());
        Assertions.assertEquals("btqwpwyawbzas", response.operations().get(0).name());
        Assertions.assertEquals("bucljgkyexaogu", response.operations().get(0).status());
        Assertions.assertEquals(0.42191744F, response.operations().get(0).percentComplete());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-04T08:52:55Z"), response.operations().get(0).startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-06T08:08:11Z"), response.operations().get(0).endTime());
    }
}
