// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.workloads.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.workloads.models.DatabaseServerFullResourceNames;
import com.azure.resourcemanager.workloads.models.LoadBalancerResourceNames;
import com.azure.resourcemanager.workloads.models.NetworkInterfaceResourceNames;
import com.azure.resourcemanager.workloads.models.VirtualMachineResourceNames;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DatabaseServerFullResourceNamesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DatabaseServerFullResourceNames model = BinaryData.fromString(
            "{\"virtualMachines\":[{\"vmName\":\"gwfqatmt\",\"hostName\":\"tmdvypgikdgs\",\"networkInterfaces\":[{\"networkInterfaceName\":\"birryuzhl\"}],\"osDiskName\":\"joqrvqqaatj\",\"dataDiskNames\":{\"tkkgllqwjy\":[\"goupmfiibfg\",\"jioolvrwxk\"]}}],\"availabilitySetName\":\"jayvblmhv\",\"loadBalancer\":{\"loadBalancerName\":\"hbxvvyhgsopbyrqu\",\"frontendIpConfigurationNames\":[\"xuvw\"],\"backendPoolNames\":[\"nhlmctlpdng\",\"tvgbmhrixkwmy\"],\"healthProbeNames\":[\"jvegrhbpnaixexcc\",\"dreaxh\",\"exdrrvqahqkg\",\"tpwijnh\"]}}")
            .toObject(DatabaseServerFullResourceNames.class);
        Assertions.assertEquals("gwfqatmt", model.virtualMachines().get(0).vmName());
        Assertions.assertEquals("tmdvypgikdgs", model.virtualMachines().get(0).hostname());
        Assertions.assertEquals("birryuzhl",
            model.virtualMachines().get(0).networkInterfaces().get(0).networkInterfaceName());
        Assertions.assertEquals("joqrvqqaatj", model.virtualMachines().get(0).osDiskName());
        Assertions.assertEquals("goupmfiibfg", model.virtualMachines().get(0).dataDiskNames().get("tkkgllqwjy").get(0));
        Assertions.assertEquals("jayvblmhv", model.availabilitySetName());
        Assertions.assertEquals("hbxvvyhgsopbyrqu", model.loadBalancer().loadBalancerName());
        Assertions.assertEquals("xuvw", model.loadBalancer().frontendIpConfigurationNames().get(0));
        Assertions.assertEquals("nhlmctlpdng", model.loadBalancer().backendPoolNames().get(0));
        Assertions.assertEquals("jvegrhbpnaixexcc", model.loadBalancer().healthProbeNames().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DatabaseServerFullResourceNames model = new DatabaseServerFullResourceNames()
            .withVirtualMachines(Arrays.asList(new VirtualMachineResourceNames().withVmName("gwfqatmt")
                .withHostname("tmdvypgikdgs")
                .withNetworkInterfaces(
                    Arrays.asList(new NetworkInterfaceResourceNames().withNetworkInterfaceName("birryuzhl")))
                .withOsDiskName("joqrvqqaatj")
                .withDataDiskNames(mapOf("tkkgllqwjy", Arrays.asList("goupmfiibfg", "jioolvrwxk")))))
            .withAvailabilitySetName("jayvblmhv")
            .withLoadBalancer(new LoadBalancerResourceNames().withLoadBalancerName("hbxvvyhgsopbyrqu")
                .withFrontendIpConfigurationNames(Arrays.asList("xuvw"))
                .withBackendPoolNames(Arrays.asList("nhlmctlpdng", "tvgbmhrixkwmy"))
                .withHealthProbeNames(Arrays.asList("jvegrhbpnaixexcc", "dreaxh", "exdrrvqahqkg", "tpwijnh")));
        model = BinaryData.fromObject(model).toObject(DatabaseServerFullResourceNames.class);
        Assertions.assertEquals("gwfqatmt", model.virtualMachines().get(0).vmName());
        Assertions.assertEquals("tmdvypgikdgs", model.virtualMachines().get(0).hostname());
        Assertions.assertEquals("birryuzhl",
            model.virtualMachines().get(0).networkInterfaces().get(0).networkInterfaceName());
        Assertions.assertEquals("joqrvqqaatj", model.virtualMachines().get(0).osDiskName());
        Assertions.assertEquals("goupmfiibfg", model.virtualMachines().get(0).dataDiskNames().get("tkkgllqwjy").get(0));
        Assertions.assertEquals("jayvblmhv", model.availabilitySetName());
        Assertions.assertEquals("hbxvvyhgsopbyrqu", model.loadBalancer().loadBalancerName());
        Assertions.assertEquals("xuvw", model.loadBalancer().frontendIpConfigurationNames().get(0));
        Assertions.assertEquals("nhlmctlpdng", model.loadBalancer().backendPoolNames().get(0));
        Assertions.assertEquals("jvegrhbpnaixexcc", model.loadBalancer().healthProbeNames().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
