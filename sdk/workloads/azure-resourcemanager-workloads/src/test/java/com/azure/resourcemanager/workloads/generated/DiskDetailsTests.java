// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.workloads.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.workloads.models.DiskDetails;
import com.azure.resourcemanager.workloads.models.DiskSku;
import com.azure.resourcemanager.workloads.models.DiskSkuName;
import org.junit.jupiter.api.Assertions;

public final class DiskDetailsTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DiskDetails model = BinaryData.fromString(
            "{\"sku\":{\"name\":\"PremiumV2_LRS\"},\"sizeGB\":1238812057634274431,\"minimumSupportedDiskCount\":8676926822483952686,\"maximumSupportedDiskCount\":7845911778748581750,\"iopsReadWrite\":3225020590001531371,\"mbpsReadWrite\":1759642651685294957,\"diskTier\":\"vwmf\"}")
            .toObject(DiskDetails.class);
        Assertions.assertEquals(DiskSkuName.PREMIUM_V2_LRS, model.sku().name());
        Assertions.assertEquals(1238812057634274431L, model.sizeGB());
        Assertions.assertEquals(8676926822483952686L, model.minimumSupportedDiskCount());
        Assertions.assertEquals(7845911778748581750L, model.maximumSupportedDiskCount());
        Assertions.assertEquals(3225020590001531371L, model.iopsReadWrite());
        Assertions.assertEquals(1759642651685294957L, model.mbpsReadWrite());
        Assertions.assertEquals("vwmf", model.diskTier());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DiskDetails model = new DiskDetails().withSku(new DiskSku().withName(DiskSkuName.PREMIUM_V2_LRS))
            .withSizeGB(1238812057634274431L)
            .withMinimumSupportedDiskCount(8676926822483952686L)
            .withMaximumSupportedDiskCount(7845911778748581750L)
            .withIopsReadWrite(3225020590001531371L)
            .withMbpsReadWrite(1759642651685294957L)
            .withDiskTier("vwmf");
        model = BinaryData.fromObject(model).toObject(DiskDetails.class);
        Assertions.assertEquals(DiskSkuName.PREMIUM_V2_LRS, model.sku().name());
        Assertions.assertEquals(1238812057634274431L, model.sizeGB());
        Assertions.assertEquals(8676926822483952686L, model.minimumSupportedDiskCount());
        Assertions.assertEquals(7845911778748581750L, model.maximumSupportedDiskCount());
        Assertions.assertEquals(3225020590001531371L, model.iopsReadWrite());
        Assertions.assertEquals(1759642651685294957L, model.mbpsReadWrite());
        Assertions.assertEquals("vwmf", model.diskTier());
    }
}
