// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.workloads.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.workloads.models.ApplicationServerFullResourceNames;
import com.azure.resourcemanager.workloads.models.NetworkInterfaceResourceNames;
import com.azure.resourcemanager.workloads.models.VirtualMachineResourceNames;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ApplicationServerFullResourceNamesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ApplicationServerFullResourceNames model = BinaryData.fromString(
            "{\"virtualMachines\":[{\"vmName\":\"ikayuhqlbjbsybb\",\"hostName\":\"r\",\"networkInterfaces\":[{\"networkInterfaceName\":\"gmfpgvmp\"},{\"networkInterfaceName\":\"as\"},{\"networkInterfaceName\":\"haq\"}],\"osDiskName\":\"ss\",\"dataDiskNames\":{\"mejzanlfzxia\":[\"wbdsr\",\"zpdrhneu\",\"owqkdwytisi\",\"ircgpikpz\"]}},{\"vmName\":\"mbzonokix\",\"hostName\":\"q\",\"networkInterfaces\":[{\"networkInterfaceName\":\"zpfrla\"}],\"osDiskName\":\"zrnw\",\"dataDiskNames\":{\"vfbgofeljagrqmqh\":[\"dfpwpjylwbtlhfls\",\"cdhszf\"],\"wpjgwws\":[\"vriiio\",\"nalghfkvtvsexso\",\"ueluqhhahhxvrhmz\"],\"guufzd\":[\"ghftqsxhqxujxuk\",\"dxdigr\"]}},{\"vmName\":\"yqtfihwh\",\"hostName\":\"tzingamvpph\",\"networkInterfaces\":[{\"networkInterfaceName\":\"zudphqamvdkfw\"},{\"networkInterfaceName\":\"wcvtbvkayhmtnvyq\"}],\"osDiskName\":\"tkzwpcnpwzc\",\"dataDiskNames\":{\"pfcqdp\":[\"gvvs\",\"cyajguqf\",\"wygzlvdnkfxusem\",\"wzrmuh\"],\"kerqwkyh\":[\"xqv\",\"svuo\",\"mgccelvezrypq\",\"mfe\"],\"rfkbwccsnjvcdwxl\":[\"bopgxedkowepbqp\"]}}],\"availabilitySetName\":\"ekftnkhtj\"}")
            .toObject(ApplicationServerFullResourceNames.class);
        Assertions.assertEquals("ikayuhqlbjbsybb", model.virtualMachines().get(0).vmName());
        Assertions.assertEquals("r", model.virtualMachines().get(0).hostname());
        Assertions.assertEquals("gmfpgvmp",
            model.virtualMachines().get(0).networkInterfaces().get(0).networkInterfaceName());
        Assertions.assertEquals("ss", model.virtualMachines().get(0).osDiskName());
        Assertions.assertEquals("wbdsr", model.virtualMachines().get(0).dataDiskNames().get("mejzanlfzxia").get(0));
        Assertions.assertEquals("ekftnkhtj", model.availabilitySetName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ApplicationServerFullResourceNames model
            = new ApplicationServerFullResourceNames()
                .withVirtualMachines(
                    Arrays
                        .asList(
                            new VirtualMachineResourceNames().withVmName("ikayuhqlbjbsybb")
                                .withHostname("r")
                                .withNetworkInterfaces(Arrays.asList(
                                    new NetworkInterfaceResourceNames().withNetworkInterfaceName("gmfpgvmp"),
                                    new NetworkInterfaceResourceNames().withNetworkInterfaceName("as"),
                                    new NetworkInterfaceResourceNames().withNetworkInterfaceName("haq")))
                                .withOsDiskName("ss")
                                .withDataDiskNames(mapOf("mejzanlfzxia",
                                    Arrays.asList("wbdsr", "zpdrhneu", "owqkdwytisi", "ircgpikpz"))),
                            new VirtualMachineResourceNames().withVmName("mbzonokix")
                                .withHostname("q")
                                .withNetworkInterfaces(Arrays
                                    .asList(new NetworkInterfaceResourceNames().withNetworkInterfaceName("zpfrla")))
                                .withOsDiskName("zrnw")
                                .withDataDiskNames(mapOf("vfbgofeljagrqmqh",
                                    Arrays.asList("dfpwpjylwbtlhfls", "cdhszf"), "wpjgwws",
                                    Arrays.asList("vriiio", "nalghfkvtvsexso", "ueluqhhahhxvrhmz"), "guufzd",
                                    Arrays.asList("ghftqsxhqxujxuk", "dxdigr"))),
                            new VirtualMachineResourceNames().withVmName("yqtfihwh")
                                .withHostname("tzingamvpph")
                                .withNetworkInterfaces(Arrays.asList(
                                    new NetworkInterfaceResourceNames().withNetworkInterfaceName("zudphqamvdkfw"),
                                    new NetworkInterfaceResourceNames().withNetworkInterfaceName("wcvtbvkayhmtnvyq")))
                                .withOsDiskName("tkzwpcnpwzc")
                                .withDataDiskNames(
                                    mapOf("pfcqdp", Arrays.asList("gvvs", "cyajguqf", "wygzlvdnkfxusem", "wzrmuh"),
                                        "kerqwkyh", Arrays.asList("xqv", "svuo", "mgccelvezrypq", "mfe"),
                                        "rfkbwccsnjvcdwxl", Arrays.asList("bopgxedkowepbqp")))))
                .withAvailabilitySetName("ekftnkhtj");
        model = BinaryData.fromObject(model).toObject(ApplicationServerFullResourceNames.class);
        Assertions.assertEquals("ikayuhqlbjbsybb", model.virtualMachines().get(0).vmName());
        Assertions.assertEquals("r", model.virtualMachines().get(0).hostname());
        Assertions.assertEquals("gmfpgvmp",
            model.virtualMachines().get(0).networkInterfaces().get(0).networkInterfaceName());
        Assertions.assertEquals("ss", model.virtualMachines().get(0).osDiskName());
        Assertions.assertEquals("wbdsr", model.virtualMachines().get(0).dataDiskNames().get("mejzanlfzxia").get(0));
        Assertions.assertEquals("ekftnkhtj", model.availabilitySetName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
