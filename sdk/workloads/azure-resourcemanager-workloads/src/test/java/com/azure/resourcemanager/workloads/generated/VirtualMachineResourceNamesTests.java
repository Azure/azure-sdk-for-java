// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.workloads.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.workloads.models.NetworkInterfaceResourceNames;
import com.azure.resourcemanager.workloads.models.VirtualMachineResourceNames;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class VirtualMachineResourceNamesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        VirtualMachineResourceNames model =
            BinaryData
                .fromString(
                    "{\"vmName\":\"l\",\"hostName\":\"ab\",\"networkInterfaces\":[{\"networkInterfaceName\":\"fkifr\"},{\"networkInterfaceName\":\"puqujmqlgkfbtn\"}],\"osDiskName\":\"aongbj\",\"dataDiskNames\":{\"ybxarzgszu\":[\"jitcjedftwwaez\",\"ojvdcpzfoqo\",\"i\"],\"szzcmrvexztv\":[\"x\",\"iqopidoamciod\",\"khazxkhnzbonlwn\",\"oegokdwbwh\"],\"lmnguxaw\":[\"qgsfraoyzkoow\"]}}")
                .toObject(VirtualMachineResourceNames.class);
        Assertions.assertEquals("l", model.vmName());
        Assertions.assertEquals("ab", model.hostname());
        Assertions.assertEquals("fkifr", model.networkInterfaces().get(0).networkInterfaceName());
        Assertions.assertEquals("aongbj", model.osDiskName());
        Assertions.assertEquals("jitcjedftwwaez", model.dataDiskNames().get("ybxarzgszu").get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        VirtualMachineResourceNames model =
            new VirtualMachineResourceNames()
                .withVmName("l")
                .withHostname("ab")
                .withNetworkInterfaces(
                    Arrays
                        .asList(
                            new NetworkInterfaceResourceNames().withNetworkInterfaceName("fkifr"),
                            new NetworkInterfaceResourceNames().withNetworkInterfaceName("puqujmqlgkfbtn")))
                .withOsDiskName("aongbj")
                .withDataDiskNames(
                    mapOf(
                        "ybxarzgszu",
                        Arrays.asList("jitcjedftwwaez", "ojvdcpzfoqo", "i"),
                        "szzcmrvexztv",
                        Arrays.asList("x", "iqopidoamciod", "khazxkhnzbonlwn", "oegokdwbwh"),
                        "lmnguxaw",
                        Arrays.asList("qgsfraoyzkoow")));
        model = BinaryData.fromObject(model).toObject(VirtualMachineResourceNames.class);
        Assertions.assertEquals("l", model.vmName());
        Assertions.assertEquals("ab", model.hostname());
        Assertions.assertEquals("fkifr", model.networkInterfaces().get(0).networkInterfaceName());
        Assertions.assertEquals("aongbj", model.osDiskName());
        Assertions.assertEquals("jitcjedftwwaez", model.dataDiskNames().get("ybxarzgszu").get(0));
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
