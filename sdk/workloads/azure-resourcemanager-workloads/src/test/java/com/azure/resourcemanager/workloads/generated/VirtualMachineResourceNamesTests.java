// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.workloads.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.workloads.models.NetworkInterfaceResourceNames;
import com.azure.resourcemanager.workloads.models.VirtualMachineResourceNames;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class VirtualMachineResourceNamesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        VirtualMachineResourceNames model = BinaryData.fromString(
            "{\"vmName\":\"kopkwhojvpajqgx\",\"hostName\":\"mocmbqfqvmk\",\"networkInterfaces\":[{\"networkInterfaceName\":\"apvhelxprgly\"}],\"osDiskName\":\"dd\",\"dataDiskNames\":{\"luszdtmhrkwof\":[\"cuejrjxgci\",\"ibrhosxsdqr\",\"zoymibmrqyibahw\"],\"nqxwbp\":[\"voqacpiexpbt\",\"iwbwoenwashrtdtk\"],\"erpqlpqwcciuqg\":[\"ulpiuj\",\"aasipqi\",\"obyu\"],\"h\":[\"butauvfb\",\"kuwhh\",\"hykojoxafnndlpic\",\"koymkcd\"]}}")
            .toObject(VirtualMachineResourceNames.class);
        Assertions.assertEquals("kopkwhojvpajqgx", model.vmName());
        Assertions.assertEquals("mocmbqfqvmk", model.hostname());
        Assertions.assertEquals("apvhelxprgly", model.networkInterfaces().get(0).networkInterfaceName());
        Assertions.assertEquals("dd", model.osDiskName());
        Assertions.assertEquals("cuejrjxgci", model.dataDiskNames().get("luszdtmhrkwof").get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        VirtualMachineResourceNames model = new VirtualMachineResourceNames().withVmName("kopkwhojvpajqgx")
            .withHostname("mocmbqfqvmk")
            .withNetworkInterfaces(
                Arrays.asList(new NetworkInterfaceResourceNames().withNetworkInterfaceName("apvhelxprgly")))
            .withOsDiskName("dd")
            .withDataDiskNames(mapOf("luszdtmhrkwof", Arrays.asList("cuejrjxgci", "ibrhosxsdqr", "zoymibmrqyibahw"),
                "nqxwbp", Arrays.asList("voqacpiexpbt", "iwbwoenwashrtdtk"), "erpqlpqwcciuqg",
                Arrays.asList("ulpiuj", "aasipqi", "obyu"), "h",
                Arrays.asList("butauvfb", "kuwhh", "hykojoxafnndlpic", "koymkcd")));
        model = BinaryData.fromObject(model).toObject(VirtualMachineResourceNames.class);
        Assertions.assertEquals("kopkwhojvpajqgx", model.vmName());
        Assertions.assertEquals("mocmbqfqvmk", model.hostname());
        Assertions.assertEquals("apvhelxprgly", model.networkInterfaces().get(0).networkInterfaceName());
        Assertions.assertEquals("dd", model.osDiskName());
        Assertions.assertEquals("cuejrjxgci", model.dataDiskNames().get("luszdtmhrkwof").get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
