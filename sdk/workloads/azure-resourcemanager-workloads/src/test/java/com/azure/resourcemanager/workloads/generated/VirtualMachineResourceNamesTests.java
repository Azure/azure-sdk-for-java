// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.workloads.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.workloads.models.NetworkInterfaceResourceNames;
import com.azure.resourcemanager.workloads.models.VirtualMachineResourceNames;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class VirtualMachineResourceNamesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        VirtualMachineResourceNames model =
            BinaryData
                .fromString(
                    "{\"vmName\":\"juetaebur\",\"hostName\":\"dmovsm\",\"networkInterfaces\":[{\"networkInterfaceName\":\"ab\"},{\"networkInterfaceName\":\"oefki\"}],\"osDiskName\":\"vtpuqujmqlgk\",\"dataDiskNames\":{\"bjcntujitc\":[\"doaon\"],\"wwa\":[\"df\"],\"pzfoqoui\":[\"kojvd\"]}}")
                .toObject(VirtualMachineResourceNames.class);
        Assertions.assertEquals("juetaebur", model.vmName());
        Assertions.assertEquals("dmovsm", model.hostname());
        Assertions.assertEquals("ab", model.networkInterfaces().get(0).networkInterfaceName());
        Assertions.assertEquals("vtpuqujmqlgk", model.osDiskName());
        Assertions.assertEquals("doaon", model.dataDiskNames().get("bjcntujitc").get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        VirtualMachineResourceNames model =
            new VirtualMachineResourceNames()
                .withVmName("juetaebur")
                .withHostname("dmovsm")
                .withNetworkInterfaces(
                    Arrays
                        .asList(
                            new NetworkInterfaceResourceNames().withNetworkInterfaceName("ab"),
                            new NetworkInterfaceResourceNames().withNetworkInterfaceName("oefki")))
                .withOsDiskName("vtpuqujmqlgk")
                .withDataDiskNames(
                    mapOf(
                        "bjcntujitc",
                        Arrays.asList("doaon"),
                        "wwa",
                        Arrays.asList("df"),
                        "pzfoqoui",
                        Arrays.asList("kojvd")));
        model = BinaryData.fromObject(model).toObject(VirtualMachineResourceNames.class);
        Assertions.assertEquals("juetaebur", model.vmName());
        Assertions.assertEquals("dmovsm", model.hostname());
        Assertions.assertEquals("ab", model.networkInterfaces().get(0).networkInterfaceName());
        Assertions.assertEquals("vtpuqujmqlgk", model.osDiskName());
        Assertions.assertEquals("doaon", model.dataDiskNames().get("bjcntujitc").get(0));
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
