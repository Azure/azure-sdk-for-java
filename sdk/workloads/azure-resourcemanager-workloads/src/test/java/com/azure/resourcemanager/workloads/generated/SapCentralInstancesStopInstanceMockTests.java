// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.workloads.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.workloads.WorkloadsManager;
import com.azure.resourcemanager.workloads.models.OperationStatusResult;
import com.azure.resourcemanager.workloads.models.StopRequest;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class SapCentralInstancesStopInstanceMockTests {
    @Test
    public void testStopInstance() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"id\":\"mvekdxukuqgsjj\",\"name\":\"n\",\"status\":\"xgketwz\",\"percentComplete\":51.96662,\"startTime\":\"2021-11-30T22:19:17Z\",\"endTime\":\"2021-10-02T08:01:19Z\",\"operations\":[{\"id\":\"vmuvgpmu\",\"name\":\"qsxvmhf\",\"status\":\"uzjyihsasbhudypo\",\"percentComplete\":36.771446,\"startTime\":\"2021-02-10T03:41:38Z\",\"endTime\":\"2021-12-09T13:14:50Z\",\"operations\":[]},{\"id\":\"yrpfoobrlttymsj\",\"name\":\"gqdnfwqzd\",\"status\":\"gtilax\",\"percentComplete\":43.660236,\"startTime\":\"2021-08-18T16:11:15Z\",\"endTime\":\"2021-09-11T15:27:25Z\",\"operations\":[]},{\"id\":\"uwivkxoy\",\"name\":\"nbixxrti\",\"status\":\"vcpwpgclrc\",\"percentComplete\":12.525076,\"startTime\":\"2021-01-12T06:52:04Z\",\"endTime\":\"2020-12-22T20:01:29Z\",\"operations\":[]}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        WorkloadsManager manager =
            WorkloadsManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        OperationStatusResult response =
            manager
                .sapCentralInstances()
                .stopInstance(
                    "utnw",
                    "duy",
                    "vuzhyr",
                    new StopRequest().withSoftStopTimeoutSeconds(2922321502044685213L),
                    com.azure.core.util.Context.NONE);

        Assertions.assertEquals("mvekdxukuqgsjj", response.id());
        Assertions.assertEquals("n", response.name());
        Assertions.assertEquals("xgketwz", response.status());
        Assertions.assertEquals(51.96662F, response.percentComplete());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-30T22:19:17Z"), response.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-02T08:01:19Z"), response.endTime());
        Assertions.assertEquals("vmuvgpmu", response.operations().get(0).id());
        Assertions.assertEquals("qsxvmhf", response.operations().get(0).name());
        Assertions.assertEquals("uzjyihsasbhudypo", response.operations().get(0).status());
        Assertions.assertEquals(36.771446F, response.operations().get(0).percentComplete());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-10T03:41:38Z"), response.operations().get(0).startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-12-09T13:14:50Z"), response.operations().get(0).endTime());
    }
}
