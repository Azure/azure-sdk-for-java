// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.workloads.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.workloads.WorkloadsManager;
import com.azure.resourcemanager.workloads.models.OperationStatusResult;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class SapDatabaseInstancesDeleteMockTests {
    @Test
    public void testDelete() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"id\":\"adijaeukmrsie\",\"name\":\"pndzaapmudqmeq\",\"status\":\"igpibud\",\"percentComplete\":22.544312,\"startTime\":\"2021-05-17T03:44:39Z\",\"endTime\":\"2021-07-31T23:06:43Z\",\"operations\":[{\"id\":\"mzznrtffyaqitmhh\",\"name\":\"oqaqhvseufuq\",\"status\":\"rxpdlcgqlsi\",\"percentComplete\":72.151985,\"startTime\":\"2021-05-24T18:35:38Z\",\"endTime\":\"2021-05-11T23:20:03Z\",\"operations\":[]},{\"id\":\"quhiosrsjuivf\",\"name\":\"is\",\"status\":\"irnxz\",\"percentComplete\":65.282074,\"startTime\":\"2021-04-12T08:11:42Z\",\"endTime\":\"2021-10-31T09:17:43Z\",\"operations\":[]}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        WorkloadsManager manager =
            WorkloadsManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        OperationStatusResult response =
            manager
                .sapDatabaseInstances()
                .delete("lxveabfqx", "mwmqtibx", "ijddtvqc", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("adijaeukmrsie", response.id());
        Assertions.assertEquals("pndzaapmudqmeq", response.name());
        Assertions.assertEquals("igpibud", response.status());
        Assertions.assertEquals(22.544312F, response.percentComplete());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-17T03:44:39Z"), response.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-31T23:06:43Z"), response.endTime());
        Assertions.assertEquals("mzznrtffyaqitmhh", response.operations().get(0).id());
        Assertions.assertEquals("oqaqhvseufuq", response.operations().get(0).name());
        Assertions.assertEquals("rxpdlcgqlsi", response.operations().get(0).status());
        Assertions.assertEquals(72.151985F, response.operations().get(0).percentComplete());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-24T18:35:38Z"), response.operations().get(0).startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-11T23:20:03Z"), response.operations().get(0).endTime());
    }
}
