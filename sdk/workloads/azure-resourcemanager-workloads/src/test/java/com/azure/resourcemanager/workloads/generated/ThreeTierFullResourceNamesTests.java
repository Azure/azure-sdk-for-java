// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.workloads.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.workloads.models.ApplicationServerFullResourceNames;
import com.azure.resourcemanager.workloads.models.CentralServerFullResourceNames;
import com.azure.resourcemanager.workloads.models.DatabaseServerFullResourceNames;
import com.azure.resourcemanager.workloads.models.LoadBalancerResourceNames;
import com.azure.resourcemanager.workloads.models.SharedStorageResourceNames;
import com.azure.resourcemanager.workloads.models.ThreeTierFullResourceNames;
import com.azure.resourcemanager.workloads.models.VirtualMachineResourceNames;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ThreeTierFullResourceNamesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ThreeTierFullResourceNames model =
            BinaryData
                .fromString(
                    "{\"namingPatternType\":\"FullResourceName\",\"centralServer\":{\"virtualMachines\":[{\"vmName\":\"oamciodh\",\"hostName\":\"azxkhnzbonlwnto\",\"networkInterfaces\":[],\"osDiskName\":\"kdwbwhkszz\",\"dataDiskNames\":{}},{\"vmName\":\"vexztvbtqgs\",\"hostName\":\"aoyzkoow\",\"networkInterfaces\":[],\"osDiskName\":\"nguxawqaldsy\",\"dataDiskNames\":{}},{\"vmName\":\"imerqfobwyznk\",\"hostName\":\"kutwpf\",\"networkInterfaces\":[],\"osDiskName\":\"gmhrskdsnfdsdoak\",\"dataDiskNames\":{}},{\"vmName\":\"lmkk\",\"hostName\":\"vdlhewpusdsttwv\",\"networkInterfaces\":[],\"osDiskName\":\"bbejdcngqqm\",\"dataDiskNames\":{}}],\"availabilitySetName\":\"ufgmjzrwrdg\",\"loadBalancer\":{\"loadBalancerName\":\"aenuuz\",\"frontendIpConfigurationNames\":[\"bminrfdwoyuhhzi\",\"iefozbhdmsml\"],\"backendPoolNames\":[\"hoftr\",\"ae\",\"u\",\"ah\"],\"healthProbeNames\":[\"slfaoqzpiyyl\",\"alnswhccsphk\",\"ivwitqscywugg\",\"oluhczbwemh\"]}},\"applicationServer\":{\"virtualMachines\":[{\"vmName\":\"rgzdwmsweyp\",\"hostName\":\"dxggicccnxqhuexm\",\"networkInterfaces\":[],\"osDiskName\":\"lstvlzywe\",\"dataDiskNames\":{}},{\"vmName\":\"rncsdtclu\",\"hostName\":\"ypbsfgytguslfead\",\"networkInterfaces\":[],\"osDiskName\":\"qukyhejhzi\",\"dataDiskNames\":{}}],\"availabilitySetName\":\"fpel\"},\"databaseServer\":{\"virtualMachines\":[{\"vmName\":\"ksrpqv\",\"hostName\":\"zraehtwd\",\"networkInterfaces\":[],\"osDiskName\":\"tswiby\",\"dataDiskNames\":{}}],\"availabilitySetName\":\"l\",\"loadBalancer\":{\"loadBalancerName\":\"hfwpracstwit\",\"frontendIpConfigurationNames\":[\"evxccedcp\",\"md\"],\"backendPoolNames\":[\"nwzxltjcv\",\"hlt\",\"ugcxnavvwxq\",\"byqunyow\"],\"healthProbeNames\":[\"mdjrkvfgbvfvp\",\"bodacizsjq\",\"hkr\",\"ibdeibq\"]}},\"sharedStorage\":{\"sharedStorageAccountName\":\"kghv\",\"sharedStorageAccountPrivateEndPointName\":\"dzwmkrefajpj\"}}")
                .toObject(ThreeTierFullResourceNames.class);
        Assertions.assertEquals("oamciodh", model.centralServer().virtualMachines().get(0).vmName());
        Assertions.assertEquals("azxkhnzbonlwnto", model.centralServer().virtualMachines().get(0).hostname());
        Assertions.assertEquals("kdwbwhkszz", model.centralServer().virtualMachines().get(0).osDiskName());
        Assertions.assertEquals("ufgmjzrwrdg", model.centralServer().availabilitySetName());
        Assertions.assertEquals("aenuuz", model.centralServer().loadBalancer().loadBalancerName());
        Assertions
            .assertEquals(
                "bminrfdwoyuhhzi", model.centralServer().loadBalancer().frontendIpConfigurationNames().get(0));
        Assertions.assertEquals("hoftr", model.centralServer().loadBalancer().backendPoolNames().get(0));
        Assertions.assertEquals("slfaoqzpiyyl", model.centralServer().loadBalancer().healthProbeNames().get(0));
        Assertions.assertEquals("rgzdwmsweyp", model.applicationServer().virtualMachines().get(0).vmName());
        Assertions.assertEquals("dxggicccnxqhuexm", model.applicationServer().virtualMachines().get(0).hostname());
        Assertions.assertEquals("lstvlzywe", model.applicationServer().virtualMachines().get(0).osDiskName());
        Assertions.assertEquals("fpel", model.applicationServer().availabilitySetName());
        Assertions.assertEquals("ksrpqv", model.databaseServer().virtualMachines().get(0).vmName());
        Assertions.assertEquals("zraehtwd", model.databaseServer().virtualMachines().get(0).hostname());
        Assertions.assertEquals("tswiby", model.databaseServer().virtualMachines().get(0).osDiskName());
        Assertions.assertEquals("l", model.databaseServer().availabilitySetName());
        Assertions.assertEquals("hfwpracstwit", model.databaseServer().loadBalancer().loadBalancerName());
        Assertions
            .assertEquals("evxccedcp", model.databaseServer().loadBalancer().frontendIpConfigurationNames().get(0));
        Assertions.assertEquals("nwzxltjcv", model.databaseServer().loadBalancer().backendPoolNames().get(0));
        Assertions.assertEquals("mdjrkvfgbvfvp", model.databaseServer().loadBalancer().healthProbeNames().get(0));
        Assertions.assertEquals("kghv", model.sharedStorage().sharedStorageAccountName());
        Assertions.assertEquals("dzwmkrefajpj", model.sharedStorage().sharedStorageAccountPrivateEndPointName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ThreeTierFullResourceNames model =
            new ThreeTierFullResourceNames()
                .withCentralServer(
                    new CentralServerFullResourceNames()
                        .withVirtualMachines(
                            Arrays
                                .asList(
                                    new VirtualMachineResourceNames()
                                        .withVmName("oamciodh")
                                        .withHostname("azxkhnzbonlwnto")
                                        .withNetworkInterfaces(Arrays.asList())
                                        .withOsDiskName("kdwbwhkszz")
                                        .withDataDiskNames(mapOf()),
                                    new VirtualMachineResourceNames()
                                        .withVmName("vexztvbtqgs")
                                        .withHostname("aoyzkoow")
                                        .withNetworkInterfaces(Arrays.asList())
                                        .withOsDiskName("nguxawqaldsy")
                                        .withDataDiskNames(mapOf()),
                                    new VirtualMachineResourceNames()
                                        .withVmName("imerqfobwyznk")
                                        .withHostname("kutwpf")
                                        .withNetworkInterfaces(Arrays.asList())
                                        .withOsDiskName("gmhrskdsnfdsdoak")
                                        .withDataDiskNames(mapOf()),
                                    new VirtualMachineResourceNames()
                                        .withVmName("lmkk")
                                        .withHostname("vdlhewpusdsttwv")
                                        .withNetworkInterfaces(Arrays.asList())
                                        .withOsDiskName("bbejdcngqqm")
                                        .withDataDiskNames(mapOf())))
                        .withAvailabilitySetName("ufgmjzrwrdg")
                        .withLoadBalancer(
                            new LoadBalancerResourceNames()
                                .withLoadBalancerName("aenuuz")
                                .withFrontendIpConfigurationNames(Arrays.asList("bminrfdwoyuhhzi", "iefozbhdmsml"))
                                .withBackendPoolNames(Arrays.asList("hoftr", "ae", "u", "ah"))
                                .withHealthProbeNames(
                                    Arrays.asList("slfaoqzpiyyl", "alnswhccsphk", "ivwitqscywugg", "oluhczbwemh"))))
                .withApplicationServer(
                    new ApplicationServerFullResourceNames()
                        .withVirtualMachines(
                            Arrays
                                .asList(
                                    new VirtualMachineResourceNames()
                                        .withVmName("rgzdwmsweyp")
                                        .withHostname("dxggicccnxqhuexm")
                                        .withNetworkInterfaces(Arrays.asList())
                                        .withOsDiskName("lstvlzywe")
                                        .withDataDiskNames(mapOf()),
                                    new VirtualMachineResourceNames()
                                        .withVmName("rncsdtclu")
                                        .withHostname("ypbsfgytguslfead")
                                        .withNetworkInterfaces(Arrays.asList())
                                        .withOsDiskName("qukyhejhzi")
                                        .withDataDiskNames(mapOf())))
                        .withAvailabilitySetName("fpel"))
                .withDatabaseServer(
                    new DatabaseServerFullResourceNames()
                        .withVirtualMachines(
                            Arrays
                                .asList(
                                    new VirtualMachineResourceNames()
                                        .withVmName("ksrpqv")
                                        .withHostname("zraehtwd")
                                        .withNetworkInterfaces(Arrays.asList())
                                        .withOsDiskName("tswiby")
                                        .withDataDiskNames(mapOf())))
                        .withAvailabilitySetName("l")
                        .withLoadBalancer(
                            new LoadBalancerResourceNames()
                                .withLoadBalancerName("hfwpracstwit")
                                .withFrontendIpConfigurationNames(Arrays.asList("evxccedcp", "md"))
                                .withBackendPoolNames(Arrays.asList("nwzxltjcv", "hlt", "ugcxnavvwxq", "byqunyow"))
                                .withHealthProbeNames(Arrays.asList("mdjrkvfgbvfvp", "bodacizsjq", "hkr", "ibdeibq"))))
                .withSharedStorage(
                    new SharedStorageResourceNames()
                        .withSharedStorageAccountName("kghv")
                        .withSharedStorageAccountPrivateEndPointName("dzwmkrefajpj"));
        model = BinaryData.fromObject(model).toObject(ThreeTierFullResourceNames.class);
        Assertions.assertEquals("oamciodh", model.centralServer().virtualMachines().get(0).vmName());
        Assertions.assertEquals("azxkhnzbonlwnto", model.centralServer().virtualMachines().get(0).hostname());
        Assertions.assertEquals("kdwbwhkszz", model.centralServer().virtualMachines().get(0).osDiskName());
        Assertions.assertEquals("ufgmjzrwrdg", model.centralServer().availabilitySetName());
        Assertions.assertEquals("aenuuz", model.centralServer().loadBalancer().loadBalancerName());
        Assertions
            .assertEquals(
                "bminrfdwoyuhhzi", model.centralServer().loadBalancer().frontendIpConfigurationNames().get(0));
        Assertions.assertEquals("hoftr", model.centralServer().loadBalancer().backendPoolNames().get(0));
        Assertions.assertEquals("slfaoqzpiyyl", model.centralServer().loadBalancer().healthProbeNames().get(0));
        Assertions.assertEquals("rgzdwmsweyp", model.applicationServer().virtualMachines().get(0).vmName());
        Assertions.assertEquals("dxggicccnxqhuexm", model.applicationServer().virtualMachines().get(0).hostname());
        Assertions.assertEquals("lstvlzywe", model.applicationServer().virtualMachines().get(0).osDiskName());
        Assertions.assertEquals("fpel", model.applicationServer().availabilitySetName());
        Assertions.assertEquals("ksrpqv", model.databaseServer().virtualMachines().get(0).vmName());
        Assertions.assertEquals("zraehtwd", model.databaseServer().virtualMachines().get(0).hostname());
        Assertions.assertEquals("tswiby", model.databaseServer().virtualMachines().get(0).osDiskName());
        Assertions.assertEquals("l", model.databaseServer().availabilitySetName());
        Assertions.assertEquals("hfwpracstwit", model.databaseServer().loadBalancer().loadBalancerName());
        Assertions
            .assertEquals("evxccedcp", model.databaseServer().loadBalancer().frontendIpConfigurationNames().get(0));
        Assertions.assertEquals("nwzxltjcv", model.databaseServer().loadBalancer().backendPoolNames().get(0));
        Assertions.assertEquals("mdjrkvfgbvfvp", model.databaseServer().loadBalancer().healthProbeNames().get(0));
        Assertions.assertEquals("kghv", model.sharedStorage().sharedStorageAccountName());
        Assertions.assertEquals("dzwmkrefajpj", model.sharedStorage().sharedStorageAccountPrivateEndPointName());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
