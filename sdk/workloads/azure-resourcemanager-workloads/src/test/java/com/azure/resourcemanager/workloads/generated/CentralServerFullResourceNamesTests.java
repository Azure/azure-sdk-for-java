// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.workloads.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.workloads.models.CentralServerFullResourceNames;
import com.azure.resourcemanager.workloads.models.LoadBalancerResourceNames;
import com.azure.resourcemanager.workloads.models.NetworkInterfaceResourceNames;
import com.azure.resourcemanager.workloads.models.VirtualMachineResourceNames;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class CentralServerFullResourceNamesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CentralServerFullResourceNames model = BinaryData.fromString(
            "{\"virtualMachines\":[{\"vmName\":\"egokdwbwhkszzcmr\",\"hostName\":\"xztvbtqgsfraoyzk\",\"networkInterfaces\":[{\"networkInterfaceName\":\"lmnguxaw\"}],\"osDiskName\":\"ldsyuuximerqfob\",\"dataDiskNames\":{\"tdlmkkzevd\":[\"kby\",\"utwpfhp\",\"gmhrskdsnfdsdoak\"],\"zr\":[\"ewpusdsttwvogvb\",\"ejdcngqqmoakuf\",\"m\"],\"yuhhziu\":[\"dgrtwaenuuzkopbm\",\"nrfdw\"],\"icslfaoq\":[\"fozbhdmsmlmzqhof\",\"rmaequ\",\"ah\"]}},{\"vmName\":\"iyylhalnswhccsp\",\"hostName\":\"aivwitqscywu\",\"networkInterfaces\":[{\"networkInterfaceName\":\"luhczbw\"},{\"networkInterfaceName\":\"hairsbrgzdwms\"},{\"networkInterfaceName\":\"ypqwdxggiccc\"},{\"networkInterfaceName\":\"qhuexm\"}],\"osDiskName\":\"tlstvlzywem\",\"dataDiskNames\":{\"isxgfp\":[\"csdtclusiypbs\",\"gytguslfead\",\"ygqukyhejh\"],\"aehtwd\":[\"olppvksrpqvujz\"],\"wpracstwitykhev\":[\"ftswibyrcdlbhsh\"]}}],\"availabilitySetName\":\"cedcpnmdy\",\"loadBalancer\":{\"loadBalancerName\":\"wzxltjc\",\"frontendIpConfigurationNames\":[\"ltiugcxnavv\"],\"backendPoolNames\":[\"ibyqunyowxwlmdj\"],\"healthProbeNames\":[\"fgbvfvpdbo\",\"acizsjqlhkrr\",\"bdeibqipqk\",\"hvxndzwmkrefajpj\"]}}")
            .toObject(CentralServerFullResourceNames.class);
        Assertions.assertEquals("egokdwbwhkszzcmr", model.virtualMachines().get(0).vmName());
        Assertions.assertEquals("xztvbtqgsfraoyzk", model.virtualMachines().get(0).hostname());
        Assertions.assertEquals("lmnguxaw",
            model.virtualMachines().get(0).networkInterfaces().get(0).networkInterfaceName());
        Assertions.assertEquals("ldsyuuximerqfob", model.virtualMachines().get(0).osDiskName());
        Assertions.assertEquals("kby", model.virtualMachines().get(0).dataDiskNames().get("tdlmkkzevd").get(0));
        Assertions.assertEquals("cedcpnmdy", model.availabilitySetName());
        Assertions.assertEquals("wzxltjc", model.loadBalancer().loadBalancerName());
        Assertions.assertEquals("ltiugcxnavv", model.loadBalancer().frontendIpConfigurationNames().get(0));
        Assertions.assertEquals("ibyqunyowxwlmdj", model.loadBalancer().backendPoolNames().get(0));
        Assertions.assertEquals("fgbvfvpdbo", model.loadBalancer().healthProbeNames().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CentralServerFullResourceNames model
            = new CentralServerFullResourceNames()
                .withVirtualMachines(
                    Arrays
                        .asList(
                            new VirtualMachineResourceNames().withVmName("egokdwbwhkszzcmr")
                                .withHostname("xztvbtqgsfraoyzk")
                                .withNetworkInterfaces(Arrays
                                    .asList(new NetworkInterfaceResourceNames().withNetworkInterfaceName("lmnguxaw")))
                                .withOsDiskName("ldsyuuximerqfob")
                                .withDataDiskNames(
                                    mapOf("tdlmkkzevd", Arrays.asList("kby", "utwpfhp", "gmhrskdsnfdsdoak"), "zr",
                                        Arrays.asList("ewpusdsttwvogvb", "ejdcngqqmoakuf", "m"), "yuhhziu",
                                        Arrays.asList("dgrtwaenuuzkopbm", "nrfdw"), "icslfaoq",
                                        Arrays.asList("fozbhdmsmlmzqhof", "rmaequ", "ah"))),
                            new VirtualMachineResourceNames().withVmName("iyylhalnswhccsp")
                                .withHostname("aivwitqscywu")
                                .withNetworkInterfaces(Arrays.asList(
                                    new NetworkInterfaceResourceNames().withNetworkInterfaceName("luhczbw"),
                                    new NetworkInterfaceResourceNames().withNetworkInterfaceName("hairsbrgzdwms"),
                                    new NetworkInterfaceResourceNames().withNetworkInterfaceName("ypqwdxggiccc"),
                                    new NetworkInterfaceResourceNames().withNetworkInterfaceName("qhuexm")))
                                .withOsDiskName("tlstvlzywem")
                                .withDataDiskNames(
                                    mapOf("isxgfp", Arrays.asList("csdtclusiypbs", "gytguslfead", "ygqukyhejh"),
                                        "aehtwd", Arrays.asList("olppvksrpqvujz"), "wpracstwitykhev",
                                        Arrays.asList("ftswibyrcdlbhsh")))))
                .withAvailabilitySetName("cedcpnmdy")
                .withLoadBalancer(new LoadBalancerResourceNames().withLoadBalancerName("wzxltjc")
                    .withFrontendIpConfigurationNames(Arrays.asList("ltiugcxnavv"))
                    .withBackendPoolNames(Arrays.asList("ibyqunyowxwlmdj"))
                    .withHealthProbeNames(
                        Arrays.asList("fgbvfvpdbo", "acizsjqlhkrr", "bdeibqipqk", "hvxndzwmkrefajpj")));
        model = BinaryData.fromObject(model).toObject(CentralServerFullResourceNames.class);
        Assertions.assertEquals("egokdwbwhkszzcmr", model.virtualMachines().get(0).vmName());
        Assertions.assertEquals("xztvbtqgsfraoyzk", model.virtualMachines().get(0).hostname());
        Assertions.assertEquals("lmnguxaw",
            model.virtualMachines().get(0).networkInterfaces().get(0).networkInterfaceName());
        Assertions.assertEquals("ldsyuuximerqfob", model.virtualMachines().get(0).osDiskName());
        Assertions.assertEquals("kby", model.virtualMachines().get(0).dataDiskNames().get("tdlmkkzevd").get(0));
        Assertions.assertEquals("cedcpnmdy", model.availabilitySetName());
        Assertions.assertEquals("wzxltjc", model.loadBalancer().loadBalancerName());
        Assertions.assertEquals("ltiugcxnavv", model.loadBalancer().frontendIpConfigurationNames().get(0));
        Assertions.assertEquals("ibyqunyowxwlmdj", model.loadBalancer().backendPoolNames().get(0));
        Assertions.assertEquals("fgbvfvpdbo", model.loadBalancer().healthProbeNames().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
