// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.workloads.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.workloads.WorkloadsManager;
import com.azure.resourcemanager.workloads.models.EnqueueReplicationServerProperties;
import com.azure.resourcemanager.workloads.models.EnqueueServerProperties;
import com.azure.resourcemanager.workloads.models.GatewayServerProperties;
import com.azure.resourcemanager.workloads.models.MessageServerProperties;
import com.azure.resourcemanager.workloads.models.SapCentralServerInstance;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class SapCentralInstancesCreateMockTests {
    @Test
    public void testCreate() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"instanceNo\":\"dqbwpypqtgsfja\",\"subnet\":\"slhhxudbxv\",\"messageServerProperties\":{\"msPort\":3476105471330074630,\"internalMsPort\":4620463543237855952,\"httpPort\":3579473819283071102,\"httpsPort\":522814180418790552,\"hostname\":\"sckdlp\",\"ipAddress\":\"zrcxfailcfxwmdbo\",\"health\":\"Unhealthy\"},\"enqueueServerProperties\":{\"hostname\":\"ft\",\"ipAddress\":\"qobr\",\"port\":3034279146046559675,\"health\":\"Degraded\"},\"gatewayServerProperties\":{\"port\":7176311738598981100,\"health\":\"Unhealthy\"},\"enqueueReplicationServerProperties\":{\"ersVersion\":\"EnqueueReplicator1\",\"instanceNo\":\"v\",\"hostname\":\"nrzvuljraaer\",\"kernelVersion\":\"okqgukkjq\",\"kernelPatch\":\"broyla\",\"ipAddress\":\"ulcdisdosf\",\"health\":\"Unknown\"},\"kernelVersion\":\"vgjrwhr\",\"kernelPatch\":\"ycy\",\"loadBalancerDetails\":{\"id\":\"lxgccknfnwmbtm\"},\"vmDetails\":[],\"status\":\"Offline\",\"health\":\"Unknown\",\"provisioningState\":\"Succeeded\",\"errors\":{}},\"location\":\"fedxihchrphkm\",\"tags\":{\"fzpbgtgkyl\":\"dqns\",\"jeuut\":\"dgh\",\"bwnhhtql\":\"wxezwzhok\"},\"id\":\"ehgpp\",\"name\":\"pifhpfeoajvgcxtx\",\"type\":\"csheafidltugsr\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        WorkloadsManager manager =
            WorkloadsManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        SapCentralServerInstance response =
            manager
                .sapCentralInstances()
                .define("pqfrtqlkz")
                .withRegion("cxcktpi")
                .withExistingSapVirtualInstance("xpmyyefrpmpdnq", "skawaoqvmmb")
                .withTags(mapOf("qiekkkzddrt", "rteeamm", "ojbmxv", "g", "cuijpxt", "vrefdeesv", "wprtu", "s"))
                .withMessageServerProperties(new MessageServerProperties())
                .withEnqueueServerProperties(new EnqueueServerProperties())
                .withGatewayServerProperties(new GatewayServerProperties())
                .withEnqueueReplicationServerProperties(new EnqueueReplicationServerProperties())
                .create();

        Assertions.assertEquals("fedxihchrphkm", response.location());
        Assertions.assertEquals("dqns", response.tags().get("fzpbgtgkyl"));
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
