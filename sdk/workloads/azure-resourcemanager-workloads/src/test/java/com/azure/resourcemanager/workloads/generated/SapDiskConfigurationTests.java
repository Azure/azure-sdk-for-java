// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.workloads.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.workloads.models.DiskDetails;
import com.azure.resourcemanager.workloads.models.DiskSku;
import com.azure.resourcemanager.workloads.models.DiskSkuName;
import com.azure.resourcemanager.workloads.models.DiskVolumeConfiguration;
import com.azure.resourcemanager.workloads.models.SapDiskConfiguration;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class SapDiskConfigurationTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SapDiskConfiguration model = BinaryData.fromString(
            "{\"recommendedConfiguration\":{\"count\":6997715187439318616,\"sizeGB\":4759232792009558942,\"sku\":{\"name\":\"StandardSSD_LRS\"}},\"supportedConfigurations\":[{\"sku\":{\"name\":\"Premium_ZRS\"},\"sizeGB\":1289256084075144216,\"minimumSupportedDiskCount\":303982074235315282,\"maximumSupportedDiskCount\":8785786521474352185,\"iopsReadWrite\":6520333943922226345,\"mbpsReadWrite\":7134586598474026548,\"diskTier\":\"htnapczwlokjyem\"},{\"sku\":{\"name\":\"StandardSSD_ZRS\"},\"sizeGB\":792921284197853575,\"minimumSupportedDiskCount\":1497253057352071787,\"maximumSupportedDiskCount\":6610645791355850354,\"iopsReadWrite\":7610491925861938468,\"mbpsReadWrite\":8161422298769857589,\"diskTier\":\"dmailzydehojw\"}]}")
            .toObject(SapDiskConfiguration.class);
        Assertions.assertEquals(6997715187439318616L, model.recommendedConfiguration().count());
        Assertions.assertEquals(4759232792009558942L, model.recommendedConfiguration().sizeGB());
        Assertions.assertEquals(DiskSkuName.STANDARD_SSD_LRS, model.recommendedConfiguration().sku().name());
        Assertions.assertEquals(DiskSkuName.PREMIUM_ZRS, model.supportedConfigurations().get(0).sku().name());
        Assertions.assertEquals(1289256084075144216L, model.supportedConfigurations().get(0).sizeGB());
        Assertions.assertEquals(303982074235315282L,
            model.supportedConfigurations().get(0).minimumSupportedDiskCount());
        Assertions.assertEquals(8785786521474352185L,
            model.supportedConfigurations().get(0).maximumSupportedDiskCount());
        Assertions.assertEquals(6520333943922226345L, model.supportedConfigurations().get(0).iopsReadWrite());
        Assertions.assertEquals(7134586598474026548L, model.supportedConfigurations().get(0).mbpsReadWrite());
        Assertions.assertEquals("htnapczwlokjyem", model.supportedConfigurations().get(0).diskTier());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SapDiskConfiguration model = new SapDiskConfiguration()
            .withRecommendedConfiguration(new DiskVolumeConfiguration().withCount(6997715187439318616L)
                .withSizeGB(4759232792009558942L)
                .withSku(new DiskSku().withName(DiskSkuName.STANDARD_SSD_LRS)))
            .withSupportedConfigurations(Arrays.asList(
                new DiskDetails().withSku(new DiskSku().withName(DiskSkuName.PREMIUM_ZRS))
                    .withSizeGB(1289256084075144216L)
                    .withMinimumSupportedDiskCount(303982074235315282L)
                    .withMaximumSupportedDiskCount(8785786521474352185L)
                    .withIopsReadWrite(6520333943922226345L)
                    .withMbpsReadWrite(7134586598474026548L)
                    .withDiskTier("htnapczwlokjyem"),
                new DiskDetails().withSku(new DiskSku().withName(DiskSkuName.STANDARD_SSD_ZRS))
                    .withSizeGB(792921284197853575L)
                    .withMinimumSupportedDiskCount(1497253057352071787L)
                    .withMaximumSupportedDiskCount(6610645791355850354L)
                    .withIopsReadWrite(7610491925861938468L)
                    .withMbpsReadWrite(8161422298769857589L)
                    .withDiskTier("dmailzydehojw")));
        model = BinaryData.fromObject(model).toObject(SapDiskConfiguration.class);
        Assertions.assertEquals(6997715187439318616L, model.recommendedConfiguration().count());
        Assertions.assertEquals(4759232792009558942L, model.recommendedConfiguration().sizeGB());
        Assertions.assertEquals(DiskSkuName.STANDARD_SSD_LRS, model.recommendedConfiguration().sku().name());
        Assertions.assertEquals(DiskSkuName.PREMIUM_ZRS, model.supportedConfigurations().get(0).sku().name());
        Assertions.assertEquals(1289256084075144216L, model.supportedConfigurations().get(0).sizeGB());
        Assertions.assertEquals(303982074235315282L,
            model.supportedConfigurations().get(0).minimumSupportedDiskCount());
        Assertions.assertEquals(8785786521474352185L,
            model.supportedConfigurations().get(0).maximumSupportedDiskCount());
        Assertions.assertEquals(6520333943922226345L, model.supportedConfigurations().get(0).iopsReadWrite());
        Assertions.assertEquals(7134586598474026548L, model.supportedConfigurations().get(0).mbpsReadWrite());
        Assertions.assertEquals("htnapczwlokjyem", model.supportedConfigurations().get(0).diskTier());
    }
}
