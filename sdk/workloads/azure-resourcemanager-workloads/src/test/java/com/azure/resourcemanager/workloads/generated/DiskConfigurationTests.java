// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.workloads.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.workloads.models.DiskConfiguration;
import com.azure.resourcemanager.workloads.models.DiskSku;
import com.azure.resourcemanager.workloads.models.DiskSkuName;
import com.azure.resourcemanager.workloads.models.DiskVolumeConfiguration;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DiskConfigurationTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DiskConfiguration model =
            BinaryData
                .fromString(
                    "{\"diskVolumeConfigurations\":{\"ayrhyrnx\":{\"count\":518441316636125291,\"sizeGB\":3293885561538827205,\"sku\":{\"name\":\"PremiumV2_LRS\"}},\"v\":{\"count\":1657419207735448548,\"sizeGB\":9137242569252833170,\"sku\":{\"name\":\"PremiumV2_LRS\"}},\"alm\":{\"count\":3986326733214005817,\"sizeGB\":3301219158336825133,\"sku\":{\"name\":\"PremiumV2_LRS\"}}}}")
                .toObject(DiskConfiguration.class);
        Assertions.assertEquals(518441316636125291L, model.diskVolumeConfigurations().get("ayrhyrnx").count());
        Assertions.assertEquals(3293885561538827205L, model.diskVolumeConfigurations().get("ayrhyrnx").sizeGB());
        Assertions
            .assertEquals(DiskSkuName.PREMIUM_V2_LRS, model.diskVolumeConfigurations().get("ayrhyrnx").sku().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DiskConfiguration model =
            new DiskConfiguration()
                .withDiskVolumeConfigurations(
                    mapOf(
                        "ayrhyrnx",
                        new DiskVolumeConfiguration()
                            .withCount(518441316636125291L)
                            .withSizeGB(3293885561538827205L)
                            .withSku(new DiskSku().withName(DiskSkuName.PREMIUM_V2_LRS)),
                        "v",
                        new DiskVolumeConfiguration()
                            .withCount(1657419207735448548L)
                            .withSizeGB(9137242569252833170L)
                            .withSku(new DiskSku().withName(DiskSkuName.PREMIUM_V2_LRS)),
                        "alm",
                        new DiskVolumeConfiguration()
                            .withCount(3986326733214005817L)
                            .withSizeGB(3301219158336825133L)
                            .withSku(new DiskSku().withName(DiskSkuName.PREMIUM_V2_LRS))));
        model = BinaryData.fromObject(model).toObject(DiskConfiguration.class);
        Assertions.assertEquals(518441316636125291L, model.diskVolumeConfigurations().get("ayrhyrnx").count());
        Assertions.assertEquals(3293885561538827205L, model.diskVolumeConfigurations().get("ayrhyrnx").sizeGB());
        Assertions
            .assertEquals(DiskSkuName.PREMIUM_V2_LRS, model.diskVolumeConfigurations().get("ayrhyrnx").sku().name());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
