// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.workloads.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.workloads.models.DiskConfiguration;
import com.azure.resourcemanager.workloads.models.DiskSku;
import com.azure.resourcemanager.workloads.models.DiskSkuName;
import com.azure.resourcemanager.workloads.models.DiskVolumeConfiguration;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DiskConfigurationTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DiskConfiguration model = BinaryData.fromString(
            "{\"diskVolumeConfigurations\":{\"jfdtwssotftpvj\":{\"count\":2286553910358069474,\"sizeGB\":5990216587260133822,\"sku\":{\"name\":\"Premium_LRS\"}},\"qqnvwpmq\":{\"count\":8303911293982319120,\"sizeGB\":651752597881008375,\"sku\":{\"name\":\"PremiumV2_LRS\"}}}}")
            .toObject(DiskConfiguration.class);
        Assertions.assertEquals(2286553910358069474L, model.diskVolumeConfigurations().get("jfdtwssotftpvj").count());
        Assertions.assertEquals(5990216587260133822L, model.diskVolumeConfigurations().get("jfdtwssotftpvj").sizeGB());
        Assertions.assertEquals(DiskSkuName.PREMIUM_LRS,
            model.diskVolumeConfigurations().get("jfdtwssotftpvj").sku().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DiskConfiguration model = new DiskConfiguration().withDiskVolumeConfigurations(mapOf("jfdtwssotftpvj",
            new DiskVolumeConfiguration().withCount(2286553910358069474L)
                .withSizeGB(5990216587260133822L)
                .withSku(new DiskSku().withName(DiskSkuName.PREMIUM_LRS)),
            "qqnvwpmq",
            new DiskVolumeConfiguration().withCount(8303911293982319120L)
                .withSizeGB(651752597881008375L)
                .withSku(new DiskSku().withName(DiskSkuName.PREMIUM_V2_LRS))));
        model = BinaryData.fromObject(model).toObject(DiskConfiguration.class);
        Assertions.assertEquals(2286553910358069474L, model.diskVolumeConfigurations().get("jfdtwssotftpvj").count());
        Assertions.assertEquals(5990216587260133822L, model.diskVolumeConfigurations().get("jfdtwssotftpvj").sizeGB());
        Assertions.assertEquals(DiskSkuName.PREMIUM_LRS,
            model.diskVolumeConfigurations().get("jfdtwssotftpvj").sku().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
