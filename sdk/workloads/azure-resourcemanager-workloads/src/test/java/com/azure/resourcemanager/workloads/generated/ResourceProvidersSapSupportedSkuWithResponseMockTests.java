// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.workloads.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.workloads.WorkloadsManager;
import com.azure.resourcemanager.workloads.models.SapDatabaseType;
import com.azure.resourcemanager.workloads.models.SapDeploymentType;
import com.azure.resourcemanager.workloads.models.SapEnvironmentType;
import com.azure.resourcemanager.workloads.models.SapHighAvailabilityType;
import com.azure.resourcemanager.workloads.models.SapProductType;
import com.azure.resourcemanager.workloads.models.SapSupportedResourceSkusResult;
import com.azure.resourcemanager.workloads.models.SapSupportedSkusRequest;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class ResourceProvidersSapSupportedSkuWithResponseMockTests {
    @Test
    public void testSapSupportedSkuWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"supportedSkus\":[{\"vmSku\":\"ezbrhubskh\",\"isAppServerCertified\":false,\"isDatabaseCertified\":false},{\"vmSku\":\"okkqfqjbvleo\",\"isAppServerCertified\":false,\"isDatabaseCertified\":true},{\"vmSku\":\"qtqzfavyv\",\"isAppServerCertified\":true,\"isDatabaseCertified\":false}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        WorkloadsManager manager =
            WorkloadsManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        SapSupportedResourceSkusResult response =
            manager
                .resourceProviders()
                .sapSupportedSkuWithResponse(
                    "lkxt",
                    new SapSupportedSkusRequest()
                        .withAppLocation("qjfsmlmbtxhw")
                        .withEnvironment(SapEnvironmentType.PROD)
                        .withSapProduct(SapProductType.ECC)
                        .withDeploymentType(SapDeploymentType.THREE_TIER)
                        .withDatabaseType(SapDatabaseType.DB2)
                        .withHighAvailabilityType(SapHighAvailabilityType.AVAILABILITY_SET),
                    com.azure.core.util.Context.NONE)
                .getValue();

        Assertions.assertEquals("ezbrhubskh", response.supportedSkus().get(0).vmSku());
        Assertions.assertEquals(false, response.supportedSkus().get(0).isAppServerCertified());
        Assertions.assertEquals(false, response.supportedSkus().get(0).isDatabaseCertified());
    }
}
