// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.workloads.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.workloads.WorkloadsManager;
import com.azure.resourcemanager.workloads.models.OperationStatusResult;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class SapApplicationServerInstancesStartInstanceMockTests {
    @Test
    public void testStartInstance() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"id\":\"fyq\",\"name\":\"mpqoxw\",\"status\":\"o\",\"percentComplete\":83.0155,\"startTime\":\"2021-10-25T21:58:45Z\",\"endTime\":\"2021-06-01T11:36:06Z\",\"operations\":[{\"id\":\"qbi\",\"name\":\"tmwwi\",\"status\":\"h\",\"percentComplete\":1.0753572,\"startTime\":\"2021-10-07T22:05:50Z\",\"endTime\":\"2021-08-29T23:41:34Z\",\"operations\":[]},{\"id\":\"blembnkbwvqvxkd\",\"name\":\"qihebw\",\"status\":\"swbzuwfmdurage\",\"percentComplete\":94.52003,\"startTime\":\"2021-03-19T22:44:45Z\",\"endTime\":\"2021-04-19T17:07:33Z\",\"operations\":[]}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        WorkloadsManager manager =
            WorkloadsManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        OperationStatusResult response =
            manager
                .sapApplicationServerInstances()
                .startInstance("fgtayxonsup", "ujlzqnhcvsqltn", "oibgsxg", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("fyq", response.id());
        Assertions.assertEquals("mpqoxw", response.name());
        Assertions.assertEquals("o", response.status());
        Assertions.assertEquals(83.0155F, response.percentComplete());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-25T21:58:45Z"), response.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-01T11:36:06Z"), response.endTime());
        Assertions.assertEquals("qbi", response.operations().get(0).id());
        Assertions.assertEquals("tmwwi", response.operations().get(0).name());
        Assertions.assertEquals("h", response.operations().get(0).status());
        Assertions.assertEquals(1.0753572F, response.operations().get(0).percentComplete());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-07T22:05:50Z"), response.operations().get(0).startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-29T23:41:34Z"), response.operations().get(0).endTime());
    }
}
