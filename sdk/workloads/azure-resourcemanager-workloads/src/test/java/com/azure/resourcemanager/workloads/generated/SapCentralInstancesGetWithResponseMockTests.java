// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.workloads.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.workloads.WorkloadsManager;
import com.azure.resourcemanager.workloads.models.SapCentralServerInstance;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class SapCentralInstancesGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"instanceNo\":\"b\",\"subnet\":\"qvkjlmxho\",\"messageServerProperties\":{\"msPort\":4997501643254233811,\"internalMsPort\":5593659060766409421,\"httpPort\":7830011600029821533,\"httpsPort\":8542607541741441378,\"hostname\":\"aauzzptjazysd\",\"ipAddress\":\"ezwwv\",\"health\":\"Unhealthy\"},\"enqueueServerProperties\":{\"hostname\":\"vv\",\"ipAddress\":\"nk\",\"port\":7483475078710435538,\"health\":\"Unhealthy\"},\"gatewayServerProperties\":{\"port\":650828533296238528,\"health\":\"Unknown\"},\"enqueueReplicationServerProperties\":{\"ersVersion\":\"EnqueueReplicator2\",\"instanceNo\":\"uwmncs\",\"hostname\":\"ijf\",\"kernelVersion\":\"vpo\",\"kernelPatch\":\"rsg\",\"ipAddress\":\"b\",\"health\":\"Degraded\"},\"kernelVersion\":\"qgnjdgkynscli\",\"kernelPatch\":\"zvhxnk\",\"loadBalancerDetails\":{\"id\":\"kubotppnvdxz\"},\"vmDetails\":[],\"status\":\"Running\",\"health\":\"Unknown\",\"provisioningState\":\"Updating\",\"errors\":{}},\"location\":\"agtltdhlfkqoj\",\"tags\":{\"ymbrnysuxmpraf\":\"vgtrdcnifmzzs\",\"khocxvdfffwaf\":\"g\"},\"id\":\"roud\",\"name\":\"spave\",\"type\":\"hrv\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        WorkloadsManager manager =
            WorkloadsManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        SapCentralServerInstance response =
            manager
                .sapCentralInstances()
                .getWithResponse("iayz", "iykhy", "wf", com.azure.core.util.Context.NONE)
                .getValue();

        Assertions.assertEquals("agtltdhlfkqoj", response.location());
        Assertions.assertEquals("vgtrdcnifmzzs", response.tags().get("ymbrnysuxmpraf"));
    }
}
