// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.workloads.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.workloads.WorkloadsManager;
import com.azure.resourcemanager.workloads.models.SapCentralServerInstance;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class SapCentralInstancesGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"instanceNo\":\"yavluwmncstt\",\"subnet\":\"fybvpoek\",\"messageServerProperties\":{\"msPort\":7276264022377054944,\"internalMsPort\":2461369316947674371,\"httpPort\":1237849568451312490,\"httpsPort\":4425006145416997575,\"hostname\":\"gkynscliqh\",\"ipAddress\":\"h\",\"health\":\"Unhealthy\"},\"enqueueServerProperties\":{\"hostname\":\"tkubotppn\",\"ipAddress\":\"xz\",\"port\":2942328619662803752,\"health\":\"Healthy\"},\"gatewayServerProperties\":{\"port\":2533895857219482332,\"health\":\"Unknown\"},\"enqueueReplicationServerProperties\":{\"ersVersion\":\"EnqueueReplicator2\",\"instanceNo\":\"tdhlfkqo\",\"hostname\":\"ykvgtrdcnifmz\",\"kernelVersion\":\"dymbrny\",\"kernelPatch\":\"xmprafwg\",\"ipAddress\":\"hocxvdfffwafqrou\",\"health\":\"Healthy\"},\"kernelVersion\":\"avehhrvkbunzo\",\"kernelPatch\":\"dhcxgkmoy\",\"loadBalancerDetails\":{\"id\":\"yuibhm\"},\"vmDetails\":[],\"status\":\"Offline\",\"health\":\"Unhealthy\",\"provisioningState\":\"Deleting\",\"errors\":{}},\"location\":\"jnaeois\",\"tags\":{\"w\":\"mgorffukisc\",\"tg\":\"zhwplefaxvxilc\",\"qxtjjfzqlqhyca\":\"hnze\",\"beesmieknlra\":\"odggx\"},\"id\":\"iaa\",\"name\":\"iuagydwqfbylyrfg\",\"type\":\"agt\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        WorkloadsManager manager =
            WorkloadsManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        SapCentralServerInstance response =
            manager
                .sapCentralInstances()
                .getWithResponse("hezwwvaiq", "uvvfonkp", "hqyikvy", com.azure.core.util.Context.NONE)
                .getValue();

        Assertions.assertEquals("jnaeois", response.location());
        Assertions.assertEquals("mgorffukisc", response.tags().get("w"));
    }
}
