// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.workloads.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Gets or sets the SID groupings by landscape and Environment.
 */
@Fluent
public final class SapLandscapeMonitorPropertiesGrouping
    implements JsonSerializable<SapLandscapeMonitorPropertiesGrouping> {
    /*
     * Gets or sets the list of landscape to SID mappings.
     */
    private List<SapLandscapeMonitorSidMapping> landscape;

    /*
     * Gets or sets the list of Sap Applications to SID mappings.
     */
    private List<SapLandscapeMonitorSidMapping> sapApplication;

    /**
     * Creates an instance of SapLandscapeMonitorPropertiesGrouping class.
     */
    public SapLandscapeMonitorPropertiesGrouping() {
    }

    /**
     * Get the landscape property: Gets or sets the list of landscape to SID mappings.
     * 
     * @return the landscape value.
     */
    public List<SapLandscapeMonitorSidMapping> landscape() {
        return this.landscape;
    }

    /**
     * Set the landscape property: Gets or sets the list of landscape to SID mappings.
     * 
     * @param landscape the landscape value to set.
     * @return the SapLandscapeMonitorPropertiesGrouping object itself.
     */
    public SapLandscapeMonitorPropertiesGrouping withLandscape(List<SapLandscapeMonitorSidMapping> landscape) {
        this.landscape = landscape;
        return this;
    }

    /**
     * Get the sapApplication property: Gets or sets the list of Sap Applications to SID mappings.
     * 
     * @return the sapApplication value.
     */
    public List<SapLandscapeMonitorSidMapping> sapApplication() {
        return this.sapApplication;
    }

    /**
     * Set the sapApplication property: Gets or sets the list of Sap Applications to SID mappings.
     * 
     * @param sapApplication the sapApplication value to set.
     * @return the SapLandscapeMonitorPropertiesGrouping object itself.
     */
    public SapLandscapeMonitorPropertiesGrouping
        withSapApplication(List<SapLandscapeMonitorSidMapping> sapApplication) {
        this.sapApplication = sapApplication;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (landscape() != null) {
            landscape().forEach(e -> e.validate());
        }
        if (sapApplication() != null) {
            sapApplication().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("landscape", this.landscape, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("sapApplication", this.sapApplication,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SapLandscapeMonitorPropertiesGrouping from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SapLandscapeMonitorPropertiesGrouping if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SapLandscapeMonitorPropertiesGrouping.
     */
    public static SapLandscapeMonitorPropertiesGrouping fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SapLandscapeMonitorPropertiesGrouping deserializedSapLandscapeMonitorPropertiesGrouping
                = new SapLandscapeMonitorPropertiesGrouping();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("landscape".equals(fieldName)) {
                    List<SapLandscapeMonitorSidMapping> landscape
                        = reader.readArray(reader1 -> SapLandscapeMonitorSidMapping.fromJson(reader1));
                    deserializedSapLandscapeMonitorPropertiesGrouping.landscape = landscape;
                } else if ("sapApplication".equals(fieldName)) {
                    List<SapLandscapeMonitorSidMapping> sapApplication
                        = reader.readArray(reader1 -> SapLandscapeMonitorSidMapping.fromJson(reader1));
                    deserializedSapLandscapeMonitorPropertiesGrouping.sapApplication = sapApplication;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSapLandscapeMonitorPropertiesGrouping;
        });
    }
}
