// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.workloads.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.workloads.models.SkuCapability;
import com.azure.resourcemanager.workloads.models.SkuCost;
import com.azure.resourcemanager.workloads.models.SkuLocationAndZones;
import com.azure.resourcemanager.workloads.models.SkuRestriction;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** The SKU definition. */
@Fluent
public final class SkuDefinitionInner {
    /*
     * The name of the SKU.
     */
    @JsonProperty(value = "name", required = true)
    private String name;

    /*
     * Resource type the SKU applicable for.
     */
    @JsonProperty(value = "resourceType")
    private String resourceType;

    /*
     * This field is required to be implemented by the Resource Provider if the
     * service has more than one tier, but is not required on a PUT.
     */
    @JsonProperty(value = "tier")
    private String tier;

    /*
     * The SKU size. When the name field is the combination of tier and some
     * other value, this would be the standalone code.
     */
    @JsonProperty(value = "size")
    private String size;

    /*
     * If the service has different generations of hardware, for the same SKU,
     * then that can be captured here.
     */
    @JsonProperty(value = "family")
    private String family;

    /*
     * If the service has different kinds of hardware, for the same SKU, then
     * that can be captured here.
     */
    @JsonProperty(value = "kind")
    private String kind;

    /*
     * List of locations where this SKU is available.
     */
    @JsonProperty(value = "locations")
    private List<String> locations;

    /*
     * List of locations where this SKU is available.
     */
    @JsonProperty(value = "locationInfo")
    private List<SkuLocationAndZones> locationInfo;

    /*
     * If the SKU supports scale out/in then the capacity integer should be
     * included. If scale out/in is not possible for the resource this may be
     * omitted.
     */
    @JsonProperty(value = "capacity")
    private Object capacity;

    /*
     * The SKU costs.
     */
    @JsonProperty(value = "costs")
    private List<SkuCost> costs;

    /*
     * The SKU capabilities.
     */
    @JsonProperty(value = "capabilities")
    private List<SkuCapability> capabilities;

    /*
     * The SKU restrictions.
     */
    @JsonProperty(value = "restrictions")
    private List<SkuRestriction> restrictions;

    /**
     * Get the name property: The name of the SKU.
     *
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: The name of the SKU.
     *
     * @param name the name value to set.
     * @return the SkuDefinitionInner object itself.
     */
    public SkuDefinitionInner withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the resourceType property: Resource type the SKU applicable for.
     *
     * @return the resourceType value.
     */
    public String resourceType() {
        return this.resourceType;
    }

    /**
     * Set the resourceType property: Resource type the SKU applicable for.
     *
     * @param resourceType the resourceType value to set.
     * @return the SkuDefinitionInner object itself.
     */
    public SkuDefinitionInner withResourceType(String resourceType) {
        this.resourceType = resourceType;
        return this;
    }

    /**
     * Get the tier property: This field is required to be implemented by the Resource Provider if the service has more
     * than one tier, but is not required on a PUT.
     *
     * @return the tier value.
     */
    public String tier() {
        return this.tier;
    }

    /**
     * Set the tier property: This field is required to be implemented by the Resource Provider if the service has more
     * than one tier, but is not required on a PUT.
     *
     * @param tier the tier value to set.
     * @return the SkuDefinitionInner object itself.
     */
    public SkuDefinitionInner withTier(String tier) {
        this.tier = tier;
        return this;
    }

    /**
     * Get the size property: The SKU size. When the name field is the combination of tier and some other value, this
     * would be the standalone code.
     *
     * @return the size value.
     */
    public String size() {
        return this.size;
    }

    /**
     * Set the size property: The SKU size. When the name field is the combination of tier and some other value, this
     * would be the standalone code.
     *
     * @param size the size value to set.
     * @return the SkuDefinitionInner object itself.
     */
    public SkuDefinitionInner withSize(String size) {
        this.size = size;
        return this;
    }

    /**
     * Get the family property: If the service has different generations of hardware, for the same SKU, then that can be
     * captured here.
     *
     * @return the family value.
     */
    public String family() {
        return this.family;
    }

    /**
     * Set the family property: If the service has different generations of hardware, for the same SKU, then that can be
     * captured here.
     *
     * @param family the family value to set.
     * @return the SkuDefinitionInner object itself.
     */
    public SkuDefinitionInner withFamily(String family) {
        this.family = family;
        return this;
    }

    /**
     * Get the kind property: If the service has different kinds of hardware, for the same SKU, then that can be
     * captured here.
     *
     * @return the kind value.
     */
    public String kind() {
        return this.kind;
    }

    /**
     * Set the kind property: If the service has different kinds of hardware, for the same SKU, then that can be
     * captured here.
     *
     * @param kind the kind value to set.
     * @return the SkuDefinitionInner object itself.
     */
    public SkuDefinitionInner withKind(String kind) {
        this.kind = kind;
        return this;
    }

    /**
     * Get the locations property: List of locations where this SKU is available.
     *
     * @return the locations value.
     */
    public List<String> locations() {
        return this.locations;
    }

    /**
     * Set the locations property: List of locations where this SKU is available.
     *
     * @param locations the locations value to set.
     * @return the SkuDefinitionInner object itself.
     */
    public SkuDefinitionInner withLocations(List<String> locations) {
        this.locations = locations;
        return this;
    }

    /**
     * Get the locationInfo property: List of locations where this SKU is available.
     *
     * @return the locationInfo value.
     */
    public List<SkuLocationAndZones> locationInfo() {
        return this.locationInfo;
    }

    /**
     * Set the locationInfo property: List of locations where this SKU is available.
     *
     * @param locationInfo the locationInfo value to set.
     * @return the SkuDefinitionInner object itself.
     */
    public SkuDefinitionInner withLocationInfo(List<SkuLocationAndZones> locationInfo) {
        this.locationInfo = locationInfo;
        return this;
    }

    /**
     * Get the capacity property: If the SKU supports scale out/in then the capacity integer should be included. If
     * scale out/in is not possible for the resource this may be omitted.
     *
     * @return the capacity value.
     */
    public Object capacity() {
        return this.capacity;
    }

    /**
     * Set the capacity property: If the SKU supports scale out/in then the capacity integer should be included. If
     * scale out/in is not possible for the resource this may be omitted.
     *
     * @param capacity the capacity value to set.
     * @return the SkuDefinitionInner object itself.
     */
    public SkuDefinitionInner withCapacity(Object capacity) {
        this.capacity = capacity;
        return this;
    }

    /**
     * Get the costs property: The SKU costs.
     *
     * @return the costs value.
     */
    public List<SkuCost> costs() {
        return this.costs;
    }

    /**
     * Set the costs property: The SKU costs.
     *
     * @param costs the costs value to set.
     * @return the SkuDefinitionInner object itself.
     */
    public SkuDefinitionInner withCosts(List<SkuCost> costs) {
        this.costs = costs;
        return this;
    }

    /**
     * Get the capabilities property: The SKU capabilities.
     *
     * @return the capabilities value.
     */
    public List<SkuCapability> capabilities() {
        return this.capabilities;
    }

    /**
     * Set the capabilities property: The SKU capabilities.
     *
     * @param capabilities the capabilities value to set.
     * @return the SkuDefinitionInner object itself.
     */
    public SkuDefinitionInner withCapabilities(List<SkuCapability> capabilities) {
        this.capabilities = capabilities;
        return this;
    }

    /**
     * Get the restrictions property: The SKU restrictions.
     *
     * @return the restrictions value.
     */
    public List<SkuRestriction> restrictions() {
        return this.restrictions;
    }

    /**
     * Set the restrictions property: The SKU restrictions.
     *
     * @param restrictions the restrictions value to set.
     * @return the SkuDefinitionInner object itself.
     */
    public SkuDefinitionInner withRestrictions(List<SkuRestriction> restrictions) {
        this.restrictions = restrictions;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (name() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property name in model SkuDefinitionInner"));
        }
        if (locationInfo() != null) {
            locationInfo().forEach(e -> e.validate());
        }
        if (costs() != null) {
            costs().forEach(e -> e.validate());
        }
        if (capabilities() != null) {
            capabilities().forEach(e -> e.validate());
        }
        if (restrictions() != null) {
            restrictions().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(SkuDefinitionInner.class);
}
