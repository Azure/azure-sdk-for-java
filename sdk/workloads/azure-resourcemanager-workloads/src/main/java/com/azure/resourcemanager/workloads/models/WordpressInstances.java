// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.workloads.models;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;
import com.azure.resourcemanager.workloads.fluent.models.WordpressInstanceResourceInner;

/** Resource collection API of WordpressInstances. */
public interface WordpressInstances {
    /**
     * Lists WordPress instance resources under a phpWorkload resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param phpWorkloadName Php workload name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return wordPress instance resource list as paginated response with {@link PagedIterable}.
     */
    PagedIterable<WordpressInstanceResource> list(String resourceGroupName, String phpWorkloadName);

    /**
     * Lists WordPress instance resources under a phpWorkload resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param phpWorkloadName Php workload name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return wordPress instance resource list as paginated response with {@link PagedIterable}.
     */
    PagedIterable<WordpressInstanceResource> list(String resourceGroupName, String phpWorkloadName, Context context);

    /**
     * Gets the WordPress instance resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param phpWorkloadName Php workload name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the WordPress instance resource.
     */
    WordpressInstanceResource get(String resourceGroupName, String phpWorkloadName);

    /**
     * Gets the WordPress instance resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param phpWorkloadName Php workload name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the WordPress instance resource along with {@link Response}.
     */
    Response<WordpressInstanceResource> getWithResponse(
        String resourceGroupName, String phpWorkloadName, Context context);

    /**
     * Create or updated WordPress instance resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param phpWorkloadName Php workload name.
     * @param wordpressInstanceResource Resource create or update request payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return wordPress instance resource.
     */
    WordpressInstanceResource createOrUpdate(
        String resourceGroupName, String phpWorkloadName, WordpressInstanceResourceInner wordpressInstanceResource);

    /**
     * Create or updated WordPress instance resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param phpWorkloadName Php workload name.
     * @param wordpressInstanceResource Resource create or update request payload.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return wordPress instance resource.
     */
    WordpressInstanceResource createOrUpdate(
        String resourceGroupName,
        String phpWorkloadName,
        WordpressInstanceResourceInner wordpressInstanceResource,
        Context context);

    /**
     * Delete WordPress instance resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param phpWorkloadName Php workload name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteByResourceGroup(String resourceGroupName, String phpWorkloadName);

    /**
     * Delete WordPress instance resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param phpWorkloadName Php workload name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    Response<Void> deleteWithResponse(String resourceGroupName, String phpWorkloadName, Context context);
}
