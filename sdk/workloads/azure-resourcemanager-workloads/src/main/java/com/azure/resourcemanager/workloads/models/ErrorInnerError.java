// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.workloads.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Object containing more specific information than the current object about the error.
 */
@Fluent
public final class ErrorInnerError implements JsonSerializable<ErrorInnerError> {
    /*
     * Standard error object.
     */
    private Error innerError;

    /**
     * Creates an instance of ErrorInnerError class.
     */
    public ErrorInnerError() {
    }

    /**
     * Get the innerError property: Standard error object.
     * 
     * @return the innerError value.
     */
    public Error innerError() {
        return this.innerError;
    }

    /**
     * Set the innerError property: Standard error object.
     * 
     * @param innerError the innerError value to set.
     * @return the ErrorInnerError object itself.
     */
    public ErrorInnerError withInnerError(Error innerError) {
        this.innerError = innerError;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerError() != null) {
            innerError().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("innerError", this.innerError);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ErrorInnerError from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ErrorInnerError if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ErrorInnerError.
     */
    public static ErrorInnerError fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ErrorInnerError deserializedErrorInnerError = new ErrorInnerError();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("innerError".equals(fieldName)) {
                    deserializedErrorInnerError.innerError = Error.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedErrorInnerError;
        });
    }
}
