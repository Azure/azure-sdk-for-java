// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.workloads.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.ProxyResource;
import com.azure.resourcemanager.workloads.models.ApplicationProvisioningState;
import com.azure.resourcemanager.workloads.models.WordpressVersions;
import com.fasterxml.jackson.annotation.JsonProperty;

/** WordPress instance resource. */
@Fluent
public final class WordpressInstanceResourceInner extends ProxyResource {
    /*
     * Resource properties
     */
    @JsonProperty(value = "properties")
    private WordpressInstanceResourceProperties innerProperties;

    /**
     * Get the innerProperties property: Resource properties.
     *
     * @return the innerProperties value.
     */
    private WordpressInstanceResourceProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the version property: Application version.
     *
     * @return the version value.
     */
    public WordpressVersions version() {
        return this.innerProperties() == null ? null : this.innerProperties().version();
    }

    /**
     * Set the version property: Application version.
     *
     * @param version the version value to set.
     * @return the WordpressInstanceResourceInner object itself.
     */
    public WordpressInstanceResourceInner withVersion(WordpressVersions version) {
        if (this.innerProperties() == null) {
            this.innerProperties = new WordpressInstanceResourceProperties();
        }
        this.innerProperties().withVersion(version);
        return this;
    }

    /**
     * Get the databaseName property: Database name used by the application.
     *
     * @return the databaseName value.
     */
    public String databaseName() {
        return this.innerProperties() == null ? null : this.innerProperties().databaseName();
    }

    /**
     * Set the databaseName property: Database name used by the application.
     *
     * @param databaseName the databaseName value to set.
     * @return the WordpressInstanceResourceInner object itself.
     */
    public WordpressInstanceResourceInner withDatabaseName(String databaseName) {
        if (this.innerProperties() == null) {
            this.innerProperties = new WordpressInstanceResourceProperties();
        }
        this.innerProperties().withDatabaseName(databaseName);
        return this;
    }

    /**
     * Get the databaseUser property: User name used by the application to connect to database.
     *
     * @return the databaseUser value.
     */
    public String databaseUser() {
        return this.innerProperties() == null ? null : this.innerProperties().databaseUser();
    }

    /**
     * Set the databaseUser property: User name used by the application to connect to database.
     *
     * @param databaseUser the databaseUser value to set.
     * @return the WordpressInstanceResourceInner object itself.
     */
    public WordpressInstanceResourceInner withDatabaseUser(String databaseUser) {
        if (this.innerProperties() == null) {
            this.innerProperties = new WordpressInstanceResourceProperties();
        }
        this.innerProperties().withDatabaseUser(databaseUser);
        return this;
    }

    /**
     * Get the siteUrl property: Site Url to access the WordPress application.
     *
     * @return the siteUrl value.
     */
    public String siteUrl() {
        return this.innerProperties() == null ? null : this.innerProperties().siteUrl();
    }

    /**
     * Get the provisioningState property: WordPress instance provisioning state.
     *
     * @return the provisioningState value.
     */
    public ApplicationProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }
}
