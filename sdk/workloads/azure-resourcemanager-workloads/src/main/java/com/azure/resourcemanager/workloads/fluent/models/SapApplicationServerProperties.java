// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.workloads.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.resourcemanager.workloads.models.SapHealthState;
import com.azure.resourcemanager.workloads.models.SapVirtualInstanceError;
import com.azure.resourcemanager.workloads.models.SapVirtualInstanceProvisioningState;
import com.azure.resourcemanager.workloads.models.SapVirtualInstanceStatus;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Defines the SAP Application Server properties. */
@Immutable
public final class SapApplicationServerProperties {
    /*
     * The application server instance id.
     */
    @JsonProperty(value = "instanceNo", access = JsonProperty.Access.WRITE_ONLY)
    private String instanceNo;

    /*
     * The application server subnet.
     */
    @JsonProperty(value = "subnet", access = JsonProperty.Access.WRITE_ONLY)
    private String subnet;

    /*
     * The application server SAP host name.
     */
    @JsonProperty(value = "hostname", access = JsonProperty.Access.WRITE_ONLY)
    private String hostname;

    /*
     * The application server SAP kernel version.
     */
    @JsonProperty(value = "kernelVersion", access = JsonProperty.Access.WRITE_ONLY)
    private String kernelVersion;

    /*
     * The application server SAP kernel patch.
     */
    @JsonProperty(value = "kernelPatch", access = JsonProperty.Access.WRITE_ONLY)
    private String kernelPatch;

    /*
     * The application server SAP IP Address.
     */
    @JsonProperty(value = "ipAddress", access = JsonProperty.Access.WRITE_ONLY)
    private String ipAddress;

    /*
     * The application server gateway Port.
     */
    @JsonProperty(value = "gatewayPort", access = JsonProperty.Access.WRITE_ONLY)
    private Long gatewayPort;

    /*
     * The application server ICM HTTP Port.
     */
    @JsonProperty(value = "icmHttpPort", access = JsonProperty.Access.WRITE_ONLY)
    private Long icmHttpPort;

    /*
     * The application server ICM HTTPS Port.
     */
    @JsonProperty(value = "icmHttpsPort", access = JsonProperty.Access.WRITE_ONLY)
    private Long icmHttpsPort;

    /*
     * The virtual machine.
     */
    @JsonProperty(value = "virtualMachineId", access = JsonProperty.Access.WRITE_ONLY)
    private String virtualMachineId;

    /*
     * Defines the SAP Instance status.
     */
    @JsonProperty(value = "status", access = JsonProperty.Access.WRITE_ONLY)
    private SapVirtualInstanceStatus status;

    /*
     * Defines the SAP Instance health.
     */
    @JsonProperty(value = "health", access = JsonProperty.Access.WRITE_ONLY)
    private SapHealthState health;

    /*
     * Defines the provisioning states.
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private SapVirtualInstanceProvisioningState provisioningState;

    /*
     * Defines the Application Instance errors.
     */
    @JsonProperty(value = "errors", access = JsonProperty.Access.WRITE_ONLY)
    private SapVirtualInstanceError errors;

    /**
     * Get the instanceNo property: The application server instance id.
     *
     * @return the instanceNo value.
     */
    public String instanceNo() {
        return this.instanceNo;
    }

    /**
     * Get the subnet property: The application server subnet.
     *
     * @return the subnet value.
     */
    public String subnet() {
        return this.subnet;
    }

    /**
     * Get the hostname property: The application server SAP host name.
     *
     * @return the hostname value.
     */
    public String hostname() {
        return this.hostname;
    }

    /**
     * Get the kernelVersion property: The application server SAP kernel version.
     *
     * @return the kernelVersion value.
     */
    public String kernelVersion() {
        return this.kernelVersion;
    }

    /**
     * Get the kernelPatch property: The application server SAP kernel patch.
     *
     * @return the kernelPatch value.
     */
    public String kernelPatch() {
        return this.kernelPatch;
    }

    /**
     * Get the ipAddress property: The application server SAP IP Address.
     *
     * @return the ipAddress value.
     */
    public String ipAddress() {
        return this.ipAddress;
    }

    /**
     * Get the gatewayPort property: The application server gateway Port.
     *
     * @return the gatewayPort value.
     */
    public Long gatewayPort() {
        return this.gatewayPort;
    }

    /**
     * Get the icmHttpPort property: The application server ICM HTTP Port.
     *
     * @return the icmHttpPort value.
     */
    public Long icmHttpPort() {
        return this.icmHttpPort;
    }

    /**
     * Get the icmHttpsPort property: The application server ICM HTTPS Port.
     *
     * @return the icmHttpsPort value.
     */
    public Long icmHttpsPort() {
        return this.icmHttpsPort;
    }

    /**
     * Get the virtualMachineId property: The virtual machine.
     *
     * @return the virtualMachineId value.
     */
    public String virtualMachineId() {
        return this.virtualMachineId;
    }

    /**
     * Get the status property: Defines the SAP Instance status.
     *
     * @return the status value.
     */
    public SapVirtualInstanceStatus status() {
        return this.status;
    }

    /**
     * Get the health property: Defines the SAP Instance health.
     *
     * @return the health value.
     */
    public SapHealthState health() {
        return this.health;
    }

    /**
     * Get the provisioningState property: Defines the provisioning states.
     *
     * @return the provisioningState value.
     */
    public SapVirtualInstanceProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the errors property: Defines the Application Instance errors.
     *
     * @return the errors value.
     */
    public SapVirtualInstanceError errors() {
        return this.errors;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (errors() != null) {
            errors().validate();
        }
    }
}
