// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.workloads.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.workloads.fluent.WordpressInstancesClient;
import com.azure.resourcemanager.workloads.fluent.models.WordpressInstanceResourceInner;
import com.azure.resourcemanager.workloads.models.WordpressInstanceResource;
import com.azure.resourcemanager.workloads.models.WordpressInstances;

public final class WordpressInstancesImpl implements WordpressInstances {
    private static final ClientLogger LOGGER = new ClientLogger(WordpressInstancesImpl.class);

    private final WordpressInstancesClient innerClient;

    private final com.azure.resourcemanager.workloads.WorkloadsManager serviceManager;

    public WordpressInstancesImpl(
        WordpressInstancesClient innerClient, com.azure.resourcemanager.workloads.WorkloadsManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<WordpressInstanceResource> list(String resourceGroupName, String phpWorkloadName) {
        PagedIterable<WordpressInstanceResourceInner> inner =
            this.serviceClient().list(resourceGroupName, phpWorkloadName);
        return Utils.mapPage(inner, inner1 -> new WordpressInstanceResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<WordpressInstanceResource> list(
        String resourceGroupName, String phpWorkloadName, Context context) {
        PagedIterable<WordpressInstanceResourceInner> inner =
            this.serviceClient().list(resourceGroupName, phpWorkloadName, context);
        return Utils.mapPage(inner, inner1 -> new WordpressInstanceResourceImpl(inner1, this.manager()));
    }

    public WordpressInstanceResource get(String resourceGroupName, String phpWorkloadName) {
        WordpressInstanceResourceInner inner = this.serviceClient().get(resourceGroupName, phpWorkloadName);
        if (inner != null) {
            return new WordpressInstanceResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<WordpressInstanceResource> getWithResponse(
        String resourceGroupName, String phpWorkloadName, Context context) {
        Response<WordpressInstanceResourceInner> inner =
            this.serviceClient().getWithResponse(resourceGroupName, phpWorkloadName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new WordpressInstanceResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public WordpressInstanceResource createOrUpdate(
        String resourceGroupName, String phpWorkloadName, WordpressInstanceResourceInner wordpressInstanceResource) {
        WordpressInstanceResourceInner inner =
            this.serviceClient().createOrUpdate(resourceGroupName, phpWorkloadName, wordpressInstanceResource);
        if (inner != null) {
            return new WordpressInstanceResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public WordpressInstanceResource createOrUpdate(
        String resourceGroupName,
        String phpWorkloadName,
        WordpressInstanceResourceInner wordpressInstanceResource,
        Context context) {
        WordpressInstanceResourceInner inner =
            this.serviceClient().createOrUpdate(resourceGroupName, phpWorkloadName, wordpressInstanceResource, context);
        if (inner != null) {
            return new WordpressInstanceResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void deleteByResourceGroup(String resourceGroupName, String phpWorkloadName) {
        this.serviceClient().delete(resourceGroupName, phpWorkloadName);
    }

    public Response<Void> deleteWithResponse(String resourceGroupName, String phpWorkloadName, Context context) {
        return this.serviceClient().deleteWithResponse(resourceGroupName, phpWorkloadName, context);
    }

    private WordpressInstancesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.workloads.WorkloadsManager manager() {
        return this.serviceManager;
    }
}
