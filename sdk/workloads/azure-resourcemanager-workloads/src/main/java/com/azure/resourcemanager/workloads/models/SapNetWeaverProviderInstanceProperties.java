// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.workloads.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Gets or sets the provider properties.
 */
@Fluent
public final class SapNetWeaverProviderInstanceProperties extends ProviderSpecificProperties {
    /*
     * The provider type. For example, the value can be SapHana.
     */
    private String providerType = "SapNetWeaver";

    /*
     * Gets or sets the SAP System Identifier
     */
    private String sapSid;

    /*
     * Gets or sets the target virtual machine IP Address/FQDN.
     */
    private String sapHostname;

    /*
     * Gets or sets the instance number of SAP NetWeaver.
     */
    private String sapInstanceNr;

    /*
     * Gets or sets the list of HostFile Entries
     */
    private List<String> sapHostFileEntries;

    /*
     * Gets or sets the SAP user name.
     */
    private String sapUsername;

    /*
     * Sets the SAP password.
     */
    private String sapPassword;

    /*
     * Gets or sets the key vault URI to secret with the SAP password.
     */
    private String sapPasswordUri;

    /*
     * Gets or sets the SAP Client ID.
     */
    private String sapClientId;

    /*
     * Gets or sets the SAP HTTP port number.
     */
    private String sapPortNumber;

    /*
     * Gets or sets the blob URI to SSL certificate for the SAP system.
     */
    private String sslCertificateUri;

    /*
     * Gets or sets certificate preference if secure communication is enabled.
     */
    private SslPreference sslPreference;

    /**
     * Creates an instance of SapNetWeaverProviderInstanceProperties class.
     */
    public SapNetWeaverProviderInstanceProperties() {
    }

    /**
     * Get the providerType property: The provider type. For example, the value can be SapHana.
     * 
     * @return the providerType value.
     */
    @Override
    public String providerType() {
        return this.providerType;
    }

    /**
     * Get the sapSid property: Gets or sets the SAP System Identifier.
     * 
     * @return the sapSid value.
     */
    public String sapSid() {
        return this.sapSid;
    }

    /**
     * Set the sapSid property: Gets or sets the SAP System Identifier.
     * 
     * @param sapSid the sapSid value to set.
     * @return the SapNetWeaverProviderInstanceProperties object itself.
     */
    public SapNetWeaverProviderInstanceProperties withSapSid(String sapSid) {
        this.sapSid = sapSid;
        return this;
    }

    /**
     * Get the sapHostname property: Gets or sets the target virtual machine IP Address/FQDN.
     * 
     * @return the sapHostname value.
     */
    public String sapHostname() {
        return this.sapHostname;
    }

    /**
     * Set the sapHostname property: Gets or sets the target virtual machine IP Address/FQDN.
     * 
     * @param sapHostname the sapHostname value to set.
     * @return the SapNetWeaverProviderInstanceProperties object itself.
     */
    public SapNetWeaverProviderInstanceProperties withSapHostname(String sapHostname) {
        this.sapHostname = sapHostname;
        return this;
    }

    /**
     * Get the sapInstanceNr property: Gets or sets the instance number of SAP NetWeaver.
     * 
     * @return the sapInstanceNr value.
     */
    public String sapInstanceNr() {
        return this.sapInstanceNr;
    }

    /**
     * Set the sapInstanceNr property: Gets or sets the instance number of SAP NetWeaver.
     * 
     * @param sapInstanceNr the sapInstanceNr value to set.
     * @return the SapNetWeaverProviderInstanceProperties object itself.
     */
    public SapNetWeaverProviderInstanceProperties withSapInstanceNr(String sapInstanceNr) {
        this.sapInstanceNr = sapInstanceNr;
        return this;
    }

    /**
     * Get the sapHostFileEntries property: Gets or sets the list of HostFile Entries.
     * 
     * @return the sapHostFileEntries value.
     */
    public List<String> sapHostFileEntries() {
        return this.sapHostFileEntries;
    }

    /**
     * Set the sapHostFileEntries property: Gets or sets the list of HostFile Entries.
     * 
     * @param sapHostFileEntries the sapHostFileEntries value to set.
     * @return the SapNetWeaverProviderInstanceProperties object itself.
     */
    public SapNetWeaverProviderInstanceProperties withSapHostFileEntries(List<String> sapHostFileEntries) {
        this.sapHostFileEntries = sapHostFileEntries;
        return this;
    }

    /**
     * Get the sapUsername property: Gets or sets the SAP user name.
     * 
     * @return the sapUsername value.
     */
    public String sapUsername() {
        return this.sapUsername;
    }

    /**
     * Set the sapUsername property: Gets or sets the SAP user name.
     * 
     * @param sapUsername the sapUsername value to set.
     * @return the SapNetWeaverProviderInstanceProperties object itself.
     */
    public SapNetWeaverProviderInstanceProperties withSapUsername(String sapUsername) {
        this.sapUsername = sapUsername;
        return this;
    }

    /**
     * Get the sapPassword property: Sets the SAP password.
     * 
     * @return the sapPassword value.
     */
    public String sapPassword() {
        return this.sapPassword;
    }

    /**
     * Set the sapPassword property: Sets the SAP password.
     * 
     * @param sapPassword the sapPassword value to set.
     * @return the SapNetWeaverProviderInstanceProperties object itself.
     */
    public SapNetWeaverProviderInstanceProperties withSapPassword(String sapPassword) {
        this.sapPassword = sapPassword;
        return this;
    }

    /**
     * Get the sapPasswordUri property: Gets or sets the key vault URI to secret with the SAP password.
     * 
     * @return the sapPasswordUri value.
     */
    public String sapPasswordUri() {
        return this.sapPasswordUri;
    }

    /**
     * Set the sapPasswordUri property: Gets or sets the key vault URI to secret with the SAP password.
     * 
     * @param sapPasswordUri the sapPasswordUri value to set.
     * @return the SapNetWeaverProviderInstanceProperties object itself.
     */
    public SapNetWeaverProviderInstanceProperties withSapPasswordUri(String sapPasswordUri) {
        this.sapPasswordUri = sapPasswordUri;
        return this;
    }

    /**
     * Get the sapClientId property: Gets or sets the SAP Client ID.
     * 
     * @return the sapClientId value.
     */
    public String sapClientId() {
        return this.sapClientId;
    }

    /**
     * Set the sapClientId property: Gets or sets the SAP Client ID.
     * 
     * @param sapClientId the sapClientId value to set.
     * @return the SapNetWeaverProviderInstanceProperties object itself.
     */
    public SapNetWeaverProviderInstanceProperties withSapClientId(String sapClientId) {
        this.sapClientId = sapClientId;
        return this;
    }

    /**
     * Get the sapPortNumber property: Gets or sets the SAP HTTP port number.
     * 
     * @return the sapPortNumber value.
     */
    public String sapPortNumber() {
        return this.sapPortNumber;
    }

    /**
     * Set the sapPortNumber property: Gets or sets the SAP HTTP port number.
     * 
     * @param sapPortNumber the sapPortNumber value to set.
     * @return the SapNetWeaverProviderInstanceProperties object itself.
     */
    public SapNetWeaverProviderInstanceProperties withSapPortNumber(String sapPortNumber) {
        this.sapPortNumber = sapPortNumber;
        return this;
    }

    /**
     * Get the sslCertificateUri property: Gets or sets the blob URI to SSL certificate for the SAP system.
     * 
     * @return the sslCertificateUri value.
     */
    public String sslCertificateUri() {
        return this.sslCertificateUri;
    }

    /**
     * Set the sslCertificateUri property: Gets or sets the blob URI to SSL certificate for the SAP system.
     * 
     * @param sslCertificateUri the sslCertificateUri value to set.
     * @return the SapNetWeaverProviderInstanceProperties object itself.
     */
    public SapNetWeaverProviderInstanceProperties withSslCertificateUri(String sslCertificateUri) {
        this.sslCertificateUri = sslCertificateUri;
        return this;
    }

    /**
     * Get the sslPreference property: Gets or sets certificate preference if secure communication is enabled.
     * 
     * @return the sslPreference value.
     */
    public SslPreference sslPreference() {
        return this.sslPreference;
    }

    /**
     * Set the sslPreference property: Gets or sets certificate preference if secure communication is enabled.
     * 
     * @param sslPreference the sslPreference value to set.
     * @return the SapNetWeaverProviderInstanceProperties object itself.
     */
    public SapNetWeaverProviderInstanceProperties withSslPreference(SslPreference sslPreference) {
        this.sslPreference = sslPreference;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("providerType", this.providerType);
        jsonWriter.writeStringField("sapSid", this.sapSid);
        jsonWriter.writeStringField("sapHostname", this.sapHostname);
        jsonWriter.writeStringField("sapInstanceNr", this.sapInstanceNr);
        jsonWriter.writeArrayField("sapHostFileEntries", this.sapHostFileEntries,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("sapUsername", this.sapUsername);
        jsonWriter.writeStringField("sapPassword", this.sapPassword);
        jsonWriter.writeStringField("sapPasswordUri", this.sapPasswordUri);
        jsonWriter.writeStringField("sapClientId", this.sapClientId);
        jsonWriter.writeStringField("sapPortNumber", this.sapPortNumber);
        jsonWriter.writeStringField("sslCertificateUri", this.sslCertificateUri);
        jsonWriter.writeStringField("sslPreference", this.sslPreference == null ? null : this.sslPreference.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SapNetWeaverProviderInstanceProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SapNetWeaverProviderInstanceProperties if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SapNetWeaverProviderInstanceProperties.
     */
    public static SapNetWeaverProviderInstanceProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SapNetWeaverProviderInstanceProperties deserializedSapNetWeaverProviderInstanceProperties
                = new SapNetWeaverProviderInstanceProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("providerType".equals(fieldName)) {
                    deserializedSapNetWeaverProviderInstanceProperties.providerType = reader.getString();
                } else if ("sapSid".equals(fieldName)) {
                    deserializedSapNetWeaverProviderInstanceProperties.sapSid = reader.getString();
                } else if ("sapHostname".equals(fieldName)) {
                    deserializedSapNetWeaverProviderInstanceProperties.sapHostname = reader.getString();
                } else if ("sapInstanceNr".equals(fieldName)) {
                    deserializedSapNetWeaverProviderInstanceProperties.sapInstanceNr = reader.getString();
                } else if ("sapHostFileEntries".equals(fieldName)) {
                    List<String> sapHostFileEntries = reader.readArray(reader1 -> reader1.getString());
                    deserializedSapNetWeaverProviderInstanceProperties.sapHostFileEntries = sapHostFileEntries;
                } else if ("sapUsername".equals(fieldName)) {
                    deserializedSapNetWeaverProviderInstanceProperties.sapUsername = reader.getString();
                } else if ("sapPassword".equals(fieldName)) {
                    deserializedSapNetWeaverProviderInstanceProperties.sapPassword = reader.getString();
                } else if ("sapPasswordUri".equals(fieldName)) {
                    deserializedSapNetWeaverProviderInstanceProperties.sapPasswordUri = reader.getString();
                } else if ("sapClientId".equals(fieldName)) {
                    deserializedSapNetWeaverProviderInstanceProperties.sapClientId = reader.getString();
                } else if ("sapPortNumber".equals(fieldName)) {
                    deserializedSapNetWeaverProviderInstanceProperties.sapPortNumber = reader.getString();
                } else if ("sslCertificateUri".equals(fieldName)) {
                    deserializedSapNetWeaverProviderInstanceProperties.sslCertificateUri = reader.getString();
                } else if ("sslPreference".equals(fieldName)) {
                    deserializedSapNetWeaverProviderInstanceProperties.sslPreference
                        = SslPreference.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSapNetWeaverProviderInstanceProperties;
        });
    }
}
