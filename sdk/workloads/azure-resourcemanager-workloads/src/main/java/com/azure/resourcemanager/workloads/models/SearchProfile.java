// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.workloads.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** Search profile. */
@Fluent
public final class SearchProfile extends NodeProfile {
    /*
     * Search type
     */
    @JsonProperty(value = "searchType", required = true)
    private SearchType searchType;

    /**
     * Get the searchType property: Search type.
     *
     * @return the searchType value.
     */
    public SearchType searchType() {
        return this.searchType;
    }

    /**
     * Set the searchType property: Search type.
     *
     * @param searchType the searchType value to set.
     * @return the SearchProfile object itself.
     */
    public SearchProfile withSearchType(SearchType searchType) {
        this.searchType = searchType;
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public SearchProfile withName(String name) {
        super.withName(name);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public SearchProfile withNodeSku(String nodeSku) {
        super.withNodeSku(nodeSku);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public SearchProfile withOsImage(OsImageProfile osImage) {
        super.withOsImage(osImage);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public SearchProfile withOsDisk(DiskInfo osDisk) {
        super.withOsDisk(osDisk);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public SearchProfile withDataDisks(List<DiskInfo> dataDisks) {
        super.withDataDisks(dataDisks);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (searchType() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property searchType in model SearchProfile"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(SearchProfile.class);
}
