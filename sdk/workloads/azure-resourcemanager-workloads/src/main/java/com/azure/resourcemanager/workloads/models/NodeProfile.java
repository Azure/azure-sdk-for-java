// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.workloads.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** VM or VMSS node profile. */
@Fluent
public class NodeProfile {
    /*
     * VM or VMSS name
     */
    @JsonProperty(value = "name")
    private String name;

    /*
     * VM SKU for node(s)
     */
    @JsonProperty(value = "nodeSku", required = true)
    private String nodeSku;

    /*
     * OS image used for creating the nodes
     */
    @JsonProperty(value = "osImage", required = true)
    private OsImageProfile osImage;

    /*
     * OS disk details
     */
    @JsonProperty(value = "osDisk", required = true)
    private DiskInfo osDisk;

    /*
     * Data disks details. This property is not in use right now
     */
    @JsonProperty(value = "dataDisks")
    private List<DiskInfo> dataDisks;

    /*
     * VM/VMSS resource ARM Ids
     */
    @JsonProperty(value = "nodeResourceIds", access = JsonProperty.Access.WRITE_ONLY)
    private List<String> nodeResourceIds;

    /**
     * Get the name property: VM or VMSS name.
     *
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: VM or VMSS name.
     *
     * @param name the name value to set.
     * @return the NodeProfile object itself.
     */
    public NodeProfile withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the nodeSku property: VM SKU for node(s).
     *
     * @return the nodeSku value.
     */
    public String nodeSku() {
        return this.nodeSku;
    }

    /**
     * Set the nodeSku property: VM SKU for node(s).
     *
     * @param nodeSku the nodeSku value to set.
     * @return the NodeProfile object itself.
     */
    public NodeProfile withNodeSku(String nodeSku) {
        this.nodeSku = nodeSku;
        return this;
    }

    /**
     * Get the osImage property: OS image used for creating the nodes.
     *
     * @return the osImage value.
     */
    public OsImageProfile osImage() {
        return this.osImage;
    }

    /**
     * Set the osImage property: OS image used for creating the nodes.
     *
     * @param osImage the osImage value to set.
     * @return the NodeProfile object itself.
     */
    public NodeProfile withOsImage(OsImageProfile osImage) {
        this.osImage = osImage;
        return this;
    }

    /**
     * Get the osDisk property: OS disk details.
     *
     * @return the osDisk value.
     */
    public DiskInfo osDisk() {
        return this.osDisk;
    }

    /**
     * Set the osDisk property: OS disk details.
     *
     * @param osDisk the osDisk value to set.
     * @return the NodeProfile object itself.
     */
    public NodeProfile withOsDisk(DiskInfo osDisk) {
        this.osDisk = osDisk;
        return this;
    }

    /**
     * Get the dataDisks property: Data disks details. This property is not in use right now.
     *
     * @return the dataDisks value.
     */
    public List<DiskInfo> dataDisks() {
        return this.dataDisks;
    }

    /**
     * Set the dataDisks property: Data disks details. This property is not in use right now.
     *
     * @param dataDisks the dataDisks value to set.
     * @return the NodeProfile object itself.
     */
    public NodeProfile withDataDisks(List<DiskInfo> dataDisks) {
        this.dataDisks = dataDisks;
        return this;
    }

    /**
     * Get the nodeResourceIds property: VM/VMSS resource ARM Ids.
     *
     * @return the nodeResourceIds value.
     */
    public List<String> nodeResourceIds() {
        return this.nodeResourceIds;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (nodeSku() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property nodeSku in model NodeProfile"));
        }
        if (osImage() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property osImage in model NodeProfile"));
        } else {
            osImage().validate();
        }
        if (osDisk() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property osDisk in model NodeProfile"));
        } else {
            osDisk().validate();
        }
        if (dataDisks() != null) {
            dataDisks().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(NodeProfile.class);
}
