// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.workloads.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Gets or sets the PrometheusOS provider properties.
 */
@Fluent
public final class PrometheusOSProviderInstanceProperties extends ProviderSpecificProperties {
    /*
     * The provider type. For example, the value can be SapHana.
     */
    private String providerType = "PrometheusOS";

    /*
     * URL of the Node Exporter endpoint
     */
    private String prometheusUrl;

    /*
     * Gets or sets certificate preference if secure communication is enabled.
     */
    private SslPreference sslPreference;

    /*
     * Gets or sets the blob URI to SSL certificate for the prometheus node exporter.
     */
    private String sslCertificateUri;

    /*
     * Gets or sets the SAP System Identifier
     */
    private String sapSid;

    /**
     * Creates an instance of PrometheusOSProviderInstanceProperties class.
     */
    public PrometheusOSProviderInstanceProperties() {
    }

    /**
     * Get the providerType property: The provider type. For example, the value can be SapHana.
     * 
     * @return the providerType value.
     */
    @Override
    public String providerType() {
        return this.providerType;
    }

    /**
     * Get the prometheusUrl property: URL of the Node Exporter endpoint.
     * 
     * @return the prometheusUrl value.
     */
    public String prometheusUrl() {
        return this.prometheusUrl;
    }

    /**
     * Set the prometheusUrl property: URL of the Node Exporter endpoint.
     * 
     * @param prometheusUrl the prometheusUrl value to set.
     * @return the PrometheusOSProviderInstanceProperties object itself.
     */
    public PrometheusOSProviderInstanceProperties withPrometheusUrl(String prometheusUrl) {
        this.prometheusUrl = prometheusUrl;
        return this;
    }

    /**
     * Get the sslPreference property: Gets or sets certificate preference if secure communication is enabled.
     * 
     * @return the sslPreference value.
     */
    public SslPreference sslPreference() {
        return this.sslPreference;
    }

    /**
     * Set the sslPreference property: Gets or sets certificate preference if secure communication is enabled.
     * 
     * @param sslPreference the sslPreference value to set.
     * @return the PrometheusOSProviderInstanceProperties object itself.
     */
    public PrometheusOSProviderInstanceProperties withSslPreference(SslPreference sslPreference) {
        this.sslPreference = sslPreference;
        return this;
    }

    /**
     * Get the sslCertificateUri property: Gets or sets the blob URI to SSL certificate for the prometheus node
     * exporter.
     * 
     * @return the sslCertificateUri value.
     */
    public String sslCertificateUri() {
        return this.sslCertificateUri;
    }

    /**
     * Set the sslCertificateUri property: Gets or sets the blob URI to SSL certificate for the prometheus node
     * exporter.
     * 
     * @param sslCertificateUri the sslCertificateUri value to set.
     * @return the PrometheusOSProviderInstanceProperties object itself.
     */
    public PrometheusOSProviderInstanceProperties withSslCertificateUri(String sslCertificateUri) {
        this.sslCertificateUri = sslCertificateUri;
        return this;
    }

    /**
     * Get the sapSid property: Gets or sets the SAP System Identifier.
     * 
     * @return the sapSid value.
     */
    public String sapSid() {
        return this.sapSid;
    }

    /**
     * Set the sapSid property: Gets or sets the SAP System Identifier.
     * 
     * @param sapSid the sapSid value to set.
     * @return the PrometheusOSProviderInstanceProperties object itself.
     */
    public PrometheusOSProviderInstanceProperties withSapSid(String sapSid) {
        this.sapSid = sapSid;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("providerType", this.providerType);
        jsonWriter.writeStringField("prometheusUrl", this.prometheusUrl);
        jsonWriter.writeStringField("sslPreference", this.sslPreference == null ? null : this.sslPreference.toString());
        jsonWriter.writeStringField("sslCertificateUri", this.sslCertificateUri);
        jsonWriter.writeStringField("sapSid", this.sapSid);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PrometheusOSProviderInstanceProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PrometheusOSProviderInstanceProperties if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the PrometheusOSProviderInstanceProperties.
     */
    public static PrometheusOSProviderInstanceProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PrometheusOSProviderInstanceProperties deserializedPrometheusOSProviderInstanceProperties
                = new PrometheusOSProviderInstanceProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("providerType".equals(fieldName)) {
                    deserializedPrometheusOSProviderInstanceProperties.providerType = reader.getString();
                } else if ("prometheusUrl".equals(fieldName)) {
                    deserializedPrometheusOSProviderInstanceProperties.prometheusUrl = reader.getString();
                } else if ("sslPreference".equals(fieldName)) {
                    deserializedPrometheusOSProviderInstanceProperties.sslPreference
                        = SslPreference.fromString(reader.getString());
                } else if ("sslCertificateUri".equals(fieldName)) {
                    deserializedPrometheusOSProviderInstanceProperties.sslCertificateUri = reader.getString();
                } else if ("sapSid".equals(fieldName)) {
                    deserializedPrometheusOSProviderInstanceProperties.sapSid = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPrometheusOSProviderInstanceProperties;
        });
    }
}
