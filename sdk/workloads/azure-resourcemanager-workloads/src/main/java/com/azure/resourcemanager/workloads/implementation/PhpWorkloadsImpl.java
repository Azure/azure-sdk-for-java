// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.workloads.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.workloads.fluent.PhpWorkloadsClient;
import com.azure.resourcemanager.workloads.fluent.models.PhpWorkloadResourceInner;
import com.azure.resourcemanager.workloads.models.PhpWorkloadResource;
import com.azure.resourcemanager.workloads.models.PhpWorkloads;

public final class PhpWorkloadsImpl implements PhpWorkloads {
    private static final ClientLogger LOGGER = new ClientLogger(PhpWorkloadsImpl.class);

    private final PhpWorkloadsClient innerClient;

    private final com.azure.resourcemanager.workloads.WorkloadsManager serviceManager;

    public PhpWorkloadsImpl(
        PhpWorkloadsClient innerClient, com.azure.resourcemanager.workloads.WorkloadsManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<PhpWorkloadResource> list() {
        PagedIterable<PhpWorkloadResourceInner> inner = this.serviceClient().list();
        return Utils.mapPage(inner, inner1 -> new PhpWorkloadResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<PhpWorkloadResource> list(Context context) {
        PagedIterable<PhpWorkloadResourceInner> inner = this.serviceClient().list(context);
        return Utils.mapPage(inner, inner1 -> new PhpWorkloadResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<PhpWorkloadResource> listByResourceGroup(String resourceGroupName) {
        PagedIterable<PhpWorkloadResourceInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName);
        return Utils.mapPage(inner, inner1 -> new PhpWorkloadResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<PhpWorkloadResource> listByResourceGroup(String resourceGroupName, Context context) {
        PagedIterable<PhpWorkloadResourceInner> inner =
            this.serviceClient().listByResourceGroup(resourceGroupName, context);
        return Utils.mapPage(inner, inner1 -> new PhpWorkloadResourceImpl(inner1, this.manager()));
    }

    public PhpWorkloadResource getByResourceGroup(String resourceGroupName, String phpWorkloadName) {
        PhpWorkloadResourceInner inner = this.serviceClient().getByResourceGroup(resourceGroupName, phpWorkloadName);
        if (inner != null) {
            return new PhpWorkloadResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<PhpWorkloadResource> getByResourceGroupWithResponse(
        String resourceGroupName, String phpWorkloadName, Context context) {
        Response<PhpWorkloadResourceInner> inner =
            this.serviceClient().getByResourceGroupWithResponse(resourceGroupName, phpWorkloadName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new PhpWorkloadResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String phpWorkloadName, String deleteInfra) {
        this.serviceClient().delete(resourceGroupName, phpWorkloadName, deleteInfra);
    }

    public void delete(String resourceGroupName, String phpWorkloadName) {
        this.serviceClient().delete(resourceGroupName, phpWorkloadName);
    }

    public void delete(String resourceGroupName, String phpWorkloadName, String deleteInfra, Context context) {
        this.serviceClient().delete(resourceGroupName, phpWorkloadName, deleteInfra, context);
    }

    public PhpWorkloadResource getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String phpWorkloadName = Utils.getValueFromIdByName(id, "phpWorkloads");
        if (phpWorkloadName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'phpWorkloads'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, phpWorkloadName, Context.NONE).getValue();
    }

    public Response<PhpWorkloadResource> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String phpWorkloadName = Utils.getValueFromIdByName(id, "phpWorkloads");
        if (phpWorkloadName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'phpWorkloads'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, phpWorkloadName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String phpWorkloadName = Utils.getValueFromIdByName(id, "phpWorkloads");
        if (phpWorkloadName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'phpWorkloads'.", id)));
        }
        String localDeleteInfra = null;
        this.delete(resourceGroupName, phpWorkloadName, localDeleteInfra, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, String deleteInfra, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String phpWorkloadName = Utils.getValueFromIdByName(id, "phpWorkloads");
        if (phpWorkloadName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'phpWorkloads'.", id)));
        }
        this.delete(resourceGroupName, phpWorkloadName, deleteInfra, context);
    }

    private PhpWorkloadsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.workloads.WorkloadsManager manager() {
        return this.serviceManager;
    }

    public PhpWorkloadResourceImpl define(String name) {
        return new PhpWorkloadResourceImpl(name, this.manager());
    }
}
