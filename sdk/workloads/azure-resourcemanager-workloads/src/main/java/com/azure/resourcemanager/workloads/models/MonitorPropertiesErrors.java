// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.workloads.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Defines the SAP monitor errors.
 */
@Immutable
public final class MonitorPropertiesErrors extends Error {
    /*
     * Object containing more specific information than the current object about the error.
     */
    private ErrorInnerError innerError;

    /*
     * Array of details about specific errors that led to this reported error.
     */
    private List<Error> details;

    /*
     * Target of the error.
     */
    private String target;

    /*
     * Human-readable representation of the error.
     */
    private String message;

    /*
     * Server-defined set of error codes.
     */
    private String code;

    /**
     * Creates an instance of MonitorPropertiesErrors class.
     */
    public MonitorPropertiesErrors() {
    }

    /**
     * Get the innerError property: Object containing more specific information than the current object about the error.
     * 
     * @return the innerError value.
     */
    @Override
    public ErrorInnerError innerError() {
        return this.innerError;
    }

    /**
     * Get the details property: Array of details about specific errors that led to this reported error.
     * 
     * @return the details value.
     */
    @Override
    public List<Error> details() {
        return this.details;
    }

    /**
     * Get the target property: Target of the error.
     * 
     * @return the target value.
     */
    @Override
    public String target() {
        return this.target;
    }

    /**
     * Get the message property: Human-readable representation of the error.
     * 
     * @return the message value.
     */
    @Override
    public String message() {
        return this.message;
    }

    /**
     * Get the code property: Server-defined set of error codes.
     * 
     * @return the code value.
     */
    @Override
    public String code() {
        return this.code;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (details() != null) {
            details().forEach(e -> e.validate());
        }
        if (innerError() != null) {
            innerError().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MonitorPropertiesErrors from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MonitorPropertiesErrors if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the MonitorPropertiesErrors.
     */
    public static MonitorPropertiesErrors fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MonitorPropertiesErrors deserializedMonitorPropertiesErrors = new MonitorPropertiesErrors();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("code".equals(fieldName)) {
                    deserializedMonitorPropertiesErrors.code = reader.getString();
                } else if ("message".equals(fieldName)) {
                    deserializedMonitorPropertiesErrors.message = reader.getString();
                } else if ("target".equals(fieldName)) {
                    deserializedMonitorPropertiesErrors.target = reader.getString();
                } else if ("details".equals(fieldName)) {
                    List<Error> details = reader.readArray(reader1 -> Error.fromJson(reader1));
                    deserializedMonitorPropertiesErrors.details = details;
                } else if ("innerError".equals(fieldName)) {
                    deserializedMonitorPropertiesErrors.innerError = ErrorInnerError.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMonitorPropertiesErrors;
        });
    }
}
