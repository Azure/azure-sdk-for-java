// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.workloads.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.workloads.models.BackupProfile;
import com.azure.resourcemanager.workloads.models.CacheProfile;
import com.azure.resourcemanager.workloads.models.DatabaseProfile;
import com.azure.resourcemanager.workloads.models.FileshareProfile;
import com.azure.resourcemanager.workloads.models.ManagedRGConfiguration;
import com.azure.resourcemanager.workloads.models.NetworkProfile;
import com.azure.resourcemanager.workloads.models.NodeProfile;
import com.azure.resourcemanager.workloads.models.PhpProfile;
import com.azure.resourcemanager.workloads.models.PhpWorkloadProvisioningState;
import com.azure.resourcemanager.workloads.models.SearchProfile;
import com.azure.resourcemanager.workloads.models.SiteProfile;
import com.azure.resourcemanager.workloads.models.UserProfile;
import com.azure.resourcemanager.workloads.models.VmssNodesProfile;
import com.fasterxml.jackson.annotation.JsonProperty;

/** PHP workload resource properties. */
@Fluent
public final class PhpWorkloadResourceProperties {
    /*
     * The infra resources for PHP workload will be created in this location
     */
    @JsonProperty(value = "appLocation", required = true)
    private String appLocation;

    /*
     * Managed resource group configuration of the workload
     */
    @JsonProperty(value = "managedResourceGroupConfiguration")
    private ManagedRGConfiguration managedResourceGroupConfiguration;

    /*
     * Admin user profile used for VM and VMSS
     */
    @JsonProperty(value = "adminUserProfile", required = true)
    private UserProfile adminUserProfile;

    /*
     * VMSS web nodes profile
     */
    @JsonProperty(value = "webNodesProfile", required = true)
    private VmssNodesProfile webNodesProfile;

    /*
     * Controller VM profile
     */
    @JsonProperty(value = "controllerProfile", required = true)
    private NodeProfile controllerProfile;

    /*
     * Network profile
     */
    @JsonProperty(value = "networkProfile")
    private NetworkProfile networkProfile;

    /*
     * Database profile
     */
    @JsonProperty(value = "databaseProfile", required = true)
    private DatabaseProfile databaseProfile;

    /*
     * Site profile
     */
    @JsonProperty(value = "siteProfile")
    private SiteProfile siteProfile;

    /*
     * File share profile
     */
    @JsonProperty(value = "fileshareProfile")
    private FileshareProfile fileshareProfile;

    /*
     * PHP profile
     */
    @JsonProperty(value = "phpProfile")
    private PhpProfile phpProfile;

    /*
     * Search profile
     */
    @JsonProperty(value = "searchProfile")
    private SearchProfile searchProfile;

    /*
     * Cache profile
     */
    @JsonProperty(value = "cacheProfile")
    private CacheProfile cacheProfile;

    /*
     * Backup profile
     */
    @JsonProperty(value = "backupProfile")
    private BackupProfile backupProfile;

    /*
     * Php workload resource provisioning state
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private PhpWorkloadProvisioningState provisioningState;

    /**
     * Get the appLocation property: The infra resources for PHP workload will be created in this location.
     *
     * @return the appLocation value.
     */
    public String appLocation() {
        return this.appLocation;
    }

    /**
     * Set the appLocation property: The infra resources for PHP workload will be created in this location.
     *
     * @param appLocation the appLocation value to set.
     * @return the PhpWorkloadResourceProperties object itself.
     */
    public PhpWorkloadResourceProperties withAppLocation(String appLocation) {
        this.appLocation = appLocation;
        return this;
    }

    /**
     * Get the managedResourceGroupConfiguration property: Managed resource group configuration of the workload.
     *
     * @return the managedResourceGroupConfiguration value.
     */
    public ManagedRGConfiguration managedResourceGroupConfiguration() {
        return this.managedResourceGroupConfiguration;
    }

    /**
     * Set the managedResourceGroupConfiguration property: Managed resource group configuration of the workload.
     *
     * @param managedResourceGroupConfiguration the managedResourceGroupConfiguration value to set.
     * @return the PhpWorkloadResourceProperties object itself.
     */
    public PhpWorkloadResourceProperties withManagedResourceGroupConfiguration(
        ManagedRGConfiguration managedResourceGroupConfiguration) {
        this.managedResourceGroupConfiguration = managedResourceGroupConfiguration;
        return this;
    }

    /**
     * Get the adminUserProfile property: Admin user profile used for VM and VMSS.
     *
     * @return the adminUserProfile value.
     */
    public UserProfile adminUserProfile() {
        return this.adminUserProfile;
    }

    /**
     * Set the adminUserProfile property: Admin user profile used for VM and VMSS.
     *
     * @param adminUserProfile the adminUserProfile value to set.
     * @return the PhpWorkloadResourceProperties object itself.
     */
    public PhpWorkloadResourceProperties withAdminUserProfile(UserProfile adminUserProfile) {
        this.adminUserProfile = adminUserProfile;
        return this;
    }

    /**
     * Get the webNodesProfile property: VMSS web nodes profile.
     *
     * @return the webNodesProfile value.
     */
    public VmssNodesProfile webNodesProfile() {
        return this.webNodesProfile;
    }

    /**
     * Set the webNodesProfile property: VMSS web nodes profile.
     *
     * @param webNodesProfile the webNodesProfile value to set.
     * @return the PhpWorkloadResourceProperties object itself.
     */
    public PhpWorkloadResourceProperties withWebNodesProfile(VmssNodesProfile webNodesProfile) {
        this.webNodesProfile = webNodesProfile;
        return this;
    }

    /**
     * Get the controllerProfile property: Controller VM profile.
     *
     * @return the controllerProfile value.
     */
    public NodeProfile controllerProfile() {
        return this.controllerProfile;
    }

    /**
     * Set the controllerProfile property: Controller VM profile.
     *
     * @param controllerProfile the controllerProfile value to set.
     * @return the PhpWorkloadResourceProperties object itself.
     */
    public PhpWorkloadResourceProperties withControllerProfile(NodeProfile controllerProfile) {
        this.controllerProfile = controllerProfile;
        return this;
    }

    /**
     * Get the networkProfile property: Network profile.
     *
     * @return the networkProfile value.
     */
    public NetworkProfile networkProfile() {
        return this.networkProfile;
    }

    /**
     * Set the networkProfile property: Network profile.
     *
     * @param networkProfile the networkProfile value to set.
     * @return the PhpWorkloadResourceProperties object itself.
     */
    public PhpWorkloadResourceProperties withNetworkProfile(NetworkProfile networkProfile) {
        this.networkProfile = networkProfile;
        return this;
    }

    /**
     * Get the databaseProfile property: Database profile.
     *
     * @return the databaseProfile value.
     */
    public DatabaseProfile databaseProfile() {
        return this.databaseProfile;
    }

    /**
     * Set the databaseProfile property: Database profile.
     *
     * @param databaseProfile the databaseProfile value to set.
     * @return the PhpWorkloadResourceProperties object itself.
     */
    public PhpWorkloadResourceProperties withDatabaseProfile(DatabaseProfile databaseProfile) {
        this.databaseProfile = databaseProfile;
        return this;
    }

    /**
     * Get the siteProfile property: Site profile.
     *
     * @return the siteProfile value.
     */
    public SiteProfile siteProfile() {
        return this.siteProfile;
    }

    /**
     * Set the siteProfile property: Site profile.
     *
     * @param siteProfile the siteProfile value to set.
     * @return the PhpWorkloadResourceProperties object itself.
     */
    public PhpWorkloadResourceProperties withSiteProfile(SiteProfile siteProfile) {
        this.siteProfile = siteProfile;
        return this;
    }

    /**
     * Get the fileshareProfile property: File share profile.
     *
     * @return the fileshareProfile value.
     */
    public FileshareProfile fileshareProfile() {
        return this.fileshareProfile;
    }

    /**
     * Set the fileshareProfile property: File share profile.
     *
     * @param fileshareProfile the fileshareProfile value to set.
     * @return the PhpWorkloadResourceProperties object itself.
     */
    public PhpWorkloadResourceProperties withFileshareProfile(FileshareProfile fileshareProfile) {
        this.fileshareProfile = fileshareProfile;
        return this;
    }

    /**
     * Get the phpProfile property: PHP profile.
     *
     * @return the phpProfile value.
     */
    public PhpProfile phpProfile() {
        return this.phpProfile;
    }

    /**
     * Set the phpProfile property: PHP profile.
     *
     * @param phpProfile the phpProfile value to set.
     * @return the PhpWorkloadResourceProperties object itself.
     */
    public PhpWorkloadResourceProperties withPhpProfile(PhpProfile phpProfile) {
        this.phpProfile = phpProfile;
        return this;
    }

    /**
     * Get the searchProfile property: Search profile.
     *
     * @return the searchProfile value.
     */
    public SearchProfile searchProfile() {
        return this.searchProfile;
    }

    /**
     * Set the searchProfile property: Search profile.
     *
     * @param searchProfile the searchProfile value to set.
     * @return the PhpWorkloadResourceProperties object itself.
     */
    public PhpWorkloadResourceProperties withSearchProfile(SearchProfile searchProfile) {
        this.searchProfile = searchProfile;
        return this;
    }

    /**
     * Get the cacheProfile property: Cache profile.
     *
     * @return the cacheProfile value.
     */
    public CacheProfile cacheProfile() {
        return this.cacheProfile;
    }

    /**
     * Set the cacheProfile property: Cache profile.
     *
     * @param cacheProfile the cacheProfile value to set.
     * @return the PhpWorkloadResourceProperties object itself.
     */
    public PhpWorkloadResourceProperties withCacheProfile(CacheProfile cacheProfile) {
        this.cacheProfile = cacheProfile;
        return this;
    }

    /**
     * Get the backupProfile property: Backup profile.
     *
     * @return the backupProfile value.
     */
    public BackupProfile backupProfile() {
        return this.backupProfile;
    }

    /**
     * Set the backupProfile property: Backup profile.
     *
     * @param backupProfile the backupProfile value to set.
     * @return the PhpWorkloadResourceProperties object itself.
     */
    public PhpWorkloadResourceProperties withBackupProfile(BackupProfile backupProfile) {
        this.backupProfile = backupProfile;
        return this;
    }

    /**
     * Get the provisioningState property: Php workload resource provisioning state.
     *
     * @return the provisioningState value.
     */
    public PhpWorkloadProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (appLocation() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property appLocation in model PhpWorkloadResourceProperties"));
        }
        if (managedResourceGroupConfiguration() != null) {
            managedResourceGroupConfiguration().validate();
        }
        if (adminUserProfile() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property adminUserProfile in model PhpWorkloadResourceProperties"));
        } else {
            adminUserProfile().validate();
        }
        if (webNodesProfile() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property webNodesProfile in model PhpWorkloadResourceProperties"));
        } else {
            webNodesProfile().validate();
        }
        if (controllerProfile() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property controllerProfile in model PhpWorkloadResourceProperties"));
        } else {
            controllerProfile().validate();
        }
        if (networkProfile() != null) {
            networkProfile().validate();
        }
        if (databaseProfile() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property databaseProfile in model PhpWorkloadResourceProperties"));
        } else {
            databaseProfile().validate();
        }
        if (siteProfile() != null) {
            siteProfile().validate();
        }
        if (fileshareProfile() != null) {
            fileshareProfile().validate();
        }
        if (phpProfile() != null) {
            phpProfile().validate();
        }
        if (searchProfile() != null) {
            searchProfile().validate();
        }
        if (cacheProfile() != null) {
            cacheProfile().validate();
        }
        if (backupProfile() != null) {
            backupProfile().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(PhpWorkloadResourceProperties.class);
}
