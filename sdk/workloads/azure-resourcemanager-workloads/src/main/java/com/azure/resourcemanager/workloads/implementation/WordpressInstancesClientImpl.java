// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.workloads.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.workloads.fluent.WordpressInstancesClient;
import com.azure.resourcemanager.workloads.fluent.models.WordpressInstanceResourceInner;
import com.azure.resourcemanager.workloads.models.WordpressInstanceResourceList;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in WordpressInstancesClient. */
public final class WordpressInstancesClientImpl implements WordpressInstancesClient {
    /** The proxy service used to perform REST calls. */
    private final WordpressInstancesService service;

    /** The service client containing this operation class. */
    private final WorkloadsClientImpl client;

    /**
     * Initializes an instance of WordpressInstancesClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    WordpressInstancesClientImpl(WorkloadsClientImpl client) {
        this.service =
            RestProxy.create(WordpressInstancesService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for WorkloadsClientWordpressInstances to be used by the proxy service to
     * perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "WorkloadsClientWordp")
    private interface WordpressInstancesService {
        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Workloads"
                + "/phpWorkloads/{phpWorkloadName}/wordpressInstances")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<WordpressInstanceResourceList>> list(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("phpWorkloadName") String phpWorkloadName,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Workloads"
                + "/phpWorkloads/{phpWorkloadName}/wordpressInstances/default")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<WordpressInstanceResourceInner>> get(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("phpWorkloadName") String phpWorkloadName,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Put(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Workloads"
                + "/phpWorkloads/{phpWorkloadName}/wordpressInstances/default")
        @ExpectedResponses({200, 201})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> createOrUpdate(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("phpWorkloadName") String phpWorkloadName,
            @BodyParam("application/json") WordpressInstanceResourceInner wordpressInstanceResource,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Delete(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Workloads"
                + "/phpWorkloads/{phpWorkloadName}/wordpressInstances/default")
        @ExpectedResponses({200, 204})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Void>> delete(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("phpWorkloadName") String phpWorkloadName,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<WordpressInstanceResourceList>> listNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Lists WordPress instance resources under a phpWorkload resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param phpWorkloadName Php workload name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return wordPress instance resource list along with {@link PagedResponse} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<WordpressInstanceResourceInner>> listSinglePageAsync(
        String resourceGroupName, String phpWorkloadName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (phpWorkloadName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter phpWorkloadName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .list(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            this.client.getApiVersion(),
                            resourceGroupName,
                            phpWorkloadName,
                            accept,
                            context))
            .<PagedResponse<WordpressInstanceResourceInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Lists WordPress instance resources under a phpWorkload resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param phpWorkloadName Php workload name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return wordPress instance resource list along with {@link PagedResponse} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<WordpressInstanceResourceInner>> listSinglePageAsync(
        String resourceGroupName, String phpWorkloadName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (phpWorkloadName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter phpWorkloadName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .list(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                this.client.getApiVersion(),
                resourceGroupName,
                phpWorkloadName,
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Lists WordPress instance resources under a phpWorkload resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param phpWorkloadName Php workload name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return wordPress instance resource list as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<WordpressInstanceResourceInner> listAsync(String resourceGroupName, String phpWorkloadName) {
        return new PagedFlux<>(
            () -> listSinglePageAsync(resourceGroupName, phpWorkloadName),
            nextLink -> listNextSinglePageAsync(nextLink));
    }

    /**
     * Lists WordPress instance resources under a phpWorkload resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param phpWorkloadName Php workload name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return wordPress instance resource list as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<WordpressInstanceResourceInner> listAsync(
        String resourceGroupName, String phpWorkloadName, Context context) {
        return new PagedFlux<>(
            () -> listSinglePageAsync(resourceGroupName, phpWorkloadName, context),
            nextLink -> listNextSinglePageAsync(nextLink, context));
    }

    /**
     * Lists WordPress instance resources under a phpWorkload resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param phpWorkloadName Php workload name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return wordPress instance resource list as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<WordpressInstanceResourceInner> list(String resourceGroupName, String phpWorkloadName) {
        return new PagedIterable<>(listAsync(resourceGroupName, phpWorkloadName));
    }

    /**
     * Lists WordPress instance resources under a phpWorkload resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param phpWorkloadName Php workload name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return wordPress instance resource list as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<WordpressInstanceResourceInner> list(
        String resourceGroupName, String phpWorkloadName, Context context) {
        return new PagedIterable<>(listAsync(resourceGroupName, phpWorkloadName, context));
    }

    /**
     * Gets the WordPress instance resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param phpWorkloadName Php workload name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the WordPress instance resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<WordpressInstanceResourceInner>> getWithResponseAsync(
        String resourceGroupName, String phpWorkloadName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (phpWorkloadName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter phpWorkloadName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .get(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            this.client.getApiVersion(),
                            resourceGroupName,
                            phpWorkloadName,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets the WordPress instance resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param phpWorkloadName Php workload name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the WordPress instance resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<WordpressInstanceResourceInner>> getWithResponseAsync(
        String resourceGroupName, String phpWorkloadName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (phpWorkloadName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter phpWorkloadName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .get(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                this.client.getApiVersion(),
                resourceGroupName,
                phpWorkloadName,
                accept,
                context);
    }

    /**
     * Gets the WordPress instance resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param phpWorkloadName Php workload name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the WordPress instance resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<WordpressInstanceResourceInner> getAsync(String resourceGroupName, String phpWorkloadName) {
        return getWithResponseAsync(resourceGroupName, phpWorkloadName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets the WordPress instance resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param phpWorkloadName Php workload name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the WordPress instance resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public WordpressInstanceResourceInner get(String resourceGroupName, String phpWorkloadName) {
        return getAsync(resourceGroupName, phpWorkloadName).block();
    }

    /**
     * Gets the WordPress instance resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param phpWorkloadName Php workload name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the WordPress instance resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<WordpressInstanceResourceInner> getWithResponse(
        String resourceGroupName, String phpWorkloadName, Context context) {
        return getWithResponseAsync(resourceGroupName, phpWorkloadName, context).block();
    }

    /**
     * Create or updated WordPress instance resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param phpWorkloadName Php workload name.
     * @param wordpressInstanceResource Resource create or update request payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return wordPress instance resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(
        String resourceGroupName, String phpWorkloadName, WordpressInstanceResourceInner wordpressInstanceResource) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (phpWorkloadName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter phpWorkloadName is required and cannot be null."));
        }
        if (wordpressInstanceResource == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter wordpressInstanceResource is required and cannot be null."));
        } else {
            wordpressInstanceResource.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .createOrUpdate(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            this.client.getApiVersion(),
                            resourceGroupName,
                            phpWorkloadName,
                            wordpressInstanceResource,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Create or updated WordPress instance resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param phpWorkloadName Php workload name.
     * @param wordpressInstanceResource Resource create or update request payload.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return wordPress instance resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(
        String resourceGroupName,
        String phpWorkloadName,
        WordpressInstanceResourceInner wordpressInstanceResource,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (phpWorkloadName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter phpWorkloadName is required and cannot be null."));
        }
        if (wordpressInstanceResource == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter wordpressInstanceResource is required and cannot be null."));
        } else {
            wordpressInstanceResource.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .createOrUpdate(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                this.client.getApiVersion(),
                resourceGroupName,
                phpWorkloadName,
                wordpressInstanceResource,
                accept,
                context);
    }

    /**
     * Create or updated WordPress instance resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param phpWorkloadName Php workload name.
     * @param wordpressInstanceResource Resource create or update request payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of wordPress instance resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<WordpressInstanceResourceInner>, WordpressInstanceResourceInner>
        beginCreateOrUpdateAsync(
            String resourceGroupName,
            String phpWorkloadName,
            WordpressInstanceResourceInner wordpressInstanceResource) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            createOrUpdateWithResponseAsync(resourceGroupName, phpWorkloadName, wordpressInstanceResource);
        return this
            .client
            .<WordpressInstanceResourceInner, WordpressInstanceResourceInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                WordpressInstanceResourceInner.class,
                WordpressInstanceResourceInner.class,
                this.client.getContext());
    }

    /**
     * Create or updated WordPress instance resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param phpWorkloadName Php workload name.
     * @param wordpressInstanceResource Resource create or update request payload.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of wordPress instance resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<WordpressInstanceResourceInner>, WordpressInstanceResourceInner>
        beginCreateOrUpdateAsync(
            String resourceGroupName,
            String phpWorkloadName,
            WordpressInstanceResourceInner wordpressInstanceResource,
            Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            createOrUpdateWithResponseAsync(resourceGroupName, phpWorkloadName, wordpressInstanceResource, context);
        return this
            .client
            .<WordpressInstanceResourceInner, WordpressInstanceResourceInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                WordpressInstanceResourceInner.class,
                WordpressInstanceResourceInner.class,
                context);
    }

    /**
     * Create or updated WordPress instance resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param phpWorkloadName Php workload name.
     * @param wordpressInstanceResource Resource create or update request payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of wordPress instance resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<WordpressInstanceResourceInner>, WordpressInstanceResourceInner> beginCreateOrUpdate(
        String resourceGroupName, String phpWorkloadName, WordpressInstanceResourceInner wordpressInstanceResource) {
        return beginCreateOrUpdateAsync(resourceGroupName, phpWorkloadName, wordpressInstanceResource).getSyncPoller();
    }

    /**
     * Create or updated WordPress instance resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param phpWorkloadName Php workload name.
     * @param wordpressInstanceResource Resource create or update request payload.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of wordPress instance resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<WordpressInstanceResourceInner>, WordpressInstanceResourceInner> beginCreateOrUpdate(
        String resourceGroupName,
        String phpWorkloadName,
        WordpressInstanceResourceInner wordpressInstanceResource,
        Context context) {
        return beginCreateOrUpdateAsync(resourceGroupName, phpWorkloadName, wordpressInstanceResource, context)
            .getSyncPoller();
    }

    /**
     * Create or updated WordPress instance resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param phpWorkloadName Php workload name.
     * @param wordpressInstanceResource Resource create or update request payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return wordPress instance resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<WordpressInstanceResourceInner> createOrUpdateAsync(
        String resourceGroupName, String phpWorkloadName, WordpressInstanceResourceInner wordpressInstanceResource) {
        return beginCreateOrUpdateAsync(resourceGroupName, phpWorkloadName, wordpressInstanceResource)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create or updated WordPress instance resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param phpWorkloadName Php workload name.
     * @param wordpressInstanceResource Resource create or update request payload.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return wordPress instance resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<WordpressInstanceResourceInner> createOrUpdateAsync(
        String resourceGroupName,
        String phpWorkloadName,
        WordpressInstanceResourceInner wordpressInstanceResource,
        Context context) {
        return beginCreateOrUpdateAsync(resourceGroupName, phpWorkloadName, wordpressInstanceResource, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create or updated WordPress instance resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param phpWorkloadName Php workload name.
     * @param wordpressInstanceResource Resource create or update request payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return wordPress instance resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public WordpressInstanceResourceInner createOrUpdate(
        String resourceGroupName, String phpWorkloadName, WordpressInstanceResourceInner wordpressInstanceResource) {
        return createOrUpdateAsync(resourceGroupName, phpWorkloadName, wordpressInstanceResource).block();
    }

    /**
     * Create or updated WordPress instance resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param phpWorkloadName Php workload name.
     * @param wordpressInstanceResource Resource create or update request payload.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return wordPress instance resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public WordpressInstanceResourceInner createOrUpdate(
        String resourceGroupName,
        String phpWorkloadName,
        WordpressInstanceResourceInner wordpressInstanceResource,
        Context context) {
        return createOrUpdateAsync(resourceGroupName, phpWorkloadName, wordpressInstanceResource, context).block();
    }

    /**
     * Delete WordPress instance resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param phpWorkloadName Php workload name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteWithResponseAsync(String resourceGroupName, String phpWorkloadName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (phpWorkloadName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter phpWorkloadName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .delete(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            this.client.getApiVersion(),
                            resourceGroupName,
                            phpWorkloadName,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Delete WordPress instance resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param phpWorkloadName Php workload name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteWithResponseAsync(
        String resourceGroupName, String phpWorkloadName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (phpWorkloadName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter phpWorkloadName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .delete(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                this.client.getApiVersion(),
                resourceGroupName,
                phpWorkloadName,
                accept,
                context);
    }

    /**
     * Delete WordPress instance resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param phpWorkloadName Php workload name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String phpWorkloadName) {
        return deleteWithResponseAsync(resourceGroupName, phpWorkloadName).flatMap(ignored -> Mono.empty());
    }

    /**
     * Delete WordPress instance resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param phpWorkloadName Php workload name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String phpWorkloadName) {
        deleteAsync(resourceGroupName, phpWorkloadName).block();
    }

    /**
     * Delete WordPress instance resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param phpWorkloadName Php workload name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteWithResponse(String resourceGroupName, String phpWorkloadName, Context context) {
        return deleteWithResponseAsync(resourceGroupName, phpWorkloadName, context).block();
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return wordPress instance resource list along with {@link PagedResponse} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<WordpressInstanceResourceInner>> listNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<WordpressInstanceResourceInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return wordPress instance resource list along with {@link PagedResponse} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<WordpressInstanceResourceInner>> listNextSinglePageAsync(
        String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }
}
