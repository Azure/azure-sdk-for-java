// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.workloads.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.resourcemanager.workloads.models.DatabaseVmDetails;
import com.azure.resourcemanager.workloads.models.SapVirtualInstanceError;
import com.azure.resourcemanager.workloads.models.SapVirtualInstanceProvisioningState;
import com.azure.resourcemanager.workloads.models.SapVirtualInstanceStatus;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** Defines the SAP Database properties. */
@Immutable
public final class SapDatabaseProperties {
    /*
     * The database subnet.
     */
    @JsonProperty(value = "subnet", access = JsonProperty.Access.WRITE_ONLY)
    private String subnet;

    /*
     * The database SID.
     */
    @JsonProperty(value = "databaseSid", access = JsonProperty.Access.WRITE_ONLY)
    private String databaseSid;

    /*
     * The SAP database type.
     */
    @JsonProperty(value = "databaseType", access = JsonProperty.Access.WRITE_ONLY)
    private String databaseType;

    /*
     * The database IP Address.
     */
    @JsonProperty(value = "ipAddress", access = JsonProperty.Access.WRITE_ONLY)
    private String ipAddress;

    /*
     * The list of virtual machines.
     */
    @JsonProperty(value = "vmDetails", access = JsonProperty.Access.WRITE_ONLY)
    private List<DatabaseVmDetails> vmDetails;

    /*
     * Defines the SAP Instance status.
     */
    @JsonProperty(value = "status", access = JsonProperty.Access.WRITE_ONLY)
    private SapVirtualInstanceStatus status;

    /*
     * Defines the provisioning states.
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private SapVirtualInstanceProvisioningState provisioningState;

    /*
     * Defines the Database Instance errors.
     */
    @JsonProperty(value = "errors", access = JsonProperty.Access.WRITE_ONLY)
    private SapVirtualInstanceError errors;

    /**
     * Get the subnet property: The database subnet.
     *
     * @return the subnet value.
     */
    public String subnet() {
        return this.subnet;
    }

    /**
     * Get the databaseSid property: The database SID.
     *
     * @return the databaseSid value.
     */
    public String databaseSid() {
        return this.databaseSid;
    }

    /**
     * Get the databaseType property: The SAP database type.
     *
     * @return the databaseType value.
     */
    public String databaseType() {
        return this.databaseType;
    }

    /**
     * Get the ipAddress property: The database IP Address.
     *
     * @return the ipAddress value.
     */
    public String ipAddress() {
        return this.ipAddress;
    }

    /**
     * Get the vmDetails property: The list of virtual machines.
     *
     * @return the vmDetails value.
     */
    public List<DatabaseVmDetails> vmDetails() {
        return this.vmDetails;
    }

    /**
     * Get the status property: Defines the SAP Instance status.
     *
     * @return the status value.
     */
    public SapVirtualInstanceStatus status() {
        return this.status;
    }

    /**
     * Get the provisioningState property: Defines the provisioning states.
     *
     * @return the provisioningState value.
     */
    public SapVirtualInstanceProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the errors property: Defines the Database Instance errors.
     *
     * @return the errors value.
     */
    public SapVirtualInstanceError errors() {
        return this.errors;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (vmDetails() != null) {
            vmDetails().forEach(e -> e.validate());
        }
        if (errors() != null) {
            errors().validate();
        }
    }
}
