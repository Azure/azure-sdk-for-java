// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.workloads.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.Resource;
import com.azure.core.management.SystemData;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.workloads.models.ManagedRGConfiguration;
import com.azure.resourcemanager.workloads.models.MonitorPropertiesErrors;
import com.azure.resourcemanager.workloads.models.RoutingPreference;
import com.azure.resourcemanager.workloads.models.UserAssignedServiceIdentity;
import com.azure.resourcemanager.workloads.models.WorkloadMonitorProvisioningState;
import java.io.IOException;
import java.util.Map;

/**
 * SAP monitor info on Azure (ARM properties and SAP monitor properties).
 */
@Fluent
public final class MonitorInner extends Resource {
    /*
     * [currently not in use] Managed service identity(user assigned identities)
     */
    private UserAssignedServiceIdentity identity;

    /*
     * SAP monitor properties
     */
    private MonitorProperties innerProperties;

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    private SystemData systemData;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of MonitorInner class.
     */
    public MonitorInner() {
    }

    /**
     * Get the identity property: [currently not in use] Managed service identity(user assigned identities).
     * 
     * @return the identity value.
     */
    public UserAssignedServiceIdentity identity() {
        return this.identity;
    }

    /**
     * Set the identity property: [currently not in use] Managed service identity(user assigned identities).
     * 
     * @param identity the identity value to set.
     * @return the MonitorInner object itself.
     */
    public MonitorInner withIdentity(UserAssignedServiceIdentity identity) {
        this.identity = identity;
        return this;
    }

    /**
     * Get the innerProperties property: SAP monitor properties.
     * 
     * @return the innerProperties value.
     */
    private MonitorProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MonitorInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MonitorInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Get the provisioningState property: State of provisioning of the SAP monitor.
     * 
     * @return the provisioningState value.
     */
    public WorkloadMonitorProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Get the errors property: Defines the SAP monitor errors.
     * 
     * @return the errors value.
     */
    public MonitorPropertiesErrors errors() {
        return this.innerProperties() == null ? null : this.innerProperties().errors();
    }

    /**
     * Get the appLocation property: The SAP monitor resources will be deployed in the SAP monitoring region. The subnet
     * region should be same as the SAP monitoring region.
     * 
     * @return the appLocation value.
     */
    public String appLocation() {
        return this.innerProperties() == null ? null : this.innerProperties().appLocation();
    }

    /**
     * Set the appLocation property: The SAP monitor resources will be deployed in the SAP monitoring region. The subnet
     * region should be same as the SAP monitoring region.
     * 
     * @param appLocation the appLocation value to set.
     * @return the MonitorInner object itself.
     */
    public MonitorInner withAppLocation(String appLocation) {
        if (this.innerProperties() == null) {
            this.innerProperties = new MonitorProperties();
        }
        this.innerProperties().withAppLocation(appLocation);
        return this;
    }

    /**
     * Get the routingPreference property: Sets the routing preference of the SAP monitor. By default only RFC1918
     * traffic is routed to the customer VNET.
     * 
     * @return the routingPreference value.
     */
    public RoutingPreference routingPreference() {
        return this.innerProperties() == null ? null : this.innerProperties().routingPreference();
    }

    /**
     * Set the routingPreference property: Sets the routing preference of the SAP monitor. By default only RFC1918
     * traffic is routed to the customer VNET.
     * 
     * @param routingPreference the routingPreference value to set.
     * @return the MonitorInner object itself.
     */
    public MonitorInner withRoutingPreference(RoutingPreference routingPreference) {
        if (this.innerProperties() == null) {
            this.innerProperties = new MonitorProperties();
        }
        this.innerProperties().withRoutingPreference(routingPreference);
        return this;
    }

    /**
     * Get the zoneRedundancyPreference property: Sets the preference for zone redundancy on resources created for the
     * SAP monitor. By default resources will be created which do not support zone redundancy.
     * 
     * @return the zoneRedundancyPreference value.
     */
    public String zoneRedundancyPreference() {
        return this.innerProperties() == null ? null : this.innerProperties().zoneRedundancyPreference();
    }

    /**
     * Set the zoneRedundancyPreference property: Sets the preference for zone redundancy on resources created for the
     * SAP monitor. By default resources will be created which do not support zone redundancy.
     * 
     * @param zoneRedundancyPreference the zoneRedundancyPreference value to set.
     * @return the MonitorInner object itself.
     */
    public MonitorInner withZoneRedundancyPreference(String zoneRedundancyPreference) {
        if (this.innerProperties() == null) {
            this.innerProperties = new MonitorProperties();
        }
        this.innerProperties().withZoneRedundancyPreference(zoneRedundancyPreference);
        return this;
    }

    /**
     * Get the managedResourceGroupConfiguration property: Managed resource group configuration.
     * 
     * @return the managedResourceGroupConfiguration value.
     */
    public ManagedRGConfiguration managedResourceGroupConfiguration() {
        return this.innerProperties() == null ? null : this.innerProperties().managedResourceGroupConfiguration();
    }

    /**
     * Set the managedResourceGroupConfiguration property: Managed resource group configuration.
     * 
     * @param managedResourceGroupConfiguration the managedResourceGroupConfiguration value to set.
     * @return the MonitorInner object itself.
     */
    public MonitorInner
        withManagedResourceGroupConfiguration(ManagedRGConfiguration managedResourceGroupConfiguration) {
        if (this.innerProperties() == null) {
            this.innerProperties = new MonitorProperties();
        }
        this.innerProperties().withManagedResourceGroupConfiguration(managedResourceGroupConfiguration);
        return this;
    }

    /**
     * Get the logAnalyticsWorkspaceArmId property: The ARM ID of the Log Analytics Workspace that is used for SAP
     * monitoring.
     * 
     * @return the logAnalyticsWorkspaceArmId value.
     */
    public String logAnalyticsWorkspaceArmId() {
        return this.innerProperties() == null ? null : this.innerProperties().logAnalyticsWorkspaceArmId();
    }

    /**
     * Set the logAnalyticsWorkspaceArmId property: The ARM ID of the Log Analytics Workspace that is used for SAP
     * monitoring.
     * 
     * @param logAnalyticsWorkspaceArmId the logAnalyticsWorkspaceArmId value to set.
     * @return the MonitorInner object itself.
     */
    public MonitorInner withLogAnalyticsWorkspaceArmId(String logAnalyticsWorkspaceArmId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new MonitorProperties();
        }
        this.innerProperties().withLogAnalyticsWorkspaceArmId(logAnalyticsWorkspaceArmId);
        return this;
    }

    /**
     * Get the monitorSubnet property: The subnet which the SAP monitor will be deployed in.
     * 
     * @return the monitorSubnet value.
     */
    public String monitorSubnet() {
        return this.innerProperties() == null ? null : this.innerProperties().monitorSubnet();
    }

    /**
     * Set the monitorSubnet property: The subnet which the SAP monitor will be deployed in.
     * 
     * @param monitorSubnet the monitorSubnet value to set.
     * @return the MonitorInner object itself.
     */
    public MonitorInner withMonitorSubnet(String monitorSubnet) {
        if (this.innerProperties() == null) {
            this.innerProperties = new MonitorProperties();
        }
        this.innerProperties().withMonitorSubnet(monitorSubnet);
        return this;
    }

    /**
     * Get the msiArmId property: The ARM ID of the MSI used for SAP monitoring.
     * 
     * @return the msiArmId value.
     */
    public String msiArmId() {
        return this.innerProperties() == null ? null : this.innerProperties().msiArmId();
    }

    /**
     * Get the storageAccountArmId property: The ARM ID of the Storage account used for SAP monitoring.
     * 
     * @return the storageAccountArmId value.
     */
    public String storageAccountArmId() {
        return this.innerProperties() == null ? null : this.innerProperties().storageAccountArmId();
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (identity() != null) {
            identity().validate();
        }
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("location", location());
        jsonWriter.writeMapField("tags", tags(), (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("identity", this.identity);
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MonitorInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MonitorInner if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the MonitorInner.
     */
    public static MonitorInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MonitorInner deserializedMonitorInner = new MonitorInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedMonitorInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedMonitorInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedMonitorInner.type = reader.getString();
                } else if ("location".equals(fieldName)) {
                    deserializedMonitorInner.withLocation(reader.getString());
                } else if ("tags".equals(fieldName)) {
                    Map<String, String> tags = reader.readMap(reader1 -> reader1.getString());
                    deserializedMonitorInner.withTags(tags);
                } else if ("identity".equals(fieldName)) {
                    deserializedMonitorInner.identity = UserAssignedServiceIdentity.fromJson(reader);
                } else if ("properties".equals(fieldName)) {
                    deserializedMonitorInner.innerProperties = MonitorProperties.fromJson(reader);
                } else if ("systemData".equals(fieldName)) {
                    deserializedMonitorInner.systemData = SystemData.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMonitorInner;
        });
    }
}
