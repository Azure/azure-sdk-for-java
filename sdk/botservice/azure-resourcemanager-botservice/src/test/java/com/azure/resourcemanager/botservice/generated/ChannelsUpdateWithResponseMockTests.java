// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.botservice.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.botservice.BotServiceManager;
import com.azure.resourcemanager.botservice.fluent.models.BotChannelInner;
import com.azure.resourcemanager.botservice.models.BotChannel;
import com.azure.resourcemanager.botservice.models.Channel;
import com.azure.resourcemanager.botservice.models.ChannelName;
import com.azure.resourcemanager.botservice.models.Kind;
import com.azure.resourcemanager.botservice.models.Sku;
import com.azure.resourcemanager.botservice.models.SkuName;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ChannelsUpdateWithResponseMockTests {
    @Test
    public void testUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"channelName\":\"Channel\",\"etag\":\"uukzclewyhmlw\",\"provisioningState\":\"ztzp\",\"location\":\"ncckw\"},\"sku\":{\"name\":\"S1\",\"tier\":\"Standard\"},\"kind\":\"sdk\",\"etag\":\"buy\",\"zones\":[\"zfeqztppri\"],\"location\":\"lxorjaltolmncws\",\"tags\":{\"pfuvglsbjjca\":\"wcsdbnwdcfhucq\",\"t\":\"vxb\",\"mr\":\"udutnco\",\"f\":\"xqtvcofu\"},\"id\":\"vkg\",\"name\":\"u\",\"type\":\"gdknnqv\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        BotServiceManager manager = BotServiceManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        BotChannel response = manager.channels()
            .updateWithResponse("nwxuqlcvydyp", "tdooaoj", ChannelName.WEB_CHAT_CHANNEL,
                new BotChannelInner().withLocation("lyls")
                    .withTags(mapOf("xsdszuempsb", "qjnsjervtia"))
                    .withProperties(new Channel().withEtag("dkooebwnu").withLocation("dtjinfw"))
                    .withSku(new Sku().withName(SkuName.F0))
                    .withKind(Kind.DESIGNER)
                    .withEtag("jvefkdlfoakggkfp"),
                com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("lxorjaltolmncws", response.location());
        Assertions.assertEquals("wcsdbnwdcfhucq", response.tags().get("pfuvglsbjjca"));
        Assertions.assertEquals("uukzclewyhmlw", response.properties().etag());
        Assertions.assertEquals("ncckw", response.properties().location());
        Assertions.assertEquals(SkuName.S1, response.sku().name());
        Assertions.assertEquals(Kind.SDK, response.kind());
        Assertions.assertEquals("buy", response.etag());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
