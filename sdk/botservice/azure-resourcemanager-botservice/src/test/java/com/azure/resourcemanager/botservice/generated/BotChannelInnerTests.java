// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.botservice.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.botservice.fluent.models.BotChannelInner;
import com.azure.resourcemanager.botservice.models.Channel;
import com.azure.resourcemanager.botservice.models.Kind;
import com.azure.resourcemanager.botservice.models.Sku;
import com.azure.resourcemanager.botservice.models.SkuName;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class BotChannelInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        BotChannelInner model = BinaryData.fromString(
            "{\"properties\":{\"channelName\":\"Channel\",\"etag\":\"aozwyiftyhxhu\",\"provisioningState\":\"k\",\"location\":\"yxolniwp\"},\"sku\":{\"name\":\"S1\",\"tier\":\"Standard\"},\"kind\":\"designer\",\"etag\":\"iawxklry\",\"zones\":[\"ckbasyypndd\",\"sgcbac\",\"hejkotynqgou\"],\"location\":\"zndlikwy\",\"tags\":{\"rxybz\":\"fgibmadgakeq\",\"mnkzsmod\":\"qedqytbciqfoufl\"},\"id\":\"glougpbk\",\"name\":\"tmut\",\"type\":\"uqktap\"}")
            .toObject(BotChannelInner.class);
        Assertions.assertEquals("zndlikwy", model.location());
        Assertions.assertEquals("fgibmadgakeq", model.tags().get("rxybz"));
        Assertions.assertEquals("aozwyiftyhxhu", model.properties().etag());
        Assertions.assertEquals("yxolniwp", model.properties().location());
        Assertions.assertEquals(SkuName.S1, model.sku().name());
        Assertions.assertEquals(Kind.DESIGNER, model.kind());
        Assertions.assertEquals("iawxklry", model.etag());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        BotChannelInner model = new BotChannelInner().withLocation("zndlikwy")
            .withTags(mapOf("rxybz", "fgibmadgakeq", "mnkzsmod", "qedqytbciqfoufl"))
            .withProperties(new Channel().withEtag("aozwyiftyhxhu").withLocation("yxolniwp"))
            .withSku(new Sku().withName(SkuName.S1))
            .withKind(Kind.DESIGNER)
            .withEtag("iawxklry");
        model = BinaryData.fromObject(model).toObject(BotChannelInner.class);
        Assertions.assertEquals("zndlikwy", model.location());
        Assertions.assertEquals("fgibmadgakeq", model.tags().get("rxybz"));
        Assertions.assertEquals("aozwyiftyhxhu", model.properties().etag());
        Assertions.assertEquals("yxolniwp", model.properties().location());
        Assertions.assertEquals(SkuName.S1, model.sku().name());
        Assertions.assertEquals(Kind.DESIGNER, model.kind());
        Assertions.assertEquals("iawxklry", model.etag());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
