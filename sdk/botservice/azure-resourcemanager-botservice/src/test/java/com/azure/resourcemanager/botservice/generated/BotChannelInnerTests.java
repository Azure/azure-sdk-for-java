// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.botservice.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.botservice.fluent.models.BotChannelInner;
import com.azure.resourcemanager.botservice.models.Channel;
import com.azure.resourcemanager.botservice.models.Kind;
import com.azure.resourcemanager.botservice.models.Sku;
import com.azure.resourcemanager.botservice.models.SkuName;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class BotChannelInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        BotChannelInner model = BinaryData.fromString(
            "{\"properties\":{\"channelName\":\"Channel\",\"etag\":\"zrnf\",\"provisioningState\":\"xgispemvtzfkufu\",\"location\":\"jofxqe\"},\"sku\":{\"name\":\"F0\",\"tier\":\"Free\"},\"kind\":\"azurebot\",\"etag\":\"qjbasvms\",\"zones\":[\"ulngsntn\",\"ybkzgcwr\",\"clxxwrljdo\",\"skcqvkocrcjd\"],\"location\":\"wtnhxbnjbiksqr\",\"tags\":{\"jfm\":\"sainqpjwnzl\",\"vmgxsab\":\"pee\",\"jczdzevndh\":\"yqduujit\",\"feusnhut\":\"rwpdappdsbdkvwrw\"},\"id\":\"eltmrldhugjzzdat\",\"name\":\"xhocdgeablgphuti\",\"type\":\"ndv\"}")
            .toObject(BotChannelInner.class);
        Assertions.assertEquals("wtnhxbnjbiksqr", model.location());
        Assertions.assertEquals("sainqpjwnzl", model.tags().get("jfm"));
        Assertions.assertEquals("zrnf", model.properties().etag());
        Assertions.assertEquals("jofxqe", model.properties().location());
        Assertions.assertEquals(SkuName.F0, model.sku().name());
        Assertions.assertEquals(Kind.AZUREBOT, model.kind());
        Assertions.assertEquals("qjbasvms", model.etag());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        BotChannelInner model = new BotChannelInner().withLocation("wtnhxbnjbiksqr")
            .withTags(
                mapOf("jfm", "sainqpjwnzl", "vmgxsab", "pee", "jczdzevndh", "yqduujit", "feusnhut", "rwpdappdsbdkvwrw"))
            .withProperties(new Channel().withEtag("zrnf").withLocation("jofxqe"))
            .withSku(new Sku().withName(SkuName.F0))
            .withKind(Kind.AZUREBOT)
            .withEtag("qjbasvms");
        model = BinaryData.fromObject(model).toObject(BotChannelInner.class);
        Assertions.assertEquals("wtnhxbnjbiksqr", model.location());
        Assertions.assertEquals("sainqpjwnzl", model.tags().get("jfm"));
        Assertions.assertEquals("zrnf", model.properties().etag());
        Assertions.assertEquals("jofxqe", model.properties().location());
        Assertions.assertEquals(SkuName.F0, model.sku().name());
        Assertions.assertEquals(Kind.AZUREBOT, model.kind());
        Assertions.assertEquals("qjbasvms", model.etag());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
