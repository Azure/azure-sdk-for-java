// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.botservice.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.botservice.BotServiceManager;
import com.azure.resourcemanager.botservice.fluent.models.BotChannelInner;
import com.azure.resourcemanager.botservice.models.BotChannel;
import com.azure.resourcemanager.botservice.models.Channel;
import com.azure.resourcemanager.botservice.models.ChannelName;
import com.azure.resourcemanager.botservice.models.Kind;
import com.azure.resourcemanager.botservice.models.Sku;
import com.azure.resourcemanager.botservice.models.SkuName;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ChannelsCreateWithResponseMockTests {
    @Test
    public void testCreateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"channelName\":\"Channel\",\"etag\":\"itc\",\"provisioningState\":\"fcktqumiekke\",\"location\":\"ikh\"},\"sku\":{\"name\":\"F0\",\"tier\":\"Free\"},\"kind\":\"sdk\",\"etag\":\"gge\",\"zones\":[\"nyga\",\"qidbqfatpxllrxcy\",\"moadsuvarmy\"],\"location\":\"dmjsjqb\",\"tags\":{\"kxkgymareqna\":\"yxxrwlycoduh\",\"ssofwqmzqa\":\"xqugjhkycubedd\",\"nbyxbaaabjyv\":\"krmnjijpxacqqud\",\"xnevfdnwn\":\"yffimrzrtuzqogs\"},\"id\":\"mewzsyyc\",\"name\":\"uzsoi\",\"type\":\"judpfrxt\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        BotServiceManager manager = BotServiceManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        BotChannel response = manager.channels()
            .createWithResponse("cjzkzivgvvcna", "rhyrnxxmueed", ChannelName.FACEBOOK_CHANNEL,
                new BotChannelInner().withLocation("fnjhfjxwmszkkfo")
                    .withTags(mapOf("jawneaiv", "yfkzik", "elsfeaen", "wczelpci", "dxbjhwuaanozj", "abfatkl"))
                    .withProperties(new Channel().withEtag("v").withLocation("d"))
                    .withSku(new Sku().withName(SkuName.F0))
                    .withKind(Kind.FUNCTION)
                    .withEtag("gpiohgwxrtfudxe"),
                com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("dmjsjqb", response.location());
        Assertions.assertEquals("yxxrwlycoduh", response.tags().get("kxkgymareqna"));
        Assertions.assertEquals("itc", response.properties().etag());
        Assertions.assertEquals("ikh", response.properties().location());
        Assertions.assertEquals(SkuName.F0, response.sku().name());
        Assertions.assertEquals(Kind.SDK, response.kind());
        Assertions.assertEquals("gge", response.etag());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
