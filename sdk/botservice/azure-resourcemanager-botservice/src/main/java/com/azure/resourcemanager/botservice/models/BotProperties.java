// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.botservice.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** The parameters to provide for the Bot. */
@Fluent
public final class BotProperties {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(BotProperties.class);

    /*
     * The Name of the bot
     */
    @JsonProperty(value = "displayName", required = true)
    private String displayName;

    /*
     * The description of the bot
     */
    @JsonProperty(value = "description")
    private String description;

    /*
     * The Icon Url of the bot
     */
    @JsonProperty(value = "iconUrl")
    private String iconUrl;

    /*
     * The bot's endpoint
     */
    @JsonProperty(value = "endpoint", required = true)
    private String endpoint;

    /*
     * The bot's endpoint version
     */
    @JsonProperty(value = "endpointVersion", access = JsonProperty.Access.WRITE_ONLY)
    private String endpointVersion;

    /*
     * Microsoft App Id for the bot
     */
    @JsonProperty(value = "msaAppId", required = true)
    private String msaAppId;

    /*
     * Collection of channels for which the bot is configured
     */
    @JsonProperty(value = "configuredChannels", access = JsonProperty.Access.WRITE_ONLY)
    private List<String> configuredChannels;

    /*
     * Collection of channels for which the bot is enabled
     */
    @JsonProperty(value = "enabledChannels", access = JsonProperty.Access.WRITE_ONLY)
    private List<String> enabledChannels;

    /*
     * The Application Insights key
     */
    @JsonProperty(value = "developerAppInsightKey")
    private String developerAppInsightKey;

    /*
     * The Application Insights Api Key
     */
    @JsonProperty(value = "developerAppInsightsApiKey")
    private String developerAppInsightsApiKey;

    /*
     * The Application Insights App Id
     */
    @JsonProperty(value = "developerAppInsightsApplicationId")
    private String developerAppInsightsApplicationId;

    /*
     * Collection of LUIS App Ids
     */
    @JsonProperty(value = "luisAppIds")
    private List<String> luisAppIds;

    /*
     * The LUIS Key
     */
    @JsonProperty(value = "luisKey")
    private String luisKey;

    /*
     * Whether Cmek is enabled
     */
    @JsonProperty(value = "isCmekEnabled")
    private Boolean isCmekEnabled;

    /*
     * The CMK Url
     */
    @JsonProperty(value = "cmekKeyVaultUrl")
    private String cmekKeyVaultUrl;

    /*
     * Whether the bot is in an isolated network
     */
    @JsonProperty(value = "isIsolated")
    private Boolean isIsolated;

    /*
     * The channel schema transformation version for the bot
     */
    @JsonProperty(value = "schemaTransformationVersion")
    private String schemaTransformationVersion;

    /**
     * Get the displayName property: The Name of the bot.
     *
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: The Name of the bot.
     *
     * @param displayName the displayName value to set.
     * @return the BotProperties object itself.
     */
    public BotProperties withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the description property: The description of the bot.
     *
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: The description of the bot.
     *
     * @param description the description value to set.
     * @return the BotProperties object itself.
     */
    public BotProperties withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the iconUrl property: The Icon Url of the bot.
     *
     * @return the iconUrl value.
     */
    public String iconUrl() {
        return this.iconUrl;
    }

    /**
     * Set the iconUrl property: The Icon Url of the bot.
     *
     * @param iconUrl the iconUrl value to set.
     * @return the BotProperties object itself.
     */
    public BotProperties withIconUrl(String iconUrl) {
        this.iconUrl = iconUrl;
        return this;
    }

    /**
     * Get the endpoint property: The bot's endpoint.
     *
     * @return the endpoint value.
     */
    public String endpoint() {
        return this.endpoint;
    }

    /**
     * Set the endpoint property: The bot's endpoint.
     *
     * @param endpoint the endpoint value to set.
     * @return the BotProperties object itself.
     */
    public BotProperties withEndpoint(String endpoint) {
        this.endpoint = endpoint;
        return this;
    }

    /**
     * Get the endpointVersion property: The bot's endpoint version.
     *
     * @return the endpointVersion value.
     */
    public String endpointVersion() {
        return this.endpointVersion;
    }

    /**
     * Get the msaAppId property: Microsoft App Id for the bot.
     *
     * @return the msaAppId value.
     */
    public String msaAppId() {
        return this.msaAppId;
    }

    /**
     * Set the msaAppId property: Microsoft App Id for the bot.
     *
     * @param msaAppId the msaAppId value to set.
     * @return the BotProperties object itself.
     */
    public BotProperties withMsaAppId(String msaAppId) {
        this.msaAppId = msaAppId;
        return this;
    }

    /**
     * Get the configuredChannels property: Collection of channels for which the bot is configured.
     *
     * @return the configuredChannels value.
     */
    public List<String> configuredChannels() {
        return this.configuredChannels;
    }

    /**
     * Get the enabledChannels property: Collection of channels for which the bot is enabled.
     *
     * @return the enabledChannels value.
     */
    public List<String> enabledChannels() {
        return this.enabledChannels;
    }

    /**
     * Get the developerAppInsightKey property: The Application Insights key.
     *
     * @return the developerAppInsightKey value.
     */
    public String developerAppInsightKey() {
        return this.developerAppInsightKey;
    }

    /**
     * Set the developerAppInsightKey property: The Application Insights key.
     *
     * @param developerAppInsightKey the developerAppInsightKey value to set.
     * @return the BotProperties object itself.
     */
    public BotProperties withDeveloperAppInsightKey(String developerAppInsightKey) {
        this.developerAppInsightKey = developerAppInsightKey;
        return this;
    }

    /**
     * Get the developerAppInsightsApiKey property: The Application Insights Api Key.
     *
     * @return the developerAppInsightsApiKey value.
     */
    public String developerAppInsightsApiKey() {
        return this.developerAppInsightsApiKey;
    }

    /**
     * Set the developerAppInsightsApiKey property: The Application Insights Api Key.
     *
     * @param developerAppInsightsApiKey the developerAppInsightsApiKey value to set.
     * @return the BotProperties object itself.
     */
    public BotProperties withDeveloperAppInsightsApiKey(String developerAppInsightsApiKey) {
        this.developerAppInsightsApiKey = developerAppInsightsApiKey;
        return this;
    }

    /**
     * Get the developerAppInsightsApplicationId property: The Application Insights App Id.
     *
     * @return the developerAppInsightsApplicationId value.
     */
    public String developerAppInsightsApplicationId() {
        return this.developerAppInsightsApplicationId;
    }

    /**
     * Set the developerAppInsightsApplicationId property: The Application Insights App Id.
     *
     * @param developerAppInsightsApplicationId the developerAppInsightsApplicationId value to set.
     * @return the BotProperties object itself.
     */
    public BotProperties withDeveloperAppInsightsApplicationId(String developerAppInsightsApplicationId) {
        this.developerAppInsightsApplicationId = developerAppInsightsApplicationId;
        return this;
    }

    /**
     * Get the luisAppIds property: Collection of LUIS App Ids.
     *
     * @return the luisAppIds value.
     */
    public List<String> luisAppIds() {
        return this.luisAppIds;
    }

    /**
     * Set the luisAppIds property: Collection of LUIS App Ids.
     *
     * @param luisAppIds the luisAppIds value to set.
     * @return the BotProperties object itself.
     */
    public BotProperties withLuisAppIds(List<String> luisAppIds) {
        this.luisAppIds = luisAppIds;
        return this;
    }

    /**
     * Get the luisKey property: The LUIS Key.
     *
     * @return the luisKey value.
     */
    public String luisKey() {
        return this.luisKey;
    }

    /**
     * Set the luisKey property: The LUIS Key.
     *
     * @param luisKey the luisKey value to set.
     * @return the BotProperties object itself.
     */
    public BotProperties withLuisKey(String luisKey) {
        this.luisKey = luisKey;
        return this;
    }

    /**
     * Get the isCmekEnabled property: Whether Cmek is enabled.
     *
     * @return the isCmekEnabled value.
     */
    public Boolean isCmekEnabled() {
        return this.isCmekEnabled;
    }

    /**
     * Set the isCmekEnabled property: Whether Cmek is enabled.
     *
     * @param isCmekEnabled the isCmekEnabled value to set.
     * @return the BotProperties object itself.
     */
    public BotProperties withIsCmekEnabled(Boolean isCmekEnabled) {
        this.isCmekEnabled = isCmekEnabled;
        return this;
    }

    /**
     * Get the cmekKeyVaultUrl property: The CMK Url.
     *
     * @return the cmekKeyVaultUrl value.
     */
    public String cmekKeyVaultUrl() {
        return this.cmekKeyVaultUrl;
    }

    /**
     * Set the cmekKeyVaultUrl property: The CMK Url.
     *
     * @param cmekKeyVaultUrl the cmekKeyVaultUrl value to set.
     * @return the BotProperties object itself.
     */
    public BotProperties withCmekKeyVaultUrl(String cmekKeyVaultUrl) {
        this.cmekKeyVaultUrl = cmekKeyVaultUrl;
        return this;
    }

    /**
     * Get the isIsolated property: Whether the bot is in an isolated network.
     *
     * @return the isIsolated value.
     */
    public Boolean isIsolated() {
        return this.isIsolated;
    }

    /**
     * Set the isIsolated property: Whether the bot is in an isolated network.
     *
     * @param isIsolated the isIsolated value to set.
     * @return the BotProperties object itself.
     */
    public BotProperties withIsIsolated(Boolean isIsolated) {
        this.isIsolated = isIsolated;
        return this;
    }

    /**
     * Get the schemaTransformationVersion property: The channel schema transformation version for the bot.
     *
     * @return the schemaTransformationVersion value.
     */
    public String schemaTransformationVersion() {
        return this.schemaTransformationVersion;
    }

    /**
     * Set the schemaTransformationVersion property: The channel schema transformation version for the bot.
     *
     * @param schemaTransformationVersion the schemaTransformationVersion value to set.
     * @return the BotProperties object itself.
     */
    public BotProperties withSchemaTransformationVersion(String schemaTransformationVersion) {
        this.schemaTransformationVersion = schemaTransformationVersion;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (displayName() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property displayName in model BotProperties"));
        }
        if (endpoint() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property endpoint in model BotProperties"));
        }
        if (msaAppId() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property msaAppId in model BotProperties"));
        }
    }
}
