// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.botservice.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Site information for WebChat or DirectLine Channels to identify which site to regenerate keys for.
 */
@Fluent
public final class SiteInfo implements JsonSerializable<SiteInfo> {
    /*
     * The site name
     */
    private String siteName;

    /*
     * Determines which key is to be regenerated
     */
    private Key key;

    /**
     * Creates an instance of SiteInfo class.
     */
    public SiteInfo() {
    }

    /**
     * Get the siteName property: The site name.
     * 
     * @return the siteName value.
     */
    public String siteName() {
        return this.siteName;
    }

    /**
     * Set the siteName property: The site name.
     * 
     * @param siteName the siteName value to set.
     * @return the SiteInfo object itself.
     */
    public SiteInfo withSiteName(String siteName) {
        this.siteName = siteName;
        return this;
    }

    /**
     * Get the key property: Determines which key is to be regenerated.
     * 
     * @return the key value.
     */
    public Key key() {
        return this.key;
    }

    /**
     * Set the key property: Determines which key is to be regenerated.
     * 
     * @param key the key value to set.
     * @return the SiteInfo object itself.
     */
    public SiteInfo withKey(Key key) {
        this.key = key;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (siteName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property siteName in model SiteInfo"));
        }
        if (key() == null) {
            throw LOGGER.atError().log(new IllegalArgumentException("Missing required property key in model SiteInfo"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(SiteInfo.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("siteName", this.siteName);
        jsonWriter.writeStringField("key", this.key == null ? null : this.key.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SiteInfo from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SiteInfo if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SiteInfo.
     */
    public static SiteInfo fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SiteInfo deserializedSiteInfo = new SiteInfo();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("siteName".equals(fieldName)) {
                    deserializedSiteInfo.siteName = reader.getString();
                } else if ("key".equals(fieldName)) {
                    deserializedSiteInfo.key = Key.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSiteInfo;
        });
    }
}
