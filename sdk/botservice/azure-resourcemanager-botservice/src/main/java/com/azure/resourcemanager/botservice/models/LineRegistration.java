// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.botservice.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The properties corresponding to a line channel registration.
 */
@Fluent
public final class LineRegistration implements JsonSerializable<LineRegistration> {
    /*
     * Id generated for the line channel registration
     */
    private String generatedId;

    /*
     * Secret for the line channel registration
     */
    private String channelSecret;

    /*
     * Access token for the line channel registration
     */
    private String channelAccessToken;

    /**
     * Creates an instance of LineRegistration class.
     */
    public LineRegistration() {
    }

    /**
     * Get the generatedId property: Id generated for the line channel registration.
     * 
     * @return the generatedId value.
     */
    public String generatedId() {
        return this.generatedId;
    }

    /**
     * Get the channelSecret property: Secret for the line channel registration.
     * 
     * @return the channelSecret value.
     */
    public String channelSecret() {
        return this.channelSecret;
    }

    /**
     * Set the channelSecret property: Secret for the line channel registration.
     * 
     * @param channelSecret the channelSecret value to set.
     * @return the LineRegistration object itself.
     */
    public LineRegistration withChannelSecret(String channelSecret) {
        this.channelSecret = channelSecret;
        return this;
    }

    /**
     * Get the channelAccessToken property: Access token for the line channel registration.
     * 
     * @return the channelAccessToken value.
     */
    public String channelAccessToken() {
        return this.channelAccessToken;
    }

    /**
     * Set the channelAccessToken property: Access token for the line channel registration.
     * 
     * @param channelAccessToken the channelAccessToken value to set.
     * @return the LineRegistration object itself.
     */
    public LineRegistration withChannelAccessToken(String channelAccessToken) {
        this.channelAccessToken = channelAccessToken;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("channelSecret", this.channelSecret);
        jsonWriter.writeStringField("channelAccessToken", this.channelAccessToken);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LineRegistration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LineRegistration if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the LineRegistration.
     */
    public static LineRegistration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LineRegistration deserializedLineRegistration = new LineRegistration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("generatedId".equals(fieldName)) {
                    deserializedLineRegistration.generatedId = reader.getString();
                } else if ("channelSecret".equals(fieldName)) {
                    deserializedLineRegistration.channelSecret = reader.getString();
                } else if ("channelAccessToken".equals(fieldName)) {
                    deserializedLineRegistration.channelAccessToken = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLineRegistration;
        });
    }
}
