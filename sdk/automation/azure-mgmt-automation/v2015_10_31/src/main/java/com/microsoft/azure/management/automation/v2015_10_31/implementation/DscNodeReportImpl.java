/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.automation.v2015_10_31.implementation;

import com.microsoft.azure.management.automation.v2015_10_31.DscNodeReport;
import com.microsoft.azure.arm.model.implementation.IndexableRefreshableWrapperImpl;
import rx.Observable;
import org.joda.time.DateTime;
import java.util.List;
import com.microsoft.azure.management.automation.v2015_10_31.DscReportError;
import com.microsoft.azure.management.automation.v2015_10_31.DscMetaConfiguration;
import com.microsoft.azure.management.automation.v2015_10_31.DscReportResource;

class DscNodeReportImpl extends IndexableRefreshableWrapperImpl<DscNodeReport, DscNodeReportInner> implements DscNodeReport {
    private final AutomationManager manager;
    private String resourceGroupName;
    private String automationAccountName;
    private String nodeId;
    private String reportId;

    DscNodeReportImpl(DscNodeReportInner inner,  AutomationManager manager) {
        super(null, inner);
        this.manager = manager;
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.automationAccountName = IdParsingUtils.getValueFromIdByName(inner.id(), "automationAccounts");
        this.nodeId = IdParsingUtils.getValueFromIdByName(inner.id(), "nodes");
        this.reportId = IdParsingUtils.getValueFromIdByName(inner.id(), "reports");
    }

    @Override
    public AutomationManager manager() {
        return this.manager;
    }

    @Override
    protected Observable<DscNodeReportInner> getInnerAsync() {
        NodeReportsInner client = this.manager().inner().nodeReports();
        return client.getAsync(this.resourceGroupName, this.automationAccountName, this.nodeId, this.reportId);
    }



    @Override
    public String configurationVersion() {
        return this.inner().configurationVersion();
    }

    @Override
    public DateTime endTime() {
        return this.inner().endTime();
    }

    @Override
    public List<DscReportError> errors() {
        return this.inner().errors();
    }

    @Override
    public String hostName() {
        return this.inner().hostName();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public List<String> iPV4Addresses() {
        return this.inner().iPV4Addresses();
    }

    @Override
    public List<String> iPV6Addresses() {
        return this.inner().iPV6Addresses();
    }

    @Override
    public DateTime lastModifiedTime() {
        return this.inner().lastModifiedTime();
    }

    @Override
    public DscMetaConfiguration metaConfiguration() {
        return this.inner().metaConfiguration();
    }

    @Override
    public Integer numberOfResources() {
        return this.inner().numberOfResources();
    }

    @Override
    public String rawErrors() {
        return this.inner().rawErrors();
    }

    @Override
    public String rebootRequested() {
        return this.inner().rebootRequested();
    }

    @Override
    public String refreshMode() {
        return this.inner().refreshMode();
    }

    @Override
    public String reportFormatVersion() {
        return this.inner().reportFormatVersion();
    }

    @Override
    public String reportId() {
        return this.inner().reportId();
    }

    @Override
    public List<DscReportResource> resources() {
        return this.inner().resources();
    }

    @Override
    public DateTime startTime() {
        return this.inner().startTime();
    }

    @Override
    public String status() {
        return this.inner().status();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

}
