/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.automation.v2015_10_31.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.automation.v2015_10_31.ErrorResponseException;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Activitys.
 */
public class ActivitysInner {
    /** The Retrofit service to perform REST calls. */
    private ActivitysService service;
    /** The service client containing this operation class. */
    private AutomationClientImpl client;

    /**
     * Initializes an instance of ActivitysInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public ActivitysInner(Retrofit retrofit, AutomationClientImpl client) {
        this.service = retrofit.create(ActivitysService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Activitys to be
     * used by Retrofit to perform actually REST calls.
     */
    interface ActivitysService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.automation.v2015_10_31.Activitys get" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/modules/{moduleName}/activities/{activityName}")
        Observable<Response<ResponseBody>> get(@Path("resourceGroupName") String resourceGroupName, @Path("automationAccountName") String automationAccountName, @Path("moduleName") String moduleName, @Path("activityName") String activityName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.automation.v2015_10_31.Activitys listByModule" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/modules/{moduleName}/activities")
        Observable<Response<ResponseBody>> listByModule(@Path("resourceGroupName") String resourceGroupName, @Path("automationAccountName") String automationAccountName, @Path("moduleName") String moduleName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.automation.v2015_10_31.Activitys listByModuleNext" })
        @GET
        Observable<Response<ResponseBody>> listByModuleNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Retrieve the activity in the module identified by module name and activity name.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @param moduleName The name of module.
     * @param activityName The name of activity.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ActivityInner object if successful.
     */
    public ActivityInner get(String resourceGroupName, String automationAccountName, String moduleName, String activityName) {
        return getWithServiceResponseAsync(resourceGroupName, automationAccountName, moduleName, activityName).toBlocking().single().body();
    }

    /**
     * Retrieve the activity in the module identified by module name and activity name.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @param moduleName The name of module.
     * @param activityName The name of activity.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ActivityInner> getAsync(String resourceGroupName, String automationAccountName, String moduleName, String activityName, final ServiceCallback<ActivityInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(resourceGroupName, automationAccountName, moduleName, activityName), serviceCallback);
    }

    /**
     * Retrieve the activity in the module identified by module name and activity name.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @param moduleName The name of module.
     * @param activityName The name of activity.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActivityInner object
     */
    public Observable<ActivityInner> getAsync(String resourceGroupName, String automationAccountName, String moduleName, String activityName) {
        return getWithServiceResponseAsync(resourceGroupName, automationAccountName, moduleName, activityName).map(new Func1<ServiceResponse<ActivityInner>, ActivityInner>() {
            @Override
            public ActivityInner call(ServiceResponse<ActivityInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Retrieve the activity in the module identified by module name and activity name.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @param moduleName The name of module.
     * @param activityName The name of activity.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActivityInner object
     */
    public Observable<ServiceResponse<ActivityInner>> getWithServiceResponseAsync(String resourceGroupName, String automationAccountName, String moduleName, String activityName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (automationAccountName == null) {
            throw new IllegalArgumentException("Parameter automationAccountName is required and cannot be null.");
        }
        if (moduleName == null) {
            throw new IllegalArgumentException("Parameter moduleName is required and cannot be null.");
        }
        if (activityName == null) {
            throw new IllegalArgumentException("Parameter activityName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        final String apiVersion = "2015-10-31";
        return service.get(resourceGroupName, automationAccountName, moduleName, activityName, this.client.subscriptionId(), apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ActivityInner>>>() {
                @Override
                public Observable<ServiceResponse<ActivityInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ActivityInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ActivityInner> getDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ActivityInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ActivityInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Retrieve a list of activities in the module identified by module name.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @param moduleName The name of module.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ActivityInner&gt; object if successful.
     */
    public PagedList<ActivityInner> listByModule(final String resourceGroupName, final String automationAccountName, final String moduleName) {
        ServiceResponse<Page<ActivityInner>> response = listByModuleSinglePageAsync(resourceGroupName, automationAccountName, moduleName).toBlocking().single();
        return new PagedList<ActivityInner>(response.body()) {
            @Override
            public Page<ActivityInner> nextPage(String nextPageLink) {
                return listByModuleNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Retrieve a list of activities in the module identified by module name.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @param moduleName The name of module.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ActivityInner>> listByModuleAsync(final String resourceGroupName, final String automationAccountName, final String moduleName, final ListOperationCallback<ActivityInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByModuleSinglePageAsync(resourceGroupName, automationAccountName, moduleName),
            new Func1<String, Observable<ServiceResponse<Page<ActivityInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ActivityInner>>> call(String nextPageLink) {
                    return listByModuleNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Retrieve a list of activities in the module identified by module name.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @param moduleName The name of module.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ActivityInner&gt; object
     */
    public Observable<Page<ActivityInner>> listByModuleAsync(final String resourceGroupName, final String automationAccountName, final String moduleName) {
        return listByModuleWithServiceResponseAsync(resourceGroupName, automationAccountName, moduleName)
            .map(new Func1<ServiceResponse<Page<ActivityInner>>, Page<ActivityInner>>() {
                @Override
                public Page<ActivityInner> call(ServiceResponse<Page<ActivityInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Retrieve a list of activities in the module identified by module name.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @param moduleName The name of module.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ActivityInner&gt; object
     */
    public Observable<ServiceResponse<Page<ActivityInner>>> listByModuleWithServiceResponseAsync(final String resourceGroupName, final String automationAccountName, final String moduleName) {
        return listByModuleSinglePageAsync(resourceGroupName, automationAccountName, moduleName)
            .concatMap(new Func1<ServiceResponse<Page<ActivityInner>>, Observable<ServiceResponse<Page<ActivityInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ActivityInner>>> call(ServiceResponse<Page<ActivityInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByModuleNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Retrieve a list of activities in the module identified by module name.
     *
    ServiceResponse<PageImpl<ActivityInner>> * @param resourceGroupName Name of an Azure Resource group.
    ServiceResponse<PageImpl<ActivityInner>> * @param automationAccountName The name of the automation account.
    ServiceResponse<PageImpl<ActivityInner>> * @param moduleName The name of module.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ActivityInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ActivityInner>>> listByModuleSinglePageAsync(final String resourceGroupName, final String automationAccountName, final String moduleName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (automationAccountName == null) {
            throw new IllegalArgumentException("Parameter automationAccountName is required and cannot be null.");
        }
        if (moduleName == null) {
            throw new IllegalArgumentException("Parameter moduleName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        final String apiVersion = "2015-10-31";
        return service.listByModule(resourceGroupName, automationAccountName, moduleName, this.client.subscriptionId(), apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ActivityInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ActivityInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ActivityInner>> result = listByModuleDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ActivityInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<ActivityInner>> listByModuleDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<ActivityInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<ActivityInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Retrieve a list of activities in the module identified by module name.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ActivityInner&gt; object if successful.
     */
    public PagedList<ActivityInner> listByModuleNext(final String nextPageLink) {
        ServiceResponse<Page<ActivityInner>> response = listByModuleNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<ActivityInner>(response.body()) {
            @Override
            public Page<ActivityInner> nextPage(String nextPageLink) {
                return listByModuleNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Retrieve a list of activities in the module identified by module name.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ActivityInner>> listByModuleNextAsync(final String nextPageLink, final ServiceFuture<List<ActivityInner>> serviceFuture, final ListOperationCallback<ActivityInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByModuleNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<ActivityInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ActivityInner>>> call(String nextPageLink) {
                    return listByModuleNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Retrieve a list of activities in the module identified by module name.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ActivityInner&gt; object
     */
    public Observable<Page<ActivityInner>> listByModuleNextAsync(final String nextPageLink) {
        return listByModuleNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<ActivityInner>>, Page<ActivityInner>>() {
                @Override
                public Page<ActivityInner> call(ServiceResponse<Page<ActivityInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Retrieve a list of activities in the module identified by module name.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ActivityInner&gt; object
     */
    public Observable<ServiceResponse<Page<ActivityInner>>> listByModuleNextWithServiceResponseAsync(final String nextPageLink) {
        return listByModuleNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<ActivityInner>>, Observable<ServiceResponse<Page<ActivityInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ActivityInner>>> call(ServiceResponse<Page<ActivityInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByModuleNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Retrieve a list of activities in the module identified by module name.
     *
    ServiceResponse<PageImpl<ActivityInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ActivityInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ActivityInner>>> listByModuleNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByModuleNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ActivityInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ActivityInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ActivityInner>> result = listByModuleNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ActivityInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<ActivityInner>> listByModuleNextDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<ActivityInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<ActivityInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

}
