// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.automation.models.SourceControlSecurityTokenProperties;
import com.azure.resourcemanager.automation.models.SourceType;
import java.io.IOException;

/**
 * The properties of the create source control operation.
 */
@Fluent
public final class SourceControlCreateOrUpdateProperties
    implements JsonSerializable<SourceControlCreateOrUpdateProperties> {
    /*
     * The repo url of the source control.
     */
    private String repoUrl;

    /*
     * The repo branch of the source control. Include branch as empty string for VsoTfvc.
     */
    private String branch;

    /*
     * The folder path of the source control. Path must be relative.
     */
    private String folderPath;

    /*
     * The auto async of the source control. Default is false.
     */
    private Boolean autoSync;

    /*
     * The auto publish of the source control. Default is true.
     */
    private Boolean publishRunbook;

    /*
     * The source type. Must be one of VsoGit, VsoTfvc, GitHub, case sensitive.
     */
    private SourceType sourceType;

    /*
     * The authorization token for the repo of the source control.
     */
    private SourceControlSecurityTokenProperties securityToken;

    /*
     * The user description of the source control.
     */
    private String description;

    /**
     * Creates an instance of SourceControlCreateOrUpdateProperties class.
     */
    public SourceControlCreateOrUpdateProperties() {
    }

    /**
     * Get the repoUrl property: The repo url of the source control.
     * 
     * @return the repoUrl value.
     */
    public String repoUrl() {
        return this.repoUrl;
    }

    /**
     * Set the repoUrl property: The repo url of the source control.
     * 
     * @param repoUrl the repoUrl value to set.
     * @return the SourceControlCreateOrUpdateProperties object itself.
     */
    public SourceControlCreateOrUpdateProperties withRepoUrl(String repoUrl) {
        this.repoUrl = repoUrl;
        return this;
    }

    /**
     * Get the branch property: The repo branch of the source control. Include branch as empty string for VsoTfvc.
     * 
     * @return the branch value.
     */
    public String branch() {
        return this.branch;
    }

    /**
     * Set the branch property: The repo branch of the source control. Include branch as empty string for VsoTfvc.
     * 
     * @param branch the branch value to set.
     * @return the SourceControlCreateOrUpdateProperties object itself.
     */
    public SourceControlCreateOrUpdateProperties withBranch(String branch) {
        this.branch = branch;
        return this;
    }

    /**
     * Get the folderPath property: The folder path of the source control. Path must be relative.
     * 
     * @return the folderPath value.
     */
    public String folderPath() {
        return this.folderPath;
    }

    /**
     * Set the folderPath property: The folder path of the source control. Path must be relative.
     * 
     * @param folderPath the folderPath value to set.
     * @return the SourceControlCreateOrUpdateProperties object itself.
     */
    public SourceControlCreateOrUpdateProperties withFolderPath(String folderPath) {
        this.folderPath = folderPath;
        return this;
    }

    /**
     * Get the autoSync property: The auto async of the source control. Default is false.
     * 
     * @return the autoSync value.
     */
    public Boolean autoSync() {
        return this.autoSync;
    }

    /**
     * Set the autoSync property: The auto async of the source control. Default is false.
     * 
     * @param autoSync the autoSync value to set.
     * @return the SourceControlCreateOrUpdateProperties object itself.
     */
    public SourceControlCreateOrUpdateProperties withAutoSync(Boolean autoSync) {
        this.autoSync = autoSync;
        return this;
    }

    /**
     * Get the publishRunbook property: The auto publish of the source control. Default is true.
     * 
     * @return the publishRunbook value.
     */
    public Boolean publishRunbook() {
        return this.publishRunbook;
    }

    /**
     * Set the publishRunbook property: The auto publish of the source control. Default is true.
     * 
     * @param publishRunbook the publishRunbook value to set.
     * @return the SourceControlCreateOrUpdateProperties object itself.
     */
    public SourceControlCreateOrUpdateProperties withPublishRunbook(Boolean publishRunbook) {
        this.publishRunbook = publishRunbook;
        return this;
    }

    /**
     * Get the sourceType property: The source type. Must be one of VsoGit, VsoTfvc, GitHub, case sensitive.
     * 
     * @return the sourceType value.
     */
    public SourceType sourceType() {
        return this.sourceType;
    }

    /**
     * Set the sourceType property: The source type. Must be one of VsoGit, VsoTfvc, GitHub, case sensitive.
     * 
     * @param sourceType the sourceType value to set.
     * @return the SourceControlCreateOrUpdateProperties object itself.
     */
    public SourceControlCreateOrUpdateProperties withSourceType(SourceType sourceType) {
        this.sourceType = sourceType;
        return this;
    }

    /**
     * Get the securityToken property: The authorization token for the repo of the source control.
     * 
     * @return the securityToken value.
     */
    public SourceControlSecurityTokenProperties securityToken() {
        return this.securityToken;
    }

    /**
     * Set the securityToken property: The authorization token for the repo of the source control.
     * 
     * @param securityToken the securityToken value to set.
     * @return the SourceControlCreateOrUpdateProperties object itself.
     */
    public SourceControlCreateOrUpdateProperties withSecurityToken(SourceControlSecurityTokenProperties securityToken) {
        this.securityToken = securityToken;
        return this;
    }

    /**
     * Get the description property: The user description of the source control.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: The user description of the source control.
     * 
     * @param description the description value to set.
     * @return the SourceControlCreateOrUpdateProperties object itself.
     */
    public SourceControlCreateOrUpdateProperties withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (securityToken() != null) {
            securityToken().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("repoUrl", this.repoUrl);
        jsonWriter.writeStringField("branch", this.branch);
        jsonWriter.writeStringField("folderPath", this.folderPath);
        jsonWriter.writeBooleanField("autoSync", this.autoSync);
        jsonWriter.writeBooleanField("publishRunbook", this.publishRunbook);
        jsonWriter.writeStringField("sourceType", this.sourceType == null ? null : this.sourceType.toString());
        jsonWriter.writeJsonField("securityToken", this.securityToken);
        jsonWriter.writeStringField("description", this.description);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SourceControlCreateOrUpdateProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SourceControlCreateOrUpdateProperties if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SourceControlCreateOrUpdateProperties.
     */
    public static SourceControlCreateOrUpdateProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SourceControlCreateOrUpdateProperties deserializedSourceControlCreateOrUpdateProperties
                = new SourceControlCreateOrUpdateProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("repoUrl".equals(fieldName)) {
                    deserializedSourceControlCreateOrUpdateProperties.repoUrl = reader.getString();
                } else if ("branch".equals(fieldName)) {
                    deserializedSourceControlCreateOrUpdateProperties.branch = reader.getString();
                } else if ("folderPath".equals(fieldName)) {
                    deserializedSourceControlCreateOrUpdateProperties.folderPath = reader.getString();
                } else if ("autoSync".equals(fieldName)) {
                    deserializedSourceControlCreateOrUpdateProperties.autoSync
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("publishRunbook".equals(fieldName)) {
                    deserializedSourceControlCreateOrUpdateProperties.publishRunbook
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("sourceType".equals(fieldName)) {
                    deserializedSourceControlCreateOrUpdateProperties.sourceType
                        = SourceType.fromString(reader.getString());
                } else if ("securityToken".equals(fieldName)) {
                    deserializedSourceControlCreateOrUpdateProperties.securityToken
                        = SourceControlSecurityTokenProperties.fromJson(reader);
                } else if ("description".equals(fieldName)) {
                    deserializedSourceControlCreateOrUpdateProperties.description = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSourceControlCreateOrUpdateProperties;
        });
    }
}
