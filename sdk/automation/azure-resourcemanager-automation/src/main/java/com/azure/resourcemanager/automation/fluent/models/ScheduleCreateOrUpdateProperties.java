// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.automation.models.AdvancedSchedule;
import com.azure.resourcemanager.automation.models.ScheduleFrequency;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * The parameters supplied to the create or update schedule operation.
 */
@Fluent
public final class ScheduleCreateOrUpdateProperties implements JsonSerializable<ScheduleCreateOrUpdateProperties> {
    /*
     * Gets or sets the description of the schedule.
     */
    private String description;

    /*
     * Gets or sets the start time of the schedule.
     */
    private OffsetDateTime startTime;

    /*
     * Gets or sets the end time of the schedule.
     */
    private OffsetDateTime expiryTime;

    /*
     * Gets or sets the interval of the schedule.
     */
    private Object interval;

    /*
     * Gets or sets the frequency of the schedule.
     */
    private ScheduleFrequency frequency;

    /*
     * Gets or sets the time zone of the schedule.
     */
    private String timeZone;

    /*
     * Gets or sets the AdvancedSchedule.
     */
    private AdvancedSchedule advancedSchedule;

    /**
     * Creates an instance of ScheduleCreateOrUpdateProperties class.
     */
    public ScheduleCreateOrUpdateProperties() {
    }

    /**
     * Get the description property: Gets or sets the description of the schedule.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: Gets or sets the description of the schedule.
     * 
     * @param description the description value to set.
     * @return the ScheduleCreateOrUpdateProperties object itself.
     */
    public ScheduleCreateOrUpdateProperties withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the startTime property: Gets or sets the start time of the schedule.
     * 
     * @return the startTime value.
     */
    public OffsetDateTime startTime() {
        return this.startTime;
    }

    /**
     * Set the startTime property: Gets or sets the start time of the schedule.
     * 
     * @param startTime the startTime value to set.
     * @return the ScheduleCreateOrUpdateProperties object itself.
     */
    public ScheduleCreateOrUpdateProperties withStartTime(OffsetDateTime startTime) {
        this.startTime = startTime;
        return this;
    }

    /**
     * Get the expiryTime property: Gets or sets the end time of the schedule.
     * 
     * @return the expiryTime value.
     */
    public OffsetDateTime expiryTime() {
        return this.expiryTime;
    }

    /**
     * Set the expiryTime property: Gets or sets the end time of the schedule.
     * 
     * @param expiryTime the expiryTime value to set.
     * @return the ScheduleCreateOrUpdateProperties object itself.
     */
    public ScheduleCreateOrUpdateProperties withExpiryTime(OffsetDateTime expiryTime) {
        this.expiryTime = expiryTime;
        return this;
    }

    /**
     * Get the interval property: Gets or sets the interval of the schedule.
     * 
     * @return the interval value.
     */
    public Object interval() {
        return this.interval;
    }

    /**
     * Set the interval property: Gets or sets the interval of the schedule.
     * 
     * @param interval the interval value to set.
     * @return the ScheduleCreateOrUpdateProperties object itself.
     */
    public ScheduleCreateOrUpdateProperties withInterval(Object interval) {
        this.interval = interval;
        return this;
    }

    /**
     * Get the frequency property: Gets or sets the frequency of the schedule.
     * 
     * @return the frequency value.
     */
    public ScheduleFrequency frequency() {
        return this.frequency;
    }

    /**
     * Set the frequency property: Gets or sets the frequency of the schedule.
     * 
     * @param frequency the frequency value to set.
     * @return the ScheduleCreateOrUpdateProperties object itself.
     */
    public ScheduleCreateOrUpdateProperties withFrequency(ScheduleFrequency frequency) {
        this.frequency = frequency;
        return this;
    }

    /**
     * Get the timeZone property: Gets or sets the time zone of the schedule.
     * 
     * @return the timeZone value.
     */
    public String timeZone() {
        return this.timeZone;
    }

    /**
     * Set the timeZone property: Gets or sets the time zone of the schedule.
     * 
     * @param timeZone the timeZone value to set.
     * @return the ScheduleCreateOrUpdateProperties object itself.
     */
    public ScheduleCreateOrUpdateProperties withTimeZone(String timeZone) {
        this.timeZone = timeZone;
        return this;
    }

    /**
     * Get the advancedSchedule property: Gets or sets the AdvancedSchedule.
     * 
     * @return the advancedSchedule value.
     */
    public AdvancedSchedule advancedSchedule() {
        return this.advancedSchedule;
    }

    /**
     * Set the advancedSchedule property: Gets or sets the AdvancedSchedule.
     * 
     * @param advancedSchedule the advancedSchedule value to set.
     * @return the ScheduleCreateOrUpdateProperties object itself.
     */
    public ScheduleCreateOrUpdateProperties withAdvancedSchedule(AdvancedSchedule advancedSchedule) {
        this.advancedSchedule = advancedSchedule;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (startTime() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property startTime in model ScheduleCreateOrUpdateProperties"));
        }
        if (frequency() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property frequency in model ScheduleCreateOrUpdateProperties"));
        }
        if (advancedSchedule() != null) {
            advancedSchedule().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ScheduleCreateOrUpdateProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("startTime",
            this.startTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.startTime));
        jsonWriter.writeStringField("frequency", this.frequency == null ? null : this.frequency.toString());
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeStringField("expiryTime",
            this.expiryTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.expiryTime));
        jsonWriter.writeUntypedField("interval", this.interval);
        jsonWriter.writeStringField("timeZone", this.timeZone);
        jsonWriter.writeJsonField("advancedSchedule", this.advancedSchedule);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ScheduleCreateOrUpdateProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ScheduleCreateOrUpdateProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ScheduleCreateOrUpdateProperties.
     */
    public static ScheduleCreateOrUpdateProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ScheduleCreateOrUpdateProperties deserializedScheduleCreateOrUpdateProperties
                = new ScheduleCreateOrUpdateProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("startTime".equals(fieldName)) {
                    deserializedScheduleCreateOrUpdateProperties.startTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("frequency".equals(fieldName)) {
                    deserializedScheduleCreateOrUpdateProperties.frequency
                        = ScheduleFrequency.fromString(reader.getString());
                } else if ("description".equals(fieldName)) {
                    deserializedScheduleCreateOrUpdateProperties.description = reader.getString();
                } else if ("expiryTime".equals(fieldName)) {
                    deserializedScheduleCreateOrUpdateProperties.expiryTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("interval".equals(fieldName)) {
                    deserializedScheduleCreateOrUpdateProperties.interval = reader.readUntyped();
                } else if ("timeZone".equals(fieldName)) {
                    deserializedScheduleCreateOrUpdateProperties.timeZone = reader.getString();
                } else if ("advancedSchedule".equals(fieldName)) {
                    deserializedScheduleCreateOrUpdateProperties.advancedSchedule = AdvancedSchedule.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedScheduleCreateOrUpdateProperties;
        });
    }
}
