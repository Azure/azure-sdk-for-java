// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The parameters supplied to the update runbook properties.
 */
@Fluent
public final class RunbookUpdateProperties implements JsonSerializable<RunbookUpdateProperties> {
    /*
     * Gets or sets the description of the runbook.
     */
    private String description;

    /*
     * Gets or sets verbose log option.
     */
    private Boolean logVerbose;

    /*
     * Gets or sets progress log option.
     */
    private Boolean logProgress;

    /*
     * Gets or sets the activity-level tracing options of the runbook.
     */
    private Integer logActivityTrace;

    /**
     * Creates an instance of RunbookUpdateProperties class.
     */
    public RunbookUpdateProperties() {
    }

    /**
     * Get the description property: Gets or sets the description of the runbook.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: Gets or sets the description of the runbook.
     * 
     * @param description the description value to set.
     * @return the RunbookUpdateProperties object itself.
     */
    public RunbookUpdateProperties withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the logVerbose property: Gets or sets verbose log option.
     * 
     * @return the logVerbose value.
     */
    public Boolean logVerbose() {
        return this.logVerbose;
    }

    /**
     * Set the logVerbose property: Gets or sets verbose log option.
     * 
     * @param logVerbose the logVerbose value to set.
     * @return the RunbookUpdateProperties object itself.
     */
    public RunbookUpdateProperties withLogVerbose(Boolean logVerbose) {
        this.logVerbose = logVerbose;
        return this;
    }

    /**
     * Get the logProgress property: Gets or sets progress log option.
     * 
     * @return the logProgress value.
     */
    public Boolean logProgress() {
        return this.logProgress;
    }

    /**
     * Set the logProgress property: Gets or sets progress log option.
     * 
     * @param logProgress the logProgress value to set.
     * @return the RunbookUpdateProperties object itself.
     */
    public RunbookUpdateProperties withLogProgress(Boolean logProgress) {
        this.logProgress = logProgress;
        return this;
    }

    /**
     * Get the logActivityTrace property: Gets or sets the activity-level tracing options of the runbook.
     * 
     * @return the logActivityTrace value.
     */
    public Integer logActivityTrace() {
        return this.logActivityTrace;
    }

    /**
     * Set the logActivityTrace property: Gets or sets the activity-level tracing options of the runbook.
     * 
     * @param logActivityTrace the logActivityTrace value to set.
     * @return the RunbookUpdateProperties object itself.
     */
    public RunbookUpdateProperties withLogActivityTrace(Integer logActivityTrace) {
        this.logActivityTrace = logActivityTrace;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeBooleanField("logVerbose", this.logVerbose);
        jsonWriter.writeBooleanField("logProgress", this.logProgress);
        jsonWriter.writeNumberField("logActivityTrace", this.logActivityTrace);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RunbookUpdateProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RunbookUpdateProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the RunbookUpdateProperties.
     */
    public static RunbookUpdateProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RunbookUpdateProperties deserializedRunbookUpdateProperties = new RunbookUpdateProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("description".equals(fieldName)) {
                    deserializedRunbookUpdateProperties.description = reader.getString();
                } else if ("logVerbose".equals(fieldName)) {
                    deserializedRunbookUpdateProperties.logVerbose = reader.getNullable(JsonReader::getBoolean);
                } else if ("logProgress".equals(fieldName)) {
                    deserializedRunbookUpdateProperties.logProgress = reader.getNullable(JsonReader::getBoolean);
                } else if ("logActivityTrace".equals(fieldName)) {
                    deserializedRunbookUpdateProperties.logActivityTrace = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRunbookUpdateProperties;
        });
    }
}
