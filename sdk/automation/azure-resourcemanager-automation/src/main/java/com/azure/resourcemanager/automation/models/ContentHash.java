// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of the runbook property type.
 */
@Fluent
public final class ContentHash implements JsonSerializable<ContentHash> {
    /*
     * Gets or sets the content hash algorithm used to hash the content.
     */
    private String algorithm;

    /*
     * Gets or sets expected hash value of the content.
     */
    private String value;

    /**
     * Creates an instance of ContentHash class.
     */
    public ContentHash() {
    }

    /**
     * Get the algorithm property: Gets or sets the content hash algorithm used to hash the content.
     * 
     * @return the algorithm value.
     */
    public String algorithm() {
        return this.algorithm;
    }

    /**
     * Set the algorithm property: Gets or sets the content hash algorithm used to hash the content.
     * 
     * @param algorithm the algorithm value to set.
     * @return the ContentHash object itself.
     */
    public ContentHash withAlgorithm(String algorithm) {
        this.algorithm = algorithm;
        return this;
    }

    /**
     * Get the value property: Gets or sets expected hash value of the content.
     * 
     * @return the value value.
     */
    public String value() {
        return this.value;
    }

    /**
     * Set the value property: Gets or sets expected hash value of the content.
     * 
     * @param value the value value to set.
     * @return the ContentHash object itself.
     */
    public ContentHash withValue(String value) {
        this.value = value;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (algorithm() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property algorithm in model ContentHash"));
        }
        if (value() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property value in model ContentHash"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ContentHash.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("algorithm", this.algorithm);
        jsonWriter.writeStringField("value", this.value);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ContentHash from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ContentHash if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ContentHash.
     */
    public static ContentHash fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ContentHash deserializedContentHash = new ContentHash();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("algorithm".equals(fieldName)) {
                    deserializedContentHash.algorithm = reader.getString();
                } else if ("value".equals(fieldName)) {
                    deserializedContentHash.value = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedContentHash;
        });
    }
}
