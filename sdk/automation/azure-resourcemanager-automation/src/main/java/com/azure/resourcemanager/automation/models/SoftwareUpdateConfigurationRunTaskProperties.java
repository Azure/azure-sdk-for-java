// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Task properties of the software update configuration.
 */
@Fluent
public final class SoftwareUpdateConfigurationRunTaskProperties
    implements JsonSerializable<SoftwareUpdateConfigurationRunTaskProperties> {
    /*
     * The status of the task.
     */
    private String status;

    /*
     * The name of the source of the task.
     */
    private String source;

    /*
     * The job id of the task.
     */
    private String jobId;

    /**
     * Creates an instance of SoftwareUpdateConfigurationRunTaskProperties class.
     */
    public SoftwareUpdateConfigurationRunTaskProperties() {
    }

    /**
     * Get the status property: The status of the task.
     * 
     * @return the status value.
     */
    public String status() {
        return this.status;
    }

    /**
     * Set the status property: The status of the task.
     * 
     * @param status the status value to set.
     * @return the SoftwareUpdateConfigurationRunTaskProperties object itself.
     */
    public SoftwareUpdateConfigurationRunTaskProperties withStatus(String status) {
        this.status = status;
        return this;
    }

    /**
     * Get the source property: The name of the source of the task.
     * 
     * @return the source value.
     */
    public String source() {
        return this.source;
    }

    /**
     * Set the source property: The name of the source of the task.
     * 
     * @param source the source value to set.
     * @return the SoftwareUpdateConfigurationRunTaskProperties object itself.
     */
    public SoftwareUpdateConfigurationRunTaskProperties withSource(String source) {
        this.source = source;
        return this;
    }

    /**
     * Get the jobId property: The job id of the task.
     * 
     * @return the jobId value.
     */
    public String jobId() {
        return this.jobId;
    }

    /**
     * Set the jobId property: The job id of the task.
     * 
     * @param jobId the jobId value to set.
     * @return the SoftwareUpdateConfigurationRunTaskProperties object itself.
     */
    public SoftwareUpdateConfigurationRunTaskProperties withJobId(String jobId) {
        this.jobId = jobId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("status", this.status);
        jsonWriter.writeStringField("source", this.source);
        jsonWriter.writeStringField("jobId", this.jobId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SoftwareUpdateConfigurationRunTaskProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SoftwareUpdateConfigurationRunTaskProperties if the JsonReader was pointing to an instance
     * of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SoftwareUpdateConfigurationRunTaskProperties.
     */
    public static SoftwareUpdateConfigurationRunTaskProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SoftwareUpdateConfigurationRunTaskProperties deserializedSoftwareUpdateConfigurationRunTaskProperties
                = new SoftwareUpdateConfigurationRunTaskProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("status".equals(fieldName)) {
                    deserializedSoftwareUpdateConfigurationRunTaskProperties.status = reader.getString();
                } else if ("source".equals(fieldName)) {
                    deserializedSoftwareUpdateConfigurationRunTaskProperties.source = reader.getString();
                } else if ("jobId".equals(fieldName)) {
                    deserializedSoftwareUpdateConfigurationRunTaskProperties.jobId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSoftwareUpdateConfigurationRunTaskProperties;
        });
    }
}
