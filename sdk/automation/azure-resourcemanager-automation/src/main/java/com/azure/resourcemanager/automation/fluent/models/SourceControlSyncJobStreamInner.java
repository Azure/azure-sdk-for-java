// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.automation.models.StreamType;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * Definition of the source control sync job stream.
 */
@Fluent
public final class SourceControlSyncJobStreamInner implements JsonSerializable<SourceControlSyncJobStreamInner> {
    /*
     * Resource id.
     */
    private String id;

    /*
     * The properties of the source control sync job stream.
     */
    private SourceControlSyncJobStreamProperties innerProperties;

    /**
     * Creates an instance of SourceControlSyncJobStreamInner class.
     */
    public SourceControlSyncJobStreamInner() {
    }

    /**
     * Get the id property: Resource id.
     * 
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Get the innerProperties property: The properties of the source control sync job stream.
     * 
     * @return the innerProperties value.
     */
    private SourceControlSyncJobStreamProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the sourceControlSyncJobStreamId property: The sync job stream id.
     * 
     * @return the sourceControlSyncJobStreamId value.
     */
    public String sourceControlSyncJobStreamId() {
        return this.innerProperties() == null ? null : this.innerProperties().sourceControlSyncJobStreamId();
    }

    /**
     * Set the sourceControlSyncJobStreamId property: The sync job stream id.
     * 
     * @param sourceControlSyncJobStreamId the sourceControlSyncJobStreamId value to set.
     * @return the SourceControlSyncJobStreamInner object itself.
     */
    public SourceControlSyncJobStreamInner withSourceControlSyncJobStreamId(String sourceControlSyncJobStreamId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SourceControlSyncJobStreamProperties();
        }
        this.innerProperties().withSourceControlSyncJobStreamId(sourceControlSyncJobStreamId);
        return this;
    }

    /**
     * Get the summary property: The summary of the sync job stream.
     * 
     * @return the summary value.
     */
    public String summary() {
        return this.innerProperties() == null ? null : this.innerProperties().summary();
    }

    /**
     * Set the summary property: The summary of the sync job stream.
     * 
     * @param summary the summary value to set.
     * @return the SourceControlSyncJobStreamInner object itself.
     */
    public SourceControlSyncJobStreamInner withSummary(String summary) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SourceControlSyncJobStreamProperties();
        }
        this.innerProperties().withSummary(summary);
        return this;
    }

    /**
     * Get the time property: The time of the sync job stream.
     * 
     * @return the time value.
     */
    public OffsetDateTime time() {
        return this.innerProperties() == null ? null : this.innerProperties().time();
    }

    /**
     * Get the streamType property: The type of the sync job stream.
     * 
     * @return the streamType value.
     */
    public StreamType streamType() {
        return this.innerProperties() == null ? null : this.innerProperties().streamType();
    }

    /**
     * Set the streamType property: The type of the sync job stream.
     * 
     * @param streamType the streamType value to set.
     * @return the SourceControlSyncJobStreamInner object itself.
     */
    public SourceControlSyncJobStreamInner withStreamType(StreamType streamType) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SourceControlSyncJobStreamProperties();
        }
        this.innerProperties().withStreamType(streamType);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SourceControlSyncJobStreamInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SourceControlSyncJobStreamInner if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SourceControlSyncJobStreamInner.
     */
    public static SourceControlSyncJobStreamInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SourceControlSyncJobStreamInner deserializedSourceControlSyncJobStreamInner
                = new SourceControlSyncJobStreamInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedSourceControlSyncJobStreamInner.id = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    deserializedSourceControlSyncJobStreamInner.innerProperties
                        = SourceControlSyncJobStreamProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSourceControlSyncJobStreamInner;
        });
    }
}
