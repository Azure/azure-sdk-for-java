// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.models;

import com.azure.core.util.Context;
import com.azure.resourcemanager.automation.fluent.models.CertificateInner;
import java.time.OffsetDateTime;

/** An immutable client-side representation of Certificate. */
public interface Certificate {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     *
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     *
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     *
     * @return the type value.
     */
    String type();

    /**
     * Gets the thumbprint property: Gets the thumbprint of the certificate.
     *
     * @return the thumbprint value.
     */
    String thumbprint();

    /**
     * Gets the expiryTime property: Gets the expiry time of the certificate.
     *
     * @return the expiryTime value.
     */
    OffsetDateTime expiryTime();

    /**
     * Gets the isExportable property: Gets the is exportable flag of the certificate.
     *
     * @return the isExportable value.
     */
    Boolean isExportable();

    /**
     * Gets the creationTime property: Gets the creation time.
     *
     * @return the creationTime value.
     */
    OffsetDateTime creationTime();

    /**
     * Gets the lastModifiedTime property: Gets the last modified time.
     *
     * @return the lastModifiedTime value.
     */
    OffsetDateTime lastModifiedTime();

    /**
     * Gets the description property: Gets or sets the description.
     *
     * @return the description value.
     */
    String description();

    /**
     * Gets the inner com.azure.resourcemanager.automation.fluent.models.CertificateInner object.
     *
     * @return the inner object.
     */
    CertificateInner innerModel();

    /** The entirety of the Certificate definition. */
    interface Definition
        extends DefinitionStages.Blank,
            DefinitionStages.WithParentResource,
            DefinitionStages.WithName,
            DefinitionStages.WithBase64Value,
            DefinitionStages.WithCreate {
    }
    /** The Certificate definition stages. */
    interface DefinitionStages {
        /** The first stage of the Certificate definition. */
        interface Blank extends WithParentResource {
        }
        /** The stage of the Certificate definition allowing to specify parent resource. */
        interface WithParentResource {
            /**
             * Specifies resourceGroupName, automationAccountName.
             *
             * @param resourceGroupName Name of an Azure Resource group.
             * @param automationAccountName The name of the automation account.
             * @return the next definition stage.
             */
            WithName withExistingAutomationAccount(String resourceGroupName, String automationAccountName);
        }
        /** The stage of the Certificate definition allowing to specify name. */
        interface WithName {
            /**
             * Specifies the name property: Gets or sets the name of the certificate..
             *
             * @param name Gets or sets the name of the certificate.
             * @return the next definition stage.
             */
            WithBase64Value withName(String name);
        }
        /** The stage of the Certificate definition allowing to specify base64Value. */
        interface WithBase64Value {
            /**
             * Specifies the base64Value property: Gets or sets the base64 encoded value of the certificate..
             *
             * @param base64Value Gets or sets the base64 encoded value of the certificate.
             * @return the next definition stage.
             */
            WithCreate withBase64Value(String base64Value);
        }
        /**
         * The stage of the Certificate definition which contains all the minimum required properties for the resource
         * to be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate
            extends DefinitionStages.WithDescription,
                DefinitionStages.WithThumbprint,
                DefinitionStages.WithIsExportable {
            /**
             * Executes the create request.
             *
             * @return the created resource.
             */
            Certificate create();

            /**
             * Executes the create request.
             *
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            Certificate create(Context context);
        }
        /** The stage of the Certificate definition allowing to specify description. */
        interface WithDescription {
            /**
             * Specifies the description property: Gets or sets the description of the certificate..
             *
             * @param description Gets or sets the description of the certificate.
             * @return the next definition stage.
             */
            WithCreate withDescription(String description);
        }
        /** The stage of the Certificate definition allowing to specify thumbprint. */
        interface WithThumbprint {
            /**
             * Specifies the thumbprint property: Gets or sets the thumbprint of the certificate..
             *
             * @param thumbprint Gets or sets the thumbprint of the certificate.
             * @return the next definition stage.
             */
            WithCreate withThumbprint(String thumbprint);
        }
        /** The stage of the Certificate definition allowing to specify isExportable. */
        interface WithIsExportable {
            /**
             * Specifies the isExportable property: Gets or sets the is exportable flag of the certificate..
             *
             * @param isExportable Gets or sets the is exportable flag of the certificate.
             * @return the next definition stage.
             */
            WithCreate withIsExportable(Boolean isExportable);
        }
    }
    /**
     * Begins update for the Certificate resource.
     *
     * @return the stage of resource update.
     */
    Certificate.Update update();

    /** The template for Certificate update. */
    interface Update extends UpdateStages.WithName, UpdateStages.WithDescription {
        /**
         * Executes the update request.
         *
         * @return the updated resource.
         */
        Certificate apply();

        /**
         * Executes the update request.
         *
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        Certificate apply(Context context);
    }
    /** The Certificate update stages. */
    interface UpdateStages {
        /** The stage of the Certificate update allowing to specify name. */
        interface WithName {
            /**
             * Specifies the name property: Gets or sets the name of the certificate..
             *
             * @param name Gets or sets the name of the certificate.
             * @return the next definition stage.
             */
            Update withName(String name);
        }
        /** The stage of the Certificate update allowing to specify description. */
        interface WithDescription {
            /**
             * Specifies the description property: Gets or sets the description of the certificate..
             *
             * @param description Gets or sets the description of the certificate.
             * @return the next definition stage.
             */
            Update withDescription(String description);
        }
    }
    /**
     * Refreshes the resource to sync with Azure.
     *
     * @return the refreshed resource.
     */
    Certificate refresh();

    /**
     * Refreshes the resource to sync with Azure.
     *
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    Certificate refresh(Context context);
}
