// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.automation.models.AgentRegistrationKeys;
import java.io.IOException;

/**
 * Definition of the agent registration information type.
 */
@Fluent
public final class AgentRegistrationInner implements JsonSerializable<AgentRegistrationInner> {
    /*
     * Gets or sets the dsc meta configuration.
     */
    private String dscMetaConfiguration;

    /*
     * Gets or sets the dsc server endpoint.
     */
    private String endpoint;

    /*
     * Gets or sets the agent registration keys.
     */
    private AgentRegistrationKeys keys;

    /*
     * Gets or sets the id.
     */
    private String id;

    /**
     * Creates an instance of AgentRegistrationInner class.
     */
    public AgentRegistrationInner() {
    }

    /**
     * Get the dscMetaConfiguration property: Gets or sets the dsc meta configuration.
     * 
     * @return the dscMetaConfiguration value.
     */
    public String dscMetaConfiguration() {
        return this.dscMetaConfiguration;
    }

    /**
     * Set the dscMetaConfiguration property: Gets or sets the dsc meta configuration.
     * 
     * @param dscMetaConfiguration the dscMetaConfiguration value to set.
     * @return the AgentRegistrationInner object itself.
     */
    public AgentRegistrationInner withDscMetaConfiguration(String dscMetaConfiguration) {
        this.dscMetaConfiguration = dscMetaConfiguration;
        return this;
    }

    /**
     * Get the endpoint property: Gets or sets the dsc server endpoint.
     * 
     * @return the endpoint value.
     */
    public String endpoint() {
        return this.endpoint;
    }

    /**
     * Set the endpoint property: Gets or sets the dsc server endpoint.
     * 
     * @param endpoint the endpoint value to set.
     * @return the AgentRegistrationInner object itself.
     */
    public AgentRegistrationInner withEndpoint(String endpoint) {
        this.endpoint = endpoint;
        return this;
    }

    /**
     * Get the keys property: Gets or sets the agent registration keys.
     * 
     * @return the keys value.
     */
    public AgentRegistrationKeys keys() {
        return this.keys;
    }

    /**
     * Set the keys property: Gets or sets the agent registration keys.
     * 
     * @param keys the keys value to set.
     * @return the AgentRegistrationInner object itself.
     */
    public AgentRegistrationInner withKeys(AgentRegistrationKeys keys) {
        this.keys = keys;
        return this;
    }

    /**
     * Get the id property: Gets or sets the id.
     * 
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Set the id property: Gets or sets the id.
     * 
     * @param id the id value to set.
     * @return the AgentRegistrationInner object itself.
     */
    public AgentRegistrationInner withId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (keys() != null) {
            keys().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("dscMetaConfiguration", this.dscMetaConfiguration);
        jsonWriter.writeStringField("endpoint", this.endpoint);
        jsonWriter.writeJsonField("keys", this.keys);
        jsonWriter.writeStringField("id", this.id);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AgentRegistrationInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AgentRegistrationInner if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AgentRegistrationInner.
     */
    public static AgentRegistrationInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AgentRegistrationInner deserializedAgentRegistrationInner = new AgentRegistrationInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("dscMetaConfiguration".equals(fieldName)) {
                    deserializedAgentRegistrationInner.dscMetaConfiguration = reader.getString();
                } else if ("endpoint".equals(fieldName)) {
                    deserializedAgentRegistrationInner.endpoint = reader.getString();
                } else if ("keys".equals(fieldName)) {
                    deserializedAgentRegistrationInner.keys = AgentRegistrationKeys.fromJson(reader);
                } else if ("id".equals(fieldName)) {
                    deserializedAgentRegistrationInner.id = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAgentRegistrationInner;
        });
    }
}
