// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.automation.models.DscConfigurationAssociationProperty;
import com.azure.resourcemanager.automation.models.JobProvisioningState;
import com.azure.resourcemanager.automation.models.JobStatus;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Map;
import java.util.UUID;

/**
 * Definition of Dsc Compilation job properties.
 */
@Fluent
public final class DscCompilationJobProperties implements JsonSerializable<DscCompilationJobProperties> {
    /*
     * Gets or sets the configuration.
     */
    private DscConfigurationAssociationProperty configuration;

    /*
     * Gets the compilation job started by.
     */
    private String startedBy;

    /*
     * Gets the id of the job.
     */
    private UUID jobId;

    /*
     * Gets the creation time of the job.
     */
    private OffsetDateTime creationTime;

    /*
     * The current provisioning state of the job.
     */
    private JobProvisioningState provisioningState;

    /*
     * Gets or sets the runOn which specifies the group name where the job is to be executed.
     */
    private String runOn;

    /*
     * Gets or sets the status of the job.
     */
    private JobStatus status;

    /*
     * Gets or sets the status details of the job.
     */
    private String statusDetails;

    /*
     * Gets the start time of the job.
     */
    private OffsetDateTime startTime;

    /*
     * Gets the end time of the job.
     */
    private OffsetDateTime endTime;

    /*
     * Gets the exception of the job.
     */
    private String exception;

    /*
     * Gets the last modified time of the job.
     */
    private OffsetDateTime lastModifiedTime;

    /*
     * Gets the last status modified time of the job.
     */
    private OffsetDateTime lastStatusModifiedTime;

    /*
     * Gets or sets the parameters of the job.
     */
    private Map<String, String> parameters;

    /**
     * Creates an instance of DscCompilationJobProperties class.
     */
    public DscCompilationJobProperties() {
    }

    /**
     * Get the configuration property: Gets or sets the configuration.
     * 
     * @return the configuration value.
     */
    public DscConfigurationAssociationProperty configuration() {
        return this.configuration;
    }

    /**
     * Set the configuration property: Gets or sets the configuration.
     * 
     * @param configuration the configuration value to set.
     * @return the DscCompilationJobProperties object itself.
     */
    public DscCompilationJobProperties withConfiguration(DscConfigurationAssociationProperty configuration) {
        this.configuration = configuration;
        return this;
    }

    /**
     * Get the startedBy property: Gets the compilation job started by.
     * 
     * @return the startedBy value.
     */
    public String startedBy() {
        return this.startedBy;
    }

    /**
     * Get the jobId property: Gets the id of the job.
     * 
     * @return the jobId value.
     */
    public UUID jobId() {
        return this.jobId;
    }

    /**
     * Get the creationTime property: Gets the creation time of the job.
     * 
     * @return the creationTime value.
     */
    public OffsetDateTime creationTime() {
        return this.creationTime;
    }

    /**
     * Get the provisioningState property: The current provisioning state of the job.
     * 
     * @return the provisioningState value.
     */
    public JobProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Set the provisioningState property: The current provisioning state of the job.
     * 
     * @param provisioningState the provisioningState value to set.
     * @return the DscCompilationJobProperties object itself.
     */
    public DscCompilationJobProperties withProvisioningState(JobProvisioningState provisioningState) {
        this.provisioningState = provisioningState;
        return this;
    }

    /**
     * Get the runOn property: Gets or sets the runOn which specifies the group name where the job is to be executed.
     * 
     * @return the runOn value.
     */
    public String runOn() {
        return this.runOn;
    }

    /**
     * Set the runOn property: Gets or sets the runOn which specifies the group name where the job is to be executed.
     * 
     * @param runOn the runOn value to set.
     * @return the DscCompilationJobProperties object itself.
     */
    public DscCompilationJobProperties withRunOn(String runOn) {
        this.runOn = runOn;
        return this;
    }

    /**
     * Get the status property: Gets or sets the status of the job.
     * 
     * @return the status value.
     */
    public JobStatus status() {
        return this.status;
    }

    /**
     * Set the status property: Gets or sets the status of the job.
     * 
     * @param status the status value to set.
     * @return the DscCompilationJobProperties object itself.
     */
    public DscCompilationJobProperties withStatus(JobStatus status) {
        this.status = status;
        return this;
    }

    /**
     * Get the statusDetails property: Gets or sets the status details of the job.
     * 
     * @return the statusDetails value.
     */
    public String statusDetails() {
        return this.statusDetails;
    }

    /**
     * Set the statusDetails property: Gets or sets the status details of the job.
     * 
     * @param statusDetails the statusDetails value to set.
     * @return the DscCompilationJobProperties object itself.
     */
    public DscCompilationJobProperties withStatusDetails(String statusDetails) {
        this.statusDetails = statusDetails;
        return this;
    }

    /**
     * Get the startTime property: Gets the start time of the job.
     * 
     * @return the startTime value.
     */
    public OffsetDateTime startTime() {
        return this.startTime;
    }

    /**
     * Get the endTime property: Gets the end time of the job.
     * 
     * @return the endTime value.
     */
    public OffsetDateTime endTime() {
        return this.endTime;
    }

    /**
     * Get the exception property: Gets the exception of the job.
     * 
     * @return the exception value.
     */
    public String exception() {
        return this.exception;
    }

    /**
     * Get the lastModifiedTime property: Gets the last modified time of the job.
     * 
     * @return the lastModifiedTime value.
     */
    public OffsetDateTime lastModifiedTime() {
        return this.lastModifiedTime;
    }

    /**
     * Get the lastStatusModifiedTime property: Gets the last status modified time of the job.
     * 
     * @return the lastStatusModifiedTime value.
     */
    public OffsetDateTime lastStatusModifiedTime() {
        return this.lastStatusModifiedTime;
    }

    /**
     * Get the parameters property: Gets or sets the parameters of the job.
     * 
     * @return the parameters value.
     */
    public Map<String, String> parameters() {
        return this.parameters;
    }

    /**
     * Set the parameters property: Gets or sets the parameters of the job.
     * 
     * @param parameters the parameters value to set.
     * @return the DscCompilationJobProperties object itself.
     */
    public DscCompilationJobProperties withParameters(Map<String, String> parameters) {
        this.parameters = parameters;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (configuration() != null) {
            configuration().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("configuration", this.configuration);
        jsonWriter.writeStringField("provisioningState",
            this.provisioningState == null ? null : this.provisioningState.toString());
        jsonWriter.writeStringField("runOn", this.runOn);
        jsonWriter.writeStringField("status", this.status == null ? null : this.status.toString());
        jsonWriter.writeStringField("statusDetails", this.statusDetails);
        jsonWriter.writeMapField("parameters", this.parameters, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DscCompilationJobProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DscCompilationJobProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DscCompilationJobProperties.
     */
    public static DscCompilationJobProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DscCompilationJobProperties deserializedDscCompilationJobProperties = new DscCompilationJobProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("configuration".equals(fieldName)) {
                    deserializedDscCompilationJobProperties.configuration
                        = DscConfigurationAssociationProperty.fromJson(reader);
                } else if ("startedBy".equals(fieldName)) {
                    deserializedDscCompilationJobProperties.startedBy = reader.getString();
                } else if ("jobId".equals(fieldName)) {
                    deserializedDscCompilationJobProperties.jobId
                        = reader.getNullable(nonNullReader -> UUID.fromString(nonNullReader.getString()));
                } else if ("creationTime".equals(fieldName)) {
                    deserializedDscCompilationJobProperties.creationTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedDscCompilationJobProperties.provisioningState
                        = JobProvisioningState.fromString(reader.getString());
                } else if ("runOn".equals(fieldName)) {
                    deserializedDscCompilationJobProperties.runOn = reader.getString();
                } else if ("status".equals(fieldName)) {
                    deserializedDscCompilationJobProperties.status = JobStatus.fromString(reader.getString());
                } else if ("statusDetails".equals(fieldName)) {
                    deserializedDscCompilationJobProperties.statusDetails = reader.getString();
                } else if ("startTime".equals(fieldName)) {
                    deserializedDscCompilationJobProperties.startTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("endTime".equals(fieldName)) {
                    deserializedDscCompilationJobProperties.endTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("exception".equals(fieldName)) {
                    deserializedDscCompilationJobProperties.exception = reader.getString();
                } else if ("lastModifiedTime".equals(fieldName)) {
                    deserializedDscCompilationJobProperties.lastModifiedTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("lastStatusModifiedTime".equals(fieldName)) {
                    deserializedDscCompilationJobProperties.lastStatusModifiedTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("parameters".equals(fieldName)) {
                    Map<String, String> parameters = reader.readMap(reader1 -> reader1.getString());
                    deserializedDscCompilationJobProperties.parameters = parameters;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDscCompilationJobProperties;
        });
    }
}
