// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.automation.models.RawGraphicalRunbookContent;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Graphical Runbook Content. */
@Fluent
public final class GraphicalRunbookContentInner {
    /*
     * Raw graphical Runbook content.
     */
    @JsonProperty(value = "rawContent")
    private RawGraphicalRunbookContent rawContent;

    /*
     * Graphical Runbook content as JSON
     */
    @JsonProperty(value = "graphRunbookJson")
    private String graphRunbookJson;

    /**
     * Get the rawContent property: Raw graphical Runbook content.
     *
     * @return the rawContent value.
     */
    public RawGraphicalRunbookContent rawContent() {
        return this.rawContent;
    }

    /**
     * Set the rawContent property: Raw graphical Runbook content.
     *
     * @param rawContent the rawContent value to set.
     * @return the GraphicalRunbookContentInner object itself.
     */
    public GraphicalRunbookContentInner withRawContent(RawGraphicalRunbookContent rawContent) {
        this.rawContent = rawContent;
        return this;
    }

    /**
     * Get the graphRunbookJson property: Graphical Runbook content as JSON.
     *
     * @return the graphRunbookJson value.
     */
    public String graphRunbookJson() {
        return this.graphRunbookJson;
    }

    /**
     * Set the graphRunbookJson property: Graphical Runbook content as JSON.
     *
     * @param graphRunbookJson the graphRunbookJson value to set.
     * @return the GraphicalRunbookContentInner object itself.
     */
    public GraphicalRunbookContentInner withGraphRunbookJson(String graphRunbookJson) {
        this.graphRunbookJson = graphRunbookJson;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (rawContent() != null) {
            rawContent().validate();
        }
    }
}
