// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.automation.models.ContentSource;
import com.azure.resourcemanager.automation.models.DscConfigurationParameter;
import com.azure.resourcemanager.automation.models.DscConfigurationProvisioningState;
import com.azure.resourcemanager.automation.models.DscConfigurationState;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Map;

/**
 * Definition of the configuration property type.
 */
@Fluent
public final class DscConfigurationProperties implements JsonSerializable<DscConfigurationProperties> {
    /*
     * Gets or sets the provisioning state of the configuration.
     */
    private DscConfigurationProvisioningState provisioningState;

    /*
     * Gets or sets the job count of the configuration.
     */
    private Integer jobCount;

    /*
     * Gets or sets the configuration parameters.
     */
    private Map<String, DscConfigurationParameter> parameters;

    /*
     * Gets or sets the source.
     */
    private ContentSource source;

    /*
     * Gets or sets the state of the configuration.
     */
    private DscConfigurationState state;

    /*
     * Gets or sets verbose log option.
     */
    private Boolean logVerbose;

    /*
     * Gets or sets the creation time.
     */
    private OffsetDateTime creationTime;

    /*
     * Gets or sets the last modified time.
     */
    private OffsetDateTime lastModifiedTime;

    /*
     * Gets the number of compiled node configurations.
     */
    private Integer nodeConfigurationCount;

    /*
     * Gets or sets the description.
     */
    private String description;

    /**
     * Creates an instance of DscConfigurationProperties class.
     */
    public DscConfigurationProperties() {
    }

    /**
     * Get the provisioningState property: Gets or sets the provisioning state of the configuration.
     * 
     * @return the provisioningState value.
     */
    public DscConfigurationProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Set the provisioningState property: Gets or sets the provisioning state of the configuration.
     * 
     * @param provisioningState the provisioningState value to set.
     * @return the DscConfigurationProperties object itself.
     */
    public DscConfigurationProperties withProvisioningState(DscConfigurationProvisioningState provisioningState) {
        this.provisioningState = provisioningState;
        return this;
    }

    /**
     * Get the jobCount property: Gets or sets the job count of the configuration.
     * 
     * @return the jobCount value.
     */
    public Integer jobCount() {
        return this.jobCount;
    }

    /**
     * Set the jobCount property: Gets or sets the job count of the configuration.
     * 
     * @param jobCount the jobCount value to set.
     * @return the DscConfigurationProperties object itself.
     */
    public DscConfigurationProperties withJobCount(Integer jobCount) {
        this.jobCount = jobCount;
        return this;
    }

    /**
     * Get the parameters property: Gets or sets the configuration parameters.
     * 
     * @return the parameters value.
     */
    public Map<String, DscConfigurationParameter> parameters() {
        return this.parameters;
    }

    /**
     * Set the parameters property: Gets or sets the configuration parameters.
     * 
     * @param parameters the parameters value to set.
     * @return the DscConfigurationProperties object itself.
     */
    public DscConfigurationProperties withParameters(Map<String, DscConfigurationParameter> parameters) {
        this.parameters = parameters;
        return this;
    }

    /**
     * Get the source property: Gets or sets the source.
     * 
     * @return the source value.
     */
    public ContentSource source() {
        return this.source;
    }

    /**
     * Set the source property: Gets or sets the source.
     * 
     * @param source the source value to set.
     * @return the DscConfigurationProperties object itself.
     */
    public DscConfigurationProperties withSource(ContentSource source) {
        this.source = source;
        return this;
    }

    /**
     * Get the state property: Gets or sets the state of the configuration.
     * 
     * @return the state value.
     */
    public DscConfigurationState state() {
        return this.state;
    }

    /**
     * Set the state property: Gets or sets the state of the configuration.
     * 
     * @param state the state value to set.
     * @return the DscConfigurationProperties object itself.
     */
    public DscConfigurationProperties withState(DscConfigurationState state) {
        this.state = state;
        return this;
    }

    /**
     * Get the logVerbose property: Gets or sets verbose log option.
     * 
     * @return the logVerbose value.
     */
    public Boolean logVerbose() {
        return this.logVerbose;
    }

    /**
     * Set the logVerbose property: Gets or sets verbose log option.
     * 
     * @param logVerbose the logVerbose value to set.
     * @return the DscConfigurationProperties object itself.
     */
    public DscConfigurationProperties withLogVerbose(Boolean logVerbose) {
        this.logVerbose = logVerbose;
        return this;
    }

    /**
     * Get the creationTime property: Gets or sets the creation time.
     * 
     * @return the creationTime value.
     */
    public OffsetDateTime creationTime() {
        return this.creationTime;
    }

    /**
     * Set the creationTime property: Gets or sets the creation time.
     * 
     * @param creationTime the creationTime value to set.
     * @return the DscConfigurationProperties object itself.
     */
    public DscConfigurationProperties withCreationTime(OffsetDateTime creationTime) {
        this.creationTime = creationTime;
        return this;
    }

    /**
     * Get the lastModifiedTime property: Gets or sets the last modified time.
     * 
     * @return the lastModifiedTime value.
     */
    public OffsetDateTime lastModifiedTime() {
        return this.lastModifiedTime;
    }

    /**
     * Set the lastModifiedTime property: Gets or sets the last modified time.
     * 
     * @param lastModifiedTime the lastModifiedTime value to set.
     * @return the DscConfigurationProperties object itself.
     */
    public DscConfigurationProperties withLastModifiedTime(OffsetDateTime lastModifiedTime) {
        this.lastModifiedTime = lastModifiedTime;
        return this;
    }

    /**
     * Get the nodeConfigurationCount property: Gets the number of compiled node configurations.
     * 
     * @return the nodeConfigurationCount value.
     */
    public Integer nodeConfigurationCount() {
        return this.nodeConfigurationCount;
    }

    /**
     * Set the nodeConfigurationCount property: Gets the number of compiled node configurations.
     * 
     * @param nodeConfigurationCount the nodeConfigurationCount value to set.
     * @return the DscConfigurationProperties object itself.
     */
    public DscConfigurationProperties withNodeConfigurationCount(Integer nodeConfigurationCount) {
        this.nodeConfigurationCount = nodeConfigurationCount;
        return this;
    }

    /**
     * Get the description property: Gets or sets the description.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: Gets or sets the description.
     * 
     * @param description the description value to set.
     * @return the DscConfigurationProperties object itself.
     */
    public DscConfigurationProperties withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (parameters() != null) {
            parameters().values().forEach(e -> {
                if (e != null) {
                    e.validate();
                }
            });
        }
        if (source() != null) {
            source().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("provisioningState",
            this.provisioningState == null ? null : this.provisioningState.toString());
        jsonWriter.writeNumberField("jobCount", this.jobCount);
        jsonWriter.writeMapField("parameters", this.parameters, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("source", this.source);
        jsonWriter.writeStringField("state", this.state == null ? null : this.state.toString());
        jsonWriter.writeBooleanField("logVerbose", this.logVerbose);
        jsonWriter.writeStringField("creationTime",
            this.creationTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.creationTime));
        jsonWriter.writeStringField("lastModifiedTime",
            this.lastModifiedTime == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.lastModifiedTime));
        jsonWriter.writeNumberField("nodeConfigurationCount", this.nodeConfigurationCount);
        jsonWriter.writeStringField("description", this.description);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DscConfigurationProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DscConfigurationProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DscConfigurationProperties.
     */
    public static DscConfigurationProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DscConfigurationProperties deserializedDscConfigurationProperties = new DscConfigurationProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("provisioningState".equals(fieldName)) {
                    deserializedDscConfigurationProperties.provisioningState
                        = DscConfigurationProvisioningState.fromString(reader.getString());
                } else if ("jobCount".equals(fieldName)) {
                    deserializedDscConfigurationProperties.jobCount = reader.getNullable(JsonReader::getInt);
                } else if ("parameters".equals(fieldName)) {
                    Map<String, DscConfigurationParameter> parameters
                        = reader.readMap(reader1 -> DscConfigurationParameter.fromJson(reader1));
                    deserializedDscConfigurationProperties.parameters = parameters;
                } else if ("source".equals(fieldName)) {
                    deserializedDscConfigurationProperties.source = ContentSource.fromJson(reader);
                } else if ("state".equals(fieldName)) {
                    deserializedDscConfigurationProperties.state = DscConfigurationState.fromString(reader.getString());
                } else if ("logVerbose".equals(fieldName)) {
                    deserializedDscConfigurationProperties.logVerbose = reader.getNullable(JsonReader::getBoolean);
                } else if ("creationTime".equals(fieldName)) {
                    deserializedDscConfigurationProperties.creationTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("lastModifiedTime".equals(fieldName)) {
                    deserializedDscConfigurationProperties.lastModifiedTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("nodeConfigurationCount".equals(fieldName)) {
                    deserializedDscConfigurationProperties.nodeConfigurationCount
                        = reader.getNullable(JsonReader::getInt);
                } else if ("description".equals(fieldName)) {
                    deserializedDscConfigurationProperties.description = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDscConfigurationProperties;
        });
    }
}
