// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.automation.models.ContentSource;
import com.azure.resourcemanager.automation.models.DscConfigurationParameter;
import java.io.IOException;
import java.util.Map;

/**
 * The properties to create or update configuration.
 */
@Fluent
public final class DscConfigurationCreateOrUpdateProperties
    implements JsonSerializable<DscConfigurationCreateOrUpdateProperties> {
    /*
     * Gets or sets verbose log option.
     */
    private Boolean logVerbose;

    /*
     * Gets or sets progress log option.
     */
    private Boolean logProgress;

    /*
     * Gets or sets the source.
     */
    private ContentSource source;

    /*
     * Gets or sets the configuration parameters.
     */
    private Map<String, DscConfigurationParameter> parameters;

    /*
     * Gets or sets the description of the configuration.
     */
    private String description;

    /**
     * Creates an instance of DscConfigurationCreateOrUpdateProperties class.
     */
    public DscConfigurationCreateOrUpdateProperties() {
    }

    /**
     * Get the logVerbose property: Gets or sets verbose log option.
     * 
     * @return the logVerbose value.
     */
    public Boolean logVerbose() {
        return this.logVerbose;
    }

    /**
     * Set the logVerbose property: Gets or sets verbose log option.
     * 
     * @param logVerbose the logVerbose value to set.
     * @return the DscConfigurationCreateOrUpdateProperties object itself.
     */
    public DscConfigurationCreateOrUpdateProperties withLogVerbose(Boolean logVerbose) {
        this.logVerbose = logVerbose;
        return this;
    }

    /**
     * Get the logProgress property: Gets or sets progress log option.
     * 
     * @return the logProgress value.
     */
    public Boolean logProgress() {
        return this.logProgress;
    }

    /**
     * Set the logProgress property: Gets or sets progress log option.
     * 
     * @param logProgress the logProgress value to set.
     * @return the DscConfigurationCreateOrUpdateProperties object itself.
     */
    public DscConfigurationCreateOrUpdateProperties withLogProgress(Boolean logProgress) {
        this.logProgress = logProgress;
        return this;
    }

    /**
     * Get the source property: Gets or sets the source.
     * 
     * @return the source value.
     */
    public ContentSource source() {
        return this.source;
    }

    /**
     * Set the source property: Gets or sets the source.
     * 
     * @param source the source value to set.
     * @return the DscConfigurationCreateOrUpdateProperties object itself.
     */
    public DscConfigurationCreateOrUpdateProperties withSource(ContentSource source) {
        this.source = source;
        return this;
    }

    /**
     * Get the parameters property: Gets or sets the configuration parameters.
     * 
     * @return the parameters value.
     */
    public Map<String, DscConfigurationParameter> parameters() {
        return this.parameters;
    }

    /**
     * Set the parameters property: Gets or sets the configuration parameters.
     * 
     * @param parameters the parameters value to set.
     * @return the DscConfigurationCreateOrUpdateProperties object itself.
     */
    public DscConfigurationCreateOrUpdateProperties withParameters(Map<String, DscConfigurationParameter> parameters) {
        this.parameters = parameters;
        return this;
    }

    /**
     * Get the description property: Gets or sets the description of the configuration.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: Gets or sets the description of the configuration.
     * 
     * @param description the description value to set.
     * @return the DscConfigurationCreateOrUpdateProperties object itself.
     */
    public DscConfigurationCreateOrUpdateProperties withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (source() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property source in model DscConfigurationCreateOrUpdateProperties"));
        } else {
            source().validate();
        }
        if (parameters() != null) {
            parameters().values().forEach(e -> {
                if (e != null) {
                    e.validate();
                }
            });
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(DscConfigurationCreateOrUpdateProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("source", this.source);
        jsonWriter.writeBooleanField("logVerbose", this.logVerbose);
        jsonWriter.writeBooleanField("logProgress", this.logProgress);
        jsonWriter.writeMapField("parameters", this.parameters, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("description", this.description);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DscConfigurationCreateOrUpdateProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DscConfigurationCreateOrUpdateProperties if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DscConfigurationCreateOrUpdateProperties.
     */
    public static DscConfigurationCreateOrUpdateProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DscConfigurationCreateOrUpdateProperties deserializedDscConfigurationCreateOrUpdateProperties
                = new DscConfigurationCreateOrUpdateProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("source".equals(fieldName)) {
                    deserializedDscConfigurationCreateOrUpdateProperties.source = ContentSource.fromJson(reader);
                } else if ("logVerbose".equals(fieldName)) {
                    deserializedDscConfigurationCreateOrUpdateProperties.logVerbose
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("logProgress".equals(fieldName)) {
                    deserializedDscConfigurationCreateOrUpdateProperties.logProgress
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("parameters".equals(fieldName)) {
                    Map<String, DscConfigurationParameter> parameters
                        = reader.readMap(reader1 -> DscConfigurationParameter.fromJson(reader1));
                    deserializedDscConfigurationCreateOrUpdateProperties.parameters = parameters;
                } else if ("description".equals(fieldName)) {
                    deserializedDscConfigurationCreateOrUpdateProperties.description = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDscConfigurationCreateOrUpdateProperties;
        });
    }
}
