// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.automation.models.JobScheduleCreateParameters;
import com.azure.resourcemanager.automation.models.RunbookAssociationProperty;
import com.azure.resourcemanager.automation.models.ScheduleAssociationProperty;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class JobScheduleCreateParametersTests {
    @Test
    public void testDeserialize() {
        JobScheduleCreateParameters model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"schedule\":{\"name\":\"zcezelfwyfwl\"},\"runbook\":{\"name\":\"jwetnpsihcla\"},\"runOn\":\"va\",\"parameters\":{\"tcmwqkchc\":\"trsqqw\"}}}")
                .toObject(JobScheduleCreateParameters.class);
        Assertions.assertEquals("zcezelfwyfwl", model.schedule().name());
        Assertions.assertEquals("jwetnpsihcla", model.runbook().name());
        Assertions.assertEquals("va", model.runOn());
        Assertions.assertEquals("trsqqw", model.parameters().get("tcmwqkchc"));
    }

    @Test
    public void testSerialize() {
        JobScheduleCreateParameters model =
            new JobScheduleCreateParameters()
                .withSchedule(new ScheduleAssociationProperty().withName("zcezelfwyfwl"))
                .withRunbook(new RunbookAssociationProperty().withName("jwetnpsihcla"))
                .withRunOn("va")
                .withParameters(mapOf("tcmwqkchc", "trsqqw"));
        model = BinaryData.fromObject(model).toObject(JobScheduleCreateParameters.class);
        Assertions.assertEquals("zcezelfwyfwl", model.schedule().name());
        Assertions.assertEquals("jwetnpsihcla", model.runbook().name());
        Assertions.assertEquals("va", model.runOn());
        Assertions.assertEquals("trsqqw", model.parameters().get("tcmwqkchc"));
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
