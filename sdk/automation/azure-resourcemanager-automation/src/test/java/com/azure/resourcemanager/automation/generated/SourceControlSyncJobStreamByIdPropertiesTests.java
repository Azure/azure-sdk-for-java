// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.automation.fluent.models.SourceControlSyncJobStreamByIdProperties;
import com.azure.resourcemanager.automation.models.StreamType;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class SourceControlSyncJobStreamByIdPropertiesTests {
    @Test
    public void testDeserialize() {
        SourceControlSyncJobStreamByIdProperties model =
            BinaryData
                .fromString(
                    "{\"sourceControlSyncJobStreamId\":\"mt\",\"summary\":\"iwenazero\",\"time\":\"2021-09-30T09:20:49Z\",\"streamType\":\"Error\",\"streamText\":\"lsxkd\",\"value\":{}}")
                .toObject(SourceControlSyncJobStreamByIdProperties.class);
        Assertions.assertEquals("mt", model.sourceControlSyncJobStreamId());
        Assertions.assertEquals("iwenazero", model.summary());
        Assertions.assertEquals(StreamType.ERROR, model.streamType());
        Assertions.assertEquals("lsxkd", model.streamText());
    }

    @Test
    public void testSerialize() {
        SourceControlSyncJobStreamByIdProperties model =
            new SourceControlSyncJobStreamByIdProperties()
                .withSourceControlSyncJobStreamId("mt")
                .withSummary("iwenazero")
                .withStreamType(StreamType.ERROR)
                .withStreamText("lsxkd")
                .withValue(mapOf());
        model = BinaryData.fromObject(model).toObject(SourceControlSyncJobStreamByIdProperties.class);
        Assertions.assertEquals("mt", model.sourceControlSyncJobStreamId());
        Assertions.assertEquals("iwenazero", model.summary());
        Assertions.assertEquals(StreamType.ERROR, model.streamType());
        Assertions.assertEquals("lsxkd", model.streamText());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
