// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.automation.AutomationManager;
import com.azure.resourcemanager.automation.models.Variable;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class VariablesListByAutomationAccountMockTests {
    @Test
    public void testListByAutomationAccount() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"value\":\"sqkptjqgkifm\",\"isEncrypted\":false,\"creationTime\":\"2021-06-19T22:09:51Z\",\"lastModifiedTime\":\"2020-12-24T11:39:35Z\",\"description\":\"xkpbqwun\"},\"id\":\"obuizaz\",\"name\":\"elwgvydjufbnkl\",\"type\":\"laxp\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AutomationManager manager = AutomationManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<Variable> response
            = manager.variables().listByAutomationAccount("b", "rwiqrxhacl", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("sqkptjqgkifm", response.iterator().next().value());
        Assertions.assertEquals(false, response.iterator().next().isEncrypted());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-19T22:09:51Z"),
            response.iterator().next().creationTime());
        Assertions.assertEquals(OffsetDateTime.parse("2020-12-24T11:39:35Z"),
            response.iterator().next().lastModifiedTime());
        Assertions.assertEquals("xkpbqwun", response.iterator().next().description());
    }
}
