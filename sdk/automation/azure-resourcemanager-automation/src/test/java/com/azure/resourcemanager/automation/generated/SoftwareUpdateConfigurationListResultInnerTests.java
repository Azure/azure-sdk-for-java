// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.automation.fluent.models.SoftwareUpdateConfigurationListResultInner;
import com.azure.resourcemanager.automation.models.AzureQueryProperties;
import com.azure.resourcemanager.automation.models.LinuxProperties;
import com.azure.resourcemanager.automation.models.LinuxUpdateClasses;
import com.azure.resourcemanager.automation.models.NonAzureQueryProperties;
import com.azure.resourcemanager.automation.models.OperatingSystemType;
import com.azure.resourcemanager.automation.models.ScheduleFrequency;
import com.azure.resourcemanager.automation.models.SoftwareUpdateConfigurationCollectionItem;
import com.azure.resourcemanager.automation.models.SoftwareUpdateConfigurationTasks;
import com.azure.resourcemanager.automation.models.TargetProperties;
import com.azure.resourcemanager.automation.models.TaskProperties;
import com.azure.resourcemanager.automation.models.UpdateConfiguration;
import com.azure.resourcemanager.automation.models.WindowsProperties;
import com.azure.resourcemanager.automation.models.WindowsUpdateClasses;
import java.time.Duration;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SoftwareUpdateConfigurationListResultInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SoftwareUpdateConfigurationListResultInner model = BinaryData.fromString(
            "{\"value\":[{\"name\":\"dwv\",\"id\":\"hcnzqt\",\"properties\":{\"updateConfiguration\":{\"operatingSystem\":\"Linux\",\"windows\":{\"includedUpdateClassifications\":\"Definition\",\"excludedKbNumbers\":[\"thlaiwdcxs\"],\"includedKbNumbers\":[\"zhzdtxetlgydlhqv\"],\"rebootSetting\":\"npxybafiq\"},\"linux\":{\"includedPackageClassifications\":\"Security\",\"excludedPackageNameMasks\":[\"gjekglklby\"],\"includedPackageNameMasks\":[\"dw\",\"wvmzegjonfhjir\",\"gdn\",\"z\"],\"rebootSetting\":\"fkspzhzmtksjci\"},\"duration\":\"PT75H36M59S\",\"azureVirtualMachines\":[\"xcdglj\",\"lkeuac\",\"tomflrytswfpf\",\"dgycxnmskwhqjjy\"],\"nonAzureComputerNames\":[\"rlpshhkv\",\"edwqslsrh\"],\"targets\":{\"azureQueries\":[{},{},{}],\"nonAzureQueries\":[{},{},{},{}]}},\"tasks\":{\"preTask\":{\"parameters\":{\"josovyrrl\":\"dcbrwimuvq\",\"sinuqtljqobbpih\":\"a\"},\"source\":\"cecybmrqbrjbbmpx\"},\"postTask\":{\"parameters\":{\"hud\":\"kfrexcrseqwjks\"},\"source\":\"hxogjggsvoujkxi\"}},\"frequency\":\"Minute\",\"startTime\":\"2021-01-07T12:17:43Z\",\"creationTime\":\"2021-03-04T05:06:03Z\",\"lastModifiedTime\":\"2021-11-12T05:02:40Z\",\"provisioningState\":\"omkxf\",\"nextRun\":\"2021-03-16T06:14:05Z\"}},{\"name\":\"hd\",\"id\":\"rhpw\",\"properties\":{\"updateConfiguration\":{\"operatingSystem\":\"Windows\",\"windows\":{\"includedUpdateClassifications\":\"Security\",\"excludedKbNumbers\":[\"wzovgk\",\"um\"],\"includedKbNumbers\":[\"jcjcazt\",\"wsnsqowx\",\"comlikytwvczc\",\"wka\"],\"rebootSetting\":\"ejyfdvlvhbwrnfx\"},\"linux\":{\"includedPackageClassifications\":\"Critical\",\"excludedPackageNameMasks\":[\"th\"],\"includedPackageNameMasks\":[\"mnaoy\"],\"rebootSetting\":\"kcoeqswank\"},\"duration\":\"PT79H23M5S\",\"azureVirtualMachines\":[\"hdroznnh\",\"rlktgjcsggu\",\"hemlwywaee\",\"zgfbukklelssx\"],\"nonAzureComputerNames\":[\"c\",\"xzujksrlsm\"],\"targets\":{\"azureQueries\":[{},{}],\"nonAzureQueries\":[{},{},{},{}]}},\"tasks\":{\"preTask\":{\"parameters\":{\"eowxvgpi\":\"cdoewbidyv\",\"xzecpaxwkufykhvu\":\"deugf\"},\"source\":\"epmrut\"},\"postTask\":{\"parameters\":{\"lujdjltymkmv\":\"aobn\",\"pphkixkykxds\":\"uihywart\"},\"source\":\"pemmucfxhik\"}},\"frequency\":\"Week\",\"startTime\":\"2021-03-17T05:18:17Z\",\"creationTime\":\"2021-06-25T20:41:46Z\",\"lastModifiedTime\":\"2021-02-06T21:42:26Z\",\"provisioningState\":\"cqlh\",\"nextRun\":\"2021-07-16T22:11:36Z\"}}]}")
            .toObject(SoftwareUpdateConfigurationListResultInner.class);
        Assertions.assertEquals(OperatingSystemType.LINUX,
            model.value().get(0).updateConfiguration().operatingSystem());
        Assertions.assertEquals(WindowsUpdateClasses.DEFINITION,
            model.value().get(0).updateConfiguration().windows().includedUpdateClassifications());
        Assertions.assertEquals("thlaiwdcxs",
            model.value().get(0).updateConfiguration().windows().excludedKbNumbers().get(0));
        Assertions.assertEquals("zhzdtxetlgydlhqv",
            model.value().get(0).updateConfiguration().windows().includedKbNumbers().get(0));
        Assertions.assertEquals("npxybafiq", model.value().get(0).updateConfiguration().windows().rebootSetting());
        Assertions.assertEquals(LinuxUpdateClasses.SECURITY,
            model.value().get(0).updateConfiguration().linux().includedPackageClassifications());
        Assertions.assertEquals("gjekglklby",
            model.value().get(0).updateConfiguration().linux().excludedPackageNameMasks().get(0));
        Assertions.assertEquals("dw",
            model.value().get(0).updateConfiguration().linux().includedPackageNameMasks().get(0));
        Assertions.assertEquals("fkspzhzmtksjci", model.value().get(0).updateConfiguration().linux().rebootSetting());
        Assertions.assertEquals(Duration.parse("PT75H36M59S"), model.value().get(0).updateConfiguration().duration());
        Assertions.assertEquals("xcdglj", model.value().get(0).updateConfiguration().azureVirtualMachines().get(0));
        Assertions.assertEquals("rlpshhkv", model.value().get(0).updateConfiguration().nonAzureComputerNames().get(0));
        Assertions.assertEquals("dcbrwimuvq", model.value().get(0).tasks().preTask().parameters().get("josovyrrl"));
        Assertions.assertEquals("cecybmrqbrjbbmpx", model.value().get(0).tasks().preTask().source());
        Assertions.assertEquals("kfrexcrseqwjks", model.value().get(0).tasks().postTask().parameters().get("hud"));
        Assertions.assertEquals("hxogjggsvoujkxi", model.value().get(0).tasks().postTask().source());
        Assertions.assertEquals(ScheduleFrequency.MINUTE, model.value().get(0).frequency());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-07T12:17:43Z"), model.value().get(0).startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-16T06:14:05Z"), model.value().get(0).nextRun());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SoftwareUpdateConfigurationListResultInner model
            = new SoftwareUpdateConfigurationListResultInner().withValue(Arrays.asList(
                new SoftwareUpdateConfigurationCollectionItem().withUpdateConfiguration(new UpdateConfiguration()
                    .withOperatingSystem(OperatingSystemType.LINUX)
                    .withWindows(
                        new WindowsProperties().withIncludedUpdateClassifications(WindowsUpdateClasses.DEFINITION)
                            .withExcludedKbNumbers(Arrays.asList("thlaiwdcxs"))
                            .withIncludedKbNumbers(Arrays.asList("zhzdtxetlgydlhqv"))
                            .withRebootSetting("npxybafiq"))
                    .withLinux(new LinuxProperties().withIncludedPackageClassifications(LinuxUpdateClasses.SECURITY)
                        .withExcludedPackageNameMasks(Arrays.asList("gjekglklby"))
                        .withIncludedPackageNameMasks(Arrays.asList("dw", "wvmzegjonfhjir", "gdn", "z"))
                        .withRebootSetting("fkspzhzmtksjci"))
                    .withDuration(Duration.parse("PT75H36M59S"))
                    .withAzureVirtualMachines(Arrays.asList("xcdglj", "lkeuac", "tomflrytswfpf", "dgycxnmskwhqjjy"))
                    .withNonAzureComputerNames(Arrays.asList("rlpshhkv", "edwqslsrh"))
                    .withTargets(new TargetProperties().withAzureQueries(Arrays.asList(new AzureQueryProperties(),
                        new AzureQueryProperties(), new AzureQueryProperties()))
                        .withNonAzureQueries(Arrays.asList(new NonAzureQueryProperties(), new NonAzureQueryProperties(),
                            new NonAzureQueryProperties(), new NonAzureQueryProperties()))))
                    .withTasks(
                        new SoftwareUpdateConfigurationTasks().withPreTask(
                            new TaskProperties()
                                .withParameters(mapOf("josovyrrl", "dcbrwimuvq", "sinuqtljqobbpih", "a"))
                                .withSource("cecybmrqbrjbbmpx"))
                            .withPostTask(new TaskProperties()
                                .withParameters(mapOf("hud", "kfrexcrseqwjks"))
                                .withSource("hxogjggsvoujkxi")))
                    .withFrequency(ScheduleFrequency.MINUTE)
                    .withStartTime(OffsetDateTime.parse("2021-01-07T12:17:43Z"))
                    .withNextRun(OffsetDateTime.parse("2021-03-16T06:14:05Z")),
                new SoftwareUpdateConfigurationCollectionItem()
                    .withUpdateConfiguration(new UpdateConfiguration().withOperatingSystem(OperatingSystemType.WINDOWS)
                        .withWindows(
                            new WindowsProperties().withIncludedUpdateClassifications(WindowsUpdateClasses.SECURITY)
                                .withExcludedKbNumbers(Arrays.asList("wzovgk", "um"))
                                .withIncludedKbNumbers(Arrays.asList("jcjcazt", "wsnsqowx", "comlikytwvczc", "wka"))
                                .withRebootSetting("ejyfdvlvhbwrnfx"))
                        .withLinux(new LinuxProperties().withIncludedPackageClassifications(LinuxUpdateClasses.CRITICAL)
                            .withExcludedPackageNameMasks(Arrays.asList("th"))
                            .withIncludedPackageNameMasks(Arrays.asList("mnaoy"))
                            .withRebootSetting("kcoeqswank"))
                        .withDuration(Duration.parse("PT79H23M5S"))
                        .withAzureVirtualMachines(
                            Arrays.asList("hdroznnh", "rlktgjcsggu", "hemlwywaee", "zgfbukklelssx"))
                        .withNonAzureComputerNames(Arrays.asList("c", "xzujksrlsm"))
                        .withTargets(new TargetProperties()
                            .withAzureQueries(Arrays.asList(new AzureQueryProperties(), new AzureQueryProperties()))
                            .withNonAzureQueries(
                                Arrays.asList(new NonAzureQueryProperties(), new NonAzureQueryProperties(),
                                    new NonAzureQueryProperties(), new NonAzureQueryProperties()))))
                    .withTasks(new SoftwareUpdateConfigurationTasks()
                        .withPreTask(new TaskProperties()
                            .withParameters(mapOf("eowxvgpi", "cdoewbidyv", "xzecpaxwkufykhvu", "deugf"))
                            .withSource("epmrut"))
                        .withPostTask(new TaskProperties()
                            .withParameters(mapOf("lujdjltymkmv", "aobn", "pphkixkykxds", "uihywart"))
                            .withSource("pemmucfxhik")))
                    .withFrequency(ScheduleFrequency.WEEK)
                    .withStartTime(OffsetDateTime.parse("2021-03-17T05:18:17Z"))
                    .withNextRun(OffsetDateTime.parse("2021-07-16T22:11:36Z"))));
        model = BinaryData.fromObject(model).toObject(SoftwareUpdateConfigurationListResultInner.class);
        Assertions.assertEquals(OperatingSystemType.LINUX,
            model.value().get(0).updateConfiguration().operatingSystem());
        Assertions.assertEquals(WindowsUpdateClasses.DEFINITION,
            model.value().get(0).updateConfiguration().windows().includedUpdateClassifications());
        Assertions.assertEquals("thlaiwdcxs",
            model.value().get(0).updateConfiguration().windows().excludedKbNumbers().get(0));
        Assertions.assertEquals("zhzdtxetlgydlhqv",
            model.value().get(0).updateConfiguration().windows().includedKbNumbers().get(0));
        Assertions.assertEquals("npxybafiq", model.value().get(0).updateConfiguration().windows().rebootSetting());
        Assertions.assertEquals(LinuxUpdateClasses.SECURITY,
            model.value().get(0).updateConfiguration().linux().includedPackageClassifications());
        Assertions.assertEquals("gjekglklby",
            model.value().get(0).updateConfiguration().linux().excludedPackageNameMasks().get(0));
        Assertions.assertEquals("dw",
            model.value().get(0).updateConfiguration().linux().includedPackageNameMasks().get(0));
        Assertions.assertEquals("fkspzhzmtksjci", model.value().get(0).updateConfiguration().linux().rebootSetting());
        Assertions.assertEquals(Duration.parse("PT75H36M59S"), model.value().get(0).updateConfiguration().duration());
        Assertions.assertEquals("xcdglj", model.value().get(0).updateConfiguration().azureVirtualMachines().get(0));
        Assertions.assertEquals("rlpshhkv", model.value().get(0).updateConfiguration().nonAzureComputerNames().get(0));
        Assertions.assertEquals("dcbrwimuvq", model.value().get(0).tasks().preTask().parameters().get("josovyrrl"));
        Assertions.assertEquals("cecybmrqbrjbbmpx", model.value().get(0).tasks().preTask().source());
        Assertions.assertEquals("kfrexcrseqwjks", model.value().get(0).tasks().postTask().parameters().get("hud"));
        Assertions.assertEquals("hxogjggsvoujkxi", model.value().get(0).tasks().postTask().source());
        Assertions.assertEquals(ScheduleFrequency.MINUTE, model.value().get(0).frequency());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-07T12:17:43Z"), model.value().get(0).startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-16T06:14:05Z"), model.value().get(0).nextRun());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
