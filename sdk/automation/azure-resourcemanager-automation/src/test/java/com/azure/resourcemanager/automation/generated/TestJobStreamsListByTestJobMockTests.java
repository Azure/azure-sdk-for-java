// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.automation.AutomationManager;
import com.azure.resourcemanager.automation.models.JobStream;
import com.azure.resourcemanager.automation.models.JobStreamType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class TestJobStreamsListByTestJobMockTests {
    @Test
    public void testListByTestJob() throws Exception {
        String responseStr
            = "{\"value\":[{\"id\":\"wee\",\"properties\":{\"jobStreamId\":\"ejzltka\",\"time\":\"2021-09-18T19:17:49Z\",\"streamType\":\"Debug\",\"streamText\":\"scbduxapgrcqebmv\",\"summary\":\"jomlnwsbvvdlsf\",\"value\":{\"dfedsb\":\"dataqe\"}}}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AutomationManager manager = AutomationManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<JobStream> response = manager.testJobStreams()
            .listByTestJob("tpmglxkoikmtr", "wrqkza", "bun", "paklw", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("wee", response.iterator().next().id());
        Assertions.assertEquals("ejzltka", response.iterator().next().jobStreamId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-18T19:17:49Z"), response.iterator().next().time());
        Assertions.assertEquals(JobStreamType.DEBUG, response.iterator().next().streamType());
        Assertions.assertEquals("scbduxapgrcqebmv", response.iterator().next().streamText());
        Assertions.assertEquals("jomlnwsbvvdlsf", response.iterator().next().summary());
    }
}
