// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.automation.fluent.models.JobScheduleInner;
import com.azure.resourcemanager.automation.models.RunbookAssociationProperty;
import com.azure.resourcemanager.automation.models.ScheduleAssociationProperty;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class JobScheduleInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        JobScheduleInner model = BinaryData.fromString(
            "{\"id\":\"dtnkdmkq\",\"name\":\"lwuenvrkp\",\"type\":\"uaibrebqaaysj\",\"properties\":{\"jobScheduleId\":\"qtnqtt\",\"schedule\":{\"name\":\"wfff\"},\"runbook\":{\"name\":\"pjpqqmtedltmmji\"},\"runOn\":\"eozphv\",\"parameters\":{\"ncyg\":\"y\",\"vipmdscwxqupevzh\":\"p\",\"jujbypelmcuvhixb\":\"stotxh\",\"ttpkiwkkbnujrywv\":\"xyfwnylrcool\"}}}")
            .toObject(JobScheduleInner.class);
        Assertions.assertEquals("qtnqtt", model.jobScheduleId());
        Assertions.assertEquals("wfff", model.schedule().name());
        Assertions.assertEquals("pjpqqmtedltmmji", model.runbook().name());
        Assertions.assertEquals("eozphv", model.runOn());
        Assertions.assertEquals("y", model.parameters().get("ncyg"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        JobScheduleInner model = new JobScheduleInner().withJobScheduleId("qtnqtt")
            .withSchedule(new ScheduleAssociationProperty().withName("wfff"))
            .withRunbook(new RunbookAssociationProperty().withName("pjpqqmtedltmmji"))
            .withRunOn("eozphv")
            .withParameters(mapOf("ncyg", "y", "vipmdscwxqupevzh", "p", "jujbypelmcuvhixb", "stotxh",
                "ttpkiwkkbnujrywv", "xyfwnylrcool"));
        model = BinaryData.fromObject(model).toObject(JobScheduleInner.class);
        Assertions.assertEquals("qtnqtt", model.jobScheduleId());
        Assertions.assertEquals("wfff", model.schedule().name());
        Assertions.assertEquals("pjpqqmtedltmmji", model.runbook().name());
        Assertions.assertEquals("eozphv", model.runOn());
        Assertions.assertEquals("y", model.parameters().get("ncyg"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
