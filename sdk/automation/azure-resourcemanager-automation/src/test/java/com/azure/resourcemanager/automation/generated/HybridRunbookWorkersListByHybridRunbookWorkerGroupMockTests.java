// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.automation.AutomationManager;
import com.azure.resourcemanager.automation.models.HybridRunbookWorker;
import com.azure.resourcemanager.automation.models.WorkerType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class HybridRunbookWorkersListByHybridRunbookWorkerGroupMockTests {
    @Test
    public void testListByHybridRunbookWorkerGroup() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"ip\":\"bthmsritj\",\"registeredDateTime\":\"2021-09-10T09:14:44Z\",\"lastSeenDateTime\":\"2021-03-24T05:12:58Z\",\"vmResourceId\":\"unozfvualjthoiv\",\"workerType\":\"HybridV1\",\"workerName\":\"n\"},\"id\":\"rfihscj\",\"name\":\"akmhz\",\"type\":\"hwahfbw\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AutomationManager manager = AutomationManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<HybridRunbookWorker> response = manager.hybridRunbookWorkers()
            .listByHybridRunbookWorkerGroup("zewxtrlqbpxy", "zkjp", "rgzxvbc", "wh", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("bthmsritj", response.iterator().next().ip());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-10T09:14:44Z"),
            response.iterator().next().registeredDateTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-24T05:12:58Z"),
            response.iterator().next().lastSeenDateTime());
        Assertions.assertEquals("unozfvualjthoiv", response.iterator().next().vmResourceId());
        Assertions.assertEquals(WorkerType.HYBRID_V1, response.iterator().next().workerType());
        Assertions.assertEquals("n", response.iterator().next().workerName());
    }
}
