// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.automation.models.AdvancedSchedule;
import com.azure.resourcemanager.automation.models.AdvancedScheduleMonthlyOccurrence;
import com.azure.resourcemanager.automation.models.ScheduleDay;
import com.azure.resourcemanager.automation.models.ScheduleFrequency;
import com.azure.resourcemanager.automation.models.SucScheduleProperties;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class SucSchedulePropertiesTests {
    @Test
    public void testDeserialize() {
        SucScheduleProperties model =
            BinaryData
                .fromString(
                    "{\"startTime\":\"2021-06-04T10:57:57Z\",\"startTimeOffsetMinutes\":23.275837509035814,\"expiryTime\":\"2021-12-02T13:04:58Z\",\"expiryTimeOffsetMinutes\":77.54201878889752,\"isEnabled\":false,\"nextRun\":\"2021-04-21T05:48:06Z\",\"nextRunOffsetMinutes\":23.848972419066083,\"interval\":7831439414407354845,\"frequency\":\"Hour\",\"timeZone\":\"ipfpubji\",\"advancedSchedule\":{\"weekDays\":[\"f\",\"ohqkvpuvksgpls\",\"kn\"],\"monthDays\":[1486406311,654967336,10368328],\"monthlyOccurrences\":[{\"occurrence\":1494231655,\"day\":\"Tuesday\"},{\"occurrence\":1607427594,\"day\":\"Wednesday\"},{\"occurrence\":596393327,\"day\":\"Wednesday\"}]},\"creationTime\":\"2021-10-02T17:09:33Z\",\"lastModifiedTime\":\"2021-08-07T02:36:34Z\",\"description\":\"ihleos\"}")
                .toObject(SucScheduleProperties.class);
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-04T10:57:57Z"), model.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-12-02T13:04:58Z"), model.expiryTime());
        Assertions.assertEquals(77.54201878889752D, model.expiryTimeOffsetMinutes());
        Assertions.assertEquals(false, model.isEnabled());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-21T05:48:06Z"), model.nextRun());
        Assertions.assertEquals(23.848972419066083D, model.nextRunOffsetMinutes());
        Assertions.assertEquals(7831439414407354845L, model.interval());
        Assertions.assertEquals(ScheduleFrequency.HOUR, model.frequency());
        Assertions.assertEquals("ipfpubji", model.timeZone());
        Assertions.assertEquals("f", model.advancedSchedule().weekDays().get(0));
        Assertions.assertEquals(1486406311, model.advancedSchedule().monthDays().get(0));
        Assertions.assertEquals(1494231655, model.advancedSchedule().monthlyOccurrences().get(0).occurrence());
        Assertions.assertEquals(ScheduleDay.TUESDAY, model.advancedSchedule().monthlyOccurrences().get(0).day());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-02T17:09:33Z"), model.creationTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-07T02:36:34Z"), model.lastModifiedTime());
        Assertions.assertEquals("ihleos", model.description());
    }

    @Test
    public void testSerialize() {
        SucScheduleProperties model =
            new SucScheduleProperties()
                .withStartTime(OffsetDateTime.parse("2021-06-04T10:57:57Z"))
                .withExpiryTime(OffsetDateTime.parse("2021-12-02T13:04:58Z"))
                .withExpiryTimeOffsetMinutes(77.54201878889752D)
                .withIsEnabled(false)
                .withNextRun(OffsetDateTime.parse("2021-04-21T05:48:06Z"))
                .withNextRunOffsetMinutes(23.848972419066083D)
                .withInterval(7831439414407354845L)
                .withFrequency(ScheduleFrequency.HOUR)
                .withTimeZone("ipfpubji")
                .withAdvancedSchedule(
                    new AdvancedSchedule()
                        .withWeekDays(Arrays.asList("f", "ohqkvpuvksgpls", "kn"))
                        .withMonthDays(Arrays.asList(1486406311, 654967336, 10368328))
                        .withMonthlyOccurrences(
                            Arrays
                                .asList(
                                    new AdvancedScheduleMonthlyOccurrence()
                                        .withOccurrence(1494231655)
                                        .withDay(ScheduleDay.TUESDAY),
                                    new AdvancedScheduleMonthlyOccurrence()
                                        .withOccurrence(1607427594)
                                        .withDay(ScheduleDay.WEDNESDAY),
                                    new AdvancedScheduleMonthlyOccurrence()
                                        .withOccurrence(596393327)
                                        .withDay(ScheduleDay.WEDNESDAY))))
                .withCreationTime(OffsetDateTime.parse("2021-10-02T17:09:33Z"))
                .withLastModifiedTime(OffsetDateTime.parse("2021-08-07T02:36:34Z"))
                .withDescription("ihleos");
        model = BinaryData.fromObject(model).toObject(SucScheduleProperties.class);
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-04T10:57:57Z"), model.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-12-02T13:04:58Z"), model.expiryTime());
        Assertions.assertEquals(77.54201878889752D, model.expiryTimeOffsetMinutes());
        Assertions.assertEquals(false, model.isEnabled());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-21T05:48:06Z"), model.nextRun());
        Assertions.assertEquals(23.848972419066083D, model.nextRunOffsetMinutes());
        Assertions.assertEquals(7831439414407354845L, model.interval());
        Assertions.assertEquals(ScheduleFrequency.HOUR, model.frequency());
        Assertions.assertEquals("ipfpubji", model.timeZone());
        Assertions.assertEquals("f", model.advancedSchedule().weekDays().get(0));
        Assertions.assertEquals(1486406311, model.advancedSchedule().monthDays().get(0));
        Assertions.assertEquals(1494231655, model.advancedSchedule().monthlyOccurrences().get(0).occurrence());
        Assertions.assertEquals(ScheduleDay.TUESDAY, model.advancedSchedule().monthlyOccurrences().get(0).day());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-02T17:09:33Z"), model.creationTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-07T02:36:34Z"), model.lastModifiedTime());
        Assertions.assertEquals("ihleos", model.description());
    }
}
