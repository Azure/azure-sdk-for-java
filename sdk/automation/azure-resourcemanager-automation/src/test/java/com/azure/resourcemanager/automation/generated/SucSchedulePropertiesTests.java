// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.automation.models.AdvancedSchedule;
import com.azure.resourcemanager.automation.models.AdvancedScheduleMonthlyOccurrence;
import com.azure.resourcemanager.automation.models.ScheduleDay;
import com.azure.resourcemanager.automation.models.ScheduleFrequency;
import com.azure.resourcemanager.automation.models.SucScheduleProperties;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class SucSchedulePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SucScheduleProperties model = BinaryData.fromString(
            "{\"startTime\":\"2021-08-28T04:28Z\",\"startTimeOffsetMinutes\":13.868932843998738,\"expiryTime\":\"2021-09-08T11:30:17Z\",\"expiryTimeOffsetMinutes\":14.655155749305305,\"isEnabled\":false,\"nextRun\":\"2021-05-11T21:57:08Z\",\"nextRunOffsetMinutes\":63.11757294678897,\"interval\":8319945570589240312,\"frequency\":\"Month\",\"timeZone\":\"ofizrvjfnmjmvlwy\",\"advancedSchedule\":{\"weekDays\":[\"lkujrllfojui\",\"jpu\",\"yjucejikzoeo\",\"vtzejetjklnti\"],\"monthDays\":[604848210,37175805],\"monthlyOccurrences\":[{\"occurrence\":1015093902,\"day\":\"Wednesday\"},{\"occurrence\":2140774011,\"day\":\"Tuesday\"},{\"occurrence\":795187139,\"day\":\"Monday\"},{\"occurrence\":2066712772,\"day\":\"Saturday\"}]},\"creationTime\":\"2021-08-23T13:19:33Z\",\"lastModifiedTime\":\"2021-01-04T03:28:09Z\",\"description\":\"pcrrk\"}")
            .toObject(SucScheduleProperties.class);
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-28T04:28Z"), model.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-08T11:30:17Z"), model.expiryTime());
        Assertions.assertEquals(14.655155749305305D, model.expiryTimeOffsetMinutes());
        Assertions.assertEquals(false, model.isEnabled());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-11T21:57:08Z"), model.nextRun());
        Assertions.assertEquals(63.11757294678897D, model.nextRunOffsetMinutes());
        Assertions.assertEquals(8319945570589240312L, model.interval());
        Assertions.assertEquals(ScheduleFrequency.MONTH, model.frequency());
        Assertions.assertEquals("ofizrvjfnmjmvlwy", model.timeZone());
        Assertions.assertEquals("lkujrllfojui", model.advancedSchedule().weekDays().get(0));
        Assertions.assertEquals(604848210, model.advancedSchedule().monthDays().get(0));
        Assertions.assertEquals(1015093902, model.advancedSchedule().monthlyOccurrences().get(0).occurrence());
        Assertions.assertEquals(ScheduleDay.WEDNESDAY, model.advancedSchedule().monthlyOccurrences().get(0).day());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-23T13:19:33Z"), model.creationTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-04T03:28:09Z"), model.lastModifiedTime());
        Assertions.assertEquals("pcrrk", model.description());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SucScheduleProperties model = new SucScheduleProperties()
            .withStartTime(OffsetDateTime.parse("2021-08-28T04:28Z"))
            .withExpiryTime(OffsetDateTime.parse("2021-09-08T11:30:17Z"))
            .withExpiryTimeOffsetMinutes(14.655155749305305D)
            .withIsEnabled(false)
            .withNextRun(OffsetDateTime.parse("2021-05-11T21:57:08Z"))
            .withNextRunOffsetMinutes(63.11757294678897D)
            .withInterval(8319945570589240312L)
            .withFrequency(ScheduleFrequency.MONTH)
            .withTimeZone("ofizrvjfnmjmvlwy")
            .withAdvancedSchedule(new AdvancedSchedule()
                .withWeekDays(Arrays.asList("lkujrllfojui", "jpu", "yjucejikzoeo", "vtzejetjklnti"))
                .withMonthDays(Arrays.asList(604848210, 37175805))
                .withMonthlyOccurrences(Arrays.asList(
                    new AdvancedScheduleMonthlyOccurrence().withOccurrence(1015093902).withDay(ScheduleDay.WEDNESDAY),
                    new AdvancedScheduleMonthlyOccurrence().withOccurrence(2140774011).withDay(ScheduleDay.TUESDAY),
                    new AdvancedScheduleMonthlyOccurrence().withOccurrence(795187139).withDay(ScheduleDay.MONDAY),
                    new AdvancedScheduleMonthlyOccurrence().withOccurrence(2066712772).withDay(ScheduleDay.SATURDAY))))
            .withCreationTime(OffsetDateTime.parse("2021-08-23T13:19:33Z"))
            .withLastModifiedTime(OffsetDateTime.parse("2021-01-04T03:28:09Z"))
            .withDescription("pcrrk");
        model = BinaryData.fromObject(model).toObject(SucScheduleProperties.class);
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-28T04:28Z"), model.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-08T11:30:17Z"), model.expiryTime());
        Assertions.assertEquals(14.655155749305305D, model.expiryTimeOffsetMinutes());
        Assertions.assertEquals(false, model.isEnabled());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-11T21:57:08Z"), model.nextRun());
        Assertions.assertEquals(63.11757294678897D, model.nextRunOffsetMinutes());
        Assertions.assertEquals(8319945570589240312L, model.interval());
        Assertions.assertEquals(ScheduleFrequency.MONTH, model.frequency());
        Assertions.assertEquals("ofizrvjfnmjmvlwy", model.timeZone());
        Assertions.assertEquals("lkujrllfojui", model.advancedSchedule().weekDays().get(0));
        Assertions.assertEquals(604848210, model.advancedSchedule().monthDays().get(0));
        Assertions.assertEquals(1015093902, model.advancedSchedule().monthlyOccurrences().get(0).occurrence());
        Assertions.assertEquals(ScheduleDay.WEDNESDAY, model.advancedSchedule().monthlyOccurrences().get(0).day());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-23T13:19:33Z"), model.creationTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-04T03:28:09Z"), model.lastModifiedTime());
        Assertions.assertEquals("pcrrk", model.description());
    }
}
