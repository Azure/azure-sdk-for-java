// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.util.Context;
import com.azure.resourcemanager.automation.AutomationManager;
import com.azure.resourcemanager.automation.models.Watcher;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class WatchersListByAutomationAccountMockTests {
    @Test
    public void testListByAutomationAccount() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"value\":[{\"properties\":{\"executionFrequencyInSeconds\":3601335985506918888,\"scriptName\":\"ormcqmic\",\"scriptParameters\":{\"wixvcpwnkwywzw\":\"qpkzfbojxjmcsmy\",\"sknxrwzawnvsbcf\":\"falickduoiqtamty\"},\"scriptRunOn\":\"agxnvhycvdimw\",\"status\":\"regzgyufutrwpwer\",\"creationTime\":\"2021-07-25T03:04:12Z\",\"lastModifiedTime\":\"2021-02-10T19:44:01Z\",\"lastModifiedBy\":\"hmeott\",\"description\":\"jyosxwwh\"},\"etag\":\"jtfvpndpmiljpn\",\"tags\":{\"sauzpjlx\":\"udqll\",\"zxlskihmxr\":\"ehuxiqhzlraym\"},\"location\":\"sajrednwyysht\",\"id\":\"w\",\"name\":\"mevuafpwzy\",\"type\":\"frkgwltxeq\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        AutomationManager manager =
            AutomationManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<Watcher> response =
            manager.watchers().listByAutomationAccount("liys", "pkcvmwf", "uxx", Context.NONE);

        Assertions.assertEquals("jtfvpndpmiljpn", response.iterator().next().etag());
        Assertions.assertEquals("udqll", response.iterator().next().tags().get("sauzpjlx"));
        Assertions.assertEquals("sajrednwyysht", response.iterator().next().location());
        Assertions.assertEquals(3601335985506918888L, response.iterator().next().executionFrequencyInSeconds());
        Assertions.assertEquals("ormcqmic", response.iterator().next().scriptName());
        Assertions.assertEquals("qpkzfbojxjmcsmy", response.iterator().next().scriptParameters().get("wixvcpwnkwywzw"));
        Assertions.assertEquals("agxnvhycvdimw", response.iterator().next().scriptRunOn());
        Assertions.assertEquals("jyosxwwh", response.iterator().next().description());
    }
}
