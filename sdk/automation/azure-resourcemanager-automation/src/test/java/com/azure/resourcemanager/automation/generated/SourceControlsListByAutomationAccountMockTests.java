// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.automation.AutomationManager;
import com.azure.resourcemanager.automation.models.SourceControl;
import com.azure.resourcemanager.automation.models.SourceType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class SourceControlsListByAutomationAccountMockTests {
    @Test
    public void testListByAutomationAccount() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"repoUrl\":\"trwntfmtbgw\",\"branch\":\"xwnaz\",\"folderPath\":\"rrdreyzjwhset\",\"autoSync\":true,\"publishRunbook\":false,\"sourceType\":\"VsoTfvc\",\"description\":\"e\",\"creationTime\":\"2021-11-13T08:57:23Z\",\"lastModifiedTime\":\"2021-11-24T06:42:30Z\"},\"id\":\"y\",\"name\":\"cy\",\"type\":\"hyqqzzdcy\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AutomationManager manager = AutomationManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<SourceControl> response = manager.sourceControls()
            .listByAutomationAccount("suenyg", "xcgjtf", "nquktrfnslnlrxs", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("trwntfmtbgw", response.iterator().next().repoUrl());
        Assertions.assertEquals("xwnaz", response.iterator().next().branch());
        Assertions.assertEquals("rrdreyzjwhset", response.iterator().next().folderPath());
        Assertions.assertEquals(true, response.iterator().next().autoSync());
        Assertions.assertEquals(false, response.iterator().next().publishRunbook());
        Assertions.assertEquals(SourceType.VSO_TFVC, response.iterator().next().sourceType());
        Assertions.assertEquals("e", response.iterator().next().description());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-13T08:57:23Z"),
            response.iterator().next().creationTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-24T06:42:30Z"),
            response.iterator().next().lastModifiedTime());
    }
}
