// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.automation.fluent.models.WebhookUpdateProperties;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class WebhookUpdatePropertiesTests {
    @Test
    public void testDeserialize() {
        WebhookUpdateProperties model =
            BinaryData
                .fromString(
                    "{\"isEnabled\":true,\"runOn\":\"u\",\"parameters\":{\"oftrmaequia\":\"ozbhdmsmlmzq\",\"z\":\"xicslfao\",\"kaivwit\":\"iyylhalnswhccsp\",\"bwemhairs\":\"scywuggwoluhc\"},\"description\":\"gzd\"}")
                .toObject(WebhookUpdateProperties.class);
        Assertions.assertEquals(true, model.isEnabled());
        Assertions.assertEquals("u", model.runOn());
        Assertions.assertEquals("ozbhdmsmlmzq", model.parameters().get("oftrmaequia"));
        Assertions.assertEquals("gzd", model.description());
    }

    @Test
    public void testSerialize() {
        WebhookUpdateProperties model =
            new WebhookUpdateProperties()
                .withIsEnabled(true)
                .withRunOn("u")
                .withParameters(
                    mapOf(
                        "oftrmaequia",
                        "ozbhdmsmlmzq",
                        "z",
                        "xicslfao",
                        "kaivwit",
                        "iyylhalnswhccsp",
                        "bwemhairs",
                        "scywuggwoluhc"))
                .withDescription("gzd");
        model = BinaryData.fromObject(model).toObject(WebhookUpdateProperties.class);
        Assertions.assertEquals(true, model.isEnabled());
        Assertions.assertEquals("u", model.runOn());
        Assertions.assertEquals("ozbhdmsmlmzq", model.parameters().get("oftrmaequia"));
        Assertions.assertEquals("gzd", model.description());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
