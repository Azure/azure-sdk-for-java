// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.automation.models.RunbookAssociationProperty;
import com.azure.resourcemanager.automation.models.WebhookCreateOrUpdateParameters;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class WebhookCreateOrUpdateParametersTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        WebhookCreateOrUpdateParameters model = BinaryData.fromString(
            "{\"name\":\"coiisbamnppcce\",\"properties\":{\"isEnabled\":false,\"uri\":\"dsbezaxyfu\",\"expiryTime\":\"2021-02-12T04:26:01Z\",\"parameters\":{\"peti\":\"zhyhnep\",\"iubxdukec\":\"rx\"},\"runbook\":{\"name\":\"azvdhctmmkosz\"},\"runOn\":\"blnsntrpcaqk\"}}")
            .toObject(WebhookCreateOrUpdateParameters.class);
        Assertions.assertEquals("coiisbamnppcce", model.name());
        Assertions.assertEquals(false, model.isEnabled());
        Assertions.assertEquals("dsbezaxyfu", model.uri());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-12T04:26:01Z"), model.expiryTime());
        Assertions.assertEquals("zhyhnep", model.parameters().get("peti"));
        Assertions.assertEquals("azvdhctmmkosz", model.runbook().name());
        Assertions.assertEquals("blnsntrpcaqk", model.runOn());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        WebhookCreateOrUpdateParameters model = new WebhookCreateOrUpdateParameters().withName("coiisbamnppcce")
            .withIsEnabled(false)
            .withUri("dsbezaxyfu")
            .withExpiryTime(OffsetDateTime.parse("2021-02-12T04:26:01Z"))
            .withParameters(mapOf("peti", "zhyhnep", "iubxdukec", "rx"))
            .withRunbook(new RunbookAssociationProperty().withName("azvdhctmmkosz"))
            .withRunOn("blnsntrpcaqk");
        model = BinaryData.fromObject(model).toObject(WebhookCreateOrUpdateParameters.class);
        Assertions.assertEquals("coiisbamnppcce", model.name());
        Assertions.assertEquals(false, model.isEnabled());
        Assertions.assertEquals("dsbezaxyfu", model.uri());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-12T04:26:01Z"), model.expiryTime());
        Assertions.assertEquals("zhyhnep", model.parameters().get("peti"));
        Assertions.assertEquals("azvdhctmmkosz", model.runbook().name());
        Assertions.assertEquals("blnsntrpcaqk", model.runOn());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
