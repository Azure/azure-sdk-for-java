// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.automation.AutomationManager;
import com.azure.resourcemanager.automation.models.HybridRunbookWorker;
import com.azure.resourcemanager.automation.models.WorkerType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class HybridRunbookWorkersCreateWithResponseMockTests {
    @Test
    public void testCreateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"ip\":\"oqayrehjuqwv\",\"registeredDateTime\":\"2021-01-12T12:28:13Z\",\"lastSeenDateTime\":\"2021-03-11T10:27:13Z\",\"vmResourceId\":\"hpzihacenqqzlx\",\"workerType\":\"HybridV1\",\"workerName\":\"bfonfdbgmkfwmj\"},\"id\":\"tewfhxwyrk\",\"name\":\"rehzlrynjpcha\",\"type\":\"kaeplrajubowu\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AutomationManager manager = AutomationManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        HybridRunbookWorker response = manager.hybridRunbookWorkers()
            .define("le")
            .withExistingHybridRunbookWorkerGroup("hbnnxemv", "nuqqkotauratnicp", "fzs")
            .withName("gnbbuypwovvvsfle")
            .withVmResourceId("rletndqlmf")
            .create();

        Assertions.assertEquals("oqayrehjuqwv", response.ip());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-12T12:28:13Z"), response.registeredDateTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-11T10:27:13Z"), response.lastSeenDateTime());
        Assertions.assertEquals("hpzihacenqqzlx", response.vmResourceId());
        Assertions.assertEquals(WorkerType.HYBRID_V1, response.workerType());
        Assertions.assertEquals("bfonfdbgmkfwmj", response.workerName());
    }
}
