// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.automation.fluent.models.WebhookCreateOrUpdateProperties;
import com.azure.resourcemanager.automation.models.RunbookAssociationProperty;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class WebhookCreateOrUpdatePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        WebhookCreateOrUpdateProperties model = BinaryData.fromString(
            "{\"isEnabled\":false,\"uri\":\"btfmhklbnldpvcbh\",\"expiryTime\":\"2021-10-02T02:32:06Z\",\"parameters\":{\"usqxutrpbrr\":\"u\",\"lbnwtpcpahp\":\"yuuatvlmbjwcolbm\"},\"runbook\":{\"name\":\"vxhmtfhocnxzcmj\"},\"runOn\":\"gxnoqrxtdis\"}")
            .toObject(WebhookCreateOrUpdateProperties.class);
        Assertions.assertEquals(false, model.isEnabled());
        Assertions.assertEquals("btfmhklbnldpvcbh", model.uri());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-02T02:32:06Z"), model.expiryTime());
        Assertions.assertEquals("u", model.parameters().get("usqxutrpbrr"));
        Assertions.assertEquals("vxhmtfhocnxzcmj", model.runbook().name());
        Assertions.assertEquals("gxnoqrxtdis", model.runOn());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        WebhookCreateOrUpdateProperties model = new WebhookCreateOrUpdateProperties().withIsEnabled(false)
            .withUri("btfmhklbnldpvcbh")
            .withExpiryTime(OffsetDateTime.parse("2021-10-02T02:32:06Z"))
            .withParameters(mapOf("usqxutrpbrr", "u", "lbnwtpcpahp", "yuuatvlmbjwcolbm"))
            .withRunbook(new RunbookAssociationProperty().withName("vxhmtfhocnxzcmj"))
            .withRunOn("gxnoqrxtdis");
        model = BinaryData.fromObject(model).toObject(WebhookCreateOrUpdateProperties.class);
        Assertions.assertEquals(false, model.isEnabled());
        Assertions.assertEquals("btfmhklbnldpvcbh", model.uri());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-02T02:32:06Z"), model.expiryTime());
        Assertions.assertEquals("u", model.parameters().get("usqxutrpbrr"));
        Assertions.assertEquals("vxhmtfhocnxzcmj", model.runbook().name());
        Assertions.assertEquals("gxnoqrxtdis", model.runOn());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
