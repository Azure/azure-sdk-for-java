// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.automation.fluent.models.RunbookDraftInner;
import com.azure.resourcemanager.automation.fluent.models.RunbookInner;
import com.azure.resourcemanager.automation.models.ContentLink;
import com.azure.resourcemanager.automation.models.RunbookParameter;
import com.azure.resourcemanager.automation.models.RunbookProvisioningState;
import com.azure.resourcemanager.automation.models.RunbookState;
import com.azure.resourcemanager.automation.models.RunbookTypeEnum;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class RunbookInnerTests {
    @Test
    public void testDeserialize() {
        RunbookInner model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"runbookType\":\"GraphPowerShellWorkflow\",\"publishContentLink\":{\"uri\":\"zpmkmlmvev\",\"version\":\"op\"},\"state\":\"New\",\"logVerbose\":true,\"logProgress\":true,\"logActivityTrace\":881818837,\"jobCount\":265709427,\"parameters\":{\"zqcyknap\":{\"type\":\"fg\",\"isMandatory\":false,\"position\":530417864,\"defaultValue\":\"cbb\"},\"fmuvapckccr\":{\"type\":\"fyuicdh\",\"isMandatory\":false,\"position\":866685244,\"defaultValue\":\"wgbdvibidmhmwffp\"},\"pyyrmfs\":{\"type\":\"weyoxoy\",\"isMandatory\":false,\"position\":919572814,\"defaultValue\":\"immoiroqboshbrag\"},\"asjcaacfdmmcpu\":{\"type\":\"pavbo\",\"isMandatory\":true,\"position\":1278156494,\"defaultValue\":\"wnupgahxku\"}},\"outputTypes\":[\"hqepvufhbzehewh\",\"qhnlbqnbld\",\"eaclgschorimk\",\"srrm\"],\"draft\":{\"inEdit\":false,\"creationTime\":\"2020-12-20T03:48:17Z\",\"lastModifiedTime\":\"2021-12-03T02:00:03Z\",\"parameters\":{},\"outputTypes\":[\"fcaabe\",\"lhbhl\",\"bmxuqib\",\"xtkcudfbsfar\"]},\"provisioningState\":\"Succeeded\",\"lastModifiedBy\":\"wlkjxn\",\"creationTime\":\"2021-11-12T06:14:41Z\",\"lastModifiedTime\":\"2021-09-14T22:57:22Z\",\"description\":\"stmhqykizmd\"},\"etag\":\"aoaf\",\"location\":\"luqvoxmycjimryv\",\"tags\":{\"xwefohecbvopwndy\":\"wwpbmzgwesyd\"},\"id\":\"leallklm\",\"name\":\"khlowkxxpv\",\"type\":\"rdfjmzsyzfhotl\"}")
                .toObject(RunbookInner.class);
        Assertions.assertEquals("luqvoxmycjimryv", model.location());
        Assertions.assertEquals("wwpbmzgwesyd", model.tags().get("xwefohecbvopwndy"));
        Assertions.assertEquals("aoaf", model.etag());
        Assertions.assertEquals(RunbookTypeEnum.GRAPH_POWER_SHELL_WORKFLOW, model.runbookType());
        Assertions.assertEquals("zpmkmlmvev", model.publishContentLink().uri());
        Assertions.assertEquals("op", model.publishContentLink().version());
        Assertions.assertEquals(RunbookState.NEW, model.state());
        Assertions.assertEquals(true, model.logVerbose());
        Assertions.assertEquals(true, model.logProgress());
        Assertions.assertEquals(881818837, model.logActivityTrace());
        Assertions.assertEquals(265709427, model.jobCount());
        Assertions.assertEquals("fg", model.parameters().get("zqcyknap").type());
        Assertions.assertEquals(false, model.parameters().get("zqcyknap").isMandatory());
        Assertions.assertEquals(530417864, model.parameters().get("zqcyknap").position());
        Assertions.assertEquals("cbb", model.parameters().get("zqcyknap").defaultValue());
        Assertions.assertEquals("hqepvufhbzehewh", model.outputTypes().get(0));
        Assertions.assertEquals(false, model.draft().inEdit());
        Assertions.assertEquals(OffsetDateTime.parse("2020-12-20T03:48:17Z"), model.draft().creationTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-12-03T02:00:03Z"), model.draft().lastModifiedTime());
        Assertions.assertEquals("fcaabe", model.draft().outputTypes().get(0));
        Assertions.assertEquals(RunbookProvisioningState.SUCCEEDED, model.provisioningState());
        Assertions.assertEquals("wlkjxn", model.lastModifiedBy());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-12T06:14:41Z"), model.creationTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-14T22:57:22Z"), model.lastModifiedTime());
        Assertions.assertEquals("stmhqykizmd", model.description());
    }

    @Test
    public void testSerialize() {
        RunbookInner model =
            new RunbookInner()
                .withLocation("luqvoxmycjimryv")
                .withTags(mapOf("xwefohecbvopwndy", "wwpbmzgwesyd"))
                .withEtag("aoaf")
                .withRunbookType(RunbookTypeEnum.GRAPH_POWER_SHELL_WORKFLOW)
                .withPublishContentLink(new ContentLink().withUri("zpmkmlmvev").withVersion("op"))
                .withState(RunbookState.NEW)
                .withLogVerbose(true)
                .withLogProgress(true)
                .withLogActivityTrace(881818837)
                .withJobCount(265709427)
                .withParameters(
                    mapOf(
                        "zqcyknap",
                        new RunbookParameter()
                            .withType("fg")
                            .withIsMandatory(false)
                            .withPosition(530417864)
                            .withDefaultValue("cbb"),
                        "fmuvapckccr",
                        new RunbookParameter()
                            .withType("fyuicdh")
                            .withIsMandatory(false)
                            .withPosition(866685244)
                            .withDefaultValue("wgbdvibidmhmwffp"),
                        "pyyrmfs",
                        new RunbookParameter()
                            .withType("weyoxoy")
                            .withIsMandatory(false)
                            .withPosition(919572814)
                            .withDefaultValue("immoiroqboshbrag"),
                        "asjcaacfdmmcpu",
                        new RunbookParameter()
                            .withType("pavbo")
                            .withIsMandatory(true)
                            .withPosition(1278156494)
                            .withDefaultValue("wnupgahxku")))
                .withOutputTypes(Arrays.asList("hqepvufhbzehewh", "qhnlbqnbld", "eaclgschorimk", "srrm"))
                .withDraft(
                    new RunbookDraftInner()
                        .withInEdit(false)
                        .withCreationTime(OffsetDateTime.parse("2020-12-20T03:48:17Z"))
                        .withLastModifiedTime(OffsetDateTime.parse("2021-12-03T02:00:03Z"))
                        .withParameters(mapOf())
                        .withOutputTypes(Arrays.asList("fcaabe", "lhbhl", "bmxuqib", "xtkcudfbsfar")))
                .withProvisioningState(RunbookProvisioningState.SUCCEEDED)
                .withLastModifiedBy("wlkjxn")
                .withCreationTime(OffsetDateTime.parse("2021-11-12T06:14:41Z"))
                .withLastModifiedTime(OffsetDateTime.parse("2021-09-14T22:57:22Z"))
                .withDescription("stmhqykizmd");
        model = BinaryData.fromObject(model).toObject(RunbookInner.class);
        Assertions.assertEquals("luqvoxmycjimryv", model.location());
        Assertions.assertEquals("wwpbmzgwesyd", model.tags().get("xwefohecbvopwndy"));
        Assertions.assertEquals("aoaf", model.etag());
        Assertions.assertEquals(RunbookTypeEnum.GRAPH_POWER_SHELL_WORKFLOW, model.runbookType());
        Assertions.assertEquals("zpmkmlmvev", model.publishContentLink().uri());
        Assertions.assertEquals("op", model.publishContentLink().version());
        Assertions.assertEquals(RunbookState.NEW, model.state());
        Assertions.assertEquals(true, model.logVerbose());
        Assertions.assertEquals(true, model.logProgress());
        Assertions.assertEquals(881818837, model.logActivityTrace());
        Assertions.assertEquals(265709427, model.jobCount());
        Assertions.assertEquals("fg", model.parameters().get("zqcyknap").type());
        Assertions.assertEquals(false, model.parameters().get("zqcyknap").isMandatory());
        Assertions.assertEquals(530417864, model.parameters().get("zqcyknap").position());
        Assertions.assertEquals("cbb", model.parameters().get("zqcyknap").defaultValue());
        Assertions.assertEquals("hqepvufhbzehewh", model.outputTypes().get(0));
        Assertions.assertEquals(false, model.draft().inEdit());
        Assertions.assertEquals(OffsetDateTime.parse("2020-12-20T03:48:17Z"), model.draft().creationTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-12-03T02:00:03Z"), model.draft().lastModifiedTime());
        Assertions.assertEquals("fcaabe", model.draft().outputTypes().get(0));
        Assertions.assertEquals(RunbookProvisioningState.SUCCEEDED, model.provisioningState());
        Assertions.assertEquals("wlkjxn", model.lastModifiedBy());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-12T06:14:41Z"), model.creationTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-14T22:57:22Z"), model.lastModifiedTime());
        Assertions.assertEquals("stmhqykizmd", model.description());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
