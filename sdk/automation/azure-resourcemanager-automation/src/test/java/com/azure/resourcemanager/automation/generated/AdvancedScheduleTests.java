// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.automation.models.AdvancedSchedule;
import com.azure.resourcemanager.automation.models.AdvancedScheduleMonthlyOccurrence;
import com.azure.resourcemanager.automation.models.ScheduleDay;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class AdvancedScheduleTests {
    @Test
    public void testDeserialize() {
        AdvancedSchedule model =
            BinaryData
                .fromString(
                    "{\"weekDays\":[\"srmslyzr\"],\"monthDays\":[215958915,1002303933,1371610491],\"monthlyOccurrences\":[{\"occurrence\":664678880,\"day\":\"Sunday\"},{\"occurrence\":671328296,\"day\":\"Sunday\"},{\"occurrence\":2011830272,\"day\":\"Monday\"},{\"occurrence\":2121235922,\"day\":\"Wednesday\"}]}")
                .toObject(AdvancedSchedule.class);
        Assertions.assertEquals("srmslyzr", model.weekDays().get(0));
        Assertions.assertEquals(215958915, model.monthDays().get(0));
        Assertions.assertEquals(664678880, model.monthlyOccurrences().get(0).occurrence());
        Assertions.assertEquals(ScheduleDay.SUNDAY, model.monthlyOccurrences().get(0).day());
    }

    @Test
    public void testSerialize() {
        AdvancedSchedule model =
            new AdvancedSchedule()
                .withWeekDays(Arrays.asList("srmslyzr"))
                .withMonthDays(Arrays.asList(215958915, 1002303933, 1371610491))
                .withMonthlyOccurrences(
                    Arrays
                        .asList(
                            new AdvancedScheduleMonthlyOccurrence()
                                .withOccurrence(664678880)
                                .withDay(ScheduleDay.SUNDAY),
                            new AdvancedScheduleMonthlyOccurrence()
                                .withOccurrence(671328296)
                                .withDay(ScheduleDay.SUNDAY),
                            new AdvancedScheduleMonthlyOccurrence()
                                .withOccurrence(2011830272)
                                .withDay(ScheduleDay.MONDAY),
                            new AdvancedScheduleMonthlyOccurrence()
                                .withOccurrence(2121235922)
                                .withDay(ScheduleDay.WEDNESDAY)));
        model = BinaryData.fromObject(model).toObject(AdvancedSchedule.class);
        Assertions.assertEquals("srmslyzr", model.weekDays().get(0));
        Assertions.assertEquals(215958915, model.monthDays().get(0));
        Assertions.assertEquals(664678880, model.monthlyOccurrences().get(0).occurrence());
        Assertions.assertEquals(ScheduleDay.SUNDAY, model.monthlyOccurrences().get(0).day());
    }
}
