// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.automation.models.ConnectionTypeCreateOrUpdateParameters;
import com.azure.resourcemanager.automation.models.FieldDefinition;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ConnectionTypeCreateOrUpdateParametersTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ConnectionTypeCreateOrUpdateParameters model = BinaryData.fromString(
            "{\"name\":\"ukndxdigrjgu\",\"properties\":{\"isGlobal\":true,\"fieldDefinitions\":{\"hbotzingamvppho\":{\"isEncrypted\":false,\"isOptional\":true,\"type\":\"tfih\"},\"kfwynw\":{\"isEncrypted\":false,\"isOptional\":true,\"type\":\"dphqamv\"},\"tnvyqiatkzwp\":{\"isEncrypted\":true,\"isOptional\":false,\"type\":\"kayh\"},\"cyajguqf\":{\"isEncrypted\":false,\"isOptional\":true,\"type\":\"cjaesgvvs\"}}}}")
            .toObject(ConnectionTypeCreateOrUpdateParameters.class);
        Assertions.assertEquals("ukndxdigrjgu", model.name());
        Assertions.assertEquals(true, model.isGlobal());
        Assertions.assertEquals(false, model.fieldDefinitions().get("hbotzingamvppho").isEncrypted());
        Assertions.assertEquals(true, model.fieldDefinitions().get("hbotzingamvppho").isOptional());
        Assertions.assertEquals("tfih", model.fieldDefinitions().get("hbotzingamvppho").type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ConnectionTypeCreateOrUpdateParameters model = new ConnectionTypeCreateOrUpdateParameters()
            .withName("ukndxdigrjgu")
            .withIsGlobal(true)
            .withFieldDefinitions(mapOf("hbotzingamvppho",
                new FieldDefinition().withIsEncrypted(false).withIsOptional(true).withType("tfih"), "kfwynw",
                new FieldDefinition().withIsEncrypted(false).withIsOptional(true).withType("dphqamv"), "tnvyqiatkzwp",
                new FieldDefinition().withIsEncrypted(true).withIsOptional(false).withType("kayh"), "cyajguqf",
                new FieldDefinition().withIsEncrypted(false).withIsOptional(true).withType("cjaesgvvs")));
        model = BinaryData.fromObject(model).toObject(ConnectionTypeCreateOrUpdateParameters.class);
        Assertions.assertEquals("ukndxdigrjgu", model.name());
        Assertions.assertEquals(true, model.isGlobal());
        Assertions.assertEquals(false, model.fieldDefinitions().get("hbotzingamvppho").isEncrypted());
        Assertions.assertEquals(true, model.fieldDefinitions().get("hbotzingamvppho").isOptional());
        Assertions.assertEquals("tfih", model.fieldDefinitions().get("hbotzingamvppho").type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
