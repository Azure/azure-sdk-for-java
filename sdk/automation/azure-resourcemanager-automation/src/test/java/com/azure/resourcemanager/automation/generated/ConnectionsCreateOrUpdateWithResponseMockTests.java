// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.automation.AutomationManager;
import com.azure.resourcemanager.automation.models.Connection;
import com.azure.resourcemanager.automation.models.ConnectionTypeAssociationProperty;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ConnectionsCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"connectionType\":{\"name\":\"kzfzqxjosho\"},\"fieldDefinitionValues\":{\"rmexznlwkb\":\"tryegpkh\",\"fgjblcd\":\"okxkhupzer\"},\"creationTime\":\"2021-08-29T06:30:52Z\",\"lastModifiedTime\":\"2021-10-17T07:38:01Z\",\"description\":\"mftzgyy\"},\"id\":\"y\",\"name\":\"lugekdfqnhtt\",\"type\":\"do\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AutomationManager manager = AutomationManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        Connection response = manager.connections()
            .define("mpinmzvfkneerzzt")
            .withExistingAutomationAccount("za", "ogatmoljiy")
            .withName("knsjulugd")
            .withConnectionType(new ConnectionTypeAssociationProperty().withName("hkeizcp"))
            .withDescription("nhrxlel")
            .withFieldDefinitionValues(mapOf("aydb", "dmiwjekpty", "hmhsurlgwqkpm", "zcqymlcfn", "msgvvjhvvlrloh",
                "zpstauolawiubm", "ns", "wjjmajnkdflqi"))
            .create();

        Assertions.assertEquals("kzfzqxjosho", response.connectionType().name());
        Assertions.assertEquals("mftzgyy", response.description());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
