// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.util.Context;
import com.azure.resourcemanager.automation.AutomationManager;
import com.azure.resourcemanager.automation.models.DscCompilationJob;
import com.azure.resourcemanager.automation.models.JobProvisioningState;
import com.azure.resourcemanager.automation.models.JobStatus;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class DscCompilationJobsListByAutomationAccountMockTests {
    @Test
    public void testListByAutomationAccount() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"value\":[{\"properties\":{\"configuration\":{\"name\":\"mxitpfinzcpd\"},\"startedBy\":\"krlgjm\",\"creationTime\":\"2021-10-17T16:04:29Z\",\"provisioningState\":\"Succeeded\",\"runOn\":\"guefz\",\"status\":\"Activating\",\"statusDetails\":\"heqdurelyujlfyou\",\"startTime\":\"2021-07-26T21:57:47Z\",\"endTime\":\"2021-06-04T02:57:44Z\",\"exception\":\"clcdigptajbrzmq\",\"lastModifiedTime\":\"2021-06-01T07:57:22Z\",\"lastStatusModifiedTime\":\"2021-10-08T19:51:54Z\",\"parameters\":{\"jc\":\"oclxiut\",\"zjd\":\"z\",\"jb\":\"r\",\"w\":\"xjeaoqaqbzgyh\"}},\"id\":\"v\",\"name\":\"atbwbqam\",\"type\":\"e\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        AutomationManager manager =
            AutomationManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<DscCompilationJob> response =
            manager.dscCompilationJobs().listByAutomationAccount("agttm", "mmagoaqylkjzt", "iua", Context.NONE);

        Assertions.assertEquals("mxitpfinzcpd", response.iterator().next().configuration().name());
        Assertions.assertEquals(JobProvisioningState.SUCCEEDED, response.iterator().next().provisioningState());
        Assertions.assertEquals("guefz", response.iterator().next().runOn());
        Assertions.assertEquals(JobStatus.ACTIVATING, response.iterator().next().status());
        Assertions.assertEquals("heqdurelyujlfyou", response.iterator().next().statusDetails());
        Assertions.assertEquals("oclxiut", response.iterator().next().parameters().get("jc"));
    }
}
