// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.util.Context;
import com.azure.resourcemanager.automation.AutomationManager;
import com.azure.resourcemanager.automation.models.ContentSourceType;
import com.azure.resourcemanager.automation.models.DscConfiguration;
import com.azure.resourcemanager.automation.models.DscConfigurationProvisioningState;
import com.azure.resourcemanager.automation.models.DscConfigurationState;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class DscConfigurationsListByAutomationAccountMockTests {
    @Test
    public void testListByAutomationAccount() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"value\":[{\"properties\":{\"provisioningState\":\"Succeeded\",\"jobCount\":925672952,\"parameters\":{},\"source\":{\"type\":\"uri\",\"value\":\"jisgglmvokatuztj\",\"version\":\"ibpvbkaehxsmzyg\"},\"state\":\"Edit\",\"logVerbose\":true,\"creationTime\":\"2021-06-10T07:30:20Z\",\"lastModifiedTime\":\"2021-08-05T00:58:14Z\",\"nodeConfigurationCount\":1714280194,\"description\":\"kxh\"},\"etag\":\"owljuxlkbectvtfj\",\"location\":\"skdchmaiubavl\",\"tags\":{\"dgjqafkmkro\":\"vgmfalkzazmgok\",\"pqrtvaoznqni\":\"zrthqet\"},\"id\":\"iezeagm\",\"name\":\"eituugedhfpjs\",\"type\":\"lzmb\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        AutomationManager manager =
            AutomationManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<DscConfiguration> response =
            manager
                .dscConfigurations()
                .listByAutomationAccount("xsl", "vlzladl", "x", 1108245888, 1000238415, "qhvfd", Context.NONE);

        Assertions.assertEquals("skdchmaiubavl", response.iterator().next().location());
        Assertions.assertEquals("vgmfalkzazmgok", response.iterator().next().tags().get("dgjqafkmkro"));
        Assertions.assertEquals("owljuxlkbectvtfj", response.iterator().next().etag());
        Assertions
            .assertEquals(DscConfigurationProvisioningState.SUCCEEDED, response.iterator().next().provisioningState());
        Assertions.assertEquals(925672952, response.iterator().next().jobCount());
        Assertions.assertEquals(ContentSourceType.URI, response.iterator().next().source().type());
        Assertions.assertEquals("jisgglmvokatuztj", response.iterator().next().source().value());
        Assertions.assertEquals("ibpvbkaehxsmzyg", response.iterator().next().source().version());
        Assertions.assertEquals(DscConfigurationState.EDIT, response.iterator().next().state());
        Assertions.assertEquals(true, response.iterator().next().logVerbose());
        Assertions
            .assertEquals(OffsetDateTime.parse("2021-06-10T07:30:20Z"), response.iterator().next().creationTime());
        Assertions
            .assertEquals(OffsetDateTime.parse("2021-08-05T00:58:14Z"), response.iterator().next().lastModifiedTime());
        Assertions.assertEquals(1714280194, response.iterator().next().nodeConfigurationCount());
        Assertions.assertEquals("kxh", response.iterator().next().description());
    }
}
