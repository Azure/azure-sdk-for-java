// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.automation.fluent.models.JobStreamInner;
import com.azure.resourcemanager.automation.models.JobStreamType;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class JobStreamInnerTests {
    @Test
    public void testDeserialize() {
        JobStreamInner model =
            BinaryData
                .fromString(
                    "{\"id\":\"xwtctyqiklbbovpl\",\"properties\":{\"jobStreamId\":\"hvgyuguosvmk\",\"time\":\"2021-11-15T07:00:08Z\",\"streamType\":\"Progress\",\"streamText\":\"kkfpl\",\"summary\":\"gsxnkjzkdeslpv\",\"value\":{}}}")
                .toObject(JobStreamInner.class);
        Assertions.assertEquals("xwtctyqiklbbovpl", model.id());
        Assertions.assertEquals("hvgyuguosvmk", model.jobStreamId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-15T07:00:08Z"), model.time());
        Assertions.assertEquals(JobStreamType.PROGRESS, model.streamType());
        Assertions.assertEquals("kkfpl", model.streamText());
        Assertions.assertEquals("gsxnkjzkdeslpv", model.summary());
    }

    @Test
    public void testSerialize() {
        JobStreamInner model =
            new JobStreamInner()
                .withId("xwtctyqiklbbovpl")
                .withJobStreamId("hvgyuguosvmk")
                .withTime(OffsetDateTime.parse("2021-11-15T07:00:08Z"))
                .withStreamType(JobStreamType.PROGRESS)
                .withStreamText("kkfpl")
                .withSummary("gsxnkjzkdeslpv")
                .withValue(mapOf());
        model = BinaryData.fromObject(model).toObject(JobStreamInner.class);
        Assertions.assertEquals("xwtctyqiklbbovpl", model.id());
        Assertions.assertEquals("hvgyuguosvmk", model.jobStreamId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-15T07:00:08Z"), model.time());
        Assertions.assertEquals(JobStreamType.PROGRESS, model.streamType());
        Assertions.assertEquals("kkfpl", model.streamText());
        Assertions.assertEquals("gsxnkjzkdeslpv", model.summary());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
