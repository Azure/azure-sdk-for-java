// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.automation.fluent.models.DscConfigurationCreateOrUpdateProperties;
import com.azure.resourcemanager.automation.models.ContentHash;
import com.azure.resourcemanager.automation.models.ContentSource;
import com.azure.resourcemanager.automation.models.ContentSourceType;
import com.azure.resourcemanager.automation.models.DscConfigurationParameter;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DscConfigurationCreateOrUpdatePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DscConfigurationCreateOrUpdateProperties model = BinaryData.fromString(
            "{\"logVerbose\":false,\"logProgress\":false,\"source\":{\"hash\":{\"algorithm\":\"nmdxotngfd\",\"value\":\"ugeyzihgrkyuiza\"},\"type\":\"embeddedContent\",\"value\":\"fpphoj\",\"version\":\"vyhyhsgzfc\"},\"parameters\":{\"fxeeebtijvacvbm\":{\"type\":\"mfg\",\"isMandatory\":false,\"position\":2118683942,\"defaultValue\":\"leohibetnluankr\"},\"aoqltfaey\":{\"type\":\"bqqxlaj\",\"isMandatory\":true,\"position\":799727678,\"defaultValue\":\"evehjkuyxoaf\"},\"h\":{\"type\":\"nm\",\"isMandatory\":true,\"position\":1550392867,\"defaultValue\":\"pghriypoqeyhl\"}},\"description\":\"prlpy\"}")
            .toObject(DscConfigurationCreateOrUpdateProperties.class);
        Assertions.assertEquals(false, model.logVerbose());
        Assertions.assertEquals(false, model.logProgress());
        Assertions.assertEquals("nmdxotngfd", model.source().hash().algorithm());
        Assertions.assertEquals("ugeyzihgrkyuiza", model.source().hash().value());
        Assertions.assertEquals(ContentSourceType.EMBEDDED_CONTENT, model.source().type());
        Assertions.assertEquals("fpphoj", model.source().value());
        Assertions.assertEquals("vyhyhsgzfc", model.source().version());
        Assertions.assertEquals("mfg", model.parameters().get("fxeeebtijvacvbm").type());
        Assertions.assertEquals(false, model.parameters().get("fxeeebtijvacvbm").isMandatory());
        Assertions.assertEquals(2118683942, model.parameters().get("fxeeebtijvacvbm").position());
        Assertions.assertEquals("leohibetnluankr", model.parameters().get("fxeeebtijvacvbm").defaultValue());
        Assertions.assertEquals("prlpy", model.description());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DscConfigurationCreateOrUpdateProperties model
            = new DscConfigurationCreateOrUpdateProperties().withLogVerbose(false)
                .withLogProgress(false)
                .withSource(new ContentSource()
                    .withHash(new ContentHash().withAlgorithm("nmdxotngfd").withValue("ugeyzihgrkyuiza"))
                    .withType(ContentSourceType.EMBEDDED_CONTENT)
                    .withValue("fpphoj")
                    .withVersion("vyhyhsgzfc"))
                .withParameters(mapOf("fxeeebtijvacvbm",
                    new DscConfigurationParameter().withType("mfg")
                        .withIsMandatory(false)
                        .withPosition(2118683942)
                        .withDefaultValue("leohibetnluankr"),
                    "aoqltfaey",
                    new DscConfigurationParameter().withType("bqqxlaj")
                        .withIsMandatory(true)
                        .withPosition(799727678)
                        .withDefaultValue("evehjkuyxoaf"),
                    "h",
                    new DscConfigurationParameter().withType("nm")
                        .withIsMandatory(true)
                        .withPosition(1550392867)
                        .withDefaultValue("pghriypoqeyhl")))
                .withDescription("prlpy");
        model = BinaryData.fromObject(model).toObject(DscConfigurationCreateOrUpdateProperties.class);
        Assertions.assertEquals(false, model.logVerbose());
        Assertions.assertEquals(false, model.logProgress());
        Assertions.assertEquals("nmdxotngfd", model.source().hash().algorithm());
        Assertions.assertEquals("ugeyzihgrkyuiza", model.source().hash().value());
        Assertions.assertEquals(ContentSourceType.EMBEDDED_CONTENT, model.source().type());
        Assertions.assertEquals("fpphoj", model.source().value());
        Assertions.assertEquals("vyhyhsgzfc", model.source().version());
        Assertions.assertEquals("mfg", model.parameters().get("fxeeebtijvacvbm").type());
        Assertions.assertEquals(false, model.parameters().get("fxeeebtijvacvbm").isMandatory());
        Assertions.assertEquals(2118683942, model.parameters().get("fxeeebtijvacvbm").position());
        Assertions.assertEquals("leohibetnluankr", model.parameters().get("fxeeebtijvacvbm").defaultValue());
        Assertions.assertEquals("prlpy", model.description());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
