// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.automation.fluent.models.DscConfigurationCreateOrUpdateProperties;
import com.azure.resourcemanager.automation.models.ContentHash;
import com.azure.resourcemanager.automation.models.ContentSource;
import com.azure.resourcemanager.automation.models.ContentSourceType;
import com.azure.resourcemanager.automation.models.DscConfigurationParameter;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class DscConfigurationCreateOrUpdatePropertiesTests {
    @Test
    public void testDeserialize() {
        DscConfigurationCreateOrUpdateProperties model =
            BinaryData
                .fromString(
                    "{\"logVerbose\":true,\"logProgress\":true,\"source\":{\"hash\":{\"algorithm\":\"ahhvjhhna\",\"value\":\"zybbj\"},\"type\":\"embeddedContent\",\"value\":\"ksyxkyxvxevblbje\",\"version\":\"ljlageuaulxu\"},\"parameters\":{\"rmffeyc\":{\"type\":\"bn\",\"isMandatory\":true,\"position\":1026738307,\"defaultValue\":\"enlsvxeizzgwkln\"},\"kkzddrtkgdojbmx\":{\"type\":\"ktp\",\"isMandatory\":true,\"position\":1625129281,\"defaultValue\":\"eeammxqie\"}},\"description\":\"vrefdeesv\"}")
                .toObject(DscConfigurationCreateOrUpdateProperties.class);
        Assertions.assertEquals(true, model.logVerbose());
        Assertions.assertEquals(true, model.logProgress());
        Assertions.assertEquals("ahhvjhhna", model.source().hash().algorithm());
        Assertions.assertEquals("zybbj", model.source().hash().value());
        Assertions.assertEquals(ContentSourceType.EMBEDDED_CONTENT, model.source().type());
        Assertions.assertEquals("ksyxkyxvxevblbje", model.source().value());
        Assertions.assertEquals("ljlageuaulxu", model.source().version());
        Assertions.assertEquals("bn", model.parameters().get("rmffeyc").type());
        Assertions.assertEquals(true, model.parameters().get("rmffeyc").isMandatory());
        Assertions.assertEquals(1026738307, model.parameters().get("rmffeyc").position());
        Assertions.assertEquals("enlsvxeizzgwkln", model.parameters().get("rmffeyc").defaultValue());
        Assertions.assertEquals("vrefdeesv", model.description());
    }

    @Test
    public void testSerialize() {
        DscConfigurationCreateOrUpdateProperties model =
            new DscConfigurationCreateOrUpdateProperties()
                .withLogVerbose(true)
                .withLogProgress(true)
                .withSource(
                    new ContentSource()
                        .withHash(new ContentHash().withAlgorithm("ahhvjhhna").withValue("zybbj"))
                        .withType(ContentSourceType.EMBEDDED_CONTENT)
                        .withValue("ksyxkyxvxevblbje")
                        .withVersion("ljlageuaulxu"))
                .withParameters(
                    mapOf(
                        "rmffeyc",
                        new DscConfigurationParameter()
                            .withType("bn")
                            .withIsMandatory(true)
                            .withPosition(1026738307)
                            .withDefaultValue("enlsvxeizzgwkln"),
                        "kkzddrtkgdojbmx",
                        new DscConfigurationParameter()
                            .withType("ktp")
                            .withIsMandatory(true)
                            .withPosition(1625129281)
                            .withDefaultValue("eeammxqie")))
                .withDescription("vrefdeesv");
        model = BinaryData.fromObject(model).toObject(DscConfigurationCreateOrUpdateProperties.class);
        Assertions.assertEquals(true, model.logVerbose());
        Assertions.assertEquals(true, model.logProgress());
        Assertions.assertEquals("ahhvjhhna", model.source().hash().algorithm());
        Assertions.assertEquals("zybbj", model.source().hash().value());
        Assertions.assertEquals(ContentSourceType.EMBEDDED_CONTENT, model.source().type());
        Assertions.assertEquals("ksyxkyxvxevblbje", model.source().value());
        Assertions.assertEquals("ljlageuaulxu", model.source().version());
        Assertions.assertEquals("bn", model.parameters().get("rmffeyc").type());
        Assertions.assertEquals(true, model.parameters().get("rmffeyc").isMandatory());
        Assertions.assertEquals(1026738307, model.parameters().get("rmffeyc").position());
        Assertions.assertEquals("enlsvxeizzgwkln", model.parameters().get("rmffeyc").defaultValue());
        Assertions.assertEquals("vrefdeesv", model.description());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
