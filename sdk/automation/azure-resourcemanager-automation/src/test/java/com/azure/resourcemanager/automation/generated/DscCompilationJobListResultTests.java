// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.automation.fluent.models.DscCompilationJobInner;
import com.azure.resourcemanager.automation.models.DscCompilationJobListResult;
import com.azure.resourcemanager.automation.models.JobProvisioningState;
import com.azure.resourcemanager.automation.models.JobStatus;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class DscCompilationJobListResultTests {
    @Test
    public void testDeserialize() {
        DscCompilationJobListResult model =
            BinaryData
                .fromString(
                    "{\"value\":[{\"properties\":{\"startedBy\":\"ymuctqhjfbebrj\",\"jobId\":\"c64d18d0-d587-4904-88e0-98381f0f59e9\",\"creationTime\":\"2021-05-29T17:28:26Z\",\"provisioningState\":\"Processing\",\"runOn\":\"utttxfvjrbirp\",\"status\":\"Stopping\",\"statusDetails\":\"c\",\"startTime\":\"2021-05-29T15:16:39Z\",\"endTime\":\"2021-06-03T04:40:05Z\",\"exception\":\"ljkyqxjvuuj\",\"lastModifiedTime\":\"2021-07-14T10:27:20Z\",\"lastStatusModifiedTime\":\"2021-07-19T09:21:05Z\",\"parameters\":{}},\"id\":\"gjljyoxgvc\",\"name\":\"tbgsncghkj\",\"type\":\"szzhbijhtxfvgxbf\"},{\"properties\":{\"startedBy\":\"eh\",\"jobId\":\"375cd1f1-ba5c-4dd3-9558-ddf85420131a\",\"creationTime\":\"2021-08-21T22:28:45Z\",\"provisioningState\":\"Processing\",\"runOn\":\"odebfqkkrbmpu\",\"status\":\"Blocked\",\"statusDetails\":\"wflzlfbxzpuzy\",\"startTime\":\"2021-03-03T14:03:42Z\",\"endTime\":\"2021-10-06T10:59:11Z\",\"exception\":\"zahmgkbrpyydhibn\",\"lastModifiedTime\":\"2021-02-01T08:13:12Z\",\"lastStatusModifiedTime\":\"2021-03-15T23:25:16Z\",\"parameters\":{}},\"id\":\"kadrgvt\",\"name\":\"agnb\",\"type\":\"ynhijggme\"},{\"properties\":{\"startedBy\":\"arbu\",\"jobId\":\"2d48f016-3242-45ed-8091-509f3c190615\",\"creationTime\":\"2021-02-21T10:02:12Z\",\"provisioningState\":\"Failed\",\"runOn\":\"zzmhjrunmpxttd\",\"status\":\"Suspended\",\"statusDetails\":\"nlankxmyskpb\",\"startTime\":\"2021-05-05T04:59:18Z\",\"endTime\":\"2021-06-03T10:31:17Z\",\"exception\":\"cxy\",\"lastModifiedTime\":\"2021-03-30T19:35:59Z\",\"lastStatusModifiedTime\":\"2021-09-02T16:16:29Z\",\"parameters\":{}},\"id\":\"synlqidybyxczfc\",\"name\":\"haaxdbabphl\",\"type\":\"rqlfktsthsucocmn\"}],\"nextLink\":\"azt\"}")
                .toObject(DscCompilationJobListResult.class);
        Assertions.assertEquals(JobProvisioningState.PROCESSING, model.value().get(0).provisioningState());
        Assertions.assertEquals("utttxfvjrbirp", model.value().get(0).runOn());
        Assertions.assertEquals(JobStatus.STOPPING, model.value().get(0).status());
        Assertions.assertEquals("c", model.value().get(0).statusDetails());
        Assertions.assertEquals("azt", model.nextLink());
    }

    @Test
    public void testSerialize() {
        DscCompilationJobListResult model =
            new DscCompilationJobListResult()
                .withValue(
                    Arrays
                        .asList(
                            new DscCompilationJobInner()
                                .withProvisioningState(JobProvisioningState.PROCESSING)
                                .withRunOn("utttxfvjrbirp")
                                .withStatus(JobStatus.STOPPING)
                                .withStatusDetails("c")
                                .withParameters(mapOf()),
                            new DscCompilationJobInner()
                                .withProvisioningState(JobProvisioningState.PROCESSING)
                                .withRunOn("odebfqkkrbmpu")
                                .withStatus(JobStatus.BLOCKED)
                                .withStatusDetails("wflzlfbxzpuzy")
                                .withParameters(mapOf()),
                            new DscCompilationJobInner()
                                .withProvisioningState(JobProvisioningState.FAILED)
                                .withRunOn("zzmhjrunmpxttd")
                                .withStatus(JobStatus.SUSPENDED)
                                .withStatusDetails("nlankxmyskpb")
                                .withParameters(mapOf())))
                .withNextLink("azt");
        model = BinaryData.fromObject(model).toObject(DscCompilationJobListResult.class);
        Assertions.assertEquals(JobProvisioningState.PROCESSING, model.value().get(0).provisioningState());
        Assertions.assertEquals("utttxfvjrbirp", model.value().get(0).runOn());
        Assertions.assertEquals(JobStatus.STOPPING, model.value().get(0).status());
        Assertions.assertEquals("c", model.value().get(0).statusDetails());
        Assertions.assertEquals("azt", model.nextLink());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
