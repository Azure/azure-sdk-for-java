// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.automation.fluent.models.DscCompilationJobInner;
import com.azure.resourcemanager.automation.models.DscCompilationJobListResult;
import com.azure.resourcemanager.automation.models.DscConfigurationAssociationProperty;
import com.azure.resourcemanager.automation.models.JobProvisioningState;
import com.azure.resourcemanager.automation.models.JobStatus;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DscCompilationJobListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DscCompilationJobListResult model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"configuration\":{\"name\":\"kde\"},\"startedBy\":\"pvlopwiyighxpkd\",\"jobId\":\"adae0675-e1cf-4957-a346-8664d02fd9c9\",\"creationTime\":\"2021-11-18T13:59:23Z\",\"provisioningState\":\"Suspended\",\"runOn\":\"bbaumnyquped\",\"status\":\"Activating\",\"statusDetails\":\"a\",\"startTime\":\"2021-01-27T09:46:32Z\",\"endTime\":\"2021-09-17T17:08:43Z\",\"exception\":\"txp\",\"lastModifiedTime\":\"2021-09-04T06:17:20Z\",\"lastStatusModifiedTime\":\"2021-05-21T15:45:47Z\",\"parameters\":{\"tldwkyzxuutk\":\"vpesapskrdqmhjjd\",\"togt\":\"cwscwsvlx\",\"vce\":\"rupqsxvnmicy\",\"ovnotyfjfcnjbkcn\":\"vei\"}},\"id\":\"dhbt\",\"name\":\"kphywpnvjto\",\"type\":\"nermcl\"},{\"properties\":{\"configuration\":{\"name\":\"hoxus\"},\"startedBy\":\"pabgyeps\",\"jobId\":\"fffe1a7e-5c17-4097-8478-c0e392d0e869\",\"creationTime\":\"2021-01-26T13:24:27Z\",\"provisioningState\":\"Processing\",\"runOn\":\"gxywpmue\",\"status\":\"Stopped\",\"statusDetails\":\"wfqkquj\",\"startTime\":\"2021-07-14T16:34:27Z\",\"endTime\":\"2021-08-09T22:38:08Z\",\"exception\":\"nobglaocq\",\"lastModifiedTime\":\"2021-12-07T11:44:31Z\",\"lastStatusModifiedTime\":\"2020-12-28T11:59Z\",\"parameters\":{\"wfudwpzntxhdzhl\":\"udxytlmoyrx\",\"hckfrlhrx\":\"qj\",\"ca\":\"bkyvp\"}},\"id\":\"uzbpzkafku\",\"name\":\"b\",\"type\":\"rnwb\"},{\"properties\":{\"configuration\":{\"name\":\"seyvj\"},\"startedBy\":\"rts\",\"jobId\":\"a17450b0-2079-4cb3-af69-c696dd1d418c\",\"creationTime\":\"2021-07-14T16:11:44Z\",\"provisioningState\":\"Succeeded\",\"runOn\":\"emaofmxagkvt\",\"status\":\"Failed\",\"statusDetails\":\"qkrhahvljua\",\"startTime\":\"2021-06-16T01:16:38Z\",\"endTime\":\"2021-02-11T00:39:32Z\",\"exception\":\"dhmdua\",\"lastModifiedTime\":\"2021-08-21T05:00:38Z\",\"lastStatusModifiedTime\":\"2021-12-01T16:06:51Z\",\"parameters\":{\"crgvxpvgom\":\"fadmws\",\"isgwbnbbeldawkz\":\"lf\"}},\"id\":\"ali\",\"name\":\"urqhaka\",\"type\":\"hashsfwxosow\"},{\"properties\":{\"configuration\":{\"name\":\"gicjooxdjeb\"},\"startedBy\":\"ucww\",\"jobId\":\"64c8c84b-0192-48d4-9f2f-1ef3c2b29bb6\",\"creationTime\":\"2021-06-22T01:04:48Z\",\"provisioningState\":\"Succeeded\",\"runOn\":\"euecivyhzceuoj\",\"status\":\"Suspending\",\"statusDetails\":\"jueiotwmcdytd\",\"startTime\":\"2021-03-20T09:56:32Z\",\"endTime\":\"2021-08-03T01:57:35Z\",\"exception\":\"rjaw\",\"lastModifiedTime\":\"2021-05-13T06:47:58Z\",\"lastStatusModifiedTime\":\"2021-10-18T22:59:22Z\",\"parameters\":{\"fbkp\":\"isk\"}},\"id\":\"cg\",\"name\":\"lwn\",\"type\":\"nhjdauw\"}],\"nextLink\":\"ylwz\"}")
            .toObject(DscCompilationJobListResult.class);
        Assertions.assertEquals("kde", model.value().get(0).configuration().name());
        Assertions.assertEquals(JobProvisioningState.SUSPENDED, model.value().get(0).provisioningState());
        Assertions.assertEquals("bbaumnyquped", model.value().get(0).runOn());
        Assertions.assertEquals(JobStatus.ACTIVATING, model.value().get(0).status());
        Assertions.assertEquals("a", model.value().get(0).statusDetails());
        Assertions.assertEquals("vpesapskrdqmhjjd", model.value().get(0).parameters().get("tldwkyzxuutk"));
        Assertions.assertEquals("ylwz", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DscCompilationJobListResult model = new DscCompilationJobListResult().withValue(Arrays.asList(
            new DscCompilationJobInner().withConfiguration(new DscConfigurationAssociationProperty().withName("kde"))
                .withProvisioningState(JobProvisioningState.SUSPENDED)
                .withRunOn("bbaumnyquped")
                .withStatus(JobStatus.ACTIVATING)
                .withStatusDetails("a")
                .withParameters(mapOf("tldwkyzxuutk", "vpesapskrdqmhjjd", "togt", "cwscwsvlx", "vce", "rupqsxvnmicy",
                    "ovnotyfjfcnjbkcn", "vei")),
            new DscCompilationJobInner().withConfiguration(new DscConfigurationAssociationProperty().withName("hoxus"))
                .withProvisioningState(JobProvisioningState.PROCESSING)
                .withRunOn("gxywpmue")
                .withStatus(JobStatus.STOPPED)
                .withStatusDetails("wfqkquj")
                .withParameters(mapOf("wfudwpzntxhdzhl", "udxytlmoyrx", "hckfrlhrx", "qj", "ca", "bkyvp")),
            new DscCompilationJobInner().withConfiguration(new DscConfigurationAssociationProperty().withName("seyvj"))
                .withProvisioningState(JobProvisioningState.SUCCEEDED)
                .withRunOn("emaofmxagkvt")
                .withStatus(JobStatus.FAILED)
                .withStatusDetails("qkrhahvljua")
                .withParameters(mapOf("crgvxpvgom", "fadmws", "isgwbnbbeldawkz", "lf")),
            new DscCompilationJobInner()
                .withConfiguration(new DscConfigurationAssociationProperty().withName("gicjooxdjeb"))
                .withProvisioningState(JobProvisioningState.SUCCEEDED)
                .withRunOn("euecivyhzceuoj")
                .withStatus(JobStatus.SUSPENDING)
                .withStatusDetails("jueiotwmcdytd")
                .withParameters(mapOf("fbkp", "isk"))))
            .withNextLink("ylwz");
        model = BinaryData.fromObject(model).toObject(DscCompilationJobListResult.class);
        Assertions.assertEquals("kde", model.value().get(0).configuration().name());
        Assertions.assertEquals(JobProvisioningState.SUSPENDED, model.value().get(0).provisioningState());
        Assertions.assertEquals("bbaumnyquped", model.value().get(0).runOn());
        Assertions.assertEquals(JobStatus.ACTIVATING, model.value().get(0).status());
        Assertions.assertEquals("a", model.value().get(0).statusDetails());
        Assertions.assertEquals("vpesapskrdqmhjjd", model.value().get(0).parameters().get("tldwkyzxuutk"));
        Assertions.assertEquals("ylwz", model.nextLink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
