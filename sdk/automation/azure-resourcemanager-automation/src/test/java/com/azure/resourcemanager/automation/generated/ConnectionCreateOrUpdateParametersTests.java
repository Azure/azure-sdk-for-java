// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.automation.models.ConnectionCreateOrUpdateParameters;
import com.azure.resourcemanager.automation.models.ConnectionTypeAssociationProperty;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class ConnectionCreateOrUpdateParametersTests {
    @Test
    public void testDeserialize() {
        ConnectionCreateOrUpdateParameters model =
            BinaryData
                .fromString(
                    "{\"name\":\"katnwxyi\",\"properties\":{\"description\":\"id\",\"connectionType\":{\"name\":\"qfkuvscxkdmli\"},\"fieldDefinitionValues\":{\"loazuruocbgoo\":\"ibrxkp\",\"jxakv\":\"bteoybf\",\"kgkxn\":\"jgslordilmyww\",\"bcihxuuwhc\":\"edabgyvudtjue\"}}}")
                .toObject(ConnectionCreateOrUpdateParameters.class);
        Assertions.assertEquals("katnwxyi", model.name());
        Assertions.assertEquals("id", model.description());
        Assertions.assertEquals("qfkuvscxkdmli", model.connectionType().name());
        Assertions.assertEquals("ibrxkp", model.fieldDefinitionValues().get("loazuruocbgoo"));
    }

    @Test
    public void testSerialize() {
        ConnectionCreateOrUpdateParameters model =
            new ConnectionCreateOrUpdateParameters()
                .withName("katnwxyi")
                .withDescription("id")
                .withConnectionType(new ConnectionTypeAssociationProperty().withName("qfkuvscxkdmli"))
                .withFieldDefinitionValues(
                    mapOf(
                        "loazuruocbgoo",
                        "ibrxkp",
                        "jxakv",
                        "bteoybf",
                        "kgkxn",
                        "jgslordilmyww",
                        "bcihxuuwhc",
                        "edabgyvudtjue"));
        model = BinaryData.fromObject(model).toObject(ConnectionCreateOrUpdateParameters.class);
        Assertions.assertEquals("katnwxyi", model.name());
        Assertions.assertEquals("id", model.description());
        Assertions.assertEquals("qfkuvscxkdmli", model.connectionType().name());
        Assertions.assertEquals("ibrxkp", model.fieldDefinitionValues().get("loazuruocbgoo"));
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
