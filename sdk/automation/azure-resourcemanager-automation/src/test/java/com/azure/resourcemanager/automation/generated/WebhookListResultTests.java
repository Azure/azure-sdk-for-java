// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.automation.fluent.models.WebhookInner;
import com.azure.resourcemanager.automation.models.WebhookListResult;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class WebhookListResultTests {
    @Test
    public void testDeserialize() {
        WebhookListResult model =
            BinaryData
                .fromString(
                    "{\"value\":[{\"properties\":{\"isEnabled\":true,\"uri\":\"qwdxggicc\",\"expiryTime\":\"2021-07-15T14:24:51Z\",\"lastInvokedTime\":\"2021-08-10T18:32:54Z\",\"parameters\":{},\"runOn\":\"mkttlstvlzywem\",\"creationTime\":\"2021-05-31T04:58:05Z\",\"lastModifiedTime\":\"2021-03-09T05:15:25Z\",\"lastModifiedBy\":\"dtclusiypb\",\"description\":\"gytguslfead\"},\"id\":\"ygqukyhejh\",\"name\":\"isxgfp\",\"type\":\"lolp\"}],\"nextLink\":\"ksrpqv\"}")
                .toObject(WebhookListResult.class);
        Assertions.assertEquals(true, model.value().get(0).isEnabled());
        Assertions.assertEquals("qwdxggicc", model.value().get(0).uri());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-15T14:24:51Z"), model.value().get(0).expiryTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-10T18:32:54Z"), model.value().get(0).lastInvokedTime());
        Assertions.assertEquals("mkttlstvlzywem", model.value().get(0).runOn());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-31T04:58:05Z"), model.value().get(0).creationTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-09T05:15:25Z"), model.value().get(0).lastModifiedTime());
        Assertions.assertEquals("dtclusiypb", model.value().get(0).lastModifiedBy());
        Assertions.assertEquals("gytguslfead", model.value().get(0).description());
        Assertions.assertEquals("ksrpqv", model.nextLink());
    }

    @Test
    public void testSerialize() {
        WebhookListResult model =
            new WebhookListResult()
                .withValue(
                    Arrays
                        .asList(
                            new WebhookInner()
                                .withIsEnabled(true)
                                .withUri("qwdxggicc")
                                .withExpiryTime(OffsetDateTime.parse("2021-07-15T14:24:51Z"))
                                .withLastInvokedTime(OffsetDateTime.parse("2021-08-10T18:32:54Z"))
                                .withParameters(mapOf())
                                .withRunOn("mkttlstvlzywem")
                                .withCreationTime(OffsetDateTime.parse("2021-05-31T04:58:05Z"))
                                .withLastModifiedTime(OffsetDateTime.parse("2021-03-09T05:15:25Z"))
                                .withLastModifiedBy("dtclusiypb")
                                .withDescription("gytguslfead")))
                .withNextLink("ksrpqv");
        model = BinaryData.fromObject(model).toObject(WebhookListResult.class);
        Assertions.assertEquals(true, model.value().get(0).isEnabled());
        Assertions.assertEquals("qwdxggicc", model.value().get(0).uri());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-15T14:24:51Z"), model.value().get(0).expiryTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-10T18:32:54Z"), model.value().get(0).lastInvokedTime());
        Assertions.assertEquals("mkttlstvlzywem", model.value().get(0).runOn());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-31T04:58:05Z"), model.value().get(0).creationTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-09T05:15:25Z"), model.value().get(0).lastModifiedTime());
        Assertions.assertEquals("dtclusiypb", model.value().get(0).lastModifiedBy());
        Assertions.assertEquals("gytguslfead", model.value().get(0).description());
        Assertions.assertEquals("ksrpqv", model.nextLink());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
