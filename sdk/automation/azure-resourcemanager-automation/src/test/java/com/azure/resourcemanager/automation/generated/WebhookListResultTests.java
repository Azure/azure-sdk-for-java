// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.automation.fluent.models.WebhookInner;
import com.azure.resourcemanager.automation.models.RunbookAssociationProperty;
import com.azure.resourcemanager.automation.models.WebhookListResult;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class WebhookListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        WebhookListResult model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"isEnabled\":true,\"uri\":\"gnlykm\",\"expiryTime\":\"2021-07-30T23:36:04Z\",\"lastInvokedTime\":\"2020-12-20T23:47:36Z\",\"parameters\":{\"qba\":\"doksqdtiwlwxlbon\"},\"runbook\":{\"name\":\"cqchygtvxbyjane\"},\"runOn\":\"bdpkxyqvgx\",\"creationTime\":\"2021-06-21T05:04:28Z\",\"lastModifiedTime\":\"2021-06-13T17:18:23Z\",\"lastModifiedBy\":\"vohkxdxuws\",\"description\":\"fmcwnosb\"},\"id\":\"lehgcvkbc\",\"name\":\"njolgjyyxpv\",\"type\":\"lszerqzevx\"},{\"properties\":{\"isEnabled\":false,\"uri\":\"txwaljglzo\",\"expiryTime\":\"2021-11-05T13:12:37Z\",\"lastInvokedTime\":\"2021-04-24T20:04:04Z\",\"parameters\":{\"ulhmzyq\":\"r\",\"gaxwmzwdfkbnrzo\":\"hdvafjrqpjiyrqjc\",\"tqjfgxxsaet\":\"pdltbq\",\"cduwjoedx\":\"zdgvpyigdaqqilz\"},\"runbook\":{\"name\":\"caifpaurww\"},\"runOn\":\"l\",\"creationTime\":\"2021-11-29T17:31:23Z\",\"lastModifiedTime\":\"2021-05-26T04:07:30Z\",\"lastModifiedBy\":\"dmkxwxdcvjwcy\",\"description\":\"akeciqchx\"},\"id\":\"tuicds\",\"name\":\"wdfmmpzhzzwvywr\",\"type\":\"yngydgrpxncaki\"},{\"properties\":{\"isEnabled\":true,\"uri\":\"jrkc\",\"expiryTime\":\"2021-06-21T00:31:04Z\",\"lastInvokedTime\":\"2021-08-13T11:51:58Z\",\"parameters\":{\"jdoq\":\"lmf\",\"gxhqfgqkayejs\":\"ykglt\"},\"runbook\":{\"name\":\"gflwfgziiucijj\"},\"runOn\":\"atlijjjr\",\"creationTime\":\"2021-06-06T18:22:07Z\",\"lastModifiedTime\":\"2021-10-15T11:23:10Z\",\"lastModifiedBy\":\"szknxkvccxe\",\"description\":\"vkunmign\"},\"id\":\"hi\",\"name\":\"kgqogjw\",\"type\":\"indedvabbx\"}],\"nextLink\":\"medeil\"}")
            .toObject(WebhookListResult.class);
        Assertions.assertEquals(true, model.value().get(0).isEnabled());
        Assertions.assertEquals("gnlykm", model.value().get(0).uri());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-30T23:36:04Z"), model.value().get(0).expiryTime());
        Assertions.assertEquals(OffsetDateTime.parse("2020-12-20T23:47:36Z"), model.value().get(0).lastInvokedTime());
        Assertions.assertEquals("doksqdtiwlwxlbon", model.value().get(0).parameters().get("qba"));
        Assertions.assertEquals("cqchygtvxbyjane", model.value().get(0).runbook().name());
        Assertions.assertEquals("bdpkxyqvgx", model.value().get(0).runOn());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-21T05:04:28Z"), model.value().get(0).creationTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-13T17:18:23Z"), model.value().get(0).lastModifiedTime());
        Assertions.assertEquals("vohkxdxuws", model.value().get(0).lastModifiedBy());
        Assertions.assertEquals("fmcwnosb", model.value().get(0).description());
        Assertions.assertEquals("medeil", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        WebhookListResult model = new WebhookListResult().withValue(Arrays.asList(
            new WebhookInner().withIsEnabled(true)
                .withUri("gnlykm")
                .withExpiryTime(OffsetDateTime.parse("2021-07-30T23:36:04Z"))
                .withLastInvokedTime(OffsetDateTime.parse("2020-12-20T23:47:36Z"))
                .withParameters(mapOf("qba", "doksqdtiwlwxlbon"))
                .withRunbook(new RunbookAssociationProperty().withName("cqchygtvxbyjane"))
                .withRunOn("bdpkxyqvgx")
                .withCreationTime(OffsetDateTime.parse("2021-06-21T05:04:28Z"))
                .withLastModifiedTime(OffsetDateTime.parse("2021-06-13T17:18:23Z"))
                .withLastModifiedBy("vohkxdxuws")
                .withDescription("fmcwnosb"),
            new WebhookInner().withIsEnabled(false)
                .withUri("txwaljglzo")
                .withExpiryTime(OffsetDateTime.parse("2021-11-05T13:12:37Z"))
                .withLastInvokedTime(OffsetDateTime.parse("2021-04-24T20:04:04Z"))
                .withParameters(mapOf("ulhmzyq", "r", "gaxwmzwdfkbnrzo", "hdvafjrqpjiyrqjc", "tqjfgxxsaet", "pdltbq",
                    "cduwjoedx", "zdgvpyigdaqqilz"))
                .withRunbook(new RunbookAssociationProperty().withName("caifpaurww"))
                .withRunOn("l")
                .withCreationTime(OffsetDateTime.parse("2021-11-29T17:31:23Z"))
                .withLastModifiedTime(OffsetDateTime.parse("2021-05-26T04:07:30Z"))
                .withLastModifiedBy("dmkxwxdcvjwcy")
                .withDescription("akeciqchx"),
            new WebhookInner().withIsEnabled(true)
                .withUri("jrkc")
                .withExpiryTime(OffsetDateTime.parse("2021-06-21T00:31:04Z"))
                .withLastInvokedTime(OffsetDateTime.parse("2021-08-13T11:51:58Z"))
                .withParameters(mapOf("jdoq", "lmf", "gxhqfgqkayejs", "ykglt"))
                .withRunbook(new RunbookAssociationProperty().withName("gflwfgziiucijj"))
                .withRunOn("atlijjjr")
                .withCreationTime(OffsetDateTime.parse("2021-06-06T18:22:07Z"))
                .withLastModifiedTime(OffsetDateTime.parse("2021-10-15T11:23:10Z"))
                .withLastModifiedBy("szknxkvccxe")
                .withDescription("vkunmign")))
            .withNextLink("medeil");
        model = BinaryData.fromObject(model).toObject(WebhookListResult.class);
        Assertions.assertEquals(true, model.value().get(0).isEnabled());
        Assertions.assertEquals("gnlykm", model.value().get(0).uri());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-30T23:36:04Z"), model.value().get(0).expiryTime());
        Assertions.assertEquals(OffsetDateTime.parse("2020-12-20T23:47:36Z"), model.value().get(0).lastInvokedTime());
        Assertions.assertEquals("doksqdtiwlwxlbon", model.value().get(0).parameters().get("qba"));
        Assertions.assertEquals("cqchygtvxbyjane", model.value().get(0).runbook().name());
        Assertions.assertEquals("bdpkxyqvgx", model.value().get(0).runOn());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-21T05:04:28Z"), model.value().get(0).creationTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-13T17:18:23Z"), model.value().get(0).lastModifiedTime());
        Assertions.assertEquals("vohkxdxuws", model.value().get(0).lastModifiedBy());
        Assertions.assertEquals("fmcwnosb", model.value().get(0).description());
        Assertions.assertEquals("medeil", model.nextLink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
