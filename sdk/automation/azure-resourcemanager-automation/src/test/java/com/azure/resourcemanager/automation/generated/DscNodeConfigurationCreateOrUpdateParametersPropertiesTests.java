// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.automation.fluent.models.DscNodeConfigurationCreateOrUpdateParametersProperties;
import com.azure.resourcemanager.automation.models.ContentHash;
import com.azure.resourcemanager.automation.models.ContentSource;
import com.azure.resourcemanager.automation.models.ContentSourceType;
import com.azure.resourcemanager.automation.models.DscConfigurationAssociationProperty;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class DscNodeConfigurationCreateOrUpdateParametersPropertiesTests {
    @Test
    public void testDeserialize() {
        DscNodeConfigurationCreateOrUpdateParametersProperties model =
            BinaryData
                .fromString(
                    "{\"source\":{\"hash\":{\"algorithm\":\"lwexxwl\",\"value\":\"lniexz\"},\"type\":\"embeddedContent\",\"value\":\"gepqtybbwwpg\",\"version\":\"k\"},\"configuration\":{\"name\":\"zyvli\"},\"incrementNodeConfigurationBuild\":false}")
                .toObject(DscNodeConfigurationCreateOrUpdateParametersProperties.class);
        Assertions.assertEquals("lwexxwl", model.source().hash().algorithm());
        Assertions.assertEquals("lniexz", model.source().hash().value());
        Assertions.assertEquals(ContentSourceType.EMBEDDED_CONTENT, model.source().type());
        Assertions.assertEquals("gepqtybbwwpg", model.source().value());
        Assertions.assertEquals("k", model.source().version());
        Assertions.assertEquals("zyvli", model.configuration().name());
        Assertions.assertEquals(false, model.incrementNodeConfigurationBuild());
    }

    @Test
    public void testSerialize() {
        DscNodeConfigurationCreateOrUpdateParametersProperties model =
            new DscNodeConfigurationCreateOrUpdateParametersProperties()
                .withSource(
                    new ContentSource()
                        .withHash(new ContentHash().withAlgorithm("lwexxwl").withValue("lniexz"))
                        .withType(ContentSourceType.EMBEDDED_CONTENT)
                        .withValue("gepqtybbwwpg")
                        .withVersion("k"))
                .withConfiguration(new DscConfigurationAssociationProperty().withName("zyvli"))
                .withIncrementNodeConfigurationBuild(false);
        model = BinaryData.fromObject(model).toObject(DscNodeConfigurationCreateOrUpdateParametersProperties.class);
        Assertions.assertEquals("lwexxwl", model.source().hash().algorithm());
        Assertions.assertEquals("lniexz", model.source().hash().value());
        Assertions.assertEquals(ContentSourceType.EMBEDDED_CONTENT, model.source().type());
        Assertions.assertEquals("gepqtybbwwpg", model.source().value());
        Assertions.assertEquals("k", model.source().version());
        Assertions.assertEquals("zyvli", model.configuration().name());
        Assertions.assertEquals(false, model.incrementNodeConfigurationBuild());
    }
}
