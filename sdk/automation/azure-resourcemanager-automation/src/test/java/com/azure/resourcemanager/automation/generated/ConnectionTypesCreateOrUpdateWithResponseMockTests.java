// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.automation.AutomationManager;
import com.azure.resourcemanager.automation.models.ConnectionType;
import com.azure.resourcemanager.automation.models.FieldDefinition;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ConnectionTypesCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"id\":\"bwmvogljsvl\",\"name\":\"idnwceha\",\"type\":\"do\",\"properties\":{\"isGlobal\":false,\"fieldDefinitions\":{\"aeapfsergd\":{\"isEncrypted\":true,\"isOptional\":false,\"type\":\"qpep\"},\"qwbp\":{\"isEncrypted\":false,\"isOptional\":true,\"type\":\"acyh\"},\"khjoz\":{\"isEncrypted\":false,\"isOptional\":true,\"type\":\"u\"},\"upyvqyvliq\":{\"isEncrypted\":false,\"isOptional\":true,\"type\":\"m\"}},\"creationTime\":\"2021-08-24T14:38Z\",\"lastModifiedTime\":\"2021-11-22T15:22:10Z\",\"description\":\"bsvs\"}}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 201, responseStr.getBytes(StandardCharsets.UTF_8)));
        AutomationManager manager = AutomationManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        ConnectionType response = manager.connectionTypes()
            .define("nquoxsotireimse")
            .withExistingAutomationAccount("quxweyslandkd", "djhunhghcgawnr")
            .withName("bfsx")
            .withFieldDefinitions(
                mapOf("jzlquz", new FieldDefinition().withIsEncrypted(false).withIsOptional(false).withType("zmmx"),
                    "n", new FieldDefinition().withIsEncrypted(true).withIsOptional(false).withType("xebjvbz")))
            .withIsGlobal(false)
            .create();

        Assertions.assertEquals(false, response.isGlobal());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-22T15:22:10Z"), response.lastModifiedTime());
        Assertions.assertEquals("bsvs", response.description());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
