// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.automation.models.DscMetaConfiguration;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class DscMetaConfigurationTests {
    @Test
    public void testDeserialize() {
        DscMetaConfiguration model =
            BinaryData
                .fromString(
                    "{\"configurationModeFrequencyMins\":1493374876,\"rebootNodeIfNeeded\":true,\"configurationMode\":\"ngj\",\"actionAfterReboot\":\"cczsq\",\"certificateId\":\"hvmdajvnysounq\",\"refreshFrequencyMins\":97546857,\"allowModuleOverwrite\":true}")
                .toObject(DscMetaConfiguration.class);
        Assertions.assertEquals(1493374876, model.configurationModeFrequencyMins());
        Assertions.assertEquals(true, model.rebootNodeIfNeeded());
        Assertions.assertEquals("ngj", model.configurationMode());
        Assertions.assertEquals("cczsq", model.actionAfterReboot());
        Assertions.assertEquals("hvmdajvnysounq", model.certificateId());
        Assertions.assertEquals(97546857, model.refreshFrequencyMins());
        Assertions.assertEquals(true, model.allowModuleOverwrite());
    }

    @Test
    public void testSerialize() {
        DscMetaConfiguration model =
            new DscMetaConfiguration()
                .withConfigurationModeFrequencyMins(1493374876)
                .withRebootNodeIfNeeded(true)
                .withConfigurationMode("ngj")
                .withActionAfterReboot("cczsq")
                .withCertificateId("hvmdajvnysounq")
                .withRefreshFrequencyMins(97546857)
                .withAllowModuleOverwrite(true);
        model = BinaryData.fromObject(model).toObject(DscMetaConfiguration.class);
        Assertions.assertEquals(1493374876, model.configurationModeFrequencyMins());
        Assertions.assertEquals(true, model.rebootNodeIfNeeded());
        Assertions.assertEquals("ngj", model.configurationMode());
        Assertions.assertEquals("cczsq", model.actionAfterReboot());
        Assertions.assertEquals("hvmdajvnysounq", model.certificateId());
        Assertions.assertEquals(97546857, model.refreshFrequencyMins());
        Assertions.assertEquals(true, model.allowModuleOverwrite());
    }
}
