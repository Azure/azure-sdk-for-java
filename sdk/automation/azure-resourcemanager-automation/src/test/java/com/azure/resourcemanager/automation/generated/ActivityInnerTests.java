// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.automation.fluent.models.ActivityInner;
import com.azure.resourcemanager.automation.models.ActivityOutputType;
import com.azure.resourcemanager.automation.models.ActivityParameter;
import com.azure.resourcemanager.automation.models.ActivityParameterSet;
import com.azure.resourcemanager.automation.models.ActivityParameterValidationSet;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class ActivityInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ActivityInner model = BinaryData.fromString(
            "{\"id\":\"jw\",\"name\":\"wqiok\",\"properties\":{\"definition\":\"xmojmsvpkjp\",\"parameterSets\":[{\"name\":\"cfzq\",\"parameters\":[{\"name\":\"gtczheydb\",\"type\":\"shmkxmaehvbbxur\",\"isMandatory\":true,\"isDynamic\":true,\"position\":3525559326756666639,\"valueFromPipeline\":false,\"valueFromPipelineByPropertyName\":false,\"valueFromRemainingArguments\":false,\"description\":\"wrck\",\"validationSet\":[{}]},{\"name\":\"yhpluodpvruudlgz\",\"type\":\"thost\",\"isMandatory\":true,\"isDynamic\":true,\"position\":4894493083378715479,\"valueFromPipeline\":true,\"valueFromPipelineByPropertyName\":true,\"valueFromRemainingArguments\":true,\"description\":\"bcvhzlhpl\",\"validationSet\":[{},{}]}]}],\"outputTypes\":[{\"name\":\"wwqfbumlkxtrqj\",\"type\":\"mlmbtxhwgfwsrta\"},{\"name\":\"oezbrhubsk\",\"type\":\"dyg\"},{\"name\":\"okkqfqjbvleo\",\"type\":\"ml\"},{\"name\":\"qtqzfavyv\",\"type\":\"qybaryeua\"}],\"creationTime\":\"2021-06-23T02:25:47Z\",\"lastModifiedTime\":\"2021-04-14T17:43:50Z\",\"description\":\"qgzsles\"}}")
            .toObject(ActivityInner.class);
        Assertions.assertEquals("jw", model.id());
        Assertions.assertEquals("xmojmsvpkjp", model.definition());
        Assertions.assertEquals("cfzq", model.parameterSets().get(0).name());
        Assertions.assertEquals("gtczheydb", model.parameterSets().get(0).parameters().get(0).name());
        Assertions.assertEquals("shmkxmaehvbbxur", model.parameterSets().get(0).parameters().get(0).type());
        Assertions.assertEquals(true, model.parameterSets().get(0).parameters().get(0).isMandatory());
        Assertions.assertEquals(true, model.parameterSets().get(0).parameters().get(0).isDynamic());
        Assertions.assertEquals(3525559326756666639L, model.parameterSets().get(0).parameters().get(0).position());
        Assertions.assertEquals(false, model.parameterSets().get(0).parameters().get(0).valueFromPipeline());
        Assertions.assertEquals(false,
            model.parameterSets().get(0).parameters().get(0).valueFromPipelineByPropertyName());
        Assertions.assertEquals(false, model.parameterSets().get(0).parameters().get(0).valueFromRemainingArguments());
        Assertions.assertEquals("wrck", model.parameterSets().get(0).parameters().get(0).description());
        Assertions.assertEquals("wwqfbumlkxtrqj", model.outputTypes().get(0).name());
        Assertions.assertEquals("mlmbtxhwgfwsrta", model.outputTypes().get(0).type());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-23T02:25:47Z"), model.creationTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-14T17:43:50Z"), model.lastModifiedTime());
        Assertions.assertEquals("qgzsles", model.description());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ActivityInner model = new ActivityInner().withId("jw")
            .withDefinition("xmojmsvpkjp")
            .withParameterSets(Arrays.asList(new ActivityParameterSet().withName("cfzq")
                .withParameters(Arrays.asList(
                    new ActivityParameter().withName("gtczheydb")
                        .withType("shmkxmaehvbbxur")
                        .withIsMandatory(true)
                        .withIsDynamic(true)
                        .withPosition(3525559326756666639L)
                        .withValueFromPipeline(false)
                        .withValueFromPipelineByPropertyName(false)
                        .withValueFromRemainingArguments(false)
                        .withDescription("wrck")
                        .withValidationSet(Arrays.asList(new ActivityParameterValidationSet())),
                    new ActivityParameter().withName("yhpluodpvruudlgz")
                        .withType("thost")
                        .withIsMandatory(true)
                        .withIsDynamic(true)
                        .withPosition(4894493083378715479L)
                        .withValueFromPipeline(true)
                        .withValueFromPipelineByPropertyName(true)
                        .withValueFromRemainingArguments(true)
                        .withDescription("bcvhzlhpl")
                        .withValidationSet(Arrays.asList(new ActivityParameterValidationSet(),
                            new ActivityParameterValidationSet()))))))
            .withOutputTypes(
                Arrays.asList(new ActivityOutputType().withName("wwqfbumlkxtrqj").withType("mlmbtxhwgfwsrta"),
                    new ActivityOutputType().withName("oezbrhubsk").withType("dyg"),
                    new ActivityOutputType().withName("okkqfqjbvleo").withType("ml"),
                    new ActivityOutputType().withName("qtqzfavyv").withType("qybaryeua")))
            .withCreationTime(OffsetDateTime.parse("2021-06-23T02:25:47Z"))
            .withLastModifiedTime(OffsetDateTime.parse("2021-04-14T17:43:50Z"))
            .withDescription("qgzsles");
        model = BinaryData.fromObject(model).toObject(ActivityInner.class);
        Assertions.assertEquals("jw", model.id());
        Assertions.assertEquals("xmojmsvpkjp", model.definition());
        Assertions.assertEquals("cfzq", model.parameterSets().get(0).name());
        Assertions.assertEquals("gtczheydb", model.parameterSets().get(0).parameters().get(0).name());
        Assertions.assertEquals("shmkxmaehvbbxur", model.parameterSets().get(0).parameters().get(0).type());
        Assertions.assertEquals(true, model.parameterSets().get(0).parameters().get(0).isMandatory());
        Assertions.assertEquals(true, model.parameterSets().get(0).parameters().get(0).isDynamic());
        Assertions.assertEquals(3525559326756666639L, model.parameterSets().get(0).parameters().get(0).position());
        Assertions.assertEquals(false, model.parameterSets().get(0).parameters().get(0).valueFromPipeline());
        Assertions.assertEquals(false,
            model.parameterSets().get(0).parameters().get(0).valueFromPipelineByPropertyName());
        Assertions.assertEquals(false, model.parameterSets().get(0).parameters().get(0).valueFromRemainingArguments());
        Assertions.assertEquals("wrck", model.parameterSets().get(0).parameters().get(0).description());
        Assertions.assertEquals("wwqfbumlkxtrqj", model.outputTypes().get(0).name());
        Assertions.assertEquals("mlmbtxhwgfwsrta", model.outputTypes().get(0).type());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-23T02:25:47Z"), model.creationTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-14T17:43:50Z"), model.lastModifiedTime());
        Assertions.assertEquals("qgzsles", model.description());
    }
}
