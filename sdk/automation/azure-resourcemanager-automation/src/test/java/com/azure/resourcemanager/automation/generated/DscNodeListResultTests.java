// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.automation.fluent.models.DscNodeInner;
import com.azure.resourcemanager.automation.models.DscNodeExtensionHandlerAssociationProperty;
import com.azure.resourcemanager.automation.models.DscNodeListResult;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class DscNodeListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DscNodeListResult model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"lastSeen\":\"2021-01-26T16:30:10Z\",\"registrationTime\":\"2021-08-04T14:06:38Z\",\"ip\":\"k\",\"accountId\":\"kdkexxp\",\"nodeConfiguration\":{\"name\":\"mxaxc\"},\"status\":\"pg\",\"nodeId\":\"toc\",\"etag\":\"xhvpmoue\",\"totalCount\":1945947631,\"extensionHandler\":[{\"name\":\"bqe\",\"version\":\"nxqbzvddn\"},{\"name\":\"ndei\",\"version\":\"twnpzaoqvuhrhcf\"},{\"name\":\"yd\",\"version\":\"lmjthjq\"}]},\"id\":\"wpyeicxmqciwqvh\",\"name\":\"hix\",\"type\":\"igdtopbob\"},{\"properties\":{\"lastSeen\":\"2020-12-30T18:35:34Z\",\"registrationTime\":\"2021-03-07T19:37:36Z\",\"ip\":\"u\",\"accountId\":\"a\",\"nodeConfiguration\":{\"name\":\"z\"},\"status\":\"vvtpgvdfgio\",\"nodeId\":\"ftutqxlngxlefgu\",\"etag\":\"xkrxdqmi\",\"totalCount\":676012519,\"extensionHandler\":[{\"name\":\"vqdra\",\"version\":\"jybige\"},{\"name\":\"qfbow\",\"version\":\"anyktzlcuiywg\"}]},\"id\":\"ywgndrv\",\"name\":\"nhzgpphrcgyn\",\"type\":\"ocpecfvmmco\"}],\"nextLink\":\"sxlzevgbmqj\",\"totalCount\":1593493877}")
            .toObject(DscNodeListResult.class);
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-26T16:30:10Z"), model.value().get(0).lastSeen());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-04T14:06:38Z"), model.value().get(0).registrationTime());
        Assertions.assertEquals("k", model.value().get(0).ip());
        Assertions.assertEquals("kdkexxp", model.value().get(0).accountId());
        Assertions.assertEquals("pg", model.value().get(0).status());
        Assertions.assertEquals("toc", model.value().get(0).nodeId());
        Assertions.assertEquals("xhvpmoue", model.value().get(0).etag());
        Assertions.assertEquals(1945947631, model.value().get(0).totalCount());
        Assertions.assertEquals("bqe", model.value().get(0).extensionHandler().get(0).name());
        Assertions.assertEquals("nxqbzvddn", model.value().get(0).extensionHandler().get(0).version());
        Assertions.assertEquals("mxaxc", model.value().get(0).namePropertiesName());
        Assertions.assertEquals("sxlzevgbmqj", model.nextLink());
        Assertions.assertEquals(1593493877, model.totalCount());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DscNodeListResult model
            = new DscNodeListResult().withValue(Arrays.asList(
                new DscNodeInner().withLastSeen(OffsetDateTime.parse("2021-01-26T16:30:10Z"))
                    .withRegistrationTime(OffsetDateTime.parse("2021-08-04T14:06:38Z"))
                    .withIp("k")
                    .withAccountId("kdkexxp")
                    .withStatus("pg")
                    .withNodeId("toc")
                    .withEtag("xhvpmoue")
                    .withTotalCount(1945947631)
                    .withExtensionHandler(Arrays.asList(
                        new DscNodeExtensionHandlerAssociationProperty().withName("bqe").withVersion("nxqbzvddn"),
                        new DscNodeExtensionHandlerAssociationProperty().withName("ndei")
                            .withVersion("twnpzaoqvuhrhcf"),
                        new DscNodeExtensionHandlerAssociationProperty().withName("yd").withVersion("lmjthjq")))
                    .withNamePropertiesName("mxaxc"),
                new DscNodeInner().withLastSeen(OffsetDateTime.parse("2020-12-30T18:35:34Z"))
                    .withRegistrationTime(OffsetDateTime.parse("2021-03-07T19:37:36Z"))
                    .withIp("u")
                    .withAccountId("a")
                    .withStatus("vvtpgvdfgio")
                    .withNodeId("ftutqxlngxlefgu")
                    .withEtag("xkrxdqmi")
                    .withTotalCount(676012519)
                    .withExtensionHandler(Arrays.asList(
                        new DscNodeExtensionHandlerAssociationProperty().withName("vqdra").withVersion("jybige"),
                        new DscNodeExtensionHandlerAssociationProperty().withName("qfbow")
                            .withVersion("anyktzlcuiywg")))
                    .withNamePropertiesName("z")))
                .withNextLink("sxlzevgbmqj")
                .withTotalCount(1593493877);
        model = BinaryData.fromObject(model).toObject(DscNodeListResult.class);
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-26T16:30:10Z"), model.value().get(0).lastSeen());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-04T14:06:38Z"), model.value().get(0).registrationTime());
        Assertions.assertEquals("k", model.value().get(0).ip());
        Assertions.assertEquals("kdkexxp", model.value().get(0).accountId());
        Assertions.assertEquals("pg", model.value().get(0).status());
        Assertions.assertEquals("toc", model.value().get(0).nodeId());
        Assertions.assertEquals("xhvpmoue", model.value().get(0).etag());
        Assertions.assertEquals(1945947631, model.value().get(0).totalCount());
        Assertions.assertEquals("bqe", model.value().get(0).extensionHandler().get(0).name());
        Assertions.assertEquals("nxqbzvddn", model.value().get(0).extensionHandler().get(0).version());
        Assertions.assertEquals("mxaxc", model.value().get(0).namePropertiesName());
        Assertions.assertEquals("sxlzevgbmqj", model.nextLink());
        Assertions.assertEquals(1593493877, model.totalCount());
    }
}
