// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.automation.models.SoftwareUpdateConfigurationTasks;
import com.azure.resourcemanager.automation.models.TaskProperties;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SoftwareUpdateConfigurationTasksTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SoftwareUpdateConfigurationTasks model = BinaryData.fromString(
            "{\"preTask\":{\"parameters\":{\"zz\":\"jmjsmwrokcdxf\"},\"source\":\"jafi\"},\"postTask\":{\"parameters\":{\"uchlgmltx\":\"uy\"},\"source\":\"hmoz\"}}")
            .toObject(SoftwareUpdateConfigurationTasks.class);
        Assertions.assertEquals("jmjsmwrokcdxf", model.preTask().parameters().get("zz"));
        Assertions.assertEquals("jafi", model.preTask().source());
        Assertions.assertEquals("uy", model.postTask().parameters().get("uchlgmltx"));
        Assertions.assertEquals("hmoz", model.postTask().source());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SoftwareUpdateConfigurationTasks model = new SoftwareUpdateConfigurationTasks()
            .withPreTask(new TaskProperties().withParameters(mapOf("zz", "jmjsmwrokcdxf")).withSource("jafi"))
            .withPostTask(new TaskProperties().withParameters(mapOf("uchlgmltx", "uy")).withSource("hmoz"));
        model = BinaryData.fromObject(model).toObject(SoftwareUpdateConfigurationTasks.class);
        Assertions.assertEquals("jmjsmwrokcdxf", model.preTask().parameters().get("zz"));
        Assertions.assertEquals("jafi", model.preTask().source());
        Assertions.assertEquals("uy", model.postTask().parameters().get("uchlgmltx"));
        Assertions.assertEquals("hmoz", model.postTask().source());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
