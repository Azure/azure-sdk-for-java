// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.automation.models.ActivityParameter;
import com.azure.resourcemanager.automation.models.ActivityParameterSet;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class ActivityParameterSetTests {
    @Test
    public void testDeserialize() {
        ActivityParameterSet model =
            BinaryData
                .fromString(
                    "{\"name\":\"bfjkw\",\"parameters\":[{\"name\":\"kqbh\",\"type\":\"rqunjq\",\"isMandatory\":false,\"isDynamic\":true,\"position\":7568821068199412929,\"valueFromPipeline\":true,\"valueFromPipelineByPropertyName\":false,\"valueFromRemainingArguments\":false,\"description\":\"fmjnnawtqa\",\"validationSet\":[]}]}")
                .toObject(ActivityParameterSet.class);
        Assertions.assertEquals("bfjkw", model.name());
        Assertions.assertEquals("kqbh", model.parameters().get(0).name());
        Assertions.assertEquals("rqunjq", model.parameters().get(0).type());
        Assertions.assertEquals(false, model.parameters().get(0).isMandatory());
        Assertions.assertEquals(true, model.parameters().get(0).isDynamic());
        Assertions.assertEquals(7568821068199412929L, model.parameters().get(0).position());
        Assertions.assertEquals(true, model.parameters().get(0).valueFromPipeline());
        Assertions.assertEquals(false, model.parameters().get(0).valueFromPipelineByPropertyName());
        Assertions.assertEquals(false, model.parameters().get(0).valueFromRemainingArguments());
        Assertions.assertEquals("fmjnnawtqa", model.parameters().get(0).description());
    }

    @Test
    public void testSerialize() {
        ActivityParameterSet model =
            new ActivityParameterSet()
                .withName("bfjkw")
                .withParameters(
                    Arrays
                        .asList(
                            new ActivityParameter()
                                .withName("kqbh")
                                .withType("rqunjq")
                                .withIsMandatory(false)
                                .withIsDynamic(true)
                                .withPosition(7568821068199412929L)
                                .withValueFromPipeline(true)
                                .withValueFromPipelineByPropertyName(false)
                                .withValueFromRemainingArguments(false)
                                .withDescription("fmjnnawtqa")
                                .withValidationSet(Arrays.asList())));
        model = BinaryData.fromObject(model).toObject(ActivityParameterSet.class);
        Assertions.assertEquals("bfjkw", model.name());
        Assertions.assertEquals("kqbh", model.parameters().get(0).name());
        Assertions.assertEquals("rqunjq", model.parameters().get(0).type());
        Assertions.assertEquals(false, model.parameters().get(0).isMandatory());
        Assertions.assertEquals(true, model.parameters().get(0).isDynamic());
        Assertions.assertEquals(7568821068199412929L, model.parameters().get(0).position());
        Assertions.assertEquals(true, model.parameters().get(0).valueFromPipeline());
        Assertions.assertEquals(false, model.parameters().get(0).valueFromPipelineByPropertyName());
        Assertions.assertEquals(false, model.parameters().get(0).valueFromRemainingArguments());
        Assertions.assertEquals("fmjnnawtqa", model.parameters().get(0).description());
    }
}
