// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.automation.fluent.models.JobProperties;
import com.azure.resourcemanager.automation.models.JobProvisioningState;
import com.azure.resourcemanager.automation.models.JobStatus;
import com.azure.resourcemanager.automation.models.RunbookAssociationProperty;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;
import org.junit.jupiter.api.Assertions;

public final class JobPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        JobProperties model = BinaryData.fromString(
            "{\"runbook\":{\"name\":\"ebwtswb\"},\"startedBy\":\"wfmdurage\",\"runOn\":\"zvcjfelisdjubggb\",\"jobId\":\"846af5ec-76bf-4eb9-aaf6-012d9e73f915\",\"creationTime\":\"2021-06-16T20:01:36Z\",\"status\":\"Stopping\",\"statusDetails\":\"sazgakgacyrcmj\",\"startTime\":\"2021-08-10T12:23:06Z\",\"endTime\":\"2021-01-21T21:08:17Z\",\"exception\":\"apvu\",\"lastModifiedTime\":\"2021-02-26T20:45:53Z\",\"lastStatusModifiedTime\":\"2021-03-18T05:33:07Z\",\"parameters\":{\"st\":\"frzgbzjed\",\"nsnvpd\":\"vnlvxbcuiiznktwf\"},\"provisioningState\":\"Failed\"}")
            .toObject(JobProperties.class);
        Assertions.assertEquals("ebwtswb", model.runbook().name());
        Assertions.assertEquals("wfmdurage", model.startedBy());
        Assertions.assertEquals("zvcjfelisdjubggb", model.runOn());
        Assertions.assertEquals(UUID.fromString("846af5ec-76bf-4eb9-aaf6-012d9e73f915"), model.jobId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-16T20:01:36Z"), model.creationTime());
        Assertions.assertEquals(JobStatus.STOPPING, model.status());
        Assertions.assertEquals("sazgakgacyrcmj", model.statusDetails());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-10T12:23:06Z"), model.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-21T21:08:17Z"), model.endTime());
        Assertions.assertEquals("apvu", model.exception());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-26T20:45:53Z"), model.lastModifiedTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-18T05:33:07Z"), model.lastStatusModifiedTime());
        Assertions.assertEquals("frzgbzjed", model.parameters().get("st"));
        Assertions.assertEquals(JobProvisioningState.FAILED, model.provisioningState());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        JobProperties model = new JobProperties().withRunbook(new RunbookAssociationProperty().withName("ebwtswb"))
            .withStartedBy("wfmdurage")
            .withRunOn("zvcjfelisdjubggb")
            .withJobId(UUID.fromString("846af5ec-76bf-4eb9-aaf6-012d9e73f915"))
            .withCreationTime(OffsetDateTime.parse("2021-06-16T20:01:36Z"))
            .withStatus(JobStatus.STOPPING)
            .withStatusDetails("sazgakgacyrcmj")
            .withStartTime(OffsetDateTime.parse("2021-08-10T12:23:06Z"))
            .withEndTime(OffsetDateTime.parse("2021-01-21T21:08:17Z"))
            .withException("apvu")
            .withLastModifiedTime(OffsetDateTime.parse("2021-02-26T20:45:53Z"))
            .withLastStatusModifiedTime(OffsetDateTime.parse("2021-03-18T05:33:07Z"))
            .withParameters(mapOf("st", "frzgbzjed", "nsnvpd", "vnlvxbcuiiznktwf"))
            .withProvisioningState(JobProvisioningState.FAILED);
        model = BinaryData.fromObject(model).toObject(JobProperties.class);
        Assertions.assertEquals("ebwtswb", model.runbook().name());
        Assertions.assertEquals("wfmdurage", model.startedBy());
        Assertions.assertEquals("zvcjfelisdjubggb", model.runOn());
        Assertions.assertEquals(UUID.fromString("846af5ec-76bf-4eb9-aaf6-012d9e73f915"), model.jobId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-16T20:01:36Z"), model.creationTime());
        Assertions.assertEquals(JobStatus.STOPPING, model.status());
        Assertions.assertEquals("sazgakgacyrcmj", model.statusDetails());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-10T12:23:06Z"), model.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-21T21:08:17Z"), model.endTime());
        Assertions.assertEquals("apvu", model.exception());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-26T20:45:53Z"), model.lastModifiedTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-18T05:33:07Z"), model.lastStatusModifiedTime());
        Assertions.assertEquals("frzgbzjed", model.parameters().get("st"));
        Assertions.assertEquals(JobProvisioningState.FAILED, model.provisioningState());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
