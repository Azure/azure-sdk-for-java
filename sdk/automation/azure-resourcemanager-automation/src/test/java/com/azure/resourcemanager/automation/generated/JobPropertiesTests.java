// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.automation.fluent.models.JobProperties;
import com.azure.resourcemanager.automation.models.JobProvisioningState;
import com.azure.resourcemanager.automation.models.JobStatus;
import com.azure.resourcemanager.automation.models.RunbookAssociationProperty;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class JobPropertiesTests {
    @Test
    public void testDeserialize() {
        JobProperties model =
            BinaryData
                .fromString(
                    "{\"runbook\":{\"name\":\"zejnhl\"},\"startedBy\":\"pbzpcpiljhahz\",\"runOn\":\"chndbnwie\",\"jobId\":\"23a8998e-260d-43ac-9eff-d046f8bb9aa0\",\"creationTime\":\"2021-06-15T06:42:17Z\",\"status\":\"Suspending\",\"statusDetails\":\"iuubwefqsf\",\"startTime\":\"2021-07-20T22:39:45Z\",\"endTime\":\"2021-07-28T10:18:32Z\",\"exception\":\"e\",\"lastModifiedTime\":\"2021-10-23T06:58:11Z\",\"lastStatusModifiedTime\":\"2021-05-25T15:13:52Z\",\"parameters\":{\"pjwogqqno\":\"kmfx\",\"dabtqwp\":\"pud\",\"ljgkyex\":\"yawbzasqbu\"},\"provisioningState\":\"Succeeded\"}")
                .toObject(JobProperties.class);
        Assertions.assertEquals("zejnhl", model.runbook().name());
        Assertions.assertEquals("pbzpcpiljhahz", model.startedBy());
        Assertions.assertEquals("chndbnwie", model.runOn());
        Assertions.assertEquals(UUID.fromString("23a8998e-260d-43ac-9eff-d046f8bb9aa0"), model.jobId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-15T06:42:17Z"), model.creationTime());
        Assertions.assertEquals(JobStatus.SUSPENDING, model.status());
        Assertions.assertEquals("iuubwefqsf", model.statusDetails());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-20T22:39:45Z"), model.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-28T10:18:32Z"), model.endTime());
        Assertions.assertEquals("e", model.exception());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-23T06:58:11Z"), model.lastModifiedTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-25T15:13:52Z"), model.lastStatusModifiedTime());
        Assertions.assertEquals("kmfx", model.parameters().get("pjwogqqno"));
        Assertions.assertEquals(JobProvisioningState.SUCCEEDED, model.provisioningState());
    }

    @Test
    public void testSerialize() {
        JobProperties model =
            new JobProperties()
                .withRunbook(new RunbookAssociationProperty().withName("zejnhl"))
                .withStartedBy("pbzpcpiljhahz")
                .withRunOn("chndbnwie")
                .withJobId(UUID.fromString("23a8998e-260d-43ac-9eff-d046f8bb9aa0"))
                .withCreationTime(OffsetDateTime.parse("2021-06-15T06:42:17Z"))
                .withStatus(JobStatus.SUSPENDING)
                .withStatusDetails("iuubwefqsf")
                .withStartTime(OffsetDateTime.parse("2021-07-20T22:39:45Z"))
                .withEndTime(OffsetDateTime.parse("2021-07-28T10:18:32Z"))
                .withException("e")
                .withLastModifiedTime(OffsetDateTime.parse("2021-10-23T06:58:11Z"))
                .withLastStatusModifiedTime(OffsetDateTime.parse("2021-05-25T15:13:52Z"))
                .withParameters(mapOf("pjwogqqno", "kmfx", "dabtqwp", "pud", "ljgkyex", "yawbzasqbu"))
                .withProvisioningState(JobProvisioningState.SUCCEEDED);
        model = BinaryData.fromObject(model).toObject(JobProperties.class);
        Assertions.assertEquals("zejnhl", model.runbook().name());
        Assertions.assertEquals("pbzpcpiljhahz", model.startedBy());
        Assertions.assertEquals("chndbnwie", model.runOn());
        Assertions.assertEquals(UUID.fromString("23a8998e-260d-43ac-9eff-d046f8bb9aa0"), model.jobId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-15T06:42:17Z"), model.creationTime());
        Assertions.assertEquals(JobStatus.SUSPENDING, model.status());
        Assertions.assertEquals("iuubwefqsf", model.statusDetails());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-20T22:39:45Z"), model.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-28T10:18:32Z"), model.endTime());
        Assertions.assertEquals("e", model.exception());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-23T06:58:11Z"), model.lastModifiedTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-25T15:13:52Z"), model.lastStatusModifiedTime());
        Assertions.assertEquals("kmfx", model.parameters().get("pjwogqqno"));
        Assertions.assertEquals(JobProvisioningState.SUCCEEDED, model.provisioningState());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
