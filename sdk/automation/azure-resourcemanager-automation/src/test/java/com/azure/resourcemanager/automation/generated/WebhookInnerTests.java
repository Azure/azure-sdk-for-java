// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.automation.fluent.models.WebhookInner;
import com.azure.resourcemanager.automation.models.RunbookAssociationProperty;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class WebhookInnerTests {
    @Test
    public void testDeserialize() {
        WebhookInner model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"isEnabled\":true,\"uri\":\"aojkniodk\",\"expiryTime\":\"2021-02-17T23:39:08Z\",\"lastInvokedTime\":\"2021-10-14T05:21:41Z\",\"parameters\":{\"vdkcrodtj\":\"jhemms\",\"lfoakg\":\"nfwjlfltkacjvefk\",\"pulpqblylsyxk\":\"kfpagao\",\"zuempsbzkf\":\"jnsjervtiagxsd\"},\"runbook\":{\"name\":\"yvpnqicvinvkjj\"},\"runOn\":\"xrbuukzclew\",\"creationTime\":\"2021-08-28T04:23:49Z\",\"lastModifiedTime\":\"2021-06-13T09:01:21Z\",\"lastModifiedBy\":\"aztz\",\"description\":\"fn\"},\"id\":\"ckw\",\"name\":\"fz\",\"type\":\"whxxbuyqax\"}")
                .toObject(WebhookInner.class);
        Assertions.assertEquals(true, model.isEnabled());
        Assertions.assertEquals("aojkniodk", model.uri());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-17T23:39:08Z"), model.expiryTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-14T05:21:41Z"), model.lastInvokedTime());
        Assertions.assertEquals("jhemms", model.parameters().get("vdkcrodtj"));
        Assertions.assertEquals("yvpnqicvinvkjj", model.runbook().name());
        Assertions.assertEquals("xrbuukzclew", model.runOn());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-28T04:23:49Z"), model.creationTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-13T09:01:21Z"), model.lastModifiedTime());
        Assertions.assertEquals("aztz", model.lastModifiedBy());
        Assertions.assertEquals("fn", model.description());
    }

    @Test
    public void testSerialize() {
        WebhookInner model =
            new WebhookInner()
                .withIsEnabled(true)
                .withUri("aojkniodk")
                .withExpiryTime(OffsetDateTime.parse("2021-02-17T23:39:08Z"))
                .withLastInvokedTime(OffsetDateTime.parse("2021-10-14T05:21:41Z"))
                .withParameters(
                    mapOf(
                        "vdkcrodtj",
                        "jhemms",
                        "lfoakg",
                        "nfwjlfltkacjvefk",
                        "pulpqblylsyxk",
                        "kfpagao",
                        "zuempsbzkf",
                        "jnsjervtiagxsd"))
                .withRunbook(new RunbookAssociationProperty().withName("yvpnqicvinvkjj"))
                .withRunOn("xrbuukzclew")
                .withCreationTime(OffsetDateTime.parse("2021-08-28T04:23:49Z"))
                .withLastModifiedTime(OffsetDateTime.parse("2021-06-13T09:01:21Z"))
                .withLastModifiedBy("aztz")
                .withDescription("fn");
        model = BinaryData.fromObject(model).toObject(WebhookInner.class);
        Assertions.assertEquals(true, model.isEnabled());
        Assertions.assertEquals("aojkniodk", model.uri());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-17T23:39:08Z"), model.expiryTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-14T05:21:41Z"), model.lastInvokedTime());
        Assertions.assertEquals("jhemms", model.parameters().get("vdkcrodtj"));
        Assertions.assertEquals("yvpnqicvinvkjj", model.runbook().name());
        Assertions.assertEquals("xrbuukzclew", model.runOn());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-28T04:23:49Z"), model.creationTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-13T09:01:21Z"), model.lastModifiedTime());
        Assertions.assertEquals("aztz", model.lastModifiedBy());
        Assertions.assertEquals("fn", model.description());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
