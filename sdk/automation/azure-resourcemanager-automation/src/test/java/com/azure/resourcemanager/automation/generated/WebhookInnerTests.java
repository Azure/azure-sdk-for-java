// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.automation.fluent.models.WebhookInner;
import com.azure.resourcemanager.automation.models.RunbookAssociationProperty;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class WebhookInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        WebhookInner model = BinaryData.fromString(
            "{\"properties\":{\"isEnabled\":false,\"uri\":\"izhceumoqodkadp\",\"expiryTime\":\"2021-01-08T20:54:38Z\",\"lastInvokedTime\":\"2021-06-24T06:19:09Z\",\"parameters\":{\"luvvad\":\"ladywrxwhyd\",\"mlowuowhl\":\"wzsnuy\",\"mouvbl\":\"lnwy\",\"zkltrfowtdvrfmv\":\"mo\"},\"runbook\":{\"name\":\"cvjdrqcrjidhft\"},\"runOn\":\"vhdxlwyo\",\"creationTime\":\"2021-01-18T12:02:21Z\",\"lastModifiedTime\":\"2020-12-27T03:18:28Z\",\"lastModifiedBy\":\"kfnjyixhafrat\",\"description\":\"mbjrou\"},\"id\":\"zznval\",\"name\":\"jrhuzgf\",\"type\":\"on\"}")
            .toObject(WebhookInner.class);
        Assertions.assertEquals(false, model.isEnabled());
        Assertions.assertEquals("izhceumoqodkadp", model.uri());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-08T20:54:38Z"), model.expiryTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-24T06:19:09Z"), model.lastInvokedTime());
        Assertions.assertEquals("ladywrxwhyd", model.parameters().get("luvvad"));
        Assertions.assertEquals("cvjdrqcrjidhft", model.runbook().name());
        Assertions.assertEquals("vhdxlwyo", model.runOn());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-18T12:02:21Z"), model.creationTime());
        Assertions.assertEquals(OffsetDateTime.parse("2020-12-27T03:18:28Z"), model.lastModifiedTime());
        Assertions.assertEquals("kfnjyixhafrat", model.lastModifiedBy());
        Assertions.assertEquals("mbjrou", model.description());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        WebhookInner model = new WebhookInner().withIsEnabled(false)
            .withUri("izhceumoqodkadp")
            .withExpiryTime(OffsetDateTime.parse("2021-01-08T20:54:38Z"))
            .withLastInvokedTime(OffsetDateTime.parse("2021-06-24T06:19:09Z"))
            .withParameters(
                mapOf("luvvad", "ladywrxwhyd", "mlowuowhl", "wzsnuy", "mouvbl", "lnwy", "zkltrfowtdvrfmv", "mo"))
            .withRunbook(new RunbookAssociationProperty().withName("cvjdrqcrjidhft"))
            .withRunOn("vhdxlwyo")
            .withCreationTime(OffsetDateTime.parse("2021-01-18T12:02:21Z"))
            .withLastModifiedTime(OffsetDateTime.parse("2020-12-27T03:18:28Z"))
            .withLastModifiedBy("kfnjyixhafrat")
            .withDescription("mbjrou");
        model = BinaryData.fromObject(model).toObject(WebhookInner.class);
        Assertions.assertEquals(false, model.isEnabled());
        Assertions.assertEquals("izhceumoqodkadp", model.uri());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-08T20:54:38Z"), model.expiryTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-24T06:19:09Z"), model.lastInvokedTime());
        Assertions.assertEquals("ladywrxwhyd", model.parameters().get("luvvad"));
        Assertions.assertEquals("cvjdrqcrjidhft", model.runbook().name());
        Assertions.assertEquals("vhdxlwyo", model.runOn());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-18T12:02:21Z"), model.creationTime());
        Assertions.assertEquals(OffsetDateTime.parse("2020-12-27T03:18:28Z"), model.lastModifiedTime());
        Assertions.assertEquals("kfnjyixhafrat", model.lastModifiedBy());
        Assertions.assertEquals("mbjrou", model.description());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
