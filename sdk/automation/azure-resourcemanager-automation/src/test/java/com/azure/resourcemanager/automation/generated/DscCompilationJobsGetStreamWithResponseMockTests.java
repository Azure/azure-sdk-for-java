// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.automation.AutomationManager;
import com.azure.resourcemanager.automation.models.JobStream;
import com.azure.resourcemanager.automation.models.JobStreamType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.UUID;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class DscCompilationJobsGetStreamWithResponseMockTests {
    @Test
    public void testGetStreamWithResponse() throws Exception {
        String responseStr
            = "{\"id\":\"gkrehbf\",\"properties\":{\"jobStreamId\":\"ybff\",\"time\":\"2020-12-23T02:51:33Z\",\"streamType\":\"Warning\",\"streamText\":\"reoagsqtaadus\",\"summary\":\"xxfavsqwudohzilf\",\"value\":{\"pmbhyqgs\":\"dataikpsimsfeypof\"}}}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AutomationManager manager = AutomationManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        JobStream response = manager.dscCompilationJobs()
            .getStreamWithResponse("dveksbuhoduch", "lscrdpibfdyjduss",
                UUID.fromString("8dc54ea5-549d-49fa-a301-d42605c4a3a6"), "yszekbhwlka",
                com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("gkrehbf", response.id());
        Assertions.assertEquals("ybff", response.jobStreamId());
        Assertions.assertEquals(OffsetDateTime.parse("2020-12-23T02:51:33Z"), response.time());
        Assertions.assertEquals(JobStreamType.WARNING, response.streamType());
        Assertions.assertEquals("reoagsqtaadus", response.streamText());
        Assertions.assertEquals("xxfavsqwudohzilf", response.summary());
    }
}
