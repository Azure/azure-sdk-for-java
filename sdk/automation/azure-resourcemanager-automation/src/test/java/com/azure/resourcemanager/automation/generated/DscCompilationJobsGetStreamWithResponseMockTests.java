// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.util.Context;
import com.azure.resourcemanager.automation.AutomationManager;
import com.azure.resourcemanager.automation.models.JobStream;
import com.azure.resourcemanager.automation.models.JobStreamType;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.UUID;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class DscCompilationJobsGetStreamWithResponseMockTests {
    @Test
    public void testGetStreamWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"id\":\"iqswbqer\",\"properties\":{\"jobStreamId\":\"iytxt\",\"time\":\"2021-01-19T22:51:20Z\",\"streamType\":\"Progress\",\"streamText\":\"bpktgd\",\"summary\":\"youambewr\",\"value\":{}}}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        AutomationManager manager =
            AutomationManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        JobStream response =
            manager
                .dscCompilationJobs()
                .getStreamWithResponse(
                    "lidftujwjj",
                    "fwbeqrkuorh",
                    UUID.fromString("3428accd-b1ee-4079-aa4b-f54c122ba72c"),
                    "ssruqnmdvhazcvj",
                    Context.NONE)
                .getValue();

        Assertions.assertEquals("iqswbqer", response.id());
        Assertions.assertEquals("iytxt", response.jobStreamId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-19T22:51:20Z"), response.time());
        Assertions.assertEquals(JobStreamType.PROGRESS, response.streamType());
        Assertions.assertEquals("bpktgd", response.streamText());
        Assertions.assertEquals("youambewr", response.summary());
    }
}
