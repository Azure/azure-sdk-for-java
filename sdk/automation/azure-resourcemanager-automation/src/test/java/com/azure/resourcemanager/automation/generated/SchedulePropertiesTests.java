// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.automation.fluent.models.ScheduleProperties;
import com.azure.resourcemanager.automation.models.AdvancedSchedule;
import com.azure.resourcemanager.automation.models.AdvancedScheduleMonthlyOccurrence;
import com.azure.resourcemanager.automation.models.ScheduleDay;
import com.azure.resourcemanager.automation.models.ScheduleFrequency;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class SchedulePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ScheduleProperties model = BinaryData.fromString(
            "{\"startTime\":\"2021-01-10T04:16:53Z\",\"startTimeOffsetMinutes\":48.09959007530157,\"expiryTime\":\"2021-06-09T04:39:41Z\",\"expiryTimeOffsetMinutes\":28.302882049529167,\"isEnabled\":true,\"nextRun\":\"2021-08-07T02:58:02Z\",\"nextRunOffsetMinutes\":76.22923316177925,\"interval\":\"databtkadpysownbtgkb\",\"frequency\":\"Hour\",\"timeZone\":\"qctojcmisof\",\"advancedSchedule\":{\"weekDays\":[\"efojyqdhcupl\"],\"monthDays\":[1808801771,1554312221,542062164],\"monthlyOccurrences\":[{\"occurrence\":673104631,\"day\":\"Monday\"}]},\"creationTime\":\"2021-05-07T17:19:51Z\",\"lastModifiedTime\":\"2020-12-21T12:31:23Z\",\"description\":\"tzbsrgnowcjhf\"}")
            .toObject(ScheduleProperties.class);
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-10T04:16:53Z"), model.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-09T04:39:41Z"), model.expiryTime());
        Assertions.assertEquals(28.302882049529167D, model.expiryTimeOffsetMinutes());
        Assertions.assertEquals(true, model.isEnabled());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-07T02:58:02Z"), model.nextRun());
        Assertions.assertEquals(76.22923316177925D, model.nextRunOffsetMinutes());
        Assertions.assertEquals(ScheduleFrequency.HOUR, model.frequency());
        Assertions.assertEquals("qctojcmisof", model.timeZone());
        Assertions.assertEquals("efojyqdhcupl", model.advancedSchedule().weekDays().get(0));
        Assertions.assertEquals(1808801771, model.advancedSchedule().monthDays().get(0));
        Assertions.assertEquals(673104631, model.advancedSchedule().monthlyOccurrences().get(0).occurrence());
        Assertions.assertEquals(ScheduleDay.MONDAY, model.advancedSchedule().monthlyOccurrences().get(0).day());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-07T17:19:51Z"), model.creationTime());
        Assertions.assertEquals(OffsetDateTime.parse("2020-12-21T12:31:23Z"), model.lastModifiedTime());
        Assertions.assertEquals("tzbsrgnowcjhf", model.description());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ScheduleProperties model = new ScheduleProperties().withStartTime(OffsetDateTime.parse("2021-01-10T04:16:53Z"))
            .withExpiryTime(OffsetDateTime.parse("2021-06-09T04:39:41Z"))
            .withExpiryTimeOffsetMinutes(28.302882049529167D)
            .withIsEnabled(true)
            .withNextRun(OffsetDateTime.parse("2021-08-07T02:58:02Z"))
            .withNextRunOffsetMinutes(76.22923316177925D)
            .withInterval("databtkadpysownbtgkb")
            .withFrequency(ScheduleFrequency.HOUR)
            .withTimeZone("qctojcmisof")
            .withAdvancedSchedule(new AdvancedSchedule().withWeekDays(Arrays.asList("efojyqdhcupl"))
                .withMonthDays(Arrays.asList(1808801771, 1554312221, 542062164))
                .withMonthlyOccurrences(Arrays.asList(
                    new AdvancedScheduleMonthlyOccurrence().withOccurrence(673104631).withDay(ScheduleDay.MONDAY))))
            .withCreationTime(OffsetDateTime.parse("2021-05-07T17:19:51Z"))
            .withLastModifiedTime(OffsetDateTime.parse("2020-12-21T12:31:23Z"))
            .withDescription("tzbsrgnowcjhf");
        model = BinaryData.fromObject(model).toObject(ScheduleProperties.class);
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-10T04:16:53Z"), model.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-09T04:39:41Z"), model.expiryTime());
        Assertions.assertEquals(28.302882049529167D, model.expiryTimeOffsetMinutes());
        Assertions.assertEquals(true, model.isEnabled());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-07T02:58:02Z"), model.nextRun());
        Assertions.assertEquals(76.22923316177925D, model.nextRunOffsetMinutes());
        Assertions.assertEquals(ScheduleFrequency.HOUR, model.frequency());
        Assertions.assertEquals("qctojcmisof", model.timeZone());
        Assertions.assertEquals("efojyqdhcupl", model.advancedSchedule().weekDays().get(0));
        Assertions.assertEquals(1808801771, model.advancedSchedule().monthDays().get(0));
        Assertions.assertEquals(673104631, model.advancedSchedule().monthlyOccurrences().get(0).occurrence());
        Assertions.assertEquals(ScheduleDay.MONDAY, model.advancedSchedule().monthlyOccurrences().get(0).day());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-07T17:19:51Z"), model.creationTime());
        Assertions.assertEquals(OffsetDateTime.parse("2020-12-21T12:31:23Z"), model.lastModifiedTime());
        Assertions.assertEquals("tzbsrgnowcjhf", model.description());
    }
}
