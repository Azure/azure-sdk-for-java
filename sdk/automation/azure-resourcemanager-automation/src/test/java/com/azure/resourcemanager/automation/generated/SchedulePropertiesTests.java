// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.automation.fluent.models.ScheduleProperties;
import com.azure.resourcemanager.automation.models.AdvancedSchedule;
import com.azure.resourcemanager.automation.models.AdvancedScheduleMonthlyOccurrence;
import com.azure.resourcemanager.automation.models.ScheduleDay;
import com.azure.resourcemanager.automation.models.ScheduleFrequency;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class SchedulePropertiesTests {
    @Test
    public void testDeserialize() {
        ScheduleProperties model =
            BinaryData
                .fromString(
                    "{\"startTime\":\"2020-12-23T03:06:14Z\",\"startTimeOffsetMinutes\":63.92607557895262,\"expiryTime\":\"2020-12-24T04:47:07Z\",\"expiryTimeOffsetMinutes\":98.92498571696532,\"isEnabled\":false,\"nextRun\":\"2021-01-27T04:25:37Z\",\"nextRunOffsetMinutes\":53.86895269798353,\"frequency\":\"OneTime\",\"timeZone\":\"ei\",\"advancedSchedule\":{\"weekDays\":[\"mgomg\",\"amljdlrgmsplzgau\",\"cshhv\"],\"monthDays\":[510025017,1143292633,1018837274,1695764846],\"monthlyOccurrences\":[{\"occurrence\":170152558,\"day\":\"Saturday\"},{\"occurrence\":1767773898,\"day\":\"Sunday\"},{\"occurrence\":1472510277,\"day\":\"Thursday\"},{\"occurrence\":1323012266,\"day\":\"Friday\"}]},\"creationTime\":\"2021-01-08T15:47:12Z\",\"lastModifiedTime\":\"2021-03-10T10:02:03Z\",\"description\":\"hshxcylhkgmnsghp\"}")
                .toObject(ScheduleProperties.class);
        Assertions.assertEquals(OffsetDateTime.parse("2020-12-23T03:06:14Z"), model.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2020-12-24T04:47:07Z"), model.expiryTime());
        Assertions.assertEquals(98.92498571696532D, model.expiryTimeOffsetMinutes());
        Assertions.assertEquals(false, model.isEnabled());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-27T04:25:37Z"), model.nextRun());
        Assertions.assertEquals(53.86895269798353D, model.nextRunOffsetMinutes());
        Assertions.assertEquals(ScheduleFrequency.ONE_TIME, model.frequency());
        Assertions.assertEquals("ei", model.timeZone());
        Assertions.assertEquals("mgomg", model.advancedSchedule().weekDays().get(0));
        Assertions.assertEquals(510025017, model.advancedSchedule().monthDays().get(0));
        Assertions.assertEquals(170152558, model.advancedSchedule().monthlyOccurrences().get(0).occurrence());
        Assertions.assertEquals(ScheduleDay.SATURDAY, model.advancedSchedule().monthlyOccurrences().get(0).day());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-08T15:47:12Z"), model.creationTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-10T10:02:03Z"), model.lastModifiedTime());
        Assertions.assertEquals("hshxcylhkgmnsghp", model.description());
    }

    @Test
    public void testSerialize() {
        ScheduleProperties model =
            new ScheduleProperties()
                .withStartTime(OffsetDateTime.parse("2020-12-23T03:06:14Z"))
                .withExpiryTime(OffsetDateTime.parse("2020-12-24T04:47:07Z"))
                .withExpiryTimeOffsetMinutes(98.92498571696532D)
                .withIsEnabled(false)
                .withNextRun(OffsetDateTime.parse("2021-01-27T04:25:37Z"))
                .withNextRunOffsetMinutes(53.86895269798353D)
                .withFrequency(ScheduleFrequency.ONE_TIME)
                .withTimeZone("ei")
                .withAdvancedSchedule(
                    new AdvancedSchedule()
                        .withWeekDays(Arrays.asList("mgomg", "amljdlrgmsplzgau", "cshhv"))
                        .withMonthDays(Arrays.asList(510025017, 1143292633, 1018837274, 1695764846))
                        .withMonthlyOccurrences(
                            Arrays
                                .asList(
                                    new AdvancedScheduleMonthlyOccurrence()
                                        .withOccurrence(170152558)
                                        .withDay(ScheduleDay.SATURDAY),
                                    new AdvancedScheduleMonthlyOccurrence()
                                        .withOccurrence(1767773898)
                                        .withDay(ScheduleDay.SUNDAY),
                                    new AdvancedScheduleMonthlyOccurrence()
                                        .withOccurrence(1472510277)
                                        .withDay(ScheduleDay.THURSDAY),
                                    new AdvancedScheduleMonthlyOccurrence()
                                        .withOccurrence(1323012266)
                                        .withDay(ScheduleDay.FRIDAY))))
                .withCreationTime(OffsetDateTime.parse("2021-01-08T15:47:12Z"))
                .withLastModifiedTime(OffsetDateTime.parse("2021-03-10T10:02:03Z"))
                .withDescription("hshxcylhkgmnsghp");
        model = BinaryData.fromObject(model).toObject(ScheduleProperties.class);
        Assertions.assertEquals(OffsetDateTime.parse("2020-12-23T03:06:14Z"), model.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2020-12-24T04:47:07Z"), model.expiryTime());
        Assertions.assertEquals(98.92498571696532D, model.expiryTimeOffsetMinutes());
        Assertions.assertEquals(false, model.isEnabled());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-27T04:25:37Z"), model.nextRun());
        Assertions.assertEquals(53.86895269798353D, model.nextRunOffsetMinutes());
        Assertions.assertEquals(ScheduleFrequency.ONE_TIME, model.frequency());
        Assertions.assertEquals("ei", model.timeZone());
        Assertions.assertEquals("mgomg", model.advancedSchedule().weekDays().get(0));
        Assertions.assertEquals(510025017, model.advancedSchedule().monthDays().get(0));
        Assertions.assertEquals(170152558, model.advancedSchedule().monthlyOccurrences().get(0).occurrence());
        Assertions.assertEquals(ScheduleDay.SATURDAY, model.advancedSchedule().monthlyOccurrences().get(0).day());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-08T15:47:12Z"), model.creationTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-10T10:02:03Z"), model.lastModifiedTime());
        Assertions.assertEquals("hshxcylhkgmnsghp", model.description());
    }
}
