// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.automation.fluent.models.JobCreateProperties;
import com.azure.resourcemanager.automation.models.RunbookAssociationProperty;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class JobCreatePropertiesTests {
    @Test
    public void testDeserialize() {
        JobCreateProperties model =
            BinaryData
                .fromString(
                    "{\"runbook\":{\"name\":\"wgnyfusfzsvtui\"},\"parameters\":{\"mlrqryxynqnz\":\"ajqglcf\",\"iyb\":\"dpsovwxznptgo\",\"kvntjlrigjkskyri\":\"abpfhvfs\"},\"runOn\":\"vzidsxwaab\"}")
                .toObject(JobCreateProperties.class);
        Assertions.assertEquals("wgnyfusfzsvtui", model.runbook().name());
        Assertions.assertEquals("ajqglcf", model.parameters().get("mlrqryxynqnz"));
        Assertions.assertEquals("vzidsxwaab", model.runOn());
    }

    @Test
    public void testSerialize() {
        JobCreateProperties model =
            new JobCreateProperties()
                .withRunbook(new RunbookAssociationProperty().withName("wgnyfusfzsvtui"))
                .withParameters(
                    mapOf("mlrqryxynqnz", "ajqglcf", "iyb", "dpsovwxznptgo", "kvntjlrigjkskyri", "abpfhvfs"))
                .withRunOn("vzidsxwaab");
        model = BinaryData.fromObject(model).toObject(JobCreateProperties.class);
        Assertions.assertEquals("wgnyfusfzsvtui", model.runbook().name());
        Assertions.assertEquals("ajqglcf", model.parameters().get("mlrqryxynqnz"));
        Assertions.assertEquals("vzidsxwaab", model.runOn());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
