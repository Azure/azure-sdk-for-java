// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.automation.fluent.models.RunbookDraftInner;
import com.azure.resourcemanager.automation.fluent.models.RunbookPropertiesInner;
import com.azure.resourcemanager.automation.models.ContentHash;
import com.azure.resourcemanager.automation.models.ContentLink;
import com.azure.resourcemanager.automation.models.RunbookParameter;
import com.azure.resourcemanager.automation.models.RunbookProvisioningState;
import com.azure.resourcemanager.automation.models.RunbookState;
import com.azure.resourcemanager.automation.models.RunbookTypeEnum;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class RunbookPropertiesInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        RunbookPropertiesInner model = BinaryData.fromString(
            "{\"runbookType\":\"GraphPowerShell\",\"publishContentLink\":{\"uri\":\"angpszngafpgyl\",\"contentHash\":{\"algorithm\":\"ecjujcng\",\"value\":\"adyedmzrgjfok\"},\"version\":\"bnoit\"},\"state\":\"New\",\"logVerbose\":false,\"logProgress\":true,\"logActivityTrace\":382465235,\"jobCount\":1781830307,\"parameters\":{\"yltcoqcuj\":{\"type\":\"raswugyxpqit\",\"isMandatory\":false,\"position\":248802373,\"defaultValue\":\"vskbuhzacaq\"},\"bemyeji\":{\"type\":\"sxzakuejkm\",\"isMandatory\":false,\"position\":562988971,\"defaultValue\":\"ofqcvovjufycsjm\"},\"ialwc\":{\"type\":\"uxegthortudawlpj\",\"isMandatory\":true,\"position\":1302185073,\"defaultValue\":\"pptcbgqnzmnhii\"},\"tipwcxbyubhiqd\":{\"type\":\"ckbbcc\",\"isMandatory\":false,\"position\":183837166,\"defaultValue\":\"oxnyuffatsg\"}},\"outputTypes\":[\"rnpnuhzafccnuh\",\"i\",\"byl\",\"ui\"],\"draft\":{\"inEdit\":false,\"draftContentLink\":{\"uri\":\"vcrk\",\"contentHash\":{\"algorithm\":\"b\",\"value\":\"bqxvhcsyhzlwxae\"},\"version\":\"vurex\"},\"creationTime\":\"2021-04-19T23:39:17Z\",\"lastModifiedTime\":\"2021-04-16T08:33:08Z\",\"parameters\":{\"jiuazjc\":{\"type\":\"aderzmw\",\"isMandatory\":true,\"position\":1329621883,\"defaultValue\":\"ttmvmmagoaqylkjz\"},\"mtbdrvcqgu\":{\"type\":\"xitp\",\"isMandatory\":true,\"position\":242842574,\"defaultValue\":\"dltkrlg\"}},\"outputTypes\":[\"hompheqdurelyu\",\"lf\"]},\"provisioningState\":\"Succeeded\",\"lastModifiedBy\":\"pckyec\",\"creationTime\":\"2021-11-20T13:51:48Z\",\"lastModifiedTime\":\"2021-06-25T22:21Z\",\"description\":\"tajbrz\"}")
            .toObject(RunbookPropertiesInner.class);
        Assertions.assertEquals(RunbookTypeEnum.GRAPH_POWER_SHELL, model.runbookType());
        Assertions.assertEquals("angpszngafpgyl", model.publishContentLink().uri());
        Assertions.assertEquals("ecjujcng", model.publishContentLink().contentHash().algorithm());
        Assertions.assertEquals("adyedmzrgjfok", model.publishContentLink().contentHash().value());
        Assertions.assertEquals("bnoit", model.publishContentLink().version());
        Assertions.assertEquals(RunbookState.NEW, model.state());
        Assertions.assertEquals(false, model.logVerbose());
        Assertions.assertEquals(true, model.logProgress());
        Assertions.assertEquals(382465235, model.logActivityTrace());
        Assertions.assertEquals(1781830307, model.jobCount());
        Assertions.assertEquals("raswugyxpqit", model.parameters().get("yltcoqcuj").type());
        Assertions.assertEquals(false, model.parameters().get("yltcoqcuj").isMandatory());
        Assertions.assertEquals(248802373, model.parameters().get("yltcoqcuj").position());
        Assertions.assertEquals("vskbuhzacaq", model.parameters().get("yltcoqcuj").defaultValue());
        Assertions.assertEquals("rnpnuhzafccnuh", model.outputTypes().get(0));
        Assertions.assertEquals(false, model.draft().inEdit());
        Assertions.assertEquals("vcrk", model.draft().draftContentLink().uri());
        Assertions.assertEquals("b", model.draft().draftContentLink().contentHash().algorithm());
        Assertions.assertEquals("bqxvhcsyhzlwxae", model.draft().draftContentLink().contentHash().value());
        Assertions.assertEquals("vurex", model.draft().draftContentLink().version());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-19T23:39:17Z"), model.draft().creationTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-16T08:33:08Z"), model.draft().lastModifiedTime());
        Assertions.assertEquals("aderzmw", model.draft().parameters().get("jiuazjc").type());
        Assertions.assertEquals(true, model.draft().parameters().get("jiuazjc").isMandatory());
        Assertions.assertEquals(1329621883, model.draft().parameters().get("jiuazjc").position());
        Assertions.assertEquals("ttmvmmagoaqylkjz", model.draft().parameters().get("jiuazjc").defaultValue());
        Assertions.assertEquals("hompheqdurelyu", model.draft().outputTypes().get(0));
        Assertions.assertEquals(RunbookProvisioningState.SUCCEEDED, model.provisioningState());
        Assertions.assertEquals("pckyec", model.lastModifiedBy());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-20T13:51:48Z"), model.creationTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-25T22:21Z"), model.lastModifiedTime());
        Assertions.assertEquals("tajbrz", model.description());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        RunbookPropertiesInner model = new RunbookPropertiesInner().withRunbookType(RunbookTypeEnum.GRAPH_POWER_SHELL)
            .withPublishContentLink(new ContentLink().withUri("angpszngafpgyl")
                .withContentHash(new ContentHash().withAlgorithm("ecjujcng").withValue("adyedmzrgjfok"))
                .withVersion("bnoit"))
            .withState(RunbookState.NEW)
            .withLogVerbose(false)
            .withLogProgress(true)
            .withLogActivityTrace(382465235)
            .withJobCount(1781830307)
            .withParameters(mapOf("yltcoqcuj",
                new RunbookParameter().withType("raswugyxpqit")
                    .withIsMandatory(false)
                    .withPosition(248802373)
                    .withDefaultValue("vskbuhzacaq"),
                "bemyeji",
                new RunbookParameter().withType("sxzakuejkm")
                    .withIsMandatory(false)
                    .withPosition(562988971)
                    .withDefaultValue("ofqcvovjufycsjm"),
                "ialwc",
                new RunbookParameter().withType("uxegthortudawlpj")
                    .withIsMandatory(true)
                    .withPosition(1302185073)
                    .withDefaultValue("pptcbgqnzmnhii"),
                "tipwcxbyubhiqd",
                new RunbookParameter().withType("ckbbcc")
                    .withIsMandatory(false)
                    .withPosition(183837166)
                    .withDefaultValue("oxnyuffatsg")))
            .withOutputTypes(Arrays.asList("rnpnuhzafccnuh", "i", "byl", "ui"))
            .withDraft(new RunbookDraftInner().withInEdit(false)
                .withDraftContentLink(new ContentLink().withUri("vcrk")
                    .withContentHash(new ContentHash().withAlgorithm("b").withValue("bqxvhcsyhzlwxae"))
                    .withVersion("vurex"))
                .withCreationTime(OffsetDateTime.parse("2021-04-19T23:39:17Z"))
                .withLastModifiedTime(OffsetDateTime.parse("2021-04-16T08:33:08Z"))
                .withParameters(mapOf("jiuazjc",
                    new RunbookParameter().withType("aderzmw")
                        .withIsMandatory(true)
                        .withPosition(1329621883)
                        .withDefaultValue("ttmvmmagoaqylkjz"),
                    "mtbdrvcqgu",
                    new RunbookParameter().withType("xitp")
                        .withIsMandatory(true)
                        .withPosition(242842574)
                        .withDefaultValue("dltkrlg")))
                .withOutputTypes(Arrays.asList("hompheqdurelyu", "lf")))
            .withProvisioningState(RunbookProvisioningState.SUCCEEDED)
            .withLastModifiedBy("pckyec")
            .withCreationTime(OffsetDateTime.parse("2021-11-20T13:51:48Z"))
            .withLastModifiedTime(OffsetDateTime.parse("2021-06-25T22:21Z"))
            .withDescription("tajbrz");
        model = BinaryData.fromObject(model).toObject(RunbookPropertiesInner.class);
        Assertions.assertEquals(RunbookTypeEnum.GRAPH_POWER_SHELL, model.runbookType());
        Assertions.assertEquals("angpszngafpgyl", model.publishContentLink().uri());
        Assertions.assertEquals("ecjujcng", model.publishContentLink().contentHash().algorithm());
        Assertions.assertEquals("adyedmzrgjfok", model.publishContentLink().contentHash().value());
        Assertions.assertEquals("bnoit", model.publishContentLink().version());
        Assertions.assertEquals(RunbookState.NEW, model.state());
        Assertions.assertEquals(false, model.logVerbose());
        Assertions.assertEquals(true, model.logProgress());
        Assertions.assertEquals(382465235, model.logActivityTrace());
        Assertions.assertEquals(1781830307, model.jobCount());
        Assertions.assertEquals("raswugyxpqit", model.parameters().get("yltcoqcuj").type());
        Assertions.assertEquals(false, model.parameters().get("yltcoqcuj").isMandatory());
        Assertions.assertEquals(248802373, model.parameters().get("yltcoqcuj").position());
        Assertions.assertEquals("vskbuhzacaq", model.parameters().get("yltcoqcuj").defaultValue());
        Assertions.assertEquals("rnpnuhzafccnuh", model.outputTypes().get(0));
        Assertions.assertEquals(false, model.draft().inEdit());
        Assertions.assertEquals("vcrk", model.draft().draftContentLink().uri());
        Assertions.assertEquals("b", model.draft().draftContentLink().contentHash().algorithm());
        Assertions.assertEquals("bqxvhcsyhzlwxae", model.draft().draftContentLink().contentHash().value());
        Assertions.assertEquals("vurex", model.draft().draftContentLink().version());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-19T23:39:17Z"), model.draft().creationTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-16T08:33:08Z"), model.draft().lastModifiedTime());
        Assertions.assertEquals("aderzmw", model.draft().parameters().get("jiuazjc").type());
        Assertions.assertEquals(true, model.draft().parameters().get("jiuazjc").isMandatory());
        Assertions.assertEquals(1329621883, model.draft().parameters().get("jiuazjc").position());
        Assertions.assertEquals("ttmvmmagoaqylkjz", model.draft().parameters().get("jiuazjc").defaultValue());
        Assertions.assertEquals("hompheqdurelyu", model.draft().outputTypes().get(0));
        Assertions.assertEquals(RunbookProvisioningState.SUCCEEDED, model.provisioningState());
        Assertions.assertEquals("pckyec", model.lastModifiedBy());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-20T13:51:48Z"), model.creationTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-25T22:21Z"), model.lastModifiedTime());
        Assertions.assertEquals("tajbrz", model.description());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
