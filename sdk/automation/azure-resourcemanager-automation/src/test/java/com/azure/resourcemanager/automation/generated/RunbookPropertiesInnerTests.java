// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.automation.fluent.models.RunbookDraftInner;
import com.azure.resourcemanager.automation.fluent.models.RunbookPropertiesInner;
import com.azure.resourcemanager.automation.models.ContentHash;
import com.azure.resourcemanager.automation.models.ContentLink;
import com.azure.resourcemanager.automation.models.RunbookParameter;
import com.azure.resourcemanager.automation.models.RunbookProvisioningState;
import com.azure.resourcemanager.automation.models.RunbookState;
import com.azure.resourcemanager.automation.models.RunbookTypeEnum;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class RunbookPropertiesInnerTests {
    @Test
    public void testDeserialize() {
        RunbookPropertiesInner model =
            BinaryData
                .fromString(
                    "{\"runbookType\":\"Script\",\"publishContentLink\":{\"uri\":\"ychunsjlpjrtwszh\",\"contentHash\":{\"algorithm\":\"uic\",\"value\":\"hvtrrmhwrbfdpyf\"},\"version\":\"bhvjglr\"},\"state\":\"Edit\",\"logVerbose\":true,\"logProgress\":true,\"logActivityTrace\":939893099,\"jobCount\":1008806240,\"parameters\":{\"ykyujxsg\":{\"type\":\"oclu\",\"isMandatory\":false,\"position\":802868153,\"defaultValue\":\"mczjkm\"},\"refqy\":{\"type\":\"srrryejylmbkzu\",\"isMandatory\":true,\"position\":986601993,\"defaultValue\":\"ihotjewlpxuzzjg\"}},\"outputTypes\":[\"toihiqakydi\",\"fb\"],\"draft\":{\"inEdit\":true,\"draftContentLink\":{\"uri\":\"qtvhcspodaqax\",\"version\":\"ietgbebjfu\"},\"creationTime\":\"2021-09-18T23:08:53Z\",\"lastModifiedTime\":\"2021-02-08T00:52:50Z\",\"parameters\":{\"attcju\":{\"type\":\"lpnfpubntnb\",\"isMandatory\":true,\"position\":767574775,\"defaultValue\":\"sowsaael\"}},\"outputTypes\":[\"rvkmjcwmjvlgfggc\",\"kyylizr\"]},\"provisioningState\":\"Succeeded\",\"lastModifiedBy\":\"sfxsf\",\"creationTime\":\"2021-06-27T03:41:35Z\",\"lastModifiedTime\":\"2021-07-16T14:55:45Z\",\"description\":\"mvagbwidqlvhuko\"}")
                .toObject(RunbookPropertiesInner.class);
        Assertions.assertEquals(RunbookTypeEnum.SCRIPT, model.runbookType());
        Assertions.assertEquals("ychunsjlpjrtwszh", model.publishContentLink().uri());
        Assertions.assertEquals("uic", model.publishContentLink().contentHash().algorithm());
        Assertions.assertEquals("hvtrrmhwrbfdpyf", model.publishContentLink().contentHash().value());
        Assertions.assertEquals("bhvjglr", model.publishContentLink().version());
        Assertions.assertEquals(RunbookState.EDIT, model.state());
        Assertions.assertEquals(true, model.logVerbose());
        Assertions.assertEquals(true, model.logProgress());
        Assertions.assertEquals(939893099, model.logActivityTrace());
        Assertions.assertEquals(1008806240, model.jobCount());
        Assertions.assertEquals("oclu", model.parameters().get("ykyujxsg").type());
        Assertions.assertEquals(false, model.parameters().get("ykyujxsg").isMandatory());
        Assertions.assertEquals(802868153, model.parameters().get("ykyujxsg").position());
        Assertions.assertEquals("mczjkm", model.parameters().get("ykyujxsg").defaultValue());
        Assertions.assertEquals("toihiqakydi", model.outputTypes().get(0));
        Assertions.assertEquals(true, model.draft().inEdit());
        Assertions.assertEquals("qtvhcspodaqax", model.draft().draftContentLink().uri());
        Assertions.assertEquals("ietgbebjfu", model.draft().draftContentLink().version());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-18T23:08:53Z"), model.draft().creationTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-08T00:52:50Z"), model.draft().lastModifiedTime());
        Assertions.assertEquals("lpnfpubntnb", model.draft().parameters().get("attcju").type());
        Assertions.assertEquals(true, model.draft().parameters().get("attcju").isMandatory());
        Assertions.assertEquals(767574775, model.draft().parameters().get("attcju").position());
        Assertions.assertEquals("sowsaael", model.draft().parameters().get("attcju").defaultValue());
        Assertions.assertEquals("rvkmjcwmjvlgfggc", model.draft().outputTypes().get(0));
        Assertions.assertEquals(RunbookProvisioningState.SUCCEEDED, model.provisioningState());
        Assertions.assertEquals("sfxsf", model.lastModifiedBy());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-27T03:41:35Z"), model.creationTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-16T14:55:45Z"), model.lastModifiedTime());
        Assertions.assertEquals("mvagbwidqlvhuko", model.description());
    }

    @Test
    public void testSerialize() {
        RunbookPropertiesInner model =
            new RunbookPropertiesInner()
                .withRunbookType(RunbookTypeEnum.SCRIPT)
                .withPublishContentLink(
                    new ContentLink()
                        .withUri("ychunsjlpjrtwszh")
                        .withContentHash(new ContentHash().withAlgorithm("uic").withValue("hvtrrmhwrbfdpyf"))
                        .withVersion("bhvjglr"))
                .withState(RunbookState.EDIT)
                .withLogVerbose(true)
                .withLogProgress(true)
                .withLogActivityTrace(939893099)
                .withJobCount(1008806240)
                .withParameters(
                    mapOf(
                        "ykyujxsg",
                        new RunbookParameter()
                            .withType("oclu")
                            .withIsMandatory(false)
                            .withPosition(802868153)
                            .withDefaultValue("mczjkm"),
                        "refqy",
                        new RunbookParameter()
                            .withType("srrryejylmbkzu")
                            .withIsMandatory(true)
                            .withPosition(986601993)
                            .withDefaultValue("ihotjewlpxuzzjg")))
                .withOutputTypes(Arrays.asList("toihiqakydi", "fb"))
                .withDraft(
                    new RunbookDraftInner()
                        .withInEdit(true)
                        .withDraftContentLink(new ContentLink().withUri("qtvhcspodaqax").withVersion("ietgbebjfu"))
                        .withCreationTime(OffsetDateTime.parse("2021-09-18T23:08:53Z"))
                        .withLastModifiedTime(OffsetDateTime.parse("2021-02-08T00:52:50Z"))
                        .withParameters(
                            mapOf(
                                "attcju",
                                new RunbookParameter()
                                    .withType("lpnfpubntnb")
                                    .withIsMandatory(true)
                                    .withPosition(767574775)
                                    .withDefaultValue("sowsaael")))
                        .withOutputTypes(Arrays.asList("rvkmjcwmjvlgfggc", "kyylizr")))
                .withProvisioningState(RunbookProvisioningState.SUCCEEDED)
                .withLastModifiedBy("sfxsf")
                .withCreationTime(OffsetDateTime.parse("2021-06-27T03:41:35Z"))
                .withLastModifiedTime(OffsetDateTime.parse("2021-07-16T14:55:45Z"))
                .withDescription("mvagbwidqlvhuko");
        model = BinaryData.fromObject(model).toObject(RunbookPropertiesInner.class);
        Assertions.assertEquals(RunbookTypeEnum.SCRIPT, model.runbookType());
        Assertions.assertEquals("ychunsjlpjrtwszh", model.publishContentLink().uri());
        Assertions.assertEquals("uic", model.publishContentLink().contentHash().algorithm());
        Assertions.assertEquals("hvtrrmhwrbfdpyf", model.publishContentLink().contentHash().value());
        Assertions.assertEquals("bhvjglr", model.publishContentLink().version());
        Assertions.assertEquals(RunbookState.EDIT, model.state());
        Assertions.assertEquals(true, model.logVerbose());
        Assertions.assertEquals(true, model.logProgress());
        Assertions.assertEquals(939893099, model.logActivityTrace());
        Assertions.assertEquals(1008806240, model.jobCount());
        Assertions.assertEquals("oclu", model.parameters().get("ykyujxsg").type());
        Assertions.assertEquals(false, model.parameters().get("ykyujxsg").isMandatory());
        Assertions.assertEquals(802868153, model.parameters().get("ykyujxsg").position());
        Assertions.assertEquals("mczjkm", model.parameters().get("ykyujxsg").defaultValue());
        Assertions.assertEquals("toihiqakydi", model.outputTypes().get(0));
        Assertions.assertEquals(true, model.draft().inEdit());
        Assertions.assertEquals("qtvhcspodaqax", model.draft().draftContentLink().uri());
        Assertions.assertEquals("ietgbebjfu", model.draft().draftContentLink().version());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-18T23:08:53Z"), model.draft().creationTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-08T00:52:50Z"), model.draft().lastModifiedTime());
        Assertions.assertEquals("lpnfpubntnb", model.draft().parameters().get("attcju").type());
        Assertions.assertEquals(true, model.draft().parameters().get("attcju").isMandatory());
        Assertions.assertEquals(767574775, model.draft().parameters().get("attcju").position());
        Assertions.assertEquals("sowsaael", model.draft().parameters().get("attcju").defaultValue());
        Assertions.assertEquals("rvkmjcwmjvlgfggc", model.draft().outputTypes().get(0));
        Assertions.assertEquals(RunbookProvisioningState.SUCCEEDED, model.provisioningState());
        Assertions.assertEquals("sfxsf", model.lastModifiedBy());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-27T03:41:35Z"), model.creationTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-16T14:55:45Z"), model.lastModifiedTime());
        Assertions.assertEquals("mvagbwidqlvhuko", model.description());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
