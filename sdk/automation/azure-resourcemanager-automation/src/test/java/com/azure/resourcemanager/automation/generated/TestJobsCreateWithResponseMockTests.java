// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.automation.AutomationManager;
import com.azure.resourcemanager.automation.models.TestJob;
import com.azure.resourcemanager.automation.models.TestJobCreateParameters;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class TestJobsCreateWithResponseMockTests {
    @Test
    public void testCreateWithResponse() throws Exception {
        String responseStr
            = "{\"creationTime\":\"2021-03-24T18:47:30Z\",\"status\":\"ajdyoljeqyxqfmz\",\"statusDetails\":\"zzhravrcjkjym\",\"runOn\":\"bgcxhn\",\"startTime\":\"2020-12-24T18:54:59Z\",\"endTime\":\"2021-09-02T09:23:57Z\",\"exception\":\"er\",\"lastModifiedTime\":\"2021-08-08T06:04:28Z\",\"lastStatusModifiedTime\":\"2021-04-14T03:24:20Z\",\"parameters\":{\"upkcbkfukdljqnvt\":\"skirhn\",\"afyalo\":\"dydshk\"},\"logActivityTrace\":505273489}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 201, responseStr.getBytes(StandardCharsets.UTF_8)));
        AutomationManager manager = AutomationManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        TestJob response = manager.testJobs()
            .createWithResponse("zancoinmp", "ymcqidkltvdhq", "ufbxweiibnto",
                new TestJobCreateParameters()
                    .withParameters(mapOf("dhuaorhjk", "fnybydhuihaouw", "amqprlo", "hwvumosqir"))
                    .withRunOn("ugejcvjkjyczcmt"),
                com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals(OffsetDateTime.parse("2021-03-24T18:47:30Z"), response.creationTime());
        Assertions.assertEquals("ajdyoljeqyxqfmz", response.status());
        Assertions.assertEquals("zzhravrcjkjym", response.statusDetails());
        Assertions.assertEquals("bgcxhn", response.runOn());
        Assertions.assertEquals(OffsetDateTime.parse("2020-12-24T18:54:59Z"), response.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-02T09:23:57Z"), response.endTime());
        Assertions.assertEquals("er", response.exception());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-08T06:04:28Z"), response.lastModifiedTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-14T03:24:20Z"), response.lastStatusModifiedTime());
        Assertions.assertEquals("skirhn", response.parameters().get("upkcbkfukdljqnvt"));
        Assertions.assertEquals(505273489, response.logActivityTrace());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
