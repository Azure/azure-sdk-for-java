// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.util.Context;
import com.azure.resourcemanager.automation.AutomationManager;
import com.azure.resourcemanager.automation.models.TestJob;
import com.azure.resourcemanager.automation.models.TestJobCreateParameters;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class TestJobsCreateWithResponseMockTests {
    @Test
    public void testCreateWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"creationTime\":\"2021-01-23T22:24:29Z\",\"status\":\"gvoogxkfna\",\"statusDetails\":\"qymhcctopuow\",\"runOn\":\"nskby\",\"startTime\":\"2021-02-05T12:22:46Z\",\"endTime\":\"2021-06-11T16:13:09Z\",\"exception\":\"ygxvha\",\"lastModifiedTime\":\"2021-06-17T05:14:13Z\",\"lastStatusModifiedTime\":\"2021-01-06T14:36:28Z\",\"parameters\":{\"cozawmvgxsmpknpw\":\"nwh\",\"uoxudnmckaprh\":\"rfljfewxq\",\"jgencdgmoque\":\"nqi\",\"jouw\":\"ihkkyowl\"},\"logActivityTrace\":1736402043}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(201);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        AutomationManager manager =
            AutomationManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        TestJob response =
            manager
                .testJobs()
                .createWithResponse(
                    "uwq",
                    "okbczothymgob",
                    "lmsnwgwi",
                    new TestJobCreateParameters().withParameters(mapOf("mhobcyan", "neakh")).withRunOn("vq"),
                    Context.NONE)
                .getValue();

        Assertions.assertEquals(OffsetDateTime.parse("2021-01-23T22:24:29Z"), response.creationTime());
        Assertions.assertEquals("gvoogxkfna", response.status());
        Assertions.assertEquals("qymhcctopuow", response.statusDetails());
        Assertions.assertEquals("nskby", response.runOn());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-05T12:22:46Z"), response.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-11T16:13:09Z"), response.endTime());
        Assertions.assertEquals("ygxvha", response.exception());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-17T05:14:13Z"), response.lastModifiedTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-06T14:36:28Z"), response.lastStatusModifiedTime());
        Assertions.assertEquals("nwh", response.parameters().get("cozawmvgxsmpknpw"));
        Assertions.assertEquals(1736402043, response.logActivityTrace());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
