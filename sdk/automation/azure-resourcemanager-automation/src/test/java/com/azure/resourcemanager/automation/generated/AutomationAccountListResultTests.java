// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.automation.fluent.models.AutomationAccountInner;
import com.azure.resourcemanager.automation.models.AutomationAccountListResult;
import com.azure.resourcemanager.automation.models.Identity;
import com.azure.resourcemanager.automation.models.ResourceIdentityType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class AutomationAccountListResultTests {
    @Test
    public void testDeserialize() {
        AutomationAccountListResult model =
            BinaryData
                .fromString(
                    "{\"value\":[{\"properties\":{\"lastModifiedBy\":\"efr\",\"state\":\"Ok\",\"creationTime\":\"2021-11-15T03:52:40Z\",\"lastModifiedTime\":\"2021-08-14T12:02:26Z\",\"description\":\"mwn\",\"privateEndpointConnections\":[],\"publicNetworkAccess\":false,\"disableLocalAuth\":true,\"automationHybridServiceUrl\":\"rctym\"},\"etag\":\"oftpipiwycz\",\"identity\":{\"principalId\":\"a\",\"tenantId\":\"qjlihhyuspska\",\"type\":\"None\",\"userAssignedIdentities\":{}},\"location\":\"fwdgzxulucvp\",\"tags\":{\"ytxifqjzgxmrh\":\"sreuzvxurisjnh\"},\"id\":\"blwpcesutrgj\",\"name\":\"pauutpw\",\"type\":\"qhih\"},{\"properties\":{\"lastModifiedBy\":\"w\",\"state\":\"Unavailable\",\"creationTime\":\"2021-06-25T01:59:21Z\",\"lastModifiedTime\":\"2021-06-08T06:30:57Z\",\"description\":\"ypsxjvfoim\",\"privateEndpointConnections\":[],\"publicNetworkAccess\":true,\"disableLocalAuth\":true,\"automationHybridServiceUrl\":\"zjxvydfcea\"},\"etag\":\"lhvygdyftu\",\"identity\":{\"principalId\":\"wnawjslbiw\",\"tenantId\":\"jgcyztsfmznba\",\"type\":\"SystemAssigned\",\"userAssignedIdentities\":{}},\"location\":\"hqnrn\",\"tags\":{\"bydvkhbejdz\":\"ehuwrykqgaifmvik\"},\"id\":\"xcv\",\"name\":\"srhnjivo\",\"type\":\"v\"}],\"nextLink\":\"ovqfzge\"}")
                .toObject(AutomationAccountListResult.class);
        Assertions.assertEquals("fwdgzxulucvp", model.value().get(0).location());
        Assertions.assertEquals("sreuzvxurisjnh", model.value().get(0).tags().get("ytxifqjzgxmrh"));
        Assertions.assertEquals("oftpipiwycz", model.value().get(0).etag());
        Assertions.assertEquals(ResourceIdentityType.NONE, model.value().get(0).identity().type());
        Assertions.assertEquals("efr", model.value().get(0).lastModifiedBy());
        Assertions.assertEquals("mwn", model.value().get(0).description());
        Assertions.assertEquals(false, model.value().get(0).publicNetworkAccess());
        Assertions.assertEquals(true, model.value().get(0).disableLocalAuth());
        Assertions.assertEquals("rctym", model.value().get(0).automationHybridServiceUrl());
        Assertions.assertEquals("ovqfzge", model.nextLink());
    }

    @Test
    public void testSerialize() {
        AutomationAccountListResult model =
            new AutomationAccountListResult()
                .withValue(
                    Arrays
                        .asList(
                            new AutomationAccountInner()
                                .withLocation("fwdgzxulucvp")
                                .withTags(mapOf("ytxifqjzgxmrh", "sreuzvxurisjnh"))
                                .withEtag("oftpipiwycz")
                                .withIdentity(
                                    new Identity()
                                        .withType(ResourceIdentityType.NONE)
                                        .withUserAssignedIdentities(mapOf()))
                                .withLastModifiedBy("efr")
                                .withDescription("mwn")
                                .withPrivateEndpointConnections(Arrays.asList())
                                .withPublicNetworkAccess(false)
                                .withDisableLocalAuth(true)
                                .withAutomationHybridServiceUrl("rctym"),
                            new AutomationAccountInner()
                                .withLocation("hqnrn")
                                .withTags(mapOf("bydvkhbejdz", "ehuwrykqgaifmvik"))
                                .withEtag("lhvygdyftu")
                                .withIdentity(
                                    new Identity()
                                        .withType(ResourceIdentityType.SYSTEM_ASSIGNED)
                                        .withUserAssignedIdentities(mapOf()))
                                .withLastModifiedBy("w")
                                .withDescription("ypsxjvfoim")
                                .withPrivateEndpointConnections(Arrays.asList())
                                .withPublicNetworkAccess(true)
                                .withDisableLocalAuth(true)
                                .withAutomationHybridServiceUrl("zjxvydfcea")))
                .withNextLink("ovqfzge");
        model = BinaryData.fromObject(model).toObject(AutomationAccountListResult.class);
        Assertions.assertEquals("fwdgzxulucvp", model.value().get(0).location());
        Assertions.assertEquals("sreuzvxurisjnh", model.value().get(0).tags().get("ytxifqjzgxmrh"));
        Assertions.assertEquals("oftpipiwycz", model.value().get(0).etag());
        Assertions.assertEquals(ResourceIdentityType.NONE, model.value().get(0).identity().type());
        Assertions.assertEquals("efr", model.value().get(0).lastModifiedBy());
        Assertions.assertEquals("mwn", model.value().get(0).description());
        Assertions.assertEquals(false, model.value().get(0).publicNetworkAccess());
        Assertions.assertEquals(true, model.value().get(0).disableLocalAuth());
        Assertions.assertEquals("rctym", model.value().get(0).automationHybridServiceUrl());
        Assertions.assertEquals("ovqfzge", model.nextLink());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
