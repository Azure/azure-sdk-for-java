// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.automation.fluent.models.ConnectionCreateOrUpdateProperties;
import com.azure.resourcemanager.automation.models.ConnectionTypeAssociationProperty;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class ConnectionCreateOrUpdatePropertiesTests {
    @Test
    public void testDeserialize() {
        ConnectionCreateOrUpdateProperties model =
            BinaryData
                .fromString(
                    "{\"description\":\"xccybvpa\",\"connectionType\":{\"name\":\"kkudzp\"},\"fieldDefinitionValues\":{\"hpfkyrkdbdgi\":\"jplmagstcy\",\"mnwqj\":\"gsj\"}}")
                .toObject(ConnectionCreateOrUpdateProperties.class);
        Assertions.assertEquals("xccybvpa", model.description());
        Assertions.assertEquals("kkudzp", model.connectionType().name());
        Assertions.assertEquals("jplmagstcy", model.fieldDefinitionValues().get("hpfkyrkdbdgi"));
    }

    @Test
    public void testSerialize() {
        ConnectionCreateOrUpdateProperties model =
            new ConnectionCreateOrUpdateProperties()
                .withDescription("xccybvpa")
                .withConnectionType(new ConnectionTypeAssociationProperty().withName("kkudzp"))
                .withFieldDefinitionValues(mapOf("hpfkyrkdbdgi", "jplmagstcy", "mnwqj", "gsj"));
        model = BinaryData.fromObject(model).toObject(ConnectionCreateOrUpdateProperties.class);
        Assertions.assertEquals("xccybvpa", model.description());
        Assertions.assertEquals("kkudzp", model.connectionType().name());
        Assertions.assertEquals("jplmagstcy", model.fieldDefinitionValues().get("hpfkyrkdbdgi"));
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
