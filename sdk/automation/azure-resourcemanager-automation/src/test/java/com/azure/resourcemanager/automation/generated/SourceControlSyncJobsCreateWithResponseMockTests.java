// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.automation.AutomationManager;
import com.azure.resourcemanager.automation.models.ProvisioningState;
import com.azure.resourcemanager.automation.models.SourceControlSyncJob;
import com.azure.resourcemanager.automation.models.SyncType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.UUID;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class SourceControlSyncJobsCreateWithResponseMockTests {
    @Test
    public void testCreateWithResponse() throws Exception {
        String responseStr
            = "{\"name\":\"xfsv\",\"type\":\"h\",\"id\":\"ynwlslrcigtzjcv\",\"properties\":{\"sourceControlSyncJobId\":\"lapsnsso\",\"creationTime\":\"2021-08-20T00:22:26Z\",\"provisioningState\":\"Failed\",\"startTime\":\"2021-02-25T19:52:15Z\",\"endTime\":\"2021-11-15T05:58:17Z\",\"syncType\":\"PartialSync\"}}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 201, responseStr.getBytes(StandardCharsets.UTF_8)));
        AutomationManager manager = AutomationManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        SourceControlSyncJob response = manager.sourceControlSyncJobs()
            .define(UUID.fromString("f05448c6-cc85-4c2c-a0f0-1fbedf640f86"))
            .withExistingSourceControl("ghsrleinkfscjfn", "jwvuag", "qwtltngvmreupt")
            .withCommitId("klzmijajw")
            .create();

        Assertions.assertEquals("lapsnsso", response.sourceControlSyncJobId());
        Assertions.assertEquals(ProvisioningState.FAILED, response.provisioningState());
        Assertions.assertEquals(SyncType.PARTIAL_SYNC, response.syncType());
    }
}
