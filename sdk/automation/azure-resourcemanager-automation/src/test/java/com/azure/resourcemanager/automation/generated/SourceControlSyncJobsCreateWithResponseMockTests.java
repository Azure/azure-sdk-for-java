// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.automation.AutomationManager;
import com.azure.resourcemanager.automation.models.ProvisioningState;
import com.azure.resourcemanager.automation.models.SourceControlSyncJob;
import com.azure.resourcemanager.automation.models.SyncType;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.UUID;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class SourceControlSyncJobsCreateWithResponseMockTests {
    @Test
    public void testCreateWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"name\":\"diawpzxkzr\",\"type\":\"mkctdhuo\",\"id\":\"wqpsqaz\",\"properties\":{\"sourceControlSyncJobId\":\"odvqgcnbhcbmj\",\"creationTime\":\"2021-01-31T15:56:43Z\",\"provisioningState\":\"Completed\",\"startTime\":\"2021-05-28T05:46:21Z\",\"endTime\":\"2021-06-11T22:44:24Z\",\"syncType\":\"FullSync\"}}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(201);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        AutomationManager manager =
            AutomationManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        SourceControlSyncJob response =
            manager
                .sourceControlSyncJobs()
                .define(UUID.fromString("91efbd52-797d-4c1e-a77b-97b6ac94bea0"))
                .withExistingSourceControl("awmpjprd", "wrpcfpcfjfwzlgza", "kgyepe")
                .withCommitId("amnni")
                .create();

        Assertions.assertEquals("odvqgcnbhcbmj", response.sourceControlSyncJobId());
        Assertions.assertEquals(ProvisioningState.COMPLETED, response.provisioningState());
        Assertions.assertEquals(SyncType.FULL_SYNC, response.syncType());
    }
}
