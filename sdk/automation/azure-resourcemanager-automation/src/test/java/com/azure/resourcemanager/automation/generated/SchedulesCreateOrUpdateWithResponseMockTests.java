// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.automation.AutomationManager;
import com.azure.resourcemanager.automation.models.AdvancedSchedule;
import com.azure.resourcemanager.automation.models.Schedule;
import com.azure.resourcemanager.automation.models.ScheduleFrequency;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class SchedulesCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"startTime\":\"2021-05-11T00:49:01Z\",\"startTimeOffsetMinutes\":75.219341959843,\"expiryTime\":\"2021-03-25T19:15:02Z\",\"expiryTimeOffsetMinutes\":55.36289754924293,\"isEnabled\":true,\"nextRun\":\"2021-07-27T20:38:22Z\",\"nextRunOffsetMinutes\":12.102028897079531,\"frequency\":\"Minute\",\"timeZone\":\"osqkptjqgk\",\"advancedSchedule\":{\"weekDays\":[],\"monthDays\":[],\"monthlyOccurrences\":[]},\"creationTime\":\"2021-03-07T15:06:28Z\",\"lastModifiedTime\":\"2021-06-24T02:36:06Z\",\"description\":\"d\"},\"id\":\"kp\",\"name\":\"qwuntob\",\"type\":\"izazz\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        AutomationManager manager =
            AutomationManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        Schedule response =
            manager
                .schedules()
                .define("hgjsysmvxo")
                .withExistingAutomationAccount("cstu", "mlhxdfbklcii")
                .withName("gwxfkzsi")
                .withStartTime(OffsetDateTime.parse("2021-05-11T07:48:19Z"))
                .withFrequency(ScheduleFrequency.WEEK)
                .withDescription("uvbdujgcwxvec")
                .withExpiryTime(OffsetDateTime.parse("2021-09-18T13:24:44Z"))
                .withTimeZone("xrizagbbgi")
                .withAdvancedSchedule(
                    new AdvancedSchedule()
                        .withWeekDays(Arrays.asList())
                        .withMonthDays(Arrays.asList())
                        .withMonthlyOccurrences(Arrays.asList()))
                .create();

        Assertions.assertEquals(OffsetDateTime.parse("2021-05-11T00:49:01Z"), response.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-25T19:15:02Z"), response.expiryTime());
        Assertions.assertEquals(55.36289754924293D, response.expiryTimeOffsetMinutes());
        Assertions.assertEquals(true, response.isEnabled());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-27T20:38:22Z"), response.nextRun());
        Assertions.assertEquals(12.102028897079531D, response.nextRunOffsetMinutes());
        Assertions.assertEquals(ScheduleFrequency.MINUTE, response.frequency());
        Assertions.assertEquals("osqkptjqgk", response.timeZone());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-07T15:06:28Z"), response.creationTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-24T02:36:06Z"), response.lastModifiedTime());
        Assertions.assertEquals("d", response.description());
    }
}
