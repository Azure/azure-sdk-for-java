// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.automation.AutomationManager;
import com.azure.resourcemanager.automation.models.AdvancedSchedule;
import com.azure.resourcemanager.automation.models.AdvancedScheduleMonthlyOccurrence;
import com.azure.resourcemanager.automation.models.Schedule;
import com.azure.resourcemanager.automation.models.ScheduleDay;
import com.azure.resourcemanager.automation.models.ScheduleFrequency;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class SchedulesCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"startTime\":\"2021-03-10T16:15:06Z\",\"startTimeOffsetMinutes\":78.27290837474814,\"expiryTime\":\"2021-12-04T14:42:52Z\",\"expiryTimeOffsetMinutes\":63.37102408552093,\"isEnabled\":false,\"nextRun\":\"2021-04-10T20:48:55Z\",\"nextRunOffsetMinutes\":71.16916989897278,\"interval\":\"datarmkjmyitrchwudlx\",\"frequency\":\"OneTime\",\"timeZone\":\"tpmnoe\",\"advancedSchedule\":{\"weekDays\":[\"fmsibzoyrfgxkyd\",\"mypgfqvmty\",\"hl\"],\"monthDays\":[201079679,2121738171,281339068],\"monthlyOccurrences\":[{\"occurrence\":12523805,\"day\":\"Thursday\"}]},\"creationTime\":\"2021-10-30T23:40:59Z\",\"lastModifiedTime\":\"2020-12-27T02:23:37Z\",\"description\":\"pqcrzgeuqxbpiat\"},\"id\":\"faujegqdtad\",\"name\":\"akgddhjkrukizy\",\"type\":\"gsq\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AutomationManager manager = AutomationManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        Schedule response = manager.schedules()
            .define("d")
            .withExistingAutomationAccount("moil", "nwemhdeeljslkyo")
            .withName("fzjuegrhrhtsl")
            .withStartTime(OffsetDateTime.parse("2021-08-29T20:34:27Z"))
            .withFrequency(ScheduleFrequency.MINUTE)
            .withDescription("tv")
            .withExpiryTime(OffsetDateTime.parse("2021-07-23T07:47:13Z"))
            .withInterval("datagj")
            .withTimeZone("obpnjodf")
            .withAdvancedSchedule(new AdvancedSchedule().withWeekDays(Arrays.asList("qwm"))
                .withMonthDays(Arrays.asList(1086592349, 1039949457, 435733121, 2015345147))
                .withMonthlyOccurrences(Arrays.asList(
                    new AdvancedScheduleMonthlyOccurrence().withOccurrence(575774513).withDay(ScheduleDay.THURSDAY),
                    new AdvancedScheduleMonthlyOccurrence().withOccurrence(979433480).withDay(ScheduleDay.SATURDAY),
                    new AdvancedScheduleMonthlyOccurrence().withOccurrence(769244993).withDay(ScheduleDay.SATURDAY),
                    new AdvancedScheduleMonthlyOccurrence().withOccurrence(1500921341).withDay(ScheduleDay.SUNDAY))))
            .create();

        Assertions.assertEquals(OffsetDateTime.parse("2021-03-10T16:15:06Z"), response.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-12-04T14:42:52Z"), response.expiryTime());
        Assertions.assertEquals(63.37102408552093D, response.expiryTimeOffsetMinutes());
        Assertions.assertEquals(false, response.isEnabled());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-10T20:48:55Z"), response.nextRun());
        Assertions.assertEquals(71.16916989897278D, response.nextRunOffsetMinutes());
        Assertions.assertEquals(ScheduleFrequency.ONE_TIME, response.frequency());
        Assertions.assertEquals("tpmnoe", response.timeZone());
        Assertions.assertEquals("fmsibzoyrfgxkyd", response.advancedSchedule().weekDays().get(0));
        Assertions.assertEquals(201079679, response.advancedSchedule().monthDays().get(0));
        Assertions.assertEquals(12523805, response.advancedSchedule().monthlyOccurrences().get(0).occurrence());
        Assertions.assertEquals(ScheduleDay.THURSDAY, response.advancedSchedule().monthlyOccurrences().get(0).day());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-30T23:40:59Z"), response.creationTime());
        Assertions.assertEquals(OffsetDateTime.parse("2020-12-27T02:23:37Z"), response.lastModifiedTime());
        Assertions.assertEquals("pqcrzgeuqxbpiat", response.description());
    }
}
