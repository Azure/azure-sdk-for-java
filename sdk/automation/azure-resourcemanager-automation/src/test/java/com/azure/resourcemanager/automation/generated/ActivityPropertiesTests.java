// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.automation.fluent.models.ActivityProperties;
import com.azure.resourcemanager.automation.models.ActivityOutputType;
import com.azure.resourcemanager.automation.models.ActivityParameter;
import com.azure.resourcemanager.automation.models.ActivityParameterSet;
import com.azure.resourcemanager.automation.models.ActivityParameterValidationSet;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class ActivityPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ActivityProperties model = BinaryData.fromString(
            "{\"definition\":\"bhernntiew\",\"parameterSets\":[{\"name\":\"bquwrbehw\",\"parameters\":[{\"name\":\"buffkmrqemvvhm\",\"type\":\"drjf\",\"isMandatory\":false,\"isDynamic\":false,\"position\":1896818914623797810,\"valueFromPipeline\":true,\"valueFromPipelineByPropertyName\":true,\"valueFromRemainingArguments\":true,\"description\":\"nmwcpmgu\",\"validationSet\":[{},{},{}]}]}],\"outputTypes\":[{\"name\":\"factka\",\"type\":\"ovajjziuxxps\"},{\"name\":\"eekulfgslqubkwd\",\"type\":\"nrdsutujbazpjuoh\"},{\"name\":\"nyfln\",\"type\":\"wmd\"},{\"name\":\"wpklvxw\",\"type\":\"gdxpg\"}],\"creationTime\":\"2021-03-08T17:31:26Z\",\"lastModifiedTime\":\"2021-06-13T19:04:17Z\",\"description\":\"zepn\"}")
            .toObject(ActivityProperties.class);
        Assertions.assertEquals("bhernntiew", model.definition());
        Assertions.assertEquals("bquwrbehw", model.parameterSets().get(0).name());
        Assertions.assertEquals("buffkmrqemvvhm", model.parameterSets().get(0).parameters().get(0).name());
        Assertions.assertEquals("drjf", model.parameterSets().get(0).parameters().get(0).type());
        Assertions.assertEquals(false, model.parameterSets().get(0).parameters().get(0).isMandatory());
        Assertions.assertEquals(false, model.parameterSets().get(0).parameters().get(0).isDynamic());
        Assertions.assertEquals(1896818914623797810L, model.parameterSets().get(0).parameters().get(0).position());
        Assertions.assertEquals(true, model.parameterSets().get(0).parameters().get(0).valueFromPipeline());
        Assertions.assertEquals(true,
            model.parameterSets().get(0).parameters().get(0).valueFromPipelineByPropertyName());
        Assertions.assertEquals(true, model.parameterSets().get(0).parameters().get(0).valueFromRemainingArguments());
        Assertions.assertEquals("nmwcpmgu", model.parameterSets().get(0).parameters().get(0).description());
        Assertions.assertEquals("factka", model.outputTypes().get(0).name());
        Assertions.assertEquals("ovajjziuxxps", model.outputTypes().get(0).type());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-08T17:31:26Z"), model.creationTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-13T19:04:17Z"), model.lastModifiedTime());
        Assertions.assertEquals("zepn", model.description());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ActivityProperties model = new ActivityProperties().withDefinition("bhernntiew")
            .withParameterSets(Arrays.asList(new ActivityParameterSet().withName("bquwrbehw")
                .withParameters(Arrays.asList(new ActivityParameter().withName("buffkmrqemvvhm")
                    .withType("drjf")
                    .withIsMandatory(false)
                    .withIsDynamic(false)
                    .withPosition(1896818914623797810L)
                    .withValueFromPipeline(true)
                    .withValueFromPipelineByPropertyName(true)
                    .withValueFromRemainingArguments(true)
                    .withDescription("nmwcpmgu")
                    .withValidationSet(Arrays.asList(new ActivityParameterValidationSet(),
                        new ActivityParameterValidationSet(), new ActivityParameterValidationSet()))))))
            .withOutputTypes(Arrays.asList(new ActivityOutputType().withName("factka").withType("ovajjziuxxps"),
                new ActivityOutputType().withName("eekulfgslqubkwd").withType("nrdsutujbazpjuoh"),
                new ActivityOutputType().withName("nyfln").withType("wmd"),
                new ActivityOutputType().withName("wpklvxw").withType("gdxpg")))
            .withCreationTime(OffsetDateTime.parse("2021-03-08T17:31:26Z"))
            .withLastModifiedTime(OffsetDateTime.parse("2021-06-13T19:04:17Z"))
            .withDescription("zepn");
        model = BinaryData.fromObject(model).toObject(ActivityProperties.class);
        Assertions.assertEquals("bhernntiew", model.definition());
        Assertions.assertEquals("bquwrbehw", model.parameterSets().get(0).name());
        Assertions.assertEquals("buffkmrqemvvhm", model.parameterSets().get(0).parameters().get(0).name());
        Assertions.assertEquals("drjf", model.parameterSets().get(0).parameters().get(0).type());
        Assertions.assertEquals(false, model.parameterSets().get(0).parameters().get(0).isMandatory());
        Assertions.assertEquals(false, model.parameterSets().get(0).parameters().get(0).isDynamic());
        Assertions.assertEquals(1896818914623797810L, model.parameterSets().get(0).parameters().get(0).position());
        Assertions.assertEquals(true, model.parameterSets().get(0).parameters().get(0).valueFromPipeline());
        Assertions.assertEquals(true,
            model.parameterSets().get(0).parameters().get(0).valueFromPipelineByPropertyName());
        Assertions.assertEquals(true, model.parameterSets().get(0).parameters().get(0).valueFromRemainingArguments());
        Assertions.assertEquals("nmwcpmgu", model.parameterSets().get(0).parameters().get(0).description());
        Assertions.assertEquals("factka", model.outputTypes().get(0).name());
        Assertions.assertEquals("ovajjziuxxps", model.outputTypes().get(0).type());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-08T17:31:26Z"), model.creationTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-13T19:04:17Z"), model.lastModifiedTime());
        Assertions.assertEquals("zepn", model.description());
    }
}
