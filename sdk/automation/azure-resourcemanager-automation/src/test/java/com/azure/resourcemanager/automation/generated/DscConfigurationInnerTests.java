// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.automation.fluent.models.DscConfigurationInner;
import com.azure.resourcemanager.automation.models.ContentHash;
import com.azure.resourcemanager.automation.models.ContentSource;
import com.azure.resourcemanager.automation.models.ContentSourceType;
import com.azure.resourcemanager.automation.models.DscConfigurationParameter;
import com.azure.resourcemanager.automation.models.DscConfigurationProvisioningState;
import com.azure.resourcemanager.automation.models.DscConfigurationState;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DscConfigurationInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DscConfigurationInner model = BinaryData.fromString(
            "{\"properties\":{\"provisioningState\":\"Succeeded\",\"jobCount\":721482602,\"parameters\":{\"izakak\":{\"type\":\"qtgdqohmcwsl\",\"isMandatory\":false,\"position\":379885454,\"defaultValue\":\"pwbralllibphbqz\"},\"xprimrsop\":{\"type\":\"kjpdnjzhajo\",\"isMandatory\":false,\"position\":1918211666,\"defaultValue\":\"uo\"}},\"source\":{\"hash\":{\"algorithm\":\"cjmeislstvasy\",\"value\":\"wxdzaumweoohgu\"},\"type\":\"uri\",\"value\":\"boyjathwt\",\"version\":\"lbaemwmdxmeb\"},\"state\":\"New\",\"logVerbose\":true,\"creationTime\":\"2021-02-25T11:43:19Z\",\"lastModifiedTime\":\"2021-02-27T02:34:35Z\",\"nodeConfigurationCount\":1860405842,\"description\":\"a\"},\"etag\":\"qxnmwmqt\",\"location\":\"bxyijddtvq\",\"tags\":{\"kpn\":\"adijaeukmrsie\"},\"id\":\"zaapmudqmeqwi\",\"name\":\"pibudqwyxebeybpm\",\"type\":\"znrtffyaqit\"}")
            .toObject(DscConfigurationInner.class);
        Assertions.assertEquals("bxyijddtvq", model.location());
        Assertions.assertEquals("adijaeukmrsie", model.tags().get("kpn"));
        Assertions.assertEquals("qxnmwmqt", model.etag());
        Assertions.assertEquals(DscConfigurationProvisioningState.SUCCEEDED, model.provisioningState());
        Assertions.assertEquals(721482602, model.jobCount());
        Assertions.assertEquals("qtgdqohmcwsl", model.parameters().get("izakak").type());
        Assertions.assertEquals(false, model.parameters().get("izakak").isMandatory());
        Assertions.assertEquals(379885454, model.parameters().get("izakak").position());
        Assertions.assertEquals("pwbralllibphbqz", model.parameters().get("izakak").defaultValue());
        Assertions.assertEquals("cjmeislstvasy", model.source().hash().algorithm());
        Assertions.assertEquals("wxdzaumweoohgu", model.source().hash().value());
        Assertions.assertEquals(ContentSourceType.URI, model.source().type());
        Assertions.assertEquals("boyjathwt", model.source().value());
        Assertions.assertEquals("lbaemwmdxmeb", model.source().version());
        Assertions.assertEquals(DscConfigurationState.NEW, model.state());
        Assertions.assertEquals(true, model.logVerbose());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-25T11:43:19Z"), model.creationTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-27T02:34:35Z"), model.lastModifiedTime());
        Assertions.assertEquals(1860405842, model.nodeConfigurationCount());
        Assertions.assertEquals("a", model.description());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DscConfigurationInner model = new DscConfigurationInner().withLocation("bxyijddtvq")
            .withTags(mapOf("kpn", "adijaeukmrsie"))
            .withEtag("qxnmwmqt")
            .withProvisioningState(DscConfigurationProvisioningState.SUCCEEDED)
            .withJobCount(721482602)
            .withParameters(mapOf("izakak",
                new DscConfigurationParameter().withType("qtgdqohmcwsl")
                    .withIsMandatory(false)
                    .withPosition(379885454)
                    .withDefaultValue("pwbralllibphbqz"),
                "xprimrsop",
                new DscConfigurationParameter().withType("kjpdnjzhajo")
                    .withIsMandatory(false)
                    .withPosition(1918211666)
                    .withDefaultValue("uo")))
            .withSource(new ContentSource()
                .withHash(new ContentHash().withAlgorithm("cjmeislstvasy").withValue("wxdzaumweoohgu"))
                .withType(ContentSourceType.URI)
                .withValue("boyjathwt")
                .withVersion("lbaemwmdxmeb"))
            .withState(DscConfigurationState.NEW)
            .withLogVerbose(true)
            .withCreationTime(OffsetDateTime.parse("2021-02-25T11:43:19Z"))
            .withLastModifiedTime(OffsetDateTime.parse("2021-02-27T02:34:35Z"))
            .withNodeConfigurationCount(1860405842)
            .withDescription("a");
        model = BinaryData.fromObject(model).toObject(DscConfigurationInner.class);
        Assertions.assertEquals("bxyijddtvq", model.location());
        Assertions.assertEquals("adijaeukmrsie", model.tags().get("kpn"));
        Assertions.assertEquals("qxnmwmqt", model.etag());
        Assertions.assertEquals(DscConfigurationProvisioningState.SUCCEEDED, model.provisioningState());
        Assertions.assertEquals(721482602, model.jobCount());
        Assertions.assertEquals("qtgdqohmcwsl", model.parameters().get("izakak").type());
        Assertions.assertEquals(false, model.parameters().get("izakak").isMandatory());
        Assertions.assertEquals(379885454, model.parameters().get("izakak").position());
        Assertions.assertEquals("pwbralllibphbqz", model.parameters().get("izakak").defaultValue());
        Assertions.assertEquals("cjmeislstvasy", model.source().hash().algorithm());
        Assertions.assertEquals("wxdzaumweoohgu", model.source().hash().value());
        Assertions.assertEquals(ContentSourceType.URI, model.source().type());
        Assertions.assertEquals("boyjathwt", model.source().value());
        Assertions.assertEquals("lbaemwmdxmeb", model.source().version());
        Assertions.assertEquals(DscConfigurationState.NEW, model.state());
        Assertions.assertEquals(true, model.logVerbose());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-25T11:43:19Z"), model.creationTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-27T02:34:35Z"), model.lastModifiedTime());
        Assertions.assertEquals(1860405842, model.nodeConfigurationCount());
        Assertions.assertEquals("a", model.description());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
