// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.automation.fluent.models.DscConfigurationInner;
import com.azure.resourcemanager.automation.models.ContentSource;
import com.azure.resourcemanager.automation.models.ContentSourceType;
import com.azure.resourcemanager.automation.models.DscConfigurationParameter;
import com.azure.resourcemanager.automation.models.DscConfigurationProvisioningState;
import com.azure.resourcemanager.automation.models.DscConfigurationState;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class DscConfigurationInnerTests {
    @Test
    public void testDeserialize() {
        DscConfigurationInner model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"provisioningState\":\"Succeeded\",\"jobCount\":1357265253,\"parameters\":{\"zhe\":{\"type\":\"ztmoobklftidg\",\"isMandatory\":true,\"position\":1491349609,\"defaultValue\":\"imaq\"}},\"source\":{\"type\":\"embeddedContent\",\"value\":\"uj\",\"version\":\"t\"},\"state\":\"New\",\"logVerbose\":true,\"creationTime\":\"2021-11-06T08:55:16Z\",\"lastModifiedTime\":\"2021-01-10T19:18:42Z\",\"nodeConfigurationCount\":1771791056,\"description\":\"wpfaj\"},\"etag\":\"wltlwtjjguktalh\",\"location\":\"nvkcdmxzrpoa\",\"tags\":{\"eazulcs\":\"nwiaaomyl\",\"jhlfzswpchwahf\":\"thwwn\",\"wlyxgncxyk\":\"ousnfepgfewe\"},\"id\":\"hdjhlimmbcx\",\"name\":\"h\",\"type\":\"cporxvxcjz\"}")
                .toObject(DscConfigurationInner.class);
        Assertions.assertEquals("nvkcdmxzrpoa", model.location());
        Assertions.assertEquals("nwiaaomyl", model.tags().get("eazulcs"));
        Assertions.assertEquals("wltlwtjjguktalh", model.etag());
        Assertions.assertEquals(DscConfigurationProvisioningState.SUCCEEDED, model.provisioningState());
        Assertions.assertEquals(1357265253, model.jobCount());
        Assertions.assertEquals("ztmoobklftidg", model.parameters().get("zhe").type());
        Assertions.assertEquals(true, model.parameters().get("zhe").isMandatory());
        Assertions.assertEquals(1491349609, model.parameters().get("zhe").position());
        Assertions.assertEquals("imaq", model.parameters().get("zhe").defaultValue());
        Assertions.assertEquals(ContentSourceType.EMBEDDED_CONTENT, model.source().type());
        Assertions.assertEquals("uj", model.source().value());
        Assertions.assertEquals("t", model.source().version());
        Assertions.assertEquals(DscConfigurationState.NEW, model.state());
        Assertions.assertEquals(true, model.logVerbose());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-06T08:55:16Z"), model.creationTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-10T19:18:42Z"), model.lastModifiedTime());
        Assertions.assertEquals(1771791056, model.nodeConfigurationCount());
        Assertions.assertEquals("wpfaj", model.description());
    }

    @Test
    public void testSerialize() {
        DscConfigurationInner model =
            new DscConfigurationInner()
                .withLocation("nvkcdmxzrpoa")
                .withTags(mapOf("eazulcs", "nwiaaomyl", "jhlfzswpchwahf", "thwwn", "wlyxgncxyk", "ousnfepgfewe"))
                .withEtag("wltlwtjjguktalh")
                .withProvisioningState(DscConfigurationProvisioningState.SUCCEEDED)
                .withJobCount(1357265253)
                .withParameters(
                    mapOf(
                        "zhe",
                        new DscConfigurationParameter()
                            .withType("ztmoobklftidg")
                            .withIsMandatory(true)
                            .withPosition(1491349609)
                            .withDefaultValue("imaq")))
                .withSource(
                    new ContentSource().withType(ContentSourceType.EMBEDDED_CONTENT).withValue("uj").withVersion("t"))
                .withState(DscConfigurationState.NEW)
                .withLogVerbose(true)
                .withCreationTime(OffsetDateTime.parse("2021-11-06T08:55:16Z"))
                .withLastModifiedTime(OffsetDateTime.parse("2021-01-10T19:18:42Z"))
                .withNodeConfigurationCount(1771791056)
                .withDescription("wpfaj");
        model = BinaryData.fromObject(model).toObject(DscConfigurationInner.class);
        Assertions.assertEquals("nvkcdmxzrpoa", model.location());
        Assertions.assertEquals("nwiaaomyl", model.tags().get("eazulcs"));
        Assertions.assertEquals("wltlwtjjguktalh", model.etag());
        Assertions.assertEquals(DscConfigurationProvisioningState.SUCCEEDED, model.provisioningState());
        Assertions.assertEquals(1357265253, model.jobCount());
        Assertions.assertEquals("ztmoobklftidg", model.parameters().get("zhe").type());
        Assertions.assertEquals(true, model.parameters().get("zhe").isMandatory());
        Assertions.assertEquals(1491349609, model.parameters().get("zhe").position());
        Assertions.assertEquals("imaq", model.parameters().get("zhe").defaultValue());
        Assertions.assertEquals(ContentSourceType.EMBEDDED_CONTENT, model.source().type());
        Assertions.assertEquals("uj", model.source().value());
        Assertions.assertEquals("t", model.source().version());
        Assertions.assertEquals(DscConfigurationState.NEW, model.state());
        Assertions.assertEquals(true, model.logVerbose());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-06T08:55:16Z"), model.creationTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-10T19:18:42Z"), model.lastModifiedTime());
        Assertions.assertEquals(1771791056, model.nodeConfigurationCount());
        Assertions.assertEquals("wpfaj", model.description());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
