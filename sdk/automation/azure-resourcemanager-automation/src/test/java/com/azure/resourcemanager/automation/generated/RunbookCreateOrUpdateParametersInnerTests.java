// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.automation.fluent.models.RunbookCreateOrUpdateParametersInner;
import com.azure.resourcemanager.automation.fluent.models.RunbookDraftInner;
import com.azure.resourcemanager.automation.models.ContentLink;
import com.azure.resourcemanager.automation.models.RunbookTypeEnum;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class RunbookCreateOrUpdateParametersInnerTests {
    @Test
    public void testDeserialize() {
        RunbookCreateOrUpdateParametersInner model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"logVerbose\":true,\"logProgress\":false,\"runbookType\":\"Python3\",\"draft\":{\"inEdit\":true,\"creationTime\":\"2021-01-07T14:02:21Z\",\"lastModifiedTime\":\"2021-09-14T09:35:25Z\",\"parameters\":{},\"outputTypes\":[\"z\",\"iblkujr\"]},\"publishContentLink\":{\"uri\":\"ojuidjpuuyjucej\",\"version\":\"oeo\"},\"description\":\"tzejetjklnt\",\"logActivityTrace\":1811682620},\"name\":\"uzk\",\"location\":\"qzolxrzvhqjw\",\"tags\":{\"rrkolawjmjs\":\"tgvgzp\"}}")
                .toObject(RunbookCreateOrUpdateParametersInner.class);
        Assertions.assertEquals("uzk", model.name());
        Assertions.assertEquals("qzolxrzvhqjw", model.location());
        Assertions.assertEquals("tgvgzp", model.tags().get("rrkolawjmjs"));
        Assertions.assertEquals(true, model.logVerbose());
        Assertions.assertEquals(false, model.logProgress());
        Assertions.assertEquals(RunbookTypeEnum.PYTHON3, model.runbookType());
        Assertions.assertEquals(true, model.draft().inEdit());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-07T14:02:21Z"), model.draft().creationTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-14T09:35:25Z"), model.draft().lastModifiedTime());
        Assertions.assertEquals("z", model.draft().outputTypes().get(0));
        Assertions.assertEquals("ojuidjpuuyjucej", model.publishContentLink().uri());
        Assertions.assertEquals("oeo", model.publishContentLink().version());
        Assertions.assertEquals("tzejetjklnt", model.description());
        Assertions.assertEquals(1811682620, model.logActivityTrace());
    }

    @Test
    public void testSerialize() {
        RunbookCreateOrUpdateParametersInner model =
            new RunbookCreateOrUpdateParametersInner()
                .withName("uzk")
                .withLocation("qzolxrzvhqjw")
                .withTags(mapOf("rrkolawjmjs", "tgvgzp"))
                .withLogVerbose(true)
                .withLogProgress(false)
                .withRunbookType(RunbookTypeEnum.PYTHON3)
                .withDraft(
                    new RunbookDraftInner()
                        .withInEdit(true)
                        .withCreationTime(OffsetDateTime.parse("2021-01-07T14:02:21Z"))
                        .withLastModifiedTime(OffsetDateTime.parse("2021-09-14T09:35:25Z"))
                        .withParameters(mapOf())
                        .withOutputTypes(Arrays.asList("z", "iblkujr")))
                .withPublishContentLink(new ContentLink().withUri("ojuidjpuuyjucej").withVersion("oeo"))
                .withDescription("tzejetjklnt")
                .withLogActivityTrace(1811682620);
        model = BinaryData.fromObject(model).toObject(RunbookCreateOrUpdateParametersInner.class);
        Assertions.assertEquals("uzk", model.name());
        Assertions.assertEquals("qzolxrzvhqjw", model.location());
        Assertions.assertEquals("tgvgzp", model.tags().get("rrkolawjmjs"));
        Assertions.assertEquals(true, model.logVerbose());
        Assertions.assertEquals(false, model.logProgress());
        Assertions.assertEquals(RunbookTypeEnum.PYTHON3, model.runbookType());
        Assertions.assertEquals(true, model.draft().inEdit());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-07T14:02:21Z"), model.draft().creationTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-14T09:35:25Z"), model.draft().lastModifiedTime());
        Assertions.assertEquals("z", model.draft().outputTypes().get(0));
        Assertions.assertEquals("ojuidjpuuyjucej", model.publishContentLink().uri());
        Assertions.assertEquals("oeo", model.publishContentLink().version());
        Assertions.assertEquals("tzejetjklnt", model.description());
        Assertions.assertEquals(1811682620, model.logActivityTrace());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
