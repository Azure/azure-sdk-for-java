// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.automation.fluent.models.RunbookCreateOrUpdateParametersInner;
import com.azure.resourcemanager.automation.fluent.models.RunbookDraftInner;
import com.azure.resourcemanager.automation.models.ContentHash;
import com.azure.resourcemanager.automation.models.ContentLink;
import com.azure.resourcemanager.automation.models.RunbookParameter;
import com.azure.resourcemanager.automation.models.RunbookTypeEnum;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class RunbookCreateOrUpdateParametersInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        RunbookCreateOrUpdateParametersInner model = BinaryData.fromString(
            "{\"properties\":{\"logVerbose\":true,\"logProgress\":true,\"runbookType\":\"Python2\",\"draft\":{\"inEdit\":true,\"draftContentLink\":{\"uri\":\"lxiutgjcyzyzjdnr\",\"contentHash\":{\"algorithm\":\"btxjeaoqaqbzg\",\"value\":\"hfw\"},\"version\":\"uatbwbqamteuliy\"},\"creationTime\":\"2021-06-17T06:47:53Z\",\"lastModifiedTime\":\"2021-10-30T01:17:20Z\",\"parameters\":{\"ormcqmic\":{\"type\":\"f\",\"isMandatory\":false,\"position\":995409191,\"defaultValue\":\"myw\"}},\"outputTypes\":[\"qpkzfbojxjmcsmy\",\"wixvcpwnkwywzw\"]},\"publishContentLink\":{\"uri\":\"lickduoi\",\"contentHash\":{\"algorithm\":\"amt\",\"value\":\"vsknxrwzawnv\"},\"version\":\"cfhzagxnvhycv\"},\"description\":\"mwrzregzgyufutrw\",\"logActivityTrace\":1907482272},\"name\":\"ye\",\"location\":\"kdhmeottawjyosx\",\"tags\":{\"p\":\"nhjtf\",\"ynudqllzsa\":\"dpmiljpn\",\"lxeehuxiq\":\"zp\",\"xls\":\"zlrayme\"}}")
            .toObject(RunbookCreateOrUpdateParametersInner.class);
        Assertions.assertEquals("ye", model.name());
        Assertions.assertEquals("kdhmeottawjyosx", model.location());
        Assertions.assertEquals("nhjtf", model.tags().get("p"));
        Assertions.assertEquals(true, model.logVerbose());
        Assertions.assertEquals(true, model.logProgress());
        Assertions.assertEquals(RunbookTypeEnum.PYTHON2, model.runbookType());
        Assertions.assertEquals(true, model.draft().inEdit());
        Assertions.assertEquals("lxiutgjcyzyzjdnr", model.draft().draftContentLink().uri());
        Assertions.assertEquals("btxjeaoqaqbzg", model.draft().draftContentLink().contentHash().algorithm());
        Assertions.assertEquals("hfw", model.draft().draftContentLink().contentHash().value());
        Assertions.assertEquals("uatbwbqamteuliy", model.draft().draftContentLink().version());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-17T06:47:53Z"), model.draft().creationTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-30T01:17:20Z"), model.draft().lastModifiedTime());
        Assertions.assertEquals("f", model.draft().parameters().get("ormcqmic").type());
        Assertions.assertEquals(false, model.draft().parameters().get("ormcqmic").isMandatory());
        Assertions.assertEquals(995409191, model.draft().parameters().get("ormcqmic").position());
        Assertions.assertEquals("myw", model.draft().parameters().get("ormcqmic").defaultValue());
        Assertions.assertEquals("qpkzfbojxjmcsmy", model.draft().outputTypes().get(0));
        Assertions.assertEquals("lickduoi", model.publishContentLink().uri());
        Assertions.assertEquals("amt", model.publishContentLink().contentHash().algorithm());
        Assertions.assertEquals("vsknxrwzawnv", model.publishContentLink().contentHash().value());
        Assertions.assertEquals("cfhzagxnvhycv", model.publishContentLink().version());
        Assertions.assertEquals("mwrzregzgyufutrw", model.description());
        Assertions.assertEquals(1907482272, model.logActivityTrace());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        RunbookCreateOrUpdateParametersInner model = new RunbookCreateOrUpdateParametersInner().withName("ye")
            .withLocation("kdhmeottawjyosx")
            .withTags(mapOf("p", "nhjtf", "ynudqllzsa", "dpmiljpn", "lxeehuxiq", "zp", "xls", "zlrayme"))
            .withLogVerbose(true)
            .withLogProgress(true)
            .withRunbookType(RunbookTypeEnum.PYTHON2)
            .withDraft(new RunbookDraftInner().withInEdit(true)
                .withDraftContentLink(new ContentLink().withUri("lxiutgjcyzyzjdnr")
                    .withContentHash(new ContentHash().withAlgorithm("btxjeaoqaqbzg").withValue("hfw"))
                    .withVersion("uatbwbqamteuliy"))
                .withCreationTime(OffsetDateTime.parse("2021-06-17T06:47:53Z"))
                .withLastModifiedTime(OffsetDateTime.parse("2021-10-30T01:17:20Z"))
                .withParameters(mapOf("ormcqmic",
                    new RunbookParameter().withType("f")
                        .withIsMandatory(false)
                        .withPosition(995409191)
                        .withDefaultValue("myw")))
                .withOutputTypes(Arrays.asList("qpkzfbojxjmcsmy", "wixvcpwnkwywzw")))
            .withPublishContentLink(new ContentLink().withUri("lickduoi")
                .withContentHash(new ContentHash().withAlgorithm("amt").withValue("vsknxrwzawnv"))
                .withVersion("cfhzagxnvhycv"))
            .withDescription("mwrzregzgyufutrw")
            .withLogActivityTrace(1907482272);
        model = BinaryData.fromObject(model).toObject(RunbookCreateOrUpdateParametersInner.class);
        Assertions.assertEquals("ye", model.name());
        Assertions.assertEquals("kdhmeottawjyosx", model.location());
        Assertions.assertEquals("nhjtf", model.tags().get("p"));
        Assertions.assertEquals(true, model.logVerbose());
        Assertions.assertEquals(true, model.logProgress());
        Assertions.assertEquals(RunbookTypeEnum.PYTHON2, model.runbookType());
        Assertions.assertEquals(true, model.draft().inEdit());
        Assertions.assertEquals("lxiutgjcyzyzjdnr", model.draft().draftContentLink().uri());
        Assertions.assertEquals("btxjeaoqaqbzg", model.draft().draftContentLink().contentHash().algorithm());
        Assertions.assertEquals("hfw", model.draft().draftContentLink().contentHash().value());
        Assertions.assertEquals("uatbwbqamteuliy", model.draft().draftContentLink().version());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-17T06:47:53Z"), model.draft().creationTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-30T01:17:20Z"), model.draft().lastModifiedTime());
        Assertions.assertEquals("f", model.draft().parameters().get("ormcqmic").type());
        Assertions.assertEquals(false, model.draft().parameters().get("ormcqmic").isMandatory());
        Assertions.assertEquals(995409191, model.draft().parameters().get("ormcqmic").position());
        Assertions.assertEquals("myw", model.draft().parameters().get("ormcqmic").defaultValue());
        Assertions.assertEquals("qpkzfbojxjmcsmy", model.draft().outputTypes().get(0));
        Assertions.assertEquals("lickduoi", model.publishContentLink().uri());
        Assertions.assertEquals("amt", model.publishContentLink().contentHash().algorithm());
        Assertions.assertEquals("vsknxrwzawnv", model.publishContentLink().contentHash().value());
        Assertions.assertEquals("cfhzagxnvhycv", model.publishContentLink().version());
        Assertions.assertEquals("mwrzregzgyufutrw", model.description());
        Assertions.assertEquals(1907482272, model.logActivityTrace());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
