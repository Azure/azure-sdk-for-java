// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.automation.fluent.models.JobInner;
import com.azure.resourcemanager.automation.models.JobProvisioningState;
import com.azure.resourcemanager.automation.models.JobStatus;
import com.azure.resourcemanager.automation.models.RunbookAssociationProperty;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class JobInnerTests {
    @Test
    public void testDeserialize() {
        JobInner model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"runbook\":{\"name\":\"bgbzbowxeqoclj\"},\"startedBy\":\"gvkzqkjjeokbze\",\"runOn\":\"zrxcczurt\",\"jobId\":\"5dddf30a-7923-4a30-b0f3-6918c0bd169f\",\"creationTime\":\"2021-06-04T04:58:20Z\",\"status\":\"Completed\",\"statusDetails\":\"kwv\",\"startTime\":\"2021-05-04T05:26Z\",\"endTime\":\"2021-10-11T16:58:27Z\",\"exception\":\"fbzdixzmqpnoda\",\"lastModifiedTime\":\"2021-03-28T06:43:22Z\",\"lastStatusModifiedTime\":\"2021-04-29T16:57Z\",\"parameters\":{\"eln\":\"jptmcgsbost\",\"utmzlbiojlvfhrbb\":\"la\"},\"provisioningState\":\"Processing\"},\"id\":\"qvcww\",\"name\":\"yurmochpprprs\",\"type\":\"mo\"}")
                .toObject(JobInner.class);
        Assertions.assertEquals("bgbzbowxeqoclj", model.runbook().name());
        Assertions.assertEquals("gvkzqkjjeokbze", model.startedBy());
        Assertions.assertEquals("zrxcczurt", model.runOn());
        Assertions.assertEquals(UUID.fromString("5dddf30a-7923-4a30-b0f3-6918c0bd169f"), model.jobId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-04T04:58:20Z"), model.creationTime());
        Assertions.assertEquals(JobStatus.COMPLETED, model.status());
        Assertions.assertEquals("kwv", model.statusDetails());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-04T05:26Z"), model.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-11T16:58:27Z"), model.endTime());
        Assertions.assertEquals("fbzdixzmqpnoda", model.exception());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-28T06:43:22Z"), model.lastModifiedTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-29T16:57Z"), model.lastStatusModifiedTime());
        Assertions.assertEquals("jptmcgsbost", model.parameters().get("eln"));
        Assertions.assertEquals(JobProvisioningState.PROCESSING, model.provisioningState());
    }

    @Test
    public void testSerialize() {
        JobInner model =
            new JobInner()
                .withRunbook(new RunbookAssociationProperty().withName("bgbzbowxeqoclj"))
                .withStartedBy("gvkzqkjjeokbze")
                .withRunOn("zrxcczurt")
                .withJobId(UUID.fromString("5dddf30a-7923-4a30-b0f3-6918c0bd169f"))
                .withCreationTime(OffsetDateTime.parse("2021-06-04T04:58:20Z"))
                .withStatus(JobStatus.COMPLETED)
                .withStatusDetails("kwv")
                .withStartTime(OffsetDateTime.parse("2021-05-04T05:26Z"))
                .withEndTime(OffsetDateTime.parse("2021-10-11T16:58:27Z"))
                .withException("fbzdixzmqpnoda")
                .withLastModifiedTime(OffsetDateTime.parse("2021-03-28T06:43:22Z"))
                .withLastStatusModifiedTime(OffsetDateTime.parse("2021-04-29T16:57Z"))
                .withParameters(mapOf("eln", "jptmcgsbost", "utmzlbiojlvfhrbb", "la"))
                .withProvisioningState(JobProvisioningState.PROCESSING);
        model = BinaryData.fromObject(model).toObject(JobInner.class);
        Assertions.assertEquals("bgbzbowxeqoclj", model.runbook().name());
        Assertions.assertEquals("gvkzqkjjeokbze", model.startedBy());
        Assertions.assertEquals("zrxcczurt", model.runOn());
        Assertions.assertEquals(UUID.fromString("5dddf30a-7923-4a30-b0f3-6918c0bd169f"), model.jobId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-04T04:58:20Z"), model.creationTime());
        Assertions.assertEquals(JobStatus.COMPLETED, model.status());
        Assertions.assertEquals("kwv", model.statusDetails());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-04T05:26Z"), model.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-11T16:58:27Z"), model.endTime());
        Assertions.assertEquals("fbzdixzmqpnoda", model.exception());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-28T06:43:22Z"), model.lastModifiedTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-29T16:57Z"), model.lastStatusModifiedTime());
        Assertions.assertEquals("jptmcgsbost", model.parameters().get("eln"));
        Assertions.assertEquals(JobProvisioningState.PROCESSING, model.provisioningState());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
