// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.automation.fluent.models.JobInner;
import com.azure.resourcemanager.automation.models.JobProvisioningState;
import com.azure.resourcemanager.automation.models.JobStatus;
import com.azure.resourcemanager.automation.models.RunbookAssociationProperty;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;
import org.junit.jupiter.api.Assertions;

public final class JobInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        JobInner model = BinaryData.fromString(
            "{\"properties\":{\"runbook\":{\"name\":\"flv\"},\"startedBy\":\"gzwywak\",\"runOn\":\"hknsmjbl\",\"jobId\":\"7fae13b1-ba69-4a2a-8af5-1538cc323b32\",\"creationTime\":\"2021-11-08T00:32:21Z\",\"status\":\"Resuming\",\"statusDetails\":\"mzotqyryu\",\"startTime\":\"2021-05-02T20:27:28Z\",\"endTime\":\"2021-03-01T02:30:44Z\",\"exception\":\"vxmvw\",\"lastModifiedTime\":\"2021-07-14T04:41:04Z\",\"lastStatusModifiedTime\":\"2021-10-07T06:26:08Z\",\"parameters\":{\"ujlzqnhcvsqltn\":\"nsup\",\"xfyqonmpqoxwdo\":\"oibgsxg\",\"iiqbi\":\"dbxiqx\"},\"provisioningState\":\"Succeeded\"},\"id\":\"mwwinhehfqpofv\",\"name\":\"bcblemb\",\"type\":\"kbwvqvxkdiv\"}")
            .toObject(JobInner.class);
        Assertions.assertEquals("flv", model.runbook().name());
        Assertions.assertEquals("gzwywak", model.startedBy());
        Assertions.assertEquals("hknsmjbl", model.runOn());
        Assertions.assertEquals(UUID.fromString("7fae13b1-ba69-4a2a-8af5-1538cc323b32"), model.jobId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-08T00:32:21Z"), model.creationTime());
        Assertions.assertEquals(JobStatus.RESUMING, model.status());
        Assertions.assertEquals("mzotqyryu", model.statusDetails());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-02T20:27:28Z"), model.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-01T02:30:44Z"), model.endTime());
        Assertions.assertEquals("vxmvw", model.exception());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-14T04:41:04Z"), model.lastModifiedTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-07T06:26:08Z"), model.lastStatusModifiedTime());
        Assertions.assertEquals("nsup", model.parameters().get("ujlzqnhcvsqltn"));
        Assertions.assertEquals(JobProvisioningState.SUCCEEDED, model.provisioningState());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        JobInner model = new JobInner().withRunbook(new RunbookAssociationProperty().withName("flv"))
            .withStartedBy("gzwywak")
            .withRunOn("hknsmjbl")
            .withJobId(UUID.fromString("7fae13b1-ba69-4a2a-8af5-1538cc323b32"))
            .withCreationTime(OffsetDateTime.parse("2021-11-08T00:32:21Z"))
            .withStatus(JobStatus.RESUMING)
            .withStatusDetails("mzotqyryu")
            .withStartTime(OffsetDateTime.parse("2021-05-02T20:27:28Z"))
            .withEndTime(OffsetDateTime.parse("2021-03-01T02:30:44Z"))
            .withException("vxmvw")
            .withLastModifiedTime(OffsetDateTime.parse("2021-07-14T04:41:04Z"))
            .withLastStatusModifiedTime(OffsetDateTime.parse("2021-10-07T06:26:08Z"))
            .withParameters(mapOf("ujlzqnhcvsqltn", "nsup", "xfyqonmpqoxwdo", "oibgsxg", "iiqbi", "dbxiqx"))
            .withProvisioningState(JobProvisioningState.SUCCEEDED);
        model = BinaryData.fromObject(model).toObject(JobInner.class);
        Assertions.assertEquals("flv", model.runbook().name());
        Assertions.assertEquals("gzwywak", model.startedBy());
        Assertions.assertEquals("hknsmjbl", model.runOn());
        Assertions.assertEquals(UUID.fromString("7fae13b1-ba69-4a2a-8af5-1538cc323b32"), model.jobId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-08T00:32:21Z"), model.creationTime());
        Assertions.assertEquals(JobStatus.RESUMING, model.status());
        Assertions.assertEquals("mzotqyryu", model.statusDetails());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-02T20:27:28Z"), model.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-01T02:30:44Z"), model.endTime());
        Assertions.assertEquals("vxmvw", model.exception());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-14T04:41:04Z"), model.lastModifiedTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-07T06:26:08Z"), model.lastStatusModifiedTime());
        Assertions.assertEquals("nsup", model.parameters().get("ujlzqnhcvsqltn"));
        Assertions.assertEquals(JobProvisioningState.SUCCEEDED, model.provisioningState());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
