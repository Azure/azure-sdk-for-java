// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.automation.AutomationManager;
import com.azure.resourcemanager.automation.models.Job;
import com.azure.resourcemanager.automation.models.JobProvisioningState;
import com.azure.resourcemanager.automation.models.JobStatus;
import com.azure.resourcemanager.automation.models.RunbookAssociationProperty;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class JobsCreateWithResponseMockTests {
    @Test
    public void testCreateWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"runbook\":{\"name\":\"ems\"},\"startedBy\":\"v\",\"runOn\":\"kqxetqmmliv\",\"jobId\":\"fc43c59f-e3c0-43a5-a5cb-87af1d6bad95\",\"creationTime\":\"2021-10-29T19:58:13Z\",\"status\":\"New\",\"statusDetails\":\"dchpojxlehzl\",\"startTime\":\"2021-04-29T09:33:37Z\",\"endTime\":\"2021-01-25T18:56:57Z\",\"exception\":\"wzpwiibel\",\"lastModifiedTime\":\"2021-07-29T22:02:08Z\",\"lastStatusModifiedTime\":\"2021-04-16T03:18:45Z\",\"parameters\":{\"xniu\":\"bpjxljtxbusqtb\"},\"provisioningState\":\"Suspended\"},\"id\":\"zhgbdgzpagsecn\",\"name\":\"db\",\"type\":\"wqrgxfllmqi\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(201);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        AutomationManager manager =
            AutomationManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        Job response =
            manager
                .jobs()
                .define("rulfuct")
                .withExistingAutomationAccount("sbvr", "aqgvto")
                .withRunbook(new RunbookAssociationProperty().withName("thcfj"))
                .withParameters(mapOf("tzzbeq", "lyubqjrostvrjeq", "alx", "ztr", "absr", "d"))
                .withRunOn("sn")
                .withClientRequestId("hpqatiwkkvyanxk")
                .create();

        Assertions.assertEquals("ems", response.runbook().name());
        Assertions.assertEquals("v", response.startedBy());
        Assertions.assertEquals("kqxetqmmliv", response.runOn());
        Assertions.assertEquals(UUID.fromString("fc43c59f-e3c0-43a5-a5cb-87af1d6bad95"), response.jobId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-29T19:58:13Z"), response.creationTime());
        Assertions.assertEquals(JobStatus.NEW, response.status());
        Assertions.assertEquals("dchpojxlehzl", response.statusDetails());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-29T09:33:37Z"), response.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-25T18:56:57Z"), response.endTime());
        Assertions.assertEquals("wzpwiibel", response.exception());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-29T22:02:08Z"), response.lastModifiedTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-16T03:18:45Z"), response.lastStatusModifiedTime());
        Assertions.assertEquals("bpjxljtxbusqtb", response.parameters().get("xniu"));
        Assertions.assertEquals(JobProvisioningState.SUSPENDED, response.provisioningState());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
