// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.automation.AutomationManager;
import com.azure.resourcemanager.automation.models.Job;
import com.azure.resourcemanager.automation.models.JobProvisioningState;
import com.azure.resourcemanager.automation.models.JobStatus;
import com.azure.resourcemanager.automation.models.RunbookAssociationProperty;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class JobsCreateWithResponseMockTests {
    @Test
    public void testCreateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"runbook\":{\"name\":\"hthvazjpwex\"},\"startedBy\":\"rzprobzzxe\",\"runOn\":\"nrkjgpjeuxsph\",\"jobId\":\"dab39e4f-fdb3-4063-831b-52c710fc5409\",\"creationTime\":\"2021-03-15T01:10:50Z\",\"status\":\"Running\",\"statusDetails\":\"jpdvzvfbhwbdquf\",\"startTime\":\"2021-01-18T22:04:24Z\",\"endTime\":\"2021-08-21T00:53:43Z\",\"exception\":\"laqrwyam\",\"lastModifiedTime\":\"2021-04-13T19:54:11Z\",\"lastStatusModifiedTime\":\"2021-03-21T09:06:36Z\",\"parameters\":{\"l\":\"zxfkjqutib\"},\"provisioningState\":\"Suspended\"},\"id\":\"trvrkpsab\",\"name\":\"u\",\"type\":\"vzm\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 201, responseStr.getBytes(StandardCharsets.UTF_8)));
        AutomationManager manager = AutomationManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        Job response = manager.jobs()
            .define("iikmoxrezsvavlrx")
            .withExistingAutomationAccount("vo", "ujx")
            .withRunbook(new RunbookAssociationProperty().withName("moywlu"))
            .withParameters(mapOf("ncnpat", "pcwybsz"))
            .withRunOn("tsaebwfwhxorpwa")
            .withClientRequestId("tzwugexojfccy")
            .create();

        Assertions.assertEquals("hthvazjpwex", response.runbook().name());
        Assertions.assertEquals("rzprobzzxe", response.startedBy());
        Assertions.assertEquals("nrkjgpjeuxsph", response.runOn());
        Assertions.assertEquals(UUID.fromString("dab39e4f-fdb3-4063-831b-52c710fc5409"), response.jobId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-15T01:10:50Z"), response.creationTime());
        Assertions.assertEquals(JobStatus.RUNNING, response.status());
        Assertions.assertEquals("jpdvzvfbhwbdquf", response.statusDetails());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-18T22:04:24Z"), response.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-21T00:53:43Z"), response.endTime());
        Assertions.assertEquals("laqrwyam", response.exception());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-13T19:54:11Z"), response.lastModifiedTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-21T09:06:36Z"), response.lastStatusModifiedTime());
        Assertions.assertEquals("zxfkjqutib", response.parameters().get("l"));
        Assertions.assertEquals(JobProvisioningState.SUSPENDED, response.provisioningState());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
