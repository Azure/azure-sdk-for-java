// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.automation.fluent.models.ConnectionTypeCreateOrUpdateProperties;
import com.azure.resourcemanager.automation.models.FieldDefinition;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class ConnectionTypeCreateOrUpdatePropertiesTests {
    @Test
    public void testDeserialize() {
        ConnectionTypeCreateOrUpdateProperties model =
            BinaryData
                .fromString(
                    "{\"isGlobal\":false,\"fieldDefinitions\":{\"ekrsgs\":{\"isEncrypted\":true,\"isOptional\":true,\"type\":\"sttijfybvp\"},\"njdgkynscliq\":{\"isEncrypted\":true,\"isOptional\":true,\"type\":\"zq\"}}}")
                .toObject(ConnectionTypeCreateOrUpdateProperties.class);
        Assertions.assertEquals(false, model.isGlobal());
        Assertions.assertEquals(true, model.fieldDefinitions().get("ekrsgs").isEncrypted());
        Assertions.assertEquals(true, model.fieldDefinitions().get("ekrsgs").isOptional());
        Assertions.assertEquals("sttijfybvp", model.fieldDefinitions().get("ekrsgs").type());
    }

    @Test
    public void testSerialize() {
        ConnectionTypeCreateOrUpdateProperties model =
            new ConnectionTypeCreateOrUpdateProperties()
                .withIsGlobal(false)
                .withFieldDefinitions(
                    mapOf(
                        "ekrsgs",
                        new FieldDefinition().withIsEncrypted(true).withIsOptional(true).withType("sttijfybvp"),
                        "njdgkynscliq",
                        new FieldDefinition().withIsEncrypted(true).withIsOptional(true).withType("zq")));
        model = BinaryData.fromObject(model).toObject(ConnectionTypeCreateOrUpdateProperties.class);
        Assertions.assertEquals(false, model.isGlobal());
        Assertions.assertEquals(true, model.fieldDefinitions().get("ekrsgs").isEncrypted());
        Assertions.assertEquals(true, model.fieldDefinitions().get("ekrsgs").isOptional());
        Assertions.assertEquals("sttijfybvp", model.fieldDefinitions().get("ekrsgs").type());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
