// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.util.Context;
import com.azure.resourcemanager.automation.AutomationManager;
import com.azure.resourcemanager.automation.models.DscNodeConfiguration;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class DscNodeConfigurationsListByAutomationAccountMockTests {
    @Test
    public void testListByAutomationAccount() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"value\":[{\"properties\":{\"lastModifiedTime\":\"2021-08-07T05:06:34Z\",\"creationTime\":\"2021-06-28T17:19:04Z\",\"configuration\":{\"name\":\"jzkxiidisczskos\"},\"source\":\"qiqazugamxzkr\",\"nodeCount\":5165149012779954329,\"incrementNodeConfigurationBuild\":true},\"id\":\"bamnppcc\",\"name\":\"kuztdsbezaxyfu\",\"type\":\"zxuizhyhnepkpe\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        AutomationManager manager =
            AutomationManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<DscNodeConfiguration> response =
            manager
                .dscNodeConfigurations()
                .listByAutomationAccount(
                    "iotzbpdbollgryfq",
                    "uasigr",
                    "wsocnequygdjbo",
                    1761317044,
                    1020746209,
                    "mtqjkqevadrmm",
                    Context.NONE);

        Assertions
            .assertEquals(OffsetDateTime.parse("2021-08-07T05:06:34Z"), response.iterator().next().lastModifiedTime());
        Assertions
            .assertEquals(OffsetDateTime.parse("2021-06-28T17:19:04Z"), response.iterator().next().creationTime());
        Assertions.assertEquals("jzkxiidisczskos", response.iterator().next().configuration().name());
        Assertions.assertEquals("qiqazugamxzkr", response.iterator().next().source());
        Assertions.assertEquals(5165149012779954329L, response.iterator().next().nodeCount());
        Assertions.assertEquals(true, response.iterator().next().incrementNodeConfigurationBuild());
    }
}
