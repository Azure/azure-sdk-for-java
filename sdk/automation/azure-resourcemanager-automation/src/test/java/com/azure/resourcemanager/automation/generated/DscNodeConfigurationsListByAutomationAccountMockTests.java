// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.automation.AutomationManager;
import com.azure.resourcemanager.automation.models.DscNodeConfiguration;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class DscNodeConfigurationsListByAutomationAccountMockTests {
    @Test
    public void testListByAutomationAccount() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"lastModifiedTime\":\"2021-11-14T15:28:33Z\",\"creationTime\":\"2021-07-30T22:46:37Z\",\"configuration\":{\"name\":\"ythqkkwhbgxvel\"},\"source\":\"ulnxdmnit\",\"nodeCount\":7153993027316867734,\"incrementNodeConfigurationBuild\":false},\"id\":\"mcl\",\"name\":\"ymffhmjpddnyx\",\"type\":\"zuvrzmzqmz\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AutomationManager manager = AutomationManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<DscNodeConfiguration> response = manager.dscNodeConfigurations()
            .listByAutomationAccount("esq", "ggvrbnyrukoilaci", "uwj", 111210342, 1296167740, "pjlh",
                com.azure.core.util.Context.NONE);

        Assertions.assertEquals(OffsetDateTime.parse("2021-11-14T15:28:33Z"),
            response.iterator().next().lastModifiedTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-30T22:46:37Z"),
            response.iterator().next().creationTime());
        Assertions.assertEquals("ythqkkwhbgxvel", response.iterator().next().configuration().name());
        Assertions.assertEquals("ulnxdmnit", response.iterator().next().source());
        Assertions.assertEquals(7153993027316867734L, response.iterator().next().nodeCount());
        Assertions.assertEquals(false, response.iterator().next().incrementNodeConfigurationBuild());
    }
}
