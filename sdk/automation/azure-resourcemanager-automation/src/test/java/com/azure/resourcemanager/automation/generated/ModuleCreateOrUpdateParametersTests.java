// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.automation.models.ContentLink;
import com.azure.resourcemanager.automation.models.ModuleCreateOrUpdateParameters;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class ModuleCreateOrUpdateParametersTests {
    @Test
    public void testDeserialize() {
        ModuleCreateOrUpdateParameters model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"contentLink\":{\"uri\":\"bmzyospsps\",\"version\":\"fkyjpmspbpssdfpp\"}},\"name\":\"gt\",\"location\":\"yujtvczkcnyx\",\"tags\":{\"glnkvxlxpagl\":\"unjdx\",\"hpzvuqdflvoniyp\":\"ivbgkcv\",\"idibgqjxgpn\":\"pubcpzgpxtivhjk\",\"kqmhhaowjr\":\"hgovfgp\"}}")
                .toObject(ModuleCreateOrUpdateParameters.class);
        Assertions.assertEquals("gt", model.name());
        Assertions.assertEquals("yujtvczkcnyx", model.location());
        Assertions.assertEquals("unjdx", model.tags().get("glnkvxlxpagl"));
        Assertions.assertEquals("bmzyospsps", model.contentLink().uri());
        Assertions.assertEquals("fkyjpmspbpssdfpp", model.contentLink().version());
    }

    @Test
    public void testSerialize() {
        ModuleCreateOrUpdateParameters model =
            new ModuleCreateOrUpdateParameters()
                .withName("gt")
                .withLocation("yujtvczkcnyx")
                .withTags(
                    mapOf(
                        "glnkvxlxpagl",
                        "unjdx",
                        "hpzvuqdflvoniyp",
                        "ivbgkcv",
                        "idibgqjxgpn",
                        "pubcpzgpxtivhjk",
                        "kqmhhaowjr",
                        "hgovfgp"))
                .withContentLink(new ContentLink().withUri("bmzyospsps").withVersion("fkyjpmspbpssdfpp"));
        model = BinaryData.fromObject(model).toObject(ModuleCreateOrUpdateParameters.class);
        Assertions.assertEquals("gt", model.name());
        Assertions.assertEquals("yujtvczkcnyx", model.location());
        Assertions.assertEquals("unjdx", model.tags().get("glnkvxlxpagl"));
        Assertions.assertEquals("bmzyospsps", model.contentLink().uri());
        Assertions.assertEquals("fkyjpmspbpssdfpp", model.contentLink().version());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
