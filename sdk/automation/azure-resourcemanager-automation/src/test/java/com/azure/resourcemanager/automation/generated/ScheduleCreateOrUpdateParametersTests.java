// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.automation.models.AdvancedSchedule;
import com.azure.resourcemanager.automation.models.ScheduleCreateOrUpdateParameters;
import com.azure.resourcemanager.automation.models.ScheduleFrequency;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class ScheduleCreateOrUpdateParametersTests {
    @Test
    public void testDeserialize() {
        ScheduleCreateOrUpdateParameters model =
            BinaryData
                .fromString(
                    "{\"name\":\"flrmymyi\",\"properties\":{\"description\":\"qlhris\",\"startTime\":\"2021-10-10T16:10:58Z\",\"expiryTime\":\"2021-07-05T12:47:55Z\",\"frequency\":\"OneTime\",\"timeZone\":\"ovgqcgxuugqkctot\",\"advancedSchedule\":{\"weekDays\":[\"xteqdptjgwdtg\"],\"monthDays\":[1145584294,694616965,28272947,1407942931],\"monthlyOccurrences\":[]}}}")
                .toObject(ScheduleCreateOrUpdateParameters.class);
        Assertions.assertEquals("flrmymyi", model.name());
        Assertions.assertEquals("qlhris", model.description());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-10T16:10:58Z"), model.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-05T12:47:55Z"), model.expiryTime());
        Assertions.assertEquals(ScheduleFrequency.ONE_TIME, model.frequency());
        Assertions.assertEquals("ovgqcgxuugqkctot", model.timeZone());
        Assertions.assertEquals("xteqdptjgwdtg", model.advancedSchedule().weekDays().get(0));
        Assertions.assertEquals(1145584294, model.advancedSchedule().monthDays().get(0));
    }

    @Test
    public void testSerialize() {
        ScheduleCreateOrUpdateParameters model =
            new ScheduleCreateOrUpdateParameters()
                .withName("flrmymyi")
                .withDescription("qlhris")
                .withStartTime(OffsetDateTime.parse("2021-10-10T16:10:58Z"))
                .withExpiryTime(OffsetDateTime.parse("2021-07-05T12:47:55Z"))
                .withFrequency(ScheduleFrequency.ONE_TIME)
                .withTimeZone("ovgqcgxuugqkctot")
                .withAdvancedSchedule(
                    new AdvancedSchedule()
                        .withWeekDays(Arrays.asList("xteqdptjgwdtg"))
                        .withMonthDays(Arrays.asList(1145584294, 694616965, 28272947, 1407942931))
                        .withMonthlyOccurrences(Arrays.asList()));
        model = BinaryData.fromObject(model).toObject(ScheduleCreateOrUpdateParameters.class);
        Assertions.assertEquals("flrmymyi", model.name());
        Assertions.assertEquals("qlhris", model.description());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-10T16:10:58Z"), model.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-05T12:47:55Z"), model.expiryTime());
        Assertions.assertEquals(ScheduleFrequency.ONE_TIME, model.frequency());
        Assertions.assertEquals("ovgqcgxuugqkctot", model.timeZone());
        Assertions.assertEquals("xteqdptjgwdtg", model.advancedSchedule().weekDays().get(0));
        Assertions.assertEquals(1145584294, model.advancedSchedule().monthDays().get(0));
    }
}
