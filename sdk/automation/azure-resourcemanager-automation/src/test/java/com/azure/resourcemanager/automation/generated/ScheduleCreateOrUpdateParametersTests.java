// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.automation.models.AdvancedSchedule;
import com.azure.resourcemanager.automation.models.AdvancedScheduleMonthlyOccurrence;
import com.azure.resourcemanager.automation.models.ScheduleCreateOrUpdateParameters;
import com.azure.resourcemanager.automation.models.ScheduleDay;
import com.azure.resourcemanager.automation.models.ScheduleFrequency;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class ScheduleCreateOrUpdateParametersTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ScheduleCreateOrUpdateParameters model = BinaryData.fromString(
            "{\"name\":\"huzqgn\",\"properties\":{\"description\":\"gkynscliqh\",\"startTime\":\"2020-12-25T01:29:23Z\",\"expiryTime\":\"2021-03-22T17:48:05Z\",\"interval\":\"datakomtkubotppn\",\"frequency\":\"Minute\",\"timeZone\":\"zxhi\",\"advancedSchedule\":{\"weekDays\":[\"b\"],\"monthDays\":[990480911,1145117333,1914293940],\"monthlyOccurrences\":[{\"occurrence\":1362620391,\"day\":\"Monday\"}]}}}")
            .toObject(ScheduleCreateOrUpdateParameters.class);
        Assertions.assertEquals("huzqgn", model.name());
        Assertions.assertEquals("gkynscliqh", model.description());
        Assertions.assertEquals(OffsetDateTime.parse("2020-12-25T01:29:23Z"), model.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-22T17:48:05Z"), model.expiryTime());
        Assertions.assertEquals(ScheduleFrequency.MINUTE, model.frequency());
        Assertions.assertEquals("zxhi", model.timeZone());
        Assertions.assertEquals("b", model.advancedSchedule().weekDays().get(0));
        Assertions.assertEquals(990480911, model.advancedSchedule().monthDays().get(0));
        Assertions.assertEquals(1362620391, model.advancedSchedule().monthlyOccurrences().get(0).occurrence());
        Assertions.assertEquals(ScheduleDay.MONDAY, model.advancedSchedule().monthlyOccurrences().get(0).day());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ScheduleCreateOrUpdateParameters model = new ScheduleCreateOrUpdateParameters().withName("huzqgn")
            .withDescription("gkynscliqh")
            .withStartTime(OffsetDateTime.parse("2020-12-25T01:29:23Z"))
            .withExpiryTime(OffsetDateTime.parse("2021-03-22T17:48:05Z"))
            .withInterval("datakomtkubotppn")
            .withFrequency(ScheduleFrequency.MINUTE)
            .withTimeZone("zxhi")
            .withAdvancedSchedule(new AdvancedSchedule().withWeekDays(Arrays.asList("b"))
                .withMonthDays(Arrays.asList(990480911, 1145117333, 1914293940))
                .withMonthlyOccurrences(Arrays.asList(
                    new AdvancedScheduleMonthlyOccurrence().withOccurrence(1362620391).withDay(ScheduleDay.MONDAY))));
        model = BinaryData.fromObject(model).toObject(ScheduleCreateOrUpdateParameters.class);
        Assertions.assertEquals("huzqgn", model.name());
        Assertions.assertEquals("gkynscliqh", model.description());
        Assertions.assertEquals(OffsetDateTime.parse("2020-12-25T01:29:23Z"), model.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-22T17:48:05Z"), model.expiryTime());
        Assertions.assertEquals(ScheduleFrequency.MINUTE, model.frequency());
        Assertions.assertEquals("zxhi", model.timeZone());
        Assertions.assertEquals("b", model.advancedSchedule().weekDays().get(0));
        Assertions.assertEquals(990480911, model.advancedSchedule().monthDays().get(0));
        Assertions.assertEquals(1362620391, model.advancedSchedule().monthlyOccurrences().get(0).occurrence());
        Assertions.assertEquals(ScheduleDay.MONDAY, model.advancedSchedule().monthlyOccurrences().get(0).day());
    }
}
