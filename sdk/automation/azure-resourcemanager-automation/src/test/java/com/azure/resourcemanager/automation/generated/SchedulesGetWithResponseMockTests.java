// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.automation.AutomationManager;
import com.azure.resourcemanager.automation.models.Schedule;
import com.azure.resourcemanager.automation.models.ScheduleDay;
import com.azure.resourcemanager.automation.models.ScheduleFrequency;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class SchedulesGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"startTime\":\"2021-05-24T15:27:10Z\",\"startTimeOffsetMinutes\":72.20799256189484,\"expiryTime\":\"2021-04-13T22:14:38Z\",\"expiryTimeOffsetMinutes\":2.8191470016039166,\"isEnabled\":false,\"nextRun\":\"2021-04-24T11:31:03Z\",\"nextRunOffsetMinutes\":82.2221909908588,\"interval\":\"dataquhczygxvh\",\"frequency\":\"Day\",\"timeZone\":\"e\",\"advancedSchedule\":{\"weekDays\":[\"whscozawmv\"],\"monthDays\":[798291972,1662075585],\"monthlyOccurrences\":[{\"occurrence\":1768452430,\"day\":\"Tuesday\"},{\"occurrence\":2070276635,\"day\":\"Thursday\"},{\"occurrence\":1005880965,\"day\":\"Friday\"}]},\"creationTime\":\"2021-05-11T14:32:20Z\",\"lastModifiedTime\":\"2021-03-04T07:28:46Z\",\"description\":\"dnmckap\"},\"id\":\"hknqiijge\",\"name\":\"cdgmoqu\",\"type\":\"qih\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AutomationManager manager = AutomationManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        Schedule response = manager.schedules()
            .getWithResponse("akhtmhobcyanrfvq", "vkhgv", "ogxkfnaoa", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals(OffsetDateTime.parse("2021-05-24T15:27:10Z"), response.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-13T22:14:38Z"), response.expiryTime());
        Assertions.assertEquals(2.8191470016039166D, response.expiryTimeOffsetMinutes());
        Assertions.assertEquals(false, response.isEnabled());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-24T11:31:03Z"), response.nextRun());
        Assertions.assertEquals(82.2221909908588D, response.nextRunOffsetMinutes());
        Assertions.assertEquals(ScheduleFrequency.DAY, response.frequency());
        Assertions.assertEquals("e", response.timeZone());
        Assertions.assertEquals("whscozawmv", response.advancedSchedule().weekDays().get(0));
        Assertions.assertEquals(798291972, response.advancedSchedule().monthDays().get(0));
        Assertions.assertEquals(1768452430, response.advancedSchedule().monthlyOccurrences().get(0).occurrence());
        Assertions.assertEquals(ScheduleDay.TUESDAY, response.advancedSchedule().monthlyOccurrences().get(0).day());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-11T14:32:20Z"), response.creationTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-04T07:28:46Z"), response.lastModifiedTime());
        Assertions.assertEquals("dnmckap", response.description());
    }
}
