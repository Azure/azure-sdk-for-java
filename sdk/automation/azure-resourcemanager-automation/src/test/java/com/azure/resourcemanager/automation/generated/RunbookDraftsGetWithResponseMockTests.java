// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.util.Context;
import com.azure.resourcemanager.automation.AutomationManager;
import com.azure.resourcemanager.automation.models.RunbookDraft;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class RunbookDraftsGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"inEdit\":true,\"draftContentLink\":{\"uri\":\"ofjsbgbwwzvdaj\",\"contentHash\":{\"algorithm\":\"nncfmaciqgjjrlhi\",\"value\":\"lwixvtbou\"},\"version\":\"xtndopgjttbasua\"},\"creationTime\":\"2021-03-08T06:18:44Z\",\"lastModifiedTime\":\"2021-01-15T04:43:01Z\",\"parameters\":{\"qvzfj\":{\"type\":\"eaqbkixv\",\"isMandatory\":false,\"position\":1750807185,\"defaultValue\":\"bb\"}},\"outputTypes\":[\"ugzfeuzjl\"]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        AutomationManager manager =
            AutomationManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        RunbookDraft response =
            manager.runbookDrafts().getWithResponse("pdtsdfjyiesocwi", "bu", "utmp", Context.NONE).getValue();

        Assertions.assertEquals(true, response.inEdit());
        Assertions.assertEquals("ofjsbgbwwzvdaj", response.draftContentLink().uri());
        Assertions.assertEquals("nncfmaciqgjjrlhi", response.draftContentLink().contentHash().algorithm());
        Assertions.assertEquals("lwixvtbou", response.draftContentLink().contentHash().value());
        Assertions.assertEquals("xtndopgjttbasua", response.draftContentLink().version());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-08T06:18:44Z"), response.creationTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-15T04:43:01Z"), response.lastModifiedTime());
        Assertions.assertEquals("eaqbkixv", response.parameters().get("qvzfj").type());
        Assertions.assertEquals(false, response.parameters().get("qvzfj").isMandatory());
        Assertions.assertEquals(1750807185, response.parameters().get("qvzfj").position());
        Assertions.assertEquals("bb", response.parameters().get("qvzfj").defaultValue());
        Assertions.assertEquals("ugzfeuzjl", response.outputTypes().get(0));
    }
}
