// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.automation.fluent.models.WatcherInner;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class WatcherInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        WatcherInner model = BinaryData.fromString(
            "{\"properties\":{\"executionFrequencyInSeconds\":6873379208566304564,\"scriptName\":\"rpmpdnqqskaw\",\"scriptParameters\":{\"npqfrtqlkzmeg\":\"vmm\",\"zyqdrfegcealzx\":\"itgvkx\"},\"scriptRunOn\":\"cansymoyqhlwigd\",\"status\":\"bkbxgomfa\",\"creationTime\":\"2021-01-02T04:50:38Z\",\"lastModifiedTime\":\"2021-04-21T20:12:36Z\",\"lastModifiedBy\":\"vdaeyyguxakjsq\",\"description\":\"zbezkgimsidxasic\"},\"etag\":\"yvvjskgfmo\",\"tags\":{\"hnakzyb\":\"hpqgatjeaahhvj\"},\"location\":\"jid\",\"id\":\"ksyxkyxvxevblbje\",\"name\":\"nljlageuaulx\",\"type\":\"nsmjbnkppxynen\"}")
            .toObject(WatcherInner.class);
        Assertions.assertEquals("yvvjskgfmo", model.etag());
        Assertions.assertEquals("hpqgatjeaahhvj", model.tags().get("hnakzyb"));
        Assertions.assertEquals("jid", model.location());
        Assertions.assertEquals(6873379208566304564L, model.executionFrequencyInSeconds());
        Assertions.assertEquals("rpmpdnqqskaw", model.scriptName());
        Assertions.assertEquals("vmm", model.scriptParameters().get("npqfrtqlkzmeg"));
        Assertions.assertEquals("cansymoyqhlwigd", model.scriptRunOn());
        Assertions.assertEquals("zbezkgimsidxasic", model.description());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        WatcherInner model = new WatcherInner().withEtag("yvvjskgfmo")
            .withTags(mapOf("hnakzyb", "hpqgatjeaahhvj"))
            .withLocation("jid")
            .withExecutionFrequencyInSeconds(6873379208566304564L)
            .withScriptName("rpmpdnqqskaw")
            .withScriptParameters(mapOf("npqfrtqlkzmeg", "vmm", "zyqdrfegcealzx", "itgvkx"))
            .withScriptRunOn("cansymoyqhlwigd")
            .withDescription("zbezkgimsidxasic");
        model = BinaryData.fromObject(model).toObject(WatcherInner.class);
        Assertions.assertEquals("yvvjskgfmo", model.etag());
        Assertions.assertEquals("hpqgatjeaahhvj", model.tags().get("hnakzyb"));
        Assertions.assertEquals("jid", model.location());
        Assertions.assertEquals(6873379208566304564L, model.executionFrequencyInSeconds());
        Assertions.assertEquals("rpmpdnqqskaw", model.scriptName());
        Assertions.assertEquals("vmm", model.scriptParameters().get("npqfrtqlkzmeg"));
        Assertions.assertEquals("cansymoyqhlwigd", model.scriptRunOn());
        Assertions.assertEquals("zbezkgimsidxasic", model.description());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
