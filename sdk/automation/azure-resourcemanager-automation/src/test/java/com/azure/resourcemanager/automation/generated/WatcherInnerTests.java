// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.automation.fluent.models.WatcherInner;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class WatcherInnerTests {
    @Test
    public void testDeserialize() {
        WatcherInner model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"executionFrequencyInSeconds\":2973722017967146384,\"scriptName\":\"zxuutkncwscwsvl\",\"scriptParameters\":{\"ykvceoveil\":\"ogtwrupqsxvnmi\"},\"scriptRunOn\":\"notyfjfcnjbkcn\",\"status\":\"hbttkphyw\",\"creationTime\":\"2021-09-28T11:00:41Z\",\"lastModifiedTime\":\"2021-08-05T14:11:47Z\",\"lastModifiedBy\":\"qnermclfplphoxu\",\"description\":\"rpabg\"},\"etag\":\"psbjta\",\"tags\":{\"fjz\":\"gxywpmue\",\"dsuyonobgla\":\"fqkquj\",\"tcc\":\"cq\"},\"location\":\"yudxytlmoy\",\"id\":\"xv\",\"name\":\"fudwpznt\",\"type\":\"hdzhlrqj\"}")
                .toObject(WatcherInner.class);
        Assertions.assertEquals("psbjta", model.etag());
        Assertions.assertEquals("gxywpmue", model.tags().get("fjz"));
        Assertions.assertEquals("yudxytlmoy", model.location());
        Assertions.assertEquals(2973722017967146384L, model.executionFrequencyInSeconds());
        Assertions.assertEquals("zxuutkncwscwsvl", model.scriptName());
        Assertions.assertEquals("ogtwrupqsxvnmi", model.scriptParameters().get("ykvceoveil"));
        Assertions.assertEquals("notyfjfcnjbkcn", model.scriptRunOn());
        Assertions.assertEquals("rpabg", model.description());
    }

    @Test
    public void testSerialize() {
        WatcherInner model =
            new WatcherInner()
                .withEtag("psbjta")
                .withTags(mapOf("fjz", "gxywpmue", "dsuyonobgla", "fqkquj", "tcc", "cq"))
                .withLocation("yudxytlmoy")
                .withExecutionFrequencyInSeconds(2973722017967146384L)
                .withScriptName("zxuutkncwscwsvl")
                .withScriptParameters(mapOf("ykvceoveil", "ogtwrupqsxvnmi"))
                .withScriptRunOn("notyfjfcnjbkcn")
                .withDescription("rpabg");
        model = BinaryData.fromObject(model).toObject(WatcherInner.class);
        Assertions.assertEquals("psbjta", model.etag());
        Assertions.assertEquals("gxywpmue", model.tags().get("fjz"));
        Assertions.assertEquals("yudxytlmoy", model.location());
        Assertions.assertEquals(2973722017967146384L, model.executionFrequencyInSeconds());
        Assertions.assertEquals("zxuutkncwscwsvl", model.scriptName());
        Assertions.assertEquals("ogtwrupqsxvnmi", model.scriptParameters().get("ykvceoveil"));
        Assertions.assertEquals("notyfjfcnjbkcn", model.scriptRunOn());
        Assertions.assertEquals("rpabg", model.description());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
