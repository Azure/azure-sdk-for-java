// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.automation.fluent.models.DscNodeConfigurationInner;
import com.azure.resourcemanager.automation.models.DscConfigurationAssociationProperty;
import com.azure.resourcemanager.automation.models.DscNodeConfigurationListResult;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class DscNodeConfigurationListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DscNodeConfigurationListResult model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"lastModifiedTime\":\"2020-12-23T02:33:27Z\",\"creationTime\":\"2021-09-30T15:05:34Z\",\"configuration\":{\"name\":\"ipazyxoegukgjnpi\"},\"source\":\"gygev\",\"nodeCount\":7286292196519696494,\"incrementNodeConfigurationBuild\":false},\"id\":\"mrbpizcdrqj\",\"name\":\"dpydn\",\"type\":\"yhxdeoejzicwi\"},{\"properties\":{\"lastModifiedTime\":\"2021-01-05T16:16:49Z\",\"creationTime\":\"2021-10-04T01:34:07Z\",\"configuration\":{\"name\":\"bishcbkhajdeyea\"},\"source\":\"p\",\"nodeCount\":873629526017351752,\"incrementNodeConfigurationBuild\":true},\"id\":\"buxwgip\",\"name\":\"honowkgshwank\",\"type\":\"xzbinjeputt\"},{\"properties\":{\"lastModifiedTime\":\"2021-05-20T18:16:24Z\",\"creationTime\":\"2021-05-14T13:15:55Z\",\"configuration\":{\"name\":\"qftiy\"},\"source\":\"rnkcqvyxlw\",\"nodeCount\":4276936142044234939,\"incrementNodeConfigurationBuild\":false},\"id\":\"ohoqqnwvlryav\",\"name\":\"hheunmmqhgyx\",\"type\":\"konocu\"}],\"nextLink\":\"klyaxuconu\",\"totalCount\":447504444}")
            .toObject(DscNodeConfigurationListResult.class);
        Assertions.assertEquals(OffsetDateTime.parse("2020-12-23T02:33:27Z"), model.value().get(0).lastModifiedTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-30T15:05:34Z"), model.value().get(0).creationTime());
        Assertions.assertEquals("ipazyxoegukgjnpi", model.value().get(0).configuration().name());
        Assertions.assertEquals("gygev", model.value().get(0).source());
        Assertions.assertEquals(7286292196519696494L, model.value().get(0).nodeCount());
        Assertions.assertEquals(false, model.value().get(0).incrementNodeConfigurationBuild());
        Assertions.assertEquals("klyaxuconu", model.nextLink());
        Assertions.assertEquals(447504444, model.totalCount());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DscNodeConfigurationListResult model
            = new DscNodeConfigurationListResult()
                .withValue(
                    Arrays
                        .asList(
                            new DscNodeConfigurationInner()
                                .withLastModifiedTime(OffsetDateTime.parse("2020-12-23T02:33:27Z"))
                                .withCreationTime(OffsetDateTime.parse("2021-09-30T15:05:34Z"))
                                .withConfiguration(
                                    new DscConfigurationAssociationProperty().withName("ipazyxoegukgjnpi"))
                                .withSource("gygev")
                                .withNodeCount(7286292196519696494L)
                                .withIncrementNodeConfigurationBuild(false),
                            new DscNodeConfigurationInner()
                                .withLastModifiedTime(OffsetDateTime.parse("2021-01-05T16:16:49Z"))
                                .withCreationTime(OffsetDateTime.parse("2021-10-04T01:34:07Z"))
                                .withConfiguration(
                                    new DscConfigurationAssociationProperty().withName("bishcbkhajdeyea"))
                                .withSource("p")
                                .withNodeCount(873629526017351752L)
                                .withIncrementNodeConfigurationBuild(true),
                            new DscNodeConfigurationInner()
                                .withLastModifiedTime(OffsetDateTime.parse("2021-05-20T18:16:24Z"))
                                .withCreationTime(OffsetDateTime.parse("2021-05-14T13:15:55Z"))
                                .withConfiguration(new DscConfigurationAssociationProperty().withName("qftiy"))
                                .withSource("rnkcqvyxlw")
                                .withNodeCount(4276936142044234939L)
                                .withIncrementNodeConfigurationBuild(false)))
                .withNextLink("klyaxuconu")
                .withTotalCount(447504444);
        model = BinaryData.fromObject(model).toObject(DscNodeConfigurationListResult.class);
        Assertions.assertEquals(OffsetDateTime.parse("2020-12-23T02:33:27Z"), model.value().get(0).lastModifiedTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-30T15:05:34Z"), model.value().get(0).creationTime());
        Assertions.assertEquals("ipazyxoegukgjnpi", model.value().get(0).configuration().name());
        Assertions.assertEquals("gygev", model.value().get(0).source());
        Assertions.assertEquals(7286292196519696494L, model.value().get(0).nodeCount());
        Assertions.assertEquals(false, model.value().get(0).incrementNodeConfigurationBuild());
        Assertions.assertEquals("klyaxuconu", model.nextLink());
        Assertions.assertEquals(447504444, model.totalCount());
    }
}
