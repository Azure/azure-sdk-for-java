// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.automation.models.DscCompilationJobCreateParameters;
import com.azure.resourcemanager.automation.models.DscConfigurationAssociationProperty;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DscCompilationJobCreateParametersTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DscCompilationJobCreateParameters model = BinaryData.fromString(
            "{\"properties\":{\"configuration\":{\"name\":\"kbeype\"},\"parameters\":{\"kt\":\"jmwvvj\",\"ffrzpwvlqdqgbiqy\":\"xsenhwlr\",\"vf\":\"ihkaetcktvfc\"},\"incrementNodeConfigurationBuild\":true},\"name\":\"m\",\"location\":\"tqhjfbebrjcx\",\"tags\":{\"phxepcyvahf\":\"uwutttxfvjrbi\",\"gidokgjljyoxgvcl\":\"ljkyqxjvuuj\",\"jhtxfvgxbfsmxne\":\"bgsncghkjeszzhb\"}}")
            .toObject(DscCompilationJobCreateParameters.class);
        Assertions.assertEquals("m", model.name());
        Assertions.assertEquals("tqhjfbebrjcx", model.location());
        Assertions.assertEquals("uwutttxfvjrbi", model.tags().get("phxepcyvahf"));
        Assertions.assertEquals("kbeype", model.configuration().name());
        Assertions.assertEquals("jmwvvj", model.parameters().get("kt"));
        Assertions.assertEquals(true, model.incrementNodeConfigurationBuild());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DscCompilationJobCreateParameters model = new DscCompilationJobCreateParameters().withName("m")
            .withLocation("tqhjfbebrjcx")
            .withTags(mapOf("phxepcyvahf", "uwutttxfvjrbi", "gidokgjljyoxgvcl", "ljkyqxjvuuj", "jhtxfvgxbfsmxne",
                "bgsncghkjeszzhb"))
            .withConfiguration(new DscConfigurationAssociationProperty().withName("kbeype"))
            .withParameters(mapOf("kt", "jmwvvj", "ffrzpwvlqdqgbiqy", "xsenhwlr", "vf", "ihkaetcktvfc"))
            .withIncrementNodeConfigurationBuild(true);
        model = BinaryData.fromObject(model).toObject(DscCompilationJobCreateParameters.class);
        Assertions.assertEquals("m", model.name());
        Assertions.assertEquals("tqhjfbebrjcx", model.location());
        Assertions.assertEquals("uwutttxfvjrbi", model.tags().get("phxepcyvahf"));
        Assertions.assertEquals("kbeype", model.configuration().name());
        Assertions.assertEquals("jmwvvj", model.parameters().get("kt"));
        Assertions.assertEquals(true, model.incrementNodeConfigurationBuild());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
