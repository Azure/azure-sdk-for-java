// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.automation.models.DscCompilationJobCreateParameters;
import com.azure.resourcemanager.automation.models.DscConfigurationAssociationProperty;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class DscCompilationJobCreateParametersTests {
    @Test
    public void testDeserialize() {
        DscCompilationJobCreateParameters model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"configuration\":{\"name\":\"eupfhyhltrpm\"},\"parameters\":{\"odsfcpkvxodpuozm\":\"mcmatuokthfuiu\",\"ktwh\":\"zydagfuaxbezyiuo\",\"o\":\"dxwzywqsmbsurexi\",\"fksymddystki\":\"yocf\"},\"incrementNodeConfigurationBuild\":true},\"name\":\"qyud\",\"location\":\"rrqnbpoczvyifqrv\",\"tags\":{\"d\":\"jsllrmv\",\"zwtruwiqzbqjvsov\":\"watkpnpulexxb\",\"hzdobpxjmflbvvnc\":\"yokacspkw\"}}")
                .toObject(DscCompilationJobCreateParameters.class);
        Assertions.assertEquals("qyud", model.name());
        Assertions.assertEquals("rrqnbpoczvyifqrv", model.location());
        Assertions.assertEquals("jsllrmv", model.tags().get("d"));
        Assertions.assertEquals("eupfhyhltrpm", model.configuration().name());
        Assertions.assertEquals("mcmatuokthfuiu", model.parameters().get("odsfcpkvxodpuozm"));
        Assertions.assertEquals(true, model.incrementNodeConfigurationBuild());
    }

    @Test
    public void testSerialize() {
        DscCompilationJobCreateParameters model =
            new DscCompilationJobCreateParameters()
                .withName("qyud")
                .withLocation("rrqnbpoczvyifqrv")
                .withTags(mapOf("d", "jsllrmv", "zwtruwiqzbqjvsov", "watkpnpulexxb", "hzdobpxjmflbvvnc", "yokacspkw"))
                .withConfiguration(new DscConfigurationAssociationProperty().withName("eupfhyhltrpm"))
                .withParameters(
                    mapOf(
                        "odsfcpkvxodpuozm",
                        "mcmatuokthfuiu",
                        "ktwh",
                        "zydagfuaxbezyiuo",
                        "o",
                        "dxwzywqsmbsurexi",
                        "fksymddystki",
                        "yocf"))
                .withIncrementNodeConfigurationBuild(true);
        model = BinaryData.fromObject(model).toObject(DscCompilationJobCreateParameters.class);
        Assertions.assertEquals("qyud", model.name());
        Assertions.assertEquals("rrqnbpoczvyifqrv", model.location());
        Assertions.assertEquals("jsllrmv", model.tags().get("d"));
        Assertions.assertEquals("eupfhyhltrpm", model.configuration().name());
        Assertions.assertEquals("mcmatuokthfuiu", model.parameters().get("odsfcpkvxodpuozm"));
        Assertions.assertEquals(true, model.incrementNodeConfigurationBuild());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
