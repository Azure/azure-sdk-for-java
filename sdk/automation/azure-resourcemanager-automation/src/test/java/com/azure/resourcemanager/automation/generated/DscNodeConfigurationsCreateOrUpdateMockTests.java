// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.automation.AutomationManager;
import com.azure.resourcemanager.automation.models.ContentSource;
import com.azure.resourcemanager.automation.models.ContentSourceType;
import com.azure.resourcemanager.automation.models.DscConfigurationAssociationProperty;
import com.azure.resourcemanager.automation.models.DscNodeConfiguration;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class DscNodeConfigurationsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"lastModifiedTime\":\"2021-06-08T22:40:53Z\",\"creationTime\":\"2021-01-09T02:35:52Z\",\"configuration\":{\"name\":\"ck\"},\"source\":\"ikxkxhneg\",\"nodeCount\":2785122180998227471,\"incrementNodeConfigurationBuild\":true},\"id\":\"h\",\"name\":\"me\",\"type\":\"lvukaobrlb\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        AutomationManager manager =
            AutomationManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        DscNodeConfiguration response =
            manager
                .dscNodeConfigurations()
                .define("hctmmkosz")
                .withExistingAutomationAccount("iarxqiubxdukec", "xdazv")
                .withTags(
                    mapOf(
                        "mxlbn",
                        "uuatvlmbjwcol",
                        "ahprzrvxhmtfhocn",
                        "tpc",
                        "isn",
                        "zcmjhngxnoqrxt",
                        "hepfwwtjfdoes",
                        "evhdlmydid"))
                .withName("utrpbr")
                .withSource(
                    new ContentSource()
                        .withType(ContentSourceType.URI)
                        .withValue("ntrpcaqkiof")
                        .withVersion("tfmhklbnldpvcb"))
                .withConfiguration(new DscConfigurationAssociationProperty().withName("ezyquw"))
                .withIncrementNodeConfigurationBuild(true)
                .create();

        Assertions.assertEquals(OffsetDateTime.parse("2021-06-08T22:40:53Z"), response.lastModifiedTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-09T02:35:52Z"), response.creationTime());
        Assertions.assertEquals("ck", response.configuration().name());
        Assertions.assertEquals("ikxkxhneg", response.source());
        Assertions.assertEquals(2785122180998227471L, response.nodeCount());
        Assertions.assertEquals(true, response.incrementNodeConfigurationBuild());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
