// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.automation.fluent.models.TestJobInner;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class TestJobInnerTests {
    @Test
    public void testDeserialize() {
        TestJobInner model =
            BinaryData
                .fromString(
                    "{\"creationTime\":\"2021-08-03T09:16:24Z\",\"status\":\"lpvmjcdoewbidy\",\"statusDetails\":\"eowxvgpi\",\"runOn\":\"eu\",\"startTime\":\"2021-03-10T23:36:09Z\",\"endTime\":\"2021-08-09T01:13:35Z\",\"exception\":\"c\",\"lastModifiedTime\":\"2021-05-30T07:04:22Z\",\"lastStatusModifiedTime\":\"2021-09-15T19:47Z\",\"parameters\":{\"hxepmrutzna\":\"ykhv\",\"lujdjltymkmv\":\"aobn\",\"pphkixkykxds\":\"uihywart\",\"emmucfxh\":\"j\"},\"logActivityTrace\":1886216092}")
                .toObject(TestJobInner.class);
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-03T09:16:24Z"), model.creationTime());
        Assertions.assertEquals("lpvmjcdoewbidy", model.status());
        Assertions.assertEquals("eowxvgpi", model.statusDetails());
        Assertions.assertEquals("eu", model.runOn());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-10T23:36:09Z"), model.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-09T01:13:35Z"), model.endTime());
        Assertions.assertEquals("c", model.exception());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-30T07:04:22Z"), model.lastModifiedTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-15T19:47Z"), model.lastStatusModifiedTime());
        Assertions.assertEquals("ykhv", model.parameters().get("hxepmrutzna"));
        Assertions.assertEquals(1886216092, model.logActivityTrace());
    }

    @Test
    public void testSerialize() {
        TestJobInner model =
            new TestJobInner()
                .withCreationTime(OffsetDateTime.parse("2021-08-03T09:16:24Z"))
                .withStatus("lpvmjcdoewbidy")
                .withStatusDetails("eowxvgpi")
                .withRunOn("eu")
                .withStartTime(OffsetDateTime.parse("2021-03-10T23:36:09Z"))
                .withEndTime(OffsetDateTime.parse("2021-08-09T01:13:35Z"))
                .withException("c")
                .withLastModifiedTime(OffsetDateTime.parse("2021-05-30T07:04:22Z"))
                .withLastStatusModifiedTime(OffsetDateTime.parse("2021-09-15T19:47Z"))
                .withParameters(
                    mapOf("hxepmrutzna", "ykhv", "lujdjltymkmv", "aobn", "pphkixkykxds", "uihywart", "emmucfxh", "j"))
                .withLogActivityTrace(1886216092);
        model = BinaryData.fromObject(model).toObject(TestJobInner.class);
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-03T09:16:24Z"), model.creationTime());
        Assertions.assertEquals("lpvmjcdoewbidy", model.status());
        Assertions.assertEquals("eowxvgpi", model.statusDetails());
        Assertions.assertEquals("eu", model.runOn());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-10T23:36:09Z"), model.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-09T01:13:35Z"), model.endTime());
        Assertions.assertEquals("c", model.exception());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-30T07:04:22Z"), model.lastModifiedTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-15T19:47Z"), model.lastStatusModifiedTime());
        Assertions.assertEquals("ykhv", model.parameters().get("hxepmrutzna"));
        Assertions.assertEquals(1886216092, model.logActivityTrace());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
