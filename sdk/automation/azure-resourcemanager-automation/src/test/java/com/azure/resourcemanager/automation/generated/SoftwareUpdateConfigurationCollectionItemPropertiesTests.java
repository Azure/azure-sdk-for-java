// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.automation.fluent.models.SoftwareUpdateConfigurationCollectionItemProperties;
import com.azure.resourcemanager.automation.models.AzureQueryProperties;
import com.azure.resourcemanager.automation.models.LinuxProperties;
import com.azure.resourcemanager.automation.models.LinuxUpdateClasses;
import com.azure.resourcemanager.automation.models.NonAzureQueryProperties;
import com.azure.resourcemanager.automation.models.OperatingSystemType;
import com.azure.resourcemanager.automation.models.ScheduleFrequency;
import com.azure.resourcemanager.automation.models.SoftwareUpdateConfigurationTasks;
import com.azure.resourcemanager.automation.models.TagOperators;
import com.azure.resourcemanager.automation.models.TagSettingsProperties;
import com.azure.resourcemanager.automation.models.TargetProperties;
import com.azure.resourcemanager.automation.models.TaskProperties;
import com.azure.resourcemanager.automation.models.UpdateConfiguration;
import com.azure.resourcemanager.automation.models.WindowsProperties;
import com.azure.resourcemanager.automation.models.WindowsUpdateClasses;
import java.time.Duration;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SoftwareUpdateConfigurationCollectionItemPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SoftwareUpdateConfigurationCollectionItemProperties model = BinaryData.fromString(
            "{\"updateConfiguration\":{\"operatingSystem\":\"Linux\",\"windows\":{\"includedUpdateClassifications\":\"ServicePack\",\"excludedKbNumbers\":[\"iowxi\"],\"includedKbNumbers\":[\"nxw\"],\"rebootSetting\":\"gnepz\"},\"linux\":{\"includedPackageClassifications\":\"Unclassified\",\"excludedPackageNameMasks\":[\"sbq\",\"qagwwrxaomz\"],\"includedPackageNameMasks\":[\"lrrcz\",\"zkhhltnjadhqo\"],\"rebootSetting\":\"jqoyueayfbpcm\"},\"duration\":\"PT42H8M37S\",\"azureVirtualMachines\":[\"rrueqthwmg\",\"mbscbbx\"],\"nonAzureComputerNames\":[\"hxiidlopedb\",\"dpyqyybxubmd\",\"afcbqw\",\"e\"],\"targets\":{\"azureQueries\":[{\"scope\":[\"acigel\",\"ohdbvqvwzkj\",\"pwbeonr\"],\"locations\":[\"zdqyb\",\"ceakxc\",\"tsoqfyiaseqchk\",\"ttzrazisgyki\"],\"tagSettings\":{\"tags\":{\"anbwzohmnrxxbso\":[],\"klinhmdptysprq\":[],\"gnzxojpslsvj\":[],\"pli\":[]},\"filterOperator\":\"Any\"}},{\"scope\":[\"oyxqvapcohhou\",\"qpqojxcxzrzd\",\"gdzbenr\",\"bcawetz\"],\"locations\":[\"tjwfljhznamtua\",\"mzwcjjncqt\",\"z\",\"izvg\"],\"tagSettings\":{\"tags\":{\"zuuvbxngrebw\":[],\"gahttzlswvaj\":[]},\"filterOperator\":\"Any\"}},{\"scope\":[\"x\"],\"locations\":[\"zasunwqrjzfrgq\",\"aohcmbuocn\",\"r\",\"hmbpyryxamebly\"],\"tagSettings\":{\"tags\":{\"fkmroc\":[],\"nehvsmt\":[],\"dlfp\":[],\"apucygvo\":[]},\"filterOperator\":\"All\"}}],\"nonAzureQueries\":[{\"functionAlias\":\"sxlghieegjlg\",\"workspaceId\":\"paseksgb\"},{\"functionAlias\":\"antuygdhgaqipirp\",\"workspaceId\":\"rqofulopmjnlexwh\"}]}},\"tasks\":{\"preTask\":{\"parameters\":{\"hu\":\"bke\",\"toyint\":\"uerct\"},\"source\":\"brlc\"},\"postTask\":{\"parameters\":{\"pcjttbstvjeaqn\":\"czkgofxyfsrucvcr\",\"mlghktuidvrmazlp\":\"mvvfko\",\"wvqsgny\":\"wwexymzvlazipbh\",\"patlbijp\":\"uuzivensrpmeyyvp\"},\"source\":\"sksrfhfvolmknbn\"}},\"frequency\":\"Month\",\"startTime\":\"2021-03-01T12:23:53Z\",\"creationTime\":\"2021-07-21T22:36:14Z\",\"lastModifiedTime\":\"2020-12-30T14:30:51Z\",\"provisioningState\":\"qa\",\"nextRun\":\"2021-08-05T10:26:57Z\"}")
            .toObject(SoftwareUpdateConfigurationCollectionItemProperties.class);
        Assertions.assertEquals(OperatingSystemType.LINUX, model.updateConfiguration().operatingSystem());
        Assertions.assertEquals(WindowsUpdateClasses.SERVICE_PACK,
            model.updateConfiguration().windows().includedUpdateClassifications());
        Assertions.assertEquals("iowxi", model.updateConfiguration().windows().excludedKbNumbers().get(0));
        Assertions.assertEquals("nxw", model.updateConfiguration().windows().includedKbNumbers().get(0));
        Assertions.assertEquals("gnepz", model.updateConfiguration().windows().rebootSetting());
        Assertions.assertEquals(LinuxUpdateClasses.UNCLASSIFIED,
            model.updateConfiguration().linux().includedPackageClassifications());
        Assertions.assertEquals("sbq", model.updateConfiguration().linux().excludedPackageNameMasks().get(0));
        Assertions.assertEquals("lrrcz", model.updateConfiguration().linux().includedPackageNameMasks().get(0));
        Assertions.assertEquals("jqoyueayfbpcm", model.updateConfiguration().linux().rebootSetting());
        Assertions.assertEquals(Duration.parse("PT42H8M37S"), model.updateConfiguration().duration());
        Assertions.assertEquals("rrueqthwmg", model.updateConfiguration().azureVirtualMachines().get(0));
        Assertions.assertEquals("hxiidlopedb", model.updateConfiguration().nonAzureComputerNames().get(0));
        Assertions.assertEquals("acigel", model.updateConfiguration().targets().azureQueries().get(0).scope().get(0));
        Assertions.assertEquals("zdqyb",
            model.updateConfiguration().targets().azureQueries().get(0).locations().get(0));
        Assertions.assertEquals(TagOperators.ANY,
            model.updateConfiguration().targets().azureQueries().get(0).tagSettings().filterOperator());
        Assertions.assertEquals("sxlghieegjlg",
            model.updateConfiguration().targets().nonAzureQueries().get(0).functionAlias());
        Assertions.assertEquals("paseksgb",
            model.updateConfiguration().targets().nonAzureQueries().get(0).workspaceId());
        Assertions.assertEquals("bke", model.tasks().preTask().parameters().get("hu"));
        Assertions.assertEquals("brlc", model.tasks().preTask().source());
        Assertions.assertEquals("czkgofxyfsrucvcr", model.tasks().postTask().parameters().get("pcjttbstvjeaqn"));
        Assertions.assertEquals("sksrfhfvolmknbn", model.tasks().postTask().source());
        Assertions.assertEquals(ScheduleFrequency.MONTH, model.frequency());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-01T12:23:53Z"), model.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-05T10:26:57Z"), model.nextRun());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SoftwareUpdateConfigurationCollectionItemProperties model
            = new SoftwareUpdateConfigurationCollectionItemProperties()
                .withUpdateConfiguration(new UpdateConfiguration().withOperatingSystem(OperatingSystemType.LINUX)
                    .withWindows(
                        new WindowsProperties().withIncludedUpdateClassifications(WindowsUpdateClasses.SERVICE_PACK)
                            .withExcludedKbNumbers(Arrays.asList("iowxi"))
                            .withIncludedKbNumbers(Arrays.asList("nxw"))
                            .withRebootSetting("gnepz"))
                    .withLinux(new LinuxProperties().withIncludedPackageClassifications(LinuxUpdateClasses.UNCLASSIFIED)
                        .withExcludedPackageNameMasks(Arrays.asList("sbq", "qagwwrxaomz"))
                        .withIncludedPackageNameMasks(Arrays.asList("lrrcz", "zkhhltnjadhqo"))
                        .withRebootSetting("jqoyueayfbpcm"))
                    .withDuration(Duration.parse("PT42H8M37S"))
                    .withAzureVirtualMachines(Arrays.asList("rrueqthwmg", "mbscbbx"))
                    .withNonAzureComputerNames(Arrays.asList("hxiidlopedb", "dpyqyybxubmd", "afcbqw", "e"))
                    .withTargets(new TargetProperties()
                        .withAzureQueries(Arrays.asList(
                            new AzureQueryProperties().withScope(Arrays.asList("acigel", "ohdbvqvwzkj", "pwbeonr"))
                                .withLocations(Arrays.asList("zdqyb", "ceakxc", "tsoqfyiaseqchk", "ttzrazisgyki"))
                                .withTagSettings(new TagSettingsProperties()
                                    .withTags(mapOf("anbwzohmnrxxbso", Arrays.asList(), "klinhmdptysprq",
                                        Arrays.asList(), "gnzxojpslsvj", Arrays.asList(), "pli", Arrays.asList()))
                                    .withFilterOperator(TagOperators.ANY)),
                            new AzureQueryProperties()
                                .withScope(Arrays.asList("oyxqvapcohhou", "qpqojxcxzrzd", "gdzbenr", "bcawetz"))
                                .withLocations(Arrays.asList("tjwfljhznamtua", "mzwcjjncqt", "z", "izvg"))
                                .withTagSettings(new TagSettingsProperties()
                                    .withTags(mapOf("zuuvbxngrebw", Arrays.asList(), "gahttzlswvaj", Arrays.asList()))
                                    .withFilterOperator(TagOperators.ANY)),
                            new AzureQueryProperties().withScope(Arrays.asList("x"))
                                .withLocations(Arrays.asList("zasunwqrjzfrgq", "aohcmbuocn", "r", "hmbpyryxamebly"))
                                .withTagSettings(new TagSettingsProperties()
                                    .withTags(mapOf("fkmroc", Arrays.asList(), "nehvsmt", Arrays.asList(), "dlfp",
                                        Arrays.asList(), "apucygvo", Arrays.asList()))
                                    .withFilterOperator(TagOperators.ALL))))
                        .withNonAzureQueries(Arrays.asList(
                            new NonAzureQueryProperties().withFunctionAlias("sxlghieegjlg").withWorkspaceId("paseksgb"),
                            new NonAzureQueryProperties().withFunctionAlias("antuygdhgaqipirp")
                                .withWorkspaceId("rqofulopmjnlexwh")))))
                .withTasks(new SoftwareUpdateConfigurationTasks()
                    .withPreTask(
                        new TaskProperties().withParameters(mapOf("hu", "bke", "toyint", "uerct")).withSource("brlc"))
                    .withPostTask(new TaskProperties()
                        .withParameters(mapOf("pcjttbstvjeaqn", "czkgofxyfsrucvcr", "mlghktuidvrmazlp", "mvvfko",
                            "wvqsgny", "wwexymzvlazipbh", "patlbijp", "uuzivensrpmeyyvp"))
                        .withSource("sksrfhfvolmknbn")))
                .withFrequency(ScheduleFrequency.MONTH)
                .withStartTime(OffsetDateTime.parse("2021-03-01T12:23:53Z"))
                .withNextRun(OffsetDateTime.parse("2021-08-05T10:26:57Z"));
        model = BinaryData.fromObject(model).toObject(SoftwareUpdateConfigurationCollectionItemProperties.class);
        Assertions.assertEquals(OperatingSystemType.LINUX, model.updateConfiguration().operatingSystem());
        Assertions.assertEquals(WindowsUpdateClasses.SERVICE_PACK,
            model.updateConfiguration().windows().includedUpdateClassifications());
        Assertions.assertEquals("iowxi", model.updateConfiguration().windows().excludedKbNumbers().get(0));
        Assertions.assertEquals("nxw", model.updateConfiguration().windows().includedKbNumbers().get(0));
        Assertions.assertEquals("gnepz", model.updateConfiguration().windows().rebootSetting());
        Assertions.assertEquals(LinuxUpdateClasses.UNCLASSIFIED,
            model.updateConfiguration().linux().includedPackageClassifications());
        Assertions.assertEquals("sbq", model.updateConfiguration().linux().excludedPackageNameMasks().get(0));
        Assertions.assertEquals("lrrcz", model.updateConfiguration().linux().includedPackageNameMasks().get(0));
        Assertions.assertEquals("jqoyueayfbpcm", model.updateConfiguration().linux().rebootSetting());
        Assertions.assertEquals(Duration.parse("PT42H8M37S"), model.updateConfiguration().duration());
        Assertions.assertEquals("rrueqthwmg", model.updateConfiguration().azureVirtualMachines().get(0));
        Assertions.assertEquals("hxiidlopedb", model.updateConfiguration().nonAzureComputerNames().get(0));
        Assertions.assertEquals("acigel", model.updateConfiguration().targets().azureQueries().get(0).scope().get(0));
        Assertions.assertEquals("zdqyb",
            model.updateConfiguration().targets().azureQueries().get(0).locations().get(0));
        Assertions.assertEquals(TagOperators.ANY,
            model.updateConfiguration().targets().azureQueries().get(0).tagSettings().filterOperator());
        Assertions.assertEquals("sxlghieegjlg",
            model.updateConfiguration().targets().nonAzureQueries().get(0).functionAlias());
        Assertions.assertEquals("paseksgb",
            model.updateConfiguration().targets().nonAzureQueries().get(0).workspaceId());
        Assertions.assertEquals("bke", model.tasks().preTask().parameters().get("hu"));
        Assertions.assertEquals("brlc", model.tasks().preTask().source());
        Assertions.assertEquals("czkgofxyfsrucvcr", model.tasks().postTask().parameters().get("pcjttbstvjeaqn"));
        Assertions.assertEquals("sksrfhfvolmknbn", model.tasks().postTask().source());
        Assertions.assertEquals(ScheduleFrequency.MONTH, model.frequency());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-01T12:23:53Z"), model.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-05T10:26:57Z"), model.nextRun());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
