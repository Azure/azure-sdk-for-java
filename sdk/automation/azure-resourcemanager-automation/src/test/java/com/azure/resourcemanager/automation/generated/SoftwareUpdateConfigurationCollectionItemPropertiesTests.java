// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.automation.fluent.models.SoftwareUpdateConfigurationCollectionItemProperties;
import com.azure.resourcemanager.automation.models.LinuxProperties;
import com.azure.resourcemanager.automation.models.LinuxUpdateClasses;
import com.azure.resourcemanager.automation.models.OperatingSystemType;
import com.azure.resourcemanager.automation.models.ScheduleFrequency;
import com.azure.resourcemanager.automation.models.SoftwareUpdateConfigurationTasks;
import com.azure.resourcemanager.automation.models.TargetProperties;
import com.azure.resourcemanager.automation.models.TaskProperties;
import com.azure.resourcemanager.automation.models.UpdateConfiguration;
import com.azure.resourcemanager.automation.models.WindowsProperties;
import com.azure.resourcemanager.automation.models.WindowsUpdateClasses;
import java.time.Duration;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class SoftwareUpdateConfigurationCollectionItemPropertiesTests {
    @Test
    public void testDeserialize() {
        SoftwareUpdateConfigurationCollectionItemProperties model =
            BinaryData
                .fromString(
                    "{\"updateConfiguration\":{\"operatingSystem\":\"Windows\",\"windows\":{\"includedUpdateClassifications\":\"Updates\",\"excludedKbNumbers\":[\"umiekkezzi\",\"hlyfjhdgqgg\"],\"includedKbNumbers\":[\"unygaeqid\",\"qfatpxllrxcyjm\"],\"rebootSetting\":\"dsuvarmywdmjsjqb\"},\"linux\":{\"includedPackageClassifications\":\"Security\",\"excludedPackageNameMasks\":[\"rw\",\"yc\"],\"includedPackageNameMasks\":[\"hp\",\"xkgymareqnajxqu\",\"jhkycub\"],\"rebootSetting\":\"dgssofwqmzqal\"},\"duration\":\"PT165H45M29S\",\"azureVirtualMachines\":[\"i\",\"pxacqqudfn\"],\"nonAzureComputerNames\":[\"baaa\",\"jyvayffimrzrtuz\",\"ogs\"],\"targets\":{\"azureQueries\":[],\"nonAzureQueries\":[]}},\"tasks\":{\"preTask\":{\"parameters\":{\"euzsoi\":\"wmewzsyy\"},\"source\":\"ud\"},\"postTask\":{\"parameters\":{\"ubpaxhe\":\"trthzvaytdwkqbr\",\"oaxoruzfgsqu\":\"iilivpdtiirqtd\"},\"source\":\"xrxxlep\"}},\"frequency\":\"Day\",\"startTime\":\"2021-04-30T17:23:06Z\",\"creationTime\":\"2021-06-08T08:24:15Z\",\"lastModifiedTime\":\"2021-03-29T03:09:07Z\",\"provisioningState\":\"wnwxuqlcvyd\",\"nextRun\":\"2021-07-15T02:51:17Z\"}")
                .toObject(SoftwareUpdateConfigurationCollectionItemProperties.class);
        Assertions.assertEquals(OperatingSystemType.WINDOWS, model.updateConfiguration().operatingSystem());
        Assertions
            .assertEquals(
                WindowsUpdateClasses.UPDATES, model.updateConfiguration().windows().includedUpdateClassifications());
        Assertions.assertEquals("umiekkezzi", model.updateConfiguration().windows().excludedKbNumbers().get(0));
        Assertions.assertEquals("unygaeqid", model.updateConfiguration().windows().includedKbNumbers().get(0));
        Assertions.assertEquals("dsuvarmywdmjsjqb", model.updateConfiguration().windows().rebootSetting());
        Assertions
            .assertEquals(
                LinuxUpdateClasses.SECURITY, model.updateConfiguration().linux().includedPackageClassifications());
        Assertions.assertEquals("rw", model.updateConfiguration().linux().excludedPackageNameMasks().get(0));
        Assertions.assertEquals("hp", model.updateConfiguration().linux().includedPackageNameMasks().get(0));
        Assertions.assertEquals("dgssofwqmzqal", model.updateConfiguration().linux().rebootSetting());
        Assertions.assertEquals(Duration.parse("PT165H45M29S"), model.updateConfiguration().duration());
        Assertions.assertEquals("i", model.updateConfiguration().azureVirtualMachines().get(0));
        Assertions.assertEquals("baaa", model.updateConfiguration().nonAzureComputerNames().get(0));
        Assertions.assertEquals("wmewzsyy", model.tasks().preTask().parameters().get("euzsoi"));
        Assertions.assertEquals("ud", model.tasks().preTask().source());
        Assertions.assertEquals("trthzvaytdwkqbr", model.tasks().postTask().parameters().get("ubpaxhe"));
        Assertions.assertEquals("xrxxlep", model.tasks().postTask().source());
        Assertions.assertEquals(ScheduleFrequency.DAY, model.frequency());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-30T17:23:06Z"), model.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-15T02:51:17Z"), model.nextRun());
    }

    @Test
    public void testSerialize() {
        SoftwareUpdateConfigurationCollectionItemProperties model =
            new SoftwareUpdateConfigurationCollectionItemProperties()
                .withUpdateConfiguration(
                    new UpdateConfiguration()
                        .withOperatingSystem(OperatingSystemType.WINDOWS)
                        .withWindows(
                            new WindowsProperties()
                                .withIncludedUpdateClassifications(WindowsUpdateClasses.UPDATES)
                                .withExcludedKbNumbers(Arrays.asList("umiekkezzi", "hlyfjhdgqgg"))
                                .withIncludedKbNumbers(Arrays.asList("unygaeqid", "qfatpxllrxcyjm"))
                                .withRebootSetting("dsuvarmywdmjsjqb"))
                        .withLinux(
                            new LinuxProperties()
                                .withIncludedPackageClassifications(LinuxUpdateClasses.SECURITY)
                                .withExcludedPackageNameMasks(Arrays.asList("rw", "yc"))
                                .withIncludedPackageNameMasks(Arrays.asList("hp", "xkgymareqnajxqu", "jhkycub"))
                                .withRebootSetting("dgssofwqmzqal"))
                        .withDuration(Duration.parse("PT165H45M29S"))
                        .withAzureVirtualMachines(Arrays.asList("i", "pxacqqudfn"))
                        .withNonAzureComputerNames(Arrays.asList("baaa", "jyvayffimrzrtuz", "ogs"))
                        .withTargets(
                            new TargetProperties()
                                .withAzureQueries(Arrays.asList())
                                .withNonAzureQueries(Arrays.asList())))
                .withTasks(
                    new SoftwareUpdateConfigurationTasks()
                        .withPreTask(new TaskProperties().withParameters(mapOf("euzsoi", "wmewzsyy")).withSource("ud"))
                        .withPostTask(
                            new TaskProperties()
                                .withParameters(mapOf("ubpaxhe", "trthzvaytdwkqbr", "oaxoruzfgsqu", "iilivpdtiirqtd"))
                                .withSource("xrxxlep")))
                .withFrequency(ScheduleFrequency.DAY)
                .withStartTime(OffsetDateTime.parse("2021-04-30T17:23:06Z"))
                .withNextRun(OffsetDateTime.parse("2021-07-15T02:51:17Z"));
        model = BinaryData.fromObject(model).toObject(SoftwareUpdateConfigurationCollectionItemProperties.class);
        Assertions.assertEquals(OperatingSystemType.WINDOWS, model.updateConfiguration().operatingSystem());
        Assertions
            .assertEquals(
                WindowsUpdateClasses.UPDATES, model.updateConfiguration().windows().includedUpdateClassifications());
        Assertions.assertEquals("umiekkezzi", model.updateConfiguration().windows().excludedKbNumbers().get(0));
        Assertions.assertEquals("unygaeqid", model.updateConfiguration().windows().includedKbNumbers().get(0));
        Assertions.assertEquals("dsuvarmywdmjsjqb", model.updateConfiguration().windows().rebootSetting());
        Assertions
            .assertEquals(
                LinuxUpdateClasses.SECURITY, model.updateConfiguration().linux().includedPackageClassifications());
        Assertions.assertEquals("rw", model.updateConfiguration().linux().excludedPackageNameMasks().get(0));
        Assertions.assertEquals("hp", model.updateConfiguration().linux().includedPackageNameMasks().get(0));
        Assertions.assertEquals("dgssofwqmzqal", model.updateConfiguration().linux().rebootSetting());
        Assertions.assertEquals(Duration.parse("PT165H45M29S"), model.updateConfiguration().duration());
        Assertions.assertEquals("i", model.updateConfiguration().azureVirtualMachines().get(0));
        Assertions.assertEquals("baaa", model.updateConfiguration().nonAzureComputerNames().get(0));
        Assertions.assertEquals("wmewzsyy", model.tasks().preTask().parameters().get("euzsoi"));
        Assertions.assertEquals("ud", model.tasks().preTask().source());
        Assertions.assertEquals("trthzvaytdwkqbr", model.tasks().postTask().parameters().get("ubpaxhe"));
        Assertions.assertEquals("xrxxlep", model.tasks().postTask().source());
        Assertions.assertEquals(ScheduleFrequency.DAY, model.frequency());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-30T17:23:06Z"), model.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-15T02:51:17Z"), model.nextRun());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
