// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.automation.fluent.models.WebhookProperties;
import com.azure.resourcemanager.automation.models.RunbookAssociationProperty;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class WebhookPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        WebhookProperties model = BinaryData.fromString(
            "{\"isEnabled\":true,\"uri\":\"sllywpvtio\",\"expiryTime\":\"2021-03-19T09:45:55Z\",\"lastInvokedTime\":\"2021-01-17T16:46:19Z\",\"parameters\":{\"wsocnequygdjbo\":\"llgryfqiuasigr\",\"evadrmmwiu\":\"grmtqjk\"},\"runbook\":{\"name\":\"c\"},\"runOn\":\"z\",\"creationTime\":\"2021-02-06T22:47:44Z\",\"lastModifiedTime\":\"2021-01-09T18:12:31Z\",\"lastModifiedBy\":\"czskoswoqiqazu\",\"description\":\"mxzkr\"}")
            .toObject(WebhookProperties.class);
        Assertions.assertEquals(true, model.isEnabled());
        Assertions.assertEquals("sllywpvtio", model.uri());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-19T09:45:55Z"), model.expiryTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-17T16:46:19Z"), model.lastInvokedTime());
        Assertions.assertEquals("llgryfqiuasigr", model.parameters().get("wsocnequygdjbo"));
        Assertions.assertEquals("c", model.runbook().name());
        Assertions.assertEquals("z", model.runOn());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-06T22:47:44Z"), model.creationTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-09T18:12:31Z"), model.lastModifiedTime());
        Assertions.assertEquals("czskoswoqiqazu", model.lastModifiedBy());
        Assertions.assertEquals("mxzkr", model.description());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        WebhookProperties model = new WebhookProperties().withIsEnabled(true)
            .withUri("sllywpvtio")
            .withExpiryTime(OffsetDateTime.parse("2021-03-19T09:45:55Z"))
            .withLastInvokedTime(OffsetDateTime.parse("2021-01-17T16:46:19Z"))
            .withParameters(mapOf("wsocnequygdjbo", "llgryfqiuasigr", "evadrmmwiu", "grmtqjk"))
            .withRunbook(new RunbookAssociationProperty().withName("c"))
            .withRunOn("z")
            .withCreationTime(OffsetDateTime.parse("2021-02-06T22:47:44Z"))
            .withLastModifiedTime(OffsetDateTime.parse("2021-01-09T18:12:31Z"))
            .withLastModifiedBy("czskoswoqiqazu")
            .withDescription("mxzkr");
        model = BinaryData.fromObject(model).toObject(WebhookProperties.class);
        Assertions.assertEquals(true, model.isEnabled());
        Assertions.assertEquals("sllywpvtio", model.uri());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-19T09:45:55Z"), model.expiryTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-17T16:46:19Z"), model.lastInvokedTime());
        Assertions.assertEquals("llgryfqiuasigr", model.parameters().get("wsocnequygdjbo"));
        Assertions.assertEquals("c", model.runbook().name());
        Assertions.assertEquals("z", model.runOn());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-06T22:47:44Z"), model.creationTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-09T18:12:31Z"), model.lastModifiedTime());
        Assertions.assertEquals("czskoswoqiqazu", model.lastModifiedBy());
        Assertions.assertEquals("mxzkr", model.description());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
