// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.automation.fluent.models.WebhookProperties;
import com.azure.resourcemanager.automation.models.RunbookAssociationProperty;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class WebhookPropertiesTests {
    @Test
    public void testDeserialize() {
        WebhookProperties model =
            BinaryData
                .fromString(
                    "{\"isEnabled\":false,\"uri\":\"ztppriolxorjalto\",\"expiryTime\":\"2021-09-21T06:29:04Z\",\"lastInvokedTime\":\"2021-11-30T02:44:30Z\",\"parameters\":{\"ucqdpfuvglsb\":\"bqwcsdbnwdcf\",\"cormr\":\"jcanvxbvtvudut\",\"f\":\"xqtvcofu\",\"u\":\"vkg\"},\"runbook\":{\"name\":\"knnqvsaznq\"},\"runOn\":\"orudsgsa\",\"creationTime\":\"2021-06-13T19:03:44Z\",\"lastModifiedTime\":\"2021-08-21T03:16:12Z\",\"lastModifiedBy\":\"rauwjuetaebu\",\"description\":\"vdmovsmzlxwabm\"}")
                .toObject(WebhookProperties.class);
        Assertions.assertEquals(false, model.isEnabled());
        Assertions.assertEquals("ztppriolxorjalto", model.uri());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-21T06:29:04Z"), model.expiryTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-30T02:44:30Z"), model.lastInvokedTime());
        Assertions.assertEquals("bqwcsdbnwdcf", model.parameters().get("ucqdpfuvglsb"));
        Assertions.assertEquals("knnqvsaznq", model.runbook().name());
        Assertions.assertEquals("orudsgsa", model.runOn());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-13T19:03:44Z"), model.creationTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-21T03:16:12Z"), model.lastModifiedTime());
        Assertions.assertEquals("rauwjuetaebu", model.lastModifiedBy());
        Assertions.assertEquals("vdmovsmzlxwabm", model.description());
    }

    @Test
    public void testSerialize() {
        WebhookProperties model =
            new WebhookProperties()
                .withIsEnabled(false)
                .withUri("ztppriolxorjalto")
                .withExpiryTime(OffsetDateTime.parse("2021-09-21T06:29:04Z"))
                .withLastInvokedTime(OffsetDateTime.parse("2021-11-30T02:44:30Z"))
                .withParameters(
                    mapOf("ucqdpfuvglsb", "bqwcsdbnwdcf", "cormr", "jcanvxbvtvudut", "f", "xqtvcofu", "u", "vkg"))
                .withRunbook(new RunbookAssociationProperty().withName("knnqvsaznq"))
                .withRunOn("orudsgsa")
                .withCreationTime(OffsetDateTime.parse("2021-06-13T19:03:44Z"))
                .withLastModifiedTime(OffsetDateTime.parse("2021-08-21T03:16:12Z"))
                .withLastModifiedBy("rauwjuetaebu")
                .withDescription("vdmovsmzlxwabm");
        model = BinaryData.fromObject(model).toObject(WebhookProperties.class);
        Assertions.assertEquals(false, model.isEnabled());
        Assertions.assertEquals("ztppriolxorjalto", model.uri());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-21T06:29:04Z"), model.expiryTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-30T02:44:30Z"), model.lastInvokedTime());
        Assertions.assertEquals("bqwcsdbnwdcf", model.parameters().get("ucqdpfuvglsb"));
        Assertions.assertEquals("knnqvsaznq", model.runbook().name());
        Assertions.assertEquals("orudsgsa", model.runOn());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-13T19:03:44Z"), model.creationTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-21T03:16:12Z"), model.lastModifiedTime());
        Assertions.assertEquals("rauwjuetaebu", model.lastModifiedBy());
        Assertions.assertEquals("vdmovsmzlxwabm", model.description());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
