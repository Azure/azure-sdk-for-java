// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.automation.fluent.models.HybridRunbookWorkerProperties;
import com.azure.resourcemanager.automation.models.WorkerType;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;

public final class HybridRunbookWorkerPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        HybridRunbookWorkerProperties model = BinaryData.fromString(
            "{\"ip\":\"qkfrbzgowoxqmj\",\"registeredDateTime\":\"2021-11-14T01:37:52Z\",\"lastSeenDateTime\":\"2021-01-11T13:11:02Z\",\"vmResourceId\":\"yqgxhlus\",\"workerType\":\"HybridV2\",\"workerName\":\"simjceagbjqvlsu\"}")
            .toObject(HybridRunbookWorkerProperties.class);
        Assertions.assertEquals("qkfrbzgowoxqmj", model.ip());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-14T01:37:52Z"), model.registeredDateTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-11T13:11:02Z"), model.lastSeenDateTime());
        Assertions.assertEquals("yqgxhlus", model.vmResourceId());
        Assertions.assertEquals(WorkerType.HYBRID_V2, model.workerType());
        Assertions.assertEquals("simjceagbjqvlsu", model.workerName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        HybridRunbookWorkerProperties model = new HybridRunbookWorkerProperties().withIp("qkfrbzgowoxqmj")
            .withRegisteredDateTime(OffsetDateTime.parse("2021-11-14T01:37:52Z"))
            .withLastSeenDateTime(OffsetDateTime.parse("2021-01-11T13:11:02Z"))
            .withVmResourceId("yqgxhlus")
            .withWorkerType(WorkerType.HYBRID_V2)
            .withWorkerName("simjceagbjqvlsu");
        model = BinaryData.fromObject(model).toObject(HybridRunbookWorkerProperties.class);
        Assertions.assertEquals("qkfrbzgowoxqmj", model.ip());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-14T01:37:52Z"), model.registeredDateTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-11T13:11:02Z"), model.lastSeenDateTime());
        Assertions.assertEquals("yqgxhlus", model.vmResourceId());
        Assertions.assertEquals(WorkerType.HYBRID_V2, model.workerType());
        Assertions.assertEquals("simjceagbjqvlsu", model.workerName());
    }
}
