// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.automation.fluent.models.HybridRunbookWorkerProperties;
import com.azure.resourcemanager.automation.models.WorkerType;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class HybridRunbookWorkerPropertiesTests {
    @Test
    public void testDeserialize() {
        HybridRunbookWorkerProperties model =
            BinaryData
                .fromString(
                    "{\"ip\":\"qwmkyoquf\",\"registeredDateTime\":\"2020-12-26T22:45:59Z\",\"lastSeenDateTime\":\"2021-09-02T10:29:16Z\",\"vmResourceId\":\"lzo\",\"workerType\":\"HybridV1\",\"workerName\":\"tfnmdx\"}")
                .toObject(HybridRunbookWorkerProperties.class);
        Assertions.assertEquals("qwmkyoquf", model.ip());
        Assertions.assertEquals(OffsetDateTime.parse("2020-12-26T22:45:59Z"), model.registeredDateTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-02T10:29:16Z"), model.lastSeenDateTime());
        Assertions.assertEquals("lzo", model.vmResourceId());
        Assertions.assertEquals(WorkerType.HYBRID_V1, model.workerType());
        Assertions.assertEquals("tfnmdx", model.workerName());
    }

    @Test
    public void testSerialize() {
        HybridRunbookWorkerProperties model =
            new HybridRunbookWorkerProperties()
                .withIp("qwmkyoquf")
                .withRegisteredDateTime(OffsetDateTime.parse("2020-12-26T22:45:59Z"))
                .withLastSeenDateTime(OffsetDateTime.parse("2021-09-02T10:29:16Z"))
                .withVmResourceId("lzo")
                .withWorkerType(WorkerType.HYBRID_V1)
                .withWorkerName("tfnmdx");
        model = BinaryData.fromObject(model).toObject(HybridRunbookWorkerProperties.class);
        Assertions.assertEquals("qwmkyoquf", model.ip());
        Assertions.assertEquals(OffsetDateTime.parse("2020-12-26T22:45:59Z"), model.registeredDateTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-02T10:29:16Z"), model.lastSeenDateTime());
        Assertions.assertEquals("lzo", model.vmResourceId());
        Assertions.assertEquals(WorkerType.HYBRID_V1, model.workerType());
        Assertions.assertEquals("tfnmdx", model.workerName());
    }
}
