// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.automation.fluent.models.JobScheduleInner;
import com.azure.resourcemanager.automation.models.JobScheduleListResult;
import com.azure.resourcemanager.automation.models.RunbookAssociationProperty;
import com.azure.resourcemanager.automation.models.ScheduleAssociationProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class JobScheduleListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        JobScheduleListResult model = BinaryData.fromString(
            "{\"value\":[{\"id\":\"rnsvbuswd\",\"name\":\"yybyc\",\"type\":\"nvjsrtkfa\",\"properties\":{\"jobScheduleId\":\"pqgik\",\"schedule\":{\"name\":\"rtxdyuxzejnt\"},\"runbook\":{\"name\":\"wgioilqukry\"},\"runOn\":\"tqmieox\",\"parameters\":{\"havgrvk\":\"gufhyaomtbg\",\"jzhpjbibgjmfx\":\"fo\",\"cluyovwxnbkf\":\"mv\"}}},{\"id\":\"zxscyhwzdgirujb\",\"name\":\"omvzzbtd\",\"type\":\"vp\",\"properties\":{\"jobScheduleId\":\"ujviylwdshfs\",\"schedule\":{\"name\":\"bgye\"},\"runbook\":{\"name\":\"msgaoj\"},\"runOn\":\"wncot\",\"parameters\":{\"yczuhxacpq\":\"hirctymoxoftpipi\"}}},{\"id\":\"ihhyuspskasd\",\"name\":\"mfwdgzxu\",\"type\":\"cvpa\",\"properties\":{\"jobScheduleId\":\"reuzvxurisjn\",\"schedule\":{\"name\":\"txifqj\"},\"runbook\":{\"name\":\"mrhublwpc\"},\"runOn\":\"utr\",\"parameters\":{\"qhih\":\"pauutpw\",\"fqntcyp\":\"jqgwzp\"}}},{\"id\":\"jv\",\"name\":\"imwkslircizj\",\"type\":\"ydfce\",\"properties\":{\"jobScheduleId\":\"lhvygdyftu\",\"schedule\":{\"name\":\"wnawjslbiw\"},\"runbook\":{\"name\":\"gcyztsfmznbae\"},\"runOn\":\"hchqnrnrpx\",\"parameters\":{\"mvikl\":\"wrykqgai\",\"hbejdznxcvdsrhnj\":\"ydv\",\"v\":\"volvtn\",\"mjdftu\":\"fzg\"}}}],\"nextLink\":\"ltducea\"}")
            .toObject(JobScheduleListResult.class);
        Assertions.assertEquals("pqgik", model.value().get(0).jobScheduleId());
        Assertions.assertEquals("rtxdyuxzejnt", model.value().get(0).schedule().name());
        Assertions.assertEquals("wgioilqukry", model.value().get(0).runbook().name());
        Assertions.assertEquals("tqmieox", model.value().get(0).runOn());
        Assertions.assertEquals("gufhyaomtbg", model.value().get(0).parameters().get("havgrvk"));
        Assertions.assertEquals("ltducea", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        JobScheduleListResult model = new JobScheduleListResult().withValue(Arrays.asList(
            new JobScheduleInner().withJobScheduleId("pqgik")
                .withSchedule(new ScheduleAssociationProperty().withName("rtxdyuxzejnt"))
                .withRunbook(new RunbookAssociationProperty().withName("wgioilqukry"))
                .withRunOn("tqmieox")
                .withParameters(mapOf("havgrvk", "gufhyaomtbg", "jzhpjbibgjmfx", "fo", "cluyovwxnbkf", "mv")),
            new JobScheduleInner().withJobScheduleId("ujviylwdshfs")
                .withSchedule(new ScheduleAssociationProperty().withName("bgye"))
                .withRunbook(new RunbookAssociationProperty().withName("msgaoj"))
                .withRunOn("wncot")
                .withParameters(mapOf("yczuhxacpq", "hirctymoxoftpipi")),
            new JobScheduleInner().withJobScheduleId("reuzvxurisjn")
                .withSchedule(new ScheduleAssociationProperty().withName("txifqj"))
                .withRunbook(new RunbookAssociationProperty().withName("mrhublwpc"))
                .withRunOn("utr")
                .withParameters(mapOf("qhih", "pauutpw", "fqntcyp", "jqgwzp")),
            new JobScheduleInner().withJobScheduleId("lhvygdyftu")
                .withSchedule(new ScheduleAssociationProperty().withName("wnawjslbiw"))
                .withRunbook(new RunbookAssociationProperty().withName("gcyztsfmznbae"))
                .withRunOn("hchqnrnrpx")
                .withParameters(mapOf("mvikl", "wrykqgai", "hbejdznxcvdsrhnj", "ydv", "v", "volvtn", "mjdftu", "fzg"))))
            .withNextLink("ltducea");
        model = BinaryData.fromObject(model).toObject(JobScheduleListResult.class);
        Assertions.assertEquals("pqgik", model.value().get(0).jobScheduleId());
        Assertions.assertEquals("rtxdyuxzejnt", model.value().get(0).schedule().name());
        Assertions.assertEquals("wgioilqukry", model.value().get(0).runbook().name());
        Assertions.assertEquals("tqmieox", model.value().get(0).runOn());
        Assertions.assertEquals("gufhyaomtbg", model.value().get(0).parameters().get("havgrvk"));
        Assertions.assertEquals("ltducea", model.nextLink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
