// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.automation.fluent.models.JobScheduleInner;
import com.azure.resourcemanager.automation.models.JobScheduleListResult;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class JobScheduleListResultTests {
    @Test
    public void testDeserialize() {
        JobScheduleListResult model =
            BinaryData
                .fromString(
                    "{\"value\":[{\"id\":\"tshi\",\"name\":\"gvelfc\",\"type\":\"uccbirdsvuw\",\"properties\":{\"jobScheduleId\":\"iegstm\",\"runOn\":\"jizcilnghgs\",\"parameters\":{}}},{\"id\":\"jtbxqmuluxlx\",\"name\":\"vnersbycucrw\",\"type\":\"mikzeb\",\"properties\":{\"jobScheduleId\":\"smswziqgfuh\",\"runOn\":\"uswhvhczznvfbycj\",\"parameters\":{}}}],\"nextLink\":\"wwixzvumw\"}")
                .toObject(JobScheduleListResult.class);
        Assertions.assertEquals("iegstm", model.value().get(0).jobScheduleId());
        Assertions.assertEquals("jizcilnghgs", model.value().get(0).runOn());
        Assertions.assertEquals("wwixzvumw", model.nextLink());
    }

    @Test
    public void testSerialize() {
        JobScheduleListResult model =
            new JobScheduleListResult()
                .withValue(
                    Arrays
                        .asList(
                            new JobScheduleInner()
                                .withJobScheduleId("iegstm")
                                .withRunOn("jizcilnghgs")
                                .withParameters(mapOf()),
                            new JobScheduleInner()
                                .withJobScheduleId("smswziqgfuh")
                                .withRunOn("uswhvhczznvfbycj")
                                .withParameters(mapOf())))
                .withNextLink("wwixzvumw");
        model = BinaryData.fromObject(model).toObject(JobScheduleListResult.class);
        Assertions.assertEquals("iegstm", model.value().get(0).jobScheduleId());
        Assertions.assertEquals("jizcilnghgs", model.value().get(0).runOn());
        Assertions.assertEquals("wwixzvumw", model.nextLink());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
