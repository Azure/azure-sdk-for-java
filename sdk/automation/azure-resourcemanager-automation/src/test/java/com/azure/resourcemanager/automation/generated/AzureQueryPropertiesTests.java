// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.automation.models.AzureQueryProperties;
import com.azure.resourcemanager.automation.models.TagOperators;
import com.azure.resourcemanager.automation.models.TagSettingsProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AzureQueryPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AzureQueryProperties model = BinaryData.fromString(
            "{\"scope\":[\"yych\",\"nsjlpjrtws\",\"hv\"],\"locations\":[\"c\",\"hvtrrmhwrbfdpyf\",\"ubhvj\"],\"tagSettings\":{\"tags\":{\"ujxsglhsr\":[\"uyzlw\",\"hmem\",\"ooclutnp\",\"memczjkmmyk\"]},\"filterOperator\":\"Any\"}}")
            .toObject(AzureQueryProperties.class);
        Assertions.assertEquals("yych", model.scope().get(0));
        Assertions.assertEquals("c", model.locations().get(0));
        Assertions.assertEquals("uyzlw", model.tagSettings().tags().get("ujxsglhsr").get(0));
        Assertions.assertEquals(TagOperators.ANY, model.tagSettings().filterOperator());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AzureQueryProperties model = new AzureQueryProperties().withScope(Arrays.asList("yych", "nsjlpjrtws", "hv"))
            .withLocations(Arrays.asList("c", "hvtrrmhwrbfdpyf", "ubhvj"))
            .withTagSettings(new TagSettingsProperties()
                .withTags(mapOf("ujxsglhsr", Arrays.asList("uyzlw", "hmem", "ooclutnp", "memczjkmmyk")))
                .withFilterOperator(TagOperators.ANY));
        model = BinaryData.fromObject(model).toObject(AzureQueryProperties.class);
        Assertions.assertEquals("yych", model.scope().get(0));
        Assertions.assertEquals("c", model.locations().get(0));
        Assertions.assertEquals("uyzlw", model.tagSettings().tags().get("ujxsglhsr").get(0));
        Assertions.assertEquals(TagOperators.ANY, model.tagSettings().filterOperator());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
