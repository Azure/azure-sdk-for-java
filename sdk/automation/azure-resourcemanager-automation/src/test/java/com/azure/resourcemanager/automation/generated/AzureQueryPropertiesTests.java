// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.automation.models.AzureQueryProperties;
import com.azure.resourcemanager.automation.models.TagOperators;
import com.azure.resourcemanager.automation.models.TagSettingsProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class AzureQueryPropertiesTests {
    @Test
    public void testDeserialize() {
        AzureQueryProperties model =
            BinaryData
                .fromString(
                    "{\"scope\":[\"ypomgkopkwho\",\"v\",\"ajqgxy\",\"mocmbqfqvmk\"],\"locations\":[\"zapvhelx\"],\"tagSettings\":{\"tags\":{\"cbcuejrjxgciqi\":[\"atddc\"]},\"filterOperator\":\"All\"}}")
                .toObject(AzureQueryProperties.class);
        Assertions.assertEquals("ypomgkopkwho", model.scope().get(0));
        Assertions.assertEquals("zapvhelx", model.locations().get(0));
        Assertions.assertEquals("atddc", model.tagSettings().tags().get("cbcuejrjxgciqi").get(0));
        Assertions.assertEquals(TagOperators.ALL, model.tagSettings().filterOperator());
    }

    @Test
    public void testSerialize() {
        AzureQueryProperties model =
            new AzureQueryProperties()
                .withScope(Arrays.asList("ypomgkopkwho", "v", "ajqgxy", "mocmbqfqvmk"))
                .withLocations(Arrays.asList("zapvhelx"))
                .withTagSettings(
                    new TagSettingsProperties()
                        .withTags(mapOf("cbcuejrjxgciqi", Arrays.asList("atddc")))
                        .withFilterOperator(TagOperators.ALL));
        model = BinaryData.fromObject(model).toObject(AzureQueryProperties.class);
        Assertions.assertEquals("ypomgkopkwho", model.scope().get(0));
        Assertions.assertEquals("zapvhelx", model.locations().get(0));
        Assertions.assertEquals("atddc", model.tagSettings().tags().get("cbcuejrjxgciqi").get(0));
        Assertions.assertEquals(TagOperators.ALL, model.tagSettings().filterOperator());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
