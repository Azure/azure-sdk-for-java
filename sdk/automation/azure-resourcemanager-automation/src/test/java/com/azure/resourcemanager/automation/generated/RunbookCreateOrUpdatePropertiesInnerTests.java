// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.automation.fluent.models.RunbookCreateOrUpdatePropertiesInner;
import com.azure.resourcemanager.automation.fluent.models.RunbookDraftInner;
import com.azure.resourcemanager.automation.models.ContentHash;
import com.azure.resourcemanager.automation.models.ContentLink;
import com.azure.resourcemanager.automation.models.RunbookParameter;
import com.azure.resourcemanager.automation.models.RunbookTypeEnum;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class RunbookCreateOrUpdatePropertiesInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        RunbookCreateOrUpdatePropertiesInner model = BinaryData.fromString(
            "{\"logVerbose\":false,\"logProgress\":true,\"runbookType\":\"GraphPowerShell\",\"draft\":{\"inEdit\":true,\"draftContentLink\":{\"uri\":\"rednw\",\"contentHash\":{\"algorithm\":\"shtuwgm\",\"value\":\"vuafpwzyifr\"},\"version\":\"wltxeqipxgzdyims\"},\"creationTime\":\"2021-07-14T05:23:28Z\",\"lastModifiedTime\":\"2021-01-03T10:11:10Z\",\"parameters\":{\"wynqxaekqsykvwj\":{\"type\":\"vk\",\"isMandatory\":true,\"position\":535821892,\"defaultValue\":\"abnsmj\"}},\"outputTypes\":[\"kev\",\"yltjcrspxklu\"]},\"publishContentLink\":{\"uri\":\"lfg\",\"contentHash\":{\"algorithm\":\"nnnoytz\",\"value\":\"osewxi\"},\"version\":\"xvkqm\"},\"description\":\"pxvpifdfaif\",\"logActivityTrace\":474770894}")
            .toObject(RunbookCreateOrUpdatePropertiesInner.class);
        Assertions.assertEquals(false, model.logVerbose());
        Assertions.assertEquals(true, model.logProgress());
        Assertions.assertEquals(RunbookTypeEnum.GRAPH_POWER_SHELL, model.runbookType());
        Assertions.assertEquals(true, model.draft().inEdit());
        Assertions.assertEquals("rednw", model.draft().draftContentLink().uri());
        Assertions.assertEquals("shtuwgm", model.draft().draftContentLink().contentHash().algorithm());
        Assertions.assertEquals("vuafpwzyifr", model.draft().draftContentLink().contentHash().value());
        Assertions.assertEquals("wltxeqipxgzdyims", model.draft().draftContentLink().version());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-14T05:23:28Z"), model.draft().creationTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-03T10:11:10Z"), model.draft().lastModifiedTime());
        Assertions.assertEquals("vk", model.draft().parameters().get("wynqxaekqsykvwj").type());
        Assertions.assertEquals(true, model.draft().parameters().get("wynqxaekqsykvwj").isMandatory());
        Assertions.assertEquals(535821892, model.draft().parameters().get("wynqxaekqsykvwj").position());
        Assertions.assertEquals("abnsmj", model.draft().parameters().get("wynqxaekqsykvwj").defaultValue());
        Assertions.assertEquals("kev", model.draft().outputTypes().get(0));
        Assertions.assertEquals("lfg", model.publishContentLink().uri());
        Assertions.assertEquals("nnnoytz", model.publishContentLink().contentHash().algorithm());
        Assertions.assertEquals("osewxi", model.publishContentLink().contentHash().value());
        Assertions.assertEquals("xvkqm", model.publishContentLink().version());
        Assertions.assertEquals("pxvpifdfaif", model.description());
        Assertions.assertEquals(474770894, model.logActivityTrace());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        RunbookCreateOrUpdatePropertiesInner model = new RunbookCreateOrUpdatePropertiesInner().withLogVerbose(false)
            .withLogProgress(true)
            .withRunbookType(RunbookTypeEnum.GRAPH_POWER_SHELL)
            .withDraft(new RunbookDraftInner().withInEdit(true)
                .withDraftContentLink(new ContentLink().withUri("rednw")
                    .withContentHash(new ContentHash().withAlgorithm("shtuwgm").withValue("vuafpwzyifr"))
                    .withVersion("wltxeqipxgzdyims"))
                .withCreationTime(OffsetDateTime.parse("2021-07-14T05:23:28Z"))
                .withLastModifiedTime(OffsetDateTime.parse("2021-01-03T10:11:10Z"))
                .withParameters(mapOf("wynqxaekqsykvwj",
                    new RunbookParameter().withType("vk")
                        .withIsMandatory(true)
                        .withPosition(535821892)
                        .withDefaultValue("abnsmj")))
                .withOutputTypes(Arrays.asList("kev", "yltjcrspxklu")))
            .withPublishContentLink(new ContentLink().withUri("lfg")
                .withContentHash(new ContentHash().withAlgorithm("nnnoytz").withValue("osewxi"))
                .withVersion("xvkqm"))
            .withDescription("pxvpifdfaif")
            .withLogActivityTrace(474770894);
        model = BinaryData.fromObject(model).toObject(RunbookCreateOrUpdatePropertiesInner.class);
        Assertions.assertEquals(false, model.logVerbose());
        Assertions.assertEquals(true, model.logProgress());
        Assertions.assertEquals(RunbookTypeEnum.GRAPH_POWER_SHELL, model.runbookType());
        Assertions.assertEquals(true, model.draft().inEdit());
        Assertions.assertEquals("rednw", model.draft().draftContentLink().uri());
        Assertions.assertEquals("shtuwgm", model.draft().draftContentLink().contentHash().algorithm());
        Assertions.assertEquals("vuafpwzyifr", model.draft().draftContentLink().contentHash().value());
        Assertions.assertEquals("wltxeqipxgzdyims", model.draft().draftContentLink().version());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-14T05:23:28Z"), model.draft().creationTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-03T10:11:10Z"), model.draft().lastModifiedTime());
        Assertions.assertEquals("vk", model.draft().parameters().get("wynqxaekqsykvwj").type());
        Assertions.assertEquals(true, model.draft().parameters().get("wynqxaekqsykvwj").isMandatory());
        Assertions.assertEquals(535821892, model.draft().parameters().get("wynqxaekqsykvwj").position());
        Assertions.assertEquals("abnsmj", model.draft().parameters().get("wynqxaekqsykvwj").defaultValue());
        Assertions.assertEquals("kev", model.draft().outputTypes().get(0));
        Assertions.assertEquals("lfg", model.publishContentLink().uri());
        Assertions.assertEquals("nnnoytz", model.publishContentLink().contentHash().algorithm());
        Assertions.assertEquals("osewxi", model.publishContentLink().contentHash().value());
        Assertions.assertEquals("xvkqm", model.publishContentLink().version());
        Assertions.assertEquals("pxvpifdfaif", model.description());
        Assertions.assertEquals(474770894, model.logActivityTrace());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
