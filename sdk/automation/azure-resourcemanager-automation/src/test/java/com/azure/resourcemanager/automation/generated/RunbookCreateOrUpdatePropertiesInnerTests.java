// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.automation.fluent.models.RunbookCreateOrUpdatePropertiesInner;
import com.azure.resourcemanager.automation.fluent.models.RunbookDraftInner;
import com.azure.resourcemanager.automation.models.ContentHash;
import com.azure.resourcemanager.automation.models.ContentLink;
import com.azure.resourcemanager.automation.models.RunbookParameter;
import com.azure.resourcemanager.automation.models.RunbookTypeEnum;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class RunbookCreateOrUpdatePropertiesInnerTests {
    @Test
    public void testDeserialize() {
        RunbookCreateOrUpdatePropertiesInner model =
            BinaryData
                .fromString(
                    "{\"logVerbose\":true,\"logProgress\":true,\"runbookType\":\"Python3\",\"draft\":{\"inEdit\":true,\"draftContentLink\":{\"uri\":\"zwyjafitlhgu\",\"version\":\"chl\"},\"creationTime\":\"2021-08-04T13:30:10Z\",\"lastModifiedTime\":\"2021-05-03T06:05:37Z\",\"parameters\":{\"dphtv\":{\"type\":\"mozusgzvlnsnnjz\",\"isMandatory\":true,\"position\":834201327,\"defaultValue\":\"pymwamxqzragp\"},\"updwv\":{\"type\":\"lajv\",\"isMandatory\":true,\"position\":748558129,\"defaultValue\":\"srlzknmzlan\"},\"zzhz\":{\"type\":\"hcnzqt\",\"isMandatory\":true,\"position\":1988862980,\"defaultValue\":\"hvthlaiwdcxsm\"},\"fiqgeaar\":{\"type\":\"xetlgydlhqv\",\"isMandatory\":true,\"position\":306221195,\"defaultValue\":\"b\"}},\"outputTypes\":[\"ekglklb\",\"ulidwc\",\"vmzegj\"]},\"publishContentLink\":{\"uri\":\"hj\",\"contentHash\":{\"algorithm\":\"wgdnqzbr\",\"value\":\"kspzhzmtksjcit\"},\"version\":\"gsxcdgljplkeua\"},\"description\":\"tomflrytswfpf\",\"logActivityTrace\":1777257386}")
                .toObject(RunbookCreateOrUpdatePropertiesInner.class);
        Assertions.assertEquals(true, model.logVerbose());
        Assertions.assertEquals(true, model.logProgress());
        Assertions.assertEquals(RunbookTypeEnum.PYTHON3, model.runbookType());
        Assertions.assertEquals(true, model.draft().inEdit());
        Assertions.assertEquals("zwyjafitlhgu", model.draft().draftContentLink().uri());
        Assertions.assertEquals("chl", model.draft().draftContentLink().version());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-04T13:30:10Z"), model.draft().creationTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-03T06:05:37Z"), model.draft().lastModifiedTime());
        Assertions.assertEquals("mozusgzvlnsnnjz", model.draft().parameters().get("dphtv").type());
        Assertions.assertEquals(true, model.draft().parameters().get("dphtv").isMandatory());
        Assertions.assertEquals(834201327, model.draft().parameters().get("dphtv").position());
        Assertions.assertEquals("pymwamxqzragp", model.draft().parameters().get("dphtv").defaultValue());
        Assertions.assertEquals("ekglklb", model.draft().outputTypes().get(0));
        Assertions.assertEquals("hj", model.publishContentLink().uri());
        Assertions.assertEquals("wgdnqzbr", model.publishContentLink().contentHash().algorithm());
        Assertions.assertEquals("kspzhzmtksjcit", model.publishContentLink().contentHash().value());
        Assertions.assertEquals("gsxcdgljplkeua", model.publishContentLink().version());
        Assertions.assertEquals("tomflrytswfpf", model.description());
        Assertions.assertEquals(1777257386, model.logActivityTrace());
    }

    @Test
    public void testSerialize() {
        RunbookCreateOrUpdatePropertiesInner model =
            new RunbookCreateOrUpdatePropertiesInner()
                .withLogVerbose(true)
                .withLogProgress(true)
                .withRunbookType(RunbookTypeEnum.PYTHON3)
                .withDraft(
                    new RunbookDraftInner()
                        .withInEdit(true)
                        .withDraftContentLink(new ContentLink().withUri("zwyjafitlhgu").withVersion("chl"))
                        .withCreationTime(OffsetDateTime.parse("2021-08-04T13:30:10Z"))
                        .withLastModifiedTime(OffsetDateTime.parse("2021-05-03T06:05:37Z"))
                        .withParameters(
                            mapOf(
                                "dphtv",
                                new RunbookParameter()
                                    .withType("mozusgzvlnsnnjz")
                                    .withIsMandatory(true)
                                    .withPosition(834201327)
                                    .withDefaultValue("pymwamxqzragp"),
                                "updwv",
                                new RunbookParameter()
                                    .withType("lajv")
                                    .withIsMandatory(true)
                                    .withPosition(748558129)
                                    .withDefaultValue("srlzknmzlan"),
                                "zzhz",
                                new RunbookParameter()
                                    .withType("hcnzqt")
                                    .withIsMandatory(true)
                                    .withPosition(1988862980)
                                    .withDefaultValue("hvthlaiwdcxsm"),
                                "fiqgeaar",
                                new RunbookParameter()
                                    .withType("xetlgydlhqv")
                                    .withIsMandatory(true)
                                    .withPosition(306221195)
                                    .withDefaultValue("b")))
                        .withOutputTypes(Arrays.asList("ekglklb", "ulidwc", "vmzegj")))
                .withPublishContentLink(
                    new ContentLink()
                        .withUri("hj")
                        .withContentHash(new ContentHash().withAlgorithm("wgdnqzbr").withValue("kspzhzmtksjcit"))
                        .withVersion("gsxcdgljplkeua"))
                .withDescription("tomflrytswfpf")
                .withLogActivityTrace(1777257386);
        model = BinaryData.fromObject(model).toObject(RunbookCreateOrUpdatePropertiesInner.class);
        Assertions.assertEquals(true, model.logVerbose());
        Assertions.assertEquals(true, model.logProgress());
        Assertions.assertEquals(RunbookTypeEnum.PYTHON3, model.runbookType());
        Assertions.assertEquals(true, model.draft().inEdit());
        Assertions.assertEquals("zwyjafitlhgu", model.draft().draftContentLink().uri());
        Assertions.assertEquals("chl", model.draft().draftContentLink().version());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-04T13:30:10Z"), model.draft().creationTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-03T06:05:37Z"), model.draft().lastModifiedTime());
        Assertions.assertEquals("mozusgzvlnsnnjz", model.draft().parameters().get("dphtv").type());
        Assertions.assertEquals(true, model.draft().parameters().get("dphtv").isMandatory());
        Assertions.assertEquals(834201327, model.draft().parameters().get("dphtv").position());
        Assertions.assertEquals("pymwamxqzragp", model.draft().parameters().get("dphtv").defaultValue());
        Assertions.assertEquals("ekglklb", model.draft().outputTypes().get(0));
        Assertions.assertEquals("hj", model.publishContentLink().uri());
        Assertions.assertEquals("wgdnqzbr", model.publishContentLink().contentHash().algorithm());
        Assertions.assertEquals("kspzhzmtksjcit", model.publishContentLink().contentHash().value());
        Assertions.assertEquals("gsxcdgljplkeua", model.publishContentLink().version());
        Assertions.assertEquals("tomflrytswfpf", model.description());
        Assertions.assertEquals(1777257386, model.logActivityTrace());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
