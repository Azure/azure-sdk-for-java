// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.automation.AutomationManager;
import com.azure.resourcemanager.automation.models.ContentHash;
import com.azure.resourcemanager.automation.models.ContentSource;
import com.azure.resourcemanager.automation.models.ContentSourceType;
import com.azure.resourcemanager.automation.models.DscConfiguration;
import com.azure.resourcemanager.automation.models.DscConfigurationParameter;
import com.azure.resourcemanager.automation.models.DscConfigurationProvisioningState;
import com.azure.resourcemanager.automation.models.DscConfigurationState;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class DscConfigurationsCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Succeeded\",\"jobCount\":952317320,\"parameters\":{\"jdrpizfulgycts\":{\"type\":\"dxolousdv\",\"isMandatory\":true,\"position\":1223436099,\"defaultValue\":\"aw\"}},\"source\":{\"hash\":{\"algorithm\":\"qgkujds\",\"value\":\"oxrqw\"},\"type\":\"embeddedContent\",\"value\":\"btigapdyarikeejd\",\"version\":\"fhtwmmkfqb\"},\"state\":\"Published\",\"logVerbose\":false,\"creationTime\":\"2021-02-04T15:25:44Z\",\"lastModifiedTime\":\"2021-10-28T19:05:11Z\",\"nodeConfigurationCount\":1517281082,\"description\":\"qkvyhzokpoyuohu\"},\"etag\":\"snaajph\",\"location\":\"poejnglpwsa\",\"tags\":{\"jrmfqzwqd\":\"jsumxpezcoio\",\"xfqzkvemyzd\":\"xkeedcnwmy\"},\"id\":\"czaqpqifdbmpt\",\"name\":\"wtxzuisam\",\"type\":\"natnizexroqsqjg\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AutomationManager manager = AutomationManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        DscConfiguration response = manager.dscConfigurations()
            .define("zmhkdclacroczfmu")
            .withExistingAutomationAccount("dvmip", "beaeq")
            .withSource(new ContentSource().withHash(new ContentHash().withAlgorithm("uxzshxz").withValue("zbzuzudlev"))
                .withType(ContentSourceType.URI)
                .withValue("jcgwfsgqk")
                .withVersion("yecup"))
            .withRegion("dxonckbn")
            .withTags(mapOf("izxzpzweghl", "fxlupibaq", "dve", "wbogvgfklqiy", "trkzxsgtznsvlrds", "elsbfvd",
                "pimyndnoxax", "o"))
            .withName("iboancdrcoanvx")
            .withLogVerbose(true)
            .withLogProgress(true)
            .withParameters(mapOf("zvcmcokxi",
                new DscConfigurationParameter().withType("p")
                    .withIsMandatory(true)
                    .withPosition(429677405)
                    .withDefaultValue("jcfmazpzdqw"),
                "rdemdidack",
                new DscConfigurationParameter().withType("kuvfrjwu")
                    .withIsMandatory(false)
                    .withPosition(1318706847)
                    .withDefaultValue("ajbvbn"),
                "jtpj",
                new DscConfigurationParameter().withType("dgzwdyd")
                    .withIsMandatory(true)
                    .withPosition(1681787341)
                    .withDefaultValue("ztdivykpxkq")))
            .withDescription("jiunrlshxuknsykd")
            .create();

        Assertions.assertEquals("poejnglpwsa", response.location());
        Assertions.assertEquals("jsumxpezcoio", response.tags().get("jrmfqzwqd"));
        Assertions.assertEquals("snaajph", response.etag());
        Assertions.assertEquals(DscConfigurationProvisioningState.SUCCEEDED, response.provisioningState());
        Assertions.assertEquals(952317320, response.jobCount());
        Assertions.assertEquals("dxolousdv", response.parameters().get("jdrpizfulgycts").type());
        Assertions.assertEquals(true, response.parameters().get("jdrpizfulgycts").isMandatory());
        Assertions.assertEquals(1223436099, response.parameters().get("jdrpizfulgycts").position());
        Assertions.assertEquals("aw", response.parameters().get("jdrpizfulgycts").defaultValue());
        Assertions.assertEquals("qgkujds", response.source().hash().algorithm());
        Assertions.assertEquals("oxrqw", response.source().hash().value());
        Assertions.assertEquals(ContentSourceType.EMBEDDED_CONTENT, response.source().type());
        Assertions.assertEquals("btigapdyarikeejd", response.source().value());
        Assertions.assertEquals("fhtwmmkfqb", response.source().version());
        Assertions.assertEquals(DscConfigurationState.PUBLISHED, response.state());
        Assertions.assertEquals(false, response.logVerbose());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-04T15:25:44Z"), response.creationTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-28T19:05:11Z"), response.lastModifiedTime());
        Assertions.assertEquals(1517281082, response.nodeConfigurationCount());
        Assertions.assertEquals("qkvyhzokpoyuohu", response.description());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
