// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.automation.fluent.models.JobScheduleCreateProperties;
import com.azure.resourcemanager.automation.models.RunbookAssociationProperty;
import com.azure.resourcemanager.automation.models.ScheduleAssociationProperty;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class JobScheduleCreatePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        JobScheduleCreateProperties model = BinaryData.fromString(
            "{\"schedule\":{\"name\":\"asxifto\"},\"runbook\":{\"name\":\"yzhftwesgogczh\"},\"runOn\":\"nxkrlgnyhmossxkk\",\"parameters\":{\"pdso\":\"rrghxjbdhqxvcxgf\"}}")
            .toObject(JobScheduleCreateProperties.class);
        Assertions.assertEquals("asxifto", model.schedule().name());
        Assertions.assertEquals("yzhftwesgogczh", model.runbook().name());
        Assertions.assertEquals("nxkrlgnyhmossxkk", model.runOn());
        Assertions.assertEquals("rrghxjbdhqxvcxgf", model.parameters().get("pdso"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        JobScheduleCreateProperties model
            = new JobScheduleCreateProperties().withSchedule(new ScheduleAssociationProperty().withName("asxifto"))
                .withRunbook(new RunbookAssociationProperty().withName("yzhftwesgogczh"))
                .withRunOn("nxkrlgnyhmossxkk")
                .withParameters(mapOf("pdso", "rrghxjbdhqxvcxgf"));
        model = BinaryData.fromObject(model).toObject(JobScheduleCreateProperties.class);
        Assertions.assertEquals("asxifto", model.schedule().name());
        Assertions.assertEquals("yzhftwesgogczh", model.runbook().name());
        Assertions.assertEquals("nxkrlgnyhmossxkk", model.runOn());
        Assertions.assertEquals("rrghxjbdhqxvcxgf", model.parameters().get("pdso"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
