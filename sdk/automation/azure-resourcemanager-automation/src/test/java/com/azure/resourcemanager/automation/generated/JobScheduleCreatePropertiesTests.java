// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.automation.fluent.models.JobScheduleCreateProperties;
import com.azure.resourcemanager.automation.models.RunbookAssociationProperty;
import com.azure.resourcemanager.automation.models.ScheduleAssociationProperty;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class JobScheduleCreatePropertiesTests {
    @Test
    public void testDeserialize() {
        JobScheduleCreateProperties model =
            BinaryData
                .fromString(
                    "{\"schedule\":{\"name\":\"axfe\"},\"runbook\":{\"name\":\"jkjexf\"},\"runOn\":\"qvhpsylkkshkbff\",\"parameters\":{\"wpgj\":\"xzjrgy\",\"pttaqutd\":\"snptfujgicgaao\",\"gehkfkimrtixokff\":\"wemxswvruunzz\",\"qwhix\":\"yinljqe\"}}")
                .toObject(JobScheduleCreateProperties.class);
        Assertions.assertEquals("axfe", model.schedule().name());
        Assertions.assertEquals("jkjexf", model.runbook().name());
        Assertions.assertEquals("qvhpsylkkshkbff", model.runOn());
        Assertions.assertEquals("xzjrgy", model.parameters().get("wpgj"));
    }

    @Test
    public void testSerialize() {
        JobScheduleCreateProperties model =
            new JobScheduleCreateProperties()
                .withSchedule(new ScheduleAssociationProperty().withName("axfe"))
                .withRunbook(new RunbookAssociationProperty().withName("jkjexf"))
                .withRunOn("qvhpsylkkshkbff")
                .withParameters(
                    mapOf(
                        "wpgj",
                        "xzjrgy",
                        "pttaqutd",
                        "snptfujgicgaao",
                        "gehkfkimrtixokff",
                        "wemxswvruunzz",
                        "qwhix",
                        "yinljqe"));
        model = BinaryData.fromObject(model).toObject(JobScheduleCreateProperties.class);
        Assertions.assertEquals("axfe", model.schedule().name());
        Assertions.assertEquals("jkjexf", model.runbook().name());
        Assertions.assertEquals("qvhpsylkkshkbff", model.runOn());
        Assertions.assertEquals("xzjrgy", model.parameters().get("wpgj"));
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
