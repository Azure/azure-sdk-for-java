// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.automation.fluent.models.DscCompilationJobCreateProperties;
import com.azure.resourcemanager.automation.models.DscConfigurationAssociationProperty;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class DscCompilationJobCreatePropertiesTests {
    @Test
    public void testDeserialize() {
        DscCompilationJobCreateProperties model =
            BinaryData
                .fromString(
                    "{\"configuration\":{\"name\":\"kcciwwzjuqkhr\"},\"parameters\":{\"ghsauuimjmvxied\":\"iwkuofos\",\"byao\":\"ugidyjrr\",\"xc\":\"v\",\"hocohslkev\":\"onpc\"},\"incrementNodeConfigurationBuild\":false}")
                .toObject(DscCompilationJobCreateProperties.class);
        Assertions.assertEquals("kcciwwzjuqkhr", model.configuration().name());
        Assertions.assertEquals("iwkuofos", model.parameters().get("ghsauuimjmvxied"));
        Assertions.assertEquals(false, model.incrementNodeConfigurationBuild());
    }

    @Test
    public void testSerialize() {
        DscCompilationJobCreateProperties model =
            new DscCompilationJobCreateProperties()
                .withConfiguration(new DscConfigurationAssociationProperty().withName("kcciwwzjuqkhr"))
                .withParameters(
                    mapOf("ghsauuimjmvxied", "iwkuofos", "byao", "ugidyjrr", "xc", "v", "hocohslkev", "onpc"))
                .withIncrementNodeConfigurationBuild(false);
        model = BinaryData.fromObject(model).toObject(DscCompilationJobCreateProperties.class);
        Assertions.assertEquals("kcciwwzjuqkhr", model.configuration().name());
        Assertions.assertEquals("iwkuofos", model.parameters().get("ghsauuimjmvxied"));
        Assertions.assertEquals(false, model.incrementNodeConfigurationBuild());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
