// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.automation.AutomationManager;
import com.azure.resourcemanager.automation.models.Watcher;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class WatchersCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"executionFrequencyInSeconds\":9023129505388704158,\"scriptName\":\"xyqvg\",\"scriptParameters\":{\"tvo\":\"od\",\"s\":\"kxdxuwsaifmcwn\"},\"scriptRunOn\":\"lehgcvkbc\",\"status\":\"jolgjyyxpvels\",\"creationTime\":\"2021-03-07T21:49:48Z\",\"lastModifiedTime\":\"2021-08-18T17:58:24Z\",\"lastModifiedBy\":\"vxoqe\",\"description\":\"txwaljglzo\"},\"etag\":\"qwaafrqulhm\",\"tags\":{\"qjcrgaxwmzwdf\":\"bhdvafjrqpjiy\"},\"location\":\"nrzorpd\",\"id\":\"tbqctqjfgx\",\"name\":\"saetgzdgvpyig\",\"type\":\"aqqilzdcduwjoed\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        AutomationManager manager =
            AutomationManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        Watcher response =
            manager
                .watchers()
                .define("mj")
                .withExistingAutomationAccount("pcpahprzrvxhmtf", "ocnxz")
                .withRegion("ykmxcpwzvm")
                .withTags(mapOf("gjiiytssiki", "odk", "gmqsorhcekxg", "bcufqbvntn"))
                .withEtag("cnlbv")
                .withExecutionFrequencyInSeconds(2866130496024723242L)
                .withScriptName("qrxtdisnjev")
                .withScriptParameters(
                    mapOf("tjfdoesxxhmw", "mydidwhepfw", "kxkxhnegk", "dbckyo", "kaobrl", "jzrbhtmeplv"))
                .withScriptRunOn("gsnbagnchjh")
                .withDescription("ljomevt")
                .create();

        Assertions.assertEquals("qwaafrqulhm", response.etag());
        Assertions.assertEquals("bhdvafjrqpjiy", response.tags().get("qjcrgaxwmzwdf"));
        Assertions.assertEquals("nrzorpd", response.location());
        Assertions.assertEquals(9023129505388704158L, response.executionFrequencyInSeconds());
        Assertions.assertEquals("xyqvg", response.scriptName());
        Assertions.assertEquals("od", response.scriptParameters().get("tvo"));
        Assertions.assertEquals("lehgcvkbc", response.scriptRunOn());
        Assertions.assertEquals("txwaljglzo", response.description());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
