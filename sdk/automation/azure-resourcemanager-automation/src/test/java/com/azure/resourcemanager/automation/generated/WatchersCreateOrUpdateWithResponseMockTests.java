// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.automation.AutomationManager;
import com.azure.resourcemanager.automation.models.Watcher;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class WatchersCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"executionFrequencyInSeconds\":4783589882115641664,\"scriptName\":\"ahwkxjjm\",\"scriptParameters\":{\"dhdyswcrptveaj\":\"lmsoodtmve\",\"wlp\":\"zxvlgsrgkrfizrp\"},\"scriptRunOn\":\"uqhrlmcskykp\",\"status\":\"ofix\",\"creationTime\":\"2021-11-13T02:57:39Z\",\"lastModifiedTime\":\"2021-08-04T01:38:28Z\",\"lastModifiedBy\":\"kkpyycpaw\",\"description\":\"jp\"},\"etag\":\"pwr\",\"tags\":{\"fwzlgzawkgyepeya\":\"pcf\",\"rntmkctdhu\":\"nnidmdiawpzxk\"},\"location\":\"gwqpsqazih\",\"id\":\"odvqgcnbhcbmj\",\"name\":\"ztibniyntsxjmfm\",\"type\":\"ftvhkmoogj\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AutomationManager manager = AutomationManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        Watcher response = manager.watchers()
            .define("quddrwjclj")
            .withExistingAutomationAccount("jvqynvavitmdm", "qohhihra")
            .withRegion("fbbcngkegxcypxbb")
            .withTags(mapOf("tnkqbala", "udoejtighsxjp", "wxhmehjnhjiot", "ovu"))
            .withEtag("uxlrarwpe")
            .withExecutionFrequencyInSeconds(4229507748464817326L)
            .withScriptName("vzadbwenn")
            .withScriptParameters(mapOf("vztiucwviqllukh", "fhxrzfr", "po", "rcqxgcbvzarmqc", "vjyhdrxbrdvc",
                "stsinvag", "uwvorbalkjn", "hqwhitxnmxgnmguz"))
            .withScriptRunOn("bdhlltq")
            .withDescription("iawzlzklaslgac")
            .create();

        Assertions.assertEquals("pwr", response.etag());
        Assertions.assertEquals("pcf", response.tags().get("fwzlgzawkgyepeya"));
        Assertions.assertEquals("gwqpsqazih", response.location());
        Assertions.assertEquals(4783589882115641664L, response.executionFrequencyInSeconds());
        Assertions.assertEquals("ahwkxjjm", response.scriptName());
        Assertions.assertEquals("lmsoodtmve", response.scriptParameters().get("dhdyswcrptveaj"));
        Assertions.assertEquals("uqhrlmcskykp", response.scriptRunOn());
        Assertions.assertEquals("jp", response.description());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
