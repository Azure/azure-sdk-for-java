// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.automation.fluent.models.WatcherProperties;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class WatcherPropertiesTests {
    @Test
    public void testDeserialize() {
        WatcherProperties model =
            BinaryData
                .fromString(
                    "{\"executionFrequencyInSeconds\":1196903059215633177,\"scriptName\":\"rlhrxs\",\"scriptParameters\":{\"kafkuwbcrnwbm\":\"vpycanuzbp\",\"us\":\"hhseyv\",\"ofmxagkvtmelmqkr\":\"tslhspkdeem\",\"uhcdhm\":\"ahvljuaha\"},\"scriptRunOn\":\"alaexqpvfadmwsrc\",\"status\":\"vxpvgomz\",\"creationTime\":\"2021-03-05T20:16:51Z\",\"lastModifiedTime\":\"2021-11-03T15:37:36Z\",\"lastModifiedBy\":\"wbnb\",\"description\":\"ldawkzbaliourqha\"}")
                .toObject(WatcherProperties.class);
        Assertions.assertEquals(1196903059215633177L, model.executionFrequencyInSeconds());
        Assertions.assertEquals("rlhrxs", model.scriptName());
        Assertions.assertEquals("vpycanuzbp", model.scriptParameters().get("kafkuwbcrnwbm"));
        Assertions.assertEquals("alaexqpvfadmwsrc", model.scriptRunOn());
        Assertions.assertEquals("ldawkzbaliourqha", model.description());
    }

    @Test
    public void testSerialize() {
        WatcherProperties model =
            new WatcherProperties()
                .withExecutionFrequencyInSeconds(1196903059215633177L)
                .withScriptName("rlhrxs")
                .withScriptParameters(
                    mapOf(
                        "kafkuwbcrnwbm",
                        "vpycanuzbp",
                        "us",
                        "hhseyv",
                        "ofmxagkvtmelmqkr",
                        "tslhspkdeem",
                        "uhcdhm",
                        "ahvljuaha"))
                .withScriptRunOn("alaexqpvfadmwsrc")
                .withDescription("ldawkzbaliourqha");
        model = BinaryData.fromObject(model).toObject(WatcherProperties.class);
        Assertions.assertEquals(1196903059215633177L, model.executionFrequencyInSeconds());
        Assertions.assertEquals("rlhrxs", model.scriptName());
        Assertions.assertEquals("vpycanuzbp", model.scriptParameters().get("kafkuwbcrnwbm"));
        Assertions.assertEquals("alaexqpvfadmwsrc", model.scriptRunOn());
        Assertions.assertEquals("ldawkzbaliourqha", model.description());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
