// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.automation.fluent.models.WatcherProperties;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class WatcherPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        WatcherProperties model = BinaryData.fromString(
            "{\"executionFrequencyInSeconds\":3505608113038307586,\"scriptName\":\"izzgwkln\",\"scriptParameters\":{\"ktp\":\"ffeycx\",\"ekkkzd\":\"ymerteeammxq\",\"eesvecu\":\"rtkgdojbmxvavref\"},\"scriptRunOn\":\"pxtxsuwp\",\"status\":\"ujwsawddjibabxvi\",\"creationTime\":\"2021-07-13T15:17:34Z\",\"lastModifiedTime\":\"2021-10-08T15:29:55Z\",\"lastModifiedBy\":\"eexavo\",\"description\":\"fglecdmdqbwp\"}")
            .toObject(WatcherProperties.class);
        Assertions.assertEquals(3505608113038307586L, model.executionFrequencyInSeconds());
        Assertions.assertEquals("izzgwkln", model.scriptName());
        Assertions.assertEquals("ffeycx", model.scriptParameters().get("ktp"));
        Assertions.assertEquals("pxtxsuwp", model.scriptRunOn());
        Assertions.assertEquals("fglecdmdqbwp", model.description());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        WatcherProperties model = new WatcherProperties().withExecutionFrequencyInSeconds(3505608113038307586L)
            .withScriptName("izzgwkln")
            .withScriptParameters(mapOf("ktp", "ffeycx", "ekkkzd", "ymerteeammxq", "eesvecu", "rtkgdojbmxvavref"))
            .withScriptRunOn("pxtxsuwp")
            .withDescription("fglecdmdqbwp");
        model = BinaryData.fromObject(model).toObject(WatcherProperties.class);
        Assertions.assertEquals(3505608113038307586L, model.executionFrequencyInSeconds());
        Assertions.assertEquals("izzgwkln", model.scriptName());
        Assertions.assertEquals("ffeycx", model.scriptParameters().get("ktp"));
        Assertions.assertEquals("pxtxsuwp", model.scriptRunOn());
        Assertions.assertEquals("fglecdmdqbwp", model.description());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
