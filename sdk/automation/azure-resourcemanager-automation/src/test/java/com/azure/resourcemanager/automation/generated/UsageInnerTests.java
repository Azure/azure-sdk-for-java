// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.automation.fluent.models.UsageInner;
import com.azure.resourcemanager.automation.models.UsageCounterName;
import org.junit.jupiter.api.Assertions;

public final class UsageInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        UsageInner model = BinaryData.fromString(
            "{\"id\":\"ytdw\",\"name\":{\"value\":\"rqubpaxhexiil\",\"localizedValue\":\"pdtii\"},\"unit\":\"tdqoaxoruzfgsq\",\"currentValue\":39.175455853011776,\"limit\":4295376544175103886,\"throttleStatus\":\"eptra\"}")
            .toObject(UsageInner.class);
        Assertions.assertEquals("ytdw", model.id());
        Assertions.assertEquals("rqubpaxhexiil", model.name().value());
        Assertions.assertEquals("pdtii", model.name().localizedValue());
        Assertions.assertEquals("tdqoaxoruzfgsq", model.unit());
        Assertions.assertEquals(39.175455853011776D, model.currentValue());
        Assertions.assertEquals(4295376544175103886L, model.limit());
        Assertions.assertEquals("eptra", model.throttleStatus());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        UsageInner model = new UsageInner().withId("ytdw")
            .withName(new UsageCounterName().withValue("rqubpaxhexiil").withLocalizedValue("pdtii"))
            .withUnit("tdqoaxoruzfgsq")
            .withCurrentValue(39.175455853011776D)
            .withLimit(4295376544175103886L)
            .withThrottleStatus("eptra");
        model = BinaryData.fromObject(model).toObject(UsageInner.class);
        Assertions.assertEquals("ytdw", model.id());
        Assertions.assertEquals("rqubpaxhexiil", model.name().value());
        Assertions.assertEquals("pdtii", model.name().localizedValue());
        Assertions.assertEquals("tdqoaxoruzfgsq", model.unit());
        Assertions.assertEquals(39.175455853011776D, model.currentValue());
        Assertions.assertEquals(4295376544175103886L, model.limit());
        Assertions.assertEquals("eptra", model.throttleStatus());
    }
}
