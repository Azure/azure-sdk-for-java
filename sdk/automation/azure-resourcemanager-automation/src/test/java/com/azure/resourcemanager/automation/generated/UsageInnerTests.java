// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.automation.fluent.models.UsageInner;
import com.azure.resourcemanager.automation.models.UsageCounterName;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class UsageInnerTests {
    @Test
    public void testDeserialize() {
        UsageInner model =
            BinaryData
                .fromString(
                    "{\"id\":\"gfwsrtaw\",\"name\":{\"value\":\"zbrhubskhudyg\",\"localizedValue\":\"okkqfqjbvleo\"},\"unit\":\"ml\",\"currentValue\":50.38360124550179,\"limit\":1282280237596006606,\"throttleStatus\":\"vyvnqqyb\"}")
                .toObject(UsageInner.class);
        Assertions.assertEquals("gfwsrtaw", model.id());
        Assertions.assertEquals("zbrhubskhudyg", model.name().value());
        Assertions.assertEquals("okkqfqjbvleo", model.name().localizedValue());
        Assertions.assertEquals("ml", model.unit());
        Assertions.assertEquals(50.38360124550179D, model.currentValue());
        Assertions.assertEquals(1282280237596006606L, model.limit());
        Assertions.assertEquals("vyvnqqyb", model.throttleStatus());
    }

    @Test
    public void testSerialize() {
        UsageInner model =
            new UsageInner()
                .withId("gfwsrtaw")
                .withName(new UsageCounterName().withValue("zbrhubskhudyg").withLocalizedValue("okkqfqjbvleo"))
                .withUnit("ml")
                .withCurrentValue(50.38360124550179D)
                .withLimit(1282280237596006606L)
                .withThrottleStatus("vyvnqqyb");
        model = BinaryData.fromObject(model).toObject(UsageInner.class);
        Assertions.assertEquals("gfwsrtaw", model.id());
        Assertions.assertEquals("zbrhubskhudyg", model.name().value());
        Assertions.assertEquals("okkqfqjbvleo", model.name().localizedValue());
        Assertions.assertEquals("ml", model.unit());
        Assertions.assertEquals(50.38360124550179D, model.currentValue());
        Assertions.assertEquals(1282280237596006606L, model.limit());
        Assertions.assertEquals("vyvnqqyb", model.throttleStatus());
    }
}
