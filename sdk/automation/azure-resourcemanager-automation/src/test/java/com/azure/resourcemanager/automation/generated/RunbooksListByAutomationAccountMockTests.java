// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.util.Context;
import com.azure.resourcemanager.automation.AutomationManager;
import com.azure.resourcemanager.automation.models.Runbook;
import com.azure.resourcemanager.automation.models.RunbookProvisioningState;
import com.azure.resourcemanager.automation.models.RunbookState;
import com.azure.resourcemanager.automation.models.RunbookTypeEnum;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class RunbooksListByAutomationAccountMockTests {
    @Test
    public void testListByAutomationAccount() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"value\":[{\"properties\":{\"runbookType\":\"PowerShellWorkflow\",\"publishContentLink\":{\"uri\":\"vpi\",\"version\":\"jpnqnoowsbeden\"},\"state\":\"Edit\",\"logVerbose\":true,\"logProgress\":false,\"logActivityTrace\":527936002,\"jobCount\":1196671076,\"parameters\":{},\"outputTypes\":[\"mnhjevdyzn\",\"ajsvk\"],\"draft\":{\"inEdit\":true,\"creationTime\":\"2021-08-05T06:45:09Z\",\"lastModifiedTime\":\"2021-10-14T14:24:06Z\",\"parameters\":{},\"outputTypes\":[]},\"provisioningState\":\"Succeeded\",\"lastModifiedBy\":\"liizjixlqfhef\",\"creationTime\":\"2021-11-30T11:31:10Z\",\"lastModifiedTime\":\"2021-05-01T14:38:31Z\",\"description\":\"lronqqlmg\"},\"etag\":\"qxsjxte\",\"location\":\"exhvuqbozoolz\",\"tags\":{\"cnn\":\"arkuzl\",\"nx\":\"t\"},\"id\":\"wqy\",\"name\":\"llhdyzm\",\"type\":\"ckze\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        AutomationManager manager =
            AutomationManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<Runbook> response = manager.runbooks().listByAutomationAccount("fnmxa", "rsqftib", Context.NONE);

        Assertions.assertEquals("exhvuqbozoolz", response.iterator().next().location());
        Assertions.assertEquals("arkuzl", response.iterator().next().tags().get("cnn"));
        Assertions.assertEquals("qxsjxte", response.iterator().next().etag());
        Assertions.assertEquals(RunbookTypeEnum.POWER_SHELL_WORKFLOW, response.iterator().next().runbookType());
        Assertions.assertEquals("vpi", response.iterator().next().publishContentLink().uri());
        Assertions.assertEquals("jpnqnoowsbeden", response.iterator().next().publishContentLink().version());
        Assertions.assertEquals(RunbookState.EDIT, response.iterator().next().state());
        Assertions.assertEquals(true, response.iterator().next().logVerbose());
        Assertions.assertEquals(false, response.iterator().next().logProgress());
        Assertions.assertEquals(527936002, response.iterator().next().logActivityTrace());
        Assertions.assertEquals(1196671076, response.iterator().next().jobCount());
        Assertions.assertEquals("mnhjevdyzn", response.iterator().next().outputTypes().get(0));
        Assertions.assertEquals(true, response.iterator().next().draft().inEdit());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-08-05T06:45:09Z"), response.iterator().next().draft().creationTime());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-10-14T14:24:06Z"), response.iterator().next().draft().lastModifiedTime());
        Assertions.assertEquals(RunbookProvisioningState.SUCCEEDED, response.iterator().next().provisioningState());
        Assertions.assertEquals("liizjixlqfhef", response.iterator().next().lastModifiedBy());
        Assertions
            .assertEquals(OffsetDateTime.parse("2021-11-30T11:31:10Z"), response.iterator().next().creationTime());
        Assertions
            .assertEquals(OffsetDateTime.parse("2021-05-01T14:38:31Z"), response.iterator().next().lastModifiedTime());
        Assertions.assertEquals("lronqqlmg", response.iterator().next().description());
    }
}
