// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.automation.AutomationManager;
import com.azure.resourcemanager.automation.models.Runbook;
import com.azure.resourcemanager.automation.models.RunbookProvisioningState;
import com.azure.resourcemanager.automation.models.RunbookState;
import com.azure.resourcemanager.automation.models.RunbookTypeEnum;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class RunbooksListByAutomationAccountMockTests {
    @Test
    public void testListByAutomationAccount() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"runbookType\":\"GraphPowerShellWorkflow\",\"publishContentLink\":{\"uri\":\"hyhtmjodui\",\"contentHash\":{\"algorithm\":\"ulxfaryrvjl\",\"value\":\"dezvjqw\"},\"version\":\"oyiyaxqv\"},\"state\":\"New\",\"logVerbose\":false,\"logProgress\":false,\"logActivityTrace\":885063607,\"jobCount\":317058826,\"parameters\":{\"e\":{\"type\":\"vbooqbmdqrxy\",\"isMandatory\":false,\"position\":523310744,\"defaultValue\":\"cflwtjdtlr\"},\"cozzomehxlant\":{\"type\":\"oyycuxdtz\",\"isMandatory\":true,\"position\":1963384206,\"defaultValue\":\"ud\"},\"pvwdtgckzdqiq\":{\"type\":\"amlbiju\",\"isMandatory\":true,\"position\":575990011,\"defaultValue\":\"z\"},\"ry\":{\"type\":\"ratrkwxoauwxsuyk\",\"isMandatory\":true,\"position\":1217001354,\"defaultValue\":\"slglh\"}},\"outputTypes\":[\"ihuioaeo\",\"pajtfeyvkbd\",\"dd\"],\"draft\":{\"inEdit\":true,\"draftContentLink\":{\"uri\":\"xbeuuqu\",\"contentHash\":{\"algorithm\":\"zwtjwwguzytijc\",\"value\":\"fn\"},\"version\":\"deg\"},\"creationTime\":\"2021-08-26T08:21:15Z\",\"lastModifiedTime\":\"2021-09-09T15:19:39Z\",\"parameters\":{\"t\":{\"type\":\"kbjuckcatuqbhp\",\"isMandatory\":true,\"position\":89814975,\"defaultValue\":\"pzdlyseidtoak\"},\"gdirda\":{\"type\":\"ytgrhzbqfd\",\"isMandatory\":false,\"position\":1911258356,\"defaultValue\":\"tvcshtkutzcttb\"},\"fgeoagfuoftnx\":{\"type\":\"tzjgcfjfxtbwj\",\"isMandatory\":true,\"position\":1842223292,\"defaultValue\":\"dgfttmd\"},\"czljdnci\":{\"type\":\"wxmdaj\",\"isMandatory\":false,\"position\":1306802369,\"defaultValue\":\"sevmdmzenlrstg\"}},\"outputTypes\":[\"vamyyznmrgcdo\",\"cvucgytoxu\",\"httnzqs\",\"qmebgszplusdekpd\"]},\"provisioningState\":\"Succeeded\",\"lastModifiedBy\":\"sgpgvokyejidbd\",\"creationTime\":\"2020-12-24T11:25:51Z\",\"lastModifiedTime\":\"2021-09-27T10:41:48Z\",\"description\":\"y\"},\"etag\":\"ztlvv\",\"location\":\"snmr\",\"tags\":{\"va\":\"jtrepwpwfkcaux\",\"txluevs\":\"cpfpdofuckcl\",\"qebuuxjxhfxfjwp\":\"lzwilfngojf\",\"gzzxljbkhxsd\":\"kktpmbmxbmbr\"},\"id\":\"laumydmhweqjf\",\"name\":\"xydgtokvqbvwg\",\"type\":\"gwzpvxak\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AutomationManager manager = AutomationManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<Runbook> response
            = manager.runbooks().listByAutomationAccount("ceeg", "yieztkutnjil", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("snmr", response.iterator().next().location());
        Assertions.assertEquals("jtrepwpwfkcaux", response.iterator().next().tags().get("va"));
        Assertions.assertEquals("ztlvv", response.iterator().next().etag());
        Assertions.assertEquals(RunbookTypeEnum.GRAPH_POWER_SHELL_WORKFLOW, response.iterator().next().runbookType());
        Assertions.assertEquals("hyhtmjodui", response.iterator().next().publishContentLink().uri());
        Assertions.assertEquals("ulxfaryrvjl",
            response.iterator().next().publishContentLink().contentHash().algorithm());
        Assertions.assertEquals("dezvjqw", response.iterator().next().publishContentLink().contentHash().value());
        Assertions.assertEquals("oyiyaxqv", response.iterator().next().publishContentLink().version());
        Assertions.assertEquals(RunbookState.NEW, response.iterator().next().state());
        Assertions.assertEquals(false, response.iterator().next().logVerbose());
        Assertions.assertEquals(false, response.iterator().next().logProgress());
        Assertions.assertEquals(885063607, response.iterator().next().logActivityTrace());
        Assertions.assertEquals(317058826, response.iterator().next().jobCount());
        Assertions.assertEquals("vbooqbmdqrxy", response.iterator().next().parameters().get("e").type());
        Assertions.assertEquals(false, response.iterator().next().parameters().get("e").isMandatory());
        Assertions.assertEquals(523310744, response.iterator().next().parameters().get("e").position());
        Assertions.assertEquals("cflwtjdtlr", response.iterator().next().parameters().get("e").defaultValue());
        Assertions.assertEquals("ihuioaeo", response.iterator().next().outputTypes().get(0));
        Assertions.assertEquals(true, response.iterator().next().draft().inEdit());
        Assertions.assertEquals("xbeuuqu", response.iterator().next().draft().draftContentLink().uri());
        Assertions.assertEquals("zwtjwwguzytijc",
            response.iterator().next().draft().draftContentLink().contentHash().algorithm());
        Assertions.assertEquals("fn", response.iterator().next().draft().draftContentLink().contentHash().value());
        Assertions.assertEquals("deg", response.iterator().next().draft().draftContentLink().version());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-26T08:21:15Z"),
            response.iterator().next().draft().creationTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-09T15:19:39Z"),
            response.iterator().next().draft().lastModifiedTime());
        Assertions.assertEquals("kbjuckcatuqbhp", response.iterator().next().draft().parameters().get("t").type());
        Assertions.assertEquals(true, response.iterator().next().draft().parameters().get("t").isMandatory());
        Assertions.assertEquals(89814975, response.iterator().next().draft().parameters().get("t").position());
        Assertions.assertEquals("pzdlyseidtoak",
            response.iterator().next().draft().parameters().get("t").defaultValue());
        Assertions.assertEquals("vamyyznmrgcdo", response.iterator().next().draft().outputTypes().get(0));
        Assertions.assertEquals(RunbookProvisioningState.SUCCEEDED, response.iterator().next().provisioningState());
        Assertions.assertEquals("sgpgvokyejidbd", response.iterator().next().lastModifiedBy());
        Assertions.assertEquals(OffsetDateTime.parse("2020-12-24T11:25:51Z"),
            response.iterator().next().creationTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-27T10:41:48Z"),
            response.iterator().next().lastModifiedTime());
        Assertions.assertEquals("y", response.iterator().next().description());
    }
}
