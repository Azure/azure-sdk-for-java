// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.util.Context;
import com.azure.resourcemanager.automation.AutomationManager;
import com.azure.resourcemanager.automation.models.Runbook;
import com.azure.resourcemanager.automation.models.RunbookProvisioningState;
import com.azure.resourcemanager.automation.models.RunbookState;
import com.azure.resourcemanager.automation.models.RunbookTypeEnum;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class RunbooksListByAutomationAccountMockTests {
    @Test
    public void testListByAutomationAccount() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"value\":[{\"properties\":{\"runbookType\":\"PowerShell\",\"publishContentLink\":{\"uri\":\"mwgxqlde\",\"version\":\"jgxieqfkyfh\"},\"state\":\"Published\",\"logVerbose\":true,\"logProgress\":false,\"logActivityTrace\":396625610,\"jobCount\":1783799808,\"parameters\":{},\"outputTypes\":[\"pajbmgeumexmjbx\",\"bccwkqmtxapeqi\",\"crpilgftrq\"],\"draft\":{\"inEdit\":false,\"creationTime\":\"2021-07-16T01:22:02Z\",\"lastModifiedTime\":\"2021-09-25T09:55:52Z\",\"parameters\":{},\"outputTypes\":[]},\"provisioningState\":\"Succeeded\",\"lastModifiedBy\":\"hlf\",\"creationTime\":\"2021-05-28T21:51:17Z\",\"lastModifiedTime\":\"2021-11-07T13:39:12Z\",\"description\":\"muadjnfsncski\"},\"etag\":\"shjgczetybnxg\",\"location\":\"tlcgctjchfjvmy\",\"tags\":{\"cljkxpyl\":\"ebecuvlbefv\",\"eypdvrbk\":\"woxzgwpsyxji\"},\"id\":\"rdkdkgaw\",\"name\":\"wjxildfkcefeyg\",\"type\":\"q\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        AutomationManager manager =
            AutomationManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<Runbook> response =
            manager.runbooks().listByAutomationAccount("ersejeg", "rkjguwrjmwvvbt", Context.NONE);

        Assertions.assertEquals("tlcgctjchfjvmy", response.iterator().next().location());
        Assertions.assertEquals("ebecuvlbefv", response.iterator().next().tags().get("cljkxpyl"));
        Assertions.assertEquals("shjgczetybnxg", response.iterator().next().etag());
        Assertions.assertEquals(RunbookTypeEnum.POWER_SHELL, response.iterator().next().runbookType());
        Assertions.assertEquals("mwgxqlde", response.iterator().next().publishContentLink().uri());
        Assertions.assertEquals("jgxieqfkyfh", response.iterator().next().publishContentLink().version());
        Assertions.assertEquals(RunbookState.PUBLISHED, response.iterator().next().state());
        Assertions.assertEquals(true, response.iterator().next().logVerbose());
        Assertions.assertEquals(false, response.iterator().next().logProgress());
        Assertions.assertEquals(396625610, response.iterator().next().logActivityTrace());
        Assertions.assertEquals(1783799808, response.iterator().next().jobCount());
        Assertions.assertEquals("pajbmgeumexmjbx", response.iterator().next().outputTypes().get(0));
        Assertions.assertEquals(false, response.iterator().next().draft().inEdit());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-07-16T01:22:02Z"), response.iterator().next().draft().creationTime());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-09-25T09:55:52Z"), response.iterator().next().draft().lastModifiedTime());
        Assertions.assertEquals(RunbookProvisioningState.SUCCEEDED, response.iterator().next().provisioningState());
        Assertions.assertEquals("hlf", response.iterator().next().lastModifiedBy());
        Assertions
            .assertEquals(OffsetDateTime.parse("2021-05-28T21:51:17Z"), response.iterator().next().creationTime());
        Assertions
            .assertEquals(OffsetDateTime.parse("2021-11-07T13:39:12Z"), response.iterator().next().lastModifiedTime());
        Assertions.assertEquals("muadjnfsncski", response.iterator().next().description());
    }
}
