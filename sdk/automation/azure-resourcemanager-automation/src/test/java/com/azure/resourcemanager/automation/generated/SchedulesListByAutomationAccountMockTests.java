// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.automation.AutomationManager;
import com.azure.resourcemanager.automation.models.Schedule;
import com.azure.resourcemanager.automation.models.ScheduleDay;
import com.azure.resourcemanager.automation.models.ScheduleFrequency;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class SchedulesListByAutomationAccountMockTests {
    @Test
    public void testListByAutomationAccount() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"startTime\":\"2021-01-24T13:27:51Z\",\"startTimeOffsetMinutes\":62.5853531318342,\"expiryTime\":\"2021-02-12T08:54:35Z\",\"expiryTimeOffsetMinutes\":17.24367191275237,\"isEnabled\":false,\"nextRun\":\"2021-10-24T21:03:41Z\",\"nextRunOffsetMinutes\":76.48192413759193,\"interval\":\"datacqrq\",\"frequency\":\"OneTime\",\"timeZone\":\"jtdrhutf\",\"advancedSchedule\":{\"weekDays\":[\"txop\",\"eh\",\"adkm\",\"zgssz\"],\"monthDays\":[186241568,1475482098,1067818020],\"monthlyOccurrences\":[{\"occurrence\":1188736161,\"day\":\"Tuesday\"},{\"occurrence\":989359747,\"day\":\"Sunday\"},{\"occurrence\":815863959,\"day\":\"Saturday\"},{\"occurrence\":1486832256,\"day\":\"Monday\"}]},\"creationTime\":\"2021-10-31T15:31:40Z\",\"lastModifiedTime\":\"2021-07-05T08:53Z\",\"description\":\"xxc\"},\"id\":\"bmyqjog\",\"name\":\"dsaidjanormovdxx\",\"type\":\"rntu\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AutomationManager manager = AutomationManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<Schedule> response
            = manager.schedules().listByAutomationAccount("mfxm", "vprstv", com.azure.core.util.Context.NONE);

        Assertions.assertEquals(OffsetDateTime.parse("2021-01-24T13:27:51Z"), response.iterator().next().startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-12T08:54:35Z"), response.iterator().next().expiryTime());
        Assertions.assertEquals(17.24367191275237D, response.iterator().next().expiryTimeOffsetMinutes());
        Assertions.assertEquals(false, response.iterator().next().isEnabled());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-24T21:03:41Z"), response.iterator().next().nextRun());
        Assertions.assertEquals(76.48192413759193D, response.iterator().next().nextRunOffsetMinutes());
        Assertions.assertEquals(ScheduleFrequency.ONE_TIME, response.iterator().next().frequency());
        Assertions.assertEquals("jtdrhutf", response.iterator().next().timeZone());
        Assertions.assertEquals("txop", response.iterator().next().advancedSchedule().weekDays().get(0));
        Assertions.assertEquals(186241568, response.iterator().next().advancedSchedule().monthDays().get(0));
        Assertions.assertEquals(1188736161,
            response.iterator().next().advancedSchedule().monthlyOccurrences().get(0).occurrence());
        Assertions.assertEquals(ScheduleDay.TUESDAY,
            response.iterator().next().advancedSchedule().monthlyOccurrences().get(0).day());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-31T15:31:40Z"),
            response.iterator().next().creationTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-05T08:53Z"),
            response.iterator().next().lastModifiedTime());
        Assertions.assertEquals("xxc", response.iterator().next().description());
    }
}
