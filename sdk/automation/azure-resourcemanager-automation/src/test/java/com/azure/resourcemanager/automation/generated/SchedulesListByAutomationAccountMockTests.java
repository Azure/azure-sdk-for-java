// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.util.Context;
import com.azure.resourcemanager.automation.AutomationManager;
import com.azure.resourcemanager.automation.models.Schedule;
import com.azure.resourcemanager.automation.models.ScheduleFrequency;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class SchedulesListByAutomationAccountMockTests {
    @Test
    public void testListByAutomationAccount() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"value\":[{\"properties\":{\"startTime\":\"2021-12-04T23:54:39Z\",\"startTimeOffsetMinutes\":80.83503043369454,\"expiryTime\":\"2021-06-25T20:26:26Z\",\"expiryTimeOffsetMinutes\":76.03738359243984,\"isEnabled\":true,\"nextRun\":\"2021-10-06T16:24:32Z\",\"nextRunOffsetMinutes\":3.7444988645892185,\"frequency\":\"Hour\",\"timeZone\":\"gqdtadrakg\",\"advancedSchedule\":{\"weekDays\":[],\"monthDays\":[],\"monthlyOccurrences\":[]},\"creationTime\":\"2021-10-12T17:44:39Z\",\"lastModifiedTime\":\"2021-07-01T12:05:02Z\",\"description\":\"yhgsqtnqsktxq\"},\"id\":\"p\",\"name\":\"bqggw\",\"type\":\"eiwdhdmncgbfzu\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        AutomationManager manager =
            AutomationManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<Schedule> response =
            manager.schedules().listByAutomationAccount("kxp", "jpewpyjlfx", Context.NONE);

        Assertions.assertEquals(OffsetDateTime.parse("2021-12-04T23:54:39Z"), response.iterator().next().startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-25T20:26:26Z"), response.iterator().next().expiryTime());
        Assertions.assertEquals(76.03738359243984D, response.iterator().next().expiryTimeOffsetMinutes());
        Assertions.assertEquals(true, response.iterator().next().isEnabled());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-06T16:24:32Z"), response.iterator().next().nextRun());
        Assertions.assertEquals(3.7444988645892185D, response.iterator().next().nextRunOffsetMinutes());
        Assertions.assertEquals(ScheduleFrequency.HOUR, response.iterator().next().frequency());
        Assertions.assertEquals("gqdtadrakg", response.iterator().next().timeZone());
        Assertions
            .assertEquals(OffsetDateTime.parse("2021-10-12T17:44:39Z"), response.iterator().next().creationTime());
        Assertions
            .assertEquals(OffsetDateTime.parse("2021-07-01T12:05:02Z"), response.iterator().next().lastModifiedTime());
        Assertions.assertEquals("yhgsqtnqsktxq", response.iterator().next().description());
    }
}
