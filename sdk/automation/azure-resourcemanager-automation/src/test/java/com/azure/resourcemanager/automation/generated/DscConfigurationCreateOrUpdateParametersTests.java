// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.automation.models.ContentSource;
import com.azure.resourcemanager.automation.models.ContentSourceType;
import com.azure.resourcemanager.automation.models.DscConfigurationCreateOrUpdateParameters;
import com.azure.resourcemanager.automation.models.DscConfigurationParameter;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class DscConfigurationCreateOrUpdateParametersTests {
    @Test
    public void testDeserialize() {
        DscConfigurationCreateOrUpdateParameters model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"logVerbose\":false,\"logProgress\":true,\"source\":{\"type\":\"uri\",\"value\":\"rc\",\"version\":\"tso\"},\"parameters\":{\"oqvm\":{\"type\":\"enxpmyyefr\",\"isMandatory\":true,\"position\":898501663,\"defaultValue\":\"qskaw\"},\"fegcea\":{\"type\":\"npqfrtqlkzmeg\",\"isMandatory\":true,\"position\":1313848861,\"defaultValue\":\"xlzyqd\"}},\"description\":\"xwh\"},\"name\":\"nsymoyqhlwigd\",\"location\":\"bkbxgomfa\",\"tags\":{\"e\":\"asqvd\",\"uxakjsqzhzbezk\":\"y\",\"kgfmocwahpq\":\"imsidxasicddyvvj\"}}")
                .toObject(DscConfigurationCreateOrUpdateParameters.class);
        Assertions.assertEquals("nsymoyqhlwigd", model.name());
        Assertions.assertEquals("bkbxgomfa", model.location());
        Assertions.assertEquals("asqvd", model.tags().get("e"));
        Assertions.assertEquals(false, model.logVerbose());
        Assertions.assertEquals(true, model.logProgress());
        Assertions.assertEquals(ContentSourceType.URI, model.source().type());
        Assertions.assertEquals("rc", model.source().value());
        Assertions.assertEquals("tso", model.source().version());
        Assertions.assertEquals("enxpmyyefr", model.parameters().get("oqvm").type());
        Assertions.assertEquals(true, model.parameters().get("oqvm").isMandatory());
        Assertions.assertEquals(898501663, model.parameters().get("oqvm").position());
        Assertions.assertEquals("qskaw", model.parameters().get("oqvm").defaultValue());
        Assertions.assertEquals("xwh", model.description());
    }

    @Test
    public void testSerialize() {
        DscConfigurationCreateOrUpdateParameters model =
            new DscConfigurationCreateOrUpdateParameters()
                .withName("nsymoyqhlwigd")
                .withLocation("bkbxgomfa")
                .withTags(mapOf("e", "asqvd", "uxakjsqzhzbezk", "y", "kgfmocwahpq", "imsidxasicddyvvj"))
                .withLogVerbose(false)
                .withLogProgress(true)
                .withSource(new ContentSource().withType(ContentSourceType.URI).withValue("rc").withVersion("tso"))
                .withParameters(
                    mapOf(
                        "oqvm",
                        new DscConfigurationParameter()
                            .withType("enxpmyyefr")
                            .withIsMandatory(true)
                            .withPosition(898501663)
                            .withDefaultValue("qskaw"),
                        "fegcea",
                        new DscConfigurationParameter()
                            .withType("npqfrtqlkzmeg")
                            .withIsMandatory(true)
                            .withPosition(1313848861)
                            .withDefaultValue("xlzyqd")))
                .withDescription("xwh");
        model = BinaryData.fromObject(model).toObject(DscConfigurationCreateOrUpdateParameters.class);
        Assertions.assertEquals("nsymoyqhlwigd", model.name());
        Assertions.assertEquals("bkbxgomfa", model.location());
        Assertions.assertEquals("asqvd", model.tags().get("e"));
        Assertions.assertEquals(false, model.logVerbose());
        Assertions.assertEquals(true, model.logProgress());
        Assertions.assertEquals(ContentSourceType.URI, model.source().type());
        Assertions.assertEquals("rc", model.source().value());
        Assertions.assertEquals("tso", model.source().version());
        Assertions.assertEquals("enxpmyyefr", model.parameters().get("oqvm").type());
        Assertions.assertEquals(true, model.parameters().get("oqvm").isMandatory());
        Assertions.assertEquals(898501663, model.parameters().get("oqvm").position());
        Assertions.assertEquals("qskaw", model.parameters().get("oqvm").defaultValue());
        Assertions.assertEquals("xwh", model.description());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
