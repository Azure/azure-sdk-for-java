// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.automation.models.ContentHash;
import com.azure.resourcemanager.automation.models.ContentSource;
import com.azure.resourcemanager.automation.models.ContentSourceType;
import com.azure.resourcemanager.automation.models.DscConfigurationCreateOrUpdateParameters;
import com.azure.resourcemanager.automation.models.DscConfigurationParameter;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DscConfigurationCreateOrUpdateParametersTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DscConfigurationCreateOrUpdateParameters model = BinaryData.fromString(
            "{\"properties\":{\"logVerbose\":true,\"logProgress\":false,\"source\":{\"hash\":{\"algorithm\":\"hbxcu\",\"value\":\"chxgs\"},\"type\":\"uri\",\"value\":\"d\",\"version\":\"robwjlvizbfhf\"},\"parameters\":{\"rrwoycqucwyhahn\":{\"type\":\"cqpbtuo\",\"isMandatory\":true,\"position\":694539545,\"defaultValue\":\"bbelawumuaslzk\"},\"rzpgep\":{\"type\":\"drkywuhps\",\"isMandatory\":true,\"position\":2057925756,\"defaultValue\":\"tlwexxwlalniexz\"},\"xkjibnxmy\":{\"type\":\"yb\",\"isMandatory\":false,\"position\":1790855590,\"defaultValue\":\"akchzyvlixqnrk\"},\"psttexoq\":{\"type\":\"xs\",\"isMandatory\":true,\"position\":1550616862,\"defaultValue\":\"lwi\"}},\"description\":\"wcyyufmhruncu\"},\"name\":\"qspkcdqzhlctd\",\"location\":\"nqndyfpchrqbn\",\"tags\":{\"jumvqqolihrraio\":\"cgegydcwbo\",\"fuojrngif\":\"aubrjtloq\",\"dfqwmkyoq\":\"rzpasccbiuimzdly\",\"lzo\":\"fdvruz\"}}")
            .toObject(DscConfigurationCreateOrUpdateParameters.class);
        Assertions.assertEquals("qspkcdqzhlctd", model.name());
        Assertions.assertEquals("nqndyfpchrqbn", model.location());
        Assertions.assertEquals("cgegydcwbo", model.tags().get("jumvqqolihrraio"));
        Assertions.assertEquals(true, model.logVerbose());
        Assertions.assertEquals(false, model.logProgress());
        Assertions.assertEquals("hbxcu", model.source().hash().algorithm());
        Assertions.assertEquals("chxgs", model.source().hash().value());
        Assertions.assertEquals(ContentSourceType.URI, model.source().type());
        Assertions.assertEquals("d", model.source().value());
        Assertions.assertEquals("robwjlvizbfhf", model.source().version());
        Assertions.assertEquals("cqpbtuo", model.parameters().get("rrwoycqucwyhahn").type());
        Assertions.assertEquals(true, model.parameters().get("rrwoycqucwyhahn").isMandatory());
        Assertions.assertEquals(694539545, model.parameters().get("rrwoycqucwyhahn").position());
        Assertions.assertEquals("bbelawumuaslzk", model.parameters().get("rrwoycqucwyhahn").defaultValue());
        Assertions.assertEquals("wcyyufmhruncu", model.description());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DscConfigurationCreateOrUpdateParameters model
            = new DscConfigurationCreateOrUpdateParameters().withName("qspkcdqzhlctd")
                .withLocation("nqndyfpchrqbn")
                .withTags(mapOf("jumvqqolihrraio", "cgegydcwbo", "fuojrngif", "aubrjtloq", "dfqwmkyoq",
                    "rzpasccbiuimzdly", "lzo", "fdvruz"))
                .withLogVerbose(true)
                .withLogProgress(false)
                .withSource(new ContentSource().withHash(new ContentHash().withAlgorithm("hbxcu").withValue("chxgs"))
                    .withType(ContentSourceType.URI)
                    .withValue("d")
                    .withVersion("robwjlvizbfhf"))
                .withParameters(mapOf("rrwoycqucwyhahn",
                    new DscConfigurationParameter().withType("cqpbtuo")
                        .withIsMandatory(true)
                        .withPosition(694539545)
                        .withDefaultValue("bbelawumuaslzk"),
                    "rzpgep",
                    new DscConfigurationParameter().withType("drkywuhps")
                        .withIsMandatory(true)
                        .withPosition(2057925756)
                        .withDefaultValue("tlwexxwlalniexz"),
                    "xkjibnxmy",
                    new DscConfigurationParameter().withType("yb")
                        .withIsMandatory(false)
                        .withPosition(1790855590)
                        .withDefaultValue("akchzyvlixqnrk"),
                    "psttexoq",
                    new DscConfigurationParameter().withType("xs")
                        .withIsMandatory(true)
                        .withPosition(1550616862)
                        .withDefaultValue("lwi")))
                .withDescription("wcyyufmhruncu");
        model = BinaryData.fromObject(model).toObject(DscConfigurationCreateOrUpdateParameters.class);
        Assertions.assertEquals("qspkcdqzhlctd", model.name());
        Assertions.assertEquals("nqndyfpchrqbn", model.location());
        Assertions.assertEquals("cgegydcwbo", model.tags().get("jumvqqolihrraio"));
        Assertions.assertEquals(true, model.logVerbose());
        Assertions.assertEquals(false, model.logProgress());
        Assertions.assertEquals("hbxcu", model.source().hash().algorithm());
        Assertions.assertEquals("chxgs", model.source().hash().value());
        Assertions.assertEquals(ContentSourceType.URI, model.source().type());
        Assertions.assertEquals("d", model.source().value());
        Assertions.assertEquals("robwjlvizbfhf", model.source().version());
        Assertions.assertEquals("cqpbtuo", model.parameters().get("rrwoycqucwyhahn").type());
        Assertions.assertEquals(true, model.parameters().get("rrwoycqucwyhahn").isMandatory());
        Assertions.assertEquals(694539545, model.parameters().get("rrwoycqucwyhahn").position());
        Assertions.assertEquals("bbelawumuaslzk", model.parameters().get("rrwoycqucwyhahn").defaultValue());
        Assertions.assertEquals("wcyyufmhruncu", model.description());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
