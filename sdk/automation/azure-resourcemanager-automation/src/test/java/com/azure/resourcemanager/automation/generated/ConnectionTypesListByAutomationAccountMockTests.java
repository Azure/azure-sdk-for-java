// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.automation.AutomationManager;
import com.azure.resourcemanager.automation.models.ConnectionType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ConnectionTypesListByAutomationAccountMockTests {
    @Test
    public void testListByAutomationAccount() throws Exception {
        String responseStr
            = "{\"value\":[{\"id\":\"dlqjbedpfixlhu\",\"name\":\"omihzbdnpxpkcd\",\"type\":\"eyxel\",\"properties\":{\"isGlobal\":true,\"fieldDefinitions\":{\"kb\":{\"isEncrypted\":false,\"isOptional\":false,\"type\":\"ssjyghsfx\"}},\"creationTime\":\"2021-07-10T03:31:24Z\",\"lastModifiedTime\":\"2021-06-10T15:25:04Z\",\"description\":\"qfmefgvqcpdwj\"}}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AutomationManager manager = AutomationManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<ConnectionType> response = manager.connectionTypes()
            .listByAutomationAccount("gwcd", "zseznuxkeuairaa", com.azure.core.util.Context.NONE);

        Assertions.assertEquals(true, response.iterator().next().isGlobal());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-10T15:25:04Z"),
            response.iterator().next().lastModifiedTime());
        Assertions.assertEquals("qfmefgvqcpdwj", response.iterator().next().description());
    }
}
