// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.util.Context;
import com.azure.resourcemanager.automation.AutomationManager;
import com.azure.resourcemanager.automation.models.Webhook;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class WebhooksListByAutomationAccountMockTests {
    @Test
    public void testListByAutomationAccount() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"value\":[{\"properties\":{\"isEnabled\":true,\"uri\":\"labnsmjkwynq\",\"expiryTime\":\"2021-05-26T07:05:34Z\",\"lastInvokedTime\":\"2021-01-21T15:48:08Z\",\"parameters\":{\"tjcrspxklurccl\":\"kvwjtqpkevmy\",\"gpxvkqmaupxvpi\":\"gxannnoytzposewx\",\"ds\":\"dfaifyzyzeyuube\",\"ytoithgygvfl\":\"l\"},\"runbook\":{\"name\":\"dihoyn\"},\"runOn\":\"xwetwkdrcyrucpc\",\"creationTime\":\"2021-06-13T01:59:19Z\",\"lastModifiedTime\":\"2021-01-02T00:46:22Z\",\"lastModifiedBy\":\"qumoeno\",\"description\":\"aienhqhsknd\"},\"id\":\"elqkaadlkn\",\"name\":\"foanniyopetx\",\"type\":\"vcnrly\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        AutomationManager manager =
            AutomationManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<Webhook> response =
            manager.webhooks().listByAutomationAccount("pxgzdyimsfayor", "r", "vk", Context.NONE);

        Assertions.assertEquals(true, response.iterator().next().isEnabled());
        Assertions.assertEquals("labnsmjkwynq", response.iterator().next().uri());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-26T07:05:34Z"), response.iterator().next().expiryTime());
        Assertions
            .assertEquals(OffsetDateTime.parse("2021-01-21T15:48:08Z"), response.iterator().next().lastInvokedTime());
        Assertions.assertEquals("kvwjtqpkevmy", response.iterator().next().parameters().get("tjcrspxklurccl"));
        Assertions.assertEquals("dihoyn", response.iterator().next().runbook().name());
        Assertions.assertEquals("xwetwkdrcyrucpc", response.iterator().next().runOn());
        Assertions
            .assertEquals(OffsetDateTime.parse("2021-06-13T01:59:19Z"), response.iterator().next().creationTime());
        Assertions
            .assertEquals(OffsetDateTime.parse("2021-01-02T00:46:22Z"), response.iterator().next().lastModifiedTime());
        Assertions.assertEquals("qumoeno", response.iterator().next().lastModifiedBy());
        Assertions.assertEquals("aienhqhsknd", response.iterator().next().description());
    }
}
