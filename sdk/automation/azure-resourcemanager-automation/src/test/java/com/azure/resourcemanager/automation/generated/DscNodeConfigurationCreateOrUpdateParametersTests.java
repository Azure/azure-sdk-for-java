// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.automation.models.ContentHash;
import com.azure.resourcemanager.automation.models.ContentSource;
import com.azure.resourcemanager.automation.models.ContentSourceType;
import com.azure.resourcemanager.automation.models.DscConfigurationAssociationProperty;
import com.azure.resourcemanager.automation.models.DscNodeConfigurationCreateOrUpdateParameters;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DscNodeConfigurationCreateOrUpdateParametersTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DscNodeConfigurationCreateOrUpdateParameters model = BinaryData.fromString(
            "{\"properties\":{\"source\":{\"hash\":{\"algorithm\":\"wiqzbqjvsovmyo\",\"value\":\"acspkwl\"},\"type\":\"uri\",\"value\":\"bpxjmfl\",\"version\":\"vnchrkcci\"},\"configuration\":{\"name\":\"zjuqkhrsaj\"},\"incrementNodeConfigurationBuild\":false},\"name\":\"ofoskghs\",\"tags\":{\"xieduugidyjrr\":\"imjm\",\"v\":\"byao\"}}")
            .toObject(DscNodeConfigurationCreateOrUpdateParameters.class);
        Assertions.assertEquals("ofoskghs", model.name());
        Assertions.assertEquals("imjm", model.tags().get("xieduugidyjrr"));
        Assertions.assertEquals("wiqzbqjvsovmyo", model.source().hash().algorithm());
        Assertions.assertEquals("acspkwl", model.source().hash().value());
        Assertions.assertEquals(ContentSourceType.URI, model.source().type());
        Assertions.assertEquals("bpxjmfl", model.source().value());
        Assertions.assertEquals("vnchrkcci", model.source().version());
        Assertions.assertEquals("zjuqkhrsaj", model.configuration().name());
        Assertions.assertEquals(false, model.incrementNodeConfigurationBuild());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DscNodeConfigurationCreateOrUpdateParameters model
            = new DscNodeConfigurationCreateOrUpdateParameters().withName("ofoskghs")
                .withTags(mapOf("xieduugidyjrr", "imjm", "v", "byao"))
                .withSource(
                    new ContentSource().withHash(new ContentHash().withAlgorithm("wiqzbqjvsovmyo").withValue("acspkwl"))
                        .withType(ContentSourceType.URI)
                        .withValue("bpxjmfl")
                        .withVersion("vnchrkcci"))
                .withConfiguration(new DscConfigurationAssociationProperty().withName("zjuqkhrsaj"))
                .withIncrementNodeConfigurationBuild(false);
        model = BinaryData.fromObject(model).toObject(DscNodeConfigurationCreateOrUpdateParameters.class);
        Assertions.assertEquals("ofoskghs", model.name());
        Assertions.assertEquals("imjm", model.tags().get("xieduugidyjrr"));
        Assertions.assertEquals("wiqzbqjvsovmyo", model.source().hash().algorithm());
        Assertions.assertEquals("acspkwl", model.source().hash().value());
        Assertions.assertEquals(ContentSourceType.URI, model.source().type());
        Assertions.assertEquals("bpxjmfl", model.source().value());
        Assertions.assertEquals("vnchrkcci", model.source().version());
        Assertions.assertEquals("zjuqkhrsaj", model.configuration().name());
        Assertions.assertEquals(false, model.incrementNodeConfigurationBuild());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
