// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.automation.models.ContentSource;
import com.azure.resourcemanager.automation.models.ContentSourceType;
import com.azure.resourcemanager.automation.models.DscConfigurationAssociationProperty;
import com.azure.resourcemanager.automation.models.DscNodeConfigurationCreateOrUpdateParameters;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class DscNodeConfigurationCreateOrUpdateParametersTests {
    @Test
    public void testDeserialize() {
        DscNodeConfigurationCreateOrUpdateParameters model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"source\":{\"type\":\"embeddedContent\",\"value\":\"v\",\"version\":\"jctzenkei\"},\"configuration\":{\"name\":\"zhmkdasvflyh\"},\"incrementNodeConfigurationBuild\":false},\"name\":\"dchxgsrboldfor\",\"tags\":{\"qpbtuodxes\":\"jlvizbfhfovva\",\"rrwoycqucwyhahn\":\"abbelawumuaslzk\",\"ywuhpsvfuur\":\"mdr\"}}")
                .toObject(DscNodeConfigurationCreateOrUpdateParameters.class);
        Assertions.assertEquals("dchxgsrboldfor", model.name());
        Assertions.assertEquals("jlvizbfhfovva", model.tags().get("qpbtuodxes"));
        Assertions.assertEquals(ContentSourceType.EMBEDDED_CONTENT, model.source().type());
        Assertions.assertEquals("v", model.source().value());
        Assertions.assertEquals("jctzenkei", model.source().version());
        Assertions.assertEquals("zhmkdasvflyh", model.configuration().name());
        Assertions.assertEquals(false, model.incrementNodeConfigurationBuild());
    }

    @Test
    public void testSerialize() {
        DscNodeConfigurationCreateOrUpdateParameters model =
            new DscNodeConfigurationCreateOrUpdateParameters()
                .withName("dchxgsrboldfor")
                .withTags(
                    mapOf("qpbtuodxes", "jlvizbfhfovva", "rrwoycqucwyhahn", "abbelawumuaslzk", "ywuhpsvfuur", "mdr"))
                .withSource(
                    new ContentSource()
                        .withType(ContentSourceType.EMBEDDED_CONTENT)
                        .withValue("v")
                        .withVersion("jctzenkei"))
                .withConfiguration(new DscConfigurationAssociationProperty().withName("zhmkdasvflyh"))
                .withIncrementNodeConfigurationBuild(false);
        model = BinaryData.fromObject(model).toObject(DscNodeConfigurationCreateOrUpdateParameters.class);
        Assertions.assertEquals("dchxgsrboldfor", model.name());
        Assertions.assertEquals("jlvizbfhfovva", model.tags().get("qpbtuodxes"));
        Assertions.assertEquals(ContentSourceType.EMBEDDED_CONTENT, model.source().type());
        Assertions.assertEquals("v", model.source().value());
        Assertions.assertEquals("jctzenkei", model.source().version());
        Assertions.assertEquals("zhmkdasvflyh", model.configuration().name());
        Assertions.assertEquals(false, model.incrementNodeConfigurationBuild());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
