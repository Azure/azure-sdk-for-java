// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.util.Context;
import com.azure.resourcemanager.automation.AutomationManager;
import com.azure.resourcemanager.automation.models.Job;
import com.azure.resourcemanager.automation.models.JobProvisioningState;
import com.azure.resourcemanager.automation.models.JobStatus;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.UUID;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class JobsGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"runbook\":{\"name\":\"uxsp\"},\"startedBy\":\"ymmqgwokmikp\",\"runOn\":\"fbmjxuvji\",\"jobId\":\"9435c38b-76ca-4407-9b77-e0fc3822979d\",\"creationTime\":\"2021-10-29T07:51:55Z\",\"status\":\"Suspended\",\"statusDetails\":\"dvwz\",\"startTime\":\"2021-06-22T06:05:08Z\",\"endTime\":\"2021-05-04T18:05:41Z\",\"exception\":\"thd\",\"lastModifiedTime\":\"2021-04-17T03:30:11Z\",\"lastStatusModifiedTime\":\"2021-06-17T08:43:47Z\",\"parameters\":{\"ksbbvtooxrp\":\"tlakfqoixwg\"},\"provisioningState\":\"Failed\"},\"id\":\"phchgjtnhtukfaci\",\"name\":\"mbf\",\"type\":\"tumeezbxvqxb\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        AutomationManager manager =
            AutomationManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        Job response =
            manager.jobs().getWithResponse("gqlmfaewzgi", "djpxpqht", "qhnmhk", "ezsdsuxheq", Context.NONE).getValue();

        Assertions.assertEquals("uxsp", response.runbook().name());
        Assertions.assertEquals("ymmqgwokmikp", response.startedBy());
        Assertions.assertEquals("fbmjxuvji", response.runOn());
        Assertions.assertEquals(UUID.fromString("9435c38b-76ca-4407-9b77-e0fc3822979d"), response.jobId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-29T07:51:55Z"), response.creationTime());
        Assertions.assertEquals(JobStatus.SUSPENDED, response.status());
        Assertions.assertEquals("dvwz", response.statusDetails());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-22T06:05:08Z"), response.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-04T18:05:41Z"), response.endTime());
        Assertions.assertEquals("thd", response.exception());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-17T03:30:11Z"), response.lastModifiedTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-17T08:43:47Z"), response.lastStatusModifiedTime());
        Assertions.assertEquals("tlakfqoixwg", response.parameters().get("ksbbvtooxrp"));
        Assertions.assertEquals(JobProvisioningState.FAILED, response.provisioningState());
    }
}
