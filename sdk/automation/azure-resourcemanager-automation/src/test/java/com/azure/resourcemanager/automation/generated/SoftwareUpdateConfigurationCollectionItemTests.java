// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.automation.models.AzureQueryProperties;
import com.azure.resourcemanager.automation.models.LinuxProperties;
import com.azure.resourcemanager.automation.models.LinuxUpdateClasses;
import com.azure.resourcemanager.automation.models.NonAzureQueryProperties;
import com.azure.resourcemanager.automation.models.OperatingSystemType;
import com.azure.resourcemanager.automation.models.ScheduleFrequency;
import com.azure.resourcemanager.automation.models.SoftwareUpdateConfigurationCollectionItem;
import com.azure.resourcemanager.automation.models.SoftwareUpdateConfigurationTasks;
import com.azure.resourcemanager.automation.models.TagSettingsProperties;
import com.azure.resourcemanager.automation.models.TargetProperties;
import com.azure.resourcemanager.automation.models.TaskProperties;
import com.azure.resourcemanager.automation.models.UpdateConfiguration;
import com.azure.resourcemanager.automation.models.WindowsProperties;
import com.azure.resourcemanager.automation.models.WindowsUpdateClasses;
import java.time.Duration;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SoftwareUpdateConfigurationCollectionItemTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SoftwareUpdateConfigurationCollectionItem model = BinaryData.fromString(
            "{\"name\":\"sl\",\"id\":\"iiovgqcgxu\",\"properties\":{\"updateConfiguration\":{\"operatingSystem\":\"Linux\",\"windows\":{\"includedUpdateClassifications\":\"Updates\",\"excludedKbNumbers\":[\"iowlxteqdptj\",\"wdtgukranblw\"],\"includedKbNumbers\":[\"lkccuzgygqwa\",\"oiulwgniipr\",\"lvawuwzdufypivls\",\"bjpmcubk\"],\"rebootSetting\":\"foxx\"},\"linux\":{\"includedPackageClassifications\":\"Unclassified\",\"excludedPackageNameMasks\":[\"avp\",\"h\",\"rbqgvgov\",\"bbttefjo\"],\"includedPackageNameMasks\":[\"sqyzqedikdfr\",\"biqmrjgei\",\"fqlggw\"],\"rebootSetting\":\"wzcxmjpbyephmgt\"},\"duration\":\"PT215H48M37S\",\"azureVirtualMachines\":[\"cmyfqipgxhnpo\"],\"nonAzureComputerNames\":[\"wcabvnuileeya\",\"wlpaugmrmfjlrxwt\",\"aukhfkvcisiz\"],\"targets\":{\"azureQueries\":[{\"scope\":[\"xjw\"],\"locations\":[\"edwcgyee\",\"xeiqbpsmg\",\"mguaml\"],\"tagSettings\":{}}],\"nonAzureQueries\":[{\"functionAlias\":\"msplzgaufcshhvn\",\"workspaceId\":\"gnxkympqan\"},{\"functionAlias\":\"jk\",\"workspaceId\":\"tw\"},{\"functionAlias\":\"aoypny\",\"workspaceId\":\"shxcylhkg\"}]}},\"tasks\":{\"preTask\":{\"parameters\":{\"jjkhvyomaclu\":\"pxycphdr\",\"wmkoisq\":\"vxnqmhrpqpd\",\"ypobkdqzr\":\"ssffxuifmc\",\"czzydmxzjij\":\"zsylollgt\"},\"source\":\"uaurkihcir\"},\"postTask\":{\"parameters\":{\"urnnqbnqbpiz\":\"xrdcoxnbkkja\"},\"source\":\"ltgrdogypxrxv\"}},\"frequency\":\"Week\",\"startTime\":\"2021-11-26T11:33:25Z\",\"creationTime\":\"2021-03-15T11:45:06Z\",\"lastModifiedTime\":\"2021-10-12T05:31:19Z\",\"provisioningState\":\"a\",\"nextRun\":\"2021-06-22T12:05:08Z\"}}")
            .toObject(SoftwareUpdateConfigurationCollectionItem.class);
        Assertions.assertEquals(OperatingSystemType.LINUX, model.updateConfiguration().operatingSystem());
        Assertions.assertEquals(WindowsUpdateClasses.UPDATES,
            model.updateConfiguration().windows().includedUpdateClassifications());
        Assertions.assertEquals("iowlxteqdptj", model.updateConfiguration().windows().excludedKbNumbers().get(0));
        Assertions.assertEquals("lkccuzgygqwa", model.updateConfiguration().windows().includedKbNumbers().get(0));
        Assertions.assertEquals("foxx", model.updateConfiguration().windows().rebootSetting());
        Assertions.assertEquals(LinuxUpdateClasses.UNCLASSIFIED,
            model.updateConfiguration().linux().includedPackageClassifications());
        Assertions.assertEquals("avp", model.updateConfiguration().linux().excludedPackageNameMasks().get(0));
        Assertions.assertEquals("sqyzqedikdfr", model.updateConfiguration().linux().includedPackageNameMasks().get(0));
        Assertions.assertEquals("wzcxmjpbyephmgt", model.updateConfiguration().linux().rebootSetting());
        Assertions.assertEquals(Duration.parse("PT215H48M37S"), model.updateConfiguration().duration());
        Assertions.assertEquals("cmyfqipgxhnpo", model.updateConfiguration().azureVirtualMachines().get(0));
        Assertions.assertEquals("wcabvnuileeya", model.updateConfiguration().nonAzureComputerNames().get(0));
        Assertions.assertEquals("xjw", model.updateConfiguration().targets().azureQueries().get(0).scope().get(0));
        Assertions.assertEquals("edwcgyee",
            model.updateConfiguration().targets().azureQueries().get(0).locations().get(0));
        Assertions.assertEquals("msplzgaufcshhvn",
            model.updateConfiguration().targets().nonAzureQueries().get(0).functionAlias());
        Assertions.assertEquals("gnxkympqan",
            model.updateConfiguration().targets().nonAzureQueries().get(0).workspaceId());
        Assertions.assertEquals("pxycphdr", model.tasks().preTask().parameters().get("jjkhvyomaclu"));
        Assertions.assertEquals("uaurkihcir", model.tasks().preTask().source());
        Assertions.assertEquals("xrdcoxnbkkja", model.tasks().postTask().parameters().get("urnnqbnqbpiz"));
        Assertions.assertEquals("ltgrdogypxrxv", model.tasks().postTask().source());
        Assertions.assertEquals(ScheduleFrequency.WEEK, model.frequency());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-26T11:33:25Z"), model.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-22T12:05:08Z"), model.nextRun());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SoftwareUpdateConfigurationCollectionItem model
            = new SoftwareUpdateConfigurationCollectionItem()
                .withUpdateConfiguration(new UpdateConfiguration().withOperatingSystem(OperatingSystemType.LINUX)
                    .withWindows(new WindowsProperties().withIncludedUpdateClassifications(WindowsUpdateClasses.UPDATES)
                        .withExcludedKbNumbers(Arrays.asList("iowlxteqdptj", "wdtgukranblw"))
                        .withIncludedKbNumbers(
                            Arrays.asList("lkccuzgygqwa", "oiulwgniipr", "lvawuwzdufypivls", "bjpmcubk"))
                        .withRebootSetting("foxx"))
                    .withLinux(new LinuxProperties().withIncludedPackageClassifications(LinuxUpdateClasses.UNCLASSIFIED)
                        .withExcludedPackageNameMasks(Arrays.asList("avp", "h", "rbqgvgov", "bbttefjo"))
                        .withIncludedPackageNameMasks(Arrays.asList("sqyzqedikdfr", "biqmrjgei", "fqlggw"))
                        .withRebootSetting("wzcxmjpbyephmgt"))
                    .withDuration(Duration.parse("PT215H48M37S"))
                    .withAzureVirtualMachines(Arrays.asList("cmyfqipgxhnpo"))
                    .withNonAzureComputerNames(Arrays.asList("wcabvnuileeya", "wlpaugmrmfjlrxwt", "aukhfkvcisiz"))
                    .withTargets(new TargetProperties()
                        .withAzureQueries(Arrays.asList(new AzureQueryProperties().withScope(Arrays.asList("xjw"))
                            .withLocations(Arrays.asList("edwcgyee", "xeiqbpsmg", "mguaml"))
                            .withTagSettings(new TagSettingsProperties())))
                        .withNonAzureQueries(Arrays.asList(
                            new NonAzureQueryProperties().withFunctionAlias("msplzgaufcshhvn")
                                .withWorkspaceId("gnxkympqan"),
                            new NonAzureQueryProperties().withFunctionAlias("jk").withWorkspaceId("tw"),
                            new NonAzureQueryProperties().withFunctionAlias("aoypny").withWorkspaceId("shxcylhkg")))))
                .withTasks(new SoftwareUpdateConfigurationTasks()
                    .withPreTask(new TaskProperties()
                        .withParameters(mapOf("jjkhvyomaclu", "pxycphdr", "wmkoisq", "vxnqmhrpqpd", "ypobkdqzr",
                            "ssffxuifmc", "czzydmxzjij", "zsylollgt"))
                        .withSource("uaurkihcir"))
                    .withPostTask(new TaskProperties().withParameters(mapOf("urnnqbnqbpiz", "xrdcoxnbkkja"))
                        .withSource("ltgrdogypxrxv")))
                .withFrequency(ScheduleFrequency.WEEK)
                .withStartTime(OffsetDateTime.parse("2021-11-26T11:33:25Z"))
                .withNextRun(OffsetDateTime.parse("2021-06-22T12:05:08Z"));
        model = BinaryData.fromObject(model).toObject(SoftwareUpdateConfigurationCollectionItem.class);
        Assertions.assertEquals(OperatingSystemType.LINUX, model.updateConfiguration().operatingSystem());
        Assertions.assertEquals(WindowsUpdateClasses.UPDATES,
            model.updateConfiguration().windows().includedUpdateClassifications());
        Assertions.assertEquals("iowlxteqdptj", model.updateConfiguration().windows().excludedKbNumbers().get(0));
        Assertions.assertEquals("lkccuzgygqwa", model.updateConfiguration().windows().includedKbNumbers().get(0));
        Assertions.assertEquals("foxx", model.updateConfiguration().windows().rebootSetting());
        Assertions.assertEquals(LinuxUpdateClasses.UNCLASSIFIED,
            model.updateConfiguration().linux().includedPackageClassifications());
        Assertions.assertEquals("avp", model.updateConfiguration().linux().excludedPackageNameMasks().get(0));
        Assertions.assertEquals("sqyzqedikdfr", model.updateConfiguration().linux().includedPackageNameMasks().get(0));
        Assertions.assertEquals("wzcxmjpbyephmgt", model.updateConfiguration().linux().rebootSetting());
        Assertions.assertEquals(Duration.parse("PT215H48M37S"), model.updateConfiguration().duration());
        Assertions.assertEquals("cmyfqipgxhnpo", model.updateConfiguration().azureVirtualMachines().get(0));
        Assertions.assertEquals("wcabvnuileeya", model.updateConfiguration().nonAzureComputerNames().get(0));
        Assertions.assertEquals("xjw", model.updateConfiguration().targets().azureQueries().get(0).scope().get(0));
        Assertions.assertEquals("edwcgyee",
            model.updateConfiguration().targets().azureQueries().get(0).locations().get(0));
        Assertions.assertEquals("msplzgaufcshhvn",
            model.updateConfiguration().targets().nonAzureQueries().get(0).functionAlias());
        Assertions.assertEquals("gnxkympqan",
            model.updateConfiguration().targets().nonAzureQueries().get(0).workspaceId());
        Assertions.assertEquals("pxycphdr", model.tasks().preTask().parameters().get("jjkhvyomaclu"));
        Assertions.assertEquals("uaurkihcir", model.tasks().preTask().source());
        Assertions.assertEquals("xrdcoxnbkkja", model.tasks().postTask().parameters().get("urnnqbnqbpiz"));
        Assertions.assertEquals("ltgrdogypxrxv", model.tasks().postTask().source());
        Assertions.assertEquals(ScheduleFrequency.WEEK, model.frequency());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-26T11:33:25Z"), model.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-22T12:05:08Z"), model.nextRun());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
