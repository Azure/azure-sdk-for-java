// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.automation.fluent.models.SoftwareUpdateConfigurationProperties;
import com.azure.resourcemanager.automation.models.AdvancedSchedule;
import com.azure.resourcemanager.automation.models.LinuxProperties;
import com.azure.resourcemanager.automation.models.LinuxUpdateClasses;
import com.azure.resourcemanager.automation.models.OperatingSystemType;
import com.azure.resourcemanager.automation.models.ScheduleFrequency;
import com.azure.resourcemanager.automation.models.SoftwareUpdateConfigurationTasks;
import com.azure.resourcemanager.automation.models.SucScheduleProperties;
import com.azure.resourcemanager.automation.models.TargetProperties;
import com.azure.resourcemanager.automation.models.TaskProperties;
import com.azure.resourcemanager.automation.models.UpdateConfiguration;
import com.azure.resourcemanager.automation.models.WindowsProperties;
import com.azure.resourcemanager.automation.models.WindowsUpdateClasses;
import java.time.Duration;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class SoftwareUpdateConfigurationPropertiesTests {
    @Test
    public void testDeserialize() {
        SoftwareUpdateConfigurationProperties model =
            BinaryData
                .fromString(
                    "{\"updateConfiguration\":{\"operatingSystem\":\"Windows\",\"windows\":{\"includedUpdateClassifications\":\"Security\",\"excludedKbNumbers\":[\"dxluu\"],\"includedKbNumbers\":[\"touwaboekqv\",\"elnsmvbxw\",\"jsflhhcaalnjix\",\"sxyawjoyaqcs\"],\"rebootSetting\":\"jpkiidzyexznelix\"},\"linux\":{\"includedPackageClassifications\":\"Security\",\"excludedPackageNameMasks\":[\"o\",\"hb\",\"xknalaulppg\"],\"includedPackageNameMasks\":[\"pnapnyiropuh\",\"igvpgylg\",\"git\",\"medjvcslynqwwncw\"],\"rebootSetting\":\"hxg\"},\"duration\":\"PT7H12M7S\",\"azureVirtualMachines\":[\"ucnapkteoellwp\",\"fdygpfqbuaceopz\",\"qrhhu\"],\"nonAzureComputerNames\":[\"ppcqeqxolz\",\"ahzxctobgbk\",\"moizpos\"],\"targets\":{\"azureQueries\":[],\"nonAzureQueries\":[]}},\"scheduleInfo\":{\"startTime\":\"2021-02-28T09:22:03Z\",\"startTimeOffsetMinutes\":77.81071457676771,\"expiryTime\":\"2021-07-20T04:26:41Z\",\"expiryTimeOffsetMinutes\":36.71184979759351,\"isEnabled\":true,\"nextRun\":\"2021-05-11T05:38:09Z\",\"nextRunOffsetMinutes\":11.131364014336576,\"interval\":7630037301947416018,\"frequency\":\"Week\",\"timeZone\":\"yngudivk\",\"advancedSchedule\":{\"weekDays\":[\"bxqz\",\"szjfauvjfdxxivet\",\"t\"],\"monthDays\":[928990245,730619532,1261594790],\"monthlyOccurrences\":[]},\"creationTime\":\"2021-07-13T14:12:40Z\",\"lastModifiedTime\":\"2021-07-31T08:45:33Z\",\"description\":\"wvxysl\"},\"provisioningState\":\"hsfxoblytkb\",\"creationTime\":\"2021-08-02T07:01:05Z\",\"createdBy\":\"wwfbkrvrnsvshq\",\"lastModifiedTime\":\"2021-01-04T22:35:44Z\",\"lastModifiedBy\":\"crsbfovasr\",\"tasks\":{\"preTask\":{\"parameters\":{\"bsrfbj\":\"hsqfsubcgjbirxbp\",\"otftpvjzbexilz\":\"dtws\",\"qtaruoujmkcjhwq\":\"nfqqnvwp\",\"ervnaenqpehi\":\"tjrybnwjewgdr\"},\"source\":\"oygmift\"},\"postTask\":{\"parameters\":{\"vhqlkthumaqo\":\"ndslgnayqigynduh\"},\"source\":\"gycdu\"}}}")
                .toObject(SoftwareUpdateConfigurationProperties.class);
        Assertions.assertEquals(OperatingSystemType.WINDOWS, model.updateConfiguration().operatingSystem());
        Assertions
            .assertEquals(
                WindowsUpdateClasses.SECURITY, model.updateConfiguration().windows().includedUpdateClassifications());
        Assertions.assertEquals("dxluu", model.updateConfiguration().windows().excludedKbNumbers().get(0));
        Assertions.assertEquals("touwaboekqv", model.updateConfiguration().windows().includedKbNumbers().get(0));
        Assertions.assertEquals("jpkiidzyexznelix", model.updateConfiguration().windows().rebootSetting());
        Assertions
            .assertEquals(
                LinuxUpdateClasses.SECURITY, model.updateConfiguration().linux().includedPackageClassifications());
        Assertions.assertEquals("o", model.updateConfiguration().linux().excludedPackageNameMasks().get(0));
        Assertions.assertEquals("pnapnyiropuh", model.updateConfiguration().linux().includedPackageNameMasks().get(0));
        Assertions.assertEquals("hxg", model.updateConfiguration().linux().rebootSetting());
        Assertions.assertEquals(Duration.parse("PT7H12M7S"), model.updateConfiguration().duration());
        Assertions.assertEquals("ucnapkteoellwp", model.updateConfiguration().azureVirtualMachines().get(0));
        Assertions.assertEquals("ppcqeqxolz", model.updateConfiguration().nonAzureComputerNames().get(0));
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-28T09:22:03Z"), model.scheduleInfo().startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-20T04:26:41Z"), model.scheduleInfo().expiryTime());
        Assertions.assertEquals(36.71184979759351D, model.scheduleInfo().expiryTimeOffsetMinutes());
        Assertions.assertEquals(true, model.scheduleInfo().isEnabled());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-11T05:38:09Z"), model.scheduleInfo().nextRun());
        Assertions.assertEquals(11.131364014336576D, model.scheduleInfo().nextRunOffsetMinutes());
        Assertions.assertEquals(7630037301947416018L, model.scheduleInfo().interval());
        Assertions.assertEquals(ScheduleFrequency.WEEK, model.scheduleInfo().frequency());
        Assertions.assertEquals("yngudivk", model.scheduleInfo().timeZone());
        Assertions.assertEquals("bxqz", model.scheduleInfo().advancedSchedule().weekDays().get(0));
        Assertions.assertEquals(928990245, model.scheduleInfo().advancedSchedule().monthDays().get(0));
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-13T14:12:40Z"), model.scheduleInfo().creationTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-31T08:45:33Z"), model.scheduleInfo().lastModifiedTime());
        Assertions.assertEquals("wvxysl", model.scheduleInfo().description());
        Assertions.assertEquals("hsqfsubcgjbirxbp", model.tasks().preTask().parameters().get("bsrfbj"));
        Assertions.assertEquals("oygmift", model.tasks().preTask().source());
        Assertions.assertEquals("ndslgnayqigynduh", model.tasks().postTask().parameters().get("vhqlkthumaqo"));
        Assertions.assertEquals("gycdu", model.tasks().postTask().source());
    }

    @Test
    public void testSerialize() {
        SoftwareUpdateConfigurationProperties model =
            new SoftwareUpdateConfigurationProperties()
                .withUpdateConfiguration(
                    new UpdateConfiguration()
                        .withOperatingSystem(OperatingSystemType.WINDOWS)
                        .withWindows(
                            new WindowsProperties()
                                .withIncludedUpdateClassifications(WindowsUpdateClasses.SECURITY)
                                .withExcludedKbNumbers(Arrays.asList("dxluu"))
                                .withIncludedKbNumbers(
                                    Arrays.asList("touwaboekqv", "elnsmvbxw", "jsflhhcaalnjix", "sxyawjoyaqcs"))
                                .withRebootSetting("jpkiidzyexznelix"))
                        .withLinux(
                            new LinuxProperties()
                                .withIncludedPackageClassifications(LinuxUpdateClasses.SECURITY)
                                .withExcludedPackageNameMasks(Arrays.asList("o", "hb", "xknalaulppg"))
                                .withIncludedPackageNameMasks(
                                    Arrays.asList("pnapnyiropuh", "igvpgylg", "git", "medjvcslynqwwncw"))
                                .withRebootSetting("hxg"))
                        .withDuration(Duration.parse("PT7H12M7S"))
                        .withAzureVirtualMachines(Arrays.asList("ucnapkteoellwp", "fdygpfqbuaceopz", "qrhhu"))
                        .withNonAzureComputerNames(Arrays.asList("ppcqeqxolz", "ahzxctobgbk", "moizpos"))
                        .withTargets(
                            new TargetProperties()
                                .withAzureQueries(Arrays.asList())
                                .withNonAzureQueries(Arrays.asList())))
                .withScheduleInfo(
                    new SucScheduleProperties()
                        .withStartTime(OffsetDateTime.parse("2021-02-28T09:22:03Z"))
                        .withExpiryTime(OffsetDateTime.parse("2021-07-20T04:26:41Z"))
                        .withExpiryTimeOffsetMinutes(36.71184979759351D)
                        .withIsEnabled(true)
                        .withNextRun(OffsetDateTime.parse("2021-05-11T05:38:09Z"))
                        .withNextRunOffsetMinutes(11.131364014336576D)
                        .withInterval(7630037301947416018L)
                        .withFrequency(ScheduleFrequency.WEEK)
                        .withTimeZone("yngudivk")
                        .withAdvancedSchedule(
                            new AdvancedSchedule()
                                .withWeekDays(Arrays.asList("bxqz", "szjfauvjfdxxivet", "t"))
                                .withMonthDays(Arrays.asList(928990245, 730619532, 1261594790))
                                .withMonthlyOccurrences(Arrays.asList()))
                        .withCreationTime(OffsetDateTime.parse("2021-07-13T14:12:40Z"))
                        .withLastModifiedTime(OffsetDateTime.parse("2021-07-31T08:45:33Z"))
                        .withDescription("wvxysl"))
                .withTasks(
                    new SoftwareUpdateConfigurationTasks()
                        .withPreTask(
                            new TaskProperties()
                                .withParameters(
                                    mapOf(
                                        "bsrfbj",
                                        "hsqfsubcgjbirxbp",
                                        "otftpvjzbexilz",
                                        "dtws",
                                        "qtaruoujmkcjhwq",
                                        "nfqqnvwp",
                                        "ervnaenqpehi",
                                        "tjrybnwjewgdr"))
                                .withSource("oygmift"))
                        .withPostTask(
                            new TaskProperties()
                                .withParameters(mapOf("vhqlkthumaqo", "ndslgnayqigynduh"))
                                .withSource("gycdu")));
        model = BinaryData.fromObject(model).toObject(SoftwareUpdateConfigurationProperties.class);
        Assertions.assertEquals(OperatingSystemType.WINDOWS, model.updateConfiguration().operatingSystem());
        Assertions
            .assertEquals(
                WindowsUpdateClasses.SECURITY, model.updateConfiguration().windows().includedUpdateClassifications());
        Assertions.assertEquals("dxluu", model.updateConfiguration().windows().excludedKbNumbers().get(0));
        Assertions.assertEquals("touwaboekqv", model.updateConfiguration().windows().includedKbNumbers().get(0));
        Assertions.assertEquals("jpkiidzyexznelix", model.updateConfiguration().windows().rebootSetting());
        Assertions
            .assertEquals(
                LinuxUpdateClasses.SECURITY, model.updateConfiguration().linux().includedPackageClassifications());
        Assertions.assertEquals("o", model.updateConfiguration().linux().excludedPackageNameMasks().get(0));
        Assertions.assertEquals("pnapnyiropuh", model.updateConfiguration().linux().includedPackageNameMasks().get(0));
        Assertions.assertEquals("hxg", model.updateConfiguration().linux().rebootSetting());
        Assertions.assertEquals(Duration.parse("PT7H12M7S"), model.updateConfiguration().duration());
        Assertions.assertEquals("ucnapkteoellwp", model.updateConfiguration().azureVirtualMachines().get(0));
        Assertions.assertEquals("ppcqeqxolz", model.updateConfiguration().nonAzureComputerNames().get(0));
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-28T09:22:03Z"), model.scheduleInfo().startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-20T04:26:41Z"), model.scheduleInfo().expiryTime());
        Assertions.assertEquals(36.71184979759351D, model.scheduleInfo().expiryTimeOffsetMinutes());
        Assertions.assertEquals(true, model.scheduleInfo().isEnabled());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-11T05:38:09Z"), model.scheduleInfo().nextRun());
        Assertions.assertEquals(11.131364014336576D, model.scheduleInfo().nextRunOffsetMinutes());
        Assertions.assertEquals(7630037301947416018L, model.scheduleInfo().interval());
        Assertions.assertEquals(ScheduleFrequency.WEEK, model.scheduleInfo().frequency());
        Assertions.assertEquals("yngudivk", model.scheduleInfo().timeZone());
        Assertions.assertEquals("bxqz", model.scheduleInfo().advancedSchedule().weekDays().get(0));
        Assertions.assertEquals(928990245, model.scheduleInfo().advancedSchedule().monthDays().get(0));
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-13T14:12:40Z"), model.scheduleInfo().creationTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-31T08:45:33Z"), model.scheduleInfo().lastModifiedTime());
        Assertions.assertEquals("wvxysl", model.scheduleInfo().description());
        Assertions.assertEquals("hsqfsubcgjbirxbp", model.tasks().preTask().parameters().get("bsrfbj"));
        Assertions.assertEquals("oygmift", model.tasks().preTask().source());
        Assertions.assertEquals("ndslgnayqigynduh", model.tasks().postTask().parameters().get("vhqlkthumaqo"));
        Assertions.assertEquals("gycdu", model.tasks().postTask().source());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
