// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.automation.fluent.models.ScheduleInner;
import com.azure.resourcemanager.automation.models.ScheduleFrequency;
import com.azure.resourcemanager.automation.models.ScheduleListResult;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class ScheduleListResultTests {
    @Test
    public void testDeserialize() {
        ScheduleListResult model =
            BinaryData
                .fromString(
                    "{\"value\":[{\"properties\":{\"startTime\":\"2021-10-07T01:46:26Z\",\"startTimeOffsetMinutes\":58.279994677420845,\"expiryTime\":\"2021-10-05T03:23:13Z\",\"expiryTimeOffsetMinutes\":27.98468294033173,\"isEnabled\":false,\"nextRun\":\"2021-01-13T07:46:02Z\",\"nextRunOffsetMinutes\":4.6641434645126605,\"frequency\":\"OneTime\",\"timeZone\":\"zr\",\"creationTime\":\"2020-12-27T15:25:36Z\",\"lastModifiedTime\":\"2021-03-23T06:55:11Z\",\"description\":\"lgtrczzy\"},\"id\":\"mxzjijpvua\",\"name\":\"rkihcirld\",\"type\":\"fx\"}],\"nextLink\":\"c\"}")
                .toObject(ScheduleListResult.class);
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-07T01:46:26Z"), model.value().get(0).startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-05T03:23:13Z"), model.value().get(0).expiryTime());
        Assertions.assertEquals(27.98468294033173D, model.value().get(0).expiryTimeOffsetMinutes());
        Assertions.assertEquals(false, model.value().get(0).isEnabled());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-13T07:46:02Z"), model.value().get(0).nextRun());
        Assertions.assertEquals(4.6641434645126605D, model.value().get(0).nextRunOffsetMinutes());
        Assertions.assertEquals(ScheduleFrequency.ONE_TIME, model.value().get(0).frequency());
        Assertions.assertEquals("zr", model.value().get(0).timeZone());
        Assertions.assertEquals(OffsetDateTime.parse("2020-12-27T15:25:36Z"), model.value().get(0).creationTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-23T06:55:11Z"), model.value().get(0).lastModifiedTime());
        Assertions.assertEquals("lgtrczzy", model.value().get(0).description());
        Assertions.assertEquals("c", model.nextLink());
    }

    @Test
    public void testSerialize() {
        ScheduleListResult model =
            new ScheduleListResult()
                .withValue(
                    Arrays
                        .asList(
                            new ScheduleInner()
                                .withStartTime(OffsetDateTime.parse("2021-10-07T01:46:26Z"))
                                .withExpiryTime(OffsetDateTime.parse("2021-10-05T03:23:13Z"))
                                .withExpiryTimeOffsetMinutes(27.98468294033173D)
                                .withIsEnabled(false)
                                .withNextRun(OffsetDateTime.parse("2021-01-13T07:46:02Z"))
                                .withNextRunOffsetMinutes(4.6641434645126605D)
                                .withFrequency(ScheduleFrequency.ONE_TIME)
                                .withTimeZone("zr")
                                .withCreationTime(OffsetDateTime.parse("2020-12-27T15:25:36Z"))
                                .withLastModifiedTime(OffsetDateTime.parse("2021-03-23T06:55:11Z"))
                                .withDescription("lgtrczzy")))
                .withNextLink("c");
        model = BinaryData.fromObject(model).toObject(ScheduleListResult.class);
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-07T01:46:26Z"), model.value().get(0).startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-05T03:23:13Z"), model.value().get(0).expiryTime());
        Assertions.assertEquals(27.98468294033173D, model.value().get(0).expiryTimeOffsetMinutes());
        Assertions.assertEquals(false, model.value().get(0).isEnabled());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-13T07:46:02Z"), model.value().get(0).nextRun());
        Assertions.assertEquals(4.6641434645126605D, model.value().get(0).nextRunOffsetMinutes());
        Assertions.assertEquals(ScheduleFrequency.ONE_TIME, model.value().get(0).frequency());
        Assertions.assertEquals("zr", model.value().get(0).timeZone());
        Assertions.assertEquals(OffsetDateTime.parse("2020-12-27T15:25:36Z"), model.value().get(0).creationTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-23T06:55:11Z"), model.value().get(0).lastModifiedTime());
        Assertions.assertEquals("lgtrczzy", model.value().get(0).description());
        Assertions.assertEquals("c", model.nextLink());
    }
}
