// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.automation.models.AzureQueryProperties;
import com.azure.resourcemanager.automation.models.NonAzureQueryProperties;
import com.azure.resourcemanager.automation.models.TagOperators;
import com.azure.resourcemanager.automation.models.TagSettingsProperties;
import com.azure.resourcemanager.automation.models.TargetProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class TargetPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        TargetProperties model = BinaryData.fromString(
            "{\"azureQueries\":[{\"scope\":[\"u\",\"apckccrrvw\"],\"locations\":[\"xoy\",\"ukphaimmoiroq\"],\"tagSettings\":{\"tags\":{\"fdmmcpug\":[\"ragapyyrmfsvbp\",\"vbopfppdbwnu\",\"gahxkumasjcaa\"],\"ucsofldpuviyf\":[\"hqepvufhbzehewh\",\"qhnlbqnbld\",\"eaclgschorimk\",\"srrm\"],\"kizmdksaoafclu\":[\"abeolhbhlvbm\",\"uqibsxtkcu\",\"fbsfarfsiow\",\"kjxnqpvwgfstmhq\"]},\"filterOperator\":\"Any\"}}],\"nonAzureQueries\":[{\"functionAlias\":\"cjimryvwgcwwpbmz\",\"workspaceId\":\"esyds\"},{\"functionAlias\":\"efoh\",\"workspaceId\":\"bvopwndyqle\"},{\"functionAlias\":\"lklmtkhlo\",\"workspaceId\":\"x\"},{\"functionAlias\":\"vbrdfjmzsyzfho\",\"workspaceId\":\"h\"}]}")
            .toObject(TargetProperties.class);
        Assertions.assertEquals("u", model.azureQueries().get(0).scope().get(0));
        Assertions.assertEquals("xoy", model.azureQueries().get(0).locations().get(0));
        Assertions.assertEquals("ragapyyrmfsvbp",
            model.azureQueries().get(0).tagSettings().tags().get("fdmmcpug").get(0));
        Assertions.assertEquals(TagOperators.ANY, model.azureQueries().get(0).tagSettings().filterOperator());
        Assertions.assertEquals("cjimryvwgcwwpbmz", model.nonAzureQueries().get(0).functionAlias());
        Assertions.assertEquals("esyds", model.nonAzureQueries().get(0).workspaceId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        TargetProperties model
            = new TargetProperties()
                .withAzureQueries(
                    Arrays.asList(new AzureQueryProperties().withScope(Arrays.asList("u", "apckccrrvw"))
                        .withLocations(Arrays.asList("xoy", "ukphaimmoiroq"))
                        .withTagSettings(new TagSettingsProperties().withTags(mapOf("fdmmcpug",
                            Arrays.asList("ragapyyrmfsvbp", "vbopfppdbwnu", "gahxkumasjcaa"), "ucsofldpuviyf",
                            Arrays.asList("hqepvufhbzehewh", "qhnlbqnbld", "eaclgschorimk", "srrm"), "kizmdksaoafclu",
                            Arrays.asList("abeolhbhlvbm", "uqibsxtkcu", "fbsfarfsiow", "kjxnqpvwgfstmhq")))
                            .withFilterOperator(TagOperators.ANY))))
                .withNonAzureQueries(Arrays.asList(
                    new NonAzureQueryProperties().withFunctionAlias("cjimryvwgcwwpbmz").withWorkspaceId("esyds"),
                    new NonAzureQueryProperties().withFunctionAlias("efoh").withWorkspaceId("bvopwndyqle"),
                    new NonAzureQueryProperties().withFunctionAlias("lklmtkhlo").withWorkspaceId("x"),
                    new NonAzureQueryProperties().withFunctionAlias("vbrdfjmzsyzfho").withWorkspaceId("h")));
        model = BinaryData.fromObject(model).toObject(TargetProperties.class);
        Assertions.assertEquals("u", model.azureQueries().get(0).scope().get(0));
        Assertions.assertEquals("xoy", model.azureQueries().get(0).locations().get(0));
        Assertions.assertEquals("ragapyyrmfsvbp",
            model.azureQueries().get(0).tagSettings().tags().get("fdmmcpug").get(0));
        Assertions.assertEquals(TagOperators.ANY, model.azureQueries().get(0).tagSettings().filterOperator());
        Assertions.assertEquals("cjimryvwgcwwpbmz", model.nonAzureQueries().get(0).functionAlias());
        Assertions.assertEquals("esyds", model.nonAzureQueries().get(0).workspaceId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
