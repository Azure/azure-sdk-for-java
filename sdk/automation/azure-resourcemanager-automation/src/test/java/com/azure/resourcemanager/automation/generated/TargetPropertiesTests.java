// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.automation.models.AzureQueryProperties;
import com.azure.resourcemanager.automation.models.NonAzureQueryProperties;
import com.azure.resourcemanager.automation.models.TagOperators;
import com.azure.resourcemanager.automation.models.TagSettingsProperties;
import com.azure.resourcemanager.automation.models.TargetProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class TargetPropertiesTests {
    @Test
    public void testDeserialize() {
        TargetProperties model =
            BinaryData
                .fromString(
                    "{\"azureQueries\":[{\"scope\":[\"dsjnka\",\"jutiiswacff\",\"dkzzewkfvhqcrail\"],\"locations\":[\"ppfufl\"],\"tagSettings\":{\"tags\":{},\"filterOperator\":\"Any\"}},{\"scope\":[\"xyjrxsagafcnih\",\"wqapnedgfbcvk\"],\"locations\":[\"vpk\"],\"tagSettings\":{\"tags\":{},\"filterOperator\":\"All\"}},{\"scope\":[\"hvoodsotbobzd\",\"pcjwv\"],\"locations\":[\"ld\",\"mgxcxrslpm\"],\"tagSettings\":{\"tags\":{},\"filterOperator\":\"Any\"}},{\"scope\":[\"rpkhjwn\",\"yqsluic\",\"dggkzzlvmbmpa\"],\"locations\":[\"dfvue\",\"yw\",\"bpfvm\"],\"tagSettings\":{\"tags\":{},\"filterOperator\":\"All\"}}],\"nonAzureQueries\":[{\"functionAlias\":\"ft\",\"workspaceId\":\"kcpwiy\"},{\"functionAlias\":\"qtmnubexkpzk\",\"workspaceId\":\"ondjmq\"}]}")
                .toObject(TargetProperties.class);
        Assertions.assertEquals("dsjnka", model.azureQueries().get(0).scope().get(0));
        Assertions.assertEquals("ppfufl", model.azureQueries().get(0).locations().get(0));
        Assertions.assertEquals(TagOperators.ANY, model.azureQueries().get(0).tagSettings().filterOperator());
        Assertions.assertEquals("ft", model.nonAzureQueries().get(0).functionAlias());
        Assertions.assertEquals("kcpwiy", model.nonAzureQueries().get(0).workspaceId());
    }

    @Test
    public void testSerialize() {
        TargetProperties model =
            new TargetProperties()
                .withAzureQueries(
                    Arrays
                        .asList(
                            new AzureQueryProperties()
                                .withScope(Arrays.asList("dsjnka", "jutiiswacff", "dkzzewkfvhqcrail"))
                                .withLocations(Arrays.asList("ppfufl"))
                                .withTagSettings(
                                    new TagSettingsProperties().withTags(mapOf()).withFilterOperator(TagOperators.ANY)),
                            new AzureQueryProperties()
                                .withScope(Arrays.asList("xyjrxsagafcnih", "wqapnedgfbcvk"))
                                .withLocations(Arrays.asList("vpk"))
                                .withTagSettings(
                                    new TagSettingsProperties().withTags(mapOf()).withFilterOperator(TagOperators.ALL)),
                            new AzureQueryProperties()
                                .withScope(Arrays.asList("hvoodsotbobzd", "pcjwv"))
                                .withLocations(Arrays.asList("ld", "mgxcxrslpm"))
                                .withTagSettings(
                                    new TagSettingsProperties().withTags(mapOf()).withFilterOperator(TagOperators.ANY)),
                            new AzureQueryProperties()
                                .withScope(Arrays.asList("rpkhjwn", "yqsluic", "dggkzzlvmbmpa"))
                                .withLocations(Arrays.asList("dfvue", "yw", "bpfvm"))
                                .withTagSettings(
                                    new TagSettingsProperties()
                                        .withTags(mapOf())
                                        .withFilterOperator(TagOperators.ALL))))
                .withNonAzureQueries(
                    Arrays
                        .asList(
                            new NonAzureQueryProperties().withFunctionAlias("ft").withWorkspaceId("kcpwiy"),
                            new NonAzureQueryProperties().withFunctionAlias("qtmnubexkpzk").withWorkspaceId("ondjmq")));
        model = BinaryData.fromObject(model).toObject(TargetProperties.class);
        Assertions.assertEquals("dsjnka", model.azureQueries().get(0).scope().get(0));
        Assertions.assertEquals("ppfufl", model.azureQueries().get(0).locations().get(0));
        Assertions.assertEquals(TagOperators.ANY, model.azureQueries().get(0).tagSettings().filterOperator());
        Assertions.assertEquals("ft", model.nonAzureQueries().get(0).functionAlias());
        Assertions.assertEquals("kcpwiy", model.nonAzureQueries().get(0).workspaceId());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
