// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.automation.fluent.models.DscNodeReportInner;
import com.azure.resourcemanager.automation.models.DscMetaConfiguration;
import com.azure.resourcemanager.automation.models.DscNodeReportListResult;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class DscNodeReportListResultTests {
    @Test
    public void testDeserialize() {
        DscNodeReportListResult model =
            BinaryData
                .fromString(
                    "{\"value\":[{\"endTime\":\"2021-07-03T00:59:28Z\",\"lastModifiedTime\":\"2021-07-06T05:20:50Z\",\"startTime\":\"2021-10-01T04:14:33Z\",\"type\":\"htqqrolfp\",\"reportId\":\"s\",\"status\":\"gbquxigj\",\"refreshMode\":\"gzjaoyfhrtxilne\",\"rebootRequested\":\"ujysvle\",\"reportFormatVersion\":\"vfqawrlyxwjkcpr\",\"configurationVersion\":\"wbxgjvt\",\"id\":\"p\",\"errors\":[],\"resources\":[],\"metaConfiguration\":{\"configurationModeFrequencyMins\":315783866,\"rebootNodeIfNeeded\":false,\"configurationMode\":\"uhmuouqfprwzwbn\",\"actionAfterReboot\":\"itnwuizgazxufi\",\"certificateId\":\"ckyfih\",\"refreshFrequencyMins\":689215499,\"allowModuleOverwrite\":true},\"hostName\":\"zwdzuh\",\"iPV4Addresses\":[\"wisdkft\",\"wxmnteiwao\",\"vkmijcmmxdcuf\",\"fsrpymzidnse\"],\"iPV6Addresses\":[\"tbzsgfyccs\",\"ewmdw\",\"jeiachboosfl\",\"ro\"],\"numberOfResources\":1593237527,\"rawErrors\":\"t\"},{\"endTime\":\"2021-02-25T11:12:34Z\",\"lastModifiedTime\":\"2021-01-29T18:51:03Z\",\"startTime\":\"2021-10-06T17:45:29Z\",\"type\":\"yqrimzin\",\"reportId\":\"swjdkirso\",\"status\":\"qxhcrmn\",\"refreshMode\":\"jtckwhdso\",\"rebootRequested\":\"iy\",\"reportFormatVersion\":\"jxsqwpgrjbz\",\"configurationVersion\":\"rcjxvsnbyxqabn\",\"id\":\"cpc\",\"errors\":[],\"resources\":[],\"metaConfiguration\":{\"configurationModeFrequencyMins\":980347160,\"rebootNodeIfNeeded\":true,\"configurationMode\":\"j\",\"actionAfterReboot\":\"btoqcjmkljavbqid\",\"certificateId\":\"ajzyul\",\"refreshFrequencyMins\":144447336,\"allowModuleOverwrite\":true},\"hostName\":\"rlkhbzhfepgzgq\",\"iPV4Addresses\":[\"locx\"],\"iPV6Addresses\":[\"aierhhb\",\"sglumma\"],\"numberOfResources\":177005491,\"rawErrors\":\"odxobnbdxkqpxok\"},{\"endTime\":\"2021-01-11T15:15:23Z\",\"lastModifiedTime\":\"2021-02-09T00:09:24Z\",\"startTime\":\"2021-08-22T01:00:33Z\",\"type\":\"ex\",\"reportId\":\"txgcpodgmaajr\",\"status\":\"djwzrlov\",\"refreshMode\":\"lwhijcoejctbzaq\",\"rebootRequested\":\"sycbkbfk\",\"reportFormatVersion\":\"kdkexxp\",\"configurationVersion\":\"fmxa\",\"id\":\"fjpgddtocjjxhvp\",\"errors\":[],\"resources\":[],\"metaConfiguration\":{\"configurationModeFrequencyMins\":2146697807,\"rebootNodeIfNeeded\":false,\"configurationMode\":\"qeojnxqbzvddntw\",\"actionAfterReboot\":\"eic\",\"certificateId\":\"w\",\"refreshFrequencyMins\":537336258,\"allowModuleOverwrite\":false},\"hostName\":\"vuhrhcffcyddgl\",\"iPV4Addresses\":[\"hjq\"],\"iPV6Addresses\":[\"yeicxmqciwqvhk\",\"ixuigdtopbobj\"],\"numberOfResources\":493996268,\"rawErrors\":\"e\"},{\"endTime\":\"2021-07-13T01:02:50Z\",\"lastModifiedTime\":\"2021-01-02T08:53:50Z\",\"startTime\":\"2021-01-27T21:23:24Z\",\"type\":\"z\",\"reportId\":\"vvtpgvdfgio\",\"status\":\"ftutqxlngxlefgu\",\"refreshMode\":\"xkrxdqmi\",\"rebootRequested\":\"thz\",\"reportFormatVersion\":\"qdrabhjybigehoqf\",\"configurationVersion\":\"wska\",\"id\":\"ktzlcuiywg\",\"errors\":[],\"resources\":[],\"metaConfiguration\":{\"configurationModeFrequencyMins\":974991639,\"rebootNodeIfNeeded\":true,\"configurationMode\":\"zgpphrcgyncocpe\",\"actionAfterReboot\":\"vmmcoofs\",\"certificateId\":\"zevgb\",\"refreshFrequencyMins\":2005133060,\"allowModuleOverwrite\":true},\"hostName\":\"c\",\"iPV4Addresses\":[\"ivkwlzuvccfwnfnb\",\"cfionl\",\"bxetqgtzxdpn\"],\"iPV6Addresses\":[\"qwxrjfeallnw\"],\"numberOfResources\":1586389833,\"rawErrors\":\"snjampmng\"}],\"nextLink\":\"scxaq\"}")
                .toObject(DscNodeReportListResult.class);
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-03T00:59:28Z"), model.value().get(0).endTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-06T05:20:50Z"), model.value().get(0).lastModifiedTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-01T04:14:33Z"), model.value().get(0).startTime());
        Assertions.assertEquals("htqqrolfp", model.value().get(0).type());
        Assertions.assertEquals("s", model.value().get(0).reportId());
        Assertions.assertEquals("gbquxigj", model.value().get(0).status());
        Assertions.assertEquals("gzjaoyfhrtxilne", model.value().get(0).refreshMode());
        Assertions.assertEquals("ujysvle", model.value().get(0).rebootRequested());
        Assertions.assertEquals("vfqawrlyxwjkcpr", model.value().get(0).reportFormatVersion());
        Assertions.assertEquals("wbxgjvt", model.value().get(0).configurationVersion());
        Assertions.assertEquals("p", model.value().get(0).id());
        Assertions.assertEquals(315783866, model.value().get(0).metaConfiguration().configurationModeFrequencyMins());
        Assertions.assertEquals(false, model.value().get(0).metaConfiguration().rebootNodeIfNeeded());
        Assertions.assertEquals("uhmuouqfprwzwbn", model.value().get(0).metaConfiguration().configurationMode());
        Assertions.assertEquals("itnwuizgazxufi", model.value().get(0).metaConfiguration().actionAfterReboot());
        Assertions.assertEquals("ckyfih", model.value().get(0).metaConfiguration().certificateId());
        Assertions.assertEquals(689215499, model.value().get(0).metaConfiguration().refreshFrequencyMins());
        Assertions.assertEquals(true, model.value().get(0).metaConfiguration().allowModuleOverwrite());
        Assertions.assertEquals("zwdzuh", model.value().get(0).hostname());
        Assertions.assertEquals("wisdkft", model.value().get(0).iPV4Addresses().get(0));
        Assertions.assertEquals("tbzsgfyccs", model.value().get(0).iPV6Addresses().get(0));
        Assertions.assertEquals(1593237527, model.value().get(0).numberOfResources());
        Assertions.assertEquals("t", model.value().get(0).rawErrors());
        Assertions.assertEquals("scxaq", model.nextLink());
    }

    @Test
    public void testSerialize() {
        DscNodeReportListResult model =
            new DscNodeReportListResult()
                .withValue(
                    Arrays
                        .asList(
                            new DscNodeReportInner()
                                .withEndTime(OffsetDateTime.parse("2021-07-03T00:59:28Z"))
                                .withLastModifiedTime(OffsetDateTime.parse("2021-07-06T05:20:50Z"))
                                .withStartTime(OffsetDateTime.parse("2021-10-01T04:14:33Z"))
                                .withType("htqqrolfp")
                                .withReportId("s")
                                .withStatus("gbquxigj")
                                .withRefreshMode("gzjaoyfhrtxilne")
                                .withRebootRequested("ujysvle")
                                .withReportFormatVersion("vfqawrlyxwjkcpr")
                                .withConfigurationVersion("wbxgjvt")
                                .withId("p")
                                .withErrors(Arrays.asList())
                                .withResources(Arrays.asList())
                                .withMetaConfiguration(
                                    new DscMetaConfiguration()
                                        .withConfigurationModeFrequencyMins(315783866)
                                        .withRebootNodeIfNeeded(false)
                                        .withConfigurationMode("uhmuouqfprwzwbn")
                                        .withActionAfterReboot("itnwuizgazxufi")
                                        .withCertificateId("ckyfih")
                                        .withRefreshFrequencyMins(689215499)
                                        .withAllowModuleOverwrite(true))
                                .withHostname("zwdzuh")
                                .withIPV4Addresses(
                                    Arrays.asList("wisdkft", "wxmnteiwao", "vkmijcmmxdcuf", "fsrpymzidnse"))
                                .withIPV6Addresses(Arrays.asList("tbzsgfyccs", "ewmdw", "jeiachboosfl", "ro"))
                                .withNumberOfResources(1593237527)
                                .withRawErrors("t"),
                            new DscNodeReportInner()
                                .withEndTime(OffsetDateTime.parse("2021-02-25T11:12:34Z"))
                                .withLastModifiedTime(OffsetDateTime.parse("2021-01-29T18:51:03Z"))
                                .withStartTime(OffsetDateTime.parse("2021-10-06T17:45:29Z"))
                                .withType("yqrimzin")
                                .withReportId("swjdkirso")
                                .withStatus("qxhcrmn")
                                .withRefreshMode("jtckwhdso")
                                .withRebootRequested("iy")
                                .withReportFormatVersion("jxsqwpgrjbz")
                                .withConfigurationVersion("rcjxvsnbyxqabn")
                                .withId("cpc")
                                .withErrors(Arrays.asList())
                                .withResources(Arrays.asList())
                                .withMetaConfiguration(
                                    new DscMetaConfiguration()
                                        .withConfigurationModeFrequencyMins(980347160)
                                        .withRebootNodeIfNeeded(true)
                                        .withConfigurationMode("j")
                                        .withActionAfterReboot("btoqcjmkljavbqid")
                                        .withCertificateId("ajzyul")
                                        .withRefreshFrequencyMins(144447336)
                                        .withAllowModuleOverwrite(true))
                                .withHostname("rlkhbzhfepgzgq")
                                .withIPV4Addresses(Arrays.asList("locx"))
                                .withIPV6Addresses(Arrays.asList("aierhhb", "sglumma"))
                                .withNumberOfResources(177005491)
                                .withRawErrors("odxobnbdxkqpxok"),
                            new DscNodeReportInner()
                                .withEndTime(OffsetDateTime.parse("2021-01-11T15:15:23Z"))
                                .withLastModifiedTime(OffsetDateTime.parse("2021-02-09T00:09:24Z"))
                                .withStartTime(OffsetDateTime.parse("2021-08-22T01:00:33Z"))
                                .withType("ex")
                                .withReportId("txgcpodgmaajr")
                                .withStatus("djwzrlov")
                                .withRefreshMode("lwhijcoejctbzaq")
                                .withRebootRequested("sycbkbfk")
                                .withReportFormatVersion("kdkexxp")
                                .withConfigurationVersion("fmxa")
                                .withId("fjpgddtocjjxhvp")
                                .withErrors(Arrays.asList())
                                .withResources(Arrays.asList())
                                .withMetaConfiguration(
                                    new DscMetaConfiguration()
                                        .withConfigurationModeFrequencyMins(2146697807)
                                        .withRebootNodeIfNeeded(false)
                                        .withConfigurationMode("qeojnxqbzvddntw")
                                        .withActionAfterReboot("eic")
                                        .withCertificateId("w")
                                        .withRefreshFrequencyMins(537336258)
                                        .withAllowModuleOverwrite(false))
                                .withHostname("vuhrhcffcyddgl")
                                .withIPV4Addresses(Arrays.asList("hjq"))
                                .withIPV6Addresses(Arrays.asList("yeicxmqciwqvhk", "ixuigdtopbobj"))
                                .withNumberOfResources(493996268)
                                .withRawErrors("e"),
                            new DscNodeReportInner()
                                .withEndTime(OffsetDateTime.parse("2021-07-13T01:02:50Z"))
                                .withLastModifiedTime(OffsetDateTime.parse("2021-01-02T08:53:50Z"))
                                .withStartTime(OffsetDateTime.parse("2021-01-27T21:23:24Z"))
                                .withType("z")
                                .withReportId("vvtpgvdfgio")
                                .withStatus("ftutqxlngxlefgu")
                                .withRefreshMode("xkrxdqmi")
                                .withRebootRequested("thz")
                                .withReportFormatVersion("qdrabhjybigehoqf")
                                .withConfigurationVersion("wska")
                                .withId("ktzlcuiywg")
                                .withErrors(Arrays.asList())
                                .withResources(Arrays.asList())
                                .withMetaConfiguration(
                                    new DscMetaConfiguration()
                                        .withConfigurationModeFrequencyMins(974991639)
                                        .withRebootNodeIfNeeded(true)
                                        .withConfigurationMode("zgpphrcgyncocpe")
                                        .withActionAfterReboot("vmmcoofs")
                                        .withCertificateId("zevgb")
                                        .withRefreshFrequencyMins(2005133060)
                                        .withAllowModuleOverwrite(true))
                                .withHostname("c")
                                .withIPV4Addresses(Arrays.asList("ivkwlzuvccfwnfnb", "cfionl", "bxetqgtzxdpn"))
                                .withIPV6Addresses(Arrays.asList("qwxrjfeallnw"))
                                .withNumberOfResources(1586389833)
                                .withRawErrors("snjampmng")))
                .withNextLink("scxaq");
        model = BinaryData.fromObject(model).toObject(DscNodeReportListResult.class);
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-03T00:59:28Z"), model.value().get(0).endTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-06T05:20:50Z"), model.value().get(0).lastModifiedTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-01T04:14:33Z"), model.value().get(0).startTime());
        Assertions.assertEquals("htqqrolfp", model.value().get(0).type());
        Assertions.assertEquals("s", model.value().get(0).reportId());
        Assertions.assertEquals("gbquxigj", model.value().get(0).status());
        Assertions.assertEquals("gzjaoyfhrtxilne", model.value().get(0).refreshMode());
        Assertions.assertEquals("ujysvle", model.value().get(0).rebootRequested());
        Assertions.assertEquals("vfqawrlyxwjkcpr", model.value().get(0).reportFormatVersion());
        Assertions.assertEquals("wbxgjvt", model.value().get(0).configurationVersion());
        Assertions.assertEquals("p", model.value().get(0).id());
        Assertions.assertEquals(315783866, model.value().get(0).metaConfiguration().configurationModeFrequencyMins());
        Assertions.assertEquals(false, model.value().get(0).metaConfiguration().rebootNodeIfNeeded());
        Assertions.assertEquals("uhmuouqfprwzwbn", model.value().get(0).metaConfiguration().configurationMode());
        Assertions.assertEquals("itnwuizgazxufi", model.value().get(0).metaConfiguration().actionAfterReboot());
        Assertions.assertEquals("ckyfih", model.value().get(0).metaConfiguration().certificateId());
        Assertions.assertEquals(689215499, model.value().get(0).metaConfiguration().refreshFrequencyMins());
        Assertions.assertEquals(true, model.value().get(0).metaConfiguration().allowModuleOverwrite());
        Assertions.assertEquals("zwdzuh", model.value().get(0).hostname());
        Assertions.assertEquals("wisdkft", model.value().get(0).iPV4Addresses().get(0));
        Assertions.assertEquals("tbzsgfyccs", model.value().get(0).iPV6Addresses().get(0));
        Assertions.assertEquals(1593237527, model.value().get(0).numberOfResources());
        Assertions.assertEquals("t", model.value().get(0).rawErrors());
        Assertions.assertEquals("scxaq", model.nextLink());
    }
}
