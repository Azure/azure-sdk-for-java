// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.automation.AutomationManager;
import com.azure.resourcemanager.automation.models.JobSchedule;
import com.azure.resourcemanager.automation.models.RunbookAssociationProperty;
import com.azure.resourcemanager.automation.models.ScheduleAssociationProperty;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class JobSchedulesCreateWithResponseMockTests {
    @Test
    public void testCreateWithResponse() throws Exception {
        String responseStr
            = "{\"id\":\"zsieuscplhyvd\",\"name\":\"lyzkxitds\",\"type\":\"zsvko\",\"properties\":{\"jobScheduleId\":\"pjovmozsayebraz\",\"schedule\":{\"name\":\"pzbtzuyk\"},\"runbook\":{\"name\":\"pfs\"},\"runOn\":\"epfnoc\",\"parameters\":{\"qejg\":\"zacfpztgazw\",\"gkqzkcyzmffngdyf\":\"aokctgkp\",\"qvhoej\":\"ixrhl\"}}}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 201, responseStr.getBytes(StandardCharsets.UTF_8)));
        AutomationManager manager = AutomationManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        JobSchedule response = manager.jobSchedules()
            .define(UUID.fromString("3f72f619-7a8c-4bc6-9d9d-b224968cb729"))
            .withExistingAutomationAccount("zgczfcmfpfbode", "resrgvtshuvft")
            .withSchedule(new ScheduleAssociationProperty().withName("ivmuqkevzgjyp"))
            .withRunbook(new RunbookAssociationProperty().withName("hxmpdxxz"))
            .withRunOn("wwzjwotnxlkfhglh")
            .withParameters(mapOf("wecr", "x", "vppqi", "nhpcselqx", "l", "ukklvzrlr", "jsczivfqbqnasdsy", "cme"))
            .create();

        Assertions.assertEquals("pjovmozsayebraz", response.jobScheduleId());
        Assertions.assertEquals("pzbtzuyk", response.schedule().name());
        Assertions.assertEquals("pfs", response.runbook().name());
        Assertions.assertEquals("epfnoc", response.runOn());
        Assertions.assertEquals("zacfpztgazw", response.parameters().get("qejg"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
