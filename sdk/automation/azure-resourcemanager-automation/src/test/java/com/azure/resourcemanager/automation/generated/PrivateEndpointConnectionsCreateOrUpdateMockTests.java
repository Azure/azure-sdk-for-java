// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.automation.AutomationManager;
import com.azure.resourcemanager.automation.models.PrivateEndpointConnection;
import com.azure.resourcemanager.automation.models.PrivateEndpointProperty;
import com.azure.resourcemanager.automation.models.PrivateLinkServiceConnectionStateProperty;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class PrivateEndpointConnectionsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"privateEndpoint\":{\"id\":\"xtjrrlk\"},\"groupIds\":[\"kjhhxdlajf\"],\"privateLinkServiceConnectionState\":{\"status\":\"xscvslxlhua\",\"description\":\"rmukmyjmkxett\",\"actionsRequired\":\"lojfkqidnqto\"}},\"id\":\"xjhqxcsqhtkb\",\"name\":\"nqlrng\",\"type\":\"dmbi\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AutomationManager manager = AutomationManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PrivateEndpointConnection response = manager.privateEndpointConnections()
            .define("sidqpxlbtpakft")
            .withExistingAutomationAccount("x", "mbpjptnvwjh")
            .withPrivateEndpoint(new PrivateEndpointProperty().withId("wmykyutry"))
            .withGroupIds(Arrays.asList("mfjhpycvjqdvdwkq", "ldrlefgnaavua"))
            .withPrivateLinkServiceConnectionState(
                new PrivateLinkServiceConnectionStateProperty().withStatus("etaoutnpdc").withDescription("hspfefyihd"))
            .create();

        Assertions.assertEquals("xtjrrlk", response.privateEndpoint().id());
        Assertions.assertEquals("kjhhxdlajf", response.groupIds().get(0));
        Assertions.assertEquals("xscvslxlhua", response.privateLinkServiceConnectionState().status());
        Assertions.assertEquals("rmukmyjmkxett", response.privateLinkServiceConnectionState().description());
    }
}
