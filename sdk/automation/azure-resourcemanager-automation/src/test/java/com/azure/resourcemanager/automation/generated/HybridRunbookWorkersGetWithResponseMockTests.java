// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.automation.AutomationManager;
import com.azure.resourcemanager.automation.models.HybridRunbookWorker;
import com.azure.resourcemanager.automation.models.WorkerType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class HybridRunbookWorkersGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"ip\":\"fi\",\"registeredDateTime\":\"2021-10-17T17:22:11Z\",\"lastSeenDateTime\":\"2021-08-01T06:09:18Z\",\"vmResourceId\":\"g\",\"workerType\":\"HybridV1\",\"workerName\":\"cfmfzcfasfodro\"},\"id\":\"lv\",\"name\":\"gt\",\"type\":\"yuskwgqrntaumdr\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AutomationManager manager = AutomationManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        HybridRunbookWorker response = manager.hybridRunbookWorkers()
            .getWithResponse("deotmfx", "kd", "g", "gnamkuuyiu", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("fi", response.ip());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-17T17:22:11Z"), response.registeredDateTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-01T06:09:18Z"), response.lastSeenDateTime());
        Assertions.assertEquals("g", response.vmResourceId());
        Assertions.assertEquals(WorkerType.HYBRID_V1, response.workerType());
        Assertions.assertEquals("cfmfzcfasfodro", response.workerName());
    }
}
