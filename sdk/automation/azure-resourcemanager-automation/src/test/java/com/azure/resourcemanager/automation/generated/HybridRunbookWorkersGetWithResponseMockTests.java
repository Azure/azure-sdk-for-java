// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.util.Context;
import com.azure.resourcemanager.automation.AutomationManager;
import com.azure.resourcemanager.automation.models.HybridRunbookWorker;
import com.azure.resourcemanager.automation.models.WorkerType;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class HybridRunbookWorkersGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"ip\":\"wl\",\"registeredDateTime\":\"2021-11-28T04:28:36Z\",\"lastSeenDateTime\":\"2021-10-17T23:05:28Z\",\"vmResourceId\":\"sn\",\"workerType\":\"HybridV1\",\"workerName\":\"wolgisubxbt\"},\"id\":\"gfgf\",\"name\":\"ij\",\"type\":\"ykwlefksxqceazf\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        AutomationManager manager =
            AutomationManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        HybridRunbookWorker response =
            manager
                .hybridRunbookWorkers()
                .getWithResponse("ezay", "vribqlotokht", "wtaznkcqw", "xwjyofgwhnk", Context.NONE)
                .getValue();

        Assertions.assertEquals("wl", response.ip());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-28T04:28:36Z"), response.registeredDateTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-17T23:05:28Z"), response.lastSeenDateTime());
        Assertions.assertEquals("sn", response.vmResourceId());
        Assertions.assertEquals(WorkerType.HYBRID_V1, response.workerType());
        Assertions.assertEquals("wolgisubxbt", response.workerName());
    }
}
