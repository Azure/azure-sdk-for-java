// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.automation.fluent.models.HybridRunbookWorkerInner;
import com.azure.resourcemanager.automation.models.WorkerType;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;

public final class HybridRunbookWorkerInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        HybridRunbookWorkerInner model = BinaryData.fromString(
            "{\"properties\":{\"ip\":\"wfcfxzirzz\",\"registeredDateTime\":\"2021-10-05T21:46:23Z\",\"lastSeenDateTime\":\"2021-07-27T01:33:18Z\",\"vmResourceId\":\"usuv\",\"workerType\":\"HybridV1\",\"workerName\":\"zwci\"},\"id\":\"jsllfryvd\",\"name\":\"vxadqacfrgnawbab\",\"type\":\"fbktyjmfczlf\"}")
            .toObject(HybridRunbookWorkerInner.class);
        Assertions.assertEquals("wfcfxzirzz", model.ip());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-05T21:46:23Z"), model.registeredDateTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-27T01:33:18Z"), model.lastSeenDateTime());
        Assertions.assertEquals("usuv", model.vmResourceId());
        Assertions.assertEquals(WorkerType.HYBRID_V1, model.workerType());
        Assertions.assertEquals("zwci", model.workerName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        HybridRunbookWorkerInner model = new HybridRunbookWorkerInner().withIp("wfcfxzirzz")
            .withRegisteredDateTime(OffsetDateTime.parse("2021-10-05T21:46:23Z"))
            .withLastSeenDateTime(OffsetDateTime.parse("2021-07-27T01:33:18Z"))
            .withVmResourceId("usuv")
            .withWorkerType(WorkerType.HYBRID_V1)
            .withWorkerName("zwci");
        model = BinaryData.fromObject(model).toObject(HybridRunbookWorkerInner.class);
        Assertions.assertEquals("wfcfxzirzz", model.ip());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-05T21:46:23Z"), model.registeredDateTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-27T01:33:18Z"), model.lastSeenDateTime());
        Assertions.assertEquals("usuv", model.vmResourceId());
        Assertions.assertEquals(WorkerType.HYBRID_V1, model.workerType());
        Assertions.assertEquals("zwci", model.workerName());
    }
}
