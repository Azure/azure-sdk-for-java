// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.automation.fluent.models.HybridRunbookWorkerInner;
import com.azure.resourcemanager.automation.models.WorkerType;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class HybridRunbookWorkerInnerTests {
    @Test
    public void testDeserialize() {
        HybridRunbookWorkerInner model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"ip\":\"egy\",\"registeredDateTime\":\"2020-12-23T19:39:20Z\",\"lastSeenDateTime\":\"2021-11-25T15:39:13Z\",\"vmResourceId\":\"jumvqqolihrraio\",\"workerType\":\"HybridV1\",\"workerName\":\"rjtloq\"},\"id\":\"uojrngiflr\",\"name\":\"pasccbi\",\"type\":\"imzdlyj\"}")
                .toObject(HybridRunbookWorkerInner.class);
        Assertions.assertEquals("egy", model.ip());
        Assertions.assertEquals(OffsetDateTime.parse("2020-12-23T19:39:20Z"), model.registeredDateTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-25T15:39:13Z"), model.lastSeenDateTime());
        Assertions.assertEquals("jumvqqolihrraio", model.vmResourceId());
        Assertions.assertEquals(WorkerType.HYBRID_V1, model.workerType());
        Assertions.assertEquals("rjtloq", model.workerName());
    }

    @Test
    public void testSerialize() {
        HybridRunbookWorkerInner model =
            new HybridRunbookWorkerInner()
                .withIp("egy")
                .withRegisteredDateTime(OffsetDateTime.parse("2020-12-23T19:39:20Z"))
                .withLastSeenDateTime(OffsetDateTime.parse("2021-11-25T15:39:13Z"))
                .withVmResourceId("jumvqqolihrraio")
                .withWorkerType(WorkerType.HYBRID_V1)
                .withWorkerName("rjtloq");
        model = BinaryData.fromObject(model).toObject(HybridRunbookWorkerInner.class);
        Assertions.assertEquals("egy", model.ip());
        Assertions.assertEquals(OffsetDateTime.parse("2020-12-23T19:39:20Z"), model.registeredDateTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-25T15:39:13Z"), model.lastSeenDateTime());
        Assertions.assertEquals("jumvqqolihrraio", model.vmResourceId());
        Assertions.assertEquals(WorkerType.HYBRID_V1, model.workerType());
        Assertions.assertEquals("rjtloq", model.workerName());
    }
}
