// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.automation.AutomationManager;
import com.azure.resourcemanager.automation.models.OperatingSystemType;
import com.azure.resourcemanager.automation.models.ScheduleFrequency;
import com.azure.resourcemanager.automation.models.SoftwareUpdateConfiguration;
import com.azure.resourcemanager.automation.models.SoftwareUpdateConfigurationTasks;
import com.azure.resourcemanager.automation.models.SucScheduleProperties;
import com.azure.resourcemanager.automation.models.UpdateConfiguration;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.Duration;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class SoftwareUpdateConfigurationsCreateWithResponseMockTests {
    @Test
    public void testCreateWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"updateConfiguration\":{\"operatingSystem\":\"Linux\",\"duration\":\"PT211H24M32S\",\"azureVirtualMachines\":[],\"nonAzureComputerNames\":[]},\"scheduleInfo\":{\"startTime\":\"2021-09-11T05:15Z\",\"startTimeOffsetMinutes\":24.148686092996698,\"expiryTime\":\"2021-09-14T05:19:51Z\",\"expiryTimeOffsetMinutes\":7.116003933218751,\"isEnabled\":true,\"nextRun\":\"2021-05-04T15:22:51Z\",\"nextRunOffsetMinutes\":77.39485177901221,\"interval\":6050016565935450457,\"frequency\":\"OneTime\",\"timeZone\":\"tfnnxrk\",\"creationTime\":\"2021-09-18T23:28:31Z\",\"lastModifiedTime\":\"2021-01-24T06:34:26Z\",\"description\":\"fmu\"},\"provisioningState\":\"iripfohyk\",\"creationTime\":\"2021-08-05T18:20:25Z\",\"createdBy\":\"cbrwjiutgnjizbe\",\"lastModifiedTime\":\"2021-09-10T20:40:06Z\",\"lastModifiedBy\":\"ymrvzbju\",\"tasks\":{}},\"id\":\"ziucti\",\"name\":\"gbdsuifrev\",\"type\":\"aapezkiswqjmdghs\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        AutomationManager manager =
            AutomationManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        SoftwareUpdateConfiguration response =
            manager
                .softwareUpdateConfigurations()
                .define("qg")
                .withExistingAutomationAccount("kfrbzgowoxqmjea", "cxn")
                .withUpdateConfiguration(
                    new UpdateConfiguration()
                        .withOperatingSystem(OperatingSystemType.LINUX)
                        .withDuration(Duration.parse("PT50H58M10S"))
                        .withAzureVirtualMachines(Arrays.asList())
                        .withNonAzureComputerNames(Arrays.asList()))
                .withScheduleInfo(
                    new SucScheduleProperties()
                        .withStartTime(OffsetDateTime.parse("2021-03-04T20:23:50Z"))
                        .withExpiryTime(OffsetDateTime.parse("2021-11-03T08:21:12Z"))
                        .withExpiryTimeOffsetMinutes(31.867166727203323D)
                        .withIsEnabled(false)
                        .withNextRun(OffsetDateTime.parse("2021-08-18T19:10:01Z"))
                        .withNextRunOffsetMinutes(78.06000760126295D)
                        .withInterval(808505606481731214L)
                        .withFrequency(ScheduleFrequency.HOUR)
                        .withTimeZone("gon")
                        .withCreationTime(OffsetDateTime.parse("2021-10-15T15:11:29Z"))
                        .withLastModifiedTime(OffsetDateTime.parse("2021-03-20T04:42:08Z"))
                        .withDescription("ubyzn"))
                .withTasks(new SoftwareUpdateConfigurationTasks())
                .withClientRequestId("uhvajmailfemjjza")
                .create();

        Assertions.assertEquals(OperatingSystemType.LINUX, response.updateConfiguration().operatingSystem());
        Assertions.assertEquals(Duration.parse("PT211H24M32S"), response.updateConfiguration().duration());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-11T05:15Z"), response.scheduleInfo().startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-14T05:19:51Z"), response.scheduleInfo().expiryTime());
        Assertions.assertEquals(7.116003933218751D, response.scheduleInfo().expiryTimeOffsetMinutes());
        Assertions.assertEquals(true, response.scheduleInfo().isEnabled());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-04T15:22:51Z"), response.scheduleInfo().nextRun());
        Assertions.assertEquals(77.39485177901221D, response.scheduleInfo().nextRunOffsetMinutes());
        Assertions.assertEquals(6050016565935450457L, response.scheduleInfo().interval());
        Assertions.assertEquals(ScheduleFrequency.ONE_TIME, response.scheduleInfo().frequency());
        Assertions.assertEquals("tfnnxrk", response.scheduleInfo().timeZone());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-18T23:28:31Z"), response.scheduleInfo().creationTime());
        Assertions
            .assertEquals(OffsetDateTime.parse("2021-01-24T06:34:26Z"), response.scheduleInfo().lastModifiedTime());
        Assertions.assertEquals("fmu", response.scheduleInfo().description());
    }
}
