// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.automation.fluent.models.SoftwareUpdateConfigurationInner;
import com.azure.resourcemanager.automation.models.OperatingSystemType;
import com.azure.resourcemanager.automation.models.ScheduleFrequency;
import com.azure.resourcemanager.automation.models.SoftwareUpdateConfigurationTasks;
import com.azure.resourcemanager.automation.models.SucScheduleProperties;
import com.azure.resourcemanager.automation.models.UpdateConfiguration;
import java.time.Duration;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class SoftwareUpdateConfigurationInnerTests {
    @Test
    public void testDeserialize() {
        SoftwareUpdateConfigurationInner model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"updateConfiguration\":{\"operatingSystem\":\"Linux\",\"duration\":\"PT28H29M52S\",\"azureVirtualMachines\":[\"yzm\",\"txon\",\"mtsavjcbpwxqp\"],\"nonAzureComputerNames\":[\"nftguvriuhpr\",\"mdyvxqtayriw\",\"ro\"]},\"scheduleInfo\":{\"startTime\":\"2021-03-23T01:00:51Z\",\"startTimeOffsetMinutes\":39.97715806626573,\"expiryTime\":\"2021-04-11T16:05:14Z\",\"expiryTimeOffsetMinutes\":51.7609236137217,\"isEnabled\":true,\"nextRun\":\"2021-02-26T18:00:32Z\",\"nextRunOffsetMinutes\":23.024755468947212,\"interval\":35726863806871709,\"frequency\":\"Month\",\"timeZone\":\"zvahapjy\",\"creationTime\":\"2021-06-30T09:34:11Z\",\"lastModifiedTime\":\"2021-02-23T15:19:32Z\",\"description\":\"cjrvxdjzlmwlxkv\"},\"provisioningState\":\"fhzovawjvzunluth\",\"creationTime\":\"2021-12-09T15:55:09Z\",\"createdBy\":\"xipeilpjzuaejx\",\"lastModifiedTime\":\"2021-11-03T21:00:46Z\",\"lastModifiedBy\":\"skzbb\",\"tasks\":{}},\"id\":\"mv\",\"name\":\"ekg\",\"type\":\"wozuhkf\"}")
                .toObject(SoftwareUpdateConfigurationInner.class);
        Assertions.assertEquals(OperatingSystemType.LINUX, model.updateConfiguration().operatingSystem());
        Assertions.assertEquals(Duration.parse("PT28H29M52S"), model.updateConfiguration().duration());
        Assertions.assertEquals("yzm", model.updateConfiguration().azureVirtualMachines().get(0));
        Assertions.assertEquals("nftguvriuhpr", model.updateConfiguration().nonAzureComputerNames().get(0));
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-23T01:00:51Z"), model.scheduleInfo().startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-11T16:05:14Z"), model.scheduleInfo().expiryTime());
        Assertions.assertEquals(51.7609236137217D, model.scheduleInfo().expiryTimeOffsetMinutes());
        Assertions.assertEquals(true, model.scheduleInfo().isEnabled());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-26T18:00:32Z"), model.scheduleInfo().nextRun());
        Assertions.assertEquals(23.024755468947212D, model.scheduleInfo().nextRunOffsetMinutes());
        Assertions.assertEquals(35726863806871709L, model.scheduleInfo().interval());
        Assertions.assertEquals(ScheduleFrequency.MONTH, model.scheduleInfo().frequency());
        Assertions.assertEquals("zvahapjy", model.scheduleInfo().timeZone());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-30T09:34:11Z"), model.scheduleInfo().creationTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-23T15:19:32Z"), model.scheduleInfo().lastModifiedTime());
        Assertions.assertEquals("cjrvxdjzlmwlxkv", model.scheduleInfo().description());
    }

    @Test
    public void testSerialize() {
        SoftwareUpdateConfigurationInner model =
            new SoftwareUpdateConfigurationInner()
                .withUpdateConfiguration(
                    new UpdateConfiguration()
                        .withOperatingSystem(OperatingSystemType.LINUX)
                        .withDuration(Duration.parse("PT28H29M52S"))
                        .withAzureVirtualMachines(Arrays.asList("yzm", "txon", "mtsavjcbpwxqp"))
                        .withNonAzureComputerNames(Arrays.asList("nftguvriuhpr", "mdyvxqtayriw", "ro")))
                .withScheduleInfo(
                    new SucScheduleProperties()
                        .withStartTime(OffsetDateTime.parse("2021-03-23T01:00:51Z"))
                        .withExpiryTime(OffsetDateTime.parse("2021-04-11T16:05:14Z"))
                        .withExpiryTimeOffsetMinutes(51.7609236137217D)
                        .withIsEnabled(true)
                        .withNextRun(OffsetDateTime.parse("2021-02-26T18:00:32Z"))
                        .withNextRunOffsetMinutes(23.024755468947212D)
                        .withInterval(35726863806871709L)
                        .withFrequency(ScheduleFrequency.MONTH)
                        .withTimeZone("zvahapjy")
                        .withCreationTime(OffsetDateTime.parse("2021-06-30T09:34:11Z"))
                        .withLastModifiedTime(OffsetDateTime.parse("2021-02-23T15:19:32Z"))
                        .withDescription("cjrvxdjzlmwlxkv"))
                .withTasks(new SoftwareUpdateConfigurationTasks());
        model = BinaryData.fromObject(model).toObject(SoftwareUpdateConfigurationInner.class);
        Assertions.assertEquals(OperatingSystemType.LINUX, model.updateConfiguration().operatingSystem());
        Assertions.assertEquals(Duration.parse("PT28H29M52S"), model.updateConfiguration().duration());
        Assertions.assertEquals("yzm", model.updateConfiguration().azureVirtualMachines().get(0));
        Assertions.assertEquals("nftguvriuhpr", model.updateConfiguration().nonAzureComputerNames().get(0));
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-23T01:00:51Z"), model.scheduleInfo().startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-11T16:05:14Z"), model.scheduleInfo().expiryTime());
        Assertions.assertEquals(51.7609236137217D, model.scheduleInfo().expiryTimeOffsetMinutes());
        Assertions.assertEquals(true, model.scheduleInfo().isEnabled());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-26T18:00:32Z"), model.scheduleInfo().nextRun());
        Assertions.assertEquals(23.024755468947212D, model.scheduleInfo().nextRunOffsetMinutes());
        Assertions.assertEquals(35726863806871709L, model.scheduleInfo().interval());
        Assertions.assertEquals(ScheduleFrequency.MONTH, model.scheduleInfo().frequency());
        Assertions.assertEquals("zvahapjy", model.scheduleInfo().timeZone());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-30T09:34:11Z"), model.scheduleInfo().creationTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-23T15:19:32Z"), model.scheduleInfo().lastModifiedTime());
        Assertions.assertEquals("cjrvxdjzlmwlxkv", model.scheduleInfo().description());
    }
}
