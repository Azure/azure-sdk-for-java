// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.automation.models.ContentHash;
import com.azure.resourcemanager.automation.models.ContentLink;
import com.azure.resourcemanager.automation.models.PythonPackageCreateParameters;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class PythonPackageCreateParametersTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PythonPackageCreateParameters model = BinaryData.fromString(
            "{\"properties\":{\"contentLink\":{\"uri\":\"wjfeusnhutjel\",\"contentHash\":{\"algorithm\":\"rl\",\"value\":\"hugjzzdatqxhoc\"},\"version\":\"eablg\"}},\"tags\":{\"ndv\":\"ti\",\"okftyxolniwpwcuk\":\"aozwyiftyhxhu\",\"ryplwckbasyypn\":\"fkgiawxk\",\"phejkotynqgoulz\":\"dhsgcba\"}}")
            .toObject(PythonPackageCreateParameters.class);
        Assertions.assertEquals("ti", model.tags().get("ndv"));
        Assertions.assertEquals("wjfeusnhutjel", model.contentLink().uri());
        Assertions.assertEquals("rl", model.contentLink().contentHash().algorithm());
        Assertions.assertEquals("hugjzzdatqxhoc", model.contentLink().contentHash().value());
        Assertions.assertEquals("eablg", model.contentLink().version());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PythonPackageCreateParameters model = new PythonPackageCreateParameters()
            .withTags(mapOf("ndv", "ti", "okftyxolniwpwcuk", "aozwyiftyhxhu", "ryplwckbasyypn", "fkgiawxk",
                "phejkotynqgoulz", "dhsgcba"))
            .withContentLink(new ContentLink().withUri("wjfeusnhutjel")
                .withContentHash(new ContentHash().withAlgorithm("rl").withValue("hugjzzdatqxhoc"))
                .withVersion("eablg"));
        model = BinaryData.fromObject(model).toObject(PythonPackageCreateParameters.class);
        Assertions.assertEquals("ti", model.tags().get("ndv"));
        Assertions.assertEquals("wjfeusnhutjel", model.contentLink().uri());
        Assertions.assertEquals("rl", model.contentLink().contentHash().algorithm());
        Assertions.assertEquals("hugjzzdatqxhoc", model.contentLink().contentHash().value());
        Assertions.assertEquals("eablg", model.contentLink().version());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
