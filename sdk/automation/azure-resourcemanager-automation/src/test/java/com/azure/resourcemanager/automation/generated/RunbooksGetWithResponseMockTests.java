// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.automation.AutomationManager;
import com.azure.resourcemanager.automation.models.Runbook;
import com.azure.resourcemanager.automation.models.RunbookProvisioningState;
import com.azure.resourcemanager.automation.models.RunbookState;
import com.azure.resourcemanager.automation.models.RunbookTypeEnum;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class RunbooksGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"runbookType\":\"PowerShellWorkflow\",\"publishContentLink\":{\"uri\":\"gvsbtsertoxad\",\"contentHash\":{\"algorithm\":\"uvjhxmnrqstjc\",\"value\":\"etwmlgicvnp\"},\"version\":\"dhgjnaqyqi\"},\"state\":\"New\",\"logVerbose\":true,\"logProgress\":true,\"logActivityTrace\":1500284974,\"jobCount\":667154194,\"parameters\":{\"cpzcvdizul\":{\"type\":\"tekdtfobvfiybx\",\"isMandatory\":false,\"position\":724135299,\"defaultValue\":\"bfzdqekiv\"}},\"outputTypes\":[\"bhtrezpzlpryfm\",\"mdutzfk\",\"il\",\"oudccgndjg\"],\"draft\":{\"inEdit\":false,\"draftContentLink\":{\"uri\":\"qqyeqfcb\",\"contentHash\":{\"algorithm\":\"lpyuflqjf\",\"value\":\"htujcyohigimwdc\"},\"version\":\"lkq\"},\"creationTime\":\"2021-08-10T13:09:44Z\",\"lastModifiedTime\":\"2021-07-12T08:52:20Z\",\"parameters\":{\"tvfphmdzxplgtpvd\":{\"type\":\"bzmecu\",\"isMandatory\":true,\"position\":570583148,\"defaultValue\":\"bzayspzvri\"},\"vlzdmnfm\":{\"type\":\"tlzmgs\",\"isMandatory\":true,\"position\":2022282106,\"defaultValue\":\"bkkz\"},\"zwdehkkmvhz\":{\"type\":\"sx\",\"isMandatory\":true,\"position\":23381110,\"defaultValue\":\"orimmo\"}},\"outputTypes\":[\"anyrvaprtgelgwe\",\"ikfyaqandm\",\"mnqoqjum\"]},\"provisioningState\":\"Succeeded\",\"lastModifiedBy\":\"bpbvzopaxmf\",\"creationTime\":\"2021-02-12T00:39:23Z\",\"lastModifiedTime\":\"2021-08-28T15:06:58Z\",\"description\":\"oxfaxdtn\"},\"etag\":\"fbsatroi\",\"location\":\"uesu\",\"tags\":{\"fldsiuorin\":\"cpcjycboelrgtt\",\"sriwmmtmqrxrz\":\"kcedp\"},\"id\":\"vvyczy\",\"name\":\"yubtgmbxiqah\",\"type\":\"agpx\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AutomationManager manager = AutomationManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        Runbook response = manager.runbooks()
            .getWithResponse("ykdnonaaxwmg", "ru", "lqcwnynll", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("uesu", response.location());
        Assertions.assertEquals("cpcjycboelrgtt", response.tags().get("fldsiuorin"));
        Assertions.assertEquals("fbsatroi", response.etag());
        Assertions.assertEquals(RunbookTypeEnum.POWER_SHELL_WORKFLOW, response.runbookType());
        Assertions.assertEquals("gvsbtsertoxad", response.publishContentLink().uri());
        Assertions.assertEquals("uvjhxmnrqstjc", response.publishContentLink().contentHash().algorithm());
        Assertions.assertEquals("etwmlgicvnp", response.publishContentLink().contentHash().value());
        Assertions.assertEquals("dhgjnaqyqi", response.publishContentLink().version());
        Assertions.assertEquals(RunbookState.NEW, response.state());
        Assertions.assertEquals(true, response.logVerbose());
        Assertions.assertEquals(true, response.logProgress());
        Assertions.assertEquals(1500284974, response.logActivityTrace());
        Assertions.assertEquals(667154194, response.jobCount());
        Assertions.assertEquals("tekdtfobvfiybx", response.parameters().get("cpzcvdizul").type());
        Assertions.assertEquals(false, response.parameters().get("cpzcvdizul").isMandatory());
        Assertions.assertEquals(724135299, response.parameters().get("cpzcvdizul").position());
        Assertions.assertEquals("bfzdqekiv", response.parameters().get("cpzcvdizul").defaultValue());
        Assertions.assertEquals("bhtrezpzlpryfm", response.outputTypes().get(0));
        Assertions.assertEquals(false, response.draft().inEdit());
        Assertions.assertEquals("qqyeqfcb", response.draft().draftContentLink().uri());
        Assertions.assertEquals("lpyuflqjf", response.draft().draftContentLink().contentHash().algorithm());
        Assertions.assertEquals("htujcyohigimwdc", response.draft().draftContentLink().contentHash().value());
        Assertions.assertEquals("lkq", response.draft().draftContentLink().version());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-10T13:09:44Z"), response.draft().creationTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-12T08:52:20Z"), response.draft().lastModifiedTime());
        Assertions.assertEquals("bzmecu", response.draft().parameters().get("tvfphmdzxplgtpvd").type());
        Assertions.assertEquals(true, response.draft().parameters().get("tvfphmdzxplgtpvd").isMandatory());
        Assertions.assertEquals(570583148, response.draft().parameters().get("tvfphmdzxplgtpvd").position());
        Assertions.assertEquals("bzayspzvri", response.draft().parameters().get("tvfphmdzxplgtpvd").defaultValue());
        Assertions.assertEquals("anyrvaprtgelgwe", response.draft().outputTypes().get(0));
        Assertions.assertEquals(RunbookProvisioningState.SUCCEEDED, response.provisioningState());
        Assertions.assertEquals("bpbvzopaxmf", response.lastModifiedBy());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-12T00:39:23Z"), response.creationTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-28T15:06:58Z"), response.lastModifiedTime());
        Assertions.assertEquals("oxfaxdtn", response.description());
    }
}
