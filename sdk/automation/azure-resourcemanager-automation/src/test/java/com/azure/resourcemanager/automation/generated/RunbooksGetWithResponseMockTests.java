// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.util.Context;
import com.azure.resourcemanager.automation.AutomationManager;
import com.azure.resourcemanager.automation.models.Runbook;
import com.azure.resourcemanager.automation.models.RunbookProvisioningState;
import com.azure.resourcemanager.automation.models.RunbookState;
import com.azure.resourcemanager.automation.models.RunbookTypeEnum;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class RunbooksGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"runbookType\":\"Script\",\"publishContentLink\":{\"uri\":\"wavvqxuajgcqwuly\",\"version\":\"fcfdruwsikxx\"},\"state\":\"Published\",\"logVerbose\":true,\"logProgress\":true,\"logActivityTrace\":664951467,\"jobCount\":930182820,\"parameters\":{},\"outputTypes\":[\"jgb\"],\"draft\":{\"inEdit\":false,\"creationTime\":\"2021-12-07T18:49:45Z\",\"lastModifiedTime\":\"2021-06-18T17:18:19Z\",\"parameters\":{},\"outputTypes\":[]},\"provisioningState\":\"Succeeded\",\"lastModifiedBy\":\"djws\",\"creationTime\":\"2021-01-19T07:15Z\",\"lastModifiedTime\":\"2021-02-06T10:38:17Z\",\"description\":\"agttpufpb\"},\"etag\":\"nrholhujb\",\"location\":\"wxiplkyso\",\"tags\":{\"rxslwhdmcv\":\"j\",\"f\":\"tbbzj\"},\"id\":\"huwzbxpcqzgi\",\"name\":\"otjecohmxvvl\",\"type\":\"rskapbxwieexu\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        AutomationManager manager =
            AutomationManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        Runbook response = manager.runbooks().getWithResponse("zn", "ucbdaom", "wiinjdllw", Context.NONE).getValue();

        Assertions.assertEquals("wxiplkyso", response.location());
        Assertions.assertEquals("j", response.tags().get("rxslwhdmcv"));
        Assertions.assertEquals("nrholhujb", response.etag());
        Assertions.assertEquals(RunbookTypeEnum.SCRIPT, response.runbookType());
        Assertions.assertEquals("wavvqxuajgcqwuly", response.publishContentLink().uri());
        Assertions.assertEquals("fcfdruwsikxx", response.publishContentLink().version());
        Assertions.assertEquals(RunbookState.PUBLISHED, response.state());
        Assertions.assertEquals(true, response.logVerbose());
        Assertions.assertEquals(true, response.logProgress());
        Assertions.assertEquals(664951467, response.logActivityTrace());
        Assertions.assertEquals(930182820, response.jobCount());
        Assertions.assertEquals("jgb", response.outputTypes().get(0));
        Assertions.assertEquals(false, response.draft().inEdit());
        Assertions.assertEquals(OffsetDateTime.parse("2021-12-07T18:49:45Z"), response.draft().creationTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-18T17:18:19Z"), response.draft().lastModifiedTime());
        Assertions.assertEquals(RunbookProvisioningState.SUCCEEDED, response.provisioningState());
        Assertions.assertEquals("djws", response.lastModifiedBy());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-19T07:15Z"), response.creationTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-06T10:38:17Z"), response.lastModifiedTime());
        Assertions.assertEquals("agttpufpb", response.description());
    }
}
