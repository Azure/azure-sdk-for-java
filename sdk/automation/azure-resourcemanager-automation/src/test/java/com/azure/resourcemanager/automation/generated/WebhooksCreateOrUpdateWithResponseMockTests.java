// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.automation.AutomationManager;
import com.azure.resourcemanager.automation.models.RunbookAssociationProperty;
import com.azure.resourcemanager.automation.models.Webhook;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class WebhooksCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"isEnabled\":false,\"uri\":\"ygleexa\",\"expiryTime\":\"2021-01-02T13:19:13Z\",\"lastInvokedTime\":\"2021-09-17T20:33:22Z\",\"parameters\":{\"sjjzyvoaqajuveh\":\"brcary\",\"be\":\"ptdmkrrbhmpful\"},\"runbook\":{\"name\":\"bpmfbfununmpzkrv\"},\"runOn\":\"ifkdschlzvf\",\"creationTime\":\"2021-03-30T02:21:42Z\",\"lastModifiedTime\":\"2021-07-17T09:23:33Z\",\"lastModifiedBy\":\"jwg\",\"description\":\"nphbkgfyrt\"},\"id\":\"gm\",\"name\":\"mjpjscdfpdqwty\",\"type\":\"ev\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        AutomationManager manager =
            AutomationManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        Webhook response =
            manager
                .webhooks()
                .define("eh")
                .withExistingAutomationAccount("eek", "s")
                .withName("gdda")
                .withIsEnabled(false)
                .withUri("gydlqidywm")
                .withExpiryTime(OffsetDateTime.parse("2021-03-19T06:23:14Z"))
                .withParameters(mapOf("fbnrq", "ril", "omals", "xvztpbnfnqtxj"))
                .withRunbook(new RunbookAssociationProperty().withName("fdde"))
                .withRunOn("dwq")
                .create();

        Assertions.assertEquals(false, response.isEnabled());
        Assertions.assertEquals("ygleexa", response.uri());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-02T13:19:13Z"), response.expiryTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-17T20:33:22Z"), response.lastInvokedTime());
        Assertions.assertEquals("brcary", response.parameters().get("sjjzyvoaqajuveh"));
        Assertions.assertEquals("bpmfbfununmpzkrv", response.runbook().name());
        Assertions.assertEquals("ifkdschlzvf", response.runOn());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-30T02:21:42Z"), response.creationTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-17T09:23:33Z"), response.lastModifiedTime());
        Assertions.assertEquals("jwg", response.lastModifiedBy());
        Assertions.assertEquals("nphbkgfyrt", response.description());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
