// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.automation.AutomationManager;
import com.azure.resourcemanager.automation.models.RunbookAssociationProperty;
import com.azure.resourcemanager.automation.models.Webhook;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class WebhooksCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"isEnabled\":false,\"uri\":\"ncmspsanma\",\"expiryTime\":\"2021-12-03T23:39:40Z\",\"lastInvokedTime\":\"2021-09-05T19:45:45Z\",\"parameters\":{\"lqcskkqjmxptueip\":\"qmlfv\",\"rq\":\"ugkw\",\"uehvvpx\":\"rpahuuonjkkxuk\",\"leuidpmton\":\"oegcjoj\"},\"runbook\":{\"name\":\"nhtmeplhbp\"},\"runOn\":\"apmumm\",\"creationTime\":\"2021-01-08T02:02:14Z\",\"lastModifiedTime\":\"2021-02-21T15:59:02Z\",\"lastModifiedBy\":\"c\",\"description\":\"iuaiqpm\"},\"id\":\"ufzhrchx\",\"name\":\"wuzdmh\",\"type\":\"wlvi\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AutomationManager manager = AutomationManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        Webhook response = manager.webhooks()
            .define("ib")
            .withExistingAutomationAccount("ses", "rujbjpppktlp")
            .withName("mthieatnejrnmin")
            .withIsEnabled(true)
            .withUri("gtkihonikzsr")
            .withExpiryTime(OffsetDateTime.parse("2021-08-16T18:50:27Z"))
            .withParameters(mapOf("kensckh", "ilzfbpnto", "yfxxkwykuqdnd", "mcarm", "apvd", "lykhkg", "peerscd", "t"))
            .withRunbook(new RunbookAssociationProperty().withName("rnjr"))
            .withRunOn("fmbgacn")
            .create();

        Assertions.assertEquals(false, response.isEnabled());
        Assertions.assertEquals("ncmspsanma", response.uri());
        Assertions.assertEquals(OffsetDateTime.parse("2021-12-03T23:39:40Z"), response.expiryTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-05T19:45:45Z"), response.lastInvokedTime());
        Assertions.assertEquals("qmlfv", response.parameters().get("lqcskkqjmxptueip"));
        Assertions.assertEquals("nhtmeplhbp", response.runbook().name());
        Assertions.assertEquals("apmumm", response.runOn());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-08T02:02:14Z"), response.creationTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-21T15:59:02Z"), response.lastModifiedTime());
        Assertions.assertEquals("c", response.lastModifiedBy());
        Assertions.assertEquals("iuaiqpm", response.description());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
