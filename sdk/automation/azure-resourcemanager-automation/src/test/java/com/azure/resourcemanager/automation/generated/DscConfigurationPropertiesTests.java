// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.automation.fluent.models.DscConfigurationProperties;
import com.azure.resourcemanager.automation.models.ContentHash;
import com.azure.resourcemanager.automation.models.ContentSource;
import com.azure.resourcemanager.automation.models.ContentSourceType;
import com.azure.resourcemanager.automation.models.DscConfigurationParameter;
import com.azure.resourcemanager.automation.models.DscConfigurationProvisioningState;
import com.azure.resourcemanager.automation.models.DscConfigurationState;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class DscConfigurationPropertiesTests {
    @Test
    public void testDeserialize() {
        DscConfigurationProperties model =
            BinaryData
                .fromString(
                    "{\"provisioningState\":\"Succeeded\",\"jobCount\":546914966,\"parameters\":{\"hfcf\":{\"type\":\"tgqscjavftjuh\",\"isMandatory\":true,\"position\":238843538,\"defaultValue\":\"tgguwpijrajcivmm\"},\"shoxgsgb\":{\"type\":\"rxgkne\",\"isMandatory\":true,\"position\":119423972,\"defaultValue\":\"qodfvp\"},\"sdtutnwlduyc\":{\"type\":\"gzdjtxvzf\",\"isMandatory\":false,\"position\":1485525619,\"defaultValue\":\"qvlgafcqusrdvetn\"}},\"source\":{\"hash\":{\"algorithm\":\"hyrmewipmvekdx\",\"value\":\"kuqgsjjxundxgket\"},\"type\":\"embeddedContent\",\"value\":\"zjhfjmhvv\",\"version\":\"vgpmun\"},\"state\":\"Published\",\"logVerbose\":false,\"creationTime\":\"2020-12-27T00:07:16Z\",\"lastModifiedTime\":\"2021-05-19T22:03:11Z\",\"nodeConfigurationCount\":837522232,\"description\":\"yihsasbhudypohyu\"}")
                .toObject(DscConfigurationProperties.class);
        Assertions.assertEquals(DscConfigurationProvisioningState.SUCCEEDED, model.provisioningState());
        Assertions.assertEquals(546914966, model.jobCount());
        Assertions.assertEquals("tgqscjavftjuh", model.parameters().get("hfcf").type());
        Assertions.assertEquals(true, model.parameters().get("hfcf").isMandatory());
        Assertions.assertEquals(238843538, model.parameters().get("hfcf").position());
        Assertions.assertEquals("tgguwpijrajcivmm", model.parameters().get("hfcf").defaultValue());
        Assertions.assertEquals("hyrmewipmvekdx", model.source().hash().algorithm());
        Assertions.assertEquals("kuqgsjjxundxgket", model.source().hash().value());
        Assertions.assertEquals(ContentSourceType.EMBEDDED_CONTENT, model.source().type());
        Assertions.assertEquals("zjhfjmhvv", model.source().value());
        Assertions.assertEquals("vgpmun", model.source().version());
        Assertions.assertEquals(DscConfigurationState.PUBLISHED, model.state());
        Assertions.assertEquals(false, model.logVerbose());
        Assertions.assertEquals(OffsetDateTime.parse("2020-12-27T00:07:16Z"), model.creationTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-19T22:03:11Z"), model.lastModifiedTime());
        Assertions.assertEquals(837522232, model.nodeConfigurationCount());
        Assertions.assertEquals("yihsasbhudypohyu", model.description());
    }

    @Test
    public void testSerialize() {
        DscConfigurationProperties model =
            new DscConfigurationProperties()
                .withProvisioningState(DscConfigurationProvisioningState.SUCCEEDED)
                .withJobCount(546914966)
                .withParameters(
                    mapOf(
                        "hfcf",
                        new DscConfigurationParameter()
                            .withType("tgqscjavftjuh")
                            .withIsMandatory(true)
                            .withPosition(238843538)
                            .withDefaultValue("tgguwpijrajcivmm"),
                        "shoxgsgb",
                        new DscConfigurationParameter()
                            .withType("rxgkne")
                            .withIsMandatory(true)
                            .withPosition(119423972)
                            .withDefaultValue("qodfvp"),
                        "sdtutnwlduyc",
                        new DscConfigurationParameter()
                            .withType("gzdjtxvzf")
                            .withIsMandatory(false)
                            .withPosition(1485525619)
                            .withDefaultValue("qvlgafcqusrdvetn")))
                .withSource(
                    new ContentSource()
                        .withHash(new ContentHash().withAlgorithm("hyrmewipmvekdx").withValue("kuqgsjjxundxgket"))
                        .withType(ContentSourceType.EMBEDDED_CONTENT)
                        .withValue("zjhfjmhvv")
                        .withVersion("vgpmun"))
                .withState(DscConfigurationState.PUBLISHED)
                .withLogVerbose(false)
                .withCreationTime(OffsetDateTime.parse("2020-12-27T00:07:16Z"))
                .withLastModifiedTime(OffsetDateTime.parse("2021-05-19T22:03:11Z"))
                .withNodeConfigurationCount(837522232)
                .withDescription("yihsasbhudypohyu");
        model = BinaryData.fromObject(model).toObject(DscConfigurationProperties.class);
        Assertions.assertEquals(DscConfigurationProvisioningState.SUCCEEDED, model.provisioningState());
        Assertions.assertEquals(546914966, model.jobCount());
        Assertions.assertEquals("tgqscjavftjuh", model.parameters().get("hfcf").type());
        Assertions.assertEquals(true, model.parameters().get("hfcf").isMandatory());
        Assertions.assertEquals(238843538, model.parameters().get("hfcf").position());
        Assertions.assertEquals("tgguwpijrajcivmm", model.parameters().get("hfcf").defaultValue());
        Assertions.assertEquals("hyrmewipmvekdx", model.source().hash().algorithm());
        Assertions.assertEquals("kuqgsjjxundxgket", model.source().hash().value());
        Assertions.assertEquals(ContentSourceType.EMBEDDED_CONTENT, model.source().type());
        Assertions.assertEquals("zjhfjmhvv", model.source().value());
        Assertions.assertEquals("vgpmun", model.source().version());
        Assertions.assertEquals(DscConfigurationState.PUBLISHED, model.state());
        Assertions.assertEquals(false, model.logVerbose());
        Assertions.assertEquals(OffsetDateTime.parse("2020-12-27T00:07:16Z"), model.creationTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-19T22:03:11Z"), model.lastModifiedTime());
        Assertions.assertEquals(837522232, model.nodeConfigurationCount());
        Assertions.assertEquals("yihsasbhudypohyu", model.description());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
