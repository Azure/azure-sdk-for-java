// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.automation.fluent.models.DscConfigurationProperties;
import com.azure.resourcemanager.automation.models.ContentHash;
import com.azure.resourcemanager.automation.models.ContentSource;
import com.azure.resourcemanager.automation.models.ContentSourceType;
import com.azure.resourcemanager.automation.models.DscConfigurationParameter;
import com.azure.resourcemanager.automation.models.DscConfigurationProvisioningState;
import com.azure.resourcemanager.automation.models.DscConfigurationState;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DscConfigurationPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DscConfigurationProperties model = BinaryData.fromString(
            "{\"provisioningState\":\"Succeeded\",\"jobCount\":2070273201,\"parameters\":{\"sismjqfrddga\":{\"type\":\"qhvseufuq\",\"isMandatory\":true,\"position\":1595658435,\"defaultValue\":\"cgq\"},\"hcz\":{\"type\":\"uhiosrsju\",\"isMandatory\":false,\"position\":105959445,\"defaultValue\":\"syirnx\"},\"zlrpiqywncvj\":{\"type\":\"rxzbujr\",\"isMandatory\":true,\"position\":1385041485,\"defaultValue\":\"revkhgnlnzo\"}},\"source\":{\"hash\":{\"algorithm\":\"cof\",\"value\":\"zehtdhgb\"},\"type\":\"embeddedContent\",\"value\":\"eljeamurvzmlovua\",\"version\":\"shcxlpmjerbdk\"},\"state\":\"Edit\",\"logVerbose\":false,\"creationTime\":\"2021-12-03T21:14:10Z\",\"lastModifiedTime\":\"2021-09-04T16:46:48Z\",\"nodeConfigurationCount\":344121425,\"description\":\"ccxjm\"}")
            .toObject(DscConfigurationProperties.class);
        Assertions.assertEquals(DscConfigurationProvisioningState.SUCCEEDED, model.provisioningState());
        Assertions.assertEquals(2070273201, model.jobCount());
        Assertions.assertEquals("qhvseufuq", model.parameters().get("sismjqfrddga").type());
        Assertions.assertEquals(true, model.parameters().get("sismjqfrddga").isMandatory());
        Assertions.assertEquals(1595658435, model.parameters().get("sismjqfrddga").position());
        Assertions.assertEquals("cgq", model.parameters().get("sismjqfrddga").defaultValue());
        Assertions.assertEquals("cof", model.source().hash().algorithm());
        Assertions.assertEquals("zehtdhgb", model.source().hash().value());
        Assertions.assertEquals(ContentSourceType.EMBEDDED_CONTENT, model.source().type());
        Assertions.assertEquals("eljeamurvzmlovua", model.source().value());
        Assertions.assertEquals("shcxlpmjerbdk", model.source().version());
        Assertions.assertEquals(DscConfigurationState.EDIT, model.state());
        Assertions.assertEquals(false, model.logVerbose());
        Assertions.assertEquals(OffsetDateTime.parse("2021-12-03T21:14:10Z"), model.creationTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-04T16:46:48Z"), model.lastModifiedTime());
        Assertions.assertEquals(344121425, model.nodeConfigurationCount());
        Assertions.assertEquals("ccxjm", model.description());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DscConfigurationProperties model
            = new DscConfigurationProperties().withProvisioningState(DscConfigurationProvisioningState.SUCCEEDED)
                .withJobCount(2070273201)
                .withParameters(mapOf("sismjqfrddga",
                    new DscConfigurationParameter().withType("qhvseufuq")
                        .withIsMandatory(true)
                        .withPosition(1595658435)
                        .withDefaultValue("cgq"),
                    "hcz",
                    new DscConfigurationParameter().withType("uhiosrsju")
                        .withIsMandatory(false)
                        .withPosition(105959445)
                        .withDefaultValue("syirnx"),
                    "zlrpiqywncvj",
                    new DscConfigurationParameter().withType("rxzbujr")
                        .withIsMandatory(true)
                        .withPosition(1385041485)
                        .withDefaultValue("revkhgnlnzo")))
                .withSource(new ContentSource().withHash(new ContentHash().withAlgorithm("cof").withValue("zehtdhgb"))
                    .withType(ContentSourceType.EMBEDDED_CONTENT)
                    .withValue("eljeamurvzmlovua")
                    .withVersion("shcxlpmjerbdk"))
                .withState(DscConfigurationState.EDIT)
                .withLogVerbose(false)
                .withCreationTime(OffsetDateTime.parse("2021-12-03T21:14:10Z"))
                .withLastModifiedTime(OffsetDateTime.parse("2021-09-04T16:46:48Z"))
                .withNodeConfigurationCount(344121425)
                .withDescription("ccxjm");
        model = BinaryData.fromObject(model).toObject(DscConfigurationProperties.class);
        Assertions.assertEquals(DscConfigurationProvisioningState.SUCCEEDED, model.provisioningState());
        Assertions.assertEquals(2070273201, model.jobCount());
        Assertions.assertEquals("qhvseufuq", model.parameters().get("sismjqfrddga").type());
        Assertions.assertEquals(true, model.parameters().get("sismjqfrddga").isMandatory());
        Assertions.assertEquals(1595658435, model.parameters().get("sismjqfrddga").position());
        Assertions.assertEquals("cgq", model.parameters().get("sismjqfrddga").defaultValue());
        Assertions.assertEquals("cof", model.source().hash().algorithm());
        Assertions.assertEquals("zehtdhgb", model.source().hash().value());
        Assertions.assertEquals(ContentSourceType.EMBEDDED_CONTENT, model.source().type());
        Assertions.assertEquals("eljeamurvzmlovua", model.source().value());
        Assertions.assertEquals("shcxlpmjerbdk", model.source().version());
        Assertions.assertEquals(DscConfigurationState.EDIT, model.state());
        Assertions.assertEquals(false, model.logVerbose());
        Assertions.assertEquals(OffsetDateTime.parse("2021-12-03T21:14:10Z"), model.creationTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-04T16:46:48Z"), model.lastModifiedTime());
        Assertions.assertEquals(344121425, model.nodeConfigurationCount());
        Assertions.assertEquals("ccxjm", model.description());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
