// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.automation.fluent.models.JobScheduleProperties;
import com.azure.resourcemanager.automation.models.RunbookAssociationProperty;
import com.azure.resourcemanager.automation.models.ScheduleAssociationProperty;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class JobSchedulePropertiesTests {
    @Test
    public void testDeserialize() {
        JobScheduleProperties model =
            BinaryData
                .fromString(
                    "{\"jobScheduleId\":\"ylnio\",\"schedule\":{\"name\":\"gbzjedmstkv\"},\"runbook\":{\"name\":\"xbcuiiznkt\"},\"runOn\":\"ansnvp\",\"parameters\":{\"stbz\":\"mik\",\"fy\":\"kiwbuqnyoph\"}}")
                .toObject(JobScheduleProperties.class);
        Assertions.assertEquals("ylnio", model.jobScheduleId());
        Assertions.assertEquals("gbzjedmstkv", model.schedule().name());
        Assertions.assertEquals("xbcuiiznkt", model.runbook().name());
        Assertions.assertEquals("ansnvp", model.runOn());
        Assertions.assertEquals("mik", model.parameters().get("stbz"));
    }

    @Test
    public void testSerialize() {
        JobScheduleProperties model =
            new JobScheduleProperties()
                .withJobScheduleId("ylnio")
                .withSchedule(new ScheduleAssociationProperty().withName("gbzjedmstkv"))
                .withRunbook(new RunbookAssociationProperty().withName("xbcuiiznkt"))
                .withRunOn("ansnvp")
                .withParameters(mapOf("stbz", "mik", "fy", "kiwbuqnyoph"));
        model = BinaryData.fromObject(model).toObject(JobScheduleProperties.class);
        Assertions.assertEquals("ylnio", model.jobScheduleId());
        Assertions.assertEquals("gbzjedmstkv", model.schedule().name());
        Assertions.assertEquals("xbcuiiznkt", model.runbook().name());
        Assertions.assertEquals("ansnvp", model.runOn());
        Assertions.assertEquals("mik", model.parameters().get("stbz"));
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
