// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.automation.fluent.models.JobScheduleProperties;
import com.azure.resourcemanager.automation.models.RunbookAssociationProperty;
import com.azure.resourcemanager.automation.models.ScheduleAssociationProperty;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class JobSchedulePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        JobScheduleProperties model = BinaryData.fromString(
            "{\"jobScheduleId\":\"lbfpncurd\",\"schedule\":{\"name\":\"iithtywu\"},\"runbook\":{\"name\":\"bihwqknfdnt\"},\"runOn\":\"chrdgoihxumwcto\",\"parameters\":{\"udfdlwgg\":\"jl\"}}")
            .toObject(JobScheduleProperties.class);
        Assertions.assertEquals("lbfpncurd", model.jobScheduleId());
        Assertions.assertEquals("iithtywu", model.schedule().name());
        Assertions.assertEquals("bihwqknfdnt", model.runbook().name());
        Assertions.assertEquals("chrdgoihxumwcto", model.runOn());
        Assertions.assertEquals("jl", model.parameters().get("udfdlwgg"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        JobScheduleProperties model = new JobScheduleProperties().withJobScheduleId("lbfpncurd")
            .withSchedule(new ScheduleAssociationProperty().withName("iithtywu"))
            .withRunbook(new RunbookAssociationProperty().withName("bihwqknfdnt"))
            .withRunOn("chrdgoihxumwcto")
            .withParameters(mapOf("udfdlwgg", "jl"));
        model = BinaryData.fromObject(model).toObject(JobScheduleProperties.class);
        Assertions.assertEquals("lbfpncurd", model.jobScheduleId());
        Assertions.assertEquals("iithtywu", model.schedule().name());
        Assertions.assertEquals("bihwqknfdnt", model.runbook().name());
        Assertions.assertEquals("chrdgoihxumwcto", model.runOn());
        Assertions.assertEquals("jl", model.parameters().get("udfdlwgg"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
