// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.automation.fluent.models.ScheduleCreateOrUpdateProperties;
import com.azure.resourcemanager.automation.models.AdvancedSchedule;
import com.azure.resourcemanager.automation.models.AdvancedScheduleMonthlyOccurrence;
import com.azure.resourcemanager.automation.models.ScheduleDay;
import com.azure.resourcemanager.automation.models.ScheduleFrequency;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class ScheduleCreateOrUpdatePropertiesTests {
    @Test
    public void testDeserialize() {
        ScheduleCreateOrUpdateProperties model =
            BinaryData
                .fromString(
                    "{\"description\":\"qlkccuzgygqwaho\",\"startTime\":\"2021-08-05T07:49:38Z\",\"expiryTime\":\"2020-12-22T16:53:05Z\",\"frequency\":\"Month\",\"timeZone\":\"iprglvawu\",\"advancedSchedule\":{\"weekDays\":[\"fypiv\",\"sbbjpmcu\"],\"monthDays\":[1332520281,979719381,2068348787],\"monthlyOccurrences\":[{\"occurrence\":2115537525,\"day\":\"Sunday\"},{\"occurrence\":1199627786,\"day\":\"Sunday\"},{\"occurrence\":43138947,\"day\":\"Friday\"},{\"occurrence\":1214392307,\"day\":\"Friday\"}]}}")
                .toObject(ScheduleCreateOrUpdateProperties.class);
        Assertions.assertEquals("qlkccuzgygqwaho", model.description());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-05T07:49:38Z"), model.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2020-12-22T16:53:05Z"), model.expiryTime());
        Assertions.assertEquals(ScheduleFrequency.MONTH, model.frequency());
        Assertions.assertEquals("iprglvawu", model.timeZone());
        Assertions.assertEquals("fypiv", model.advancedSchedule().weekDays().get(0));
        Assertions.assertEquals(1332520281, model.advancedSchedule().monthDays().get(0));
        Assertions.assertEquals(2115537525, model.advancedSchedule().monthlyOccurrences().get(0).occurrence());
        Assertions.assertEquals(ScheduleDay.SUNDAY, model.advancedSchedule().monthlyOccurrences().get(0).day());
    }

    @Test
    public void testSerialize() {
        ScheduleCreateOrUpdateProperties model =
            new ScheduleCreateOrUpdateProperties()
                .withDescription("qlkccuzgygqwaho")
                .withStartTime(OffsetDateTime.parse("2021-08-05T07:49:38Z"))
                .withExpiryTime(OffsetDateTime.parse("2020-12-22T16:53:05Z"))
                .withFrequency(ScheduleFrequency.MONTH)
                .withTimeZone("iprglvawu")
                .withAdvancedSchedule(
                    new AdvancedSchedule()
                        .withWeekDays(Arrays.asList("fypiv", "sbbjpmcu"))
                        .withMonthDays(Arrays.asList(1332520281, 979719381, 2068348787))
                        .withMonthlyOccurrences(
                            Arrays
                                .asList(
                                    new AdvancedScheduleMonthlyOccurrence()
                                        .withOccurrence(2115537525)
                                        .withDay(ScheduleDay.SUNDAY),
                                    new AdvancedScheduleMonthlyOccurrence()
                                        .withOccurrence(1199627786)
                                        .withDay(ScheduleDay.SUNDAY),
                                    new AdvancedScheduleMonthlyOccurrence()
                                        .withOccurrence(43138947)
                                        .withDay(ScheduleDay.FRIDAY),
                                    new AdvancedScheduleMonthlyOccurrence()
                                        .withOccurrence(1214392307)
                                        .withDay(ScheduleDay.FRIDAY))));
        model = BinaryData.fromObject(model).toObject(ScheduleCreateOrUpdateProperties.class);
        Assertions.assertEquals("qlkccuzgygqwaho", model.description());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-05T07:49:38Z"), model.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2020-12-22T16:53:05Z"), model.expiryTime());
        Assertions.assertEquals(ScheduleFrequency.MONTH, model.frequency());
        Assertions.assertEquals("iprglvawu", model.timeZone());
        Assertions.assertEquals("fypiv", model.advancedSchedule().weekDays().get(0));
        Assertions.assertEquals(1332520281, model.advancedSchedule().monthDays().get(0));
        Assertions.assertEquals(2115537525, model.advancedSchedule().monthlyOccurrences().get(0).occurrence());
        Assertions.assertEquals(ScheduleDay.SUNDAY, model.advancedSchedule().monthlyOccurrences().get(0).day());
    }
}
