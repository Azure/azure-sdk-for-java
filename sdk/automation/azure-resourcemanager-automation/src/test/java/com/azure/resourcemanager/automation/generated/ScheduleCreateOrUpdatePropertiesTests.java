// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.automation.fluent.models.ScheduleCreateOrUpdateProperties;
import com.azure.resourcemanager.automation.models.AdvancedSchedule;
import com.azure.resourcemanager.automation.models.AdvancedScheduleMonthlyOccurrence;
import com.azure.resourcemanager.automation.models.ScheduleDay;
import com.azure.resourcemanager.automation.models.ScheduleFrequency;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class ScheduleCreateOrUpdatePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ScheduleCreateOrUpdateProperties model = BinaryData.fromString(
            "{\"description\":\"kqo\",\"startTime\":\"2021-08-08T09:12:47Z\",\"expiryTime\":\"2021-06-12T01:33:22Z\",\"interval\":\"datagtrd\",\"frequency\":\"OneTime\",\"timeZone\":\"fmzzsdymbrny\",\"advancedSchedule\":{\"weekDays\":[\"prafwgckhoc\"],\"monthDays\":[1919982879],\"monthlyOccurrences\":[{\"occurrence\":848051352,\"day\":\"Thursday\"},{\"occurrence\":1487295222,\"day\":\"Monday\"},{\"occurrence\":1181286444,\"day\":\"Friday\"}]}}")
            .toObject(ScheduleCreateOrUpdateProperties.class);
        Assertions.assertEquals("kqo", model.description());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-08T09:12:47Z"), model.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-12T01:33:22Z"), model.expiryTime());
        Assertions.assertEquals(ScheduleFrequency.ONE_TIME, model.frequency());
        Assertions.assertEquals("fmzzsdymbrny", model.timeZone());
        Assertions.assertEquals("prafwgckhoc", model.advancedSchedule().weekDays().get(0));
        Assertions.assertEquals(1919982879, model.advancedSchedule().monthDays().get(0));
        Assertions.assertEquals(848051352, model.advancedSchedule().monthlyOccurrences().get(0).occurrence());
        Assertions.assertEquals(ScheduleDay.THURSDAY, model.advancedSchedule().monthlyOccurrences().get(0).day());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ScheduleCreateOrUpdateProperties model = new ScheduleCreateOrUpdateProperties().withDescription("kqo")
            .withStartTime(OffsetDateTime.parse("2021-08-08T09:12:47Z"))
            .withExpiryTime(OffsetDateTime.parse("2021-06-12T01:33:22Z"))
            .withInterval("datagtrd")
            .withFrequency(ScheduleFrequency.ONE_TIME)
            .withTimeZone("fmzzsdymbrny")
            .withAdvancedSchedule(new AdvancedSchedule().withWeekDays(Arrays.asList("prafwgckhoc"))
                .withMonthDays(Arrays.asList(1919982879))
                .withMonthlyOccurrences(Arrays.asList(
                    new AdvancedScheduleMonthlyOccurrence().withOccurrence(848051352).withDay(ScheduleDay.THURSDAY),
                    new AdvancedScheduleMonthlyOccurrence().withOccurrence(1487295222).withDay(ScheduleDay.MONDAY),
                    new AdvancedScheduleMonthlyOccurrence().withOccurrence(1181286444).withDay(ScheduleDay.FRIDAY))));
        model = BinaryData.fromObject(model).toObject(ScheduleCreateOrUpdateProperties.class);
        Assertions.assertEquals("kqo", model.description());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-08T09:12:47Z"), model.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-12T01:33:22Z"), model.expiryTime());
        Assertions.assertEquals(ScheduleFrequency.ONE_TIME, model.frequency());
        Assertions.assertEquals("fmzzsdymbrny", model.timeZone());
        Assertions.assertEquals("prafwgckhoc", model.advancedSchedule().weekDays().get(0));
        Assertions.assertEquals(1919982879, model.advancedSchedule().monthDays().get(0));
        Assertions.assertEquals(848051352, model.advancedSchedule().monthlyOccurrences().get(0).occurrence());
        Assertions.assertEquals(ScheduleDay.THURSDAY, model.advancedSchedule().monthlyOccurrences().get(0).day());
    }
}
