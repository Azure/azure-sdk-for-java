// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.util.Context;
import com.azure.resourcemanager.automation.AutomationManager;
import com.azure.resourcemanager.automation.models.OperatingSystemType;
import com.azure.resourcemanager.automation.models.ScheduleFrequency;
import com.azure.resourcemanager.automation.models.SoftwareUpdateConfiguration;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.Duration;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class SoftwareUpdateConfigurationsGetByNameWithResponseMockTests {
    @Test
    public void testGetByNameWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"updateConfiguration\":{\"operatingSystem\":\"Windows\",\"duration\":\"PT208H59M30S\",\"azureVirtualMachines\":[],\"nonAzureComputerNames\":[]},\"scheduleInfo\":{\"startTime\":\"2021-02-21T09:44:27Z\",\"startTimeOffsetMinutes\":95.98056526755447,\"expiryTime\":\"2021-03-20T10:17:27Z\",\"expiryTimeOffsetMinutes\":13.31831105301462,\"isEnabled\":true,\"nextRun\":\"2021-01-21T04:37:48Z\",\"nextRunOffsetMinutes\":84.35982670229276,\"interval\":2813447998195312140,\"frequency\":\"OneTime\",\"timeZone\":\"x\",\"creationTime\":\"2021-03-29T20:05:46Z\",\"lastModifiedTime\":\"2021-10-25T00:54:08Z\",\"description\":\"ondjrkclam\"},\"provisioningState\":\"lvlmfej\",\"creationTime\":\"2021-09-06T12:04:20Z\",\"createdBy\":\"kgltyg\",\"lastModifiedTime\":\"2021-09-15T19:18:45Z\",\"lastModifiedBy\":\"gqkayejsxtl\",\"tasks\":{}},\"id\":\"fgzii\",\"name\":\"ci\",\"type\":\"jceatlijjjrtva\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        AutomationManager manager =
            AutomationManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        SoftwareUpdateConfiguration response =
            manager
                .softwareUpdateConfigurations()
                .getByNameWithResponse("ngucaifpaurww", "ilfjqqacdmk", "wxdcvjwcyz", "akeciqchx", Context.NONE)
                .getValue();

        Assertions.assertEquals(OperatingSystemType.WINDOWS, response.updateConfiguration().operatingSystem());
        Assertions.assertEquals(Duration.parse("PT208H59M30S"), response.updateConfiguration().duration());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-21T09:44:27Z"), response.scheduleInfo().startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-20T10:17:27Z"), response.scheduleInfo().expiryTime());
        Assertions.assertEquals(13.31831105301462D, response.scheduleInfo().expiryTimeOffsetMinutes());
        Assertions.assertEquals(true, response.scheduleInfo().isEnabled());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-21T04:37:48Z"), response.scheduleInfo().nextRun());
        Assertions.assertEquals(84.35982670229276D, response.scheduleInfo().nextRunOffsetMinutes());
        Assertions.assertEquals(2813447998195312140L, response.scheduleInfo().interval());
        Assertions.assertEquals(ScheduleFrequency.ONE_TIME, response.scheduleInfo().frequency());
        Assertions.assertEquals("x", response.scheduleInfo().timeZone());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-29T20:05:46Z"), response.scheduleInfo().creationTime());
        Assertions
            .assertEquals(OffsetDateTime.parse("2021-10-25T00:54:08Z"), response.scheduleInfo().lastModifiedTime());
        Assertions.assertEquals("ondjrkclam", response.scheduleInfo().description());
    }
}
