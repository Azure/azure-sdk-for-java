// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.automation.fluent.models.RunbookInner;
import com.azure.resourcemanager.automation.models.RunbookListResult;
import com.azure.resourcemanager.automation.models.RunbookProvisioningState;
import com.azure.resourcemanager.automation.models.RunbookState;
import com.azure.resourcemanager.automation.models.RunbookTypeEnum;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class RunbookListResultTests {
    @Test
    public void testDeserialize() {
        RunbookListResult model =
            BinaryData
                .fromString(
                    "{\"value\":[{\"properties\":{\"runbookType\":\"Python2\",\"state\":\"Published\",\"logVerbose\":false,\"logProgress\":false,\"logActivityTrace\":489491649,\"jobCount\":22052299,\"parameters\":{},\"outputTypes\":[],\"provisioningState\":\"Succeeded\",\"lastModifiedBy\":\"wjksghudgzhxo\",\"creationTime\":\"2021-03-31T07:54:17Z\",\"lastModifiedTime\":\"2021-09-15T14:10:18Z\",\"description\":\"oujkxibdafh\"},\"etag\":\"mdyomkxfbvfbh\",\"location\":\"y\",\"tags\":{\"awzovgkk\":\"pwpgddei\",\"sqowxwc\":\"muikjcjcaztbws\",\"czcswka\":\"mlikytw\",\"yfdvlvhbwrnfxtgd\":\"ve\"},\"id\":\"pqthehnmnaoya\",\"name\":\"kcoeqswank\",\"type\":\"t\"}],\"nextLink\":\"mhdroznnhdrlktg\"}")
                .toObject(RunbookListResult.class);
        Assertions.assertEquals("y", model.value().get(0).location());
        Assertions.assertEquals("pwpgddei", model.value().get(0).tags().get("awzovgkk"));
        Assertions.assertEquals("mdyomkxfbvfbh", model.value().get(0).etag());
        Assertions.assertEquals(RunbookTypeEnum.PYTHON2, model.value().get(0).runbookType());
        Assertions.assertEquals(RunbookState.PUBLISHED, model.value().get(0).state());
        Assertions.assertEquals(false, model.value().get(0).logVerbose());
        Assertions.assertEquals(false, model.value().get(0).logProgress());
        Assertions.assertEquals(489491649, model.value().get(0).logActivityTrace());
        Assertions.assertEquals(22052299, model.value().get(0).jobCount());
        Assertions.assertEquals(RunbookProvisioningState.SUCCEEDED, model.value().get(0).provisioningState());
        Assertions.assertEquals("wjksghudgzhxo", model.value().get(0).lastModifiedBy());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-31T07:54:17Z"), model.value().get(0).creationTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-15T14:10:18Z"), model.value().get(0).lastModifiedTime());
        Assertions.assertEquals("oujkxibdafh", model.value().get(0).description());
        Assertions.assertEquals("mhdroznnhdrlktg", model.nextLink());
    }

    @Test
    public void testSerialize() {
        RunbookListResult model =
            new RunbookListResult()
                .withValue(
                    Arrays
                        .asList(
                            new RunbookInner()
                                .withLocation("y")
                                .withTags(
                                    mapOf(
                                        "awzovgkk",
                                        "pwpgddei",
                                        "sqowxwc",
                                        "muikjcjcaztbws",
                                        "czcswka",
                                        "mlikytw",
                                        "yfdvlvhbwrnfxtgd",
                                        "ve"))
                                .withEtag("mdyomkxfbvfbh")
                                .withRunbookType(RunbookTypeEnum.PYTHON2)
                                .withState(RunbookState.PUBLISHED)
                                .withLogVerbose(false)
                                .withLogProgress(false)
                                .withLogActivityTrace(489491649)
                                .withJobCount(22052299)
                                .withParameters(mapOf())
                                .withOutputTypes(Arrays.asList())
                                .withProvisioningState(RunbookProvisioningState.SUCCEEDED)
                                .withLastModifiedBy("wjksghudgzhxo")
                                .withCreationTime(OffsetDateTime.parse("2021-03-31T07:54:17Z"))
                                .withLastModifiedTime(OffsetDateTime.parse("2021-09-15T14:10:18Z"))
                                .withDescription("oujkxibdafh")))
                .withNextLink("mhdroznnhdrlktg");
        model = BinaryData.fromObject(model).toObject(RunbookListResult.class);
        Assertions.assertEquals("y", model.value().get(0).location());
        Assertions.assertEquals("pwpgddei", model.value().get(0).tags().get("awzovgkk"));
        Assertions.assertEquals("mdyomkxfbvfbh", model.value().get(0).etag());
        Assertions.assertEquals(RunbookTypeEnum.PYTHON2, model.value().get(0).runbookType());
        Assertions.assertEquals(RunbookState.PUBLISHED, model.value().get(0).state());
        Assertions.assertEquals(false, model.value().get(0).logVerbose());
        Assertions.assertEquals(false, model.value().get(0).logProgress());
        Assertions.assertEquals(489491649, model.value().get(0).logActivityTrace());
        Assertions.assertEquals(22052299, model.value().get(0).jobCount());
        Assertions.assertEquals(RunbookProvisioningState.SUCCEEDED, model.value().get(0).provisioningState());
        Assertions.assertEquals("wjksghudgzhxo", model.value().get(0).lastModifiedBy());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-31T07:54:17Z"), model.value().get(0).creationTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-15T14:10:18Z"), model.value().get(0).lastModifiedTime());
        Assertions.assertEquals("oujkxibdafh", model.value().get(0).description());
        Assertions.assertEquals("mhdroznnhdrlktg", model.nextLink());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
