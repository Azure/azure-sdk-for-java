// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.automation.fluent.models.RunbookDraftInner;
import com.azure.resourcemanager.automation.fluent.models.RunbookInner;
import com.azure.resourcemanager.automation.models.ContentHash;
import com.azure.resourcemanager.automation.models.ContentLink;
import com.azure.resourcemanager.automation.models.RunbookListResult;
import com.azure.resourcemanager.automation.models.RunbookParameter;
import com.azure.resourcemanager.automation.models.RunbookProvisioningState;
import com.azure.resourcemanager.automation.models.RunbookState;
import com.azure.resourcemanager.automation.models.RunbookTypeEnum;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class RunbookListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        RunbookListResult model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"runbookType\":\"Python2\",\"publishContentLink\":{\"uri\":\"nwf\",\"contentHash\":{\"algorithm\":\"nniyopetxi\",\"value\":\"cnrly\"},\"version\":\"ucae\"},\"state\":\"Edit\",\"logVerbose\":false,\"logProgress\":false,\"logActivityTrace\":623951878,\"jobCount\":1505333739,\"parameters\":{\"rzcdbanf\":{\"type\":\"dtcjbctv\",\"isMandatory\":true,\"position\":1591700839,\"defaultValue\":\"mtuowogtgitsqhzv\"},\"bnaomhjrmkuhmax\":{\"type\":\"ds\",\"isMandatory\":true,\"position\":877846395,\"defaultValue\":\"tkdbmwnrdjyib\"},\"nokzwjjz\":{\"type\":\"alfihcjmobcancd\",\"isMandatory\":false,\"position\":546808892,\"defaultValue\":\"gaxfgva\"},\"msl\":{\"type\":\"tixldzyyfytpqs\",\"isMandatory\":true,\"position\":104830049,\"defaultValue\":\"ujivyqlkjuvsm\"}},\"outputTypes\":[\"ovwzdbpqvybefg\",\"mx\",\"okcvtlubses\"],\"draft\":{\"inEdit\":true,\"draftContentLink\":{\"uri\":\"t\",\"contentHash\":{\"algorithm\":\"unlpirykycndz\",\"value\":\"qi\"},\"version\":\"reuykbbmnwagl\"},\"creationTime\":\"2021-11-01T01:41:57Z\",\"lastModifiedTime\":\"2021-11-29T21:04:26Z\",\"parameters\":{\"nqlnfwmyymvqd\":{}},\"outputTypes\":[\"hfckdvezcrcssbz\",\"ddubbnqfblhkal\",\"hpavawu\",\"iqjtiogqgdmin\"]},\"provisioningState\":\"Succeeded\",\"lastModifiedBy\":\"eajohiyg\",\"creationTime\":\"2021-01-16T13:12:59Z\",\"lastModifiedTime\":\"2021-02-10T23:40:39Z\",\"description\":\"hpczykmktpvw\"},\"etag\":\"csehchkhufm\",\"location\":\"qumq\",\"tags\":{\"sfnhsenwphp\":\"ydzulodsaeuzan\"},\"id\":\"fngq\",\"name\":\"clid\",\"type\":\"tujwjju\"}],\"nextLink\":\"beqrkuorh\"}")
            .toObject(RunbookListResult.class);
        Assertions.assertEquals("qumq", model.value().get(0).location());
        Assertions.assertEquals("ydzulodsaeuzan", model.value().get(0).tags().get("sfnhsenwphp"));
        Assertions.assertEquals("csehchkhufm", model.value().get(0).etag());
        Assertions.assertEquals(RunbookTypeEnum.PYTHON2, model.value().get(0).runbookType());
        Assertions.assertEquals("nwf", model.value().get(0).publishContentLink().uri());
        Assertions.assertEquals("nniyopetxi", model.value().get(0).publishContentLink().contentHash().algorithm());
        Assertions.assertEquals("cnrly", model.value().get(0).publishContentLink().contentHash().value());
        Assertions.assertEquals("ucae", model.value().get(0).publishContentLink().version());
        Assertions.assertEquals(RunbookState.EDIT, model.value().get(0).state());
        Assertions.assertEquals(false, model.value().get(0).logVerbose());
        Assertions.assertEquals(false, model.value().get(0).logProgress());
        Assertions.assertEquals(623951878, model.value().get(0).logActivityTrace());
        Assertions.assertEquals(1505333739, model.value().get(0).jobCount());
        Assertions.assertEquals("dtcjbctv", model.value().get(0).parameters().get("rzcdbanf").type());
        Assertions.assertEquals(true, model.value().get(0).parameters().get("rzcdbanf").isMandatory());
        Assertions.assertEquals(1591700839, model.value().get(0).parameters().get("rzcdbanf").position());
        Assertions.assertEquals("mtuowogtgitsqhzv", model.value().get(0).parameters().get("rzcdbanf").defaultValue());
        Assertions.assertEquals("ovwzdbpqvybefg", model.value().get(0).outputTypes().get(0));
        Assertions.assertEquals(true, model.value().get(0).draft().inEdit());
        Assertions.assertEquals("t", model.value().get(0).draft().draftContentLink().uri());
        Assertions.assertEquals("unlpirykycndz",
            model.value().get(0).draft().draftContentLink().contentHash().algorithm());
        Assertions.assertEquals("qi", model.value().get(0).draft().draftContentLink().contentHash().value());
        Assertions.assertEquals("reuykbbmnwagl", model.value().get(0).draft().draftContentLink().version());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-01T01:41:57Z"),
            model.value().get(0).draft().creationTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-29T21:04:26Z"),
            model.value().get(0).draft().lastModifiedTime());
        Assertions.assertEquals("hfckdvezcrcssbz", model.value().get(0).draft().outputTypes().get(0));
        Assertions.assertEquals(RunbookProvisioningState.SUCCEEDED, model.value().get(0).provisioningState());
        Assertions.assertEquals("eajohiyg", model.value().get(0).lastModifiedBy());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-16T13:12:59Z"), model.value().get(0).creationTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-10T23:40:39Z"), model.value().get(0).lastModifiedTime());
        Assertions.assertEquals("hpczykmktpvw", model.value().get(0).description());
        Assertions.assertEquals("beqrkuorh", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        RunbookListResult model
            = new RunbookListResult().withValue(Arrays.asList(new RunbookInner().withLocation("qumq")
                .withTags(mapOf("sfnhsenwphp", "ydzulodsaeuzan"))
                .withEtag("csehchkhufm")
                .withRunbookType(RunbookTypeEnum.PYTHON2)
                .withPublishContentLink(new ContentLink().withUri("nwf")
                    .withContentHash(new ContentHash().withAlgorithm("nniyopetxi").withValue("cnrly"))
                    .withVersion("ucae"))
                .withState(RunbookState.EDIT)
                .withLogVerbose(false)
                .withLogProgress(false)
                .withLogActivityTrace(623951878)
                .withJobCount(1505333739)
                .withParameters(mapOf("rzcdbanf",
                    new RunbookParameter().withType("dtcjbctv")
                        .withIsMandatory(true)
                        .withPosition(1591700839)
                        .withDefaultValue("mtuowogtgitsqhzv"),
                    "bnaomhjrmkuhmax",
                    new RunbookParameter().withType("ds")
                        .withIsMandatory(true)
                        .withPosition(877846395)
                        .withDefaultValue("tkdbmwnrdjyib"),
                    "nokzwjjz",
                    new RunbookParameter().withType("alfihcjmobcancd")
                        .withIsMandatory(false)
                        .withPosition(546808892)
                        .withDefaultValue("gaxfgva"),
                    "msl",
                    new RunbookParameter().withType("tixldzyyfytpqs")
                        .withIsMandatory(true)
                        .withPosition(104830049)
                        .withDefaultValue("ujivyqlkjuvsm")))
                .withOutputTypes(Arrays.asList("ovwzdbpqvybefg", "mx", "okcvtlubses"))
                .withDraft(new RunbookDraftInner().withInEdit(true)
                    .withDraftContentLink(new ContentLink().withUri("t")
                        .withContentHash(new ContentHash().withAlgorithm("unlpirykycndz").withValue("qi"))
                        .withVersion("reuykbbmnwagl"))
                    .withCreationTime(OffsetDateTime.parse("2021-11-01T01:41:57Z"))
                    .withLastModifiedTime(OffsetDateTime.parse("2021-11-29T21:04:26Z"))
                    .withParameters(mapOf("nqlnfwmyymvqd", new RunbookParameter()))
                    .withOutputTypes(Arrays.asList("hfckdvezcrcssbz", "ddubbnqfblhkal", "hpavawu", "iqjtiogqgdmin")))
                .withProvisioningState(RunbookProvisioningState.SUCCEEDED)
                .withLastModifiedBy("eajohiyg")
                .withCreationTime(OffsetDateTime.parse("2021-01-16T13:12:59Z"))
                .withLastModifiedTime(OffsetDateTime.parse("2021-02-10T23:40:39Z"))
                .withDescription("hpczykmktpvw"))).withNextLink("beqrkuorh");
        model = BinaryData.fromObject(model).toObject(RunbookListResult.class);
        Assertions.assertEquals("qumq", model.value().get(0).location());
        Assertions.assertEquals("ydzulodsaeuzan", model.value().get(0).tags().get("sfnhsenwphp"));
        Assertions.assertEquals("csehchkhufm", model.value().get(0).etag());
        Assertions.assertEquals(RunbookTypeEnum.PYTHON2, model.value().get(0).runbookType());
        Assertions.assertEquals("nwf", model.value().get(0).publishContentLink().uri());
        Assertions.assertEquals("nniyopetxi", model.value().get(0).publishContentLink().contentHash().algorithm());
        Assertions.assertEquals("cnrly", model.value().get(0).publishContentLink().contentHash().value());
        Assertions.assertEquals("ucae", model.value().get(0).publishContentLink().version());
        Assertions.assertEquals(RunbookState.EDIT, model.value().get(0).state());
        Assertions.assertEquals(false, model.value().get(0).logVerbose());
        Assertions.assertEquals(false, model.value().get(0).logProgress());
        Assertions.assertEquals(623951878, model.value().get(0).logActivityTrace());
        Assertions.assertEquals(1505333739, model.value().get(0).jobCount());
        Assertions.assertEquals("dtcjbctv", model.value().get(0).parameters().get("rzcdbanf").type());
        Assertions.assertEquals(true, model.value().get(0).parameters().get("rzcdbanf").isMandatory());
        Assertions.assertEquals(1591700839, model.value().get(0).parameters().get("rzcdbanf").position());
        Assertions.assertEquals("mtuowogtgitsqhzv", model.value().get(0).parameters().get("rzcdbanf").defaultValue());
        Assertions.assertEquals("ovwzdbpqvybefg", model.value().get(0).outputTypes().get(0));
        Assertions.assertEquals(true, model.value().get(0).draft().inEdit());
        Assertions.assertEquals("t", model.value().get(0).draft().draftContentLink().uri());
        Assertions.assertEquals("unlpirykycndz",
            model.value().get(0).draft().draftContentLink().contentHash().algorithm());
        Assertions.assertEquals("qi", model.value().get(0).draft().draftContentLink().contentHash().value());
        Assertions.assertEquals("reuykbbmnwagl", model.value().get(0).draft().draftContentLink().version());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-01T01:41:57Z"),
            model.value().get(0).draft().creationTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-29T21:04:26Z"),
            model.value().get(0).draft().lastModifiedTime());
        Assertions.assertEquals("hfckdvezcrcssbz", model.value().get(0).draft().outputTypes().get(0));
        Assertions.assertEquals(RunbookProvisioningState.SUCCEEDED, model.value().get(0).provisioningState());
        Assertions.assertEquals("eajohiyg", model.value().get(0).lastModifiedBy());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-16T13:12:59Z"), model.value().get(0).creationTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-10T23:40:39Z"), model.value().get(0).lastModifiedTime());
        Assertions.assertEquals("hpczykmktpvw", model.value().get(0).description());
        Assertions.assertEquals("beqrkuorh", model.nextLink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
