// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.automation.fluent.models.RunbookDraftInner;
import com.azure.resourcemanager.automation.models.ContentHash;
import com.azure.resourcemanager.automation.models.ContentLink;
import com.azure.resourcemanager.automation.models.RunbookParameter;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class RunbookDraftInnerTests {
    @Test
    public void testDeserialize() {
        RunbookDraftInner model =
            BinaryData
                .fromString(
                    "{\"inEdit\":true,\"draftContentLink\":{\"uri\":\"vnafvvkyfedevjbo\",\"contentHash\":{\"algorithm\":\"cqxypokkhminq\",\"value\":\"ymc\"},\"version\":\"gn\"},\"creationTime\":\"2021-04-29T07:37:31Z\",\"lastModifiedTime\":\"2021-05-11T16:57:57Z\",\"parameters\":{\"qct\":{\"type\":\"invudbch\",\"isMandatory\":false,\"position\":1305954142,\"defaultValue\":\"ec\"}},\"outputTypes\":[\"dtddmflh\",\"ytxzvtznapxbanno\",\"voxczytpr\",\"nwvroevytlyokrr\"]}")
                .toObject(RunbookDraftInner.class);
        Assertions.assertEquals(true, model.inEdit());
        Assertions.assertEquals("vnafvvkyfedevjbo", model.draftContentLink().uri());
        Assertions.assertEquals("cqxypokkhminq", model.draftContentLink().contentHash().algorithm());
        Assertions.assertEquals("ymc", model.draftContentLink().contentHash().value());
        Assertions.assertEquals("gn", model.draftContentLink().version());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-29T07:37:31Z"), model.creationTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-11T16:57:57Z"), model.lastModifiedTime());
        Assertions.assertEquals("invudbch", model.parameters().get("qct").type());
        Assertions.assertEquals(false, model.parameters().get("qct").isMandatory());
        Assertions.assertEquals(1305954142, model.parameters().get("qct").position());
        Assertions.assertEquals("ec", model.parameters().get("qct").defaultValue());
        Assertions.assertEquals("dtddmflh", model.outputTypes().get(0));
    }

    @Test
    public void testSerialize() {
        RunbookDraftInner model =
            new RunbookDraftInner()
                .withInEdit(true)
                .withDraftContentLink(
                    new ContentLink()
                        .withUri("vnafvvkyfedevjbo")
                        .withContentHash(new ContentHash().withAlgorithm("cqxypokkhminq").withValue("ymc"))
                        .withVersion("gn"))
                .withCreationTime(OffsetDateTime.parse("2021-04-29T07:37:31Z"))
                .withLastModifiedTime(OffsetDateTime.parse("2021-05-11T16:57:57Z"))
                .withParameters(
                    mapOf(
                        "qct",
                        new RunbookParameter()
                            .withType("invudbch")
                            .withIsMandatory(false)
                            .withPosition(1305954142)
                            .withDefaultValue("ec")))
                .withOutputTypes(Arrays.asList("dtddmflh", "ytxzvtznapxbanno", "voxczytpr", "nwvroevytlyokrr"));
        model = BinaryData.fromObject(model).toObject(RunbookDraftInner.class);
        Assertions.assertEquals(true, model.inEdit());
        Assertions.assertEquals("vnafvvkyfedevjbo", model.draftContentLink().uri());
        Assertions.assertEquals("cqxypokkhminq", model.draftContentLink().contentHash().algorithm());
        Assertions.assertEquals("ymc", model.draftContentLink().contentHash().value());
        Assertions.assertEquals("gn", model.draftContentLink().version());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-29T07:37:31Z"), model.creationTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-11T16:57:57Z"), model.lastModifiedTime());
        Assertions.assertEquals("invudbch", model.parameters().get("qct").type());
        Assertions.assertEquals(false, model.parameters().get("qct").isMandatory());
        Assertions.assertEquals(1305954142, model.parameters().get("qct").position());
        Assertions.assertEquals("ec", model.parameters().get("qct").defaultValue());
        Assertions.assertEquals("dtddmflh", model.outputTypes().get(0));
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
