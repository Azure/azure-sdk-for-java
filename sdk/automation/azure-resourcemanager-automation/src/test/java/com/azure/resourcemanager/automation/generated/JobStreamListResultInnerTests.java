// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.automation.fluent.models.JobStreamInner;
import com.azure.resourcemanager.automation.fluent.models.JobStreamListResultInner;
import com.azure.resourcemanager.automation.models.JobStreamType;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class JobStreamListResultInnerTests {
    @Test
    public void testDeserialize() {
        JobStreamListResultInner model =
            BinaryData
                .fromString(
                    "{\"value\":[{\"id\":\"wrqpue\",\"properties\":{\"jobStreamId\":\"zywbiex\",\"time\":\"2021-06-21T03:22:31Z\",\"streamType\":\"Any\",\"streamText\":\"axibxujw\",\"summary\":\"qwalmuzyoxaepd\",\"value\":{}}},{\"id\":\"ancuxrhd\",\"properties\":{\"jobStreamId\":\"v\",\"time\":\"2021-09-04T15:02:23Z\",\"streamType\":\"Verbose\",\"streamText\":\"jswztsdbpg\",\"summary\":\"ytxhp\",\"value\":{}}}],\"nextLink\":\"zpfzabglc\"}")
                .toObject(JobStreamListResultInner.class);
        Assertions.assertEquals("wrqpue", model.value().get(0).id());
        Assertions.assertEquals("zywbiex", model.value().get(0).jobStreamId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-21T03:22:31Z"), model.value().get(0).time());
        Assertions.assertEquals(JobStreamType.ANY, model.value().get(0).streamType());
        Assertions.assertEquals("axibxujw", model.value().get(0).streamText());
        Assertions.assertEquals("qwalmuzyoxaepd", model.value().get(0).summary());
        Assertions.assertEquals("zpfzabglc", model.nextLink());
    }

    @Test
    public void testSerialize() {
        JobStreamListResultInner model =
            new JobStreamListResultInner()
                .withValue(
                    Arrays
                        .asList(
                            new JobStreamInner()
                                .withId("wrqpue")
                                .withJobStreamId("zywbiex")
                                .withTime(OffsetDateTime.parse("2021-06-21T03:22:31Z"))
                                .withStreamType(JobStreamType.ANY)
                                .withStreamText("axibxujw")
                                .withSummary("qwalmuzyoxaepd")
                                .withValue(mapOf()),
                            new JobStreamInner()
                                .withId("ancuxrhd")
                                .withJobStreamId("v")
                                .withTime(OffsetDateTime.parse("2021-09-04T15:02:23Z"))
                                .withStreamType(JobStreamType.VERBOSE)
                                .withStreamText("jswztsdbpg")
                                .withSummary("ytxhp")
                                .withValue(mapOf())))
                .withNextLink("zpfzabglc");
        model = BinaryData.fromObject(model).toObject(JobStreamListResultInner.class);
        Assertions.assertEquals("wrqpue", model.value().get(0).id());
        Assertions.assertEquals("zywbiex", model.value().get(0).jobStreamId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-21T03:22:31Z"), model.value().get(0).time());
        Assertions.assertEquals(JobStreamType.ANY, model.value().get(0).streamType());
        Assertions.assertEquals("axibxujw", model.value().get(0).streamText());
        Assertions.assertEquals("qwalmuzyoxaepd", model.value().get(0).summary());
        Assertions.assertEquals("zpfzabglc", model.nextLink());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
