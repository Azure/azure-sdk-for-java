// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.automation.fluent.models.JobStreamInner;
import com.azure.resourcemanager.automation.fluent.models.JobStreamListResultInner;
import com.azure.resourcemanager.automation.models.JobStreamType;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class JobStreamListResultInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        JobStreamListResultInner model = BinaryData.fromString(
            "{\"value\":[{\"id\":\"xujznbmpowu\",\"properties\":{\"jobStreamId\":\"zqlveualupjmkhf\",\"time\":\"2021-05-12T14:09:32Z\",\"streamType\":\"Output\",\"streamText\":\"wsrtjriplrbpbe\",\"summary\":\"ghfg\",\"value\":{\"zvlvqhjkbegib\":\"datagw\"}}},{\"id\":\"mxiebw\",\"properties\":{\"jobStreamId\":\"oayqc\",\"time\":\"2021-09-09T06:40:06Z\",\"streamType\":\"Any\",\"streamText\":\"uzgwyzmhtx\",\"summary\":\"gmtsavjcbpwxqpsr\",\"value\":{\"wmdyvxqtay\":\"datatguvriuhp\",\"ibycno\":\"dataiwwroyqbexrmc\"}}},{\"id\":\"knme\",\"properties\":{\"jobStreamId\":\"gzva\",\"time\":\"2021-09-24T18:39:34Z\",\"streamType\":\"Verbose\",\"streamText\":\"hpvgqz\",\"summary\":\"rvxdjzlmw\",\"value\":{\"fhzovawjvzunluth\":\"datavu\",\"rnxipei\":\"datan\",\"e\":\"datapjzu\",\"kzbbtd\":\"dataxdult\"}}}],\"nextLink\":\"mv\"}")
            .toObject(JobStreamListResultInner.class);
        Assertions.assertEquals("xujznbmpowu", model.value().get(0).id());
        Assertions.assertEquals("zqlveualupjmkhf", model.value().get(0).jobStreamId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-12T14:09:32Z"), model.value().get(0).time());
        Assertions.assertEquals(JobStreamType.OUTPUT, model.value().get(0).streamType());
        Assertions.assertEquals("wsrtjriplrbpbe", model.value().get(0).streamText());
        Assertions.assertEquals("ghfg", model.value().get(0).summary());
        Assertions.assertEquals("mv", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        JobStreamListResultInner model
            = new JobStreamListResultInner()
                .withValue(Arrays
                    .asList(
                        new JobStreamInner().withId("xujznbmpowu")
                            .withJobStreamId("zqlveualupjmkhf")
                            .withTime(OffsetDateTime.parse("2021-05-12T14:09:32Z"))
                            .withStreamType(JobStreamType.OUTPUT)
                            .withStreamText("wsrtjriplrbpbe")
                            .withSummary("ghfg")
                            .withValue(mapOf("zvlvqhjkbegib", "datagw")),
                        new JobStreamInner().withId("mxiebw")
                            .withJobStreamId("oayqc")
                            .withTime(OffsetDateTime.parse("2021-09-09T06:40:06Z"))
                            .withStreamType(JobStreamType.ANY)
                            .withStreamText("uzgwyzmhtx")
                            .withSummary("gmtsavjcbpwxqpsr")
                            .withValue(mapOf("wmdyvxqtay", "datatguvriuhp", "ibycno", "dataiwwroyqbexrmc")),
                        new JobStreamInner()
                            .withId("knme")
                            .withJobStreamId("gzva")
                            .withTime(OffsetDateTime.parse("2021-09-24T18:39:34Z"))
                            .withStreamType(JobStreamType.VERBOSE)
                            .withStreamText("hpvgqz")
                            .withSummary("rvxdjzlmw")
                            .withValue(mapOf("fhzovawjvzunluth", "datavu", "rnxipei", "datan", "e", "datapjzu",
                                "kzbbtd", "dataxdult"))))
                .withNextLink("mv");
        model = BinaryData.fromObject(model).toObject(JobStreamListResultInner.class);
        Assertions.assertEquals("xujznbmpowu", model.value().get(0).id());
        Assertions.assertEquals("zqlveualupjmkhf", model.value().get(0).jobStreamId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-12T14:09:32Z"), model.value().get(0).time());
        Assertions.assertEquals(JobStreamType.OUTPUT, model.value().get(0).streamType());
        Assertions.assertEquals("wsrtjriplrbpbe", model.value().get(0).streamText());
        Assertions.assertEquals("ghfg", model.value().get(0).summary());
        Assertions.assertEquals("mv", model.nextLink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
