// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.automation.fluent.models.JobStreamProperties;
import com.azure.resourcemanager.automation.models.JobStreamType;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class JobStreamPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        JobStreamProperties model = BinaryData.fromString(
            "{\"jobStreamId\":\"slyjpkiid\",\"time\":\"2021-08-31T19:18:26Z\",\"streamType\":\"Warning\",\"streamText\":\"eli\",\"summary\":\"nr\",\"value\":{\"hb\":\"datao\",\"dtpnapnyiropuhp\":\"dataxknalaulppg\",\"gqgitxmedjvcsl\":\"datagvpgy\"}}")
            .toObject(JobStreamProperties.class);
        Assertions.assertEquals("slyjpkiid", model.jobStreamId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-31T19:18:26Z"), model.time());
        Assertions.assertEquals(JobStreamType.WARNING, model.streamType());
        Assertions.assertEquals("eli", model.streamText());
        Assertions.assertEquals("nr", model.summary());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        JobStreamProperties model = new JobStreamProperties().withJobStreamId("slyjpkiid")
            .withTime(OffsetDateTime.parse("2021-08-31T19:18:26Z"))
            .withStreamType(JobStreamType.WARNING)
            .withStreamText("eli")
            .withSummary("nr")
            .withValue(mapOf("hb", "datao", "dtpnapnyiropuhp", "dataxknalaulppg", "gqgitxmedjvcsl", "datagvpgy"));
        model = BinaryData.fromObject(model).toObject(JobStreamProperties.class);
        Assertions.assertEquals("slyjpkiid", model.jobStreamId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-31T19:18:26Z"), model.time());
        Assertions.assertEquals(JobStreamType.WARNING, model.streamType());
        Assertions.assertEquals("eli", model.streamText());
        Assertions.assertEquals("nr", model.summary());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
