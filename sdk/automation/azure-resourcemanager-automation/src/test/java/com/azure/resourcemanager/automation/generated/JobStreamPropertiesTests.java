// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.automation.fluent.models.JobStreamProperties;
import com.azure.resourcemanager.automation.models.JobStreamType;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class JobStreamPropertiesTests {
    @Test
    public void testDeserialize() {
        JobStreamProperties model =
            BinaryData
                .fromString(
                    "{\"jobStreamId\":\"i\",\"time\":\"2021-09-12T13:52:28Z\",\"streamType\":\"Any\",\"streamText\":\"kdwzbaiuebbaumny\",\"summary\":\"ped\",\"value\":{}}")
                .toObject(JobStreamProperties.class);
        Assertions.assertEquals("i", model.jobStreamId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-12T13:52:28Z"), model.time());
        Assertions.assertEquals(JobStreamType.ANY, model.streamType());
        Assertions.assertEquals("kdwzbaiuebbaumny", model.streamText());
        Assertions.assertEquals("ped", model.summary());
    }

    @Test
    public void testSerialize() {
        JobStreamProperties model =
            new JobStreamProperties()
                .withJobStreamId("i")
                .withTime(OffsetDateTime.parse("2021-09-12T13:52:28Z"))
                .withStreamType(JobStreamType.ANY)
                .withStreamText("kdwzbaiuebbaumny")
                .withSummary("ped")
                .withValue(mapOf());
        model = BinaryData.fromObject(model).toObject(JobStreamProperties.class);
        Assertions.assertEquals("i", model.jobStreamId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-12T13:52:28Z"), model.time());
        Assertions.assertEquals(JobStreamType.ANY, model.streamType());
        Assertions.assertEquals("kdwzbaiuebbaumny", model.streamText());
        Assertions.assertEquals("ped", model.summary());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
