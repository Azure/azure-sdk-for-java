// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.automation.models.RunbookUpdateParameters;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class RunbookUpdateParametersTests {
    @Test
    public void testDeserialize() {
        RunbookUpdateParameters model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"description\":\"xnm\",\"logVerbose\":true,\"logProgress\":true,\"logActivityTrace\":1739894175},\"name\":\"slurlpshhkvpe\",\"location\":\"qsl\",\"tags\":{\"ndcbrwi\":\"mpqvwwsk\",\"esi\":\"uvqejosovyrrle\"}}")
                .toObject(RunbookUpdateParameters.class);
        Assertions.assertEquals("slurlpshhkvpe", model.name());
        Assertions.assertEquals("qsl", model.location());
        Assertions.assertEquals("mpqvwwsk", model.tags().get("ndcbrwi"));
        Assertions.assertEquals("xnm", model.description());
        Assertions.assertEquals(true, model.logVerbose());
        Assertions.assertEquals(true, model.logProgress());
        Assertions.assertEquals(1739894175, model.logActivityTrace());
    }

    @Test
    public void testSerialize() {
        RunbookUpdateParameters model =
            new RunbookUpdateParameters()
                .withName("slurlpshhkvpe")
                .withLocation("qsl")
                .withTags(mapOf("ndcbrwi", "mpqvwwsk", "esi", "uvqejosovyrrle"))
                .withDescription("xnm")
                .withLogVerbose(true)
                .withLogProgress(true)
                .withLogActivityTrace(1739894175);
        model = BinaryData.fromObject(model).toObject(RunbookUpdateParameters.class);
        Assertions.assertEquals("slurlpshhkvpe", model.name());
        Assertions.assertEquals("qsl", model.location());
        Assertions.assertEquals("mpqvwwsk", model.tags().get("ndcbrwi"));
        Assertions.assertEquals("xnm", model.description());
        Assertions.assertEquals(true, model.logVerbose());
        Assertions.assertEquals(true, model.logProgress());
        Assertions.assertEquals(1739894175, model.logActivityTrace());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
