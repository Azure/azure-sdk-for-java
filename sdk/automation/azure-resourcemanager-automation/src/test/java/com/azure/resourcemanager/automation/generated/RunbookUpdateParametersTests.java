// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.automation.models.RunbookUpdateParameters;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class RunbookUpdateParametersTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        RunbookUpdateParameters model = BinaryData.fromString(
            "{\"properties\":{\"description\":\"yuubeidszlfyto\",\"logVerbose\":true,\"logProgress\":true,\"logActivityTrace\":2081619136},\"name\":\"ltgvdihoynkrx\",\"location\":\"twk\",\"tags\":{\"moenodnaien\":\"yrucpcunnuzdq\"}}")
            .toObject(RunbookUpdateParameters.class);
        Assertions.assertEquals("ltgvdihoynkrx", model.name());
        Assertions.assertEquals("twk", model.location());
        Assertions.assertEquals("yrucpcunnuzdq", model.tags().get("moenodnaien"));
        Assertions.assertEquals("yuubeidszlfyto", model.description());
        Assertions.assertEquals(true, model.logVerbose());
        Assertions.assertEquals(true, model.logProgress());
        Assertions.assertEquals(2081619136, model.logActivityTrace());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        RunbookUpdateParameters model = new RunbookUpdateParameters().withName("ltgvdihoynkrx")
            .withLocation("twk")
            .withTags(mapOf("moenodnaien", "yrucpcunnuzdq"))
            .withDescription("yuubeidszlfyto")
            .withLogVerbose(true)
            .withLogProgress(true)
            .withLogActivityTrace(2081619136);
        model = BinaryData.fromObject(model).toObject(RunbookUpdateParameters.class);
        Assertions.assertEquals("ltgvdihoynkrx", model.name());
        Assertions.assertEquals("twk", model.location());
        Assertions.assertEquals("yrucpcunnuzdq", model.tags().get("moenodnaien"));
        Assertions.assertEquals("yuubeidszlfyto", model.description());
        Assertions.assertEquals(true, model.logVerbose());
        Assertions.assertEquals(true, model.logProgress());
        Assertions.assertEquals(2081619136, model.logActivityTrace());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
