// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.automation.models.ContentHash;
import com.azure.resourcemanager.automation.models.ContentLink;
import com.azure.resourcemanager.automation.models.ModuleUpdateParameters;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ModuleUpdateParametersTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ModuleUpdateParameters model = BinaryData.fromString(
            "{\"properties\":{\"contentLink\":{\"uri\":\"aawzqadfl\",\"contentHash\":{\"algorithm\":\"ur\",\"value\":\"glae\"},\"version\":\"ndtic\"}},\"name\":\"pvz\",\"location\":\"qtmldgxo\",\"tags\":{\"ayzri\":\"rclnpkc\",\"jlmxhomdynhd\":\"khyawfvjlboxqv\"}}")
            .toObject(ModuleUpdateParameters.class);
        Assertions.assertEquals("pvz", model.name());
        Assertions.assertEquals("qtmldgxo", model.location());
        Assertions.assertEquals("rclnpkc", model.tags().get("ayzri"));
        Assertions.assertEquals("aawzqadfl", model.contentLink().uri());
        Assertions.assertEquals("ur", model.contentLink().contentHash().algorithm());
        Assertions.assertEquals("glae", model.contentLink().contentHash().value());
        Assertions.assertEquals("ndtic", model.contentLink().version());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ModuleUpdateParameters model = new ModuleUpdateParameters().withName("pvz")
            .withLocation("qtmldgxo")
            .withTags(mapOf("ayzri", "rclnpkc", "jlmxhomdynhd", "khyawfvjlboxqv"))
            .withContentLink(new ContentLink().withUri("aawzqadfl")
                .withContentHash(new ContentHash().withAlgorithm("ur").withValue("glae"))
                .withVersion("ndtic"));
        model = BinaryData.fromObject(model).toObject(ModuleUpdateParameters.class);
        Assertions.assertEquals("pvz", model.name());
        Assertions.assertEquals("qtmldgxo", model.location());
        Assertions.assertEquals("rclnpkc", model.tags().get("ayzri"));
        Assertions.assertEquals("aawzqadfl", model.contentLink().uri());
        Assertions.assertEquals("ur", model.contentLink().contentHash().algorithm());
        Assertions.assertEquals("glae", model.contentLink().contentHash().value());
        Assertions.assertEquals("ndtic", model.contentLink().version());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
