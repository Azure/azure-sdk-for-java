// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.automation.models.ContentLink;
import com.azure.resourcemanager.automation.models.ModuleUpdateParameters;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class ModuleUpdateParametersTests {
    @Test
    public void testDeserialize() {
        ModuleUpdateParameters model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"contentLink\":{\"uri\":\"sz\",\"version\":\"wtglxx\"}},\"name\":\"jfpgpicrmn\",\"location\":\"rgmqgjs\",\"tags\":{\"qgvriibakcla\":\"qcbfrmbodths\",\"gmwohqfzizvu\":\"jfrnxousxauzlwv\",\"vmribiat\":\"mmkjsvthnwpztek\",\"zcugswvxwlmzqw\":\"gplucfotangcfhny\"}}")
                .toObject(ModuleUpdateParameters.class);
        Assertions.assertEquals("jfpgpicrmn", model.name());
        Assertions.assertEquals("rgmqgjs", model.location());
        Assertions.assertEquals("qcbfrmbodths", model.tags().get("qgvriibakcla"));
        Assertions.assertEquals("sz", model.contentLink().uri());
        Assertions.assertEquals("wtglxx", model.contentLink().version());
    }

    @Test
    public void testSerialize() {
        ModuleUpdateParameters model =
            new ModuleUpdateParameters()
                .withName("jfpgpicrmn")
                .withLocation("rgmqgjs")
                .withTags(
                    mapOf(
                        "qgvriibakcla",
                        "qcbfrmbodths",
                        "gmwohqfzizvu",
                        "jfrnxousxauzlwv",
                        "vmribiat",
                        "mmkjsvthnwpztek",
                        "zcugswvxwlmzqw",
                        "gplucfotangcfhny"))
                .withContentLink(new ContentLink().withUri("sz").withVersion("wtglxx"));
        model = BinaryData.fromObject(model).toObject(ModuleUpdateParameters.class);
        Assertions.assertEquals("jfpgpicrmn", model.name());
        Assertions.assertEquals("rgmqgjs", model.location());
        Assertions.assertEquals("qcbfrmbodths", model.tags().get("qgvriibakcla"));
        Assertions.assertEquals("sz", model.contentLink().uri());
        Assertions.assertEquals("wtglxx", model.contentLink().version());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
