// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.automation.AutomationManager;
import com.azure.resourcemanager.automation.fluent.models.RunbookDraftInner;
import com.azure.resourcemanager.automation.models.ContentLink;
import com.azure.resourcemanager.automation.models.Runbook;
import com.azure.resourcemanager.automation.models.RunbookProvisioningState;
import com.azure.resourcemanager.automation.models.RunbookState;
import com.azure.resourcemanager.automation.models.RunbookTypeEnum;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class RunbooksCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"runbookType\":\"GraphPowerShellWorkflow\",\"publishContentLink\":{\"uri\":\"sqlv\",\"version\":\"pwgoljt\"},\"state\":\"New\",\"logVerbose\":true,\"logProgress\":true,\"logActivityTrace\":1240976233,\"jobCount\":1476272716,\"parameters\":{},\"outputTypes\":[\"qa\",\"j\",\"vaz\",\"jfucsaodjnosdkv\"],\"draft\":{\"inEdit\":true,\"creationTime\":\"2021-11-27T16:31:44Z\",\"lastModifiedTime\":\"2021-10-29T21:25:22Z\",\"parameters\":{},\"outputTypes\":[]},\"provisioningState\":\"Succeeded\",\"lastModifiedBy\":\"uc\",\"creationTime\":\"2021-11-10T08:16:24Z\",\"lastModifiedTime\":\"2021-07-21T19:08:28Z\",\"description\":\"jktzboimyfpq\"},\"etag\":\"wkppnwyytfvp\",\"location\":\"tfjikffffgkuh\",\"tags\":{\"uldbkke\":\"h\",\"xjqifhujjsbc\":\"jkjigawgaz\",\"lirh\":\"lzaahzbhuroolk\"},\"id\":\"mojusuz\",\"name\":\"fjzc\",\"type\":\"aaxoialahfxwcc\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        AutomationManager manager =
            AutomationManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        Runbook response =
            manager
                .runbooks()
                .define("qontwhymxymulw")
                .withExistingAutomationAccount("jo", "sfmnaybdjnxumen")
                .withRunbookType(RunbookTypeEnum.PYTHON3)
                .withRegion("na")
                .withTags(mapOf("ewnazeajbkajlcyi", "ultassae", "vxodkrvfs", "ydd"))
                .withName("wdlvwtiwsmosaon")
                .withLogVerbose(false)
                .withLogProgress(false)
                .withDraft(
                    new RunbookDraftInner()
                        .withInEdit(false)
                        .withCreationTime(OffsetDateTime.parse("2021-07-04T22:25:30Z"))
                        .withLastModifiedTime(OffsetDateTime.parse("2020-12-21T14:25:30Z"))
                        .withParameters(mapOf())
                        .withOutputTypes(Arrays.asList()))
                .withPublishContentLink(new ContentLink().withUri("squbfajcywh").withVersion("mchqoht"))
                .withDescription("cpupukiy")
                .withLogActivityTrace(1259352947)
                .create();

        Assertions.assertEquals("tfjikffffgkuh", response.location());
        Assertions.assertEquals("h", response.tags().get("uldbkke"));
        Assertions.assertEquals("wkppnwyytfvp", response.etag());
        Assertions.assertEquals(RunbookTypeEnum.GRAPH_POWER_SHELL_WORKFLOW, response.runbookType());
        Assertions.assertEquals("sqlv", response.publishContentLink().uri());
        Assertions.assertEquals("pwgoljt", response.publishContentLink().version());
        Assertions.assertEquals(RunbookState.NEW, response.state());
        Assertions.assertEquals(true, response.logVerbose());
        Assertions.assertEquals(true, response.logProgress());
        Assertions.assertEquals(1240976233, response.logActivityTrace());
        Assertions.assertEquals(1476272716, response.jobCount());
        Assertions.assertEquals("qa", response.outputTypes().get(0));
        Assertions.assertEquals(true, response.draft().inEdit());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-27T16:31:44Z"), response.draft().creationTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-29T21:25:22Z"), response.draft().lastModifiedTime());
        Assertions.assertEquals(RunbookProvisioningState.SUCCEEDED, response.provisioningState());
        Assertions.assertEquals("uc", response.lastModifiedBy());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-10T08:16:24Z"), response.creationTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-21T19:08:28Z"), response.lastModifiedTime());
        Assertions.assertEquals("jktzboimyfpq", response.description());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
