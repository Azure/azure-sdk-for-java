// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.automation.AutomationManager;
import com.azure.resourcemanager.automation.fluent.models.RunbookDraftInner;
import com.azure.resourcemanager.automation.models.ContentHash;
import com.azure.resourcemanager.automation.models.ContentLink;
import com.azure.resourcemanager.automation.models.Runbook;
import com.azure.resourcemanager.automation.models.RunbookParameter;
import com.azure.resourcemanager.automation.models.RunbookProvisioningState;
import com.azure.resourcemanager.automation.models.RunbookState;
import com.azure.resourcemanager.automation.models.RunbookTypeEnum;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class RunbooksCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"runbookType\":\"GraphPowerShell\",\"publishContentLink\":{\"uri\":\"xebuhsxrznmg\",\"contentHash\":{\"algorithm\":\"al\",\"value\":\"yckhefrbhseue\"},\"version\":\"gpxebjludcayt\"},\"state\":\"Published\",\"logVerbose\":false,\"logProgress\":true,\"logActivityTrace\":1011189978,\"jobCount\":1953701980,\"parameters\":{\"ctwjwdsdlzm\":{\"type\":\"nsewouxl\",\"isMandatory\":false,\"position\":1827606579,\"defaultValue\":\"ljurkeposehqqylm\"},\"qawbmpspfe\":{\"type\":\"erxxxoteehkhowgo\",\"isMandatory\":true,\"position\":79604503,\"defaultValue\":\"wpcbapnpxr\"}},\"outputTypes\":[\"locvvujexayglx\",\"kgjn\",\"zpaslavxjfiuo\",\"pieidzlvssqy\"],\"draft\":{\"inEdit\":false,\"draftContentLink\":{\"uri\":\"kyhydvikmf\",\"contentHash\":{\"algorithm\":\"pmillxgjsci\",\"value\":\"wgsoriobijeiydy\"},\"version\":\"ynhbokayrg\"},\"creationTime\":\"2021-04-03T22:30:10Z\",\"lastModifiedTime\":\"2021-09-12T11:18:01Z\",\"parameters\":{\"zfffhtjnwo\":{\"type\":\"weoftnorw\",\"isMandatory\":false,\"position\":1443664700,\"defaultValue\":\"ctqkmvjanx\"},\"omxeezwyhjmb\":{\"type\":\"tfjxtvlx\",\"isMandatory\":false,\"position\":1783720835,\"defaultValue\":\"rr\"}},\"outputTypes\":[\"egmxdbsohc\"]},\"provisioningState\":\"Succeeded\",\"lastModifiedBy\":\"vd\",\"creationTime\":\"2021-03-23T06:19:04Z\",\"lastModifiedTime\":\"2021-08-23T19:40:40Z\",\"description\":\"z\"},\"etag\":\"anzbjekwuyckyvn\",\"location\":\"nsm\",\"tags\":{\"zujqjtotdxp\":\"iwjbctvb\",\"wuusiecktybh\":\"scsl\",\"d\":\"uxidhhxomilddxj\"},\"id\":\"gxwjwil\",\"name\":\"qrslaate\",\"type\":\"twujjzgx\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AutomationManager manager = AutomationManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        Runbook response = manager.runbooks()
            .define("qiy")
            .withExistingAutomationAccount("lhpses", "fga")
            .withRunbookType(RunbookTypeEnum.SCRIPT)
            .withRegion("w")
            .withTags(mapOf("jc", "mhljqlxspm"))
            .withName("groigbsfsgsa")
            .withLogVerbose(true)
            .withLogProgress(false)
            .withDraft(new RunbookDraftInner().withInEdit(true)
                .withDraftContentLink(new ContentLink().withUri("qgsoyqyxyjrc")
                    .withContentHash(new ContentHash().withAlgorithm("pbisp").withValue("lqjoxtda"))
                    .withVersion("eaoo"))
                .withCreationTime(OffsetDateTime.parse("2021-09-09T12:37:25Z"))
                .withLastModifiedTime(OffsetDateTime.parse("2021-01-25T11:08:09Z"))
                .withParameters(mapOf("ajvcfoczhapej",
                    new RunbookParameter().withType("fwjlof")
                        .withIsMandatory(false)
                        .withPosition(1252159022)
                        .withDefaultValue("mauk"),
                    "rxoxdjxl",
                    new RunbookParameter().withType("tkwxnhwhhnoyrzaa")
                        .withIsMandatory(false)
                        .withPosition(1135205255)
                        .withDefaultValue("jenvjeateaxx"),
                    "lrndwdbvxvza",
                    new RunbookParameter().withType("a")
                        .withIsMandatory(false)
                        .withPosition(1986822544)
                        .withDefaultValue("kd")))
                .withOutputTypes(Arrays.asList("oyqxlunkf", "hmcxqqxmyzkl")))
            .withPublishContentLink(new ContentLink().withUri("n")
                .withContentHash(new ContentHash().withAlgorithm("hrvmzrqrazadi").withValue("znllaslk"))
                .withVersion("hjqjpv"))
            .withDescription("ihxjtgzgtai")
            .withLogActivityTrace(258423612)
            .create();

        Assertions.assertEquals("nsm", response.location());
        Assertions.assertEquals("iwjbctvb", response.tags().get("zujqjtotdxp"));
        Assertions.assertEquals("anzbjekwuyckyvn", response.etag());
        Assertions.assertEquals(RunbookTypeEnum.GRAPH_POWER_SHELL, response.runbookType());
        Assertions.assertEquals("xebuhsxrznmg", response.publishContentLink().uri());
        Assertions.assertEquals("al", response.publishContentLink().contentHash().algorithm());
        Assertions.assertEquals("yckhefrbhseue", response.publishContentLink().contentHash().value());
        Assertions.assertEquals("gpxebjludcayt", response.publishContentLink().version());
        Assertions.assertEquals(RunbookState.PUBLISHED, response.state());
        Assertions.assertEquals(false, response.logVerbose());
        Assertions.assertEquals(true, response.logProgress());
        Assertions.assertEquals(1011189978, response.logActivityTrace());
        Assertions.assertEquals(1953701980, response.jobCount());
        Assertions.assertEquals("nsewouxl", response.parameters().get("ctwjwdsdlzm").type());
        Assertions.assertEquals(false, response.parameters().get("ctwjwdsdlzm").isMandatory());
        Assertions.assertEquals(1827606579, response.parameters().get("ctwjwdsdlzm").position());
        Assertions.assertEquals("ljurkeposehqqylm", response.parameters().get("ctwjwdsdlzm").defaultValue());
        Assertions.assertEquals("locvvujexayglx", response.outputTypes().get(0));
        Assertions.assertEquals(false, response.draft().inEdit());
        Assertions.assertEquals("kyhydvikmf", response.draft().draftContentLink().uri());
        Assertions.assertEquals("pmillxgjsci", response.draft().draftContentLink().contentHash().algorithm());
        Assertions.assertEquals("wgsoriobijeiydy", response.draft().draftContentLink().contentHash().value());
        Assertions.assertEquals("ynhbokayrg", response.draft().draftContentLink().version());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-03T22:30:10Z"), response.draft().creationTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-12T11:18:01Z"), response.draft().lastModifiedTime());
        Assertions.assertEquals("weoftnorw", response.draft().parameters().get("zfffhtjnwo").type());
        Assertions.assertEquals(false, response.draft().parameters().get("zfffhtjnwo").isMandatory());
        Assertions.assertEquals(1443664700, response.draft().parameters().get("zfffhtjnwo").position());
        Assertions.assertEquals("ctqkmvjanx", response.draft().parameters().get("zfffhtjnwo").defaultValue());
        Assertions.assertEquals("egmxdbsohc", response.draft().outputTypes().get(0));
        Assertions.assertEquals(RunbookProvisioningState.SUCCEEDED, response.provisioningState());
        Assertions.assertEquals("vd", response.lastModifiedBy());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-23T06:19:04Z"), response.creationTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-23T19:40:40Z"), response.lastModifiedTime());
        Assertions.assertEquals("z", response.description());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
