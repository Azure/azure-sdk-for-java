// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.automation.fluent.models.DscCompilationJobInner;
import com.azure.resourcemanager.automation.models.DscConfigurationAssociationProperty;
import com.azure.resourcemanager.automation.models.JobProvisioningState;
import com.azure.resourcemanager.automation.models.JobStatus;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class DscCompilationJobInnerTests {
    @Test
    public void testDeserialize() {
        DscCompilationJobInner model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"configuration\":{\"name\":\"x\"},\"startedBy\":\"feiithlvmez\",\"creationTime\":\"2021-08-05T17:04:54Z\",\"provisioningState\":\"Failed\",\"runOn\":\"sbbzo\",\"status\":\"Blocked\",\"statusDetails\":\"rxwburv\",\"startTime\":\"2021-03-14T20:20:37Z\",\"endTime\":\"2021-11-08T09:59:37Z\",\"exception\":\"pydptko\",\"lastModifiedTime\":\"2021-12-01T07:03:23Z\",\"lastStatusModifiedTime\":\"2021-08-24T09:48:52Z\",\"parameters\":{\"pocipazyxoegu\":\"vudwtiukbldng\",\"npiucgygevqznty\":\"g\",\"dpydn\":\"mrbpizcdrqj\"}},\"id\":\"yhxdeoejzicwi\",\"name\":\"sjttgzfbish\",\"type\":\"bkh\"}")
                .toObject(DscCompilationJobInner.class);
        Assertions.assertEquals("x", model.configuration().name());
        Assertions.assertEquals(JobProvisioningState.FAILED, model.provisioningState());
        Assertions.assertEquals("sbbzo", model.runOn());
        Assertions.assertEquals(JobStatus.BLOCKED, model.status());
        Assertions.assertEquals("rxwburv", model.statusDetails());
        Assertions.assertEquals("vudwtiukbldng", model.parameters().get("pocipazyxoegu"));
    }

    @Test
    public void testSerialize() {
        DscCompilationJobInner model =
            new DscCompilationJobInner()
                .withConfiguration(new DscConfigurationAssociationProperty().withName("x"))
                .withProvisioningState(JobProvisioningState.FAILED)
                .withRunOn("sbbzo")
                .withStatus(JobStatus.BLOCKED)
                .withStatusDetails("rxwburv")
                .withParameters(
                    mapOf("pocipazyxoegu", "vudwtiukbldng", "npiucgygevqznty", "g", "dpydn", "mrbpizcdrqj"));
        model = BinaryData.fromObject(model).toObject(DscCompilationJobInner.class);
        Assertions.assertEquals("x", model.configuration().name());
        Assertions.assertEquals(JobProvisioningState.FAILED, model.provisioningState());
        Assertions.assertEquals("sbbzo", model.runOn());
        Assertions.assertEquals(JobStatus.BLOCKED, model.status());
        Assertions.assertEquals("rxwburv", model.statusDetails());
        Assertions.assertEquals("vudwtiukbldng", model.parameters().get("pocipazyxoegu"));
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
