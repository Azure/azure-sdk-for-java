// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.automation.fluent.models.WatcherInner;
import com.azure.resourcemanager.automation.models.WatcherListResult;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class WatcherListResultTests {
    @Test
    public void testDeserialize() {
        WatcherListResult model =
            BinaryData
                .fromString(
                    "{\"value\":[{\"properties\":{\"executionFrequencyInSeconds\":2379655259774159781,\"scriptName\":\"pucwwfvovbvme\",\"scriptParameters\":{},\"scriptRunOn\":\"ivyhzceuojgjrwju\",\"status\":\"otwmcdyt\",\"creationTime\":\"2021-09-27T21:02:03Z\",\"lastModifiedTime\":\"2021-01-14T13:52:52Z\",\"lastModifiedBy\":\"nrjawgqwg\",\"description\":\"ni\"},\"etag\":\"x\",\"tags\":{\"gklwn\":\"py\",\"vylwzbtdhxuj\":\"nhjdauw\",\"veual\":\"nbmpowuwprzq\",\"wsrtjriplrbpbe\":\"pjmkhfxobbc\"},\"location\":\"ghfg\",\"id\":\"lcgwxzvlvqh\",\"name\":\"kbegibt\",\"type\":\"mxiebw\"}],\"nextLink\":\"loayqcgw\"}")
                .toObject(WatcherListResult.class);
        Assertions.assertEquals("x", model.value().get(0).etag());
        Assertions.assertEquals("py", model.value().get(0).tags().get("gklwn"));
        Assertions.assertEquals("ghfg", model.value().get(0).location());
        Assertions.assertEquals(2379655259774159781L, model.value().get(0).executionFrequencyInSeconds());
        Assertions.assertEquals("pucwwfvovbvme", model.value().get(0).scriptName());
        Assertions.assertEquals("ivyhzceuojgjrwju", model.value().get(0).scriptRunOn());
        Assertions.assertEquals("ni", model.value().get(0).description());
        Assertions.assertEquals("loayqcgw", model.nextLink());
    }

    @Test
    public void testSerialize() {
        WatcherListResult model =
            new WatcherListResult()
                .withValue(
                    Arrays
                        .asList(
                            new WatcherInner()
                                .withEtag("x")
                                .withTags(
                                    mapOf(
                                        "gklwn",
                                        "py",
                                        "vylwzbtdhxuj",
                                        "nhjdauw",
                                        "veual",
                                        "nbmpowuwprzq",
                                        "wsrtjriplrbpbe",
                                        "pjmkhfxobbc"))
                                .withLocation("ghfg")
                                .withExecutionFrequencyInSeconds(2379655259774159781L)
                                .withScriptName("pucwwfvovbvme")
                                .withScriptParameters(mapOf())
                                .withScriptRunOn("ivyhzceuojgjrwju")
                                .withDescription("ni")))
                .withNextLink("loayqcgw");
        model = BinaryData.fromObject(model).toObject(WatcherListResult.class);
        Assertions.assertEquals("x", model.value().get(0).etag());
        Assertions.assertEquals("py", model.value().get(0).tags().get("gklwn"));
        Assertions.assertEquals("ghfg", model.value().get(0).location());
        Assertions.assertEquals(2379655259774159781L, model.value().get(0).executionFrequencyInSeconds());
        Assertions.assertEquals("pucwwfvovbvme", model.value().get(0).scriptName());
        Assertions.assertEquals("ivyhzceuojgjrwju", model.value().get(0).scriptRunOn());
        Assertions.assertEquals("ni", model.value().get(0).description());
        Assertions.assertEquals("loayqcgw", model.nextLink());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
