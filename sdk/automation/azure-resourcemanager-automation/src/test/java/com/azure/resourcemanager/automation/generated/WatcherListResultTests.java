// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.automation.fluent.models.WatcherInner;
import com.azure.resourcemanager.automation.models.WatcherListResult;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class WatcherListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        WatcherListResult model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"executionFrequencyInSeconds\":4620463543237855952,\"scriptName\":\"dhzmmesckdlp\",\"scriptParameters\":{\"xdfgsftufqobr\":\"rcxfailcfxwmdb\",\"knh\":\"lnacgcc\",\"zvulj\":\"kizvytn\",\"qnvb\":\"aaeranokqgukk\"},\"scriptRunOn\":\"ylaxxulcdi\",\"status\":\"osfjbjsv\",\"creationTime\":\"2021-08-27T10:37:27Z\",\"lastModifiedTime\":\"2021-05-25T10:35:46Z\",\"lastModifiedBy\":\"yvycytdclxgcckn\",\"description\":\"wmbtmvpdvjdhtt\"},\"etag\":\"efedxihchrphkm\",\"tags\":{\"fzpbgtgkyl\":\"dqns\",\"jeuut\":\"dgh\",\"bwnhhtql\":\"wxezwzhok\"},\"location\":\"hgppipifhpfeoa\",\"id\":\"vgcxtx\",\"name\":\"csheafidltugsr\",\"type\":\"smkss\"}],\"nextLink\":\"oiftxfkfwegprh\"}")
            .toObject(WatcherListResult.class);
        Assertions.assertEquals("efedxihchrphkm", model.value().get(0).etag());
        Assertions.assertEquals("dqns", model.value().get(0).tags().get("fzpbgtgkyl"));
        Assertions.assertEquals("hgppipifhpfeoa", model.value().get(0).location());
        Assertions.assertEquals(4620463543237855952L, model.value().get(0).executionFrequencyInSeconds());
        Assertions.assertEquals("dhzmmesckdlp", model.value().get(0).scriptName());
        Assertions.assertEquals("rcxfailcfxwmdb", model.value().get(0).scriptParameters().get("xdfgsftufqobr"));
        Assertions.assertEquals("ylaxxulcdi", model.value().get(0).scriptRunOn());
        Assertions.assertEquals("wmbtmvpdvjdhtt", model.value().get(0).description());
        Assertions.assertEquals("oiftxfkfwegprh", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        WatcherListResult model = new WatcherListResult().withValue(Arrays.asList(new WatcherInner()
            .withEtag("efedxihchrphkm")
            .withTags(mapOf("fzpbgtgkyl", "dqns", "jeuut", "dgh", "bwnhhtql", "wxezwzhok"))
            .withLocation("hgppipifhpfeoa")
            .withExecutionFrequencyInSeconds(4620463543237855952L)
            .withScriptName("dhzmmesckdlp")
            .withScriptParameters(
                mapOf("xdfgsftufqobr", "rcxfailcfxwmdb", "knh", "lnacgcc", "zvulj", "kizvytn", "qnvb", "aaeranokqgukk"))
            .withScriptRunOn("ylaxxulcdi")
            .withDescription("wmbtmvpdvjdhtt"))).withNextLink("oiftxfkfwegprh");
        model = BinaryData.fromObject(model).toObject(WatcherListResult.class);
        Assertions.assertEquals("efedxihchrphkm", model.value().get(0).etag());
        Assertions.assertEquals("dqns", model.value().get(0).tags().get("fzpbgtgkyl"));
        Assertions.assertEquals("hgppipifhpfeoa", model.value().get(0).location());
        Assertions.assertEquals(4620463543237855952L, model.value().get(0).executionFrequencyInSeconds());
        Assertions.assertEquals("dhzmmesckdlp", model.value().get(0).scriptName());
        Assertions.assertEquals("rcxfailcfxwmdb", model.value().get(0).scriptParameters().get("xdfgsftufqobr"));
        Assertions.assertEquals("ylaxxulcdi", model.value().get(0).scriptRunOn());
        Assertions.assertEquals("wmbtmvpdvjdhtt", model.value().get(0).description());
        Assertions.assertEquals("oiftxfkfwegprh", model.nextLink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
