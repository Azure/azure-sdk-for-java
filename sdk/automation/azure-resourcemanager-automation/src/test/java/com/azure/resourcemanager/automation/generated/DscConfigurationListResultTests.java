// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.automation.fluent.models.DscConfigurationInner;
import com.azure.resourcemanager.automation.models.ContentHash;
import com.azure.resourcemanager.automation.models.ContentSource;
import com.azure.resourcemanager.automation.models.ContentSourceType;
import com.azure.resourcemanager.automation.models.DscConfigurationListResult;
import com.azure.resourcemanager.automation.models.DscConfigurationParameter;
import com.azure.resourcemanager.automation.models.DscConfigurationProvisioningState;
import com.azure.resourcemanager.automation.models.DscConfigurationState;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DscConfigurationListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DscConfigurationListResult model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"provisioningState\":\"Succeeded\",\"jobCount\":1749720830,\"parameters\":{\"kwv\":{\"type\":\"rx\",\"isMandatory\":true,\"position\":1049990644,\"defaultValue\":\"leipqx\"},\"sbostzel\":{\"type\":\"nzvdfbzdixzmq\",\"isMandatory\":true,\"position\":1574532239,\"defaultValue\":\"opqhewjptmc\"},\"rbbpneqvcwwyy\":{\"type\":\"la\",\"isMandatory\":true,\"position\":1611840724,\"defaultValue\":\"biojlvf\"},\"pbzpcpiljhahz\":{\"type\":\"mochpprprsnmok\",\"isMandatory\":false,\"position\":1942149440,\"defaultValue\":\"hlb\"}},\"source\":{\"hash\":{\"algorithm\":\"h\",\"value\":\"dbn\"},\"type\":\"embeddedContent\",\"value\":\"olewjwi\",\"version\":\"bwefqsfapaqtfer\"},\"state\":\"New\",\"logVerbose\":false,\"creationTime\":\"2021-02-26T13:58:55Z\",\"lastModifiedTime\":\"2020-12-26T20:04:14Z\",\"nodeConfigurationCount\":2076529802,\"description\":\"jwogqqnobpudc\"},\"etag\":\"btqwpwyawbzas\",\"location\":\"bucljgkyexaogu\",\"tags\":{\"dsdaultxijjumf\":\"p\"},\"id\":\"waz\",\"name\":\"nqnm\",\"type\":\"jng\"},{\"properties\":{\"provisioningState\":\"Succeeded\",\"jobCount\":277870835,\"parameters\":{\"lcfhmlrqryxy\":{\"type\":\"gny\",\"isMandatory\":false,\"position\":1482748422,\"defaultValue\":\"vtuikzhajq\"}},\"source\":{\"hash\":{\"algorithm\":\"zrdpsovwxznptgoe\",\"value\":\"ybbabpfhvfsl\"},\"type\":\"embeddedContent\",\"value\":\"jlrigjkskyrioovz\",\"version\":\"sxwaabzm\"},\"state\":\"New\",\"logVerbose\":true,\"creationTime\":\"2021-07-31T13:57:43Z\",\"lastModifiedTime\":\"2021-02-08T08:22:24Z\",\"nodeConfigurationCount\":554486012,\"description\":\"izkzobgo\"},\"etag\":\"lhslnelxieixyn\",\"location\":\"lxecwcrojphslh\",\"tags\":{\"ttzhra\":\"jutifdwfmvigorqj\",\"ckpzvcpopmxeln\":\"lkafhonqjuje\",\"jedexxmlf\":\"clt\"},\"id\":\"kqscazuawxtzx\",\"name\":\"uamwabzxrvxc\",\"type\":\"s\"}],\"nextLink\":\"phai\",\"totalCount\":967398069}")
            .toObject(DscConfigurationListResult.class);
        Assertions.assertEquals("bucljgkyexaogu", model.value().get(0).location());
        Assertions.assertEquals("p", model.value().get(0).tags().get("dsdaultxijjumf"));
        Assertions.assertEquals("btqwpwyawbzas", model.value().get(0).etag());
        Assertions.assertEquals(DscConfigurationProvisioningState.SUCCEEDED, model.value().get(0).provisioningState());
        Assertions.assertEquals(1749720830, model.value().get(0).jobCount());
        Assertions.assertEquals("rx", model.value().get(0).parameters().get("kwv").type());
        Assertions.assertEquals(true, model.value().get(0).parameters().get("kwv").isMandatory());
        Assertions.assertEquals(1049990644, model.value().get(0).parameters().get("kwv").position());
        Assertions.assertEquals("leipqx", model.value().get(0).parameters().get("kwv").defaultValue());
        Assertions.assertEquals("h", model.value().get(0).source().hash().algorithm());
        Assertions.assertEquals("dbn", model.value().get(0).source().hash().value());
        Assertions.assertEquals(ContentSourceType.EMBEDDED_CONTENT, model.value().get(0).source().type());
        Assertions.assertEquals("olewjwi", model.value().get(0).source().value());
        Assertions.assertEquals("bwefqsfapaqtfer", model.value().get(0).source().version());
        Assertions.assertEquals(DscConfigurationState.NEW, model.value().get(0).state());
        Assertions.assertEquals(false, model.value().get(0).logVerbose());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-26T13:58:55Z"), model.value().get(0).creationTime());
        Assertions.assertEquals(OffsetDateTime.parse("2020-12-26T20:04:14Z"), model.value().get(0).lastModifiedTime());
        Assertions.assertEquals(2076529802, model.value().get(0).nodeConfigurationCount());
        Assertions.assertEquals("jwogqqnobpudc", model.value().get(0).description());
        Assertions.assertEquals("phai", model.nextLink());
        Assertions.assertEquals(967398069, model.totalCount());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DscConfigurationListResult model = new DscConfigurationListResult().withValue(Arrays.asList(
            new DscConfigurationInner().withLocation("bucljgkyexaogu")
                .withTags(mapOf("dsdaultxijjumf", "p"))
                .withEtag("btqwpwyawbzas")
                .withProvisioningState(DscConfigurationProvisioningState.SUCCEEDED)
                .withJobCount(1749720830)
                .withParameters(mapOf("kwv",
                    new DscConfigurationParameter().withType("rx")
                        .withIsMandatory(true)
                        .withPosition(1049990644)
                        .withDefaultValue("leipqx"),
                    "sbostzel",
                    new DscConfigurationParameter().withType("nzvdfbzdixzmq")
                        .withIsMandatory(true)
                        .withPosition(1574532239)
                        .withDefaultValue("opqhewjptmc"),
                    "rbbpneqvcwwyy",
                    new DscConfigurationParameter().withType("la")
                        .withIsMandatory(true)
                        .withPosition(1611840724)
                        .withDefaultValue("biojlvf"),
                    "pbzpcpiljhahz",
                    new DscConfigurationParameter().withType("mochpprprsnmok")
                        .withIsMandatory(false)
                        .withPosition(1942149440)
                        .withDefaultValue("hlb")))
                .withSource(new ContentSource().withHash(new ContentHash().withAlgorithm("h").withValue("dbn"))
                    .withType(ContentSourceType.EMBEDDED_CONTENT)
                    .withValue("olewjwi")
                    .withVersion("bwefqsfapaqtfer"))
                .withState(DscConfigurationState.NEW)
                .withLogVerbose(false)
                .withCreationTime(OffsetDateTime.parse("2021-02-26T13:58:55Z"))
                .withLastModifiedTime(OffsetDateTime.parse("2020-12-26T20:04:14Z"))
                .withNodeConfigurationCount(2076529802)
                .withDescription("jwogqqnobpudc"),
            new DscConfigurationInner().withLocation("lxecwcrojphslh")
                .withTags(mapOf("ttzhra", "jutifdwfmvigorqj", "ckpzvcpopmxeln", "lkafhonqjuje", "jedexxmlf", "clt"))
                .withEtag("lhslnelxieixyn")
                .withProvisioningState(DscConfigurationProvisioningState.SUCCEEDED)
                .withJobCount(277870835)
                .withParameters(mapOf("lcfhmlrqryxy",
                    new DscConfigurationParameter().withType("gny")
                        .withIsMandatory(false)
                        .withPosition(1482748422)
                        .withDefaultValue("vtuikzhajq")))
                .withSource(new ContentSource()
                    .withHash(new ContentHash().withAlgorithm("zrdpsovwxznptgoe").withValue("ybbabpfhvfsl"))
                    .withType(ContentSourceType.EMBEDDED_CONTENT)
                    .withValue("jlrigjkskyrioovz")
                    .withVersion("sxwaabzm"))
                .withState(DscConfigurationState.NEW)
                .withLogVerbose(true)
                .withCreationTime(OffsetDateTime.parse("2021-07-31T13:57:43Z"))
                .withLastModifiedTime(OffsetDateTime.parse("2021-02-08T08:22:24Z"))
                .withNodeConfigurationCount(554486012)
                .withDescription("izkzobgo")))
            .withNextLink("phai")
            .withTotalCount(967398069);
        model = BinaryData.fromObject(model).toObject(DscConfigurationListResult.class);
        Assertions.assertEquals("bucljgkyexaogu", model.value().get(0).location());
        Assertions.assertEquals("p", model.value().get(0).tags().get("dsdaultxijjumf"));
        Assertions.assertEquals("btqwpwyawbzas", model.value().get(0).etag());
        Assertions.assertEquals(DscConfigurationProvisioningState.SUCCEEDED, model.value().get(0).provisioningState());
        Assertions.assertEquals(1749720830, model.value().get(0).jobCount());
        Assertions.assertEquals("rx", model.value().get(0).parameters().get("kwv").type());
        Assertions.assertEquals(true, model.value().get(0).parameters().get("kwv").isMandatory());
        Assertions.assertEquals(1049990644, model.value().get(0).parameters().get("kwv").position());
        Assertions.assertEquals("leipqx", model.value().get(0).parameters().get("kwv").defaultValue());
        Assertions.assertEquals("h", model.value().get(0).source().hash().algorithm());
        Assertions.assertEquals("dbn", model.value().get(0).source().hash().value());
        Assertions.assertEquals(ContentSourceType.EMBEDDED_CONTENT, model.value().get(0).source().type());
        Assertions.assertEquals("olewjwi", model.value().get(0).source().value());
        Assertions.assertEquals("bwefqsfapaqtfer", model.value().get(0).source().version());
        Assertions.assertEquals(DscConfigurationState.NEW, model.value().get(0).state());
        Assertions.assertEquals(false, model.value().get(0).logVerbose());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-26T13:58:55Z"), model.value().get(0).creationTime());
        Assertions.assertEquals(OffsetDateTime.parse("2020-12-26T20:04:14Z"), model.value().get(0).lastModifiedTime());
        Assertions.assertEquals(2076529802, model.value().get(0).nodeConfigurationCount());
        Assertions.assertEquals("jwogqqnobpudc", model.value().get(0).description());
        Assertions.assertEquals("phai", model.nextLink());
        Assertions.assertEquals(967398069, model.totalCount());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
