// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.automation.fluent.models.DscConfigurationInner;
import com.azure.resourcemanager.automation.models.DscConfigurationListResult;
import com.azure.resourcemanager.automation.models.DscConfigurationProvisioningState;
import com.azure.resourcemanager.automation.models.DscConfigurationState;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class DscConfigurationListResultTests {
    @Test
    public void testDeserialize() {
        DscConfigurationListResult model =
            BinaryData
                .fromString(
                    "{\"value\":[{\"properties\":{\"provisioningState\":\"Succeeded\",\"jobCount\":466810097,\"parameters\":{},\"state\":\"Published\",\"logVerbose\":false,\"creationTime\":\"2021-05-05T13:52:24Z\",\"lastModifiedTime\":\"2021-03-05T10:28:15Z\",\"nodeConfigurationCount\":1083166173,\"description\":\"tl\"},\"etag\":\"ez\",\"location\":\"zhokvbwnhh\",\"tags\":{\"ifhpf\":\"gehgppi\",\"eafidltugsresm\":\"oajvgcxtxjcs\"},\"id\":\"ssjhoiftxfkf\",\"name\":\"egprhptil\",\"type\":\"ucb\"},{\"properties\":{\"provisioningState\":\"Succeeded\",\"jobCount\":13160998,\"parameters\":{},\"state\":\"New\",\"logVerbose\":true,\"creationTime\":\"2021-09-27T00:29:19Z\",\"lastModifiedTime\":\"2021-05-03T07:18:25Z\",\"nodeConfigurationCount\":379885454,\"description\":\"pwbralllibphbqz\"},\"etag\":\"zakakankjpdn\",\"location\":\"zhajoylhjlmuo\",\"tags\":{\"pteecjme\":\"rimrs\",\"wxdzaumweoohgu\":\"slstvasy\"},\"id\":\"fuzboyjathwtzolb\",\"name\":\"emwmdxmebwjs\",\"type\":\"jpahlxvea\"},{\"properties\":{\"provisioningState\":\"Succeeded\",\"jobCount\":1964551811,\"parameters\":{},\"state\":\"Published\",\"logVerbose\":true,\"creationTime\":\"2021-11-05T21:00:41Z\",\"lastModifiedTime\":\"2021-03-01T23:53:32Z\",\"nodeConfigurationCount\":462307774,\"description\":\"vqcttadija\"},\"etag\":\"kmr\",\"location\":\"ieekpndzaa\",\"tags\":{\"yxeb\":\"dqmeqwigpibudq\",\"tmhheioqa\":\"ybpmzznrtffyaq\",\"dlcgqlsismjqfr\":\"hvseufuqyrx\",\"ivfcdisyirnx\":\"dgamquhiosrsj\"},\"id\":\"hcz\",\"name\":\"xrxzbujrtr\",\"type\":\"qvwre\"}],\"nextLink\":\"h\",\"totalCount\":1550567255}")
                .toObject(DscConfigurationListResult.class);
        Assertions.assertEquals("zhokvbwnhh", model.value().get(0).location());
        Assertions.assertEquals("gehgppi", model.value().get(0).tags().get("ifhpf"));
        Assertions.assertEquals("ez", model.value().get(0).etag());
        Assertions.assertEquals(DscConfigurationProvisioningState.SUCCEEDED, model.value().get(0).provisioningState());
        Assertions.assertEquals(466810097, model.value().get(0).jobCount());
        Assertions.assertEquals(DscConfigurationState.PUBLISHED, model.value().get(0).state());
        Assertions.assertEquals(false, model.value().get(0).logVerbose());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-05T13:52:24Z"), model.value().get(0).creationTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-05T10:28:15Z"), model.value().get(0).lastModifiedTime());
        Assertions.assertEquals(1083166173, model.value().get(0).nodeConfigurationCount());
        Assertions.assertEquals("tl", model.value().get(0).description());
        Assertions.assertEquals("h", model.nextLink());
        Assertions.assertEquals(1550567255, model.totalCount());
    }

    @Test
    public void testSerialize() {
        DscConfigurationListResult model =
            new DscConfigurationListResult()
                .withValue(
                    Arrays
                        .asList(
                            new DscConfigurationInner()
                                .withLocation("zhokvbwnhh")
                                .withTags(mapOf("ifhpf", "gehgppi", "eafidltugsresm", "oajvgcxtxjcs"))
                                .withEtag("ez")
                                .withProvisioningState(DscConfigurationProvisioningState.SUCCEEDED)
                                .withJobCount(466810097)
                                .withParameters(mapOf())
                                .withState(DscConfigurationState.PUBLISHED)
                                .withLogVerbose(false)
                                .withCreationTime(OffsetDateTime.parse("2021-05-05T13:52:24Z"))
                                .withLastModifiedTime(OffsetDateTime.parse("2021-03-05T10:28:15Z"))
                                .withNodeConfigurationCount(1083166173)
                                .withDescription("tl"),
                            new DscConfigurationInner()
                                .withLocation("zhajoylhjlmuo")
                                .withTags(mapOf("pteecjme", "rimrs", "wxdzaumweoohgu", "slstvasy"))
                                .withEtag("zakakankjpdn")
                                .withProvisioningState(DscConfigurationProvisioningState.SUCCEEDED)
                                .withJobCount(13160998)
                                .withParameters(mapOf())
                                .withState(DscConfigurationState.NEW)
                                .withLogVerbose(true)
                                .withCreationTime(OffsetDateTime.parse("2021-09-27T00:29:19Z"))
                                .withLastModifiedTime(OffsetDateTime.parse("2021-05-03T07:18:25Z"))
                                .withNodeConfigurationCount(379885454)
                                .withDescription("pwbralllibphbqz"),
                            new DscConfigurationInner()
                                .withLocation("ieekpndzaa")
                                .withTags(
                                    mapOf(
                                        "yxeb",
                                        "dqmeqwigpibudq",
                                        "tmhheioqa",
                                        "ybpmzznrtffyaq",
                                        "dlcgqlsismjqfr",
                                        "hvseufuqyrx",
                                        "ivfcdisyirnx",
                                        "dgamquhiosrsj"))
                                .withEtag("kmr")
                                .withProvisioningState(DscConfigurationProvisioningState.SUCCEEDED)
                                .withJobCount(1964551811)
                                .withParameters(mapOf())
                                .withState(DscConfigurationState.PUBLISHED)
                                .withLogVerbose(true)
                                .withCreationTime(OffsetDateTime.parse("2021-11-05T21:00:41Z"))
                                .withLastModifiedTime(OffsetDateTime.parse("2021-03-01T23:53:32Z"))
                                .withNodeConfigurationCount(462307774)
                                .withDescription("vqcttadija")))
                .withNextLink("h")
                .withTotalCount(1550567255);
        model = BinaryData.fromObject(model).toObject(DscConfigurationListResult.class);
        Assertions.assertEquals("zhokvbwnhh", model.value().get(0).location());
        Assertions.assertEquals("gehgppi", model.value().get(0).tags().get("ifhpf"));
        Assertions.assertEquals("ez", model.value().get(0).etag());
        Assertions.assertEquals(DscConfigurationProvisioningState.SUCCEEDED, model.value().get(0).provisioningState());
        Assertions.assertEquals(466810097, model.value().get(0).jobCount());
        Assertions.assertEquals(DscConfigurationState.PUBLISHED, model.value().get(0).state());
        Assertions.assertEquals(false, model.value().get(0).logVerbose());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-05T13:52:24Z"), model.value().get(0).creationTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-05T10:28:15Z"), model.value().get(0).lastModifiedTime());
        Assertions.assertEquals(1083166173, model.value().get(0).nodeConfigurationCount());
        Assertions.assertEquals("tl", model.value().get(0).description());
        Assertions.assertEquals("h", model.nextLink());
        Assertions.assertEquals(1550567255, model.totalCount());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
