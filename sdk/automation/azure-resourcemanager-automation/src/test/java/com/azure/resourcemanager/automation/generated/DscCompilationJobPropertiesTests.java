// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.automation.fluent.models.DscCompilationJobProperties;
import com.azure.resourcemanager.automation.models.DscConfigurationAssociationProperty;
import com.azure.resourcemanager.automation.models.JobProvisioningState;
import com.azure.resourcemanager.automation.models.JobStatus;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DscCompilationJobPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DscCompilationJobProperties model = BinaryData.fromString(
            "{\"configuration\":{\"name\":\"bxu\"},\"startedBy\":\"bhqwalmuzyoxa\",\"jobId\":\"517c542a-3c6d-4f6f-b97e-1b75c227092b\",\"creationTime\":\"2021-04-14T09:10:53Z\",\"provisioningState\":\"Succeeded\",\"runOn\":\"ncuxrhdwb\",\"status\":\"Disconnected\",\"statusDetails\":\"niwdjsw\",\"startTime\":\"2021-09-04T13:55:51Z\",\"endTime\":\"2021-08-07T21:53:51Z\",\"exception\":\"gnxytxhpzxbz\",\"lastModifiedTime\":\"2021-01-14T15:07:39Z\",\"lastStatusModifiedTime\":\"2021-03-26T15:31:42Z\",\"parameters\":{\"wtctyqi\":\"cuh\",\"bhvgy\":\"lbbovplw\",\"svmkfssxquk\":\"gu\",\"mg\":\"fpl\"}}")
            .toObject(DscCompilationJobProperties.class);
        Assertions.assertEquals("bxu", model.configuration().name());
        Assertions.assertEquals(JobProvisioningState.SUCCEEDED, model.provisioningState());
        Assertions.assertEquals("ncuxrhdwb", model.runOn());
        Assertions.assertEquals(JobStatus.DISCONNECTED, model.status());
        Assertions.assertEquals("niwdjsw", model.statusDetails());
        Assertions.assertEquals("cuh", model.parameters().get("wtctyqi"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DscCompilationJobProperties model = new DscCompilationJobProperties()
            .withConfiguration(new DscConfigurationAssociationProperty().withName("bxu"))
            .withProvisioningState(JobProvisioningState.SUCCEEDED)
            .withRunOn("ncuxrhdwb")
            .withStatus(JobStatus.DISCONNECTED)
            .withStatusDetails("niwdjsw")
            .withParameters(mapOf("wtctyqi", "cuh", "bhvgy", "lbbovplw", "svmkfssxquk", "gu", "mg", "fpl"));
        model = BinaryData.fromObject(model).toObject(DscCompilationJobProperties.class);
        Assertions.assertEquals("bxu", model.configuration().name());
        Assertions.assertEquals(JobProvisioningState.SUCCEEDED, model.provisioningState());
        Assertions.assertEquals("ncuxrhdwb", model.runOn());
        Assertions.assertEquals(JobStatus.DISCONNECTED, model.status());
        Assertions.assertEquals("niwdjsw", model.statusDetails());
        Assertions.assertEquals("cuh", model.parameters().get("wtctyqi"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
