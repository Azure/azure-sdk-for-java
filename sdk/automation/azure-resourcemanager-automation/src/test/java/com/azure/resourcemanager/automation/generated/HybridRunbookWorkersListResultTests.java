// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.automation.fluent.models.HybridRunbookWorkerInner;
import com.azure.resourcemanager.automation.models.HybridRunbookWorkersListResult;
import com.azure.resourcemanager.automation.models.WorkerType;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class HybridRunbookWorkersListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        HybridRunbookWorkersListResult model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"ip\":\"l\",\"registeredDateTime\":\"2021-01-20T12:56:30Z\",\"lastSeenDateTime\":\"2021-07-17T18:55:48Z\",\"vmResourceId\":\"nigflqqbtnyj\",\"workerType\":\"HybridV2\",\"workerName\":\"dbfvabmv\"},\"id\":\"xbaevwjcnkot\",\"name\":\"lwuhvajmailfe\",\"type\":\"jjzakzwjiqullqx\"},{\"properties\":{\"ip\":\"vr\",\"registeredDateTime\":\"2021-01-07T06:10:02Z\",\"lastSeenDateTime\":\"2021-09-21T14:55:02Z\",\"vmResourceId\":\"ndb\",\"workerType\":\"HybridV2\",\"workerName\":\"ofltfnnxrkadjfy\"},\"id\":\"fmu\",\"name\":\"iiripfohykfkxbbc\",\"type\":\"r\"},{\"properties\":{\"ip\":\"u\",\"registeredDateTime\":\"2021-05-26T14:32:24Z\",\"lastSeenDateTime\":\"2021-08-27T13:15:59Z\",\"vmResourceId\":\"beewoi\",\"workerType\":\"HybridV1\",\"workerName\":\"zbju\"},\"id\":\"srziuct\",\"name\":\"xgbdsuifrevka\",\"type\":\"pezkis\"}],\"nextLink\":\"jm\"}")
            .toObject(HybridRunbookWorkersListResult.class);
        Assertions.assertEquals("l", model.value().get(0).ip());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-20T12:56:30Z"),
            model.value().get(0).registeredDateTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-17T18:55:48Z"), model.value().get(0).lastSeenDateTime());
        Assertions.assertEquals("nigflqqbtnyj", model.value().get(0).vmResourceId());
        Assertions.assertEquals(WorkerType.HYBRID_V2, model.value().get(0).workerType());
        Assertions.assertEquals("dbfvabmv", model.value().get(0).workerName());
        Assertions.assertEquals("jm", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        HybridRunbookWorkersListResult model = new HybridRunbookWorkersListResult().withValue(Arrays.asList(
            new HybridRunbookWorkerInner().withIp("l")
                .withRegisteredDateTime(OffsetDateTime.parse("2021-01-20T12:56:30Z"))
                .withLastSeenDateTime(OffsetDateTime.parse("2021-07-17T18:55:48Z"))
                .withVmResourceId("nigflqqbtnyj")
                .withWorkerType(WorkerType.HYBRID_V2)
                .withWorkerName("dbfvabmv"),
            new HybridRunbookWorkerInner().withIp("vr")
                .withRegisteredDateTime(OffsetDateTime.parse("2021-01-07T06:10:02Z"))
                .withLastSeenDateTime(OffsetDateTime.parse("2021-09-21T14:55:02Z"))
                .withVmResourceId("ndb")
                .withWorkerType(WorkerType.HYBRID_V2)
                .withWorkerName("ofltfnnxrkadjfy"),
            new HybridRunbookWorkerInner().withIp("u")
                .withRegisteredDateTime(OffsetDateTime.parse("2021-05-26T14:32:24Z"))
                .withLastSeenDateTime(OffsetDateTime.parse("2021-08-27T13:15:59Z"))
                .withVmResourceId("beewoi")
                .withWorkerType(WorkerType.HYBRID_V1)
                .withWorkerName("zbju")))
            .withNextLink("jm");
        model = BinaryData.fromObject(model).toObject(HybridRunbookWorkersListResult.class);
        Assertions.assertEquals("l", model.value().get(0).ip());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-20T12:56:30Z"),
            model.value().get(0).registeredDateTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-17T18:55:48Z"), model.value().get(0).lastSeenDateTime());
        Assertions.assertEquals("nigflqqbtnyj", model.value().get(0).vmResourceId());
        Assertions.assertEquals(WorkerType.HYBRID_V2, model.value().get(0).workerType());
        Assertions.assertEquals("dbfvabmv", model.value().get(0).workerName());
        Assertions.assertEquals("jm", model.nextLink());
    }
}
