// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.automation.fluent.models.HybridRunbookWorkerInner;
import com.azure.resourcemanager.automation.models.HybridRunbookWorkersListResult;
import com.azure.resourcemanager.automation.models.WorkerType;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class HybridRunbookWorkersListResultTests {
    @Test
    public void testDeserialize() {
        HybridRunbookWorkersListResult model =
            BinaryData
                .fromString(
                    "{\"value\":[{\"properties\":{\"ip\":\"fgbegl\",\"registeredDateTime\":\"2021-05-29T05:02:46Z\",\"lastSeenDateTime\":\"2021-04-25T04:23:56Z\",\"vmResourceId\":\"i\",\"workerType\":\"HybridV2\",\"workerName\":\"luan\"},\"id\":\"rfxeeebtij\",\"name\":\"acvbmqz\",\"type\":\"qqxlajr\"},{\"properties\":{\"ip\":\"acevehjkuyx\",\"registeredDateTime\":\"2021-01-24T22:21:10Z\",\"lastSeenDateTime\":\"2021-08-08T09:24:44Z\",\"vmResourceId\":\"qltfaey\",\"workerType\":\"HybridV1\",\"workerName\":\"fgvxirpghriypoqe\"},\"id\":\"lqhykprlpyz\",\"name\":\"uciqdsme\",\"type\":\"iitdfuxt\"},{\"properties\":{\"ip\":\"iibmi\",\"registeredDateTime\":\"2021-05-03T03:38:09Z\",\"lastSeenDateTime\":\"2021-11-04T01:45:47Z\",\"vmResourceId\":\"tgnljhnmgixhcmav\",\"workerType\":\"HybridV1\",\"workerName\":\"udorh\"},\"id\":\"yyprotwyp\",\"name\":\"ndm\",\"type\":\"xhugcm\"}],\"nextLink\":\"avlg\"}")
                .toObject(HybridRunbookWorkersListResult.class);
        Assertions.assertEquals("fgbegl", model.value().get(0).ip());
        Assertions
            .assertEquals(OffsetDateTime.parse("2021-05-29T05:02:46Z"), model.value().get(0).registeredDateTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-25T04:23:56Z"), model.value().get(0).lastSeenDateTime());
        Assertions.assertEquals("i", model.value().get(0).vmResourceId());
        Assertions.assertEquals(WorkerType.HYBRID_V2, model.value().get(0).workerType());
        Assertions.assertEquals("luan", model.value().get(0).workerName());
        Assertions.assertEquals("avlg", model.nextLink());
    }

    @Test
    public void testSerialize() {
        HybridRunbookWorkersListResult model =
            new HybridRunbookWorkersListResult()
                .withValue(
                    Arrays
                        .asList(
                            new HybridRunbookWorkerInner()
                                .withIp("fgbegl")
                                .withRegisteredDateTime(OffsetDateTime.parse("2021-05-29T05:02:46Z"))
                                .withLastSeenDateTime(OffsetDateTime.parse("2021-04-25T04:23:56Z"))
                                .withVmResourceId("i")
                                .withWorkerType(WorkerType.HYBRID_V2)
                                .withWorkerName("luan"),
                            new HybridRunbookWorkerInner()
                                .withIp("acevehjkuyx")
                                .withRegisteredDateTime(OffsetDateTime.parse("2021-01-24T22:21:10Z"))
                                .withLastSeenDateTime(OffsetDateTime.parse("2021-08-08T09:24:44Z"))
                                .withVmResourceId("qltfaey")
                                .withWorkerType(WorkerType.HYBRID_V1)
                                .withWorkerName("fgvxirpghriypoqe"),
                            new HybridRunbookWorkerInner()
                                .withIp("iibmi")
                                .withRegisteredDateTime(OffsetDateTime.parse("2021-05-03T03:38:09Z"))
                                .withLastSeenDateTime(OffsetDateTime.parse("2021-11-04T01:45:47Z"))
                                .withVmResourceId("tgnljhnmgixhcmav")
                                .withWorkerType(WorkerType.HYBRID_V1)
                                .withWorkerName("udorh")))
                .withNextLink("avlg");
        model = BinaryData.fromObject(model).toObject(HybridRunbookWorkersListResult.class);
        Assertions.assertEquals("fgbegl", model.value().get(0).ip());
        Assertions
            .assertEquals(OffsetDateTime.parse("2021-05-29T05:02:46Z"), model.value().get(0).registeredDateTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-25T04:23:56Z"), model.value().get(0).lastSeenDateTime());
        Assertions.assertEquals("i", model.value().get(0).vmResourceId());
        Assertions.assertEquals(WorkerType.HYBRID_V2, model.value().get(0).workerType());
        Assertions.assertEquals("luan", model.value().get(0).workerName());
        Assertions.assertEquals("avlg", model.nextLink());
    }
}
