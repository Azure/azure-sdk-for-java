// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.automation.fluent.models.ScheduleInner;
import com.azure.resourcemanager.automation.models.AdvancedSchedule;
import com.azure.resourcemanager.automation.models.AdvancedScheduleMonthlyOccurrence;
import com.azure.resourcemanager.automation.models.ScheduleDay;
import com.azure.resourcemanager.automation.models.ScheduleFrequency;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class ScheduleInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ScheduleInner model = BinaryData.fromString(
            "{\"properties\":{\"startTime\":\"2021-01-27T11:12:08Z\",\"startTimeOffsetMinutes\":78.03581340438399,\"expiryTime\":\"2021-01-10T03:49:41Z\",\"expiryTimeOffsetMinutes\":37.890044515459905,\"isEnabled\":false,\"nextRun\":\"2021-11-27T11:22:53Z\",\"nextRunOffsetMinutes\":61.31148397624572,\"interval\":\"datadvfvfcjnaeoi\",\"frequency\":\"Day\",\"timeZone\":\"mgorffukisc\",\"advancedSchedule\":{\"weekDays\":[\"hwplefaxvx\",\"l\",\"btgn\",\"nzeyqxtjj\"],\"monthDays\":[829306849,2051044475,1197425041],\"monthlyOccurrences\":[{\"occurrence\":486580824,\"day\":\"Wednesday\"},{\"occurrence\":281911697,\"day\":\"Thursday\"},{\"occurrence\":378934922,\"day\":\"Monday\"}]},\"creationTime\":\"2021-07-13T03:36:56Z\",\"lastModifiedTime\":\"2021-10-25T09:26:46Z\",\"description\":\"lrariaawiu\"},\"id\":\"gy\",\"name\":\"wqfbylyrfgiagt\",\"type\":\"ojocqwogf\"}")
            .toObject(ScheduleInner.class);
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-27T11:12:08Z"), model.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-10T03:49:41Z"), model.expiryTime());
        Assertions.assertEquals(37.890044515459905D, model.expiryTimeOffsetMinutes());
        Assertions.assertEquals(false, model.isEnabled());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-27T11:22:53Z"), model.nextRun());
        Assertions.assertEquals(61.31148397624572D, model.nextRunOffsetMinutes());
        Assertions.assertEquals(ScheduleFrequency.DAY, model.frequency());
        Assertions.assertEquals("mgorffukisc", model.timeZone());
        Assertions.assertEquals("hwplefaxvx", model.advancedSchedule().weekDays().get(0));
        Assertions.assertEquals(829306849, model.advancedSchedule().monthDays().get(0));
        Assertions.assertEquals(486580824, model.advancedSchedule().monthlyOccurrences().get(0).occurrence());
        Assertions.assertEquals(ScheduleDay.WEDNESDAY, model.advancedSchedule().monthlyOccurrences().get(0).day());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-13T03:36:56Z"), model.creationTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-25T09:26:46Z"), model.lastModifiedTime());
        Assertions.assertEquals("lrariaawiu", model.description());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ScheduleInner model = new ScheduleInner().withStartTime(OffsetDateTime.parse("2021-01-27T11:12:08Z"))
            .withExpiryTime(OffsetDateTime.parse("2021-01-10T03:49:41Z"))
            .withExpiryTimeOffsetMinutes(37.890044515459905D)
            .withIsEnabled(false)
            .withNextRun(OffsetDateTime.parse("2021-11-27T11:22:53Z"))
            .withNextRunOffsetMinutes(61.31148397624572D)
            .withInterval("datadvfvfcjnaeoi")
            .withFrequency(ScheduleFrequency.DAY)
            .withTimeZone("mgorffukisc")
            .withAdvancedSchedule(new AdvancedSchedule()
                .withWeekDays(Arrays.asList("hwplefaxvx", "l", "btgn", "nzeyqxtjj"))
                .withMonthDays(Arrays.asList(829306849, 2051044475, 1197425041))
                .withMonthlyOccurrences(Arrays.asList(
                    new AdvancedScheduleMonthlyOccurrence().withOccurrence(486580824).withDay(ScheduleDay.WEDNESDAY),
                    new AdvancedScheduleMonthlyOccurrence().withOccurrence(281911697).withDay(ScheduleDay.THURSDAY),
                    new AdvancedScheduleMonthlyOccurrence().withOccurrence(378934922).withDay(ScheduleDay.MONDAY))))
            .withCreationTime(OffsetDateTime.parse("2021-07-13T03:36:56Z"))
            .withLastModifiedTime(OffsetDateTime.parse("2021-10-25T09:26:46Z"))
            .withDescription("lrariaawiu");
        model = BinaryData.fromObject(model).toObject(ScheduleInner.class);
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-27T11:12:08Z"), model.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-10T03:49:41Z"), model.expiryTime());
        Assertions.assertEquals(37.890044515459905D, model.expiryTimeOffsetMinutes());
        Assertions.assertEquals(false, model.isEnabled());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-27T11:22:53Z"), model.nextRun());
        Assertions.assertEquals(61.31148397624572D, model.nextRunOffsetMinutes());
        Assertions.assertEquals(ScheduleFrequency.DAY, model.frequency());
        Assertions.assertEquals("mgorffukisc", model.timeZone());
        Assertions.assertEquals("hwplefaxvx", model.advancedSchedule().weekDays().get(0));
        Assertions.assertEquals(829306849, model.advancedSchedule().monthDays().get(0));
        Assertions.assertEquals(486580824, model.advancedSchedule().monthlyOccurrences().get(0).occurrence());
        Assertions.assertEquals(ScheduleDay.WEDNESDAY, model.advancedSchedule().monthlyOccurrences().get(0).day());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-13T03:36:56Z"), model.creationTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-25T09:26:46Z"), model.lastModifiedTime());
        Assertions.assertEquals("lrariaawiu", model.description());
    }
}
