// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.automation.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.automation.fluent.models.ScheduleInner;
import com.azure.resourcemanager.automation.models.AdvancedSchedule;
import com.azure.resourcemanager.automation.models.ScheduleFrequency;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class ScheduleInnerTests {
    @Test
    public void testDeserialize() {
        ScheduleInner model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"startTime\":\"2021-03-09T19:20:38Z\",\"startTimeOffsetMinutes\":77.67452967609714,\"expiryTime\":\"2021-04-13T05:47:21Z\",\"expiryTimeOffsetMinutes\":32.273191827788736,\"isEnabled\":true,\"nextRun\":\"2021-02-05T11:40:10Z\",\"nextRunOffsetMinutes\":70.55260355731464,\"frequency\":\"Week\",\"timeZone\":\"dikdfrdbi\",\"advancedSchedule\":{\"weekDays\":[\"geihfql\",\"gwfiwzcxmjpby\",\"phmgtvljvrcmyfq\",\"pgxh\"],\"monthDays\":[1740146281,697137065,143132468,1182665856],\"monthlyOccurrences\":[]},\"creationTime\":\"2021-11-13T19:40:37Z\",\"lastModifiedTime\":\"2021-05-30T07:16:27Z\",\"description\":\"leeyaswl\"},\"id\":\"augmrmfjlr\",\"name\":\"wtoaukhfk\",\"type\":\"cisiz\"}")
                .toObject(ScheduleInner.class);
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-09T19:20:38Z"), model.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-13T05:47:21Z"), model.expiryTime());
        Assertions.assertEquals(32.273191827788736D, model.expiryTimeOffsetMinutes());
        Assertions.assertEquals(true, model.isEnabled());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-05T11:40:10Z"), model.nextRun());
        Assertions.assertEquals(70.55260355731464D, model.nextRunOffsetMinutes());
        Assertions.assertEquals(ScheduleFrequency.WEEK, model.frequency());
        Assertions.assertEquals("dikdfrdbi", model.timeZone());
        Assertions.assertEquals("geihfql", model.advancedSchedule().weekDays().get(0));
        Assertions.assertEquals(1740146281, model.advancedSchedule().monthDays().get(0));
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-13T19:40:37Z"), model.creationTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-30T07:16:27Z"), model.lastModifiedTime());
        Assertions.assertEquals("leeyaswl", model.description());
    }

    @Test
    public void testSerialize() {
        ScheduleInner model =
            new ScheduleInner()
                .withStartTime(OffsetDateTime.parse("2021-03-09T19:20:38Z"))
                .withExpiryTime(OffsetDateTime.parse("2021-04-13T05:47:21Z"))
                .withExpiryTimeOffsetMinutes(32.273191827788736D)
                .withIsEnabled(true)
                .withNextRun(OffsetDateTime.parse("2021-02-05T11:40:10Z"))
                .withNextRunOffsetMinutes(70.55260355731464D)
                .withFrequency(ScheduleFrequency.WEEK)
                .withTimeZone("dikdfrdbi")
                .withAdvancedSchedule(
                    new AdvancedSchedule()
                        .withWeekDays(Arrays.asList("geihfql", "gwfiwzcxmjpby", "phmgtvljvrcmyfq", "pgxh"))
                        .withMonthDays(Arrays.asList(1740146281, 697137065, 143132468, 1182665856))
                        .withMonthlyOccurrences(Arrays.asList()))
                .withCreationTime(OffsetDateTime.parse("2021-11-13T19:40:37Z"))
                .withLastModifiedTime(OffsetDateTime.parse("2021-05-30T07:16:27Z"))
                .withDescription("leeyaswl");
        model = BinaryData.fromObject(model).toObject(ScheduleInner.class);
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-09T19:20:38Z"), model.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-13T05:47:21Z"), model.expiryTime());
        Assertions.assertEquals(32.273191827788736D, model.expiryTimeOffsetMinutes());
        Assertions.assertEquals(true, model.isEnabled());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-05T11:40:10Z"), model.nextRun());
        Assertions.assertEquals(70.55260355731464D, model.nextRunOffsetMinutes());
        Assertions.assertEquals(ScheduleFrequency.WEEK, model.frequency());
        Assertions.assertEquals("dikdfrdbi", model.timeZone());
        Assertions.assertEquals("geihfql", model.advancedSchedule().weekDays().get(0));
        Assertions.assertEquals(1740146281, model.advancedSchedule().monthDays().get(0));
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-13T19:40:37Z"), model.creationTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-30T07:16:27Z"), model.lastModifiedTime());
        Assertions.assertEquals("leeyaswl", model.description());
    }
}
