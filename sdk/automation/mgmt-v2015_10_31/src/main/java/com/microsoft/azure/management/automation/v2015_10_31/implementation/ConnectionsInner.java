/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.automation.v2015_10_31.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.automation.v2015_10_31.ConnectionCreateOrUpdateParameters;
import com.microsoft.azure.management.automation.v2015_10_31.ConnectionUpdateParameters;
import com.microsoft.azure.management.automation.v2015_10_31.ErrorResponseException;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.PATCH;
import retrofit2.http.Path;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Connections.
 */
public class ConnectionsInner {
    /** The Retrofit service to perform REST calls. */
    private ConnectionsService service;
    /** The service client containing this operation class. */
    private AutomationClientImpl client;

    /**
     * Initializes an instance of ConnectionsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public ConnectionsInner(Retrofit retrofit, AutomationClientImpl client) {
        this.service = retrofit.create(ConnectionsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Connections to be
     * used by Retrofit to perform actually REST calls.
     */
    interface ConnectionsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.automation.v2015_10_31.Connections delete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/connections/{connectionName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("resourceGroupName") String resourceGroupName, @Path("automationAccountName") String automationAccountName, @Path("connectionName") String connectionName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.automation.v2015_10_31.Connections get" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/connections/{connectionName}")
        Observable<Response<ResponseBody>> get(@Path("resourceGroupName") String resourceGroupName, @Path("automationAccountName") String automationAccountName, @Path("connectionName") String connectionName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.automation.v2015_10_31.Connections createOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/connections/{connectionName}")
        Observable<Response<ResponseBody>> createOrUpdate(@Path("resourceGroupName") String resourceGroupName, @Path("automationAccountName") String automationAccountName, @Path("connectionName") String connectionName, @Path("subscriptionId") String subscriptionId, @Body ConnectionCreateOrUpdateParameters parameters, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.automation.v2015_10_31.Connections update" })
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/connections/{connectionName}")
        Observable<Response<ResponseBody>> update(@Path("resourceGroupName") String resourceGroupName, @Path("automationAccountName") String automationAccountName, @Path("connectionName") String connectionName, @Path("subscriptionId") String subscriptionId, @Body ConnectionUpdateParameters parameters, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.automation.v2015_10_31.Connections listByAutomationAccount" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/connections")
        Observable<Response<ResponseBody>> listByAutomationAccount(@Path("resourceGroupName") String resourceGroupName, @Path("automationAccountName") String automationAccountName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.automation.v2015_10_31.Connections listByAutomationAccountNext" })
        @GET
        Observable<Response<ResponseBody>> listByAutomationAccountNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Delete the connection.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @param connectionName The name of connection.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ConnectionInner object if successful.
     */
    public ConnectionInner delete(String resourceGroupName, String automationAccountName, String connectionName) {
        return deleteWithServiceResponseAsync(resourceGroupName, automationAccountName, connectionName).toBlocking().single().body();
    }

    /**
     * Delete the connection.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @param connectionName The name of connection.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ConnectionInner> deleteAsync(String resourceGroupName, String automationAccountName, String connectionName, final ServiceCallback<ConnectionInner> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(resourceGroupName, automationAccountName, connectionName), serviceCallback);
    }

    /**
     * Delete the connection.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @param connectionName The name of connection.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ConnectionInner object
     */
    public Observable<ConnectionInner> deleteAsync(String resourceGroupName, String automationAccountName, String connectionName) {
        return deleteWithServiceResponseAsync(resourceGroupName, automationAccountName, connectionName).map(new Func1<ServiceResponse<ConnectionInner>, ConnectionInner>() {
            @Override
            public ConnectionInner call(ServiceResponse<ConnectionInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Delete the connection.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @param connectionName The name of connection.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ConnectionInner object
     */
    public Observable<ServiceResponse<ConnectionInner>> deleteWithServiceResponseAsync(String resourceGroupName, String automationAccountName, String connectionName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (automationAccountName == null) {
            throw new IllegalArgumentException("Parameter automationAccountName is required and cannot be null.");
        }
        if (connectionName == null) {
            throw new IllegalArgumentException("Parameter connectionName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        final String apiVersion = "2015-10-31";
        return service.delete(resourceGroupName, automationAccountName, connectionName, this.client.subscriptionId(), apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ConnectionInner>>>() {
                @Override
                public Observable<ServiceResponse<ConnectionInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ConnectionInner> clientResponse = deleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ConnectionInner> deleteDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ConnectionInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ConnectionInner>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Retrieve the connection identified by connection name.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @param connectionName The name of connection.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ConnectionInner object if successful.
     */
    public ConnectionInner get(String resourceGroupName, String automationAccountName, String connectionName) {
        return getWithServiceResponseAsync(resourceGroupName, automationAccountName, connectionName).toBlocking().single().body();
    }

    /**
     * Retrieve the connection identified by connection name.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @param connectionName The name of connection.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ConnectionInner> getAsync(String resourceGroupName, String automationAccountName, String connectionName, final ServiceCallback<ConnectionInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(resourceGroupName, automationAccountName, connectionName), serviceCallback);
    }

    /**
     * Retrieve the connection identified by connection name.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @param connectionName The name of connection.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ConnectionInner object
     */
    public Observable<ConnectionInner> getAsync(String resourceGroupName, String automationAccountName, String connectionName) {
        return getWithServiceResponseAsync(resourceGroupName, automationAccountName, connectionName).map(new Func1<ServiceResponse<ConnectionInner>, ConnectionInner>() {
            @Override
            public ConnectionInner call(ServiceResponse<ConnectionInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Retrieve the connection identified by connection name.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @param connectionName The name of connection.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ConnectionInner object
     */
    public Observable<ServiceResponse<ConnectionInner>> getWithServiceResponseAsync(String resourceGroupName, String automationAccountName, String connectionName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (automationAccountName == null) {
            throw new IllegalArgumentException("Parameter automationAccountName is required and cannot be null.");
        }
        if (connectionName == null) {
            throw new IllegalArgumentException("Parameter connectionName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        final String apiVersion = "2015-10-31";
        return service.get(resourceGroupName, automationAccountName, connectionName, this.client.subscriptionId(), apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ConnectionInner>>>() {
                @Override
                public Observable<ServiceResponse<ConnectionInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ConnectionInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ConnectionInner> getDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ConnectionInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ConnectionInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Create or update a connection.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @param connectionName The parameters supplied to the create or update connection operation.
     * @param parameters The parameters supplied to the create or update connection operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ConnectionInner object if successful.
     */
    public ConnectionInner createOrUpdate(String resourceGroupName, String automationAccountName, String connectionName, ConnectionCreateOrUpdateParameters parameters) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, automationAccountName, connectionName, parameters).toBlocking().single().body();
    }

    /**
     * Create or update a connection.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @param connectionName The parameters supplied to the create or update connection operation.
     * @param parameters The parameters supplied to the create or update connection operation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ConnectionInner> createOrUpdateAsync(String resourceGroupName, String automationAccountName, String connectionName, ConnectionCreateOrUpdateParameters parameters, final ServiceCallback<ConnectionInner> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateWithServiceResponseAsync(resourceGroupName, automationAccountName, connectionName, parameters), serviceCallback);
    }

    /**
     * Create or update a connection.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @param connectionName The parameters supplied to the create or update connection operation.
     * @param parameters The parameters supplied to the create or update connection operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ConnectionInner object
     */
    public Observable<ConnectionInner> createOrUpdateAsync(String resourceGroupName, String automationAccountName, String connectionName, ConnectionCreateOrUpdateParameters parameters) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, automationAccountName, connectionName, parameters).map(new Func1<ServiceResponse<ConnectionInner>, ConnectionInner>() {
            @Override
            public ConnectionInner call(ServiceResponse<ConnectionInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create or update a connection.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @param connectionName The parameters supplied to the create or update connection operation.
     * @param parameters The parameters supplied to the create or update connection operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ConnectionInner object
     */
    public Observable<ServiceResponse<ConnectionInner>> createOrUpdateWithServiceResponseAsync(String resourceGroupName, String automationAccountName, String connectionName, ConnectionCreateOrUpdateParameters parameters) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (automationAccountName == null) {
            throw new IllegalArgumentException("Parameter automationAccountName is required and cannot be null.");
        }
        if (connectionName == null) {
            throw new IllegalArgumentException("Parameter connectionName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        Validator.validate(parameters);
        final String apiVersion = "2015-10-31";
        return service.createOrUpdate(resourceGroupName, automationAccountName, connectionName, this.client.subscriptionId(), parameters, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ConnectionInner>>>() {
                @Override
                public Observable<ServiceResponse<ConnectionInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ConnectionInner> clientResponse = createOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ConnectionInner> createOrUpdateDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ConnectionInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ConnectionInner>() { }.getType())
                .register(201, new TypeToken<ConnectionInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Update a connection.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @param connectionName The parameters supplied to the update a connection operation.
     * @param parameters The parameters supplied to the update a connection operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ConnectionInner object if successful.
     */
    public ConnectionInner update(String resourceGroupName, String automationAccountName, String connectionName, ConnectionUpdateParameters parameters) {
        return updateWithServiceResponseAsync(resourceGroupName, automationAccountName, connectionName, parameters).toBlocking().single().body();
    }

    /**
     * Update a connection.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @param connectionName The parameters supplied to the update a connection operation.
     * @param parameters The parameters supplied to the update a connection operation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ConnectionInner> updateAsync(String resourceGroupName, String automationAccountName, String connectionName, ConnectionUpdateParameters parameters, final ServiceCallback<ConnectionInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(resourceGroupName, automationAccountName, connectionName, parameters), serviceCallback);
    }

    /**
     * Update a connection.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @param connectionName The parameters supplied to the update a connection operation.
     * @param parameters The parameters supplied to the update a connection operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ConnectionInner object
     */
    public Observable<ConnectionInner> updateAsync(String resourceGroupName, String automationAccountName, String connectionName, ConnectionUpdateParameters parameters) {
        return updateWithServiceResponseAsync(resourceGroupName, automationAccountName, connectionName, parameters).map(new Func1<ServiceResponse<ConnectionInner>, ConnectionInner>() {
            @Override
            public ConnectionInner call(ServiceResponse<ConnectionInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Update a connection.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @param connectionName The parameters supplied to the update a connection operation.
     * @param parameters The parameters supplied to the update a connection operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ConnectionInner object
     */
    public Observable<ServiceResponse<ConnectionInner>> updateWithServiceResponseAsync(String resourceGroupName, String automationAccountName, String connectionName, ConnectionUpdateParameters parameters) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (automationAccountName == null) {
            throw new IllegalArgumentException("Parameter automationAccountName is required and cannot be null.");
        }
        if (connectionName == null) {
            throw new IllegalArgumentException("Parameter connectionName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        Validator.validate(parameters);
        final String apiVersion = "2015-10-31";
        return service.update(resourceGroupName, automationAccountName, connectionName, this.client.subscriptionId(), parameters, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ConnectionInner>>>() {
                @Override
                public Observable<ServiceResponse<ConnectionInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ConnectionInner> clientResponse = updateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ConnectionInner> updateDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ConnectionInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ConnectionInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Retrieve a list of connections.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ConnectionInner&gt; object if successful.
     */
    public PagedList<ConnectionInner> listByAutomationAccount(final String resourceGroupName, final String automationAccountName) {
        ServiceResponse<Page<ConnectionInner>> response = listByAutomationAccountSinglePageAsync(resourceGroupName, automationAccountName).toBlocking().single();
        return new PagedList<ConnectionInner>(response.body()) {
            @Override
            public Page<ConnectionInner> nextPage(String nextPageLink) {
                return listByAutomationAccountNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Retrieve a list of connections.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ConnectionInner>> listByAutomationAccountAsync(final String resourceGroupName, final String automationAccountName, final ListOperationCallback<ConnectionInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByAutomationAccountSinglePageAsync(resourceGroupName, automationAccountName),
            new Func1<String, Observable<ServiceResponse<Page<ConnectionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ConnectionInner>>> call(String nextPageLink) {
                    return listByAutomationAccountNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Retrieve a list of connections.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ConnectionInner&gt; object
     */
    public Observable<Page<ConnectionInner>> listByAutomationAccountAsync(final String resourceGroupName, final String automationAccountName) {
        return listByAutomationAccountWithServiceResponseAsync(resourceGroupName, automationAccountName)
            .map(new Func1<ServiceResponse<Page<ConnectionInner>>, Page<ConnectionInner>>() {
                @Override
                public Page<ConnectionInner> call(ServiceResponse<Page<ConnectionInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Retrieve a list of connections.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ConnectionInner&gt; object
     */
    public Observable<ServiceResponse<Page<ConnectionInner>>> listByAutomationAccountWithServiceResponseAsync(final String resourceGroupName, final String automationAccountName) {
        return listByAutomationAccountSinglePageAsync(resourceGroupName, automationAccountName)
            .concatMap(new Func1<ServiceResponse<Page<ConnectionInner>>, Observable<ServiceResponse<Page<ConnectionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ConnectionInner>>> call(ServiceResponse<Page<ConnectionInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByAutomationAccountNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Retrieve a list of connections.
     *
    ServiceResponse<PageImpl<ConnectionInner>> * @param resourceGroupName Name of an Azure Resource group.
    ServiceResponse<PageImpl<ConnectionInner>> * @param automationAccountName The name of the automation account.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ConnectionInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ConnectionInner>>> listByAutomationAccountSinglePageAsync(final String resourceGroupName, final String automationAccountName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (automationAccountName == null) {
            throw new IllegalArgumentException("Parameter automationAccountName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        final String apiVersion = "2015-10-31";
        return service.listByAutomationAccount(resourceGroupName, automationAccountName, this.client.subscriptionId(), apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ConnectionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ConnectionInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ConnectionInner>> result = listByAutomationAccountDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ConnectionInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<ConnectionInner>> listByAutomationAccountDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<ConnectionInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<ConnectionInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Retrieve a list of connections.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ConnectionInner&gt; object if successful.
     */
    public PagedList<ConnectionInner> listByAutomationAccountNext(final String nextPageLink) {
        ServiceResponse<Page<ConnectionInner>> response = listByAutomationAccountNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<ConnectionInner>(response.body()) {
            @Override
            public Page<ConnectionInner> nextPage(String nextPageLink) {
                return listByAutomationAccountNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Retrieve a list of connections.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ConnectionInner>> listByAutomationAccountNextAsync(final String nextPageLink, final ServiceFuture<List<ConnectionInner>> serviceFuture, final ListOperationCallback<ConnectionInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByAutomationAccountNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<ConnectionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ConnectionInner>>> call(String nextPageLink) {
                    return listByAutomationAccountNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Retrieve a list of connections.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ConnectionInner&gt; object
     */
    public Observable<Page<ConnectionInner>> listByAutomationAccountNextAsync(final String nextPageLink) {
        return listByAutomationAccountNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<ConnectionInner>>, Page<ConnectionInner>>() {
                @Override
                public Page<ConnectionInner> call(ServiceResponse<Page<ConnectionInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Retrieve a list of connections.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ConnectionInner&gt; object
     */
    public Observable<ServiceResponse<Page<ConnectionInner>>> listByAutomationAccountNextWithServiceResponseAsync(final String nextPageLink) {
        return listByAutomationAccountNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<ConnectionInner>>, Observable<ServiceResponse<Page<ConnectionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ConnectionInner>>> call(ServiceResponse<Page<ConnectionInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByAutomationAccountNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Retrieve a list of connections.
     *
    ServiceResponse<PageImpl<ConnectionInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ConnectionInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ConnectionInner>>> listByAutomationAccountNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByAutomationAccountNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ConnectionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ConnectionInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ConnectionInner>> result = listByAutomationAccountNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ConnectionInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<ConnectionInner>> listByAutomationAccountNextDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<ConnectionInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<ConnectionInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

}
