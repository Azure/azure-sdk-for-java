/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.automation.v2015_10_31.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.automation.v2015_10_31.Activitys;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.automation.v2015_10_31.Activity;

class ActivitysImpl extends WrapperImpl<ActivitysInner> implements Activitys {
    private final AutomationManager manager;

    ActivitysImpl(AutomationManager manager) {
        super(manager.inner().activitys());
        this.manager = manager;
    }

    public AutomationManager manager() {
        return this.manager;
    }

    private ActivityImpl wrapModel(ActivityInner inner) {
        return  new ActivityImpl(inner, manager());
    }

    @Override
    public Observable<Activity> listByModuleAsync(final String resourceGroupName, final String automationAccountName, final String moduleName) {
        ActivitysInner client = this.inner();
        return client.listByModuleAsync(resourceGroupName, automationAccountName, moduleName)
        .flatMapIterable(new Func1<Page<ActivityInner>, Iterable<ActivityInner>>() {
            @Override
            public Iterable<ActivityInner> call(Page<ActivityInner> page) {
                return page.items();
            }
        })
        .map(new Func1<ActivityInner, Activity>() {
            @Override
            public Activity call(ActivityInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public Observable<Activity> getAsync(String resourceGroupName, String automationAccountName, String moduleName, String activityName) {
        ActivitysInner client = this.inner();
        return client.getAsync(resourceGroupName, automationAccountName, moduleName, activityName)
        .map(new Func1<ActivityInner, Activity>() {
            @Override
            public Activity call(ActivityInner inner) {
                return wrapModel(inner);
            }
       });
    }

}
