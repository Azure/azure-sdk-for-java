/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.automation.v2015_10_31.implementation;

import com.microsoft.azure.management.automation.v2015_10_31.Schedule;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import com.microsoft.azure.management.automation.v2015_10_31.ScheduleUpdateParameters;
import com.microsoft.azure.management.automation.v2015_10_31.ScheduleCreateOrUpdateParameters;
import org.joda.time.DateTime;
import com.microsoft.azure.management.automation.v2015_10_31.AdvancedSchedule;
import com.microsoft.azure.management.automation.v2015_10_31.ScheduleFrequency;
import rx.functions.Func1;

class ScheduleImpl extends CreatableUpdatableImpl<Schedule, ScheduleInner, ScheduleImpl> implements Schedule, Schedule.Definition, Schedule.Update {
    private final AutomationManager manager;
    private String resourceGroupName;
    private String automationAccountName;
    private String scheduleName;
    private ScheduleCreateOrUpdateParameters createParameter;
    private ScheduleUpdateParameters updateParameter;

    ScheduleImpl(String name, AutomationManager manager) {
        super(name, new ScheduleInner());
        this.manager = manager;
        // Set resource name
        this.scheduleName = name;
        //
        this.createParameter = new ScheduleCreateOrUpdateParameters();
        this.updateParameter = new ScheduleUpdateParameters();
    }

    ScheduleImpl(ScheduleInner inner, AutomationManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.scheduleName = inner.name();
        // resource ancestor names
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.automationAccountName = IdParsingUtils.getValueFromIdByName(inner.id(), "automationAccounts");
        this.scheduleName = IdParsingUtils.getValueFromIdByName(inner.id(), "schedules");
        //
        this.createParameter = new ScheduleCreateOrUpdateParameters();
        this.updateParameter = new ScheduleUpdateParameters();
    }

    @Override
    public AutomationManager manager() {
        return this.manager;
    }

    @Override
    public Observable<Schedule> createResourceAsync() {
        SchedulesInner client = this.manager().inner().schedules();
        return client.createOrUpdateAsync(this.resourceGroupName, this.automationAccountName, this.scheduleName, this.createParameter)
            .map(new Func1<ScheduleInner, ScheduleInner>() {
               @Override
               public ScheduleInner call(ScheduleInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<Schedule> updateResourceAsync() {
        SchedulesInner client = this.manager().inner().schedules();
        return client.updateAsync(this.resourceGroupName, this.automationAccountName, this.scheduleName, this.updateParameter)
            .map(new Func1<ScheduleInner, ScheduleInner>() {
               @Override
               public ScheduleInner call(ScheduleInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<ScheduleInner> getInnerAsync() {
        SchedulesInner client = this.manager().inner().schedules();
        return client.getAsync(this.resourceGroupName, this.automationAccountName, this.scheduleName);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }

    private void resetCreateUpdateParameters() {
        this.createParameter = new ScheduleCreateOrUpdateParameters();
        this.updateParameter = new ScheduleUpdateParameters();
    }

    @Override
    public AdvancedSchedule advancedSchedule() {
        return this.inner().advancedSchedule();
    }

    @Override
    public DateTime creationTime() {
        return this.inner().creationTime();
    }

    @Override
    public String description() {
        return this.inner().description();
    }

    @Override
    public DateTime expiryTime() {
        return this.inner().expiryTime();
    }

    @Override
    public double expiryTimeOffsetMinutes() {
        return this.inner().expiryTimeOffsetMinutes();
    }

    @Override
    public ScheduleFrequency frequency() {
        return this.inner().frequency();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public Object interval() {
        return this.inner().interval();
    }

    @Override
    public Boolean isEnabled() {
        return this.inner().isEnabled();
    }

    @Override
    public DateTime lastModifiedTime() {
        return this.inner().lastModifiedTime();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public DateTime nextRun() {
        return this.inner().nextRun();
    }

    @Override
    public double nextRunOffsetMinutes() {
        return this.inner().nextRunOffsetMinutes();
    }

    @Override
    public DateTime startTime() {
        return this.inner().startTime();
    }

    @Override
    public double startTimeOffsetMinutes() {
        return this.inner().startTimeOffsetMinutes();
    }

    @Override
    public String timeZone() {
        return this.inner().timeZone();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public ScheduleImpl withExistingAutomationAccount(String resourceGroupName, String automationAccountName) {
        this.resourceGroupName = resourceGroupName;
        this.automationAccountName = automationAccountName;
        return this;
    }

    @Override
    public ScheduleImpl withFrequency(ScheduleFrequency frequency) {
        this.createParameter.withFrequency(frequency);
        return this;
    }

    @Override
    public ScheduleImpl withStartTime(DateTime startTime) {
        this.createParameter.withStartTime(startTime);
        return this;
    }

    @Override
    public ScheduleImpl withAdvancedSchedule(AdvancedSchedule advancedSchedule) {
        this.createParameter.withAdvancedSchedule(advancedSchedule);
        return this;
    }

    @Override
    public ScheduleImpl withExpiryTime(DateTime expiryTime) {
        this.createParameter.withExpiryTime(expiryTime);
        return this;
    }

    @Override
    public ScheduleImpl withInterval(Object interval) {
        this.createParameter.withInterval(interval);
        return this;
    }

    @Override
    public ScheduleImpl withTimeZone(String timeZone) {
        this.createParameter.withTimeZone(timeZone);
        return this;
    }

    @Override
    public ScheduleImpl withIsEnabled(Boolean isEnabled) {
        this.updateParameter.withIsEnabled(isEnabled);
        return this;
    }

    @Override
    public ScheduleImpl withName(String name) {
        if (isInCreateMode()) {
            this.createParameter.withName(name);
        } else {
            this.updateParameter.withName(name);
        }
        return this;
    }

    @Override
    public ScheduleImpl withDescription(String description) {
        if (isInCreateMode()) {
            this.createParameter.withDescription(description);
        } else {
            this.updateParameter.withDescription(description);
        }
        return this;
    }

}
