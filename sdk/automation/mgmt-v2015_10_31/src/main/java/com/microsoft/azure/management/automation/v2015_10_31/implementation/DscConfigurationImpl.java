/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.automation.v2015_10_31.implementation;

import com.microsoft.azure.management.automation.v2015_10_31.DscConfiguration;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import com.microsoft.azure.management.automation.v2015_10_31.DscConfigurationUpdateParameters;
import java.util.Map;
import com.microsoft.azure.management.automation.v2015_10_31.DscConfigurationCreateOrUpdateParameters;
import org.joda.time.DateTime;
import com.microsoft.azure.management.automation.v2015_10_31.DscConfigurationParameter;
import com.microsoft.azure.management.automation.v2015_10_31.DscConfigurationProvisioningState;
import com.microsoft.azure.management.automation.v2015_10_31.ContentSource;
import com.microsoft.azure.management.automation.v2015_10_31.DscConfigurationState;
import rx.functions.Func1;

class DscConfigurationImpl extends CreatableUpdatableImpl<DscConfiguration, DscConfigurationInner, DscConfigurationImpl> implements DscConfiguration, DscConfiguration.Definition, DscConfiguration.Update {
    private final AutomationManager manager;
    private String resourceGroupName;
    private String automationAccountName;
    private String configurationName;
    private DscConfigurationCreateOrUpdateParameters createParameter;
    private DscConfigurationUpdateParameters updateParameter;

    DscConfigurationImpl(String name, AutomationManager manager) {
        super(name, new DscConfigurationInner());
        this.manager = manager;
        // Set resource name
        this.configurationName = name;
        //
        this.createParameter = new DscConfigurationCreateOrUpdateParameters();
        this.updateParameter = new DscConfigurationUpdateParameters();
    }

    DscConfigurationImpl(DscConfigurationInner inner, AutomationManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.configurationName = inner.name();
        // resource ancestor names
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.automationAccountName = IdParsingUtils.getValueFromIdByName(inner.id(), "automationAccounts");
        this.configurationName = IdParsingUtils.getValueFromIdByName(inner.id(), "configurations");
        //
        this.createParameter = new DscConfigurationCreateOrUpdateParameters();
        this.updateParameter = new DscConfigurationUpdateParameters();
    }

    @Override
    public AutomationManager manager() {
        return this.manager;
    }

    @Override
    public Observable<DscConfiguration> createResourceAsync() {
        DscConfigurationsInner client = this.manager().inner().dscConfigurations();
        return client.createOrUpdateAsync(this.resourceGroupName, this.automationAccountName, this.configurationName, this.createParameter)
            .map(new Func1<DscConfigurationInner, DscConfigurationInner>() {
               @Override
               public DscConfigurationInner call(DscConfigurationInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<DscConfiguration> updateResourceAsync() {
        DscConfigurationsInner client = this.manager().inner().dscConfigurations();
        return client.updateAsync(this.resourceGroupName, this.automationAccountName, this.configurationName, this.updateParameter)
            .map(new Func1<DscConfigurationInner, DscConfigurationInner>() {
               @Override
               public DscConfigurationInner call(DscConfigurationInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<DscConfigurationInner> getInnerAsync() {
        DscConfigurationsInner client = this.manager().inner().dscConfigurations();
        return client.getAsync(this.resourceGroupName, this.automationAccountName, this.configurationName);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }

    private void resetCreateUpdateParameters() {
        this.createParameter = new DscConfigurationCreateOrUpdateParameters();
        this.updateParameter = new DscConfigurationUpdateParameters();
    }

    @Override
    public DateTime creationTime() {
        return this.inner().creationTime();
    }

    @Override
    public String description() {
        return this.inner().description();
    }

    @Override
    public String etag() {
        return this.inner().etag();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public Integer jobCount() {
        return this.inner().jobCount();
    }

    @Override
    public DateTime lastModifiedTime() {
        return this.inner().lastModifiedTime();
    }

    @Override
    public String location() {
        return this.inner().location();
    }

    @Override
    public Boolean logVerbose() {
        return this.inner().logVerbose();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public int nodeConfigurationCount() {
        return this.inner().nodeConfigurationCount();
    }

    @Override
    public Map<String, DscConfigurationParameter> parameters() {
        return this.inner().parameters();
    }

    @Override
    public DscConfigurationProvisioningState provisioningState() {
        return this.inner().provisioningState();
    }

    @Override
    public ContentSource source() {
        return this.inner().source();
    }

    @Override
    public DscConfigurationState state() {
        return this.inner().state();
    }

    @Override
    public Map<String, String> tags() {
        return this.inner().getTags();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public DscConfigurationImpl withExistingAutomationAccount(String resourceGroupName, String automationAccountName) {
        this.resourceGroupName = resourceGroupName;
        this.automationAccountName = automationAccountName;
        return this;
    }

    @Override
    public DscConfigurationImpl withSource(ContentSource source) {
        this.createParameter.withSource(source);
        return this;
    }

    @Override
    public DscConfigurationImpl withLocation(String location) {
        this.createParameter.withLocation(location);
        return this;
    }

    @Override
    public DscConfigurationImpl withDescription(String description) {
        if (isInCreateMode()) {
            this.createParameter.withDescription(description);
        } else {
            this.updateParameter.withDescription(description);
        }
        return this;
    }

    @Override
    public DscConfigurationImpl withLogProgress(Boolean logProgress) {
        if (isInCreateMode()) {
            this.createParameter.withLogProgress(logProgress);
        } else {
            this.updateParameter.withLogProgress(logProgress);
        }
        return this;
    }

    @Override
    public DscConfigurationImpl withLogVerbose(Boolean logVerbose) {
        if (isInCreateMode()) {
            this.createParameter.withLogVerbose(logVerbose);
        } else {
            this.updateParameter.withLogVerbose(logVerbose);
        }
        return this;
    }

    @Override
    public DscConfigurationImpl withName(String name) {
        if (isInCreateMode()) {
            this.createParameter.withName(name);
        } else {
            this.updateParameter.withName(name);
        }
        return this;
    }

    @Override
    public DscConfigurationImpl withParameters(Map<String, DscConfigurationParameter> parameters) {
        if (isInCreateMode()) {
            this.createParameter.withParameters(parameters);
        } else {
            this.updateParameter.withParameters(parameters);
        }
        return this;
    }

    @Override
    public DscConfigurationImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.createParameter.withTags(tags);
        } else {
            this.updateParameter.withTags(tags);
        }
        return this;
    }

}
