/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * abc
 */

package com.microsoft.azure.management.automation.v2015_10_31.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.automation.v2015_10_31.NodeReports;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.management.automation.v2015_10_31.DscNodeReport;
import com.microsoft.azure.Page;
import rx.Completable;

class NodeReportsImpl extends WrapperImpl<NodeReportsInner> implements NodeReports {
    private final AutomationManager manager;

    NodeReportsImpl(AutomationManager manager) {
        super(manager.inner().nodeReports());
        this.manager = manager;
    }

    public AutomationManager manager() {
        return this.manager;
    }

    private DscNodeReportImpl wrapDscNodeReportModel(DscNodeReportInner inner) {
        return  new DscNodeReportImpl(inner, manager());
    }

    private Observable<DscNodeReportInner> getDscNodeReportInnerUsingNodeReportsInnerAsync(String id) {
        String resourceGroupName = IdParsingUtils.getValueFromIdByName(id, "resourceGroups");
        String automationAccountName = IdParsingUtils.getValueFromIdByName(id, "automationAccounts");
        String nodeId = IdParsingUtils.getValueFromIdByName(id, "nodes");
        String reportId = IdParsingUtils.getValueFromIdByName(id, "reports");
        NodeReportsInner client = this.inner();
        return client.getAsync(resourceGroupName, automationAccountName, nodeId, reportId);
    }

    @Override
    public Observable<DscNodeReport> getAsync(String resourceGroupName, String automationAccountName, String nodeId, String reportId) {
        NodeReportsInner client = this.inner();
        return client.getAsync(resourceGroupName, automationAccountName, nodeId, reportId)
        .map(new Func1<DscNodeReportInner, DscNodeReport>() {
            @Override
            public DscNodeReport call(DscNodeReportInner inner) {
                return wrapDscNodeReportModel(inner);
            }
       });
    }

    @Override
    public Observable<DscNodeReport> listByNodeAsync(final String resourceGroupName, final String automationAccountName, final String nodeId) {
        NodeReportsInner client = this.inner();
        return client.listByNodeAsync(resourceGroupName, automationAccountName, nodeId)
        .flatMapIterable(new Func1<Page<DscNodeReportInner>, Iterable<DscNodeReportInner>>() {
            @Override
            public Iterable<DscNodeReportInner> call(Page<DscNodeReportInner> page) {
                return page.items();
            }
        })
        .map(new Func1<DscNodeReportInner, DscNodeReport>() {
            @Override
            public DscNodeReport call(DscNodeReportInner inner) {
                return wrapDscNodeReportModel(inner);
            }
        });
    }

    @Override
    public Completable getContentAsync(String resourceGroupName, String automationAccountName, String nodeId, String reportId) {
        NodeReportsInner client = this.inner();
        return client.getContentAsync(resourceGroupName, automationAccountName, nodeId, reportId).toCompletable();
    }

}
