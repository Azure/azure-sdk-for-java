/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.automation.v2015_10_31.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.automation.v2015_10_31.ErrorResponseException;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in NodeReports.
 */
public class NodeReportsInner {
    /** The Retrofit service to perform REST calls. */
    private NodeReportsService service;
    /** The service client containing this operation class. */
    private AutomationClientImpl client;

    /**
     * Initializes an instance of NodeReportsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public NodeReportsInner(Retrofit retrofit, AutomationClientImpl client) {
        this.service = retrofit.create(NodeReportsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for NodeReports to be
     * used by Retrofit to perform actually REST calls.
     */
    interface NodeReportsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.automation.v2015_10_31.NodeReports listByNode" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/nodes/{nodeId}/reports")
        Observable<Response<ResponseBody>> listByNode(@Path("resourceGroupName") String resourceGroupName, @Path("automationAccountName") String automationAccountName, @Path("nodeId") String nodeId, @Path("subscriptionId") String subscriptionId, @Query("$filter") String filter, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.automation.v2015_10_31.NodeReports get" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/nodes/{nodeId}/reports/{reportId}")
        Observable<Response<ResponseBody>> get(@Path("resourceGroupName") String resourceGroupName, @Path("automationAccountName") String automationAccountName, @Path("nodeId") String nodeId, @Path("reportId") String reportId, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.automation.v2015_10_31.NodeReports getContent" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/nodes/{nodeId}/reports/{reportId}/content")
        Observable<Response<ResponseBody>> getContent(@Path("resourceGroupName") String resourceGroupName, @Path("automationAccountName") String automationAccountName, @Path("nodeId") String nodeId, @Path("reportId") String reportId, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.automation.v2015_10_31.NodeReports listByNodeNext" })
        @GET
        Observable<Response<ResponseBody>> listByNodeNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Retrieve the Dsc node report list by node id.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @param nodeId The parameters supplied to the list operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;DscNodeReportInner&gt; object if successful.
     */
    public PagedList<DscNodeReportInner> listByNode(final String resourceGroupName, final String automationAccountName, final String nodeId) {
        ServiceResponse<Page<DscNodeReportInner>> response = listByNodeSinglePageAsync(resourceGroupName, automationAccountName, nodeId).toBlocking().single();
        return new PagedList<DscNodeReportInner>(response.body()) {
            @Override
            public Page<DscNodeReportInner> nextPage(String nextPageLink) {
                return listByNodeNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Retrieve the Dsc node report list by node id.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @param nodeId The parameters supplied to the list operation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<DscNodeReportInner>> listByNodeAsync(final String resourceGroupName, final String automationAccountName, final String nodeId, final ListOperationCallback<DscNodeReportInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByNodeSinglePageAsync(resourceGroupName, automationAccountName, nodeId),
            new Func1<String, Observable<ServiceResponse<Page<DscNodeReportInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DscNodeReportInner>>> call(String nextPageLink) {
                    return listByNodeNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Retrieve the Dsc node report list by node id.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @param nodeId The parameters supplied to the list operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;DscNodeReportInner&gt; object
     */
    public Observable<Page<DscNodeReportInner>> listByNodeAsync(final String resourceGroupName, final String automationAccountName, final String nodeId) {
        return listByNodeWithServiceResponseAsync(resourceGroupName, automationAccountName, nodeId)
            .map(new Func1<ServiceResponse<Page<DscNodeReportInner>>, Page<DscNodeReportInner>>() {
                @Override
                public Page<DscNodeReportInner> call(ServiceResponse<Page<DscNodeReportInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Retrieve the Dsc node report list by node id.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @param nodeId The parameters supplied to the list operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;DscNodeReportInner&gt; object
     */
    public Observable<ServiceResponse<Page<DscNodeReportInner>>> listByNodeWithServiceResponseAsync(final String resourceGroupName, final String automationAccountName, final String nodeId) {
        return listByNodeSinglePageAsync(resourceGroupName, automationAccountName, nodeId)
            .concatMap(new Func1<ServiceResponse<Page<DscNodeReportInner>>, Observable<ServiceResponse<Page<DscNodeReportInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DscNodeReportInner>>> call(ServiceResponse<Page<DscNodeReportInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByNodeNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Retrieve the Dsc node report list by node id.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @param nodeId The parameters supplied to the list operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;DscNodeReportInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<DscNodeReportInner>>> listByNodeSinglePageAsync(final String resourceGroupName, final String automationAccountName, final String nodeId) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (automationAccountName == null) {
            throw new IllegalArgumentException("Parameter automationAccountName is required and cannot be null.");
        }
        if (nodeId == null) {
            throw new IllegalArgumentException("Parameter nodeId is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        final String apiVersion = "2015-10-31";
        final String filter = null;
        return service.listByNode(resourceGroupName, automationAccountName, nodeId, this.client.subscriptionId(), filter, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<DscNodeReportInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DscNodeReportInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<DscNodeReportInner>> result = listByNodeDelegate(response);
                        return Observable.just(new ServiceResponse<Page<DscNodeReportInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Retrieve the Dsc node report list by node id.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @param nodeId The parameters supplied to the list operation.
     * @param filter The filter to apply on the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;DscNodeReportInner&gt; object if successful.
     */
    public PagedList<DscNodeReportInner> listByNode(final String resourceGroupName, final String automationAccountName, final String nodeId, final String filter) {
        ServiceResponse<Page<DscNodeReportInner>> response = listByNodeSinglePageAsync(resourceGroupName, automationAccountName, nodeId, filter).toBlocking().single();
        return new PagedList<DscNodeReportInner>(response.body()) {
            @Override
            public Page<DscNodeReportInner> nextPage(String nextPageLink) {
                return listByNodeNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Retrieve the Dsc node report list by node id.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @param nodeId The parameters supplied to the list operation.
     * @param filter The filter to apply on the operation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<DscNodeReportInner>> listByNodeAsync(final String resourceGroupName, final String automationAccountName, final String nodeId, final String filter, final ListOperationCallback<DscNodeReportInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByNodeSinglePageAsync(resourceGroupName, automationAccountName, nodeId, filter),
            new Func1<String, Observable<ServiceResponse<Page<DscNodeReportInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DscNodeReportInner>>> call(String nextPageLink) {
                    return listByNodeNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Retrieve the Dsc node report list by node id.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @param nodeId The parameters supplied to the list operation.
     * @param filter The filter to apply on the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;DscNodeReportInner&gt; object
     */
    public Observable<Page<DscNodeReportInner>> listByNodeAsync(final String resourceGroupName, final String automationAccountName, final String nodeId, final String filter) {
        return listByNodeWithServiceResponseAsync(resourceGroupName, automationAccountName, nodeId, filter)
            .map(new Func1<ServiceResponse<Page<DscNodeReportInner>>, Page<DscNodeReportInner>>() {
                @Override
                public Page<DscNodeReportInner> call(ServiceResponse<Page<DscNodeReportInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Retrieve the Dsc node report list by node id.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @param nodeId The parameters supplied to the list operation.
     * @param filter The filter to apply on the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;DscNodeReportInner&gt; object
     */
    public Observable<ServiceResponse<Page<DscNodeReportInner>>> listByNodeWithServiceResponseAsync(final String resourceGroupName, final String automationAccountName, final String nodeId, final String filter) {
        return listByNodeSinglePageAsync(resourceGroupName, automationAccountName, nodeId, filter)
            .concatMap(new Func1<ServiceResponse<Page<DscNodeReportInner>>, Observable<ServiceResponse<Page<DscNodeReportInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DscNodeReportInner>>> call(ServiceResponse<Page<DscNodeReportInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByNodeNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Retrieve the Dsc node report list by node id.
     *
    ServiceResponse<PageImpl<DscNodeReportInner>> * @param resourceGroupName Name of an Azure Resource group.
    ServiceResponse<PageImpl<DscNodeReportInner>> * @param automationAccountName The name of the automation account.
    ServiceResponse<PageImpl<DscNodeReportInner>> * @param nodeId The parameters supplied to the list operation.
    ServiceResponse<PageImpl<DscNodeReportInner>> * @param filter The filter to apply on the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;DscNodeReportInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<DscNodeReportInner>>> listByNodeSinglePageAsync(final String resourceGroupName, final String automationAccountName, final String nodeId, final String filter) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (automationAccountName == null) {
            throw new IllegalArgumentException("Parameter automationAccountName is required and cannot be null.");
        }
        if (nodeId == null) {
            throw new IllegalArgumentException("Parameter nodeId is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        final String apiVersion = "2015-10-31";
        return service.listByNode(resourceGroupName, automationAccountName, nodeId, this.client.subscriptionId(), filter, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<DscNodeReportInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DscNodeReportInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<DscNodeReportInner>> result = listByNodeDelegate(response);
                        return Observable.just(new ServiceResponse<Page<DscNodeReportInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<DscNodeReportInner>> listByNodeDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<DscNodeReportInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<DscNodeReportInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Retrieve the Dsc node report data by node id and report id.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @param nodeId The Dsc node id.
     * @param reportId The report id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the DscNodeReportInner object if successful.
     */
    public DscNodeReportInner get(String resourceGroupName, String automationAccountName, String nodeId, String reportId) {
        return getWithServiceResponseAsync(resourceGroupName, automationAccountName, nodeId, reportId).toBlocking().single().body();
    }

    /**
     * Retrieve the Dsc node report data by node id and report id.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @param nodeId The Dsc node id.
     * @param reportId The report id.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<DscNodeReportInner> getAsync(String resourceGroupName, String automationAccountName, String nodeId, String reportId, final ServiceCallback<DscNodeReportInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(resourceGroupName, automationAccountName, nodeId, reportId), serviceCallback);
    }

    /**
     * Retrieve the Dsc node report data by node id and report id.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @param nodeId The Dsc node id.
     * @param reportId The report id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DscNodeReportInner object
     */
    public Observable<DscNodeReportInner> getAsync(String resourceGroupName, String automationAccountName, String nodeId, String reportId) {
        return getWithServiceResponseAsync(resourceGroupName, automationAccountName, nodeId, reportId).map(new Func1<ServiceResponse<DscNodeReportInner>, DscNodeReportInner>() {
            @Override
            public DscNodeReportInner call(ServiceResponse<DscNodeReportInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Retrieve the Dsc node report data by node id and report id.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @param nodeId The Dsc node id.
     * @param reportId The report id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DscNodeReportInner object
     */
    public Observable<ServiceResponse<DscNodeReportInner>> getWithServiceResponseAsync(String resourceGroupName, String automationAccountName, String nodeId, String reportId) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (automationAccountName == null) {
            throw new IllegalArgumentException("Parameter automationAccountName is required and cannot be null.");
        }
        if (nodeId == null) {
            throw new IllegalArgumentException("Parameter nodeId is required and cannot be null.");
        }
        if (reportId == null) {
            throw new IllegalArgumentException("Parameter reportId is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        final String apiVersion = "2015-10-31";
        return service.get(resourceGroupName, automationAccountName, nodeId, reportId, this.client.subscriptionId(), apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<DscNodeReportInner>>>() {
                @Override
                public Observable<ServiceResponse<DscNodeReportInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<DscNodeReportInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<DscNodeReportInner> getDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<DscNodeReportInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<DscNodeReportInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Retrieve the Dsc node reports by node id and report id.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @param nodeId The Dsc node id.
     * @param reportId The report id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    public Object getContent(String resourceGroupName, String automationAccountName, String nodeId, String reportId) {
        return getContentWithServiceResponseAsync(resourceGroupName, automationAccountName, nodeId, reportId).toBlocking().single().body();
    }

    /**
     * Retrieve the Dsc node reports by node id and report id.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @param nodeId The Dsc node id.
     * @param reportId The report id.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Object> getContentAsync(String resourceGroupName, String automationAccountName, String nodeId, String reportId, final ServiceCallback<Object> serviceCallback) {
        return ServiceFuture.fromResponse(getContentWithServiceResponseAsync(resourceGroupName, automationAccountName, nodeId, reportId), serviceCallback);
    }

    /**
     * Retrieve the Dsc node reports by node id and report id.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @param nodeId The Dsc node id.
     * @param reportId The report id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    public Observable<Object> getContentAsync(String resourceGroupName, String automationAccountName, String nodeId, String reportId) {
        return getContentWithServiceResponseAsync(resourceGroupName, automationAccountName, nodeId, reportId).map(new Func1<ServiceResponse<Object>, Object>() {
            @Override
            public Object call(ServiceResponse<Object> response) {
                return response.body();
            }
        });
    }

    /**
     * Retrieve the Dsc node reports by node id and report id.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @param nodeId The Dsc node id.
     * @param reportId The report id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    public Observable<ServiceResponse<Object>> getContentWithServiceResponseAsync(String resourceGroupName, String automationAccountName, String nodeId, String reportId) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (automationAccountName == null) {
            throw new IllegalArgumentException("Parameter automationAccountName is required and cannot be null.");
        }
        if (nodeId == null) {
            throw new IllegalArgumentException("Parameter nodeId is required and cannot be null.");
        }
        if (reportId == null) {
            throw new IllegalArgumentException("Parameter reportId is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        final String apiVersion = "2015-10-31";
        return service.getContent(resourceGroupName, automationAccountName, nodeId, reportId, this.client.subscriptionId(), apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Object>>>() {
                @Override
                public Observable<ServiceResponse<Object>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Object> clientResponse = getContentDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Object> getContentDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Object, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Object>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Retrieve the Dsc node report list by node id.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;DscNodeReportInner&gt; object if successful.
     */
    public PagedList<DscNodeReportInner> listByNodeNext(final String nextPageLink) {
        ServiceResponse<Page<DscNodeReportInner>> response = listByNodeNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<DscNodeReportInner>(response.body()) {
            @Override
            public Page<DscNodeReportInner> nextPage(String nextPageLink) {
                return listByNodeNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Retrieve the Dsc node report list by node id.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<DscNodeReportInner>> listByNodeNextAsync(final String nextPageLink, final ServiceFuture<List<DscNodeReportInner>> serviceFuture, final ListOperationCallback<DscNodeReportInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByNodeNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<DscNodeReportInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DscNodeReportInner>>> call(String nextPageLink) {
                    return listByNodeNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Retrieve the Dsc node report list by node id.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;DscNodeReportInner&gt; object
     */
    public Observable<Page<DscNodeReportInner>> listByNodeNextAsync(final String nextPageLink) {
        return listByNodeNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<DscNodeReportInner>>, Page<DscNodeReportInner>>() {
                @Override
                public Page<DscNodeReportInner> call(ServiceResponse<Page<DscNodeReportInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Retrieve the Dsc node report list by node id.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;DscNodeReportInner&gt; object
     */
    public Observable<ServiceResponse<Page<DscNodeReportInner>>> listByNodeNextWithServiceResponseAsync(final String nextPageLink) {
        return listByNodeNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<DscNodeReportInner>>, Observable<ServiceResponse<Page<DscNodeReportInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DscNodeReportInner>>> call(ServiceResponse<Page<DscNodeReportInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByNodeNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Retrieve the Dsc node report list by node id.
     *
    ServiceResponse<PageImpl<DscNodeReportInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;DscNodeReportInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<DscNodeReportInner>>> listByNodeNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByNodeNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<DscNodeReportInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DscNodeReportInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<DscNodeReportInner>> result = listByNodeNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<DscNodeReportInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<DscNodeReportInner>> listByNodeNextDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<DscNodeReportInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<DscNodeReportInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

}
