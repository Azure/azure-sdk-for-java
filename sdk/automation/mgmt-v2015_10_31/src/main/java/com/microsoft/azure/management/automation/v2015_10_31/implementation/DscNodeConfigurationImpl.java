/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.automation.v2015_10_31.implementation;

import com.microsoft.azure.management.automation.v2015_10_31.DscNodeConfiguration;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import com.microsoft.azure.management.automation.v2015_10_31.DscNodeConfigurationCreateOrUpdateParameters;
import com.microsoft.azure.management.automation.v2015_10_31.DscConfigurationAssociationProperty;
import org.joda.time.DateTime;
import com.microsoft.azure.management.automation.v2015_10_31.ContentSource;
import rx.functions.Func1;

class DscNodeConfigurationImpl extends CreatableUpdatableImpl<DscNodeConfiguration, DscNodeConfigurationInner, DscNodeConfigurationImpl> implements DscNodeConfiguration, DscNodeConfiguration.Definition, DscNodeConfiguration.Update {
    private final AutomationManager manager;
    private String resourceGroupName;
    private String automationAccountName;
    private String nodeConfigurationName;
    private DscNodeConfigurationCreateOrUpdateParameters createOrUpdateParameter;

    DscNodeConfigurationImpl(String name, AutomationManager manager) {
        super(name, new DscNodeConfigurationInner());
        this.manager = manager;
        // Set resource name
        this.nodeConfigurationName = name;
        //
        this.createOrUpdateParameter = new DscNodeConfigurationCreateOrUpdateParameters();
    }

    DscNodeConfigurationImpl(DscNodeConfigurationInner inner, AutomationManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.nodeConfigurationName = inner.name();
        // resource ancestor names
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.automationAccountName = IdParsingUtils.getValueFromIdByName(inner.id(), "automationAccounts");
        this.nodeConfigurationName = IdParsingUtils.getValueFromIdByName(inner.id(), "nodeConfigurations");
        //
        this.createOrUpdateParameter = new DscNodeConfigurationCreateOrUpdateParameters();
    }

    @Override
    public AutomationManager manager() {
        return this.manager;
    }

    @Override
    public Observable<DscNodeConfiguration> createResourceAsync() {
        DscNodeConfigurationsInner client = this.manager().inner().dscNodeConfigurations();
        return client.createOrUpdateAsync(this.resourceGroupName, this.automationAccountName, this.nodeConfigurationName, this.createOrUpdateParameter)
            .map(new Func1<DscNodeConfigurationInner, DscNodeConfigurationInner>() {
               @Override
               public DscNodeConfigurationInner call(DscNodeConfigurationInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<DscNodeConfiguration> updateResourceAsync() {
        DscNodeConfigurationsInner client = this.manager().inner().dscNodeConfigurations();
        return client.createOrUpdateAsync(this.resourceGroupName, this.automationAccountName, this.nodeConfigurationName, this.createOrUpdateParameter)
            .map(new Func1<DscNodeConfigurationInner, DscNodeConfigurationInner>() {
               @Override
               public DscNodeConfigurationInner call(DscNodeConfigurationInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<DscNodeConfigurationInner> getInnerAsync() {
        DscNodeConfigurationsInner client = this.manager().inner().dscNodeConfigurations();
        return client.getAsync(this.resourceGroupName, this.automationAccountName, this.nodeConfigurationName);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }

    private void resetCreateUpdateParameters() {
        this.createOrUpdateParameter = new DscNodeConfigurationCreateOrUpdateParameters();
    }

    @Override
    public DscConfigurationAssociationProperty configuration() {
        return this.inner().configuration();
    }

    @Override
    public DateTime creationTime() {
        return this.inner().creationTime();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public DateTime lastModifiedTime() {
        return this.inner().lastModifiedTime();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public DscNodeConfigurationImpl withExistingAutomationAccount(String resourceGroupName, String automationAccountName) {
        this.resourceGroupName = resourceGroupName;
        this.automationAccountName = automationAccountName;
        return this;
    }

    @Override
    public DscNodeConfigurationImpl withConfiguration(DscConfigurationAssociationProperty configuration) {
        this.createOrUpdateParameter.withConfiguration(configuration);
        return this;
    }

    @Override
    public DscNodeConfigurationImpl withName(String name) {
        this.createOrUpdateParameter.withName(name);
        return this;
    }

    @Override
    public DscNodeConfigurationImpl withSource(ContentSource source) {
        this.createOrUpdateParameter.withSource(source);
        return this;
    }

    @Override
    public DscNodeConfigurationImpl withIncrementNodeConfigurationBuild(Boolean incrementNodeConfigurationBuild) {
        this.createOrUpdateParameter.withIncrementNodeConfigurationBuild(incrementNodeConfigurationBuild);
        return this;
    }

}
