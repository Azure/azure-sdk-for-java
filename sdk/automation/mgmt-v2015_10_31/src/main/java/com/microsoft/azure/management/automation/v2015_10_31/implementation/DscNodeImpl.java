/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.automation.v2015_10_31.implementation;

import com.microsoft.azure.management.automation.v2015_10_31.DscNode;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import com.microsoft.azure.management.automation.v2015_10_31.DscNodeUpdateParameters;
import java.util.List;
import com.microsoft.azure.management.automation.v2015_10_31.DscNodeExtensionHandlerAssociationProperty;
import org.joda.time.DateTime;
import com.microsoft.azure.management.automation.v2015_10_31.DscNodeConfigurationAssociationProperty;
import rx.functions.Func1;

class DscNodeImpl extends CreatableUpdatableImpl<DscNode, DscNodeInner, DscNodeImpl> implements DscNode, DscNode.Update {
    private final AutomationManager manager;
    private String resourceGroupName;
    private String automationAccountName;
    private String nodeId;
    private DscNodeUpdateParameters updateParameter;

    DscNodeImpl(String name, AutomationManager manager) {
        super(name, new DscNodeInner());
        this.manager = manager;
        // Set resource name
        this.nodeId = name;
        //
        this.updateParameter = new DscNodeUpdateParameters();
    }

    DscNodeImpl(DscNodeInner inner, AutomationManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.nodeId = inner.name();
        // resource ancestor names
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.automationAccountName = IdParsingUtils.getValueFromIdByName(inner.id(), "automationAccounts");
        this.nodeId = IdParsingUtils.getValueFromIdByName(inner.id(), "nodes");
        //
        this.updateParameter = new DscNodeUpdateParameters();
    }

    @Override
    public AutomationManager manager() {
        return this.manager;
    }

    @Override
    public Observable<DscNode> createResourceAsync() {
        DscNodesInner client = this.manager().inner().dscNodes();
        return null; // NOP createResourceAsync implementation as create is not supported
    }

    @Override
    public Observable<DscNode> updateResourceAsync() {
        DscNodesInner client = this.manager().inner().dscNodes();
        return client.updateAsync(this.resourceGroupName, this.automationAccountName, this.nodeId, this.updateParameter)
            .map(new Func1<DscNodeInner, DscNodeInner>() {
               @Override
               public DscNodeInner call(DscNodeInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<DscNodeInner> getInnerAsync() {
        DscNodesInner client = this.manager().inner().dscNodes();
        return client.getAsync(this.resourceGroupName, this.automationAccountName, this.nodeId);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }

    private void resetCreateUpdateParameters() {
        this.updateParameter = new DscNodeUpdateParameters();
    }

    @Override
    public String accountId() {
        return this.inner().accountId();
    }

    @Override
    public String etag() {
        return this.inner().etag();
    }

    @Override
    public List<DscNodeExtensionHandlerAssociationProperty> extensionHandler() {
        return this.inner().extensionHandler();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String ip() {
        return this.inner().ip();
    }

    @Override
    public DateTime lastSeen() {
        return this.inner().lastSeen();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public DscNodeConfigurationAssociationProperty nodeConfiguration() {
        return this.inner().nodeConfiguration();
    }

    @Override
    public String nodeId() {
        return this.inner().nodeId();
    }

    @Override
    public DateTime registrationTime() {
        return this.inner().registrationTime();
    }

    @Override
    public String status() {
        return this.inner().status();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public DscNodeImpl withNodeConfiguration(DscNodeConfigurationAssociationProperty nodeConfiguration) {
        this.updateParameter.withNodeConfiguration(nodeConfiguration);
        return this;
    }

    @Override
    public DscNodeImpl withNodeId(String nodeId) {
        this.updateParameter.withNodeId(nodeId);
        return this;
    }

}
