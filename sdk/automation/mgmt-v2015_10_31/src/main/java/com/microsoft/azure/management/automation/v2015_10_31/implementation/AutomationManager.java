/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.automation.v2015_10_31.implementation;

import com.microsoft.azure.AzureEnvironment;
import com.microsoft.azure.AzureResponseBuilder;
import com.microsoft.azure.credentials.AzureTokenCredentials;
import com.microsoft.azure.management.apigeneration.Beta;
import com.microsoft.azure.management.apigeneration.Beta.SinceVersion;
import com.microsoft.azure.arm.resources.AzureConfigurable;
import com.microsoft.azure.serializer.AzureJacksonAdapter;
import com.microsoft.rest.RestClient;
import com.microsoft.azure.management.automation.v2015_10_31.AutomationAccounts;
import com.microsoft.azure.management.automation.v2015_10_31.Operations;
import com.microsoft.azure.management.automation.v2015_10_31.Statistics;
import com.microsoft.azure.management.automation.v2015_10_31.Usages;
import com.microsoft.azure.management.automation.v2015_10_31.Keys;
import com.microsoft.azure.management.automation.v2015_10_31.Certificates;
import com.microsoft.azure.management.automation.v2015_10_31.Connections;
import com.microsoft.azure.management.automation.v2015_10_31.ConnectionTypes;
import com.microsoft.azure.management.automation.v2015_10_31.Credentials;
import com.microsoft.azure.management.automation.v2015_10_31.DscCompilationJobs;
import com.microsoft.azure.management.automation.v2015_10_31.DscCompilationJobStreams;
import com.microsoft.azure.management.automation.v2015_10_31.DscConfigurations;
import com.microsoft.azure.management.automation.v2015_10_31.AgentRegistrationInformations;
import com.microsoft.azure.management.automation.v2015_10_31.DscNodes;
import com.microsoft.azure.management.automation.v2015_10_31.NodeReports;
import com.microsoft.azure.management.automation.v2015_10_31.DscNodeConfigurations;
import com.microsoft.azure.management.automation.v2015_10_31.HybridRunbookWorkerGroups;
import com.microsoft.azure.management.automation.v2015_10_31.Jobs;
import com.microsoft.azure.management.automation.v2015_10_31.JobStreams;
import com.microsoft.azure.management.automation.v2015_10_31.JobSchedules;
import com.microsoft.azure.management.automation.v2015_10_31.LinkedWorkspaces;
import com.microsoft.azure.management.automation.v2015_10_31.Activitys;
import com.microsoft.azure.management.automation.v2015_10_31.Modules;
import com.microsoft.azure.management.automation.v2015_10_31.ObjectDataTypes;
import com.microsoft.azure.management.automation.v2015_10_31.Fields;
import com.microsoft.azure.management.automation.v2015_10_31.RunbookDrafts;
import com.microsoft.azure.management.automation.v2015_10_31.Runbooks;
import com.microsoft.azure.management.automation.v2015_10_31.TestJobStreams;
import com.microsoft.azure.management.automation.v2015_10_31.TestJobs;
import com.microsoft.azure.management.automation.v2015_10_31.Schedules;
import com.microsoft.azure.management.automation.v2015_10_31.Variables;
import com.microsoft.azure.management.automation.v2015_10_31.Webhooks;
import com.microsoft.azure.arm.resources.implementation.AzureConfigurableCoreImpl;
import com.microsoft.azure.arm.resources.implementation.ManagerCore;

/**
 * Entry point to Azure Automation resource management.
 */
public final class AutomationManager extends ManagerCore<AutomationManager, AutomationClientImpl> {
    private AutomationAccounts automationAccounts;
    private Operations operations;
    private Statistics statistics;
    private Usages usages;
    private Keys keys;
    private Certificates certificates;
    private Connections connections;
    private ConnectionTypes connectionTypes;
    private Credentials credentials;
    private DscCompilationJobs dscCompilationJobs;
    private DscCompilationJobStreams dscCompilationJobStreams;
    private DscConfigurations dscConfigurations;
    private AgentRegistrationInformations agentRegistrationInformations;
    private DscNodes dscNodes;
    private NodeReports nodeReports;
    private DscNodeConfigurations dscNodeConfigurations;
    private HybridRunbookWorkerGroups hybridRunbookWorkerGroups;
    private Jobs jobs;
    private JobStreams jobStreams;
    private JobSchedules jobSchedules;
    private LinkedWorkspaces linkedWorkspaces;
    private Activitys activitys;
    private Modules modules;
    private ObjectDataTypes objectDataTypes;
    private Fields fields;
    private RunbookDrafts runbookDrafts;
    private Runbooks runbooks;
    private TestJobStreams testJobStreams;
    private TestJobs testJobs;
    private Schedules schedules;
    private Variables variables;
    private Webhooks webhooks;
    /**
    * Get a Configurable instance that can be used to create AutomationManager with optional configuration.
    *
    * @return the instance allowing configurations
    */
    public static Configurable configure() {
        return new AutomationManager.ConfigurableImpl();
    }
    /**
    * Creates an instance of AutomationManager that exposes Automation resource management API entry points.
    *
    * @param credentials the credentials to use
    * @param subscriptionId the subscription UUID
    * @return the AutomationManager
    */
    public static AutomationManager authenticate(AzureTokenCredentials credentials, String subscriptionId) {
        return new AutomationManager(new RestClient.Builder()
            .withBaseUrl(credentials.environment(), AzureEnvironment.Endpoint.RESOURCE_MANAGER)
            .withCredentials(credentials)
            .withSerializerAdapter(new AzureJacksonAdapter())
            .withResponseBuilderFactory(new AzureResponseBuilder.Factory())
            .build(), subscriptionId);
    }
    /**
    * Creates an instance of AutomationManager that exposes Automation resource management API entry points.
    *
    * @param restClient the RestClient to be used for API calls.
    * @param subscriptionId the subscription UUID
    * @return the AutomationManager
    */
    public static AutomationManager authenticate(RestClient restClient, String subscriptionId) {
        return new AutomationManager(restClient, subscriptionId);
    }
    /**
    * The interface allowing configurations to be set.
    */
    public interface Configurable extends AzureConfigurable<Configurable> {
        /**
        * Creates an instance of AutomationManager that exposes Automation management API entry points.
        *
        * @param credentials the credentials to use
        * @param subscriptionId the subscription UUID
        * @return the interface exposing Automation management API entry points that work across subscriptions
        */
        AutomationManager authenticate(AzureTokenCredentials credentials, String subscriptionId);
    }

    /**
     * @return Entry point to manage AutomationAccounts.
     */
    public AutomationAccounts automationAccounts() {
        if (this.automationAccounts == null) {
            this.automationAccounts = new AutomationAccountsImpl(this);
        }
        return this.automationAccounts;
    }

    /**
     * @return Entry point to manage Operations.
     */
    public Operations operations() {
        if (this.operations == null) {
            this.operations = new OperationsImpl(this);
        }
        return this.operations;
    }

    /**
     * @return Entry point to manage Statistics.
     */
    public Statistics statistics() {
        if (this.statistics == null) {
            this.statistics = new StatisticsImpl(this);
        }
        return this.statistics;
    }

    /**
     * @return Entry point to manage Usages.
     */
    public Usages usages() {
        if (this.usages == null) {
            this.usages = new UsagesImpl(this);
        }
        return this.usages;
    }

    /**
     * @return Entry point to manage Keys.
     */
    public Keys keys() {
        if (this.keys == null) {
            this.keys = new KeysImpl(this);
        }
        return this.keys;
    }

    /**
     * @return Entry point to manage Certificates.
     */
    public Certificates certificates() {
        if (this.certificates == null) {
            this.certificates = new CertificatesImpl(this);
        }
        return this.certificates;
    }

    /**
     * @return Entry point to manage Connections.
     */
    public Connections connections() {
        if (this.connections == null) {
            this.connections = new ConnectionsImpl(this);
        }
        return this.connections;
    }

    /**
     * @return Entry point to manage ConnectionTypes.
     */
    public ConnectionTypes connectionTypes() {
        if (this.connectionTypes == null) {
            this.connectionTypes = new ConnectionTypesImpl(this);
        }
        return this.connectionTypes;
    }

    /**
     * @return Entry point to manage Credentials.
     */
    public Credentials credentials() {
        if (this.credentials == null) {
            this.credentials = new CredentialsImpl(this);
        }
        return this.credentials;
    }

    /**
     * @return Entry point to manage DscCompilationJobs.
     */
    public DscCompilationJobs dscCompilationJobs() {
        if (this.dscCompilationJobs == null) {
            this.dscCompilationJobs = new DscCompilationJobsImpl(this);
        }
        return this.dscCompilationJobs;
    }

    /**
     * @return Entry point to manage DscCompilationJobStreams.
     */
    public DscCompilationJobStreams dscCompilationJobStreams() {
        if (this.dscCompilationJobStreams == null) {
            this.dscCompilationJobStreams = new DscCompilationJobStreamsImpl(this);
        }
        return this.dscCompilationJobStreams;
    }

    /**
     * @return Entry point to manage DscConfigurations.
     */
    public DscConfigurations dscConfigurations() {
        if (this.dscConfigurations == null) {
            this.dscConfigurations = new DscConfigurationsImpl(this);
        }
        return this.dscConfigurations;
    }

    /**
     * @return Entry point to manage AgentRegistrationInformations.
     */
    public AgentRegistrationInformations agentRegistrationInformations() {
        if (this.agentRegistrationInformations == null) {
            this.agentRegistrationInformations = new AgentRegistrationInformationsImpl(this);
        }
        return this.agentRegistrationInformations;
    }

    /**
     * @return Entry point to manage DscNodes.
     */
    public DscNodes dscNodes() {
        if (this.dscNodes == null) {
            this.dscNodes = new DscNodesImpl(this);
        }
        return this.dscNodes;
    }

    /**
     * @return Entry point to manage NodeReports.
     */
    public NodeReports nodeReports() {
        if (this.nodeReports == null) {
            this.nodeReports = new NodeReportsImpl(this);
        }
        return this.nodeReports;
    }

    /**
     * @return Entry point to manage DscNodeConfigurations.
     */
    public DscNodeConfigurations dscNodeConfigurations() {
        if (this.dscNodeConfigurations == null) {
            this.dscNodeConfigurations = new DscNodeConfigurationsImpl(this);
        }
        return this.dscNodeConfigurations;
    }

    /**
     * @return Entry point to manage HybridRunbookWorkerGroups.
     */
    public HybridRunbookWorkerGroups hybridRunbookWorkerGroups() {
        if (this.hybridRunbookWorkerGroups == null) {
            this.hybridRunbookWorkerGroups = new HybridRunbookWorkerGroupsImpl(this);
        }
        return this.hybridRunbookWorkerGroups;
    }

    /**
     * @return Entry point to manage Jobs.
     */
    public Jobs jobs() {
        if (this.jobs == null) {
            this.jobs = new JobsImpl(this);
        }
        return this.jobs;
    }

    /**
     * @return Entry point to manage JobStreams.
     */
    public JobStreams jobStreams() {
        if (this.jobStreams == null) {
            this.jobStreams = new JobStreamsImpl(this);
        }
        return this.jobStreams;
    }

    /**
     * @return Entry point to manage JobSchedules.
     */
    public JobSchedules jobSchedules() {
        if (this.jobSchedules == null) {
            this.jobSchedules = new JobSchedulesImpl(this);
        }
        return this.jobSchedules;
    }

    /**
     * @return Entry point to manage LinkedWorkspaces.
     */
    public LinkedWorkspaces linkedWorkspaces() {
        if (this.linkedWorkspaces == null) {
            this.linkedWorkspaces = new LinkedWorkspacesImpl(this);
        }
        return this.linkedWorkspaces;
    }

    /**
     * @return Entry point to manage Activitys.
     */
    public Activitys activitys() {
        if (this.activitys == null) {
            this.activitys = new ActivitysImpl(this);
        }
        return this.activitys;
    }

    /**
     * @return Entry point to manage Modules.
     */
    public Modules modules() {
        if (this.modules == null) {
            this.modules = new ModulesImpl(this);
        }
        return this.modules;
    }

    /**
     * @return Entry point to manage ObjectDataTypes.
     */
    public ObjectDataTypes objectDataTypes() {
        if (this.objectDataTypes == null) {
            this.objectDataTypes = new ObjectDataTypesImpl(this);
        }
        return this.objectDataTypes;
    }

    /**
     * @return Entry point to manage Fields.
     */
    public Fields fields() {
        if (this.fields == null) {
            this.fields = new FieldsImpl(this);
        }
        return this.fields;
    }

    /**
     * @return Entry point to manage RunbookDrafts.
     */
    public RunbookDrafts runbookDrafts() {
        if (this.runbookDrafts == null) {
            this.runbookDrafts = new RunbookDraftsImpl(this);
        }
        return this.runbookDrafts;
    }

    /**
     * @return Entry point to manage Runbooks.
     */
    public Runbooks runbooks() {
        if (this.runbooks == null) {
            this.runbooks = new RunbooksImpl(this);
        }
        return this.runbooks;
    }

    /**
     * @return Entry point to manage TestJobStreams.
     */
    public TestJobStreams testJobStreams() {
        if (this.testJobStreams == null) {
            this.testJobStreams = new TestJobStreamsImpl(this);
        }
        return this.testJobStreams;
    }

    /**
     * @return Entry point to manage TestJobs.
     */
    public TestJobs testJobs() {
        if (this.testJobs == null) {
            this.testJobs = new TestJobsImpl(this);
        }
        return this.testJobs;
    }

    /**
     * @return Entry point to manage Schedules.
     */
    public Schedules schedules() {
        if (this.schedules == null) {
            this.schedules = new SchedulesImpl(this);
        }
        return this.schedules;
    }

    /**
     * @return Entry point to manage Variables.
     */
    public Variables variables() {
        if (this.variables == null) {
            this.variables = new VariablesImpl(this);
        }
        return this.variables;
    }

    /**
     * @return Entry point to manage Webhooks.
     */
    public Webhooks webhooks() {
        if (this.webhooks == null) {
            this.webhooks = new WebhooksImpl(this);
        }
        return this.webhooks;
    }

    /**
    * The implementation for Configurable interface.
    */
    private static final class ConfigurableImpl extends AzureConfigurableCoreImpl<Configurable> implements Configurable {
        public AutomationManager authenticate(AzureTokenCredentials credentials, String subscriptionId) {
           return AutomationManager.authenticate(buildRestClient(credentials), subscriptionId);
        }
     }
    private AutomationManager(RestClient restClient, String subscriptionId) {
        super(
            restClient,
            subscriptionId,
            new AutomationClientImpl(restClient).withSubscriptionId(subscriptionId));
    }
}
