/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.automation.v2015_10_31.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.CloudException;
import com.microsoft.azure.management.automation.v2015_10_31.ErrorResponseException;
import com.microsoft.azure.management.automation.v2015_10_31.RunbookDraftPublishHeaders;
import com.microsoft.azure.management.automation.v2015_10_31.RunbookDraftReplaceContentHeaders;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.ServiceResponseWithHeaders;
import java.io.IOException;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in RunbookDrafts.
 */
public class RunbookDraftsInner {
    /** The Retrofit service to perform REST calls. */
    private RunbookDraftsService service;
    /** The service client containing this operation class. */
    private AutomationClientImpl client;

    /**
     * Initializes an instance of RunbookDraftsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public RunbookDraftsInner(Retrofit retrofit, AutomationClientImpl client) {
        this.service = retrofit.create(RunbookDraftsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for RunbookDrafts to be
     * used by Retrofit to perform actually REST calls.
     */
    interface RunbookDraftsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.automation.v2015_10_31.RunbookDrafts getContent" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/runbooks/{runbookName}/draft/content")
        Observable<Response<ResponseBody>> getContent(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("automationAccountName") String automationAccountName, @Path("runbookName") String runbookName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: text/powershell", "x-ms-logging-context: com.microsoft.azure.management.automation.v2015_10_31.RunbookDrafts replaceContent" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/runbooks/{runbookName}/draft/content")
        Observable<Response<ResponseBody>> replaceContent(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("automationAccountName") String automationAccountName, @Path("runbookName") String runbookName, @Body String runbookContent, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: text/powershell", "x-ms-logging-context: com.microsoft.azure.management.automation.v2015_10_31.RunbookDrafts beginReplaceContent" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/runbooks/{runbookName}/draft/content")
        Observable<Response<ResponseBody>> beginReplaceContent(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("automationAccountName") String automationAccountName, @Path("runbookName") String runbookName, @Body String runbookContent, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.automation.v2015_10_31.RunbookDrafts get" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/runbooks/{runbookName}/draft")
        Observable<Response<ResponseBody>> get(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("automationAccountName") String automationAccountName, @Path("runbookName") String runbookName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.automation.v2015_10_31.RunbookDrafts publish" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/runbooks/{runbookName}/draft/publish")
        Observable<Response<ResponseBody>> publish(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("automationAccountName") String automationAccountName, @Path("runbookName") String runbookName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.automation.v2015_10_31.RunbookDrafts beginPublish" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/runbooks/{runbookName}/draft/publish")
        Observable<Response<ResponseBody>> beginPublish(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("automationAccountName") String automationAccountName, @Path("runbookName") String runbookName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.automation.v2015_10_31.RunbookDrafts undoEdit" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/runbooks/{runbookName}/draft/undoEdit")
        Observable<Response<ResponseBody>> undoEdit(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("automationAccountName") String automationAccountName, @Path("runbookName") String runbookName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Retrieve the content of runbook draft identified by runbook name.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @param runbookName The runbook name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the String object if successful.
     */
    public String getContent(String resourceGroupName, String automationAccountName, String runbookName) {
        return getContentWithServiceResponseAsync(resourceGroupName, automationAccountName, runbookName).toBlocking().single().body();
    }

    /**
     * Retrieve the content of runbook draft identified by runbook name.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @param runbookName The runbook name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<String> getContentAsync(String resourceGroupName, String automationAccountName, String runbookName, final ServiceCallback<String> serviceCallback) {
        return ServiceFuture.fromResponse(getContentWithServiceResponseAsync(resourceGroupName, automationAccountName, runbookName), serviceCallback);
    }

    /**
     * Retrieve the content of runbook draft identified by runbook name.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @param runbookName The runbook name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    public Observable<String> getContentAsync(String resourceGroupName, String automationAccountName, String runbookName) {
        return getContentWithServiceResponseAsync(resourceGroupName, automationAccountName, runbookName).map(new Func1<ServiceResponse<String>, String>() {
            @Override
            public String call(ServiceResponse<String> response) {
                return response.body();
            }
        });
    }

    /**
     * Retrieve the content of runbook draft identified by runbook name.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @param runbookName The runbook name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    public Observable<ServiceResponse<String>> getContentWithServiceResponseAsync(String resourceGroupName, String automationAccountName, String runbookName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (automationAccountName == null) {
            throw new IllegalArgumentException("Parameter automationAccountName is required and cannot be null.");
        }
        if (runbookName == null) {
            throw new IllegalArgumentException("Parameter runbookName is required and cannot be null.");
        }
        final String apiVersion = "2015-10-31";
        return service.getContent(this.client.subscriptionId(), resourceGroupName, automationAccountName, runbookName, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<String>>>() {
                @Override
                public Observable<ServiceResponse<String>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<String> clientResponse = getContentDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<String> getContentDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<String, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<String>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Replaces the runbook draft content.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @param runbookName The runbook name.
     * @param runbookContent The runbook draft content.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the String object if successful.
     */
    public String replaceContent(String resourceGroupName, String automationAccountName, String runbookName, String runbookContent) {
        return replaceContentWithServiceResponseAsync(resourceGroupName, automationAccountName, runbookName, runbookContent).toBlocking().last().body();
    }

    /**
     * Replaces the runbook draft content.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @param runbookName The runbook name.
     * @param runbookContent The runbook draft content.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<String> replaceContentAsync(String resourceGroupName, String automationAccountName, String runbookName, String runbookContent, final ServiceCallback<String> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(replaceContentWithServiceResponseAsync(resourceGroupName, automationAccountName, runbookName, runbookContent), serviceCallback);
    }

    /**
     * Replaces the runbook draft content.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @param runbookName The runbook name.
     * @param runbookContent The runbook draft content.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<String> replaceContentAsync(String resourceGroupName, String automationAccountName, String runbookName, String runbookContent) {
        return replaceContentWithServiceResponseAsync(resourceGroupName, automationAccountName, runbookName, runbookContent).map(new Func1<ServiceResponseWithHeaders<String, RunbookDraftReplaceContentHeaders>, String>() {
            @Override
            public String call(ServiceResponseWithHeaders<String, RunbookDraftReplaceContentHeaders> response) {
                return response.body();
            }
        });
    }

    /**
     * Replaces the runbook draft content.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @param runbookName The runbook name.
     * @param runbookContent The runbook draft content.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponseWithHeaders<String, RunbookDraftReplaceContentHeaders>> replaceContentWithServiceResponseAsync(String resourceGroupName, String automationAccountName, String runbookName, String runbookContent) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (automationAccountName == null) {
            throw new IllegalArgumentException("Parameter automationAccountName is required and cannot be null.");
        }
        if (runbookName == null) {
            throw new IllegalArgumentException("Parameter runbookName is required and cannot be null.");
        }
        if (runbookContent == null) {
            throw new IllegalArgumentException("Parameter runbookContent is required and cannot be null.");
        }
        final String apiVersion = "2015-10-31";
        Observable<Response<ResponseBody>> observable = service.replaceContent(this.client.subscriptionId(), resourceGroupName, automationAccountName, runbookName, runbookContent, apiVersion, this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultWithHeadersAsync(observable, new TypeToken<String>() { }.getType(), RunbookDraftReplaceContentHeaders.class);
    }

    /**
     * Replaces the runbook draft content.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @param runbookName The runbook name.
     * @param runbookContent The runbook draft content.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the String object if successful.
     */
    public String beginReplaceContent(String resourceGroupName, String automationAccountName, String runbookName, String runbookContent) {
        return beginReplaceContentWithServiceResponseAsync(resourceGroupName, automationAccountName, runbookName, runbookContent).toBlocking().single().body();
    }

    /**
     * Replaces the runbook draft content.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @param runbookName The runbook name.
     * @param runbookContent The runbook draft content.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<String> beginReplaceContentAsync(String resourceGroupName, String automationAccountName, String runbookName, String runbookContent, final ServiceCallback<String> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(beginReplaceContentWithServiceResponseAsync(resourceGroupName, automationAccountName, runbookName, runbookContent), serviceCallback);
    }

    /**
     * Replaces the runbook draft content.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @param runbookName The runbook name.
     * @param runbookContent The runbook draft content.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    public Observable<String> beginReplaceContentAsync(String resourceGroupName, String automationAccountName, String runbookName, String runbookContent) {
        return beginReplaceContentWithServiceResponseAsync(resourceGroupName, automationAccountName, runbookName, runbookContent).map(new Func1<ServiceResponseWithHeaders<String, RunbookDraftReplaceContentHeaders>, String>() {
            @Override
            public String call(ServiceResponseWithHeaders<String, RunbookDraftReplaceContentHeaders> response) {
                return response.body();
            }
        });
    }

    /**
     * Replaces the runbook draft content.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @param runbookName The runbook name.
     * @param runbookContent The runbook draft content.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    public Observable<ServiceResponseWithHeaders<String, RunbookDraftReplaceContentHeaders>> beginReplaceContentWithServiceResponseAsync(String resourceGroupName, String automationAccountName, String runbookName, String runbookContent) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (automationAccountName == null) {
            throw new IllegalArgumentException("Parameter automationAccountName is required and cannot be null.");
        }
        if (runbookName == null) {
            throw new IllegalArgumentException("Parameter runbookName is required and cannot be null.");
        }
        if (runbookContent == null) {
            throw new IllegalArgumentException("Parameter runbookContent is required and cannot be null.");
        }
        final String apiVersion = "2015-10-31";
        return service.beginReplaceContent(this.client.subscriptionId(), resourceGroupName, automationAccountName, runbookName, runbookContent, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponseWithHeaders<String, RunbookDraftReplaceContentHeaders>>>() {
                @Override
                public Observable<ServiceResponseWithHeaders<String, RunbookDraftReplaceContentHeaders>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponseWithHeaders<String, RunbookDraftReplaceContentHeaders> clientResponse = beginReplaceContentDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponseWithHeaders<String, RunbookDraftReplaceContentHeaders> beginReplaceContentDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<String, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<String>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(ErrorResponseException.class)
                .buildWithHeaders(response, RunbookDraftReplaceContentHeaders.class);
    }

    /**
     * Retrieve the runbook draft identified by runbook name.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @param runbookName The runbook name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the RunbookDraftInner object if successful.
     */
    public RunbookDraftInner get(String resourceGroupName, String automationAccountName, String runbookName) {
        return getWithServiceResponseAsync(resourceGroupName, automationAccountName, runbookName).toBlocking().single().body();
    }

    /**
     * Retrieve the runbook draft identified by runbook name.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @param runbookName The runbook name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<RunbookDraftInner> getAsync(String resourceGroupName, String automationAccountName, String runbookName, final ServiceCallback<RunbookDraftInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(resourceGroupName, automationAccountName, runbookName), serviceCallback);
    }

    /**
     * Retrieve the runbook draft identified by runbook name.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @param runbookName The runbook name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RunbookDraftInner object
     */
    public Observable<RunbookDraftInner> getAsync(String resourceGroupName, String automationAccountName, String runbookName) {
        return getWithServiceResponseAsync(resourceGroupName, automationAccountName, runbookName).map(new Func1<ServiceResponse<RunbookDraftInner>, RunbookDraftInner>() {
            @Override
            public RunbookDraftInner call(ServiceResponse<RunbookDraftInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Retrieve the runbook draft identified by runbook name.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @param runbookName The runbook name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RunbookDraftInner object
     */
    public Observable<ServiceResponse<RunbookDraftInner>> getWithServiceResponseAsync(String resourceGroupName, String automationAccountName, String runbookName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (automationAccountName == null) {
            throw new IllegalArgumentException("Parameter automationAccountName is required and cannot be null.");
        }
        if (runbookName == null) {
            throw new IllegalArgumentException("Parameter runbookName is required and cannot be null.");
        }
        final String apiVersion = "2015-10-31";
        return service.get(this.client.subscriptionId(), resourceGroupName, automationAccountName, runbookName, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<RunbookDraftInner>>>() {
                @Override
                public Observable<ServiceResponse<RunbookDraftInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<RunbookDraftInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<RunbookDraftInner> getDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<RunbookDraftInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<RunbookDraftInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Publish runbook draft.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @param runbookName The parameters supplied to the publish runbook operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void publish(String resourceGroupName, String automationAccountName, String runbookName) {
        publishWithServiceResponseAsync(resourceGroupName, automationAccountName, runbookName).toBlocking().last().body();
    }

    /**
     * Publish runbook draft.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @param runbookName The parameters supplied to the publish runbook operation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> publishAsync(String resourceGroupName, String automationAccountName, String runbookName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(publishWithServiceResponseAsync(resourceGroupName, automationAccountName, runbookName), serviceCallback);
    }

    /**
     * Publish runbook draft.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @param runbookName The parameters supplied to the publish runbook operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Void> publishAsync(String resourceGroupName, String automationAccountName, String runbookName) {
        return publishWithServiceResponseAsync(resourceGroupName, automationAccountName, runbookName).map(new Func1<ServiceResponseWithHeaders<Void, RunbookDraftPublishHeaders>, Void>() {
            @Override
            public Void call(ServiceResponseWithHeaders<Void, RunbookDraftPublishHeaders> response) {
                return response.body();
            }
        });
    }

    /**
     * Publish runbook draft.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @param runbookName The parameters supplied to the publish runbook operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponseWithHeaders<Void, RunbookDraftPublishHeaders>> publishWithServiceResponseAsync(String resourceGroupName, String automationAccountName, String runbookName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (automationAccountName == null) {
            throw new IllegalArgumentException("Parameter automationAccountName is required and cannot be null.");
        }
        if (runbookName == null) {
            throw new IllegalArgumentException("Parameter runbookName is required and cannot be null.");
        }
        final String apiVersion = "2015-10-31";
        Observable<Response<ResponseBody>> observable = service.publish(this.client.subscriptionId(), resourceGroupName, automationAccountName, runbookName, apiVersion, this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultWithHeadersAsync(observable, new TypeToken<Void>() { }.getType(), RunbookDraftPublishHeaders.class);
    }

    /**
     * Publish runbook draft.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @param runbookName The parameters supplied to the publish runbook operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void beginPublish(String resourceGroupName, String automationAccountName, String runbookName) {
        beginPublishWithServiceResponseAsync(resourceGroupName, automationAccountName, runbookName).toBlocking().single().body();
    }

    /**
     * Publish runbook draft.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @param runbookName The parameters supplied to the publish runbook operation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> beginPublishAsync(String resourceGroupName, String automationAccountName, String runbookName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(beginPublishWithServiceResponseAsync(resourceGroupName, automationAccountName, runbookName), serviceCallback);
    }

    /**
     * Publish runbook draft.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @param runbookName The parameters supplied to the publish runbook operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponseWithHeaders} object if successful.
     */
    public Observable<Void> beginPublishAsync(String resourceGroupName, String automationAccountName, String runbookName) {
        return beginPublishWithServiceResponseAsync(resourceGroupName, automationAccountName, runbookName).map(new Func1<ServiceResponseWithHeaders<Void, RunbookDraftPublishHeaders>, Void>() {
            @Override
            public Void call(ServiceResponseWithHeaders<Void, RunbookDraftPublishHeaders> response) {
                return response.body();
            }
        });
    }

    /**
     * Publish runbook draft.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @param runbookName The parameters supplied to the publish runbook operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponseWithHeaders} object if successful.
     */
    public Observable<ServiceResponseWithHeaders<Void, RunbookDraftPublishHeaders>> beginPublishWithServiceResponseAsync(String resourceGroupName, String automationAccountName, String runbookName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (automationAccountName == null) {
            throw new IllegalArgumentException("Parameter automationAccountName is required and cannot be null.");
        }
        if (runbookName == null) {
            throw new IllegalArgumentException("Parameter runbookName is required and cannot be null.");
        }
        final String apiVersion = "2015-10-31";
        return service.beginPublish(this.client.subscriptionId(), resourceGroupName, automationAccountName, runbookName, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponseWithHeaders<Void, RunbookDraftPublishHeaders>>>() {
                @Override
                public Observable<ServiceResponseWithHeaders<Void, RunbookDraftPublishHeaders>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponseWithHeaders<Void, RunbookDraftPublishHeaders> clientResponse = beginPublishDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponseWithHeaders<Void, RunbookDraftPublishHeaders> beginPublishDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(ErrorResponseException.class)
                .buildWithHeaders(response, RunbookDraftPublishHeaders.class);
    }

    /**
     * Undo draft edit to last known published state identified by runbook name.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @param runbookName The runbook name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the RunbookDraftUndoEditResultInner object if successful.
     */
    public RunbookDraftUndoEditResultInner undoEdit(String resourceGroupName, String automationAccountName, String runbookName) {
        return undoEditWithServiceResponseAsync(resourceGroupName, automationAccountName, runbookName).toBlocking().single().body();
    }

    /**
     * Undo draft edit to last known published state identified by runbook name.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @param runbookName The runbook name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<RunbookDraftUndoEditResultInner> undoEditAsync(String resourceGroupName, String automationAccountName, String runbookName, final ServiceCallback<RunbookDraftUndoEditResultInner> serviceCallback) {
        return ServiceFuture.fromResponse(undoEditWithServiceResponseAsync(resourceGroupName, automationAccountName, runbookName), serviceCallback);
    }

    /**
     * Undo draft edit to last known published state identified by runbook name.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @param runbookName The runbook name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RunbookDraftUndoEditResultInner object
     */
    public Observable<RunbookDraftUndoEditResultInner> undoEditAsync(String resourceGroupName, String automationAccountName, String runbookName) {
        return undoEditWithServiceResponseAsync(resourceGroupName, automationAccountName, runbookName).map(new Func1<ServiceResponse<RunbookDraftUndoEditResultInner>, RunbookDraftUndoEditResultInner>() {
            @Override
            public RunbookDraftUndoEditResultInner call(ServiceResponse<RunbookDraftUndoEditResultInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Undo draft edit to last known published state identified by runbook name.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @param runbookName The runbook name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RunbookDraftUndoEditResultInner object
     */
    public Observable<ServiceResponse<RunbookDraftUndoEditResultInner>> undoEditWithServiceResponseAsync(String resourceGroupName, String automationAccountName, String runbookName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (automationAccountName == null) {
            throw new IllegalArgumentException("Parameter automationAccountName is required and cannot be null.");
        }
        if (runbookName == null) {
            throw new IllegalArgumentException("Parameter runbookName is required and cannot be null.");
        }
        final String apiVersion = "2015-10-31";
        return service.undoEdit(this.client.subscriptionId(), resourceGroupName, automationAccountName, runbookName, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<RunbookDraftUndoEditResultInner>>>() {
                @Override
                public Observable<ServiceResponse<RunbookDraftUndoEditResultInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<RunbookDraftUndoEditResultInner> clientResponse = undoEditDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<RunbookDraftUndoEditResultInner> undoEditDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<RunbookDraftUndoEditResultInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<RunbookDraftUndoEditResultInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

}
