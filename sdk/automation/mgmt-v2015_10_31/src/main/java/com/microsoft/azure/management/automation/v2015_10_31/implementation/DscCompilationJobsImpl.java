/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * abc
 */

package com.microsoft.azure.management.automation.v2015_10_31.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.automation.v2015_10_31.DscCompilationJobs;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.management.automation.v2015_10_31.DscCompilationJob;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.automation.v2015_10_31.CompilationjobAutomationAccountJobStream;

import java.util.UUID;

class DscCompilationJobsImpl extends WrapperImpl<DscCompilationJobsInner> implements DscCompilationJobs {
    private final AutomationManager manager;

    DscCompilationJobsImpl(AutomationManager manager) {
        super(manager.inner().dscCompilationJobs());
        this.manager = manager;
    }

    public AutomationManager manager() {
        return this.manager;
    }

    @Override
    public DscCompilationJobImpl defineCompilationjob(String name) {
        return wrapCompilationjobModel(name);
    }

    private DscCompilationJobImpl wrapCompilationjobModel(String name) {
        return new DscCompilationJobImpl(name, this.manager());
    }

    private DscCompilationJobImpl wrapDscCompilationJobModel(DscCompilationJobInner inner) {
        return  new DscCompilationJobImpl(inner, manager());
    }

    private CompilationjobAutomationAccountJobStreamImpl wrapCompilationjobAutomationAccountJobStreamModel(JobStreamInner inner) {
        return  new CompilationjobAutomationAccountJobStreamImpl(inner, manager());
    }

    private Observable<DscCompilationJobInner> getDscCompilationJobInnerUsingDscCompilationJobsInnerAsync(String id) {
        String resourceGroupName = IdParsingUtils.getValueFromIdByName(id, "resourceGroups");
        String automationAccountName = IdParsingUtils.getValueFromIdByName(id, "automationAccounts");
        UUID compilationJobId = UUID.fromString(IdParsingUtils.getValueFromIdByName(id, "compilationjobs"));
        DscCompilationJobsInner client = this.inner();
        return client.getAsync(resourceGroupName, automationAccountName, compilationJobId);
    }

    private Observable<JobStreamInner> getJobStreamInnerUsingDscCompilationJobsInnerAsync(String id) {
        String resourceGroupName = IdParsingUtils.getValueFromIdByName(id, "resourceGroups");
        String automationAccountName = IdParsingUtils.getValueFromIdByName(id, "automationAccounts");
        UUID jobId =  UUID.fromString(IdParsingUtils.getValueFromIdByName(id, "compilationjobs"));
        String jobStreamId = IdParsingUtils.getValueFromIdByName(id, "streams");
        DscCompilationJobsInner client = this.inner();
        return client.getStreamAsync(resourceGroupName, automationAccountName, jobId, jobStreamId);
    }

    @Override
    public Observable<DscCompilationJob> getAsync(String resourceGroupName, String automationAccountName, UUID compilationJobId) {
        DscCompilationJobsInner client = this.inner();
        return client.getAsync(resourceGroupName, automationAccountName, compilationJobId)
        .map(new Func1<DscCompilationJobInner, DscCompilationJob>() {
            @Override
            public DscCompilationJob call(DscCompilationJobInner inner) {
                return wrapDscCompilationJobModel(inner);
            }
       });
    }

    @Override
    public Observable<DscCompilationJob> listByAutomationAccountAsync(final String resourceGroupName, final String automationAccountName) {
        DscCompilationJobsInner client = this.inner();
        return client.listByAutomationAccountAsync(resourceGroupName, automationAccountName)
        .flatMapIterable(new Func1<Page<DscCompilationJobInner>, Iterable<DscCompilationJobInner>>() {
            @Override
            public Iterable<DscCompilationJobInner> call(Page<DscCompilationJobInner> page) {
                return page.items();
            }
        })
        .map(new Func1<DscCompilationJobInner, DscCompilationJob>() {
            @Override
            public DscCompilationJob call(DscCompilationJobInner inner) {
                return wrapDscCompilationJobModel(inner);
            }
        });
    }

    @Override
    public Observable<CompilationjobAutomationAccountJobStream> getStreamAsync(String resourceGroupName, String automationAccountName, UUID jobId, String jobStreamId) {
        DscCompilationJobsInner client = this.inner();
        return client.getStreamAsync(resourceGroupName, automationAccountName, jobId, jobStreamId)
        .map(new Func1<JobStreamInner, CompilationjobAutomationAccountJobStream>() {
            @Override
            public CompilationjobAutomationAccountJobStream call(JobStreamInner inner) {
                return wrapCompilationjobAutomationAccountJobStreamModel(inner);
            }
       });
    }

}
