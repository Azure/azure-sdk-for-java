/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.automation.v2015_10_31.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.automation.v2015_10_31.ErrorResponseException;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in JobStreams.
 */
public class JobStreamsInner {
    /** The Retrofit service to perform REST calls. */
    private JobStreamsService service;
    /** The service client containing this operation class. */
    private AutomationClientImpl client;

    /**
     * Initializes an instance of JobStreamsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public JobStreamsInner(Retrofit retrofit, AutomationClientImpl client) {
        this.service = retrofit.create(JobStreamsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for JobStreams to be
     * used by Retrofit to perform actually REST calls.
     */
    interface JobStreamsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.automation.v2015_10_31.JobStreams get" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/jobs/{jobId}/streams/{jobStreamId}")
        Observable<Response<ResponseBody>> get(@Path("resourceGroupName") String resourceGroupName, @Path("automationAccountName") String automationAccountName, @Path("jobId") String jobId, @Path("jobStreamId") String jobStreamId, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.automation.v2015_10_31.JobStreams listByJob" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/jobs/{jobId}/streams")
        Observable<Response<ResponseBody>> listByJob(@Path("resourceGroupName") String resourceGroupName, @Path("automationAccountName") String automationAccountName, @Path("jobId") String jobId, @Path("subscriptionId") String subscriptionId, @Query("$filter") String filter, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.automation.v2015_10_31.JobStreams listByJobNext" })
        @GET
        Observable<Response<ResponseBody>> listByJobNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Retrieve the job stream identified by job stream id.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @param jobId The job id.
     * @param jobStreamId The job stream id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the JobStreamInner object if successful.
     */
    public JobStreamInner get(String resourceGroupName, String automationAccountName, String jobId, String jobStreamId) {
        return getWithServiceResponseAsync(resourceGroupName, automationAccountName, jobId, jobStreamId).toBlocking().single().body();
    }

    /**
     * Retrieve the job stream identified by job stream id.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @param jobId The job id.
     * @param jobStreamId The job stream id.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<JobStreamInner> getAsync(String resourceGroupName, String automationAccountName, String jobId, String jobStreamId, final ServiceCallback<JobStreamInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(resourceGroupName, automationAccountName, jobId, jobStreamId), serviceCallback);
    }

    /**
     * Retrieve the job stream identified by job stream id.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @param jobId The job id.
     * @param jobStreamId The job stream id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JobStreamInner object
     */
    public Observable<JobStreamInner> getAsync(String resourceGroupName, String automationAccountName, String jobId, String jobStreamId) {
        return getWithServiceResponseAsync(resourceGroupName, automationAccountName, jobId, jobStreamId).map(new Func1<ServiceResponse<JobStreamInner>, JobStreamInner>() {
            @Override
            public JobStreamInner call(ServiceResponse<JobStreamInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Retrieve the job stream identified by job stream id.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @param jobId The job id.
     * @param jobStreamId The job stream id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JobStreamInner object
     */
    public Observable<ServiceResponse<JobStreamInner>> getWithServiceResponseAsync(String resourceGroupName, String automationAccountName, String jobId, String jobStreamId) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (automationAccountName == null) {
            throw new IllegalArgumentException("Parameter automationAccountName is required and cannot be null.");
        }
        if (jobId == null) {
            throw new IllegalArgumentException("Parameter jobId is required and cannot be null.");
        }
        if (jobStreamId == null) {
            throw new IllegalArgumentException("Parameter jobStreamId is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        final String apiVersion = "2015-10-31";
        return service.get(resourceGroupName, automationAccountName, jobId, jobStreamId, this.client.subscriptionId(), apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<JobStreamInner>>>() {
                @Override
                public Observable<ServiceResponse<JobStreamInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<JobStreamInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<JobStreamInner> getDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<JobStreamInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<JobStreamInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Retrieve a list of jobs streams identified by job id.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @param jobId The job Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;JobStreamInner&gt; object if successful.
     */
    public PagedList<JobStreamInner> listByJob(final String resourceGroupName, final String automationAccountName, final String jobId) {
        ServiceResponse<Page<JobStreamInner>> response = listByJobSinglePageAsync(resourceGroupName, automationAccountName, jobId).toBlocking().single();
        return new PagedList<JobStreamInner>(response.body()) {
            @Override
            public Page<JobStreamInner> nextPage(String nextPageLink) {
                return listByJobNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Retrieve a list of jobs streams identified by job id.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @param jobId The job Id.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<JobStreamInner>> listByJobAsync(final String resourceGroupName, final String automationAccountName, final String jobId, final ListOperationCallback<JobStreamInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByJobSinglePageAsync(resourceGroupName, automationAccountName, jobId),
            new Func1<String, Observable<ServiceResponse<Page<JobStreamInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<JobStreamInner>>> call(String nextPageLink) {
                    return listByJobNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Retrieve a list of jobs streams identified by job id.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @param jobId The job Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;JobStreamInner&gt; object
     */
    public Observable<Page<JobStreamInner>> listByJobAsync(final String resourceGroupName, final String automationAccountName, final String jobId) {
        return listByJobWithServiceResponseAsync(resourceGroupName, automationAccountName, jobId)
            .map(new Func1<ServiceResponse<Page<JobStreamInner>>, Page<JobStreamInner>>() {
                @Override
                public Page<JobStreamInner> call(ServiceResponse<Page<JobStreamInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Retrieve a list of jobs streams identified by job id.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @param jobId The job Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;JobStreamInner&gt; object
     */
    public Observable<ServiceResponse<Page<JobStreamInner>>> listByJobWithServiceResponseAsync(final String resourceGroupName, final String automationAccountName, final String jobId) {
        return listByJobSinglePageAsync(resourceGroupName, automationAccountName, jobId)
            .concatMap(new Func1<ServiceResponse<Page<JobStreamInner>>, Observable<ServiceResponse<Page<JobStreamInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<JobStreamInner>>> call(ServiceResponse<Page<JobStreamInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByJobNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Retrieve a list of jobs streams identified by job id.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @param jobId The job Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;JobStreamInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<JobStreamInner>>> listByJobSinglePageAsync(final String resourceGroupName, final String automationAccountName, final String jobId) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (automationAccountName == null) {
            throw new IllegalArgumentException("Parameter automationAccountName is required and cannot be null.");
        }
        if (jobId == null) {
            throw new IllegalArgumentException("Parameter jobId is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        final String apiVersion = "2015-10-31";
        final String filter = null;
        return service.listByJob(resourceGroupName, automationAccountName, jobId, this.client.subscriptionId(), filter, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<JobStreamInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<JobStreamInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<JobStreamInner>> result = listByJobDelegate(response);
                        return Observable.just(new ServiceResponse<Page<JobStreamInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Retrieve a list of jobs streams identified by job id.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @param jobId The job Id.
     * @param filter The filter to apply on the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;JobStreamInner&gt; object if successful.
     */
    public PagedList<JobStreamInner> listByJob(final String resourceGroupName, final String automationAccountName, final String jobId, final String filter) {
        ServiceResponse<Page<JobStreamInner>> response = listByJobSinglePageAsync(resourceGroupName, automationAccountName, jobId, filter).toBlocking().single();
        return new PagedList<JobStreamInner>(response.body()) {
            @Override
            public Page<JobStreamInner> nextPage(String nextPageLink) {
                return listByJobNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Retrieve a list of jobs streams identified by job id.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @param jobId The job Id.
     * @param filter The filter to apply on the operation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<JobStreamInner>> listByJobAsync(final String resourceGroupName, final String automationAccountName, final String jobId, final String filter, final ListOperationCallback<JobStreamInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByJobSinglePageAsync(resourceGroupName, automationAccountName, jobId, filter),
            new Func1<String, Observable<ServiceResponse<Page<JobStreamInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<JobStreamInner>>> call(String nextPageLink) {
                    return listByJobNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Retrieve a list of jobs streams identified by job id.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @param jobId The job Id.
     * @param filter The filter to apply on the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;JobStreamInner&gt; object
     */
    public Observable<Page<JobStreamInner>> listByJobAsync(final String resourceGroupName, final String automationAccountName, final String jobId, final String filter) {
        return listByJobWithServiceResponseAsync(resourceGroupName, automationAccountName, jobId, filter)
            .map(new Func1<ServiceResponse<Page<JobStreamInner>>, Page<JobStreamInner>>() {
                @Override
                public Page<JobStreamInner> call(ServiceResponse<Page<JobStreamInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Retrieve a list of jobs streams identified by job id.
     *
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @param jobId The job Id.
     * @param filter The filter to apply on the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;JobStreamInner&gt; object
     */
    public Observable<ServiceResponse<Page<JobStreamInner>>> listByJobWithServiceResponseAsync(final String resourceGroupName, final String automationAccountName, final String jobId, final String filter) {
        return listByJobSinglePageAsync(resourceGroupName, automationAccountName, jobId, filter)
            .concatMap(new Func1<ServiceResponse<Page<JobStreamInner>>, Observable<ServiceResponse<Page<JobStreamInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<JobStreamInner>>> call(ServiceResponse<Page<JobStreamInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByJobNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Retrieve a list of jobs streams identified by job id.
     *
    ServiceResponse<PageImpl<JobStreamInner>> * @param resourceGroupName Name of an Azure Resource group.
    ServiceResponse<PageImpl<JobStreamInner>> * @param automationAccountName The name of the automation account.
    ServiceResponse<PageImpl<JobStreamInner>> * @param jobId The job Id.
    ServiceResponse<PageImpl<JobStreamInner>> * @param filter The filter to apply on the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;JobStreamInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<JobStreamInner>>> listByJobSinglePageAsync(final String resourceGroupName, final String automationAccountName, final String jobId, final String filter) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (automationAccountName == null) {
            throw new IllegalArgumentException("Parameter automationAccountName is required and cannot be null.");
        }
        if (jobId == null) {
            throw new IllegalArgumentException("Parameter jobId is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        final String apiVersion = "2015-10-31";
        return service.listByJob(resourceGroupName, automationAccountName, jobId, this.client.subscriptionId(), filter, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<JobStreamInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<JobStreamInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<JobStreamInner>> result = listByJobDelegate(response);
                        return Observable.just(new ServiceResponse<Page<JobStreamInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<JobStreamInner>> listByJobDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<JobStreamInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<JobStreamInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Retrieve a list of jobs streams identified by job id.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;JobStreamInner&gt; object if successful.
     */
    public PagedList<JobStreamInner> listByJobNext(final String nextPageLink) {
        ServiceResponse<Page<JobStreamInner>> response = listByJobNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<JobStreamInner>(response.body()) {
            @Override
            public Page<JobStreamInner> nextPage(String nextPageLink) {
                return listByJobNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Retrieve a list of jobs streams identified by job id.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<JobStreamInner>> listByJobNextAsync(final String nextPageLink, final ServiceFuture<List<JobStreamInner>> serviceFuture, final ListOperationCallback<JobStreamInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByJobNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<JobStreamInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<JobStreamInner>>> call(String nextPageLink) {
                    return listByJobNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Retrieve a list of jobs streams identified by job id.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;JobStreamInner&gt; object
     */
    public Observable<Page<JobStreamInner>> listByJobNextAsync(final String nextPageLink) {
        return listByJobNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<JobStreamInner>>, Page<JobStreamInner>>() {
                @Override
                public Page<JobStreamInner> call(ServiceResponse<Page<JobStreamInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Retrieve a list of jobs streams identified by job id.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;JobStreamInner&gt; object
     */
    public Observable<ServiceResponse<Page<JobStreamInner>>> listByJobNextWithServiceResponseAsync(final String nextPageLink) {
        return listByJobNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<JobStreamInner>>, Observable<ServiceResponse<Page<JobStreamInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<JobStreamInner>>> call(ServiceResponse<Page<JobStreamInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByJobNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Retrieve a list of jobs streams identified by job id.
     *
    ServiceResponse<PageImpl<JobStreamInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;JobStreamInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<JobStreamInner>>> listByJobNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByJobNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<JobStreamInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<JobStreamInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<JobStreamInner>> result = listByJobNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<JobStreamInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<JobStreamInner>> listByJobNextDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<JobStreamInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<JobStreamInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

}
