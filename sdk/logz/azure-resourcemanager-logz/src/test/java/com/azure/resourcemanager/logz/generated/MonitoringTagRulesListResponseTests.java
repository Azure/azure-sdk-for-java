// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.logz.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.logz.fluent.models.MonitoringTagRulesInner;
import com.azure.resourcemanager.logz.models.FilteringTag;
import com.azure.resourcemanager.logz.models.LogRules;
import com.azure.resourcemanager.logz.models.MonitoringTagRulesListResponse;
import com.azure.resourcemanager.logz.models.MonitoringTagRulesProperties;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class MonitoringTagRulesListResponseTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        MonitoringTagRulesListResponse model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"provisioningState\":\"Succeeded\",\"logRules\":{\"sendAadLogs\":true,\"sendSubscriptionLogs\":false,\"sendActivityLogs\":false,\"filteringTags\":[{},{},{},{}]}},\"id\":\"xlefgugnxkrx\",\"name\":\"qmi\",\"type\":\"tthzrvqd\"}],\"nextLink\":\"bhj\"}")
            .toObject(MonitoringTagRulesListResponse.class);
        Assertions.assertEquals(true, model.value().get(0).properties().logRules().sendAadLogs());
        Assertions.assertEquals(false, model.value().get(0).properties().logRules().sendSubscriptionLogs());
        Assertions.assertEquals(false, model.value().get(0).properties().logRules().sendActivityLogs());
        Assertions.assertEquals("bhj", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        MonitoringTagRulesListResponse model = new MonitoringTagRulesListResponse()
            .withValue(
                Arrays
                    .asList(
                        new MonitoringTagRulesInner()
                            .withProperties(
                                new MonitoringTagRulesProperties()
                                    .withLogRules(
                                        new LogRules()
                                            .withSendAadLogs(true)
                                            .withSendSubscriptionLogs(false)
                                            .withSendActivityLogs(false)
                                            .withFilteringTags(Arrays.asList(new FilteringTag(), new FilteringTag(),
                                                new FilteringTag(), new FilteringTag()))))))
            .withNextLink("bhj");
        model = BinaryData.fromObject(model).toObject(MonitoringTagRulesListResponse.class);
        Assertions.assertEquals(true, model.value().get(0).properties().logRules().sendAadLogs());
        Assertions.assertEquals(false, model.value().get(0).properties().logRules().sendSubscriptionLogs());
        Assertions.assertEquals(false, model.value().get(0).properties().logRules().sendActivityLogs());
        Assertions.assertEquals("bhj", model.nextLink());
    }
}
