// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.logz.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.logz.LogzManager;
import com.azure.resourcemanager.logz.models.LogzMonitorResource;
import com.azure.resourcemanager.logz.models.ManagedIdentityTypes;
import com.azure.resourcemanager.logz.models.MarketplaceSubscriptionStatus;
import com.azure.resourcemanager.logz.models.MonitoringStatus;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class MonitorsGetByResourceGroupWithResponseMockTests {
    @Test
    public void testGetByResourceGroupWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"provisioningState\":\"Updating\",\"monitoringStatus\":\"Enabled\",\"marketplaceSubscriptionStatus\":\"Active\",\"logzOrganizationProperties\":{\"companyName\":\"qzntypm\",\"id\":\"p\",\"enterpriseAppId\":\"c\",\"singleSignOnUrl\":\"qjsdpydnfyhxdeo\"},\"userInfo\":{\"firstName\":\"icwifsjtt\",\"lastName\":\"fbishcbkha\",\"emailAddress\":\"eyeam\",\"phoneNumber\":\"hagalpbuxwgipwh\"},\"planData\":{\"usageType\":\"wkgshwa\",\"billingCycle\":\"ixzbinjeputtmryw\",\"planDetails\":\"zoqftiyqzrnkcqvy\",\"effectiveDate\":\"2021-11-01T04:15:41Z\"},\"liftrResourceCategory\":\"Unknown\",\"liftrResourcePreference\":1368622267},\"identity\":{\"principalId\":\"ohoqqnwvlryav\",\"tenantId\":\"heun\",\"type\":\"UserAssigned\"},\"location\":\"hgyxzkonoc\",\"tags\":{\"szfkbe\":\"klyaxuconu\",\"jmwvvj\":\"pewr\",\"xsenhwlr\":\"kt\"},\"id\":\"ffrzpwvlqdqgbiqy\",\"name\":\"ihkaetcktvfc\",\"type\":\"vf\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        LogzManager manager =
            LogzManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        LogzMonitorResource response =
            manager
                .monitors()
                .getByResourceGroupWithResponse("pocipazyxoegu", "g", com.azure.core.util.Context.NONE)
                .getValue();

        Assertions.assertEquals("hgyxzkonoc", response.location());
        Assertions.assertEquals("klyaxuconu", response.tags().get("szfkbe"));
        Assertions.assertEquals(MonitoringStatus.ENABLED, response.properties().monitoringStatus());
        Assertions
            .assertEquals(MarketplaceSubscriptionStatus.ACTIVE, response.properties().marketplaceSubscriptionStatus());
        Assertions.assertEquals("qzntypm", response.properties().logzOrganizationProperties().companyName());
        Assertions.assertEquals("c", response.properties().logzOrganizationProperties().enterpriseAppId());
        Assertions
            .assertEquals("qjsdpydnfyhxdeo", response.properties().logzOrganizationProperties().singleSignOnUrl());
        Assertions.assertEquals("icwifsjtt", response.properties().userInfo().firstName());
        Assertions.assertEquals("fbishcbkha", response.properties().userInfo().lastName());
        Assertions.assertEquals("eyeam", response.properties().userInfo().emailAddress());
        Assertions.assertEquals("hagalpbuxwgipwh", response.properties().userInfo().phoneNumber());
        Assertions.assertEquals("wkgshwa", response.properties().planData().usageType());
        Assertions.assertEquals("ixzbinjeputtmryw", response.properties().planData().billingCycle());
        Assertions.assertEquals("zoqftiyqzrnkcqvy", response.properties().planData().planDetails());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-11-01T04:15:41Z"), response.properties().planData().effectiveDate());
        Assertions.assertEquals(ManagedIdentityTypes.USER_ASSIGNED, response.identity().type());
    }
}
