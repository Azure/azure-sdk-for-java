// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.logz.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.logz.LogzManager;
import com.azure.resourcemanager.logz.models.LogzMonitorResource;
import com.azure.resourcemanager.logz.models.ManagedIdentityTypes;
import com.azure.resourcemanager.logz.models.MarketplaceSubscriptionStatus;
import com.azure.resourcemanager.logz.models.MonitoringStatus;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class MonitorsGetByResourceGroupWithResponseMockTests {
    @Test
    public void testGetByResourceGroupWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Accepted\",\"monitoringStatus\":\"Disabled\",\"marketplaceSubscriptionStatus\":\"Suspended\",\"logzOrganizationProperties\":{\"companyName\":\"kadrgvt\",\"id\":\"gnbuy\",\"enterpriseAppId\":\"ijggmebfsiar\",\"singleSignOnUrl\":\"trcvpnazzmh\"},\"userInfo\":{\"firstName\":\"nmpxttdb\",\"lastName\":\"bnlankxmyskpb\",\"emailAddress\":\"nbtkcxywnytnr\",\"phoneNumber\":\"nlqidybyxczf\"},\"planData\":{\"usageType\":\"aaxdbabphlwrq\",\"billingCycle\":\"ktsthsucocmny\",\"planDetails\":\"zt\",\"effectiveDate\":\"2021-04-09T08:14:29Z\"},\"liftrResourceCategory\":\"Unknown\",\"liftrResourcePreference\":1529613290},\"identity\":{\"principalId\":\"edckzywbiexzfey\",\"tenantId\":\"axibxujw\",\"type\":\"UserAssigned\"},\"location\":\"walm\",\"tags\":{\"zjancuxr\":\"oxaepd\"},\"id\":\"d\",\"name\":\"bavxbniwdjswzt\",\"type\":\"dbpgnxytxhp\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        LogzManager manager = LogzManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        LogzMonitorResource response = manager.monitors()
            .getByResourceGroupWithResponse("qzahmgkbrp", "y", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("walm", response.location());
        Assertions.assertEquals("oxaepd", response.tags().get("zjancuxr"));
        Assertions.assertEquals(MonitoringStatus.DISABLED, response.properties().monitoringStatus());
        Assertions.assertEquals(MarketplaceSubscriptionStatus.SUSPENDED,
            response.properties().marketplaceSubscriptionStatus());
        Assertions.assertEquals("kadrgvt", response.properties().logzOrganizationProperties().companyName());
        Assertions.assertEquals("ijggmebfsiar", response.properties().logzOrganizationProperties().enterpriseAppId());
        Assertions.assertEquals("trcvpnazzmh", response.properties().logzOrganizationProperties().singleSignOnUrl());
        Assertions.assertEquals("nmpxttdb", response.properties().userInfo().firstName());
        Assertions.assertEquals("bnlankxmyskpb", response.properties().userInfo().lastName());
        Assertions.assertEquals("nbtkcxywnytnr", response.properties().userInfo().emailAddress());
        Assertions.assertEquals("nlqidybyxczf", response.properties().userInfo().phoneNumber());
        Assertions.assertEquals("aaxdbabphlwrq", response.properties().planData().usageType());
        Assertions.assertEquals("ktsthsucocmny", response.properties().planData().billingCycle());
        Assertions.assertEquals("zt", response.properties().planData().planDetails());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-09T08:14:29Z"),
            response.properties().planData().effectiveDate());
        Assertions.assertEquals(ManagedIdentityTypes.USER_ASSIGNED, response.identity().type());
    }
}
