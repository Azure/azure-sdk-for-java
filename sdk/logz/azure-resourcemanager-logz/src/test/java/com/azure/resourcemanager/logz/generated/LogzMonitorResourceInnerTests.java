// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.logz.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.logz.fluent.models.LogzMonitorResourceInner;
import com.azure.resourcemanager.logz.models.IdentityProperties;
import com.azure.resourcemanager.logz.models.LogzOrganizationProperties;
import com.azure.resourcemanager.logz.models.ManagedIdentityTypes;
import com.azure.resourcemanager.logz.models.MarketplaceSubscriptionStatus;
import com.azure.resourcemanager.logz.models.MonitorProperties;
import com.azure.resourcemanager.logz.models.MonitoringStatus;
import com.azure.resourcemanager.logz.models.PlanData;
import com.azure.resourcemanager.logz.models.UserInfo;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class LogzMonitorResourceInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        LogzMonitorResourceInner model = BinaryData.fromString(
            "{\"properties\":{\"provisioningState\":\"Failed\",\"monitoringStatus\":\"Enabled\",\"marketplaceSubscriptionStatus\":\"Active\",\"logzOrganizationProperties\":{\"companyName\":\"prwzwbnguitnwui\",\"id\":\"a\",\"enterpriseAppId\":\"ufizuckyf\",\"singleSignOnUrl\":\"rfidfvzwdz\"},\"userInfo\":{\"firstName\":\"ymwisdkft\",\"lastName\":\"xmnteiwaop\",\"emailAddress\":\"mijcmmxdcufufs\",\"phoneNumber\":\"ymzidn\"},\"planData\":{\"usageType\":\"cxtbzsg\",\"billingCycle\":\"c\",\"planDetails\":\"newmdwzjeiachbo\",\"effectiveDate\":\"2021-05-15T06:55:08Z\"},\"liftrResourceCategory\":\"MonitorLogs\",\"liftrResourcePreference\":1039180854},\"identity\":{\"principalId\":\"qpteeh\",\"tenantId\":\"vypyqrimzinpv\",\"type\":\"UserAssigned\"},\"location\":\"dkirsoodqxhcr\",\"tags\":{\"oifiyipjxsqwpgr\":\"hjtckwhd\",\"qabnmoc\":\"bznorcjxvsnby\"},\"id\":\"cyshurzafbljjgp\",\"name\":\"toqcjmklja\",\"type\":\"bqidtqaj\"}")
            .toObject(LogzMonitorResourceInner.class);
        Assertions.assertEquals("dkirsoodqxhcr", model.location());
        Assertions.assertEquals("hjtckwhd", model.tags().get("oifiyipjxsqwpgr"));
        Assertions.assertEquals(MonitoringStatus.ENABLED, model.properties().monitoringStatus());
        Assertions.assertEquals(MarketplaceSubscriptionStatus.ACTIVE,
            model.properties().marketplaceSubscriptionStatus());
        Assertions.assertEquals("prwzwbnguitnwui", model.properties().logzOrganizationProperties().companyName());
        Assertions.assertEquals("ufizuckyf", model.properties().logzOrganizationProperties().enterpriseAppId());
        Assertions.assertEquals("rfidfvzwdz", model.properties().logzOrganizationProperties().singleSignOnUrl());
        Assertions.assertEquals("ymwisdkft", model.properties().userInfo().firstName());
        Assertions.assertEquals("xmnteiwaop", model.properties().userInfo().lastName());
        Assertions.assertEquals("mijcmmxdcufufs", model.properties().userInfo().emailAddress());
        Assertions.assertEquals("ymzidn", model.properties().userInfo().phoneNumber());
        Assertions.assertEquals("cxtbzsg", model.properties().planData().usageType());
        Assertions.assertEquals("c", model.properties().planData().billingCycle());
        Assertions.assertEquals("newmdwzjeiachbo", model.properties().planData().planDetails());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-15T06:55:08Z"),
            model.properties().planData().effectiveDate());
        Assertions.assertEquals(ManagedIdentityTypes.USER_ASSIGNED, model.identity().type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        LogzMonitorResourceInner model = new LogzMonitorResourceInner().withLocation("dkirsoodqxhcr")
            .withTags(mapOf("oifiyipjxsqwpgr", "hjtckwhd", "qabnmoc", "bznorcjxvsnby"))
            .withProperties(new MonitorProperties().withMonitoringStatus(MonitoringStatus.ENABLED)
                .withMarketplaceSubscriptionStatus(MarketplaceSubscriptionStatus.ACTIVE)
                .withLogzOrganizationProperties(new LogzOrganizationProperties().withCompanyName("prwzwbnguitnwui")
                    .withEnterpriseAppId("ufizuckyf")
                    .withSingleSignOnUrl("rfidfvzwdz"))
                .withUserInfo(new UserInfo().withFirstName("ymwisdkft")
                    .withLastName("xmnteiwaop")
                    .withEmailAddress("mijcmmxdcufufs")
                    .withPhoneNumber("ymzidn"))
                .withPlanData(new PlanData().withUsageType("cxtbzsg")
                    .withBillingCycle("c")
                    .withPlanDetails("newmdwzjeiachbo")
                    .withEffectiveDate(OffsetDateTime.parse("2021-05-15T06:55:08Z"))))
            .withIdentity(new IdentityProperties().withType(ManagedIdentityTypes.USER_ASSIGNED));
        model = BinaryData.fromObject(model).toObject(LogzMonitorResourceInner.class);
        Assertions.assertEquals("dkirsoodqxhcr", model.location());
        Assertions.assertEquals("hjtckwhd", model.tags().get("oifiyipjxsqwpgr"));
        Assertions.assertEquals(MonitoringStatus.ENABLED, model.properties().monitoringStatus());
        Assertions.assertEquals(MarketplaceSubscriptionStatus.ACTIVE,
            model.properties().marketplaceSubscriptionStatus());
        Assertions.assertEquals("prwzwbnguitnwui", model.properties().logzOrganizationProperties().companyName());
        Assertions.assertEquals("ufizuckyf", model.properties().logzOrganizationProperties().enterpriseAppId());
        Assertions.assertEquals("rfidfvzwdz", model.properties().logzOrganizationProperties().singleSignOnUrl());
        Assertions.assertEquals("ymwisdkft", model.properties().userInfo().firstName());
        Assertions.assertEquals("xmnteiwaop", model.properties().userInfo().lastName());
        Assertions.assertEquals("mijcmmxdcufufs", model.properties().userInfo().emailAddress());
        Assertions.assertEquals("ymzidn", model.properties().userInfo().phoneNumber());
        Assertions.assertEquals("cxtbzsg", model.properties().planData().usageType());
        Assertions.assertEquals("c", model.properties().planData().billingCycle());
        Assertions.assertEquals("newmdwzjeiachbo", model.properties().planData().planDetails());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-15T06:55:08Z"),
            model.properties().planData().effectiveDate());
        Assertions.assertEquals(ManagedIdentityTypes.USER_ASSIGNED, model.identity().type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
