// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.logz.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.logz.LogzManager;
import com.azure.resourcemanager.logz.models.MonitoringTagRules;
import com.azure.resourcemanager.logz.models.TagAction;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class TagRulesGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Deleting\",\"logRules\":{\"sendAadLogs\":false,\"sendSubscriptionLogs\":false,\"sendActivityLogs\":true,\"filteringTags\":[{\"name\":\"y\",\"value\":\"pvgqzcjrvxdjzlm\",\"action\":\"Exclude\"},{\"name\":\"vu\",\"value\":\"hzovawjvzunlut\",\"action\":\"Include\"}]}},\"id\":\"rnxipei\",\"name\":\"pjzu\",\"type\":\"e\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        LogzManager manager = LogzManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        MonitoringTagRules response = manager.tagRules()
            .getWithResponse("ro", "qbex", "mcqibycnojv", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals(false, response.properties().logRules().sendAadLogs());
        Assertions.assertEquals(false, response.properties().logRules().sendSubscriptionLogs());
        Assertions.assertEquals(true, response.properties().logRules().sendActivityLogs());
        Assertions.assertEquals("y", response.properties().logRules().filteringTags().get(0).name());
        Assertions.assertEquals("pvgqzcjrvxdjzlm", response.properties().logRules().filteringTags().get(0).value());
        Assertions.assertEquals(TagAction.EXCLUDE, response.properties().logRules().filteringTags().get(0).action());
    }
}
