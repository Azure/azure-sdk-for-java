// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.logz.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.logz.fluent.models.LogzMonitorResourceInner;
import com.azure.resourcemanager.logz.models.IdentityProperties;
import com.azure.resourcemanager.logz.models.LogzMonitorResourceListResponse;
import com.azure.resourcemanager.logz.models.LogzOrganizationProperties;
import com.azure.resourcemanager.logz.models.ManagedIdentityTypes;
import com.azure.resourcemanager.logz.models.MarketplaceSubscriptionStatus;
import com.azure.resourcemanager.logz.models.MonitorProperties;
import com.azure.resourcemanager.logz.models.MonitoringStatus;
import com.azure.resourcemanager.logz.models.PlanData;
import com.azure.resourcemanager.logz.models.UserInfo;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class LogzMonitorResourceListResponseTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        LogzMonitorResourceListResponse model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"provisioningState\":\"Creating\",\"monitoringStatus\":\"Disabled\",\"marketplaceSubscriptionStatus\":\"Active\",\"logzOrganizationProperties\":{\"companyName\":\"k\",\"id\":\"audccsnhs\",\"enterpriseAppId\":\"nyejhkryhtnap\",\"singleSignOnUrl\":\"wlokjyem\"},\"userInfo\":{\"firstName\":\"ni\",\"lastName\":\"oxzjnchgejspod\",\"emailAddress\":\"ilzyd\",\"phoneNumber\":\"o\"},\"planData\":{\"usageType\":\"ahuxinpm\",\"billingCycle\":\"jaqwixjsp\",\"planDetails\":\"zvcputegjvwmfda\",\"effectiveDate\":\"2021-09-13T14:44:26Z\"},\"liftrResourceCategory\":\"MonitorLogs\",\"liftrResourcePreference\":883957794},\"identity\":{\"principalId\":\"u\",\"tenantId\":\"uuvmkjozkrwfnd\",\"type\":\"SystemAssigned\"},\"location\":\"jpslwejd\",\"tags\":{\"psoacctazakljl\":\"ryo\",\"paojakhmsbzjh\":\"hbcryffdfdosyge\",\"hqtrgqjbpf\":\"rzevdphlxaol\"},\"id\":\"fsinzgvfcjrwzoxx\",\"name\":\"tfell\",\"type\":\"wfzitonpeqfpjk\"},{\"properties\":{\"provisioningState\":\"Canceled\",\"monitoringStatus\":\"Disabled\",\"marketplaceSubscriptionStatus\":\"Active\",\"logzOrganizationProperties\":{\"companyName\":\"xxypininmay\",\"id\":\"ybb\",\"enterpriseAppId\":\"odepoogin\",\"singleSignOnUrl\":\"amiheognarxz\"},\"userInfo\":{\"firstName\":\"eotusivyevc\",\"lastName\":\"qi\",\"emailAddress\":\"hungbwjzrnf\",\"phoneNumber\":\"xgispemvtzfkufu\"},\"planData\":{\"usageType\":\"ofx\",\"billingCycle\":\"ofjaeqjhqjb\",\"planDetails\":\"v\",\"effectiveDate\":\"2021-08-25T14:25:06Z\"},\"liftrResourceCategory\":\"MonitorLogs\",\"liftrResourcePreference\":2084272233},\"identity\":{\"principalId\":\"sntnbybkzgcw\",\"tenantId\":\"clxxwrljdo\",\"type\":\"UserAssigned\"},\"location\":\"cqvkocrcjdkwtn\",\"tags\":{\"p\":\"njbiksqrglssain\",\"mgxsab\":\"wnzlljfmppeeb\",\"jczdzevndh\":\"yqduujit\",\"feusnhut\":\"rwpdappdsbdkvwrw\"},\"id\":\"eltmrldhugjzzdat\",\"name\":\"xhocdgeablgphuti\",\"type\":\"ndv\"},{\"properties\":{\"provisioningState\":\"Canceled\",\"monitoringStatus\":\"Enabled\",\"marketplaceSubscriptionStatus\":\"Suspended\",\"logzOrganizationProperties\":{\"companyName\":\"xhurok\",\"id\":\"yxolniwp\",\"enterpriseAppId\":\"ukjfkgiawxklr\",\"singleSignOnUrl\":\"lwckbasyypnddhs\"},\"userInfo\":{\"firstName\":\"acphejkoty\",\"lastName\":\"gou\",\"emailAddress\":\"ndlik\",\"phoneNumber\":\"qkgfgibma\"},\"planData\":{\"usageType\":\"keqsrxybzqqedq\",\"billingCycle\":\"bciqfouflm\",\"planDetails\":\"kzsmodm\",\"effectiveDate\":\"2021-07-22T23:50:49Z\"},\"liftrResourceCategory\":\"MonitorLogs\",\"liftrResourcePreference\":173170794},\"identity\":{\"principalId\":\"tmut\",\"tenantId\":\"qktapspwgcuert\",\"type\":\"SystemAssigned\"},\"location\":\"dosvqwhbmdgbbjf\",\"tags\":{\"q\":\"mbmbexppbh\",\"algbquxigjyjg\":\"rolfpfp\",\"lnerkujysvleju\":\"jaoyfhrtx\"},\"id\":\"fqawrlyxw\",\"name\":\"kcprbnw\",\"type\":\"xgjvtbv\"}],\"nextLink\":\"sszdnru\"}")
            .toObject(LogzMonitorResourceListResponse.class);
        Assertions.assertEquals("jpslwejd", model.value().get(0).location());
        Assertions.assertEquals("ryo", model.value().get(0).tags().get("psoacctazakljl"));
        Assertions.assertEquals(MonitoringStatus.DISABLED, model.value().get(0).properties().monitoringStatus());
        Assertions.assertEquals(MarketplaceSubscriptionStatus.ACTIVE,
            model.value().get(0).properties().marketplaceSubscriptionStatus());
        Assertions.assertEquals("k", model.value().get(0).properties().logzOrganizationProperties().companyName());
        Assertions.assertEquals("nyejhkryhtnap",
            model.value().get(0).properties().logzOrganizationProperties().enterpriseAppId());
        Assertions.assertEquals("wlokjyem",
            model.value().get(0).properties().logzOrganizationProperties().singleSignOnUrl());
        Assertions.assertEquals("ni", model.value().get(0).properties().userInfo().firstName());
        Assertions.assertEquals("oxzjnchgejspod", model.value().get(0).properties().userInfo().lastName());
        Assertions.assertEquals("ilzyd", model.value().get(0).properties().userInfo().emailAddress());
        Assertions.assertEquals("o", model.value().get(0).properties().userInfo().phoneNumber());
        Assertions.assertEquals("ahuxinpm", model.value().get(0).properties().planData().usageType());
        Assertions.assertEquals("jaqwixjsp", model.value().get(0).properties().planData().billingCycle());
        Assertions.assertEquals("zvcputegjvwmfda", model.value().get(0).properties().planData().planDetails());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-13T14:44:26Z"),
            model.value().get(0).properties().planData().effectiveDate());
        Assertions.assertEquals(ManagedIdentityTypes.SYSTEM_ASSIGNED, model.value().get(0).identity().type());
        Assertions.assertEquals("sszdnru", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        LogzMonitorResourceListResponse model = new LogzMonitorResourceListResponse()
            .withValue(Arrays.asList(
                new LogzMonitorResourceInner().withLocation("jpslwejd")
                    .withTags(mapOf("psoacctazakljl", "ryo", "paojakhmsbzjh", "hbcryffdfdosyge", "hqtrgqjbpf",
                        "rzevdphlxaol"))
                    .withProperties(new MonitorProperties().withMonitoringStatus(MonitoringStatus.DISABLED)
                        .withMarketplaceSubscriptionStatus(MarketplaceSubscriptionStatus.ACTIVE)
                        .withLogzOrganizationProperties(new LogzOrganizationProperties().withCompanyName("k")
                            .withEnterpriseAppId("nyejhkryhtnap")
                            .withSingleSignOnUrl("wlokjyem"))
                        .withUserInfo(new UserInfo().withFirstName("ni")
                            .withLastName("oxzjnchgejspod")
                            .withEmailAddress("ilzyd")
                            .withPhoneNumber("o"))
                        .withPlanData(new PlanData().withUsageType("ahuxinpm")
                            .withBillingCycle("jaqwixjsp")
                            .withPlanDetails("zvcputegjvwmfda")
                            .withEffectiveDate(OffsetDateTime.parse("2021-09-13T14:44:26Z"))))
                    .withIdentity(new IdentityProperties().withType(ManagedIdentityTypes.SYSTEM_ASSIGNED)),
                new LogzMonitorResourceInner().withLocation("cqvkocrcjdkwtn")
                    .withTags(mapOf("p", "njbiksqrglssain", "mgxsab", "wnzlljfmppeeb", "jczdzevndh", "yqduujit",
                        "feusnhut", "rwpdappdsbdkvwrw"))
                    .withProperties(new MonitorProperties().withMonitoringStatus(MonitoringStatus.DISABLED)
                        .withMarketplaceSubscriptionStatus(MarketplaceSubscriptionStatus.ACTIVE)
                        .withLogzOrganizationProperties(new LogzOrganizationProperties().withCompanyName("xxypininmay")
                            .withEnterpriseAppId("odepoogin")
                            .withSingleSignOnUrl("amiheognarxz"))
                        .withUserInfo(new UserInfo().withFirstName("eotusivyevc")
                            .withLastName("qi")
                            .withEmailAddress("hungbwjzrnf")
                            .withPhoneNumber("xgispemvtzfkufu"))
                        .withPlanData(new PlanData().withUsageType("ofx")
                            .withBillingCycle("ofjaeqjhqjb")
                            .withPlanDetails("v")
                            .withEffectiveDate(OffsetDateTime.parse("2021-08-25T14:25:06Z"))))
                    .withIdentity(new IdentityProperties().withType(ManagedIdentityTypes.USER_ASSIGNED)),
                new LogzMonitorResourceInner().withLocation("dosvqwhbmdgbbjf")
                    .withTags(mapOf("q", "mbmbexppbh", "algbquxigjyjg", "rolfpfp", "lnerkujysvleju", "jaoyfhrtx"))
                    .withProperties(new MonitorProperties().withMonitoringStatus(MonitoringStatus.ENABLED)
                        .withMarketplaceSubscriptionStatus(MarketplaceSubscriptionStatus.SUSPENDED)
                        .withLogzOrganizationProperties(new LogzOrganizationProperties().withCompanyName("xhurok")
                            .withEnterpriseAppId("ukjfkgiawxklr")
                            .withSingleSignOnUrl("lwckbasyypnddhs"))
                        .withUserInfo(new UserInfo().withFirstName("acphejkoty")
                            .withLastName("gou")
                            .withEmailAddress("ndlik")
                            .withPhoneNumber("qkgfgibma"))
                        .withPlanData(new PlanData().withUsageType("keqsrxybzqqedq")
                            .withBillingCycle("bciqfouflm")
                            .withPlanDetails("kzsmodm")
                            .withEffectiveDate(OffsetDateTime.parse("2021-07-22T23:50:49Z"))))
                    .withIdentity(new IdentityProperties().withType(ManagedIdentityTypes.SYSTEM_ASSIGNED))))
            .withNextLink("sszdnru");
        model = BinaryData.fromObject(model).toObject(LogzMonitorResourceListResponse.class);
        Assertions.assertEquals("jpslwejd", model.value().get(0).location());
        Assertions.assertEquals("ryo", model.value().get(0).tags().get("psoacctazakljl"));
        Assertions.assertEquals(MonitoringStatus.DISABLED, model.value().get(0).properties().monitoringStatus());
        Assertions.assertEquals(MarketplaceSubscriptionStatus.ACTIVE,
            model.value().get(0).properties().marketplaceSubscriptionStatus());
        Assertions.assertEquals("k", model.value().get(0).properties().logzOrganizationProperties().companyName());
        Assertions.assertEquals("nyejhkryhtnap",
            model.value().get(0).properties().logzOrganizationProperties().enterpriseAppId());
        Assertions.assertEquals("wlokjyem",
            model.value().get(0).properties().logzOrganizationProperties().singleSignOnUrl());
        Assertions.assertEquals("ni", model.value().get(0).properties().userInfo().firstName());
        Assertions.assertEquals("oxzjnchgejspod", model.value().get(0).properties().userInfo().lastName());
        Assertions.assertEquals("ilzyd", model.value().get(0).properties().userInfo().emailAddress());
        Assertions.assertEquals("o", model.value().get(0).properties().userInfo().phoneNumber());
        Assertions.assertEquals("ahuxinpm", model.value().get(0).properties().planData().usageType());
        Assertions.assertEquals("jaqwixjsp", model.value().get(0).properties().planData().billingCycle());
        Assertions.assertEquals("zvcputegjvwmfda", model.value().get(0).properties().planData().planDetails());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-13T14:44:26Z"),
            model.value().get(0).properties().planData().effectiveDate());
        Assertions.assertEquals(ManagedIdentityTypes.SYSTEM_ASSIGNED, model.value().get(0).identity().type());
        Assertions.assertEquals("sszdnru", model.nextLink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
