// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.logz.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.logz.LogzManager;
import com.azure.resourcemanager.logz.models.LogzMonitorResource;
import com.azure.resourcemanager.logz.models.ManagedIdentityTypes;
import com.azure.resourcemanager.logz.models.MarketplaceSubscriptionStatus;
import com.azure.resourcemanager.logz.models.MonitoringStatus;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class SubAccountsGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"provisioningState\":\"Succeeded\",\"monitoringStatus\":\"Disabled\",\"marketplaceSubscriptionStatus\":\"Active\",\"logzOrganizationProperties\":{\"companyName\":\"tkoievseotgq\",\"id\":\"ltmuwlauwzizx\",\"enterpriseAppId\":\"pgcjefuzmuvp\",\"singleSignOnUrl\":\"tdum\"},\"userInfo\":{\"firstName\":\"pxebmnzbt\",\"lastName\":\"jpglkfgohdne\",\"emailAddress\":\"lfphsdyhtozfikd\",\"phoneNumber\":\"wq\"},\"planData\":{\"usageType\":\"xzxcl\",\"billingCycle\":\"thhqzonosggbh\",\"planDetails\":\"hfwdsjnkaljutiis\",\"effectiveDate\":\"2020-12-21T01:44:52Z\"},\"liftrResourceCategory\":\"Unknown\",\"liftrResourcePreference\":2043531661},\"identity\":{\"principalId\":\"zewk\",\"tenantId\":\"hqcrailvpnpp\",\"type\":\"SystemAssigned\"},\"location\":\"lrwdmhdlxyj\",\"tags\":{\"edgfbcvkcvq\":\"agafcnihgwqap\"},\"id\":\"pkeqdcvdrhvoo\",\"name\":\"sotbob\",\"type\":\"dopcjwvnh\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        LogzManager manager =
            LogzManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        LogzMonitorResource response =
            manager
                .subAccounts()
                .getWithResponse("xtibqdxbxwakbog", "xndlkzgxhu", "iplbpodxunkbebxm", com.azure.core.util.Context.NONE)
                .getValue();

        Assertions.assertEquals("lrwdmhdlxyj", response.location());
        Assertions.assertEquals("agafcnihgwqap", response.tags().get("edgfbcvkcvq"));
        Assertions.assertEquals(MonitoringStatus.DISABLED, response.properties().monitoringStatus());
        Assertions
            .assertEquals(MarketplaceSubscriptionStatus.ACTIVE, response.properties().marketplaceSubscriptionStatus());
        Assertions.assertEquals("tkoievseotgq", response.properties().logzOrganizationProperties().companyName());
        Assertions.assertEquals("pgcjefuzmuvp", response.properties().logzOrganizationProperties().enterpriseAppId());
        Assertions.assertEquals("tdum", response.properties().logzOrganizationProperties().singleSignOnUrl());
        Assertions.assertEquals("pxebmnzbt", response.properties().userInfo().firstName());
        Assertions.assertEquals("jpglkfgohdne", response.properties().userInfo().lastName());
        Assertions.assertEquals("lfphsdyhtozfikd", response.properties().userInfo().emailAddress());
        Assertions.assertEquals("wq", response.properties().userInfo().phoneNumber());
        Assertions.assertEquals("xzxcl", response.properties().planData().usageType());
        Assertions.assertEquals("thhqzonosggbh", response.properties().planData().billingCycle());
        Assertions.assertEquals("hfwdsjnkaljutiis", response.properties().planData().planDetails());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2020-12-21T01:44:52Z"), response.properties().planData().effectiveDate());
        Assertions.assertEquals(ManagedIdentityTypes.SYSTEM_ASSIGNED, response.identity().type());
    }
}
