// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.logz.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.logz.LogzManager;
import com.azure.resourcemanager.logz.fluent.models.LogzMonitorResourceInner;
import com.azure.resourcemanager.logz.models.IdentityProperties;
import com.azure.resourcemanager.logz.models.LogzMonitorResource;
import com.azure.resourcemanager.logz.models.LogzOrganizationProperties;
import com.azure.resourcemanager.logz.models.ManagedIdentityTypes;
import com.azure.resourcemanager.logz.models.MarketplaceSubscriptionStatus;
import com.azure.resourcemanager.logz.models.MonitorProperties;
import com.azure.resourcemanager.logz.models.MonitoringStatus;
import com.azure.resourcemanager.logz.models.PlanData;
import com.azure.resourcemanager.logz.models.UserInfo;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class SubAccountsCreateMockTests {
    @Test
    public void testCreate() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Succeeded\",\"monitoringStatus\":\"Enabled\",\"marketplaceSubscriptionStatus\":\"Suspended\",\"logzOrganizationProperties\":{\"companyName\":\"mutwuoe\",\"id\":\"pkhjwni\",\"enterpriseAppId\":\"sluicpdggkzz\",\"singleSignOnUrl\":\"mbmpaxmodfvuefy\"},\"userInfo\":{\"firstName\":\"pfvmwyhrfou\",\"lastName\":\"taakc\",\"emailAddress\":\"iyzvqtmnub\",\"phoneNumber\":\"kpzksmondjmq\"},\"planData\":{\"usageType\":\"ypomgkopkwho\",\"billingCycle\":\"pajqgxysm\",\"planDetails\":\"mbqfqvmk\",\"effectiveDate\":\"2020-12-29T20:52:17Z\"},\"liftrResourceCategory\":\"MonitorLogs\",\"liftrResourcePreference\":1373468362},\"identity\":{\"principalId\":\"lxprglyatddckcbc\",\"tenantId\":\"jrjxgciqibrhosx\",\"type\":\"UserAssigned\"},\"location\":\"rhzo\",\"tags\":{\"szdtmhrkwof\":\"bmrqyibahwfl\"},\"id\":\"yvoqa\",\"name\":\"piexpbtgiw\",\"type\":\"wo\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        LogzManager manager = LogzManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        LogzMonitorResource response = manager.subAccounts()
            .create("okonzmnsikvmkqz", "qqkdltfzxmhhvhgu", "eodkwobda", new LogzMonitorResourceInner()
                .withLocation("xzxcl")
                .withTags(mapOf("hcohfwdsjnk", "hhqzonosgg", "swacffgdkzz", "ljuti", "ppfufl", "wkfvhqcrailvp",
                    "gafcnihgwqapnedg", "wdmhdlxyjrxs"))
                .withProperties(new MonitorProperties().withMonitoringStatus(MonitoringStatus.ENABLED)
                    .withMarketplaceSubscriptionStatus(MarketplaceSubscriptionStatus.ACTIVE)
                    .withLogzOrganizationProperties(new LogzOrganizationProperties().withCompanyName("akbogqxndlkzgxh")
                        .withEnterpriseAppId("yyntwl")
                        .withSingleSignOnUrl("qtkoievs"))
                    .withUserInfo(new UserInfo().withFirstName("gqrlltmuwla")
                        .withLastName("zizxbmpgcj")
                        .withEmailAddress("u")
                        .withPhoneNumber("uvpb"))
                    .withPlanData(new PlanData().withUsageType("um")
                        .withBillingCycle("p")
                        .withPlanDetails("ebmnzbtbhjpglk")
                        .withEffectiveDate(OffsetDateTime.parse("2021-09-29T06:58:20Z"))))
                .withIdentity(new IdentityProperties().withType(ManagedIdentityTypes.SYSTEM_ASSIGNED)),
                com.azure.core.util.Context.NONE);

        Assertions.assertEquals("rhzo", response.location());
        Assertions.assertEquals("bmrqyibahwfl", response.tags().get("szdtmhrkwof"));
        Assertions.assertEquals(MonitoringStatus.ENABLED, response.properties().monitoringStatus());
        Assertions.assertEquals(MarketplaceSubscriptionStatus.SUSPENDED,
            response.properties().marketplaceSubscriptionStatus());
        Assertions.assertEquals("mutwuoe", response.properties().logzOrganizationProperties().companyName());
        Assertions.assertEquals("sluicpdggkzz", response.properties().logzOrganizationProperties().enterpriseAppId());
        Assertions.assertEquals("mbmpaxmodfvuefy",
            response.properties().logzOrganizationProperties().singleSignOnUrl());
        Assertions.assertEquals("pfvmwyhrfou", response.properties().userInfo().firstName());
        Assertions.assertEquals("taakc", response.properties().userInfo().lastName());
        Assertions.assertEquals("iyzvqtmnub", response.properties().userInfo().emailAddress());
        Assertions.assertEquals("kpzksmondjmq", response.properties().userInfo().phoneNumber());
        Assertions.assertEquals("ypomgkopkwho", response.properties().planData().usageType());
        Assertions.assertEquals("pajqgxysm", response.properties().planData().billingCycle());
        Assertions.assertEquals("mbqfqvmk", response.properties().planData().planDetails());
        Assertions.assertEquals(OffsetDateTime.parse("2020-12-29T20:52:17Z"),
            response.properties().planData().effectiveDate());
        Assertions.assertEquals(ManagedIdentityTypes.USER_ASSIGNED, response.identity().type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
