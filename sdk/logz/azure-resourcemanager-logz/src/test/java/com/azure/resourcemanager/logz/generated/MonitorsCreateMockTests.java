// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.logz.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.logz.LogzManager;
import com.azure.resourcemanager.logz.models.IdentityProperties;
import com.azure.resourcemanager.logz.models.LogzMonitorResource;
import com.azure.resourcemanager.logz.models.LogzOrganizationProperties;
import com.azure.resourcemanager.logz.models.ManagedIdentityTypes;
import com.azure.resourcemanager.logz.models.MarketplaceSubscriptionStatus;
import com.azure.resourcemanager.logz.models.MonitorProperties;
import com.azure.resourcemanager.logz.models.MonitoringStatus;
import com.azure.resourcemanager.logz.models.PlanData;
import com.azure.resourcemanager.logz.models.UserInfo;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class MonitorsCreateMockTests {
    @Test
    public void testCreate() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Succeeded\",\"monitoringStatus\":\"Enabled\",\"marketplaceSubscriptionStatus\":\"Suspended\",\"logzOrganizationProperties\":{\"companyName\":\"seyvj\",\"id\":\"rts\",\"enterpriseAppId\":\"spkdee\",\"singleSignOnUrl\":\"ofmxagkvtmelmqkr\"},\"userInfo\":{\"firstName\":\"vljua\",\"lastName\":\"quhcdhmduala\",\"emailAddress\":\"qpv\",\"phoneNumber\":\"dmwsrcrgvxpvgomz\"},\"planData\":{\"usageType\":\"isgwbnbbeldawkz\",\"billingCycle\":\"liourqhak\",\"planDetails\":\"hashsfwxosow\",\"effectiveDate\":\"2021-06-30T00:10:41Z\"},\"liftrResourceCategory\":\"MonitorLogs\",\"liftrResourcePreference\":1879830205},\"identity\":{\"principalId\":\"oxdjebwpuc\",\"tenantId\":\"fvovbvmeuecivy\",\"type\":\"SystemAssigned\"},\"location\":\"euojgjrwju\",\"tags\":{\"dytdxwitx\":\"twm\",\"qwgxhniskx\":\"rjaw\"},\"id\":\"bkpyc\",\"name\":\"klwndnhjdauwhv\",\"type\":\"l\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        LogzManager manager = LogzManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        LogzMonitorResource response = manager.monitors()
            .define("lpvlopw")
            .withRegion("gyepsbjt")
            .withExistingResourceGroup("gmgsxnkjzkde")
            .withTags(mapOf("zwfqkqujidsuyon", "ugxywpmueef", "yudxytlmoy", "bglaocqxtccm", "fudwpznt", "xv",
                "hckfrlhrx", "hdzhlrqj"))
            .withProperties(new MonitorProperties().withMonitoringStatus(MonitoringStatus.ENABLED)
                .withMarketplaceSubscriptionStatus(MarketplaceSubscriptionStatus.ACTIVE)
                .withLogzOrganizationProperties(new LogzOrganizationProperties().withCompanyName("baiuebbaumny")
                    .withEnterpriseAppId("jn")
                    .withSingleSignOnUrl("ckhsmtxpsieb"))
                .withUserInfo(new UserInfo().withFirstName("vpesapskrdqmhjjd")
                    .withLastName("ldwkyzxuutkn")
                    .withEmailAddress("scwsv")
                    .withPhoneNumber("otogtwrupqs"))
                .withPlanData(new PlanData().withUsageType("micykvceoveilo")
                    .withBillingCycle("oty")
                    .withPlanDetails("fcnj")
                    .withEffectiveDate(OffsetDateTime.parse("2021-08-21T09:13:10Z"))))
            .withIdentity(new IdentityProperties().withType(ManagedIdentityTypes.SYSTEM_ASSIGNED))
            .create();

        Assertions.assertEquals("euojgjrwju", response.location());
        Assertions.assertEquals("twm", response.tags().get("dytdxwitx"));
        Assertions.assertEquals(MonitoringStatus.ENABLED, response.properties().monitoringStatus());
        Assertions.assertEquals(MarketplaceSubscriptionStatus.SUSPENDED,
            response.properties().marketplaceSubscriptionStatus());
        Assertions.assertEquals("seyvj", response.properties().logzOrganizationProperties().companyName());
        Assertions.assertEquals("spkdee", response.properties().logzOrganizationProperties().enterpriseAppId());
        Assertions.assertEquals("ofmxagkvtmelmqkr",
            response.properties().logzOrganizationProperties().singleSignOnUrl());
        Assertions.assertEquals("vljua", response.properties().userInfo().firstName());
        Assertions.assertEquals("quhcdhmduala", response.properties().userInfo().lastName());
        Assertions.assertEquals("qpv", response.properties().userInfo().emailAddress());
        Assertions.assertEquals("dmwsrcrgvxpvgomz", response.properties().userInfo().phoneNumber());
        Assertions.assertEquals("isgwbnbbeldawkz", response.properties().planData().usageType());
        Assertions.assertEquals("liourqhak", response.properties().planData().billingCycle());
        Assertions.assertEquals("hashsfwxosow", response.properties().planData().planDetails());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-30T00:10:41Z"),
            response.properties().planData().effectiveDate());
        Assertions.assertEquals(ManagedIdentityTypes.SYSTEM_ASSIGNED, response.identity().type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
