// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.logz.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.logz.models.FilteringTag;
import com.azure.resourcemanager.logz.models.LogRules;
import com.azure.resourcemanager.logz.models.MonitoringTagRulesProperties;
import com.azure.resourcemanager.logz.models.TagAction;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class MonitoringTagRulesPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        MonitoringTagRulesProperties model = BinaryData.fromString(
            "{\"provisioningState\":\"Updating\",\"logRules\":{\"sendAadLogs\":false,\"sendSubscriptionLogs\":false,\"sendActivityLogs\":true,\"filteringTags\":[{\"name\":\"bonqvpkvlrxnjeas\",\"value\":\"pheoflokeyy\",\"action\":\"Include\"},{\"name\":\"bdlwtgrhpdjpj\",\"value\":\"asxazjpqyegualhb\",\"action\":\"Include\"},{\"name\":\"jj\",\"value\":\"v\",\"action\":\"Exclude\"}]}}")
            .toObject(MonitoringTagRulesProperties.class);
        Assertions.assertEquals(false, model.logRules().sendAadLogs());
        Assertions.assertEquals(false, model.logRules().sendSubscriptionLogs());
        Assertions.assertEquals(true, model.logRules().sendActivityLogs());
        Assertions.assertEquals("bonqvpkvlrxnjeas", model.logRules().filteringTags().get(0).name());
        Assertions.assertEquals("pheoflokeyy", model.logRules().filteringTags().get(0).value());
        Assertions.assertEquals(TagAction.INCLUDE, model.logRules().filteringTags().get(0).action());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        MonitoringTagRulesProperties model = new MonitoringTagRulesProperties().withLogRules(new LogRules()
            .withSendAadLogs(false)
            .withSendSubscriptionLogs(false)
            .withSendActivityLogs(true)
            .withFilteringTags(Arrays.asList(
                new FilteringTag().withName("bonqvpkvlrxnjeas").withValue("pheoflokeyy").withAction(TagAction.INCLUDE),
                new FilteringTag().withName("bdlwtgrhpdjpj")
                    .withValue("asxazjpqyegualhb")
                    .withAction(TagAction.INCLUDE),
                new FilteringTag().withName("jj").withValue("v").withAction(TagAction.EXCLUDE))));
        model = BinaryData.fromObject(model).toObject(MonitoringTagRulesProperties.class);
        Assertions.assertEquals(false, model.logRules().sendAadLogs());
        Assertions.assertEquals(false, model.logRules().sendSubscriptionLogs());
        Assertions.assertEquals(true, model.logRules().sendActivityLogs());
        Assertions.assertEquals("bonqvpkvlrxnjeas", model.logRules().filteringTags().get(0).name());
        Assertions.assertEquals("pheoflokeyy", model.logRules().filteringTags().get(0).value());
        Assertions.assertEquals(TagAction.INCLUDE, model.logRules().filteringTags().get(0).action());
    }
}
