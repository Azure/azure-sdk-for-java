// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.logz.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.logz.models.FilteringTag;
import com.azure.resourcemanager.logz.models.LogRules;
import com.azure.resourcemanager.logz.models.MonitoringTagRulesProperties;
import com.azure.resourcemanager.logz.models.TagAction;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class MonitoringTagRulesPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        MonitoringTagRulesProperties model =
            BinaryData
                .fromString(
                    "{\"provisioningState\":\"Succeeded\",\"logRules\":{\"sendAadLogs\":true,\"sendSubscriptionLogs\":true,\"sendActivityLogs\":true,\"filteringTags\":[{\"name\":\"l\",\"value\":\"majtjaod\",\"action\":\"Exclude\"},{\"name\":\"bdxkqpxokaj\",\"value\":\"npime\",\"action\":\"Include\"}]}}")
                .toObject(MonitoringTagRulesProperties.class);
        Assertions.assertEquals(true, model.logRules().sendAadLogs());
        Assertions.assertEquals(true, model.logRules().sendSubscriptionLogs());
        Assertions.assertEquals(true, model.logRules().sendActivityLogs());
        Assertions.assertEquals("l", model.logRules().filteringTags().get(0).name());
        Assertions.assertEquals("majtjaod", model.logRules().filteringTags().get(0).value());
        Assertions.assertEquals(TagAction.EXCLUDE, model.logRules().filteringTags().get(0).action());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        MonitoringTagRulesProperties model =
            new MonitoringTagRulesProperties()
                .withLogRules(
                    new LogRules()
                        .withSendAadLogs(true)
                        .withSendSubscriptionLogs(true)
                        .withSendActivityLogs(true)
                        .withFilteringTags(
                            Arrays
                                .asList(
                                    new FilteringTag()
                                        .withName("l")
                                        .withValue("majtjaod")
                                        .withAction(TagAction.EXCLUDE),
                                    new FilteringTag()
                                        .withName("bdxkqpxokaj")
                                        .withValue("npime")
                                        .withAction(TagAction.INCLUDE))));
        model = BinaryData.fromObject(model).toObject(MonitoringTagRulesProperties.class);
        Assertions.assertEquals(true, model.logRules().sendAadLogs());
        Assertions.assertEquals(true, model.logRules().sendSubscriptionLogs());
        Assertions.assertEquals(true, model.logRules().sendActivityLogs());
        Assertions.assertEquals("l", model.logRules().filteringTags().get(0).name());
        Assertions.assertEquals("majtjaod", model.logRules().filteringTags().get(0).value());
        Assertions.assertEquals(TagAction.EXCLUDE, model.logRules().filteringTags().get(0).action());
    }
}
