// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.logz.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.logz.LogzManager;
import com.azure.resourcemanager.logz.models.LogzMonitorResource;
import com.azure.resourcemanager.logz.models.LogzMonitorResourceUpdateParameters;
import com.azure.resourcemanager.logz.models.ManagedIdentityTypes;
import com.azure.resourcemanager.logz.models.MarketplaceSubscriptionStatus;
import com.azure.resourcemanager.logz.models.MonitorUpdateProperties;
import com.azure.resourcemanager.logz.models.MonitoringStatus;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class SubAccountsUpdateWithResponseMockTests {
    @Test
    public void testUpdateWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"provisioningState\":\"Succeeded\",\"monitoringStatus\":\"Enabled\",\"marketplaceSubscriptionStatus\":\"Active\",\"logzOrganizationProperties\":{\"companyName\":\"pajqgxysm\",\"id\":\"mbqfqvmk\",\"enterpriseAppId\":\"oz\",\"singleSignOnUrl\":\"vhelxprglyatdd\"},\"userInfo\":{\"firstName\":\"bcuejrjxgci\",\"lastName\":\"brh\",\"emailAddress\":\"xsdqrhzoymibmrqy\",\"phoneNumber\":\"ahwfluszdtmhrk\"},\"planData\":{\"usageType\":\"yyv\",\"billingCycle\":\"acpie\",\"planDetails\":\"btgiwbwoenwas\",\"effectiveDate\":\"2021-04-27T10:32:13Z\"},\"liftrResourceCategory\":\"Unknown\",\"liftrResourcePreference\":1226493160},\"identity\":{\"principalId\":\"xwbpokulpiuj\",\"tenantId\":\"asipqiio\",\"type\":\"UserAssigned\"},\"location\":\"qerpqlpqwcc\",\"tags\":{\"btkuwhh\":\"gbdbutauv\",\"koymkcd\":\"hykojoxafnndlpic\"},\"id\":\"h\",\"name\":\"pkkpw\",\"type\":\"reqnovvqfov\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        LogzManager manager =
            LogzManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        LogzMonitorResource response =
            manager
                .subAccounts()
                .updateWithResponse(
                    "qsluicp",
                    "ggkzzlvmbmpa",
                    "modfvuefywsbpfvm",
                    new LogzMonitorResourceUpdateParameters()
                        .withProperties(new MonitorUpdateProperties().withMonitoringStatus(MonitoringStatus.DISABLED))
                        .withTags(mapOf("kcpwiy", "uyfta", "xkp", "vqtmnub", "mquxvypo", "ksmond")),
                    com.azure.core.util.Context.NONE)
                .getValue();

        Assertions.assertEquals("qerpqlpqwcc", response.location());
        Assertions.assertEquals("gbdbutauv", response.tags().get("btkuwhh"));
        Assertions.assertEquals(MonitoringStatus.ENABLED, response.properties().monitoringStatus());
        Assertions
            .assertEquals(MarketplaceSubscriptionStatus.ACTIVE, response.properties().marketplaceSubscriptionStatus());
        Assertions.assertEquals("pajqgxysm", response.properties().logzOrganizationProperties().companyName());
        Assertions.assertEquals("oz", response.properties().logzOrganizationProperties().enterpriseAppId());
        Assertions.assertEquals("vhelxprglyatdd", response.properties().logzOrganizationProperties().singleSignOnUrl());
        Assertions.assertEquals("bcuejrjxgci", response.properties().userInfo().firstName());
        Assertions.assertEquals("brh", response.properties().userInfo().lastName());
        Assertions.assertEquals("xsdqrhzoymibmrqy", response.properties().userInfo().emailAddress());
        Assertions.assertEquals("ahwfluszdtmhrk", response.properties().userInfo().phoneNumber());
        Assertions.assertEquals("yyv", response.properties().planData().usageType());
        Assertions.assertEquals("acpie", response.properties().planData().billingCycle());
        Assertions.assertEquals("btgiwbwoenwas", response.properties().planData().planDetails());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-04-27T10:32:13Z"), response.properties().planData().effectiveDate());
        Assertions.assertEquals(ManagedIdentityTypes.USER_ASSIGNED, response.identity().type());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
