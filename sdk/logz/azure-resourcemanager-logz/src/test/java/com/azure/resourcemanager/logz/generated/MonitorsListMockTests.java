// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.logz.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.logz.LogzManager;
import com.azure.resourcemanager.logz.models.LogzMonitorResource;
import com.azure.resourcemanager.logz.models.ManagedIdentityTypes;
import com.azure.resourcemanager.logz.models.MarketplaceSubscriptionStatus;
import com.azure.resourcemanager.logz.models.MonitoringStatus;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class MonitorsListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"provisioningState\":\"Accepted\",\"monitoringStatus\":\"Enabled\",\"marketplaceSubscriptionStatus\":\"Suspended\",\"logzOrganizationProperties\":{\"companyName\":\"fmvfaxkffeiit\",\"id\":\"vmezy\",\"enterpriseAppId\":\"hxmzsbbzoggig\",\"singleSignOnUrl\":\"wburvjxxjnspydpt\"},\"userInfo\":{\"firstName\":\"nkoukn\",\"lastName\":\"dwtiukbldngkp\",\"emailAddress\":\"ipazyxoegukgjnpi\",\"phoneNumber\":\"gygev\"},\"planData\":{\"usageType\":\"typmrbpizcdrqjsd\",\"billingCycle\":\"dnfyhxdeoejzicwi\",\"planDetails\":\"jttgzf\",\"effectiveDate\":\"2021-03-25T08:46:02Z\"},\"liftrResourceCategory\":\"Unknown\",\"liftrResourcePreference\":1326905161},\"identity\":{\"principalId\":\"deyeamdphagalpbu\",\"tenantId\":\"gipwhonowkg\",\"type\":\"UserAssigned\"},\"location\":\"ankixzbinjeput\",\"tags\":{\"tiyqzrnkcqv\":\"ywnuzoq\"},\"id\":\"xlwhzlsicoh\",\"name\":\"qqn\",\"type\":\"vlryavwhheunmmq\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        LogzManager manager = LogzManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<LogzMonitorResource> response = manager.monitors().list(com.azure.core.util.Context.NONE);

        Assertions.assertEquals("ankixzbinjeput", response.iterator().next().location());
        Assertions.assertEquals("ywnuzoq", response.iterator().next().tags().get("tiyqzrnkcqv"));
        Assertions.assertEquals(MonitoringStatus.ENABLED, response.iterator().next().properties().monitoringStatus());
        Assertions.assertEquals(MarketplaceSubscriptionStatus.SUSPENDED,
            response.iterator().next().properties().marketplaceSubscriptionStatus());
        Assertions.assertEquals("fmvfaxkffeiit",
            response.iterator().next().properties().logzOrganizationProperties().companyName());
        Assertions.assertEquals("hxmzsbbzoggig",
            response.iterator().next().properties().logzOrganizationProperties().enterpriseAppId());
        Assertions.assertEquals("wburvjxxjnspydpt",
            response.iterator().next().properties().logzOrganizationProperties().singleSignOnUrl());
        Assertions.assertEquals("nkoukn", response.iterator().next().properties().userInfo().firstName());
        Assertions.assertEquals("dwtiukbldngkp", response.iterator().next().properties().userInfo().lastName());
        Assertions.assertEquals("ipazyxoegukgjnpi", response.iterator().next().properties().userInfo().emailAddress());
        Assertions.assertEquals("gygev", response.iterator().next().properties().userInfo().phoneNumber());
        Assertions.assertEquals("typmrbpizcdrqjsd", response.iterator().next().properties().planData().usageType());
        Assertions.assertEquals("dnfyhxdeoejzicwi", response.iterator().next().properties().planData().billingCycle());
        Assertions.assertEquals("jttgzf", response.iterator().next().properties().planData().planDetails());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-25T08:46:02Z"),
            response.iterator().next().properties().planData().effectiveDate());
        Assertions.assertEquals(ManagedIdentityTypes.USER_ASSIGNED, response.iterator().next().identity().type());
    }
}
