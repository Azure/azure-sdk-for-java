// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.logz.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The LogzOrganizationProperties model.
 */
@Fluent
public final class LogzOrganizationProperties implements JsonSerializable<LogzOrganizationProperties> {
    /*
     * Name of the Logz organization.
     */
    private String companyName;

    /*
     * Id of the Logz organization.
     */
    private String id;

    /*
     * The Id of the Enterprise App used for Single sign on.
     */
    private String enterpriseAppId;

    /*
     * The login URL specific to this Logz Organization.
     */
    private String singleSignOnUrl;

    /**
     * Creates an instance of LogzOrganizationProperties class.
     */
    public LogzOrganizationProperties() {
    }

    /**
     * Get the companyName property: Name of the Logz organization.
     * 
     * @return the companyName value.
     */
    public String companyName() {
        return this.companyName;
    }

    /**
     * Set the companyName property: Name of the Logz organization.
     * 
     * @param companyName the companyName value to set.
     * @return the LogzOrganizationProperties object itself.
     */
    public LogzOrganizationProperties withCompanyName(String companyName) {
        this.companyName = companyName;
        return this;
    }

    /**
     * Get the id property: Id of the Logz organization.
     * 
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Get the enterpriseAppId property: The Id of the Enterprise App used for Single sign on.
     * 
     * @return the enterpriseAppId value.
     */
    public String enterpriseAppId() {
        return this.enterpriseAppId;
    }

    /**
     * Set the enterpriseAppId property: The Id of the Enterprise App used for Single sign on.
     * 
     * @param enterpriseAppId the enterpriseAppId value to set.
     * @return the LogzOrganizationProperties object itself.
     */
    public LogzOrganizationProperties withEnterpriseAppId(String enterpriseAppId) {
        this.enterpriseAppId = enterpriseAppId;
        return this;
    }

    /**
     * Get the singleSignOnUrl property: The login URL specific to this Logz Organization.
     * 
     * @return the singleSignOnUrl value.
     */
    public String singleSignOnUrl() {
        return this.singleSignOnUrl;
    }

    /**
     * Set the singleSignOnUrl property: The login URL specific to this Logz Organization.
     * 
     * @param singleSignOnUrl the singleSignOnUrl value to set.
     * @return the LogzOrganizationProperties object itself.
     */
    public LogzOrganizationProperties withSingleSignOnUrl(String singleSignOnUrl) {
        this.singleSignOnUrl = singleSignOnUrl;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("companyName", this.companyName);
        jsonWriter.writeStringField("enterpriseAppId", this.enterpriseAppId);
        jsonWriter.writeStringField("singleSignOnUrl", this.singleSignOnUrl);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LogzOrganizationProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LogzOrganizationProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the LogzOrganizationProperties.
     */
    public static LogzOrganizationProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LogzOrganizationProperties deserializedLogzOrganizationProperties = new LogzOrganizationProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("companyName".equals(fieldName)) {
                    deserializedLogzOrganizationProperties.companyName = reader.getString();
                } else if ("id".equals(fieldName)) {
                    deserializedLogzOrganizationProperties.id = reader.getString();
                } else if ("enterpriseAppId".equals(fieldName)) {
                    deserializedLogzOrganizationProperties.enterpriseAppId = reader.getString();
                } else if ("singleSignOnUrl".equals(fieldName)) {
                    deserializedLogzOrganizationProperties.singleSignOnUrl = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLogzOrganizationProperties;
        });
    }
}
