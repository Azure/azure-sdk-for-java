<!-- Copyright (c) Microsoft Corporation. All rights reserved.
     Licensed under the MIT License. -->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">

    <modelVersion>4.0.0</modelVersion>

    <groupId>com.azure</groupId>
    <artifactId>azure-aot-graalvm-support</artifactId>
    <version>1.0.0-beta.4</version> <!-- {x-version-update;com.azure:azure-aot-graalvm-support;current} -->

    <packaging>jar</packaging>
    <name>Microsoft Azure GraalVM support</name>
    <description>
      This package is deprecated will have no further updates. Dependency on this library is no longer required to build native images with Azure SDK for Java.
      For more details, please refer to https://devblogs.microsoft.com/azure-sdk/announcing-graalvm-support-in-azure-sdk-for-java-and-spring-cloud-azure-libraries
    </description>
    <parent>
        <groupId>com.azure</groupId>
        <artifactId>azure-client-sdk-parent</artifactId>
        <version>1.7.0</version> <!-- {x-version-update;com.azure:azure-client-sdk-parent;current} -->
        <relativePath>../../parents/azure-client-sdk-parent</relativePath>
    </parent>
    <url>https://github.com/Azure/azure-sdk-for-java</url>

    <licenses>
        <license>
            <name>The MIT License (MIT)</name>
            <url>http://opensource.org/licenses/MIT</url>
            <distribution>repo</distribution>
        </license>
    </licenses>

    <distributionManagement>
        <site>
            <id>azure-java-build-docs</id>
            <url>${site.url}/site/${project.artifactId}</url>
        </site>
    </distributionManagement>

    <scm>
        <url>scm:git:https://github.com/Azure/azure-sdk-for-java</url>
        <connection>scm:git:git@github.com:Azure/azure-sdk-for-java.git</connection>
        <tag>HEAD</tag>
    </scm>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <legal>
            <![CDATA[[INFO] Any downloads listed may be third party software. Microsoft grants you no rights for third party software.]]></legal>
    </properties>

    <developers>
        <developer>
            <id>microsoft</id>
            <name>Microsoft</name>
        </developer>
    </developers>

    <dependencies>
        <dependency>
            <groupId>org.graalvm.sdk</groupId>
            <artifactId>graal-sdk</artifactId>
            <version>22.0.0.2</version>  <!-- {x-version-update;org.graalvm.sdk:graal-sdk;external_dependency} -->
        </dependency>
        <dependency>
            <groupId>org.graalvm.nativeimage</groupId>
            <artifactId>svm</artifactId>
            <version>22.0.0.2</version>  <!-- {x-version-update;org.graalvm.nativeimage:svm;external_dependency} -->
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-enforcer-plugin</artifactId>
                <version>3.0.0-M3</version> <!-- {x-version-update;org.apache.maven.plugins:maven-enforcer-plugin;external_dependency} -->
                <configuration>
                    <rules>
                        <bannedDependencies>
                            <includes>
                                <include>org.graalvm.sdk:graal-sdk:[22.0.0.2]</include> <!-- {x-include-update;org.graalvm.sdk:graal-sdk;external_dependency} -->
                                <include>org.graalvm.nativeimage:svm:[22.0.0.2]</include> <!-- {x-include-update;org.graalvm.nativeimage:svm;external_dependency} -->
                            </includes>
                        </bannedDependencies>
                    </rules>
                </configuration>
            </plugin>

            <!-- START: Empty Java Doc -->
            <!-- The following code will generate an empty javadoc with just a README.md. This is necessary
                 to pass the required checks on Maven. The way this works is by setting the classesDirectory
                 to a directory that only contains the README.md, which we need to copy. If the classesDirectory
                 is set to the root, where the README.md lives, it still won't have javadocs but the jar file
                 will contain a bunch of files that shouldn't be there. The faux sources directory is deleted
                 and recreated with the README.md being copied every time to guarantee that, when building locally,
                 it'll have the latest copy of the README.md file.
            -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-javadoc-plugin</artifactId>
                <version>3.4.1</version> <!-- {x-version-update;org.apache.maven.plugins:maven-javadoc-plugin;external_dependency} -->
                <executions>
                    <execution>
                        <id>attach-javadocs</id>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                        <configuration>
                            <skip>true</skip>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>3.2.2</version> <!-- {x-version-update;org.apache.maven.plugins:maven-jar-plugin;external_dependency} -->
                <executions>
                    <execution>
                        <id>empty-javadoc-jar-with-readme</id>
                        <phase>package</phase>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                        <configuration>
                            <classifier>javadoc</classifier>
                            <classesDirectory>${project.basedir}/javadocTemp</classesDirectory>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-antrun-plugin</artifactId>
                <version>3.0.0</version> <!-- {x-version-update;org.apache.maven.plugins:maven-antrun-plugin;external_dependency} -->
                <executions>
                    <execution>
                        <id>copy-readme-to-javadocTemp</id>
                        <phase>prepare-package</phase>
                        <configuration>
                            <target>
                                <echo>Deleting existing ${project.basedir}/javadocTemp</echo>
                                <delete includeEmptyDirs="true" quiet="true">
                                    <fileset dir="${project.basedir}/javadocTemp"/>
                                </delete>
                                <echo>Copying ${project.basedir}/README.md to
                                    ${project.basedir}/javadocTemp/README.md
                                </echo>
                                <copy file="${project.basedir}/README.md" tofile="${project.basedir}/javadocTemp/README.md"/>
                            </target>
                        </configuration>
                        <goals>
                            <goal>run</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <!-- END: Empty Java Doc -->
        </plugins>
    </build>
</project>
