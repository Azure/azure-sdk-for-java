// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.edgezones.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The properties of an Extended Zone resource.
 */
@Immutable
public final class ExtendedZoneProperties implements JsonSerializable<ExtendedZoneProperties> {
    /*
     * Status of the last operation performed by the subscription on the Edge Zone resource
     */
    private ProvisioningState provisioningState;

    /*
     * Indicates the Azure Extended Zone registration’s approval status.
     */
    private RegistrationState registrationState;

    /*
     * Display name of the Azure Extended Zone.
     */
    private String displayName;

    /*
     * Regional display name of the Azure Extended Zone.
     */
    private String regionalDisplayName;

    /*
     * Type of region for the Azure Extended Zone.
     */
    private String regionType;

    /*
     * Category of region for the Azure Extended Zone.
     */
    private String regionCategory;

    /*
     * Geography of the Azure Extended Zone.
     */
    private String geography;

    /*
     * The Geography Group of the Azure Extended Zone.
     */
    private String geographyGroup;

    /*
     * The Longitude of the Azure Extended Zone.
     */
    private String longitude;

    /*
     * The Latitude of the Azure Extended Zone.
     */
    private String latitude;

    /*
     * The Home Location of the Azure Extended Zone.
     */
    private String homeLocation;

    /**
     * Creates an instance of ExtendedZoneProperties class.
     */
    public ExtendedZoneProperties() {
    }

    /**
     * Get the provisioningState property: Status of the last operation performed by the subscription on the Edge Zone
     * resource.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the registrationState property: Indicates the Azure Extended Zone registration’s approval status.
     * 
     * @return the registrationState value.
     */
    public RegistrationState registrationState() {
        return this.registrationState;
    }

    /**
     * Get the displayName property: Display name of the Azure Extended Zone.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Get the regionalDisplayName property: Regional display name of the Azure Extended Zone.
     * 
     * @return the regionalDisplayName value.
     */
    public String regionalDisplayName() {
        return this.regionalDisplayName;
    }

    /**
     * Get the regionType property: Type of region for the Azure Extended Zone.
     * 
     * @return the regionType value.
     */
    public String regionType() {
        return this.regionType;
    }

    /**
     * Get the regionCategory property: Category of region for the Azure Extended Zone.
     * 
     * @return the regionCategory value.
     */
    public String regionCategory() {
        return this.regionCategory;
    }

    /**
     * Get the geography property: Geography of the Azure Extended Zone.
     * 
     * @return the geography value.
     */
    public String geography() {
        return this.geography;
    }

    /**
     * Get the geographyGroup property: The Geography Group of the Azure Extended Zone.
     * 
     * @return the geographyGroup value.
     */
    public String geographyGroup() {
        return this.geographyGroup;
    }

    /**
     * Get the longitude property: The Longitude of the Azure Extended Zone.
     * 
     * @return the longitude value.
     */
    public String longitude() {
        return this.longitude;
    }

    /**
     * Get the latitude property: The Latitude of the Azure Extended Zone.
     * 
     * @return the latitude value.
     */
    public String latitude() {
        return this.latitude;
    }

    /**
     * Get the homeLocation property: The Home Location of the Azure Extended Zone.
     * 
     * @return the homeLocation value.
     */
    public String homeLocation() {
        return this.homeLocation;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ExtendedZoneProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ExtendedZoneProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ExtendedZoneProperties.
     */
    public static ExtendedZoneProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ExtendedZoneProperties deserializedExtendedZoneProperties = new ExtendedZoneProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("displayName".equals(fieldName)) {
                    deserializedExtendedZoneProperties.displayName = reader.getString();
                } else if ("regionalDisplayName".equals(fieldName)) {
                    deserializedExtendedZoneProperties.regionalDisplayName = reader.getString();
                } else if ("regionType".equals(fieldName)) {
                    deserializedExtendedZoneProperties.regionType = reader.getString();
                } else if ("regionCategory".equals(fieldName)) {
                    deserializedExtendedZoneProperties.regionCategory = reader.getString();
                } else if ("geography".equals(fieldName)) {
                    deserializedExtendedZoneProperties.geography = reader.getString();
                } else if ("geographyGroup".equals(fieldName)) {
                    deserializedExtendedZoneProperties.geographyGroup = reader.getString();
                } else if ("longitude".equals(fieldName)) {
                    deserializedExtendedZoneProperties.longitude = reader.getString();
                } else if ("latitude".equals(fieldName)) {
                    deserializedExtendedZoneProperties.latitude = reader.getString();
                } else if ("homeLocation".equals(fieldName)) {
                    deserializedExtendedZoneProperties.homeLocation = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedExtendedZoneProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else if ("registrationState".equals(fieldName)) {
                    deserializedExtendedZoneProperties.registrationState
                        = RegistrationState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedExtendedZoneProperties;
        });
    }
}
