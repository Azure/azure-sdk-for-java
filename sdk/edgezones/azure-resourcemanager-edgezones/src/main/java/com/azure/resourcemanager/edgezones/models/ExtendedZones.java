// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.edgezones.models;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;

/**
 * Resource collection API of ExtendedZones.
 */
public interface ExtendedZones {
    /**
     * Lists the Azure Extended Zones available to a subscription.
     * 
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a ExtendedZone list operation as paginated response with {@link PagedIterable}.
     */
    PagedIterable<ExtendedZone> list();

    /**
     * Lists the Azure Extended Zones available to a subscription.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a ExtendedZone list operation as paginated response with {@link PagedIterable}.
     */
    PagedIterable<ExtendedZone> list(Context context);

    /**
     * Gets an Azure Extended Zone for a subscription.
     * 
     * @param extendedZoneName The name of the ExtendedZone.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an Azure Extended Zone for a subscription along with {@link Response}.
     */
    Response<ExtendedZone> getWithResponse(String extendedZoneName, Context context);

    /**
     * Gets an Azure Extended Zone for a subscription.
     * 
     * @param extendedZoneName The name of the ExtendedZone.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an Azure Extended Zone for a subscription.
     */
    ExtendedZone get(String extendedZoneName);

    /**
     * Registers a subscription for an Extended Zone.
     * 
     * @param extendedZoneName The name of the ExtendedZone.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return resource that represents an Azure Extended Zone available to a subscription for registering and
     * unregistering along with {@link Response}.
     */
    Response<ExtendedZone> registerWithResponse(String extendedZoneName, Context context);

    /**
     * Registers a subscription for an Extended Zone.
     * 
     * @param extendedZoneName The name of the ExtendedZone.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return resource that represents an Azure Extended Zone available to a subscription for registering and
     * unregistering.
     */
    ExtendedZone register(String extendedZoneName);

    /**
     * Unregisters a subscription for an Extended Zone.
     * 
     * @param extendedZoneName The name of the ExtendedZone.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return resource that represents an Azure Extended Zone available to a subscription for registering and
     * unregistering along with {@link Response}.
     */
    Response<ExtendedZone> unregisterWithResponse(String extendedZoneName, Context context);

    /**
     * Unregisters a subscription for an Extended Zone.
     * 
     * @param extendedZoneName The name of the ExtendedZone.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return resource that represents an Azure Extended Zone available to a subscription for registering and
     * unregistering.
     */
    ExtendedZone unregister(String extendedZoneName);
}
