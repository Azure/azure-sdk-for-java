// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.storagemover.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.storagemover.fluent.models.AgentUpdateProperties;
import com.azure.resourcemanager.storagemover.models.DayOfWeek;
import com.azure.resourcemanager.storagemover.models.Minute;
import com.azure.resourcemanager.storagemover.models.Time;
import com.azure.resourcemanager.storagemover.models.UploadLimitSchedule;
import com.azure.resourcemanager.storagemover.models.UploadLimitWeeklyRecurrence;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class AgentUpdatePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AgentUpdateProperties model = BinaryData.fromString(
            "{\"description\":\"hocdgeab\",\"uploadLimitSchedule\":{\"weeklyRecurrences\":[{\"limitInMbps\":1780121294,\"days\":[\"Friday\"],\"startTime\":{\"hour\":1962929741,\"minute\":0},\"endTime\":{\"hour\":1906017395,\"minute\":30}},{\"limitInMbps\":1455747257,\"days\":[\"Friday\",\"Friday\",\"Wednesday\"],\"startTime\":{\"hour\":693432264,\"minute\":0},\"endTime\":{\"hour\":655079148,\"minute\":30}},{\"limitInMbps\":1605541354,\"days\":[\"Tuesday\",\"Monday\"],\"startTime\":{\"hour\":233179905,\"minute\":0},\"endTime\":{\"hour\":1369496360,\"minute\":30}}]}}")
            .toObject(AgentUpdateProperties.class);
        Assertions.assertEquals("hocdgeab", model.description());
        Assertions.assertEquals(1962929741, model.uploadLimitSchedule().weeklyRecurrences().get(0).startTime().hour());
        Assertions.assertEquals(Minute.ZERO,
            model.uploadLimitSchedule().weeklyRecurrences().get(0).startTime().minute());
        Assertions.assertEquals(1906017395, model.uploadLimitSchedule().weeklyRecurrences().get(0).endTime().hour());
        Assertions.assertEquals(Minute.THREE_ZERO,
            model.uploadLimitSchedule().weeklyRecurrences().get(0).endTime().minute());
        Assertions.assertEquals(DayOfWeek.FRIDAY, model.uploadLimitSchedule().weeklyRecurrences().get(0).days().get(0));
        Assertions.assertEquals(1780121294, model.uploadLimitSchedule().weeklyRecurrences().get(0).limitInMbps());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AgentUpdateProperties model = new AgentUpdateProperties().withDescription("hocdgeab")
            .withUploadLimitSchedule(new UploadLimitSchedule().withWeeklyRecurrences(Arrays.asList(
                new UploadLimitWeeklyRecurrence().withStartTime(new Time().withHour(1962929741).withMinute(Minute.ZERO))
                    .withEndTime(new Time().withHour(1906017395).withMinute(Minute.THREE_ZERO))
                    .withDays(Arrays.asList(DayOfWeek.FRIDAY))
                    .withLimitInMbps(1780121294),
                new UploadLimitWeeklyRecurrence().withStartTime(new Time().withHour(693432264).withMinute(Minute.ZERO))
                    .withEndTime(new Time().withHour(655079148).withMinute(Minute.THREE_ZERO))
                    .withDays(Arrays.asList(DayOfWeek.FRIDAY, DayOfWeek.FRIDAY, DayOfWeek.WEDNESDAY))
                    .withLimitInMbps(1455747257),
                new UploadLimitWeeklyRecurrence().withStartTime(new Time().withHour(233179905).withMinute(Minute.ZERO))
                    .withEndTime(new Time().withHour(1369496360).withMinute(Minute.THREE_ZERO))
                    .withDays(Arrays.asList(DayOfWeek.TUESDAY, DayOfWeek.MONDAY))
                    .withLimitInMbps(1605541354))));
        model = BinaryData.fromObject(model).toObject(AgentUpdateProperties.class);
        Assertions.assertEquals("hocdgeab", model.description());
        Assertions.assertEquals(1962929741, model.uploadLimitSchedule().weeklyRecurrences().get(0).startTime().hour());
        Assertions.assertEquals(Minute.ZERO,
            model.uploadLimitSchedule().weeklyRecurrences().get(0).startTime().minute());
        Assertions.assertEquals(1906017395, model.uploadLimitSchedule().weeklyRecurrences().get(0).endTime().hour());
        Assertions.assertEquals(Minute.THREE_ZERO,
            model.uploadLimitSchedule().weeklyRecurrences().get(0).endTime().minute());
        Assertions.assertEquals(DayOfWeek.FRIDAY, model.uploadLimitSchedule().weeklyRecurrences().get(0).days().get(0));
        Assertions.assertEquals(1780121294, model.uploadLimitSchedule().weeklyRecurrences().get(0).limitInMbps());
    }
}
