// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagemover.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.storagemover.StorageMoverManager;
import com.azure.resourcemanager.storagemover.models.CopyMode;
import com.azure.resourcemanager.storagemover.models.JobDefinition;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class JobDefinitionsCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"description\":\"zucerscdntnev\",\"copyMode\":\"Mirror\",\"sourceName\":\"wjmy\",\"sourceResourceId\":\"dsslswt\",\"sourceSubpath\":\"eriofzpyqs\",\"targetName\":\"mwabnetshhszhedp\",\"targetResourceId\":\"wiwubm\",\"targetSubpath\":\"besldnkwwtppjflc\",\"latestJobRunName\":\"gaokonzmnsikv\",\"latestJobRunResourceId\":\"qzeqqkdltfzxm\",\"latestJobRunStatus\":\"Queued\",\"agentName\":\"gureodkwobdag\",\"agentResourceId\":\"ibqdxbxwakbogqx\",\"provisioningState\":\"Succeeded\"},\"id\":\"kzgxhurip\",\"name\":\"bpodxunkbebxm\",\"type\":\"byyntwlrbqt\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        StorageMoverManager manager =
            StorageMoverManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        JobDefinition response =
            manager
                .jobDefinitions()
                .define("wqytjrybnwjewgdr")
                .withExistingProject("tpvjzbexilzznfqq", "vwpm", "taruoujmkcj")
                .withCopyMode(CopyMode.MIRROR)
                .withSourceName("doy")
                .withTargetName("vhqlkthumaqo")
                .withDescription("rvnaenqpeh")
                .withSourceSubpath("dslgnayqigynduh")
                .withTargetSubpath("r")
                .withAgentName("yhz")
                .create();

        Assertions.assertEquals("zucerscdntnev", response.description());
        Assertions.assertEquals(CopyMode.MIRROR, response.copyMode());
        Assertions.assertEquals("wjmy", response.sourceName());
        Assertions.assertEquals("eriofzpyqs", response.sourceSubpath());
        Assertions.assertEquals("mwabnetshhszhedp", response.targetName());
        Assertions.assertEquals("besldnkwwtppjflc", response.targetSubpath());
        Assertions.assertEquals("gureodkwobdag", response.agentName());
    }
}
