// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.storagemover.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.storagemover.models.AgentUpdateParameters;
import com.azure.resourcemanager.storagemover.models.DayOfWeek;
import com.azure.resourcemanager.storagemover.models.Minute;
import com.azure.resourcemanager.storagemover.models.Time;
import com.azure.resourcemanager.storagemover.models.UploadLimitSchedule;
import com.azure.resourcemanager.storagemover.models.UploadLimitWeeklyRecurrence;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class AgentUpdateParametersTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AgentUpdateParameters model = BinaryData.fromString(
            "{\"properties\":{\"description\":\"vndhkrwpdapp\",\"uploadLimitSchedule\":{\"weeklyRecurrences\":[{\"limitInMbps\":253055122,\"days\":[\"Saturday\",\"Saturday\"],\"startTime\":{\"hour\":1134506891,\"minute\":0},\"endTime\":{\"hour\":2073907119,\"minute\":0}},{\"limitInMbps\":1882901501,\"days\":[\"Friday\",\"Monday\"],\"startTime\":{\"hour\":470678351,\"minute\":0},\"endTime\":{\"hour\":1618302294,\"minute\":0}},{\"limitInMbps\":1403309762,\"days\":[\"Friday\",\"Monday\",\"Friday\",\"Monday\"],\"startTime\":{\"hour\":768645194,\"minute\":30},\"endTime\":{\"hour\":1447335662,\"minute\":30}}]}}}")
            .toObject(AgentUpdateParameters.class);
        Assertions.assertEquals("vndhkrwpdapp", model.description());
        Assertions.assertEquals(1134506891, model.uploadLimitSchedule().weeklyRecurrences().get(0).startTime().hour());
        Assertions.assertEquals(Minute.ZERO,
            model.uploadLimitSchedule().weeklyRecurrences().get(0).startTime().minute());
        Assertions.assertEquals(2073907119, model.uploadLimitSchedule().weeklyRecurrences().get(0).endTime().hour());
        Assertions.assertEquals(Minute.ZERO, model.uploadLimitSchedule().weeklyRecurrences().get(0).endTime().minute());
        Assertions.assertEquals(DayOfWeek.SATURDAY,
            model.uploadLimitSchedule().weeklyRecurrences().get(0).days().get(0));
        Assertions.assertEquals(253055122, model.uploadLimitSchedule().weeklyRecurrences().get(0).limitInMbps());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AgentUpdateParameters model = new AgentUpdateParameters().withDescription("vndhkrwpdapp")
            .withUploadLimitSchedule(new UploadLimitSchedule().withWeeklyRecurrences(Arrays.asList(
                new UploadLimitWeeklyRecurrence().withStartTime(new Time().withHour(1134506891).withMinute(Minute.ZERO))
                    .withEndTime(new Time().withHour(2073907119).withMinute(Minute.ZERO))
                    .withDays(Arrays.asList(DayOfWeek.SATURDAY, DayOfWeek.SATURDAY))
                    .withLimitInMbps(253055122),
                new UploadLimitWeeklyRecurrence().withStartTime(new Time().withHour(470678351).withMinute(Minute.ZERO))
                    .withEndTime(new Time().withHour(1618302294).withMinute(Minute.ZERO))
                    .withDays(Arrays.asList(DayOfWeek.FRIDAY, DayOfWeek.MONDAY))
                    .withLimitInMbps(1882901501),
                new UploadLimitWeeklyRecurrence()
                    .withStartTime(new Time().withHour(768645194).withMinute(Minute.THREE_ZERO))
                    .withEndTime(new Time().withHour(1447335662).withMinute(Minute.THREE_ZERO))
                    .withDays(Arrays.asList(DayOfWeek.FRIDAY, DayOfWeek.MONDAY, DayOfWeek.FRIDAY, DayOfWeek.MONDAY))
                    .withLimitInMbps(1403309762))));
        model = BinaryData.fromObject(model).toObject(AgentUpdateParameters.class);
        Assertions.assertEquals("vndhkrwpdapp", model.description());
        Assertions.assertEquals(1134506891, model.uploadLimitSchedule().weeklyRecurrences().get(0).startTime().hour());
        Assertions.assertEquals(Minute.ZERO,
            model.uploadLimitSchedule().weeklyRecurrences().get(0).startTime().minute());
        Assertions.assertEquals(2073907119, model.uploadLimitSchedule().weeklyRecurrences().get(0).endTime().hour());
        Assertions.assertEquals(Minute.ZERO, model.uploadLimitSchedule().weeklyRecurrences().get(0).endTime().minute());
        Assertions.assertEquals(DayOfWeek.SATURDAY,
            model.uploadLimitSchedule().weeklyRecurrences().get(0).days().get(0));
        Assertions.assertEquals(253055122, model.uploadLimitSchedule().weeklyRecurrences().get(0).limitInMbps());
    }
}
