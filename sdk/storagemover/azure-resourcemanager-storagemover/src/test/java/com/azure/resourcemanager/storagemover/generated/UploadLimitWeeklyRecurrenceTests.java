// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagemover.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.storagemover.models.DayOfWeek;
import com.azure.resourcemanager.storagemover.models.Minute;
import com.azure.resourcemanager.storagemover.models.Time;
import com.azure.resourcemanager.storagemover.models.UploadLimitWeeklyRecurrence;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class UploadLimitWeeklyRecurrenceTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        UploadLimitWeeklyRecurrence model = BinaryData.fromString(
            "{\"limitInMbps\":2024223681,\"days\":[\"Thursday\",\"Sunday\"],\"startTime\":{\"hour\":186461097,\"minute\":0},\"endTime\":{\"hour\":2107455615,\"minute\":0}}")
            .toObject(UploadLimitWeeklyRecurrence.class);
        Assertions.assertEquals(186461097, model.startTime().hour());
        Assertions.assertEquals(Minute.ZERO, model.startTime().minute());
        Assertions.assertEquals(2107455615, model.endTime().hour());
        Assertions.assertEquals(Minute.ZERO, model.endTime().minute());
        Assertions.assertEquals(DayOfWeek.THURSDAY, model.days().get(0));
        Assertions.assertEquals(2024223681, model.limitInMbps());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        UploadLimitWeeklyRecurrence model
            = new UploadLimitWeeklyRecurrence().withStartTime(new Time().withHour(186461097).withMinute(Minute.ZERO))
                .withEndTime(new Time().withHour(2107455615).withMinute(Minute.ZERO))
                .withDays(Arrays.asList(DayOfWeek.THURSDAY, DayOfWeek.SUNDAY))
                .withLimitInMbps(2024223681);
        model = BinaryData.fromObject(model).toObject(UploadLimitWeeklyRecurrence.class);
        Assertions.assertEquals(186461097, model.startTime().hour());
        Assertions.assertEquals(Minute.ZERO, model.startTime().minute());
        Assertions.assertEquals(2107455615, model.endTime().hour());
        Assertions.assertEquals(Minute.ZERO, model.endTime().minute());
        Assertions.assertEquals(DayOfWeek.THURSDAY, model.days().get(0));
        Assertions.assertEquals(2024223681, model.limitInMbps());
    }
}
