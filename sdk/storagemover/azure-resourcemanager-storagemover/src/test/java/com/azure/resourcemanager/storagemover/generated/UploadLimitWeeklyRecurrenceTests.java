// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.storagemover.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.storagemover.models.DayOfWeek;
import com.azure.resourcemanager.storagemover.models.Minute;
import com.azure.resourcemanager.storagemover.models.Time;
import com.azure.resourcemanager.storagemover.models.UploadLimitWeeklyRecurrence;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class UploadLimitWeeklyRecurrenceTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        UploadLimitWeeklyRecurrence model = BinaryData.fromString(
            "{\"limitInMbps\":339957012,\"days\":[\"Sunday\",\"Saturday\",\"Wednesday\"],\"startTime\":{\"hour\":1218196264,\"minute\":30},\"endTime\":{\"hour\":1356626713,\"minute\":30}}")
            .toObject(UploadLimitWeeklyRecurrence.class);
        Assertions.assertEquals(1218196264, model.startTime().hour());
        Assertions.assertEquals(Minute.THREE_ZERO, model.startTime().minute());
        Assertions.assertEquals(1356626713, model.endTime().hour());
        Assertions.assertEquals(Minute.THREE_ZERO, model.endTime().minute());
        Assertions.assertEquals(DayOfWeek.SUNDAY, model.days().get(0));
        Assertions.assertEquals(339957012, model.limitInMbps());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        UploadLimitWeeklyRecurrence model = new UploadLimitWeeklyRecurrence()
            .withStartTime(new Time().withHour(1218196264).withMinute(Minute.THREE_ZERO))
            .withEndTime(new Time().withHour(1356626713).withMinute(Minute.THREE_ZERO))
            .withDays(Arrays.asList(DayOfWeek.SUNDAY, DayOfWeek.SATURDAY, DayOfWeek.WEDNESDAY))
            .withLimitInMbps(339957012);
        model = BinaryData.fromObject(model).toObject(UploadLimitWeeklyRecurrence.class);
        Assertions.assertEquals(1218196264, model.startTime().hour());
        Assertions.assertEquals(Minute.THREE_ZERO, model.startTime().minute());
        Assertions.assertEquals(1356626713, model.endTime().hour());
        Assertions.assertEquals(Minute.THREE_ZERO, model.endTime().minute());
        Assertions.assertEquals(DayOfWeek.SUNDAY, model.days().get(0));
        Assertions.assertEquals(339957012, model.limitInMbps());
    }
}
