// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.storagemover.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.storagemover.models.DayOfWeek;
import com.azure.resourcemanager.storagemover.models.Minute;
import com.azure.resourcemanager.storagemover.models.Time;
import com.azure.resourcemanager.storagemover.models.WeeklyRecurrence;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class WeeklyRecurrenceTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        WeeklyRecurrence model = BinaryData.fromString(
            "{\"days\":[\"Monday\",\"Wednesday\",\"Tuesday\"],\"startTime\":{\"hour\":564452713,\"minute\":30},\"endTime\":{\"hour\":2145631458,\"minute\":0}}")
            .toObject(WeeklyRecurrence.class);
        Assertions.assertEquals(564452713, model.startTime().hour());
        Assertions.assertEquals(Minute.THREE_ZERO, model.startTime().minute());
        Assertions.assertEquals(2145631458, model.endTime().hour());
        Assertions.assertEquals(Minute.ZERO, model.endTime().minute());
        Assertions.assertEquals(DayOfWeek.MONDAY, model.days().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        WeeklyRecurrence model
            = new WeeklyRecurrence().withStartTime(new Time().withHour(564452713).withMinute(Minute.THREE_ZERO))
                .withEndTime(new Time().withHour(2145631458).withMinute(Minute.ZERO))
                .withDays(Arrays.asList(DayOfWeek.MONDAY, DayOfWeek.WEDNESDAY, DayOfWeek.TUESDAY));
        model = BinaryData.fromObject(model).toObject(WeeklyRecurrence.class);
        Assertions.assertEquals(564452713, model.startTime().hour());
        Assertions.assertEquals(Minute.THREE_ZERO, model.startTime().minute());
        Assertions.assertEquals(2145631458, model.endTime().hour());
        Assertions.assertEquals(Minute.ZERO, model.endTime().minute());
        Assertions.assertEquals(DayOfWeek.MONDAY, model.days().get(0));
    }
}
