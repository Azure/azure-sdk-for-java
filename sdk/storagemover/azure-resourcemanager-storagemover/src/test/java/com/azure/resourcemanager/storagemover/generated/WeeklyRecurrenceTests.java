// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagemover.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.storagemover.models.DayOfWeek;
import com.azure.resourcemanager.storagemover.models.Minute;
import com.azure.resourcemanager.storagemover.models.Time;
import com.azure.resourcemanager.storagemover.models.WeeklyRecurrence;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class WeeklyRecurrenceTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        WeeklyRecurrence model = BinaryData.fromString(
            "{\"days\":[\"Wednesday\",\"Sunday\",\"Tuesday\"],\"startTime\":{\"hour\":1536300226,\"minute\":30},\"endTime\":{\"hour\":289494577,\"minute\":30}}")
            .toObject(WeeklyRecurrence.class);
        Assertions.assertEquals(1536300226, model.startTime().hour());
        Assertions.assertEquals(Minute.THREE_ZERO, model.startTime().minute());
        Assertions.assertEquals(289494577, model.endTime().hour());
        Assertions.assertEquals(Minute.THREE_ZERO, model.endTime().minute());
        Assertions.assertEquals(DayOfWeek.WEDNESDAY, model.days().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        WeeklyRecurrence model
            = new WeeklyRecurrence().withStartTime(new Time().withHour(1536300226).withMinute(Minute.THREE_ZERO))
                .withEndTime(new Time().withHour(289494577).withMinute(Minute.THREE_ZERO))
                .withDays(Arrays.asList(DayOfWeek.WEDNESDAY, DayOfWeek.SUNDAY, DayOfWeek.TUESDAY));
        model = BinaryData.fromObject(model).toObject(WeeklyRecurrence.class);
        Assertions.assertEquals(1536300226, model.startTime().hour());
        Assertions.assertEquals(Minute.THREE_ZERO, model.startTime().minute());
        Assertions.assertEquals(289494577, model.endTime().hour());
        Assertions.assertEquals(Minute.THREE_ZERO, model.endTime().minute());
        Assertions.assertEquals(DayOfWeek.WEDNESDAY, model.days().get(0));
    }
}
