// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.storagemover.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.storagemover.models.DayOfWeek;
import com.azure.resourcemanager.storagemover.models.Minute;
import com.azure.resourcemanager.storagemover.models.Time;
import com.azure.resourcemanager.storagemover.models.UploadLimitSchedule;
import com.azure.resourcemanager.storagemover.models.UploadLimitWeeklyRecurrence;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class UploadLimitScheduleTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        UploadLimitSchedule model = BinaryData.fromString(
            "{\"weeklyRecurrences\":[{\"limitInMbps\":2049117618,\"days\":[\"Sunday\",\"Sunday\",\"Sunday\"],\"startTime\":{\"hour\":2026429641,\"minute\":30},\"endTime\":{\"hour\":2115498043,\"minute\":30}},{\"limitInMbps\":967406306,\"days\":[\"Tuesday\",\"Tuesday\",\"Sunday\",\"Monday\"],\"startTime\":{\"hour\":2010758823,\"minute\":30},\"endTime\":{\"hour\":890604952,\"minute\":30}},{\"limitInMbps\":1214814852,\"days\":[\"Friday\",\"Wednesday\",\"Monday\"],\"startTime\":{\"hour\":955992549,\"minute\":30},\"endTime\":{\"hour\":1012894603,\"minute\":30}},{\"limitInMbps\":1343054120,\"days\":[\"Saturday\"],\"startTime\":{\"hour\":24386691,\"minute\":30},\"endTime\":{\"hour\":1299495603,\"minute\":0}}]}")
            .toObject(UploadLimitSchedule.class);
        Assertions.assertEquals(2026429641, model.weeklyRecurrences().get(0).startTime().hour());
        Assertions.assertEquals(Minute.THREE_ZERO, model.weeklyRecurrences().get(0).startTime().minute());
        Assertions.assertEquals(2115498043, model.weeklyRecurrences().get(0).endTime().hour());
        Assertions.assertEquals(Minute.THREE_ZERO, model.weeklyRecurrences().get(0).endTime().minute());
        Assertions.assertEquals(DayOfWeek.SUNDAY, model.weeklyRecurrences().get(0).days().get(0));
        Assertions.assertEquals(2049117618, model.weeklyRecurrences().get(0).limitInMbps());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        UploadLimitSchedule model = new UploadLimitSchedule().withWeeklyRecurrences(Arrays.asList(
            new UploadLimitWeeklyRecurrence()
                .withStartTime(new Time().withHour(2026429641).withMinute(Minute.THREE_ZERO))
                .withEndTime(new Time().withHour(2115498043).withMinute(Minute.THREE_ZERO))
                .withDays(Arrays.asList(DayOfWeek.SUNDAY, DayOfWeek.SUNDAY, DayOfWeek.SUNDAY))
                .withLimitInMbps(2049117618),
            new UploadLimitWeeklyRecurrence()
                .withStartTime(new Time().withHour(2010758823).withMinute(Minute.THREE_ZERO))
                .withEndTime(new Time().withHour(890604952).withMinute(Minute.THREE_ZERO))
                .withDays(Arrays.asList(DayOfWeek.TUESDAY, DayOfWeek.TUESDAY, DayOfWeek.SUNDAY, DayOfWeek.MONDAY))
                .withLimitInMbps(967406306),
            new UploadLimitWeeklyRecurrence()
                .withStartTime(new Time().withHour(955992549).withMinute(Minute.THREE_ZERO))
                .withEndTime(new Time().withHour(1012894603).withMinute(Minute.THREE_ZERO))
                .withDays(Arrays.asList(DayOfWeek.FRIDAY, DayOfWeek.WEDNESDAY, DayOfWeek.MONDAY))
                .withLimitInMbps(1214814852),
            new UploadLimitWeeklyRecurrence().withStartTime(new Time().withHour(24386691).withMinute(Minute.THREE_ZERO))
                .withEndTime(new Time().withHour(1299495603).withMinute(Minute.ZERO))
                .withDays(Arrays.asList(DayOfWeek.SATURDAY))
                .withLimitInMbps(1343054120)));
        model = BinaryData.fromObject(model).toObject(UploadLimitSchedule.class);
        Assertions.assertEquals(2026429641, model.weeklyRecurrences().get(0).startTime().hour());
        Assertions.assertEquals(Minute.THREE_ZERO, model.weeklyRecurrences().get(0).startTime().minute());
        Assertions.assertEquals(2115498043, model.weeklyRecurrences().get(0).endTime().hour());
        Assertions.assertEquals(Minute.THREE_ZERO, model.weeklyRecurrences().get(0).endTime().minute());
        Assertions.assertEquals(DayOfWeek.SUNDAY, model.weeklyRecurrences().get(0).days().get(0));
        Assertions.assertEquals(2049117618, model.weeklyRecurrences().get(0).limitInMbps());
    }
}
