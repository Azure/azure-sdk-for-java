// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagemover.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.storagemover.models.DayOfWeek;
import com.azure.resourcemanager.storagemover.models.Minute;
import com.azure.resourcemanager.storagemover.models.Time;
import com.azure.resourcemanager.storagemover.models.UploadLimitSchedule;
import com.azure.resourcemanager.storagemover.models.UploadLimitWeeklyRecurrence;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class UploadLimitScheduleTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        UploadLimitSchedule model = BinaryData.fromString(
            "{\"weeklyRecurrences\":[{\"limitInMbps\":1193529949,\"days\":[\"Wednesday\"],\"startTime\":{\"hour\":1288567604,\"minute\":30},\"endTime\":{\"hour\":712813176,\"minute\":0}},{\"limitInMbps\":954363887,\"days\":[\"Tuesday\"],\"startTime\":{\"hour\":1438808958,\"minute\":30},\"endTime\":{\"hour\":161045800,\"minute\":0}},{\"limitInMbps\":792536973,\"days\":[\"Wednesday\",\"Wednesday\",\"Tuesday\"],\"startTime\":{\"hour\":834029576,\"minute\":0},\"endTime\":{\"hour\":1245187453,\"minute\":30}},{\"limitInMbps\":814455302,\"days\":[\"Friday\",\"Saturday\"],\"startTime\":{\"hour\":799119693,\"minute\":30},\"endTime\":{\"hour\":1095106401,\"minute\":30}}]}")
            .toObject(UploadLimitSchedule.class);
        Assertions.assertEquals(1288567604, model.weeklyRecurrences().get(0).startTime().hour());
        Assertions.assertEquals(Minute.THREE_ZERO, model.weeklyRecurrences().get(0).startTime().minute());
        Assertions.assertEquals(712813176, model.weeklyRecurrences().get(0).endTime().hour());
        Assertions.assertEquals(Minute.ZERO, model.weeklyRecurrences().get(0).endTime().minute());
        Assertions.assertEquals(DayOfWeek.WEDNESDAY, model.weeklyRecurrences().get(0).days().get(0));
        Assertions.assertEquals(1193529949, model.weeklyRecurrences().get(0).limitInMbps());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        UploadLimitSchedule model = new UploadLimitSchedule().withWeeklyRecurrences(Arrays.asList(
            new UploadLimitWeeklyRecurrence()
                .withStartTime(new Time().withHour(1288567604).withMinute(Minute.THREE_ZERO))
                .withEndTime(new Time().withHour(712813176).withMinute(Minute.ZERO))
                .withDays(Arrays.asList(DayOfWeek.WEDNESDAY))
                .withLimitInMbps(1193529949),
            new UploadLimitWeeklyRecurrence()
                .withStartTime(new Time().withHour(1438808958).withMinute(Minute.THREE_ZERO))
                .withEndTime(new Time().withHour(161045800).withMinute(Minute.ZERO))
                .withDays(Arrays.asList(DayOfWeek.TUESDAY))
                .withLimitInMbps(954363887),
            new UploadLimitWeeklyRecurrence().withStartTime(new Time().withHour(834029576).withMinute(Minute.ZERO))
                .withEndTime(new Time().withHour(1245187453).withMinute(Minute.THREE_ZERO))
                .withDays(Arrays.asList(DayOfWeek.WEDNESDAY, DayOfWeek.WEDNESDAY, DayOfWeek.TUESDAY))
                .withLimitInMbps(792536973),
            new UploadLimitWeeklyRecurrence()
                .withStartTime(new Time().withHour(799119693).withMinute(Minute.THREE_ZERO))
                .withEndTime(new Time().withHour(1095106401).withMinute(Minute.THREE_ZERO))
                .withDays(Arrays.asList(DayOfWeek.FRIDAY, DayOfWeek.SATURDAY))
                .withLimitInMbps(814455302)));
        model = BinaryData.fromObject(model).toObject(UploadLimitSchedule.class);
        Assertions.assertEquals(1288567604, model.weeklyRecurrences().get(0).startTime().hour());
        Assertions.assertEquals(Minute.THREE_ZERO, model.weeklyRecurrences().get(0).startTime().minute());
        Assertions.assertEquals(712813176, model.weeklyRecurrences().get(0).endTime().hour());
        Assertions.assertEquals(Minute.ZERO, model.weeklyRecurrences().get(0).endTime().minute());
        Assertions.assertEquals(DayOfWeek.WEDNESDAY, model.weeklyRecurrences().get(0).days().get(0));
        Assertions.assertEquals(1193529949, model.weeklyRecurrences().get(0).limitInMbps());
    }
}
