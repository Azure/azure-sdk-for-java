// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.storagemover.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The properties of cloud endpoints to migrate.
 */
@Immutable
public final class SourceTargetMap implements JsonSerializable<SourceTargetMap> {
    /*
     * The sourceEndpoint property.
     */
    private SourceEndpoint sourceEndpoint;

    /*
     * The targetEndpoint property.
     */
    private TargetEndpoint targetEndpoint;

    /**
     * Creates an instance of SourceTargetMap class.
     */
    private SourceTargetMap() {
    }

    /**
     * Get the sourceEndpoint property: The sourceEndpoint property.
     * 
     * @return the sourceEndpoint value.
     */
    public SourceEndpoint sourceEndpoint() {
        return this.sourceEndpoint;
    }

    /**
     * Get the targetEndpoint property: The targetEndpoint property.
     * 
     * @return the targetEndpoint value.
     */
    public TargetEndpoint targetEndpoint() {
        return this.targetEndpoint;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (sourceEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property sourceEndpoint in model SourceTargetMap"));
        } else {
            sourceEndpoint().validate();
        }
        if (targetEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property targetEndpoint in model SourceTargetMap"));
        } else {
            targetEndpoint().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(SourceTargetMap.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("sourceEndpoint", this.sourceEndpoint);
        jsonWriter.writeJsonField("targetEndpoint", this.targetEndpoint);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SourceTargetMap from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SourceTargetMap if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SourceTargetMap.
     */
    public static SourceTargetMap fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SourceTargetMap deserializedSourceTargetMap = new SourceTargetMap();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("sourceEndpoint".equals(fieldName)) {
                    deserializedSourceTargetMap.sourceEndpoint = SourceEndpoint.fromJson(reader);
                } else if ("targetEndpoint".equals(fieldName)) {
                    deserializedSourceTargetMap.targetEndpoint = TargetEndpoint.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSourceTargetMap;
        });
    }
}
