// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagemover.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The Endpoint resource, which contains information about file sources and targets.
 */
@Fluent
public class EndpointBaseUpdateProperties implements JsonSerializable<EndpointBaseUpdateProperties> {
    /*
     * The Endpoint resource type.
     */
    private EndpointType endpointType = EndpointType.fromString("EndpointBaseUpdateProperties");

    /*
     * A description for the Endpoint.
     */
    private String description;

    /**
     * Creates an instance of EndpointBaseUpdateProperties class.
     */
    public EndpointBaseUpdateProperties() {
    }

    /**
     * Get the endpointType property: The Endpoint resource type.
     * 
     * @return the endpointType value.
     */
    public EndpointType endpointType() {
        return this.endpointType;
    }

    /**
     * Get the description property: A description for the Endpoint.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: A description for the Endpoint.
     * 
     * @param description the description value to set.
     * @return the EndpointBaseUpdateProperties object itself.
     */
    public EndpointBaseUpdateProperties withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("endpointType", this.endpointType == null ? null : this.endpointType.toString());
        jsonWriter.writeStringField("description", this.description);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EndpointBaseUpdateProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of EndpointBaseUpdateProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the EndpointBaseUpdateProperties.
     */
    public static EndpointBaseUpdateProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String discriminatorValue = null;
            try (JsonReader readerToUse = reader.bufferObject()) {
                readerToUse.nextToken(); // Prepare for reading
                while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                    String fieldName = readerToUse.getFieldName();
                    readerToUse.nextToken();
                    if ("endpointType".equals(fieldName)) {
                        discriminatorValue = readerToUse.getString();
                        break;
                    } else {
                        readerToUse.skipChildren();
                    }
                }
                // Use the discriminator value to determine which subtype should be deserialized.
                if ("AzureStorageBlobContainer".equals(discriminatorValue)) {
                    return AzureStorageBlobContainerEndpointUpdateProperties.fromJson(readerToUse.reset());
                } else if ("NfsMount".equals(discriminatorValue)) {
                    return NfsMountEndpointUpdateProperties.fromJson(readerToUse.reset());
                } else if ("AzureStorageSmbFileShare".equals(discriminatorValue)) {
                    return AzureStorageSmbFileShareEndpointUpdateProperties.fromJson(readerToUse.reset());
                } else if ("SmbMount".equals(discriminatorValue)) {
                    return SmbMountEndpointUpdateProperties.fromJson(readerToUse.reset());
                } else {
                    return fromJsonKnownDiscriminator(readerToUse.reset());
                }
            }
        });
    }

    static EndpointBaseUpdateProperties fromJsonKnownDiscriminator(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            EndpointBaseUpdateProperties deserializedEndpointBaseUpdateProperties = new EndpointBaseUpdateProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("endpointType".equals(fieldName)) {
                    deserializedEndpointBaseUpdateProperties.endpointType = EndpointType.fromString(reader.getString());
                } else if ("description".equals(fieldName)) {
                    deserializedEndpointBaseUpdateProperties.description = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedEndpointBaseUpdateProperties;
        });
    }
}
