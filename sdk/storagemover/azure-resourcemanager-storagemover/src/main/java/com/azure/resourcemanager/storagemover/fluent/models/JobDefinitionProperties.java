// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagemover.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.storagemover.models.CopyMode;
import com.azure.resourcemanager.storagemover.models.JobRunStatus;
import com.azure.resourcemanager.storagemover.models.ProvisioningState;
import java.io.IOException;

/**
 * Job definition properties.
 */
@Fluent
public final class JobDefinitionProperties implements JsonSerializable<JobDefinitionProperties> {
    /*
     * A description for the Job Definition.
     */
    private String description;

    /*
     * Strategy to use for copy.
     */
    private CopyMode copyMode;

    /*
     * The name of the source Endpoint.
     */
    private String sourceName;

    /*
     * Fully qualified resource ID of the source Endpoint.
     */
    private String sourceResourceId;

    /*
     * The subpath to use when reading from the source Endpoint.
     */
    private String sourceSubpath;

    /*
     * The name of the target Endpoint.
     */
    private String targetName;

    /*
     * Fully qualified resource ID of the target Endpoint.
     */
    private String targetResourceId;

    /*
     * The subpath to use when writing to the target Endpoint.
     */
    private String targetSubpath;

    /*
     * The name of the Job Run in a non-terminal state, if exists.
     */
    private String latestJobRunName;

    /*
     * The fully qualified resource ID of the Job Run in a non-terminal state, if exists.
     */
    private String latestJobRunResourceId;

    /*
     * The current status of the Job Run in a non-terminal state, if exists.
     */
    private JobRunStatus latestJobRunStatus;

    /*
     * Name of the Agent to assign for new Job Runs of this Job Definition.
     */
    private String agentName;

    /*
     * Fully qualified resource id of the Agent to assign for new Job Runs of this Job Definition.
     */
    private String agentResourceId;

    /*
     * The provisioning state of this resource.
     */
    private ProvisioningState provisioningState;

    /**
     * Creates an instance of JobDefinitionProperties class.
     */
    public JobDefinitionProperties() {
    }

    /**
     * Get the description property: A description for the Job Definition.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: A description for the Job Definition.
     * 
     * @param description the description value to set.
     * @return the JobDefinitionProperties object itself.
     */
    public JobDefinitionProperties withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the copyMode property: Strategy to use for copy.
     * 
     * @return the copyMode value.
     */
    public CopyMode copyMode() {
        return this.copyMode;
    }

    /**
     * Set the copyMode property: Strategy to use for copy.
     * 
     * @param copyMode the copyMode value to set.
     * @return the JobDefinitionProperties object itself.
     */
    public JobDefinitionProperties withCopyMode(CopyMode copyMode) {
        this.copyMode = copyMode;
        return this;
    }

    /**
     * Get the sourceName property: The name of the source Endpoint.
     * 
     * @return the sourceName value.
     */
    public String sourceName() {
        return this.sourceName;
    }

    /**
     * Set the sourceName property: The name of the source Endpoint.
     * 
     * @param sourceName the sourceName value to set.
     * @return the JobDefinitionProperties object itself.
     */
    public JobDefinitionProperties withSourceName(String sourceName) {
        this.sourceName = sourceName;
        return this;
    }

    /**
     * Get the sourceResourceId property: Fully qualified resource ID of the source Endpoint.
     * 
     * @return the sourceResourceId value.
     */
    public String sourceResourceId() {
        return this.sourceResourceId;
    }

    /**
     * Get the sourceSubpath property: The subpath to use when reading from the source Endpoint.
     * 
     * @return the sourceSubpath value.
     */
    public String sourceSubpath() {
        return this.sourceSubpath;
    }

    /**
     * Set the sourceSubpath property: The subpath to use when reading from the source Endpoint.
     * 
     * @param sourceSubpath the sourceSubpath value to set.
     * @return the JobDefinitionProperties object itself.
     */
    public JobDefinitionProperties withSourceSubpath(String sourceSubpath) {
        this.sourceSubpath = sourceSubpath;
        return this;
    }

    /**
     * Get the targetName property: The name of the target Endpoint.
     * 
     * @return the targetName value.
     */
    public String targetName() {
        return this.targetName;
    }

    /**
     * Set the targetName property: The name of the target Endpoint.
     * 
     * @param targetName the targetName value to set.
     * @return the JobDefinitionProperties object itself.
     */
    public JobDefinitionProperties withTargetName(String targetName) {
        this.targetName = targetName;
        return this;
    }

    /**
     * Get the targetResourceId property: Fully qualified resource ID of the target Endpoint.
     * 
     * @return the targetResourceId value.
     */
    public String targetResourceId() {
        return this.targetResourceId;
    }

    /**
     * Get the targetSubpath property: The subpath to use when writing to the target Endpoint.
     * 
     * @return the targetSubpath value.
     */
    public String targetSubpath() {
        return this.targetSubpath;
    }

    /**
     * Set the targetSubpath property: The subpath to use when writing to the target Endpoint.
     * 
     * @param targetSubpath the targetSubpath value to set.
     * @return the JobDefinitionProperties object itself.
     */
    public JobDefinitionProperties withTargetSubpath(String targetSubpath) {
        this.targetSubpath = targetSubpath;
        return this;
    }

    /**
     * Get the latestJobRunName property: The name of the Job Run in a non-terminal state, if exists.
     * 
     * @return the latestJobRunName value.
     */
    public String latestJobRunName() {
        return this.latestJobRunName;
    }

    /**
     * Get the latestJobRunResourceId property: The fully qualified resource ID of the Job Run in a non-terminal state,
     * if exists.
     * 
     * @return the latestJobRunResourceId value.
     */
    public String latestJobRunResourceId() {
        return this.latestJobRunResourceId;
    }

    /**
     * Get the latestJobRunStatus property: The current status of the Job Run in a non-terminal state, if exists.
     * 
     * @return the latestJobRunStatus value.
     */
    public JobRunStatus latestJobRunStatus() {
        return this.latestJobRunStatus;
    }

    /**
     * Get the agentName property: Name of the Agent to assign for new Job Runs of this Job Definition.
     * 
     * @return the agentName value.
     */
    public String agentName() {
        return this.agentName;
    }

    /**
     * Set the agentName property: Name of the Agent to assign for new Job Runs of this Job Definition.
     * 
     * @param agentName the agentName value to set.
     * @return the JobDefinitionProperties object itself.
     */
    public JobDefinitionProperties withAgentName(String agentName) {
        this.agentName = agentName;
        return this;
    }

    /**
     * Get the agentResourceId property: Fully qualified resource id of the Agent to assign for new Job Runs of this Job
     * Definition.
     * 
     * @return the agentResourceId value.
     */
    public String agentResourceId() {
        return this.agentResourceId;
    }

    /**
     * Get the provisioningState property: The provisioning state of this resource.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (copyMode() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property copyMode in model JobDefinitionProperties"));
        }
        if (sourceName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property sourceName in model JobDefinitionProperties"));
        }
        if (targetName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property targetName in model JobDefinitionProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(JobDefinitionProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("copyMode", this.copyMode == null ? null : this.copyMode.toString());
        jsonWriter.writeStringField("sourceName", this.sourceName);
        jsonWriter.writeStringField("targetName", this.targetName);
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeStringField("sourceSubpath", this.sourceSubpath);
        jsonWriter.writeStringField("targetSubpath", this.targetSubpath);
        jsonWriter.writeStringField("agentName", this.agentName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of JobDefinitionProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of JobDefinitionProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the JobDefinitionProperties.
     */
    public static JobDefinitionProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            JobDefinitionProperties deserializedJobDefinitionProperties = new JobDefinitionProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("copyMode".equals(fieldName)) {
                    deserializedJobDefinitionProperties.copyMode = CopyMode.fromString(reader.getString());
                } else if ("sourceName".equals(fieldName)) {
                    deserializedJobDefinitionProperties.sourceName = reader.getString();
                } else if ("targetName".equals(fieldName)) {
                    deserializedJobDefinitionProperties.targetName = reader.getString();
                } else if ("description".equals(fieldName)) {
                    deserializedJobDefinitionProperties.description = reader.getString();
                } else if ("sourceResourceId".equals(fieldName)) {
                    deserializedJobDefinitionProperties.sourceResourceId = reader.getString();
                } else if ("sourceSubpath".equals(fieldName)) {
                    deserializedJobDefinitionProperties.sourceSubpath = reader.getString();
                } else if ("targetResourceId".equals(fieldName)) {
                    deserializedJobDefinitionProperties.targetResourceId = reader.getString();
                } else if ("targetSubpath".equals(fieldName)) {
                    deserializedJobDefinitionProperties.targetSubpath = reader.getString();
                } else if ("latestJobRunName".equals(fieldName)) {
                    deserializedJobDefinitionProperties.latestJobRunName = reader.getString();
                } else if ("latestJobRunResourceId".equals(fieldName)) {
                    deserializedJobDefinitionProperties.latestJobRunResourceId = reader.getString();
                } else if ("latestJobRunStatus".equals(fieldName)) {
                    deserializedJobDefinitionProperties.latestJobRunStatus
                        = JobRunStatus.fromString(reader.getString());
                } else if ("agentName".equals(fieldName)) {
                    deserializedJobDefinitionProperties.agentName = reader.getString();
                } else if ("agentResourceId".equals(fieldName)) {
                    deserializedJobDefinitionProperties.agentResourceId = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedJobDefinitionProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedJobDefinitionProperties;
        });
    }
}
