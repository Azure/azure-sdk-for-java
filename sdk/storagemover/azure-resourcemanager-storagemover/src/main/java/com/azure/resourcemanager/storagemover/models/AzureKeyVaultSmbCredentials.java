// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagemover.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The Azure Key Vault secret URIs which store the credentials.
 */
@Fluent
public final class AzureKeyVaultSmbCredentials extends Credentials {
    /*
     * The Credentials type.
     */
    private CredentialType type = CredentialType.AZURE_KEY_VAULT_SMB;

    /*
     * The Azure Key Vault secret URI which stores the username. Use empty string to clean-up existing value.
     */
    private String usernameUri;

    /*
     * The Azure Key Vault secret URI which stores the password. Use empty string to clean-up existing value.
     */
    private String passwordUri;

    /**
     * Creates an instance of AzureKeyVaultSmbCredentials class.
     */
    public AzureKeyVaultSmbCredentials() {
    }

    /**
     * Get the type property: The Credentials type.
     * 
     * @return the type value.
     */
    @Override
    public CredentialType type() {
        return this.type;
    }

    /**
     * Get the usernameUri property: The Azure Key Vault secret URI which stores the username. Use empty string to
     * clean-up existing value.
     * 
     * @return the usernameUri value.
     */
    public String usernameUri() {
        return this.usernameUri;
    }

    /**
     * Set the usernameUri property: The Azure Key Vault secret URI which stores the username. Use empty string to
     * clean-up existing value.
     * 
     * @param usernameUri the usernameUri value to set.
     * @return the AzureKeyVaultSmbCredentials object itself.
     */
    public AzureKeyVaultSmbCredentials withUsernameUri(String usernameUri) {
        this.usernameUri = usernameUri;
        return this;
    }

    /**
     * Get the passwordUri property: The Azure Key Vault secret URI which stores the password. Use empty string to
     * clean-up existing value.
     * 
     * @return the passwordUri value.
     */
    public String passwordUri() {
        return this.passwordUri;
    }

    /**
     * Set the passwordUri property: The Azure Key Vault secret URI which stores the password. Use empty string to
     * clean-up existing value.
     * 
     * @param passwordUri the passwordUri value to set.
     * @return the AzureKeyVaultSmbCredentials object itself.
     */
    public AzureKeyVaultSmbCredentials withPasswordUri(String passwordUri) {
        this.passwordUri = passwordUri;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeStringField("usernameUri", this.usernameUri);
        jsonWriter.writeStringField("passwordUri", this.passwordUri);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AzureKeyVaultSmbCredentials from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AzureKeyVaultSmbCredentials if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AzureKeyVaultSmbCredentials.
     */
    public static AzureKeyVaultSmbCredentials fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AzureKeyVaultSmbCredentials deserializedAzureKeyVaultSmbCredentials = new AzureKeyVaultSmbCredentials();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    deserializedAzureKeyVaultSmbCredentials.type = CredentialType.fromString(reader.getString());
                } else if ("usernameUri".equals(fieldName)) {
                    deserializedAzureKeyVaultSmbCredentials.usernameUri = reader.getString();
                } else if ("passwordUri".equals(fieldName)) {
                    deserializedAzureKeyVaultSmbCredentials.passwordUri = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAzureKeyVaultSmbCredentials;
        });
    }
}
