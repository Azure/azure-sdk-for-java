// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.storagemover.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The weekly recurrence of the WAN-link upload limit schedule. The start time must be earlier in the day than the end
 * time. The recurrence must not span across multiple days.
 */
@Fluent
public final class UploadLimitWeeklyRecurrence implements JsonSerializable<UploadLimitWeeklyRecurrence> {
    /*
     * The set of days of week for the schedule recurrence. A day must not be specified more than once in a recurrence.
     */
    private List<DayOfWeek> days;

    /*
     * The start time of the schedule recurrence. Full hour and 30-minute intervals are supported.
     */
    private Time startTime;

    /*
     * The end time of the schedule recurrence. Full hour and 30-minute intervals are supported.
     */
    private Time endTime;

    /*
     * The WAN-link upload bandwidth (maximum data transfer rate) in megabits per second. Value of 0 indicates no
     * throughput is allowed and any running migration job is effectively paused for the duration of this recurrence.
     * Only data plane operations are governed by this limit. Control plane operations ensure seamless functionality.
     * The agent may exceed this limit with control messages, if necessary.
     */
    private Integer limitInMbps;

    /**
     * Creates an instance of UploadLimitWeeklyRecurrence class.
     */
    public UploadLimitWeeklyRecurrence() {
    }

    /**
     * Get the days property: The set of days of week for the schedule recurrence. A day must not be specified more than
     * once in a recurrence.
     * 
     * @return the days value.
     */
    public List<DayOfWeek> days() {
        return this.days;
    }

    /**
     * Set the days property: The set of days of week for the schedule recurrence. A day must not be specified more than
     * once in a recurrence.
     * 
     * @param days the days value to set.
     * @return the UploadLimitWeeklyRecurrence object itself.
     */
    public UploadLimitWeeklyRecurrence withDays(List<DayOfWeek> days) {
        this.days = days;
        return this;
    }

    /**
     * Get the startTime property: The start time of the schedule recurrence. Full hour and 30-minute intervals are
     * supported.
     * 
     * @return the startTime value.
     */
    public Time startTime() {
        return this.startTime;
    }

    /**
     * Set the startTime property: The start time of the schedule recurrence. Full hour and 30-minute intervals are
     * supported.
     * 
     * @param startTime the startTime value to set.
     * @return the UploadLimitWeeklyRecurrence object itself.
     */
    public UploadLimitWeeklyRecurrence withStartTime(Time startTime) {
        this.startTime = startTime;
        return this;
    }

    /**
     * Get the endTime property: The end time of the schedule recurrence. Full hour and 30-minute intervals are
     * supported.
     * 
     * @return the endTime value.
     */
    public Time endTime() {
        return this.endTime;
    }

    /**
     * Set the endTime property: The end time of the schedule recurrence. Full hour and 30-minute intervals are
     * supported.
     * 
     * @param endTime the endTime value to set.
     * @return the UploadLimitWeeklyRecurrence object itself.
     */
    public UploadLimitWeeklyRecurrence withEndTime(Time endTime) {
        this.endTime = endTime;
        return this;
    }

    /**
     * Get the limitInMbps property: The WAN-link upload bandwidth (maximum data transfer rate) in megabits per second.
     * Value of 0 indicates no throughput is allowed and any running migration job is effectively paused for the
     * duration of this recurrence. Only data plane operations are governed by this limit. Control plane operations
     * ensure seamless functionality. The agent may exceed this limit with control messages, if necessary.
     * 
     * @return the limitInMbps value.
     */
    public Integer limitInMbps() {
        return this.limitInMbps;
    }

    /**
     * Set the limitInMbps property: The WAN-link upload bandwidth (maximum data transfer rate) in megabits per second.
     * Value of 0 indicates no throughput is allowed and any running migration job is effectively paused for the
     * duration of this recurrence. Only data plane operations are governed by this limit. Control plane operations
     * ensure seamless functionality. The agent may exceed this limit with control messages, if necessary.
     * 
     * @param limitInMbps the limitInMbps value to set.
     * @return the UploadLimitWeeklyRecurrence object itself.
     */
    public UploadLimitWeeklyRecurrence withLimitInMbps(Integer limitInMbps) {
        this.limitInMbps = limitInMbps;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (days() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property days in model UploadLimitWeeklyRecurrence"));
        }
        if (startTime() != null) {
            startTime().validate();
        }
        if (endTime() != null) {
            endTime().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(UploadLimitWeeklyRecurrence.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("days", this.days,
            (writer, element) -> writer.writeString(element == null ? null : element.toString()));
        jsonWriter.writeJsonField("startTime", this.startTime);
        jsonWriter.writeJsonField("endTime", this.endTime);
        jsonWriter.writeNumberField("limitInMbps", this.limitInMbps);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of UploadLimitWeeklyRecurrence from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of UploadLimitWeeklyRecurrence if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the UploadLimitWeeklyRecurrence.
     */
    public static UploadLimitWeeklyRecurrence fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            UploadLimitWeeklyRecurrence deserializedUploadLimitWeeklyRecurrence = new UploadLimitWeeklyRecurrence();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("days".equals(fieldName)) {
                    List<DayOfWeek> days = reader.readArray(reader1 -> DayOfWeek.fromString(reader1.getString()));
                    deserializedUploadLimitWeeklyRecurrence.days = days;
                } else if ("startTime".equals(fieldName)) {
                    deserializedUploadLimitWeeklyRecurrence.startTime = Time.fromJson(reader);
                } else if ("endTime".equals(fieldName)) {
                    deserializedUploadLimitWeeklyRecurrence.endTime = Time.fromJson(reader);
                } else if ("limitInMbps".equals(fieldName)) {
                    deserializedUploadLimitWeeklyRecurrence.limitInMbps = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedUploadLimitWeeklyRecurrence;
        });
    }
}
