// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagemover.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The schedule recurrence.
 */
@Fluent
public class Recurrence implements JsonSerializable<Recurrence> {
    /*
     * The start time of the schedule recurrence. Full hour and 30-minute intervals are supported.
     */
    private Time startTime;

    /*
     * The end time of the schedule recurrence. Full hour and 30-minute intervals are supported.
     */
    private Time endTime;

    /**
     * Creates an instance of Recurrence class.
     */
    public Recurrence() {
    }

    /**
     * Get the startTime property: The start time of the schedule recurrence. Full hour and 30-minute intervals are
     * supported.
     * 
     * @return the startTime value.
     */
    public Time startTime() {
        return this.startTime;
    }

    /**
     * Set the startTime property: The start time of the schedule recurrence. Full hour and 30-minute intervals are
     * supported.
     * 
     * @param startTime the startTime value to set.
     * @return the Recurrence object itself.
     */
    public Recurrence withStartTime(Time startTime) {
        this.startTime = startTime;
        return this;
    }

    /**
     * Get the endTime property: The end time of the schedule recurrence. Full hour and 30-minute intervals are
     * supported.
     * 
     * @return the endTime value.
     */
    public Time endTime() {
        return this.endTime;
    }

    /**
     * Set the endTime property: The end time of the schedule recurrence. Full hour and 30-minute intervals are
     * supported.
     * 
     * @param endTime the endTime value to set.
     * @return the Recurrence object itself.
     */
    public Recurrence withEndTime(Time endTime) {
        this.endTime = endTime;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (startTime() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property startTime in model Recurrence"));
        } else {
            startTime().validate();
        }
        if (endTime() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property endTime in model Recurrence"));
        } else {
            endTime().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(Recurrence.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("startTime", this.startTime);
        jsonWriter.writeJsonField("endTime", this.endTime);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Recurrence from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Recurrence if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the Recurrence.
     */
    public static Recurrence fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Recurrence deserializedRecurrence = new Recurrence();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("startTime".equals(fieldName)) {
                    deserializedRecurrence.startTime = Time.fromJson(reader);
                } else if ("endTime".equals(fieldName)) {
                    deserializedRecurrence.endTime = Time.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRecurrence;
        });
    }
}
