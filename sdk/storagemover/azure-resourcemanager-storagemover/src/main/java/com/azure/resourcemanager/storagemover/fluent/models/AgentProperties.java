// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagemover.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.storagemover.models.AgentPropertiesErrorDetails;
import com.azure.resourcemanager.storagemover.models.AgentStatus;
import com.azure.resourcemanager.storagemover.models.ProvisioningState;
import com.azure.resourcemanager.storagemover.models.UploadLimitSchedule;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * The AgentProperties model.
 */
@Fluent
public final class AgentProperties implements JsonSerializable<AgentProperties> {
    /*
     * A description for the Agent.
     */
    private String description;

    /*
     * The Agent version.
     */
    private String agentVersion;

    /*
     * The fully qualified resource ID of the Hybrid Compute resource for the Agent.
     */
    private String arcResourceId;

    /*
     * The VM UUID of the Hybrid Compute resource for the Agent.
     */
    private String arcVmUuid;

    /*
     * The Agent status.
     */
    private AgentStatus agentStatus;

    /*
     * The last updated time of the Agent status.
     */
    private OffsetDateTime lastStatusUpdate;

    /*
     * Local IP address reported by the Agent.
     */
    private String localIpAddress;

    /*
     * Available memory reported by the Agent, in MB.
     */
    private Long memoryInMB;

    /*
     * Available compute cores reported by the Agent.
     */
    private Long numberOfCores;

    /*
     * Uptime of the Agent in seconds.
     */
    private Long uptimeInSeconds;

    /*
     * The agent's local time zone represented in Windows format.
     */
    private String timeZone;

    /*
     * The WAN-link upload limit schedule that applies to any Job Run the agent executes. Data plane operations
     * (migrating files) are affected. Control plane operations ensure seamless migration functionality and are not
     * limited by this schedule. The schedule is interpreted with the agent's local time.
     */
    private UploadLimitSchedule uploadLimitSchedule;

    /*
     * The errorDetails property.
     */
    private AgentPropertiesErrorDetails errorDetails;

    /*
     * The provisioning state of this resource.
     */
    private ProvisioningState provisioningState;

    /**
     * Creates an instance of AgentProperties class.
     */
    public AgentProperties() {
    }

    /**
     * Get the description property: A description for the Agent.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: A description for the Agent.
     * 
     * @param description the description value to set.
     * @return the AgentProperties object itself.
     */
    public AgentProperties withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the agentVersion property: The Agent version.
     * 
     * @return the agentVersion value.
     */
    public String agentVersion() {
        return this.agentVersion;
    }

    /**
     * Get the arcResourceId property: The fully qualified resource ID of the Hybrid Compute resource for the Agent.
     * 
     * @return the arcResourceId value.
     */
    public String arcResourceId() {
        return this.arcResourceId;
    }

    /**
     * Set the arcResourceId property: The fully qualified resource ID of the Hybrid Compute resource for the Agent.
     * 
     * @param arcResourceId the arcResourceId value to set.
     * @return the AgentProperties object itself.
     */
    public AgentProperties withArcResourceId(String arcResourceId) {
        this.arcResourceId = arcResourceId;
        return this;
    }

    /**
     * Get the arcVmUuid property: The VM UUID of the Hybrid Compute resource for the Agent.
     * 
     * @return the arcVmUuid value.
     */
    public String arcVmUuid() {
        return this.arcVmUuid;
    }

    /**
     * Set the arcVmUuid property: The VM UUID of the Hybrid Compute resource for the Agent.
     * 
     * @param arcVmUuid the arcVmUuid value to set.
     * @return the AgentProperties object itself.
     */
    public AgentProperties withArcVmUuid(String arcVmUuid) {
        this.arcVmUuid = arcVmUuid;
        return this;
    }

    /**
     * Get the agentStatus property: The Agent status.
     * 
     * @return the agentStatus value.
     */
    public AgentStatus agentStatus() {
        return this.agentStatus;
    }

    /**
     * Get the lastStatusUpdate property: The last updated time of the Agent status.
     * 
     * @return the lastStatusUpdate value.
     */
    public OffsetDateTime lastStatusUpdate() {
        return this.lastStatusUpdate;
    }

    /**
     * Get the localIpAddress property: Local IP address reported by the Agent.
     * 
     * @return the localIpAddress value.
     */
    public String localIpAddress() {
        return this.localIpAddress;
    }

    /**
     * Get the memoryInMB property: Available memory reported by the Agent, in MB.
     * 
     * @return the memoryInMB value.
     */
    public Long memoryInMB() {
        return this.memoryInMB;
    }

    /**
     * Get the numberOfCores property: Available compute cores reported by the Agent.
     * 
     * @return the numberOfCores value.
     */
    public Long numberOfCores() {
        return this.numberOfCores;
    }

    /**
     * Get the uptimeInSeconds property: Uptime of the Agent in seconds.
     * 
     * @return the uptimeInSeconds value.
     */
    public Long uptimeInSeconds() {
        return this.uptimeInSeconds;
    }

    /**
     * Get the timeZone property: The agent's local time zone represented in Windows format.
     * 
     * @return the timeZone value.
     */
    public String timeZone() {
        return this.timeZone;
    }

    /**
     * Get the uploadLimitSchedule property: The WAN-link upload limit schedule that applies to any Job Run the agent
     * executes. Data plane operations (migrating files) are affected. Control plane operations ensure seamless
     * migration functionality and are not limited by this schedule. The schedule is interpreted with the agent's local
     * time.
     * 
     * @return the uploadLimitSchedule value.
     */
    public UploadLimitSchedule uploadLimitSchedule() {
        return this.uploadLimitSchedule;
    }

    /**
     * Set the uploadLimitSchedule property: The WAN-link upload limit schedule that applies to any Job Run the agent
     * executes. Data plane operations (migrating files) are affected. Control plane operations ensure seamless
     * migration functionality and are not limited by this schedule. The schedule is interpreted with the agent's local
     * time.
     * 
     * @param uploadLimitSchedule the uploadLimitSchedule value to set.
     * @return the AgentProperties object itself.
     */
    public AgentProperties withUploadLimitSchedule(UploadLimitSchedule uploadLimitSchedule) {
        this.uploadLimitSchedule = uploadLimitSchedule;
        return this;
    }

    /**
     * Get the errorDetails property: The errorDetails property.
     * 
     * @return the errorDetails value.
     */
    public AgentPropertiesErrorDetails errorDetails() {
        return this.errorDetails;
    }

    /**
     * Get the provisioningState property: The provisioning state of this resource.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (arcResourceId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property arcResourceId in model AgentProperties"));
        }
        if (arcVmUuid() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property arcVmUuid in model AgentProperties"));
        }
        if (uploadLimitSchedule() != null) {
            uploadLimitSchedule().validate();
        }
        if (errorDetails() != null) {
            errorDetails().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(AgentProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("arcResourceId", this.arcResourceId);
        jsonWriter.writeStringField("arcVmUuid", this.arcVmUuid);
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeJsonField("uploadLimitSchedule", this.uploadLimitSchedule);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AgentProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AgentProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AgentProperties.
     */
    public static AgentProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AgentProperties deserializedAgentProperties = new AgentProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("arcResourceId".equals(fieldName)) {
                    deserializedAgentProperties.arcResourceId = reader.getString();
                } else if ("arcVmUuid".equals(fieldName)) {
                    deserializedAgentProperties.arcVmUuid = reader.getString();
                } else if ("description".equals(fieldName)) {
                    deserializedAgentProperties.description = reader.getString();
                } else if ("agentVersion".equals(fieldName)) {
                    deserializedAgentProperties.agentVersion = reader.getString();
                } else if ("agentStatus".equals(fieldName)) {
                    deserializedAgentProperties.agentStatus = AgentStatus.fromString(reader.getString());
                } else if ("lastStatusUpdate".equals(fieldName)) {
                    deserializedAgentProperties.lastStatusUpdate = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("localIPAddress".equals(fieldName)) {
                    deserializedAgentProperties.localIpAddress = reader.getString();
                } else if ("memoryInMB".equals(fieldName)) {
                    deserializedAgentProperties.memoryInMB = reader.getNullable(JsonReader::getLong);
                } else if ("numberOfCores".equals(fieldName)) {
                    deserializedAgentProperties.numberOfCores = reader.getNullable(JsonReader::getLong);
                } else if ("uptimeInSeconds".equals(fieldName)) {
                    deserializedAgentProperties.uptimeInSeconds = reader.getNullable(JsonReader::getLong);
                } else if ("timeZone".equals(fieldName)) {
                    deserializedAgentProperties.timeZone = reader.getString();
                } else if ("uploadLimitSchedule".equals(fieldName)) {
                    deserializedAgentProperties.uploadLimitSchedule = UploadLimitSchedule.fromJson(reader);
                } else if ("errorDetails".equals(fieldName)) {
                    deserializedAgentProperties.errorDetails = AgentPropertiesErrorDetails.fromJson(reader);
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedAgentProperties.provisioningState = ProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAgentProperties;
        });
    }
}
