// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagemover.models;

import com.azure.core.util.ExpandableEnum;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Map;
import java.util.Objects;
import java.util.concurrent.ConcurrentHashMap;
import java.util.function.Function;

/**
 * The minute element of the time. Allowed values are 0 and 30. If not specified, its value defaults to 0.
 */
public final class Minute implements ExpandableEnum<Integer> {
    private static final Map<Integer, Minute> VALUES = new ConcurrentHashMap<>();

    private static final Function<Integer, Minute> NEW_INSTANCE = Minute::new;

    /**
     * Static value 0 for Minute.
     */
    public static final Minute ZERO = fromValue(0);

    /**
     * Static value 30 for Minute.
     */
    public static final Minute THREE_ZERO = fromValue(30);

    private final Integer value;

    private Minute(Integer value) {
        this.value = value;
    }

    /**
     * Creates or finds a Minute.
     * 
     * @param value a value to look for.
     * @return the corresponding Minute.
     */
    public static Minute fromValue(Integer value) {
        Objects.requireNonNull(value, "'value' cannot be null.");
        return VALUES.computeIfAbsent(value, NEW_INSTANCE);
    }

    /**
     * Gets known Minute values.
     * 
     * @return Known Minute values.
     */
    public static Collection<Minute> values() {
        return new ArrayList<>(VALUES.values());
    }

    /**
     * Gets the value of the Minute instance.
     * 
     * @return the value of the Minute instance.
     */
    @Override
    public Integer getValue() {
        return this.value;
    }

    @Override
    public String toString() {
        return Objects.toString(this.value);
    }

    @Override
    public boolean equals(Object obj) {
        return this == obj;
    }

    @Override
    public int hashCode() {
        return Objects.hashCode(this.value);
    }
}
