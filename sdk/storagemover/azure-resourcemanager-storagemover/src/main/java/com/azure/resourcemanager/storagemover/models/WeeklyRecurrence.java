// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagemover.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/**
 * The weekly recurrence of the schedule.
 */
@Fluent
public class WeeklyRecurrence extends Recurrence {
    /*
     * The set of days of week for the schedule recurrence. A day must not be specified more than once in a recurrence.
     */
    @JsonProperty(value = "days", required = true)
    private List<DayOfWeek> days;

    /**
     * Creates an instance of WeeklyRecurrence class.
     */
    public WeeklyRecurrence() {
    }

    /**
     * Get the days property: The set of days of week for the schedule recurrence. A day must not be specified more than
     * once in a recurrence.
     * 
     * @return the days value.
     */
    public List<DayOfWeek> days() {
        return this.days;
    }

    /**
     * Set the days property: The set of days of week for the schedule recurrence. A day must not be specified more than
     * once in a recurrence.
     * 
     * @param days the days value to set.
     * @return the WeeklyRecurrence object itself.
     */
    public WeeklyRecurrence withDays(List<DayOfWeek> days) {
        this.days = days;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public WeeklyRecurrence withStartTime(Time startTime) {
        super.withStartTime(startTime);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public WeeklyRecurrence withEndTime(Time endTime) {
        super.withEndTime(endTime);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (days() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property days in model WeeklyRecurrence"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(WeeklyRecurrence.class);
}
