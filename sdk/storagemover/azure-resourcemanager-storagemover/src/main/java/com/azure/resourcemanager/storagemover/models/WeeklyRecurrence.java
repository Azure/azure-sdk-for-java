// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagemover.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The weekly recurrence of the schedule.
 */
@Fluent
public class WeeklyRecurrence extends Recurrence {
    /*
     * The set of days of week for the schedule recurrence. A day must not be specified more than once in a recurrence.
     */
    private List<DayOfWeek> days;

    /**
     * Creates an instance of WeeklyRecurrence class.
     */
    public WeeklyRecurrence() {
    }

    /**
     * Get the days property: The set of days of week for the schedule recurrence. A day must not be specified more than
     * once in a recurrence.
     * 
     * @return the days value.
     */
    public List<DayOfWeek> days() {
        return this.days;
    }

    /**
     * Set the days property: The set of days of week for the schedule recurrence. A day must not be specified more than
     * once in a recurrence.
     * 
     * @param days the days value to set.
     * @return the WeeklyRecurrence object itself.
     */
    public WeeklyRecurrence withDays(List<DayOfWeek> days) {
        this.days = days;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public WeeklyRecurrence withStartTime(Time startTime) {
        super.withStartTime(startTime);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public WeeklyRecurrence withEndTime(Time endTime) {
        super.withEndTime(endTime);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (days() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property days in model WeeklyRecurrence"));
        }
        if (startTime() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property startTime in model WeeklyRecurrence"));
        } else {
            startTime().validate();
        }
        if (endTime() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property endTime in model WeeklyRecurrence"));
        } else {
            endTime().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(WeeklyRecurrence.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("startTime", startTime());
        jsonWriter.writeJsonField("endTime", endTime());
        jsonWriter.writeArrayField("days", this.days,
            (writer, element) -> writer.writeString(element == null ? null : element.toString()));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of WeeklyRecurrence from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of WeeklyRecurrence if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the WeeklyRecurrence.
     */
    public static WeeklyRecurrence fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            WeeklyRecurrence deserializedWeeklyRecurrence = new WeeklyRecurrence();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("startTime".equals(fieldName)) {
                    deserializedWeeklyRecurrence.withStartTime(Time.fromJson(reader));
                } else if ("endTime".equals(fieldName)) {
                    deserializedWeeklyRecurrence.withEndTime(Time.fromJson(reader));
                } else if ("days".equals(fieldName)) {
                    List<DayOfWeek> days = reader.readArray(reader1 -> DayOfWeek.fromString(reader1.getString()));
                    deserializedWeeklyRecurrence.days = days;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedWeeklyRecurrence;
        });
    }
}
