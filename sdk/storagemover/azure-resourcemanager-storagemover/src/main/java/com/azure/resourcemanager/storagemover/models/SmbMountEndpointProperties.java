// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagemover.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;

/** The properties of SMB share endpoint. */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "endpointType")
@JsonTypeName("SmbMount")
@Fluent
public final class SmbMountEndpointProperties extends EndpointBaseProperties {
    /*
     * The host name or IP address of the server exporting the file system.
     */
    @JsonProperty(value = "host", required = true)
    private String host;

    /*
     * The name of the SMB share being exported from the server.
     */
    @JsonProperty(value = "shareName", required = true)
    private String shareName;

    /*
     * The Azure Key Vault secret URIs which store the required credentials to access the SMB share.
     */
    @JsonProperty(value = "credentials")
    private AzureKeyVaultSmbCredentials credentials;

    /** Creates an instance of SmbMountEndpointProperties class. */
    public SmbMountEndpointProperties() {
    }

    /**
     * Get the host property: The host name or IP address of the server exporting the file system.
     *
     * @return the host value.
     */
    public String host() {
        return this.host;
    }

    /**
     * Set the host property: The host name or IP address of the server exporting the file system.
     *
     * @param host the host value to set.
     * @return the SmbMountEndpointProperties object itself.
     */
    public SmbMountEndpointProperties withHost(String host) {
        this.host = host;
        return this;
    }

    /**
     * Get the shareName property: The name of the SMB share being exported from the server.
     *
     * @return the shareName value.
     */
    public String shareName() {
        return this.shareName;
    }

    /**
     * Set the shareName property: The name of the SMB share being exported from the server.
     *
     * @param shareName the shareName value to set.
     * @return the SmbMountEndpointProperties object itself.
     */
    public SmbMountEndpointProperties withShareName(String shareName) {
        this.shareName = shareName;
        return this;
    }

    /**
     * Get the credentials property: The Azure Key Vault secret URIs which store the required credentials to access the
     * SMB share.
     *
     * @return the credentials value.
     */
    public AzureKeyVaultSmbCredentials credentials() {
        return this.credentials;
    }

    /**
     * Set the credentials property: The Azure Key Vault secret URIs which store the required credentials to access the
     * SMB share.
     *
     * @param credentials the credentials value to set.
     * @return the SmbMountEndpointProperties object itself.
     */
    public SmbMountEndpointProperties withCredentials(AzureKeyVaultSmbCredentials credentials) {
        this.credentials = credentials;
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public SmbMountEndpointProperties withDescription(String description) {
        super.withDescription(description);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (host() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property host in model SmbMountEndpointProperties"));
        }
        if (shareName() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property shareName in model SmbMountEndpointProperties"));
        }
        if (credentials() != null) {
            credentials().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(SmbMountEndpointProperties.class);
}
