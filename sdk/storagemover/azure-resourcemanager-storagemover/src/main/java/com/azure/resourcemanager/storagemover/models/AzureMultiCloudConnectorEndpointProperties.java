// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.storagemover.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The properties of Azure MultiCloudConnector endpoint.
 */
@Fluent
public final class AzureMultiCloudConnectorEndpointProperties extends EndpointBaseProperties {
    /*
     * The Endpoint resource type.
     */
    private EndpointType endpointType = EndpointType.AZURE_MULTI_CLOUD_CONNECTOR;

    /*
     * The Azure Resource ID of the MultiCloud Connector resource.
     */
    private String multiCloudConnectorId;

    /*
     * The AWS S3 bucket ARM resource Id.
     */
    private String awsS3BucketId;

    /**
     * Creates an instance of AzureMultiCloudConnectorEndpointProperties class.
     */
    public AzureMultiCloudConnectorEndpointProperties() {
    }

    /**
     * Get the endpointType property: The Endpoint resource type.
     * 
     * @return the endpointType value.
     */
    @Override
    public EndpointType endpointType() {
        return this.endpointType;
    }

    /**
     * Get the multiCloudConnectorId property: The Azure Resource ID of the MultiCloud Connector resource.
     * 
     * @return the multiCloudConnectorId value.
     */
    public String multiCloudConnectorId() {
        return this.multiCloudConnectorId;
    }

    /**
     * Set the multiCloudConnectorId property: The Azure Resource ID of the MultiCloud Connector resource.
     * 
     * @param multiCloudConnectorId the multiCloudConnectorId value to set.
     * @return the AzureMultiCloudConnectorEndpointProperties object itself.
     */
    public AzureMultiCloudConnectorEndpointProperties withMultiCloudConnectorId(String multiCloudConnectorId) {
        this.multiCloudConnectorId = multiCloudConnectorId;
        return this;
    }

    /**
     * Get the awsS3BucketId property: The AWS S3 bucket ARM resource Id.
     * 
     * @return the awsS3BucketId value.
     */
    public String awsS3BucketId() {
        return this.awsS3BucketId;
    }

    /**
     * Set the awsS3BucketId property: The AWS S3 bucket ARM resource Id.
     * 
     * @param awsS3BucketId the awsS3BucketId value to set.
     * @return the AzureMultiCloudConnectorEndpointProperties object itself.
     */
    public AzureMultiCloudConnectorEndpointProperties withAwsS3BucketId(String awsS3BucketId) {
        this.awsS3BucketId = awsS3BucketId;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureMultiCloudConnectorEndpointProperties withDescription(String description) {
        super.withDescription(description);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (multiCloudConnectorId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property multiCloudConnectorId in model AzureMultiCloudConnectorEndpointProperties"));
        }
        if (awsS3BucketId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property awsS3BucketId in model AzureMultiCloudConnectorEndpointProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(AzureMultiCloudConnectorEndpointProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("description", description());
        jsonWriter.writeStringField("multiCloudConnectorId", this.multiCloudConnectorId);
        jsonWriter.writeStringField("awsS3BucketId", this.awsS3BucketId);
        jsonWriter.writeStringField("endpointType", this.endpointType == null ? null : this.endpointType.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AzureMultiCloudConnectorEndpointProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AzureMultiCloudConnectorEndpointProperties if the JsonReader was pointing to an instance
     * of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AzureMultiCloudConnectorEndpointProperties.
     */
    public static AzureMultiCloudConnectorEndpointProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AzureMultiCloudConnectorEndpointProperties deserializedAzureMultiCloudConnectorEndpointProperties
                = new AzureMultiCloudConnectorEndpointProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("description".equals(fieldName)) {
                    deserializedAzureMultiCloudConnectorEndpointProperties.withDescription(reader.getString());
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedAzureMultiCloudConnectorEndpointProperties
                        .withProvisioningState(ProvisioningState.fromString(reader.getString()));
                } else if ("multiCloudConnectorId".equals(fieldName)) {
                    deserializedAzureMultiCloudConnectorEndpointProperties.multiCloudConnectorId = reader.getString();
                } else if ("awsS3BucketId".equals(fieldName)) {
                    deserializedAzureMultiCloudConnectorEndpointProperties.awsS3BucketId = reader.getString();
                } else if ("endpointType".equals(fieldName)) {
                    deserializedAzureMultiCloudConnectorEndpointProperties.endpointType
                        = EndpointType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAzureMultiCloudConnectorEndpointProperties;
        });
    }
}
