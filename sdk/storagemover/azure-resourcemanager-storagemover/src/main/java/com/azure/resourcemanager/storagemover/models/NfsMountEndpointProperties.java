// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagemover.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The properties of NFS share endpoint.
 */
@Fluent
public final class NfsMountEndpointProperties extends EndpointBaseProperties {
    /*
     * The Endpoint resource type.
     */
    private EndpointType endpointType = EndpointType.NFS_MOUNT;

    /*
     * The host name or IP address of the server exporting the file system.
     */
    private String host;

    /*
     * The NFS protocol version.
     */
    private NfsVersion nfsVersion;

    /*
     * The directory being exported from the server.
     */
    private String export;

    /**
     * Creates an instance of NfsMountEndpointProperties class.
     */
    public NfsMountEndpointProperties() {
    }

    /**
     * Get the endpointType property: The Endpoint resource type.
     * 
     * @return the endpointType value.
     */
    @Override
    public EndpointType endpointType() {
        return this.endpointType;
    }

    /**
     * Get the host property: The host name or IP address of the server exporting the file system.
     * 
     * @return the host value.
     */
    public String host() {
        return this.host;
    }

    /**
     * Set the host property: The host name or IP address of the server exporting the file system.
     * 
     * @param host the host value to set.
     * @return the NfsMountEndpointProperties object itself.
     */
    public NfsMountEndpointProperties withHost(String host) {
        this.host = host;
        return this;
    }

    /**
     * Get the nfsVersion property: The NFS protocol version.
     * 
     * @return the nfsVersion value.
     */
    public NfsVersion nfsVersion() {
        return this.nfsVersion;
    }

    /**
     * Set the nfsVersion property: The NFS protocol version.
     * 
     * @param nfsVersion the nfsVersion value to set.
     * @return the NfsMountEndpointProperties object itself.
     */
    public NfsMountEndpointProperties withNfsVersion(NfsVersion nfsVersion) {
        this.nfsVersion = nfsVersion;
        return this;
    }

    /**
     * Get the export property: The directory being exported from the server.
     * 
     * @return the export value.
     */
    public String export() {
        return this.export;
    }

    /**
     * Set the export property: The directory being exported from the server.
     * 
     * @param export the export value to set.
     * @return the NfsMountEndpointProperties object itself.
     */
    public NfsMountEndpointProperties withExport(String export) {
        this.export = export;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public NfsMountEndpointProperties withDescription(String description) {
        super.withDescription(description);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (host() == null) {
            throw LOGGER.atError()
                .log(
                    new IllegalArgumentException("Missing required property host in model NfsMountEndpointProperties"));
        }
        if (export() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property export in model NfsMountEndpointProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(NfsMountEndpointProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("description", description());
        jsonWriter.writeStringField("host", this.host);
        jsonWriter.writeStringField("export", this.export);
        jsonWriter.writeStringField("endpointType", this.endpointType == null ? null : this.endpointType.toString());
        jsonWriter.writeStringField("nfsVersion", this.nfsVersion == null ? null : this.nfsVersion.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NfsMountEndpointProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NfsMountEndpointProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the NfsMountEndpointProperties.
     */
    public static NfsMountEndpointProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NfsMountEndpointProperties deserializedNfsMountEndpointProperties = new NfsMountEndpointProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("description".equals(fieldName)) {
                    deserializedNfsMountEndpointProperties.withDescription(reader.getString());
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedNfsMountEndpointProperties
                        .withProvisioningState(ProvisioningState.fromString(reader.getString()));
                } else if ("host".equals(fieldName)) {
                    deserializedNfsMountEndpointProperties.host = reader.getString();
                } else if ("export".equals(fieldName)) {
                    deserializedNfsMountEndpointProperties.export = reader.getString();
                } else if ("endpointType".equals(fieldName)) {
                    deserializedNfsMountEndpointProperties.endpointType = EndpointType.fromString(reader.getString());
                } else if ("nfsVersion".equals(fieldName)) {
                    deserializedNfsMountEndpointProperties.nfsVersion = NfsVersion.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNfsMountEndpointProperties;
        });
    }
}
