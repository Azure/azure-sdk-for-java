/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.datadog.v2020_02_01_preview.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.datadog.v2020_02_01_preview.SingleSignOnConfigurations;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.datadog.v2020_02_01_preview.DatadogSingleSignOnResource;

class SingleSignOnConfigurationsImpl extends WrapperImpl<SingleSignOnConfigurationsInner> implements SingleSignOnConfigurations {
    private final DatadogManager manager;

    SingleSignOnConfigurationsImpl(DatadogManager manager) {
        super(manager.inner().singleSignOnConfigurations());
        this.manager = manager;
    }

    public DatadogManager manager() {
        return this.manager;
    }

    @Override
    public DatadogSingleSignOnResourceImpl define(String name) {
        return wrapModel(name);
    }

    private DatadogSingleSignOnResourceImpl wrapModel(DatadogSingleSignOnResourceInner inner) {
        return  new DatadogSingleSignOnResourceImpl(inner, manager());
    }

    private DatadogSingleSignOnResourceImpl wrapModel(String name) {
        return new DatadogSingleSignOnResourceImpl(name, this.manager());
    }

    @Override
    public Observable<DatadogSingleSignOnResource> listAsync(final String resourceGroupName, final String monitorName) {
        SingleSignOnConfigurationsInner client = this.inner();
        return client.listAsync(resourceGroupName, monitorName)
        .flatMapIterable(new Func1<Page<DatadogSingleSignOnResourceInner>, Iterable<DatadogSingleSignOnResourceInner>>() {
            @Override
            public Iterable<DatadogSingleSignOnResourceInner> call(Page<DatadogSingleSignOnResourceInner> page) {
                return page.items();
            }
        })
        .map(new Func1<DatadogSingleSignOnResourceInner, DatadogSingleSignOnResource>() {
            @Override
            public DatadogSingleSignOnResource call(DatadogSingleSignOnResourceInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public Observable<DatadogSingleSignOnResource> getAsync(String resourceGroupName, String monitorName, String configurationName) {
        SingleSignOnConfigurationsInner client = this.inner();
        return client.getAsync(resourceGroupName, monitorName, configurationName)
        .flatMap(new Func1<DatadogSingleSignOnResourceInner, Observable<DatadogSingleSignOnResource>>() {
            @Override
            public Observable<DatadogSingleSignOnResource> call(DatadogSingleSignOnResourceInner inner) {
                if (inner == null) {
                    return Observable.empty();
                } else {
                    return Observable.just((DatadogSingleSignOnResource)wrapModel(inner));
                }
            }
       });
    }

}
