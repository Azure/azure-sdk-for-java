/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.datadog.v2020_02_01_preview.implementation;

import com.microsoft.azure.management.datadog.v2020_02_01_preview.MonitoringTagRules;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import com.microsoft.azure.management.datadog.v2020_02_01_preview.MonitoringTagRulesProperties;
import rx.functions.Func1;

class MonitoringTagRulesImpl extends CreatableUpdatableImpl<MonitoringTagRules, MonitoringTagRulesInner, MonitoringTagRulesImpl> implements MonitoringTagRules, MonitoringTagRules.Definition, MonitoringTagRules.Update {
    private final DatadogManager manager;
    private String resourceGroupName;
    private String monitorName;
    private String ruleSetName;
    private MonitoringTagRulesProperties cproperties;
    private MonitoringTagRulesProperties uproperties;

    MonitoringTagRulesImpl(String name, DatadogManager manager) {
        super(name, new MonitoringTagRulesInner());
        this.manager = manager;
        // Set resource name
        this.ruleSetName = name;
        //
        this.cproperties = new MonitoringTagRulesProperties();
        this.uproperties = new MonitoringTagRulesProperties();
    }

    MonitoringTagRulesImpl(MonitoringTagRulesInner inner, DatadogManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.ruleSetName = inner.name();
        // set resource ancestor and positional variables
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.monitorName = IdParsingUtils.getValueFromIdByName(inner.id(), "monitors");
        this.ruleSetName = IdParsingUtils.getValueFromIdByName(inner.id(), "tagRules");
        //
        this.cproperties = new MonitoringTagRulesProperties();
        this.uproperties = new MonitoringTagRulesProperties();
    }

    @Override
    public DatadogManager manager() {
        return this.manager;
    }

    @Override
    public Observable<MonitoringTagRules> createResourceAsync() {
        TagRulesInner client = this.manager().inner().tagRules();
        return client.createOrUpdateAsync(this.resourceGroupName, this.monitorName, this.ruleSetName, this.cproperties)
            .map(new Func1<MonitoringTagRulesInner, MonitoringTagRulesInner>() {
               @Override
               public MonitoringTagRulesInner call(MonitoringTagRulesInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<MonitoringTagRules> updateResourceAsync() {
        TagRulesInner client = this.manager().inner().tagRules();
        return client.createOrUpdateAsync(this.resourceGroupName, this.monitorName, this.ruleSetName, this.uproperties)
            .map(new Func1<MonitoringTagRulesInner, MonitoringTagRulesInner>() {
               @Override
               public MonitoringTagRulesInner call(MonitoringTagRulesInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<MonitoringTagRulesInner> getInnerAsync() {
        TagRulesInner client = this.manager().inner().tagRules();
        return client.getAsync(this.resourceGroupName, this.monitorName, this.ruleSetName);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }

    private void resetCreateUpdateParameters() {
        this.cproperties = new MonitoringTagRulesProperties();
        this.uproperties = new MonitoringTagRulesProperties();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public MonitoringTagRulesProperties properties() {
        return this.inner().properties();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public MonitoringTagRulesImpl withExistingMonitor(String resourceGroupName, String monitorName) {
        this.resourceGroupName = resourceGroupName;
        this.monitorName = monitorName;
        return this;
    }

    @Override
    public MonitoringTagRulesImpl withProperties(MonitoringTagRulesProperties properties) {
        if (isInCreateMode()) {
            this.cproperties = properties;
        } else {
            this.uproperties = properties;
        }
        return this;
    }

}
