/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.datadog.v2020_02_01_preview.implementation;

import com.microsoft.azure.arm.resources.models.implementation.GroupableResourceCoreImpl;
import com.microsoft.azure.management.datadog.v2020_02_01_preview.DatadogMonitorResource;
import rx.Observable;
import com.microsoft.azure.management.datadog.v2020_02_01_preview.DatadogMonitorResourceUpdateParameters;
import com.microsoft.azure.management.datadog.v2020_02_01_preview.ResourceSku;
import com.microsoft.azure.management.datadog.v2020_02_01_preview.MonitorProperties;
import com.microsoft.azure.management.datadog.v2020_02_01_preview.IdentityProperties;
import com.microsoft.azure.management.datadog.v2020_02_01_preview.MonitorUpdateProperties;
import rx.functions.Func1;

class DatadogMonitorResourceImpl extends GroupableResourceCoreImpl<DatadogMonitorResource, DatadogMonitorResourceInner, DatadogMonitorResourceImpl, DatadogManager> implements DatadogMonitorResource, DatadogMonitorResource.Definition, DatadogMonitorResource.Update {
    private DatadogMonitorResourceUpdateParameters updateParameter;
    DatadogMonitorResourceImpl(String name, DatadogMonitorResourceInner inner, DatadogManager manager) {
        super(name, inner, manager);
        this.updateParameter = new DatadogMonitorResourceUpdateParameters();
    }

    @Override
    public Observable<DatadogMonitorResource> createResourceAsync() {
        MonitorsInner client = this.manager().inner().monitors();
        return client.createAsync(this.resourceGroupName(), this.name(), this.inner())
            .map(new Func1<DatadogMonitorResourceInner, DatadogMonitorResourceInner>() {
               @Override
               public DatadogMonitorResourceInner call(DatadogMonitorResourceInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<DatadogMonitorResource> updateResourceAsync() {
        MonitorsInner client = this.manager().inner().monitors();
        return client.updateAsync(this.resourceGroupName(), this.name(), this.updateParameter)
            .map(new Func1<DatadogMonitorResourceInner, DatadogMonitorResourceInner>() {
               @Override
               public DatadogMonitorResourceInner call(DatadogMonitorResourceInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<DatadogMonitorResourceInner> getInnerAsync() {
        MonitorsInner client = this.manager().inner().monitors();
        return client.getByResourceGroupAsync(this.resourceGroupName(), this.name());
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }

    private void resetCreateUpdateParameters() {
        this.updateParameter = new DatadogMonitorResourceUpdateParameters();
    }

    @Override
    public IdentityProperties identity() {
        return this.inner().identity();
    }

    @Override
    public MonitorProperties properties() {
        return this.inner().properties();
    }

    @Override
    public ResourceSku sku() {
        return this.inner().sku();
    }

    @Override
    public DatadogMonitorResourceImpl withIdentity(IdentityProperties identity) {
        this.inner().withIdentity(identity);
        return this;
    }

    @Override
    public DatadogMonitorResourceImpl withProperties(MonitorProperties properties) {
        this.inner().withProperties(properties);
        return this;
    }

    @Override
    public DatadogMonitorResourceImpl withSku(ResourceSku sku) {
        this.inner().withSku(sku);
        return this;
    }

    @Override
    public DatadogMonitorResourceImpl withProperties(MonitorUpdateProperties properties) {
        this.updateParameter.withProperties(properties);
        return this;
    }

}
