/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.datadog.v2020_02_01_preview.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.datadog.v2020_02_01_preview.DatadogAgreementProperties;
import com.microsoft.azure.management.datadog.v2020_02_01_preview.ResourceProviderDefaultErrorResponseException;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.PUT;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in MarketplaceAgreements.
 */
public class MarketplaceAgreementsInner {
    /** The Retrofit service to perform REST calls. */
    private MarketplaceAgreementsService service;
    /** The service client containing this operation class. */
    private MicrosoftDatadogClientImpl client;

    /**
     * Initializes an instance of MarketplaceAgreementsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public MarketplaceAgreementsInner(Retrofit retrofit, MicrosoftDatadogClientImpl client) {
        this.service = retrofit.create(MarketplaceAgreementsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for MarketplaceAgreements to be
     * used by Retrofit to perform actually REST calls.
     */
    interface MarketplaceAgreementsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.datadog.v2020_02_01_preview.MarketplaceAgreements list" })
        @GET("subscriptions/{subscriptionId}/providers/Microsoft.Datadog/agreements")
        Observable<Response<ResponseBody>> list(@Path("subscriptionId") String subscriptionId, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.datadog.v2020_02_01_preview.MarketplaceAgreements create" })
        @PUT("subscriptions/{subscriptionId}/providers/Microsoft.Datadog/agreements/default")
        Observable<Response<ResponseBody>> create(@Path("subscriptionId") String subscriptionId, @Header("accept-language") String acceptLanguage, @Body DatadogAgreementResourceInner body, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.datadog.v2020_02_01_preview.MarketplaceAgreements listNext" })
        @GET
        Observable<Response<ResponseBody>> listNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * List Datadog marketplace agreements in the subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ResourceProviderDefaultErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;DatadogAgreementResourceInner&gt; object if successful.
     */
    public PagedList<DatadogAgreementResourceInner> list() {
        ServiceResponse<Page<DatadogAgreementResourceInner>> response = listSinglePageAsync().toBlocking().single();
        return new PagedList<DatadogAgreementResourceInner>(response.body()) {
            @Override
            public Page<DatadogAgreementResourceInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * List Datadog marketplace agreements in the subscription.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<DatadogAgreementResourceInner>> listAsync(final ListOperationCallback<DatadogAgreementResourceInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSinglePageAsync(),
            new Func1<String, Observable<ServiceResponse<Page<DatadogAgreementResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DatadogAgreementResourceInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List Datadog marketplace agreements in the subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;DatadogAgreementResourceInner&gt; object
     */
    public Observable<Page<DatadogAgreementResourceInner>> listAsync() {
        return listWithServiceResponseAsync()
            .map(new Func1<ServiceResponse<Page<DatadogAgreementResourceInner>>, Page<DatadogAgreementResourceInner>>() {
                @Override
                public Page<DatadogAgreementResourceInner> call(ServiceResponse<Page<DatadogAgreementResourceInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List Datadog marketplace agreements in the subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;DatadogAgreementResourceInner&gt; object
     */
    public Observable<ServiceResponse<Page<DatadogAgreementResourceInner>>> listWithServiceResponseAsync() {
        return listSinglePageAsync()
            .concatMap(new Func1<ServiceResponse<Page<DatadogAgreementResourceInner>>, Observable<ServiceResponse<Page<DatadogAgreementResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DatadogAgreementResourceInner>>> call(ServiceResponse<Page<DatadogAgreementResourceInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List Datadog marketplace agreements in the subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;DatadogAgreementResourceInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<DatadogAgreementResourceInner>>> listSinglePageAsync() {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        return service.list(this.client.subscriptionId(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<DatadogAgreementResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DatadogAgreementResourceInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<DatadogAgreementResourceInner>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<DatadogAgreementResourceInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<DatadogAgreementResourceInner>> listDelegate(Response<ResponseBody> response) throws ResourceProviderDefaultErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<DatadogAgreementResourceInner>, ResourceProviderDefaultErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<DatadogAgreementResourceInner>>() { }.getType())
                .registerError(ResourceProviderDefaultErrorResponseException.class)
                .build(response);
    }

    /**
     * Create Datadog marketplace agreement in the subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ResourceProviderDefaultErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the DatadogAgreementResourceInner object if successful.
     */
    public DatadogAgreementResourceInner create() {
        return createWithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     * Create Datadog marketplace agreement in the subscription.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<DatadogAgreementResourceInner> createAsync(final ServiceCallback<DatadogAgreementResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(createWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Create Datadog marketplace agreement in the subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DatadogAgreementResourceInner object
     */
    public Observable<DatadogAgreementResourceInner> createAsync() {
        return createWithServiceResponseAsync().map(new Func1<ServiceResponse<DatadogAgreementResourceInner>, DatadogAgreementResourceInner>() {
            @Override
            public DatadogAgreementResourceInner call(ServiceResponse<DatadogAgreementResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create Datadog marketplace agreement in the subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DatadogAgreementResourceInner object
     */
    public Observable<ServiceResponse<DatadogAgreementResourceInner>> createWithServiceResponseAsync() {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        final DatadogAgreementProperties properties = null;
        DatadogAgreementResourceInner body = new DatadogAgreementResourceInner();
        body.withProperties(null);
        return service.create(this.client.subscriptionId(), this.client.acceptLanguage(), body, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<DatadogAgreementResourceInner>>>() {
                @Override
                public Observable<ServiceResponse<DatadogAgreementResourceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<DatadogAgreementResourceInner> clientResponse = createDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Create Datadog marketplace agreement in the subscription.
     *
     * @param properties Represents the properties of the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ResourceProviderDefaultErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the DatadogAgreementResourceInner object if successful.
     */
    public DatadogAgreementResourceInner create(DatadogAgreementProperties properties) {
        return createWithServiceResponseAsync(properties).toBlocking().single().body();
    }

    /**
     * Create Datadog marketplace agreement in the subscription.
     *
     * @param properties Represents the properties of the resource.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<DatadogAgreementResourceInner> createAsync(DatadogAgreementProperties properties, final ServiceCallback<DatadogAgreementResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(createWithServiceResponseAsync(properties), serviceCallback);
    }

    /**
     * Create Datadog marketplace agreement in the subscription.
     *
     * @param properties Represents the properties of the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DatadogAgreementResourceInner object
     */
    public Observable<DatadogAgreementResourceInner> createAsync(DatadogAgreementProperties properties) {
        return createWithServiceResponseAsync(properties).map(new Func1<ServiceResponse<DatadogAgreementResourceInner>, DatadogAgreementResourceInner>() {
            @Override
            public DatadogAgreementResourceInner call(ServiceResponse<DatadogAgreementResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create Datadog marketplace agreement in the subscription.
     *
     * @param properties Represents the properties of the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DatadogAgreementResourceInner object
     */
    public Observable<ServiceResponse<DatadogAgreementResourceInner>> createWithServiceResponseAsync(DatadogAgreementProperties properties) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        Validator.validate(properties);
        DatadogAgreementResourceInner body = null;
        if (properties != null) {
            body = new DatadogAgreementResourceInner();
            body.withProperties(properties);
        }
        return service.create(this.client.subscriptionId(), this.client.acceptLanguage(), body, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<DatadogAgreementResourceInner>>>() {
                @Override
                public Observable<ServiceResponse<DatadogAgreementResourceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<DatadogAgreementResourceInner> clientResponse = createDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<DatadogAgreementResourceInner> createDelegate(Response<ResponseBody> response) throws ResourceProviderDefaultErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<DatadogAgreementResourceInner, ResourceProviderDefaultErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<DatadogAgreementResourceInner>() { }.getType())
                .registerError(ResourceProviderDefaultErrorResponseException.class)
                .build(response);
    }

    /**
     * List Datadog marketplace agreements in the subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ResourceProviderDefaultErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;DatadogAgreementResourceInner&gt; object if successful.
     */
    public PagedList<DatadogAgreementResourceInner> listNext(final String nextPageLink) {
        ServiceResponse<Page<DatadogAgreementResourceInner>> response = listNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<DatadogAgreementResourceInner>(response.body()) {
            @Override
            public Page<DatadogAgreementResourceInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * List Datadog marketplace agreements in the subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<DatadogAgreementResourceInner>> listNextAsync(final String nextPageLink, final ServiceFuture<List<DatadogAgreementResourceInner>> serviceFuture, final ListOperationCallback<DatadogAgreementResourceInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<DatadogAgreementResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DatadogAgreementResourceInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List Datadog marketplace agreements in the subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;DatadogAgreementResourceInner&gt; object
     */
    public Observable<Page<DatadogAgreementResourceInner>> listNextAsync(final String nextPageLink) {
        return listNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<DatadogAgreementResourceInner>>, Page<DatadogAgreementResourceInner>>() {
                @Override
                public Page<DatadogAgreementResourceInner> call(ServiceResponse<Page<DatadogAgreementResourceInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List Datadog marketplace agreements in the subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;DatadogAgreementResourceInner&gt; object
     */
    public Observable<ServiceResponse<Page<DatadogAgreementResourceInner>>> listNextWithServiceResponseAsync(final String nextPageLink) {
        return listNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<DatadogAgreementResourceInner>>, Observable<ServiceResponse<Page<DatadogAgreementResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DatadogAgreementResourceInner>>> call(ServiceResponse<Page<DatadogAgreementResourceInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List Datadog marketplace agreements in the subscription.
     *
    ServiceResponse<PageImpl<DatadogAgreementResourceInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;DatadogAgreementResourceInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<DatadogAgreementResourceInner>>> listNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<DatadogAgreementResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DatadogAgreementResourceInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<DatadogAgreementResourceInner>> result = listNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<DatadogAgreementResourceInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<DatadogAgreementResourceInner>> listNextDelegate(Response<ResponseBody> response) throws ResourceProviderDefaultErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<DatadogAgreementResourceInner>, ResourceProviderDefaultErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<DatadogAgreementResourceInner>>() { }.getType())
                .registerError(ResourceProviderDefaultErrorResponseException.class)
                .build(response);
    }

}
