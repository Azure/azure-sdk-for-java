// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datadog.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.datadog.MicrosoftDatadogManager;
import com.azure.resourcemanager.datadog.models.DatadogSingleSignOnResource;
import com.azure.resourcemanager.datadog.models.SingleSignOnStates;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class SingleSignOnConfigurationsGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Deleted\",\"singleSignOnState\":\"Enable\",\"enterpriseAppId\":\"kqze\",\"singleSignOnUrl\":\"kdltfzxmhhvhg\"},\"id\":\"eodkwobda\",\"name\":\"xtibqdxbxwakbog\",\"type\":\"xndlkzgxhu\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        MicrosoftDatadogManager manager = MicrosoftDatadogManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        DatadogSingleSignOnResource response = manager.singleSignOnConfigurations()
            .getWithResponse("k", "wtppjflcxogaoko", "z", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals(SingleSignOnStates.ENABLE, response.properties().singleSignOnState());
        Assertions.assertEquals("kqze", response.properties().enterpriseAppId());
    }
}
