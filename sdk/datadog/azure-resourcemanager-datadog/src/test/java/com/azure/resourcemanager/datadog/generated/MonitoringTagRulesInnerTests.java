// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datadog.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datadog.fluent.models.MonitoringTagRulesInner;
import com.azure.resourcemanager.datadog.models.LogRules;
import com.azure.resourcemanager.datadog.models.MetricRules;
import com.azure.resourcemanager.datadog.models.MonitoringTagRulesProperties;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class MonitoringTagRulesInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        MonitoringTagRulesInner model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"provisioningState\":\"Canceled\",\"logRules\":{\"sendAadLogs\":false,\"sendSubscriptionLogs\":false,\"sendResourceLogs\":false,\"filteringTags\":[]},\"metricRules\":{\"filteringTags\":[]}},\"id\":\"vfaxkffeiith\",\"name\":\"vmezy\",\"type\":\"shxmzsbbzoggigrx\"}")
                .toObject(MonitoringTagRulesInner.class);
        Assertions.assertEquals(false, model.properties().logRules().sendAadLogs());
        Assertions.assertEquals(false, model.properties().logRules().sendSubscriptionLogs());
        Assertions.assertEquals(false, model.properties().logRules().sendResourceLogs());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        MonitoringTagRulesInner model =
            new MonitoringTagRulesInner()
                .withProperties(
                    new MonitoringTagRulesProperties()
                        .withLogRules(
                            new LogRules()
                                .withSendAadLogs(false)
                                .withSendSubscriptionLogs(false)
                                .withSendResourceLogs(false)
                                .withFilteringTags(Arrays.asList()))
                        .withMetricRules(new MetricRules().withFilteringTags(Arrays.asList())));
        model = BinaryData.fromObject(model).toObject(MonitoringTagRulesInner.class);
        Assertions.assertEquals(false, model.properties().logRules().sendAadLogs());
        Assertions.assertEquals(false, model.properties().logRules().sendSubscriptionLogs());
        Assertions.assertEquals(false, model.properties().logRules().sendResourceLogs());
    }
}
