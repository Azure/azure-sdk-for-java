// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datadog.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.datadog.MicrosoftDatadogManager;
import com.azure.resourcemanager.datadog.models.DatadogAgreementResource;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class MarketplaceAgreementsListMockTests {
    @Test
    public void testList() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"value\":[{\"properties\":{\"publisher\":\"ankxmyskpbhenb\",\"product\":\"cxy\",\"plan\":\"y\",\"licenseTextLink\":\"rsyn\",\"privacyPolicyLink\":\"idybyxczf\",\"retrieveDatetime\":\"2021-02-02T08:06:37Z\",\"signature\":\"axdbabph\",\"accepted\":true},\"id\":\"lfktsths\",\"name\":\"cocmnyyaztt\",\"type\":\"twwrqp\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        MicrosoftDatadogManager manager =
            MicrosoftDatadogManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<DatadogAgreementResource> response =
            manager.marketplaceAgreements().list(com.azure.core.util.Context.NONE);

        Assertions.assertEquals("ankxmyskpbhenb", response.iterator().next().properties().publisher());
        Assertions.assertEquals("cxy", response.iterator().next().properties().product());
        Assertions.assertEquals("y", response.iterator().next().properties().plan());
        Assertions.assertEquals("rsyn", response.iterator().next().properties().licenseTextLink());
        Assertions.assertEquals("idybyxczf", response.iterator().next().properties().privacyPolicyLink());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-02-02T08:06:37Z"),
                response.iterator().next().properties().retrieveDatetime());
        Assertions.assertEquals("axdbabph", response.iterator().next().properties().signature());
        Assertions.assertEquals(true, response.iterator().next().properties().accepted());
    }
}
