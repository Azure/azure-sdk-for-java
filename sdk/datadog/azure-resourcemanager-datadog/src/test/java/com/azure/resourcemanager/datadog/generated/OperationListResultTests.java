// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datadog.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datadog.fluent.models.OperationResultInner;
import com.azure.resourcemanager.datadog.models.OperationDisplay;
import com.azure.resourcemanager.datadog.models.OperationListResult;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class OperationListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        OperationListResult model =
            BinaryData
                .fromString(
                    "{\"value\":[{\"name\":\"bnmo\",\"display\":{\"provider\":\"ysh\",\"resource\":\"zafb\",\"operation\":\"j\",\"description\":\"btoqcjmkljavbqid\"},\"isDataAction\":false},{\"name\":\"zyulp\",\"display\":{\"provider\":\"jkrlkhbzhfepg\",\"resource\":\"qex\",\"operation\":\"ocxscpaierhhbcs\",\"description\":\"ummajtjaod\"},\"isDataAction\":true}],\"nextLink\":\"bdxkqpxokaj\"}")
                .toObject(OperationListResult.class);
        Assertions.assertEquals("bnmo", model.value().get(0).name());
        Assertions.assertEquals("ysh", model.value().get(0).display().provider());
        Assertions.assertEquals("zafb", model.value().get(0).display().resource());
        Assertions.assertEquals("j", model.value().get(0).display().operation());
        Assertions.assertEquals("btoqcjmkljavbqid", model.value().get(0).display().description());
        Assertions.assertEquals(false, model.value().get(0).isDataAction());
        Assertions.assertEquals("bdxkqpxokaj", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        OperationListResult model =
            new OperationListResult()
                .withValue(
                    Arrays
                        .asList(
                            new OperationResultInner()
                                .withName("bnmo")
                                .withDisplay(
                                    new OperationDisplay()
                                        .withProvider("ysh")
                                        .withResource("zafb")
                                        .withOperation("j")
                                        .withDescription("btoqcjmkljavbqid"))
                                .withIsDataAction(false),
                            new OperationResultInner()
                                .withName("zyulp")
                                .withDisplay(
                                    new OperationDisplay()
                                        .withProvider("jkrlkhbzhfepg")
                                        .withResource("qex")
                                        .withOperation("ocxscpaierhhbcs")
                                        .withDescription("ummajtjaod"))
                                .withIsDataAction(true)))
                .withNextLink("bdxkqpxokaj");
        model = BinaryData.fromObject(model).toObject(OperationListResult.class);
        Assertions.assertEquals("bnmo", model.value().get(0).name());
        Assertions.assertEquals("ysh", model.value().get(0).display().provider());
        Assertions.assertEquals("zafb", model.value().get(0).display().resource());
        Assertions.assertEquals("j", model.value().get(0).display().operation());
        Assertions.assertEquals("btoqcjmkljavbqid", model.value().get(0).display().description());
        Assertions.assertEquals(false, model.value().get(0).isDataAction());
        Assertions.assertEquals("bdxkqpxokaj", model.nextLink());
    }
}
