// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datadog.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datadog.models.DatadogMonitorResourceUpdateParameters;
import com.azure.resourcemanager.datadog.models.MonitorUpdateProperties;
import com.azure.resourcemanager.datadog.models.MonitoringStatus;
import com.azure.resourcemanager.datadog.models.ResourceSku;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DatadogMonitorResourceUpdateParametersTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DatadogMonitorResourceUpdateParameters model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"monitoringStatus\":\"Disabled\"},\"tags\":{\"vxodpu\":\"fcp\",\"axbezyiuo\":\"zmyzydagf\",\"dxwzywqsmbsurexi\":\"ktwh\",\"yocf\":\"o\"},\"sku\":{\"name\":\"ksymd\"}}")
                .toObject(DatadogMonitorResourceUpdateParameters.class);
        Assertions.assertEquals(MonitoringStatus.DISABLED, model.properties().monitoringStatus());
        Assertions.assertEquals("fcp", model.tags().get("vxodpu"));
        Assertions.assertEquals("ksymd", model.sku().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DatadogMonitorResourceUpdateParameters model =
            new DatadogMonitorResourceUpdateParameters()
                .withProperties(new MonitorUpdateProperties().withMonitoringStatus(MonitoringStatus.DISABLED))
                .withTags(mapOf("vxodpu", "fcp", "axbezyiuo", "zmyzydagf", "dxwzywqsmbsurexi", "ktwh", "yocf", "o"))
                .withSku(new ResourceSku().withName("ksymd"));
        model = BinaryData.fromObject(model).toObject(DatadogMonitorResourceUpdateParameters.class);
        Assertions.assertEquals(MonitoringStatus.DISABLED, model.properties().monitoringStatus());
        Assertions.assertEquals("fcp", model.tags().get("vxodpu"));
        Assertions.assertEquals("ksymd", model.sku().name());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
