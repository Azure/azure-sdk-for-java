// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datadog.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The DatadogHostMetadata model.
 */
@Fluent
public final class DatadogHostMetadata implements JsonSerializable<DatadogHostMetadata> {
    /*
     * The agent version.
     */
    private String agentVersion;

    /*
     * The installMethod property.
     */
    private DatadogInstallMethod installMethod;

    /*
     * The logsAgent property.
     */
    private DatadogLogsAgent logsAgent;

    /**
     * Creates an instance of DatadogHostMetadata class.
     */
    public DatadogHostMetadata() {
    }

    /**
     * Get the agentVersion property: The agent version.
     * 
     * @return the agentVersion value.
     */
    public String agentVersion() {
        return this.agentVersion;
    }

    /**
     * Set the agentVersion property: The agent version.
     * 
     * @param agentVersion the agentVersion value to set.
     * @return the DatadogHostMetadata object itself.
     */
    public DatadogHostMetadata withAgentVersion(String agentVersion) {
        this.agentVersion = agentVersion;
        return this;
    }

    /**
     * Get the installMethod property: The installMethod property.
     * 
     * @return the installMethod value.
     */
    public DatadogInstallMethod installMethod() {
        return this.installMethod;
    }

    /**
     * Set the installMethod property: The installMethod property.
     * 
     * @param installMethod the installMethod value to set.
     * @return the DatadogHostMetadata object itself.
     */
    public DatadogHostMetadata withInstallMethod(DatadogInstallMethod installMethod) {
        this.installMethod = installMethod;
        return this;
    }

    /**
     * Get the logsAgent property: The logsAgent property.
     * 
     * @return the logsAgent value.
     */
    public DatadogLogsAgent logsAgent() {
        return this.logsAgent;
    }

    /**
     * Set the logsAgent property: The logsAgent property.
     * 
     * @param logsAgent the logsAgent value to set.
     * @return the DatadogHostMetadata object itself.
     */
    public DatadogHostMetadata withLogsAgent(DatadogLogsAgent logsAgent) {
        this.logsAgent = logsAgent;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (installMethod() != null) {
            installMethod().validate();
        }
        if (logsAgent() != null) {
            logsAgent().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("agentVersion", this.agentVersion);
        jsonWriter.writeJsonField("installMethod", this.installMethod);
        jsonWriter.writeJsonField("logsAgent", this.logsAgent);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DatadogHostMetadata from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DatadogHostMetadata if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the DatadogHostMetadata.
     */
    public static DatadogHostMetadata fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DatadogHostMetadata deserializedDatadogHostMetadata = new DatadogHostMetadata();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("agentVersion".equals(fieldName)) {
                    deserializedDatadogHostMetadata.agentVersion = reader.getString();
                } else if ("installMethod".equals(fieldName)) {
                    deserializedDatadogHostMetadata.installMethod = DatadogInstallMethod.fromJson(reader);
                } else if ("logsAgent".equals(fieldName)) {
                    deserializedDatadogHostMetadata.logsAgent = DatadogLogsAgent.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDatadogHostMetadata;
        });
    }
}
