// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datadog.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The DatadogApiKey model.
 */
@Fluent
public final class DatadogApiKeyInner implements JsonSerializable<DatadogApiKeyInner> {
    /*
     * The user that created the API key.
     */
    private String createdBy;

    /*
     * The name of the API key.
     */
    private String name;

    /*
     * The value of the API key.
     */
    private String key;

    /*
     * The time of creation of the API key.
     */
    private String created;

    /**
     * Creates an instance of DatadogApiKeyInner class.
     */
    public DatadogApiKeyInner() {
    }

    /**
     * Get the createdBy property: The user that created the API key.
     * 
     * @return the createdBy value.
     */
    public String createdBy() {
        return this.createdBy;
    }

    /**
     * Set the createdBy property: The user that created the API key.
     * 
     * @param createdBy the createdBy value to set.
     * @return the DatadogApiKeyInner object itself.
     */
    public DatadogApiKeyInner withCreatedBy(String createdBy) {
        this.createdBy = createdBy;
        return this;
    }

    /**
     * Get the name property: The name of the API key.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: The name of the API key.
     * 
     * @param name the name value to set.
     * @return the DatadogApiKeyInner object itself.
     */
    public DatadogApiKeyInner withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the key property: The value of the API key.
     * 
     * @return the key value.
     */
    public String key() {
        return this.key;
    }

    /**
     * Set the key property: The value of the API key.
     * 
     * @param key the key value to set.
     * @return the DatadogApiKeyInner object itself.
     */
    public DatadogApiKeyInner withKey(String key) {
        this.key = key;
        return this;
    }

    /**
     * Get the created property: The time of creation of the API key.
     * 
     * @return the created value.
     */
    public String created() {
        return this.created;
    }

    /**
     * Set the created property: The time of creation of the API key.
     * 
     * @param created the created value to set.
     * @return the DatadogApiKeyInner object itself.
     */
    public DatadogApiKeyInner withCreated(String created) {
        this.created = created;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (key() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property key in model DatadogApiKeyInner"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(DatadogApiKeyInner.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("key", this.key);
        jsonWriter.writeStringField("createdBy", this.createdBy);
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("created", this.created);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DatadogApiKeyInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DatadogApiKeyInner if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DatadogApiKeyInner.
     */
    public static DatadogApiKeyInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DatadogApiKeyInner deserializedDatadogApiKeyInner = new DatadogApiKeyInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("key".equals(fieldName)) {
                    deserializedDatadogApiKeyInner.key = reader.getString();
                } else if ("createdBy".equals(fieldName)) {
                    deserializedDatadogApiKeyInner.createdBy = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedDatadogApiKeyInner.name = reader.getString();
                } else if ("created".equals(fieldName)) {
                    deserializedDatadogApiKeyInner.created = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDatadogApiKeyInner;
        });
    }
}
