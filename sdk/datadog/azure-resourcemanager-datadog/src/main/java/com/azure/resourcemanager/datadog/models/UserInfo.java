// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datadog.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Includes name, email and optionally, phone number. User Information can't be null.
 */
@Fluent
public final class UserInfo implements JsonSerializable<UserInfo> {
    /*
     * Name of the user
     */
    private String name;

    /*
     * Email of the user used by Datadog for contacting them if needed
     */
    private String emailAddress;

    /*
     * Phone number of the user used by Datadog for contacting them if needed
     */
    private String phoneNumber;

    /**
     * Creates an instance of UserInfo class.
     */
    public UserInfo() {
    }

    /**
     * Get the name property: Name of the user.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: Name of the user.
     * 
     * @param name the name value to set.
     * @return the UserInfo object itself.
     */
    public UserInfo withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the emailAddress property: Email of the user used by Datadog for contacting them if needed.
     * 
     * @return the emailAddress value.
     */
    public String emailAddress() {
        return this.emailAddress;
    }

    /**
     * Set the emailAddress property: Email of the user used by Datadog for contacting them if needed.
     * 
     * @param emailAddress the emailAddress value to set.
     * @return the UserInfo object itself.
     */
    public UserInfo withEmailAddress(String emailAddress) {
        this.emailAddress = emailAddress;
        return this;
    }

    /**
     * Get the phoneNumber property: Phone number of the user used by Datadog for contacting them if needed.
     * 
     * @return the phoneNumber value.
     */
    public String phoneNumber() {
        return this.phoneNumber;
    }

    /**
     * Set the phoneNumber property: Phone number of the user used by Datadog for contacting them if needed.
     * 
     * @param phoneNumber the phoneNumber value to set.
     * @return the UserInfo object itself.
     */
    public UserInfo withPhoneNumber(String phoneNumber) {
        this.phoneNumber = phoneNumber;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("emailAddress", this.emailAddress);
        jsonWriter.writeStringField("phoneNumber", this.phoneNumber);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of UserInfo from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of UserInfo if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the UserInfo.
     */
    public static UserInfo fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            UserInfo deserializedUserInfo = new UserInfo();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedUserInfo.name = reader.getString();
                } else if ("emailAddress".equals(fieldName)) {
                    deserializedUserInfo.emailAddress = reader.getString();
                } else if ("phoneNumber".equals(fieldName)) {
                    deserializedUserInfo.phoneNumber = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedUserInfo;
        });
    }
}
