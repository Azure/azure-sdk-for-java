/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.features.v2015_12_01.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.features.v2015_12_01.Features;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.features.v2015_12_01.FeatureResult;

class FeaturesImpl extends WrapperImpl<FeaturesInner> implements Features {
    private final FeaturesManager manager;

    FeaturesImpl(FeaturesManager manager) {
        super(manager.inner().features());
        this.manager = manager;
    }

    public FeaturesManager manager() {
        return this.manager;
    }

    private FeatureResultImpl wrapModel(FeatureResultInner inner) {
        return  new FeatureResultImpl(inner, manager());
    }

    @Override
    public Observable<FeatureResult> registerAsync(String resourceProviderNamespace, String featureName) {
        FeaturesInner client = this.inner();
        return client.registerAsync(resourceProviderNamespace, featureName)
        .map(new Func1<FeatureResultInner, FeatureResult>() {
            @Override
            public FeatureResult call(FeatureResultInner inner) {
                return new FeatureResultImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<FeatureResult> unregisterAsync(String resourceProviderNamespace, String featureName) {
        FeaturesInner client = this.inner();
        return client.unregisterAsync(resourceProviderNamespace, featureName)
        .map(new Func1<FeatureResultInner, FeatureResult>() {
            @Override
            public FeatureResult call(FeatureResultInner inner) {
                return new FeatureResultImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<FeatureResult> listAsync() {
        FeaturesInner client = this.inner();
        return client.listAsync()
        .flatMapIterable(new Func1<Page<FeatureResultInner>, Iterable<FeatureResultInner>>() {
            @Override
            public Iterable<FeatureResultInner> call(Page<FeatureResultInner> page) {
                return page.items();
            }
        })
        .map(new Func1<FeatureResultInner, FeatureResult>() {
            @Override
            public FeatureResult call(FeatureResultInner inner) {
                return new FeatureResultImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<FeatureResult> list1Async(final String resourceProviderNamespace) {
        FeaturesInner client = this.inner();
        return client.list1Async(resourceProviderNamespace)
        .flatMapIterable(new Func1<Page<FeatureResultInner>, Iterable<FeatureResultInner>>() {
            @Override
            public Iterable<FeatureResultInner> call(Page<FeatureResultInner> page) {
                return page.items();
            }
        })
        .map(new Func1<FeatureResultInner, FeatureResult>() {
            @Override
            public FeatureResult call(FeatureResultInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public Observable<FeatureResult> getAsync(String resourceProviderNamespace, String featureName) {
        FeaturesInner client = this.inner();
        return client.getAsync(resourceProviderNamespace, featureName)
        .flatMap(new Func1<FeatureResultInner, Observable<FeatureResult>>() {
            @Override
            public Observable<FeatureResult> call(FeatureResultInner inner) {
                if (inner == null) {
                    return Observable.empty();
                } else {
                    return Observable.just((FeatureResult)wrapModel(inner));
                }
            }
       });
    }

}
