// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devhub.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.devhub.models.Acr;
import com.azure.resourcemanager.devhub.models.DeploymentProperties;
import com.azure.resourcemanager.devhub.models.GitHubWorkflowProfileOidcCredentials;
import com.azure.resourcemanager.devhub.models.ManifestType;
import com.azure.resourcemanager.devhub.models.PullRequestStatus;
import com.azure.resourcemanager.devhub.models.WorkflowRun;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Workflow properties. */
@Fluent
public final class WorkflowProperties {
    /*
     * Profile of a github workflow.
     */
    @JsonProperty(value = "githubWorkflowProfile")
    private GitHubWorkflowProfile innerGithubWorkflowProfile;

    /**
     * Get the innerGithubWorkflowProfile property: Profile of a github workflow.
     *
     * @return the innerGithubWorkflowProfile value.
     */
    private GitHubWorkflowProfile innerGithubWorkflowProfile() {
        return this.innerGithubWorkflowProfile;
    }

    /**
     * Get the repositoryOwner property: The owner of the repository the workflow is associated with.
     *
     * <p>Repository Owner.
     *
     * @return the repositoryOwner value.
     */
    public String repositoryOwner() {
        return this.innerGithubWorkflowProfile() == null ? null : this.innerGithubWorkflowProfile().repositoryOwner();
    }

    /**
     * Set the repositoryOwner property: The owner of the repository the workflow is associated with.
     *
     * <p>Repository Owner.
     *
     * @param repositoryOwner the repositoryOwner value to set.
     * @return the WorkflowProperties object itself.
     */
    public WorkflowProperties withRepositoryOwner(String repositoryOwner) {
        if (this.innerGithubWorkflowProfile() == null) {
            this.innerGithubWorkflowProfile = new GitHubWorkflowProfile();
        }
        this.innerGithubWorkflowProfile().withRepositoryOwner(repositoryOwner);
        return this;
    }

    /**
     * Get the repositoryName property: The name of the repository the workflow is associated with.
     *
     * <p>Repository Name.
     *
     * @return the repositoryName value.
     */
    public String repositoryName() {
        return this.innerGithubWorkflowProfile() == null ? null : this.innerGithubWorkflowProfile().repositoryName();
    }

    /**
     * Set the repositoryName property: The name of the repository the workflow is associated with.
     *
     * <p>Repository Name.
     *
     * @param repositoryName the repositoryName value to set.
     * @return the WorkflowProperties object itself.
     */
    public WorkflowProperties withRepositoryName(String repositoryName) {
        if (this.innerGithubWorkflowProfile() == null) {
            this.innerGithubWorkflowProfile = new GitHubWorkflowProfile();
        }
        this.innerGithubWorkflowProfile().withRepositoryName(repositoryName);
        return this;
    }

    /**
     * Get the branchName property: The name of the branch the workflow is associated with.
     *
     * <p>Repository Branch Name.
     *
     * @return the branchName value.
     */
    public String branchName() {
        return this.innerGithubWorkflowProfile() == null ? null : this.innerGithubWorkflowProfile().branchName();
    }

    /**
     * Set the branchName property: The name of the branch the workflow is associated with.
     *
     * <p>Repository Branch Name.
     *
     * @param branchName the branchName value to set.
     * @return the WorkflowProperties object itself.
     */
    public WorkflowProperties withBranchName(String branchName) {
        if (this.innerGithubWorkflowProfile() == null) {
            this.innerGithubWorkflowProfile = new GitHubWorkflowProfile();
        }
        this.innerGithubWorkflowProfile().withBranchName(branchName);
        return this;
    }

    /**
     * Get the dockerfile property: Path to Dockerfile within the repository.
     *
     * <p>Path to the Dockerfile within the repository.
     *
     * @return the dockerfile value.
     */
    public String dockerfile() {
        return this.innerGithubWorkflowProfile() == null ? null : this.innerGithubWorkflowProfile().dockerfile();
    }

    /**
     * Set the dockerfile property: Path to Dockerfile within the repository.
     *
     * <p>Path to the Dockerfile within the repository.
     *
     * @param dockerfile the dockerfile value to set.
     * @return the WorkflowProperties object itself.
     */
    public WorkflowProperties withDockerfile(String dockerfile) {
        if (this.innerGithubWorkflowProfile() == null) {
            this.innerGithubWorkflowProfile = new GitHubWorkflowProfile();
        }
        this.innerGithubWorkflowProfile().withDockerfile(dockerfile);
        return this;
    }

    /**
     * Get the dockerBuildContext property: Path to Dockerfile Build Context within the repository.
     *
     * @return the dockerBuildContext value.
     */
    public String dockerBuildContext() {
        return this.innerGithubWorkflowProfile() == null
            ? null
            : this.innerGithubWorkflowProfile().dockerBuildContext();
    }

    /**
     * Set the dockerBuildContext property: Path to Dockerfile Build Context within the repository.
     *
     * @param dockerBuildContext the dockerBuildContext value to set.
     * @return the WorkflowProperties object itself.
     */
    public WorkflowProperties withDockerBuildContext(String dockerBuildContext) {
        if (this.innerGithubWorkflowProfile() == null) {
            this.innerGithubWorkflowProfile = new GitHubWorkflowProfile();
        }
        this.innerGithubWorkflowProfile().withDockerBuildContext(dockerBuildContext);
        return this;
    }

    /**
     * Get the deploymentProperties property: The deploymentProperties property.
     *
     * @return the deploymentProperties value.
     */
    public DeploymentProperties deploymentProperties() {
        return this.innerGithubWorkflowProfile() == null
            ? null
            : this.innerGithubWorkflowProfile().deploymentProperties();
    }

    /**
     * Set the deploymentProperties property: The deploymentProperties property.
     *
     * @param deploymentProperties the deploymentProperties value to set.
     * @return the WorkflowProperties object itself.
     */
    public WorkflowProperties withDeploymentProperties(DeploymentProperties deploymentProperties) {
        if (this.innerGithubWorkflowProfile() == null) {
            this.innerGithubWorkflowProfile = new GitHubWorkflowProfile();
        }
        this.innerGithubWorkflowProfile().withDeploymentProperties(deploymentProperties);
        return this;
    }

    /**
     * Get the namespace property: The Kubernetes namespace the application is deployed to
     *
     * <p>Kubernetes namespace the application is deployed to.
     *
     * @return the namespace value.
     */
    public String namespace() {
        return this.innerGithubWorkflowProfile() == null ? null : this.innerGithubWorkflowProfile().namespace();
    }

    /**
     * Set the namespace property: The Kubernetes namespace the application is deployed to
     *
     * <p>Kubernetes namespace the application is deployed to.
     *
     * @param namespace the namespace value to set.
     * @return the WorkflowProperties object itself.
     */
    public WorkflowProperties withNamespace(String namespace) {
        if (this.innerGithubWorkflowProfile() == null) {
            this.innerGithubWorkflowProfile = new GitHubWorkflowProfile();
        }
        this.innerGithubWorkflowProfile().withNamespace(namespace);
        return this;
    }

    /**
     * Get the acr property: Information on the azure container registry.
     *
     * @return the acr value.
     */
    public Acr acr() {
        return this.innerGithubWorkflowProfile() == null ? null : this.innerGithubWorkflowProfile().acr();
    }

    /**
     * Set the acr property: Information on the azure container registry.
     *
     * @param acr the acr value to set.
     * @return the WorkflowProperties object itself.
     */
    public WorkflowProperties withAcr(Acr acr) {
        if (this.innerGithubWorkflowProfile() == null) {
            this.innerGithubWorkflowProfile = new GitHubWorkflowProfile();
        }
        this.innerGithubWorkflowProfile().withAcr(acr);
        return this;
    }

    /**
     * Get the oidcCredentials property: The fields needed for OIDC with GitHub.
     *
     * @return the oidcCredentials value.
     */
    public GitHubWorkflowProfileOidcCredentials oidcCredentials() {
        return this.innerGithubWorkflowProfile() == null ? null : this.innerGithubWorkflowProfile().oidcCredentials();
    }

    /**
     * Set the oidcCredentials property: The fields needed for OIDC with GitHub.
     *
     * @param oidcCredentials the oidcCredentials value to set.
     * @return the WorkflowProperties object itself.
     */
    public WorkflowProperties withOidcCredentials(GitHubWorkflowProfileOidcCredentials oidcCredentials) {
        if (this.innerGithubWorkflowProfile() == null) {
            this.innerGithubWorkflowProfile = new GitHubWorkflowProfile();
        }
        this.innerGithubWorkflowProfile().withOidcCredentials(oidcCredentials);
        return this;
    }

    /**
     * Get the aksResourceId property: The Azure Kubernetes Managed Cluster resource.
     *
     * <p>The Azure Kubernetes Cluster Resource the application will be deployed to.
     *
     * @return the aksResourceId value.
     */
    public String aksResourceId() {
        return this.innerGithubWorkflowProfile() == null ? null : this.innerGithubWorkflowProfile().aksResourceId();
    }

    /**
     * Set the aksResourceId property: The Azure Kubernetes Managed Cluster resource.
     *
     * <p>The Azure Kubernetes Cluster Resource the application will be deployed to.
     *
     * @param aksResourceId the aksResourceId value to set.
     * @return the WorkflowProperties object itself.
     */
    public WorkflowProperties withAksResourceId(String aksResourceId) {
        if (this.innerGithubWorkflowProfile() == null) {
            this.innerGithubWorkflowProfile = new GitHubWorkflowProfile();
        }
        this.innerGithubWorkflowProfile().withAksResourceId(aksResourceId);
        return this;
    }

    /**
     * Get the prUrl property: The URL to the Pull Request submitted against the users repository.
     *
     * @return the prUrl value.
     */
    public String prUrl() {
        return this.innerGithubWorkflowProfile() == null ? null : this.innerGithubWorkflowProfile().prUrl();
    }

    /**
     * Get the pullNumber property: The number associated with the submitted pull request.
     *
     * @return the pullNumber value.
     */
    public Integer pullNumber() {
        return this.innerGithubWorkflowProfile() == null ? null : this.innerGithubWorkflowProfile().pullNumber();
    }

    /**
     * Get the prStatus property: The status of the Pull Request submitted against the users repository.
     *
     * @return the prStatus value.
     */
    public PullRequestStatus prStatus() {
        return this.innerGithubWorkflowProfile() == null ? null : this.innerGithubWorkflowProfile().prStatus();
    }

    /**
     * Get the lastWorkflowRun property: The lastWorkflowRun property.
     *
     * @return the lastWorkflowRun value.
     */
    public WorkflowRun lastWorkflowRun() {
        return this.innerGithubWorkflowProfile() == null ? null : this.innerGithubWorkflowProfile().lastWorkflowRun();
    }

    /**
     * Set the lastWorkflowRun property: The lastWorkflowRun property.
     *
     * @param lastWorkflowRun the lastWorkflowRun value to set.
     * @return the WorkflowProperties object itself.
     */
    public WorkflowProperties withLastWorkflowRun(WorkflowRun lastWorkflowRun) {
        if (this.innerGithubWorkflowProfile() == null) {
            this.innerGithubWorkflowProfile = new GitHubWorkflowProfile();
        }
        this.innerGithubWorkflowProfile().withLastWorkflowRun(lastWorkflowRun);
        return this;
    }

    /**
     * Get the authStatus property: Determines the type of manifests within the repository.
     *
     * @return the authStatus value.
     */
    public ManifestType authStatus() {
        return this.innerGithubWorkflowProfile() == null ? null : this.innerGithubWorkflowProfile().authStatus();
    }

    /**
     * Set the authStatus property: Determines the type of manifests within the repository.
     *
     * @param authStatus the authStatus value to set.
     * @return the WorkflowProperties object itself.
     */
    public WorkflowProperties withAuthStatus(ManifestType authStatus) {
        if (this.innerGithubWorkflowProfile() == null) {
            this.innerGithubWorkflowProfile = new GitHubWorkflowProfile();
        }
        this.innerGithubWorkflowProfile().withAuthStatus(authStatus);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerGithubWorkflowProfile() != null) {
            innerGithubWorkflowProfile().validate();
        }
    }
}
