// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devhub.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * The DeploymentProperties model.
 */
@Fluent
public final class DeploymentProperties implements JsonSerializable<DeploymentProperties> {
    /*
     * Determines the type of manifests within the repository.
     */
    private ManifestType manifestType;

    /*
     * The kubeManifestLocations property.
     */
    private List<String> kubeManifestLocations;

    /*
     * Helm chart directory path in repository.
     */
    private String helmChartPath;

    /*
     * Helm Values.yaml file location in repository.
     */
    private String helmValues;

    /*
     * Manifest override values.
     */
    private Map<String, String> overrides;

    /**
     * Creates an instance of DeploymentProperties class.
     */
    public DeploymentProperties() {
    }

    /**
     * Get the manifestType property: Determines the type of manifests within the repository.
     * 
     * @return the manifestType value.
     */
    public ManifestType manifestType() {
        return this.manifestType;
    }

    /**
     * Set the manifestType property: Determines the type of manifests within the repository.
     * 
     * @param manifestType the manifestType value to set.
     * @return the DeploymentProperties object itself.
     */
    public DeploymentProperties withManifestType(ManifestType manifestType) {
        this.manifestType = manifestType;
        return this;
    }

    /**
     * Get the kubeManifestLocations property: The kubeManifestLocations property.
     * 
     * @return the kubeManifestLocations value.
     */
    public List<String> kubeManifestLocations() {
        return this.kubeManifestLocations;
    }

    /**
     * Set the kubeManifestLocations property: The kubeManifestLocations property.
     * 
     * @param kubeManifestLocations the kubeManifestLocations value to set.
     * @return the DeploymentProperties object itself.
     */
    public DeploymentProperties withKubeManifestLocations(List<String> kubeManifestLocations) {
        this.kubeManifestLocations = kubeManifestLocations;
        return this;
    }

    /**
     * Get the helmChartPath property: Helm chart directory path in repository.
     * 
     * @return the helmChartPath value.
     */
    public String helmChartPath() {
        return this.helmChartPath;
    }

    /**
     * Set the helmChartPath property: Helm chart directory path in repository.
     * 
     * @param helmChartPath the helmChartPath value to set.
     * @return the DeploymentProperties object itself.
     */
    public DeploymentProperties withHelmChartPath(String helmChartPath) {
        this.helmChartPath = helmChartPath;
        return this;
    }

    /**
     * Get the helmValues property: Helm Values.yaml file location in repository.
     * 
     * @return the helmValues value.
     */
    public String helmValues() {
        return this.helmValues;
    }

    /**
     * Set the helmValues property: Helm Values.yaml file location in repository.
     * 
     * @param helmValues the helmValues value to set.
     * @return the DeploymentProperties object itself.
     */
    public DeploymentProperties withHelmValues(String helmValues) {
        this.helmValues = helmValues;
        return this;
    }

    /**
     * Get the overrides property: Manifest override values.
     * 
     * @return the overrides value.
     */
    public Map<String, String> overrides() {
        return this.overrides;
    }

    /**
     * Set the overrides property: Manifest override values.
     * 
     * @param overrides the overrides value to set.
     * @return the DeploymentProperties object itself.
     */
    public DeploymentProperties withOverrides(Map<String, String> overrides) {
        this.overrides = overrides;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("manifestType", this.manifestType == null ? null : this.manifestType.toString());
        jsonWriter.writeArrayField("kubeManifestLocations", this.kubeManifestLocations,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("helmChartPath", this.helmChartPath);
        jsonWriter.writeStringField("helmValues", this.helmValues);
        jsonWriter.writeMapField("overrides", this.overrides, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DeploymentProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DeploymentProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DeploymentProperties.
     */
    public static DeploymentProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DeploymentProperties deserializedDeploymentProperties = new DeploymentProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("manifestType".equals(fieldName)) {
                    deserializedDeploymentProperties.manifestType = ManifestType.fromString(reader.getString());
                } else if ("kubeManifestLocations".equals(fieldName)) {
                    List<String> kubeManifestLocations = reader.readArray(reader1 -> reader1.getString());
                    deserializedDeploymentProperties.kubeManifestLocations = kubeManifestLocations;
                } else if ("helmChartPath".equals(fieldName)) {
                    deserializedDeploymentProperties.helmChartPath = reader.getString();
                } else if ("helmValues".equals(fieldName)) {
                    deserializedDeploymentProperties.helmValues = reader.getString();
                } else if ("overrides".equals(fieldName)) {
                    Map<String, String> overrides = reader.readMap(reader1 -> reader1.getString());
                    deserializedDeploymentProperties.overrides = overrides;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDeploymentProperties;
        });
    }
}
