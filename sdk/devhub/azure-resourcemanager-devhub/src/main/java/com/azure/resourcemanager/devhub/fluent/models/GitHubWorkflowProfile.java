// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devhub.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.devhub.models.Acr;
import com.azure.resourcemanager.devhub.models.AuthorizationStatus;
import com.azure.resourcemanager.devhub.models.DeploymentProperties;
import com.azure.resourcemanager.devhub.models.GitHubWorkflowProfileOidcCredentials;
import com.azure.resourcemanager.devhub.models.PullRequestStatus;
import com.azure.resourcemanager.devhub.models.WorkflowRun;
import java.io.IOException;

/**
 * GitHub Workflow Profile.
 */
@Fluent
public final class GitHubWorkflowProfile implements JsonSerializable<GitHubWorkflowProfile> {
    /*
     * Repository Owner
     */
    private String repositoryOwner;

    /*
     * Repository Name
     */
    private String repositoryName;

    /*
     * Repository Branch Name
     */
    private String branchName;

    /*
     * Path to the Dockerfile within the repository.
     */
    private String dockerfile;

    /*
     * Path to Dockerfile Build Context within the repository.
     */
    private String dockerBuildContext;

    /*
     * The deploymentProperties property.
     */
    private DeploymentProperties deploymentProperties;

    /*
     * Kubernetes namespace the application is deployed to.
     */
    private String namespace;

    /*
     * Information on the azure container registry
     */
    private Acr acr;

    /*
     * The fields needed for OIDC with GitHub.
     */
    private GitHubWorkflowProfileOidcCredentials oidcCredentials;

    /*
     * The Azure Kubernetes Cluster Resource the application will be deployed to.
     */
    private String aksResourceId;

    /*
     * The URL to the Pull Request submitted against the users repository.
     */
    private String prUrl;

    /*
     * The number associated with the submitted pull request.
     */
    private Integer pullNumber;

    /*
     * The status of the Pull Request submitted against the users repository.
     */
    private PullRequestStatus prStatus;

    /*
     * The lastWorkflowRun property.
     */
    private WorkflowRun lastWorkflowRun;

    /*
     * Determines the authorization status of requests.
     */
    private AuthorizationStatus authStatus;

    /**
     * Creates an instance of GitHubWorkflowProfile class.
     */
    public GitHubWorkflowProfile() {
    }

    /**
     * Get the repositoryOwner property: Repository Owner.
     * 
     * @return the repositoryOwner value.
     */
    public String repositoryOwner() {
        return this.repositoryOwner;
    }

    /**
     * Set the repositoryOwner property: Repository Owner.
     * 
     * @param repositoryOwner the repositoryOwner value to set.
     * @return the GitHubWorkflowProfile object itself.
     */
    public GitHubWorkflowProfile withRepositoryOwner(String repositoryOwner) {
        this.repositoryOwner = repositoryOwner;
        return this;
    }

    /**
     * Get the repositoryName property: Repository Name.
     * 
     * @return the repositoryName value.
     */
    public String repositoryName() {
        return this.repositoryName;
    }

    /**
     * Set the repositoryName property: Repository Name.
     * 
     * @param repositoryName the repositoryName value to set.
     * @return the GitHubWorkflowProfile object itself.
     */
    public GitHubWorkflowProfile withRepositoryName(String repositoryName) {
        this.repositoryName = repositoryName;
        return this;
    }

    /**
     * Get the branchName property: Repository Branch Name.
     * 
     * @return the branchName value.
     */
    public String branchName() {
        return this.branchName;
    }

    /**
     * Set the branchName property: Repository Branch Name.
     * 
     * @param branchName the branchName value to set.
     * @return the GitHubWorkflowProfile object itself.
     */
    public GitHubWorkflowProfile withBranchName(String branchName) {
        this.branchName = branchName;
        return this;
    }

    /**
     * Get the dockerfile property: Path to the Dockerfile within the repository.
     * 
     * @return the dockerfile value.
     */
    public String dockerfile() {
        return this.dockerfile;
    }

    /**
     * Set the dockerfile property: Path to the Dockerfile within the repository.
     * 
     * @param dockerfile the dockerfile value to set.
     * @return the GitHubWorkflowProfile object itself.
     */
    public GitHubWorkflowProfile withDockerfile(String dockerfile) {
        this.dockerfile = dockerfile;
        return this;
    }

    /**
     * Get the dockerBuildContext property: Path to Dockerfile Build Context within the repository.
     * 
     * @return the dockerBuildContext value.
     */
    public String dockerBuildContext() {
        return this.dockerBuildContext;
    }

    /**
     * Set the dockerBuildContext property: Path to Dockerfile Build Context within the repository.
     * 
     * @param dockerBuildContext the dockerBuildContext value to set.
     * @return the GitHubWorkflowProfile object itself.
     */
    public GitHubWorkflowProfile withDockerBuildContext(String dockerBuildContext) {
        this.dockerBuildContext = dockerBuildContext;
        return this;
    }

    /**
     * Get the deploymentProperties property: The deploymentProperties property.
     * 
     * @return the deploymentProperties value.
     */
    public DeploymentProperties deploymentProperties() {
        return this.deploymentProperties;
    }

    /**
     * Set the deploymentProperties property: The deploymentProperties property.
     * 
     * @param deploymentProperties the deploymentProperties value to set.
     * @return the GitHubWorkflowProfile object itself.
     */
    public GitHubWorkflowProfile withDeploymentProperties(DeploymentProperties deploymentProperties) {
        this.deploymentProperties = deploymentProperties;
        return this;
    }

    /**
     * Get the namespace property: Kubernetes namespace the application is deployed to.
     * 
     * @return the namespace value.
     */
    public String namespace() {
        return this.namespace;
    }

    /**
     * Set the namespace property: Kubernetes namespace the application is deployed to.
     * 
     * @param namespace the namespace value to set.
     * @return the GitHubWorkflowProfile object itself.
     */
    public GitHubWorkflowProfile withNamespace(String namespace) {
        this.namespace = namespace;
        return this;
    }

    /**
     * Get the acr property: Information on the azure container registry.
     * 
     * @return the acr value.
     */
    public Acr acr() {
        return this.acr;
    }

    /**
     * Set the acr property: Information on the azure container registry.
     * 
     * @param acr the acr value to set.
     * @return the GitHubWorkflowProfile object itself.
     */
    public GitHubWorkflowProfile withAcr(Acr acr) {
        this.acr = acr;
        return this;
    }

    /**
     * Get the oidcCredentials property: The fields needed for OIDC with GitHub.
     * 
     * @return the oidcCredentials value.
     */
    public GitHubWorkflowProfileOidcCredentials oidcCredentials() {
        return this.oidcCredentials;
    }

    /**
     * Set the oidcCredentials property: The fields needed for OIDC with GitHub.
     * 
     * @param oidcCredentials the oidcCredentials value to set.
     * @return the GitHubWorkflowProfile object itself.
     */
    public GitHubWorkflowProfile withOidcCredentials(GitHubWorkflowProfileOidcCredentials oidcCredentials) {
        this.oidcCredentials = oidcCredentials;
        return this;
    }

    /**
     * Get the aksResourceId property: The Azure Kubernetes Cluster Resource the application will be deployed to.
     * 
     * @return the aksResourceId value.
     */
    public String aksResourceId() {
        return this.aksResourceId;
    }

    /**
     * Set the aksResourceId property: The Azure Kubernetes Cluster Resource the application will be deployed to.
     * 
     * @param aksResourceId the aksResourceId value to set.
     * @return the GitHubWorkflowProfile object itself.
     */
    public GitHubWorkflowProfile withAksResourceId(String aksResourceId) {
        this.aksResourceId = aksResourceId;
        return this;
    }

    /**
     * Get the prUrl property: The URL to the Pull Request submitted against the users repository.
     * 
     * @return the prUrl value.
     */
    public String prUrl() {
        return this.prUrl;
    }

    /**
     * Get the pullNumber property: The number associated with the submitted pull request.
     * 
     * @return the pullNumber value.
     */
    public Integer pullNumber() {
        return this.pullNumber;
    }

    /**
     * Get the prStatus property: The status of the Pull Request submitted against the users repository.
     * 
     * @return the prStatus value.
     */
    public PullRequestStatus prStatus() {
        return this.prStatus;
    }

    /**
     * Get the lastWorkflowRun property: The lastWorkflowRun property.
     * 
     * @return the lastWorkflowRun value.
     */
    public WorkflowRun lastWorkflowRun() {
        return this.lastWorkflowRun;
    }

    /**
     * Set the lastWorkflowRun property: The lastWorkflowRun property.
     * 
     * @param lastWorkflowRun the lastWorkflowRun value to set.
     * @return the GitHubWorkflowProfile object itself.
     */
    public GitHubWorkflowProfile withLastWorkflowRun(WorkflowRun lastWorkflowRun) {
        this.lastWorkflowRun = lastWorkflowRun;
        return this;
    }

    /**
     * Get the authStatus property: Determines the authorization status of requests.
     * 
     * @return the authStatus value.
     */
    public AuthorizationStatus authStatus() {
        return this.authStatus;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (deploymentProperties() != null) {
            deploymentProperties().validate();
        }
        if (acr() != null) {
            acr().validate();
        }
        if (oidcCredentials() != null) {
            oidcCredentials().validate();
        }
        if (lastWorkflowRun() != null) {
            lastWorkflowRun().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("repositoryOwner", this.repositoryOwner);
        jsonWriter.writeStringField("repositoryName", this.repositoryName);
        jsonWriter.writeStringField("branchName", this.branchName);
        jsonWriter.writeStringField("dockerfile", this.dockerfile);
        jsonWriter.writeStringField("dockerBuildContext", this.dockerBuildContext);
        jsonWriter.writeJsonField("deploymentProperties", this.deploymentProperties);
        jsonWriter.writeStringField("namespace", this.namespace);
        jsonWriter.writeJsonField("acr", this.acr);
        jsonWriter.writeJsonField("oidcCredentials", this.oidcCredentials);
        jsonWriter.writeStringField("aksResourceId", this.aksResourceId);
        jsonWriter.writeJsonField("lastWorkflowRun", this.lastWorkflowRun);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of GitHubWorkflowProfile from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of GitHubWorkflowProfile if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the GitHubWorkflowProfile.
     */
    public static GitHubWorkflowProfile fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            GitHubWorkflowProfile deserializedGitHubWorkflowProfile = new GitHubWorkflowProfile();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("repositoryOwner".equals(fieldName)) {
                    deserializedGitHubWorkflowProfile.repositoryOwner = reader.getString();
                } else if ("repositoryName".equals(fieldName)) {
                    deserializedGitHubWorkflowProfile.repositoryName = reader.getString();
                } else if ("branchName".equals(fieldName)) {
                    deserializedGitHubWorkflowProfile.branchName = reader.getString();
                } else if ("dockerfile".equals(fieldName)) {
                    deserializedGitHubWorkflowProfile.dockerfile = reader.getString();
                } else if ("dockerBuildContext".equals(fieldName)) {
                    deserializedGitHubWorkflowProfile.dockerBuildContext = reader.getString();
                } else if ("deploymentProperties".equals(fieldName)) {
                    deserializedGitHubWorkflowProfile.deploymentProperties = DeploymentProperties.fromJson(reader);
                } else if ("namespace".equals(fieldName)) {
                    deserializedGitHubWorkflowProfile.namespace = reader.getString();
                } else if ("acr".equals(fieldName)) {
                    deserializedGitHubWorkflowProfile.acr = Acr.fromJson(reader);
                } else if ("oidcCredentials".equals(fieldName)) {
                    deserializedGitHubWorkflowProfile.oidcCredentials
                        = GitHubWorkflowProfileOidcCredentials.fromJson(reader);
                } else if ("aksResourceId".equals(fieldName)) {
                    deserializedGitHubWorkflowProfile.aksResourceId = reader.getString();
                } else if ("prURL".equals(fieldName)) {
                    deserializedGitHubWorkflowProfile.prUrl = reader.getString();
                } else if ("pullNumber".equals(fieldName)) {
                    deserializedGitHubWorkflowProfile.pullNumber = reader.getNullable(JsonReader::getInt);
                } else if ("prStatus".equals(fieldName)) {
                    deserializedGitHubWorkflowProfile.prStatus = PullRequestStatus.fromString(reader.getString());
                } else if ("lastWorkflowRun".equals(fieldName)) {
                    deserializedGitHubWorkflowProfile.lastWorkflowRun = WorkflowRun.fromJson(reader);
                } else if ("authStatus".equals(fieldName)) {
                    deserializedGitHubWorkflowProfile.authStatus = AuthorizationStatus.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedGitHubWorkflowProfile;
        });
    }
}
