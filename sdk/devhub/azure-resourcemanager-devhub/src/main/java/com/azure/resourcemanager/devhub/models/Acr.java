// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devhub.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Information on the azure container registry.
 */
@Fluent
public final class Acr implements JsonSerializable<Acr> {
    /*
     * ACR subscription id
     */
    private String acrSubscriptionId;

    /*
     * ACR resource group
     */
    private String acrResourceGroup;

    /*
     * ACR registry
     */
    private String acrRegistryName;

    /*
     * ACR repository
     */
    private String acrRepositoryName;

    /**
     * Creates an instance of Acr class.
     */
    public Acr() {
    }

    /**
     * Get the acrSubscriptionId property: ACR subscription id.
     * 
     * @return the acrSubscriptionId value.
     */
    public String acrSubscriptionId() {
        return this.acrSubscriptionId;
    }

    /**
     * Set the acrSubscriptionId property: ACR subscription id.
     * 
     * @param acrSubscriptionId the acrSubscriptionId value to set.
     * @return the Acr object itself.
     */
    public Acr withAcrSubscriptionId(String acrSubscriptionId) {
        this.acrSubscriptionId = acrSubscriptionId;
        return this;
    }

    /**
     * Get the acrResourceGroup property: ACR resource group.
     * 
     * @return the acrResourceGroup value.
     */
    public String acrResourceGroup() {
        return this.acrResourceGroup;
    }

    /**
     * Set the acrResourceGroup property: ACR resource group.
     * 
     * @param acrResourceGroup the acrResourceGroup value to set.
     * @return the Acr object itself.
     */
    public Acr withAcrResourceGroup(String acrResourceGroup) {
        this.acrResourceGroup = acrResourceGroup;
        return this;
    }

    /**
     * Get the acrRegistryName property: ACR registry.
     * 
     * @return the acrRegistryName value.
     */
    public String acrRegistryName() {
        return this.acrRegistryName;
    }

    /**
     * Set the acrRegistryName property: ACR registry.
     * 
     * @param acrRegistryName the acrRegistryName value to set.
     * @return the Acr object itself.
     */
    public Acr withAcrRegistryName(String acrRegistryName) {
        this.acrRegistryName = acrRegistryName;
        return this;
    }

    /**
     * Get the acrRepositoryName property: ACR repository.
     * 
     * @return the acrRepositoryName value.
     */
    public String acrRepositoryName() {
        return this.acrRepositoryName;
    }

    /**
     * Set the acrRepositoryName property: ACR repository.
     * 
     * @param acrRepositoryName the acrRepositoryName value to set.
     * @return the Acr object itself.
     */
    public Acr withAcrRepositoryName(String acrRepositoryName) {
        this.acrRepositoryName = acrRepositoryName;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("acrSubscriptionId", this.acrSubscriptionId);
        jsonWriter.writeStringField("acrResourceGroup", this.acrResourceGroup);
        jsonWriter.writeStringField("acrRegistryName", this.acrRegistryName);
        jsonWriter.writeStringField("acrRepositoryName", this.acrRepositoryName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Acr from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Acr if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IOException If an error occurs while reading the Acr.
     */
    public static Acr fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Acr deserializedAcr = new Acr();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("acrSubscriptionId".equals(fieldName)) {
                    deserializedAcr.acrSubscriptionId = reader.getString();
                } else if ("acrResourceGroup".equals(fieldName)) {
                    deserializedAcr.acrResourceGroup = reader.getString();
                } else if ("acrRegistryName".equals(fieldName)) {
                    deserializedAcr.acrRegistryName = reader.getString();
                } else if ("acrRepositoryName".equals(fieldName)) {
                    deserializedAcr.acrRepositoryName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAcr;
        });
    }
}
