// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devhub.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * The WorkflowRun model.
 */
@Fluent
public final class WorkflowRun implements JsonSerializable<WorkflowRun> {
    /*
     * Describes if the workflow run succeeded.
     */
    private Boolean succeeded;

    /*
     * URL to the run of the workflow.
     */
    private String workflowRunUrl;

    /*
     * The timestamp of the last workflow run.
     */
    private OffsetDateTime lastRunAt;

    /*
     * Describes the status of the workflow run
     */
    private WorkflowRunStatus workflowRunStatus;

    /**
     * Creates an instance of WorkflowRun class.
     */
    public WorkflowRun() {
    }

    /**
     * Get the succeeded property: Describes if the workflow run succeeded.
     * 
     * @return the succeeded value.
     */
    public Boolean succeeded() {
        return this.succeeded;
    }

    /**
     * Get the workflowRunUrl property: URL to the run of the workflow.
     * 
     * @return the workflowRunUrl value.
     */
    public String workflowRunUrl() {
        return this.workflowRunUrl;
    }

    /**
     * Get the lastRunAt property: The timestamp of the last workflow run.
     * 
     * @return the lastRunAt value.
     */
    public OffsetDateTime lastRunAt() {
        return this.lastRunAt;
    }

    /**
     * Get the workflowRunStatus property: Describes the status of the workflow run.
     * 
     * @return the workflowRunStatus value.
     */
    public WorkflowRunStatus workflowRunStatus() {
        return this.workflowRunStatus;
    }

    /**
     * Set the workflowRunStatus property: Describes the status of the workflow run.
     * 
     * @param workflowRunStatus the workflowRunStatus value to set.
     * @return the WorkflowRun object itself.
     */
    public WorkflowRun withWorkflowRunStatus(WorkflowRunStatus workflowRunStatus) {
        this.workflowRunStatus = workflowRunStatus;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("workflowRunStatus",
            this.workflowRunStatus == null ? null : this.workflowRunStatus.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of WorkflowRun from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of WorkflowRun if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the WorkflowRun.
     */
    public static WorkflowRun fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            WorkflowRun deserializedWorkflowRun = new WorkflowRun();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("succeeded".equals(fieldName)) {
                    deserializedWorkflowRun.succeeded = reader.getNullable(JsonReader::getBoolean);
                } else if ("workflowRunURL".equals(fieldName)) {
                    deserializedWorkflowRun.workflowRunUrl = reader.getString();
                } else if ("lastRunAt".equals(fieldName)) {
                    deserializedWorkflowRun.lastRunAt = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("workflowRunStatus".equals(fieldName)) {
                    deserializedWorkflowRun.workflowRunStatus = WorkflowRunStatus.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedWorkflowRun;
        });
    }
}
