// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devhub.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.devhub.fluent.models.WorkflowInner;
import com.azure.resourcemanager.devhub.models.ManifestType;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class WorkflowInnerTests {
    @Test
    public void testDeserialize() {
        WorkflowInner model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"githubWorkflowProfile\":{\"repositoryOwner\":\"e\",\"repositoryName\":\"hqjbasvmsmj\",\"branchName\":\"lngsntnbybkzgcwr\",\"dockerfile\":\"lxxwrljdouskc\",\"dockerBuildContext\":\"kocrcjdkwtnhx\",\"namespace\":\"biksq\",\"aksResourceId\":\"sainqpjwnzl\",\"prURL\":\"fmppe\",\"pullNumber\":1862600222,\"prStatus\":\"submitted\",\"authStatus\":\"kube\"}},\"location\":\"bkyqduu\",\"tags\":{\"czdzev\":\"c\"},\"id\":\"dhkrwpdappdsbdk\",\"name\":\"wrwjfeu\",\"type\":\"nhutjeltmrldhugj\"}")
                .toObject(WorkflowInner.class);
        Assertions.assertEquals("bkyqduu", model.location());
        Assertions.assertEquals("c", model.tags().get("czdzev"));
        Assertions.assertEquals("e", model.repositoryOwner());
        Assertions.assertEquals("hqjbasvmsmj", model.repositoryName());
        Assertions.assertEquals("lngsntnbybkzgcwr", model.branchName());
        Assertions.assertEquals("lxxwrljdouskc", model.dockerfile());
        Assertions.assertEquals("kocrcjdkwtnhx", model.dockerBuildContext());
        Assertions.assertEquals("biksq", model.namespace());
        Assertions.assertEquals("sainqpjwnzl", model.aksResourceId());
        Assertions.assertEquals(ManifestType.KUBE, model.authStatus());
    }

    @Test
    public void testSerialize() {
        WorkflowInner model =
            new WorkflowInner()
                .withLocation("bkyqduu")
                .withTags(mapOf("czdzev", "c"))
                .withRepositoryOwner("e")
                .withRepositoryName("hqjbasvmsmj")
                .withBranchName("lngsntnbybkzgcwr")
                .withDockerfile("lxxwrljdouskc")
                .withDockerBuildContext("kocrcjdkwtnhx")
                .withNamespace("biksq")
                .withAksResourceId("sainqpjwnzl")
                .withAuthStatus(ManifestType.KUBE);
        model = BinaryData.fromObject(model).toObject(WorkflowInner.class);
        Assertions.assertEquals("bkyqduu", model.location());
        Assertions.assertEquals("c", model.tags().get("czdzev"));
        Assertions.assertEquals("e", model.repositoryOwner());
        Assertions.assertEquals("hqjbasvmsmj", model.repositoryName());
        Assertions.assertEquals("lngsntnbybkzgcwr", model.branchName());
        Assertions.assertEquals("lxxwrljdouskc", model.dockerfile());
        Assertions.assertEquals("kocrcjdkwtnhx", model.dockerBuildContext());
        Assertions.assertEquals("biksq", model.namespace());
        Assertions.assertEquals("sainqpjwnzl", model.aksResourceId());
        Assertions.assertEquals(ManifestType.KUBE, model.authStatus());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
