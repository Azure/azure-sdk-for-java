// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devhub.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.devhub.DevHubManager;
import com.azure.resourcemanager.devhub.models.DockerfileGenerationMode;
import com.azure.resourcemanager.devhub.models.GenerationLanguage;
import com.azure.resourcemanager.devhub.models.GenerationManifestType;
import com.azure.resourcemanager.devhub.models.ManifestGenerationMode;
import com.azure.resourcemanager.devhub.models.Workflow;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class WorkflowsCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"githubWorkflowProfile\":{\"repositoryOwner\":\"ywpnvjt\",\"repositoryName\":\"nermcl\",\"branchName\":\"lphox\",\"dockerfile\":\"crpab\",\"dockerBuildContext\":\"epsbjtazqu\",\"namespace\":\"wpmueefj\",\"aksResourceId\":\"kqujidsuyono\",\"prURL\":\"laocqxtccmg\",\"pullNumber\":1054992005,\"prStatus\":\"removed\",\"authStatus\":\"NotFound\"},\"artifactGenerationProperties\":{\"generationLanguage\":\"rust\",\"languageVersion\":\"vwfudwpzntxhd\",\"builderVersion\":\"lrqjbhckfr\",\"port\":\"rxsbkyvp\",\"appName\":\"anuzbpzkafkuw\",\"dockerfileOutputDirectory\":\"rnwb\",\"manifestOutputDirectory\":\"hhseyv\",\"dockerfileGenerationMode\":\"disabled\",\"manifestGenerationMode\":\"disabled\",\"manifestType\":\"helm\",\"imageName\":\"spkdee\",\"namespace\":\"ofmxagkvtmelmqkr\",\"imageTag\":\"hvljuahaquh\"}},\"location\":\"hmdua\",\"tags\":{\"rcrgvx\":\"xqpvfadmw\"},\"id\":\"vgomz\",\"name\":\"fmisg\",\"type\":\"bnbbeldawkz\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        DevHubManager manager =
            DevHubManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        Workflow response =
            manager
                .workflows()
                .define("ckzywbiexzfeyue")
                .withRegion("tfhvpesapskrdqmh")
                .withExistingResourceGroup("yazttbtwwrqpue")
                .withTags(mapOf("zxuutkncwscwsvl", "htldwk", "vnm", "otogtwrupqs", "eil", "cykvceo"))
                .withRepositoryOwner("xujwbhqwalmuzyo")
                .withRepositoryName("epdkzja")
                .withBranchName("ux")
                .withDockerfile("d")
                .withDockerBuildContext("avxbniwdjswztsdb")
                .withNamespace("xytxhpzxbz")
                .withAksResourceId("b")
                .withGenerationLanguage(GenerationLanguage.RUST)
                .withLanguageVersion("ovplw")
                .withBuilderVersion("hvgyuguosvmk")
                .withPort("sxqu")
                .withAppName("fpl")
                .withDockerfileOutputDirectory("gsxnkjzkdeslpv")
                .withManifestOutputDirectory("pwiyig")
                .withDockerfileGenerationMode(DockerfileGenerationMode.ENABLED)
                .withManifestGenerationMode(ManifestGenerationMode.ENABLED)
                .withManifestType(GenerationManifestType.HELM)
                .withImageName("aiuebbaumnyqu")
                .withNamespaceArtifactGenerationPropertiesNamespace("deoj")
                .withImageTag("bckhsmtxpsi")
                .create();

        Assertions.assertEquals("hmdua", response.location());
        Assertions.assertEquals("xqpvfadmw", response.tags().get("rcrgvx"));
        Assertions.assertEquals("ywpnvjt", response.repositoryOwner());
        Assertions.assertEquals("nermcl", response.repositoryName());
        Assertions.assertEquals("lphox", response.branchName());
        Assertions.assertEquals("crpab", response.dockerfile());
        Assertions.assertEquals("epsbjtazqu", response.dockerBuildContext());
        Assertions.assertEquals("wpmueefj", response.namespace());
        Assertions.assertEquals("kqujidsuyono", response.aksResourceId());
        Assertions.assertEquals(GenerationLanguage.RUST, response.generationLanguage());
        Assertions.assertEquals("vwfudwpzntxhd", response.languageVersion());
        Assertions.assertEquals("lrqjbhckfr", response.builderVersion());
        Assertions.assertEquals("rxsbkyvp", response.port());
        Assertions.assertEquals("anuzbpzkafkuw", response.appName());
        Assertions.assertEquals("rnwb", response.dockerfileOutputDirectory());
        Assertions.assertEquals("hhseyv", response.manifestOutputDirectory());
        Assertions.assertEquals(DockerfileGenerationMode.DISABLED, response.dockerfileGenerationMode());
        Assertions.assertEquals(ManifestGenerationMode.DISABLED, response.manifestGenerationMode());
        Assertions.assertEquals(GenerationManifestType.HELM, response.manifestType());
        Assertions.assertEquals("spkdee", response.imageName());
        Assertions.assertEquals("ofmxagkvtmelmqkr", response.namespaceArtifactGenerationPropertiesNamespace());
        Assertions.assertEquals("hvljuahaquh", response.imageTag());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
