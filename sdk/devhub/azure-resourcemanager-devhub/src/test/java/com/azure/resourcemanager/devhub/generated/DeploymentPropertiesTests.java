// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devhub.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.devhub.models.DeploymentProperties;
import com.azure.resourcemanager.devhub.models.ManifestType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class DeploymentPropertiesTests {
    @Test
    public void testDeserialize() {
        DeploymentProperties model =
            BinaryData
                .fromString(
                    "{\"manifestType\":\"helm\",\"kubeManifestLocations\":[\"pcyshu\"],\"helmChartPath\":\"afbljjgpbtoqcjmk\",\"helmValues\":\"a\",\"overrides\":{\"pku\":\"idtqajzyu\",\"gqexzlocxs\":\"jkrlkhbzhfepg\",\"bcsglumma\":\"paierh\"}}")
                .toObject(DeploymentProperties.class);
        Assertions.assertEquals(ManifestType.HELM, model.manifestType());
        Assertions.assertEquals("pcyshu", model.kubeManifestLocations().get(0));
        Assertions.assertEquals("afbljjgpbtoqcjmk", model.helmChartPath());
        Assertions.assertEquals("a", model.helmValues());
        Assertions.assertEquals("idtqajzyu", model.overrides().get("pku"));
    }

    @Test
    public void testSerialize() {
        DeploymentProperties model =
            new DeploymentProperties()
                .withManifestType(ManifestType.HELM)
                .withKubeManifestLocations(Arrays.asList("pcyshu"))
                .withHelmChartPath("afbljjgpbtoqcjmk")
                .withHelmValues("a")
                .withOverrides(mapOf("pku", "idtqajzyu", "gqexzlocxs", "jkrlkhbzhfepg", "bcsglumma", "paierh"));
        model = BinaryData.fromObject(model).toObject(DeploymentProperties.class);
        Assertions.assertEquals(ManifestType.HELM, model.manifestType());
        Assertions.assertEquals("pcyshu", model.kubeManifestLocations().get(0));
        Assertions.assertEquals("afbljjgpbtoqcjmk", model.helmChartPath());
        Assertions.assertEquals("a", model.helmValues());
        Assertions.assertEquals("idtqajzyu", model.overrides().get("pku"));
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
