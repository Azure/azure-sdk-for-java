// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devhub.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.devhub.DevHubManager;
import com.azure.resourcemanager.devhub.models.DockerfileGenerationMode;
import com.azure.resourcemanager.devhub.models.GenerationLanguage;
import com.azure.resourcemanager.devhub.models.GenerationManifestType;
import com.azure.resourcemanager.devhub.models.ManifestGenerationMode;
import com.azure.resourcemanager.devhub.models.Workflow;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class WorkflowsGetByResourceGroupWithResponseMockTests {
    @Test
    public void testGetByResourceGroupWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"githubWorkflowProfile\":{\"repositoryOwner\":\"lyaxuc\",\"repositoryName\":\"uqszfk\",\"branchName\":\"ypewrmjmwvvjekt\",\"dockerfile\":\"senhwlrs\",\"dockerBuildContext\":\"rzpwvlqdqgbiq\",\"namespace\":\"hkaetcktvfc\",\"aksResourceId\":\"nkymuctqhjfbebrj\",\"prURL\":\"erfuwuttt\",\"pullNumber\":2038091366,\"prStatus\":\"submitted\",\"authStatus\":\"NotFound\"},\"artifactGenerationProperties\":{\"generationLanguage\":\"javascript\",\"languageVersion\":\"pcyvahfnljkyqx\",\"builderVersion\":\"uujqgidokgjljyo\",\"port\":\"vcltbgsncgh\",\"appName\":\"esz\",\"dockerfileOutputDirectory\":\"bijhtxfvgxbf\",\"manifestOutputDirectory\":\"xnehmpvec\",\"dockerfileGenerationMode\":\"disabled\",\"manifestGenerationMode\":\"disabled\",\"manifestType\":\"helm\",\"imageName\":\"kk\",\"namespace\":\"mpukgriw\",\"imageTag\":\"zlfbxzpuzycispnq\"}},\"location\":\"hmgkbrpyy\",\"tags\":{\"drgvtqagn\":\"bnuqqkpik\",\"mebf\":\"uynhijg\",\"zmhjrunmp\":\"iarbutrcvpna\"},\"id\":\"ttdbhrbnl\",\"name\":\"nkxmyskpbhenbtk\",\"type\":\"xywnytnrsynlqidy\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        DevHubManager manager =
            DevHubManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        Workflow response =
            manager
                .workflows()
                .getByResourceGroupWithResponse("yxzk", "noc", com.azure.core.util.Context.NONE)
                .getValue();

        Assertions.assertEquals("hmgkbrpyy", response.location());
        Assertions.assertEquals("bnuqqkpik", response.tags().get("drgvtqagn"));
        Assertions.assertEquals("lyaxuc", response.repositoryOwner());
        Assertions.assertEquals("uqszfk", response.repositoryName());
        Assertions.assertEquals("ypewrmjmwvvjekt", response.branchName());
        Assertions.assertEquals("senhwlrs", response.dockerfile());
        Assertions.assertEquals("rzpwvlqdqgbiq", response.dockerBuildContext());
        Assertions.assertEquals("hkaetcktvfc", response.namespace());
        Assertions.assertEquals("nkymuctqhjfbebrj", response.aksResourceId());
        Assertions.assertEquals(GenerationLanguage.JAVASCRIPT, response.generationLanguage());
        Assertions.assertEquals("pcyvahfnljkyqx", response.languageVersion());
        Assertions.assertEquals("uujqgidokgjljyo", response.builderVersion());
        Assertions.assertEquals("vcltbgsncgh", response.port());
        Assertions.assertEquals("esz", response.appName());
        Assertions.assertEquals("bijhtxfvgxbf", response.dockerfileOutputDirectory());
        Assertions.assertEquals("xnehmpvec", response.manifestOutputDirectory());
        Assertions.assertEquals(DockerfileGenerationMode.DISABLED, response.dockerfileGenerationMode());
        Assertions.assertEquals(ManifestGenerationMode.DISABLED, response.manifestGenerationMode());
        Assertions.assertEquals(GenerationManifestType.HELM, response.manifestType());
        Assertions.assertEquals("kk", response.imageName());
        Assertions.assertEquals("mpukgriw", response.namespaceArtifactGenerationPropertiesNamespace());
        Assertions.assertEquals("zlfbxzpuzycispnq", response.imageTag());
    }
}
