// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devhub.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.devhub.DevHubManager;
import com.azure.resourcemanager.devhub.models.DockerfileGenerationMode;
import com.azure.resourcemanager.devhub.models.GenerationLanguage;
import com.azure.resourcemanager.devhub.models.GenerationManifestType;
import com.azure.resourcemanager.devhub.models.ManifestGenerationMode;
import com.azure.resourcemanager.devhub.models.Workflow;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class WorkflowsListMockTests {
    @Test
    public void testList() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"value\":[{\"properties\":{\"githubWorkflowProfile\":{\"repositoryOwner\":\"matuok\",\"repositoryName\":\"fu\",\"branchName\":\"aodsfcpkv\",\"dockerfile\":\"dpuozmyz\",\"dockerBuildContext\":\"agfuaxbezyiu\",\"namespace\":\"twhrdxwzywqsm\",\"aksResourceId\":\"exim\",\"prURL\":\"yocf\",\"pullNumber\":1075133602,\"prStatus\":\"submitted\",\"authStatus\":\"NotFound\"},\"artifactGenerationProperties\":{\"generationLanguage\":\"gradle\",\"languageVersion\":\"i\",\"builderVersion\":\"xhqyudxorrqnb\",\"port\":\"czvyifq\",\"appName\":\"kdvjsll\",\"dockerfileOutputDirectory\":\"vvdfwatkpnpul\",\"manifestOutputDirectory\":\"xbczwtruwiqz\",\"dockerfileGenerationMode\":\"enabled\",\"manifestGenerationMode\":\"disabled\",\"manifestType\":\"kube\",\"imageName\":\"yokacspkw\",\"namespace\":\"zdobpxjmflbvvnch\",\"imageTag\":\"cciw\"}},\"location\":\"juqk\",\"tags\":{\"oskg\":\"ajiwkuo\"},\"id\":\"sauuimj\",\"name\":\"vxieduugidyj\",\"type\":\"rfbyaosvexcso\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        DevHubManager manager =
            DevHubManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<Workflow> response = manager.workflows().list(com.azure.core.util.Context.NONE);

        Assertions.assertEquals("juqk", response.iterator().next().location());
        Assertions.assertEquals("ajiwkuo", response.iterator().next().tags().get("oskg"));
        Assertions.assertEquals("matuok", response.iterator().next().repositoryOwner());
        Assertions.assertEquals("fu", response.iterator().next().repositoryName());
        Assertions.assertEquals("aodsfcpkv", response.iterator().next().branchName());
        Assertions.assertEquals("dpuozmyz", response.iterator().next().dockerfile());
        Assertions.assertEquals("agfuaxbezyiu", response.iterator().next().dockerBuildContext());
        Assertions.assertEquals("twhrdxwzywqsm", response.iterator().next().namespace());
        Assertions.assertEquals("exim", response.iterator().next().aksResourceId());
        Assertions.assertEquals(GenerationLanguage.GRADLE, response.iterator().next().generationLanguage());
        Assertions.assertEquals("i", response.iterator().next().languageVersion());
        Assertions.assertEquals("xhqyudxorrqnb", response.iterator().next().builderVersion());
        Assertions.assertEquals("czvyifq", response.iterator().next().port());
        Assertions.assertEquals("kdvjsll", response.iterator().next().appName());
        Assertions.assertEquals("vvdfwatkpnpul", response.iterator().next().dockerfileOutputDirectory());
        Assertions.assertEquals("xbczwtruwiqz", response.iterator().next().manifestOutputDirectory());
        Assertions
            .assertEquals(DockerfileGenerationMode.ENABLED, response.iterator().next().dockerfileGenerationMode());
        Assertions.assertEquals(ManifestGenerationMode.DISABLED, response.iterator().next().manifestGenerationMode());
        Assertions.assertEquals(GenerationManifestType.KUBE, response.iterator().next().manifestType());
        Assertions.assertEquals("yokacspkw", response.iterator().next().imageName());
        Assertions
            .assertEquals(
                "zdobpxjmflbvvnch", response.iterator().next().namespaceArtifactGenerationPropertiesNamespace());
        Assertions.assertEquals("cciw", response.iterator().next().imageTag());
    }
}
