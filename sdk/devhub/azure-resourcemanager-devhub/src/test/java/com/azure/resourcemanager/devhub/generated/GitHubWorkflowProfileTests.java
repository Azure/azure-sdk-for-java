// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devhub.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.devhub.fluent.models.GitHubWorkflowProfile;
import com.azure.resourcemanager.devhub.models.Acr;
import com.azure.resourcemanager.devhub.models.DeploymentProperties;
import com.azure.resourcemanager.devhub.models.GitHubWorkflowProfileOidcCredentials;
import com.azure.resourcemanager.devhub.models.ManifestType;
import com.azure.resourcemanager.devhub.models.WorkflowRun;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class GitHubWorkflowProfileTests {
    @Test
    public void testDeserialize() {
        GitHubWorkflowProfile model =
            BinaryData
                .fromString(
                    "{\"repositoryOwner\":\"yfhrtxilnerkujy\",\"repositoryName\":\"l\",\"branchName\":\"uvfqawrlyxwj\",\"dockerfile\":\"prbnwbxgjvtbv\",\"dockerBuildContext\":\"sszdnru\",\"deploymentProperties\":{\"manifestType\":\"kube\",\"kubeManifestLocations\":[\"uouq\",\"prwzwbnguitnwui\"],\"helmChartPath\":\"a\",\"helmValues\":\"ufizuckyf\",\"overrides\":{\"zuhtymwisdkfthwx\":\"fidfvzw\",\"mijcmmxdcufufs\":\"nteiwaopv\",\"fycc\":\"pymzidnsezcxtbzs\"}},\"namespace\":\"ewmdw\",\"acr\":{\"acrSubscriptionId\":\"iachbo\",\"acrResourceGroup\":\"flnrosfqpteehzz\",\"acrRegistryName\":\"pyqr\",\"acrRepositoryName\":\"z\"},\"oidcCredentials\":{\"azureClientId\":\"vswjdk\",\"azureTenantId\":\"soodqxhcrmnoh\"},\"aksResourceId\":\"ckwhds\",\"prURL\":\"fiyipjxsqwpgrj\",\"pullNumber\":1837885218,\"prStatus\":\"merged\",\"lastWorkflowRun\":{\"succeeded\":false,\"workflowRunURL\":\"snb\",\"lastRunAt\":\"2021-08-08T19:07:21Z\"},\"authStatus\":\"helm\"}")
                .toObject(GitHubWorkflowProfile.class);
        Assertions.assertEquals("yfhrtxilnerkujy", model.repositoryOwner());
        Assertions.assertEquals("l", model.repositoryName());
        Assertions.assertEquals("uvfqawrlyxwj", model.branchName());
        Assertions.assertEquals("prbnwbxgjvtbv", model.dockerfile());
        Assertions.assertEquals("sszdnru", model.dockerBuildContext());
        Assertions.assertEquals(ManifestType.KUBE, model.deploymentProperties().manifestType());
        Assertions.assertEquals("uouq", model.deploymentProperties().kubeManifestLocations().get(0));
        Assertions.assertEquals("a", model.deploymentProperties().helmChartPath());
        Assertions.assertEquals("ufizuckyf", model.deploymentProperties().helmValues());
        Assertions.assertEquals("fidfvzw", model.deploymentProperties().overrides().get("zuhtymwisdkfthwx"));
        Assertions.assertEquals("ewmdw", model.namespace());
        Assertions.assertEquals("iachbo", model.acr().acrSubscriptionId());
        Assertions.assertEquals("flnrosfqpteehzz", model.acr().acrResourceGroup());
        Assertions.assertEquals("pyqr", model.acr().acrRegistryName());
        Assertions.assertEquals("z", model.acr().acrRepositoryName());
        Assertions.assertEquals("vswjdk", model.oidcCredentials().azureClientId());
        Assertions.assertEquals("soodqxhcrmnoh", model.oidcCredentials().azureTenantId());
        Assertions.assertEquals("ckwhds", model.aksResourceId());
        Assertions.assertEquals(ManifestType.HELM, model.authStatus());
    }

    @Test
    public void testSerialize() {
        GitHubWorkflowProfile model =
            new GitHubWorkflowProfile()
                .withRepositoryOwner("yfhrtxilnerkujy")
                .withRepositoryName("l")
                .withBranchName("uvfqawrlyxwj")
                .withDockerfile("prbnwbxgjvtbv")
                .withDockerBuildContext("sszdnru")
                .withDeploymentProperties(
                    new DeploymentProperties()
                        .withManifestType(ManifestType.KUBE)
                        .withKubeManifestLocations(Arrays.asList("uouq", "prwzwbnguitnwui"))
                        .withHelmChartPath("a")
                        .withHelmValues("ufizuckyf")
                        .withOverrides(
                            mapOf(
                                "zuhtymwisdkfthwx",
                                "fidfvzw",
                                "mijcmmxdcufufs",
                                "nteiwaopv",
                                "fycc",
                                "pymzidnsezcxtbzs")))
                .withNamespace("ewmdw")
                .withAcr(
                    new Acr()
                        .withAcrSubscriptionId("iachbo")
                        .withAcrResourceGroup("flnrosfqpteehzz")
                        .withAcrRegistryName("pyqr")
                        .withAcrRepositoryName("z"))
                .withOidcCredentials(
                    new GitHubWorkflowProfileOidcCredentials()
                        .withAzureClientId("vswjdk")
                        .withAzureTenantId("soodqxhcrmnoh"))
                .withAksResourceId("ckwhds")
                .withLastWorkflowRun(new WorkflowRun())
                .withAuthStatus(ManifestType.HELM);
        model = BinaryData.fromObject(model).toObject(GitHubWorkflowProfile.class);
        Assertions.assertEquals("yfhrtxilnerkujy", model.repositoryOwner());
        Assertions.assertEquals("l", model.repositoryName());
        Assertions.assertEquals("uvfqawrlyxwj", model.branchName());
        Assertions.assertEquals("prbnwbxgjvtbv", model.dockerfile());
        Assertions.assertEquals("sszdnru", model.dockerBuildContext());
        Assertions.assertEquals(ManifestType.KUBE, model.deploymentProperties().manifestType());
        Assertions.assertEquals("uouq", model.deploymentProperties().kubeManifestLocations().get(0));
        Assertions.assertEquals("a", model.deploymentProperties().helmChartPath());
        Assertions.assertEquals("ufizuckyf", model.deploymentProperties().helmValues());
        Assertions.assertEquals("fidfvzw", model.deploymentProperties().overrides().get("zuhtymwisdkfthwx"));
        Assertions.assertEquals("ewmdw", model.namespace());
        Assertions.assertEquals("iachbo", model.acr().acrSubscriptionId());
        Assertions.assertEquals("flnrosfqpteehzz", model.acr().acrResourceGroup());
        Assertions.assertEquals("pyqr", model.acr().acrRegistryName());
        Assertions.assertEquals("z", model.acr().acrRepositoryName());
        Assertions.assertEquals("vswjdk", model.oidcCredentials().azureClientId());
        Assertions.assertEquals("soodqxhcrmnoh", model.oidcCredentials().azureTenantId());
        Assertions.assertEquals("ckwhds", model.aksResourceId());
        Assertions.assertEquals(ManifestType.HELM, model.authStatus());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
