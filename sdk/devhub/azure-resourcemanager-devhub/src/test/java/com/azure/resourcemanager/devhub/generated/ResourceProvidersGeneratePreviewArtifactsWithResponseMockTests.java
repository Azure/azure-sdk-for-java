// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devhub.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.devhub.DevHubManager;
import com.azure.resourcemanager.devhub.fluent.models.ArtifactGenerationProperties;
import com.azure.resourcemanager.devhub.models.DockerfileGenerationMode;
import com.azure.resourcemanager.devhub.models.GenerationLanguage;
import com.azure.resourcemanager.devhub.models.GenerationManifestType;
import com.azure.resourcemanager.devhub.models.ManifestGenerationMode;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class ResourceProvidersGeneratePreviewArtifactsWithResponseMockTests {
    @Test
    public void testGeneratePreviewArtifactsWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr = "{\"nysounqe\":\"daj\",\"oaeupfhyhltrpmo\":\"a\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        DevHubManager manager =
            DevHubManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        Map<String, String> response =
            manager
                .resourceProviders()
                .generatePreviewArtifactsWithResponse(
                    "ofqweykhmenevfye",
                    new ArtifactGenerationProperties()
                        .withGenerationLanguage(GenerationLanguage.GRADLE)
                        .withLanguageVersion("ybcibvyvdcsit")
                        .withBuilderVersion("naamde")
                        .withPort("eh")
                        .withAppName("qsc")
                        .withDockerfileOutputDirectory("ypvhezrkg")
                        .withManifestOutputDirectory("c")
                        .withDockerfileGenerationMode(DockerfileGenerationMode.ENABLED)
                        .withManifestGenerationMode(ManifestGenerationMode.ENABLED)
                        .withManifestType(GenerationManifestType.HELM)
                        .withImageName("kqsleyyvxy")
                        .withNamespace("pkc")
                        .withImageTag("tpngjcrcczsqpjh"),
                    com.azure.core.util.Context.NONE)
                .getValue();

        Assertions.assertEquals("daj", response.get("nysounqe"));
    }
}
