// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devhub.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.devhub.DevHubManager;
import com.azure.resourcemanager.devhub.models.DockerfileGenerationMode;
import com.azure.resourcemanager.devhub.models.GenerationLanguage;
import com.azure.resourcemanager.devhub.models.GenerationManifestType;
import com.azure.resourcemanager.devhub.models.ManifestGenerationMode;
import com.azure.resourcemanager.devhub.models.Workflow;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class WorkflowsListByResourceGroupMockTests {
    @Test
    public void testListByResourceGroup() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"value\":[{\"properties\":{\"githubWorkflowProfile\":{\"repositoryOwner\":\"iith\",\"repositoryName\":\"m\",\"branchName\":\"yvshxmz\",\"dockerfile\":\"bzoggigrx\",\"dockerBuildContext\":\"ur\",\"namespace\":\"xjnspy\",\"aksResourceId\":\"oenkouknvudwti\",\"prURL\":\"bldngkpoc\",\"pullNumber\":523665642,\"prStatus\":\"merged\",\"authStatus\":\"Error\"},\"artifactGenerationProperties\":{\"generationLanguage\":\"javascript\",\"languageVersion\":\"jnpiucgyg\",\"builderVersion\":\"qzntypm\",\"port\":\"p\",\"appName\":\"c\",\"dockerfileOutputDirectory\":\"qjsdpydnfyhxdeo\",\"manifestOutputDirectory\":\"zi\",\"dockerfileGenerationMode\":\"disabled\",\"manifestGenerationMode\":\"disabled\",\"manifestType\":\"helm\",\"imageName\":\"gzfbishcbk\",\"namespace\":\"jdeyeamdpha\",\"imageTag\":\"lpbuxwgipwhonowk\"}},\"location\":\"hwankixzbinjepu\",\"tags\":{\"zoqftiyqzrnkcqvy\":\"rywn\"},\"id\":\"lwh\",\"name\":\"lsicohoqqnwv\",\"type\":\"ryavwhheunmmqh\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        DevHubManager manager =
            DevHubManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<Workflow> response =
            manager
                .workflows()
                .listByResourceGroup("pclhocohslk", "vleggzfbuhfmvfax", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("hwankixzbinjepu", response.iterator().next().location());
        Assertions.assertEquals("rywn", response.iterator().next().tags().get("zoqftiyqzrnkcqvy"));
        Assertions.assertEquals("iith", response.iterator().next().repositoryOwner());
        Assertions.assertEquals("m", response.iterator().next().repositoryName());
        Assertions.assertEquals("yvshxmz", response.iterator().next().branchName());
        Assertions.assertEquals("bzoggigrx", response.iterator().next().dockerfile());
        Assertions.assertEquals("ur", response.iterator().next().dockerBuildContext());
        Assertions.assertEquals("xjnspy", response.iterator().next().namespace());
        Assertions.assertEquals("oenkouknvudwti", response.iterator().next().aksResourceId());
        Assertions.assertEquals(GenerationLanguage.JAVASCRIPT, response.iterator().next().generationLanguage());
        Assertions.assertEquals("jnpiucgyg", response.iterator().next().languageVersion());
        Assertions.assertEquals("qzntypm", response.iterator().next().builderVersion());
        Assertions.assertEquals("p", response.iterator().next().port());
        Assertions.assertEquals("c", response.iterator().next().appName());
        Assertions.assertEquals("qjsdpydnfyhxdeo", response.iterator().next().dockerfileOutputDirectory());
        Assertions.assertEquals("zi", response.iterator().next().manifestOutputDirectory());
        Assertions
            .assertEquals(DockerfileGenerationMode.DISABLED, response.iterator().next().dockerfileGenerationMode());
        Assertions.assertEquals(ManifestGenerationMode.DISABLED, response.iterator().next().manifestGenerationMode());
        Assertions.assertEquals(GenerationManifestType.HELM, response.iterator().next().manifestType());
        Assertions.assertEquals("gzfbishcbk", response.iterator().next().imageName());
        Assertions
            .assertEquals("jdeyeamdpha", response.iterator().next().namespaceArtifactGenerationPropertiesNamespace());
        Assertions.assertEquals("lpbuxwgipwhonowk", response.iterator().next().imageTag());
    }
}
