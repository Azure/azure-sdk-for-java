// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devhub.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.util.Context;
import com.azure.resourcemanager.devhub.DevHubManager;
import com.azure.resourcemanager.devhub.models.ManifestType;
import com.azure.resourcemanager.devhub.models.Workflow;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class WorkflowsListByResourceGroupTests {
    @Test
    public void testListByResourceGroup() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"value\":[{\"properties\":{\"githubWorkflowProfile\":{\"repositoryOwner\":\"dt\",\"repositoryName\":\"zrvqdr\",\"branchName\":\"hjybigehoqfbo\",\"dockerfile\":\"kanyktzlcuiywg\",\"dockerBuildContext\":\"wgndrvynhzgpp\",\"namespace\":\"gyncocpecfvmmc\",\"aksResourceId\":\"xlzevgbmqjqabcy\",\"prURL\":\"ivkwlzuvccfwnfnb\",\"pullNumber\":1187016173,\"prStatus\":\"merged\",\"authStatus\":\"kube\"}},\"location\":\"bxetqgtzxdpn\",\"tags\":{\"ubisnjampmng\":\"qwxrjfeallnw\"},\"id\":\"zscxaqwo\",\"name\":\"chcbonqvpkvlrxnj\",\"type\":\"ase\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        DevHubManager manager =
            DevHubManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<Workflow> response = manager.workflows().listByResourceGroup("ln", "xlefgugnxkrx", Context.NONE);

        Assertions.assertEquals("bxetqgtzxdpn", response.iterator().next().location());
        Assertions.assertEquals("qwxrjfeallnw", response.iterator().next().tags().get("ubisnjampmng"));
        Assertions.assertEquals("dt", response.iterator().next().repositoryOwner());
        Assertions.assertEquals("zrvqdr", response.iterator().next().repositoryName());
        Assertions.assertEquals("hjybigehoqfbo", response.iterator().next().branchName());
        Assertions.assertEquals("kanyktzlcuiywg", response.iterator().next().dockerfile());
        Assertions.assertEquals("wgndrvynhzgpp", response.iterator().next().dockerBuildContext());
        Assertions.assertEquals("gyncocpecfvmmc", response.iterator().next().namespace());
        Assertions.assertEquals("xlzevgbmqjqabcy", response.iterator().next().aksResourceId());
        Assertions.assertEquals(ManifestType.KUBE, response.iterator().next().authStatus());
    }
}
