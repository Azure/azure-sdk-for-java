// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devhub.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.devhub.fluent.models.WorkflowProperties;
import com.azure.resourcemanager.devhub.models.Acr;
import com.azure.resourcemanager.devhub.models.DeploymentProperties;
import com.azure.resourcemanager.devhub.models.GitHubWorkflowProfileOidcCredentials;
import com.azure.resourcemanager.devhub.models.ManifestType;
import com.azure.resourcemanager.devhub.models.WorkflowRun;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class WorkflowPropertiesTests {
    @Test
    public void testDeserialize() {
        WorkflowProperties model =
            BinaryData
                .fromString(
                    "{\"githubWorkflowProfile\":{\"repositoryOwner\":\"atqxho\",\"repositoryName\":\"geablgphuticndvk\",\"branchName\":\"zwyiftyhxhur\",\"dockerfile\":\"ftyxolniw\",\"dockerBuildContext\":\"cukjf\",\"deploymentProperties\":{\"manifestType\":\"helm\",\"kubeManifestLocations\":[\"klryplwck\",\"asy\"],\"helmChartPath\":\"nddhsgcbacph\",\"helmValues\":\"koty\",\"overrides\":{\"gfgibm\":\"oulzndlikwyq\"}},\"namespace\":\"gakeqsr\",\"acr\":{\"acrSubscriptionId\":\"zqqedq\",\"acrResourceGroup\":\"bciqfouflm\",\"acrRegistryName\":\"kzsmodm\",\"acrRepositoryName\":\"ougpbkwt\"},\"oidcCredentials\":{\"azureClientId\":\"duqkt\",\"azureTenantId\":\"spwgcuertumkdosv\"},\"aksResourceId\":\"hbmdgbbjfdd\",\"prURL\":\"bmbexppbhtqqro\",\"pullNumber\":159244134,\"prStatus\":\"merged\",\"lastWorkflowRun\":{\"succeeded\":false,\"workflowRunURL\":\"bquxigjy\",\"lastRunAt\":\"2021-09-19T22:03:44Z\"},\"authStatus\":\"kube\"}}")
                .toObject(WorkflowProperties.class);
        Assertions.assertEquals("atqxho", model.repositoryOwner());
        Assertions.assertEquals("geablgphuticndvk", model.repositoryName());
        Assertions.assertEquals("zwyiftyhxhur", model.branchName());
        Assertions.assertEquals("ftyxolniw", model.dockerfile());
        Assertions.assertEquals("cukjf", model.dockerBuildContext());
        Assertions.assertEquals(ManifestType.HELM, model.deploymentProperties().manifestType());
        Assertions.assertEquals("klryplwck", model.deploymentProperties().kubeManifestLocations().get(0));
        Assertions.assertEquals("nddhsgcbacph", model.deploymentProperties().helmChartPath());
        Assertions.assertEquals("koty", model.deploymentProperties().helmValues());
        Assertions.assertEquals("oulzndlikwyq", model.deploymentProperties().overrides().get("gfgibm"));
        Assertions.assertEquals("gakeqsr", model.namespace());
        Assertions.assertEquals("zqqedq", model.acr().acrSubscriptionId());
        Assertions.assertEquals("bciqfouflm", model.acr().acrResourceGroup());
        Assertions.assertEquals("kzsmodm", model.acr().acrRegistryName());
        Assertions.assertEquals("ougpbkwt", model.acr().acrRepositoryName());
        Assertions.assertEquals("duqkt", model.oidcCredentials().azureClientId());
        Assertions.assertEquals("spwgcuertumkdosv", model.oidcCredentials().azureTenantId());
        Assertions.assertEquals("hbmdgbbjfdd", model.aksResourceId());
        Assertions.assertEquals(ManifestType.KUBE, model.authStatus());
    }

    @Test
    public void testSerialize() {
        WorkflowProperties model =
            new WorkflowProperties()
                .withRepositoryOwner("atqxho")
                .withRepositoryName("geablgphuticndvk")
                .withBranchName("zwyiftyhxhur")
                .withDockerfile("ftyxolniw")
                .withDockerBuildContext("cukjf")
                .withDeploymentProperties(
                    new DeploymentProperties()
                        .withManifestType(ManifestType.HELM)
                        .withKubeManifestLocations(Arrays.asList("klryplwck", "asy"))
                        .withHelmChartPath("nddhsgcbacph")
                        .withHelmValues("koty")
                        .withOverrides(mapOf("gfgibm", "oulzndlikwyq")))
                .withNamespace("gakeqsr")
                .withAcr(
                    new Acr()
                        .withAcrSubscriptionId("zqqedq")
                        .withAcrResourceGroup("bciqfouflm")
                        .withAcrRegistryName("kzsmodm")
                        .withAcrRepositoryName("ougpbkwt"))
                .withOidcCredentials(
                    new GitHubWorkflowProfileOidcCredentials()
                        .withAzureClientId("duqkt")
                        .withAzureTenantId("spwgcuertumkdosv"))
                .withAksResourceId("hbmdgbbjfdd")
                .withLastWorkflowRun(new WorkflowRun())
                .withAuthStatus(ManifestType.KUBE);
        model = BinaryData.fromObject(model).toObject(WorkflowProperties.class);
        Assertions.assertEquals("atqxho", model.repositoryOwner());
        Assertions.assertEquals("geablgphuticndvk", model.repositoryName());
        Assertions.assertEquals("zwyiftyhxhur", model.branchName());
        Assertions.assertEquals("ftyxolniw", model.dockerfile());
        Assertions.assertEquals("cukjf", model.dockerBuildContext());
        Assertions.assertEquals(ManifestType.HELM, model.deploymentProperties().manifestType());
        Assertions.assertEquals("klryplwck", model.deploymentProperties().kubeManifestLocations().get(0));
        Assertions.assertEquals("nddhsgcbacph", model.deploymentProperties().helmChartPath());
        Assertions.assertEquals("koty", model.deploymentProperties().helmValues());
        Assertions.assertEquals("oulzndlikwyq", model.deploymentProperties().overrides().get("gfgibm"));
        Assertions.assertEquals("gakeqsr", model.namespace());
        Assertions.assertEquals("zqqedq", model.acr().acrSubscriptionId());
        Assertions.assertEquals("bciqfouflm", model.acr().acrResourceGroup());
        Assertions.assertEquals("kzsmodm", model.acr().acrRegistryName());
        Assertions.assertEquals("ougpbkwt", model.acr().acrRepositoryName());
        Assertions.assertEquals("duqkt", model.oidcCredentials().azureClientId());
        Assertions.assertEquals("spwgcuertumkdosv", model.oidcCredentials().azureTenantId());
        Assertions.assertEquals("hbmdgbbjfdd", model.aksResourceId());
        Assertions.assertEquals(ManifestType.KUBE, model.authStatus());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
