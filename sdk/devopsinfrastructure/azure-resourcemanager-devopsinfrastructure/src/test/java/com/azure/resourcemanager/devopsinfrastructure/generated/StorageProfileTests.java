// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.devopsinfrastructure.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.devopsinfrastructure.models.CachingType;
import com.azure.resourcemanager.devopsinfrastructure.models.DataDisk;
import com.azure.resourcemanager.devopsinfrastructure.models.OsDiskStorageAccountType;
import com.azure.resourcemanager.devopsinfrastructure.models.StorageAccountType;
import com.azure.resourcemanager.devopsinfrastructure.models.StorageProfile;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class StorageProfileTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        StorageProfile model = BinaryData.fromString(
            "{\"osDiskStorageAccountType\":\"StandardSSD\",\"dataDisks\":[{\"caching\":\"None\",\"diskSizeGiB\":103063252,\"storageAccountType\":\"StandardSSD_LRS\",\"driveLetter\":\"zw\"}]}")
            .toObject(StorageProfile.class);
        Assertions.assertEquals(OsDiskStorageAccountType.STANDARD_SSD, model.osDiskStorageAccountType());
        Assertions.assertEquals(CachingType.NONE, model.dataDisks().get(0).caching());
        Assertions.assertEquals(103063252, model.dataDisks().get(0).diskSizeGiB());
        Assertions.assertEquals(StorageAccountType.STANDARD_SSDLRS, model.dataDisks().get(0).storageAccountType());
        Assertions.assertEquals("zw", model.dataDisks().get(0).driveLetter());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        StorageProfile model = new StorageProfile().withOsDiskStorageAccountType(OsDiskStorageAccountType.STANDARD_SSD)
            .withDataDisks(Arrays.asList(new DataDisk().withCaching(CachingType.NONE)
                .withDiskSizeGiB(103063252)
                .withStorageAccountType(StorageAccountType.STANDARD_SSDLRS)
                .withDriveLetter("zw")));
        model = BinaryData.fromObject(model).toObject(StorageProfile.class);
        Assertions.assertEquals(OsDiskStorageAccountType.STANDARD_SSD, model.osDiskStorageAccountType());
        Assertions.assertEquals(CachingType.NONE, model.dataDisks().get(0).caching());
        Assertions.assertEquals(103063252, model.dataDisks().get(0).diskSizeGiB());
        Assertions.assertEquals(StorageAccountType.STANDARD_SSDLRS, model.dataDisks().get(0).storageAccountType());
        Assertions.assertEquals("zw", model.dataDisks().get(0).driveLetter());
    }
}
