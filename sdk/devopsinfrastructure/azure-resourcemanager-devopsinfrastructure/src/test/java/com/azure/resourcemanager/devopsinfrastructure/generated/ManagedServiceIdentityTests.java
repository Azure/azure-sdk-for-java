// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.devopsinfrastructure.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.devopsinfrastructure.models.ManagedServiceIdentity;
import com.azure.resourcemanager.devopsinfrastructure.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.devopsinfrastructure.models.UserAssignedIdentity;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ManagedServiceIdentityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ManagedServiceIdentity model = BinaryData.fromString(
            "{\"tenantId\":\"ufizuckyf\",\"principalId\":\"rfidfvzwdz\",\"type\":\"SystemAssigned\",\"userAssignedIdentities\":{\"km\":{\"clientId\":\"wisdkft\",\"principalId\":\"xmnteiwaop\"},\"uf\":{\"clientId\":\"c\",\"principalId\":\"xdcu\"},\"sne\":{\"clientId\":\"pymzidnsezcxtbzs\",\"principalId\":\"yc\"}}}")
            .toObject(ManagedServiceIdentity.class);
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED, model.type());
        Assertions.assertEquals("wisdkft", model.userAssignedIdentities().get("km").clientId());
        Assertions.assertEquals("xmnteiwaop", model.userAssignedIdentities().get("km").principalId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ManagedServiceIdentity model = new ManagedServiceIdentity().withType(ManagedServiceIdentityType.SYSTEM_ASSIGNED)
            .withUserAssignedIdentities(
                mapOf("km", new UserAssignedIdentity().withClientId("wisdkft").withPrincipalId("xmnteiwaop"), "uf",
                    new UserAssignedIdentity().withClientId("c").withPrincipalId("xdcu"), "sne",
                    new UserAssignedIdentity().withClientId("pymzidnsezcxtbzs").withPrincipalId("yc")));
        model = BinaryData.fromObject(model).toObject(ManagedServiceIdentity.class);
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED, model.type());
        Assertions.assertEquals("wisdkft", model.userAssignedIdentities().get("km").clientId());
        Assertions.assertEquals("xmnteiwaop", model.userAssignedIdentities().get("km").principalId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
