// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.devopsinfrastructure.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.devopsinfrastructure.DevOpsInfrastructureManager;
import com.azure.resourcemanager.devopsinfrastructure.models.AgentProfile;
import com.azure.resourcemanager.devopsinfrastructure.models.FabricProfile;
import com.azure.resourcemanager.devopsinfrastructure.models.ManagedServiceIdentity;
import com.azure.resourcemanager.devopsinfrastructure.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.devopsinfrastructure.models.OrganizationProfile;
import com.azure.resourcemanager.devopsinfrastructure.models.Pool;
import com.azure.resourcemanager.devopsinfrastructure.models.PoolProperties;
import com.azure.resourcemanager.devopsinfrastructure.models.ProvisioningState;
import com.azure.resourcemanager.devopsinfrastructure.models.ResourcePredictions;
import com.azure.resourcemanager.devopsinfrastructure.models.ResourcePredictionsProfile;
import com.azure.resourcemanager.devopsinfrastructure.models.UserAssignedIdentity;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class PoolsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Succeeded\",\"maximumConcurrency\":125087632,\"organizationProfile\":{\"kind\":\"OrganizationProfile\"},\"agentProfile\":{\"kind\":\"AgentProfile\",\"resourcePredictions\":{},\"resourcePredictionsProfile\":{\"kind\":\"ResourcePredictionsProfile\"}},\"fabricProfile\":{\"kind\":\"FabricProfile\"},\"devCenterProjectResourceId\":\"zkoj\"},\"identity\":{\"principalId\":\"pzfoqoui\",\"tenantId\":\"bxarzgszufoxci\",\"type\":\"UserAssigned\",\"userAssignedIdentities\":{\"gokdwbwhks\":{\"clientId\":\"oamciodh\",\"principalId\":\"azxkhnzbonlwnto\"},\"gsfraoyzkoow\":{\"clientId\":\"cmrvexzt\",\"principalId\":\"t\"},\"ykutwpf\":{\"clientId\":\"mnguxawqaldsyu\",\"principalId\":\"imerqfobwyznk\"},\"doakgtdlmkkzevdl\":{\"clientId\":\"a\",\"principalId\":\"hrskdsnfd\"}}},\"location\":\"wpusdsttwvogv\",\"tags\":{\"akufgmjz\":\"jdcngqqm\",\"grtwae\":\"wr\",\"zkopb\":\"u\",\"hziuiefozbhdms\":\"inrfdwoyu\"},\"id\":\"l\",\"name\":\"zqhof\",\"type\":\"rmaequ\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        DevOpsInfrastructureManager manager = DevOpsInfrastructureManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        Pool response
            = manager.pools()
                .define("pqblylsyxkqjnsj")
                .withRegion("f")
                .withExistingResourceGroup("wpu")
                .withTags(mapOf("bgdknnqv", "gj", "sgsahmkycgr", "aznqntoru", "s", "uwjuetaeburuvdmo", "tpuqujmq",
                    "zlxwabmqoefkifr"))
                .withProperties(new PoolProperties().withProvisioningState(ProvisioningState.ACCEPTED)
                    .withMaximumConcurrency(1868480291)
                    .withOrganizationProfile(new OrganizationProfile())
                    .withAgentProfile(new AgentProfile().withResourcePredictions(new ResourcePredictions())
                        .withResourcePredictionsProfile(new ResourcePredictionsProfile()))
                    .withFabricProfile(new FabricProfile())
                    .withDevCenterProjectResourceId("xsdszuempsb"))
                .withIdentity(
                    new ManagedServiceIdentity().withType(ManagedServiceIdentityType.USER_ASSIGNED)
                        .withUserAssignedIdentities(mapOf("fn", new UserAssignedIdentity(), "ppriol",
                            new UserAssignedIdentity(), "ucqdpfuvglsb", new UserAssignedIdentity(), "ncormrlxqtvcof",
                            new UserAssignedIdentity())))
                .create();

        Assertions.assertEquals("wpusdsttwvogv", response.location());
        Assertions.assertEquals("jdcngqqm", response.tags().get("akufgmjz"));
        Assertions.assertEquals(ProvisioningState.SUCCEEDED, response.properties().provisioningState());
        Assertions.assertEquals(125087632, response.properties().maximumConcurrency());
        Assertions.assertEquals("zkoj", response.properties().devCenterProjectResourceId());
        Assertions.assertEquals(ManagedServiceIdentityType.USER_ASSIGNED, response.identity().type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
