// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.devopsinfrastructure.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/**
 * Defines a GitHub organization.
 */
@Fluent
public final class GitHubOrganization {
    /*
     * The GitHub organization URL in which the pool should be created.
     */
    @JsonProperty(value = "url", required = true)
    private String url;

    /*
     * Optional list of repositories in which the pool should be created.
     */
    @JsonProperty(value = "repositories")
    private List<String> repositories;

    /**
     * Creates an instance of GitHubOrganization class.
     */
    public GitHubOrganization() {
    }

    /**
     * Get the url property: The GitHub organization URL in which the pool should be created.
     * 
     * @return the url value.
     */
    public String url() {
        return this.url;
    }

    /**
     * Set the url property: The GitHub organization URL in which the pool should be created.
     * 
     * @param url the url value to set.
     * @return the GitHubOrganization object itself.
     */
    public GitHubOrganization withUrl(String url) {
        this.url = url;
        return this;
    }

    /**
     * Get the repositories property: Optional list of repositories in which the pool should be created.
     * 
     * @return the repositories value.
     */
    public List<String> repositories() {
        return this.repositories;
    }

    /**
     * Set the repositories property: Optional list of repositories in which the pool should be created.
     * 
     * @param repositories the repositories value to set.
     * @return the GitHubOrganization object itself.
     */
    public GitHubOrganization withRepositories(List<String> repositories) {
        this.repositories = repositories;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (url() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property url in model GitHubOrganization"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(GitHubOrganization.class);
}
