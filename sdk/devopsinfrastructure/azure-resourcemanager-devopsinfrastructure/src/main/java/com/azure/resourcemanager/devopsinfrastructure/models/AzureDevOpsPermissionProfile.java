// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.devopsinfrastructure.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Defines the type of Azure DevOps pool permission.
 */
@Fluent
public final class AzureDevOpsPermissionProfile implements JsonSerializable<AzureDevOpsPermissionProfile> {
    /*
     * Determines who has admin permissions to the Azure DevOps pool.
     */
    private AzureDevOpsPermissionType kind;

    /*
     * User email addresses
     */
    private List<String> users;

    /*
     * Group email addresses
     */
    private List<String> groups;

    /**
     * Creates an instance of AzureDevOpsPermissionProfile class.
     */
    public AzureDevOpsPermissionProfile() {
    }

    /**
     * Get the kind property: Determines who has admin permissions to the Azure DevOps pool.
     * 
     * @return the kind value.
     */
    public AzureDevOpsPermissionType kind() {
        return this.kind;
    }

    /**
     * Set the kind property: Determines who has admin permissions to the Azure DevOps pool.
     * 
     * @param kind the kind value to set.
     * @return the AzureDevOpsPermissionProfile object itself.
     */
    public AzureDevOpsPermissionProfile withKind(AzureDevOpsPermissionType kind) {
        this.kind = kind;
        return this;
    }

    /**
     * Get the users property: User email addresses.
     * 
     * @return the users value.
     */
    public List<String> users() {
        return this.users;
    }

    /**
     * Set the users property: User email addresses.
     * 
     * @param users the users value to set.
     * @return the AzureDevOpsPermissionProfile object itself.
     */
    public AzureDevOpsPermissionProfile withUsers(List<String> users) {
        this.users = users;
        return this;
    }

    /**
     * Get the groups property: Group email addresses.
     * 
     * @return the groups value.
     */
    public List<String> groups() {
        return this.groups;
    }

    /**
     * Set the groups property: Group email addresses.
     * 
     * @param groups the groups value to set.
     * @return the AzureDevOpsPermissionProfile object itself.
     */
    public AzureDevOpsPermissionProfile withGroups(List<String> groups) {
        this.groups = groups;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (kind() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property kind in model AzureDevOpsPermissionProfile"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(AzureDevOpsPermissionProfile.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("kind", this.kind == null ? null : this.kind.toString());
        jsonWriter.writeArrayField("users", this.users, (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("groups", this.groups, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AzureDevOpsPermissionProfile from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AzureDevOpsPermissionProfile if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AzureDevOpsPermissionProfile.
     */
    public static AzureDevOpsPermissionProfile fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AzureDevOpsPermissionProfile deserializedAzureDevOpsPermissionProfile = new AzureDevOpsPermissionProfile();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("kind".equals(fieldName)) {
                    deserializedAzureDevOpsPermissionProfile.kind
                        = AzureDevOpsPermissionType.fromString(reader.getString());
                } else if ("users".equals(fieldName)) {
                    List<String> users = reader.readArray(reader1 -> reader1.getString());
                    deserializedAzureDevOpsPermissionProfile.users = users;
                } else if ("groups".equals(fieldName)) {
                    List<String> groups = reader.readArray(reader1 -> reader1.getString());
                    deserializedAzureDevOpsPermissionProfile.groups = groups;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAzureDevOpsPermissionProfile;
        });
    }
}
