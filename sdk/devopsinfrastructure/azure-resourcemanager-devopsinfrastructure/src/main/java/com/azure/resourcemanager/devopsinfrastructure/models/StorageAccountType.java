// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.devopsinfrastructure.models;

import com.azure.core.util.ExpandableStringEnum;
import java.util.Collection;

/**
 * StorageAccountType enums.
 */
public final class StorageAccountType extends ExpandableStringEnum<StorageAccountType> {
    /**
     * The data disk should use standard locally redundant storage.
     */
    public static final StorageAccountType STANDARD_LRS = fromString("Standard_LRS");

    /**
     * The data disk should use premium locally redundant storage.
     */
    public static final StorageAccountType PREMIUM_LRS = fromString("Premium_LRS");

    /**
     * The data disk should use standard SSD locally redundant storage.
     */
    public static final StorageAccountType STANDARD_SSDLRS = fromString("StandardSSD_LRS");

    /**
     * The data disk should use premium SSD zonal redundant storage.
     */
    public static final StorageAccountType PREMIUM_ZRS = fromString("Premium_ZRS");

    /**
     * The data disk should use standard SSD zonal redundant storage.
     */
    public static final StorageAccountType STANDARD_SSDZRS = fromString("StandardSSD_ZRS");

    /**
     * Creates a new instance of StorageAccountType value.
     * 
     * @deprecated Use the {@link #fromString(String)} factory method.
     */
    @Deprecated
    public StorageAccountType() {
    }

    /**
     * Creates or finds a StorageAccountType from its string representation.
     * 
     * @param name a name to look for.
     * @return the corresponding StorageAccountType.
     */
    public static StorageAccountType fromString(String name) {
        return fromString(name, StorageAccountType.class);
    }

    /**
     * Gets known StorageAccountType values.
     * 
     * @return known StorageAccountType values.
     */
    public static Collection<StorageAccountType> values() {
        return values(StorageAccountType.class);
    }
}
