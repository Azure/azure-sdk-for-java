// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.devopsinfrastructure.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The data disk of the VMSS.
 */
@Fluent
public final class DataDisk implements JsonSerializable<DataDisk> {
    /*
     * The type of caching to be enabled for the data disks. The default value for caching is readwrite. For information
     * about the caching options see:
     * https://blogs.msdn.microsoft.com/windowsazurestorage/2012/06/27/exploring-windows-azure-drives-disks-and-images/.
     */
    private CachingType caching;

    /*
     * The initial disk size in gigabytes.
     */
    private Integer diskSizeGiB;

    /*
     * The storage Account type to be used for the data disk. If omitted, the default is "standard_lrs".
     */
    private StorageAccountType storageAccountType;

    /*
     * The drive letter for the empty data disk. If not specified, it will be the first available letter.
     */
    private String driveLetter;

    /**
     * Creates an instance of DataDisk class.
     */
    public DataDisk() {
    }

    /**
     * Get the caching property: The type of caching to be enabled for the data disks. The default value for caching is
     * readwrite. For information about the caching options see:
     * https://blogs.msdn.microsoft.com/windowsazurestorage/2012/06/27/exploring-windows-azure-drives-disks-and-images/.
     * 
     * @return the caching value.
     */
    public CachingType caching() {
        return this.caching;
    }

    /**
     * Set the caching property: The type of caching to be enabled for the data disks. The default value for caching is
     * readwrite. For information about the caching options see:
     * https://blogs.msdn.microsoft.com/windowsazurestorage/2012/06/27/exploring-windows-azure-drives-disks-and-images/.
     * 
     * @param caching the caching value to set.
     * @return the DataDisk object itself.
     */
    public DataDisk withCaching(CachingType caching) {
        this.caching = caching;
        return this;
    }

    /**
     * Get the diskSizeGiB property: The initial disk size in gigabytes.
     * 
     * @return the diskSizeGiB value.
     */
    public Integer diskSizeGiB() {
        return this.diskSizeGiB;
    }

    /**
     * Set the diskSizeGiB property: The initial disk size in gigabytes.
     * 
     * @param diskSizeGiB the diskSizeGiB value to set.
     * @return the DataDisk object itself.
     */
    public DataDisk withDiskSizeGiB(Integer diskSizeGiB) {
        this.diskSizeGiB = diskSizeGiB;
        return this;
    }

    /**
     * Get the storageAccountType property: The storage Account type to be used for the data disk. If omitted, the
     * default is "standard_lrs".
     * 
     * @return the storageAccountType value.
     */
    public StorageAccountType storageAccountType() {
        return this.storageAccountType;
    }

    /**
     * Set the storageAccountType property: The storage Account type to be used for the data disk. If omitted, the
     * default is "standard_lrs".
     * 
     * @param storageAccountType the storageAccountType value to set.
     * @return the DataDisk object itself.
     */
    public DataDisk withStorageAccountType(StorageAccountType storageAccountType) {
        this.storageAccountType = storageAccountType;
        return this;
    }

    /**
     * Get the driveLetter property: The drive letter for the empty data disk. If not specified, it will be the first
     * available letter.
     * 
     * @return the driveLetter value.
     */
    public String driveLetter() {
        return this.driveLetter;
    }

    /**
     * Set the driveLetter property: The drive letter for the empty data disk. If not specified, it will be the first
     * available letter.
     * 
     * @param driveLetter the driveLetter value to set.
     * @return the DataDisk object itself.
     */
    public DataDisk withDriveLetter(String driveLetter) {
        this.driveLetter = driveLetter;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("caching", this.caching == null ? null : this.caching.toString());
        jsonWriter.writeNumberField("diskSizeGiB", this.diskSizeGiB);
        jsonWriter.writeStringField("storageAccountType",
            this.storageAccountType == null ? null : this.storageAccountType.toString());
        jsonWriter.writeStringField("driveLetter", this.driveLetter);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DataDisk from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DataDisk if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the DataDisk.
     */
    public static DataDisk fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DataDisk deserializedDataDisk = new DataDisk();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("caching".equals(fieldName)) {
                    deserializedDataDisk.caching = CachingType.fromString(reader.getString());
                } else if ("diskSizeGiB".equals(fieldName)) {
                    deserializedDataDisk.diskSizeGiB = reader.getNullable(JsonReader::getInt);
                } else if ("storageAccountType".equals(fieldName)) {
                    deserializedDataDisk.storageAccountType = StorageAccountType.fromString(reader.getString());
                } else if ("driveLetter".equals(fieldName)) {
                    deserializedDataDisk.driveLetter = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDataDisk;
        });
    }
}
