// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devopsinfrastructure.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.devopsinfrastructure.fluent.models.PoolUpdateProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.Map;

/** The type used for update operations of the Pool. */
@Fluent
public final class PoolUpdate {
    /*
     * The managed service identities assigned to this resource.
     */
    @JsonProperty(value = "identity")
    private ManagedServiceIdentity identity;

    /*
     * Resource tags.
     */
    @JsonProperty(value = "tags")
    @JsonInclude(value = JsonInclude.Include.NON_NULL, content = JsonInclude.Include.ALWAYS)
    private Map<String, String> tags;

    /*
     * The updatable properties of the Pool.
     */
    @JsonProperty(value = "properties")
    private PoolUpdateProperties innerProperties;

    /** Creates an instance of PoolUpdate class. */
    public PoolUpdate() {
    }

    /**
     * Get the identity property: The managed service identities assigned to this resource.
     *
     * @return the identity value.
     */
    public ManagedServiceIdentity identity() {
        return this.identity;
    }

    /**
     * Set the identity property: The managed service identities assigned to this resource.
     *
     * @param identity the identity value to set.
     * @return the PoolUpdate object itself.
     */
    public PoolUpdate withIdentity(ManagedServiceIdentity identity) {
        this.identity = identity;
        return this;
    }

    /**
     * Get the tags property: Resource tags.
     *
     * @return the tags value.
     */
    public Map<String, String> tags() {
        return this.tags;
    }

    /**
     * Set the tags property: Resource tags.
     *
     * @param tags the tags value to set.
     * @return the PoolUpdate object itself.
     */
    public PoolUpdate withTags(Map<String, String> tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Get the innerProperties property: The updatable properties of the Pool.
     *
     * @return the innerProperties value.
     */
    private PoolUpdateProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the provisioningState property: The status of the current operation.
     *
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Set the provisioningState property: The status of the current operation.
     *
     * @param provisioningState the provisioningState value to set.
     * @return the PoolUpdate object itself.
     */
    public PoolUpdate withProvisioningState(ProvisioningState provisioningState) {
        if (this.innerProperties() == null) {
            this.innerProperties = new PoolUpdateProperties();
        }
        this.innerProperties().withProvisioningState(provisioningState);
        return this;
    }

    /**
     * Get the maximumConcurrency property: Defines how many resources can there be created at any given time.
     *
     * @return the maximumConcurrency value.
     */
    public Integer maximumConcurrency() {
        return this.innerProperties() == null ? null : this.innerProperties().maximumConcurrency();
    }

    /**
     * Set the maximumConcurrency property: Defines how many resources can there be created at any given time.
     *
     * @param maximumConcurrency the maximumConcurrency value to set.
     * @return the PoolUpdate object itself.
     */
    public PoolUpdate withMaximumConcurrency(Integer maximumConcurrency) {
        if (this.innerProperties() == null) {
            this.innerProperties = new PoolUpdateProperties();
        }
        this.innerProperties().withMaximumConcurrency(maximumConcurrency);
        return this;
    }

    /**
     * Get the organizationProfile property: Defines the organization in which the pool will be used.
     *
     * @return the organizationProfile value.
     */
    public OrganizationProfile organizationProfile() {
        return this.innerProperties() == null ? null : this.innerProperties().organizationProfile();
    }

    /**
     * Set the organizationProfile property: Defines the organization in which the pool will be used.
     *
     * @param organizationProfile the organizationProfile value to set.
     * @return the PoolUpdate object itself.
     */
    public PoolUpdate withOrganizationProfile(OrganizationProfile organizationProfile) {
        if (this.innerProperties() == null) {
            this.innerProperties = new PoolUpdateProperties();
        }
        this.innerProperties().withOrganizationProfile(organizationProfile);
        return this;
    }

    /**
     * Get the agentProfile property: Defines how the machine will be handled once it executed a job.
     *
     * @return the agentProfile value.
     */
    public AgentProfile agentProfile() {
        return this.innerProperties() == null ? null : this.innerProperties().agentProfile();
    }

    /**
     * Set the agentProfile property: Defines how the machine will be handled once it executed a job.
     *
     * @param agentProfile the agentProfile value to set.
     * @return the PoolUpdate object itself.
     */
    public PoolUpdate withAgentProfile(AgentProfile agentProfile) {
        if (this.innerProperties() == null) {
            this.innerProperties = new PoolUpdateProperties();
        }
        this.innerProperties().withAgentProfile(agentProfile);
        return this;
    }

    /**
     * Get the fabricProfile property: Defines the type of fabric the agent will run on.
     *
     * @return the fabricProfile value.
     */
    public FabricProfile fabricProfile() {
        return this.innerProperties() == null ? null : this.innerProperties().fabricProfile();
    }

    /**
     * Set the fabricProfile property: Defines the type of fabric the agent will run on.
     *
     * @param fabricProfile the fabricProfile value to set.
     * @return the PoolUpdate object itself.
     */
    public PoolUpdate withFabricProfile(FabricProfile fabricProfile) {
        if (this.innerProperties() == null) {
            this.innerProperties = new PoolUpdateProperties();
        }
        this.innerProperties().withFabricProfile(fabricProfile);
        return this;
    }

    /**
     * Get the devCenterProjectResourceId property: The resource id of the DevCenter Project the pool belongs to.
     *
     * @return the devCenterProjectResourceId value.
     */
    public String devCenterProjectResourceId() {
        return this.innerProperties() == null ? null : this.innerProperties().devCenterProjectResourceId();
    }

    /**
     * Set the devCenterProjectResourceId property: The resource id of the DevCenter Project the pool belongs to.
     *
     * @param devCenterProjectResourceId the devCenterProjectResourceId value to set.
     * @return the PoolUpdate object itself.
     */
    public PoolUpdate withDevCenterProjectResourceId(String devCenterProjectResourceId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new PoolUpdateProperties();
        }
        this.innerProperties().withDevCenterProjectResourceId(devCenterProjectResourceId);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (identity() != null) {
            identity().validate();
        }
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }
}
