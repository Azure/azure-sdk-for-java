// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devopsinfrastructure.implementation;

import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.devopsinfrastructure.fluent.models.PoolInner;
import com.azure.resourcemanager.devopsinfrastructure.models.AgentProfile;
import com.azure.resourcemanager.devopsinfrastructure.models.FabricProfile;
import com.azure.resourcemanager.devopsinfrastructure.models.ManagedServiceIdentity;
import com.azure.resourcemanager.devopsinfrastructure.models.OrganizationProfile;
import com.azure.resourcemanager.devopsinfrastructure.models.Pool;
import com.azure.resourcemanager.devopsinfrastructure.models.PoolUpdate;
import com.azure.resourcemanager.devopsinfrastructure.models.ProvisioningState;
import java.util.Collections;
import java.util.Map;

public final class PoolImpl implements Pool, Pool.Definition, Pool.Update {
    private PoolInner innerObject;

    private final com.azure.resourcemanager.devopsinfrastructure.DevopsinfrastructureManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public ManagedServiceIdentity identity() {
        return this.innerModel().identity();
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public ProvisioningState provisioningState() {
        return this.innerModel().provisioningState();
    }

    public int maximumConcurrency() {
        return this.innerModel().maximumConcurrency();
    }

    public OrganizationProfile organizationProfile() {
        return this.innerModel().organizationProfile();
    }

    public AgentProfile agentProfile() {
        return this.innerModel().agentProfile();
    }

    public FabricProfile fabricProfile() {
        return this.innerModel().fabricProfile();
    }

    public String devCenterProjectResourceId() {
        return this.innerModel().devCenterProjectResourceId();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public PoolInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.devopsinfrastructure.DevopsinfrastructureManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String poolName;

    private PoolUpdate updateProperties;

    public PoolImpl withExistingResourceGroup(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public Pool create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getPools()
                .createOrUpdate(resourceGroupName, poolName, this.innerModel(), Context.NONE);
        return this;
    }

    public Pool create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getPools()
                .createOrUpdate(resourceGroupName, poolName, this.innerModel(), context);
        return this;
    }

    PoolImpl(String name, com.azure.resourcemanager.devopsinfrastructure.DevopsinfrastructureManager serviceManager) {
        this.innerObject = new PoolInner();
        this.serviceManager = serviceManager;
        this.poolName = name;
    }

    public PoolImpl update() {
        this.updateProperties = new PoolUpdate();
        return this;
    }

    public Pool apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getPools()
                .update(resourceGroupName, poolName, updateProperties, Context.NONE);
        return this;
    }

    public Pool apply(Context context) {
        this.innerObject =
            serviceManager.serviceClient().getPools().update(resourceGroupName, poolName, updateProperties, context);
        return this;
    }

    PoolImpl(
        PoolInner innerObject,
        com.azure.resourcemanager.devopsinfrastructure.DevopsinfrastructureManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.poolName = Utils.getValueFromIdByName(innerObject.id(), "pools");
    }

    public Pool refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getPools()
                .getByResourceGroupWithResponse(resourceGroupName, poolName, Context.NONE)
                .getValue();
        return this;
    }

    public Pool refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getPools()
                .getByResourceGroupWithResponse(resourceGroupName, poolName, context)
                .getValue();
        return this;
    }

    public PoolImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public PoolImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public PoolImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateProperties.withTags(tags);
            return this;
        }
    }

    public PoolImpl withIdentity(ManagedServiceIdentity identity) {
        if (isInCreateMode()) {
            this.innerModel().withIdentity(identity);
            return this;
        } else {
            this.updateProperties.withIdentity(identity);
            return this;
        }
    }

    public PoolImpl withProvisioningState(ProvisioningState provisioningState) {
        if (isInCreateMode()) {
            this.innerModel().withProvisioningState(provisioningState);
            return this;
        } else {
            this.updateProperties.withProvisioningState(provisioningState);
            return this;
        }
    }

    public PoolImpl withMaximumConcurrency(int maximumConcurrency) {
        this.innerModel().withMaximumConcurrency(maximumConcurrency);
        return this;
    }

    public PoolImpl withOrganizationProfile(OrganizationProfile organizationProfile) {
        if (isInCreateMode()) {
            this.innerModel().withOrganizationProfile(organizationProfile);
            return this;
        } else {
            this.updateProperties.withOrganizationProfile(organizationProfile);
            return this;
        }
    }

    public PoolImpl withAgentProfile(AgentProfile agentProfile) {
        if (isInCreateMode()) {
            this.innerModel().withAgentProfile(agentProfile);
            return this;
        } else {
            this.updateProperties.withAgentProfile(agentProfile);
            return this;
        }
    }

    public PoolImpl withFabricProfile(FabricProfile fabricProfile) {
        if (isInCreateMode()) {
            this.innerModel().withFabricProfile(fabricProfile);
            return this;
        } else {
            this.updateProperties.withFabricProfile(fabricProfile);
            return this;
        }
    }

    public PoolImpl withDevCenterProjectResourceId(String devCenterProjectResourceId) {
        if (isInCreateMode()) {
            this.innerModel().withDevCenterProjectResourceId(devCenterProjectResourceId);
            return this;
        } else {
            this.updateProperties.withDevCenterProjectResourceId(devCenterProjectResourceId);
            return this;
        }
    }

    public PoolImpl withMaximumConcurrency(Integer maximumConcurrency) {
        this.updateProperties.withMaximumConcurrency(maximumConcurrency);
        return this;
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
