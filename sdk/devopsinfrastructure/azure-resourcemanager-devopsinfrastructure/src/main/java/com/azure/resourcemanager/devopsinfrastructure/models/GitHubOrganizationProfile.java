// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.devopsinfrastructure.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * GitHub organization profile.
 */
@Fluent
public final class GitHubOrganizationProfile extends OrganizationProfile {
    /*
     * Discriminator property for OrganizationProfile.
     */
    private String kind = "GitHub";

    /*
     * The list of GitHub organizations/repositories the pool should be present in.
     */
    private List<GitHubOrganization> organizations;

    /**
     * Creates an instance of GitHubOrganizationProfile class.
     */
    public GitHubOrganizationProfile() {
    }

    /**
     * Get the kind property: Discriminator property for OrganizationProfile.
     * 
     * @return the kind value.
     */
    @Override
    public String kind() {
        return this.kind;
    }

    /**
     * Get the organizations property: The list of GitHub organizations/repositories the pool should be present in.
     * 
     * @return the organizations value.
     */
    public List<GitHubOrganization> organizations() {
        return this.organizations;
    }

    /**
     * Set the organizations property: The list of GitHub organizations/repositories the pool should be present in.
     * 
     * @param organizations the organizations value to set.
     * @return the GitHubOrganizationProfile object itself.
     */
    public GitHubOrganizationProfile withOrganizations(List<GitHubOrganization> organizations) {
        this.organizations = organizations;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (organizations() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property organizations in model GitHubOrganizationProfile"));
        } else {
            organizations().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(GitHubOrganizationProfile.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("organizations", this.organizations, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("kind", this.kind);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of GitHubOrganizationProfile from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of GitHubOrganizationProfile if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the GitHubOrganizationProfile.
     */
    public static GitHubOrganizationProfile fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            GitHubOrganizationProfile deserializedGitHubOrganizationProfile = new GitHubOrganizationProfile();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("organizations".equals(fieldName)) {
                    List<GitHubOrganization> organizations
                        = reader.readArray(reader1 -> GitHubOrganization.fromJson(reader1));
                    deserializedGitHubOrganizationProfile.organizations = organizations;
                } else if ("kind".equals(fieldName)) {
                    deserializedGitHubOrganizationProfile.kind = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedGitHubOrganizationProfile;
        });
    }
}
