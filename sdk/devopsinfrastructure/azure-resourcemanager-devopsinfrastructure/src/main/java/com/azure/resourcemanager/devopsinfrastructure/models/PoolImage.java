// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.devopsinfrastructure.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The VM image of the machines in the pool.
 */
@Fluent
public final class PoolImage implements JsonSerializable<PoolImage> {
    /*
     * The resource id of the image.
     */
    private String resourceId;

    /*
     * The image to use from a well-known set of images made available to customers.
     */
    private String wellKnownImageName;

    /*
     * List of aliases to reference the image by.
     */
    private List<String> aliases;

    /*
     * The percentage of the buffer to be allocated to this image.
     */
    private String buffer;

    /**
     * Creates an instance of PoolImage class.
     */
    public PoolImage() {
    }

    /**
     * Get the resourceId property: The resource id of the image.
     * 
     * @return the resourceId value.
     */
    public String resourceId() {
        return this.resourceId;
    }

    /**
     * Set the resourceId property: The resource id of the image.
     * 
     * @param resourceId the resourceId value to set.
     * @return the PoolImage object itself.
     */
    public PoolImage withResourceId(String resourceId) {
        this.resourceId = resourceId;
        return this;
    }

    /**
     * Get the wellKnownImageName property: The image to use from a well-known set of images made available to
     * customers.
     * 
     * @return the wellKnownImageName value.
     */
    public String wellKnownImageName() {
        return this.wellKnownImageName;
    }

    /**
     * Set the wellKnownImageName property: The image to use from a well-known set of images made available to
     * customers.
     * 
     * @param wellKnownImageName the wellKnownImageName value to set.
     * @return the PoolImage object itself.
     */
    public PoolImage withWellKnownImageName(String wellKnownImageName) {
        this.wellKnownImageName = wellKnownImageName;
        return this;
    }

    /**
     * Get the aliases property: List of aliases to reference the image by.
     * 
     * @return the aliases value.
     */
    public List<String> aliases() {
        return this.aliases;
    }

    /**
     * Set the aliases property: List of aliases to reference the image by.
     * 
     * @param aliases the aliases value to set.
     * @return the PoolImage object itself.
     */
    public PoolImage withAliases(List<String> aliases) {
        this.aliases = aliases;
        return this;
    }

    /**
     * Get the buffer property: The percentage of the buffer to be allocated to this image.
     * 
     * @return the buffer value.
     */
    public String buffer() {
        return this.buffer;
    }

    /**
     * Set the buffer property: The percentage of the buffer to be allocated to this image.
     * 
     * @param buffer the buffer value to set.
     * @return the PoolImage object itself.
     */
    public PoolImage withBuffer(String buffer) {
        this.buffer = buffer;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("resourceId", this.resourceId);
        jsonWriter.writeStringField("wellKnownImageName", this.wellKnownImageName);
        jsonWriter.writeArrayField("aliases", this.aliases, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("buffer", this.buffer);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PoolImage from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PoolImage if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the PoolImage.
     */
    public static PoolImage fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PoolImage deserializedPoolImage = new PoolImage();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("resourceId".equals(fieldName)) {
                    deserializedPoolImage.resourceId = reader.getString();
                } else if ("wellKnownImageName".equals(fieldName)) {
                    deserializedPoolImage.wellKnownImageName = reader.getString();
                } else if ("aliases".equals(fieldName)) {
                    List<String> aliases = reader.readArray(reader1 -> reader1.getString());
                    deserializedPoolImage.aliases = aliases;
                } else if ("buffer".equals(fieldName)) {
                    deserializedPoolImage.buffer = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPoolImage;
        });
    }
}
