// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devopsinfrastructure.models;

import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.devopsinfrastructure.fluent.models.PoolInner;
import java.util.Map;

/** An immutable client-side representation of Pool. */
public interface Pool {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     *
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     *
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     *
     * @return the type value.
     */
    String type();

    /**
     * Gets the location property: The geo-location where the resource lives.
     *
     * @return the location value.
     */
    String location();

    /**
     * Gets the tags property: Resource tags.
     *
     * @return the tags value.
     */
    Map<String, String> tags();

    /**
     * Gets the identity property: The managed service identities assigned to this resource.
     *
     * @return the identity value.
     */
    ManagedServiceIdentity identity();

    /**
     * Gets the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     *
     * @return the systemData value.
     */
    SystemData systemData();

    /**
     * Gets the provisioningState property: The status of the current operation.
     *
     * @return the provisioningState value.
     */
    ProvisioningState provisioningState();

    /**
     * Gets the maximumConcurrency property: Defines how many resources can there be created at any given time.
     *
     * @return the maximumConcurrency value.
     */
    int maximumConcurrency();

    /**
     * Gets the organizationProfile property: Defines the organization in which the pool will be used.
     *
     * @return the organizationProfile value.
     */
    OrganizationProfile organizationProfile();

    /**
     * Gets the agentProfile property: Defines how the machine will be handled once it executed a job.
     *
     * @return the agentProfile value.
     */
    AgentProfile agentProfile();

    /**
     * Gets the fabricProfile property: Defines the type of fabric the agent will run on.
     *
     * @return the fabricProfile value.
     */
    FabricProfile fabricProfile();

    /**
     * Gets the devCenterProjectResourceId property: The resource id of the DevCenter Project the pool belongs to.
     *
     * @return the devCenterProjectResourceId value.
     */
    String devCenterProjectResourceId();

    /**
     * Gets the region of the resource.
     *
     * @return the region of the resource.
     */
    Region region();

    /**
     * Gets the name of the resource region.
     *
     * @return the name of the resource region.
     */
    String regionName();

    /**
     * Gets the name of the resource group.
     *
     * @return the name of the resource group.
     */
    String resourceGroupName();

    /**
     * Gets the inner com.azure.resourcemanager.devopsinfrastructure.fluent.models.PoolInner object.
     *
     * @return the inner object.
     */
    PoolInner innerModel();

    /** The entirety of the Pool definition. */
    interface Definition
        extends DefinitionStages.Blank,
            DefinitionStages.WithLocation,
            DefinitionStages.WithResourceGroup,
            DefinitionStages.WithCreate {
    }

    /** The Pool definition stages. */
    interface DefinitionStages {
        /** The first stage of the Pool definition. */
        interface Blank extends WithLocation {
        }

        /** The stage of the Pool definition allowing to specify location. */
        interface WithLocation {
            /**
             * Specifies the region for the resource.
             *
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithResourceGroup withRegion(Region location);

            /**
             * Specifies the region for the resource.
             *
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithResourceGroup withRegion(String location);
        }

        /** The stage of the Pool definition allowing to specify parent resource. */
        interface WithResourceGroup {
            /**
             * Specifies resourceGroupName.
             *
             * @param resourceGroupName The name of the resource group. The name is case insensitive.
             * @return the next definition stage.
             */
            WithCreate withExistingResourceGroup(String resourceGroupName);
        }

        /**
         * The stage of the Pool definition which contains all the minimum required properties for the resource to be
         * created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate
            extends DefinitionStages.WithTags,
                DefinitionStages.WithIdentity,
                DefinitionStages.WithProvisioningState,
                DefinitionStages.WithMaximumConcurrency,
                DefinitionStages.WithOrganizationProfile,
                DefinitionStages.WithAgentProfile,
                DefinitionStages.WithFabricProfile,
                DefinitionStages.WithDevCenterProjectResourceId {
            /**
             * Executes the create request.
             *
             * @return the created resource.
             */
            Pool create();

            /**
             * Executes the create request.
             *
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            Pool create(Context context);
        }

        /** The stage of the Pool definition allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             *
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            WithCreate withTags(Map<String, String> tags);
        }

        /** The stage of the Pool definition allowing to specify identity. */
        interface WithIdentity {
            /**
             * Specifies the identity property: The managed service identities assigned to this resource..
             *
             * @param identity The managed service identities assigned to this resource.
             * @return the next definition stage.
             */
            WithCreate withIdentity(ManagedServiceIdentity identity);
        }

        /** The stage of the Pool definition allowing to specify provisioningState. */
        interface WithProvisioningState {
            /**
             * Specifies the provisioningState property: The status of the current operation..
             *
             * @param provisioningState The status of the current operation.
             * @return the next definition stage.
             */
            WithCreate withProvisioningState(ProvisioningState provisioningState);
        }

        /** The stage of the Pool definition allowing to specify maximumConcurrency. */
        interface WithMaximumConcurrency {
            /**
             * Specifies the maximumConcurrency property: Defines how many resources can there be created at any given
             * time..
             *
             * @param maximumConcurrency Defines how many resources can there be created at any given time.
             * @return the next definition stage.
             */
            WithCreate withMaximumConcurrency(int maximumConcurrency);
        }

        /** The stage of the Pool definition allowing to specify organizationProfile. */
        interface WithOrganizationProfile {
            /**
             * Specifies the organizationProfile property: Defines the organization in which the pool will be used..
             *
             * @param organizationProfile Defines the organization in which the pool will be used.
             * @return the next definition stage.
             */
            WithCreate withOrganizationProfile(OrganizationProfile organizationProfile);
        }

        /** The stage of the Pool definition allowing to specify agentProfile. */
        interface WithAgentProfile {
            /**
             * Specifies the agentProfile property: Defines how the machine will be handled once it executed a job..
             *
             * @param agentProfile Defines how the machine will be handled once it executed a job.
             * @return the next definition stage.
             */
            WithCreate withAgentProfile(AgentProfile agentProfile);
        }

        /** The stage of the Pool definition allowing to specify fabricProfile. */
        interface WithFabricProfile {
            /**
             * Specifies the fabricProfile property: Defines the type of fabric the agent will run on..
             *
             * @param fabricProfile Defines the type of fabric the agent will run on.
             * @return the next definition stage.
             */
            WithCreate withFabricProfile(FabricProfile fabricProfile);
        }

        /** The stage of the Pool definition allowing to specify devCenterProjectResourceId. */
        interface WithDevCenterProjectResourceId {
            /**
             * Specifies the devCenterProjectResourceId property: The resource id of the DevCenter Project the pool
             * belongs to..
             *
             * @param devCenterProjectResourceId The resource id of the DevCenter Project the pool belongs to.
             * @return the next definition stage.
             */
            WithCreate withDevCenterProjectResourceId(String devCenterProjectResourceId);
        }
    }

    /**
     * Begins update for the Pool resource.
     *
     * @return the stage of resource update.
     */
    Pool.Update update();

    /** The template for Pool update. */
    interface Update
        extends UpdateStages.WithTags,
            UpdateStages.WithIdentity,
            UpdateStages.WithProvisioningState,
            UpdateStages.WithMaximumConcurrency,
            UpdateStages.WithOrganizationProfile,
            UpdateStages.WithAgentProfile,
            UpdateStages.WithFabricProfile,
            UpdateStages.WithDevCenterProjectResourceId {
        /**
         * Executes the update request.
         *
         * @return the updated resource.
         */
        Pool apply();

        /**
         * Executes the update request.
         *
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        Pool apply(Context context);
    }

    /** The Pool update stages. */
    interface UpdateStages {
        /** The stage of the Pool update allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             *
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            Update withTags(Map<String, String> tags);
        }

        /** The stage of the Pool update allowing to specify identity. */
        interface WithIdentity {
            /**
             * Specifies the identity property: The managed service identities assigned to this resource..
             *
             * @param identity The managed service identities assigned to this resource.
             * @return the next definition stage.
             */
            Update withIdentity(ManagedServiceIdentity identity);
        }

        /** The stage of the Pool update allowing to specify provisioningState. */
        interface WithProvisioningState {
            /**
             * Specifies the provisioningState property: The status of the current operation..
             *
             * @param provisioningState The status of the current operation.
             * @return the next definition stage.
             */
            Update withProvisioningState(ProvisioningState provisioningState);
        }

        /** The stage of the Pool update allowing to specify maximumConcurrency. */
        interface WithMaximumConcurrency {
            /**
             * Specifies the maximumConcurrency property: Defines how many resources can there be created at any given
             * time..
             *
             * @param maximumConcurrency Defines how many resources can there be created at any given time.
             * @return the next definition stage.
             */
            Update withMaximumConcurrency(Integer maximumConcurrency);
        }

        /** The stage of the Pool update allowing to specify organizationProfile. */
        interface WithOrganizationProfile {
            /**
             * Specifies the organizationProfile property: Defines the organization in which the pool will be used..
             *
             * @param organizationProfile Defines the organization in which the pool will be used.
             * @return the next definition stage.
             */
            Update withOrganizationProfile(OrganizationProfile organizationProfile);
        }

        /** The stage of the Pool update allowing to specify agentProfile. */
        interface WithAgentProfile {
            /**
             * Specifies the agentProfile property: Defines how the machine will be handled once it executed a job..
             *
             * @param agentProfile Defines how the machine will be handled once it executed a job.
             * @return the next definition stage.
             */
            Update withAgentProfile(AgentProfile agentProfile);
        }

        /** The stage of the Pool update allowing to specify fabricProfile. */
        interface WithFabricProfile {
            /**
             * Specifies the fabricProfile property: Defines the type of fabric the agent will run on..
             *
             * @param fabricProfile Defines the type of fabric the agent will run on.
             * @return the next definition stage.
             */
            Update withFabricProfile(FabricProfile fabricProfile);
        }

        /** The stage of the Pool update allowing to specify devCenterProjectResourceId. */
        interface WithDevCenterProjectResourceId {
            /**
             * Specifies the devCenterProjectResourceId property: The resource id of the DevCenter Project the pool
             * belongs to..
             *
             * @param devCenterProjectResourceId The resource id of the DevCenter Project the pool belongs to.
             * @return the next definition stage.
             */
            Update withDevCenterProjectResourceId(String devCenterProjectResourceId);
        }
    }

    /**
     * Refreshes the resource to sync with Azure.
     *
     * @return the refreshed resource.
     */
    Pool refresh();

    /**
     * Refreshes the resource to sync with Azure.
     *
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    Pool refresh(Context context);
}
