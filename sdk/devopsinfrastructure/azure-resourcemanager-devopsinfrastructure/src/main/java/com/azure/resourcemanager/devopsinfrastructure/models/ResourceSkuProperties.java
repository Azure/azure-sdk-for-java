// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.devopsinfrastructure.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/**
 * Properties of a ResourceSku.
 */
@Immutable
public final class ResourceSkuProperties {
    /*
     * The type of resource the SKU applies to.
     */
    @JsonProperty(value = "resourceType", required = true)
    private String resourceType;

    /*
     * The tier of virtual machines in a scale set
     */
    @JsonProperty(value = "tier", required = true)
    private String tier;

    /*
     * The size of the SKU.
     */
    @JsonProperty(value = "size", required = true)
    private String size;

    /*
     * The family of the SKU.
     */
    @JsonProperty(value = "family", required = true)
    private String family;

    /*
     * The set of locations that the SKU is available.
     */
    @JsonProperty(value = "locations", required = true)
    private List<String> locations;

    /*
     * A list of locations and availability zones in those locations where the SKU is available
     */
    @JsonProperty(value = "locationInfo", required = true)
    private List<ResourceSkuLocationInfo> locationInfo;

    /*
     * Name value pairs to describe the capability.
     */
    @JsonProperty(value = "capabilities", required = true)
    private List<ResourceSkuCapabilities> capabilities;

    /*
     * The restrictions of the SKU.
     */
    @JsonProperty(value = "restrictions", required = true)
    private List<ResourceSkuRestrictions> restrictions;

    /**
     * Creates an instance of ResourceSkuProperties class.
     */
    private ResourceSkuProperties() {
    }

    /**
     * Get the resourceType property: The type of resource the SKU applies to.
     * 
     * @return the resourceType value.
     */
    public String resourceType() {
        return this.resourceType;
    }

    /**
     * Get the tier property: The tier of virtual machines in a scale set.
     * 
     * @return the tier value.
     */
    public String tier() {
        return this.tier;
    }

    /**
     * Get the size property: The size of the SKU.
     * 
     * @return the size value.
     */
    public String size() {
        return this.size;
    }

    /**
     * Get the family property: The family of the SKU.
     * 
     * @return the family value.
     */
    public String family() {
        return this.family;
    }

    /**
     * Get the locations property: The set of locations that the SKU is available.
     * 
     * @return the locations value.
     */
    public List<String> locations() {
        return this.locations;
    }

    /**
     * Get the locationInfo property: A list of locations and availability zones in those locations where the SKU is
     * available.
     * 
     * @return the locationInfo value.
     */
    public List<ResourceSkuLocationInfo> locationInfo() {
        return this.locationInfo;
    }

    /**
     * Get the capabilities property: Name value pairs to describe the capability.
     * 
     * @return the capabilities value.
     */
    public List<ResourceSkuCapabilities> capabilities() {
        return this.capabilities;
    }

    /**
     * Get the restrictions property: The restrictions of the SKU.
     * 
     * @return the restrictions value.
     */
    public List<ResourceSkuRestrictions> restrictions() {
        return this.restrictions;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (resourceType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property resourceType in model ResourceSkuProperties"));
        }
        if (tier() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property tier in model ResourceSkuProperties"));
        }
        if (size() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property size in model ResourceSkuProperties"));
        }
        if (family() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property family in model ResourceSkuProperties"));
        }
        if (locations() == null) {
            throw LOGGER.atError()
                .log(
                    new IllegalArgumentException("Missing required property locations in model ResourceSkuProperties"));
        }
        if (locationInfo() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property locationInfo in model ResourceSkuProperties"));
        } else {
            locationInfo().forEach(e -> e.validate());
        }
        if (capabilities() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property capabilities in model ResourceSkuProperties"));
        } else {
            capabilities().forEach(e -> e.validate());
        }
        if (restrictions() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property restrictions in model ResourceSkuProperties"));
        } else {
            restrictions().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ResourceSkuProperties.class);
}
