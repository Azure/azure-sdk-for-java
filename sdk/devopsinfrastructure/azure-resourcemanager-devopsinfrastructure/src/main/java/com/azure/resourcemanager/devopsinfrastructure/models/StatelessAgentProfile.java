// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.devopsinfrastructure.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Stateless profile meaning that the machines will be cleaned up after running a job.
 */
@Fluent
public final class StatelessAgentProfile extends AgentProfile {
    /*
     * Discriminator property for AgentProfile.
     */
    private String kind = "Stateless";

    /**
     * Creates an instance of StatelessAgentProfile class.
     */
    public StatelessAgentProfile() {
    }

    /**
     * Get the kind property: Discriminator property for AgentProfile.
     * 
     * @return the kind value.
     */
    @Override
    public String kind() {
        return this.kind;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public StatelessAgentProfile withResourcePredictions(ResourcePredictions resourcePredictions) {
        super.withResourcePredictions(resourcePredictions);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public StatelessAgentProfile withResourcePredictionsProfile(ResourcePredictionsProfile resourcePredictionsProfile) {
        super.withResourcePredictionsProfile(resourcePredictionsProfile);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (resourcePredictions() != null) {
            resourcePredictions().validate();
        }
        if (resourcePredictionsProfile() != null) {
            resourcePredictionsProfile().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("resourcePredictions", resourcePredictions());
        jsonWriter.writeJsonField("resourcePredictionsProfile", resourcePredictionsProfile());
        jsonWriter.writeStringField("kind", this.kind);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StatelessAgentProfile from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of StatelessAgentProfile if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the StatelessAgentProfile.
     */
    public static StatelessAgentProfile fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            StatelessAgentProfile deserializedStatelessAgentProfile = new StatelessAgentProfile();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("resourcePredictions".equals(fieldName)) {
                    deserializedStatelessAgentProfile.withResourcePredictions(ResourcePredictions.fromJson(reader));
                } else if ("resourcePredictionsProfile".equals(fieldName)) {
                    deserializedStatelessAgentProfile
                        .withResourcePredictionsProfile(ResourcePredictionsProfile.fromJson(reader));
                } else if ("kind".equals(fieldName)) {
                    deserializedStatelessAgentProfile.kind = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedStatelessAgentProfile;
        });
    }
}
