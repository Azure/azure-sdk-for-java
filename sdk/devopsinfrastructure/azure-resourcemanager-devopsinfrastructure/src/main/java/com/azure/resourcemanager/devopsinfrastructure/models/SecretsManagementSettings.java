// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.devopsinfrastructure.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The secret management settings of the machines in the pool.
 */
@Fluent
public final class SecretsManagementSettings implements JsonSerializable<SecretsManagementSettings> {
    /*
     * Where to store certificates on the machine.
     */
    private String certificateStoreLocation;

    /*
     * The list of certificates to install on all machines in the pool.
     */
    private List<String> observedCertificates;

    /*
     * Defines if the key of the certificates should be exportable.
     */
    private boolean keyExportable;

    /**
     * Creates an instance of SecretsManagementSettings class.
     */
    public SecretsManagementSettings() {
    }

    /**
     * Get the certificateStoreLocation property: Where to store certificates on the machine.
     * 
     * @return the certificateStoreLocation value.
     */
    public String certificateStoreLocation() {
        return this.certificateStoreLocation;
    }

    /**
     * Set the certificateStoreLocation property: Where to store certificates on the machine.
     * 
     * @param certificateStoreLocation the certificateStoreLocation value to set.
     * @return the SecretsManagementSettings object itself.
     */
    public SecretsManagementSettings withCertificateStoreLocation(String certificateStoreLocation) {
        this.certificateStoreLocation = certificateStoreLocation;
        return this;
    }

    /**
     * Get the observedCertificates property: The list of certificates to install on all machines in the pool.
     * 
     * @return the observedCertificates value.
     */
    public List<String> observedCertificates() {
        return this.observedCertificates;
    }

    /**
     * Set the observedCertificates property: The list of certificates to install on all machines in the pool.
     * 
     * @param observedCertificates the observedCertificates value to set.
     * @return the SecretsManagementSettings object itself.
     */
    public SecretsManagementSettings withObservedCertificates(List<String> observedCertificates) {
        this.observedCertificates = observedCertificates;
        return this;
    }

    /**
     * Get the keyExportable property: Defines if the key of the certificates should be exportable.
     * 
     * @return the keyExportable value.
     */
    public boolean keyExportable() {
        return this.keyExportable;
    }

    /**
     * Set the keyExportable property: Defines if the key of the certificates should be exportable.
     * 
     * @param keyExportable the keyExportable value to set.
     * @return the SecretsManagementSettings object itself.
     */
    public SecretsManagementSettings withKeyExportable(boolean keyExportable) {
        this.keyExportable = keyExportable;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (observedCertificates() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property observedCertificates in model SecretsManagementSettings"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(SecretsManagementSettings.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("observedCertificates", this.observedCertificates,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeBooleanField("keyExportable", this.keyExportable);
        jsonWriter.writeStringField("certificateStoreLocation", this.certificateStoreLocation);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SecretsManagementSettings from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SecretsManagementSettings if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SecretsManagementSettings.
     */
    public static SecretsManagementSettings fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SecretsManagementSettings deserializedSecretsManagementSettings = new SecretsManagementSettings();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("observedCertificates".equals(fieldName)) {
                    List<String> observedCertificates = reader.readArray(reader1 -> reader1.getString());
                    deserializedSecretsManagementSettings.observedCertificates = observedCertificates;
                } else if ("keyExportable".equals(fieldName)) {
                    deserializedSecretsManagementSettings.keyExportable = reader.getBoolean();
                } else if ("certificateStoreLocation".equals(fieldName)) {
                    deserializedSecretsManagementSettings.certificateStoreLocation = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSecretsManagementSettings;
        });
    }
}
