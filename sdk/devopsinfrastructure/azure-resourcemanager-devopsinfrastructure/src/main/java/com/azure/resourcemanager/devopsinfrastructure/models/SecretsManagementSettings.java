// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.devopsinfrastructure.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/**
 * The secret management settings of the machines in the pool.
 */
@Fluent
public final class SecretsManagementSettings {
    /*
     * Where to store certificates on the machine.
     */
    @JsonProperty(value = "certificateStoreLocation")
    private String certificateStoreLocation;

    /*
     * The list of certificates to install on all machines in the pool.
     */
    @JsonProperty(value = "observedCertificates", required = true)
    private List<String> observedCertificates;

    /*
     * Defines if the key of the certificates should be exportable.
     */
    @JsonProperty(value = "keyExportable", required = true)
    private boolean keyExportable;

    /**
     * Creates an instance of SecretsManagementSettings class.
     */
    public SecretsManagementSettings() {
    }

    /**
     * Get the certificateStoreLocation property: Where to store certificates on the machine.
     * 
     * @return the certificateStoreLocation value.
     */
    public String certificateStoreLocation() {
        return this.certificateStoreLocation;
    }

    /**
     * Set the certificateStoreLocation property: Where to store certificates on the machine.
     * 
     * @param certificateStoreLocation the certificateStoreLocation value to set.
     * @return the SecretsManagementSettings object itself.
     */
    public SecretsManagementSettings withCertificateStoreLocation(String certificateStoreLocation) {
        this.certificateStoreLocation = certificateStoreLocation;
        return this;
    }

    /**
     * Get the observedCertificates property: The list of certificates to install on all machines in the pool.
     * 
     * @return the observedCertificates value.
     */
    public List<String> observedCertificates() {
        return this.observedCertificates;
    }

    /**
     * Set the observedCertificates property: The list of certificates to install on all machines in the pool.
     * 
     * @param observedCertificates the observedCertificates value to set.
     * @return the SecretsManagementSettings object itself.
     */
    public SecretsManagementSettings withObservedCertificates(List<String> observedCertificates) {
        this.observedCertificates = observedCertificates;
        return this;
    }

    /**
     * Get the keyExportable property: Defines if the key of the certificates should be exportable.
     * 
     * @return the keyExportable value.
     */
    public boolean keyExportable() {
        return this.keyExportable;
    }

    /**
     * Set the keyExportable property: Defines if the key of the certificates should be exportable.
     * 
     * @param keyExportable the keyExportable value to set.
     * @return the SecretsManagementSettings object itself.
     */
    public SecretsManagementSettings withKeyExportable(boolean keyExportable) {
        this.keyExportable = keyExportable;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (observedCertificates() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property observedCertificates in model SecretsManagementSettings"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(SecretsManagementSettings.class);
}
