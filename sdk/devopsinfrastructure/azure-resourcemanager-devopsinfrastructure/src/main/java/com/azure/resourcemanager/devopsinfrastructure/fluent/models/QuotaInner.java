// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.devopsinfrastructure.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Describes Resource Quota.
 */
@Immutable
public final class QuotaInner implements JsonSerializable<QuotaInner> {
    /*
     * Fully qualified ARM resource id
     */
    private String id;

    /*
     * The unit of usage measurement.
     */
    private String unit;

    /*
     * The current usage of the resource.
     */
    private long currentValue;

    /*
     * The maximum permitted usage of the resource.
     */
    private long limit;

    /**
     * Creates an instance of QuotaInner class.
     */
    private QuotaInner() {
    }

    /**
     * Get the id property: Fully qualified ARM resource id.
     * 
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Get the unit property: The unit of usage measurement.
     * 
     * @return the unit value.
     */
    public String unit() {
        return this.unit;
    }

    /**
     * Get the currentValue property: The current usage of the resource.
     * 
     * @return the currentValue value.
     */
    public long currentValue() {
        return this.currentValue;
    }

    /**
     * Get the limit property: The maximum permitted usage of the resource.
     * 
     * @return the limit value.
     */
    public long limit() {
        return this.limit;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (id() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property id in model QuotaInner"));
        }
        if (unit() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property unit in model QuotaInner"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(QuotaInner.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeStringField("unit", this.unit);
        jsonWriter.writeLongField("currentValue", this.currentValue);
        jsonWriter.writeLongField("limit", this.limit);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of QuotaInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of QuotaInner if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the QuotaInner.
     */
    public static QuotaInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            QuotaInner deserializedQuotaInner = new QuotaInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedQuotaInner.id = reader.getString();
                } else if ("unit".equals(fieldName)) {
                    deserializedQuotaInner.unit = reader.getString();
                } else if ("currentValue".equals(fieldName)) {
                    deserializedQuotaInner.currentValue = reader.getLong();
                } else if ("limit".equals(fieldName)) {
                    deserializedQuotaInner.limit = reader.getLong();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedQuotaInner;
        });
    }
}
