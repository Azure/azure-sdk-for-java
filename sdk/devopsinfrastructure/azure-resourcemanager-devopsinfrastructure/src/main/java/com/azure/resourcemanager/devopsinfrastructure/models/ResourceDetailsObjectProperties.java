// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.devopsinfrastructure.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Details of the ResourceDetailsObject.
 */
@Immutable
public final class ResourceDetailsObjectProperties implements JsonSerializable<ResourceDetailsObjectProperties> {
    /*
     * The status of the resource.
     */
    private ResourceStatus status;

    /*
     * The image name of the resource.
     */
    private String image;

    /*
     * The version of the image running on the resource.
     */
    private String imageVersion;

    /**
     * Creates an instance of ResourceDetailsObjectProperties class.
     */
    private ResourceDetailsObjectProperties() {
    }

    /**
     * Get the status property: The status of the resource.
     * 
     * @return the status value.
     */
    public ResourceStatus status() {
        return this.status;
    }

    /**
     * Get the image property: The image name of the resource.
     * 
     * @return the image value.
     */
    public String image() {
        return this.image;
    }

    /**
     * Get the imageVersion property: The version of the image running on the resource.
     * 
     * @return the imageVersion value.
     */
    public String imageVersion() {
        return this.imageVersion;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (status() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property status in model ResourceDetailsObjectProperties"));
        }
        if (image() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property image in model ResourceDetailsObjectProperties"));
        }
        if (imageVersion() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property imageVersion in model ResourceDetailsObjectProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ResourceDetailsObjectProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("status", this.status == null ? null : this.status.toString());
        jsonWriter.writeStringField("image", this.image);
        jsonWriter.writeStringField("imageVersion", this.imageVersion);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ResourceDetailsObjectProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ResourceDetailsObjectProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ResourceDetailsObjectProperties.
     */
    public static ResourceDetailsObjectProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ResourceDetailsObjectProperties deserializedResourceDetailsObjectProperties
                = new ResourceDetailsObjectProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("status".equals(fieldName)) {
                    deserializedResourceDetailsObjectProperties.status = ResourceStatus.fromString(reader.getString());
                } else if ("image".equals(fieldName)) {
                    deserializedResourceDetailsObjectProperties.image = reader.getString();
                } else if ("imageVersion".equals(fieldName)) {
                    deserializedResourceDetailsObjectProperties.imageVersion = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedResourceDetailsObjectProperties;
        });
    }
}
