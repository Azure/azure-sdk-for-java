// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.devopsinfrastructure.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * The updatable properties of the Pool.
 */
@Fluent
public final class PoolUpdateProperties {
    /*
     * The status of the current operation.
     */
    @JsonProperty(value = "provisioningState")
    private ProvisioningState provisioningState;

    /*
     * Defines how many resources can there be created at any given time.
     */
    @JsonProperty(value = "maximumConcurrency")
    private Integer maximumConcurrency;

    /*
     * Defines the organization in which the pool will be used.
     */
    @JsonProperty(value = "organizationProfile")
    private OrganizationProfile organizationProfile;

    /*
     * Defines how the machine will be handled once it executed a job.
     */
    @JsonProperty(value = "agentProfile")
    private AgentProfile agentProfile;

    /*
     * Defines the type of fabric the agent will run on.
     */
    @JsonProperty(value = "fabricProfile")
    private FabricProfile fabricProfile;

    /*
     * The resource id of the DevCenter Project the pool belongs to.
     */
    @JsonProperty(value = "devCenterProjectResourceId")
    private String devCenterProjectResourceId;

    /**
     * Creates an instance of PoolUpdateProperties class.
     */
    public PoolUpdateProperties() {
    }

    /**
     * Get the provisioningState property: The status of the current operation.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Set the provisioningState property: The status of the current operation.
     * 
     * @param provisioningState the provisioningState value to set.
     * @return the PoolUpdateProperties object itself.
     */
    public PoolUpdateProperties withProvisioningState(ProvisioningState provisioningState) {
        this.provisioningState = provisioningState;
        return this;
    }

    /**
     * Get the maximumConcurrency property: Defines how many resources can there be created at any given time.
     * 
     * @return the maximumConcurrency value.
     */
    public Integer maximumConcurrency() {
        return this.maximumConcurrency;
    }

    /**
     * Set the maximumConcurrency property: Defines how many resources can there be created at any given time.
     * 
     * @param maximumConcurrency the maximumConcurrency value to set.
     * @return the PoolUpdateProperties object itself.
     */
    public PoolUpdateProperties withMaximumConcurrency(Integer maximumConcurrency) {
        this.maximumConcurrency = maximumConcurrency;
        return this;
    }

    /**
     * Get the organizationProfile property: Defines the organization in which the pool will be used.
     * 
     * @return the organizationProfile value.
     */
    public OrganizationProfile organizationProfile() {
        return this.organizationProfile;
    }

    /**
     * Set the organizationProfile property: Defines the organization in which the pool will be used.
     * 
     * @param organizationProfile the organizationProfile value to set.
     * @return the PoolUpdateProperties object itself.
     */
    public PoolUpdateProperties withOrganizationProfile(OrganizationProfile organizationProfile) {
        this.organizationProfile = organizationProfile;
        return this;
    }

    /**
     * Get the agentProfile property: Defines how the machine will be handled once it executed a job.
     * 
     * @return the agentProfile value.
     */
    public AgentProfile agentProfile() {
        return this.agentProfile;
    }

    /**
     * Set the agentProfile property: Defines how the machine will be handled once it executed a job.
     * 
     * @param agentProfile the agentProfile value to set.
     * @return the PoolUpdateProperties object itself.
     */
    public PoolUpdateProperties withAgentProfile(AgentProfile agentProfile) {
        this.agentProfile = agentProfile;
        return this;
    }

    /**
     * Get the fabricProfile property: Defines the type of fabric the agent will run on.
     * 
     * @return the fabricProfile value.
     */
    public FabricProfile fabricProfile() {
        return this.fabricProfile;
    }

    /**
     * Set the fabricProfile property: Defines the type of fabric the agent will run on.
     * 
     * @param fabricProfile the fabricProfile value to set.
     * @return the PoolUpdateProperties object itself.
     */
    public PoolUpdateProperties withFabricProfile(FabricProfile fabricProfile) {
        this.fabricProfile = fabricProfile;
        return this;
    }

    /**
     * Get the devCenterProjectResourceId property: The resource id of the DevCenter Project the pool belongs to.
     * 
     * @return the devCenterProjectResourceId value.
     */
    public String devCenterProjectResourceId() {
        return this.devCenterProjectResourceId;
    }

    /**
     * Set the devCenterProjectResourceId property: The resource id of the DevCenter Project the pool belongs to.
     * 
     * @param devCenterProjectResourceId the devCenterProjectResourceId value to set.
     * @return the PoolUpdateProperties object itself.
     */
    public PoolUpdateProperties withDevCenterProjectResourceId(String devCenterProjectResourceId) {
        this.devCenterProjectResourceId = devCenterProjectResourceId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (organizationProfile() != null) {
            organizationProfile().validate();
        }
        if (agentProfile() != null) {
            agentProfile().validate();
        }
        if (fabricProfile() != null) {
            fabricProfile().validate();
        }
    }
}
