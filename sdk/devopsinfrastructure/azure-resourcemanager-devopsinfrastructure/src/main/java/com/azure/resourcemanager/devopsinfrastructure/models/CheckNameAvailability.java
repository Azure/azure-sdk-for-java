// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.devopsinfrastructure.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The parameters used to check the availability of a resource.
 */
@Fluent
public final class CheckNameAvailability implements JsonSerializable<CheckNameAvailability> {
    /*
     * The name of the resource.
     */
    private String name;

    /*
     * The type of resource that is used as the scope of the availability check.
     */
    private DevOpsInfrastructureResourceType type;

    /**
     * Creates an instance of CheckNameAvailability class.
     */
    public CheckNameAvailability() {
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: The name of the resource.
     * 
     * @param name the name value to set.
     * @return the CheckNameAvailability object itself.
     */
    public CheckNameAvailability withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the type property: The type of resource that is used as the scope of the availability check.
     * 
     * @return the type value.
     */
    public DevOpsInfrastructureResourceType type() {
        return this.type;
    }

    /**
     * Set the type property: The type of resource that is used as the scope of the availability check.
     * 
     * @param type the type value to set.
     * @return the CheckNameAvailability object itself.
     */
    public CheckNameAvailability withType(DevOpsInfrastructureResourceType type) {
        this.type = type;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (name() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property name in model CheckNameAvailability"));
        }
        if (type() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property type in model CheckNameAvailability"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(CheckNameAvailability.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CheckNameAvailability from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CheckNameAvailability if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CheckNameAvailability.
     */
    public static CheckNameAvailability fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CheckNameAvailability deserializedCheckNameAvailability = new CheckNameAvailability();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedCheckNameAvailability.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedCheckNameAvailability.type
                        = DevOpsInfrastructureResourceType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCheckNameAvailability;
        });
    }
}
