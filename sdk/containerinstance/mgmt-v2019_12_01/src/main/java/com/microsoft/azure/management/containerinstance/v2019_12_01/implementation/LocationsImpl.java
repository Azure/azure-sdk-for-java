/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * abc
 */

package com.microsoft.azure.management.containerinstance.v2019_12_01.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.containerinstance.v2019_12_01.Locations;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.containerinstance.v2019_12_01.Capabilities;
import java.util.List;
import com.microsoft.azure.management.containerinstance.v2019_12_01.Usage;
import com.microsoft.azure.management.containerinstance.v2019_12_01.CachedImages;

class LocationsImpl extends WrapperImpl<LocationsInner> implements Locations {
    private final ContainerInstanceManager manager;

    LocationsImpl(ContainerInstanceManager manager) {
        super(manager.inner().locations());
        this.manager = manager;
    }

    public ContainerInstanceManager manager() {
        return this.manager;
    }

    private CapabilitiesImpl wrapCapabilitiesModel(CapabilitiesInner inner) {
        return  new CapabilitiesImpl(inner, manager());
    }

    private UsageImpl wrapUsageModel(UsageInner inner) {
        return  new UsageImpl(inner, manager());
    }

    private CachedImagesImpl wrapCachedImagesModel(CachedImagesInner inner) {
        return  new CachedImagesImpl(inner, manager());
    }

    @Override
    public Observable<Capabilities> listCapabilitiesAsync(final String location) {
        LocationsInner client = this.inner();
        return client.listCapabilitiesAsync(location)
        .flatMapIterable(new Func1<Page<CapabilitiesInner>, Iterable<CapabilitiesInner>>() {
            @Override
            public Iterable<CapabilitiesInner> call(Page<CapabilitiesInner> page) {
                return page.items();
            }
        })
        .map(new Func1<CapabilitiesInner, Capabilities>() {
            @Override
            public Capabilities call(CapabilitiesInner inner) {
                return wrapCapabilitiesModel(inner);
            }
        });
    }

    @Override
    public Observable<Usage> listUsageAsync(String location) {
        LocationsInner client = this.inner();
        return client.listUsageAsync(location)
        .flatMap(new Func1<List<UsageInner>, Observable<UsageInner>>() {
            @Override
            public Observable<UsageInner> call(List<UsageInner> innerList) {
                return Observable.from(innerList);
            }
        })
        .map(new Func1<UsageInner, Usage>() {
            @Override
            public Usage call(UsageInner inner) {
                return wrapUsageModel(inner);
            }
        });
    }

    @Override
    public Observable<CachedImages> listCachedImagesAsync(final String location) {
        LocationsInner client = this.inner();
        return client.listCachedImagesAsync(location)
        .flatMapIterable(new Func1<Page<CachedImagesInner>, Iterable<CachedImagesInner>>() {
            @Override
            public Iterable<CachedImagesInner> call(Page<CachedImagesInner> page) {
                return page.items();
            }
        })
        .map(new Func1<CachedImagesInner, CachedImages>() {
            @Override
            public CachedImages call(CachedImagesInner inner) {
                return wrapCachedImagesModel(inner);
            }
        });
    }

}
