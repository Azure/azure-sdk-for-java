// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerinstance.generated.generated;

import com.azure.core.management.serializer.SerializerFactory;
import com.azure.core.util.serializer.SerializerEncoding;
import com.azure.resourcemanager.containerinstance.generated.models.AutoGeneratedDomainNameLabelScope;
import com.azure.resourcemanager.containerinstance.generated.models.AzureFileVolume;
import com.azure.resourcemanager.containerinstance.generated.models.Container;
import com.azure.resourcemanager.containerinstance.generated.models.ContainerGroupDiagnostics;
import com.azure.resourcemanager.containerinstance.generated.models.ContainerGroupIdentity;
import com.azure.resourcemanager.containerinstance.generated.models.ContainerGroupIdentityUserAssignedIdentities;
import com.azure.resourcemanager.containerinstance.generated.models.ContainerGroupIpAddressType;
import com.azure.resourcemanager.containerinstance.generated.models.ContainerGroupNetworkProtocol;
import com.azure.resourcemanager.containerinstance.generated.models.ContainerGroupSubnetId;
import com.azure.resourcemanager.containerinstance.generated.models.ContainerPort;
import com.azure.resourcemanager.containerinstance.generated.models.DnsConfiguration;
import com.azure.resourcemanager.containerinstance.generated.models.GpuResource;
import com.azure.resourcemanager.containerinstance.generated.models.GpuSku;
import com.azure.resourcemanager.containerinstance.generated.models.IpAddress;
import com.azure.resourcemanager.containerinstance.generated.models.LogAnalytics;
import com.azure.resourcemanager.containerinstance.generated.models.LogAnalyticsLogType;
import com.azure.resourcemanager.containerinstance.generated.models.OperatingSystemTypes;
import com.azure.resourcemanager.containerinstance.generated.models.Port;
import com.azure.resourcemanager.containerinstance.generated.models.ResourceIdentityType;
import com.azure.resourcemanager.containerinstance.generated.models.ResourceRequests;
import com.azure.resourcemanager.containerinstance.generated.models.ResourceRequirements;
import com.azure.resourcemanager.containerinstance.generated.models.Volume;
import com.azure.resourcemanager.containerinstance.generated.models.VolumeMount;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/** Samples for ContainerGroups CreateOrUpdate. */
public final class ContainerGroupsCreateOrUpdateSamples {
    /*
     * x-ms-original-file: specification/containerinstance/resource-manager/Microsoft.ContainerInstance/stable/2021-10-01/examples/ContainerGroupsCreateOrUpdate.json
     */
    /**
     * Sample code: ContainerGroupsCreateOrUpdate.
     *
     * @param manager Entry point to ContainerInstanceManager.
     */
    public static void containerGroupsCreateOrUpdate(
        com.azure.resourcemanager.containerinstance.generated.ContainerInstanceManager manager) throws IOException {
        manager
            .containerGroups()
            .define("demo1")
            .withRegion("west us")
            .withExistingResourceGroup("demo")
            .withContainers(
                Arrays
                    .asList(
                        new Container()
                            .withName("demo1")
                            .withImage("nginx")
                            .withCommand(Arrays.asList())
                            .withPorts(Arrays.asList(new ContainerPort().withPort(80)))
                            .withEnvironmentVariables(Arrays.asList())
                            .withResources(
                                new ResourceRequirements()
                                    .withRequests(
                                        new ResourceRequests()
                                            .withMemoryInGB(1.5)
                                            .withCpu(1.0)
                                            .withGpu(new GpuResource().withCount(1).withSku(GpuSku.K80))))
                            .withVolumeMounts(
                                Arrays
                                    .asList(
                                        new VolumeMount()
                                            .withName("volume1")
                                            .withMountPath("/mnt/volume1")
                                            .withReadOnly(false),
                                        new VolumeMount()
                                            .withName("volume2")
                                            .withMountPath("/mnt/volume2")
                                            .withReadOnly(false),
                                        new VolumeMount()
                                            .withName("volume3")
                                            .withMountPath("/mnt/volume3")
                                            .withReadOnly(true)))))
            .withOsType(OperatingSystemTypes.LINUX)
            .withIdentity(
                new ContainerGroupIdentity()
                    .withType(ResourceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED)
                    .withUserAssignedIdentities(
                        mapOf(
                            "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity-name",
                            new ContainerGroupIdentityUserAssignedIdentities())))
            .withImageRegistryCredentials(Arrays.asList())
            .withIpAddress(
                new IpAddress()
                    .withPorts(Arrays.asList(new Port().withProtocol(ContainerGroupNetworkProtocol.TCP).withPort(80)))
                    .withType(ContainerGroupIpAddressType.PUBLIC)
                    .withDnsNameLabel("dnsnamelabel1")
                    .withDnsNameLabelReusePolicy(AutoGeneratedDomainNameLabelScope.UNSECURE))
            .withVolumes(
                Arrays
                    .asList(
                        new Volume()
                            .withName("volume1")
                            .withAzureFile(
                                new AzureFileVolume()
                                    .withShareName("shareName")
                                    .withStorageAccountName("accountName")
                                    .withStorageAccountKey("accountKey")),
                        new Volume()
                            .withName("volume2")
                            .withEmptyDir(
                                SerializerFactory
                                    .createDefaultManagementSerializerAdapter()
                                    .deserialize("{}", Object.class, SerializerEncoding.JSON)),
                        new Volume()
                            .withName("volume3")
                            .withSecret(
                                mapOf("secretKey1", "SecretValue1InBase64", "secretKey2", "SecretValue2InBase64"))))
            .withDiagnostics(
                new ContainerGroupDiagnostics()
                    .withLogAnalytics(
                        new LogAnalytics()
                            .withWorkspaceId("workspaceid")
                            .withWorkspaceKey("workspaceKey")
                            .withLogType(LogAnalyticsLogType.CONTAINER_INSIGHTS)
                            .withMetadata(mapOf("test-key", "test-metadata-value"))
                            .withWorkspaceResourceId(
                                "/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/rg/providers/microsoft.operationalinsights/workspaces/workspace")))
            .withSubnetIds(
                Arrays
                    .asList(
                        new ContainerGroupSubnetId()
                            .withId(
                                "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'),"
                                    + " parameters('subnetName'))]")))
            .withDnsConfig(
                new DnsConfiguration()
                    .withNameServers(Arrays.asList("1.1.1.1"))
                    .withSearchDomains("cluster.local svc.cluster.local")
                    .withOptions("ndots:2"))
            .create();
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
