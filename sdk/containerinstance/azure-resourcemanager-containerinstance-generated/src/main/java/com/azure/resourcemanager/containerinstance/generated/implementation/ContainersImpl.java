// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerinstance.generated.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.containerinstance.generated.fluent.ContainersClient;
import com.azure.resourcemanager.containerinstance.generated.fluent.models.ContainerAttachResponseInner;
import com.azure.resourcemanager.containerinstance.generated.fluent.models.ContainerExecResponseInner;
import com.azure.resourcemanager.containerinstance.generated.fluent.models.LogsInner;
import com.azure.resourcemanager.containerinstance.generated.models.ContainerAttachResponse;
import com.azure.resourcemanager.containerinstance.generated.models.ContainerExecRequest;
import com.azure.resourcemanager.containerinstance.generated.models.ContainerExecResponse;
import com.azure.resourcemanager.containerinstance.generated.models.Containers;
import com.azure.resourcemanager.containerinstance.generated.models.Logs;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class ContainersImpl implements Containers {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(ContainersImpl.class);

    private final ContainersClient innerClient;

    private final com.azure.resourcemanager.containerinstance.generated.ContainerInstanceManager serviceManager;

    public ContainersImpl(
        ContainersClient innerClient,
        com.azure.resourcemanager.containerinstance.generated.ContainerInstanceManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Logs listLogs(String resourceGroupName, String containerGroupName, String containerName) {
        LogsInner inner = this.serviceClient().listLogs(resourceGroupName, containerGroupName, containerName);
        if (inner != null) {
            return new LogsImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Logs> listLogsWithResponse(
        String resourceGroupName,
        String containerGroupName,
        String containerName,
        Integer tail,
        Boolean timestamps,
        Context context) {
        Response<LogsInner> inner =
            this
                .serviceClient()
                .listLogsWithResponse(resourceGroupName, containerGroupName, containerName, tail, timestamps, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new LogsImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ContainerExecResponse executeCommand(
        String resourceGroupName,
        String containerGroupName,
        String containerName,
        ContainerExecRequest containerExecRequest) {
        ContainerExecResponseInner inner =
            this
                .serviceClient()
                .executeCommand(resourceGroupName, containerGroupName, containerName, containerExecRequest);
        if (inner != null) {
            return new ContainerExecResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ContainerExecResponse> executeCommandWithResponse(
        String resourceGroupName,
        String containerGroupName,
        String containerName,
        ContainerExecRequest containerExecRequest,
        Context context) {
        Response<ContainerExecResponseInner> inner =
            this
                .serviceClient()
                .executeCommandWithResponse(
                    resourceGroupName, containerGroupName, containerName, containerExecRequest, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ContainerExecResponseImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ContainerAttachResponse attach(String resourceGroupName, String containerGroupName, String containerName) {
        ContainerAttachResponseInner inner =
            this.serviceClient().attach(resourceGroupName, containerGroupName, containerName);
        if (inner != null) {
            return new ContainerAttachResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ContainerAttachResponse> attachWithResponse(
        String resourceGroupName, String containerGroupName, String containerName, Context context) {
        Response<ContainerAttachResponseInner> inner =
            this.serviceClient().attachWithResponse(resourceGroupName, containerGroupName, containerName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ContainerAttachResponseImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    private ContainersClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.containerinstance.generated.ContainerInstanceManager manager() {
        return this.serviceManager;
    }
}
