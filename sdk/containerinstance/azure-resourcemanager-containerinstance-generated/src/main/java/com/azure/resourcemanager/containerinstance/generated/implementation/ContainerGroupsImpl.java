// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerinstance.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.management.Resource;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.containerinstance.generated.ContainerInstanceManager;
import com.azure.resourcemanager.containerinstance.generated.fluent.ContainerGroupsClient;
import com.azure.resourcemanager.containerinstance.generated.fluent.models.ContainerGroupInner;
import com.azure.resourcemanager.containerinstance.generated.models.ContainerGroup;
import com.azure.resourcemanager.containerinstance.generated.models.ContainerGroups;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class ContainerGroupsImpl implements ContainerGroups {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(ContainerGroupsImpl.class);

    private final ContainerGroupsClient innerClient;

    private final ContainerInstanceManager serviceManager;

    public ContainerGroupsImpl(ContainerGroupsClient innerClient, ContainerInstanceManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<ContainerGroup> list() {
        PagedIterable<ContainerGroupInner> inner = this.serviceClient().list();
        return inner.mapPage(inner1 -> new ContainerGroupImpl(inner1, this.manager()));
    }

    public PagedIterable<ContainerGroup> list(Context context) {
        PagedIterable<ContainerGroupInner> inner = this.serviceClient().list(context);
        return inner.mapPage(inner1 -> new ContainerGroupImpl(inner1, this.manager()));
    }

    public PagedIterable<ContainerGroup> listByResourceGroup(String resourceGroupName) {
        PagedIterable<ContainerGroupInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName);
        return inner.mapPage(inner1 -> new ContainerGroupImpl(inner1, this.manager()));
    }

    public PagedIterable<ContainerGroup> listByResourceGroup(String resourceGroupName, Context context) {
        PagedIterable<ContainerGroupInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName, context);
        return inner.mapPage(inner1 -> new ContainerGroupImpl(inner1, this.manager()));
    }

    public ContainerGroup getByResourceGroup(String resourceGroupName, String containerGroupName) {
        ContainerGroupInner inner = this.serviceClient().getByResourceGroup(resourceGroupName, containerGroupName);
        if (inner != null) {
            return new ContainerGroupImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ContainerGroup> getByResourceGroupWithResponse(
        String resourceGroupName, String containerGroupName, Context context) {
        Response<ContainerGroupInner> inner =
            this.serviceClient().getByResourceGroupWithResponse(resourceGroupName, containerGroupName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ContainerGroupImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ContainerGroup update(String resourceGroupName, String containerGroupName, Resource resource) {
        ContainerGroupInner inner = this.serviceClient().update(resourceGroupName, containerGroupName, resource);
        if (inner != null) {
            return new ContainerGroupImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ContainerGroup> updateWithResponse(
        String resourceGroupName, String containerGroupName, Resource resource, Context context) {
        Response<ContainerGroupInner> inner =
            this.serviceClient().updateWithResponse(resourceGroupName, containerGroupName, resource, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ContainerGroupImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ContainerGroup deleteByResourceGroup(String resourceGroupName, String containerGroupName) {
        ContainerGroupInner inner = this.serviceClient().delete(resourceGroupName, containerGroupName);
        if (inner != null) {
            return new ContainerGroupImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ContainerGroup delete(String resourceGroupName, String containerGroupName, Context context) {
        ContainerGroupInner inner = this.serviceClient().delete(resourceGroupName, containerGroupName, context);
        if (inner != null) {
            return new ContainerGroupImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void restart(String resourceGroupName, String containerGroupName) {
        this.serviceClient().restart(resourceGroupName, containerGroupName);
    }

    public void restart(String resourceGroupName, String containerGroupName, Context context) {
        this.serviceClient().restart(resourceGroupName, containerGroupName, context);
    }

    public void stop(String resourceGroupName, String containerGroupName) {
        this.serviceClient().stop(resourceGroupName, containerGroupName);
    }

    public Response<Void> stopWithResponse(String resourceGroupName, String containerGroupName, Context context) {
        return this.serviceClient().stopWithResponse(resourceGroupName, containerGroupName, context);
    }

    public void start(String resourceGroupName, String containerGroupName) {
        this.serviceClient().start(resourceGroupName, containerGroupName);
    }

    public void start(String resourceGroupName, String containerGroupName, Context context) {
        this.serviceClient().start(resourceGroupName, containerGroupName, context);
    }

    public ContainerGroup getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String containerGroupName = Utils.getValueFromIdByName(id, "containerGroups");
        if (containerGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'containerGroups'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, containerGroupName, Context.NONE).getValue();
    }

    public Response<ContainerGroup> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String containerGroupName = Utils.getValueFromIdByName(id, "containerGroups");
        if (containerGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'containerGroups'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, containerGroupName, context);
    }

    public ContainerGroup deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String containerGroupName = Utils.getValueFromIdByName(id, "containerGroups");
        if (containerGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'containerGroups'.", id)));
        }
        return this.delete(resourceGroupName, containerGroupName, Context.NONE);
    }

    public ContainerGroup deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String containerGroupName = Utils.getValueFromIdByName(id, "containerGroups");
        if (containerGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'containerGroups'.", id)));
        }
        return this.delete(resourceGroupName, containerGroupName, context);
    }

    private ContainerGroupsClient serviceClient() {
        return this.innerClient;
    }

    private ContainerInstanceManager manager() {
        return this.serviceManager;
    }

    public ContainerGroupImpl define(String name) {
        return new ContainerGroupImpl(name, this.manager());
    }
}
