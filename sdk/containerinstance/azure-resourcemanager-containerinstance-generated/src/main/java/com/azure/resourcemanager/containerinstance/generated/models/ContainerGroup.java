// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerinstance.generated.models;

import com.azure.core.http.rest.Response;
import com.azure.core.management.Region;
import com.azure.core.util.Context;
import com.azure.resourcemanager.containerinstance.generated.fluent.models.ContainerGroupInner;
import java.util.List;
import java.util.Map;

/** An immutable client-side representation of ContainerGroup. */
public interface ContainerGroup {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     *
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     *
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     *
     * @return the type value.
     */
    String type();

    /**
     * Gets the location property: The geo-location where the resource lives.
     *
     * @return the location value.
     */
    String location();

    /**
     * Gets the tags property: Resource tags.
     *
     * @return the tags value.
     */
    Map<String, String> tags();

    /**
     * Gets the identity property: The identity of the container group, if configured.
     *
     * @return the identity value.
     */
    ContainerGroupIdentity identity();

    /**
     * Gets the provisioningState property: The provisioning state of the container group. This only appears in the
     * response.
     *
     * @return the provisioningState value.
     */
    String provisioningState();

    /**
     * Gets the containers property: The containers within the container group.
     *
     * @return the containers value.
     */
    List<Container> containers();

    /**
     * Gets the imageRegistryCredentials property: The image registry credentials by which the container group is
     * created from.
     *
     * @return the imageRegistryCredentials value.
     */
    List<ImageRegistryCredential> imageRegistryCredentials();

    /**
     * Gets the restartPolicy property: Restart policy for all containers within the container group. - `Always` Always
     * restart - `OnFailure` Restart on failure - `Never` Never restart.
     *
     * @return the restartPolicy value.
     */
    ContainerGroupRestartPolicy restartPolicy();

    /**
     * Gets the ipAddress property: The IP address type of the container group.
     *
     * @return the ipAddress value.
     */
    IpAddress ipAddress();

    /**
     * Gets the osType property: The operating system type required by the containers in the container group.
     *
     * @return the osType value.
     */
    OperatingSystemTypes osType();

    /**
     * Gets the volumes property: The list of volumes that can be mounted by containers in this container group.
     *
     * @return the volumes value.
     */
    List<Volume> volumes();

    /**
     * Gets the instanceView property: The instance view of the container group. Only valid in response.
     *
     * @return the instanceView value.
     */
    ContainerGroupPropertiesInstanceView instanceView();

    /**
     * Gets the diagnostics property: The diagnostic information for a container group.
     *
     * @return the diagnostics value.
     */
    ContainerGroupDiagnostics diagnostics();

    /**
     * Gets the networkProfile property: The network profile information for a container group.
     *
     * @return the networkProfile value.
     */
    ContainerGroupNetworkProfile networkProfile();

    /**
     * Gets the dnsConfig property: The DNS config information for a container group.
     *
     * @return the dnsConfig value.
     */
    DnsConfiguration dnsConfig();

    /**
     * Gets the sku property: The SKU for a container group.
     *
     * @return the sku value.
     */
    ContainerGroupSku sku();

    /**
     * Gets the encryptionProperties property: The encryption properties for a container group.
     *
     * @return the encryptionProperties value.
     */
    EncryptionProperties encryptionProperties();

    /**
     * Gets the initContainers property: The init containers for a container group.
     *
     * @return the initContainers value.
     */
    List<InitContainerDefinition> initContainers();

    /**
     * Gets the region of the resource.
     *
     * @return the region of the resource.
     */
    Region region();

    /**
     * Gets the name of the resource region.
     *
     * @return the name of the resource region.
     */
    String regionName();

    /**
     * Gets the inner com.azure.resourcemanager.containerinstance.generated.fluent.models.ContainerGroupInner object.
     *
     * @return the inner object.
     */
    ContainerGroupInner innerModel();

    /** The entirety of the ContainerGroup definition. */
    interface Definition
        extends DefinitionStages.Blank,
            DefinitionStages.WithLocation,
            DefinitionStages.WithResourceGroup,
            DefinitionStages.WithContainers,
            DefinitionStages.WithOsType,
            DefinitionStages.WithCreate {
    }
    /** The ContainerGroup definition stages. */
    interface DefinitionStages {
        /** The first stage of the ContainerGroup definition. */
        interface Blank extends WithLocation {
        }
        /** The stage of the ContainerGroup definition allowing to specify location. */
        interface WithLocation {
            /**
             * Specifies the region for the resource.
             *
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithResourceGroup withRegion(Region location);

            /**
             * Specifies the region for the resource.
             *
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithResourceGroup withRegion(String location);
        }
        /** The stage of the ContainerGroup definition allowing to specify parent resource. */
        interface WithResourceGroup {
            /**
             * Specifies resourceGroupName.
             *
             * @param resourceGroupName The name of the resource group.
             * @return the next definition stage.
             */
            WithContainers withExistingResourceGroup(String resourceGroupName);
        }
        /** The stage of the ContainerGroup definition allowing to specify containers. */
        interface WithContainers {
            /**
             * Specifies the containers property: The containers within the container group..
             *
             * @param containers The containers within the container group.
             * @return the next definition stage.
             */
            WithOsType withContainers(List<Container> containers);
        }
        /** The stage of the ContainerGroup definition allowing to specify osType. */
        interface WithOsType {
            /**
             * Specifies the osType property: The operating system type required by the containers in the container
             * group..
             *
             * @param osType The operating system type required by the containers in the container group.
             * @return the next definition stage.
             */
            WithCreate withOsType(OperatingSystemTypes osType);
        }
        /**
         * The stage of the ContainerGroup definition which contains all the minimum required properties for the
         * resource to be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate
            extends DefinitionStages.WithTags,
                DefinitionStages.WithIdentity,
                DefinitionStages.WithImageRegistryCredentials,
                DefinitionStages.WithRestartPolicy,
                DefinitionStages.WithIpAddress,
                DefinitionStages.WithVolumes,
                DefinitionStages.WithDiagnostics,
                DefinitionStages.WithNetworkProfile,
                DefinitionStages.WithDnsConfig,
                DefinitionStages.WithSku,
                DefinitionStages.WithEncryptionProperties,
                DefinitionStages.WithInitContainers {
            /**
             * Executes the create request.
             *
             * @return the created resource.
             */
            ContainerGroup create();

            /**
             * Executes the create request.
             *
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            ContainerGroup create(Context context);
        }
        /** The stage of the ContainerGroup definition allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             *
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            WithCreate withTags(Map<String, String> tags);
        }
        /** The stage of the ContainerGroup definition allowing to specify identity. */
        interface WithIdentity {
            /**
             * Specifies the identity property: The identity of the container group, if configured..
             *
             * @param identity The identity of the container group, if configured.
             * @return the next definition stage.
             */
            WithCreate withIdentity(ContainerGroupIdentity identity);
        }
        /** The stage of the ContainerGroup definition allowing to specify imageRegistryCredentials. */
        interface WithImageRegistryCredentials {
            /**
             * Specifies the imageRegistryCredentials property: The image registry credentials by which the container
             * group is created from..
             *
             * @param imageRegistryCredentials The image registry credentials by which the container group is created
             *     from.
             * @return the next definition stage.
             */
            WithCreate withImageRegistryCredentials(List<ImageRegistryCredential> imageRegistryCredentials);
        }
        /** The stage of the ContainerGroup definition allowing to specify restartPolicy. */
        interface WithRestartPolicy {
            /**
             * Specifies the restartPolicy property: Restart policy for all containers within the container group. -
             * `Always` Always restart - `OnFailure` Restart on failure - `Never` Never restart .
             *
             * @param restartPolicy Restart policy for all containers within the container group. - `Always` Always
             *     restart - `OnFailure` Restart on failure - `Never` Never restart.
             * @return the next definition stage.
             */
            WithCreate withRestartPolicy(ContainerGroupRestartPolicy restartPolicy);
        }
        /** The stage of the ContainerGroup definition allowing to specify ipAddress. */
        interface WithIpAddress {
            /**
             * Specifies the ipAddress property: The IP address type of the container group..
             *
             * @param ipAddress The IP address type of the container group.
             * @return the next definition stage.
             */
            WithCreate withIpAddress(IpAddress ipAddress);
        }
        /** The stage of the ContainerGroup definition allowing to specify volumes. */
        interface WithVolumes {
            /**
             * Specifies the volumes property: The list of volumes that can be mounted by containers in this container
             * group..
             *
             * @param volumes The list of volumes that can be mounted by containers in this container group.
             * @return the next definition stage.
             */
            WithCreate withVolumes(List<Volume> volumes);
        }
        /** The stage of the ContainerGroup definition allowing to specify diagnostics. */
        interface WithDiagnostics {
            /**
             * Specifies the diagnostics property: The diagnostic information for a container group..
             *
             * @param diagnostics The diagnostic information for a container group.
             * @return the next definition stage.
             */
            WithCreate withDiagnostics(ContainerGroupDiagnostics diagnostics);
        }
        /** The stage of the ContainerGroup definition allowing to specify networkProfile. */
        interface WithNetworkProfile {
            /**
             * Specifies the networkProfile property: The network profile information for a container group..
             *
             * @param networkProfile The network profile information for a container group.
             * @return the next definition stage.
             */
            WithCreate withNetworkProfile(ContainerGroupNetworkProfile networkProfile);
        }
        /** The stage of the ContainerGroup definition allowing to specify dnsConfig. */
        interface WithDnsConfig {
            /**
             * Specifies the dnsConfig property: The DNS config information for a container group..
             *
             * @param dnsConfig The DNS config information for a container group.
             * @return the next definition stage.
             */
            WithCreate withDnsConfig(DnsConfiguration dnsConfig);
        }
        /** The stage of the ContainerGroup definition allowing to specify sku. */
        interface WithSku {
            /**
             * Specifies the sku property: The SKU for a container group..
             *
             * @param sku The SKU for a container group.
             * @return the next definition stage.
             */
            WithCreate withSku(ContainerGroupSku sku);
        }
        /** The stage of the ContainerGroup definition allowing to specify encryptionProperties. */
        interface WithEncryptionProperties {
            /**
             * Specifies the encryptionProperties property: The encryption properties for a container group..
             *
             * @param encryptionProperties The encryption properties for a container group.
             * @return the next definition stage.
             */
            WithCreate withEncryptionProperties(EncryptionProperties encryptionProperties);
        }
        /** The stage of the ContainerGroup definition allowing to specify initContainers. */
        interface WithInitContainers {
            /**
             * Specifies the initContainers property: The init containers for a container group..
             *
             * @param initContainers The init containers for a container group.
             * @return the next definition stage.
             */
            WithCreate withInitContainers(List<InitContainerDefinition> initContainers);
        }
    }
    /**
     * Refreshes the resource to sync with Azure.
     *
     * @return the refreshed resource.
     */
    ContainerGroup refresh();

    /**
     * Refreshes the resource to sync with Azure.
     *
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    ContainerGroup refresh(Context context);

    /**
     * Restarts all containers in a container group in place. If container image has updates, new image will be
     * downloaded.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void restart();

    /**
     * Restarts all containers in a container group in place. If container image has updates, new image will be
     * downloaded.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void restart(Context context);

    /**
     * Stops all containers in a container group. Compute resources will be deallocated and billing will stop.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void stop();

    /**
     * Stops all containers in a container group. Compute resources will be deallocated and billing will stop.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    Response<Void> stopWithResponse(Context context);

    /**
     * Starts all containers in a container group. Compute resources will be allocated and billing will start.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void start();

    /**
     * Starts all containers in a container group. Compute resources will be allocated and billing will start.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void start(Context context);
}
