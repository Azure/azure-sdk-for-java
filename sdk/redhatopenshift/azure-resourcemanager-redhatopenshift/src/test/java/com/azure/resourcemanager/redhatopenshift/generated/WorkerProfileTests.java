// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.redhatopenshift.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.redhatopenshift.models.EncryptionAtHost;
import com.azure.resourcemanager.redhatopenshift.models.WorkerProfile;
import org.junit.jupiter.api.Assertions;

public final class WorkerProfileTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        WorkerProfile model = BinaryData.fromString(
            "{\"name\":\"tnhxbn\",\"vmSize\":\"iksqr\",\"diskSizeGB\":1154463022,\"subnetId\":\"ainqpjwnzlljfm\",\"count\":450622751,\"encryptionAtHost\":\"Enabled\",\"diskEncryptionSetId\":\"mgxsab\"}")
            .toObject(WorkerProfile.class);
        Assertions.assertEquals("tnhxbn", model.name());
        Assertions.assertEquals("iksqr", model.vmSize());
        Assertions.assertEquals(1154463022, model.diskSizeGB());
        Assertions.assertEquals("ainqpjwnzlljfm", model.subnetId());
        Assertions.assertEquals(450622751, model.count());
        Assertions.assertEquals(EncryptionAtHost.ENABLED, model.encryptionAtHost());
        Assertions.assertEquals("mgxsab", model.diskEncryptionSetId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        WorkerProfile model = new WorkerProfile().withName("tnhxbn")
            .withVmSize("iksqr")
            .withDiskSizeGB(1154463022)
            .withSubnetId("ainqpjwnzlljfm")
            .withCount(450622751)
            .withEncryptionAtHost(EncryptionAtHost.ENABLED)
            .withDiskEncryptionSetId("mgxsab");
        model = BinaryData.fromObject(model).toObject(WorkerProfile.class);
        Assertions.assertEquals("tnhxbn", model.name());
        Assertions.assertEquals("iksqr", model.vmSize());
        Assertions.assertEquals(1154463022, model.diskSizeGB());
        Assertions.assertEquals("ainqpjwnzlljfm", model.subnetId());
        Assertions.assertEquals(450622751, model.count());
        Assertions.assertEquals(EncryptionAtHost.ENABLED, model.encryptionAtHost());
        Assertions.assertEquals("mgxsab", model.diskEncryptionSetId());
    }
}
