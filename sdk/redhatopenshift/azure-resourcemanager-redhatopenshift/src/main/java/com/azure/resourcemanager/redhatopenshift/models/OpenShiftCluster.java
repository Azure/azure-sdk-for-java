// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.redhatopenshift.models;

import com.azure.core.http.rest.Response;
import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.redhatopenshift.fluent.models.OpenShiftClusterInner;
import java.util.List;
import java.util.Map;

/**
 * An immutable client-side representation of OpenShiftCluster.
 */
public interface OpenShiftCluster {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     * 
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     * 
     * @return the type value.
     */
    String type();

    /**
     * Gets the location property: The geo-location where the resource lives.
     * 
     * @return the location value.
     */
    String location();

    /**
     * Gets the tags property: Resource tags.
     * 
     * @return the tags value.
     */
    Map<String, String> tags();

    /**
     * Gets the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    SystemData systemData();

    /**
     * Gets the provisioningState property: The cluster provisioning state.
     * 
     * @return the provisioningState value.
     */
    ProvisioningState provisioningState();

    /**
     * Gets the clusterProfile property: The cluster profile.
     * 
     * @return the clusterProfile value.
     */
    ClusterProfile clusterProfile();

    /**
     * Gets the consoleProfile property: The console profile.
     * 
     * @return the consoleProfile value.
     */
    ConsoleProfile consoleProfile();

    /**
     * Gets the servicePrincipalProfile property: The cluster service principal profile.
     * 
     * @return the servicePrincipalProfile value.
     */
    ServicePrincipalProfile servicePrincipalProfile();

    /**
     * Gets the networkProfile property: The cluster network profile.
     * 
     * @return the networkProfile value.
     */
    NetworkProfile networkProfile();

    /**
     * Gets the masterProfile property: The cluster master profile.
     * 
     * @return the masterProfile value.
     */
    MasterProfile masterProfile();

    /**
     * Gets the workerProfiles property: The cluster worker profiles.
     * 
     * @return the workerProfiles value.
     */
    List<WorkerProfile> workerProfiles();

    /**
     * Gets the workerProfilesStatus property: The cluster worker profiles status.
     * 
     * @return the workerProfilesStatus value.
     */
    List<WorkerProfile> workerProfilesStatus();

    /**
     * Gets the apiserverProfile property: The cluster API server profile.
     * 
     * @return the apiserverProfile value.
     */
    ApiServerProfile apiserverProfile();

    /**
     * Gets the ingressProfiles property: The cluster ingress profiles.
     * 
     * @return the ingressProfiles value.
     */
    List<IngressProfile> ingressProfiles();

    /**
     * Gets the region of the resource.
     * 
     * @return the region of the resource.
     */
    Region region();

    /**
     * Gets the name of the resource region.
     * 
     * @return the name of the resource region.
     */
    String regionName();

    /**
     * Gets the name of the resource group.
     * 
     * @return the name of the resource group.
     */
    String resourceGroupName();

    /**
     * Gets the inner com.azure.resourcemanager.redhatopenshift.fluent.models.OpenShiftClusterInner object.
     * 
     * @return the inner object.
     */
    OpenShiftClusterInner innerModel();

    /**
     * The entirety of the OpenShiftCluster definition.
     */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithLocation,
        DefinitionStages.WithResourceGroup, DefinitionStages.WithCreate {
    }

    /**
     * The OpenShiftCluster definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of the OpenShiftCluster definition.
         */
        interface Blank extends WithLocation {
        }

        /**
         * The stage of the OpenShiftCluster definition allowing to specify location.
         */
        interface WithLocation {
            /**
             * Specifies the region for the resource.
             * 
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithResourceGroup withRegion(Region location);

            /**
             * Specifies the region for the resource.
             * 
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithResourceGroup withRegion(String location);
        }

        /**
         * The stage of the OpenShiftCluster definition allowing to specify parent resource.
         */
        interface WithResourceGroup {
            /**
             * Specifies resourceGroupName.
             * 
             * @param resourceGroupName The name of the resource group. The name is case insensitive.
             * @return the next definition stage.
             */
            WithCreate withExistingResourceGroup(String resourceGroupName);
        }

        /**
         * The stage of the OpenShiftCluster definition which contains all the minimum required properties for the
         * resource to be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate extends DefinitionStages.WithTags, DefinitionStages.WithProvisioningState,
            DefinitionStages.WithClusterProfile, DefinitionStages.WithConsoleProfile,
            DefinitionStages.WithServicePrincipalProfile, DefinitionStages.WithNetworkProfile,
            DefinitionStages.WithMasterProfile, DefinitionStages.WithWorkerProfiles,
            DefinitionStages.WithApiserverProfile, DefinitionStages.WithIngressProfiles {
            /**
             * Executes the create request.
             * 
             * @return the created resource.
             */
            OpenShiftCluster create();

            /**
             * Executes the create request.
             * 
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            OpenShiftCluster create(Context context);
        }

        /**
         * The stage of the OpenShiftCluster definition allowing to specify tags.
         */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             * 
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            WithCreate withTags(Map<String, String> tags);
        }

        /**
         * The stage of the OpenShiftCluster definition allowing to specify provisioningState.
         */
        interface WithProvisioningState {
            /**
             * Specifies the provisioningState property: The cluster provisioning state..
             * 
             * @param provisioningState The cluster provisioning state.
             * @return the next definition stage.
             */
            WithCreate withProvisioningState(ProvisioningState provisioningState);
        }

        /**
         * The stage of the OpenShiftCluster definition allowing to specify clusterProfile.
         */
        interface WithClusterProfile {
            /**
             * Specifies the clusterProfile property: The cluster profile..
             * 
             * @param clusterProfile The cluster profile.
             * @return the next definition stage.
             */
            WithCreate withClusterProfile(ClusterProfile clusterProfile);
        }

        /**
         * The stage of the OpenShiftCluster definition allowing to specify consoleProfile.
         */
        interface WithConsoleProfile {
            /**
             * Specifies the consoleProfile property: The console profile..
             * 
             * @param consoleProfile The console profile.
             * @return the next definition stage.
             */
            WithCreate withConsoleProfile(ConsoleProfile consoleProfile);
        }

        /**
         * The stage of the OpenShiftCluster definition allowing to specify servicePrincipalProfile.
         */
        interface WithServicePrincipalProfile {
            /**
             * Specifies the servicePrincipalProfile property: The cluster service principal profile..
             * 
             * @param servicePrincipalProfile The cluster service principal profile.
             * @return the next definition stage.
             */
            WithCreate withServicePrincipalProfile(ServicePrincipalProfile servicePrincipalProfile);
        }

        /**
         * The stage of the OpenShiftCluster definition allowing to specify networkProfile.
         */
        interface WithNetworkProfile {
            /**
             * Specifies the networkProfile property: The cluster network profile..
             * 
             * @param networkProfile The cluster network profile.
             * @return the next definition stage.
             */
            WithCreate withNetworkProfile(NetworkProfile networkProfile);
        }

        /**
         * The stage of the OpenShiftCluster definition allowing to specify masterProfile.
         */
        interface WithMasterProfile {
            /**
             * Specifies the masterProfile property: The cluster master profile..
             * 
             * @param masterProfile The cluster master profile.
             * @return the next definition stage.
             */
            WithCreate withMasterProfile(MasterProfile masterProfile);
        }

        /**
         * The stage of the OpenShiftCluster definition allowing to specify workerProfiles.
         */
        interface WithWorkerProfiles {
            /**
             * Specifies the workerProfiles property: The cluster worker profiles..
             * 
             * @param workerProfiles The cluster worker profiles.
             * @return the next definition stage.
             */
            WithCreate withWorkerProfiles(List<WorkerProfile> workerProfiles);
        }

        /**
         * The stage of the OpenShiftCluster definition allowing to specify apiserverProfile.
         */
        interface WithApiserverProfile {
            /**
             * Specifies the apiserverProfile property: The cluster API server profile..
             * 
             * @param apiserverProfile The cluster API server profile.
             * @return the next definition stage.
             */
            WithCreate withApiserverProfile(ApiServerProfile apiserverProfile);
        }

        /**
         * The stage of the OpenShiftCluster definition allowing to specify ingressProfiles.
         */
        interface WithIngressProfiles {
            /**
             * Specifies the ingressProfiles property: The cluster ingress profiles..
             * 
             * @param ingressProfiles The cluster ingress profiles.
             * @return the next definition stage.
             */
            WithCreate withIngressProfiles(List<IngressProfile> ingressProfiles);
        }
    }

    /**
     * Begins update for the OpenShiftCluster resource.
     * 
     * @return the stage of resource update.
     */
    OpenShiftCluster.Update update();

    /**
     * The template for OpenShiftCluster update.
     */
    interface Update extends UpdateStages.WithTags, UpdateStages.WithProvisioningState, UpdateStages.WithClusterProfile,
        UpdateStages.WithConsoleProfile, UpdateStages.WithServicePrincipalProfile, UpdateStages.WithNetworkProfile,
        UpdateStages.WithMasterProfile, UpdateStages.WithWorkerProfiles, UpdateStages.WithApiserverProfile,
        UpdateStages.WithIngressProfiles {
        /**
         * Executes the update request.
         * 
         * @return the updated resource.
         */
        OpenShiftCluster apply();

        /**
         * Executes the update request.
         * 
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        OpenShiftCluster apply(Context context);
    }

    /**
     * The OpenShiftCluster update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the OpenShiftCluster update allowing to specify tags.
         */
        interface WithTags {
            /**
             * Specifies the tags property: The resource tags..
             * 
             * @param tags The resource tags.
             * @return the next definition stage.
             */
            Update withTags(Map<String, String> tags);
        }

        /**
         * The stage of the OpenShiftCluster update allowing to specify provisioningState.
         */
        interface WithProvisioningState {
            /**
             * Specifies the provisioningState property: The cluster provisioning state..
             * 
             * @param provisioningState The cluster provisioning state.
             * @return the next definition stage.
             */
            Update withProvisioningState(ProvisioningState provisioningState);
        }

        /**
         * The stage of the OpenShiftCluster update allowing to specify clusterProfile.
         */
        interface WithClusterProfile {
            /**
             * Specifies the clusterProfile property: The cluster profile..
             * 
             * @param clusterProfile The cluster profile.
             * @return the next definition stage.
             */
            Update withClusterProfile(ClusterProfile clusterProfile);
        }

        /**
         * The stage of the OpenShiftCluster update allowing to specify consoleProfile.
         */
        interface WithConsoleProfile {
            /**
             * Specifies the consoleProfile property: The console profile..
             * 
             * @param consoleProfile The console profile.
             * @return the next definition stage.
             */
            Update withConsoleProfile(ConsoleProfile consoleProfile);
        }

        /**
         * The stage of the OpenShiftCluster update allowing to specify servicePrincipalProfile.
         */
        interface WithServicePrincipalProfile {
            /**
             * Specifies the servicePrincipalProfile property: The cluster service principal profile..
             * 
             * @param servicePrincipalProfile The cluster service principal profile.
             * @return the next definition stage.
             */
            Update withServicePrincipalProfile(ServicePrincipalProfile servicePrincipalProfile);
        }

        /**
         * The stage of the OpenShiftCluster update allowing to specify networkProfile.
         */
        interface WithNetworkProfile {
            /**
             * Specifies the networkProfile property: The cluster network profile..
             * 
             * @param networkProfile The cluster network profile.
             * @return the next definition stage.
             */
            Update withNetworkProfile(NetworkProfile networkProfile);
        }

        /**
         * The stage of the OpenShiftCluster update allowing to specify masterProfile.
         */
        interface WithMasterProfile {
            /**
             * Specifies the masterProfile property: The cluster master profile..
             * 
             * @param masterProfile The cluster master profile.
             * @return the next definition stage.
             */
            Update withMasterProfile(MasterProfile masterProfile);
        }

        /**
         * The stage of the OpenShiftCluster update allowing to specify workerProfiles.
         */
        interface WithWorkerProfiles {
            /**
             * Specifies the workerProfiles property: The cluster worker profiles..
             * 
             * @param workerProfiles The cluster worker profiles.
             * @return the next definition stage.
             */
            Update withWorkerProfiles(List<WorkerProfile> workerProfiles);
        }

        /**
         * The stage of the OpenShiftCluster update allowing to specify apiserverProfile.
         */
        interface WithApiserverProfile {
            /**
             * Specifies the apiserverProfile property: The cluster API server profile..
             * 
             * @param apiserverProfile The cluster API server profile.
             * @return the next definition stage.
             */
            Update withApiserverProfile(ApiServerProfile apiserverProfile);
        }

        /**
         * The stage of the OpenShiftCluster update allowing to specify ingressProfiles.
         */
        interface WithIngressProfiles {
            /**
             * Specifies the ingressProfiles property: The cluster ingress profiles..
             * 
             * @param ingressProfiles The cluster ingress profiles.
             * @return the next definition stage.
             */
            Update withIngressProfiles(List<IngressProfile> ingressProfiles);
        }
    }

    /**
     * Refreshes the resource to sync with Azure.
     * 
     * @return the refreshed resource.
     */
    OpenShiftCluster refresh();

    /**
     * Refreshes the resource to sync with Azure.
     * 
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    OpenShiftCluster refresh(Context context);

    /**
     * Lists admin kubeconfig of an OpenShift cluster with the specified subscription, resource group and resource name.
     * 
     * The operation returns the admin kubeconfig.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return openShiftClusterAdminKubeconfig represents an OpenShift cluster's admin kubeconfig along with
     * {@link Response}.
     */
    Response<OpenShiftClusterAdminKubeconfig> listAdminCredentialsWithResponse(Context context);

    /**
     * Lists admin kubeconfig of an OpenShift cluster with the specified subscription, resource group and resource name.
     * 
     * The operation returns the admin kubeconfig.
     * 
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return openShiftClusterAdminKubeconfig represents an OpenShift cluster's admin kubeconfig.
     */
    OpenShiftClusterAdminKubeconfig listAdminCredentials();

    /**
     * Lists credentials of an OpenShift cluster with the specified subscription, resource group and resource name.
     * 
     * The operation returns the credentials.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return openShiftClusterCredentials represents an OpenShift cluster's credentials along with {@link Response}.
     */
    Response<OpenShiftClusterCredentials> listCredentialsWithResponse(Context context);

    /**
     * Lists credentials of an OpenShift cluster with the specified subscription, resource group and resource name.
     * 
     * The operation returns the credentials.
     * 
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return openShiftClusterCredentials represents an OpenShift cluster's credentials.
     */
    OpenShiftClusterCredentials listCredentials();
}
