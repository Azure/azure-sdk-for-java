// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.redhatopenshift.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * SecretProperties represents the properties of a Secret.
 */
@Fluent
public final class SecretProperties implements JsonSerializable<SecretProperties> {
    /*
     * The Secrets Resources.
     */
    private String secretResources;

    /**
     * Creates an instance of SecretProperties class.
     */
    public SecretProperties() {
    }

    /**
     * Get the secretResources property: The Secrets Resources.
     * 
     * @return the secretResources value.
     */
    public String secretResources() {
        return this.secretResources;
    }

    /**
     * Set the secretResources property: The Secrets Resources.
     * 
     * @param secretResources the secretResources value to set.
     * @return the SecretProperties object itself.
     */
    public SecretProperties withSecretResources(String secretResources) {
        this.secretResources = secretResources;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("secretResources", this.secretResources);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SecretProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SecretProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the SecretProperties.
     */
    public static SecretProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SecretProperties deserializedSecretProperties = new SecretProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("secretResources".equals(fieldName)) {
                    deserializedSecretProperties.secretResources = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSecretProperties;
        });
    }
}
