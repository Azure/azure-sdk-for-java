// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.redhatopenshift.implementation;

import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.redhatopenshift.fluent.models.SecretInner;
import com.azure.resourcemanager.redhatopenshift.models.Secret;
import com.azure.resourcemanager.redhatopenshift.models.SecretUpdate;

public final class SecretImpl implements Secret, Secret.Definition, Secret.Update {
    private SecretInner innerObject;

    private final com.azure.resourcemanager.redhatopenshift.RedHatOpenShiftManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public String secretResources() {
        return this.innerModel().secretResources();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public SecretInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.redhatopenshift.RedHatOpenShiftManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String resourceName;

    private String childResourceName;

    private SecretUpdate updateParameters;

    public SecretImpl withExistingOpenshiftcluster(String resourceGroupName, String resourceName) {
        this.resourceGroupName = resourceGroupName;
        this.resourceName = resourceName;
        return this;
    }

    public Secret create() {
        this.innerObject = serviceManager.serviceClient()
            .getSecrets()
            .createOrUpdateWithResponse(resourceGroupName, resourceName, childResourceName, this.innerModel(),
                Context.NONE)
            .getValue();
        return this;
    }

    public Secret create(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getSecrets()
            .createOrUpdateWithResponse(resourceGroupName, resourceName, childResourceName, this.innerModel(), context)
            .getValue();
        return this;
    }

    SecretImpl(String name, com.azure.resourcemanager.redhatopenshift.RedHatOpenShiftManager serviceManager) {
        this.innerObject = new SecretInner();
        this.serviceManager = serviceManager;
        this.childResourceName = name;
    }

    public SecretImpl update() {
        this.updateParameters = new SecretUpdate();
        return this;
    }

    public Secret apply() {
        this.innerObject = serviceManager.serviceClient()
            .getSecrets()
            .updateWithResponse(resourceGroupName, resourceName, childResourceName, updateParameters, Context.NONE)
            .getValue();
        return this;
    }

    public Secret apply(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getSecrets()
            .updateWithResponse(resourceGroupName, resourceName, childResourceName, updateParameters, context)
            .getValue();
        return this;
    }

    SecretImpl(SecretInner innerObject,
        com.azure.resourcemanager.redhatopenshift.RedHatOpenShiftManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.resourceName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "openshiftclusters");
        this.childResourceName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "secret");
    }

    public Secret refresh() {
        this.innerObject = serviceManager.serviceClient()
            .getSecrets()
            .getWithResponse(resourceGroupName, resourceName, childResourceName, Context.NONE)
            .getValue();
        return this;
    }

    public Secret refresh(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getSecrets()
            .getWithResponse(resourceGroupName, resourceName, childResourceName, context)
            .getValue();
        return this;
    }

    public SecretImpl withSecretResources(String secretResources) {
        if (isInCreateMode()) {
            this.innerModel().withSecretResources(secretResources);
            return this;
        } else {
            this.updateParameters.withSecretResources(secretResources);
            return this;
        }
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
