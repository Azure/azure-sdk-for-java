// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.redhatopenshift.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.redhatopenshift.fluent.models.OpenShiftClusterInner;
import com.azure.resourcemanager.redhatopenshift.models.ApiServerProfile;
import com.azure.resourcemanager.redhatopenshift.models.ClusterProfile;
import com.azure.resourcemanager.redhatopenshift.models.ConsoleProfile;
import com.azure.resourcemanager.redhatopenshift.models.IngressProfile;
import com.azure.resourcemanager.redhatopenshift.models.MasterProfile;
import com.azure.resourcemanager.redhatopenshift.models.NetworkProfile;
import com.azure.resourcemanager.redhatopenshift.models.OpenShiftCluster;
import com.azure.resourcemanager.redhatopenshift.models.OpenShiftClusterAdminKubeconfig;
import com.azure.resourcemanager.redhatopenshift.models.OpenShiftClusterCredentials;
import com.azure.resourcemanager.redhatopenshift.models.OpenShiftClusterUpdate;
import com.azure.resourcemanager.redhatopenshift.models.ProvisioningState;
import com.azure.resourcemanager.redhatopenshift.models.ServicePrincipalProfile;
import com.azure.resourcemanager.redhatopenshift.models.WorkerProfile;
import java.util.Collections;
import java.util.List;
import java.util.Map;

public final class OpenShiftClusterImpl
    implements OpenShiftCluster, OpenShiftCluster.Definition, OpenShiftCluster.Update {
    private OpenShiftClusterInner innerObject;

    private final com.azure.resourcemanager.redhatopenshift.RedHatOpenShiftManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public ProvisioningState provisioningState() {
        return this.innerModel().provisioningState();
    }

    public ClusterProfile clusterProfile() {
        return this.innerModel().clusterProfile();
    }

    public ConsoleProfile consoleProfile() {
        return this.innerModel().consoleProfile();
    }

    public ServicePrincipalProfile servicePrincipalProfile() {
        return this.innerModel().servicePrincipalProfile();
    }

    public NetworkProfile networkProfile() {
        return this.innerModel().networkProfile();
    }

    public MasterProfile masterProfile() {
        return this.innerModel().masterProfile();
    }

    public List<WorkerProfile> workerProfiles() {
        List<WorkerProfile> inner = this.innerModel().workerProfiles();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public List<WorkerProfile> workerProfilesStatus() {
        List<WorkerProfile> inner = this.innerModel().workerProfilesStatus();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public ApiServerProfile apiserverProfile() {
        return this.innerModel().apiserverProfile();
    }

    public List<IngressProfile> ingressProfiles() {
        List<IngressProfile> inner = this.innerModel().ingressProfiles();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public OpenShiftClusterInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.redhatopenshift.RedHatOpenShiftManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String resourceName;

    private OpenShiftClusterUpdate updateParameters;

    public OpenShiftClusterImpl withExistingResourceGroup(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public OpenShiftCluster create() {
        this.innerObject = serviceManager.serviceClient()
            .getOpenShiftClusters()
            .createOrUpdate(resourceGroupName, resourceName, this.innerModel(), Context.NONE);
        return this;
    }

    public OpenShiftCluster create(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getOpenShiftClusters()
            .createOrUpdate(resourceGroupName, resourceName, this.innerModel(), context);
        return this;
    }

    OpenShiftClusterImpl(String name, com.azure.resourcemanager.redhatopenshift.RedHatOpenShiftManager serviceManager) {
        this.innerObject = new OpenShiftClusterInner();
        this.serviceManager = serviceManager;
        this.resourceName = name;
    }

    public OpenShiftClusterImpl update() {
        this.updateParameters = new OpenShiftClusterUpdate();
        return this;
    }

    public OpenShiftCluster apply() {
        this.innerObject = serviceManager.serviceClient()
            .getOpenShiftClusters()
            .update(resourceGroupName, resourceName, updateParameters, Context.NONE);
        return this;
    }

    public OpenShiftCluster apply(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getOpenShiftClusters()
            .update(resourceGroupName, resourceName, updateParameters, context);
        return this;
    }

    OpenShiftClusterImpl(OpenShiftClusterInner innerObject,
        com.azure.resourcemanager.redhatopenshift.RedHatOpenShiftManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.resourceName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "openShiftClusters");
    }

    public OpenShiftCluster refresh() {
        this.innerObject = serviceManager.serviceClient()
            .getOpenShiftClusters()
            .getByResourceGroupWithResponse(resourceGroupName, resourceName, Context.NONE)
            .getValue();
        return this;
    }

    public OpenShiftCluster refresh(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getOpenShiftClusters()
            .getByResourceGroupWithResponse(resourceGroupName, resourceName, context)
            .getValue();
        return this;
    }

    public Response<OpenShiftClusterAdminKubeconfig> listAdminCredentialsWithResponse(Context context) {
        return serviceManager.openShiftClusters()
            .listAdminCredentialsWithResponse(resourceGroupName, resourceName, context);
    }

    public OpenShiftClusterAdminKubeconfig listAdminCredentials() {
        return serviceManager.openShiftClusters().listAdminCredentials(resourceGroupName, resourceName);
    }

    public Response<OpenShiftClusterCredentials> listCredentialsWithResponse(Context context) {
        return serviceManager.openShiftClusters().listCredentialsWithResponse(resourceGroupName, resourceName, context);
    }

    public OpenShiftClusterCredentials listCredentials() {
        return serviceManager.openShiftClusters().listCredentials(resourceGroupName, resourceName);
    }

    public OpenShiftClusterImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public OpenShiftClusterImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public OpenShiftClusterImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateParameters.withTags(tags);
            return this;
        }
    }

    public OpenShiftClusterImpl withProvisioningState(ProvisioningState provisioningState) {
        if (isInCreateMode()) {
            this.innerModel().withProvisioningState(provisioningState);
            return this;
        } else {
            this.updateParameters.withProvisioningState(provisioningState);
            return this;
        }
    }

    public OpenShiftClusterImpl withClusterProfile(ClusterProfile clusterProfile) {
        if (isInCreateMode()) {
            this.innerModel().withClusterProfile(clusterProfile);
            return this;
        } else {
            this.updateParameters.withClusterProfile(clusterProfile);
            return this;
        }
    }

    public OpenShiftClusterImpl withConsoleProfile(ConsoleProfile consoleProfile) {
        if (isInCreateMode()) {
            this.innerModel().withConsoleProfile(consoleProfile);
            return this;
        } else {
            this.updateParameters.withConsoleProfile(consoleProfile);
            return this;
        }
    }

    public OpenShiftClusterImpl withServicePrincipalProfile(ServicePrincipalProfile servicePrincipalProfile) {
        if (isInCreateMode()) {
            this.innerModel().withServicePrincipalProfile(servicePrincipalProfile);
            return this;
        } else {
            this.updateParameters.withServicePrincipalProfile(servicePrincipalProfile);
            return this;
        }
    }

    public OpenShiftClusterImpl withNetworkProfile(NetworkProfile networkProfile) {
        if (isInCreateMode()) {
            this.innerModel().withNetworkProfile(networkProfile);
            return this;
        } else {
            this.updateParameters.withNetworkProfile(networkProfile);
            return this;
        }
    }

    public OpenShiftClusterImpl withMasterProfile(MasterProfile masterProfile) {
        if (isInCreateMode()) {
            this.innerModel().withMasterProfile(masterProfile);
            return this;
        } else {
            this.updateParameters.withMasterProfile(masterProfile);
            return this;
        }
    }

    public OpenShiftClusterImpl withWorkerProfiles(List<WorkerProfile> workerProfiles) {
        if (isInCreateMode()) {
            this.innerModel().withWorkerProfiles(workerProfiles);
            return this;
        } else {
            this.updateParameters.withWorkerProfiles(workerProfiles);
            return this;
        }
    }

    public OpenShiftClusterImpl withApiserverProfile(ApiServerProfile apiserverProfile) {
        if (isInCreateMode()) {
            this.innerModel().withApiserverProfile(apiserverProfile);
            return this;
        } else {
            this.updateParameters.withApiserverProfile(apiserverProfile);
            return this;
        }
    }

    public OpenShiftClusterImpl withIngressProfiles(List<IngressProfile> ingressProfiles) {
        if (isInCreateMode()) {
            this.innerModel().withIngressProfiles(ingressProfiles);
            return this;
        } else {
            this.updateParameters.withIngressProfiles(ingressProfiles);
            return this;
        }
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
