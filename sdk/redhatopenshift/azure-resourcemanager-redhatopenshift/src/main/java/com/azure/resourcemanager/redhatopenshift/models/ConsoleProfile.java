// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.redhatopenshift.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * ConsoleProfile represents a console profile.
 */
@Immutable
public final class ConsoleProfile implements JsonSerializable<ConsoleProfile> {
    /*
     * The URL to access the cluster console.
     */
    private String url;

    /**
     * Creates an instance of ConsoleProfile class.
     */
    public ConsoleProfile() {
    }

    /**
     * Get the url property: The URL to access the cluster console.
     * 
     * @return the url value.
     */
    public String url() {
        return this.url;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ConsoleProfile from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ConsoleProfile if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ConsoleProfile.
     */
    public static ConsoleProfile fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ConsoleProfile deserializedConsoleProfile = new ConsoleProfile();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("url".equals(fieldName)) {
                    deserializedConsoleProfile.url = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedConsoleProfile;
        });
    }
}
