// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.redhatopenshift.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * MachinePoolProperties represents the properties of a MachinePool.
 */
@Fluent
public final class MachinePoolProperties implements JsonSerializable<MachinePoolProperties> {
    /*
     * The resources property.
     */
    private String resources;

    /**
     * Creates an instance of MachinePoolProperties class.
     */
    public MachinePoolProperties() {
    }

    /**
     * Get the resources property: The resources property.
     * 
     * @return the resources value.
     */
    public String resources() {
        return this.resources;
    }

    /**
     * Set the resources property: The resources property.
     * 
     * @param resources the resources value to set.
     * @return the MachinePoolProperties object itself.
     */
    public MachinePoolProperties withResources(String resources) {
        this.resources = resources;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("resources", this.resources);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MachinePoolProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MachinePoolProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the MachinePoolProperties.
     */
    public static MachinePoolProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MachinePoolProperties deserializedMachinePoolProperties = new MachinePoolProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("resources".equals(fieldName)) {
                    deserializedMachinePoolProperties.resources = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMachinePoolProperties;
        });
    }
}
