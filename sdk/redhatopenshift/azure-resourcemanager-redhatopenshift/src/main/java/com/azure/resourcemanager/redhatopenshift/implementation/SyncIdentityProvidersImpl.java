// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.redhatopenshift.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.redhatopenshift.fluent.SyncIdentityProvidersClient;
import com.azure.resourcemanager.redhatopenshift.fluent.models.SyncIdentityProviderInner;
import com.azure.resourcemanager.redhatopenshift.models.SyncIdentityProvider;
import com.azure.resourcemanager.redhatopenshift.models.SyncIdentityProviders;

public final class SyncIdentityProvidersImpl implements SyncIdentityProviders {
    private static final ClientLogger LOGGER = new ClientLogger(SyncIdentityProvidersImpl.class);

    private final SyncIdentityProvidersClient innerClient;

    private final com.azure.resourcemanager.redhatopenshift.RedHatOpenShiftManager serviceManager;

    public SyncIdentityProvidersImpl(SyncIdentityProvidersClient innerClient,
        com.azure.resourcemanager.redhatopenshift.RedHatOpenShiftManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<SyncIdentityProvider> list(String resourceGroupName, String resourceName) {
        PagedIterable<SyncIdentityProviderInner> inner = this.serviceClient().list(resourceGroupName, resourceName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new SyncIdentityProviderImpl(inner1, this.manager()));
    }

    public PagedIterable<SyncIdentityProvider> list(String resourceGroupName, String resourceName, Context context) {
        PagedIterable<SyncIdentityProviderInner> inner
            = this.serviceClient().list(resourceGroupName, resourceName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new SyncIdentityProviderImpl(inner1, this.manager()));
    }

    public Response<SyncIdentityProvider> getWithResponse(String resourceGroupName, String resourceName,
        String childResourceName, Context context) {
        Response<SyncIdentityProviderInner> inner
            = this.serviceClient().getWithResponse(resourceGroupName, resourceName, childResourceName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new SyncIdentityProviderImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SyncIdentityProvider get(String resourceGroupName, String resourceName, String childResourceName) {
        SyncIdentityProviderInner inner = this.serviceClient().get(resourceGroupName, resourceName, childResourceName);
        if (inner != null) {
            return new SyncIdentityProviderImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Void> deleteWithResponse(String resourceGroupName, String resourceName, String childResourceName,
        Context context) {
        return this.serviceClient().deleteWithResponse(resourceGroupName, resourceName, childResourceName, context);
    }

    public void delete(String resourceGroupName, String resourceName, String childResourceName) {
        this.serviceClient().delete(resourceGroupName, resourceName, childResourceName);
    }

    public SyncIdentityProvider getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String resourceName = ResourceManagerUtils.getValueFromIdByName(id, "openshiftclusters");
        if (resourceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'openshiftclusters'.", id)));
        }
        String childResourceName = ResourceManagerUtils.getValueFromIdByName(id, "syncIdentityProvider");
        if (childResourceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'syncIdentityProvider'.", id)));
        }
        return this.getWithResponse(resourceGroupName, resourceName, childResourceName, Context.NONE).getValue();
    }

    public Response<SyncIdentityProvider> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String resourceName = ResourceManagerUtils.getValueFromIdByName(id, "openshiftclusters");
        if (resourceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'openshiftclusters'.", id)));
        }
        String childResourceName = ResourceManagerUtils.getValueFromIdByName(id, "syncIdentityProvider");
        if (childResourceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'syncIdentityProvider'.", id)));
        }
        return this.getWithResponse(resourceGroupName, resourceName, childResourceName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String resourceName = ResourceManagerUtils.getValueFromIdByName(id, "openshiftclusters");
        if (resourceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'openshiftclusters'.", id)));
        }
        String childResourceName = ResourceManagerUtils.getValueFromIdByName(id, "syncIdentityProvider");
        if (childResourceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'syncIdentityProvider'.", id)));
        }
        this.deleteWithResponse(resourceGroupName, resourceName, childResourceName, Context.NONE);
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String resourceName = ResourceManagerUtils.getValueFromIdByName(id, "openshiftclusters");
        if (resourceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'openshiftclusters'.", id)));
        }
        String childResourceName = ResourceManagerUtils.getValueFromIdByName(id, "syncIdentityProvider");
        if (childResourceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'syncIdentityProvider'.", id)));
        }
        return this.deleteWithResponse(resourceGroupName, resourceName, childResourceName, context);
    }

    private SyncIdentityProvidersClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.redhatopenshift.RedHatOpenShiftManager manager() {
        return this.serviceManager;
    }

    public SyncIdentityProviderImpl define(String name) {
        return new SyncIdentityProviderImpl(name, this.manager());
    }
}
