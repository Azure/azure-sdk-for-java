// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.redhatopenshift.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * WorkerProfile represents a worker profile.
 */
@Fluent
public final class WorkerProfile implements JsonSerializable<WorkerProfile> {
    /*
     * The worker profile name.
     */
    private String name;

    /*
     * The size of the worker VMs.
     */
    private String vmSize;

    /*
     * The disk size of the worker VMs.
     */
    private Integer diskSizeGB;

    /*
     * The Azure resource ID of the worker subnet.
     */
    private String subnetId;

    /*
     * The number of worker VMs.
     */
    private Integer count;

    /*
     * Whether master virtual machines are encrypted at host.
     */
    private EncryptionAtHost encryptionAtHost;

    /*
     * The resource ID of an associated DiskEncryptionSet, if applicable.
     */
    private String diskEncryptionSetId;

    /**
     * Creates an instance of WorkerProfile class.
     */
    public WorkerProfile() {
    }

    /**
     * Get the name property: The worker profile name.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: The worker profile name.
     * 
     * @param name the name value to set.
     * @return the WorkerProfile object itself.
     */
    public WorkerProfile withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the vmSize property: The size of the worker VMs.
     * 
     * @return the vmSize value.
     */
    public String vmSize() {
        return this.vmSize;
    }

    /**
     * Set the vmSize property: The size of the worker VMs.
     * 
     * @param vmSize the vmSize value to set.
     * @return the WorkerProfile object itself.
     */
    public WorkerProfile withVmSize(String vmSize) {
        this.vmSize = vmSize;
        return this;
    }

    /**
     * Get the diskSizeGB property: The disk size of the worker VMs.
     * 
     * @return the diskSizeGB value.
     */
    public Integer diskSizeGB() {
        return this.diskSizeGB;
    }

    /**
     * Set the diskSizeGB property: The disk size of the worker VMs.
     * 
     * @param diskSizeGB the diskSizeGB value to set.
     * @return the WorkerProfile object itself.
     */
    public WorkerProfile withDiskSizeGB(Integer diskSizeGB) {
        this.diskSizeGB = diskSizeGB;
        return this;
    }

    /**
     * Get the subnetId property: The Azure resource ID of the worker subnet.
     * 
     * @return the subnetId value.
     */
    public String subnetId() {
        return this.subnetId;
    }

    /**
     * Set the subnetId property: The Azure resource ID of the worker subnet.
     * 
     * @param subnetId the subnetId value to set.
     * @return the WorkerProfile object itself.
     */
    public WorkerProfile withSubnetId(String subnetId) {
        this.subnetId = subnetId;
        return this;
    }

    /**
     * Get the count property: The number of worker VMs.
     * 
     * @return the count value.
     */
    public Integer count() {
        return this.count;
    }

    /**
     * Set the count property: The number of worker VMs.
     * 
     * @param count the count value to set.
     * @return the WorkerProfile object itself.
     */
    public WorkerProfile withCount(Integer count) {
        this.count = count;
        return this;
    }

    /**
     * Get the encryptionAtHost property: Whether master virtual machines are encrypted at host.
     * 
     * @return the encryptionAtHost value.
     */
    public EncryptionAtHost encryptionAtHost() {
        return this.encryptionAtHost;
    }

    /**
     * Set the encryptionAtHost property: Whether master virtual machines are encrypted at host.
     * 
     * @param encryptionAtHost the encryptionAtHost value to set.
     * @return the WorkerProfile object itself.
     */
    public WorkerProfile withEncryptionAtHost(EncryptionAtHost encryptionAtHost) {
        this.encryptionAtHost = encryptionAtHost;
        return this;
    }

    /**
     * Get the diskEncryptionSetId property: The resource ID of an associated DiskEncryptionSet, if applicable.
     * 
     * @return the diskEncryptionSetId value.
     */
    public String diskEncryptionSetId() {
        return this.diskEncryptionSetId;
    }

    /**
     * Set the diskEncryptionSetId property: The resource ID of an associated DiskEncryptionSet, if applicable.
     * 
     * @param diskEncryptionSetId the diskEncryptionSetId value to set.
     * @return the WorkerProfile object itself.
     */
    public WorkerProfile withDiskEncryptionSetId(String diskEncryptionSetId) {
        this.diskEncryptionSetId = diskEncryptionSetId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("vmSize", this.vmSize);
        jsonWriter.writeNumberField("diskSizeGB", this.diskSizeGB);
        jsonWriter.writeStringField("subnetId", this.subnetId);
        jsonWriter.writeNumberField("count", this.count);
        jsonWriter.writeStringField("encryptionAtHost",
            this.encryptionAtHost == null ? null : this.encryptionAtHost.toString());
        jsonWriter.writeStringField("diskEncryptionSetId", this.diskEncryptionSetId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of WorkerProfile from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of WorkerProfile if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the WorkerProfile.
     */
    public static WorkerProfile fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            WorkerProfile deserializedWorkerProfile = new WorkerProfile();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedWorkerProfile.name = reader.getString();
                } else if ("vmSize".equals(fieldName)) {
                    deserializedWorkerProfile.vmSize = reader.getString();
                } else if ("diskSizeGB".equals(fieldName)) {
                    deserializedWorkerProfile.diskSizeGB = reader.getNullable(JsonReader::getInt);
                } else if ("subnetId".equals(fieldName)) {
                    deserializedWorkerProfile.subnetId = reader.getString();
                } else if ("count".equals(fieldName)) {
                    deserializedWorkerProfile.count = reader.getNullable(JsonReader::getInt);
                } else if ("encryptionAtHost".equals(fieldName)) {
                    deserializedWorkerProfile.encryptionAtHost = EncryptionAtHost.fromString(reader.getString());
                } else if ("diskEncryptionSetId".equals(fieldName)) {
                    deserializedWorkerProfile.diskEncryptionSetId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedWorkerProfile;
        });
    }
}
