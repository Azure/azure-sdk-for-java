// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.redhatopenshift.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * MasterProfile represents a master profile.
 */
@Fluent
public final class MasterProfile implements JsonSerializable<MasterProfile> {
    /*
     * The size of the master VMs.
     */
    private String vmSize;

    /*
     * The Azure resource ID of the master subnet.
     */
    private String subnetId;

    /*
     * Whether master virtual machines are encrypted at host.
     */
    private EncryptionAtHost encryptionAtHost;

    /*
     * The resource ID of an associated DiskEncryptionSet, if applicable.
     */
    private String diskEncryptionSetId;

    /**
     * Creates an instance of MasterProfile class.
     */
    public MasterProfile() {
    }

    /**
     * Get the vmSize property: The size of the master VMs.
     * 
     * @return the vmSize value.
     */
    public String vmSize() {
        return this.vmSize;
    }

    /**
     * Set the vmSize property: The size of the master VMs.
     * 
     * @param vmSize the vmSize value to set.
     * @return the MasterProfile object itself.
     */
    public MasterProfile withVmSize(String vmSize) {
        this.vmSize = vmSize;
        return this;
    }

    /**
     * Get the subnetId property: The Azure resource ID of the master subnet.
     * 
     * @return the subnetId value.
     */
    public String subnetId() {
        return this.subnetId;
    }

    /**
     * Set the subnetId property: The Azure resource ID of the master subnet.
     * 
     * @param subnetId the subnetId value to set.
     * @return the MasterProfile object itself.
     */
    public MasterProfile withSubnetId(String subnetId) {
        this.subnetId = subnetId;
        return this;
    }

    /**
     * Get the encryptionAtHost property: Whether master virtual machines are encrypted at host.
     * 
     * @return the encryptionAtHost value.
     */
    public EncryptionAtHost encryptionAtHost() {
        return this.encryptionAtHost;
    }

    /**
     * Set the encryptionAtHost property: Whether master virtual machines are encrypted at host.
     * 
     * @param encryptionAtHost the encryptionAtHost value to set.
     * @return the MasterProfile object itself.
     */
    public MasterProfile withEncryptionAtHost(EncryptionAtHost encryptionAtHost) {
        this.encryptionAtHost = encryptionAtHost;
        return this;
    }

    /**
     * Get the diskEncryptionSetId property: The resource ID of an associated DiskEncryptionSet, if applicable.
     * 
     * @return the diskEncryptionSetId value.
     */
    public String diskEncryptionSetId() {
        return this.diskEncryptionSetId;
    }

    /**
     * Set the diskEncryptionSetId property: The resource ID of an associated DiskEncryptionSet, if applicable.
     * 
     * @param diskEncryptionSetId the diskEncryptionSetId value to set.
     * @return the MasterProfile object itself.
     */
    public MasterProfile withDiskEncryptionSetId(String diskEncryptionSetId) {
        this.diskEncryptionSetId = diskEncryptionSetId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("vmSize", this.vmSize);
        jsonWriter.writeStringField("subnetId", this.subnetId);
        jsonWriter.writeStringField("encryptionAtHost",
            this.encryptionAtHost == null ? null : this.encryptionAtHost.toString());
        jsonWriter.writeStringField("diskEncryptionSetId", this.diskEncryptionSetId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MasterProfile from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MasterProfile if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the MasterProfile.
     */
    public static MasterProfile fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MasterProfile deserializedMasterProfile = new MasterProfile();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("vmSize".equals(fieldName)) {
                    deserializedMasterProfile.vmSize = reader.getString();
                } else if ("subnetId".equals(fieldName)) {
                    deserializedMasterProfile.subnetId = reader.getString();
                } else if ("encryptionAtHost".equals(fieldName)) {
                    deserializedMasterProfile.encryptionAtHost = EncryptionAtHost.fromString(reader.getString());
                } else if ("diskEncryptionSetId".equals(fieldName)) {
                    deserializedMasterProfile.diskEncryptionSetId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMasterProfile;
        });
    }
}
