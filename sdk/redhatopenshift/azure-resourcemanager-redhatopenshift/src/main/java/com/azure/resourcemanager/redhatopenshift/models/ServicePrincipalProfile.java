// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.redhatopenshift.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * ServicePrincipalProfile represents a service principal profile.
 */
@Fluent
public final class ServicePrincipalProfile implements JsonSerializable<ServicePrincipalProfile> {
    /*
     * The client ID used for the cluster.
     */
    private String clientId;

    /*
     * The client secret used for the cluster.
     */
    private String clientSecret;

    /**
     * Creates an instance of ServicePrincipalProfile class.
     */
    public ServicePrincipalProfile() {
    }

    /**
     * Get the clientId property: The client ID used for the cluster.
     * 
     * @return the clientId value.
     */
    public String clientId() {
        return this.clientId;
    }

    /**
     * Set the clientId property: The client ID used for the cluster.
     * 
     * @param clientId the clientId value to set.
     * @return the ServicePrincipalProfile object itself.
     */
    public ServicePrincipalProfile withClientId(String clientId) {
        this.clientId = clientId;
        return this;
    }

    /**
     * Get the clientSecret property: The client secret used for the cluster.
     * 
     * @return the clientSecret value.
     */
    public String clientSecret() {
        return this.clientSecret;
    }

    /**
     * Set the clientSecret property: The client secret used for the cluster.
     * 
     * @param clientSecret the clientSecret value to set.
     * @return the ServicePrincipalProfile object itself.
     */
    public ServicePrincipalProfile withClientSecret(String clientSecret) {
        this.clientSecret = clientSecret;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("clientId", this.clientId);
        jsonWriter.writeStringField("clientSecret", this.clientSecret);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ServicePrincipalProfile from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ServicePrincipalProfile if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ServicePrincipalProfile.
     */
    public static ServicePrincipalProfile fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ServicePrincipalProfile deserializedServicePrincipalProfile = new ServicePrincipalProfile();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("clientId".equals(fieldName)) {
                    deserializedServicePrincipalProfile.clientId = reader.getString();
                } else if ("clientSecret".equals(fieldName)) {
                    deserializedServicePrincipalProfile.clientSecret = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedServicePrincipalProfile;
        });
    }
}
