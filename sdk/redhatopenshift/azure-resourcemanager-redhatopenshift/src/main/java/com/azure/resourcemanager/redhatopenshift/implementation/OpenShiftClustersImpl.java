// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.redhatopenshift.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.redhatopenshift.fluent.OpenShiftClustersClient;
import com.azure.resourcemanager.redhatopenshift.fluent.models.OpenShiftClusterAdminKubeconfigInner;
import com.azure.resourcemanager.redhatopenshift.fluent.models.OpenShiftClusterCredentialsInner;
import com.azure.resourcemanager.redhatopenshift.fluent.models.OpenShiftClusterInner;
import com.azure.resourcemanager.redhatopenshift.models.OpenShiftCluster;
import com.azure.resourcemanager.redhatopenshift.models.OpenShiftClusterAdminKubeconfig;
import com.azure.resourcemanager.redhatopenshift.models.OpenShiftClusterCredentials;
import com.azure.resourcemanager.redhatopenshift.models.OpenShiftClusters;

public final class OpenShiftClustersImpl implements OpenShiftClusters {
    private static final ClientLogger LOGGER = new ClientLogger(OpenShiftClustersImpl.class);

    private final OpenShiftClustersClient innerClient;

    private final com.azure.resourcemanager.redhatopenshift.RedHatOpenShiftManager serviceManager;

    public OpenShiftClustersImpl(OpenShiftClustersClient innerClient,
        com.azure.resourcemanager.redhatopenshift.RedHatOpenShiftManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<OpenShiftCluster> list() {
        PagedIterable<OpenShiftClusterInner> inner = this.serviceClient().list();
        return ResourceManagerUtils.mapPage(inner, inner1 -> new OpenShiftClusterImpl(inner1, this.manager()));
    }

    public PagedIterable<OpenShiftCluster> list(Context context) {
        PagedIterable<OpenShiftClusterInner> inner = this.serviceClient().list(context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new OpenShiftClusterImpl(inner1, this.manager()));
    }

    public PagedIterable<OpenShiftCluster> listByResourceGroup(String resourceGroupName) {
        PagedIterable<OpenShiftClusterInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new OpenShiftClusterImpl(inner1, this.manager()));
    }

    public PagedIterable<OpenShiftCluster> listByResourceGroup(String resourceGroupName, Context context) {
        PagedIterable<OpenShiftClusterInner> inner
            = this.serviceClient().listByResourceGroup(resourceGroupName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new OpenShiftClusterImpl(inner1, this.manager()));
    }

    public Response<OpenShiftCluster> getByResourceGroupWithResponse(String resourceGroupName, String resourceName,
        Context context) {
        Response<OpenShiftClusterInner> inner
            = this.serviceClient().getByResourceGroupWithResponse(resourceGroupName, resourceName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new OpenShiftClusterImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public OpenShiftCluster getByResourceGroup(String resourceGroupName, String resourceName) {
        OpenShiftClusterInner inner = this.serviceClient().getByResourceGroup(resourceGroupName, resourceName);
        if (inner != null) {
            return new OpenShiftClusterImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void deleteByResourceGroup(String resourceGroupName, String resourceName) {
        this.serviceClient().delete(resourceGroupName, resourceName);
    }

    public void delete(String resourceGroupName, String resourceName, Context context) {
        this.serviceClient().delete(resourceGroupName, resourceName, context);
    }

    public Response<OpenShiftClusterAdminKubeconfig> listAdminCredentialsWithResponse(String resourceGroupName,
        String resourceName, Context context) {
        Response<OpenShiftClusterAdminKubeconfigInner> inner
            = this.serviceClient().listAdminCredentialsWithResponse(resourceGroupName, resourceName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new OpenShiftClusterAdminKubeconfigImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public OpenShiftClusterAdminKubeconfig listAdminCredentials(String resourceGroupName, String resourceName) {
        OpenShiftClusterAdminKubeconfigInner inner
            = this.serviceClient().listAdminCredentials(resourceGroupName, resourceName);
        if (inner != null) {
            return new OpenShiftClusterAdminKubeconfigImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<OpenShiftClusterCredentials> listCredentialsWithResponse(String resourceGroupName,
        String resourceName, Context context) {
        Response<OpenShiftClusterCredentialsInner> inner
            = this.serviceClient().listCredentialsWithResponse(resourceGroupName, resourceName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new OpenShiftClusterCredentialsImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public OpenShiftClusterCredentials listCredentials(String resourceGroupName, String resourceName) {
        OpenShiftClusterCredentialsInner inner = this.serviceClient().listCredentials(resourceGroupName, resourceName);
        if (inner != null) {
            return new OpenShiftClusterCredentialsImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public OpenShiftCluster getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String resourceName = ResourceManagerUtils.getValueFromIdByName(id, "openShiftClusters");
        if (resourceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'openShiftClusters'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, resourceName, Context.NONE).getValue();
    }

    public Response<OpenShiftCluster> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String resourceName = ResourceManagerUtils.getValueFromIdByName(id, "openShiftClusters");
        if (resourceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'openShiftClusters'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, resourceName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String resourceName = ResourceManagerUtils.getValueFromIdByName(id, "openShiftClusters");
        if (resourceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'openShiftClusters'.", id)));
        }
        this.delete(resourceGroupName, resourceName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String resourceName = ResourceManagerUtils.getValueFromIdByName(id, "openShiftClusters");
        if (resourceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'openShiftClusters'.", id)));
        }
        this.delete(resourceGroupName, resourceName, context);
    }

    private OpenShiftClustersClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.redhatopenshift.RedHatOpenShiftManager manager() {
        return this.serviceManager;
    }

    public OpenShiftClusterImpl define(String name) {
        return new OpenShiftClusterImpl(name, this.manager());
    }
}
