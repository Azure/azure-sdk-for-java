// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.redhatopenshift.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * LoadBalancerProfile represents the profile of the cluster public load balancer.
 */
@Fluent
public final class LoadBalancerProfile implements JsonSerializable<LoadBalancerProfile> {
    /*
     * The desired managed outbound IPs for the cluster public load balancer.
     */
    private ManagedOutboundIPs managedOutboundIps;

    /*
     * The list of effective outbound IP addresses of the public load balancer.
     */
    private List<EffectiveOutboundIp> effectiveOutboundIps;

    /**
     * Creates an instance of LoadBalancerProfile class.
     */
    public LoadBalancerProfile() {
    }

    /**
     * Get the managedOutboundIps property: The desired managed outbound IPs for the cluster public load balancer.
     * 
     * @return the managedOutboundIps value.
     */
    public ManagedOutboundIPs managedOutboundIps() {
        return this.managedOutboundIps;
    }

    /**
     * Set the managedOutboundIps property: The desired managed outbound IPs for the cluster public load balancer.
     * 
     * @param managedOutboundIps the managedOutboundIps value to set.
     * @return the LoadBalancerProfile object itself.
     */
    public LoadBalancerProfile withManagedOutboundIps(ManagedOutboundIPs managedOutboundIps) {
        this.managedOutboundIps = managedOutboundIps;
        return this;
    }

    /**
     * Get the effectiveOutboundIps property: The list of effective outbound IP addresses of the public load balancer.
     * 
     * @return the effectiveOutboundIps value.
     */
    public List<EffectiveOutboundIp> effectiveOutboundIps() {
        return this.effectiveOutboundIps;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (managedOutboundIps() != null) {
            managedOutboundIps().validate();
        }
        if (effectiveOutboundIps() != null) {
            effectiveOutboundIps().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("managedOutboundIps", this.managedOutboundIps);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LoadBalancerProfile from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LoadBalancerProfile if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the LoadBalancerProfile.
     */
    public static LoadBalancerProfile fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LoadBalancerProfile deserializedLoadBalancerProfile = new LoadBalancerProfile();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("managedOutboundIps".equals(fieldName)) {
                    deserializedLoadBalancerProfile.managedOutboundIps = ManagedOutboundIPs.fromJson(reader);
                } else if ("effectiveOutboundIps".equals(fieldName)) {
                    List<EffectiveOutboundIp> effectiveOutboundIps
                        = reader.readArray(reader1 -> EffectiveOutboundIp.fromJson(reader1));
                    deserializedLoadBalancerProfile.effectiveOutboundIps = effectiveOutboundIps;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLoadBalancerProfile;
        });
    }
}
