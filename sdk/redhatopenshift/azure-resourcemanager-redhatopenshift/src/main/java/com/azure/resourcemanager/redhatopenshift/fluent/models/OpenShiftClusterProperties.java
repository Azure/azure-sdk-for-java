// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.redhatopenshift.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.redhatopenshift.models.ApiServerProfile;
import com.azure.resourcemanager.redhatopenshift.models.ClusterProfile;
import com.azure.resourcemanager.redhatopenshift.models.ConsoleProfile;
import com.azure.resourcemanager.redhatopenshift.models.IngressProfile;
import com.azure.resourcemanager.redhatopenshift.models.MasterProfile;
import com.azure.resourcemanager.redhatopenshift.models.NetworkProfile;
import com.azure.resourcemanager.redhatopenshift.models.ProvisioningState;
import com.azure.resourcemanager.redhatopenshift.models.ServicePrincipalProfile;
import com.azure.resourcemanager.redhatopenshift.models.WorkerProfile;
import java.io.IOException;
import java.util.List;

/**
 * OpenShiftClusterProperties represents an OpenShift cluster's properties.
 */
@Fluent
public final class OpenShiftClusterProperties implements JsonSerializable<OpenShiftClusterProperties> {
    /*
     * The cluster provisioning state.
     */
    private ProvisioningState provisioningState;

    /*
     * The cluster profile.
     */
    private ClusterProfile clusterProfile;

    /*
     * The console profile.
     */
    private ConsoleProfile consoleProfile;

    /*
     * The cluster service principal profile.
     */
    private ServicePrincipalProfile servicePrincipalProfile;

    /*
     * The cluster network profile.
     */
    private NetworkProfile networkProfile;

    /*
     * The cluster master profile.
     */
    private MasterProfile masterProfile;

    /*
     * The cluster worker profiles.
     */
    private List<WorkerProfile> workerProfiles;

    /*
     * The cluster worker profiles status.
     */
    private List<WorkerProfile> workerProfilesStatus;

    /*
     * The cluster API server profile.
     */
    private ApiServerProfile apiserverProfile;

    /*
     * The cluster ingress profiles.
     */
    private List<IngressProfile> ingressProfiles;

    /**
     * Creates an instance of OpenShiftClusterProperties class.
     */
    public OpenShiftClusterProperties() {
    }

    /**
     * Get the provisioningState property: The cluster provisioning state.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Set the provisioningState property: The cluster provisioning state.
     * 
     * @param provisioningState the provisioningState value to set.
     * @return the OpenShiftClusterProperties object itself.
     */
    public OpenShiftClusterProperties withProvisioningState(ProvisioningState provisioningState) {
        this.provisioningState = provisioningState;
        return this;
    }

    /**
     * Get the clusterProfile property: The cluster profile.
     * 
     * @return the clusterProfile value.
     */
    public ClusterProfile clusterProfile() {
        return this.clusterProfile;
    }

    /**
     * Set the clusterProfile property: The cluster profile.
     * 
     * @param clusterProfile the clusterProfile value to set.
     * @return the OpenShiftClusterProperties object itself.
     */
    public OpenShiftClusterProperties withClusterProfile(ClusterProfile clusterProfile) {
        this.clusterProfile = clusterProfile;
        return this;
    }

    /**
     * Get the consoleProfile property: The console profile.
     * 
     * @return the consoleProfile value.
     */
    public ConsoleProfile consoleProfile() {
        return this.consoleProfile;
    }

    /**
     * Set the consoleProfile property: The console profile.
     * 
     * @param consoleProfile the consoleProfile value to set.
     * @return the OpenShiftClusterProperties object itself.
     */
    public OpenShiftClusterProperties withConsoleProfile(ConsoleProfile consoleProfile) {
        this.consoleProfile = consoleProfile;
        return this;
    }

    /**
     * Get the servicePrincipalProfile property: The cluster service principal profile.
     * 
     * @return the servicePrincipalProfile value.
     */
    public ServicePrincipalProfile servicePrincipalProfile() {
        return this.servicePrincipalProfile;
    }

    /**
     * Set the servicePrincipalProfile property: The cluster service principal profile.
     * 
     * @param servicePrincipalProfile the servicePrincipalProfile value to set.
     * @return the OpenShiftClusterProperties object itself.
     */
    public OpenShiftClusterProperties withServicePrincipalProfile(ServicePrincipalProfile servicePrincipalProfile) {
        this.servicePrincipalProfile = servicePrincipalProfile;
        return this;
    }

    /**
     * Get the networkProfile property: The cluster network profile.
     * 
     * @return the networkProfile value.
     */
    public NetworkProfile networkProfile() {
        return this.networkProfile;
    }

    /**
     * Set the networkProfile property: The cluster network profile.
     * 
     * @param networkProfile the networkProfile value to set.
     * @return the OpenShiftClusterProperties object itself.
     */
    public OpenShiftClusterProperties withNetworkProfile(NetworkProfile networkProfile) {
        this.networkProfile = networkProfile;
        return this;
    }

    /**
     * Get the masterProfile property: The cluster master profile.
     * 
     * @return the masterProfile value.
     */
    public MasterProfile masterProfile() {
        return this.masterProfile;
    }

    /**
     * Set the masterProfile property: The cluster master profile.
     * 
     * @param masterProfile the masterProfile value to set.
     * @return the OpenShiftClusterProperties object itself.
     */
    public OpenShiftClusterProperties withMasterProfile(MasterProfile masterProfile) {
        this.masterProfile = masterProfile;
        return this;
    }

    /**
     * Get the workerProfiles property: The cluster worker profiles.
     * 
     * @return the workerProfiles value.
     */
    public List<WorkerProfile> workerProfiles() {
        return this.workerProfiles;
    }

    /**
     * Set the workerProfiles property: The cluster worker profiles.
     * 
     * @param workerProfiles the workerProfiles value to set.
     * @return the OpenShiftClusterProperties object itself.
     */
    public OpenShiftClusterProperties withWorkerProfiles(List<WorkerProfile> workerProfiles) {
        this.workerProfiles = workerProfiles;
        return this;
    }

    /**
     * Get the workerProfilesStatus property: The cluster worker profiles status.
     * 
     * @return the workerProfilesStatus value.
     */
    public List<WorkerProfile> workerProfilesStatus() {
        return this.workerProfilesStatus;
    }

    /**
     * Get the apiserverProfile property: The cluster API server profile.
     * 
     * @return the apiserverProfile value.
     */
    public ApiServerProfile apiserverProfile() {
        return this.apiserverProfile;
    }

    /**
     * Set the apiserverProfile property: The cluster API server profile.
     * 
     * @param apiserverProfile the apiserverProfile value to set.
     * @return the OpenShiftClusterProperties object itself.
     */
    public OpenShiftClusterProperties withApiserverProfile(ApiServerProfile apiserverProfile) {
        this.apiserverProfile = apiserverProfile;
        return this;
    }

    /**
     * Get the ingressProfiles property: The cluster ingress profiles.
     * 
     * @return the ingressProfiles value.
     */
    public List<IngressProfile> ingressProfiles() {
        return this.ingressProfiles;
    }

    /**
     * Set the ingressProfiles property: The cluster ingress profiles.
     * 
     * @param ingressProfiles the ingressProfiles value to set.
     * @return the OpenShiftClusterProperties object itself.
     */
    public OpenShiftClusterProperties withIngressProfiles(List<IngressProfile> ingressProfiles) {
        this.ingressProfiles = ingressProfiles;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (clusterProfile() != null) {
            clusterProfile().validate();
        }
        if (consoleProfile() != null) {
            consoleProfile().validate();
        }
        if (servicePrincipalProfile() != null) {
            servicePrincipalProfile().validate();
        }
        if (networkProfile() != null) {
            networkProfile().validate();
        }
        if (masterProfile() != null) {
            masterProfile().validate();
        }
        if (workerProfiles() != null) {
            workerProfiles().forEach(e -> e.validate());
        }
        if (workerProfilesStatus() != null) {
            workerProfilesStatus().forEach(e -> e.validate());
        }
        if (apiserverProfile() != null) {
            apiserverProfile().validate();
        }
        if (ingressProfiles() != null) {
            ingressProfiles().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("provisioningState",
            this.provisioningState == null ? null : this.provisioningState.toString());
        jsonWriter.writeJsonField("clusterProfile", this.clusterProfile);
        jsonWriter.writeJsonField("consoleProfile", this.consoleProfile);
        jsonWriter.writeJsonField("servicePrincipalProfile", this.servicePrincipalProfile);
        jsonWriter.writeJsonField("networkProfile", this.networkProfile);
        jsonWriter.writeJsonField("masterProfile", this.masterProfile);
        jsonWriter.writeArrayField("workerProfiles", this.workerProfiles,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("apiserverProfile", this.apiserverProfile);
        jsonWriter.writeArrayField("ingressProfiles", this.ingressProfiles,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of OpenShiftClusterProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of OpenShiftClusterProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the OpenShiftClusterProperties.
     */
    public static OpenShiftClusterProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            OpenShiftClusterProperties deserializedOpenShiftClusterProperties = new OpenShiftClusterProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("provisioningState".equals(fieldName)) {
                    deserializedOpenShiftClusterProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else if ("clusterProfile".equals(fieldName)) {
                    deserializedOpenShiftClusterProperties.clusterProfile = ClusterProfile.fromJson(reader);
                } else if ("consoleProfile".equals(fieldName)) {
                    deserializedOpenShiftClusterProperties.consoleProfile = ConsoleProfile.fromJson(reader);
                } else if ("servicePrincipalProfile".equals(fieldName)) {
                    deserializedOpenShiftClusterProperties.servicePrincipalProfile
                        = ServicePrincipalProfile.fromJson(reader);
                } else if ("networkProfile".equals(fieldName)) {
                    deserializedOpenShiftClusterProperties.networkProfile = NetworkProfile.fromJson(reader);
                } else if ("masterProfile".equals(fieldName)) {
                    deserializedOpenShiftClusterProperties.masterProfile = MasterProfile.fromJson(reader);
                } else if ("workerProfiles".equals(fieldName)) {
                    List<WorkerProfile> workerProfiles = reader.readArray(reader1 -> WorkerProfile.fromJson(reader1));
                    deserializedOpenShiftClusterProperties.workerProfiles = workerProfiles;
                } else if ("workerProfilesStatus".equals(fieldName)) {
                    List<WorkerProfile> workerProfilesStatus
                        = reader.readArray(reader1 -> WorkerProfile.fromJson(reader1));
                    deserializedOpenShiftClusterProperties.workerProfilesStatus = workerProfilesStatus;
                } else if ("apiserverProfile".equals(fieldName)) {
                    deserializedOpenShiftClusterProperties.apiserverProfile = ApiServerProfile.fromJson(reader);
                } else if ("ingressProfiles".equals(fieldName)) {
                    List<IngressProfile> ingressProfiles
                        = reader.readArray(reader1 -> IngressProfile.fromJson(reader1));
                    deserializedOpenShiftClusterProperties.ingressProfiles = ingressProfiles;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedOpenShiftClusterProperties;
        });
    }
}
