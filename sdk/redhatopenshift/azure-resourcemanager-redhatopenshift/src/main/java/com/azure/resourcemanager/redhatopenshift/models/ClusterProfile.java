// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.redhatopenshift.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * ClusterProfile represents a cluster profile.
 */
@Fluent
public final class ClusterProfile implements JsonSerializable<ClusterProfile> {
    /*
     * The pull secret for the cluster.
     */
    private String pullSecret;

    /*
     * The domain for the cluster.
     */
    private String domain;

    /*
     * The version of the cluster.
     */
    private String version;

    /*
     * The ID of the cluster resource group.
     */
    private String resourceGroupId;

    /*
     * If FIPS validated crypto modules are used
     */
    private FipsValidatedModules fipsValidatedModules;

    /**
     * Creates an instance of ClusterProfile class.
     */
    public ClusterProfile() {
    }

    /**
     * Get the pullSecret property: The pull secret for the cluster.
     * 
     * @return the pullSecret value.
     */
    public String pullSecret() {
        return this.pullSecret;
    }

    /**
     * Set the pullSecret property: The pull secret for the cluster.
     * 
     * @param pullSecret the pullSecret value to set.
     * @return the ClusterProfile object itself.
     */
    public ClusterProfile withPullSecret(String pullSecret) {
        this.pullSecret = pullSecret;
        return this;
    }

    /**
     * Get the domain property: The domain for the cluster.
     * 
     * @return the domain value.
     */
    public String domain() {
        return this.domain;
    }

    /**
     * Set the domain property: The domain for the cluster.
     * 
     * @param domain the domain value to set.
     * @return the ClusterProfile object itself.
     */
    public ClusterProfile withDomain(String domain) {
        this.domain = domain;
        return this;
    }

    /**
     * Get the version property: The version of the cluster.
     * 
     * @return the version value.
     */
    public String version() {
        return this.version;
    }

    /**
     * Set the version property: The version of the cluster.
     * 
     * @param version the version value to set.
     * @return the ClusterProfile object itself.
     */
    public ClusterProfile withVersion(String version) {
        this.version = version;
        return this;
    }

    /**
     * Get the resourceGroupId property: The ID of the cluster resource group.
     * 
     * @return the resourceGroupId value.
     */
    public String resourceGroupId() {
        return this.resourceGroupId;
    }

    /**
     * Set the resourceGroupId property: The ID of the cluster resource group.
     * 
     * @param resourceGroupId the resourceGroupId value to set.
     * @return the ClusterProfile object itself.
     */
    public ClusterProfile withResourceGroupId(String resourceGroupId) {
        this.resourceGroupId = resourceGroupId;
        return this;
    }

    /**
     * Get the fipsValidatedModules property: If FIPS validated crypto modules are used.
     * 
     * @return the fipsValidatedModules value.
     */
    public FipsValidatedModules fipsValidatedModules() {
        return this.fipsValidatedModules;
    }

    /**
     * Set the fipsValidatedModules property: If FIPS validated crypto modules are used.
     * 
     * @param fipsValidatedModules the fipsValidatedModules value to set.
     * @return the ClusterProfile object itself.
     */
    public ClusterProfile withFipsValidatedModules(FipsValidatedModules fipsValidatedModules) {
        this.fipsValidatedModules = fipsValidatedModules;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("pullSecret", this.pullSecret);
        jsonWriter.writeStringField("domain", this.domain);
        jsonWriter.writeStringField("version", this.version);
        jsonWriter.writeStringField("resourceGroupId", this.resourceGroupId);
        jsonWriter.writeStringField("fipsValidatedModules",
            this.fipsValidatedModules == null ? null : this.fipsValidatedModules.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ClusterProfile from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ClusterProfile if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ClusterProfile.
     */
    public static ClusterProfile fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ClusterProfile deserializedClusterProfile = new ClusterProfile();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("pullSecret".equals(fieldName)) {
                    deserializedClusterProfile.pullSecret = reader.getString();
                } else if ("domain".equals(fieldName)) {
                    deserializedClusterProfile.domain = reader.getString();
                } else if ("version".equals(fieldName)) {
                    deserializedClusterProfile.version = reader.getString();
                } else if ("resourceGroupId".equals(fieldName)) {
                    deserializedClusterProfile.resourceGroupId = reader.getString();
                } else if ("fipsValidatedModules".equals(fieldName)) {
                    deserializedClusterProfile.fipsValidatedModules
                        = FipsValidatedModules.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedClusterProfile;
        });
    }
}
