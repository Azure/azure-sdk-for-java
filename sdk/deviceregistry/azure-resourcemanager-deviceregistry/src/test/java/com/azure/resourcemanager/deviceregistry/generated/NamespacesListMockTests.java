// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.deviceregistry.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.deviceregistry.DeviceRegistryManager;
import com.azure.resourcemanager.deviceregistry.models.Namespace;
import com.azure.resourcemanager.deviceregistry.models.SystemAssignedServiceIdentityType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class NamespacesListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"uuid\":\"mzlbiojlvfhrb\",\"messaging\":{\"endpoints\":{\"cpilj\":{\"endpointType\":\"vcwwyyurmochppr\",\"address\":\"rsnm\",\"resourceId\":\"ayzejnhlbkpbz\"},\"e\":{\"endpointType\":\"hzvechndbnwieho\",\"address\":\"ewjwiuubw\",\"resourceId\":\"qsfapaqt\"},\"pud\":{\"endpointType\":\"q\",\"address\":\"ex\",\"resourceId\":\"mfxapjwogqqno\"},\"i\":{\"endpointType\":\"abtqwpwyawbzasqb\",\"address\":\"clj\",\"resourceId\":\"yexaoguy\"}}},\"provisioningState\":\"Failed\"},\"identity\":{\"principalId\":\"ault\",\"tenantId\":\"jjum\",\"type\":\"SystemAssigned\"},\"location\":\"azlnqnmcjngzqdqx\",\"tags\":{\"zh\":\"wgnyfusfzsvtui\"},\"id\":\"jqg\",\"name\":\"cfhmlrqryxyn\",\"type\":\"nzrdpsovwxz\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        DeviceRegistryManager manager = DeviceRegistryManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PagedIterable<Namespace> response = manager.namespaces().list(com.azure.core.util.Context.NONE);

        Assertions.assertEquals("azlnqnmcjngzqdqx", response.iterator().next().location());
        Assertions.assertEquals("wgnyfusfzsvtui", response.iterator().next().tags().get("zh"));
        Assertions.assertEquals("vcwwyyurmochppr",
            response.iterator().next().properties().messaging().endpoints().get("cpilj").endpointType());
        Assertions.assertEquals("rsnm",
            response.iterator().next().properties().messaging().endpoints().get("cpilj").address());
        Assertions.assertEquals("ayzejnhlbkpbz",
            response.iterator().next().properties().messaging().endpoints().get("cpilj").resourceId());
        Assertions.assertEquals(SystemAssignedServiceIdentityType.SYSTEM_ASSIGNED,
            response.iterator().next().identity().type());
    }
}
