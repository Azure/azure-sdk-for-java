// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.deviceregistry.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.deviceregistry.models.EventDestination;
import com.azure.resourcemanager.deviceregistry.models.NamespaceDiscoveredEvent;
import com.azure.resourcemanager.deviceregistry.models.NamespaceDiscoveredEventDataPoint;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class NamespaceDiscoveredEventTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        NamespaceDiscoveredEvent model = BinaryData.fromString(
            "{\"name\":\"rgzdwmsweyp\",\"eventNotifier\":\"w\",\"eventConfiguration\":\"ggicccnxqhue\",\"destinations\":[{\"target\":\"EventDestination\"}],\"typeRef\":\"tlstvlzywem\",\"dataPoints\":[{\"name\":\"ncsdtclusiyp\",\"dataSource\":\"sfgytguslfead\",\"dataPointConfiguration\":\"gq\",\"lastUpdatedOn\":\"2021-11-04T08:30:12Z\"},{\"name\":\"hejhzisx\",\"dataSource\":\"fpel\",\"dataPointConfiguration\":\"p\",\"lastUpdatedOn\":\"2021-08-01T09:22:37Z\"},{\"name\":\"srp\",\"dataSource\":\"vu\",\"dataPointConfiguration\":\"raehtwdwrft\",\"lastUpdatedOn\":\"2021-06-07T20:23:50Z\"}],\"lastUpdatedOn\":\"2021-10-26T11:25:15Z\"}")
            .toObject(NamespaceDiscoveredEvent.class);
        Assertions.assertEquals("rgzdwmsweyp", model.name());
        Assertions.assertEquals("w", model.eventNotifier());
        Assertions.assertEquals("ggicccnxqhue", model.eventConfiguration());
        Assertions.assertEquals("tlstvlzywem", model.typeRef());
        Assertions.assertEquals("ncsdtclusiyp", model.dataPoints().get(0).name());
        Assertions.assertEquals("sfgytguslfead", model.dataPoints().get(0).dataSource());
        Assertions.assertEquals("gq", model.dataPoints().get(0).dataPointConfiguration());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-04T08:30:12Z"),
            model.dataPoints().get(0).lastUpdatedOn());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-26T11:25:15Z"), model.lastUpdatedOn());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        NamespaceDiscoveredEvent model = new NamespaceDiscoveredEvent().withName("rgzdwmsweyp")
            .withEventNotifier("w")
            .withEventConfiguration("ggicccnxqhue")
            .withDestinations(Arrays.asList(new EventDestination()))
            .withTypeRef("tlstvlzywem")
            .withDataPoints(Arrays.asList(
                new NamespaceDiscoveredEventDataPoint().withName("ncsdtclusiyp")
                    .withDataSource("sfgytguslfead")
                    .withDataPointConfiguration("gq")
                    .withLastUpdatedOn(OffsetDateTime.parse("2021-11-04T08:30:12Z")),
                new NamespaceDiscoveredEventDataPoint().withName("hejhzisx")
                    .withDataSource("fpel")
                    .withDataPointConfiguration("p")
                    .withLastUpdatedOn(OffsetDateTime.parse("2021-08-01T09:22:37Z")),
                new NamespaceDiscoveredEventDataPoint().withName("srp")
                    .withDataSource("vu")
                    .withDataPointConfiguration("raehtwdwrft")
                    .withLastUpdatedOn(OffsetDateTime.parse("2021-06-07T20:23:50Z"))))
            .withLastUpdatedOn(OffsetDateTime.parse("2021-10-26T11:25:15Z"));
        model = BinaryData.fromObject(model).toObject(NamespaceDiscoveredEvent.class);
        Assertions.assertEquals("rgzdwmsweyp", model.name());
        Assertions.assertEquals("w", model.eventNotifier());
        Assertions.assertEquals("ggicccnxqhue", model.eventConfiguration());
        Assertions.assertEquals("tlstvlzywem", model.typeRef());
        Assertions.assertEquals("ncsdtclusiyp", model.dataPoints().get(0).name());
        Assertions.assertEquals("sfgytguslfead", model.dataPoints().get(0).dataSource());
        Assertions.assertEquals("gq", model.dataPoints().get(0).dataPointConfiguration());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-04T08:30:12Z"),
            model.dataPoints().get(0).lastUpdatedOn());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-26T11:25:15Z"), model.lastUpdatedOn());
    }
}
