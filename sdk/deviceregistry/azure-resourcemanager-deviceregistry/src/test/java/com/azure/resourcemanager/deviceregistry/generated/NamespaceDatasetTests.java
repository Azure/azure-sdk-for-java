// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.deviceregistry.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.deviceregistry.models.DatasetDestination;
import com.azure.resourcemanager.deviceregistry.models.NamespaceDataset;
import com.azure.resourcemanager.deviceregistry.models.NamespaceDatasetDataPoint;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class NamespaceDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        NamespaceDataset model = BinaryData.fromString(
            "{\"name\":\"wpn\",\"dataSource\":\"t\",\"typeRef\":\"nermcl\",\"datasetConfiguration\":\"lphox\",\"destinations\":[{\"target\":\"DatasetDestination\"},{\"target\":\"DatasetDestination\"}],\"dataPoints\":[{\"name\":\"abgy\",\"dataSource\":\"psbjta\",\"dataPointConfiguration\":\"ugxywpmueef\",\"typeRef\":\"wfqkquj\"},{\"name\":\"dsuyonobgla\",\"dataSource\":\"cq\",\"dataPointConfiguration\":\"ccm\",\"typeRef\":\"udxytlmoyrx\"}]}")
            .toObject(NamespaceDataset.class);
        Assertions.assertEquals("wpn", model.name());
        Assertions.assertEquals("t", model.dataSource());
        Assertions.assertEquals("nermcl", model.typeRef());
        Assertions.assertEquals("lphox", model.datasetConfiguration());
        Assertions.assertEquals("abgy", model.dataPoints().get(0).name());
        Assertions.assertEquals("psbjta", model.dataPoints().get(0).dataSource());
        Assertions.assertEquals("ugxywpmueef", model.dataPoints().get(0).dataPointConfiguration());
        Assertions.assertEquals("wfqkquj", model.dataPoints().get(0).typeRef());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        NamespaceDataset model = new NamespaceDataset().withName("wpn")
            .withDataSource("t")
            .withTypeRef("nermcl")
            .withDatasetConfiguration("lphox")
            .withDestinations(Arrays.asList(new DatasetDestination(), new DatasetDestination()))
            .withDataPoints(Arrays.asList(
                new NamespaceDatasetDataPoint().withName("abgy")
                    .withDataSource("psbjta")
                    .withDataPointConfiguration("ugxywpmueef")
                    .withTypeRef("wfqkquj"),
                new NamespaceDatasetDataPoint().withName("dsuyonobgla")
                    .withDataSource("cq")
                    .withDataPointConfiguration("ccm")
                    .withTypeRef("udxytlmoyrx")));
        model = BinaryData.fromObject(model).toObject(NamespaceDataset.class);
        Assertions.assertEquals("wpn", model.name());
        Assertions.assertEquals("t", model.dataSource());
        Assertions.assertEquals("nermcl", model.typeRef());
        Assertions.assertEquals("lphox", model.datasetConfiguration());
        Assertions.assertEquals("abgy", model.dataPoints().get(0).name());
        Assertions.assertEquals("psbjta", model.dataPoints().get(0).dataSource());
        Assertions.assertEquals("ugxywpmueef", model.dataPoints().get(0).dataPointConfiguration());
        Assertions.assertEquals("wfqkquj", model.dataPoints().get(0).typeRef());
    }
}
