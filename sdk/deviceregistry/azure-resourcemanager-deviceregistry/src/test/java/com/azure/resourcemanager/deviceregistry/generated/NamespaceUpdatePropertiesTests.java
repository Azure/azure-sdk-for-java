// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.deviceregistry.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.deviceregistry.models.Messaging;
import com.azure.resourcemanager.deviceregistry.models.MessagingEndpoint;
import com.azure.resourcemanager.deviceregistry.models.NamespaceUpdateProperties;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class NamespaceUpdatePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        NamespaceUpdateProperties model = BinaryData.fromString(
            "{\"messaging\":{\"endpoints\":{\"ithlvmezyvshxm\":{\"endpointType\":\"osvexcsonpclhoc\",\"address\":\"hslkevleggzf\",\"resourceId\":\"hfmvfaxkffe\"}}}}")
            .toObject(NamespaceUpdateProperties.class);
        Assertions.assertEquals("osvexcsonpclhoc", model.messaging().endpoints().get("ithlvmezyvshxm").endpointType());
        Assertions.assertEquals("hslkevleggzf", model.messaging().endpoints().get("ithlvmezyvshxm").address());
        Assertions.assertEquals("hfmvfaxkffe", model.messaging().endpoints().get("ithlvmezyvshxm").resourceId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        NamespaceUpdateProperties model
            = new NamespaceUpdateProperties().withMessaging(new Messaging().withEndpoints(mapOf("ithlvmezyvshxm",
                new MessagingEndpoint().withEndpointType("osvexcsonpclhoc")
                    .withAddress("hslkevleggzf")
                    .withResourceId("hfmvfaxkffe"))));
        model = BinaryData.fromObject(model).toObject(NamespaceUpdateProperties.class);
        Assertions.assertEquals("osvexcsonpclhoc", model.messaging().endpoints().get("ithlvmezyvshxm").endpointType());
        Assertions.assertEquals("hslkevleggzf", model.messaging().endpoints().get("ithlvmezyvshxm").address());
        Assertions.assertEquals("hfmvfaxkffe", model.messaging().endpoints().get("ithlvmezyvshxm").resourceId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
