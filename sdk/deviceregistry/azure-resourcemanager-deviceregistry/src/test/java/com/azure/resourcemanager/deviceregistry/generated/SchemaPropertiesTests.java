// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.deviceregistry.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.deviceregistry.models.Format;
import com.azure.resourcemanager.deviceregistry.models.SchemaProperties;
import com.azure.resourcemanager.deviceregistry.models.SchemaType;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SchemaPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SchemaProperties model = BinaryData.fromString(
            "{\"uuid\":\"gaehvvibrxjjst\",\"displayName\":\"beitpkx\",\"description\":\"moob\",\"format\":\"Delta/1.0\",\"schemaType\":\"MessageSchema\",\"provisioningState\":\"Accepted\",\"tags\":{\"qmpimaqxzhem\":\"fc\",\"lkb\":\"yhohujswtwkozzwc\",\"jwltlwtjjgu\":\"wpfaj\",\"oaimlnw\":\"talhsnvkcdmxzr\"}}")
            .toObject(SchemaProperties.class);
        Assertions.assertEquals("beitpkx", model.displayName());
        Assertions.assertEquals("moob", model.description());
        Assertions.assertEquals(Format.DELTA_1_0, model.format());
        Assertions.assertEquals(SchemaType.MESSAGE_SCHEMA, model.schemaType());
        Assertions.assertEquals("fc", model.tags().get("qmpimaqxzhem"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SchemaProperties model = new SchemaProperties().withDisplayName("beitpkx")
            .withDescription("moob")
            .withFormat(Format.DELTA_1_0)
            .withSchemaType(SchemaType.MESSAGE_SCHEMA)
            .withTags(mapOf("qmpimaqxzhem", "fc", "lkb", "yhohujswtwkozzwc", "jwltlwtjjgu", "wpfaj", "oaimlnw",
                "talhsnvkcdmxzr"));
        model = BinaryData.fromObject(model).toObject(SchemaProperties.class);
        Assertions.assertEquals("beitpkx", model.displayName());
        Assertions.assertEquals("moob", model.description());
        Assertions.assertEquals(Format.DELTA_1_0, model.format());
        Assertions.assertEquals(SchemaType.MESSAGE_SCHEMA, model.schemaType());
        Assertions.assertEquals("fc", model.tags().get("qmpimaqxzhem"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
