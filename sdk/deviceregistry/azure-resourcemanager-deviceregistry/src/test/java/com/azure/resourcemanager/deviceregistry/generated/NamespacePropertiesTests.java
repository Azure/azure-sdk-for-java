// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.deviceregistry.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.deviceregistry.models.Messaging;
import com.azure.resourcemanager.deviceregistry.models.MessagingEndpoint;
import com.azure.resourcemanager.deviceregistry.models.NamespaceProperties;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class NamespacePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        NamespaceProperties model = BinaryData.fromString(
            "{\"uuid\":\"zwdejbavor\",\"messaging\":{\"endpoints\":{\"zj\":{\"endpointType\":\"hctbqvudwxdn\",\"address\":\"nvowgujju\",\"resourceId\":\"dkcglhsl\"},\"fyexfwhy\":{\"endpointType\":\"ggd\",\"address\":\"jixhbk\",\"resourceId\":\"fqweykhmene\"}}},\"provisioningState\":\"Succeeded\"}")
            .toObject(NamespaceProperties.class);
        Assertions.assertEquals("hctbqvudwxdn", model.messaging().endpoints().get("zj").endpointType());
        Assertions.assertEquals("nvowgujju", model.messaging().endpoints().get("zj").address());
        Assertions.assertEquals("dkcglhsl", model.messaging().endpoints().get("zj").resourceId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        NamespaceProperties model = new NamespaceProperties().withMessaging(new Messaging().withEndpoints(mapOf("zj",
            new MessagingEndpoint().withEndpointType("hctbqvudwxdn")
                .withAddress("nvowgujju")
                .withResourceId("dkcglhsl"),
            "fyexfwhy",
            new MessagingEndpoint().withEndpointType("ggd").withAddress("jixhbk").withResourceId("fqweykhmene"))));
        model = BinaryData.fromObject(model).toObject(NamespaceProperties.class);
        Assertions.assertEquals("hctbqvudwxdn", model.messaging().endpoints().get("zj").endpointType());
        Assertions.assertEquals("nvowgujju", model.messaging().endpoints().get("zj").address());
        Assertions.assertEquals("dkcglhsl", model.messaging().endpoints().get("zj").resourceId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
