// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.deviceregistry.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.deviceregistry.fluent.models.SchemaRegistryInner;
import com.azure.resourcemanager.deviceregistry.models.SchemaRegistryProperties;
import com.azure.resourcemanager.deviceregistry.models.SystemAssignedServiceIdentity;
import com.azure.resourcemanager.deviceregistry.models.SystemAssignedServiceIdentityType;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SchemaRegistryInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SchemaRegistryInner model = BinaryData.fromString(
            "{\"properties\":{\"uuid\":\"dwl\",\"namespace\":\"w\",\"displayName\":\"oupfgfb\",\"description\":\"ubdyhgk\",\"storageAccountContainerUrl\":\"minsgowzf\",\"provisioningState\":\"Canceled\"},\"identity\":{\"principalId\":\"ktlahbqa\",\"tenantId\":\"xtgzukxitmmqtgqq\",\"type\":\"None\"},\"location\":\"rnxrxcpj\",\"tags\":{\"k\":\"av\",\"azivjlfrqttbajl\":\"dzf\",\"kqqfk\":\"atnwxyiopi\"},\"id\":\"vscx\",\"name\":\"dmligovibrxk\",\"type\":\"mloazuru\"}")
            .toObject(SchemaRegistryInner.class);
        Assertions.assertEquals("rnxrxcpj", model.location());
        Assertions.assertEquals("av", model.tags().get("k"));
        Assertions.assertEquals("w", model.properties().namespace());
        Assertions.assertEquals("oupfgfb", model.properties().displayName());
        Assertions.assertEquals("ubdyhgk", model.properties().description());
        Assertions.assertEquals("minsgowzf", model.properties().storageAccountContainerUrl());
        Assertions.assertEquals(SystemAssignedServiceIdentityType.NONE, model.identity().type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SchemaRegistryInner model = new SchemaRegistryInner().withLocation("rnxrxcpj")
            .withTags(mapOf("k", "av", "azivjlfrqttbajl", "dzf", "kqqfk", "atnwxyiopi"))
            .withProperties(new SchemaRegistryProperties().withNamespace("w")
                .withDisplayName("oupfgfb")
                .withDescription("ubdyhgk")
                .withStorageAccountContainerUrl("minsgowzf"))
            .withIdentity(new SystemAssignedServiceIdentity().withType(SystemAssignedServiceIdentityType.NONE));
        model = BinaryData.fromObject(model).toObject(SchemaRegistryInner.class);
        Assertions.assertEquals("rnxrxcpj", model.location());
        Assertions.assertEquals("av", model.tags().get("k"));
        Assertions.assertEquals("w", model.properties().namespace());
        Assertions.assertEquals("oupfgfb", model.properties().displayName());
        Assertions.assertEquals("ubdyhgk", model.properties().description());
        Assertions.assertEquals("minsgowzf", model.properties().storageAccountContainerUrl());
        Assertions.assertEquals(SystemAssignedServiceIdentityType.NONE, model.identity().type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
