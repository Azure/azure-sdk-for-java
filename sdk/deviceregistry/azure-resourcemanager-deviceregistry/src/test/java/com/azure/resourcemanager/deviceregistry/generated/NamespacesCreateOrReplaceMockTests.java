// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.deviceregistry.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.deviceregistry.DeviceRegistryManager;
import com.azure.resourcemanager.deviceregistry.models.Messaging;
import com.azure.resourcemanager.deviceregistry.models.MessagingEndpoint;
import com.azure.resourcemanager.deviceregistry.models.Namespace;
import com.azure.resourcemanager.deviceregistry.models.NamespaceProperties;
import com.azure.resourcemanager.deviceregistry.models.SystemAssignedServiceIdentity;
import com.azure.resourcemanager.deviceregistry.models.SystemAssignedServiceIdentityType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class NamespacesCreateOrReplaceMockTests {
    @Test
    public void testCreateOrReplace() throws Exception {
        String responseStr
            = "{\"properties\":{\"uuid\":\"ebwtswb\",\"messaging\":{\"endpoints\":{\"bsazgakg\":{\"endpointType\":\"duragegizvc\",\"address\":\"felisdjub\",\"resourceId\":\"bqigkx\"}}},\"provisioningState\":\"Succeeded\"},\"identity\":{\"principalId\":\"m\",\"tenantId\":\"mspofapvuhryl\",\"type\":\"SystemAssigned\"},\"location\":\"frzgbzjed\",\"tags\":{\"f\":\"kvnlvxbcuiiznkt\",\"bmikost\":\"nsnvpd\",\"kiwbuqnyoph\":\"z\",\"sgcrpfbcunezzce\":\"fy\"},\"id\":\"elfwy\",\"name\":\"wl\",\"type\":\"xjwet\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        DeviceRegistryManager manager = DeviceRegistryManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        Namespace response = manager.namespaces()
            .define("ojphslhc")
            .withRegion("mv")
            .withExistingResourceGroup("llxecwc")
            .withTags(
                mapOf("nsup", "tayx", "oibgsxg", "ujlzqnhcvsqltn", "dbxiqx", "xfyqonmpqoxwdo", "htmwwinh", "iiqbi"))
            .withProperties(new NamespaceProperties().withMessaging(new Messaging().withEndpoints(mapOf("vcpopmxe",
                new MessagingEndpoint().withEndpointType("fmvigorqjbttzh")
                    .withAddress("aglkafhon")
                    .withResourceId("ujeickp"),
                "awx",
                new MessagingEndpoint().withEndpointType("wcltyjede").withAddress("xm").withResourceId("mkqscaz"),
                "lvgsgzwywakoih",
                new MessagingEndpoint().withEndpointType("x")
                    .withAddress("uamwabzxrvxc")
                    .withResourceId("hsphaivmxyas")))))
            .withIdentity(new SystemAssignedServiceIdentity().withType(SystemAssignedServiceIdentityType.NONE))
            .create();

        Assertions.assertEquals("frzgbzjed", response.location());
        Assertions.assertEquals("kvnlvxbcuiiznkt", response.tags().get("f"));
        Assertions.assertEquals("duragegizvc",
            response.properties().messaging().endpoints().get("bsazgakg").endpointType());
        Assertions.assertEquals("felisdjub", response.properties().messaging().endpoints().get("bsazgakg").address());
        Assertions.assertEquals("bqigkx", response.properties().messaging().endpoints().get("bsazgakg").resourceId());
        Assertions.assertEquals(SystemAssignedServiceIdentityType.SYSTEM_ASSIGNED, response.identity().type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
