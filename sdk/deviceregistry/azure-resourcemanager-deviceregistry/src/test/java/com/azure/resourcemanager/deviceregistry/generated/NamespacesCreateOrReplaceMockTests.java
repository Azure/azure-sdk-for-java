// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.deviceregistry.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.deviceregistry.DeviceRegistryManager;
import com.azure.resourcemanager.deviceregistry.models.Messaging;
import com.azure.resourcemanager.deviceregistry.models.MessagingEndpoint;
import com.azure.resourcemanager.deviceregistry.models.Namespace;
import com.azure.resourcemanager.deviceregistry.models.NamespaceProperties;
import com.azure.resourcemanager.deviceregistry.models.SystemAssignedServiceIdentity;
import com.azure.resourcemanager.deviceregistry.models.SystemAssignedServiceIdentityType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class NamespacesCreateOrReplaceMockTests {
    @Test
    public void testCreateOrReplace() throws Exception {
        String responseStr
            = "{\"properties\":{\"uuid\":\"qzinkfkbg\",\"messaging\":{\"endpoints\":{\"fezrx\":{\"endpointType\":\"xeqoc\",\"address\":\"jmygvk\",\"resourceId\":\"kjjeokbz\"},\"bostzel\":{\"endpointType\":\"zurtleipqxbkwvz\",\"address\":\"nzvdfbzdixzmq\",\"resourceId\":\"odawopqhewjptmcg\"},\"prprsnmokay\":{\"endpointType\":\"la\",\"address\":\"utmzlbiojlvfhrbb\",\"resourceId\":\"eqvcwwyyurmoch\"}}},\"provisioningState\":\"Succeeded\"},\"identity\":{\"principalId\":\"lbkpb\",\"tenantId\":\"cpilj\",\"type\":\"None\"},\"location\":\"zv\",\"tags\":{\"lewjwiuubwef\":\"ndbnwieh\"},\"id\":\"sfapaqtferrq\",\"name\":\"ex\",\"type\":\"kmfx\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        DeviceRegistryManager manager = DeviceRegistryManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        Namespace response = manager.namespaces()
            .define("eglqgleohibetn")
            .withRegion("zfjltfvnzcyjto")
            .withExistingResourceGroup("mfg")
            .withTags(mapOf("bdb", "opv", "ibcysihsgqc", "qgqqihedsvqwthmk"))
            .withProperties(new NamespaceProperties().withMessaging(new Messaging().withEndpoints(mapOf("jrnwxacev",
                new MessagingEndpoint().withEndpointType("tijv").withAddress("cvbmqzb").withResourceId("xl"),
                "eyhlqhykprl",
                new MessagingEndpoint().withEndpointType("jkuyxoafgaoq")
                    .withAddress("tfaeyl")
                    .withResourceId("mfgvxirpghriypo"),
                "jh",
                new MessagingEndpoint().withEndpointType("znuciqdsm")
                    .withAddress("xiitdfuxt")
                    .withResourceId("siibmiybnnustgn"),
                "wy",
                new MessagingEndpoint().withEndpointType("g").withAddress("xhcmavmqfoudo").withResourceId("cgyypro")))))
            .withIdentity(
                new SystemAssignedServiceIdentity().withType(SystemAssignedServiceIdentityType.SYSTEM_ASSIGNED))
            .create();

        Assertions.assertEquals("zv", response.location());
        Assertions.assertEquals("ndbnwieh", response.tags().get("lewjwiuubwef"));
        Assertions.assertEquals("xeqoc", response.properties().messaging().endpoints().get("fezrx").endpointType());
        Assertions.assertEquals("jmygvk", response.properties().messaging().endpoints().get("fezrx").address());
        Assertions.assertEquals("kjjeokbz", response.properties().messaging().endpoints().get("fezrx").resourceId());
        Assertions.assertEquals(SystemAssignedServiceIdentityType.NONE, response.identity().type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
