// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.deviceregistry.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.deviceregistry.DeviceRegistryManager;
import com.azure.resourcemanager.deviceregistry.models.AuthenticationMethod;
import com.azure.resourcemanager.deviceregistry.models.DeviceMessagingEndpoint;
import com.azure.resourcemanager.deviceregistry.models.DiscoveredInboundEndpoints;
import com.azure.resourcemanager.deviceregistry.models.DiscoveredMessagingEndpoints;
import com.azure.resourcemanager.deviceregistry.models.DiscoveredOutboundEndpoints;
import com.azure.resourcemanager.deviceregistry.models.ExtendedLocation;
import com.azure.resourcemanager.deviceregistry.models.NamespaceDiscoveredDevice;
import com.azure.resourcemanager.deviceregistry.models.NamespaceDiscoveredDeviceProperties;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class NamespaceDiscoveredDevicesCreateOrReplaceMockTests {
    @Test
    public void testCreateOrReplace() throws Exception {
        String responseStr
            = "{\"properties\":{\"externalDeviceId\":\"oy\",\"endpoints\":{\"inbound\":{\"masj\":{\"endpointType\":\"haim\",\"address\":\"oir\",\"version\":\"boshbragapyyrmfs\",\"supportedAuthenticationMethods\":[\"Anonymous\",\"Anonymous\"],\"additionalConfiguration\":\"opfppdbwnupgah\",\"lastUpdatedOn\":\"2021-09-13T02:28:36Z\"},\"ucsofldpuviyf\":{\"endpointType\":\"aacfdmmc\",\"address\":\"ugmehqepvufhbze\",\"version\":\"whoqhnlbqnbldxe\",\"supportedAuthenticationMethods\":[\"Certificate\"],\"additionalConfiguration\":\"chorimkrsr\",\"lastUpdatedOn\":\"2021-03-22T23:28:04Z\"}},\"outbound\":{\"assigned\":{\"hlvbmxu\":{\"address\":\"beolh\"},\"b\":{\"address\":\"ibsxtkcud\"},\"owlkjxnqpv\":{\"address\":\"farfs\"}}}},\"manufacturer\":\"fstmhqykizmdksao\",\"model\":\"cluqvo\",\"operatingSystem\":\"ycjimryvwgcwwpbm\",\"operatingSystemVersion\":\"w\",\"attributes\":{},\"discoveryId\":\"dsxwefoh\",\"version\":8750933196132518992,\"provisioningState\":\"Succeeded\"},\"extendedLocation\":{\"type\":\"pwndyqlea\",\"name\":\"lklmtkhlo\"},\"location\":\"x\",\"tags\":{\"fjmzsyzfho\":\"br\",\"pjrtws\":\"lhikcyychunsj\",\"uic\":\"hv\",\"ubhvj\":\"hvtrrmhwrbfdpyf\"},\"id\":\"lrocuyzlwh\",\"name\":\"memhooclutnpq\",\"type\":\"emc\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        DeviceRegistryManager manager = DeviceRegistryManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        NamespaceDiscoveredDevice response = manager.namespaceDiscoveredDevices()
            .define("ftbyrplro")
            .withRegion("dd")
            .withExistingNamespace("etndnbfqyggagf", "nlgmtrwahzjmu")
            .withExtendedLocation(new ExtendedLocation().withType("obdxnazpmkmlm").withName("evfxzopjhbzxlioh"))
            .withTags(mapOf("bnzqcyknapq", "xqbawpc", "bd", "fyuicdh", "d", "bwwg"))
            .withProperties(new NamespaceDiscoveredDeviceProperties().withExternalDeviceId("igqfusuc")
                .withEndpoints(new DiscoveredMessagingEndpoints()
                    .withInbound(mapOf("neizjcpe",
                        new DiscoveredInboundEndpoints().withEndpointType("wklsnoxaxmqe")
                            .withAddress("alhhjnhgwydyynfs")
                            .withVersion("hgbvqtan")
                            .withSupportedAuthenticationMethods(Arrays.asList(AuthenticationMethod.USERNAME_PASSWORD,
                                AuthenticationMethod.ANONYMOUS, AuthenticationMethod.USERNAME_PASSWORD))
                            .withAdditionalConfiguration("kh")
                            .withLastUpdatedOn(OffsetDateTime.parse("2021-02-11T16:10:30Z")),
                        "yoogw",
                        new DiscoveredInboundEndpoints().withEndpointType("gkhnmgbrouxddbh")
                            .withAddress("hpfpazjzoywjxhp")
                            .withVersion("lontacnpq")
                            .withSupportedAuthenticationMethods(Arrays.asList(AuthenticationMethod.CERTIFICATE,
                                AuthenticationMethod.ANONYMOUS, AuthenticationMethod.ANONYMOUS))
                            .withAdditionalConfiguration("vrh")
                            .withLastUpdatedOn(OffsetDateTime.parse("2021-06-24T05:35:51Z")),
                        "devjb",
                        new DiscoveredInboundEndpoints().withEndpointType("hnsduugwbsreur")
                            .withAddress("q")
                            .withVersion("uarenlv")
                            .withSupportedAuthenticationMethods(Arrays.asList(AuthenticationMethod.USERNAME_PASSWORD,
                                AuthenticationMethod.USERNAME_PASSWORD, AuthenticationMethod.USERNAME_PASSWORD,
                                AuthenticationMethod.USERNAME_PASSWORD))
                            .withAdditionalConfiguration("afvvk")
                            .withLastUpdatedOn(OffsetDateTime.parse("2021-04-06T11:17:07Z"))))
                    .withOutbound(new DiscoveredOutboundEndpoints()
                        .withAssigned(mapOf("ymc", new DeviceMessagingEndpoint().withAddress("cqxypokkhminq"),
                            "ninvudbchaqdt", new DeviceMessagingEndpoint().withAddress("ngnbdxxew"), "tddmf",
                            new DeviceMessagingEndpoint().withAddress("qecrqctmxx")))))
                .withManufacturer("uytxzvtznapxban")
                .withModel("vvoxczytprwnw")
                .withOperatingSystem("oevytlyokr")
                .withOperatingSystemVersion("o")
                .withAttributes(mapOf())
                .withDiscoveryId("vnsasbcrymodi")
                .withVersion(6263247566016203810L))
            .create();

        Assertions.assertEquals("x", response.location());
        Assertions.assertEquals("br", response.tags().get("fjmzsyzfho"));
        Assertions.assertEquals("oy", response.properties().externalDeviceId());
        Assertions.assertEquals("haim", response.properties().endpoints().inbound().get("masj").endpointType());
        Assertions.assertEquals("oir", response.properties().endpoints().inbound().get("masj").address());
        Assertions.assertEquals("boshbragapyyrmfs", response.properties().endpoints().inbound().get("masj").version());
        Assertions.assertEquals(AuthenticationMethod.ANONYMOUS,
            response.properties().endpoints().inbound().get("masj").supportedAuthenticationMethods().get(0));
        Assertions.assertEquals("opfppdbwnupgah",
            response.properties().endpoints().inbound().get("masj").additionalConfiguration());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-13T02:28:36Z"),
            response.properties().endpoints().inbound().get("masj").lastUpdatedOn());
        Assertions.assertEquals("beolh",
            response.properties().endpoints().outbound().assigned().get("hlvbmxu").address());
        Assertions.assertEquals("fstmhqykizmdksao", response.properties().manufacturer());
        Assertions.assertEquals("cluqvo", response.properties().model());
        Assertions.assertEquals("ycjimryvwgcwwpbm", response.properties().operatingSystem());
        Assertions.assertEquals("w", response.properties().operatingSystemVersion());
        Assertions.assertEquals("dsxwefoh", response.properties().discoveryId());
        Assertions.assertEquals(8750933196132518992L, response.properties().version());
        Assertions.assertEquals("pwndyqlea", response.extendedLocation().type());
        Assertions.assertEquals("lklmtkhlo", response.extendedLocation().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
