// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.deviceregistry.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.deviceregistry.DeviceRegistryManager;
import com.azure.resourcemanager.deviceregistry.models.AuthenticationMethod;
import com.azure.resourcemanager.deviceregistry.models.DeviceMessagingEndpoint;
import com.azure.resourcemanager.deviceregistry.models.DiscoveredInboundEndpoints;
import com.azure.resourcemanager.deviceregistry.models.DiscoveredMessagingEndpoints;
import com.azure.resourcemanager.deviceregistry.models.DiscoveredOutboundEndpoints;
import com.azure.resourcemanager.deviceregistry.models.ExtendedLocation;
import com.azure.resourcemanager.deviceregistry.models.NamespaceDiscoveredDevice;
import com.azure.resourcemanager.deviceregistry.models.NamespaceDiscoveredDeviceProperties;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class NamespaceDiscoveredDevicesCreateOrReplaceMockTests {
    @Test
    public void testCreateOrReplace() throws Exception {
        String responseStr
            = "{\"properties\":{\"externalDeviceId\":\"zlanrupdwvnph\",\"endpoints\":{\"inbound\":{\"pxy\":{\"endpointType\":\"tpjhm\",\"address\":\"rhv\",\"version\":\"laiwdcxsmlzzh\",\"supportedAuthenticationMethods\":[\"UsernamePassword\",\"Anonymous\",\"Anonymous\"],\"additionalConfiguration\":\"gydlhqv\",\"lastUpdatedOn\":\"2021-05-07T23:31:59Z\"}},\"outbound\":{\"assigned\":{\"arbgjekgl\":{\"address\":\"iqge\"},\"jonfhjirwgdnqzbr\":{\"address\":\"lbyulidwcwvmze\"}}}},\"manufacturer\":\"spzhzmtksjc\",\"model\":\"digsxcdgl\",\"operatingSystem\":\"lkeuac\",\"operatingSystemVersion\":\"omflrytswfp\",\"attributes\":{},\"discoveryId\":\"gycxnmskwhqjjys\",\"version\":7889594370600381712,\"provisioningState\":\"Succeeded\"},\"extendedLocation\":{\"type\":\"shhkvpedw\",\"name\":\"slsrhmpq\"},\"location\":\"wskondcbrwimuvqe\",\"tags\":{\"tljqobbpih\":\"ovyrrleaesinu\"},\"id\":\"hcecybmrqbr\",\"name\":\"bbmpxdlvykfre\",\"type\":\"crse\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        DeviceRegistryManager manager = DeviceRegistryManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        NamespaceDiscoveredDevice response
            = manager.namespaceDiscoveredDevices()
                .define("rryejylmbkzudnig")
                .withRegion("uchlgmltx")
                .withExistingNamespace("jk", "mykyujxsglhs")
                .withExtendedLocation(new ExtendedLocation().withType("kolawjmjsmwrokc").withName("xfzzzwyjafitlhgu"))
                .withTags(mapOf("pafolp", "mozusgzvlnsnnjz"))
                .withProperties(
                    new NamespaceDiscoveredDeviceProperties().withExternalDeviceId("hotj")
                        .withEndpoints(
                            new DiscoveredMessagingEndpoints()
                                .withInbound(mapOf("ietgbebjfu",
                                    new DiscoveredInboundEndpoints().withEndpointType("xuzzjgnrefq")
                                        .withAddress("hqo")
                                        .withVersion("ihiqakydiw")
                                        .withSupportedAuthenticationMethods(Arrays.asList(
                                            AuthenticationMethod.CERTIFICATE, AuthenticationMethod.ANONYMOUS,
                                            AuthenticationMethod.CERTIFICATE, AuthenticationMethod.USERNAME_PASSWORD))
                                        .withAdditionalConfiguration("qtvhcspodaqax")
                                        .withLastUpdatedOn(OffsetDateTime.parse("2021-11-02T02:37:56Z")),
                                    "ggcvk",
                                    new DiscoveredInboundEndpoints().withEndpointType("bmoichd")
                                        .withAddress("pnfpubntnbat")
                                        .withVersion("iqsowsaaelc")
                                        .withSupportedAuthenticationMethods(
                                            Arrays.asList(AuthenticationMethod.ANONYMOUS))
                                        .withAdditionalConfiguration("uhplrvkmjcwmjv")
                                        .withLastUpdatedOn(OffsetDateTime.parse("2021-02-18T02:13:56Z"))))
                                .withOutbound(new DiscoveredOutboundEndpoints()
                                    .withAssigned(mapOf("psfxsf", new DeviceMessagingEndpoint().withAddress("izrzb"),
                                        "ukoveofi", new DeviceMessagingEndpoint().withAddress("ztlvtmvagbwidqlv"), "z",
                                        new DeviceMessagingEndpoint().withAddress("rvjfnmjmvlw"), "lfojuidjp",
                                        new DeviceMessagingEndpoint().withAddress("iblkujr")))))
                        .withManufacturer("yjucejikzoeo")
                        .withModel("tzejetjklnt")
                        .withOperatingSystem("yjuzkdb")
                        .withOperatingSystemVersion("o")
                        .withAttributes(mapOf())
                        .withDiscoveryId("zvhqjwtrhtgvg")
                        .withVersion(4723059854814602691L))
                .create();

        Assertions.assertEquals("wskondcbrwimuvqe", response.location());
        Assertions.assertEquals("ovyrrleaesinu", response.tags().get("tljqobbpih"));
        Assertions.assertEquals("zlanrupdwvnph", response.properties().externalDeviceId());
        Assertions.assertEquals("tpjhm", response.properties().endpoints().inbound().get("pxy").endpointType());
        Assertions.assertEquals("rhv", response.properties().endpoints().inbound().get("pxy").address());
        Assertions.assertEquals("laiwdcxsmlzzh", response.properties().endpoints().inbound().get("pxy").version());
        Assertions.assertEquals(AuthenticationMethod.USERNAME_PASSWORD,
            response.properties().endpoints().inbound().get("pxy").supportedAuthenticationMethods().get(0));
        Assertions.assertEquals("gydlhqv",
            response.properties().endpoints().inbound().get("pxy").additionalConfiguration());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-07T23:31:59Z"),
            response.properties().endpoints().inbound().get("pxy").lastUpdatedOn());
        Assertions.assertEquals("iqge",
            response.properties().endpoints().outbound().assigned().get("arbgjekgl").address());
        Assertions.assertEquals("spzhzmtksjc", response.properties().manufacturer());
        Assertions.assertEquals("digsxcdgl", response.properties().model());
        Assertions.assertEquals("lkeuac", response.properties().operatingSystem());
        Assertions.assertEquals("omflrytswfp", response.properties().operatingSystemVersion());
        Assertions.assertEquals("gycxnmskwhqjjys", response.properties().discoveryId());
        Assertions.assertEquals(7889594370600381712L, response.properties().version());
        Assertions.assertEquals("shhkvpedw", response.extendedLocation().type());
        Assertions.assertEquals("slsrhmpq", response.extendedLocation().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
