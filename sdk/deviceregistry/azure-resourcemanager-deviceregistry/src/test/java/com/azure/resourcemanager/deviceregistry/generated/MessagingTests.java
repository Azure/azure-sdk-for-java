// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.deviceregistry.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.deviceregistry.models.Messaging;
import com.azure.resourcemanager.deviceregistry.models.MessagingEndpoint;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class MessagingTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        Messaging model = BinaryData.fromString(
            "{\"endpoints\":{\"ezrkgqhcjrefo\":{\"endpointType\":\"vdcsitynn\",\"address\":\"amdecte\",\"resourceId\":\"iqscjeypv\"},\"ajvnysounqe\":{\"endpointType\":\"mkqsleyyv\",\"address\":\"yqjpkcatt\",\"resourceId\":\"gjcrcczsqpjhvm\"}}}")
            .toObject(Messaging.class);
        Assertions.assertEquals("vdcsitynn", model.endpoints().get("ezrkgqhcjrefo").endpointType());
        Assertions.assertEquals("amdecte", model.endpoints().get("ezrkgqhcjrefo").address());
        Assertions.assertEquals("iqscjeypv", model.endpoints().get("ezrkgqhcjrefo").resourceId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        Messaging model = new Messaging().withEndpoints(mapOf("ezrkgqhcjrefo",
            new MessagingEndpoint().withEndpointType("vdcsitynn").withAddress("amdecte").withResourceId("iqscjeypv"),
            "ajvnysounqe",
            new MessagingEndpoint().withEndpointType("mkqsleyyv")
                .withAddress("yqjpkcatt")
                .withResourceId("gjcrcczsqpjhvm")));
        model = BinaryData.fromObject(model).toObject(Messaging.class);
        Assertions.assertEquals("vdcsitynn", model.endpoints().get("ezrkgqhcjrefo").endpointType());
        Assertions.assertEquals("amdecte", model.endpoints().get("ezrkgqhcjrefo").address());
        Assertions.assertEquals("iqscjeypv", model.endpoints().get("ezrkgqhcjrefo").resourceId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
