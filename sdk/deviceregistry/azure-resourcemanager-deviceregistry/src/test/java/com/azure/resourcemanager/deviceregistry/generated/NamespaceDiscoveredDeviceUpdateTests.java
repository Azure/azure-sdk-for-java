// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.deviceregistry.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.deviceregistry.models.AuthenticationMethod;
import com.azure.resourcemanager.deviceregistry.models.DeviceMessagingEndpoint;
import com.azure.resourcemanager.deviceregistry.models.DiscoveredInboundEndpoints;
import com.azure.resourcemanager.deviceregistry.models.DiscoveredMessagingEndpoints;
import com.azure.resourcemanager.deviceregistry.models.DiscoveredOutboundEndpoints;
import com.azure.resourcemanager.deviceregistry.models.NamespaceDiscoveredDeviceUpdate;
import com.azure.resourcemanager.deviceregistry.models.NamespaceDiscoveredDeviceUpdateProperties;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class NamespaceDiscoveredDeviceUpdateTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        NamespaceDiscoveredDeviceUpdate model = BinaryData.fromString(
            "{\"tags\":{\"jslb\":\"yftumrtwna\",\"aeqphchqnr\":\"wkojgcyztsfmzn\",\"wrykqgai\":\"rpxeh\"},\"properties\":{\"externalDeviceId\":\"iklbydvkhb\",\"endpoints\":{\"inbound\":{\"ejwcwwqiok\":{\"endpointType\":\"nxcvds\",\"address\":\"hnjivo\",\"version\":\"tnovqfzgemjdftul\",\"supportedAuthenticationMethods\":[\"Anonymous\",\"UsernamePassword\"],\"additionalConfiguration\":\"eamtmcz\",\"lastUpdatedOn\":\"2020-12-22T05:25Z\"},\"ripltf\":{\"endpointType\":\"ssxmojms\",\"address\":\"p\",\"version\":\"prvkwcfzqljyxgtc\",\"supportedAuthenticationMethods\":[\"UsernamePassword\",\"Certificate\"],\"additionalConfiguration\":\"sdshmkxmaehvb\",\"lastUpdatedOn\":\"2021-10-19T14:45:47Z\"}},\"outbound\":{\"assigned\":{\"yklyhpluodpvruud\":{\"endpointType\":\"axkgx\",\"address\":\"wrck\"},\"vdxec\":{\"endpointType\":\"zibt\",\"address\":\"ostgkts\"}}}},\"operatingSystemVersion\":\"edqbc\",\"attributes\":{},\"discoveryId\":\"h\",\"version\":2977719061351805877}}")
            .toObject(NamespaceDiscoveredDeviceUpdate.class);
        Assertions.assertEquals("yftumrtwna", model.tags().get("jslb"));
        Assertions.assertEquals("iklbydvkhb", model.properties().externalDeviceId());
        Assertions.assertEquals("nxcvds", model.properties().endpoints().inbound().get("ejwcwwqiok").endpointType());
        Assertions.assertEquals("hnjivo", model.properties().endpoints().inbound().get("ejwcwwqiok").address());
        Assertions.assertEquals("tnovqfzgemjdftul",
            model.properties().endpoints().inbound().get("ejwcwwqiok").version());
        Assertions.assertEquals(AuthenticationMethod.ANONYMOUS,
            model.properties().endpoints().inbound().get("ejwcwwqiok").supportedAuthenticationMethods().get(0));
        Assertions.assertEquals("eamtmcz",
            model.properties().endpoints().inbound().get("ejwcwwqiok").additionalConfiguration());
        Assertions.assertEquals(OffsetDateTime.parse("2020-12-22T05:25Z"),
            model.properties().endpoints().inbound().get("ejwcwwqiok").lastUpdatedOn());
        Assertions.assertEquals("axkgx",
            model.properties().endpoints().outbound().assigned().get("yklyhpluodpvruud").endpointType());
        Assertions.assertEquals("wrck",
            model.properties().endpoints().outbound().assigned().get("yklyhpluodpvruud").address());
        Assertions.assertEquals("edqbc", model.properties().operatingSystemVersion());
        Assertions.assertEquals("h", model.properties().discoveryId());
        Assertions.assertEquals(2977719061351805877L, model.properties().version());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        NamespaceDiscoveredDeviceUpdate model
            = new NamespaceDiscoveredDeviceUpdate()
                .withTags(mapOf("jslb", "yftumrtwna", "aeqphchqnr", "wkojgcyztsfmzn", "wrykqgai", "rpxeh"))
                .withProperties(
                    new NamespaceDiscoveredDeviceUpdateProperties().withExternalDeviceId("iklbydvkhb")
                        .withEndpoints(
                            new DiscoveredMessagingEndpoints()
                                .withInbound(mapOf("ejwcwwqiok",
                                    new DiscoveredInboundEndpoints().withEndpointType("nxcvds")
                                        .withAddress("hnjivo")
                                        .withVersion("tnovqfzgemjdftul")
                                        .withSupportedAuthenticationMethods(Arrays.asList(
                                            AuthenticationMethod.ANONYMOUS, AuthenticationMethod.USERNAME_PASSWORD))
                                        .withAdditionalConfiguration("eamtmcz")
                                        .withLastUpdatedOn(OffsetDateTime.parse("2020-12-22T05:25Z")),
                                    "ripltf",
                                    new DiscoveredInboundEndpoints().withEndpointType("ssxmojms")
                                        .withAddress("p")
                                        .withVersion("prvkwcfzqljyxgtc")
                                        .withSupportedAuthenticationMethods(Arrays.asList(
                                            AuthenticationMethod.USERNAME_PASSWORD, AuthenticationMethod.CERTIFICATE))
                                        .withAdditionalConfiguration("sdshmkxmaehvb")
                                        .withLastUpdatedOn(OffsetDateTime.parse("2021-10-19T14:45:47Z"))))
                                .withOutbound(new DiscoveredOutboundEndpoints().withAssigned(mapOf("yklyhpluodpvruud",
                                    new DeviceMessagingEndpoint().withEndpointType("axkgx").withAddress("wrck"),
                                    "vdxec",
                                    new DeviceMessagingEndpoint().withEndpointType("zibt").withAddress("ostgkts")))))
                        .withOperatingSystemVersion("edqbc")
                        .withAttributes(mapOf())
                        .withDiscoveryId("h")
                        .withVersion(2977719061351805877L));
        model = BinaryData.fromObject(model).toObject(NamespaceDiscoveredDeviceUpdate.class);
        Assertions.assertEquals("yftumrtwna", model.tags().get("jslb"));
        Assertions.assertEquals("iklbydvkhb", model.properties().externalDeviceId());
        Assertions.assertEquals("nxcvds", model.properties().endpoints().inbound().get("ejwcwwqiok").endpointType());
        Assertions.assertEquals("hnjivo", model.properties().endpoints().inbound().get("ejwcwwqiok").address());
        Assertions.assertEquals("tnovqfzgemjdftul",
            model.properties().endpoints().inbound().get("ejwcwwqiok").version());
        Assertions.assertEquals(AuthenticationMethod.ANONYMOUS,
            model.properties().endpoints().inbound().get("ejwcwwqiok").supportedAuthenticationMethods().get(0));
        Assertions.assertEquals("eamtmcz",
            model.properties().endpoints().inbound().get("ejwcwwqiok").additionalConfiguration());
        Assertions.assertEquals(OffsetDateTime.parse("2020-12-22T05:25Z"),
            model.properties().endpoints().inbound().get("ejwcwwqiok").lastUpdatedOn());
        Assertions.assertEquals("axkgx",
            model.properties().endpoints().outbound().assigned().get("yklyhpluodpvruud").endpointType());
        Assertions.assertEquals("wrck",
            model.properties().endpoints().outbound().assigned().get("yklyhpluodpvruud").address());
        Assertions.assertEquals("edqbc", model.properties().operatingSystemVersion());
        Assertions.assertEquals("h", model.properties().discoveryId());
        Assertions.assertEquals(2977719061351805877L, model.properties().version());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
