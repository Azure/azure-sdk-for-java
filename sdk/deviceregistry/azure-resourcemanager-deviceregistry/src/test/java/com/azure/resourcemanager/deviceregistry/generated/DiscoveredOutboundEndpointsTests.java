// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.deviceregistry.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.deviceregistry.models.DeviceMessagingEndpoint;
import com.azure.resourcemanager.deviceregistry.models.DiscoveredOutboundEndpoints;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DiscoveredOutboundEndpointsTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DiscoveredOutboundEndpoints model = BinaryData.fromString(
            "{\"assigned\":{\"oimwkslirc\":{\"endpointType\":\"n\",\"address\":\"cypsxjv\"},\"vlhv\":{\"endpointType\":\"jxv\",\"address\":\"dfcea\"}}}")
            .toObject(DiscoveredOutboundEndpoints.class);
        Assertions.assertEquals("n", model.assigned().get("oimwkslirc").endpointType());
        Assertions.assertEquals("cypsxjv", model.assigned().get("oimwkslirc").address());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DiscoveredOutboundEndpoints model = new DiscoveredOutboundEndpoints().withAssigned(
            mapOf("oimwkslirc", new DeviceMessagingEndpoint().withEndpointType("n").withAddress("cypsxjv"), "vlhv",
                new DeviceMessagingEndpoint().withEndpointType("jxv").withAddress("dfcea")));
        model = BinaryData.fromObject(model).toObject(DiscoveredOutboundEndpoints.class);
        Assertions.assertEquals("n", model.assigned().get("oimwkslirc").endpointType());
        Assertions.assertEquals("cypsxjv", model.assigned().get("oimwkslirc").address());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
