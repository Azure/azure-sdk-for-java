// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.deviceregistry.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.deviceregistry.fluent.models.NamespaceDiscoveredDeviceInner;
import com.azure.resourcemanager.deviceregistry.models.AuthenticationMethod;
import com.azure.resourcemanager.deviceregistry.models.DeviceMessagingEndpoint;
import com.azure.resourcemanager.deviceregistry.models.DiscoveredInboundEndpoints;
import com.azure.resourcemanager.deviceregistry.models.DiscoveredMessagingEndpoints;
import com.azure.resourcemanager.deviceregistry.models.DiscoveredOutboundEndpoints;
import com.azure.resourcemanager.deviceregistry.models.ExtendedLocation;
import com.azure.resourcemanager.deviceregistry.models.NamespaceDiscoveredDeviceProperties;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class NamespaceDiscoveredDeviceInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        NamespaceDiscoveredDeviceInner model = BinaryData.fromString(
            "{\"properties\":{\"externalDeviceId\":\"xuvw\",\"endpoints\":{\"inbound\":{\"pwijnhy\":{\"endpointType\":\"hlmctlpdngitvgb\",\"address\":\"hrixkwmy\",\"version\":\"ejvegrhbpnaixex\",\"supportedAuthenticationMethods\":[\"UsernamePassword\"],\"additionalConfiguration\":\"eaxhcexdrrvqahqk\",\"lastUpdatedOn\":\"2021-04-01T21:28:03Z\"},\"reafxtsgumhjg\":{\"endpointType\":\"svfycxzbfv\",\"address\":\"owvrvmtgjqppyos\",\"version\":\"on\",\"supportedAuthenticationMethods\":[\"Anonymous\",\"Certificate\",\"Anonymous\"],\"additionalConfiguration\":\"pnsxkmcwaek\",\"lastUpdatedOn\":\"2021-01-29T01:52:27Z\"},\"znoigbrn\":{\"endpointType\":\"ikkx\",\"address\":\"slol\",\"version\":\"pvuzlmv\",\"supportedAuthenticationMethods\":[\"UsernamePassword\",\"Certificate\",\"Anonymous\",\"Anonymous\"],\"additionalConfiguration\":\"lcrpw\",\"lastUpdatedOn\":\"2021-11-19T13:53:17Z\"}},\"outbound\":{\"assigned\":{\"oqkag\":{\"endpointType\":\"kpnb\",\"address\":\"azej\"}}}},\"manufacturer\":\"sxtta\",\"model\":\"zxnfaaz\",\"operatingSystem\":\"dtnkdmkq\",\"operatingSystemVersion\":\"lwuenvrkp\",\"attributes\":{},\"discoveryId\":\"aibrebqaaysjkixq\",\"version\":7129303737344697098,\"provisioningState\":\"Succeeded\"},\"extendedLocation\":{\"type\":\"ezl\",\"name\":\"fffiak\"},\"location\":\"pqqmted\",\"tags\":{\"auyqncygupkv\":\"mjihyeozphv\"},\"id\":\"p\",\"name\":\"dscwxqupevzhf\",\"type\":\"totxhojujb\"}")
            .toObject(NamespaceDiscoveredDeviceInner.class);
        Assertions.assertEquals("pqqmted", model.location());
        Assertions.assertEquals("mjihyeozphv", model.tags().get("auyqncygupkv"));
        Assertions.assertEquals("xuvw", model.properties().externalDeviceId());
        Assertions.assertEquals("hlmctlpdngitvgb",
            model.properties().endpoints().inbound().get("pwijnhy").endpointType());
        Assertions.assertEquals("hrixkwmy", model.properties().endpoints().inbound().get("pwijnhy").address());
        Assertions.assertEquals("ejvegrhbpnaixex", model.properties().endpoints().inbound().get("pwijnhy").version());
        Assertions.assertEquals(AuthenticationMethod.USERNAME_PASSWORD,
            model.properties().endpoints().inbound().get("pwijnhy").supportedAuthenticationMethods().get(0));
        Assertions.assertEquals("eaxhcexdrrvqahqk",
            model.properties().endpoints().inbound().get("pwijnhy").additionalConfiguration());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-01T21:28:03Z"),
            model.properties().endpoints().inbound().get("pwijnhy").lastUpdatedOn());
        Assertions.assertEquals("kpnb",
            model.properties().endpoints().outbound().assigned().get("oqkag").endpointType());
        Assertions.assertEquals("azej", model.properties().endpoints().outbound().assigned().get("oqkag").address());
        Assertions.assertEquals("sxtta", model.properties().manufacturer());
        Assertions.assertEquals("zxnfaaz", model.properties().model());
        Assertions.assertEquals("dtnkdmkq", model.properties().operatingSystem());
        Assertions.assertEquals("lwuenvrkp", model.properties().operatingSystemVersion());
        Assertions.assertEquals("aibrebqaaysjkixq", model.properties().discoveryId());
        Assertions.assertEquals(7129303737344697098L, model.properties().version());
        Assertions.assertEquals("ezl", model.extendedLocation().type());
        Assertions.assertEquals("fffiak", model.extendedLocation().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        NamespaceDiscoveredDeviceInner model
            = new NamespaceDiscoveredDeviceInner().withLocation("pqqmted")
                .withTags(mapOf("auyqncygupkv", "mjihyeozphv"))
                .withProperties(new NamespaceDiscoveredDeviceProperties().withExternalDeviceId("xuvw")
                    .withEndpoints(new DiscoveredMessagingEndpoints()
                        .withInbound(mapOf("pwijnhy",
                            new DiscoveredInboundEndpoints().withEndpointType("hlmctlpdngitvgb")
                                .withAddress("hrixkwmy")
                                .withVersion("ejvegrhbpnaixex")
                                .withSupportedAuthenticationMethods(
                                    Arrays.asList(AuthenticationMethod.USERNAME_PASSWORD))
                                .withAdditionalConfiguration("eaxhcexdrrvqahqk")
                                .withLastUpdatedOn(OffsetDateTime.parse("2021-04-01T21:28:03Z")),
                            "reafxtsgumhjg",
                            new DiscoveredInboundEndpoints().withEndpointType("svfycxzbfv")
                                .withAddress("owvrvmtgjqppyos")
                                .withVersion("on")
                                .withSupportedAuthenticationMethods(Arrays.asList(AuthenticationMethod.ANONYMOUS,
                                    AuthenticationMethod.CERTIFICATE, AuthenticationMethod.ANONYMOUS))
                                .withAdditionalConfiguration("pnsxkmcwaek")
                                .withLastUpdatedOn(OffsetDateTime.parse("2021-01-29T01:52:27Z")),
                            "znoigbrn",
                            new DiscoveredInboundEndpoints().withEndpointType("ikkx")
                                .withAddress("slol")
                                .withVersion("pvuzlmv")
                                .withSupportedAuthenticationMethods(Arrays.asList(
                                    AuthenticationMethod.USERNAME_PASSWORD, AuthenticationMethod.CERTIFICATE,
                                    AuthenticationMethod.ANONYMOUS, AuthenticationMethod.ANONYMOUS))
                                .withAdditionalConfiguration("lcrpw")
                                .withLastUpdatedOn(OffsetDateTime.parse("2021-11-19T13:53:17Z"))))
                        .withOutbound(new DiscoveredOutboundEndpoints().withAssigned(mapOf("oqkag",
                            new DeviceMessagingEndpoint().withEndpointType("kpnb").withAddress("azej")))))
                    .withManufacturer("sxtta")
                    .withModel("zxnfaaz")
                    .withOperatingSystem("dtnkdmkq")
                    .withOperatingSystemVersion("lwuenvrkp")
                    .withAttributes(mapOf())
                    .withDiscoveryId("aibrebqaaysjkixq")
                    .withVersion(7129303737344697098L))
                .withExtendedLocation(new ExtendedLocation().withType("ezl").withName("fffiak"));
        model = BinaryData.fromObject(model).toObject(NamespaceDiscoveredDeviceInner.class);
        Assertions.assertEquals("pqqmted", model.location());
        Assertions.assertEquals("mjihyeozphv", model.tags().get("auyqncygupkv"));
        Assertions.assertEquals("xuvw", model.properties().externalDeviceId());
        Assertions.assertEquals("hlmctlpdngitvgb",
            model.properties().endpoints().inbound().get("pwijnhy").endpointType());
        Assertions.assertEquals("hrixkwmy", model.properties().endpoints().inbound().get("pwijnhy").address());
        Assertions.assertEquals("ejvegrhbpnaixex", model.properties().endpoints().inbound().get("pwijnhy").version());
        Assertions.assertEquals(AuthenticationMethod.USERNAME_PASSWORD,
            model.properties().endpoints().inbound().get("pwijnhy").supportedAuthenticationMethods().get(0));
        Assertions.assertEquals("eaxhcexdrrvqahqk",
            model.properties().endpoints().inbound().get("pwijnhy").additionalConfiguration());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-01T21:28:03Z"),
            model.properties().endpoints().inbound().get("pwijnhy").lastUpdatedOn());
        Assertions.assertEquals("kpnb",
            model.properties().endpoints().outbound().assigned().get("oqkag").endpointType());
        Assertions.assertEquals("azej", model.properties().endpoints().outbound().assigned().get("oqkag").address());
        Assertions.assertEquals("sxtta", model.properties().manufacturer());
        Assertions.assertEquals("zxnfaaz", model.properties().model());
        Assertions.assertEquals("dtnkdmkq", model.properties().operatingSystem());
        Assertions.assertEquals("lwuenvrkp", model.properties().operatingSystemVersion());
        Assertions.assertEquals("aibrebqaaysjkixq", model.properties().discoveryId());
        Assertions.assertEquals(7129303737344697098L, model.properties().version());
        Assertions.assertEquals("ezl", model.extendedLocation().type());
        Assertions.assertEquals("fffiak", model.extendedLocation().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
