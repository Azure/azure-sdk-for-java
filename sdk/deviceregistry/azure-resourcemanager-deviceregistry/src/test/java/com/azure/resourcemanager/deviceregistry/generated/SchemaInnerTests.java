// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.deviceregistry.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.deviceregistry.fluent.models.SchemaInner;
import com.azure.resourcemanager.deviceregistry.models.Format;
import com.azure.resourcemanager.deviceregistry.models.SchemaProperties;
import com.azure.resourcemanager.deviceregistry.models.SchemaType;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SchemaInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SchemaInner model = BinaryData.fromString(
            "{\"properties\":{\"uuid\":\"yavluwmncstt\",\"displayName\":\"fybvpoek\",\"description\":\"gsgbdhuzq\",\"format\":\"Delta/1.0\",\"schemaType\":\"MessageSchema\",\"provisioningState\":\"Accepted\",\"tags\":{\"mtk\":\"nscliqhzvhxnk\",\"ppnvdxz\":\"bo\"}},\"id\":\"ihfrbbcevqa\",\"name\":\"tltdhlfkqojpy\",\"type\":\"vgtrdcnifmzzs\"}")
            .toObject(SchemaInner.class);
        Assertions.assertEquals("fybvpoek", model.properties().displayName());
        Assertions.assertEquals("gsgbdhuzq", model.properties().description());
        Assertions.assertEquals(Format.DELTA_1_0, model.properties().format());
        Assertions.assertEquals(SchemaType.MESSAGE_SCHEMA, model.properties().schemaType());
        Assertions.assertEquals("nscliqhzvhxnk", model.properties().tags().get("mtk"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SchemaInner model = new SchemaInner().withProperties(new SchemaProperties().withDisplayName("fybvpoek")
            .withDescription("gsgbdhuzq")
            .withFormat(Format.DELTA_1_0)
            .withSchemaType(SchemaType.MESSAGE_SCHEMA)
            .withTags(mapOf("mtk", "nscliqhzvhxnk", "ppnvdxz", "bo")));
        model = BinaryData.fromObject(model).toObject(SchemaInner.class);
        Assertions.assertEquals("fybvpoek", model.properties().displayName());
        Assertions.assertEquals("gsgbdhuzq", model.properties().description());
        Assertions.assertEquals(Format.DELTA_1_0, model.properties().format());
        Assertions.assertEquals(SchemaType.MESSAGE_SCHEMA, model.properties().schemaType());
        Assertions.assertEquals("nscliqhzvhxnk", model.properties().tags().get("mtk"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
