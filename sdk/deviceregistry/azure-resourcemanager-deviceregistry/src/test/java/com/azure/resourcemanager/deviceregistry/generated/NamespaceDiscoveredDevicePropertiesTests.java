// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.deviceregistry.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.deviceregistry.models.AuthenticationMethod;
import com.azure.resourcemanager.deviceregistry.models.DeviceMessagingEndpoint;
import com.azure.resourcemanager.deviceregistry.models.DiscoveredInboundEndpoints;
import com.azure.resourcemanager.deviceregistry.models.DiscoveredMessagingEndpoints;
import com.azure.resourcemanager.deviceregistry.models.DiscoveredOutboundEndpoints;
import com.azure.resourcemanager.deviceregistry.models.NamespaceDiscoveredDeviceProperties;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class NamespaceDiscoveredDevicePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        NamespaceDiscoveredDeviceProperties model = BinaryData.fromString(
            "{\"externalDeviceId\":\"elmcuvhixbjxyfw\",\"endpoints\":{\"inbound\":{\"bihwqknfdnt\":{\"endpointType\":\"coolsttpkiwkkb\",\"address\":\"ujrywvtyl\",\"version\":\"pncur\",\"supportedAuthenticationMethods\":[\"Anonymous\"],\"additionalConfiguration\":\"ithtywu\",\"lastUpdatedOn\":\"2021-03-06T07:21:05Z\"}},\"outbound\":{\"assigned\":{\"zj\":{\"endpointType\":\"rdgoihxumw\",\"address\":\"ton\"},\"nqfiufxqknpi\":{\"endpointType\":\"udfdlwgg\",\"address\":\"tsbwtovvtgse\"},\"rxfrddhc\":{\"endpointType\":\"nepttwqmsni\",\"address\":\"fcdmqnrojlpijn\"},\"tw\":{\"endpointType\":\"tizzronasxif\",\"address\":\"ozqyzh\"}}}},\"manufacturer\":\"gogczhonnxkrlgny\",\"model\":\"ossxk\",\"operatingSystem\":\"thrrgh\",\"operatingSystemVersion\":\"bdhqxvcxgf\",\"attributes\":{},\"discoveryId\":\"sofbshrn\",\"version\":6813694776618683723,\"provisioningState\":\"Accepted\"}")
            .toObject(NamespaceDiscoveredDeviceProperties.class);
        Assertions.assertEquals("elmcuvhixbjxyfw", model.externalDeviceId());
        Assertions.assertEquals("coolsttpkiwkkb", model.endpoints().inbound().get("bihwqknfdnt").endpointType());
        Assertions.assertEquals("ujrywvtyl", model.endpoints().inbound().get("bihwqknfdnt").address());
        Assertions.assertEquals("pncur", model.endpoints().inbound().get("bihwqknfdnt").version());
        Assertions.assertEquals(AuthenticationMethod.ANONYMOUS,
            model.endpoints().inbound().get("bihwqknfdnt").supportedAuthenticationMethods().get(0));
        Assertions.assertEquals("ithtywu", model.endpoints().inbound().get("bihwqknfdnt").additionalConfiguration());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-06T07:21:05Z"),
            model.endpoints().inbound().get("bihwqknfdnt").lastUpdatedOn());
        Assertions.assertEquals("rdgoihxumw", model.endpoints().outbound().assigned().get("zj").endpointType());
        Assertions.assertEquals("ton", model.endpoints().outbound().assigned().get("zj").address());
        Assertions.assertEquals("gogczhonnxkrlgny", model.manufacturer());
        Assertions.assertEquals("ossxk", model.model());
        Assertions.assertEquals("thrrgh", model.operatingSystem());
        Assertions.assertEquals("bdhqxvcxgf", model.operatingSystemVersion());
        Assertions.assertEquals("sofbshrn", model.discoveryId());
        Assertions.assertEquals(6813694776618683723L, model.version());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        NamespaceDiscoveredDeviceProperties model = new NamespaceDiscoveredDeviceProperties()
            .withExternalDeviceId("elmcuvhixbjxyfw")
            .withEndpoints(new DiscoveredMessagingEndpoints()
                .withInbound(mapOf("bihwqknfdnt",
                    new DiscoveredInboundEndpoints().withEndpointType("coolsttpkiwkkb")
                        .withAddress("ujrywvtyl")
                        .withVersion("pncur")
                        .withSupportedAuthenticationMethods(Arrays.asList(AuthenticationMethod.ANONYMOUS))
                        .withAdditionalConfiguration("ithtywu")
                        .withLastUpdatedOn(OffsetDateTime.parse("2021-03-06T07:21:05Z"))))
                .withOutbound(new DiscoveredOutboundEndpoints().withAssigned(mapOf("zj",
                    new DeviceMessagingEndpoint().withEndpointType("rdgoihxumw").withAddress("ton"), "nqfiufxqknpi",
                    new DeviceMessagingEndpoint().withEndpointType("udfdlwgg").withAddress("tsbwtovvtgse"), "rxfrddhc",
                    new DeviceMessagingEndpoint().withEndpointType("nepttwqmsni").withAddress("fcdmqnrojlpijn"), "tw",
                    new DeviceMessagingEndpoint().withEndpointType("tizzronasxif").withAddress("ozqyzh")))))
            .withManufacturer("gogczhonnxkrlgny")
            .withModel("ossxk")
            .withOperatingSystem("thrrgh")
            .withOperatingSystemVersion("bdhqxvcxgf")
            .withAttributes(mapOf())
            .withDiscoveryId("sofbshrn")
            .withVersion(6813694776618683723L);
        model = BinaryData.fromObject(model).toObject(NamespaceDiscoveredDeviceProperties.class);
        Assertions.assertEquals("elmcuvhixbjxyfw", model.externalDeviceId());
        Assertions.assertEquals("coolsttpkiwkkb", model.endpoints().inbound().get("bihwqknfdnt").endpointType());
        Assertions.assertEquals("ujrywvtyl", model.endpoints().inbound().get("bihwqknfdnt").address());
        Assertions.assertEquals("pncur", model.endpoints().inbound().get("bihwqknfdnt").version());
        Assertions.assertEquals(AuthenticationMethod.ANONYMOUS,
            model.endpoints().inbound().get("bihwqknfdnt").supportedAuthenticationMethods().get(0));
        Assertions.assertEquals("ithtywu", model.endpoints().inbound().get("bihwqknfdnt").additionalConfiguration());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-06T07:21:05Z"),
            model.endpoints().inbound().get("bihwqknfdnt").lastUpdatedOn());
        Assertions.assertEquals("rdgoihxumw", model.endpoints().outbound().assigned().get("zj").endpointType());
        Assertions.assertEquals("ton", model.endpoints().outbound().assigned().get("zj").address());
        Assertions.assertEquals("gogczhonnxkrlgny", model.manufacturer());
        Assertions.assertEquals("ossxk", model.model());
        Assertions.assertEquals("thrrgh", model.operatingSystem());
        Assertions.assertEquals("bdhqxvcxgf", model.operatingSystemVersion());
        Assertions.assertEquals("sofbshrn", model.discoveryId());
        Assertions.assertEquals(6813694776618683723L, model.version());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
