// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.deviceregistry.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.deviceregistry.models.AuthenticationMethod;
import com.azure.resourcemanager.deviceregistry.models.DeviceMessagingEndpoint;
import com.azure.resourcemanager.deviceregistry.models.DiscoveredInboundEndpoints;
import com.azure.resourcemanager.deviceregistry.models.DiscoveredMessagingEndpoints;
import com.azure.resourcemanager.deviceregistry.models.DiscoveredOutboundEndpoints;
import com.azure.resourcemanager.deviceregistry.models.NamespaceDiscoveredDeviceProperties;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class NamespaceDiscoveredDevicePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        NamespaceDiscoveredDeviceProperties model = BinaryData.fromString(
            "{\"externalDeviceId\":\"qqmtedltmmji\",\"endpoints\":{\"inbound\":{\"mc\":{\"endpointType\":\"zphv\",\"address\":\"auyqncygupkv\",\"version\":\"mdscwxqupev\",\"supportedAuthenticationMethods\":[\"Certificate\"],\"additionalConfiguration\":\"otxhojujby\",\"lastUpdatedOn\":\"2021-06-17T22:54:10Z\"},\"oiwiithtywub\":{\"endpointType\":\"vhixbjxy\",\"address\":\"w\",\"version\":\"lrcoolsttpki\",\"supportedAuthenticationMethods\":[\"UsernamePassword\",\"Certificate\"],\"additionalConfiguration\":\"jrywvtylbfpnc\",\"lastUpdatedOn\":\"2021-06-14T14:38:01Z\"},\"fiufx\":{\"endpointType\":\"cbihwqk\",\"address\":\"fdntwjchrdgoih\",\"version\":\"mwctondzjluudfd\",\"supportedAuthenticationMethods\":[\"Anonymous\"],\"additionalConfiguration\":\"tsbwtovvtgse\",\"lastUpdatedOn\":\"2020-12-22T06:21:03Z\"},\"qyzhf\":{\"endpointType\":\"knpirgnepttwq\",\"address\":\"sniffc\",\"version\":\"qnrojlpijnkrxfrd\",\"supportedAuthenticationMethods\":[\"UsernamePassword\"],\"additionalConfiguration\":\"tizzronasxif\",\"lastUpdatedOn\":\"2021-08-28T08:11:06Z\"}},\"outbound\":{\"assigned\":{\"dhqxvcx\":{\"endpointType\":\"gogczhonnxkrlgny\",\"address\":\"mossxkkgthrrghxj\"},\"ybycnunvj\":{\"endpointType\":\"rpdsof\",\"address\":\"shrnsvbuswdvz\"}}}},\"manufacturer\":\"tkfa\",\"model\":\"opqgikyzirtxdyux\",\"operatingSystem\":\"jntpsewgioilqu\",\"operatingSystemVersion\":\"ydxtqm\",\"attributes\":{},\"discoveryId\":\"xorgg\",\"version\":467906638726749311,\"provisioningState\":\"Succeeded\"}")
            .toObject(NamespaceDiscoveredDeviceProperties.class);
        Assertions.assertEquals("qqmtedltmmji", model.externalDeviceId());
        Assertions.assertEquals("zphv", model.endpoints().inbound().get("mc").endpointType());
        Assertions.assertEquals("auyqncygupkv", model.endpoints().inbound().get("mc").address());
        Assertions.assertEquals("mdscwxqupev", model.endpoints().inbound().get("mc").version());
        Assertions.assertEquals(AuthenticationMethod.CERTIFICATE,
            model.endpoints().inbound().get("mc").supportedAuthenticationMethods().get(0));
        Assertions.assertEquals("otxhojujby", model.endpoints().inbound().get("mc").additionalConfiguration());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-17T22:54:10Z"),
            model.endpoints().inbound().get("mc").lastUpdatedOn());
        Assertions.assertEquals("gogczhonnxkrlgny",
            model.endpoints().outbound().assigned().get("dhqxvcx").endpointType());
        Assertions.assertEquals("mossxkkgthrrghxj", model.endpoints().outbound().assigned().get("dhqxvcx").address());
        Assertions.assertEquals("tkfa", model.manufacturer());
        Assertions.assertEquals("opqgikyzirtxdyux", model.model());
        Assertions.assertEquals("jntpsewgioilqu", model.operatingSystem());
        Assertions.assertEquals("ydxtqm", model.operatingSystemVersion());
        Assertions.assertEquals("xorgg", model.discoveryId());
        Assertions.assertEquals(467906638726749311L, model.version());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        NamespaceDiscoveredDeviceProperties model
            = new NamespaceDiscoveredDeviceProperties().withExternalDeviceId("qqmtedltmmji")
                .withEndpoints(new DiscoveredMessagingEndpoints()
                    .withInbound(mapOf("mc",
                        new DiscoveredInboundEndpoints().withEndpointType("zphv")
                            .withAddress("auyqncygupkv")
                            .withVersion("mdscwxqupev")
                            .withSupportedAuthenticationMethods(Arrays.asList(AuthenticationMethod.CERTIFICATE))
                            .withAdditionalConfiguration("otxhojujby")
                            .withLastUpdatedOn(OffsetDateTime.parse("2021-06-17T22:54:10Z")),
                        "oiwiithtywub",
                        new DiscoveredInboundEndpoints().withEndpointType("vhixbjxy")
                            .withAddress("w")
                            .withVersion("lrcoolsttpki")
                            .withSupportedAuthenticationMethods(
                                Arrays.asList(AuthenticationMethod.USERNAME_PASSWORD, AuthenticationMethod.CERTIFICATE))
                            .withAdditionalConfiguration("jrywvtylbfpnc")
                            .withLastUpdatedOn(OffsetDateTime.parse("2021-06-14T14:38:01Z")),
                        "fiufx",
                        new DiscoveredInboundEndpoints().withEndpointType("cbihwqk")
                            .withAddress("fdntwjchrdgoih")
                            .withVersion("mwctondzjluudfd")
                            .withSupportedAuthenticationMethods(Arrays.asList(AuthenticationMethod.ANONYMOUS))
                            .withAdditionalConfiguration("tsbwtovvtgse")
                            .withLastUpdatedOn(OffsetDateTime.parse("2020-12-22T06:21:03Z")),
                        "qyzhf",
                        new DiscoveredInboundEndpoints().withEndpointType("knpirgnepttwq")
                            .withAddress("sniffc")
                            .withVersion("qnrojlpijnkrxfrd")
                            .withSupportedAuthenticationMethods(Arrays.asList(AuthenticationMethod.USERNAME_PASSWORD))
                            .withAdditionalConfiguration("tizzronasxif")
                            .withLastUpdatedOn(OffsetDateTime.parse("2021-08-28T08:11:06Z"))))
                    .withOutbound(new DiscoveredOutboundEndpoints().withAssigned(mapOf("dhqxvcx",
                        new DeviceMessagingEndpoint().withEndpointType("gogczhonnxkrlgny")
                            .withAddress("mossxkkgthrrghxj"),
                        "ybycnunvj",
                        new DeviceMessagingEndpoint().withEndpointType("rpdsof").withAddress("shrnsvbuswdvz")))))
                .withManufacturer("tkfa")
                .withModel("opqgikyzirtxdyux")
                .withOperatingSystem("jntpsewgioilqu")
                .withOperatingSystemVersion("ydxtqm")
                .withAttributes(mapOf())
                .withDiscoveryId("xorgg")
                .withVersion(467906638726749311L);
        model = BinaryData.fromObject(model).toObject(NamespaceDiscoveredDeviceProperties.class);
        Assertions.assertEquals("qqmtedltmmji", model.externalDeviceId());
        Assertions.assertEquals("zphv", model.endpoints().inbound().get("mc").endpointType());
        Assertions.assertEquals("auyqncygupkv", model.endpoints().inbound().get("mc").address());
        Assertions.assertEquals("mdscwxqupev", model.endpoints().inbound().get("mc").version());
        Assertions.assertEquals(AuthenticationMethod.CERTIFICATE,
            model.endpoints().inbound().get("mc").supportedAuthenticationMethods().get(0));
        Assertions.assertEquals("otxhojujby", model.endpoints().inbound().get("mc").additionalConfiguration());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-17T22:54:10Z"),
            model.endpoints().inbound().get("mc").lastUpdatedOn());
        Assertions.assertEquals("gogczhonnxkrlgny",
            model.endpoints().outbound().assigned().get("dhqxvcx").endpointType());
        Assertions.assertEquals("mossxkkgthrrghxj", model.endpoints().outbound().assigned().get("dhqxvcx").address());
        Assertions.assertEquals("tkfa", model.manufacturer());
        Assertions.assertEquals("opqgikyzirtxdyux", model.model());
        Assertions.assertEquals("jntpsewgioilqu", model.operatingSystem());
        Assertions.assertEquals("ydxtqm", model.operatingSystemVersion());
        Assertions.assertEquals("xorgg", model.discoveryId());
        Assertions.assertEquals(467906638726749311L, model.version());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
