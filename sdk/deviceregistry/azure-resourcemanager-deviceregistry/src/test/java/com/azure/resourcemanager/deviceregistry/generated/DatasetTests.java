// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.deviceregistry.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.deviceregistry.models.DataPoint;
import com.azure.resourcemanager.deviceregistry.models.DataPointObservabilityMode;
import com.azure.resourcemanager.deviceregistry.models.Dataset;
import com.azure.resourcemanager.deviceregistry.models.Topic;
import com.azure.resourcemanager.deviceregistry.models.TopicRetainType;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class DatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        Dataset model = BinaryData.fromString(
            "{\"name\":\"narxzxtheotus\",\"datasetConfiguration\":\"yevc\",\"topic\":{\"path\":\"qi\",\"retain\":\"Never\"},\"dataPoints\":[{\"observabilityMode\":\"Gauge\",\"name\":\"wjzrnfygxgisp\",\"dataSource\":\"mvtzfkufub\",\"dataPointConfiguration\":\"ofx\"},{\"observabilityMode\":\"None\",\"name\":\"fjaeq\",\"dataSource\":\"hqjbasvmsmj\",\"dataPointConfiguration\":\"lngsntnbybkzgcwr\"}]}")
            .toObject(Dataset.class);
        Assertions.assertEquals("narxzxtheotus", model.name());
        Assertions.assertEquals("yevc", model.datasetConfiguration());
        Assertions.assertEquals("qi", model.topic().path());
        Assertions.assertEquals(TopicRetainType.NEVER, model.topic().retain());
        Assertions.assertEquals("wjzrnfygxgisp", model.dataPoints().get(0).name());
        Assertions.assertEquals("mvtzfkufub", model.dataPoints().get(0).dataSource());
        Assertions.assertEquals("ofx", model.dataPoints().get(0).dataPointConfiguration());
        Assertions.assertEquals(DataPointObservabilityMode.GAUGE, model.dataPoints().get(0).observabilityMode());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        Dataset model = new Dataset().withName("narxzxtheotus")
            .withDatasetConfiguration("yevc")
            .withTopic(new Topic().withPath("qi").withRetain(TopicRetainType.NEVER))
            .withDataPoints(Arrays.asList(
                new DataPoint().withName("wjzrnfygxgisp")
                    .withDataSource("mvtzfkufub")
                    .withDataPointConfiguration("ofx")
                    .withObservabilityMode(DataPointObservabilityMode.GAUGE),
                new DataPoint().withName("fjaeq")
                    .withDataSource("hqjbasvmsmj")
                    .withDataPointConfiguration("lngsntnbybkzgcwr")
                    .withObservabilityMode(DataPointObservabilityMode.NONE)));
        model = BinaryData.fromObject(model).toObject(Dataset.class);
        Assertions.assertEquals("narxzxtheotus", model.name());
        Assertions.assertEquals("yevc", model.datasetConfiguration());
        Assertions.assertEquals("qi", model.topic().path());
        Assertions.assertEquals(TopicRetainType.NEVER, model.topic().retain());
        Assertions.assertEquals("wjzrnfygxgisp", model.dataPoints().get(0).name());
        Assertions.assertEquals("mvtzfkufub", model.dataPoints().get(0).dataSource());
        Assertions.assertEquals("ofx", model.dataPoints().get(0).dataPointConfiguration());
        Assertions.assertEquals(DataPointObservabilityMode.GAUGE, model.dataPoints().get(0).observabilityMode());
    }
}
