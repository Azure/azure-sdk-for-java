// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.deviceregistry.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.deviceregistry.models.AuthenticationMethod;
import com.azure.resourcemanager.deviceregistry.models.DeviceMessagingEndpoint;
import com.azure.resourcemanager.deviceregistry.models.DiscoveredInboundEndpoints;
import com.azure.resourcemanager.deviceregistry.models.DiscoveredMessagingEndpoints;
import com.azure.resourcemanager.deviceregistry.models.DiscoveredOutboundEndpoints;
import com.azure.resourcemanager.deviceregistry.models.NamespaceDiscoveredDeviceUpdateProperties;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class NamespaceDiscoveredDeviceUpdatePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        NamespaceDiscoveredDeviceUpdateProperties model = BinaryData.fromString(
            "{\"externalDeviceId\":\"kdl\",\"endpoints\":{\"inbound\":{\"fqjbvleo\":{\"endpointType\":\"bum\",\"address\":\"kxtrq\",\"version\":\"smlmbtxhwgfwsrta\",\"supportedAuthenticationMethods\":[\"Anonymous\",\"UsernamePassword\",\"Certificate\"],\"additionalConfiguration\":\"hubskhudygooo\",\"lastUpdatedOn\":\"2021-10-01T10:37:48Z\"},\"tiewdj\":{\"endpointType\":\"fmluiqtqzfavyvn\",\"address\":\"qybaryeua\",\"version\":\"kq\",\"supportedAuthenticationMethods\":[\"Certificate\",\"Anonymous\"],\"additionalConfiguration\":\"lesjcbhe\",\"lastUpdatedOn\":\"2021-04-10T08:53:01Z\"}},\"outbound\":{\"assigned\":{\"xtdr\":{\"endpointType\":\"uwrbehwagoh\",\"address\":\"uffkmrqemvvh\"},\"guaadraufactkahz\":{\"endpointType\":\"utacoe\",\"address\":\"jvewzcjznmwcp\"},\"lqubkwdlen\":{\"endpointType\":\"ajjziuxxpshne\",\"address\":\"kulfg\"}}}},\"operatingSystemVersion\":\"sutujba\",\"attributes\":{},\"discoveryId\":\"o\",\"version\":7506794440055599533}")
            .toObject(NamespaceDiscoveredDeviceUpdateProperties.class);
        Assertions.assertEquals("kdl", model.externalDeviceId());
        Assertions.assertEquals("bum", model.endpoints().inbound().get("fqjbvleo").endpointType());
        Assertions.assertEquals("kxtrq", model.endpoints().inbound().get("fqjbvleo").address());
        Assertions.assertEquals("smlmbtxhwgfwsrta", model.endpoints().inbound().get("fqjbvleo").version());
        Assertions.assertEquals(AuthenticationMethod.ANONYMOUS,
            model.endpoints().inbound().get("fqjbvleo").supportedAuthenticationMethods().get(0));
        Assertions.assertEquals("hubskhudygooo", model.endpoints().inbound().get("fqjbvleo").additionalConfiguration());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-01T10:37:48Z"),
            model.endpoints().inbound().get("fqjbvleo").lastUpdatedOn());
        Assertions.assertEquals("uwrbehwagoh", model.endpoints().outbound().assigned().get("xtdr").endpointType());
        Assertions.assertEquals("uffkmrqemvvh", model.endpoints().outbound().assigned().get("xtdr").address());
        Assertions.assertEquals("sutujba", model.operatingSystemVersion());
        Assertions.assertEquals("o", model.discoveryId());
        Assertions.assertEquals(7506794440055599533L, model.version());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        NamespaceDiscoveredDeviceUpdateProperties model
            = new NamespaceDiscoveredDeviceUpdateProperties().withExternalDeviceId("kdl")
                .withEndpoints(new DiscoveredMessagingEndpoints()
                    .withInbound(mapOf("fqjbvleo",
                        new DiscoveredInboundEndpoints().withEndpointType("bum")
                            .withAddress("kxtrq")
                            .withVersion("smlmbtxhwgfwsrta")
                            .withSupportedAuthenticationMethods(Arrays.asList(AuthenticationMethod.ANONYMOUS,
                                AuthenticationMethod.USERNAME_PASSWORD, AuthenticationMethod.CERTIFICATE))
                            .withAdditionalConfiguration("hubskhudygooo")
                            .withLastUpdatedOn(OffsetDateTime.parse("2021-10-01T10:37:48Z")),
                        "tiewdj",
                        new DiscoveredInboundEndpoints().withEndpointType("fmluiqtqzfavyvn")
                            .withAddress("qybaryeua")
                            .withVersion("kq")
                            .withSupportedAuthenticationMethods(
                                Arrays.asList(AuthenticationMethod.CERTIFICATE, AuthenticationMethod.ANONYMOUS))
                            .withAdditionalConfiguration("lesjcbhe")
                            .withLastUpdatedOn(OffsetDateTime.parse("2021-04-10T08:53:01Z"))))
                    .withOutbound(new DiscoveredOutboundEndpoints().withAssigned(mapOf("xtdr",
                        new DeviceMessagingEndpoint().withEndpointType("uwrbehwagoh").withAddress("uffkmrqemvvh"),
                        "guaadraufactkahz",
                        new DeviceMessagingEndpoint().withEndpointType("utacoe").withAddress("jvewzcjznmwcp"),
                        "lqubkwdlen",
                        new DeviceMessagingEndpoint().withEndpointType("ajjziuxxpshne").withAddress("kulfg")))))
                .withOperatingSystemVersion("sutujba")
                .withAttributes(mapOf())
                .withDiscoveryId("o")
                .withVersion(7506794440055599533L);
        model = BinaryData.fromObject(model).toObject(NamespaceDiscoveredDeviceUpdateProperties.class);
        Assertions.assertEquals("kdl", model.externalDeviceId());
        Assertions.assertEquals("bum", model.endpoints().inbound().get("fqjbvleo").endpointType());
        Assertions.assertEquals("kxtrq", model.endpoints().inbound().get("fqjbvleo").address());
        Assertions.assertEquals("smlmbtxhwgfwsrta", model.endpoints().inbound().get("fqjbvleo").version());
        Assertions.assertEquals(AuthenticationMethod.ANONYMOUS,
            model.endpoints().inbound().get("fqjbvleo").supportedAuthenticationMethods().get(0));
        Assertions.assertEquals("hubskhudygooo", model.endpoints().inbound().get("fqjbvleo").additionalConfiguration());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-01T10:37:48Z"),
            model.endpoints().inbound().get("fqjbvleo").lastUpdatedOn());
        Assertions.assertEquals("uwrbehwagoh", model.endpoints().outbound().assigned().get("xtdr").endpointType());
        Assertions.assertEquals("uffkmrqemvvh", model.endpoints().outbound().assigned().get("xtdr").address());
        Assertions.assertEquals("sutujba", model.operatingSystemVersion());
        Assertions.assertEquals("o", model.discoveryId());
        Assertions.assertEquals(7506794440055599533L, model.version());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
