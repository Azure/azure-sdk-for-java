// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.deviceregistry.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.deviceregistry.models.AuthenticationMethod;
import com.azure.resourcemanager.deviceregistry.models.DeviceMessagingEndpoint;
import com.azure.resourcemanager.deviceregistry.models.DiscoveredInboundEndpoints;
import com.azure.resourcemanager.deviceregistry.models.DiscoveredMessagingEndpoints;
import com.azure.resourcemanager.deviceregistry.models.DiscoveredOutboundEndpoints;
import com.azure.resourcemanager.deviceregistry.models.NamespaceDiscoveredDeviceUpdateProperties;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class NamespaceDiscoveredDeviceUpdatePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        NamespaceDiscoveredDeviceUpdateProperties model = BinaryData.fromString(
            "{\"externalDeviceId\":\"ulfgslqu\",\"endpoints\":{\"inbound\":{\"gpqch\":{\"endpointType\":\"lenrd\",\"address\":\"utujba\",\"version\":\"juohminyflnorw\",\"supportedAuthenticationMethods\":[\"UsernamePassword\",\"UsernamePassword\",\"UsernamePassword\"],\"additionalConfiguration\":\"lvxwmyg\",\"lastUpdatedOn\":\"2021-08-06T16:36:03Z\"},\"hlvnuuepzlr\":{\"endpointType\":\"sze\",\"address\":\"nnbj\",\"version\":\"xgibbda\",\"supportedAuthenticationMethods\":[\"UsernamePassword\"],\"additionalConfiguration\":\"ozauorsukokwb\",\"lastUpdatedOn\":\"2021-03-26T17:33:57Z\"},\"xmsivfomiloxggdu\":{\"endpointType\":\"hw\",\"address\":\"soldweyuqdunv\",\"version\":\"nrwrbiork\",\"supportedAuthenticationMethods\":[\"Anonymous\",\"Certificate\"],\"additionalConfiguration\":\"hhg\",\"lastUpdatedOn\":\"2021-09-05T06:42:05Z\"},\"m\":{\"endpointType\":\"iqndieuzaofj\",\"address\":\"hvcyyysfg\",\"version\":\"tcubiipuipwoqonm\",\"supportedAuthenticationMethods\":[\"UsernamePassword\",\"UsernamePassword\",\"UsernamePassword\"],\"additionalConfiguration\":\"zshq\",\"lastUpdatedOn\":\"2021-10-26T01:34:18Z\"}},\"outbound\":{\"assigned\":{\"rwfscjfnynszquj\":{\"endpointType\":\"gmblrri\",\"address\":\"bywdxsmicc\"},\"hjoxo\":{\"endpointType\":\"dvoqyt\",\"address\":\"byowbblgyavutp\"},\"cgxxlxs\":{\"endpointType\":\"msksbp\",\"address\":\"mlqoljx\"}}}},\"operatingSystemVersion\":\"gcvizqzdwlvwlyou\",\"attributes\":{},\"discoveryId\":\"bkjubdyhgkfmins\",\"version\":3264236544937493152}")
            .toObject(NamespaceDiscoveredDeviceUpdateProperties.class);
        Assertions.assertEquals("ulfgslqu", model.externalDeviceId());
        Assertions.assertEquals("lenrd", model.endpoints().inbound().get("gpqch").endpointType());
        Assertions.assertEquals("utujba", model.endpoints().inbound().get("gpqch").address());
        Assertions.assertEquals("juohminyflnorw", model.endpoints().inbound().get("gpqch").version());
        Assertions.assertEquals(AuthenticationMethod.USERNAME_PASSWORD,
            model.endpoints().inbound().get("gpqch").supportedAuthenticationMethods().get(0));
        Assertions.assertEquals("lvxwmyg", model.endpoints().inbound().get("gpqch").additionalConfiguration());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-06T16:36:03Z"),
            model.endpoints().inbound().get("gpqch").lastUpdatedOn());
        Assertions.assertEquals("gmblrri",
            model.endpoints().outbound().assigned().get("rwfscjfnynszquj").endpointType());
        Assertions.assertEquals("bywdxsmicc", model.endpoints().outbound().assigned().get("rwfscjfnynszquj").address());
        Assertions.assertEquals("gcvizqzdwlvwlyou", model.operatingSystemVersion());
        Assertions.assertEquals("bkjubdyhgkfmins", model.discoveryId());
        Assertions.assertEquals(3264236544937493152L, model.version());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        NamespaceDiscoveredDeviceUpdateProperties model
            = new NamespaceDiscoveredDeviceUpdateProperties().withExternalDeviceId("ulfgslqu")
                .withEndpoints(new DiscoveredMessagingEndpoints()
                    .withInbound(mapOf("gpqch",
                        new DiscoveredInboundEndpoints().withEndpointType("lenrd")
                            .withAddress("utujba")
                            .withVersion("juohminyflnorw")
                            .withSupportedAuthenticationMethods(Arrays.asList(AuthenticationMethod.USERNAME_PASSWORD,
                                AuthenticationMethod.USERNAME_PASSWORD, AuthenticationMethod.USERNAME_PASSWORD))
                            .withAdditionalConfiguration("lvxwmyg")
                            .withLastUpdatedOn(OffsetDateTime.parse("2021-08-06T16:36:03Z")),
                        "hlvnuuepzlr",
                        new DiscoveredInboundEndpoints().withEndpointType("sze")
                            .withAddress("nnbj")
                            .withVersion("xgibbda")
                            .withSupportedAuthenticationMethods(Arrays.asList(AuthenticationMethod.USERNAME_PASSWORD))
                            .withAdditionalConfiguration("ozauorsukokwb")
                            .withLastUpdatedOn(OffsetDateTime.parse("2021-03-26T17:33:57Z")),
                        "xmsivfomiloxggdu",
                        new DiscoveredInboundEndpoints().withEndpointType("hw")
                            .withAddress("soldweyuqdunv")
                            .withVersion("nrwrbiork")
                            .withSupportedAuthenticationMethods(
                                Arrays.asList(AuthenticationMethod.ANONYMOUS, AuthenticationMethod.CERTIFICATE))
                            .withAdditionalConfiguration("hhg")
                            .withLastUpdatedOn(OffsetDateTime.parse("2021-09-05T06:42:05Z")),
                        "m", new DiscoveredInboundEndpoints().withEndpointType("iqndieuzaofj")
                            .withAddress("hvcyyysfg")
                            .withVersion("tcubiipuipwoqonm")
                            .withSupportedAuthenticationMethods(Arrays.asList(AuthenticationMethod.USERNAME_PASSWORD,
                                AuthenticationMethod.USERNAME_PASSWORD, AuthenticationMethod.USERNAME_PASSWORD))
                            .withAdditionalConfiguration("zshq")
                            .withLastUpdatedOn(OffsetDateTime.parse("2021-10-26T01:34:18Z"))))
                    .withOutbound(new DiscoveredOutboundEndpoints().withAssigned(mapOf("rwfscjfnynszquj",
                        new DeviceMessagingEndpoint().withEndpointType("gmblrri").withAddress("bywdxsmicc"), "hjoxo",
                        new DeviceMessagingEndpoint().withEndpointType("dvoqyt").withAddress("byowbblgyavutp"),
                        "cgxxlxs", new DeviceMessagingEndpoint().withEndpointType("msksbp").withAddress("mlqoljx")))))
                .withOperatingSystemVersion("gcvizqzdwlvwlyou")
                .withAttributes(mapOf())
                .withDiscoveryId("bkjubdyhgkfmins")
                .withVersion(3264236544937493152L);
        model = BinaryData.fromObject(model).toObject(NamespaceDiscoveredDeviceUpdateProperties.class);
        Assertions.assertEquals("ulfgslqu", model.externalDeviceId());
        Assertions.assertEquals("lenrd", model.endpoints().inbound().get("gpqch").endpointType());
        Assertions.assertEquals("utujba", model.endpoints().inbound().get("gpqch").address());
        Assertions.assertEquals("juohminyflnorw", model.endpoints().inbound().get("gpqch").version());
        Assertions.assertEquals(AuthenticationMethod.USERNAME_PASSWORD,
            model.endpoints().inbound().get("gpqch").supportedAuthenticationMethods().get(0));
        Assertions.assertEquals("lvxwmyg", model.endpoints().inbound().get("gpqch").additionalConfiguration());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-06T16:36:03Z"),
            model.endpoints().inbound().get("gpqch").lastUpdatedOn());
        Assertions.assertEquals("gmblrri",
            model.endpoints().outbound().assigned().get("rwfscjfnynszquj").endpointType());
        Assertions.assertEquals("bywdxsmicc", model.endpoints().outbound().assigned().get("rwfscjfnynszquj").address());
        Assertions.assertEquals("gcvizqzdwlvwlyou", model.operatingSystemVersion());
        Assertions.assertEquals("bkjubdyhgkfmins", model.discoveryId());
        Assertions.assertEquals(3264236544937493152L, model.version());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
