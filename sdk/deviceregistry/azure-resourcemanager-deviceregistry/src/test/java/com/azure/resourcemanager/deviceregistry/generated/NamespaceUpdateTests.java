// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.deviceregistry.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.deviceregistry.models.Messaging;
import com.azure.resourcemanager.deviceregistry.models.MessagingEndpoint;
import com.azure.resourcemanager.deviceregistry.models.NamespaceUpdate;
import com.azure.resourcemanager.deviceregistry.models.NamespaceUpdateProperties;
import com.azure.resourcemanager.deviceregistry.models.SystemAssignedServiceIdentity;
import com.azure.resourcemanager.deviceregistry.models.SystemAssignedServiceIdentityType;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class NamespaceUpdateTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        NamespaceUpdate model = BinaryData.fromString(
            "{\"identity\":{\"principalId\":\"odpuozmyzydag\",\"tenantId\":\"axbezyiuo\",\"type\":\"None\"},\"tags\":{\"reximoryocfs\":\"hrdxwzywqsmbs\",\"ys\":\"ksymd\",\"qn\":\"kiiuxhqyudxor\",\"lrmv\":\"poczvyifqrvkdvjs\"},\"properties\":{\"messaging\":{\"endpoints\":{\"bvvnchrkcciw\":{\"endpointType\":\"kpnpulexxbczwtr\",\"address\":\"wiqzbqjvsovmyo\",\"resourceId\":\"cspkwlhzdobpxjmf\"},\"mjmvxieduugidyjr\":{\"endpointType\":\"juqk\",\"address\":\"rsa\",\"resourceId\":\"wkuofoskghsauu\"}}}}}")
            .toObject(NamespaceUpdate.class);
        Assertions.assertEquals(SystemAssignedServiceIdentityType.NONE, model.identity().type());
        Assertions.assertEquals("hrdxwzywqsmbs", model.tags().get("reximoryocfs"));
        Assertions.assertEquals("kpnpulexxbczwtr",
            model.properties().messaging().endpoints().get("bvvnchrkcciw").endpointType());
        Assertions.assertEquals("wiqzbqjvsovmyo",
            model.properties().messaging().endpoints().get("bvvnchrkcciw").address());
        Assertions.assertEquals("cspkwlhzdobpxjmf",
            model.properties().messaging().endpoints().get("bvvnchrkcciw").resourceId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        NamespaceUpdate model = new NamespaceUpdate()
            .withIdentity(new SystemAssignedServiceIdentity().withType(SystemAssignedServiceIdentityType.NONE))
            .withTags(mapOf("reximoryocfs", "hrdxwzywqsmbs", "ys", "ksymd", "qn", "kiiuxhqyudxor", "lrmv",
                "poczvyifqrvkdvjs"))
            .withProperties(
                new NamespaceUpdateProperties().withMessaging(new Messaging().withEndpoints(mapOf("bvvnchrkcciw",
                    new MessagingEndpoint().withEndpointType("kpnpulexxbczwtr")
                        .withAddress("wiqzbqjvsovmyo")
                        .withResourceId("cspkwlhzdobpxjmf"),
                    "mjmvxieduugidyjr",
                    new MessagingEndpoint().withEndpointType("juqk")
                        .withAddress("rsa")
                        .withResourceId("wkuofoskghsauu")))));
        model = BinaryData.fromObject(model).toObject(NamespaceUpdate.class);
        Assertions.assertEquals(SystemAssignedServiceIdentityType.NONE, model.identity().type());
        Assertions.assertEquals("hrdxwzywqsmbs", model.tags().get("reximoryocfs"));
        Assertions.assertEquals("kpnpulexxbczwtr",
            model.properties().messaging().endpoints().get("bvvnchrkcciw").endpointType());
        Assertions.assertEquals("wiqzbqjvsovmyo",
            model.properties().messaging().endpoints().get("bvvnchrkcciw").address());
        Assertions.assertEquals("cspkwlhzdobpxjmf",
            model.properties().messaging().endpoints().get("bvvnchrkcciw").resourceId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
