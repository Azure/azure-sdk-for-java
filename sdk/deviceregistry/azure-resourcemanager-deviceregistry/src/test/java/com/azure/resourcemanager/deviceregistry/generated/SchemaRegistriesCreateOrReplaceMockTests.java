// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.deviceregistry.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.deviceregistry.DeviceRegistryManager;
import com.azure.resourcemanager.deviceregistry.models.SchemaRegistry;
import com.azure.resourcemanager.deviceregistry.models.SchemaRegistryProperties;
import com.azure.resourcemanager.deviceregistry.models.SystemAssignedServiceIdentity;
import com.azure.resourcemanager.deviceregistry.models.SystemAssignedServiceIdentityType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class SchemaRegistriesCreateOrReplaceMockTests {
    @Test
    public void testCreateOrReplace() throws Exception {
        String responseStr
            = "{\"properties\":{\"uuid\":\"aoypny\",\"namespace\":\"hshxcylhkgmnsghp\",\"displayName\":\"cphdrwjjkhvyo\",\"description\":\"c\",\"storageAccountContainerUrl\":\"u\",\"provisioningState\":\"Succeeded\"},\"identity\":{\"principalId\":\"mhrpqpdfw\",\"tenantId\":\"oi\",\"type\":\"None\"},\"location\":\"ssffxuifmc\",\"tags\":{\"llg\":\"obkdqzrdzsyl\"},\"id\":\"rc\",\"name\":\"zydmxzjijpvuaurk\",\"type\":\"hci\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        DeviceRegistryManager manager = DeviceRegistryManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        SchemaRegistry response = manager.schemaRegistries()
            .define("kdfrdbiqmrjgeihf")
            .withRegion("zmoaeds")
            .withExistingResourceGroup("nssqyzqed")
            .withTags(mapOf("psmgo", "uivedwcgyeewxeiq", "l", "guamlj"))
            .withProperties(new SchemaRegistryProperties().withNamespace("phmgtvljvrcmyfq")
                .withDisplayName("gxhnpomyqwcabv")
                .withDescription("ilee")
                .withStorageAccountContainerUrl("aswlp"))
            .withIdentity(new SystemAssignedServiceIdentity().withType(SystemAssignedServiceIdentityType.NONE))
            .create();

        Assertions.assertEquals("ssffxuifmc", response.location());
        Assertions.assertEquals("obkdqzrdzsyl", response.tags().get("llg"));
        Assertions.assertEquals("hshxcylhkgmnsghp", response.properties().namespace());
        Assertions.assertEquals("cphdrwjjkhvyo", response.properties().displayName());
        Assertions.assertEquals("c", response.properties().description());
        Assertions.assertEquals("u", response.properties().storageAccountContainerUrl());
        Assertions.assertEquals(SystemAssignedServiceIdentityType.NONE, response.identity().type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
