// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.deviceregistry.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.deviceregistry.DeviceRegistryManager;
import com.azure.resourcemanager.deviceregistry.models.SchemaRegistry;
import com.azure.resourcemanager.deviceregistry.models.SchemaRegistryProperties;
import com.azure.resourcemanager.deviceregistry.models.SystemAssignedServiceIdentity;
import com.azure.resourcemanager.deviceregistry.models.SystemAssignedServiceIdentityType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class SchemaRegistriesCreateOrReplaceMockTests {
    @Test
    public void testCreateOrReplace() throws Exception {
        String responseStr
            = "{\"properties\":{\"uuid\":\"qhl\",\"namespace\":\"vriiio\",\"displayName\":\"al\",\"description\":\"fk\",\"storageAccountContainerUrl\":\"tvsexsowuel\",\"provisioningState\":\"Succeeded\"},\"identity\":{\"principalId\":\"hhxvrhmzkwpj\",\"tenantId\":\"wspughftqsxhqx\",\"type\":\"None\"},\"location\":\"ukndxdigrjgu\",\"tags\":{\"z\":\"dmsyqtfihwhbo\",\"zudphqamvdkfw\":\"ngamvpphosz\",\"qiatkzwpcnp\":\"nwcvtbvkayhmtnv\"},\"id\":\"zcjaesgvvsccy\",\"name\":\"jguq\",\"type\":\"hwyg\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        DeviceRegistryManager manager = DeviceRegistryManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        SchemaRegistry response = manager.schemaRegistries()
            .define("x")
            .withRegion("frl")
            .withExistingResourceGroup("slthaq")
            .withTags(mapOf("iin", "zrnw", "h", "fpwpjylwbt"))
            .withProperties(new SchemaRegistryProperties().withNamespace("pdrhne")
                .withDisplayName("owqkdwytisi")
                .withDescription("rcgp")
                .withStorageAccountContainerUrl("kpzi"))
            .withIdentity(new SystemAssignedServiceIdentity().withType(SystemAssignedServiceIdentityType.NONE))
            .create();

        Assertions.assertEquals("ukndxdigrjgu", response.location());
        Assertions.assertEquals("dmsyqtfihwhbo", response.tags().get("z"));
        Assertions.assertEquals("vriiio", response.properties().namespace());
        Assertions.assertEquals("al", response.properties().displayName());
        Assertions.assertEquals("fk", response.properties().description());
        Assertions.assertEquals("tvsexsowuel", response.properties().storageAccountContainerUrl());
        Assertions.assertEquals(SystemAssignedServiceIdentityType.NONE, response.identity().type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
