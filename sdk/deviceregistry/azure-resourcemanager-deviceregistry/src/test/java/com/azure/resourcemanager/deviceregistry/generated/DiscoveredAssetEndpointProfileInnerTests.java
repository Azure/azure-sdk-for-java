// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.deviceregistry.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.deviceregistry.fluent.models.DiscoveredAssetEndpointProfileInner;
import com.azure.resourcemanager.deviceregistry.models.AuthenticationMethod;
import com.azure.resourcemanager.deviceregistry.models.DiscoveredAssetEndpointProfileProperties;
import com.azure.resourcemanager.deviceregistry.models.ExtendedLocation;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DiscoveredAssetEndpointProfileInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DiscoveredAssetEndpointProfileInner model = BinaryData.fromString(
            "{\"properties\":{\"targetAddress\":\"xbczwtruwiqz\",\"additionalConfiguration\":\"j\",\"supportedAuthenticationMethods\":[\"Certificate\"],\"endpointProfileType\":\"myokacspkwlh\",\"discoveryId\":\"dobpxjmflbvvn\",\"version\":2925444529354115235,\"provisioningState\":\"Canceled\"},\"extendedLocation\":{\"type\":\"ciwwzjuqkhr\",\"name\":\"ajiwkuo\"},\"location\":\"skghsauuimj\",\"tags\":{\"ugidyjrr\":\"ied\",\"v\":\"byao\",\"onpc\":\"xc\",\"eggzfb\":\"hocohslkev\"},\"id\":\"hfmvfaxkffe\",\"name\":\"ithlvmezyvshxm\",\"type\":\"sbbzo\"}")
            .toObject(DiscoveredAssetEndpointProfileInner.class);
        Assertions.assertEquals("skghsauuimj", model.location());
        Assertions.assertEquals("ied", model.tags().get("ugidyjrr"));
        Assertions.assertEquals("xbczwtruwiqz", model.properties().targetAddress());
        Assertions.assertEquals("j", model.properties().additionalConfiguration());
        Assertions.assertEquals(AuthenticationMethod.CERTIFICATE,
            model.properties().supportedAuthenticationMethods().get(0));
        Assertions.assertEquals("myokacspkwlh", model.properties().endpointProfileType());
        Assertions.assertEquals("dobpxjmflbvvn", model.properties().discoveryId());
        Assertions.assertEquals(2925444529354115235L, model.properties().version());
        Assertions.assertEquals("ciwwzjuqkhr", model.extendedLocation().type());
        Assertions.assertEquals("ajiwkuo", model.extendedLocation().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DiscoveredAssetEndpointProfileInner model
            = new DiscoveredAssetEndpointProfileInner().withLocation("skghsauuimj")
                .withTags(mapOf("ugidyjrr", "ied", "v", "byao", "onpc", "xc", "eggzfb", "hocohslkev"))
                .withProperties(new DiscoveredAssetEndpointProfileProperties().withTargetAddress("xbczwtruwiqz")
                    .withAdditionalConfiguration("j")
                    .withSupportedAuthenticationMethods(Arrays.asList(AuthenticationMethod.CERTIFICATE))
                    .withEndpointProfileType("myokacspkwlh")
                    .withDiscoveryId("dobpxjmflbvvn")
                    .withVersion(2925444529354115235L))
                .withExtendedLocation(new ExtendedLocation().withType("ciwwzjuqkhr").withName("ajiwkuo"));
        model = BinaryData.fromObject(model).toObject(DiscoveredAssetEndpointProfileInner.class);
        Assertions.assertEquals("skghsauuimj", model.location());
        Assertions.assertEquals("ied", model.tags().get("ugidyjrr"));
        Assertions.assertEquals("xbczwtruwiqz", model.properties().targetAddress());
        Assertions.assertEquals("j", model.properties().additionalConfiguration());
        Assertions.assertEquals(AuthenticationMethod.CERTIFICATE,
            model.properties().supportedAuthenticationMethods().get(0));
        Assertions.assertEquals("myokacspkwlh", model.properties().endpointProfileType());
        Assertions.assertEquals("dobpxjmflbvvn", model.properties().discoveryId());
        Assertions.assertEquals(2925444529354115235L, model.properties().version());
        Assertions.assertEquals("ciwwzjuqkhr", model.extendedLocation().type());
        Assertions.assertEquals("ajiwkuo", model.extendedLocation().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
