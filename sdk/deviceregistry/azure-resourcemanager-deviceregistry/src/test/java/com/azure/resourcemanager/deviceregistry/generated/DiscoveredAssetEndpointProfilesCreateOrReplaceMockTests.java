// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.deviceregistry.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.deviceregistry.DeviceRegistryManager;
import com.azure.resourcemanager.deviceregistry.models.AuthenticationMethod;
import com.azure.resourcemanager.deviceregistry.models.DiscoveredAssetEndpointProfile;
import com.azure.resourcemanager.deviceregistry.models.DiscoveredAssetEndpointProfileProperties;
import com.azure.resourcemanager.deviceregistry.models.ExtendedLocation;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class DiscoveredAssetEndpointProfilesCreateOrReplaceMockTests {
    @Test
    public void testCreateOrReplace() throws Exception {
        String responseStr
            = "{\"properties\":{\"targetAddress\":\"szufoxciqopidoa\",\"additionalConfiguration\":\"iodhkhazxkhnz\",\"supportedAuthenticationMethods\":[\"Anonymous\",\"Certificate\"],\"endpointProfileType\":\"ntoe\",\"discoveryId\":\"okdwb\",\"version\":4169571464200013299,\"provisioningState\":\"Succeeded\"},\"extendedLocation\":{\"type\":\"zcmrvexztvb\",\"name\":\"qgsfraoyzkoow\"},\"location\":\"mnguxawqaldsyu\",\"tags\":{\"kutwpf\":\"merqfobwyznkb\",\"sd\":\"pagmhrskdsnf\",\"wpusdsttwvogv\":\"akgtdlmkkzevdlh\",\"qqmoaku\":\"bejdcn\"},\"id\":\"gm\",\"name\":\"zr\",\"type\":\"rdgrtw\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        DeviceRegistryManager manager = DeviceRegistryManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        DiscoveredAssetEndpointProfile response = manager.discoveredAssetEndpointProfiles()
            .define("vkg")
            .withRegion("ab")
            .withExistingResourceGroup("f")
            .withExtendedLocation(new ExtendedLocation().withType("ovsm").withName("l"))
            .withTags(mapOf("tpuqujmq", "efkifr", "jcntuj", "gkfbtndoaong"))
            .withProperties(new DiscoveredAssetEndpointProfileProperties().withTargetAddress("bgdknnqv")
                .withAdditionalConfiguration("znqntoru")
                .withSupportedAuthenticationMethods(Arrays.asList(AuthenticationMethod.USERNAME_PASSWORD,
                    AuthenticationMethod.ANONYMOUS, AuthenticationMethod.CERTIFICATE, AuthenticationMethod.ANONYMOUS))
                .withEndpointProfileType("kycgrauwj")
                .withDiscoveryId("etaebu")
                .withVersion(602178268406598897L))
            .create();

        Assertions.assertEquals("mnguxawqaldsyu", response.location());
        Assertions.assertEquals("merqfobwyznkb", response.tags().get("kutwpf"));
        Assertions.assertEquals("szufoxciqopidoa", response.properties().targetAddress());
        Assertions.assertEquals("iodhkhazxkhnz", response.properties().additionalConfiguration());
        Assertions.assertEquals(AuthenticationMethod.ANONYMOUS,
            response.properties().supportedAuthenticationMethods().get(0));
        Assertions.assertEquals("ntoe", response.properties().endpointProfileType());
        Assertions.assertEquals("okdwb", response.properties().discoveryId());
        Assertions.assertEquals(4169571464200013299L, response.properties().version());
        Assertions.assertEquals("zcmrvexztvb", response.extendedLocation().type());
        Assertions.assertEquals("qgsfraoyzkoow", response.extendedLocation().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
