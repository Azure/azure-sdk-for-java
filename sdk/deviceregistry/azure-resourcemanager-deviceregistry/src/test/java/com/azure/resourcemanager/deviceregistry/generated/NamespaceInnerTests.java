// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.deviceregistry.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.deviceregistry.fluent.models.NamespaceInner;
import com.azure.resourcemanager.deviceregistry.models.Messaging;
import com.azure.resourcemanager.deviceregistry.models.MessagingEndpoint;
import com.azure.resourcemanager.deviceregistry.models.NamespaceProperties;
import com.azure.resourcemanager.deviceregistry.models.SystemAssignedServiceIdentity;
import com.azure.resourcemanager.deviceregistry.models.SystemAssignedServiceIdentityType;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class NamespaceInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        NamespaceInner model = BinaryData.fromString(
            "{\"properties\":{\"uuid\":\"pphrcgynco\",\"messaging\":{\"endpoints\":{\"ccfwnfnbacfion\":{\"endpointType\":\"vmmcoofs\",\"address\":\"lzevgbmqjqab\",\"resourceId\":\"pmivkwlzu\"},\"nwsubisnj\":{\"endpointType\":\"bxetqgtzxdpn\",\"address\":\"bqqwxrj\",\"resourceId\":\"al\"}}},\"provisioningState\":\"Canceled\"},\"identity\":{\"principalId\":\"gnzscxaqwo\",\"tenantId\":\"hcbonqvpkvlr\",\"type\":\"SystemAssigned\"},\"location\":\"ea\",\"tags\":{\"enjbdlwtgrhp\":\"pheoflokeyy\",\"umasxazjpq\":\"jp\",\"ualhbxxhejj\":\"e\",\"ynpwlbj\":\"zvdudgwdslfhotwm\"},\"id\":\"pgacftadehxnlty\",\"name\":\"sop\",\"type\":\"usue\"}")
            .toObject(NamespaceInner.class);
        Assertions.assertEquals("ea", model.location());
        Assertions.assertEquals("pheoflokeyy", model.tags().get("enjbdlwtgrhp"));
        Assertions.assertEquals("vmmcoofs",
            model.properties().messaging().endpoints().get("ccfwnfnbacfion").endpointType());
        Assertions.assertEquals("lzevgbmqjqab",
            model.properties().messaging().endpoints().get("ccfwnfnbacfion").address());
        Assertions.assertEquals("pmivkwlzu",
            model.properties().messaging().endpoints().get("ccfwnfnbacfion").resourceId());
        Assertions.assertEquals(SystemAssignedServiceIdentityType.SYSTEM_ASSIGNED, model.identity().type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        NamespaceInner model = new NamespaceInner().withLocation("ea")
            .withTags(mapOf("enjbdlwtgrhp", "pheoflokeyy", "umasxazjpq", "jp", "ualhbxxhejj", "e", "ynpwlbj",
                "zvdudgwdslfhotwm"))
            .withProperties(new NamespaceProperties().withMessaging(new Messaging().withEndpoints(mapOf(
                "ccfwnfnbacfion",
                new MessagingEndpoint().withEndpointType("vmmcoofs")
                    .withAddress("lzevgbmqjqab")
                    .withResourceId("pmivkwlzu"),
                "nwsubisnj",
                new MessagingEndpoint().withEndpointType("bxetqgtzxdpn").withAddress("bqqwxrj").withResourceId("al")))))
            .withIdentity(
                new SystemAssignedServiceIdentity().withType(SystemAssignedServiceIdentityType.SYSTEM_ASSIGNED));
        model = BinaryData.fromObject(model).toObject(NamespaceInner.class);
        Assertions.assertEquals("ea", model.location());
        Assertions.assertEquals("pheoflokeyy", model.tags().get("enjbdlwtgrhp"));
        Assertions.assertEquals("vmmcoofs",
            model.properties().messaging().endpoints().get("ccfwnfnbacfion").endpointType());
        Assertions.assertEquals("lzevgbmqjqab",
            model.properties().messaging().endpoints().get("ccfwnfnbacfion").address());
        Assertions.assertEquals("pmivkwlzu",
            model.properties().messaging().endpoints().get("ccfwnfnbacfion").resourceId());
        Assertions.assertEquals(SystemAssignedServiceIdentityType.SYSTEM_ASSIGNED, model.identity().type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
