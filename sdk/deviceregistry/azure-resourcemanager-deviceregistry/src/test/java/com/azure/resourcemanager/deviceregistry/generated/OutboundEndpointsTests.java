// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.deviceregistry.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.deviceregistry.models.DeviceMessagingEndpoint;
import com.azure.resourcemanager.deviceregistry.models.OutboundEndpoints;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class OutboundEndpointsTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        OutboundEndpoints model = BinaryData.fromString(
            "{\"assigned\":{\"hcohfwdsjnk\":{\"endpointType\":\"uvxzxclvi\",\"address\":\"hhqzonosgg\"},\"pnppfuf\":{\"endpointType\":\"jutiiswacff\",\"address\":\"dkzzewkfvhqcrail\"},\"bcvkcvqvpkeq\":{\"endpointType\":\"wdmhdlxyjrxs\",\"address\":\"gafcnihgwqapnedg\"}},\"unassigned\":{\"opcjwvnhd\":{\"endpointType\":\"rhvoods\",\"address\":\"tbobz\"},\"rpkhjwn\":{\"endpointType\":\"wmgxcxrsl\",\"address\":\"mutwuoe\"}}}")
            .toObject(OutboundEndpoints.class);
        Assertions.assertEquals("uvxzxclvi", model.assigned().get("hcohfwdsjnk").endpointType());
        Assertions.assertEquals("hhqzonosgg", model.assigned().get("hcohfwdsjnk").address());
        Assertions.assertEquals("rhvoods", model.unassigned().get("opcjwvnhd").endpointType());
        Assertions.assertEquals("tbobz", model.unassigned().get("opcjwvnhd").address());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        OutboundEndpoints model = new OutboundEndpoints()
            .withAssigned(mapOf("hcohfwdsjnk",
                new DeviceMessagingEndpoint().withEndpointType("uvxzxclvi").withAddress("hhqzonosgg"), "pnppfuf",
                new DeviceMessagingEndpoint().withEndpointType("jutiiswacff").withAddress("dkzzewkfvhqcrail"),
                "bcvkcvqvpkeq",
                new DeviceMessagingEndpoint().withEndpointType("wdmhdlxyjrxs").withAddress("gafcnihgwqapnedg")))
            .withUnassigned(
                mapOf("opcjwvnhd", new DeviceMessagingEndpoint().withEndpointType("rhvoods").withAddress("tbobz"),
                    "rpkhjwn", new DeviceMessagingEndpoint().withEndpointType("wmgxcxrsl").withAddress("mutwuoe")));
        model = BinaryData.fromObject(model).toObject(OutboundEndpoints.class);
        Assertions.assertEquals("uvxzxclvi", model.assigned().get("hcohfwdsjnk").endpointType());
        Assertions.assertEquals("hhqzonosgg", model.assigned().get("hcohfwdsjnk").address());
        Assertions.assertEquals("rhvoods", model.unassigned().get("opcjwvnhd").endpointType());
        Assertions.assertEquals("tbobz", model.unassigned().get("opcjwvnhd").address());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
