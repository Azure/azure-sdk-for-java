// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.deviceregistry.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.deviceregistry.models.DeviceMessagingEndpoint;
import com.azure.resourcemanager.deviceregistry.models.OutboundEndpoints;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class OutboundEndpointsTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        OutboundEndpoints model = BinaryData.fromString(
            "{\"assigned\":{\"btkuwhh\":{\"endpointType\":\"uqerpqlpqwc\",\"address\":\"iuqgbdbutauv\"},\"h\":{\"endpointType\":\"ykojoxafnndlpic\",\"address\":\"koymkcd\"},\"syrsndsytgadgvra\":{\"endpointType\":\"kkpwdreqnovvq\",\"address\":\"ovljxywsu\"}},\"unassigned\":{\"wlquuijfqkace\":{\"endpointType\":\"e\",\"address\":\"nzar\"}}}")
            .toObject(OutboundEndpoints.class);
        Assertions.assertEquals("uqerpqlpqwc", model.assigned().get("btkuwhh").endpointType());
        Assertions.assertEquals("iuqgbdbutauv", model.assigned().get("btkuwhh").address());
        Assertions.assertEquals("e", model.unassigned().get("wlquuijfqkace").endpointType());
        Assertions.assertEquals("nzar", model.unassigned().get("wlquuijfqkace").address());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        OutboundEndpoints model = new OutboundEndpoints()
            .withAssigned(mapOf("btkuwhh",
                new DeviceMessagingEndpoint().withEndpointType("uqerpqlpqwc").withAddress("iuqgbdbutauv"), "h",
                new DeviceMessagingEndpoint().withEndpointType("ykojoxafnndlpic").withAddress("koymkcd"),
                "syrsndsytgadgvra",
                new DeviceMessagingEndpoint().withEndpointType("kkpwdreqnovvq").withAddress("ovljxywsu")))
            .withUnassigned(
                mapOf("wlquuijfqkace", new DeviceMessagingEndpoint().withEndpointType("e").withAddress("nzar")));
        model = BinaryData.fromObject(model).toObject(OutboundEndpoints.class);
        Assertions.assertEquals("uqerpqlpqwc", model.assigned().get("btkuwhh").endpointType());
        Assertions.assertEquals("iuqgbdbutauv", model.assigned().get("btkuwhh").address());
        Assertions.assertEquals("e", model.unassigned().get("wlquuijfqkace").endpointType());
        Assertions.assertEquals("nzar", model.unassigned().get("wlquuijfqkace").address());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
