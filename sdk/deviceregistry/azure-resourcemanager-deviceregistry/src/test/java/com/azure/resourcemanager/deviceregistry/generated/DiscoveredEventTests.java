// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.deviceregistry.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.deviceregistry.models.DiscoveredEvent;
import com.azure.resourcemanager.deviceregistry.models.Topic;
import com.azure.resourcemanager.deviceregistry.models.TopicRetainType;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;

public final class DiscoveredEventTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DiscoveredEvent model = BinaryData.fromString(
            "{\"name\":\"exfwhy\",\"eventNotifier\":\"cibvyvdcsitynn\",\"eventConfiguration\":\"mdectehfiqscjey\",\"topic\":{\"path\":\"hezrkgq\",\"retain\":\"Never\"},\"lastUpdatedOn\":\"2021-06-04T03:18:37Z\"}")
            .toObject(DiscoveredEvent.class);
        Assertions.assertEquals("exfwhy", model.name());
        Assertions.assertEquals("cibvyvdcsitynn", model.eventNotifier());
        Assertions.assertEquals("mdectehfiqscjey", model.eventConfiguration());
        Assertions.assertEquals("hezrkgq", model.topic().path());
        Assertions.assertEquals(TopicRetainType.NEVER, model.topic().retain());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-04T03:18:37Z"), model.lastUpdatedOn());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DiscoveredEvent model = new DiscoveredEvent().withName("exfwhy")
            .withEventNotifier("cibvyvdcsitynn")
            .withEventConfiguration("mdectehfiqscjey")
            .withTopic(new Topic().withPath("hezrkgq").withRetain(TopicRetainType.NEVER))
            .withLastUpdatedOn(OffsetDateTime.parse("2021-06-04T03:18:37Z"));
        model = BinaryData.fromObject(model).toObject(DiscoveredEvent.class);
        Assertions.assertEquals("exfwhy", model.name());
        Assertions.assertEquals("cibvyvdcsitynn", model.eventNotifier());
        Assertions.assertEquals("mdectehfiqscjey", model.eventConfiguration());
        Assertions.assertEquals("hezrkgq", model.topic().path());
        Assertions.assertEquals(TopicRetainType.NEVER, model.topic().retain());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-04T03:18:37Z"), model.lastUpdatedOn());
    }
}
