// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.deviceregistry.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.deviceregistry.models.AuthenticationMethod;
import com.azure.resourcemanager.deviceregistry.models.DeviceMessagingEndpoint;
import com.azure.resourcemanager.deviceregistry.models.DiscoveredInboundEndpoints;
import com.azure.resourcemanager.deviceregistry.models.DiscoveredMessagingEndpoints;
import com.azure.resourcemanager.deviceregistry.models.DiscoveredOutboundEndpoints;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DiscoveredMessagingEndpointsTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DiscoveredMessagingEndpoints model = BinaryData.fromString(
            "{\"inbound\":{\"ewgioilqukrydxt\":{\"endpointType\":\"vz\",\"address\":\"ybycnunvj\",\"version\":\"tkfa\",\"supportedAuthenticationMethods\":[\"UsernamePassword\",\"UsernamePassword\",\"Certificate\",\"UsernamePassword\"],\"additionalConfiguration\":\"yzirtxdyuxzejn\",\"lastUpdatedOn\":\"2021-07-14T22:05:57Z\"},\"xumvfcluyovw\":{\"endpointType\":\"mieoxorgguf\",\"address\":\"yaomtb\",\"version\":\"havgrvk\",\"supportedAuthenticationMethods\":[\"Anonymous\",\"UsernamePassword\",\"Anonymous\",\"Anonymous\"],\"additionalConfiguration\":\"jbibg\",\"lastUpdatedOn\":\"2021-05-29T05:16:16Z\"},\"frymsgaojfmwnc\":{\"endpointType\":\"nbkfezzxscy\",\"address\":\"wzdgirujbzbo\",\"version\":\"zzbtdcqvpniyujvi\",\"supportedAuthenticationMethods\":[\"Certificate\"],\"additionalConfiguration\":\"hfssnrb\",\"lastUpdatedOn\":\"2021-08-09T21:16:26Z\"}},\"outbound\":{\"assigned\":{\"piwyczuhxacpqjl\":{\"endpointType\":\"fhir\",\"address\":\"tymoxoftp\"},\"ucvpamrs\":{\"endpointType\":\"hyus\",\"address\":\"skasdvlmfwdgzxu\"},\"xmrhu\":{\"endpointType\":\"uzvx\",\"address\":\"risjnhnytxifqjz\"}}}}")
            .toObject(DiscoveredMessagingEndpoints.class);
        Assertions.assertEquals("vz", model.inbound().get("ewgioilqukrydxt").endpointType());
        Assertions.assertEquals("ybycnunvj", model.inbound().get("ewgioilqukrydxt").address());
        Assertions.assertEquals("tkfa", model.inbound().get("ewgioilqukrydxt").version());
        Assertions.assertEquals(AuthenticationMethod.USERNAME_PASSWORD,
            model.inbound().get("ewgioilqukrydxt").supportedAuthenticationMethods().get(0));
        Assertions.assertEquals("yzirtxdyuxzejn", model.inbound().get("ewgioilqukrydxt").additionalConfiguration());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-14T22:05:57Z"),
            model.inbound().get("ewgioilqukrydxt").lastUpdatedOn());
        Assertions.assertEquals("fhir", model.outbound().assigned().get("piwyczuhxacpqjl").endpointType());
        Assertions.assertEquals("tymoxoftp", model.outbound().assigned().get("piwyczuhxacpqjl").address());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DiscoveredMessagingEndpoints model
            = new DiscoveredMessagingEndpoints()
                .withInbound(mapOf("ewgioilqukrydxt",
                    new DiscoveredInboundEndpoints().withEndpointType("vz")
                        .withAddress("ybycnunvj")
                        .withVersion("tkfa")
                        .withSupportedAuthenticationMethods(Arrays.asList(AuthenticationMethod.USERNAME_PASSWORD,
                            AuthenticationMethod.USERNAME_PASSWORD, AuthenticationMethod.CERTIFICATE,
                            AuthenticationMethod.USERNAME_PASSWORD))
                        .withAdditionalConfiguration("yzirtxdyuxzejn")
                        .withLastUpdatedOn(OffsetDateTime.parse("2021-07-14T22:05:57Z")),
                    "xumvfcluyovw",
                    new DiscoveredInboundEndpoints().withEndpointType("mieoxorgguf")
                        .withAddress("yaomtb")
                        .withVersion("havgrvk")
                        .withSupportedAuthenticationMethods(
                            Arrays.asList(AuthenticationMethod.ANONYMOUS, AuthenticationMethod.USERNAME_PASSWORD,
                                AuthenticationMethod.ANONYMOUS, AuthenticationMethod.ANONYMOUS))
                        .withAdditionalConfiguration("jbibg")
                        .withLastUpdatedOn(OffsetDateTime.parse("2021-05-29T05:16:16Z")),
                    "frymsgaojfmwnc",
                    new DiscoveredInboundEndpoints().withEndpointType("nbkfezzxscy")
                        .withAddress("wzdgirujbzbo")
                        .withVersion("zzbtdcqvpniyujvi")
                        .withSupportedAuthenticationMethods(Arrays.asList(AuthenticationMethod.CERTIFICATE))
                        .withAdditionalConfiguration("hfssnrb")
                        .withLastUpdatedOn(OffsetDateTime.parse("2021-08-09T21:16:26Z"))))
                .withOutbound(new DiscoveredOutboundEndpoints().withAssigned(mapOf("piwyczuhxacpqjl",
                    new DeviceMessagingEndpoint().withEndpointType("fhir").withAddress("tymoxoftp"), "ucvpamrs",
                    new DeviceMessagingEndpoint().withEndpointType("hyus").withAddress("skasdvlmfwdgzxu"), "xmrhu",
                    new DeviceMessagingEndpoint().withEndpointType("uzvx").withAddress("risjnhnytxifqjz"))));
        model = BinaryData.fromObject(model).toObject(DiscoveredMessagingEndpoints.class);
        Assertions.assertEquals("vz", model.inbound().get("ewgioilqukrydxt").endpointType());
        Assertions.assertEquals("ybycnunvj", model.inbound().get("ewgioilqukrydxt").address());
        Assertions.assertEquals("tkfa", model.inbound().get("ewgioilqukrydxt").version());
        Assertions.assertEquals(AuthenticationMethod.USERNAME_PASSWORD,
            model.inbound().get("ewgioilqukrydxt").supportedAuthenticationMethods().get(0));
        Assertions.assertEquals("yzirtxdyuxzejn", model.inbound().get("ewgioilqukrydxt").additionalConfiguration());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-14T22:05:57Z"),
            model.inbound().get("ewgioilqukrydxt").lastUpdatedOn());
        Assertions.assertEquals("fhir", model.outbound().assigned().get("piwyczuhxacpqjl").endpointType());
        Assertions.assertEquals("tymoxoftp", model.outbound().assigned().get("piwyczuhxacpqjl").address());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
