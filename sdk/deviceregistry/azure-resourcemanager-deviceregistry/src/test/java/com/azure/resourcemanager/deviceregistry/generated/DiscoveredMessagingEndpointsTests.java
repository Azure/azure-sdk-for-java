// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.deviceregistry.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.deviceregistry.models.AuthenticationMethod;
import com.azure.resourcemanager.deviceregistry.models.DeviceMessagingEndpoint;
import com.azure.resourcemanager.deviceregistry.models.DiscoveredInboundEndpoints;
import com.azure.resourcemanager.deviceregistry.models.DiscoveredMessagingEndpoints;
import com.azure.resourcemanager.deviceregistry.models.DiscoveredOutboundEndpoints;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DiscoveredMessagingEndpointsTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DiscoveredMessagingEndpoints model = BinaryData.fromString(
            "{\"inbound\":{\"omvzzbtd\":{\"endpointType\":\"tbghhavgrvkf\",\"address\":\"ovjzhpjbibgjmfx\",\"version\":\"vfcluyovwxnbkfe\",\"supportedAuthenticationMethods\":[\"Certificate\",\"UsernamePassword\",\"Anonymous\",\"UsernamePassword\"],\"additionalConfiguration\":\"zdgiruj\",\"lastUpdatedOn\":\"2021-05-23T20:25:15Z\"},\"otmrfhir\":{\"endpointType\":\"qvpn\",\"address\":\"yujviylwdshfssn\",\"version\":\"gy\",\"supportedAuthenticationMethods\":[\"Anonymous\",\"Anonymous\",\"Anonymous\"],\"additionalConfiguration\":\"aojfm\",\"lastUpdatedOn\":\"2021-07-25T05:28:25Z\"}},\"outbound\":{\"assigned\":{\"pskasdvlmfwdg\":{\"endpointType\":\"oxoftpipiwycz\",\"address\":\"hxacpqjlihhyu\"},\"urisjnhnytxifqj\":{\"endpointType\":\"ulucv\",\"address\":\"amrsreuzv\"},\"cesutrgjupauut\":{\"endpointType\":\"xmrhu\",\"address\":\"lw\"},\"g\":{\"endpointType\":\"oqh\",\"address\":\"hej\"}}}}")
            .toObject(DiscoveredMessagingEndpoints.class);
        Assertions.assertEquals("tbghhavgrvkf", model.inbound().get("omvzzbtd").endpointType());
        Assertions.assertEquals("ovjzhpjbibgjmfx", model.inbound().get("omvzzbtd").address());
        Assertions.assertEquals("vfcluyovwxnbkfe", model.inbound().get("omvzzbtd").version());
        Assertions.assertEquals(AuthenticationMethod.CERTIFICATE,
            model.inbound().get("omvzzbtd").supportedAuthenticationMethods().get(0));
        Assertions.assertEquals("zdgiruj", model.inbound().get("omvzzbtd").additionalConfiguration());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-23T20:25:15Z"),
            model.inbound().get("omvzzbtd").lastUpdatedOn());
        Assertions.assertEquals("oxoftpipiwycz", model.outbound().assigned().get("pskasdvlmfwdg").endpointType());
        Assertions.assertEquals("hxacpqjlihhyu", model.outbound().assigned().get("pskasdvlmfwdg").address());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DiscoveredMessagingEndpoints model = new DiscoveredMessagingEndpoints()
            .withInbound(mapOf("omvzzbtd",
                new DiscoveredInboundEndpoints().withEndpointType("tbghhavgrvkf")
                    .withAddress("ovjzhpjbibgjmfx")
                    .withVersion("vfcluyovwxnbkfe")
                    .withSupportedAuthenticationMethods(
                        Arrays.asList(AuthenticationMethod.CERTIFICATE, AuthenticationMethod.USERNAME_PASSWORD,
                            AuthenticationMethod.ANONYMOUS, AuthenticationMethod.USERNAME_PASSWORD))
                    .withAdditionalConfiguration("zdgiruj")
                    .withLastUpdatedOn(OffsetDateTime.parse("2021-05-23T20:25:15Z")),
                "otmrfhir",
                new DiscoveredInboundEndpoints().withEndpointType("qvpn")
                    .withAddress("yujviylwdshfssn")
                    .withVersion("gy")
                    .withSupportedAuthenticationMethods(Arrays.asList(AuthenticationMethod.ANONYMOUS,
                        AuthenticationMethod.ANONYMOUS, AuthenticationMethod.ANONYMOUS))
                    .withAdditionalConfiguration("aojfm")
                    .withLastUpdatedOn(OffsetDateTime.parse("2021-07-25T05:28:25Z"))))
            .withOutbound(new DiscoveredOutboundEndpoints().withAssigned(mapOf("pskasdvlmfwdg",
                new DeviceMessagingEndpoint().withEndpointType("oxoftpipiwycz").withAddress("hxacpqjlihhyu"),
                "urisjnhnytxifqj", new DeviceMessagingEndpoint().withEndpointType("ulucv").withAddress("amrsreuzv"),
                "cesutrgjupauut", new DeviceMessagingEndpoint().withEndpointType("xmrhu").withAddress("lw"), "g",
                new DeviceMessagingEndpoint().withEndpointType("oqh").withAddress("hej"))));
        model = BinaryData.fromObject(model).toObject(DiscoveredMessagingEndpoints.class);
        Assertions.assertEquals("tbghhavgrvkf", model.inbound().get("omvzzbtd").endpointType());
        Assertions.assertEquals("ovjzhpjbibgjmfx", model.inbound().get("omvzzbtd").address());
        Assertions.assertEquals("vfcluyovwxnbkfe", model.inbound().get("omvzzbtd").version());
        Assertions.assertEquals(AuthenticationMethod.CERTIFICATE,
            model.inbound().get("omvzzbtd").supportedAuthenticationMethods().get(0));
        Assertions.assertEquals("zdgiruj", model.inbound().get("omvzzbtd").additionalConfiguration());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-23T20:25:15Z"),
            model.inbound().get("omvzzbtd").lastUpdatedOn());
        Assertions.assertEquals("oxoftpipiwycz", model.outbound().assigned().get("pskasdvlmfwdg").endpointType());
        Assertions.assertEquals("hxacpqjlihhyu", model.outbound().assigned().get("pskasdvlmfwdg").address());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
