// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.deviceregistry.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.deviceregistry.DeviceRegistryManager;
import com.azure.resourcemanager.deviceregistry.models.AuthenticationMethod;
import com.azure.resourcemanager.deviceregistry.models.NamespaceDiscoveredDevice;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class NamespaceDiscoveredDevicesListByResourceGroupMockTests {
    @Test
    public void testListByResourceGroup() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"externalDeviceId\":\"opionszon\",\"endpoints\":{\"inbound\":{\"ttgepuslvyjtcv\":{\"endpointType\":\"ajinnixjawrtmjfj\",\"address\":\"yccxlzhcox\",\"version\":\"nekhenlusfnrdtj\",\"supportedAuthenticationMethods\":[\"Certificate\",\"Anonymous\"],\"additionalConfiguration\":\"qtj\",\"lastUpdatedOn\":\"2021-01-09T16:46:04Z\"},\"jbaqehgpdoh\":{\"endpointType\":\"wkasiziesf\",\"address\":\"ughtuqfecjxeygtu\",\"version\":\"uicbuewmrsw\",\"supportedAuthenticationMethods\":[\"Certificate\"],\"additionalConfiguration\":\"zrhwp\",\"lastUpdatedOn\":\"2021-07-24T18:32:54Z\"},\"naquflq\":{\"endpointType\":\"jqatucoigebxn\",\"address\":\"nwfepbnwg\",\"version\":\"xjg\",\"supportedAuthenticationMethods\":[\"UsernamePassword\"],\"additionalConfiguration\":\"gdlfgt\",\"lastUpdatedOn\":\"2021-01-06T12:40:34Z\"},\"m\":{\"endpointType\":\"ctqhamzjrwdk\",\"address\":\"zeqyjleziun\",\"version\":\"dfzantkwcegy\",\"supportedAuthenticationMethods\":[\"Certificate\",\"Certificate\"],\"additionalConfiguration\":\"eqacjjvpilguooq\",\"lastUpdatedOn\":\"2021-03-30T15:50Z\"}},\"outbound\":{\"assigned\":{\"delqacslmoto\":{\"address\":\"gueiookjbsahrtdt\"}}}},\"manufacturer\":\"nfxofvcj\",\"model\":\"dirazf\",\"operatingSystem\":\"ejwabmdujtmvco\",\"operatingSystemVersion\":\"xcmjurbu\",\"attributes\":{},\"discoveryId\":\"kyqltqsrogt\",\"version\":8969096089825659884,\"provisioningState\":\"Succeeded\"},\"extendedLocation\":{\"type\":\"djk\",\"name\":\"sysidfvclglxnf\"},\"location\":\"jtkbusqogsfika\",\"tags\":{\"ttvwkpqh\":\"nsharujtjiqxfzyj\",\"bqeqqekewvnqvcd\":\"penuy\",\"punj\":\"guaucmfdjwnla\",\"sserxhtvsoxhlwn\":\"ikczvvitacgxmf\"},\"id\":\"sjgqrsxyp\",\"name\":\"uuuybnchrsziz\",\"type\":\"yuel\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        DeviceRegistryManager manager = DeviceRegistryManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PagedIterable<NamespaceDiscoveredDevice> response = manager.namespaceDiscoveredDevices()
            .listByResourceGroup("vzuyturmlmu", "wolba", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("jtkbusqogsfika", response.iterator().next().location());
        Assertions.assertEquals("nsharujtjiqxfzyj", response.iterator().next().tags().get("ttvwkpqh"));
        Assertions.assertEquals("opionszon", response.iterator().next().properties().externalDeviceId());
        Assertions.assertEquals("ajinnixjawrtmjfj",
            response.iterator().next().properties().endpoints().inbound().get("ttgepuslvyjtcv").endpointType());
        Assertions.assertEquals("yccxlzhcox",
            response.iterator().next().properties().endpoints().inbound().get("ttgepuslvyjtcv").address());
        Assertions.assertEquals("nekhenlusfnrdtj",
            response.iterator().next().properties().endpoints().inbound().get("ttgepuslvyjtcv").version());
        Assertions.assertEquals(AuthenticationMethod.CERTIFICATE,
            response.iterator()
                .next()
                .properties()
                .endpoints()
                .inbound()
                .get("ttgepuslvyjtcv")
                .supportedAuthenticationMethods()
                .get(0));
        Assertions.assertEquals("qtj",
            response.iterator()
                .next()
                .properties()
                .endpoints()
                .inbound()
                .get("ttgepuslvyjtcv")
                .additionalConfiguration());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-09T16:46:04Z"),
            response.iterator().next().properties().endpoints().inbound().get("ttgepuslvyjtcv").lastUpdatedOn());
        Assertions.assertEquals("gueiookjbsahrtdt",
            response.iterator().next().properties().endpoints().outbound().assigned().get("delqacslmoto").address());
        Assertions.assertEquals("nfxofvcj", response.iterator().next().properties().manufacturer());
        Assertions.assertEquals("dirazf", response.iterator().next().properties().model());
        Assertions.assertEquals("ejwabmdujtmvco", response.iterator().next().properties().operatingSystem());
        Assertions.assertEquals("xcmjurbu", response.iterator().next().properties().operatingSystemVersion());
        Assertions.assertEquals("kyqltqsrogt", response.iterator().next().properties().discoveryId());
        Assertions.assertEquals(8969096089825659884L, response.iterator().next().properties().version());
        Assertions.assertEquals("djk", response.iterator().next().extendedLocation().type());
        Assertions.assertEquals("sysidfvclglxnf", response.iterator().next().extendedLocation().name());
    }
}
