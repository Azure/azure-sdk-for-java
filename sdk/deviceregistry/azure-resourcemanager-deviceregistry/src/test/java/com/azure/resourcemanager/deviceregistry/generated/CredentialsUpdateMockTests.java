// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.deviceregistry.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.deviceregistry.DeviceRegistryManager;
import com.azure.resourcemanager.deviceregistry.models.Credential;
import com.azure.resourcemanager.deviceregistry.models.CredentialUpdate;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class CredentialsUpdateMockTests {
    @Test
    public void testUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Succeeded\"},\"location\":\"fcbahhp\",\"tags\":{\"kkholvdndvia\":\"foiyjwpfilk\",\"yefchnm\":\"ogphuartvtiu\"},\"id\":\"ahmnxhkxjqirw\",\"name\":\"weooxffifhxwrs\",\"type\":\"ewmozqvbu\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        DeviceRegistryManager manager = DeviceRegistryManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        Credential response = manager.credentials()
            .update("xgjiuqh", "btozipqwje",
                new CredentialUpdate().withTags(mapOf("lkm", "rrxxgewpktvq", "gcl", "pzoyhlfbcg", "qinjipnwjf", "xoe")),
                com.azure.core.util.Context.NONE);

        Assertions.assertEquals("fcbahhp", response.location());
        Assertions.assertEquals("foiyjwpfilk", response.tags().get("kkholvdndvia"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
