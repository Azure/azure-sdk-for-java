// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.deviceregistry.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.deviceregistry.models.Event;
import com.azure.resourcemanager.deviceregistry.models.EventObservabilityMode;
import com.azure.resourcemanager.deviceregistry.models.Topic;
import com.azure.resourcemanager.deviceregistry.models.TopicRetainType;
import org.junit.jupiter.api.Assertions;

public final class EventTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        Event model = BinaryData.fromString(
            "{\"observabilityMode\":\"None\",\"name\":\"xsabkyqdu\",\"eventNotifier\":\"jitcjczdzevn\",\"eventConfiguration\":\"krwpdap\",\"topic\":{\"path\":\"sbdkvwr\",\"retain\":\"Keep\"}}")
            .toObject(Event.class);
        Assertions.assertEquals("xsabkyqdu", model.name());
        Assertions.assertEquals("jitcjczdzevn", model.eventNotifier());
        Assertions.assertEquals("krwpdap", model.eventConfiguration());
        Assertions.assertEquals("sbdkvwr", model.topic().path());
        Assertions.assertEquals(TopicRetainType.KEEP, model.topic().retain());
        Assertions.assertEquals(EventObservabilityMode.NONE, model.observabilityMode());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        Event model = new Event().withName("xsabkyqdu")
            .withEventNotifier("jitcjczdzevn")
            .withEventConfiguration("krwpdap")
            .withTopic(new Topic().withPath("sbdkvwr").withRetain(TopicRetainType.KEEP))
            .withObservabilityMode(EventObservabilityMode.NONE);
        model = BinaryData.fromObject(model).toObject(Event.class);
        Assertions.assertEquals("xsabkyqdu", model.name());
        Assertions.assertEquals("jitcjczdzevn", model.eventNotifier());
        Assertions.assertEquals("krwpdap", model.eventConfiguration());
        Assertions.assertEquals("sbdkvwr", model.topic().path());
        Assertions.assertEquals(TopicRetainType.KEEP, model.topic().retain());
        Assertions.assertEquals(EventObservabilityMode.NONE, model.observabilityMode());
    }
}
