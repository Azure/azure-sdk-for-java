// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.deviceregistry.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.BinaryData;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * The updatable properties of the NamespaceDevice.
 */
@Fluent
public final class NamespaceDeviceUpdateProperties implements JsonSerializable<NamespaceDeviceUpdateProperties> {
    /*
     * Device operating system version.
     */
    private String operatingSystemVersion;

    /*
     * Property bag containing the device's unassigned and assigned endpoints.
     */
    private MessagingEndpoints endpoints;

    /*
     * A set of key-value pairs that contain custom attributes set by the customer.
     */
    private Map<String, BinaryData> attributes;

    /*
     * Indicates if the resource and identity are enabled or not. A disabled device cannot authenticate with Microsoft
     * Entra ID.
     */
    private Boolean enabled;

    /**
     * Creates an instance of NamespaceDeviceUpdateProperties class.
     */
    public NamespaceDeviceUpdateProperties() {
    }

    /**
     * Get the operatingSystemVersion property: Device operating system version.
     * 
     * @return the operatingSystemVersion value.
     */
    public String operatingSystemVersion() {
        return this.operatingSystemVersion;
    }

    /**
     * Set the operatingSystemVersion property: Device operating system version.
     * 
     * @param operatingSystemVersion the operatingSystemVersion value to set.
     * @return the NamespaceDeviceUpdateProperties object itself.
     */
    public NamespaceDeviceUpdateProperties withOperatingSystemVersion(String operatingSystemVersion) {
        this.operatingSystemVersion = operatingSystemVersion;
        return this;
    }

    /**
     * Get the endpoints property: Property bag containing the device's unassigned and assigned endpoints.
     * 
     * @return the endpoints value.
     */
    public MessagingEndpoints endpoints() {
        return this.endpoints;
    }

    /**
     * Set the endpoints property: Property bag containing the device's unassigned and assigned endpoints.
     * 
     * @param endpoints the endpoints value to set.
     * @return the NamespaceDeviceUpdateProperties object itself.
     */
    public NamespaceDeviceUpdateProperties withEndpoints(MessagingEndpoints endpoints) {
        this.endpoints = endpoints;
        return this;
    }

    /**
     * Get the attributes property: A set of key-value pairs that contain custom attributes set by the customer.
     * 
     * @return the attributes value.
     */
    public Map<String, BinaryData> attributes() {
        return this.attributes;
    }

    /**
     * Set the attributes property: A set of key-value pairs that contain custom attributes set by the customer.
     * 
     * @param attributes the attributes value to set.
     * @return the NamespaceDeviceUpdateProperties object itself.
     */
    public NamespaceDeviceUpdateProperties withAttributes(Map<String, BinaryData> attributes) {
        this.attributes = attributes;
        return this;
    }

    /**
     * Get the enabled property: Indicates if the resource and identity are enabled or not. A disabled device cannot
     * authenticate with Microsoft Entra ID.
     * 
     * @return the enabled value.
     */
    public Boolean enabled() {
        return this.enabled;
    }

    /**
     * Set the enabled property: Indicates if the resource and identity are enabled or not. A disabled device cannot
     * authenticate with Microsoft Entra ID.
     * 
     * @param enabled the enabled value to set.
     * @return the NamespaceDeviceUpdateProperties object itself.
     */
    public NamespaceDeviceUpdateProperties withEnabled(Boolean enabled) {
        this.enabled = enabled;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("operatingSystemVersion", this.operatingSystemVersion);
        jsonWriter.writeJsonField("endpoints", this.endpoints);
        jsonWriter.writeMapField("attributes", this.attributes,
            (writer, element) -> writer.writeUntyped(element == null ? null : element.toObject(Object.class)));
        jsonWriter.writeBooleanField("enabled", this.enabled);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NamespaceDeviceUpdateProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NamespaceDeviceUpdateProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the NamespaceDeviceUpdateProperties.
     */
    public static NamespaceDeviceUpdateProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NamespaceDeviceUpdateProperties deserializedNamespaceDeviceUpdateProperties
                = new NamespaceDeviceUpdateProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("operatingSystemVersion".equals(fieldName)) {
                    deserializedNamespaceDeviceUpdateProperties.operatingSystemVersion = reader.getString();
                } else if ("endpoints".equals(fieldName)) {
                    deserializedNamespaceDeviceUpdateProperties.endpoints = MessagingEndpoints.fromJson(reader);
                } else if ("attributes".equals(fieldName)) {
                    Map<String, BinaryData> attributes = reader.readMap(reader1 -> reader1
                        .getNullable(nonNullReader -> BinaryData.fromObject(nonNullReader.readUntyped())));
                    deserializedNamespaceDeviceUpdateProperties.attributes = attributes;
                } else if ("enabled".equals(fieldName)) {
                    deserializedNamespaceDeviceUpdateProperties.enabled = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNamespaceDeviceUpdateProperties;
        });
    }
}
