// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.deviceregistry.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * Connection endpoint URL a device can use to connect to a service.
 */
@Fluent
public final class DiscoveredMessagingEndpoints implements JsonSerializable<DiscoveredMessagingEndpoints> {
    /*
     * Set of endpoints to connect to the device.
     */
    private Map<String, DiscoveredInboundEndpoints> inbound;

    /*
     * Set of endpoints a device can connect to.
     */
    private DiscoveredOutboundEndpoints outbound;

    /**
     * Creates an instance of DiscoveredMessagingEndpoints class.
     */
    public DiscoveredMessagingEndpoints() {
    }

    /**
     * Get the inbound property: Set of endpoints to connect to the device.
     * 
     * @return the inbound value.
     */
    public Map<String, DiscoveredInboundEndpoints> inbound() {
        return this.inbound;
    }

    /**
     * Set the inbound property: Set of endpoints to connect to the device.
     * 
     * @param inbound the inbound value to set.
     * @return the DiscoveredMessagingEndpoints object itself.
     */
    public DiscoveredMessagingEndpoints withInbound(Map<String, DiscoveredInboundEndpoints> inbound) {
        this.inbound = inbound;
        return this;
    }

    /**
     * Get the outbound property: Set of endpoints a device can connect to.
     * 
     * @return the outbound value.
     */
    public DiscoveredOutboundEndpoints outbound() {
        return this.outbound;
    }

    /**
     * Set the outbound property: Set of endpoints a device can connect to.
     * 
     * @param outbound the outbound value to set.
     * @return the DiscoveredMessagingEndpoints object itself.
     */
    public DiscoveredMessagingEndpoints withOutbound(DiscoveredOutboundEndpoints outbound) {
        this.outbound = outbound;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (inbound() != null) {
            inbound().values().forEach(e -> {
                if (e != null) {
                    e.validate();
                }
            });
        }
        if (outbound() != null) {
            outbound().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeMapField("inbound", this.inbound, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("outbound", this.outbound);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DiscoveredMessagingEndpoints from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DiscoveredMessagingEndpoints if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DiscoveredMessagingEndpoints.
     */
    public static DiscoveredMessagingEndpoints fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DiscoveredMessagingEndpoints deserializedDiscoveredMessagingEndpoints = new DiscoveredMessagingEndpoints();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("inbound".equals(fieldName)) {
                    Map<String, DiscoveredInboundEndpoints> inbound
                        = reader.readMap(reader1 -> DiscoveredInboundEndpoints.fromJson(reader1));
                    deserializedDiscoveredMessagingEndpoints.inbound = inbound;
                } else if ("outbound".equals(fieldName)) {
                    deserializedDiscoveredMessagingEndpoints.outbound = DiscoveredOutboundEndpoints.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDiscoveredMessagingEndpoints;
        });
    }
}
