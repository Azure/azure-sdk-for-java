// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.deviceregistry.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.BinaryData;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;

/**
 * Defines the asset properties.
 */
@Fluent
public final class NamespaceAssetProperties implements JsonSerializable<NamespaceAssetProperties> {
    /*
     * Globally unique, immutable, non-reusable ID.
     */
    private String uuid;

    /*
     * Enabled/disabled status of the asset.
     */
    private Boolean enabled;

    /*
     * Asset ID provided by the customer.
     */
    private String externalAssetId;

    /*
     * Human-readable display name.
     */
    private String displayName;

    /*
     * Human-readable description of the asset.
     */
    private String description;

    /*
     * Reference to the device that provides data for this asset. Must provide device name & endpoint on the device to
     * use.
     */
    private DeviceRef deviceRef;

    /*
     * URIs or type definition IDs.
     */
    private List<String> assetTypeRefs;

    /*
     * An integer that is incremented each time the resource is modified.
     */
    private Long version;

    /*
     * A timestamp (in UTC) that is updated each time the resource is modified.
     */
    private OffsetDateTime lastTransitionTime;

    /*
     * Asset manufacturer.
     */
    private String manufacturer;

    /*
     * Asset manufacturer URI.
     */
    private String manufacturerUri;

    /*
     * Asset model.
     */
    private String model;

    /*
     * Asset product code.
     */
    private String productCode;

    /*
     * Asset hardware revision number.
     */
    private String hardwareRevision;

    /*
     * Asset software revision number.
     */
    private String softwareRevision;

    /*
     * Asset documentation reference.
     */
    private String documentationUri;

    /*
     * Asset serial number.
     */
    private String serialNumber;

    /*
     * A set of key-value pairs that contain custom attributes set by the customer.
     */
    private Map<String, BinaryData> attributes;

    /*
     * Reference to a list of discovered assets. Populated only if the asset has been created from discovery flow.
     * Discovered asset names must be provided.
     */
    private List<String> discoveredAssetRefs;

    /*
     * Stringified JSON that contains connector-specific default configuration for all datasets. Each dataset can have
     * its own configuration that overrides the default settings here.
     */
    private String defaultDatasetsConfiguration;

    /*
     * Stringified JSON that contains connector-specific default configuration for all events. Each event can have its
     * own configuration that overrides the default settings here.
     */
    private String defaultEventsConfiguration;

    /*
     * Stringified JSON that contains connector-specific default configuration for all streams. Each stream can have its
     * own configuration that overrides the default settings here.
     */
    private String defaultStreamsConfiguration;

    /*
     * Stringified JSON that contains connector-specific default configuration for all management groups. Each
     * management group can have its own configuration that overrides the default settings here.
     */
    private String defaultManagementGroupsConfiguration;

    /*
     * Default destinations for a dataset.
     */
    private List<DatasetDestination> defaultDatasetsDestinations;

    /*
     * Default destinations for an event.
     */
    private List<EventDestination> defaultEventsDestinations;

    /*
     * Default destinations for a stream.
     */
    private List<StreamDestination> defaultStreamsDestinations;

    /*
     * Array of datasets that are part of the asset. Each dataset describes the data points that make up the set.
     */
    private List<NamespaceDataset> datasets;

    /*
     * Array of events that are part of the asset. Each event can have per-event configuration.
     */
    private List<NamespaceEvent> events;

    /*
     * Array of streams that are part of the asset. Each stream can have a per-stream configuration.
     */
    private List<NamespaceStream> streams;

    /*
     * Array of management groups that are part of the asset. Each management group can have a per-group configuration.
     */
    private List<ManagementGroup> managementGroups;

    /*
     * Read only object to reflect changes that have occurred on the Edge. Similar to Kubernetes status property for
     * custom resources.
     */
    private NamespaceAssetStatus status;

    /*
     * Provisioning state of the resource.
     */
    private ProvisioningState provisioningState;

    /**
     * Creates an instance of NamespaceAssetProperties class.
     */
    public NamespaceAssetProperties() {
    }

    /**
     * Get the uuid property: Globally unique, immutable, non-reusable ID.
     * 
     * @return the uuid value.
     */
    public String uuid() {
        return this.uuid;
    }

    /**
     * Get the enabled property: Enabled/disabled status of the asset.
     * 
     * @return the enabled value.
     */
    public Boolean enabled() {
        return this.enabled;
    }

    /**
     * Set the enabled property: Enabled/disabled status of the asset.
     * 
     * @param enabled the enabled value to set.
     * @return the NamespaceAssetProperties object itself.
     */
    public NamespaceAssetProperties withEnabled(Boolean enabled) {
        this.enabled = enabled;
        return this;
    }

    /**
     * Get the externalAssetId property: Asset ID provided by the customer.
     * 
     * @return the externalAssetId value.
     */
    public String externalAssetId() {
        return this.externalAssetId;
    }

    /**
     * Set the externalAssetId property: Asset ID provided by the customer.
     * 
     * @param externalAssetId the externalAssetId value to set.
     * @return the NamespaceAssetProperties object itself.
     */
    public NamespaceAssetProperties withExternalAssetId(String externalAssetId) {
        this.externalAssetId = externalAssetId;
        return this;
    }

    /**
     * Get the displayName property: Human-readable display name.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: Human-readable display name.
     * 
     * @param displayName the displayName value to set.
     * @return the NamespaceAssetProperties object itself.
     */
    public NamespaceAssetProperties withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the description property: Human-readable description of the asset.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: Human-readable description of the asset.
     * 
     * @param description the description value to set.
     * @return the NamespaceAssetProperties object itself.
     */
    public NamespaceAssetProperties withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the deviceRef property: Reference to the device that provides data for this asset. Must provide device name
     * &amp; endpoint on the device to use.
     * 
     * @return the deviceRef value.
     */
    public DeviceRef deviceRef() {
        return this.deviceRef;
    }

    /**
     * Set the deviceRef property: Reference to the device that provides data for this asset. Must provide device name
     * &amp; endpoint on the device to use.
     * 
     * @param deviceRef the deviceRef value to set.
     * @return the NamespaceAssetProperties object itself.
     */
    public NamespaceAssetProperties withDeviceRef(DeviceRef deviceRef) {
        this.deviceRef = deviceRef;
        return this;
    }

    /**
     * Get the assetTypeRefs property: URIs or type definition IDs.
     * 
     * @return the assetTypeRefs value.
     */
    public List<String> assetTypeRefs() {
        return this.assetTypeRefs;
    }

    /**
     * Set the assetTypeRefs property: URIs or type definition IDs.
     * 
     * @param assetTypeRefs the assetTypeRefs value to set.
     * @return the NamespaceAssetProperties object itself.
     */
    public NamespaceAssetProperties withAssetTypeRefs(List<String> assetTypeRefs) {
        this.assetTypeRefs = assetTypeRefs;
        return this;
    }

    /**
     * Get the version property: An integer that is incremented each time the resource is modified.
     * 
     * @return the version value.
     */
    public Long version() {
        return this.version;
    }

    /**
     * Get the lastTransitionTime property: A timestamp (in UTC) that is updated each time the resource is modified.
     * 
     * @return the lastTransitionTime value.
     */
    public OffsetDateTime lastTransitionTime() {
        return this.lastTransitionTime;
    }

    /**
     * Get the manufacturer property: Asset manufacturer.
     * 
     * @return the manufacturer value.
     */
    public String manufacturer() {
        return this.manufacturer;
    }

    /**
     * Set the manufacturer property: Asset manufacturer.
     * 
     * @param manufacturer the manufacturer value to set.
     * @return the NamespaceAssetProperties object itself.
     */
    public NamespaceAssetProperties withManufacturer(String manufacturer) {
        this.manufacturer = manufacturer;
        return this;
    }

    /**
     * Get the manufacturerUri property: Asset manufacturer URI.
     * 
     * @return the manufacturerUri value.
     */
    public String manufacturerUri() {
        return this.manufacturerUri;
    }

    /**
     * Set the manufacturerUri property: Asset manufacturer URI.
     * 
     * @param manufacturerUri the manufacturerUri value to set.
     * @return the NamespaceAssetProperties object itself.
     */
    public NamespaceAssetProperties withManufacturerUri(String manufacturerUri) {
        this.manufacturerUri = manufacturerUri;
        return this;
    }

    /**
     * Get the model property: Asset model.
     * 
     * @return the model value.
     */
    public String model() {
        return this.model;
    }

    /**
     * Set the model property: Asset model.
     * 
     * @param model the model value to set.
     * @return the NamespaceAssetProperties object itself.
     */
    public NamespaceAssetProperties withModel(String model) {
        this.model = model;
        return this;
    }

    /**
     * Get the productCode property: Asset product code.
     * 
     * @return the productCode value.
     */
    public String productCode() {
        return this.productCode;
    }

    /**
     * Set the productCode property: Asset product code.
     * 
     * @param productCode the productCode value to set.
     * @return the NamespaceAssetProperties object itself.
     */
    public NamespaceAssetProperties withProductCode(String productCode) {
        this.productCode = productCode;
        return this;
    }

    /**
     * Get the hardwareRevision property: Asset hardware revision number.
     * 
     * @return the hardwareRevision value.
     */
    public String hardwareRevision() {
        return this.hardwareRevision;
    }

    /**
     * Set the hardwareRevision property: Asset hardware revision number.
     * 
     * @param hardwareRevision the hardwareRevision value to set.
     * @return the NamespaceAssetProperties object itself.
     */
    public NamespaceAssetProperties withHardwareRevision(String hardwareRevision) {
        this.hardwareRevision = hardwareRevision;
        return this;
    }

    /**
     * Get the softwareRevision property: Asset software revision number.
     * 
     * @return the softwareRevision value.
     */
    public String softwareRevision() {
        return this.softwareRevision;
    }

    /**
     * Set the softwareRevision property: Asset software revision number.
     * 
     * @param softwareRevision the softwareRevision value to set.
     * @return the NamespaceAssetProperties object itself.
     */
    public NamespaceAssetProperties withSoftwareRevision(String softwareRevision) {
        this.softwareRevision = softwareRevision;
        return this;
    }

    /**
     * Get the documentationUri property: Asset documentation reference.
     * 
     * @return the documentationUri value.
     */
    public String documentationUri() {
        return this.documentationUri;
    }

    /**
     * Set the documentationUri property: Asset documentation reference.
     * 
     * @param documentationUri the documentationUri value to set.
     * @return the NamespaceAssetProperties object itself.
     */
    public NamespaceAssetProperties withDocumentationUri(String documentationUri) {
        this.documentationUri = documentationUri;
        return this;
    }

    /**
     * Get the serialNumber property: Asset serial number.
     * 
     * @return the serialNumber value.
     */
    public String serialNumber() {
        return this.serialNumber;
    }

    /**
     * Set the serialNumber property: Asset serial number.
     * 
     * @param serialNumber the serialNumber value to set.
     * @return the NamespaceAssetProperties object itself.
     */
    public NamespaceAssetProperties withSerialNumber(String serialNumber) {
        this.serialNumber = serialNumber;
        return this;
    }

    /**
     * Get the attributes property: A set of key-value pairs that contain custom attributes set by the customer.
     * 
     * @return the attributes value.
     */
    public Map<String, BinaryData> attributes() {
        return this.attributes;
    }

    /**
     * Set the attributes property: A set of key-value pairs that contain custom attributes set by the customer.
     * 
     * @param attributes the attributes value to set.
     * @return the NamespaceAssetProperties object itself.
     */
    public NamespaceAssetProperties withAttributes(Map<String, BinaryData> attributes) {
        this.attributes = attributes;
        return this;
    }

    /**
     * Get the discoveredAssetRefs property: Reference to a list of discovered assets. Populated only if the asset has
     * been created from discovery flow. Discovered asset names must be provided.
     * 
     * @return the discoveredAssetRefs value.
     */
    public List<String> discoveredAssetRefs() {
        return this.discoveredAssetRefs;
    }

    /**
     * Set the discoveredAssetRefs property: Reference to a list of discovered assets. Populated only if the asset has
     * been created from discovery flow. Discovered asset names must be provided.
     * 
     * @param discoveredAssetRefs the discoveredAssetRefs value to set.
     * @return the NamespaceAssetProperties object itself.
     */
    public NamespaceAssetProperties withDiscoveredAssetRefs(List<String> discoveredAssetRefs) {
        this.discoveredAssetRefs = discoveredAssetRefs;
        return this;
    }

    /**
     * Get the defaultDatasetsConfiguration property: Stringified JSON that contains connector-specific default
     * configuration for all datasets. Each dataset can have its own configuration that overrides the default settings
     * here.
     * 
     * @return the defaultDatasetsConfiguration value.
     */
    public String defaultDatasetsConfiguration() {
        return this.defaultDatasetsConfiguration;
    }

    /**
     * Set the defaultDatasetsConfiguration property: Stringified JSON that contains connector-specific default
     * configuration for all datasets. Each dataset can have its own configuration that overrides the default settings
     * here.
     * 
     * @param defaultDatasetsConfiguration the defaultDatasetsConfiguration value to set.
     * @return the NamespaceAssetProperties object itself.
     */
    public NamespaceAssetProperties withDefaultDatasetsConfiguration(String defaultDatasetsConfiguration) {
        this.defaultDatasetsConfiguration = defaultDatasetsConfiguration;
        return this;
    }

    /**
     * Get the defaultEventsConfiguration property: Stringified JSON that contains connector-specific default
     * configuration for all events. Each event can have its own configuration that overrides the default settings here.
     * 
     * @return the defaultEventsConfiguration value.
     */
    public String defaultEventsConfiguration() {
        return this.defaultEventsConfiguration;
    }

    /**
     * Set the defaultEventsConfiguration property: Stringified JSON that contains connector-specific default
     * configuration for all events. Each event can have its own configuration that overrides the default settings here.
     * 
     * @param defaultEventsConfiguration the defaultEventsConfiguration value to set.
     * @return the NamespaceAssetProperties object itself.
     */
    public NamespaceAssetProperties withDefaultEventsConfiguration(String defaultEventsConfiguration) {
        this.defaultEventsConfiguration = defaultEventsConfiguration;
        return this;
    }

    /**
     * Get the defaultStreamsConfiguration property: Stringified JSON that contains connector-specific default
     * configuration for all streams. Each stream can have its own configuration that overrides the default settings
     * here.
     * 
     * @return the defaultStreamsConfiguration value.
     */
    public String defaultStreamsConfiguration() {
        return this.defaultStreamsConfiguration;
    }

    /**
     * Set the defaultStreamsConfiguration property: Stringified JSON that contains connector-specific default
     * configuration for all streams. Each stream can have its own configuration that overrides the default settings
     * here.
     * 
     * @param defaultStreamsConfiguration the defaultStreamsConfiguration value to set.
     * @return the NamespaceAssetProperties object itself.
     */
    public NamespaceAssetProperties withDefaultStreamsConfiguration(String defaultStreamsConfiguration) {
        this.defaultStreamsConfiguration = defaultStreamsConfiguration;
        return this;
    }

    /**
     * Get the defaultManagementGroupsConfiguration property: Stringified JSON that contains connector-specific default
     * configuration for all management groups. Each management group can have its own configuration that overrides the
     * default settings here.
     * 
     * @return the defaultManagementGroupsConfiguration value.
     */
    public String defaultManagementGroupsConfiguration() {
        return this.defaultManagementGroupsConfiguration;
    }

    /**
     * Set the defaultManagementGroupsConfiguration property: Stringified JSON that contains connector-specific default
     * configuration for all management groups. Each management group can have its own configuration that overrides the
     * default settings here.
     * 
     * @param defaultManagementGroupsConfiguration the defaultManagementGroupsConfiguration value to set.
     * @return the NamespaceAssetProperties object itself.
     */
    public NamespaceAssetProperties
        withDefaultManagementGroupsConfiguration(String defaultManagementGroupsConfiguration) {
        this.defaultManagementGroupsConfiguration = defaultManagementGroupsConfiguration;
        return this;
    }

    /**
     * Get the defaultDatasetsDestinations property: Default destinations for a dataset.
     * 
     * @return the defaultDatasetsDestinations value.
     */
    public List<DatasetDestination> defaultDatasetsDestinations() {
        return this.defaultDatasetsDestinations;
    }

    /**
     * Set the defaultDatasetsDestinations property: Default destinations for a dataset.
     * 
     * @param defaultDatasetsDestinations the defaultDatasetsDestinations value to set.
     * @return the NamespaceAssetProperties object itself.
     */
    public NamespaceAssetProperties
        withDefaultDatasetsDestinations(List<DatasetDestination> defaultDatasetsDestinations) {
        this.defaultDatasetsDestinations = defaultDatasetsDestinations;
        return this;
    }

    /**
     * Get the defaultEventsDestinations property: Default destinations for an event.
     * 
     * @return the defaultEventsDestinations value.
     */
    public List<EventDestination> defaultEventsDestinations() {
        return this.defaultEventsDestinations;
    }

    /**
     * Set the defaultEventsDestinations property: Default destinations for an event.
     * 
     * @param defaultEventsDestinations the defaultEventsDestinations value to set.
     * @return the NamespaceAssetProperties object itself.
     */
    public NamespaceAssetProperties withDefaultEventsDestinations(List<EventDestination> defaultEventsDestinations) {
        this.defaultEventsDestinations = defaultEventsDestinations;
        return this;
    }

    /**
     * Get the defaultStreamsDestinations property: Default destinations for a stream.
     * 
     * @return the defaultStreamsDestinations value.
     */
    public List<StreamDestination> defaultStreamsDestinations() {
        return this.defaultStreamsDestinations;
    }

    /**
     * Set the defaultStreamsDestinations property: Default destinations for a stream.
     * 
     * @param defaultStreamsDestinations the defaultStreamsDestinations value to set.
     * @return the NamespaceAssetProperties object itself.
     */
    public NamespaceAssetProperties withDefaultStreamsDestinations(List<StreamDestination> defaultStreamsDestinations) {
        this.defaultStreamsDestinations = defaultStreamsDestinations;
        return this;
    }

    /**
     * Get the datasets property: Array of datasets that are part of the asset. Each dataset describes the data points
     * that make up the set.
     * 
     * @return the datasets value.
     */
    public List<NamespaceDataset> datasets() {
        return this.datasets;
    }

    /**
     * Set the datasets property: Array of datasets that are part of the asset. Each dataset describes the data points
     * that make up the set.
     * 
     * @param datasets the datasets value to set.
     * @return the NamespaceAssetProperties object itself.
     */
    public NamespaceAssetProperties withDatasets(List<NamespaceDataset> datasets) {
        this.datasets = datasets;
        return this;
    }

    /**
     * Get the events property: Array of events that are part of the asset. Each event can have per-event configuration.
     * 
     * @return the events value.
     */
    public List<NamespaceEvent> events() {
        return this.events;
    }

    /**
     * Set the events property: Array of events that are part of the asset. Each event can have per-event configuration.
     * 
     * @param events the events value to set.
     * @return the NamespaceAssetProperties object itself.
     */
    public NamespaceAssetProperties withEvents(List<NamespaceEvent> events) {
        this.events = events;
        return this;
    }

    /**
     * Get the streams property: Array of streams that are part of the asset. Each stream can have a per-stream
     * configuration.
     * 
     * @return the streams value.
     */
    public List<NamespaceStream> streams() {
        return this.streams;
    }

    /**
     * Set the streams property: Array of streams that are part of the asset. Each stream can have a per-stream
     * configuration.
     * 
     * @param streams the streams value to set.
     * @return the NamespaceAssetProperties object itself.
     */
    public NamespaceAssetProperties withStreams(List<NamespaceStream> streams) {
        this.streams = streams;
        return this;
    }

    /**
     * Get the managementGroups property: Array of management groups that are part of the asset. Each management group
     * can have a per-group configuration.
     * 
     * @return the managementGroups value.
     */
    public List<ManagementGroup> managementGroups() {
        return this.managementGroups;
    }

    /**
     * Set the managementGroups property: Array of management groups that are part of the asset. Each management group
     * can have a per-group configuration.
     * 
     * @param managementGroups the managementGroups value to set.
     * @return the NamespaceAssetProperties object itself.
     */
    public NamespaceAssetProperties withManagementGroups(List<ManagementGroup> managementGroups) {
        this.managementGroups = managementGroups;
        return this;
    }

    /**
     * Get the status property: Read only object to reflect changes that have occurred on the Edge. Similar to
     * Kubernetes status property for custom resources.
     * 
     * @return the status value.
     */
    public NamespaceAssetStatus status() {
        return this.status;
    }

    /**
     * Get the provisioningState property: Provisioning state of the resource.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (deviceRef() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property deviceRef in model NamespaceAssetProperties"));
        } else {
            deviceRef().validate();
        }
        if (defaultDatasetsDestinations() != null) {
            defaultDatasetsDestinations().forEach(e -> e.validate());
        }
        if (defaultEventsDestinations() != null) {
            defaultEventsDestinations().forEach(e -> e.validate());
        }
        if (defaultStreamsDestinations() != null) {
            defaultStreamsDestinations().forEach(e -> e.validate());
        }
        if (datasets() != null) {
            datasets().forEach(e -> e.validate());
        }
        if (events() != null) {
            events().forEach(e -> e.validate());
        }
        if (streams() != null) {
            streams().forEach(e -> e.validate());
        }
        if (managementGroups() != null) {
            managementGroups().forEach(e -> e.validate());
        }
        if (status() != null) {
            status().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(NamespaceAssetProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("deviceRef", this.deviceRef);
        jsonWriter.writeBooleanField("enabled", this.enabled);
        jsonWriter.writeStringField("externalAssetId", this.externalAssetId);
        jsonWriter.writeStringField("displayName", this.displayName);
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeArrayField("assetTypeRefs", this.assetTypeRefs,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("manufacturer", this.manufacturer);
        jsonWriter.writeStringField("manufacturerUri", this.manufacturerUri);
        jsonWriter.writeStringField("model", this.model);
        jsonWriter.writeStringField("productCode", this.productCode);
        jsonWriter.writeStringField("hardwareRevision", this.hardwareRevision);
        jsonWriter.writeStringField("softwareRevision", this.softwareRevision);
        jsonWriter.writeStringField("documentationUri", this.documentationUri);
        jsonWriter.writeStringField("serialNumber", this.serialNumber);
        jsonWriter.writeMapField("attributes", this.attributes,
            (writer, element) -> writer.writeUntyped(element == null ? null : element.toObject(Object.class)));
        jsonWriter.writeArrayField("discoveredAssetRefs", this.discoveredAssetRefs,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("defaultDatasetsConfiguration", this.defaultDatasetsConfiguration);
        jsonWriter.writeStringField("defaultEventsConfiguration", this.defaultEventsConfiguration);
        jsonWriter.writeStringField("defaultStreamsConfiguration", this.defaultStreamsConfiguration);
        jsonWriter.writeStringField("defaultManagementGroupsConfiguration", this.defaultManagementGroupsConfiguration);
        jsonWriter.writeArrayField("defaultDatasetsDestinations", this.defaultDatasetsDestinations,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("defaultEventsDestinations", this.defaultEventsDestinations,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("defaultStreamsDestinations", this.defaultStreamsDestinations,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("datasets", this.datasets, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("events", this.events, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("streams", this.streams, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("managementGroups", this.managementGroups,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NamespaceAssetProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NamespaceAssetProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the NamespaceAssetProperties.
     */
    public static NamespaceAssetProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NamespaceAssetProperties deserializedNamespaceAssetProperties = new NamespaceAssetProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("deviceRef".equals(fieldName)) {
                    deserializedNamespaceAssetProperties.deviceRef = DeviceRef.fromJson(reader);
                } else if ("uuid".equals(fieldName)) {
                    deserializedNamespaceAssetProperties.uuid = reader.getString();
                } else if ("enabled".equals(fieldName)) {
                    deserializedNamespaceAssetProperties.enabled = reader.getNullable(JsonReader::getBoolean);
                } else if ("externalAssetId".equals(fieldName)) {
                    deserializedNamespaceAssetProperties.externalAssetId = reader.getString();
                } else if ("displayName".equals(fieldName)) {
                    deserializedNamespaceAssetProperties.displayName = reader.getString();
                } else if ("description".equals(fieldName)) {
                    deserializedNamespaceAssetProperties.description = reader.getString();
                } else if ("assetTypeRefs".equals(fieldName)) {
                    List<String> assetTypeRefs = reader.readArray(reader1 -> reader1.getString());
                    deserializedNamespaceAssetProperties.assetTypeRefs = assetTypeRefs;
                } else if ("version".equals(fieldName)) {
                    deserializedNamespaceAssetProperties.version = reader.getNullable(JsonReader::getLong);
                } else if ("lastTransitionTime".equals(fieldName)) {
                    deserializedNamespaceAssetProperties.lastTransitionTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("manufacturer".equals(fieldName)) {
                    deserializedNamespaceAssetProperties.manufacturer = reader.getString();
                } else if ("manufacturerUri".equals(fieldName)) {
                    deserializedNamespaceAssetProperties.manufacturerUri = reader.getString();
                } else if ("model".equals(fieldName)) {
                    deserializedNamespaceAssetProperties.model = reader.getString();
                } else if ("productCode".equals(fieldName)) {
                    deserializedNamespaceAssetProperties.productCode = reader.getString();
                } else if ("hardwareRevision".equals(fieldName)) {
                    deserializedNamespaceAssetProperties.hardwareRevision = reader.getString();
                } else if ("softwareRevision".equals(fieldName)) {
                    deserializedNamespaceAssetProperties.softwareRevision = reader.getString();
                } else if ("documentationUri".equals(fieldName)) {
                    deserializedNamespaceAssetProperties.documentationUri = reader.getString();
                } else if ("serialNumber".equals(fieldName)) {
                    deserializedNamespaceAssetProperties.serialNumber = reader.getString();
                } else if ("attributes".equals(fieldName)) {
                    Map<String, BinaryData> attributes = reader.readMap(reader1 -> reader1
                        .getNullable(nonNullReader -> BinaryData.fromObject(nonNullReader.readUntyped())));
                    deserializedNamespaceAssetProperties.attributes = attributes;
                } else if ("discoveredAssetRefs".equals(fieldName)) {
                    List<String> discoveredAssetRefs = reader.readArray(reader1 -> reader1.getString());
                    deserializedNamespaceAssetProperties.discoveredAssetRefs = discoveredAssetRefs;
                } else if ("defaultDatasetsConfiguration".equals(fieldName)) {
                    deserializedNamespaceAssetProperties.defaultDatasetsConfiguration = reader.getString();
                } else if ("defaultEventsConfiguration".equals(fieldName)) {
                    deserializedNamespaceAssetProperties.defaultEventsConfiguration = reader.getString();
                } else if ("defaultStreamsConfiguration".equals(fieldName)) {
                    deserializedNamespaceAssetProperties.defaultStreamsConfiguration = reader.getString();
                } else if ("defaultManagementGroupsConfiguration".equals(fieldName)) {
                    deserializedNamespaceAssetProperties.defaultManagementGroupsConfiguration = reader.getString();
                } else if ("defaultDatasetsDestinations".equals(fieldName)) {
                    List<DatasetDestination> defaultDatasetsDestinations
                        = reader.readArray(reader1 -> DatasetDestination.fromJson(reader1));
                    deserializedNamespaceAssetProperties.defaultDatasetsDestinations = defaultDatasetsDestinations;
                } else if ("defaultEventsDestinations".equals(fieldName)) {
                    List<EventDestination> defaultEventsDestinations
                        = reader.readArray(reader1 -> EventDestination.fromJson(reader1));
                    deserializedNamespaceAssetProperties.defaultEventsDestinations = defaultEventsDestinations;
                } else if ("defaultStreamsDestinations".equals(fieldName)) {
                    List<StreamDestination> defaultStreamsDestinations
                        = reader.readArray(reader1 -> StreamDestination.fromJson(reader1));
                    deserializedNamespaceAssetProperties.defaultStreamsDestinations = defaultStreamsDestinations;
                } else if ("datasets".equals(fieldName)) {
                    List<NamespaceDataset> datasets = reader.readArray(reader1 -> NamespaceDataset.fromJson(reader1));
                    deserializedNamespaceAssetProperties.datasets = datasets;
                } else if ("events".equals(fieldName)) {
                    List<NamespaceEvent> events = reader.readArray(reader1 -> NamespaceEvent.fromJson(reader1));
                    deserializedNamespaceAssetProperties.events = events;
                } else if ("streams".equals(fieldName)) {
                    List<NamespaceStream> streams = reader.readArray(reader1 -> NamespaceStream.fromJson(reader1));
                    deserializedNamespaceAssetProperties.streams = streams;
                } else if ("managementGroups".equals(fieldName)) {
                    List<ManagementGroup> managementGroups
                        = reader.readArray(reader1 -> ManagementGroup.fromJson(reader1));
                    deserializedNamespaceAssetProperties.managementGroups = managementGroups;
                } else if ("status".equals(fieldName)) {
                    deserializedNamespaceAssetProperties.status = NamespaceAssetStatus.fromJson(reader);
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedNamespaceAssetProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNamespaceAssetProperties;
        });
    }
}
