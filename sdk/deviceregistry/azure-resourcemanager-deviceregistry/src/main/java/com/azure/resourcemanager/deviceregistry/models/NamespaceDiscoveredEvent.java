// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.deviceregistry.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

/**
 * Defines the event properties.
 */
@Fluent
public final class NamespaceDiscoveredEvent implements JsonSerializable<NamespaceDiscoveredEvent> {
    /*
     * The name of the event.
     */
    private String name;

    /*
     * The address of the notifier of the event in the asset (e.g. URL) so that a client can access the event on the
     * asset.
     */
    private String eventNotifier;

    /*
     * Stringified JSON that contains connector-specific configuration for the event. For OPC UA, this could include
     * configuration like, publishingInterval, samplingInterval, and queueSize.
     */
    private String eventConfiguration;

    /*
     * Destinations for an event.
     */
    private List<EventDestination> destinations;

    /*
     * URI or type definition ID.
     */
    private String typeRef;

    /*
     * Array of data points that are part of the event. Each data point can have a per-data point configuration.
     */
    private List<NamespaceDiscoveredEventDataPoint> dataPoints;

    /*
     * UTC timestamp indicating when the event was added or modified.
     */
    private OffsetDateTime lastUpdatedOn;

    /**
     * Creates an instance of NamespaceDiscoveredEvent class.
     */
    public NamespaceDiscoveredEvent() {
    }

    /**
     * Get the name property: The name of the event.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: The name of the event.
     * 
     * @param name the name value to set.
     * @return the NamespaceDiscoveredEvent object itself.
     */
    public NamespaceDiscoveredEvent withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the eventNotifier property: The address of the notifier of the event in the asset (e.g. URL) so that a client
     * can access the event on the asset.
     * 
     * @return the eventNotifier value.
     */
    public String eventNotifier() {
        return this.eventNotifier;
    }

    /**
     * Set the eventNotifier property: The address of the notifier of the event in the asset (e.g. URL) so that a client
     * can access the event on the asset.
     * 
     * @param eventNotifier the eventNotifier value to set.
     * @return the NamespaceDiscoveredEvent object itself.
     */
    public NamespaceDiscoveredEvent withEventNotifier(String eventNotifier) {
        this.eventNotifier = eventNotifier;
        return this;
    }

    /**
     * Get the eventConfiguration property: Stringified JSON that contains connector-specific configuration for the
     * event. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize.
     * 
     * @return the eventConfiguration value.
     */
    public String eventConfiguration() {
        return this.eventConfiguration;
    }

    /**
     * Set the eventConfiguration property: Stringified JSON that contains connector-specific configuration for the
     * event. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize.
     * 
     * @param eventConfiguration the eventConfiguration value to set.
     * @return the NamespaceDiscoveredEvent object itself.
     */
    public NamespaceDiscoveredEvent withEventConfiguration(String eventConfiguration) {
        this.eventConfiguration = eventConfiguration;
        return this;
    }

    /**
     * Get the destinations property: Destinations for an event.
     * 
     * @return the destinations value.
     */
    public List<EventDestination> destinations() {
        return this.destinations;
    }

    /**
     * Set the destinations property: Destinations for an event.
     * 
     * @param destinations the destinations value to set.
     * @return the NamespaceDiscoveredEvent object itself.
     */
    public NamespaceDiscoveredEvent withDestinations(List<EventDestination> destinations) {
        this.destinations = destinations;
        return this;
    }

    /**
     * Get the typeRef property: URI or type definition ID.
     * 
     * @return the typeRef value.
     */
    public String typeRef() {
        return this.typeRef;
    }

    /**
     * Set the typeRef property: URI or type definition ID.
     * 
     * @param typeRef the typeRef value to set.
     * @return the NamespaceDiscoveredEvent object itself.
     */
    public NamespaceDiscoveredEvent withTypeRef(String typeRef) {
        this.typeRef = typeRef;
        return this;
    }

    /**
     * Get the dataPoints property: Array of data points that are part of the event. Each data point can have a per-data
     * point configuration.
     * 
     * @return the dataPoints value.
     */
    public List<NamespaceDiscoveredEventDataPoint> dataPoints() {
        return this.dataPoints;
    }

    /**
     * Set the dataPoints property: Array of data points that are part of the event. Each data point can have a per-data
     * point configuration.
     * 
     * @param dataPoints the dataPoints value to set.
     * @return the NamespaceDiscoveredEvent object itself.
     */
    public NamespaceDiscoveredEvent withDataPoints(List<NamespaceDiscoveredEventDataPoint> dataPoints) {
        this.dataPoints = dataPoints;
        return this;
    }

    /**
     * Get the lastUpdatedOn property: UTC timestamp indicating when the event was added or modified.
     * 
     * @return the lastUpdatedOn value.
     */
    public OffsetDateTime lastUpdatedOn() {
        return this.lastUpdatedOn;
    }

    /**
     * Set the lastUpdatedOn property: UTC timestamp indicating when the event was added or modified.
     * 
     * @param lastUpdatedOn the lastUpdatedOn value to set.
     * @return the NamespaceDiscoveredEvent object itself.
     */
    public NamespaceDiscoveredEvent withLastUpdatedOn(OffsetDateTime lastUpdatedOn) {
        this.lastUpdatedOn = lastUpdatedOn;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (name() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property name in model NamespaceDiscoveredEvent"));
        }
        if (eventNotifier() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property eventNotifier in model NamespaceDiscoveredEvent"));
        }
        if (destinations() != null) {
            destinations().forEach(e -> e.validate());
        }
        if (dataPoints() != null) {
            dataPoints().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(NamespaceDiscoveredEvent.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("eventNotifier", this.eventNotifier);
        jsonWriter.writeStringField("eventConfiguration", this.eventConfiguration);
        jsonWriter.writeArrayField("destinations", this.destinations, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("typeRef", this.typeRef);
        jsonWriter.writeArrayField("dataPoints", this.dataPoints, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("lastUpdatedOn",
            this.lastUpdatedOn == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.lastUpdatedOn));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NamespaceDiscoveredEvent from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NamespaceDiscoveredEvent if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the NamespaceDiscoveredEvent.
     */
    public static NamespaceDiscoveredEvent fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NamespaceDiscoveredEvent deserializedNamespaceDiscoveredEvent = new NamespaceDiscoveredEvent();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedNamespaceDiscoveredEvent.name = reader.getString();
                } else if ("eventNotifier".equals(fieldName)) {
                    deserializedNamespaceDiscoveredEvent.eventNotifier = reader.getString();
                } else if ("eventConfiguration".equals(fieldName)) {
                    deserializedNamespaceDiscoveredEvent.eventConfiguration = reader.getString();
                } else if ("destinations".equals(fieldName)) {
                    List<EventDestination> destinations
                        = reader.readArray(reader1 -> EventDestination.fromJson(reader1));
                    deserializedNamespaceDiscoveredEvent.destinations = destinations;
                } else if ("typeRef".equals(fieldName)) {
                    deserializedNamespaceDiscoveredEvent.typeRef = reader.getString();
                } else if ("dataPoints".equals(fieldName)) {
                    List<NamespaceDiscoveredEventDataPoint> dataPoints
                        = reader.readArray(reader1 -> NamespaceDiscoveredEventDataPoint.fromJson(reader1));
                    deserializedNamespaceDiscoveredEvent.dataPoints = dataPoints;
                } else if ("lastUpdatedOn".equals(fieldName)) {
                    deserializedNamespaceDiscoveredEvent.lastUpdatedOn = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNamespaceDiscoveredEvent;
        });
    }
}
