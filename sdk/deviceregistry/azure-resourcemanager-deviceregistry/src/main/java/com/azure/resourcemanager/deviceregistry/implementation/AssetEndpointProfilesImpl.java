// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.deviceregistry.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.deviceregistry.fluent.AssetEndpointProfilesClient;
import com.azure.resourcemanager.deviceregistry.fluent.models.AssetEndpointProfileInner;
import com.azure.resourcemanager.deviceregistry.models.AssetEndpointProfile;
import com.azure.resourcemanager.deviceregistry.models.AssetEndpointProfiles;

public final class AssetEndpointProfilesImpl implements AssetEndpointProfiles {
    private static final ClientLogger LOGGER = new ClientLogger(AssetEndpointProfilesImpl.class);

    private final AssetEndpointProfilesClient innerClient;

    private final com.azure.resourcemanager.deviceregistry.DeviceRegistryManager serviceManager;

    public AssetEndpointProfilesImpl(AssetEndpointProfilesClient innerClient,
        com.azure.resourcemanager.deviceregistry.DeviceRegistryManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<AssetEndpointProfile> getByResourceGroupWithResponse(String resourceGroupName,
        String assetEndpointProfileName, Context context) {
        Response<AssetEndpointProfileInner> inner
            = this.serviceClient().getByResourceGroupWithResponse(resourceGroupName, assetEndpointProfileName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new AssetEndpointProfileImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public AssetEndpointProfile getByResourceGroup(String resourceGroupName, String assetEndpointProfileName) {
        AssetEndpointProfileInner inner
            = this.serviceClient().getByResourceGroup(resourceGroupName, assetEndpointProfileName);
        if (inner != null) {
            return new AssetEndpointProfileImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void deleteByResourceGroup(String resourceGroupName, String assetEndpointProfileName) {
        this.serviceClient().delete(resourceGroupName, assetEndpointProfileName);
    }

    public void delete(String resourceGroupName, String assetEndpointProfileName, Context context) {
        this.serviceClient().delete(resourceGroupName, assetEndpointProfileName, context);
    }

    public PagedIterable<AssetEndpointProfile> listByResourceGroup(String resourceGroupName) {
        PagedIterable<AssetEndpointProfileInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new AssetEndpointProfileImpl(inner1, this.manager()));
    }

    public PagedIterable<AssetEndpointProfile> listByResourceGroup(String resourceGroupName, Context context) {
        PagedIterable<AssetEndpointProfileInner> inner
            = this.serviceClient().listByResourceGroup(resourceGroupName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new AssetEndpointProfileImpl(inner1, this.manager()));
    }

    public PagedIterable<AssetEndpointProfile> list() {
        PagedIterable<AssetEndpointProfileInner> inner = this.serviceClient().list();
        return ResourceManagerUtils.mapPage(inner, inner1 -> new AssetEndpointProfileImpl(inner1, this.manager()));
    }

    public PagedIterable<AssetEndpointProfile> list(Context context) {
        PagedIterable<AssetEndpointProfileInner> inner = this.serviceClient().list(context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new AssetEndpointProfileImpl(inner1, this.manager()));
    }

    public AssetEndpointProfile getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String assetEndpointProfileName = ResourceManagerUtils.getValueFromIdByName(id, "assetEndpointProfiles");
        if (assetEndpointProfileName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'assetEndpointProfiles'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, assetEndpointProfileName, Context.NONE)
            .getValue();
    }

    public Response<AssetEndpointProfile> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String assetEndpointProfileName = ResourceManagerUtils.getValueFromIdByName(id, "assetEndpointProfiles");
        if (assetEndpointProfileName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'assetEndpointProfiles'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, assetEndpointProfileName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String assetEndpointProfileName = ResourceManagerUtils.getValueFromIdByName(id, "assetEndpointProfiles");
        if (assetEndpointProfileName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'assetEndpointProfiles'.", id)));
        }
        this.delete(resourceGroupName, assetEndpointProfileName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String assetEndpointProfileName = ResourceManagerUtils.getValueFromIdByName(id, "assetEndpointProfiles");
        if (assetEndpointProfileName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'assetEndpointProfiles'.", id)));
        }
        this.delete(resourceGroupName, assetEndpointProfileName, context);
    }

    private AssetEndpointProfilesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.deviceregistry.DeviceRegistryManager manager() {
        return this.serviceManager;
    }

    public AssetEndpointProfileImpl define(String name) {
        return new AssetEndpointProfileImpl(name, this.manager());
    }
}
