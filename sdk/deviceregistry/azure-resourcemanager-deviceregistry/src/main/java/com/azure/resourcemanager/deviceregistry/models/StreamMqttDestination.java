// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.deviceregistry.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The type for a MQTT destination.
 */
@Fluent
public final class StreamMqttDestination extends StreamDestination {
    /*
     * Target destination.
     */
    private StreamDestinationTarget target = StreamDestinationTarget.MQTT;

    /*
     * The MQTT destination configuration.
     */
    private MqttDestinationConfiguration configuration;

    /**
     * Creates an instance of StreamMqttDestination class.
     */
    public StreamMqttDestination() {
    }

    /**
     * Get the target property: Target destination.
     * 
     * @return the target value.
     */
    @Override
    public StreamDestinationTarget target() {
        return this.target;
    }

    /**
     * Get the configuration property: The MQTT destination configuration.
     * 
     * @return the configuration value.
     */
    public MqttDestinationConfiguration configuration() {
        return this.configuration;
    }

    /**
     * Set the configuration property: The MQTT destination configuration.
     * 
     * @param configuration the configuration value to set.
     * @return the StreamMqttDestination object itself.
     */
    public StreamMqttDestination withConfiguration(MqttDestinationConfiguration configuration) {
        this.configuration = configuration;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (configuration() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property configuration in model StreamMqttDestination"));
        } else {
            configuration().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(StreamMqttDestination.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("configuration", this.configuration);
        jsonWriter.writeStringField("target", this.target == null ? null : this.target.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StreamMqttDestination from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of StreamMqttDestination if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the StreamMqttDestination.
     */
    public static StreamMqttDestination fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            StreamMqttDestination deserializedStreamMqttDestination = new StreamMqttDestination();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("configuration".equals(fieldName)) {
                    deserializedStreamMqttDestination.configuration = MqttDestinationConfiguration.fromJson(reader);
                } else if ("target".equals(fieldName)) {
                    deserializedStreamMqttDestination.target = StreamDestinationTarget.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedStreamMqttDestination;
        });
    }
}
