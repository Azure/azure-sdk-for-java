// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.deviceregistry.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The updatable properties of the Policy.
 */
@Fluent
public final class PolicyUpdateProperties implements JsonSerializable<PolicyUpdateProperties> {
    /*
     * The certificate configuration.
     */
    private CertificateConfiguration certificate;

    /**
     * Creates an instance of PolicyUpdateProperties class.
     */
    public PolicyUpdateProperties() {
    }

    /**
     * Get the certificate property: The certificate configuration.
     * 
     * @return the certificate value.
     */
    public CertificateConfiguration certificate() {
        return this.certificate;
    }

    /**
     * Set the certificate property: The certificate configuration.
     * 
     * @param certificate the certificate value to set.
     * @return the PolicyUpdateProperties object itself.
     */
    public PolicyUpdateProperties withCertificate(CertificateConfiguration certificate) {
        this.certificate = certificate;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("certificate", this.certificate);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PolicyUpdateProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PolicyUpdateProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the PolicyUpdateProperties.
     */
    public static PolicyUpdateProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PolicyUpdateProperties deserializedPolicyUpdateProperties = new PolicyUpdateProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("certificate".equals(fieldName)) {
                    deserializedPolicyUpdateProperties.certificate = CertificateConfiguration.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPolicyUpdateProperties;
        });
    }
}
