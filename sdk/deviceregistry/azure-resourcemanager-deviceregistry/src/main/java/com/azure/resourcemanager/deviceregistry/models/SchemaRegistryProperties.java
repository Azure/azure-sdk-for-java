// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.deviceregistry.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Defines the schema registry properties.
 */
@Fluent
public final class SchemaRegistryProperties implements JsonSerializable<SchemaRegistryProperties> {
    /*
     * Globally unique, immutable, non-reusable id.
     */
    private String uuid;

    /*
     * Schema registry namespace. Uniquely identifies a schema registry within a tenant.
     */
    private String namespace;

    /*
     * Human-readable display name.
     */
    private String displayName;

    /*
     * Human-readable description of the schema registry.
     */
    private String description;

    /*
     * The Storage Account's Container URL where schemas will be stored.
     */
    private String storageAccountContainerUrl;

    /*
     * Provisioning state of the resource.
     */
    private ProvisioningState provisioningState;

    /**
     * Creates an instance of SchemaRegistryProperties class.
     */
    public SchemaRegistryProperties() {
    }

    /**
     * Get the uuid property: Globally unique, immutable, non-reusable id.
     * 
     * @return the uuid value.
     */
    public String uuid() {
        return this.uuid;
    }

    /**
     * Get the namespace property: Schema registry namespace. Uniquely identifies a schema registry within a tenant.
     * 
     * @return the namespace value.
     */
    public String namespace() {
        return this.namespace;
    }

    /**
     * Set the namespace property: Schema registry namespace. Uniquely identifies a schema registry within a tenant.
     * 
     * @param namespace the namespace value to set.
     * @return the SchemaRegistryProperties object itself.
     */
    public SchemaRegistryProperties withNamespace(String namespace) {
        this.namespace = namespace;
        return this;
    }

    /**
     * Get the displayName property: Human-readable display name.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: Human-readable display name.
     * 
     * @param displayName the displayName value to set.
     * @return the SchemaRegistryProperties object itself.
     */
    public SchemaRegistryProperties withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the description property: Human-readable description of the schema registry.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: Human-readable description of the schema registry.
     * 
     * @param description the description value to set.
     * @return the SchemaRegistryProperties object itself.
     */
    public SchemaRegistryProperties withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the storageAccountContainerUrl property: The Storage Account's Container URL where schemas will be stored.
     * 
     * @return the storageAccountContainerUrl value.
     */
    public String storageAccountContainerUrl() {
        return this.storageAccountContainerUrl;
    }

    /**
     * Set the storageAccountContainerUrl property: The Storage Account's Container URL where schemas will be stored.
     * 
     * @param storageAccountContainerUrl the storageAccountContainerUrl value to set.
     * @return the SchemaRegistryProperties object itself.
     */
    public SchemaRegistryProperties withStorageAccountContainerUrl(String storageAccountContainerUrl) {
        this.storageAccountContainerUrl = storageAccountContainerUrl;
        return this;
    }

    /**
     * Get the provisioningState property: Provisioning state of the resource.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (namespace() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property namespace in model SchemaRegistryProperties"));
        }
        if (storageAccountContainerUrl() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property storageAccountContainerUrl in model SchemaRegistryProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(SchemaRegistryProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("namespace", this.namespace);
        jsonWriter.writeStringField("storageAccountContainerUrl", this.storageAccountContainerUrl);
        jsonWriter.writeStringField("displayName", this.displayName);
        jsonWriter.writeStringField("description", this.description);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SchemaRegistryProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SchemaRegistryProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SchemaRegistryProperties.
     */
    public static SchemaRegistryProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SchemaRegistryProperties deserializedSchemaRegistryProperties = new SchemaRegistryProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("namespace".equals(fieldName)) {
                    deserializedSchemaRegistryProperties.namespace = reader.getString();
                } else if ("storageAccountContainerUrl".equals(fieldName)) {
                    deserializedSchemaRegistryProperties.storageAccountContainerUrl = reader.getString();
                } else if ("uuid".equals(fieldName)) {
                    deserializedSchemaRegistryProperties.uuid = reader.getString();
                } else if ("displayName".equals(fieldName)) {
                    deserializedSchemaRegistryProperties.displayName = reader.getString();
                } else if ("description".equals(fieldName)) {
                    deserializedSchemaRegistryProperties.description = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedSchemaRegistryProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSchemaRegistryProperties;
        });
    }
}
