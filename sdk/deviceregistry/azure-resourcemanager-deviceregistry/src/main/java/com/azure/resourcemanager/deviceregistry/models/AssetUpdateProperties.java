// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.deviceregistry.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * The updatable properties of the Asset.
 */
@Fluent
public final class AssetUpdateProperties implements JsonSerializable<AssetUpdateProperties> {
    /*
     * Resource path to asset type (model) definition.
     */
    private String assetType;

    /*
     * Enabled/Disabled status of the asset.
     */
    private Boolean enabled;

    /*
     * Human-readable display name.
     */
    private String displayName;

    /*
     * Human-readable description of the asset.
     */
    private String description;

    /*
     * Asset manufacturer name.
     */
    private String manufacturer;

    /*
     * Asset manufacturer URI.
     */
    private String manufacturerUri;

    /*
     * Asset model name.
     */
    private String model;

    /*
     * Asset product code.
     */
    private String productCode;

    /*
     * Revision number of the hardware.
     */
    private String hardwareRevision;

    /*
     * Revision number of the software.
     */
    private String softwareRevision;

    /*
     * Reference to the documentation.
     */
    private String documentationUri;

    /*
     * Asset serial number.
     */
    private String serialNumber;

    /*
     * A set of key-value pairs that contain custom attributes set by the customer.
     */
    private Map<String, Object> attributes;

    /*
     * Protocol-specific default configuration for all data points. Each data point can have its own configuration that
     * overrides the default settings here. This assumes that each asset instance has one protocol.
     */
    private String defaultDataPointsConfiguration;

    /*
     * Protocol-specific default configuration for all events. Each event can have its own configuration that overrides
     * the default settings here. This assumes that each asset instance has one protocol.
     */
    private String defaultEventsConfiguration;

    /*
     * Array of data points that are part of the asset. Each data point can reference an asset type capability and have
     * per-data point configuration. See below for more details for the definition of the dataPoints element.
     */
    private List<DataPoint> dataPoints;

    /*
     * Array of events that are part of the asset. Each event can reference an asset type capability and have per-event
     * configuration. See below for more details about the definition of the events element.
     */
    private List<Event> events;

    /**
     * Creates an instance of AssetUpdateProperties class.
     */
    public AssetUpdateProperties() {
    }

    /**
     * Get the assetType property: Resource path to asset type (model) definition.
     * 
     * @return the assetType value.
     */
    public String assetType() {
        return this.assetType;
    }

    /**
     * Set the assetType property: Resource path to asset type (model) definition.
     * 
     * @param assetType the assetType value to set.
     * @return the AssetUpdateProperties object itself.
     */
    public AssetUpdateProperties withAssetType(String assetType) {
        this.assetType = assetType;
        return this;
    }

    /**
     * Get the enabled property: Enabled/Disabled status of the asset.
     * 
     * @return the enabled value.
     */
    public Boolean enabled() {
        return this.enabled;
    }

    /**
     * Set the enabled property: Enabled/Disabled status of the asset.
     * 
     * @param enabled the enabled value to set.
     * @return the AssetUpdateProperties object itself.
     */
    public AssetUpdateProperties withEnabled(Boolean enabled) {
        this.enabled = enabled;
        return this;
    }

    /**
     * Get the displayName property: Human-readable display name.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: Human-readable display name.
     * 
     * @param displayName the displayName value to set.
     * @return the AssetUpdateProperties object itself.
     */
    public AssetUpdateProperties withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the description property: Human-readable description of the asset.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: Human-readable description of the asset.
     * 
     * @param description the description value to set.
     * @return the AssetUpdateProperties object itself.
     */
    public AssetUpdateProperties withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the manufacturer property: Asset manufacturer name.
     * 
     * @return the manufacturer value.
     */
    public String manufacturer() {
        return this.manufacturer;
    }

    /**
     * Set the manufacturer property: Asset manufacturer name.
     * 
     * @param manufacturer the manufacturer value to set.
     * @return the AssetUpdateProperties object itself.
     */
    public AssetUpdateProperties withManufacturer(String manufacturer) {
        this.manufacturer = manufacturer;
        return this;
    }

    /**
     * Get the manufacturerUri property: Asset manufacturer URI.
     * 
     * @return the manufacturerUri value.
     */
    public String manufacturerUri() {
        return this.manufacturerUri;
    }

    /**
     * Set the manufacturerUri property: Asset manufacturer URI.
     * 
     * @param manufacturerUri the manufacturerUri value to set.
     * @return the AssetUpdateProperties object itself.
     */
    public AssetUpdateProperties withManufacturerUri(String manufacturerUri) {
        this.manufacturerUri = manufacturerUri;
        return this;
    }

    /**
     * Get the model property: Asset model name.
     * 
     * @return the model value.
     */
    public String model() {
        return this.model;
    }

    /**
     * Set the model property: Asset model name.
     * 
     * @param model the model value to set.
     * @return the AssetUpdateProperties object itself.
     */
    public AssetUpdateProperties withModel(String model) {
        this.model = model;
        return this;
    }

    /**
     * Get the productCode property: Asset product code.
     * 
     * @return the productCode value.
     */
    public String productCode() {
        return this.productCode;
    }

    /**
     * Set the productCode property: Asset product code.
     * 
     * @param productCode the productCode value to set.
     * @return the AssetUpdateProperties object itself.
     */
    public AssetUpdateProperties withProductCode(String productCode) {
        this.productCode = productCode;
        return this;
    }

    /**
     * Get the hardwareRevision property: Revision number of the hardware.
     * 
     * @return the hardwareRevision value.
     */
    public String hardwareRevision() {
        return this.hardwareRevision;
    }

    /**
     * Set the hardwareRevision property: Revision number of the hardware.
     * 
     * @param hardwareRevision the hardwareRevision value to set.
     * @return the AssetUpdateProperties object itself.
     */
    public AssetUpdateProperties withHardwareRevision(String hardwareRevision) {
        this.hardwareRevision = hardwareRevision;
        return this;
    }

    /**
     * Get the softwareRevision property: Revision number of the software.
     * 
     * @return the softwareRevision value.
     */
    public String softwareRevision() {
        return this.softwareRevision;
    }

    /**
     * Set the softwareRevision property: Revision number of the software.
     * 
     * @param softwareRevision the softwareRevision value to set.
     * @return the AssetUpdateProperties object itself.
     */
    public AssetUpdateProperties withSoftwareRevision(String softwareRevision) {
        this.softwareRevision = softwareRevision;
        return this;
    }

    /**
     * Get the documentationUri property: Reference to the documentation.
     * 
     * @return the documentationUri value.
     */
    public String documentationUri() {
        return this.documentationUri;
    }

    /**
     * Set the documentationUri property: Reference to the documentation.
     * 
     * @param documentationUri the documentationUri value to set.
     * @return the AssetUpdateProperties object itself.
     */
    public AssetUpdateProperties withDocumentationUri(String documentationUri) {
        this.documentationUri = documentationUri;
        return this;
    }

    /**
     * Get the serialNumber property: Asset serial number.
     * 
     * @return the serialNumber value.
     */
    public String serialNumber() {
        return this.serialNumber;
    }

    /**
     * Set the serialNumber property: Asset serial number.
     * 
     * @param serialNumber the serialNumber value to set.
     * @return the AssetUpdateProperties object itself.
     */
    public AssetUpdateProperties withSerialNumber(String serialNumber) {
        this.serialNumber = serialNumber;
        return this;
    }

    /**
     * Get the attributes property: A set of key-value pairs that contain custom attributes set by the customer.
     * 
     * @return the attributes value.
     */
    public Map<String, Object> attributes() {
        return this.attributes;
    }

    /**
     * Set the attributes property: A set of key-value pairs that contain custom attributes set by the customer.
     * 
     * @param attributes the attributes value to set.
     * @return the AssetUpdateProperties object itself.
     */
    public AssetUpdateProperties withAttributes(Map<String, Object> attributes) {
        this.attributes = attributes;
        return this;
    }

    /**
     * Get the defaultDataPointsConfiguration property: Protocol-specific default configuration for all data points.
     * Each data point can have its own configuration that overrides the default settings here. This assumes that each
     * asset instance has one protocol.
     * 
     * @return the defaultDataPointsConfiguration value.
     */
    public String defaultDataPointsConfiguration() {
        return this.defaultDataPointsConfiguration;
    }

    /**
     * Set the defaultDataPointsConfiguration property: Protocol-specific default configuration for all data points.
     * Each data point can have its own configuration that overrides the default settings here. This assumes that each
     * asset instance has one protocol.
     * 
     * @param defaultDataPointsConfiguration the defaultDataPointsConfiguration value to set.
     * @return the AssetUpdateProperties object itself.
     */
    public AssetUpdateProperties withDefaultDataPointsConfiguration(String defaultDataPointsConfiguration) {
        this.defaultDataPointsConfiguration = defaultDataPointsConfiguration;
        return this;
    }

    /**
     * Get the defaultEventsConfiguration property: Protocol-specific default configuration for all events. Each event
     * can have its own configuration that overrides the default settings here. This assumes that each asset instance
     * has one protocol.
     * 
     * @return the defaultEventsConfiguration value.
     */
    public String defaultEventsConfiguration() {
        return this.defaultEventsConfiguration;
    }

    /**
     * Set the defaultEventsConfiguration property: Protocol-specific default configuration for all events. Each event
     * can have its own configuration that overrides the default settings here. This assumes that each asset instance
     * has one protocol.
     * 
     * @param defaultEventsConfiguration the defaultEventsConfiguration value to set.
     * @return the AssetUpdateProperties object itself.
     */
    public AssetUpdateProperties withDefaultEventsConfiguration(String defaultEventsConfiguration) {
        this.defaultEventsConfiguration = defaultEventsConfiguration;
        return this;
    }

    /**
     * Get the dataPoints property: Array of data points that are part of the asset. Each data point can reference an
     * asset type capability and have per-data point configuration. See below for more details for the definition of the
     * dataPoints element.
     * 
     * @return the dataPoints value.
     */
    public List<DataPoint> dataPoints() {
        return this.dataPoints;
    }

    /**
     * Set the dataPoints property: Array of data points that are part of the asset. Each data point can reference an
     * asset type capability and have per-data point configuration. See below for more details for the definition of the
     * dataPoints element.
     * 
     * @param dataPoints the dataPoints value to set.
     * @return the AssetUpdateProperties object itself.
     */
    public AssetUpdateProperties withDataPoints(List<DataPoint> dataPoints) {
        this.dataPoints = dataPoints;
        return this;
    }

    /**
     * Get the events property: Array of events that are part of the asset. Each event can reference an asset type
     * capability and have per-event configuration. See below for more details about the definition of the events
     * element.
     * 
     * @return the events value.
     */
    public List<Event> events() {
        return this.events;
    }

    /**
     * Set the events property: Array of events that are part of the asset. Each event can reference an asset type
     * capability and have per-event configuration. See below for more details about the definition of the events
     * element.
     * 
     * @param events the events value to set.
     * @return the AssetUpdateProperties object itself.
     */
    public AssetUpdateProperties withEvents(List<Event> events) {
        this.events = events;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (dataPoints() != null) {
            dataPoints().forEach(e -> e.validate());
        }
        if (events() != null) {
            events().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("assetType", this.assetType);
        jsonWriter.writeBooleanField("enabled", this.enabled);
        jsonWriter.writeStringField("displayName", this.displayName);
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeStringField("manufacturer", this.manufacturer);
        jsonWriter.writeStringField("manufacturerUri", this.manufacturerUri);
        jsonWriter.writeStringField("model", this.model);
        jsonWriter.writeStringField("productCode", this.productCode);
        jsonWriter.writeStringField("hardwareRevision", this.hardwareRevision);
        jsonWriter.writeStringField("softwareRevision", this.softwareRevision);
        jsonWriter.writeStringField("documentationUri", this.documentationUri);
        jsonWriter.writeStringField("serialNumber", this.serialNumber);
        jsonWriter.writeMapField("attributes", this.attributes, (writer, element) -> writer.writeUntyped(element));
        jsonWriter.writeStringField("defaultDataPointsConfiguration", this.defaultDataPointsConfiguration);
        jsonWriter.writeStringField("defaultEventsConfiguration", this.defaultEventsConfiguration);
        jsonWriter.writeArrayField("dataPoints", this.dataPoints, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("events", this.events, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AssetUpdateProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AssetUpdateProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AssetUpdateProperties.
     */
    public static AssetUpdateProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AssetUpdateProperties deserializedAssetUpdateProperties = new AssetUpdateProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("assetType".equals(fieldName)) {
                    deserializedAssetUpdateProperties.assetType = reader.getString();
                } else if ("enabled".equals(fieldName)) {
                    deserializedAssetUpdateProperties.enabled = reader.getNullable(JsonReader::getBoolean);
                } else if ("displayName".equals(fieldName)) {
                    deserializedAssetUpdateProperties.displayName = reader.getString();
                } else if ("description".equals(fieldName)) {
                    deserializedAssetUpdateProperties.description = reader.getString();
                } else if ("manufacturer".equals(fieldName)) {
                    deserializedAssetUpdateProperties.manufacturer = reader.getString();
                } else if ("manufacturerUri".equals(fieldName)) {
                    deserializedAssetUpdateProperties.manufacturerUri = reader.getString();
                } else if ("model".equals(fieldName)) {
                    deserializedAssetUpdateProperties.model = reader.getString();
                } else if ("productCode".equals(fieldName)) {
                    deserializedAssetUpdateProperties.productCode = reader.getString();
                } else if ("hardwareRevision".equals(fieldName)) {
                    deserializedAssetUpdateProperties.hardwareRevision = reader.getString();
                } else if ("softwareRevision".equals(fieldName)) {
                    deserializedAssetUpdateProperties.softwareRevision = reader.getString();
                } else if ("documentationUri".equals(fieldName)) {
                    deserializedAssetUpdateProperties.documentationUri = reader.getString();
                } else if ("serialNumber".equals(fieldName)) {
                    deserializedAssetUpdateProperties.serialNumber = reader.getString();
                } else if ("attributes".equals(fieldName)) {
                    Map<String, Object> attributes = reader.readMap(reader1 -> reader1.readUntyped());
                    deserializedAssetUpdateProperties.attributes = attributes;
                } else if ("defaultDataPointsConfiguration".equals(fieldName)) {
                    deserializedAssetUpdateProperties.defaultDataPointsConfiguration = reader.getString();
                } else if ("defaultEventsConfiguration".equals(fieldName)) {
                    deserializedAssetUpdateProperties.defaultEventsConfiguration = reader.getString();
                } else if ("dataPoints".equals(fieldName)) {
                    List<DataPoint> dataPoints = reader.readArray(reader1 -> DataPoint.fromJson(reader1));
                    deserializedAssetUpdateProperties.dataPoints = dataPoints;
                } else if ("events".equals(fieldName)) {
                    List<Event> events = reader.readArray(reader1 -> Event.fromJson(reader1));
                    deserializedAssetUpdateProperties.events = events;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAssetUpdateProperties;
        });
    }
}
