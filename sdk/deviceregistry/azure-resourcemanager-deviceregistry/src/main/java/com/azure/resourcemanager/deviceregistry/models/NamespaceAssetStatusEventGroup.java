// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.deviceregistry.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Defines the asset status event group properties.
 */
@Immutable
public final class NamespaceAssetStatusEventGroup implements JsonSerializable<NamespaceAssetStatusEventGroup> {
    /*
     * The name of the event group. Must be unique within the status.eventGroups array. This name is used to correlate
     * between the spec and status event group information.
     */
    private String name;

    /*
     * Array of event statuses that describe the status of each event in the event group.
     */
    private List<NamespaceAssetStatusEvent> events;

    /**
     * Creates an instance of NamespaceAssetStatusEventGroup class.
     */
    private NamespaceAssetStatusEventGroup() {
    }

    /**
     * Get the name property: The name of the event group. Must be unique within the status.eventGroups array. This name
     * is used to correlate between the spec and status event group information.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Get the events property: Array of event statuses that describe the status of each event in the event group.
     * 
     * @return the events value.
     */
    public List<NamespaceAssetStatusEvent> events() {
        return this.events;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NamespaceAssetStatusEventGroup from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NamespaceAssetStatusEventGroup if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the NamespaceAssetStatusEventGroup.
     */
    public static NamespaceAssetStatusEventGroup fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NamespaceAssetStatusEventGroup deserializedNamespaceAssetStatusEventGroup
                = new NamespaceAssetStatusEventGroup();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedNamespaceAssetStatusEventGroup.name = reader.getString();
                } else if ("events".equals(fieldName)) {
                    List<NamespaceAssetStatusEvent> events
                        = reader.readArray(reader1 -> NamespaceAssetStatusEvent.fromJson(reader1));
                    deserializedNamespaceAssetStatusEventGroup.events = events;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNamespaceAssetStatusEventGroup;
        });
    }
}
