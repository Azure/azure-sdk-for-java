// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.deviceregistry.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Defines the data point properties.
 */
@Fluent
public final class DataPoint {
    /*
     * The name of the data point.
     */
    @JsonProperty(value = "name")
    private String name;

    /*
     * The address of the source of the data in the asset (e.g. URL) so that a client can access the data source on the
     * asset.
     */
    @JsonProperty(value = "dataSource", required = true)
    private String dataSource;

    /*
     * The path to the type definition of the capability (e.g. DTMI, OPC UA information model node id, etc.), for
     * example dtmi:com:example:Robot:_contents:__prop1;1.
     */
    @JsonProperty(value = "capabilityId")
    private String capabilityId;

    /*
     * An indication of how the data point should be mapped to OpenTelemetry.
     */
    @JsonProperty(value = "observabilityMode")
    private DataPointsObservabilityMode observabilityMode;

    /*
     * Protocol-specific configuration for the data point. For OPC UA, this could include configuration like,
     * publishingInterval, samplingInterval, and queueSize.
     */
    @JsonProperty(value = "dataPointConfiguration")
    private String dataPointConfiguration;

    /**
     * Creates an instance of DataPoint class.
     */
    public DataPoint() {
    }

    /**
     * Get the name property: The name of the data point.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: The name of the data point.
     * 
     * @param name the name value to set.
     * @return the DataPoint object itself.
     */
    public DataPoint withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the dataSource property: The address of the source of the data in the asset (e.g. URL) so that a client can
     * access the data source on the asset.
     * 
     * @return the dataSource value.
     */
    public String dataSource() {
        return this.dataSource;
    }

    /**
     * Set the dataSource property: The address of the source of the data in the asset (e.g. URL) so that a client can
     * access the data source on the asset.
     * 
     * @param dataSource the dataSource value to set.
     * @return the DataPoint object itself.
     */
    public DataPoint withDataSource(String dataSource) {
        this.dataSource = dataSource;
        return this;
    }

    /**
     * Get the capabilityId property: The path to the type definition of the capability (e.g. DTMI, OPC UA information
     * model node id, etc.), for example dtmi:com:example:Robot:_contents:__prop1;1.
     * 
     * @return the capabilityId value.
     */
    public String capabilityId() {
        return this.capabilityId;
    }

    /**
     * Set the capabilityId property: The path to the type definition of the capability (e.g. DTMI, OPC UA information
     * model node id, etc.), for example dtmi:com:example:Robot:_contents:__prop1;1.
     * 
     * @param capabilityId the capabilityId value to set.
     * @return the DataPoint object itself.
     */
    public DataPoint withCapabilityId(String capabilityId) {
        this.capabilityId = capabilityId;
        return this;
    }

    /**
     * Get the observabilityMode property: An indication of how the data point should be mapped to OpenTelemetry.
     * 
     * @return the observabilityMode value.
     */
    public DataPointsObservabilityMode observabilityMode() {
        return this.observabilityMode;
    }

    /**
     * Set the observabilityMode property: An indication of how the data point should be mapped to OpenTelemetry.
     * 
     * @param observabilityMode the observabilityMode value to set.
     * @return the DataPoint object itself.
     */
    public DataPoint withObservabilityMode(DataPointsObservabilityMode observabilityMode) {
        this.observabilityMode = observabilityMode;
        return this;
    }

    /**
     * Get the dataPointConfiguration property: Protocol-specific configuration for the data point. For OPC UA, this
     * could include configuration like, publishingInterval, samplingInterval, and queueSize.
     * 
     * @return the dataPointConfiguration value.
     */
    public String dataPointConfiguration() {
        return this.dataPointConfiguration;
    }

    /**
     * Set the dataPointConfiguration property: Protocol-specific configuration for the data point. For OPC UA, this
     * could include configuration like, publishingInterval, samplingInterval, and queueSize.
     * 
     * @param dataPointConfiguration the dataPointConfiguration value to set.
     * @return the DataPoint object itself.
     */
    public DataPoint withDataPointConfiguration(String dataPointConfiguration) {
        this.dataPointConfiguration = dataPointConfiguration;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (dataSource() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property dataSource in model DataPoint"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(DataPoint.class);
}
