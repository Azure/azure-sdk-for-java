// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.deviceregistry.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

/**
 * Defines the management group properties.
 */
@Fluent
public final class NamespaceDiscoveredManagementGroup implements JsonSerializable<NamespaceDiscoveredManagementGroup> {
    /*
     * Name of the management group.
     */
    private String name;

    /*
     * Stringified JSON that contains connector-specific configuration for the management group.
     */
    private String managementGroupConfiguration;

    /*
     * URI or type definition ID.
     */
    private String typeRef;

    /*
     * Default MQTT topic path on which a client will receive the request for all actions that are part of the
     * management group.
     */
    private String defaultTopic;

    /*
     * Default response timeout for all actions that are part of the management group.
     */
    private Integer defaultTimeoutInSeconds;

    /*
     * Array of actions that are part of the management group. Each action can have an individual configuration.
     */
    private List<NamespaceDiscoveredManagementAction> actions;

    /*
     * Timestamp (in UTC) indicating when the management group was added or modified.
     */
    private OffsetDateTime lastUpdatedOn;

    /**
     * Creates an instance of NamespaceDiscoveredManagementGroup class.
     */
    public NamespaceDiscoveredManagementGroup() {
    }

    /**
     * Get the name property: Name of the management group.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: Name of the management group.
     * 
     * @param name the name value to set.
     * @return the NamespaceDiscoveredManagementGroup object itself.
     */
    public NamespaceDiscoveredManagementGroup withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the managementGroupConfiguration property: Stringified JSON that contains connector-specific configuration
     * for the management group.
     * 
     * @return the managementGroupConfiguration value.
     */
    public String managementGroupConfiguration() {
        return this.managementGroupConfiguration;
    }

    /**
     * Set the managementGroupConfiguration property: Stringified JSON that contains connector-specific configuration
     * for the management group.
     * 
     * @param managementGroupConfiguration the managementGroupConfiguration value to set.
     * @return the NamespaceDiscoveredManagementGroup object itself.
     */
    public NamespaceDiscoveredManagementGroup withManagementGroupConfiguration(String managementGroupConfiguration) {
        this.managementGroupConfiguration = managementGroupConfiguration;
        return this;
    }

    /**
     * Get the typeRef property: URI or type definition ID.
     * 
     * @return the typeRef value.
     */
    public String typeRef() {
        return this.typeRef;
    }

    /**
     * Set the typeRef property: URI or type definition ID.
     * 
     * @param typeRef the typeRef value to set.
     * @return the NamespaceDiscoveredManagementGroup object itself.
     */
    public NamespaceDiscoveredManagementGroup withTypeRef(String typeRef) {
        this.typeRef = typeRef;
        return this;
    }

    /**
     * Get the defaultTopic property: Default MQTT topic path on which a client will receive the request for all actions
     * that are part of the management group.
     * 
     * @return the defaultTopic value.
     */
    public String defaultTopic() {
        return this.defaultTopic;
    }

    /**
     * Set the defaultTopic property: Default MQTT topic path on which a client will receive the request for all actions
     * that are part of the management group.
     * 
     * @param defaultTopic the defaultTopic value to set.
     * @return the NamespaceDiscoveredManagementGroup object itself.
     */
    public NamespaceDiscoveredManagementGroup withDefaultTopic(String defaultTopic) {
        this.defaultTopic = defaultTopic;
        return this;
    }

    /**
     * Get the defaultTimeoutInSeconds property: Default response timeout for all actions that are part of the
     * management group.
     * 
     * @return the defaultTimeoutInSeconds value.
     */
    public Integer defaultTimeoutInSeconds() {
        return this.defaultTimeoutInSeconds;
    }

    /**
     * Set the defaultTimeoutInSeconds property: Default response timeout for all actions that are part of the
     * management group.
     * 
     * @param defaultTimeoutInSeconds the defaultTimeoutInSeconds value to set.
     * @return the NamespaceDiscoveredManagementGroup object itself.
     */
    public NamespaceDiscoveredManagementGroup withDefaultTimeoutInSeconds(Integer defaultTimeoutInSeconds) {
        this.defaultTimeoutInSeconds = defaultTimeoutInSeconds;
        return this;
    }

    /**
     * Get the actions property: Array of actions that are part of the management group. Each action can have an
     * individual configuration.
     * 
     * @return the actions value.
     */
    public List<NamespaceDiscoveredManagementAction> actions() {
        return this.actions;
    }

    /**
     * Set the actions property: Array of actions that are part of the management group. Each action can have an
     * individual configuration.
     * 
     * @param actions the actions value to set.
     * @return the NamespaceDiscoveredManagementGroup object itself.
     */
    public NamespaceDiscoveredManagementGroup withActions(List<NamespaceDiscoveredManagementAction> actions) {
        this.actions = actions;
        return this;
    }

    /**
     * Get the lastUpdatedOn property: Timestamp (in UTC) indicating when the management group was added or modified.
     * 
     * @return the lastUpdatedOn value.
     */
    public OffsetDateTime lastUpdatedOn() {
        return this.lastUpdatedOn;
    }

    /**
     * Set the lastUpdatedOn property: Timestamp (in UTC) indicating when the management group was added or modified.
     * 
     * @param lastUpdatedOn the lastUpdatedOn value to set.
     * @return the NamespaceDiscoveredManagementGroup object itself.
     */
    public NamespaceDiscoveredManagementGroup withLastUpdatedOn(OffsetDateTime lastUpdatedOn) {
        this.lastUpdatedOn = lastUpdatedOn;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("managementGroupConfiguration", this.managementGroupConfiguration);
        jsonWriter.writeStringField("typeRef", this.typeRef);
        jsonWriter.writeStringField("defaultTopic", this.defaultTopic);
        jsonWriter.writeNumberField("defaultTimeoutInSeconds", this.defaultTimeoutInSeconds);
        jsonWriter.writeArrayField("actions", this.actions, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("lastUpdatedOn",
            this.lastUpdatedOn == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.lastUpdatedOn));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NamespaceDiscoveredManagementGroup from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NamespaceDiscoveredManagementGroup if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the NamespaceDiscoveredManagementGroup.
     */
    public static NamespaceDiscoveredManagementGroup fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NamespaceDiscoveredManagementGroup deserializedNamespaceDiscoveredManagementGroup
                = new NamespaceDiscoveredManagementGroup();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedNamespaceDiscoveredManagementGroup.name = reader.getString();
                } else if ("managementGroupConfiguration".equals(fieldName)) {
                    deserializedNamespaceDiscoveredManagementGroup.managementGroupConfiguration = reader.getString();
                } else if ("typeRef".equals(fieldName)) {
                    deserializedNamespaceDiscoveredManagementGroup.typeRef = reader.getString();
                } else if ("defaultTopic".equals(fieldName)) {
                    deserializedNamespaceDiscoveredManagementGroup.defaultTopic = reader.getString();
                } else if ("defaultTimeoutInSeconds".equals(fieldName)) {
                    deserializedNamespaceDiscoveredManagementGroup.defaultTimeoutInSeconds
                        = reader.getNullable(JsonReader::getInt);
                } else if ("actions".equals(fieldName)) {
                    List<NamespaceDiscoveredManagementAction> actions
                        = reader.readArray(reader1 -> NamespaceDiscoveredManagementAction.fromJson(reader1));
                    deserializedNamespaceDiscoveredManagementGroup.actions = actions;
                } else if ("lastUpdatedOn".equals(fieldName)) {
                    deserializedNamespaceDiscoveredManagementGroup.lastUpdatedOn = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNamespaceDiscoveredManagementGroup;
        });
    }
}
