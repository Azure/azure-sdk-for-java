// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.deviceregistry.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * Defines the device status for inbound/outbound endpoints.
 */
@Immutable
public final class DeviceStatusEndpoints implements JsonSerializable<DeviceStatusEndpoints> {
    /*
     * KeyValue pair representing status of inbound endpoints.
     */
    private Map<String, DeviceStatusEndpoint> inbound;

    /**
     * Creates an instance of DeviceStatusEndpoints class.
     */
    private DeviceStatusEndpoints() {
    }

    /**
     * Get the inbound property: KeyValue pair representing status of inbound endpoints.
     * 
     * @return the inbound value.
     */
    public Map<String, DeviceStatusEndpoint> inbound() {
        return this.inbound;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (inbound() != null) {
            inbound().values().forEach(e -> {
                if (e != null) {
                    e.validate();
                }
            });
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DeviceStatusEndpoints from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DeviceStatusEndpoints if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DeviceStatusEndpoints.
     */
    public static DeviceStatusEndpoints fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DeviceStatusEndpoints deserializedDeviceStatusEndpoints = new DeviceStatusEndpoints();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("inbound".equals(fieldName)) {
                    Map<String, DeviceStatusEndpoint> inbound
                        = reader.readMap(reader1 -> DeviceStatusEndpoint.fromJson(reader1));
                    deserializedDeviceStatusEndpoints.inbound = inbound;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDeviceStatusEndpoints;
        });
    }
}
