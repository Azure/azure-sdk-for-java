// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.deviceregistry.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Defines the asset status properties.
 */
@Immutable
public final class NamespaceAssetStatus implements JsonSerializable<NamespaceAssetStatus> {
    /*
     * Defines the asset status config properties.
     */
    private StatusConfig config;

    /*
     * Array of dataset statuses that describe the status of each dataset.
     */
    private List<NamespaceAssetStatusDataset> datasets;

    /*
     * Array of event group statuses that describe the status of each event group.
     */
    private List<NamespaceAssetStatusEventGroup> eventGroups;

    /*
     * Array of stream statuses that describe the status of each stream.
     */
    private List<NamespaceAssetStatusStream> streams;

    /*
     * Array of management group statuses that describe the status of each management group.
     */
    private List<NamespaceAssetStatusManagementGroup> managementGroups;

    /**
     * Creates an instance of NamespaceAssetStatus class.
     */
    private NamespaceAssetStatus() {
    }

    /**
     * Get the config property: Defines the asset status config properties.
     * 
     * @return the config value.
     */
    public StatusConfig config() {
        return this.config;
    }

    /**
     * Get the datasets property: Array of dataset statuses that describe the status of each dataset.
     * 
     * @return the datasets value.
     */
    public List<NamespaceAssetStatusDataset> datasets() {
        return this.datasets;
    }

    /**
     * Get the eventGroups property: Array of event group statuses that describe the status of each event group.
     * 
     * @return the eventGroups value.
     */
    public List<NamespaceAssetStatusEventGroup> eventGroups() {
        return this.eventGroups;
    }

    /**
     * Get the streams property: Array of stream statuses that describe the status of each stream.
     * 
     * @return the streams value.
     */
    public List<NamespaceAssetStatusStream> streams() {
        return this.streams;
    }

    /**
     * Get the managementGroups property: Array of management group statuses that describe the status of each management
     * group.
     * 
     * @return the managementGroups value.
     */
    public List<NamespaceAssetStatusManagementGroup> managementGroups() {
        return this.managementGroups;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NamespaceAssetStatus from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NamespaceAssetStatus if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the NamespaceAssetStatus.
     */
    public static NamespaceAssetStatus fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NamespaceAssetStatus deserializedNamespaceAssetStatus = new NamespaceAssetStatus();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("config".equals(fieldName)) {
                    deserializedNamespaceAssetStatus.config = StatusConfig.fromJson(reader);
                } else if ("datasets".equals(fieldName)) {
                    List<NamespaceAssetStatusDataset> datasets
                        = reader.readArray(reader1 -> NamespaceAssetStatusDataset.fromJson(reader1));
                    deserializedNamespaceAssetStatus.datasets = datasets;
                } else if ("eventGroups".equals(fieldName)) {
                    List<NamespaceAssetStatusEventGroup> eventGroups
                        = reader.readArray(reader1 -> NamespaceAssetStatusEventGroup.fromJson(reader1));
                    deserializedNamespaceAssetStatus.eventGroups = eventGroups;
                } else if ("streams".equals(fieldName)) {
                    List<NamespaceAssetStatusStream> streams
                        = reader.readArray(reader1 -> NamespaceAssetStatusStream.fromJson(reader1));
                    deserializedNamespaceAssetStatus.streams = streams;
                } else if ("managementGroups".equals(fieldName)) {
                    List<NamespaceAssetStatusManagementGroup> managementGroups
                        = reader.readArray(reader1 -> NamespaceAssetStatusManagementGroup.fromJson(reader1));
                    deserializedNamespaceAssetStatus.managementGroups = managementGroups;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNamespaceAssetStatus;
        });
    }
}
