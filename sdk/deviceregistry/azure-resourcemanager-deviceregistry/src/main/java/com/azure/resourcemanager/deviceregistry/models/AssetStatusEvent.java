// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.deviceregistry.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Defines the asset status event properties.
 */
@Immutable
public final class AssetStatusEvent implements JsonSerializable<AssetStatusEvent> {
    /*
     * The name of the event. Must be unique within the status.events array. This name is used to correlate between the
     * spec and status event information.
     */
    private String name;

    /*
     * The message schema reference object.
     */
    private MessageSchemaReference messageSchemaReference;

    /**
     * Creates an instance of AssetStatusEvent class.
     */
    private AssetStatusEvent() {
    }

    /**
     * Get the name property: The name of the event. Must be unique within the status.events array. This name is used to
     * correlate between the spec and status event information.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Get the messageSchemaReference property: The message schema reference object.
     * 
     * @return the messageSchemaReference value.
     */
    public MessageSchemaReference messageSchemaReference() {
        return this.messageSchemaReference;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (messageSchemaReference() != null) {
            messageSchemaReference().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AssetStatusEvent from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AssetStatusEvent if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AssetStatusEvent.
     */
    public static AssetStatusEvent fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AssetStatusEvent deserializedAssetStatusEvent = new AssetStatusEvent();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedAssetStatusEvent.name = reader.getString();
                } else if ("messageSchemaReference".equals(fieldName)) {
                    deserializedAssetStatusEvent.messageSchemaReference = MessageSchemaReference.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAssetStatusEvent;
        });
    }
}
