// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.deviceregistry.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.deviceregistry.fluent.models.NamespaceAssetInner;
import com.azure.resourcemanager.deviceregistry.models.NamespaceAssetUpdate;

/**
 * An instance of this class provides access to all the operations defined in NamespaceAssetsClient.
 */
public interface NamespaceAssetsClient {
    /**
     * Get a NamespaceAsset.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param namespaceName The name of the namespace.
     * @param assetName The name of the asset.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a NamespaceAsset along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<NamespaceAssetInner> getWithResponse(String resourceGroupName, String namespaceName, String assetName,
        Context context);

    /**
     * Get a NamespaceAsset.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param namespaceName The name of the namespace.
     * @param assetName The name of the asset.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a NamespaceAsset.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    NamespaceAssetInner get(String resourceGroupName, String namespaceName, String assetName);

    /**
     * Create a NamespaceAsset.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param namespaceName The name of the namespace.
     * @param assetName The name of the asset.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of asset definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<NamespaceAssetInner>, NamespaceAssetInner> beginCreateOrReplace(String resourceGroupName,
        String namespaceName, String assetName, NamespaceAssetInner resource);

    /**
     * Create a NamespaceAsset.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param namespaceName The name of the namespace.
     * @param assetName The name of the asset.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of asset definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<NamespaceAssetInner>, NamespaceAssetInner> beginCreateOrReplace(String resourceGroupName,
        String namespaceName, String assetName, NamespaceAssetInner resource, Context context);

    /**
     * Create a NamespaceAsset.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param namespaceName The name of the namespace.
     * @param assetName The name of the asset.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return asset definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    NamespaceAssetInner createOrReplace(String resourceGroupName, String namespaceName, String assetName,
        NamespaceAssetInner resource);

    /**
     * Create a NamespaceAsset.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param namespaceName The name of the namespace.
     * @param assetName The name of the asset.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return asset definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    NamespaceAssetInner createOrReplace(String resourceGroupName, String namespaceName, String assetName,
        NamespaceAssetInner resource, Context context);

    /**
     * Update a NamespaceAsset.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param namespaceName The name of the namespace.
     * @param assetName The name of the asset.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of asset definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<NamespaceAssetInner>, NamespaceAssetInner> beginUpdate(String resourceGroupName,
        String namespaceName, String assetName, NamespaceAssetUpdate properties);

    /**
     * Update a NamespaceAsset.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param namespaceName The name of the namespace.
     * @param assetName The name of the asset.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of asset definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<NamespaceAssetInner>, NamespaceAssetInner> beginUpdate(String resourceGroupName,
        String namespaceName, String assetName, NamespaceAssetUpdate properties, Context context);

    /**
     * Update a NamespaceAsset.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param namespaceName The name of the namespace.
     * @param assetName The name of the asset.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return asset definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    NamespaceAssetInner update(String resourceGroupName, String namespaceName, String assetName,
        NamespaceAssetUpdate properties);

    /**
     * Update a NamespaceAsset.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param namespaceName The name of the namespace.
     * @param assetName The name of the asset.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return asset definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    NamespaceAssetInner update(String resourceGroupName, String namespaceName, String assetName,
        NamespaceAssetUpdate properties, Context context);

    /**
     * Delete a NamespaceAsset.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param namespaceName The name of the namespace.
     * @param assetName The name of the asset.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String namespaceName, String assetName);

    /**
     * Delete a NamespaceAsset.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param namespaceName The name of the namespace.
     * @param assetName The name of the asset.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String namespaceName, String assetName,
        Context context);

    /**
     * Delete a NamespaceAsset.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param namespaceName The name of the namespace.
     * @param assetName The name of the asset.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String namespaceName, String assetName);

    /**
     * Delete a NamespaceAsset.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param namespaceName The name of the namespace.
     * @param assetName The name of the asset.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String namespaceName, String assetName, Context context);

    /**
     * List NamespaceAsset resources by Namespace.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param namespaceName The name of the namespace.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a NamespaceAsset list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<NamespaceAssetInner> listByResourceGroup(String resourceGroupName, String namespaceName);

    /**
     * List NamespaceAsset resources by Namespace.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param namespaceName The name of the namespace.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a NamespaceAsset list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<NamespaceAssetInner> listByResourceGroup(String resourceGroupName, String namespaceName,
        Context context);
}
