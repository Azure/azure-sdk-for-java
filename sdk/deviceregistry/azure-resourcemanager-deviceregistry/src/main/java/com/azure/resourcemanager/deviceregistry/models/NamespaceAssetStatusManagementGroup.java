// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.deviceregistry.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Defines the asset status management group properties.
 */
@Immutable
public final class NamespaceAssetStatusManagementGroup
    implements JsonSerializable<NamespaceAssetStatusManagementGroup> {
    /*
     * The name of the management group. Must be unique within the status.managementGroups array. This name is used to
     * correlate between the spec and status event information.
     */
    private String name;

    /*
     * Array of action statuses that describe the status of each action.
     */
    private List<NamespaceAssetStatusManagementAction> actions;

    /**
     * Creates an instance of NamespaceAssetStatusManagementGroup class.
     */
    private NamespaceAssetStatusManagementGroup() {
    }

    /**
     * Get the name property: The name of the management group. Must be unique within the status.managementGroups array.
     * This name is used to correlate between the spec and status event information.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Get the actions property: Array of action statuses that describe the status of each action.
     * 
     * @return the actions value.
     */
    public List<NamespaceAssetStatusManagementAction> actions() {
        return this.actions;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NamespaceAssetStatusManagementGroup from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NamespaceAssetStatusManagementGroup if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the NamespaceAssetStatusManagementGroup.
     */
    public static NamespaceAssetStatusManagementGroup fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NamespaceAssetStatusManagementGroup deserializedNamespaceAssetStatusManagementGroup
                = new NamespaceAssetStatusManagementGroup();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedNamespaceAssetStatusManagementGroup.name = reader.getString();
                } else if ("actions".equals(fieldName)) {
                    List<NamespaceAssetStatusManagementAction> actions
                        = reader.readArray(reader1 -> NamespaceAssetStatusManagementAction.fromJson(reader1));
                    deserializedNamespaceAssetStatusManagementGroup.actions = actions;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNamespaceAssetStatusManagementGroup;
        });
    }
}
