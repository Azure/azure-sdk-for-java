// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.deviceregistry.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Defines the asset status error properties.
 */
@Immutable
public final class AssetStatusError implements JsonSerializable<AssetStatusError> {
    /*
     * Error code for classification of errors (ex: 400, 404, 500, etc.).
     */
    private Integer code;

    /*
     * Human readable helpful error message to provide additional context for error (ex: “capability Id 'foo' does not
     * exist”).
     */
    private String message;

    /**
     * Creates an instance of AssetStatusError class.
     */
    private AssetStatusError() {
    }

    /**
     * Get the code property: Error code for classification of errors (ex: 400, 404, 500, etc.).
     * 
     * @return the code value.
     */
    public Integer code() {
        return this.code;
    }

    /**
     * Get the message property: Human readable helpful error message to provide additional context for error (ex:
     * “capability Id 'foo' does not exist”).
     * 
     * @return the message value.
     */
    public String message() {
        return this.message;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("code", this.code);
        jsonWriter.writeStringField("message", this.message);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AssetStatusError from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AssetStatusError if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the AssetStatusError.
     */
    public static AssetStatusError fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AssetStatusError deserializedAssetStatusError = new AssetStatusError();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("code".equals(fieldName)) {
                    deserializedAssetStatusError.code = reader.getNullable(JsonReader::getInt);
                } else if ("message".equals(fieldName)) {
                    deserializedAssetStatusError.message = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAssetStatusError;
        });
    }
}
