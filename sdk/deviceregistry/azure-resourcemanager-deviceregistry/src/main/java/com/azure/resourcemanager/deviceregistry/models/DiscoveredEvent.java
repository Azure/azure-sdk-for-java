// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.deviceregistry.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Defines the event properties.
 */
@Fluent
public final class DiscoveredEvent implements JsonSerializable<DiscoveredEvent> {
    /*
     * The name of the event.
     */
    private String name;

    /*
     * The address of the notifier of the event in the asset (e.g. URL) so that a client can access the event on the
     * asset.
     */
    private String eventNotifier;

    /*
     * Stringified JSON that contains connector-specific configuration for the event. For OPC UA, this could include
     * configuration like, publishingInterval, samplingInterval, and queueSize.
     */
    private String eventConfiguration;

    /*
     * Object that describes the topic information for the specific event.
     */
    private Topic topic;

    /*
     * UTC timestamp indicating when the event was added or modified.
     */
    private OffsetDateTime lastUpdatedOn;

    /**
     * Creates an instance of DiscoveredEvent class.
     */
    public DiscoveredEvent() {
    }

    /**
     * Get the name property: The name of the event.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: The name of the event.
     * 
     * @param name the name value to set.
     * @return the DiscoveredEvent object itself.
     */
    public DiscoveredEvent withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the eventNotifier property: The address of the notifier of the event in the asset (e.g. URL) so that a client
     * can access the event on the asset.
     * 
     * @return the eventNotifier value.
     */
    public String eventNotifier() {
        return this.eventNotifier;
    }

    /**
     * Set the eventNotifier property: The address of the notifier of the event in the asset (e.g. URL) so that a client
     * can access the event on the asset.
     * 
     * @param eventNotifier the eventNotifier value to set.
     * @return the DiscoveredEvent object itself.
     */
    public DiscoveredEvent withEventNotifier(String eventNotifier) {
        this.eventNotifier = eventNotifier;
        return this;
    }

    /**
     * Get the eventConfiguration property: Stringified JSON that contains connector-specific configuration for the
     * event. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize.
     * 
     * @return the eventConfiguration value.
     */
    public String eventConfiguration() {
        return this.eventConfiguration;
    }

    /**
     * Set the eventConfiguration property: Stringified JSON that contains connector-specific configuration for the
     * event. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize.
     * 
     * @param eventConfiguration the eventConfiguration value to set.
     * @return the DiscoveredEvent object itself.
     */
    public DiscoveredEvent withEventConfiguration(String eventConfiguration) {
        this.eventConfiguration = eventConfiguration;
        return this;
    }

    /**
     * Get the topic property: Object that describes the topic information for the specific event.
     * 
     * @return the topic value.
     */
    public Topic topic() {
        return this.topic;
    }

    /**
     * Set the topic property: Object that describes the topic information for the specific event.
     * 
     * @param topic the topic value to set.
     * @return the DiscoveredEvent object itself.
     */
    public DiscoveredEvent withTopic(Topic topic) {
        this.topic = topic;
        return this;
    }

    /**
     * Get the lastUpdatedOn property: UTC timestamp indicating when the event was added or modified.
     * 
     * @return the lastUpdatedOn value.
     */
    public OffsetDateTime lastUpdatedOn() {
        return this.lastUpdatedOn;
    }

    /**
     * Set the lastUpdatedOn property: UTC timestamp indicating when the event was added or modified.
     * 
     * @param lastUpdatedOn the lastUpdatedOn value to set.
     * @return the DiscoveredEvent object itself.
     */
    public DiscoveredEvent withLastUpdatedOn(OffsetDateTime lastUpdatedOn) {
        this.lastUpdatedOn = lastUpdatedOn;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (name() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property name in model DiscoveredEvent"));
        }
        if (eventNotifier() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property eventNotifier in model DiscoveredEvent"));
        }
        if (topic() != null) {
            topic().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(DiscoveredEvent.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("eventNotifier", this.eventNotifier);
        jsonWriter.writeStringField("eventConfiguration", this.eventConfiguration);
        jsonWriter.writeJsonField("topic", this.topic);
        jsonWriter.writeStringField("lastUpdatedOn",
            this.lastUpdatedOn == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.lastUpdatedOn));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DiscoveredEvent from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DiscoveredEvent if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DiscoveredEvent.
     */
    public static DiscoveredEvent fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DiscoveredEvent deserializedDiscoveredEvent = new DiscoveredEvent();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedDiscoveredEvent.name = reader.getString();
                } else if ("eventNotifier".equals(fieldName)) {
                    deserializedDiscoveredEvent.eventNotifier = reader.getString();
                } else if ("eventConfiguration".equals(fieldName)) {
                    deserializedDiscoveredEvent.eventConfiguration = reader.getString();
                } else if ("topic".equals(fieldName)) {
                    deserializedDiscoveredEvent.topic = Topic.fromJson(reader);
                } else if ("lastUpdatedOn".equals(fieldName)) {
                    deserializedDiscoveredEvent.lastUpdatedOn = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDiscoveredEvent;
        });
    }
}
