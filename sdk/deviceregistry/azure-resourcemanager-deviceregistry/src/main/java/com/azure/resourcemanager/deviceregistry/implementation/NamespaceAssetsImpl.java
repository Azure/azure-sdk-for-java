// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.deviceregistry.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.deviceregistry.fluent.NamespaceAssetsClient;
import com.azure.resourcemanager.deviceregistry.fluent.models.NamespaceAssetInner;
import com.azure.resourcemanager.deviceregistry.models.NamespaceAsset;
import com.azure.resourcemanager.deviceregistry.models.NamespaceAssets;

public final class NamespaceAssetsImpl implements NamespaceAssets {
    private static final ClientLogger LOGGER = new ClientLogger(NamespaceAssetsImpl.class);

    private final NamespaceAssetsClient innerClient;

    private final com.azure.resourcemanager.deviceregistry.DeviceRegistryManager serviceManager;

    public NamespaceAssetsImpl(NamespaceAssetsClient innerClient,
        com.azure.resourcemanager.deviceregistry.DeviceRegistryManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<NamespaceAsset> getWithResponse(String resourceGroupName, String namespaceName, String assetName,
        Context context) {
        Response<NamespaceAssetInner> inner
            = this.serviceClient().getWithResponse(resourceGroupName, namespaceName, assetName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new NamespaceAssetImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public NamespaceAsset get(String resourceGroupName, String namespaceName, String assetName) {
        NamespaceAssetInner inner = this.serviceClient().get(resourceGroupName, namespaceName, assetName);
        if (inner != null) {
            return new NamespaceAssetImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String namespaceName, String assetName) {
        this.serviceClient().delete(resourceGroupName, namespaceName, assetName);
    }

    public void delete(String resourceGroupName, String namespaceName, String assetName, Context context) {
        this.serviceClient().delete(resourceGroupName, namespaceName, assetName, context);
    }

    public PagedIterable<NamespaceAsset> listByResourceGroup(String resourceGroupName, String namespaceName) {
        PagedIterable<NamespaceAssetInner> inner
            = this.serviceClient().listByResourceGroup(resourceGroupName, namespaceName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new NamespaceAssetImpl(inner1, this.manager()));
    }

    public PagedIterable<NamespaceAsset> listByResourceGroup(String resourceGroupName, String namespaceName,
        Context context) {
        PagedIterable<NamespaceAssetInner> inner
            = this.serviceClient().listByResourceGroup(resourceGroupName, namespaceName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new NamespaceAssetImpl(inner1, this.manager()));
    }

    public NamespaceAsset getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String namespaceName = ResourceManagerUtils.getValueFromIdByName(id, "namespaces");
        if (namespaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'namespaces'.", id)));
        }
        String assetName = ResourceManagerUtils.getValueFromIdByName(id, "assets");
        if (assetName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'assets'.", id)));
        }
        return this.getWithResponse(resourceGroupName, namespaceName, assetName, Context.NONE).getValue();
    }

    public Response<NamespaceAsset> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String namespaceName = ResourceManagerUtils.getValueFromIdByName(id, "namespaces");
        if (namespaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'namespaces'.", id)));
        }
        String assetName = ResourceManagerUtils.getValueFromIdByName(id, "assets");
        if (assetName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'assets'.", id)));
        }
        return this.getWithResponse(resourceGroupName, namespaceName, assetName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String namespaceName = ResourceManagerUtils.getValueFromIdByName(id, "namespaces");
        if (namespaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'namespaces'.", id)));
        }
        String assetName = ResourceManagerUtils.getValueFromIdByName(id, "assets");
        if (assetName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'assets'.", id)));
        }
        this.delete(resourceGroupName, namespaceName, assetName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String namespaceName = ResourceManagerUtils.getValueFromIdByName(id, "namespaces");
        if (namespaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'namespaces'.", id)));
        }
        String assetName = ResourceManagerUtils.getValueFromIdByName(id, "assets");
        if (assetName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'assets'.", id)));
        }
        this.delete(resourceGroupName, namespaceName, assetName, context);
    }

    private NamespaceAssetsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.deviceregistry.DeviceRegistryManager manager() {
        return this.serviceManager;
    }

    public NamespaceAssetImpl define(String name) {
        return new NamespaceAssetImpl(name, this.manager());
    }
}
