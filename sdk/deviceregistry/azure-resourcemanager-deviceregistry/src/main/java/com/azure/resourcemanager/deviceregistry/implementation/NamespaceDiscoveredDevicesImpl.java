// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.deviceregistry.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.deviceregistry.fluent.NamespaceDiscoveredDevicesClient;
import com.azure.resourcemanager.deviceregistry.fluent.models.NamespaceDiscoveredDeviceInner;
import com.azure.resourcemanager.deviceregistry.models.NamespaceDiscoveredDevice;
import com.azure.resourcemanager.deviceregistry.models.NamespaceDiscoveredDevices;

public final class NamespaceDiscoveredDevicesImpl implements NamespaceDiscoveredDevices {
    private static final ClientLogger LOGGER = new ClientLogger(NamespaceDiscoveredDevicesImpl.class);

    private final NamespaceDiscoveredDevicesClient innerClient;

    private final com.azure.resourcemanager.deviceregistry.DeviceRegistryManager serviceManager;

    public NamespaceDiscoveredDevicesImpl(NamespaceDiscoveredDevicesClient innerClient,
        com.azure.resourcemanager.deviceregistry.DeviceRegistryManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<NamespaceDiscoveredDevice> getWithResponse(String resourceGroupName, String namespaceName,
        String discoveredDeviceName, Context context) {
        Response<NamespaceDiscoveredDeviceInner> inner
            = this.serviceClient().getWithResponse(resourceGroupName, namespaceName, discoveredDeviceName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new NamespaceDiscoveredDeviceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public NamespaceDiscoveredDevice get(String resourceGroupName, String namespaceName, String discoveredDeviceName) {
        NamespaceDiscoveredDeviceInner inner
            = this.serviceClient().get(resourceGroupName, namespaceName, discoveredDeviceName);
        if (inner != null) {
            return new NamespaceDiscoveredDeviceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String namespaceName, String discoveredDeviceName) {
        this.serviceClient().delete(resourceGroupName, namespaceName, discoveredDeviceName);
    }

    public void delete(String resourceGroupName, String namespaceName, String discoveredDeviceName, Context context) {
        this.serviceClient().delete(resourceGroupName, namespaceName, discoveredDeviceName, context);
    }

    public PagedIterable<NamespaceDiscoveredDevice> listByResourceGroup(String resourceGroupName,
        String namespaceName) {
        PagedIterable<NamespaceDiscoveredDeviceInner> inner
            = this.serviceClient().listByResourceGroup(resourceGroupName, namespaceName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new NamespaceDiscoveredDeviceImpl(inner1, this.manager()));
    }

    public PagedIterable<NamespaceDiscoveredDevice> listByResourceGroup(String resourceGroupName, String namespaceName,
        Context context) {
        PagedIterable<NamespaceDiscoveredDeviceInner> inner
            = this.serviceClient().listByResourceGroup(resourceGroupName, namespaceName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new NamespaceDiscoveredDeviceImpl(inner1, this.manager()));
    }

    public NamespaceDiscoveredDevice getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String namespaceName = ResourceManagerUtils.getValueFromIdByName(id, "namespaces");
        if (namespaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'namespaces'.", id)));
        }
        String discoveredDeviceName = ResourceManagerUtils.getValueFromIdByName(id, "discoveredDevices");
        if (discoveredDeviceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'discoveredDevices'.", id)));
        }
        return this.getWithResponse(resourceGroupName, namespaceName, discoveredDeviceName, Context.NONE).getValue();
    }

    public Response<NamespaceDiscoveredDevice> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String namespaceName = ResourceManagerUtils.getValueFromIdByName(id, "namespaces");
        if (namespaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'namespaces'.", id)));
        }
        String discoveredDeviceName = ResourceManagerUtils.getValueFromIdByName(id, "discoveredDevices");
        if (discoveredDeviceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'discoveredDevices'.", id)));
        }
        return this.getWithResponse(resourceGroupName, namespaceName, discoveredDeviceName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String namespaceName = ResourceManagerUtils.getValueFromIdByName(id, "namespaces");
        if (namespaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'namespaces'.", id)));
        }
        String discoveredDeviceName = ResourceManagerUtils.getValueFromIdByName(id, "discoveredDevices");
        if (discoveredDeviceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'discoveredDevices'.", id)));
        }
        this.delete(resourceGroupName, namespaceName, discoveredDeviceName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String namespaceName = ResourceManagerUtils.getValueFromIdByName(id, "namespaces");
        if (namespaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'namespaces'.", id)));
        }
        String discoveredDeviceName = ResourceManagerUtils.getValueFromIdByName(id, "discoveredDevices");
        if (discoveredDeviceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'discoveredDevices'.", id)));
        }
        this.delete(resourceGroupName, namespaceName, discoveredDeviceName, context);
    }

    private NamespaceDiscoveredDevicesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.deviceregistry.DeviceRegistryManager manager() {
        return this.serviceManager;
    }

    public NamespaceDiscoveredDeviceImpl define(String name) {
        return new NamespaceDiscoveredDeviceImpl(name, this.manager());
    }
}
