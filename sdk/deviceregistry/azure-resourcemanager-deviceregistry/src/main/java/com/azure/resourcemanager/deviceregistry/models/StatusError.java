// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.deviceregistry.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Defines the status config error properties.
 */
@Immutable
public final class StatusError implements JsonSerializable<StatusError> {
    /*
     * Error code for classification of errors (ex: '400', '404', '500', etc.).
     */
    private String code;

    /*
     * Human-readable helpful error message to provide additional context for error (e.g.,: “Capability ID 'foo' does
     * not exist”).
     */
    private String message;

    /*
     * Array of error details that describe the status of each error.
     */
    private List<ErrorDetails> details;

    /**
     * Creates an instance of StatusError class.
     */
    private StatusError() {
    }

    /**
     * Get the code property: Error code for classification of errors (ex: '400', '404', '500', etc.).
     * 
     * @return the code value.
     */
    public String code() {
        return this.code;
    }

    /**
     * Get the message property: Human-readable helpful error message to provide additional context for error (e.g.,:
     * “Capability ID 'foo' does not exist”).
     * 
     * @return the message value.
     */
    public String message() {
        return this.message;
    }

    /**
     * Get the details property: Array of error details that describe the status of each error.
     * 
     * @return the details value.
     */
    public List<ErrorDetails> details() {
        return this.details;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (details() != null) {
            details().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StatusError from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of StatusError if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the StatusError.
     */
    public static StatusError fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            StatusError deserializedStatusError = new StatusError();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("code".equals(fieldName)) {
                    deserializedStatusError.code = reader.getString();
                } else if ("message".equals(fieldName)) {
                    deserializedStatusError.message = reader.getString();
                } else if ("details".equals(fieldName)) {
                    List<ErrorDetails> details = reader.readArray(reader1 -> ErrorDetails.fromJson(reader1));
                    deserializedStatusError.details = details;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedStatusError;
        });
    }
}
