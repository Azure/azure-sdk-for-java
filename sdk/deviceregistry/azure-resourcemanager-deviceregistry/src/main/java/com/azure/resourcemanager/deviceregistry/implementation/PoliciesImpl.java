// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.deviceregistry.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.deviceregistry.fluent.PoliciesClient;
import com.azure.resourcemanager.deviceregistry.fluent.models.PolicyInner;
import com.azure.resourcemanager.deviceregistry.models.Policies;
import com.azure.resourcemanager.deviceregistry.models.Policy;

public final class PoliciesImpl implements Policies {
    private static final ClientLogger LOGGER = new ClientLogger(PoliciesImpl.class);

    private final PoliciesClient innerClient;

    private final com.azure.resourcemanager.deviceregistry.DeviceRegistryManager serviceManager;

    public PoliciesImpl(PoliciesClient innerClient,
        com.azure.resourcemanager.deviceregistry.DeviceRegistryManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<Policy> getWithResponse(String resourceGroupName, String namespaceName, String policyName,
        Context context) {
        Response<PolicyInner> inner
            = this.serviceClient().getWithResponse(resourceGroupName, namespaceName, policyName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new PolicyImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public Policy get(String resourceGroupName, String namespaceName, String policyName) {
        PolicyInner inner = this.serviceClient().get(resourceGroupName, namespaceName, policyName);
        if (inner != null) {
            return new PolicyImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String namespaceName, String policyName) {
        this.serviceClient().delete(resourceGroupName, namespaceName, policyName);
    }

    public void delete(String resourceGroupName, String namespaceName, String policyName, Context context) {
        this.serviceClient().delete(resourceGroupName, namespaceName, policyName, context);
    }

    public PagedIterable<Policy> listByResourceGroup(String resourceGroupName, String namespaceName) {
        PagedIterable<PolicyInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName, namespaceName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new PolicyImpl(inner1, this.manager()));
    }

    public PagedIterable<Policy> listByResourceGroup(String resourceGroupName, String namespaceName, Context context) {
        PagedIterable<PolicyInner> inner
            = this.serviceClient().listByResourceGroup(resourceGroupName, namespaceName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new PolicyImpl(inner1, this.manager()));
    }

    public Policy getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String namespaceName = ResourceManagerUtils.getValueFromIdByName(id, "namespaces");
        if (namespaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'namespaces'.", id)));
        }
        String policyName = ResourceManagerUtils.getValueFromIdByName(id, "policies");
        if (policyName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'policies'.", id)));
        }
        return this.getWithResponse(resourceGroupName, namespaceName, policyName, Context.NONE).getValue();
    }

    public Response<Policy> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String namespaceName = ResourceManagerUtils.getValueFromIdByName(id, "namespaces");
        if (namespaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'namespaces'.", id)));
        }
        String policyName = ResourceManagerUtils.getValueFromIdByName(id, "policies");
        if (policyName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'policies'.", id)));
        }
        return this.getWithResponse(resourceGroupName, namespaceName, policyName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String namespaceName = ResourceManagerUtils.getValueFromIdByName(id, "namespaces");
        if (namespaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'namespaces'.", id)));
        }
        String policyName = ResourceManagerUtils.getValueFromIdByName(id, "policies");
        if (policyName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'policies'.", id)));
        }
        this.delete(resourceGroupName, namespaceName, policyName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String namespaceName = ResourceManagerUtils.getValueFromIdByName(id, "namespaces");
        if (namespaceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'namespaces'.", id)));
        }
        String policyName = ResourceManagerUtils.getValueFromIdByName(id, "policies");
        if (policyName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'policies'.", id)));
        }
        this.delete(resourceGroupName, namespaceName, policyName, context);
    }

    private PoliciesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.deviceregistry.DeviceRegistryManager manager() {
        return this.serviceManager;
    }

    public PolicyImpl define(String name) {
        return new PolicyImpl(name, this.manager());
    }
}
