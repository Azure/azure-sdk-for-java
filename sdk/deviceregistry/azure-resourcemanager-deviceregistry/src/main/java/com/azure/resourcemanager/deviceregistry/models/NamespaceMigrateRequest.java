// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.deviceregistry.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Request body for the migrate resources operation in to Namespace resource.
 */
@Fluent
public final class NamespaceMigrateRequest implements JsonSerializable<NamespaceMigrateRequest> {
    /*
     * Scope of the migrate resources operation.
     */
    private Scope scope;

    /*
     * List of asset resources to be migrated.
     */
    private List<String> resourceIds;

    /**
     * Creates an instance of NamespaceMigrateRequest class.
     */
    public NamespaceMigrateRequest() {
    }

    /**
     * Get the scope property: Scope of the migrate resources operation.
     * 
     * @return the scope value.
     */
    public Scope scope() {
        return this.scope;
    }

    /**
     * Set the scope property: Scope of the migrate resources operation.
     * 
     * @param scope the scope value to set.
     * @return the NamespaceMigrateRequest object itself.
     */
    public NamespaceMigrateRequest withScope(Scope scope) {
        this.scope = scope;
        return this;
    }

    /**
     * Get the resourceIds property: List of asset resources to be migrated.
     * 
     * @return the resourceIds value.
     */
    public List<String> resourceIds() {
        return this.resourceIds;
    }

    /**
     * Set the resourceIds property: List of asset resources to be migrated.
     * 
     * @param resourceIds the resourceIds value to set.
     * @return the NamespaceMigrateRequest object itself.
     */
    public NamespaceMigrateRequest withResourceIds(List<String> resourceIds) {
        this.resourceIds = resourceIds;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("scope", this.scope == null ? null : this.scope.toString());
        jsonWriter.writeArrayField("resourceIds", this.resourceIds, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NamespaceMigrateRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NamespaceMigrateRequest if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the NamespaceMigrateRequest.
     */
    public static NamespaceMigrateRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NamespaceMigrateRequest deserializedNamespaceMigrateRequest = new NamespaceMigrateRequest();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("scope".equals(fieldName)) {
                    deserializedNamespaceMigrateRequest.scope = Scope.fromString(reader.getString());
                } else if ("resourceIds".equals(fieldName)) {
                    List<String> resourceIds = reader.readArray(reader1 -> reader1.getString());
                    deserializedNamespaceMigrateRequest.resourceIds = resourceIds;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNamespaceMigrateRequest;
        });
    }
}
