// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.deviceregistry.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Certificate or private key that can be used by the southbound connector connecting to the shop floor/OT device. The
 * accepted extensions are .der for certificates and .pfx/.pem for private keys.
 */
@Fluent
public final class OwnCertificate implements JsonSerializable<OwnCertificate> {
    /*
     * Certificate thumbprint.
     */
    private String certThumbprint;

    /*
     * Secret Reference name (cert and private key).
     */
    private String certSecretReference;

    /*
     * Secret Reference Name (Pfx or Pem password).
     */
    private String certPasswordReference;

    /**
     * Creates an instance of OwnCertificate class.
     */
    public OwnCertificate() {
    }

    /**
     * Get the certThumbprint property: Certificate thumbprint.
     * 
     * @return the certThumbprint value.
     */
    public String certThumbprint() {
        return this.certThumbprint;
    }

    /**
     * Set the certThumbprint property: Certificate thumbprint.
     * 
     * @param certThumbprint the certThumbprint value to set.
     * @return the OwnCertificate object itself.
     */
    public OwnCertificate withCertThumbprint(String certThumbprint) {
        this.certThumbprint = certThumbprint;
        return this;
    }

    /**
     * Get the certSecretReference property: Secret Reference name (cert and private key).
     * 
     * @return the certSecretReference value.
     */
    public String certSecretReference() {
        return this.certSecretReference;
    }

    /**
     * Set the certSecretReference property: Secret Reference name (cert and private key).
     * 
     * @param certSecretReference the certSecretReference value to set.
     * @return the OwnCertificate object itself.
     */
    public OwnCertificate withCertSecretReference(String certSecretReference) {
        this.certSecretReference = certSecretReference;
        return this;
    }

    /**
     * Get the certPasswordReference property: Secret Reference Name (Pfx or Pem password).
     * 
     * @return the certPasswordReference value.
     */
    public String certPasswordReference() {
        return this.certPasswordReference;
    }

    /**
     * Set the certPasswordReference property: Secret Reference Name (Pfx or Pem password).
     * 
     * @param certPasswordReference the certPasswordReference value to set.
     * @return the OwnCertificate object itself.
     */
    public OwnCertificate withCertPasswordReference(String certPasswordReference) {
        this.certPasswordReference = certPasswordReference;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("certThumbprint", this.certThumbprint);
        jsonWriter.writeStringField("certSecretReference", this.certSecretReference);
        jsonWriter.writeStringField("certPasswordReference", this.certPasswordReference);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of OwnCertificate from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of OwnCertificate if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the OwnCertificate.
     */
    public static OwnCertificate fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            OwnCertificate deserializedOwnCertificate = new OwnCertificate();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("certThumbprint".equals(fieldName)) {
                    deserializedOwnCertificate.certThumbprint = reader.getString();
                } else if ("certSecretReference".equals(fieldName)) {
                    deserializedOwnCertificate.certSecretReference = reader.getString();
                } else if ("certPasswordReference".equals(fieldName)) {
                    deserializedOwnCertificate.certPasswordReference = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedOwnCertificate;
        });
    }
}
