// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.deviceregistry.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Defines the data point properties.
 */
@Fluent
public class DataPointBase implements JsonSerializable<DataPointBase> {
    /*
     * The name of the data point.
     */
    private String name;

    /*
     * The address of the source of the data in the asset (e.g. URL) so that a client can access the data source on the
     * asset.
     */
    private String dataSource;

    /*
     * Stringified JSON that contains connector-specific configuration for the data point. For OPC UA, this could
     * include configuration like, publishingInterval, samplingInterval, and queueSize.
     */
    private String dataPointConfiguration;

    /**
     * Creates an instance of DataPointBase class.
     */
    public DataPointBase() {
    }

    /**
     * Get the name property: The name of the data point.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: The name of the data point.
     * 
     * @param name the name value to set.
     * @return the DataPointBase object itself.
     */
    public DataPointBase withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the dataSource property: The address of the source of the data in the asset (e.g. URL) so that a client can
     * access the data source on the asset.
     * 
     * @return the dataSource value.
     */
    public String dataSource() {
        return this.dataSource;
    }

    /**
     * Set the dataSource property: The address of the source of the data in the asset (e.g. URL) so that a client can
     * access the data source on the asset.
     * 
     * @param dataSource the dataSource value to set.
     * @return the DataPointBase object itself.
     */
    public DataPointBase withDataSource(String dataSource) {
        this.dataSource = dataSource;
        return this;
    }

    /**
     * Get the dataPointConfiguration property: Stringified JSON that contains connector-specific configuration for the
     * data point. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and
     * queueSize.
     * 
     * @return the dataPointConfiguration value.
     */
    public String dataPointConfiguration() {
        return this.dataPointConfiguration;
    }

    /**
     * Set the dataPointConfiguration property: Stringified JSON that contains connector-specific configuration for the
     * data point. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and
     * queueSize.
     * 
     * @param dataPointConfiguration the dataPointConfiguration value to set.
     * @return the DataPointBase object itself.
     */
    public DataPointBase withDataPointConfiguration(String dataPointConfiguration) {
        this.dataPointConfiguration = dataPointConfiguration;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (name() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property name in model DataPointBase"));
        }
        if (dataSource() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property dataSource in model DataPointBase"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(DataPointBase.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("dataSource", this.dataSource);
        jsonWriter.writeStringField("dataPointConfiguration", this.dataPointConfiguration);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DataPointBase from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DataPointBase if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DataPointBase.
     */
    public static DataPointBase fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DataPointBase deserializedDataPointBase = new DataPointBase();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedDataPointBase.name = reader.getString();
                } else if ("dataSource".equals(fieldName)) {
                    deserializedDataPointBase.dataSource = reader.getString();
                } else if ("dataPointConfiguration".equals(fieldName)) {
                    deserializedDataPointBase.dataPointConfiguration = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDataPointBase;
        });
    }
}
