// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.deviceregistry.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * Defines the schema properties.
 */
@Fluent
public final class SchemaProperties implements JsonSerializable<SchemaProperties> {
    /*
     * Globally unique, immutable, non-reusable id.
     */
    private String uuid;

    /*
     * Human-readable display name.
     */
    private String displayName;

    /*
     * Human-readable description of the schema.
     */
    private String description;

    /*
     * Format of the schema.
     */
    private Format format;

    /*
     * Type of the schema.
     */
    private SchemaType schemaType;

    /*
     * Provisioning state of the resource.
     */
    private ProvisioningState provisioningState;

    /*
     * Schema tags.
     */
    private Map<String, String> tags;

    /**
     * Creates an instance of SchemaProperties class.
     */
    public SchemaProperties() {
    }

    /**
     * Get the uuid property: Globally unique, immutable, non-reusable id.
     * 
     * @return the uuid value.
     */
    public String uuid() {
        return this.uuid;
    }

    /**
     * Get the displayName property: Human-readable display name.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: Human-readable display name.
     * 
     * @param displayName the displayName value to set.
     * @return the SchemaProperties object itself.
     */
    public SchemaProperties withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the description property: Human-readable description of the schema.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: Human-readable description of the schema.
     * 
     * @param description the description value to set.
     * @return the SchemaProperties object itself.
     */
    public SchemaProperties withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the format property: Format of the schema.
     * 
     * @return the format value.
     */
    public Format format() {
        return this.format;
    }

    /**
     * Set the format property: Format of the schema.
     * 
     * @param format the format value to set.
     * @return the SchemaProperties object itself.
     */
    public SchemaProperties withFormat(Format format) {
        this.format = format;
        return this;
    }

    /**
     * Get the schemaType property: Type of the schema.
     * 
     * @return the schemaType value.
     */
    public SchemaType schemaType() {
        return this.schemaType;
    }

    /**
     * Set the schemaType property: Type of the schema.
     * 
     * @param schemaType the schemaType value to set.
     * @return the SchemaProperties object itself.
     */
    public SchemaProperties withSchemaType(SchemaType schemaType) {
        this.schemaType = schemaType;
        return this;
    }

    /**
     * Get the provisioningState property: Provisioning state of the resource.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the tags property: Schema tags.
     * 
     * @return the tags value.
     */
    public Map<String, String> tags() {
        return this.tags;
    }

    /**
     * Set the tags property: Schema tags.
     * 
     * @param tags the tags value to set.
     * @return the SchemaProperties object itself.
     */
    public SchemaProperties withTags(Map<String, String> tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (format() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property format in model SchemaProperties"));
        }
        if (schemaType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property schemaType in model SchemaProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(SchemaProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("format", this.format == null ? null : this.format.toString());
        jsonWriter.writeStringField("schemaType", this.schemaType == null ? null : this.schemaType.toString());
        jsonWriter.writeStringField("displayName", this.displayName);
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeMapField("tags", this.tags, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SchemaProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SchemaProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SchemaProperties.
     */
    public static SchemaProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SchemaProperties deserializedSchemaProperties = new SchemaProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("format".equals(fieldName)) {
                    deserializedSchemaProperties.format = Format.fromString(reader.getString());
                } else if ("schemaType".equals(fieldName)) {
                    deserializedSchemaProperties.schemaType = SchemaType.fromString(reader.getString());
                } else if ("uuid".equals(fieldName)) {
                    deserializedSchemaProperties.uuid = reader.getString();
                } else if ("displayName".equals(fieldName)) {
                    deserializedSchemaProperties.displayName = reader.getString();
                } else if ("description".equals(fieldName)) {
                    deserializedSchemaProperties.description = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedSchemaProperties.provisioningState = ProvisioningState.fromString(reader.getString());
                } else if ("tags".equals(fieldName)) {
                    Map<String, String> tags = reader.readMap(reader1 -> reader1.getString());
                    deserializedSchemaProperties.tags = tags;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSchemaProperties;
        });
    }
}
