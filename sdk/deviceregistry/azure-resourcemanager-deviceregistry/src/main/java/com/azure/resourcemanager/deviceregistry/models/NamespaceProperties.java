// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.deviceregistry.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The namespace properties model.
 */
@Fluent
public final class NamespaceProperties implements JsonSerializable<NamespaceProperties> {
    /*
     * Globally unique, immutable, non-reusable ID.
     */
    private String uuid;

    /*
     * Assigned and unassigned messaging endpoints.
     */
    private Messaging messaging;

    /*
     * Provisioning state of the resource.
     */
    private ProvisioningState provisioningState;

    /**
     * Creates an instance of NamespaceProperties class.
     */
    public NamespaceProperties() {
    }

    /**
     * Get the uuid property: Globally unique, immutable, non-reusable ID.
     * 
     * @return the uuid value.
     */
    public String uuid() {
        return this.uuid;
    }

    /**
     * Get the messaging property: Assigned and unassigned messaging endpoints.
     * 
     * @return the messaging value.
     */
    public Messaging messaging() {
        return this.messaging;
    }

    /**
     * Set the messaging property: Assigned and unassigned messaging endpoints.
     * 
     * @param messaging the messaging value to set.
     * @return the NamespaceProperties object itself.
     */
    public NamespaceProperties withMessaging(Messaging messaging) {
        this.messaging = messaging;
        return this;
    }

    /**
     * Get the provisioningState property: Provisioning state of the resource.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (messaging() != null) {
            messaging().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("messaging", this.messaging);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NamespaceProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NamespaceProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the NamespaceProperties.
     */
    public static NamespaceProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NamespaceProperties deserializedNamespaceProperties = new NamespaceProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("uuid".equals(fieldName)) {
                    deserializedNamespaceProperties.uuid = reader.getString();
                } else if ("messaging".equals(fieldName)) {
                    deserializedNamespaceProperties.messaging = Messaging.fromJson(reader);
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedNamespaceProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNamespaceProperties;
        });
    }
}
