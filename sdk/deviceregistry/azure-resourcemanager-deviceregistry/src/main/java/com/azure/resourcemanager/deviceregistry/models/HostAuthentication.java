// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.deviceregistry.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of the client authentication mechanism to the host.
 */
@Fluent
public final class HostAuthentication implements JsonSerializable<HostAuthentication> {
    /*
     * Defines the method to authenticate the user of the client at the server.
     */
    private AuthenticationMethod method;

    /*
     * Defines the username and password references when UsernamePassword user authentication mode is selected.
     */
    private UsernamePasswordCredentials usernamePasswordCredentials;

    /*
     * Defines the certificate reference when Certificate user authentication mode is selected.
     */
    private X509CertificateCredentials x509Credentials;

    /**
     * Creates an instance of HostAuthentication class.
     */
    public HostAuthentication() {
    }

    /**
     * Get the method property: Defines the method to authenticate the user of the client at the server.
     * 
     * @return the method value.
     */
    public AuthenticationMethod method() {
        return this.method;
    }

    /**
     * Set the method property: Defines the method to authenticate the user of the client at the server.
     * 
     * @param method the method value to set.
     * @return the HostAuthentication object itself.
     */
    public HostAuthentication withMethod(AuthenticationMethod method) {
        this.method = method;
        return this;
    }

    /**
     * Get the usernamePasswordCredentials property: Defines the username and password references when UsernamePassword
     * user authentication mode is selected.
     * 
     * @return the usernamePasswordCredentials value.
     */
    public UsernamePasswordCredentials usernamePasswordCredentials() {
        return this.usernamePasswordCredentials;
    }

    /**
     * Set the usernamePasswordCredentials property: Defines the username and password references when UsernamePassword
     * user authentication mode is selected.
     * 
     * @param usernamePasswordCredentials the usernamePasswordCredentials value to set.
     * @return the HostAuthentication object itself.
     */
    public HostAuthentication withUsernamePasswordCredentials(UsernamePasswordCredentials usernamePasswordCredentials) {
        this.usernamePasswordCredentials = usernamePasswordCredentials;
        return this;
    }

    /**
     * Get the x509Credentials property: Defines the certificate reference when Certificate user authentication mode is
     * selected.
     * 
     * @return the x509Credentials value.
     */
    public X509CertificateCredentials x509Credentials() {
        return this.x509Credentials;
    }

    /**
     * Set the x509Credentials property: Defines the certificate reference when Certificate user authentication mode is
     * selected.
     * 
     * @param x509Credentials the x509Credentials value to set.
     * @return the HostAuthentication object itself.
     */
    public HostAuthentication withX509Credentials(X509CertificateCredentials x509Credentials) {
        this.x509Credentials = x509Credentials;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("method", this.method == null ? null : this.method.toString());
        jsonWriter.writeJsonField("usernamePasswordCredentials", this.usernamePasswordCredentials);
        jsonWriter.writeJsonField("x509Credentials", this.x509Credentials);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of HostAuthentication from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of HostAuthentication if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the HostAuthentication.
     */
    public static HostAuthentication fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            HostAuthentication deserializedHostAuthentication = new HostAuthentication();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("method".equals(fieldName)) {
                    deserializedHostAuthentication.method = AuthenticationMethod.fromString(reader.getString());
                } else if ("usernamePasswordCredentials".equals(fieldName)) {
                    deserializedHostAuthentication.usernamePasswordCredentials
                        = UsernamePasswordCredentials.fromJson(reader);
                } else if ("x509Credentials".equals(fieldName)) {
                    deserializedHostAuthentication.x509Credentials = X509CertificateCredentials.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedHostAuthentication;
        });
    }
}
