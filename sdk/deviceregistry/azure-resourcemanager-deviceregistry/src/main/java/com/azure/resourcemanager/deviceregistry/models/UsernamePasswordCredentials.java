// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.deviceregistry.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The credentials for authentication mode UsernamePassword.
 */
@Fluent
public final class UsernamePasswordCredentials implements JsonSerializable<UsernamePasswordCredentials> {
    /*
     * A reference to secret containing the username.
     */
    private String usernameReference;

    /*
     * A reference to secret containing the password.
     */
    private String passwordReference;

    /**
     * Creates an instance of UsernamePasswordCredentials class.
     */
    public UsernamePasswordCredentials() {
    }

    /**
     * Get the usernameReference property: A reference to secret containing the username.
     * 
     * @return the usernameReference value.
     */
    public String usernameReference() {
        return this.usernameReference;
    }

    /**
     * Set the usernameReference property: A reference to secret containing the username.
     * 
     * @param usernameReference the usernameReference value to set.
     * @return the UsernamePasswordCredentials object itself.
     */
    public UsernamePasswordCredentials withUsernameReference(String usernameReference) {
        this.usernameReference = usernameReference;
        return this;
    }

    /**
     * Get the passwordReference property: A reference to secret containing the password.
     * 
     * @return the passwordReference value.
     */
    public String passwordReference() {
        return this.passwordReference;
    }

    /**
     * Set the passwordReference property: A reference to secret containing the password.
     * 
     * @param passwordReference the passwordReference value to set.
     * @return the UsernamePasswordCredentials object itself.
     */
    public UsernamePasswordCredentials withPasswordReference(String passwordReference) {
        this.passwordReference = passwordReference;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (usernameReference() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property usernameReference in model UsernamePasswordCredentials"));
        }
        if (passwordReference() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property passwordReference in model UsernamePasswordCredentials"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(UsernamePasswordCredentials.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("usernameReference", this.usernameReference);
        jsonWriter.writeStringField("passwordReference", this.passwordReference);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of UsernamePasswordCredentials from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of UsernamePasswordCredentials if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the UsernamePasswordCredentials.
     */
    public static UsernamePasswordCredentials fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            UsernamePasswordCredentials deserializedUsernamePasswordCredentials = new UsernamePasswordCredentials();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("usernameReference".equals(fieldName)) {
                    deserializedUsernamePasswordCredentials.usernameReference = reader.getString();
                } else if ("passwordReference".equals(fieldName)) {
                    deserializedUsernamePasswordCredentials.passwordReference = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedUsernamePasswordCredentials;
        });
    }
}
