// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.deviceregistry.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Defines the message schema reference properties.
 */
@Immutable
public final class MessageSchemaReference implements JsonSerializable<MessageSchemaReference> {
    /*
     * The message schema registry namespace.
     */
    private String schemaRegistryNamespace;

    /*
     * The message schema name.
     */
    private String schemaName;

    /*
     * The message schema version.
     */
    private String schemaVersion;

    /**
     * Creates an instance of MessageSchemaReference class.
     */
    private MessageSchemaReference() {
    }

    /**
     * Get the schemaRegistryNamespace property: The message schema registry namespace.
     * 
     * @return the schemaRegistryNamespace value.
     */
    public String schemaRegistryNamespace() {
        return this.schemaRegistryNamespace;
    }

    /**
     * Get the schemaName property: The message schema name.
     * 
     * @return the schemaName value.
     */
    public String schemaName() {
        return this.schemaName;
    }

    /**
     * Get the schemaVersion property: The message schema version.
     * 
     * @return the schemaVersion value.
     */
    public String schemaVersion() {
        return this.schemaVersion;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MessageSchemaReference from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MessageSchemaReference if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the MessageSchemaReference.
     */
    public static MessageSchemaReference fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MessageSchemaReference deserializedMessageSchemaReference = new MessageSchemaReference();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("schemaRegistryNamespace".equals(fieldName)) {
                    deserializedMessageSchemaReference.schemaRegistryNamespace = reader.getString();
                } else if ("schemaName".equals(fieldName)) {
                    deserializedMessageSchemaReference.schemaName = reader.getString();
                } else if ("schemaVersion".equals(fieldName)) {
                    deserializedMessageSchemaReference.schemaVersion = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMessageSchemaReference;
        });
    }
}
