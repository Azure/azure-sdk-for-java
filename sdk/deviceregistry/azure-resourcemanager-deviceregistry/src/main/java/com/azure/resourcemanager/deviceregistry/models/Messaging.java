// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.deviceregistry.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * The namespace messaging endpoints model.
 */
@Fluent
public final class Messaging implements JsonSerializable<Messaging> {
    /*
     * Dictionary of messaging endpoints.
     */
    private Map<String, MessagingEndpoint> endpoints;

    /**
     * Creates an instance of Messaging class.
     */
    public Messaging() {
    }

    /**
     * Get the endpoints property: Dictionary of messaging endpoints.
     * 
     * @return the endpoints value.
     */
    public Map<String, MessagingEndpoint> endpoints() {
        return this.endpoints;
    }

    /**
     * Set the endpoints property: Dictionary of messaging endpoints.
     * 
     * @param endpoints the endpoints value to set.
     * @return the Messaging object itself.
     */
    public Messaging withEndpoints(Map<String, MessagingEndpoint> endpoints) {
        this.endpoints = endpoints;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (endpoints() != null) {
            endpoints().values().forEach(e -> {
                if (e != null) {
                    e.validate();
                }
            });
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeMapField("endpoints", this.endpoints, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Messaging from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Messaging if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the Messaging.
     */
    public static Messaging fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Messaging deserializedMessaging = new Messaging();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("endpoints".equals(fieldName)) {
                    Map<String, MessagingEndpoint> endpoints
                        = reader.readMap(reader1 -> MessagingEndpoint.fromJson(reader1));
                    deserializedMessaging.endpoints = endpoints;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMessaging;
        });
    }
}
