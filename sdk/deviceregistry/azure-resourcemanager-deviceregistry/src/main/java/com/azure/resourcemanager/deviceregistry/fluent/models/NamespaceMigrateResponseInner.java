// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.deviceregistry.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.deviceregistry.models.MigrateResult;
import java.io.IOException;
import java.util.List;

/**
 * Response for the migrate asset resources operation into Namespace resource.
 */
@Immutable
public final class NamespaceMigrateResponseInner implements JsonSerializable<NamespaceMigrateResponseInner> {
    /*
     * List of migrate results containing result of each asset migrate operation.
     */
    private List<MigrateResult> migrateResults;

    /**
     * Creates an instance of NamespaceMigrateResponseInner class.
     */
    private NamespaceMigrateResponseInner() {
    }

    /**
     * Get the migrateResults property: List of migrate results containing result of each asset migrate operation.
     * 
     * @return the migrateResults value.
     */
    public List<MigrateResult> migrateResults() {
        return this.migrateResults;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("migrateResults", this.migrateResults,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NamespaceMigrateResponseInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NamespaceMigrateResponseInner if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the NamespaceMigrateResponseInner.
     */
    public static NamespaceMigrateResponseInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NamespaceMigrateResponseInner deserializedNamespaceMigrateResponseInner
                = new NamespaceMigrateResponseInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("migrateResults".equals(fieldName)) {
                    List<MigrateResult> migrateResults = reader.readArray(reader1 -> MigrateResult.fromJson(reader1));
                    deserializedNamespaceMigrateResponseInner.migrateResults = migrateResults;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNamespaceMigrateResponseInner;
        });
    }
}
