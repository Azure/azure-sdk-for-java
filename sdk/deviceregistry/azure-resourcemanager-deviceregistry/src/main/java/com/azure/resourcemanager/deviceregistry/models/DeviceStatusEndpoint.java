// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.deviceregistry.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Defines the device status properties.
 */
@Immutable
public final class DeviceStatusEndpoint implements JsonSerializable<DeviceStatusEndpoint> {
    /*
     * Defines the error related to this endpoint.
     */
    private StatusError error;

    /**
     * Creates an instance of DeviceStatusEndpoint class.
     */
    private DeviceStatusEndpoint() {
    }

    /**
     * Get the error property: Defines the error related to this endpoint.
     * 
     * @return the error value.
     */
    public StatusError error() {
        return this.error;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DeviceStatusEndpoint from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DeviceStatusEndpoint if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DeviceStatusEndpoint.
     */
    public static DeviceStatusEndpoint fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DeviceStatusEndpoint deserializedDeviceStatusEndpoint = new DeviceStatusEndpoint();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("error".equals(fieldName)) {
                    deserializedDeviceStatusEndpoint.error = StatusError.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDeviceStatusEndpoint;
        });
    }
}
