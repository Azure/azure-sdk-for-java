// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.deviceregistry.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Defines the dataset properties.
 */
@Fluent
public final class NamespaceDataset implements JsonSerializable<NamespaceDataset> {
    /*
     * Name of the dataset.
     */
    private String name;

    /*
     * Reference to a data source for a given dataset.
     */
    private String dataSource;

    /*
     * URI or type definition ID.
     */
    private String typeRef;

    /*
     * Stringified JSON that contains connector-specific JSON string that describes configuration for the specific
     * dataset.
     */
    private String datasetConfiguration;

    /*
     * Destinations for a dataset.
     */
    private List<DatasetDestination> destinations;

    /*
     * Array of data points that are part of the dataset. Each data point can have per-data point configuration.
     */
    private List<NamespaceDatasetDataPoint> dataPoints;

    /**
     * Creates an instance of NamespaceDataset class.
     */
    public NamespaceDataset() {
    }

    /**
     * Get the name property: Name of the dataset.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: Name of the dataset.
     * 
     * @param name the name value to set.
     * @return the NamespaceDataset object itself.
     */
    public NamespaceDataset withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the dataSource property: Reference to a data source for a given dataset.
     * 
     * @return the dataSource value.
     */
    public String dataSource() {
        return this.dataSource;
    }

    /**
     * Set the dataSource property: Reference to a data source for a given dataset.
     * 
     * @param dataSource the dataSource value to set.
     * @return the NamespaceDataset object itself.
     */
    public NamespaceDataset withDataSource(String dataSource) {
        this.dataSource = dataSource;
        return this;
    }

    /**
     * Get the typeRef property: URI or type definition ID.
     * 
     * @return the typeRef value.
     */
    public String typeRef() {
        return this.typeRef;
    }

    /**
     * Set the typeRef property: URI or type definition ID.
     * 
     * @param typeRef the typeRef value to set.
     * @return the NamespaceDataset object itself.
     */
    public NamespaceDataset withTypeRef(String typeRef) {
        this.typeRef = typeRef;
        return this;
    }

    /**
     * Get the datasetConfiguration property: Stringified JSON that contains connector-specific JSON string that
     * describes configuration for the specific dataset.
     * 
     * @return the datasetConfiguration value.
     */
    public String datasetConfiguration() {
        return this.datasetConfiguration;
    }

    /**
     * Set the datasetConfiguration property: Stringified JSON that contains connector-specific JSON string that
     * describes configuration for the specific dataset.
     * 
     * @param datasetConfiguration the datasetConfiguration value to set.
     * @return the NamespaceDataset object itself.
     */
    public NamespaceDataset withDatasetConfiguration(String datasetConfiguration) {
        this.datasetConfiguration = datasetConfiguration;
        return this;
    }

    /**
     * Get the destinations property: Destinations for a dataset.
     * 
     * @return the destinations value.
     */
    public List<DatasetDestination> destinations() {
        return this.destinations;
    }

    /**
     * Set the destinations property: Destinations for a dataset.
     * 
     * @param destinations the destinations value to set.
     * @return the NamespaceDataset object itself.
     */
    public NamespaceDataset withDestinations(List<DatasetDestination> destinations) {
        this.destinations = destinations;
        return this;
    }

    /**
     * Get the dataPoints property: Array of data points that are part of the dataset. Each data point can have per-data
     * point configuration.
     * 
     * @return the dataPoints value.
     */
    public List<NamespaceDatasetDataPoint> dataPoints() {
        return this.dataPoints;
    }

    /**
     * Set the dataPoints property: Array of data points that are part of the dataset. Each data point can have per-data
     * point configuration.
     * 
     * @param dataPoints the dataPoints value to set.
     * @return the NamespaceDataset object itself.
     */
    public NamespaceDataset withDataPoints(List<NamespaceDatasetDataPoint> dataPoints) {
        this.dataPoints = dataPoints;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (name() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property name in model NamespaceDataset"));
        }
        if (destinations() != null) {
            destinations().forEach(e -> e.validate());
        }
        if (dataPoints() != null) {
            dataPoints().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(NamespaceDataset.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("dataSource", this.dataSource);
        jsonWriter.writeStringField("typeRef", this.typeRef);
        jsonWriter.writeStringField("datasetConfiguration", this.datasetConfiguration);
        jsonWriter.writeArrayField("destinations", this.destinations, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("dataPoints", this.dataPoints, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NamespaceDataset from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NamespaceDataset if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the NamespaceDataset.
     */
    public static NamespaceDataset fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NamespaceDataset deserializedNamespaceDataset = new NamespaceDataset();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedNamespaceDataset.name = reader.getString();
                } else if ("dataSource".equals(fieldName)) {
                    deserializedNamespaceDataset.dataSource = reader.getString();
                } else if ("typeRef".equals(fieldName)) {
                    deserializedNamespaceDataset.typeRef = reader.getString();
                } else if ("datasetConfiguration".equals(fieldName)) {
                    deserializedNamespaceDataset.datasetConfiguration = reader.getString();
                } else if ("destinations".equals(fieldName)) {
                    List<DatasetDestination> destinations
                        = reader.readArray(reader1 -> DatasetDestination.fromJson(reader1));
                    deserializedNamespaceDataset.destinations = destinations;
                } else if ("dataPoints".equals(fieldName)) {
                    List<NamespaceDatasetDataPoint> dataPoints
                        = reader.readArray(reader1 -> NamespaceDatasetDataPoint.fromJson(reader1));
                    deserializedNamespaceDataset.dataPoints = dataPoints;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNamespaceDataset;
        });
    }
}
