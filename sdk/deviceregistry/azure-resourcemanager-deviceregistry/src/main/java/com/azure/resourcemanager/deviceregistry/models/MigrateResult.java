// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.deviceregistry.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Result of Migrate operation of asset resource into Namespace resource.
 */
@Immutable
public final class MigrateResult implements JsonSerializable<MigrateResult> {
    /*
     * The resource Id of the asset resource.
     */
    private String resourceId;

    /*
     * The result of the migrate operation.
     */
    private MigrateResultType result;

    /*
     * The error if the migrate operation is not successful.
     */
    private Error error;

    /**
     * Creates an instance of MigrateResult class.
     */
    private MigrateResult() {
    }

    /**
     * Get the resourceId property: The resource Id of the asset resource.
     * 
     * @return the resourceId value.
     */
    public String resourceId() {
        return this.resourceId;
    }

    /**
     * Get the result property: The result of the migrate operation.
     * 
     * @return the result value.
     */
    public MigrateResultType result() {
        return this.result;
    }

    /**
     * Get the error property: The error if the migrate operation is not successful.
     * 
     * @return the error value.
     */
    public Error error() {
        return this.error;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (error() != null) {
            error().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("resourceId", this.resourceId);
        jsonWriter.writeStringField("result", this.result == null ? null : this.result.toString());
        jsonWriter.writeJsonField("error", this.error);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MigrateResult from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MigrateResult if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the MigrateResult.
     */
    public static MigrateResult fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MigrateResult deserializedMigrateResult = new MigrateResult();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("resourceId".equals(fieldName)) {
                    deserializedMigrateResult.resourceId = reader.getString();
                } else if ("result".equals(fieldName)) {
                    deserializedMigrateResult.result = MigrateResultType.fromString(reader.getString());
                } else if ("error".equals(fieldName)) {
                    deserializedMigrateResult.error = Error.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMigrateResult;
        });
    }
}
