// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.deviceregistry.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Defines which device and endpoint to use for this asset.
 */
@Fluent
public final class DeviceRef implements JsonSerializable<DeviceRef> {
    /*
     * Name of the device resource
     */
    private String deviceName;

    /*
     * The name of endpoint to use
     */
    private String endpointName;

    /**
     * Creates an instance of DeviceRef class.
     */
    public DeviceRef() {
    }

    /**
     * Get the deviceName property: Name of the device resource.
     * 
     * @return the deviceName value.
     */
    public String deviceName() {
        return this.deviceName;
    }

    /**
     * Set the deviceName property: Name of the device resource.
     * 
     * @param deviceName the deviceName value to set.
     * @return the DeviceRef object itself.
     */
    public DeviceRef withDeviceName(String deviceName) {
        this.deviceName = deviceName;
        return this;
    }

    /**
     * Get the endpointName property: The name of endpoint to use.
     * 
     * @return the endpointName value.
     */
    public String endpointName() {
        return this.endpointName;
    }

    /**
     * Set the endpointName property: The name of endpoint to use.
     * 
     * @param endpointName the endpointName value to set.
     * @return the DeviceRef object itself.
     */
    public DeviceRef withEndpointName(String endpointName) {
        this.endpointName = endpointName;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("deviceName", this.deviceName);
        jsonWriter.writeStringField("endpointName", this.endpointName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DeviceRef from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DeviceRef if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DeviceRef.
     */
    public static DeviceRef fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DeviceRef deserializedDeviceRef = new DeviceRef();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("deviceName".equals(fieldName)) {
                    deserializedDeviceRef.deviceName = reader.getString();
                } else if ("endpointName".equals(fieldName)) {
                    deserializedDeviceRef.endpointName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDeviceRef;
        });
    }
}
