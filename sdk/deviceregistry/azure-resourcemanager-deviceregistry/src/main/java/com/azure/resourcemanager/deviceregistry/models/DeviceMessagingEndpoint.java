// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.deviceregistry.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Device messaging endpoint model.
 */
@Fluent
public final class DeviceMessagingEndpoint implements JsonSerializable<DeviceMessagingEndpoint> {
    /*
     * Type of connection used for the messaging endpoint.
     */
    private String endpointType;

    /*
     * The endpoint address to connect to.
     */
    private String address;

    /**
     * Creates an instance of DeviceMessagingEndpoint class.
     */
    public DeviceMessagingEndpoint() {
    }

    /**
     * Get the endpointType property: Type of connection used for the messaging endpoint.
     * 
     * @return the endpointType value.
     */
    public String endpointType() {
        return this.endpointType;
    }

    /**
     * Set the endpointType property: Type of connection used for the messaging endpoint.
     * 
     * @param endpointType the endpointType value to set.
     * @return the DeviceMessagingEndpoint object itself.
     */
    public DeviceMessagingEndpoint withEndpointType(String endpointType) {
        this.endpointType = endpointType;
        return this;
    }

    /**
     * Get the address property: The endpoint address to connect to.
     * 
     * @return the address value.
     */
    public String address() {
        return this.address;
    }

    /**
     * Set the address property: The endpoint address to connect to.
     * 
     * @param address the address value to set.
     * @return the DeviceMessagingEndpoint object itself.
     */
    public DeviceMessagingEndpoint withAddress(String address) {
        this.address = address;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("address", this.address);
        jsonWriter.writeStringField("endpointType", this.endpointType);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DeviceMessagingEndpoint from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DeviceMessagingEndpoint if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DeviceMessagingEndpoint.
     */
    public static DeviceMessagingEndpoint fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DeviceMessagingEndpoint deserializedDeviceMessagingEndpoint = new DeviceMessagingEndpoint();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("address".equals(fieldName)) {
                    deserializedDeviceMessagingEndpoint.address = reader.getString();
                } else if ("endpointType".equals(fieldName)) {
                    deserializedDeviceMessagingEndpoint.endpointType = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDeviceMessagingEndpoint;
        });
    }
}
