// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.deviceregistry.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * An endpoint to connect to the device.
 */
@Fluent
public final class InboundEndpoints implements JsonSerializable<InboundEndpoints> {
    /*
     * Type of connection endpoint.
     */
    private String endpointType;

    /*
     * The endpoint address & port. This can be either an IP address (e.g., 192.168.1.1) or a fully qualified domain
     * name (FQDN, e.g., server.example.com).
     */
    private String address;

    /*
     * Protocol version associated with the endpoint e.g. 1 or 2 for endpointType Microsoft.HTTP, and 3.5 or 5.0 for
     * endpointType Microsoft.Mqtt etc.
     */
    private String version;

    /*
     * Defines the client authentication mechanism to the server.
     */
    private HostAuthentication authentication;

    /*
     * Defines server trust settings for the endpoint.
     */
    private TrustSettings trustSettings;

    /*
     * Stringified JSON that contains configuration to be used by the connector (e.g., OPC UA, ONVIF).
     */
    private String additionalConfiguration;

    /**
     * Creates an instance of InboundEndpoints class.
     */
    public InboundEndpoints() {
    }

    /**
     * Get the endpointType property: Type of connection endpoint.
     * 
     * @return the endpointType value.
     */
    public String endpointType() {
        return this.endpointType;
    }

    /**
     * Set the endpointType property: Type of connection endpoint.
     * 
     * @param endpointType the endpointType value to set.
     * @return the InboundEndpoints object itself.
     */
    public InboundEndpoints withEndpointType(String endpointType) {
        this.endpointType = endpointType;
        return this;
    }

    /**
     * Get the address property: The endpoint address &amp; port. This can be either an IP address (e.g., 192.168.1.1)
     * or a fully qualified domain name (FQDN, e.g., server.example.com).
     * 
     * @return the address value.
     */
    public String address() {
        return this.address;
    }

    /**
     * Set the address property: The endpoint address &amp; port. This can be either an IP address (e.g., 192.168.1.1)
     * or a fully qualified domain name (FQDN, e.g., server.example.com).
     * 
     * @param address the address value to set.
     * @return the InboundEndpoints object itself.
     */
    public InboundEndpoints withAddress(String address) {
        this.address = address;
        return this;
    }

    /**
     * Get the version property: Protocol version associated with the endpoint e.g. 1 or 2 for endpointType
     * Microsoft.HTTP, and 3.5 or 5.0 for endpointType Microsoft.Mqtt etc.
     * 
     * @return the version value.
     */
    public String version() {
        return this.version;
    }

    /**
     * Set the version property: Protocol version associated with the endpoint e.g. 1 or 2 for endpointType
     * Microsoft.HTTP, and 3.5 or 5.0 for endpointType Microsoft.Mqtt etc.
     * 
     * @param version the version value to set.
     * @return the InboundEndpoints object itself.
     */
    public InboundEndpoints withVersion(String version) {
        this.version = version;
        return this;
    }

    /**
     * Get the authentication property: Defines the client authentication mechanism to the server.
     * 
     * @return the authentication value.
     */
    public HostAuthentication authentication() {
        return this.authentication;
    }

    /**
     * Set the authentication property: Defines the client authentication mechanism to the server.
     * 
     * @param authentication the authentication value to set.
     * @return the InboundEndpoints object itself.
     */
    public InboundEndpoints withAuthentication(HostAuthentication authentication) {
        this.authentication = authentication;
        return this;
    }

    /**
     * Get the trustSettings property: Defines server trust settings for the endpoint.
     * 
     * @return the trustSettings value.
     */
    public TrustSettings trustSettings() {
        return this.trustSettings;
    }

    /**
     * Set the trustSettings property: Defines server trust settings for the endpoint.
     * 
     * @param trustSettings the trustSettings value to set.
     * @return the InboundEndpoints object itself.
     */
    public InboundEndpoints withTrustSettings(TrustSettings trustSettings) {
        this.trustSettings = trustSettings;
        return this;
    }

    /**
     * Get the additionalConfiguration property: Stringified JSON that contains configuration to be used by the
     * connector (e.g., OPC UA, ONVIF).
     * 
     * @return the additionalConfiguration value.
     */
    public String additionalConfiguration() {
        return this.additionalConfiguration;
    }

    /**
     * Set the additionalConfiguration property: Stringified JSON that contains configuration to be used by the
     * connector (e.g., OPC UA, ONVIF).
     * 
     * @param additionalConfiguration the additionalConfiguration value to set.
     * @return the InboundEndpoints object itself.
     */
    public InboundEndpoints withAdditionalConfiguration(String additionalConfiguration) {
        this.additionalConfiguration = additionalConfiguration;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (endpointType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property endpointType in model InboundEndpoints"));
        }
        if (address() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property address in model InboundEndpoints"));
        }
        if (authentication() != null) {
            authentication().validate();
        }
        if (trustSettings() != null) {
            trustSettings().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(InboundEndpoints.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("endpointType", this.endpointType);
        jsonWriter.writeStringField("address", this.address);
        jsonWriter.writeStringField("version", this.version);
        jsonWriter.writeJsonField("authentication", this.authentication);
        jsonWriter.writeJsonField("trustSettings", this.trustSettings);
        jsonWriter.writeStringField("additionalConfiguration", this.additionalConfiguration);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of InboundEndpoints from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of InboundEndpoints if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the InboundEndpoints.
     */
    public static InboundEndpoints fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            InboundEndpoints deserializedInboundEndpoints = new InboundEndpoints();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("endpointType".equals(fieldName)) {
                    deserializedInboundEndpoints.endpointType = reader.getString();
                } else if ("address".equals(fieldName)) {
                    deserializedInboundEndpoints.address = reader.getString();
                } else if ("version".equals(fieldName)) {
                    deserializedInboundEndpoints.version = reader.getString();
                } else if ("authentication".equals(fieldName)) {
                    deserializedInboundEndpoints.authentication = HostAuthentication.fromJson(reader);
                } else if ("trustSettings".equals(fieldName)) {
                    deserializedInboundEndpoints.trustSettings = TrustSettings.fromJson(reader);
                } else if ("additionalConfiguration".equals(fieldName)) {
                    deserializedInboundEndpoints.additionalConfiguration = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedInboundEndpoints;
        });
    }
}
