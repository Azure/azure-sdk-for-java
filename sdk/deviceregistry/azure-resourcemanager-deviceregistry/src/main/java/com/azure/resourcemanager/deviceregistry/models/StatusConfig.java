// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.deviceregistry.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * Defines the status config properties.
 */
@Immutable
public final class StatusConfig implements JsonSerializable<StatusConfig> {
    /*
     * A read-only incremental counter indicating the number of times the configuration has been modified from the
     * perspective of the current actual (edge) state of the CRD. Edge would be the only writer of this value and would
     * sync back up to the cloud. In steady state, this should equal version.
     */
    private Long version;

    /*
     * A read-only timestamp indicating the last time the configuration has been modified from the perspective of the
     * current actual (edge) state of the CRD. Edge would be the only writer of this value and would sync back up to the
     * cloud.
     */
    private OffsetDateTime lastTransitionTime;

    /*
     * Object to transfer and persist errors that originate from the edge.
     */
    private StatusError error;

    /**
     * Creates an instance of StatusConfig class.
     */
    private StatusConfig() {
    }

    /**
     * Get the version property: A read-only incremental counter indicating the number of times the configuration has
     * been modified from the perspective of the current actual (edge) state of the CRD. Edge would be the only writer
     * of this value and would sync back up to the cloud. In steady state, this should equal version.
     * 
     * @return the version value.
     */
    public Long version() {
        return this.version;
    }

    /**
     * Get the lastTransitionTime property: A read-only timestamp indicating the last time the configuration has been
     * modified from the perspective of the current actual (edge) state of the CRD. Edge would be the only writer of
     * this value and would sync back up to the cloud.
     * 
     * @return the lastTransitionTime value.
     */
    public OffsetDateTime lastTransitionTime() {
        return this.lastTransitionTime;
    }

    /**
     * Get the error property: Object to transfer and persist errors that originate from the edge.
     * 
     * @return the error value.
     */
    public StatusError error() {
        return this.error;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (error() != null) {
            error().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StatusConfig from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of StatusConfig if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the StatusConfig.
     */
    public static StatusConfig fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            StatusConfig deserializedStatusConfig = new StatusConfig();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("version".equals(fieldName)) {
                    deserializedStatusConfig.version = reader.getNullable(JsonReader::getLong);
                } else if ("lastTransitionTime".equals(fieldName)) {
                    deserializedStatusConfig.lastTransitionTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("error".equals(fieldName)) {
                    deserializedStatusConfig.error = StatusError.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedStatusConfig;
        });
    }
}
