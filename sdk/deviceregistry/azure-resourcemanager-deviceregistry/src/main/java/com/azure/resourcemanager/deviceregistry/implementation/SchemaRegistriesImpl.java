// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.deviceregistry.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.deviceregistry.fluent.SchemaRegistriesClient;
import com.azure.resourcemanager.deviceregistry.fluent.models.SchemaRegistryInner;
import com.azure.resourcemanager.deviceregistry.models.SchemaRegistries;
import com.azure.resourcemanager.deviceregistry.models.SchemaRegistry;

public final class SchemaRegistriesImpl implements SchemaRegistries {
    private static final ClientLogger LOGGER = new ClientLogger(SchemaRegistriesImpl.class);

    private final SchemaRegistriesClient innerClient;

    private final com.azure.resourcemanager.deviceregistry.DeviceRegistryManager serviceManager;

    public SchemaRegistriesImpl(SchemaRegistriesClient innerClient,
        com.azure.resourcemanager.deviceregistry.DeviceRegistryManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<SchemaRegistry> getByResourceGroupWithResponse(String resourceGroupName, String schemaRegistryName,
        Context context) {
        Response<SchemaRegistryInner> inner
            = this.serviceClient().getByResourceGroupWithResponse(resourceGroupName, schemaRegistryName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new SchemaRegistryImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SchemaRegistry getByResourceGroup(String resourceGroupName, String schemaRegistryName) {
        SchemaRegistryInner inner = this.serviceClient().getByResourceGroup(resourceGroupName, schemaRegistryName);
        if (inner != null) {
            return new SchemaRegistryImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void deleteByResourceGroup(String resourceGroupName, String schemaRegistryName) {
        this.serviceClient().delete(resourceGroupName, schemaRegistryName);
    }

    public void delete(String resourceGroupName, String schemaRegistryName, Context context) {
        this.serviceClient().delete(resourceGroupName, schemaRegistryName, context);
    }

    public PagedIterable<SchemaRegistry> listByResourceGroup(String resourceGroupName) {
        PagedIterable<SchemaRegistryInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new SchemaRegistryImpl(inner1, this.manager()));
    }

    public PagedIterable<SchemaRegistry> listByResourceGroup(String resourceGroupName, Context context) {
        PagedIterable<SchemaRegistryInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new SchemaRegistryImpl(inner1, this.manager()));
    }

    public PagedIterable<SchemaRegistry> list() {
        PagedIterable<SchemaRegistryInner> inner = this.serviceClient().list();
        return ResourceManagerUtils.mapPage(inner, inner1 -> new SchemaRegistryImpl(inner1, this.manager()));
    }

    public PagedIterable<SchemaRegistry> list(Context context) {
        PagedIterable<SchemaRegistryInner> inner = this.serviceClient().list(context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new SchemaRegistryImpl(inner1, this.manager()));
    }

    public SchemaRegistry getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String schemaRegistryName = ResourceManagerUtils.getValueFromIdByName(id, "schemaRegistries");
        if (schemaRegistryName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'schemaRegistries'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, schemaRegistryName, Context.NONE).getValue();
    }

    public Response<SchemaRegistry> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String schemaRegistryName = ResourceManagerUtils.getValueFromIdByName(id, "schemaRegistries");
        if (schemaRegistryName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'schemaRegistries'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, schemaRegistryName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String schemaRegistryName = ResourceManagerUtils.getValueFromIdByName(id, "schemaRegistries");
        if (schemaRegistryName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'schemaRegistries'.", id)));
        }
        this.delete(resourceGroupName, schemaRegistryName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String schemaRegistryName = ResourceManagerUtils.getValueFromIdByName(id, "schemaRegistries");
        if (schemaRegistryName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'schemaRegistries'.", id)));
        }
        this.delete(resourceGroupName, schemaRegistryName, context);
    }

    private SchemaRegistriesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.deviceregistry.DeviceRegistryManager manager() {
        return this.serviceManager;
    }

    public SchemaRegistryImpl define(String name) {
        return new SchemaRegistryImpl(name, this.manager());
    }
}
