// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.deviceregistry.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.deviceregistry.fluent.SchemasClient;
import com.azure.resourcemanager.deviceregistry.fluent.models.SchemaInner;
import com.azure.resourcemanager.deviceregistry.models.Schema;
import com.azure.resourcemanager.deviceregistry.models.Schemas;

public final class SchemasImpl implements Schemas {
    private static final ClientLogger LOGGER = new ClientLogger(SchemasImpl.class);

    private final SchemasClient innerClient;

    private final com.azure.resourcemanager.deviceregistry.DeviceRegistryManager serviceManager;

    public SchemasImpl(SchemasClient innerClient,
        com.azure.resourcemanager.deviceregistry.DeviceRegistryManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<Schema> getWithResponse(String resourceGroupName, String schemaRegistryName, String schemaName,
        Context context) {
        Response<SchemaInner> inner
            = this.serviceClient().getWithResponse(resourceGroupName, schemaRegistryName, schemaName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new SchemaImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public Schema get(String resourceGroupName, String schemaRegistryName, String schemaName) {
        SchemaInner inner = this.serviceClient().get(resourceGroupName, schemaRegistryName, schemaName);
        if (inner != null) {
            return new SchemaImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Void> deleteWithResponse(String resourceGroupName, String schemaRegistryName, String schemaName,
        Context context) {
        return this.serviceClient().deleteWithResponse(resourceGroupName, schemaRegistryName, schemaName, context);
    }

    public void delete(String resourceGroupName, String schemaRegistryName, String schemaName) {
        this.serviceClient().delete(resourceGroupName, schemaRegistryName, schemaName);
    }

    public PagedIterable<Schema> listBySchemaRegistry(String resourceGroupName, String schemaRegistryName) {
        PagedIterable<SchemaInner> inner
            = this.serviceClient().listBySchemaRegistry(resourceGroupName, schemaRegistryName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new SchemaImpl(inner1, this.manager()));
    }

    public PagedIterable<Schema> listBySchemaRegistry(String resourceGroupName, String schemaRegistryName,
        Context context) {
        PagedIterable<SchemaInner> inner
            = this.serviceClient().listBySchemaRegistry(resourceGroupName, schemaRegistryName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new SchemaImpl(inner1, this.manager()));
    }

    public Schema getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String schemaRegistryName = ResourceManagerUtils.getValueFromIdByName(id, "schemaRegistries");
        if (schemaRegistryName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'schemaRegistries'.", id)));
        }
        String schemaName = ResourceManagerUtils.getValueFromIdByName(id, "schemas");
        if (schemaName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'schemas'.", id)));
        }
        return this.getWithResponse(resourceGroupName, schemaRegistryName, schemaName, Context.NONE).getValue();
    }

    public Response<Schema> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String schemaRegistryName = ResourceManagerUtils.getValueFromIdByName(id, "schemaRegistries");
        if (schemaRegistryName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'schemaRegistries'.", id)));
        }
        String schemaName = ResourceManagerUtils.getValueFromIdByName(id, "schemas");
        if (schemaName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'schemas'.", id)));
        }
        return this.getWithResponse(resourceGroupName, schemaRegistryName, schemaName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String schemaRegistryName = ResourceManagerUtils.getValueFromIdByName(id, "schemaRegistries");
        if (schemaRegistryName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'schemaRegistries'.", id)));
        }
        String schemaName = ResourceManagerUtils.getValueFromIdByName(id, "schemas");
        if (schemaName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'schemas'.", id)));
        }
        this.deleteWithResponse(resourceGroupName, schemaRegistryName, schemaName, Context.NONE);
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String schemaRegistryName = ResourceManagerUtils.getValueFromIdByName(id, "schemaRegistries");
        if (schemaRegistryName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'schemaRegistries'.", id)));
        }
        String schemaName = ResourceManagerUtils.getValueFromIdByName(id, "schemas");
        if (schemaName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'schemas'.", id)));
        }
        return this.deleteWithResponse(resourceGroupName, schemaRegistryName, schemaName, context);
    }

    private SchemasClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.deviceregistry.DeviceRegistryManager manager() {
        return this.serviceManager;
    }

    public SchemaImpl define(String name) {
        return new SchemaImpl(name, this.manager());
    }
}
