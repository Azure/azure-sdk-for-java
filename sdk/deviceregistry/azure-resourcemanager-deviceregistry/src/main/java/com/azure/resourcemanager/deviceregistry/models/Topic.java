// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.deviceregistry.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Object that describes the topic information.
 */
@Fluent
public final class Topic implements JsonSerializable<Topic> {
    /*
     * The topic path for messages published to an MQTT broker.
     */
    private String path;

    /*
     * When set to 'Keep', messages published to an MQTT broker will have the retain flag set. Default: 'Never'.
     */
    private TopicRetainType retain;

    /**
     * Creates an instance of Topic class.
     */
    public Topic() {
    }

    /**
     * Get the path property: The topic path for messages published to an MQTT broker.
     * 
     * @return the path value.
     */
    public String path() {
        return this.path;
    }

    /**
     * Set the path property: The topic path for messages published to an MQTT broker.
     * 
     * @param path the path value to set.
     * @return the Topic object itself.
     */
    public Topic withPath(String path) {
        this.path = path;
        return this;
    }

    /**
     * Get the retain property: When set to 'Keep', messages published to an MQTT broker will have the retain flag set.
     * Default: 'Never'.
     * 
     * @return the retain value.
     */
    public TopicRetainType retain() {
        return this.retain;
    }

    /**
     * Set the retain property: When set to 'Keep', messages published to an MQTT broker will have the retain flag set.
     * Default: 'Never'.
     * 
     * @param retain the retain value to set.
     * @return the Topic object itself.
     */
    public Topic withRetain(TopicRetainType retain) {
        this.retain = retain;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (path() == null) {
            throw LOGGER.atError().log(new IllegalArgumentException("Missing required property path in model Topic"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(Topic.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("path", this.path);
        jsonWriter.writeStringField("retain", this.retain == null ? null : this.retain.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Topic from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Topic if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the Topic.
     */
    public static Topic fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Topic deserializedTopic = new Topic();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("path".equals(fieldName)) {
                    deserializedTopic.path = reader.getString();
                } else if ("retain".equals(fieldName)) {
                    deserializedTopic.retain = TopicRetainType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTopic;
        });
    }
}
