// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.deviceregistry.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The configuration for a MQTT destination.
 */
@Fluent
public final class MqttDestinationConfiguration implements JsonSerializable<MqttDestinationConfiguration> {
    /*
     * The MQTT topic.
     */
    private String topic;

    /*
     * When set to 'Keep', messages published to an MQTT broker will have the retain flag set. Default: 'Never'.
     */
    private TopicRetainType retain;

    /*
     * The MQTT QoS setting. Defaults to QoS 1.
     */
    private MqttDestinationQos qos;

    /*
     * The MQTT TTL setting.
     */
    private Long ttl;

    /**
     * Creates an instance of MqttDestinationConfiguration class.
     */
    public MqttDestinationConfiguration() {
    }

    /**
     * Get the topic property: The MQTT topic.
     * 
     * @return the topic value.
     */
    public String topic() {
        return this.topic;
    }

    /**
     * Set the topic property: The MQTT topic.
     * 
     * @param topic the topic value to set.
     * @return the MqttDestinationConfiguration object itself.
     */
    public MqttDestinationConfiguration withTopic(String topic) {
        this.topic = topic;
        return this;
    }

    /**
     * Get the retain property: When set to 'Keep', messages published to an MQTT broker will have the retain flag set.
     * Default: 'Never'.
     * 
     * @return the retain value.
     */
    public TopicRetainType retain() {
        return this.retain;
    }

    /**
     * Set the retain property: When set to 'Keep', messages published to an MQTT broker will have the retain flag set.
     * Default: 'Never'.
     * 
     * @param retain the retain value to set.
     * @return the MqttDestinationConfiguration object itself.
     */
    public MqttDestinationConfiguration withRetain(TopicRetainType retain) {
        this.retain = retain;
        return this;
    }

    /**
     * Get the qos property: The MQTT QoS setting. Defaults to QoS 1.
     * 
     * @return the qos value.
     */
    public MqttDestinationQos qos() {
        return this.qos;
    }

    /**
     * Set the qos property: The MQTT QoS setting. Defaults to QoS 1.
     * 
     * @param qos the qos value to set.
     * @return the MqttDestinationConfiguration object itself.
     */
    public MqttDestinationConfiguration withQos(MqttDestinationQos qos) {
        this.qos = qos;
        return this;
    }

    /**
     * Get the ttl property: The MQTT TTL setting.
     * 
     * @return the ttl value.
     */
    public Long ttl() {
        return this.ttl;
    }

    /**
     * Set the ttl property: The MQTT TTL setting.
     * 
     * @param ttl the ttl value to set.
     * @return the MqttDestinationConfiguration object itself.
     */
    public MqttDestinationConfiguration withTtl(Long ttl) {
        this.ttl = ttl;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (topic() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property topic in model MqttDestinationConfiguration"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(MqttDestinationConfiguration.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("topic", this.topic);
        jsonWriter.writeStringField("retain", this.retain == null ? null : this.retain.toString());
        jsonWriter.writeStringField("qos", this.qos == null ? null : this.qos.toString());
        jsonWriter.writeNumberField("ttl", this.ttl);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MqttDestinationConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MqttDestinationConfiguration if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the MqttDestinationConfiguration.
     */
    public static MqttDestinationConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MqttDestinationConfiguration deserializedMqttDestinationConfiguration = new MqttDestinationConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("topic".equals(fieldName)) {
                    deserializedMqttDestinationConfiguration.topic = reader.getString();
                } else if ("retain".equals(fieldName)) {
                    deserializedMqttDestinationConfiguration.retain = TopicRetainType.fromString(reader.getString());
                } else if ("qos".equals(fieldName)) {
                    deserializedMqttDestinationConfiguration.qos = MqttDestinationQos.fromString(reader.getString());
                } else if ("ttl".equals(fieldName)) {
                    deserializedMqttDestinationConfiguration.ttl = reader.getNullable(JsonReader::getLong);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMqttDestinationConfiguration;
        });
    }
}
