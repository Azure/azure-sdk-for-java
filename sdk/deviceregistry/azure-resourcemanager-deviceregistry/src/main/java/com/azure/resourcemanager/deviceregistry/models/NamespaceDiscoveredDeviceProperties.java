// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.deviceregistry.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.BinaryData;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * Defines the discovered device properties.
 */
@Fluent
public final class NamespaceDiscoveredDeviceProperties
    implements JsonSerializable<NamespaceDiscoveredDeviceProperties> {
    /*
     * A device ID that represents the device in a system external to Azure. Unique within scope of an Azure tenant.
     */
    private String externalDeviceId;

    /*
     * Endpoints for discovered devices.
     */
    private DiscoveredMessagingEndpoints endpoints;

    /*
     * Device manufacturer.
     */
    private String manufacturer;

    /*
     * Device model.
     */
    private String model;

    /*
     * Device operating system name.
     */
    private String operatingSystem;

    /*
     * Device operating system version.
     */
    private String operatingSystemVersion;

    /*
     * A set of key-value pairs that contain custom attributes.
     */
    private Map<String, BinaryData> attributes;

    /*
     * Identifier used to detect changes in the discovered device.
     */
    private String discoveryId;

    /*
     * An integer that is incremented each time the resource is modified.
     */
    private long version;

    /*
     * Provisioning state of the resource.
     */
    private ProvisioningState provisioningState;

    /**
     * Creates an instance of NamespaceDiscoveredDeviceProperties class.
     */
    public NamespaceDiscoveredDeviceProperties() {
    }

    /**
     * Get the externalDeviceId property: A device ID that represents the device in a system external to Azure. Unique
     * within scope of an Azure tenant.
     * 
     * @return the externalDeviceId value.
     */
    public String externalDeviceId() {
        return this.externalDeviceId;
    }

    /**
     * Set the externalDeviceId property: A device ID that represents the device in a system external to Azure. Unique
     * within scope of an Azure tenant.
     * 
     * @param externalDeviceId the externalDeviceId value to set.
     * @return the NamespaceDiscoveredDeviceProperties object itself.
     */
    public NamespaceDiscoveredDeviceProperties withExternalDeviceId(String externalDeviceId) {
        this.externalDeviceId = externalDeviceId;
        return this;
    }

    /**
     * Get the endpoints property: Endpoints for discovered devices.
     * 
     * @return the endpoints value.
     */
    public DiscoveredMessagingEndpoints endpoints() {
        return this.endpoints;
    }

    /**
     * Set the endpoints property: Endpoints for discovered devices.
     * 
     * @param endpoints the endpoints value to set.
     * @return the NamespaceDiscoveredDeviceProperties object itself.
     */
    public NamespaceDiscoveredDeviceProperties withEndpoints(DiscoveredMessagingEndpoints endpoints) {
        this.endpoints = endpoints;
        return this;
    }

    /**
     * Get the manufacturer property: Device manufacturer.
     * 
     * @return the manufacturer value.
     */
    public String manufacturer() {
        return this.manufacturer;
    }

    /**
     * Set the manufacturer property: Device manufacturer.
     * 
     * @param manufacturer the manufacturer value to set.
     * @return the NamespaceDiscoveredDeviceProperties object itself.
     */
    public NamespaceDiscoveredDeviceProperties withManufacturer(String manufacturer) {
        this.manufacturer = manufacturer;
        return this;
    }

    /**
     * Get the model property: Device model.
     * 
     * @return the model value.
     */
    public String model() {
        return this.model;
    }

    /**
     * Set the model property: Device model.
     * 
     * @param model the model value to set.
     * @return the NamespaceDiscoveredDeviceProperties object itself.
     */
    public NamespaceDiscoveredDeviceProperties withModel(String model) {
        this.model = model;
        return this;
    }

    /**
     * Get the operatingSystem property: Device operating system name.
     * 
     * @return the operatingSystem value.
     */
    public String operatingSystem() {
        return this.operatingSystem;
    }

    /**
     * Set the operatingSystem property: Device operating system name.
     * 
     * @param operatingSystem the operatingSystem value to set.
     * @return the NamespaceDiscoveredDeviceProperties object itself.
     */
    public NamespaceDiscoveredDeviceProperties withOperatingSystem(String operatingSystem) {
        this.operatingSystem = operatingSystem;
        return this;
    }

    /**
     * Get the operatingSystemVersion property: Device operating system version.
     * 
     * @return the operatingSystemVersion value.
     */
    public String operatingSystemVersion() {
        return this.operatingSystemVersion;
    }

    /**
     * Set the operatingSystemVersion property: Device operating system version.
     * 
     * @param operatingSystemVersion the operatingSystemVersion value to set.
     * @return the NamespaceDiscoveredDeviceProperties object itself.
     */
    public NamespaceDiscoveredDeviceProperties withOperatingSystemVersion(String operatingSystemVersion) {
        this.operatingSystemVersion = operatingSystemVersion;
        return this;
    }

    /**
     * Get the attributes property: A set of key-value pairs that contain custom attributes.
     * 
     * @return the attributes value.
     */
    public Map<String, BinaryData> attributes() {
        return this.attributes;
    }

    /**
     * Set the attributes property: A set of key-value pairs that contain custom attributes.
     * 
     * @param attributes the attributes value to set.
     * @return the NamespaceDiscoveredDeviceProperties object itself.
     */
    public NamespaceDiscoveredDeviceProperties withAttributes(Map<String, BinaryData> attributes) {
        this.attributes = attributes;
        return this;
    }

    /**
     * Get the discoveryId property: Identifier used to detect changes in the discovered device.
     * 
     * @return the discoveryId value.
     */
    public String discoveryId() {
        return this.discoveryId;
    }

    /**
     * Set the discoveryId property: Identifier used to detect changes in the discovered device.
     * 
     * @param discoveryId the discoveryId value to set.
     * @return the NamespaceDiscoveredDeviceProperties object itself.
     */
    public NamespaceDiscoveredDeviceProperties withDiscoveryId(String discoveryId) {
        this.discoveryId = discoveryId;
        return this;
    }

    /**
     * Get the version property: An integer that is incremented each time the resource is modified.
     * 
     * @return the version value.
     */
    public long version() {
        return this.version;
    }

    /**
     * Set the version property: An integer that is incremented each time the resource is modified.
     * 
     * @param version the version value to set.
     * @return the NamespaceDiscoveredDeviceProperties object itself.
     */
    public NamespaceDiscoveredDeviceProperties withVersion(long version) {
        this.version = version;
        return this;
    }

    /**
     * Get the provisioningState property: Provisioning state of the resource.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (endpoints() != null) {
            endpoints().validate();
        }
        if (discoveryId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property discoveryId in model NamespaceDiscoveredDeviceProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(NamespaceDiscoveredDeviceProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("discoveryId", this.discoveryId);
        jsonWriter.writeLongField("version", this.version);
        jsonWriter.writeStringField("externalDeviceId", this.externalDeviceId);
        jsonWriter.writeJsonField("endpoints", this.endpoints);
        jsonWriter.writeStringField("manufacturer", this.manufacturer);
        jsonWriter.writeStringField("model", this.model);
        jsonWriter.writeStringField("operatingSystem", this.operatingSystem);
        jsonWriter.writeStringField("operatingSystemVersion", this.operatingSystemVersion);
        jsonWriter.writeMapField("attributes", this.attributes,
            (writer, element) -> writer.writeUntyped(element == null ? null : element.toObject(Object.class)));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NamespaceDiscoveredDeviceProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NamespaceDiscoveredDeviceProperties if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the NamespaceDiscoveredDeviceProperties.
     */
    public static NamespaceDiscoveredDeviceProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NamespaceDiscoveredDeviceProperties deserializedNamespaceDiscoveredDeviceProperties
                = new NamespaceDiscoveredDeviceProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("discoveryId".equals(fieldName)) {
                    deserializedNamespaceDiscoveredDeviceProperties.discoveryId = reader.getString();
                } else if ("version".equals(fieldName)) {
                    deserializedNamespaceDiscoveredDeviceProperties.version = reader.getLong();
                } else if ("externalDeviceId".equals(fieldName)) {
                    deserializedNamespaceDiscoveredDeviceProperties.externalDeviceId = reader.getString();
                } else if ("endpoints".equals(fieldName)) {
                    deserializedNamespaceDiscoveredDeviceProperties.endpoints
                        = DiscoveredMessagingEndpoints.fromJson(reader);
                } else if ("manufacturer".equals(fieldName)) {
                    deserializedNamespaceDiscoveredDeviceProperties.manufacturer = reader.getString();
                } else if ("model".equals(fieldName)) {
                    deserializedNamespaceDiscoveredDeviceProperties.model = reader.getString();
                } else if ("operatingSystem".equals(fieldName)) {
                    deserializedNamespaceDiscoveredDeviceProperties.operatingSystem = reader.getString();
                } else if ("operatingSystemVersion".equals(fieldName)) {
                    deserializedNamespaceDiscoveredDeviceProperties.operatingSystemVersion = reader.getString();
                } else if ("attributes".equals(fieldName)) {
                    Map<String, BinaryData> attributes = reader.readMap(reader1 -> reader1
                        .getNullable(nonNullReader -> BinaryData.fromObject(nonNullReader.readUntyped())));
                    deserializedNamespaceDiscoveredDeviceProperties.attributes = attributes;
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedNamespaceDiscoveredDeviceProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNamespaceDiscoveredDeviceProperties;
        });
    }
}
