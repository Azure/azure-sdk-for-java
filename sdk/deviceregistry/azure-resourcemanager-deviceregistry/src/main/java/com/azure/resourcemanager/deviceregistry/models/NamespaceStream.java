// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.deviceregistry.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Defines the stream properties.
 */
@Fluent
public final class NamespaceStream implements JsonSerializable<NamespaceStream> {
    /*
     * Name of the stream definition.
     */
    private String name;

    /*
     * Stringified JSON that contains connector-specific configuration for the specific stream.
     */
    private String streamConfiguration;

    /*
     * URI or type definition ID.
     */
    private String typeRef;

    /*
     * Destinations for a stream.
     */
    private List<StreamDestination> destinations;

    /**
     * Creates an instance of NamespaceStream class.
     */
    public NamespaceStream() {
    }

    /**
     * Get the name property: Name of the stream definition.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: Name of the stream definition.
     * 
     * @param name the name value to set.
     * @return the NamespaceStream object itself.
     */
    public NamespaceStream withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the streamConfiguration property: Stringified JSON that contains connector-specific configuration for the
     * specific stream.
     * 
     * @return the streamConfiguration value.
     */
    public String streamConfiguration() {
        return this.streamConfiguration;
    }

    /**
     * Set the streamConfiguration property: Stringified JSON that contains connector-specific configuration for the
     * specific stream.
     * 
     * @param streamConfiguration the streamConfiguration value to set.
     * @return the NamespaceStream object itself.
     */
    public NamespaceStream withStreamConfiguration(String streamConfiguration) {
        this.streamConfiguration = streamConfiguration;
        return this;
    }

    /**
     * Get the typeRef property: URI or type definition ID.
     * 
     * @return the typeRef value.
     */
    public String typeRef() {
        return this.typeRef;
    }

    /**
     * Set the typeRef property: URI or type definition ID.
     * 
     * @param typeRef the typeRef value to set.
     * @return the NamespaceStream object itself.
     */
    public NamespaceStream withTypeRef(String typeRef) {
        this.typeRef = typeRef;
        return this;
    }

    /**
     * Get the destinations property: Destinations for a stream.
     * 
     * @return the destinations value.
     */
    public List<StreamDestination> destinations() {
        return this.destinations;
    }

    /**
     * Set the destinations property: Destinations for a stream.
     * 
     * @param destinations the destinations value to set.
     * @return the NamespaceStream object itself.
     */
    public NamespaceStream withDestinations(List<StreamDestination> destinations) {
        this.destinations = destinations;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (name() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property name in model NamespaceStream"));
        }
        if (destinations() != null) {
            destinations().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(NamespaceStream.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("streamConfiguration", this.streamConfiguration);
        jsonWriter.writeStringField("typeRef", this.typeRef);
        jsonWriter.writeArrayField("destinations", this.destinations, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NamespaceStream from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NamespaceStream if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the NamespaceStream.
     */
    public static NamespaceStream fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NamespaceStream deserializedNamespaceStream = new NamespaceStream();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedNamespaceStream.name = reader.getString();
                } else if ("streamConfiguration".equals(fieldName)) {
                    deserializedNamespaceStream.streamConfiguration = reader.getString();
                } else if ("typeRef".equals(fieldName)) {
                    deserializedNamespaceStream.typeRef = reader.getString();
                } else if ("destinations".equals(fieldName)) {
                    List<StreamDestination> destinations
                        = reader.readArray(reader1 -> StreamDestination.fromJson(reader1));
                    deserializedNamespaceStream.destinations = destinations;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNamespaceStream;
        });
    }
}
