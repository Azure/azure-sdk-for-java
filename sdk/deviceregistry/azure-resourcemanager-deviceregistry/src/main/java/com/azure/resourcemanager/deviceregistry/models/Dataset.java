// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.deviceregistry.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Defines the dataset properties.
 */
@Fluent
public final class Dataset implements JsonSerializable<Dataset> {
    /*
     * Name of the dataset.
     */
    private String name;

    /*
     * Stringified JSON that contains connector-specific JSON string that describes configuration for the specific
     * dataset.
     */
    private String datasetConfiguration;

    /*
     * Object that describes the topic information for the specific dataset.
     */
    private Topic topic;

    /*
     * Array of data points that are part of the dataset. Each data point can have per-data point configuration.
     */
    private List<DataPoint> dataPoints;

    /**
     * Creates an instance of Dataset class.
     */
    public Dataset() {
    }

    /**
     * Get the name property: Name of the dataset.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: Name of the dataset.
     * 
     * @param name the name value to set.
     * @return the Dataset object itself.
     */
    public Dataset withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the datasetConfiguration property: Stringified JSON that contains connector-specific JSON string that
     * describes configuration for the specific dataset.
     * 
     * @return the datasetConfiguration value.
     */
    public String datasetConfiguration() {
        return this.datasetConfiguration;
    }

    /**
     * Set the datasetConfiguration property: Stringified JSON that contains connector-specific JSON string that
     * describes configuration for the specific dataset.
     * 
     * @param datasetConfiguration the datasetConfiguration value to set.
     * @return the Dataset object itself.
     */
    public Dataset withDatasetConfiguration(String datasetConfiguration) {
        this.datasetConfiguration = datasetConfiguration;
        return this;
    }

    /**
     * Get the topic property: Object that describes the topic information for the specific dataset.
     * 
     * @return the topic value.
     */
    public Topic topic() {
        return this.topic;
    }

    /**
     * Set the topic property: Object that describes the topic information for the specific dataset.
     * 
     * @param topic the topic value to set.
     * @return the Dataset object itself.
     */
    public Dataset withTopic(Topic topic) {
        this.topic = topic;
        return this;
    }

    /**
     * Get the dataPoints property: Array of data points that are part of the dataset. Each data point can have per-data
     * point configuration.
     * 
     * @return the dataPoints value.
     */
    public List<DataPoint> dataPoints() {
        return this.dataPoints;
    }

    /**
     * Set the dataPoints property: Array of data points that are part of the dataset. Each data point can have per-data
     * point configuration.
     * 
     * @param dataPoints the dataPoints value to set.
     * @return the Dataset object itself.
     */
    public Dataset withDataPoints(List<DataPoint> dataPoints) {
        this.dataPoints = dataPoints;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (name() == null) {
            throw LOGGER.atError().log(new IllegalArgumentException("Missing required property name in model Dataset"));
        }
        if (topic() != null) {
            topic().validate();
        }
        if (dataPoints() != null) {
            dataPoints().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(Dataset.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("datasetConfiguration", this.datasetConfiguration);
        jsonWriter.writeJsonField("topic", this.topic);
        jsonWriter.writeArrayField("dataPoints", this.dataPoints, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Dataset from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Dataset if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the Dataset.
     */
    public static Dataset fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Dataset deserializedDataset = new Dataset();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedDataset.name = reader.getString();
                } else if ("datasetConfiguration".equals(fieldName)) {
                    deserializedDataset.datasetConfiguration = reader.getString();
                } else if ("topic".equals(fieldName)) {
                    deserializedDataset.topic = Topic.fromJson(reader);
                } else if ("dataPoints".equals(fieldName)) {
                    List<DataPoint> dataPoints = reader.readArray(reader1 -> DataPoint.fromJson(reader1));
                    deserializedDataset.dataPoints = dataPoints;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDataset;
        });
    }
}
