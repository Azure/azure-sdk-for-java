// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.deviceregistry.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Definition of the client authentication mechanism to the server.
 */
@Fluent
public final class UserAuthentication {
    /*
     * Defines the mode to authenticate the user of the client at the server.
     */
    @JsonProperty(value = "mode", required = true)
    private UserAuthenticationMode mode;

    /*
     * Defines the username and password references when UsernamePassword user authentication mode is selected.
     */
    @JsonProperty(value = "usernamePasswordCredentials")
    private UsernamePasswordCredentials usernamePasswordCredentials;

    /*
     * Defines the certificate reference when Certificate user authentication mode is selected.
     */
    @JsonProperty(value = "x509Credentials")
    private X509Credentials x509Credentials;

    /**
     * Creates an instance of UserAuthentication class.
     */
    public UserAuthentication() {
    }

    /**
     * Get the mode property: Defines the mode to authenticate the user of the client at the server.
     * 
     * @return the mode value.
     */
    public UserAuthenticationMode mode() {
        return this.mode;
    }

    /**
     * Set the mode property: Defines the mode to authenticate the user of the client at the server.
     * 
     * @param mode the mode value to set.
     * @return the UserAuthentication object itself.
     */
    public UserAuthentication withMode(UserAuthenticationMode mode) {
        this.mode = mode;
        return this;
    }

    /**
     * Get the usernamePasswordCredentials property: Defines the username and password references when UsernamePassword
     * user authentication mode is selected.
     * 
     * @return the usernamePasswordCredentials value.
     */
    public UsernamePasswordCredentials usernamePasswordCredentials() {
        return this.usernamePasswordCredentials;
    }

    /**
     * Set the usernamePasswordCredentials property: Defines the username and password references when UsernamePassword
     * user authentication mode is selected.
     * 
     * @param usernamePasswordCredentials the usernamePasswordCredentials value to set.
     * @return the UserAuthentication object itself.
     */
    public UserAuthentication withUsernamePasswordCredentials(UsernamePasswordCredentials usernamePasswordCredentials) {
        this.usernamePasswordCredentials = usernamePasswordCredentials;
        return this;
    }

    /**
     * Get the x509Credentials property: Defines the certificate reference when Certificate user authentication mode is
     * selected.
     * 
     * @return the x509Credentials value.
     */
    public X509Credentials x509Credentials() {
        return this.x509Credentials;
    }

    /**
     * Set the x509Credentials property: Defines the certificate reference when Certificate user authentication mode is
     * selected.
     * 
     * @param x509Credentials the x509Credentials value to set.
     * @return the UserAuthentication object itself.
     */
    public UserAuthentication withX509Credentials(X509Credentials x509Credentials) {
        this.x509Credentials = x509Credentials;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (mode() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property mode in model UserAuthentication"));
        }
        if (usernamePasswordCredentials() != null) {
            usernamePasswordCredentials().validate();
        }
        if (x509Credentials() != null) {
            x509Credentials().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(UserAuthentication.class);
}
