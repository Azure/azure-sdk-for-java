// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.deviceregistry.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The leaf certificate configuration.
 */
@Fluent
public final class LeafCertificateConfiguration implements JsonSerializable<LeafCertificateConfiguration> {
    /*
     * The validity period in days.
     */
    private int validityPeriodInDays;

    /**
     * Creates an instance of LeafCertificateConfiguration class.
     */
    public LeafCertificateConfiguration() {
    }

    /**
     * Get the validityPeriodInDays property: The validity period in days.
     * 
     * @return the validityPeriodInDays value.
     */
    public int validityPeriodInDays() {
        return this.validityPeriodInDays;
    }

    /**
     * Set the validityPeriodInDays property: The validity period in days.
     * 
     * @param validityPeriodInDays the validityPeriodInDays value to set.
     * @return the LeafCertificateConfiguration object itself.
     */
    public LeafCertificateConfiguration withValidityPeriodInDays(int validityPeriodInDays) {
        this.validityPeriodInDays = validityPeriodInDays;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeIntField("validityPeriodInDays", this.validityPeriodInDays);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LeafCertificateConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LeafCertificateConfiguration if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the LeafCertificateConfiguration.
     */
    public static LeafCertificateConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LeafCertificateConfiguration deserializedLeafCertificateConfiguration = new LeafCertificateConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("validityPeriodInDays".equals(fieldName)) {
                    deserializedLeafCertificateConfiguration.validityPeriodInDays = reader.getInt();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLeafCertificateConfiguration;
        });
    }
}
