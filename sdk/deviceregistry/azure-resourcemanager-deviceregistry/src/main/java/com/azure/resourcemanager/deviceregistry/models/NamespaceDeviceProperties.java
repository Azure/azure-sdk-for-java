// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.deviceregistry.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.BinaryData;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Map;

/**
 * Defines the device properties.
 */
@Fluent
public final class NamespaceDeviceProperties implements JsonSerializable<NamespaceDeviceProperties> {
    /*
     * A unique identifier for the device.
     */
    private String uuid;

    /*
     * Indicates if the resource is enabled or not.
     */
    private Boolean enabled;

    /*
     * The Device ID provided by the customer.
     */
    private String externalDeviceId;

    /*
     * Reference to a device. Populated only if the device had been created from discovery flow. Discovered device name
     * must be provided.
     */
    private String discoveredDeviceRef;

    /*
     * Device manufacturer.
     */
    private String manufacturer;

    /*
     * Device model.
     */
    private String model;

    /*
     * Device operating system.
     */
    private String operatingSystem;

    /*
     * Device operating system version.
     */
    private String operatingSystemVersion;

    /*
     * Property bag containing the device's unassigned and assigned endpoints.
     */
    private MessagingEndpoints endpoints;

    /*
     * A set of key-value pairs that contain custom attributes set by the customer.
     */
    private Map<String, BinaryData> attributes;

    /*
     * Device status updates.
     */
    private DeviceStatus status;

    /*
     * An integer that is incremented each time the resource is modified.
     */
    private Long version;

    /*
     * A timestamp (in UTC) that is updated each time the resource is modified.
     */
    private OffsetDateTime lastTransitionTime;

    /*
     * Provisioning state of the resource.
     */
    private ProvisioningState provisioningState;

    /*
     * Policy used to issue device certificates.
     */
    private DeviceCredentialPolicy policy;

    /**
     * Creates an instance of NamespaceDeviceProperties class.
     */
    public NamespaceDeviceProperties() {
    }

    /**
     * Get the uuid property: A unique identifier for the device.
     * 
     * @return the uuid value.
     */
    public String uuid() {
        return this.uuid;
    }

    /**
     * Get the enabled property: Indicates if the resource is enabled or not.
     * 
     * @return the enabled value.
     */
    public Boolean enabled() {
        return this.enabled;
    }

    /**
     * Set the enabled property: Indicates if the resource is enabled or not.
     * 
     * @param enabled the enabled value to set.
     * @return the NamespaceDeviceProperties object itself.
     */
    public NamespaceDeviceProperties withEnabled(Boolean enabled) {
        this.enabled = enabled;
        return this;
    }

    /**
     * Get the externalDeviceId property: The Device ID provided by the customer.
     * 
     * @return the externalDeviceId value.
     */
    public String externalDeviceId() {
        return this.externalDeviceId;
    }

    /**
     * Set the externalDeviceId property: The Device ID provided by the customer.
     * 
     * @param externalDeviceId the externalDeviceId value to set.
     * @return the NamespaceDeviceProperties object itself.
     */
    public NamespaceDeviceProperties withExternalDeviceId(String externalDeviceId) {
        this.externalDeviceId = externalDeviceId;
        return this;
    }

    /**
     * Get the discoveredDeviceRef property: Reference to a device. Populated only if the device had been created from
     * discovery flow. Discovered device name must be provided.
     * 
     * @return the discoveredDeviceRef value.
     */
    public String discoveredDeviceRef() {
        return this.discoveredDeviceRef;
    }

    /**
     * Set the discoveredDeviceRef property: Reference to a device. Populated only if the device had been created from
     * discovery flow. Discovered device name must be provided.
     * 
     * @param discoveredDeviceRef the discoveredDeviceRef value to set.
     * @return the NamespaceDeviceProperties object itself.
     */
    public NamespaceDeviceProperties withDiscoveredDeviceRef(String discoveredDeviceRef) {
        this.discoveredDeviceRef = discoveredDeviceRef;
        return this;
    }

    /**
     * Get the manufacturer property: Device manufacturer.
     * 
     * @return the manufacturer value.
     */
    public String manufacturer() {
        return this.manufacturer;
    }

    /**
     * Set the manufacturer property: Device manufacturer.
     * 
     * @param manufacturer the manufacturer value to set.
     * @return the NamespaceDeviceProperties object itself.
     */
    public NamespaceDeviceProperties withManufacturer(String manufacturer) {
        this.manufacturer = manufacturer;
        return this;
    }

    /**
     * Get the model property: Device model.
     * 
     * @return the model value.
     */
    public String model() {
        return this.model;
    }

    /**
     * Set the model property: Device model.
     * 
     * @param model the model value to set.
     * @return the NamespaceDeviceProperties object itself.
     */
    public NamespaceDeviceProperties withModel(String model) {
        this.model = model;
        return this;
    }

    /**
     * Get the operatingSystem property: Device operating system.
     * 
     * @return the operatingSystem value.
     */
    public String operatingSystem() {
        return this.operatingSystem;
    }

    /**
     * Set the operatingSystem property: Device operating system.
     * 
     * @param operatingSystem the operatingSystem value to set.
     * @return the NamespaceDeviceProperties object itself.
     */
    public NamespaceDeviceProperties withOperatingSystem(String operatingSystem) {
        this.operatingSystem = operatingSystem;
        return this;
    }

    /**
     * Get the operatingSystemVersion property: Device operating system version.
     * 
     * @return the operatingSystemVersion value.
     */
    public String operatingSystemVersion() {
        return this.operatingSystemVersion;
    }

    /**
     * Set the operatingSystemVersion property: Device operating system version.
     * 
     * @param operatingSystemVersion the operatingSystemVersion value to set.
     * @return the NamespaceDeviceProperties object itself.
     */
    public NamespaceDeviceProperties withOperatingSystemVersion(String operatingSystemVersion) {
        this.operatingSystemVersion = operatingSystemVersion;
        return this;
    }

    /**
     * Get the endpoints property: Property bag containing the device's unassigned and assigned endpoints.
     * 
     * @return the endpoints value.
     */
    public MessagingEndpoints endpoints() {
        return this.endpoints;
    }

    /**
     * Set the endpoints property: Property bag containing the device's unassigned and assigned endpoints.
     * 
     * @param endpoints the endpoints value to set.
     * @return the NamespaceDeviceProperties object itself.
     */
    public NamespaceDeviceProperties withEndpoints(MessagingEndpoints endpoints) {
        this.endpoints = endpoints;
        return this;
    }

    /**
     * Get the attributes property: A set of key-value pairs that contain custom attributes set by the customer.
     * 
     * @return the attributes value.
     */
    public Map<String, BinaryData> attributes() {
        return this.attributes;
    }

    /**
     * Set the attributes property: A set of key-value pairs that contain custom attributes set by the customer.
     * 
     * @param attributes the attributes value to set.
     * @return the NamespaceDeviceProperties object itself.
     */
    public NamespaceDeviceProperties withAttributes(Map<String, BinaryData> attributes) {
        this.attributes = attributes;
        return this;
    }

    /**
     * Get the status property: Device status updates.
     * 
     * @return the status value.
     */
    public DeviceStatus status() {
        return this.status;
    }

    /**
     * Get the version property: An integer that is incremented each time the resource is modified.
     * 
     * @return the version value.
     */
    public Long version() {
        return this.version;
    }

    /**
     * Get the lastTransitionTime property: A timestamp (in UTC) that is updated each time the resource is modified.
     * 
     * @return the lastTransitionTime value.
     */
    public OffsetDateTime lastTransitionTime() {
        return this.lastTransitionTime;
    }

    /**
     * Get the provisioningState property: Provisioning state of the resource.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the policy property: Policy used to issue device certificates.
     * 
     * @return the policy value.
     */
    public DeviceCredentialPolicy policy() {
        return this.policy;
    }

    /**
     * Set the policy property: Policy used to issue device certificates.
     * 
     * @param policy the policy value to set.
     * @return the NamespaceDeviceProperties object itself.
     */
    public NamespaceDeviceProperties withPolicy(DeviceCredentialPolicy policy) {
        this.policy = policy;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("enabled", this.enabled);
        jsonWriter.writeStringField("externalDeviceId", this.externalDeviceId);
        jsonWriter.writeStringField("discoveredDeviceRef", this.discoveredDeviceRef);
        jsonWriter.writeStringField("manufacturer", this.manufacturer);
        jsonWriter.writeStringField("model", this.model);
        jsonWriter.writeStringField("operatingSystem", this.operatingSystem);
        jsonWriter.writeStringField("operatingSystemVersion", this.operatingSystemVersion);
        jsonWriter.writeJsonField("endpoints", this.endpoints);
        jsonWriter.writeMapField("attributes", this.attributes,
            (writer, element) -> writer.writeUntyped(element == null ? null : element.toObject(Object.class)));
        jsonWriter.writeJsonField("policy", this.policy);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NamespaceDeviceProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NamespaceDeviceProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the NamespaceDeviceProperties.
     */
    public static NamespaceDeviceProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NamespaceDeviceProperties deserializedNamespaceDeviceProperties = new NamespaceDeviceProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("uuid".equals(fieldName)) {
                    deserializedNamespaceDeviceProperties.uuid = reader.getString();
                } else if ("enabled".equals(fieldName)) {
                    deserializedNamespaceDeviceProperties.enabled = reader.getNullable(JsonReader::getBoolean);
                } else if ("externalDeviceId".equals(fieldName)) {
                    deserializedNamespaceDeviceProperties.externalDeviceId = reader.getString();
                } else if ("discoveredDeviceRef".equals(fieldName)) {
                    deserializedNamespaceDeviceProperties.discoveredDeviceRef = reader.getString();
                } else if ("manufacturer".equals(fieldName)) {
                    deserializedNamespaceDeviceProperties.manufacturer = reader.getString();
                } else if ("model".equals(fieldName)) {
                    deserializedNamespaceDeviceProperties.model = reader.getString();
                } else if ("operatingSystem".equals(fieldName)) {
                    deserializedNamespaceDeviceProperties.operatingSystem = reader.getString();
                } else if ("operatingSystemVersion".equals(fieldName)) {
                    deserializedNamespaceDeviceProperties.operatingSystemVersion = reader.getString();
                } else if ("endpoints".equals(fieldName)) {
                    deserializedNamespaceDeviceProperties.endpoints = MessagingEndpoints.fromJson(reader);
                } else if ("attributes".equals(fieldName)) {
                    Map<String, BinaryData> attributes = reader.readMap(reader1 -> reader1
                        .getNullable(nonNullReader -> BinaryData.fromObject(nonNullReader.readUntyped())));
                    deserializedNamespaceDeviceProperties.attributes = attributes;
                } else if ("status".equals(fieldName)) {
                    deserializedNamespaceDeviceProperties.status = DeviceStatus.fromJson(reader);
                } else if ("version".equals(fieldName)) {
                    deserializedNamespaceDeviceProperties.version = reader.getNullable(JsonReader::getLong);
                } else if ("lastTransitionTime".equals(fieldName)) {
                    deserializedNamespaceDeviceProperties.lastTransitionTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedNamespaceDeviceProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else if ("policy".equals(fieldName)) {
                    deserializedNamespaceDeviceProperties.policy = DeviceCredentialPolicy.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNamespaceDeviceProperties;
        });
    }
}
