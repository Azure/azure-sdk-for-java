// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.deviceregistry.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Defines the discovered dataset data point properties.
 */
@Fluent
public final class NamespaceDiscoveredDatasetDataPoint
    implements JsonSerializable<NamespaceDiscoveredDatasetDataPoint> {
    /*
     * The name of the data point.
     */
    private String name;

    /*
     * The address of the source of the data in the asset (e.g. URL) so that a client can access the data source on the
     * asset.
     */
    private String dataSource;

    /*
     * Stringified JSON that contains connector-specific configuration for the data point. For OPC UA, this could
     * include configuration like, publishingInterval, samplingInterval, and queueSize.
     */
    private String dataPointConfiguration;

    /*
     * UTC timestamp indicating when the data point was added or modified.
     */
    private OffsetDateTime lastUpdatedOn;

    /*
     * URI or type definition ID.
     */
    private String typeRef;

    /**
     * Creates an instance of NamespaceDiscoveredDatasetDataPoint class.
     */
    public NamespaceDiscoveredDatasetDataPoint() {
    }

    /**
     * Get the name property: The name of the data point.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: The name of the data point.
     * 
     * @param name the name value to set.
     * @return the NamespaceDiscoveredDatasetDataPoint object itself.
     */
    public NamespaceDiscoveredDatasetDataPoint withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the dataSource property: The address of the source of the data in the asset (e.g. URL) so that a client can
     * access the data source on the asset.
     * 
     * @return the dataSource value.
     */
    public String dataSource() {
        return this.dataSource;
    }

    /**
     * Set the dataSource property: The address of the source of the data in the asset (e.g. URL) so that a client can
     * access the data source on the asset.
     * 
     * @param dataSource the dataSource value to set.
     * @return the NamespaceDiscoveredDatasetDataPoint object itself.
     */
    public NamespaceDiscoveredDatasetDataPoint withDataSource(String dataSource) {
        this.dataSource = dataSource;
        return this;
    }

    /**
     * Get the dataPointConfiguration property: Stringified JSON that contains connector-specific configuration for the
     * data point. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and
     * queueSize.
     * 
     * @return the dataPointConfiguration value.
     */
    public String dataPointConfiguration() {
        return this.dataPointConfiguration;
    }

    /**
     * Set the dataPointConfiguration property: Stringified JSON that contains connector-specific configuration for the
     * data point. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and
     * queueSize.
     * 
     * @param dataPointConfiguration the dataPointConfiguration value to set.
     * @return the NamespaceDiscoveredDatasetDataPoint object itself.
     */
    public NamespaceDiscoveredDatasetDataPoint withDataPointConfiguration(String dataPointConfiguration) {
        this.dataPointConfiguration = dataPointConfiguration;
        return this;
    }

    /**
     * Get the lastUpdatedOn property: UTC timestamp indicating when the data point was added or modified.
     * 
     * @return the lastUpdatedOn value.
     */
    public OffsetDateTime lastUpdatedOn() {
        return this.lastUpdatedOn;
    }

    /**
     * Set the lastUpdatedOn property: UTC timestamp indicating when the data point was added or modified.
     * 
     * @param lastUpdatedOn the lastUpdatedOn value to set.
     * @return the NamespaceDiscoveredDatasetDataPoint object itself.
     */
    public NamespaceDiscoveredDatasetDataPoint withLastUpdatedOn(OffsetDateTime lastUpdatedOn) {
        this.lastUpdatedOn = lastUpdatedOn;
        return this;
    }

    /**
     * Get the typeRef property: URI or type definition ID.
     * 
     * @return the typeRef value.
     */
    public String typeRef() {
        return this.typeRef;
    }

    /**
     * Set the typeRef property: URI or type definition ID.
     * 
     * @param typeRef the typeRef value to set.
     * @return the NamespaceDiscoveredDatasetDataPoint object itself.
     */
    public NamespaceDiscoveredDatasetDataPoint withTypeRef(String typeRef) {
        this.typeRef = typeRef;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("dataSource", this.dataSource);
        jsonWriter.writeStringField("dataPointConfiguration", this.dataPointConfiguration);
        jsonWriter.writeStringField("lastUpdatedOn",
            this.lastUpdatedOn == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.lastUpdatedOn));
        jsonWriter.writeStringField("typeRef", this.typeRef);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NamespaceDiscoveredDatasetDataPoint from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NamespaceDiscoveredDatasetDataPoint if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the NamespaceDiscoveredDatasetDataPoint.
     */
    public static NamespaceDiscoveredDatasetDataPoint fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NamespaceDiscoveredDatasetDataPoint deserializedNamespaceDiscoveredDatasetDataPoint
                = new NamespaceDiscoveredDatasetDataPoint();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedNamespaceDiscoveredDatasetDataPoint.name = reader.getString();
                } else if ("dataSource".equals(fieldName)) {
                    deserializedNamespaceDiscoveredDatasetDataPoint.dataSource = reader.getString();
                } else if ("dataPointConfiguration".equals(fieldName)) {
                    deserializedNamespaceDiscoveredDatasetDataPoint.dataPointConfiguration = reader.getString();
                } else if ("lastUpdatedOn".equals(fieldName)) {
                    deserializedNamespaceDiscoveredDatasetDataPoint.lastUpdatedOn = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("typeRef".equals(fieldName)) {
                    deserializedNamespaceDiscoveredDatasetDataPoint.typeRef = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNamespaceDiscoveredDatasetDataPoint;
        });
    }
}
