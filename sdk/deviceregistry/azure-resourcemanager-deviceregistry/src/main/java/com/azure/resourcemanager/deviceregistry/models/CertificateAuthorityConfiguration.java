// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.deviceregistry.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * The configuration to set up an ICA.
 */
@Fluent
public final class CertificateAuthorityConfiguration implements JsonSerializable<CertificateAuthorityConfiguration> {
    /*
     * Crypto type: ECC.
     */
    private SupportedKeyType keyType;

    /*
     * Certificate subject.
     */
    private String subject;

    /*
     * Certificate is valid not before this date. Format ISO8601. Generated based on on validity period.
     */
    private OffsetDateTime validityNotBefore;

    /*
     * Certificate is valid not after this date. Format ISO8601. Generated based on validity period.
     */
    private OffsetDateTime validityNotAfter;

    /**
     * Creates an instance of CertificateAuthorityConfiguration class.
     */
    public CertificateAuthorityConfiguration() {
    }

    /**
     * Get the keyType property: Crypto type: ECC.
     * 
     * @return the keyType value.
     */
    public SupportedKeyType keyType() {
        return this.keyType;
    }

    /**
     * Set the keyType property: Crypto type: ECC.
     * 
     * @param keyType the keyType value to set.
     * @return the CertificateAuthorityConfiguration object itself.
     */
    public CertificateAuthorityConfiguration withKeyType(SupportedKeyType keyType) {
        this.keyType = keyType;
        return this;
    }

    /**
     * Get the subject property: Certificate subject.
     * 
     * @return the subject value.
     */
    public String subject() {
        return this.subject;
    }

    /**
     * Get the validityNotBefore property: Certificate is valid not before this date. Format ISO8601. Generated based on
     * on validity period.
     * 
     * @return the validityNotBefore value.
     */
    public OffsetDateTime validityNotBefore() {
        return this.validityNotBefore;
    }

    /**
     * Get the validityNotAfter property: Certificate is valid not after this date. Format ISO8601. Generated based on
     * validity period.
     * 
     * @return the validityNotAfter value.
     */
    public OffsetDateTime validityNotAfter() {
        return this.validityNotAfter;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("keyType", this.keyType == null ? null : this.keyType.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CertificateAuthorityConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CertificateAuthorityConfiguration if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CertificateAuthorityConfiguration.
     */
    public static CertificateAuthorityConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CertificateAuthorityConfiguration deserializedCertificateAuthorityConfiguration
                = new CertificateAuthorityConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("keyType".equals(fieldName)) {
                    deserializedCertificateAuthorityConfiguration.keyType
                        = SupportedKeyType.fromString(reader.getString());
                } else if ("subject".equals(fieldName)) {
                    deserializedCertificateAuthorityConfiguration.subject = reader.getString();
                } else if ("validityNotBefore".equals(fieldName)) {
                    deserializedCertificateAuthorityConfiguration.validityNotBefore = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("validityNotAfter".equals(fieldName)) {
                    deserializedCertificateAuthorityConfiguration.validityNotAfter = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCertificateAuthorityConfiguration;
        });
    }
}
