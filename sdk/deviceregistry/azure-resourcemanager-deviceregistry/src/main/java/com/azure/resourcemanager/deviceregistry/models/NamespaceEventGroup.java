// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.deviceregistry.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Defines the event group properties.
 */
@Fluent
public final class NamespaceEventGroup implements JsonSerializable<NamespaceEventGroup> {
    /*
     * The name of the event group.
     */
    private String name;

    /*
     * The address of the notifier of the event group in the asset (e.g. URL) so that a client can access the event
     * group on the asset.
     */
    private String dataSource;

    /*
     * Stringified JSON that contains connector-specific configuration for the event group. For OPC UA, this could
     * include configuration like, publishingInterval, samplingInterval, and queueSize.
     */
    private String eventGroupConfiguration;

    /*
     * Destinations for events. Default destinations when destinations is not defined at the event level.
     */
    private List<EventDestination> defaultDestinations;

    /*
     * URI or type definition ID.
     */
    private String typeRef;

    /*
     * Array of events that are part of the event group.
     */
    private List<NamespaceEvent> events;

    /**
     * Creates an instance of NamespaceEventGroup class.
     */
    public NamespaceEventGroup() {
    }

    /**
     * Get the name property: The name of the event group.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: The name of the event group.
     * 
     * @param name the name value to set.
     * @return the NamespaceEventGroup object itself.
     */
    public NamespaceEventGroup withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the dataSource property: The address of the notifier of the event group in the asset (e.g. URL) so that a
     * client can access the event group on the asset.
     * 
     * @return the dataSource value.
     */
    public String dataSource() {
        return this.dataSource;
    }

    /**
     * Set the dataSource property: The address of the notifier of the event group in the asset (e.g. URL) so that a
     * client can access the event group on the asset.
     * 
     * @param dataSource the dataSource value to set.
     * @return the NamespaceEventGroup object itself.
     */
    public NamespaceEventGroup withDataSource(String dataSource) {
        this.dataSource = dataSource;
        return this;
    }

    /**
     * Get the eventGroupConfiguration property: Stringified JSON that contains connector-specific configuration for the
     * event group. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and
     * queueSize.
     * 
     * @return the eventGroupConfiguration value.
     */
    public String eventGroupConfiguration() {
        return this.eventGroupConfiguration;
    }

    /**
     * Set the eventGroupConfiguration property: Stringified JSON that contains connector-specific configuration for the
     * event group. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and
     * queueSize.
     * 
     * @param eventGroupConfiguration the eventGroupConfiguration value to set.
     * @return the NamespaceEventGroup object itself.
     */
    public NamespaceEventGroup withEventGroupConfiguration(String eventGroupConfiguration) {
        this.eventGroupConfiguration = eventGroupConfiguration;
        return this;
    }

    /**
     * Get the defaultDestinations property: Destinations for events. Default destinations when destinations is not
     * defined at the event level.
     * 
     * @return the defaultDestinations value.
     */
    public List<EventDestination> defaultDestinations() {
        return this.defaultDestinations;
    }

    /**
     * Set the defaultDestinations property: Destinations for events. Default destinations when destinations is not
     * defined at the event level.
     * 
     * @param defaultDestinations the defaultDestinations value to set.
     * @return the NamespaceEventGroup object itself.
     */
    public NamespaceEventGroup withDefaultDestinations(List<EventDestination> defaultDestinations) {
        this.defaultDestinations = defaultDestinations;
        return this;
    }

    /**
     * Get the typeRef property: URI or type definition ID.
     * 
     * @return the typeRef value.
     */
    public String typeRef() {
        return this.typeRef;
    }

    /**
     * Set the typeRef property: URI or type definition ID.
     * 
     * @param typeRef the typeRef value to set.
     * @return the NamespaceEventGroup object itself.
     */
    public NamespaceEventGroup withTypeRef(String typeRef) {
        this.typeRef = typeRef;
        return this;
    }

    /**
     * Get the events property: Array of events that are part of the event group.
     * 
     * @return the events value.
     */
    public List<NamespaceEvent> events() {
        return this.events;
    }

    /**
     * Set the events property: Array of events that are part of the event group.
     * 
     * @param events the events value to set.
     * @return the NamespaceEventGroup object itself.
     */
    public NamespaceEventGroup withEvents(List<NamespaceEvent> events) {
        this.events = events;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("dataSource", this.dataSource);
        jsonWriter.writeStringField("eventGroupConfiguration", this.eventGroupConfiguration);
        jsonWriter.writeArrayField("defaultDestinations", this.defaultDestinations,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("typeRef", this.typeRef);
        jsonWriter.writeArrayField("events", this.events, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NamespaceEventGroup from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NamespaceEventGroup if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the NamespaceEventGroup.
     */
    public static NamespaceEventGroup fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NamespaceEventGroup deserializedNamespaceEventGroup = new NamespaceEventGroup();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedNamespaceEventGroup.name = reader.getString();
                } else if ("dataSource".equals(fieldName)) {
                    deserializedNamespaceEventGroup.dataSource = reader.getString();
                } else if ("eventGroupConfiguration".equals(fieldName)) {
                    deserializedNamespaceEventGroup.eventGroupConfiguration = reader.getString();
                } else if ("defaultDestinations".equals(fieldName)) {
                    List<EventDestination> defaultDestinations
                        = reader.readArray(reader1 -> EventDestination.fromJson(reader1));
                    deserializedNamespaceEventGroup.defaultDestinations = defaultDestinations;
                } else if ("typeRef".equals(fieldName)) {
                    deserializedNamespaceEventGroup.typeRef = reader.getString();
                } else if ("events".equals(fieldName)) {
                    List<NamespaceEvent> events = reader.readArray(reader1 -> NamespaceEvent.fromJson(reader1));
                    deserializedNamespaceEventGroup.events = events;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNamespaceEventGroup;
        });
    }
}
