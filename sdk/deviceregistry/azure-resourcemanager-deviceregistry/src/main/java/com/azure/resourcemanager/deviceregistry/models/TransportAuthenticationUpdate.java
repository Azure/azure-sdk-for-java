// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.deviceregistry.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/**
 * Definition of the authentication mechanism for the southbound connector.
 */
@Fluent
public final class TransportAuthenticationUpdate {
    /*
     * Defines a reference to a secret which contains all certificates and private keys that can be used by the southbound connector connecting to the shop floor/OT device. The accepted extensions are .der for certificates and .pfx/.pem for private keys.
     */
    @JsonProperty(value = "ownCertificates")
    private List<OwnCertificate> ownCertificates;

    /**
     * Creates an instance of TransportAuthenticationUpdate class.
     */
    public TransportAuthenticationUpdate() {
    }

    /**
     * Get the ownCertificates property: Defines a reference to a secret which contains all certificates and private
     * keys that can be used by the southbound connector connecting to the shop floor/OT device. The accepted extensions
     * are .der for certificates and .pfx/.pem for private keys.
     * 
     * @return the ownCertificates value.
     */
    public List<OwnCertificate> ownCertificates() {
        return this.ownCertificates;
    }

    /**
     * Set the ownCertificates property: Defines a reference to a secret which contains all certificates and private
     * keys that can be used by the southbound connector connecting to the shop floor/OT device. The accepted extensions
     * are .der for certificates and .pfx/.pem for private keys.
     * 
     * @param ownCertificates the ownCertificates value to set.
     * @return the TransportAuthenticationUpdate object itself.
     */
    public TransportAuthenticationUpdate withOwnCertificates(List<OwnCertificate> ownCertificates) {
        this.ownCertificates = ownCertificates;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (ownCertificates() != null) {
            ownCertificates().forEach(e -> e.validate());
        }
    }
}
