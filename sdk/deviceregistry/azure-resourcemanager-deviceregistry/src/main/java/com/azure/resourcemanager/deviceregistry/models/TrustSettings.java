// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.deviceregistry.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Defines server trust settings for an endpoint.
 */
@Fluent
public final class TrustSettings implements JsonSerializable<TrustSettings> {
    /*
     * Defines a secret reference for certificates to trust.
     */
    private String trustList;

    /**
     * Creates an instance of TrustSettings class.
     */
    public TrustSettings() {
    }

    /**
     * Get the trustList property: Defines a secret reference for certificates to trust.
     * 
     * @return the trustList value.
     */
    public String trustList() {
        return this.trustList;
    }

    /**
     * Set the trustList property: Defines a secret reference for certificates to trust.
     * 
     * @param trustList the trustList value to set.
     * @return the TrustSettings object itself.
     */
    public TrustSettings withTrustList(String trustList) {
        this.trustList = trustList;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("trustList", this.trustList);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TrustSettings from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TrustSettings if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the TrustSettings.
     */
    public static TrustSettings fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TrustSettings deserializedTrustSettings = new TrustSettings();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("trustList".equals(fieldName)) {
                    deserializedTrustSettings.trustList = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTrustSettings;
        });
    }
}
