// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.deviceregistry.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The updatable properties of the Namespace.
 */
@Fluent
public final class NamespaceUpdateProperties implements JsonSerializable<NamespaceUpdateProperties> {
    /*
     * Assigned and unassigned messaging endpoints.
     */
    private Messaging messaging;

    /**
     * Creates an instance of NamespaceUpdateProperties class.
     */
    public NamespaceUpdateProperties() {
    }

    /**
     * Get the messaging property: Assigned and unassigned messaging endpoints.
     * 
     * @return the messaging value.
     */
    public Messaging messaging() {
        return this.messaging;
    }

    /**
     * Set the messaging property: Assigned and unassigned messaging endpoints.
     * 
     * @param messaging the messaging value to set.
     * @return the NamespaceUpdateProperties object itself.
     */
    public NamespaceUpdateProperties withMessaging(Messaging messaging) {
        this.messaging = messaging;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("messaging", this.messaging);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NamespaceUpdateProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NamespaceUpdateProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the NamespaceUpdateProperties.
     */
    public static NamespaceUpdateProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NamespaceUpdateProperties deserializedNamespaceUpdateProperties = new NamespaceUpdateProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("messaging".equals(fieldName)) {
                    deserializedNamespaceUpdateProperties.messaging = Messaging.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNamespaceUpdateProperties;
        });
    }
}
