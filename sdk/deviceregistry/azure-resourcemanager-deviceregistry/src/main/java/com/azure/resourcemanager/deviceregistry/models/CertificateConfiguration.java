// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.deviceregistry.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The certificate configuration.
 */
@Fluent
public final class CertificateConfiguration implements JsonSerializable<CertificateConfiguration> {
    /*
     * The configuration to set up an ICA.
     */
    private CertificateAuthorityConfiguration certificateAuthorityConfiguration;

    /*
     * The leaf certificate configuration.
     */
    private LeafCertificateConfiguration leafCertificateConfiguration;

    /**
     * Creates an instance of CertificateConfiguration class.
     */
    public CertificateConfiguration() {
    }

    /**
     * Get the certificateAuthorityConfiguration property: The configuration to set up an ICA.
     * 
     * @return the certificateAuthorityConfiguration value.
     */
    public CertificateAuthorityConfiguration certificateAuthorityConfiguration() {
        return this.certificateAuthorityConfiguration;
    }

    /**
     * Set the certificateAuthorityConfiguration property: The configuration to set up an ICA.
     * 
     * @param certificateAuthorityConfiguration the certificateAuthorityConfiguration value to set.
     * @return the CertificateConfiguration object itself.
     */
    public CertificateConfiguration
        withCertificateAuthorityConfiguration(CertificateAuthorityConfiguration certificateAuthorityConfiguration) {
        this.certificateAuthorityConfiguration = certificateAuthorityConfiguration;
        return this;
    }

    /**
     * Get the leafCertificateConfiguration property: The leaf certificate configuration.
     * 
     * @return the leafCertificateConfiguration value.
     */
    public LeafCertificateConfiguration leafCertificateConfiguration() {
        return this.leafCertificateConfiguration;
    }

    /**
     * Set the leafCertificateConfiguration property: The leaf certificate configuration.
     * 
     * @param leafCertificateConfiguration the leafCertificateConfiguration value to set.
     * @return the CertificateConfiguration object itself.
     */
    public CertificateConfiguration
        withLeafCertificateConfiguration(LeafCertificateConfiguration leafCertificateConfiguration) {
        this.leafCertificateConfiguration = leafCertificateConfiguration;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("certificateAuthorityConfiguration", this.certificateAuthorityConfiguration);
        jsonWriter.writeJsonField("leafCertificateConfiguration", this.leafCertificateConfiguration);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CertificateConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CertificateConfiguration if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CertificateConfiguration.
     */
    public static CertificateConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CertificateConfiguration deserializedCertificateConfiguration = new CertificateConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("certificateAuthorityConfiguration".equals(fieldName)) {
                    deserializedCertificateConfiguration.certificateAuthorityConfiguration
                        = CertificateAuthorityConfiguration.fromJson(reader);
                } else if ("leafCertificateConfiguration".equals(fieldName)) {
                    deserializedCertificateConfiguration.leafCertificateConfiguration
                        = LeafCertificateConfiguration.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCertificateConfiguration;
        });
    }
}
