// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.deviceregistry.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The x509 certificate for authentication mode Certificate.
 */
@Fluent
public final class X509CertificateCredentials implements JsonSerializable<X509CertificateCredentials> {
    /*
     * The name of the secret containing the certificate and private key (e.g. stored as .der/.pem or .der/.pfx).
     */
    private String certificateSecretName;

    /*
     * The name of the secret containing the certificate private key in PEM or DER format.
     */
    private String keySecretName;

    /*
     * The name of the secret containing the combined intermediate certificates in PEM format.
     */
    private String intermediateCertificatesSecretName;

    /**
     * Creates an instance of X509CertificateCredentials class.
     */
    public X509CertificateCredentials() {
    }

    /**
     * Get the certificateSecretName property: The name of the secret containing the certificate and private key (e.g.
     * stored as .der/.pem or .der/.pfx).
     * 
     * @return the certificateSecretName value.
     */
    public String certificateSecretName() {
        return this.certificateSecretName;
    }

    /**
     * Set the certificateSecretName property: The name of the secret containing the certificate and private key (e.g.
     * stored as .der/.pem or .der/.pfx).
     * 
     * @param certificateSecretName the certificateSecretName value to set.
     * @return the X509CertificateCredentials object itself.
     */
    public X509CertificateCredentials withCertificateSecretName(String certificateSecretName) {
        this.certificateSecretName = certificateSecretName;
        return this;
    }

    /**
     * Get the keySecretName property: The name of the secret containing the certificate private key in PEM or DER
     * format.
     * 
     * @return the keySecretName value.
     */
    public String keySecretName() {
        return this.keySecretName;
    }

    /**
     * Set the keySecretName property: The name of the secret containing the certificate private key in PEM or DER
     * format.
     * 
     * @param keySecretName the keySecretName value to set.
     * @return the X509CertificateCredentials object itself.
     */
    public X509CertificateCredentials withKeySecretName(String keySecretName) {
        this.keySecretName = keySecretName;
        return this;
    }

    /**
     * Get the intermediateCertificatesSecretName property: The name of the secret containing the combined intermediate
     * certificates in PEM format.
     * 
     * @return the intermediateCertificatesSecretName value.
     */
    public String intermediateCertificatesSecretName() {
        return this.intermediateCertificatesSecretName;
    }

    /**
     * Set the intermediateCertificatesSecretName property: The name of the secret containing the combined intermediate
     * certificates in PEM format.
     * 
     * @param intermediateCertificatesSecretName the intermediateCertificatesSecretName value to set.
     * @return the X509CertificateCredentials object itself.
     */
    public X509CertificateCredentials
        withIntermediateCertificatesSecretName(String intermediateCertificatesSecretName) {
        this.intermediateCertificatesSecretName = intermediateCertificatesSecretName;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("certificateSecretName", this.certificateSecretName);
        jsonWriter.writeStringField("keySecretName", this.keySecretName);
        jsonWriter.writeStringField("intermediateCertificatesSecretName", this.intermediateCertificatesSecretName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of X509CertificateCredentials from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of X509CertificateCredentials if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the X509CertificateCredentials.
     */
    public static X509CertificateCredentials fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            X509CertificateCredentials deserializedX509CertificateCredentials = new X509CertificateCredentials();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("certificateSecretName".equals(fieldName)) {
                    deserializedX509CertificateCredentials.certificateSecretName = reader.getString();
                } else if ("keySecretName".equals(fieldName)) {
                    deserializedX509CertificateCredentials.keySecretName = reader.getString();
                } else if ("intermediateCertificatesSecretName".equals(fieldName)) {
                    deserializedX509CertificateCredentials.intermediateCertificatesSecretName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedX509CertificateCredentials;
        });
    }
}
