// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.deviceregistry.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Defines the device status properties.
 */
@Immutable
public final class DeviceStatus implements JsonSerializable<DeviceStatus> {
    /*
     * Defines the device status config properties.
     */
    private StatusConfig config;

    /*
     * Defines the device status for inbound/outbound endpoints.
     */
    private DeviceStatusEndpoints endpoints;

    /**
     * Creates an instance of DeviceStatus class.
     */
    private DeviceStatus() {
    }

    /**
     * Get the config property: Defines the device status config properties.
     * 
     * @return the config value.
     */
    public StatusConfig config() {
        return this.config;
    }

    /**
     * Get the endpoints property: Defines the device status for inbound/outbound endpoints.
     * 
     * @return the endpoints value.
     */
    public DeviceStatusEndpoints endpoints() {
        return this.endpoints;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (config() != null) {
            config().validate();
        }
        if (endpoints() != null) {
            endpoints().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DeviceStatus from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DeviceStatus if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the DeviceStatus.
     */
    public static DeviceStatus fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DeviceStatus deserializedDeviceStatus = new DeviceStatus();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("config".equals(fieldName)) {
                    deserializedDeviceStatus.config = StatusConfig.fromJson(reader);
                } else if ("endpoints".equals(fieldName)) {
                    deserializedDeviceStatus.endpoints = DeviceStatusEndpoints.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDeviceStatus;
        });
    }
}
