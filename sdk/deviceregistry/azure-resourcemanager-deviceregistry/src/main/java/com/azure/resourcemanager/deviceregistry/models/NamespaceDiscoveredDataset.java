// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.deviceregistry.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

/**
 * Defines the dataset properties.
 */
@Fluent
public final class NamespaceDiscoveredDataset implements JsonSerializable<NamespaceDiscoveredDataset> {
    /*
     * Name of the dataset.
     */
    private String name;

    /*
     * Reference to a data source for a given dataset.
     */
    private String dataSource;

    /*
     * URI or type definition ID.
     */
    private String typeRef;

    /*
     * Stringified JSON that contains connector-specific properties that describes configuration for the specific
     * dataset.
     */
    private String datasetConfiguration;

    /*
     * Destinations for a dataset.
     */
    private List<DatasetDestination> destinations;

    /*
     * Array of data points that are part of the dataset. Each data point can have per-data point configuration.
     */
    private List<NamespaceDiscoveredDatasetDataPoint> dataPoints;

    /*
     * Timestamp (in UTC) indicating when the dataset was added or modified.
     */
    private OffsetDateTime lastUpdatedOn;

    /**
     * Creates an instance of NamespaceDiscoveredDataset class.
     */
    public NamespaceDiscoveredDataset() {
    }

    /**
     * Get the name property: Name of the dataset.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: Name of the dataset.
     * 
     * @param name the name value to set.
     * @return the NamespaceDiscoveredDataset object itself.
     */
    public NamespaceDiscoveredDataset withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the dataSource property: Reference to a data source for a given dataset.
     * 
     * @return the dataSource value.
     */
    public String dataSource() {
        return this.dataSource;
    }

    /**
     * Set the dataSource property: Reference to a data source for a given dataset.
     * 
     * @param dataSource the dataSource value to set.
     * @return the NamespaceDiscoveredDataset object itself.
     */
    public NamespaceDiscoveredDataset withDataSource(String dataSource) {
        this.dataSource = dataSource;
        return this;
    }

    /**
     * Get the typeRef property: URI or type definition ID.
     * 
     * @return the typeRef value.
     */
    public String typeRef() {
        return this.typeRef;
    }

    /**
     * Set the typeRef property: URI or type definition ID.
     * 
     * @param typeRef the typeRef value to set.
     * @return the NamespaceDiscoveredDataset object itself.
     */
    public NamespaceDiscoveredDataset withTypeRef(String typeRef) {
        this.typeRef = typeRef;
        return this;
    }

    /**
     * Get the datasetConfiguration property: Stringified JSON that contains connector-specific properties that
     * describes configuration for the specific dataset.
     * 
     * @return the datasetConfiguration value.
     */
    public String datasetConfiguration() {
        return this.datasetConfiguration;
    }

    /**
     * Set the datasetConfiguration property: Stringified JSON that contains connector-specific properties that
     * describes configuration for the specific dataset.
     * 
     * @param datasetConfiguration the datasetConfiguration value to set.
     * @return the NamespaceDiscoveredDataset object itself.
     */
    public NamespaceDiscoveredDataset withDatasetConfiguration(String datasetConfiguration) {
        this.datasetConfiguration = datasetConfiguration;
        return this;
    }

    /**
     * Get the destinations property: Destinations for a dataset.
     * 
     * @return the destinations value.
     */
    public List<DatasetDestination> destinations() {
        return this.destinations;
    }

    /**
     * Set the destinations property: Destinations for a dataset.
     * 
     * @param destinations the destinations value to set.
     * @return the NamespaceDiscoveredDataset object itself.
     */
    public NamespaceDiscoveredDataset withDestinations(List<DatasetDestination> destinations) {
        this.destinations = destinations;
        return this;
    }

    /**
     * Get the dataPoints property: Array of data points that are part of the dataset. Each data point can have per-data
     * point configuration.
     * 
     * @return the dataPoints value.
     */
    public List<NamespaceDiscoveredDatasetDataPoint> dataPoints() {
        return this.dataPoints;
    }

    /**
     * Set the dataPoints property: Array of data points that are part of the dataset. Each data point can have per-data
     * point configuration.
     * 
     * @param dataPoints the dataPoints value to set.
     * @return the NamespaceDiscoveredDataset object itself.
     */
    public NamespaceDiscoveredDataset withDataPoints(List<NamespaceDiscoveredDatasetDataPoint> dataPoints) {
        this.dataPoints = dataPoints;
        return this;
    }

    /**
     * Get the lastUpdatedOn property: Timestamp (in UTC) indicating when the dataset was added or modified.
     * 
     * @return the lastUpdatedOn value.
     */
    public OffsetDateTime lastUpdatedOn() {
        return this.lastUpdatedOn;
    }

    /**
     * Set the lastUpdatedOn property: Timestamp (in UTC) indicating when the dataset was added or modified.
     * 
     * @param lastUpdatedOn the lastUpdatedOn value to set.
     * @return the NamespaceDiscoveredDataset object itself.
     */
    public NamespaceDiscoveredDataset withLastUpdatedOn(OffsetDateTime lastUpdatedOn) {
        this.lastUpdatedOn = lastUpdatedOn;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("dataSource", this.dataSource);
        jsonWriter.writeStringField("typeRef", this.typeRef);
        jsonWriter.writeStringField("datasetConfiguration", this.datasetConfiguration);
        jsonWriter.writeArrayField("destinations", this.destinations, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("dataPoints", this.dataPoints, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("lastUpdatedOn",
            this.lastUpdatedOn == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.lastUpdatedOn));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NamespaceDiscoveredDataset from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NamespaceDiscoveredDataset if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the NamespaceDiscoveredDataset.
     */
    public static NamespaceDiscoveredDataset fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NamespaceDiscoveredDataset deserializedNamespaceDiscoveredDataset = new NamespaceDiscoveredDataset();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedNamespaceDiscoveredDataset.name = reader.getString();
                } else if ("dataSource".equals(fieldName)) {
                    deserializedNamespaceDiscoveredDataset.dataSource = reader.getString();
                } else if ("typeRef".equals(fieldName)) {
                    deserializedNamespaceDiscoveredDataset.typeRef = reader.getString();
                } else if ("datasetConfiguration".equals(fieldName)) {
                    deserializedNamespaceDiscoveredDataset.datasetConfiguration = reader.getString();
                } else if ("destinations".equals(fieldName)) {
                    List<DatasetDestination> destinations
                        = reader.readArray(reader1 -> DatasetDestination.fromJson(reader1));
                    deserializedNamespaceDiscoveredDataset.destinations = destinations;
                } else if ("dataPoints".equals(fieldName)) {
                    List<NamespaceDiscoveredDatasetDataPoint> dataPoints
                        = reader.readArray(reader1 -> NamespaceDiscoveredDatasetDataPoint.fromJson(reader1));
                    deserializedNamespaceDiscoveredDataset.dataPoints = dataPoints;
                } else if ("lastUpdatedOn".equals(fieldName)) {
                    deserializedNamespaceDiscoveredDataset.lastUpdatedOn = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNamespaceDiscoveredDataset;
        });
    }
}
