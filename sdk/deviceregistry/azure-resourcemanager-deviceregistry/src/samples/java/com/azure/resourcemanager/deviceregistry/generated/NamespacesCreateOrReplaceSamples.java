// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.deviceregistry.generated;

import com.azure.resourcemanager.deviceregistry.models.Messaging;
import com.azure.resourcemanager.deviceregistry.models.MessagingEndpoint;
import com.azure.resourcemanager.deviceregistry.models.NamespaceProperties;
import com.azure.resourcemanager.deviceregistry.models.SystemAssignedServiceIdentity;
import com.azure.resourcemanager.deviceregistry.models.SystemAssignedServiceIdentityType;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for Namespaces CreateOrReplace.
 */
public final class NamespacesCreateOrReplaceSamples {
    /*
     * x-ms-original-file: 2025-10-01/CreateOrReplace_Namespace_With_Endpoints.json
     */
    /**
     * Sample code: CreateOrReplace_Namespace_With_Endpoints.
     * 
     * @param manager Entry point to DeviceRegistryManager.
     */
    public static void
        createOrReplaceNamespaceWithEndpoints(com.azure.resourcemanager.deviceregistry.DeviceRegistryManager manager) {
        manager.namespaces()
            .define("adr-namespace-gbk0925-n01")
            .withRegion("North Europe")
            .withExistingResourceGroup("myResourceGroup")
            .withProperties(
                new NamespaceProperties().withMessaging(new Messaging().withEndpoints(mapOf("eventGridEndpoint",
                    new MessagingEndpoint().withEndpointType("Microsoft.Devices/IoTHubs")
                        .withAddress("https://myeventgridtopic.westeurope-1.eventgrid.azure.net/api/events"),
                    "anotherEventGridEndpoint",
                    new MessagingEndpoint().withEndpointType("Microsoft.Devices/IoTHubs")
                        .withAddress("https://myeventgridtopic2.westeurope-1.eventgrid.azure.net/api/events")))))
            .withIdentity(
                new SystemAssignedServiceIdentity().withType(SystemAssignedServiceIdentityType.SYSTEM_ASSIGNED))
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
