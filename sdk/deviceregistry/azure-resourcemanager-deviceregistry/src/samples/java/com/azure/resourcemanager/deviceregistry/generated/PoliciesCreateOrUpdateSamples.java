// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.deviceregistry.generated;

import com.azure.resourcemanager.deviceregistry.models.CertificateAuthorityConfiguration;
import com.azure.resourcemanager.deviceregistry.models.CertificateConfiguration;
import com.azure.resourcemanager.deviceregistry.models.LeafCertificateConfiguration;
import com.azure.resourcemanager.deviceregistry.models.PolicyProperties;
import com.azure.resourcemanager.deviceregistry.models.SupportedKeyType;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for Policies CreateOrUpdate.
 */
public final class PoliciesCreateOrUpdateSamples {
    /*
     * x-ms-original-file: 2025-11-01-preview/CreateOrReplace_Policies.json
     */
    /**
     * Sample code: CreateOrReplace_Policies.
     * 
     * @param manager Entry point to DeviceRegistryManager.
     */
    public static void createOrReplacePolicies(com.azure.resourcemanager.deviceregistry.DeviceRegistryManager manager) {
        manager.policies()
            .define("mypolicy")
            .withRegion("zjqtuvprnxvimzkkxaobgkm")
            .withExistingNamespace("rgdeviceregistry", "mynamespace")
            .withTags(mapOf("key1088", "fakeTokenPlaceholder"))
            .withProperties(new PolicyProperties().withCertificate(new CertificateConfiguration()
                .withCertificateAuthorityConfiguration(
                    new CertificateAuthorityConfiguration().withKeyType(SupportedKeyType.ECC))
                .withLeafCertificateConfiguration(new LeafCertificateConfiguration().withValidityPeriodInDays(10))))
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
