// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.deviceregistry.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.deviceregistry.models.DeviceMessagingEndpoint;
import com.azure.resourcemanager.deviceregistry.models.MessagingEndpoints;
import com.azure.resourcemanager.deviceregistry.models.NamespaceDevice;
import com.azure.resourcemanager.deviceregistry.models.NamespaceDeviceUpdateProperties;
import com.azure.resourcemanager.deviceregistry.models.OutboundEndpoints;
import java.nio.charset.StandardCharsets;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for NamespaceDevices Update.
 */
public final class NamespaceDevicesUpdateSamples {
    /*
     * x-ms-original-file: 2025-10-01/Update_NamespaceDevice.json
     */
    /**
     * Sample code: Update_NamespaceDevices.
     * 
     * @param manager Entry point to DeviceRegistryManager.
     */
    public static void updateNamespaceDevices(com.azure.resourcemanager.deviceregistry.DeviceRegistryManager manager) {
        NamespaceDevice resource = manager.namespaceDevices()
            .getWithResponse("myResourceGroup", "adr-namespace-gbk0925-n01", "dev-namespace-gbk0925-n01",
                com.azure.core.util.Context.NONE)
            .getValue();
        resource.update()
            .withProperties(new NamespaceDeviceUpdateProperties()
                .withEndpoints(new MessagingEndpoints()
                    .withOutbound(new OutboundEndpoints().withAssigned(mapOf("eventGridEndpoint",
                        new DeviceMessagingEndpoint().withEndpointType("Microsoft.Devices/IoTHubs")
                            .withAddress("https://myeventgridtopic.westeurope-1.eventgrid.azure.net/api/events")))))
                .withAttributes(mapOf("deviceType", BinaryData.fromBytes("sensor".getBytes(StandardCharsets.UTF_8)),
                    "deviceOwner", BinaryData.fromBytes("IT".getBytes(StandardCharsets.UTF_8)), "deviceCategory",
                    BinaryData.fromBytes("16".getBytes(StandardCharsets.UTF_8))))
                .withEnabled(true))
            .apply();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
