// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.deviceregistry.generated;

import com.azure.resourcemanager.deviceregistry.models.DeviceMessagingEndpoint;
import com.azure.resourcemanager.deviceregistry.models.DiscoveredMessagingEndpoints;
import com.azure.resourcemanager.deviceregistry.models.DiscoveredOutboundEndpoints;
import com.azure.resourcemanager.deviceregistry.models.ExtendedLocation;
import com.azure.resourcemanager.deviceregistry.models.NamespaceDiscoveredDeviceProperties;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for NamespaceDiscoveredDevices CreateOrReplace.
 */
public final class NamespaceDiscoveredDevicesCreateOrReplaceSamples {
    /*
     * x-ms-original-file: 2025-11-01-preview/CreateOrReplace_NamespaceDiscoveredDevice.json
     */
    /**
     * Sample code: CreateOrReplace_NamespaceDiscoveredDevice.
     * 
     * @param manager Entry point to DeviceRegistryManager.
     */
    public static void createOrReplaceNamespaceDiscoveredDevice(
        com.azure.resourcemanager.deviceregistry.DeviceRegistryManager manager) {
        manager.namespaceDiscoveredDevices()
            .define("my-discovereddevice-1")
            .withRegion("West Europe")
            .withExistingNamespace("myResourceGroup", "my-namespace-1")
            .withExtendedLocation(new ExtendedLocation().withType("CustomLocation")
                .withName(
                    "/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/microsoft.extendedlocation/customlocations/location1"))
            .withTags(mapOf("site", "building-1"))
            .withProperties(new NamespaceDiscoveredDeviceProperties()
                .withEndpoints(new DiscoveredMessagingEndpoints()
                    .withOutbound(new DiscoveredOutboundEndpoints().withAssigned(mapOf("eventGridEndpoint",
                        new DeviceMessagingEndpoint().withEndpointType("Microsoft.Devices/IoTHubs")
                            .withAddress("https://myeventgridtopic.westeurope-1.eventgrid.azure.net/api/events")))))
                .withDiscoveryId("discoveryId1")
                .withVersion(1L))
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
