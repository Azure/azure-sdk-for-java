// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.deviceregistry.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.deviceregistry.models.AuthenticationMethod;
import com.azure.resourcemanager.deviceregistry.models.DeviceMessagingEndpoint;
import com.azure.resourcemanager.deviceregistry.models.ExtendedLocation;
import com.azure.resourcemanager.deviceregistry.models.HostAuthentication;
import com.azure.resourcemanager.deviceregistry.models.InboundEndpoints;
import com.azure.resourcemanager.deviceregistry.models.MessagingEndpoints;
import com.azure.resourcemanager.deviceregistry.models.NamespaceDeviceProperties;
import com.azure.resourcemanager.deviceregistry.models.OutboundEndpoints;
import com.azure.resourcemanager.deviceregistry.models.TrustSettings;
import com.azure.resourcemanager.deviceregistry.models.UsernamePasswordCredentials;
import com.azure.resourcemanager.deviceregistry.models.X509Credentials;
import java.nio.charset.StandardCharsets;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for NamespaceDevices CreateOrReplace.
 */
public final class NamespaceDevicesCreateOrReplaceSamples {
    /*
     * x-ms-original-file: 2025-07-01-preview/CreateOrReplace_NamespaceDevice_Edge_x509.json
     */
    /**
     * Sample code: Create edge enabled device with x509 inbound authentication.
     * 
     * @param manager Entry point to DeviceRegistryManager.
     */
    public static void createEdgeEnabledDeviceWithX509InboundAuthentication(
        com.azure.resourcemanager.deviceregistry.DeviceRegistryManager manager) {
        manager.namespaceDevices()
            .define("namespace-device-on-edge")
            .withRegion("West Europe")
            .withExistingNamespace("myResourceGroup", "adr-namespace-gbk0925-n01")
            .withProperties(new NamespaceDeviceProperties().withEnabled(true)
                .withExternalDeviceId("unique-edge-device-identifier")
                .withEndpoints(new MessagingEndpoints().withInbound(mapOf("theV1OPCUAEndpoint", new InboundEndpoints()
                    .withEndpointType("microsoft.opcua/v1")
                    .withAddress("opc.tcp://192.168.86.23:51211/UA/SampleServer")
                    .withVersion("2")
                    .withAuthentication(new HostAuthentication().withMethod(AuthenticationMethod.CERTIFICATE)
                        .withX509Credentials(new X509Credentials().withCertificateSecretName("fakeTokenPlaceholder"))),
                    "theV2OPCUAEndpoint",
                    new InboundEndpoints().withEndpointType("microsoft.opcua/v1")
                        .withAddress("opc.tcp://192.168.86.23:51211/UA/SampleServer")
                        .withVersion("2")
                        .withAuthentication(new HostAuthentication().withMethod(AuthenticationMethod.CERTIFICATE)
                            .withX509Credentials(
                                new X509Credentials().withCertificateSecretName("fakeTokenPlaceholder")))
                        .withTrustSettings(new TrustSettings().withTrustList("trust-secret-reference")))))
                .withAttributes(
                    mapOf("deviceType", BinaryData.fromBytes("OPCUAServers".getBytes(StandardCharsets.UTF_8)),
                        "deviceOwner", BinaryData.fromBytes("OT".getBytes(StandardCharsets.UTF_8)), "deviceCategory",
                        BinaryData.fromBytes("16".getBytes(StandardCharsets.UTF_8)))))
            .withExtendedLocation(new ExtendedLocation().withType("CustomLocation")
                .withName(
                    "/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/microsoft.extendedlocation/customlocations/location1"))
            .create();
    }

    /*
     * x-ms-original-file: 2025-07-01-preview/CreateOrReplace_NamespaceDevice_Edge_Anonymous.json
     */
    /**
     * Sample code: Create edge enabled device with anonymous host authentication.
     * 
     * @param manager Entry point to DeviceRegistryManager.
     */
    public static void createEdgeEnabledDeviceWithAnonymousHostAuthentication(
        com.azure.resourcemanager.deviceregistry.DeviceRegistryManager manager) {
        manager.namespaceDevices()
            .define("namespace-device-on-edge")
            .withRegion("West Europe")
            .withExistingNamespace("myResourceGroup", "adr-namespace-gbk0925-n01")
            .withProperties(new NamespaceDeviceProperties().withEnabled(true)
                .withExternalDeviceId("unique-edge-device-identifier")
                .withEndpoints(new MessagingEndpoints().withInbound(mapOf("theOnlyOPCUABroker",
                    new InboundEndpoints().withEndpointType("microsoft.opcua/v1")
                        .withAddress("opc.tcp://192.168.86.23:51211/UA/SampleServer")
                        .withVersion("2")
                        .withAuthentication(new HostAuthentication().withMethod(AuthenticationMethod.ANONYMOUS)))))
                .withAttributes(
                    mapOf("deviceType", BinaryData.fromBytes("dough-maker".getBytes(StandardCharsets.UTF_8)),
                        "deviceOwner", BinaryData.fromBytes("OT".getBytes(StandardCharsets.UTF_8)), "deviceCategory",
                        BinaryData.fromBytes("16".getBytes(StandardCharsets.UTF_8)))))
            .withExtendedLocation(new ExtendedLocation().withType("CustomLocation")
                .withName(
                    "/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/microsoft.extendedlocation/customlocations/location1"))
            .create();
    }

    /*
     * x-ms-original-file: 2025-07-01-preview/CreateOrReplace_NamespaceDevice_Edge_UsernamePass.json
     */
    /**
     * Sample code: Create edge enabled device with UsernamesPassword inbound authentication.
     * 
     * @param manager Entry point to DeviceRegistryManager.
     */
    public static void createEdgeEnabledDeviceWithUsernamesPasswordInboundAuthentication(
        com.azure.resourcemanager.deviceregistry.DeviceRegistryManager manager) {
        manager.namespaceDevices()
            .define("namespace-device-on-edge")
            .withRegion("West Europe")
            .withExistingNamespace("myResourceGroup", "adr-namespace-gbk0925-n01")
            .withProperties(new NamespaceDeviceProperties().withEnabled(true)
                .withExternalDeviceId("unique-edge-device-identifier")
                .withEndpoints(new MessagingEndpoints().withInbound(mapOf("theOnlyOPCUABroker",
                    new InboundEndpoints().withEndpointType("microsoft.opcua/v1")
                        .withAddress("opc.tcp://192.168.86.23:51211/UA/SampleServer")
                        .withVersion("2")
                        .withAuthentication(new HostAuthentication().withMethod(AuthenticationMethod.USERNAME_PASSWORD)
                            .withUsernamePasswordCredentials(
                                new UsernamePasswordCredentials().withUsernameSecretName("fakeTokenPlaceholder")
                                    .withPasswordSecretName("fakeTokenPlaceholder"))))))
                .withAttributes(mapOf("deviceType", BinaryData.fromBytes("sensor".getBytes(StandardCharsets.UTF_8)),
                    "deviceOwner", BinaryData.fromBytes("IT".getBytes(StandardCharsets.UTF_8)), "deviceCategory",
                    BinaryData.fromBytes("16".getBytes(StandardCharsets.UTF_8)))))
            .withExtendedLocation(new ExtendedLocation().withType("CustomLocation")
                .withName(
                    "/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/microsoft.extendedlocation/customlocations/location1"))
            .create();
    }

    /*
     * x-ms-original-file: 2025-07-01-preview/CreateOrReplace_NamespaceDevice.json
     */
    /**
     * Sample code: CreateOrReplace_NamespaceDevices.
     * 
     * @param manager Entry point to DeviceRegistryManager.
     */
    public static void
        createOrReplaceNamespaceDevices(com.azure.resourcemanager.deviceregistry.DeviceRegistryManager manager) {
        manager.namespaceDevices()
            .define("dev-namespace-gbk0925-n01")
            .withRegion("West Europe")
            .withExistingNamespace("myResourceGroup", "adr-namespace-gbk0925-n01")
            .withProperties(new NamespaceDeviceProperties().withEnabled(true)
                .withExternalDeviceId("adr-smart-device3-7a848b15-af47-40a7-8c06-a3f43314d44f")
                .withEndpoints(new MessagingEndpoints()
                    .withOutbound(new OutboundEndpoints().withAssigned(mapOf("eventGridEndpoint",
                        new DeviceMessagingEndpoint().withEndpointType("Microsoft.EventGrid")
                            .withAddress("https://myeventgridtopic.westeurope-1.eventgrid.azure.net/api/events")))))
                .withAttributes(mapOf("deviceType", BinaryData.fromBytes("sensor".getBytes(StandardCharsets.UTF_8)),
                    "deviceOwner", BinaryData.fromBytes("IT".getBytes(StandardCharsets.UTF_8)), "deviceCategory",
                    BinaryData.fromBytes("16".getBytes(StandardCharsets.UTF_8)))))
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
