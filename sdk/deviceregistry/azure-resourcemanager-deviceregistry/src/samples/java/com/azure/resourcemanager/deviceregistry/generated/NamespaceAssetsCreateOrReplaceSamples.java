// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.deviceregistry.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.deviceregistry.models.BrokerStateStoreDestinationConfiguration;
import com.azure.resourcemanager.deviceregistry.models.DatasetBrokerStateStoreDestination;
import com.azure.resourcemanager.deviceregistry.models.DeviceRef;
import com.azure.resourcemanager.deviceregistry.models.EventMqttDestination;
import com.azure.resourcemanager.deviceregistry.models.EventStorageDestination;
import com.azure.resourcemanager.deviceregistry.models.ExtendedLocation;
import com.azure.resourcemanager.deviceregistry.models.ManagementAction;
import com.azure.resourcemanager.deviceregistry.models.ManagementActionType;
import com.azure.resourcemanager.deviceregistry.models.ManagementGroup;
import com.azure.resourcemanager.deviceregistry.models.MqttDestinationConfiguration;
import com.azure.resourcemanager.deviceregistry.models.MqttDestinationQos;
import com.azure.resourcemanager.deviceregistry.models.NamespaceAssetProperties;
import com.azure.resourcemanager.deviceregistry.models.NamespaceDataset;
import com.azure.resourcemanager.deviceregistry.models.NamespaceDatasetDataPoint;
import com.azure.resourcemanager.deviceregistry.models.NamespaceEvent;
import com.azure.resourcemanager.deviceregistry.models.NamespaceEventDataPoint;
import com.azure.resourcemanager.deviceregistry.models.NamespaceStream;
import com.azure.resourcemanager.deviceregistry.models.StorageDestinationConfiguration;
import com.azure.resourcemanager.deviceregistry.models.StreamMqttDestination;
import com.azure.resourcemanager.deviceregistry.models.StreamStorageDestination;
import com.azure.resourcemanager.deviceregistry.models.TopicRetainType;
import java.nio.charset.StandardCharsets;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for NamespaceAssets CreateOrReplace.
 */
public final class NamespaceAssetsCreateOrReplaceSamples {
    /*
     * x-ms-original-file: 2025-07-01-preview/CreateOrReplace_NamespaceAsset.json
     */
    /**
     * Sample code: CreateOrReplace_NamespaceAsset.
     * 
     * @param manager Entry point to DeviceRegistryManager.
     */
    public static void
        createOrReplaceNamespaceAsset(com.azure.resourcemanager.deviceregistry.DeviceRegistryManager manager) {
        manager.namespaceAssets()
            .define("my-asset-1")
            .withRegion("West Europe")
            .withExistingNamespace("myResourceGroup", "my-namespace-1")
            .withExtendedLocation(new ExtendedLocation().withType("CustomLocation")
                .withName(
                    "/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/microsoft.extendedlocation/customlocations/location1"))
            .withTags(mapOf("site", "building-1"))
            .withProperties(new NamespaceAssetProperties().withEnabled(true)
                .withExternalAssetId("8ZBA6LRHU0A458969")
                .withDisplayName("AssetDisplayName")
                .withDescription("This is a sample Asset")
                .withDeviceRef(new DeviceRef().withDeviceName("device1").withEndpointName("opcuaendpointname"))
                .withAssetTypeRefs(Arrays.asList("myAssetTypeRef1", "myAssetTypeRef2"))
                .withManufacturer("Contoso")
                .withManufacturerUri("https://www.contoso.com/manufacturerUri")
                .withModel("ContosoModel")
                .withProductCode("fakeTokenPlaceholder")
                .withHardwareRevision("1.0")
                .withSoftwareRevision("2.0")
                .withDocumentationUri("https://www.example.com/manual")
                .withSerialNumber("64-103816-519918-8")
                .withAttributes(mapOf("floor", BinaryData.fromBytes("1".getBytes(StandardCharsets.UTF_8))))
                .withDiscoveredAssetRefs(Arrays.asList("discoveredAsset1"))
                .withDefaultDatasetsConfiguration(
                    "{\"publishingInterval\":10,\"samplingInterval\":15,\"queueSize\":20}")
                .withDefaultEventsConfiguration("{\"publishingInterval\":10,\"samplingInterval\":15,\"queueSize\":20}")
                .withDefaultStreamsConfiguration("{\"publishingInterval\":10,\"samplingInterval\":15,\"queueSize\":20}")
                .withDefaultManagementGroupsConfiguration("{\"retryCount\":10,\"retryBackoffInterval\":15}")
                .withDefaultDatasetsDestinations(Arrays.asList(new DatasetBrokerStateStoreDestination()
                    .withConfiguration(new BrokerStateStoreDestinationConfiguration().withKey("fakeTokenPlaceholder"))))
                .withDefaultEventsDestinations(Arrays.asList(new EventStorageDestination()
                    .withConfiguration(new StorageDestinationConfiguration().withPath("/tmp"))))
                .withDefaultStreamsDestinations(Arrays.asList(new StreamMqttDestination()
                    .withConfiguration(new MqttDestinationConfiguration().withTopic("/contoso/test")
                        .withRetain(TopicRetainType.NEVER)
                        .withQos(MqttDestinationQos.QOS0)
                        .withTtl(3600L))))
                .withDatasets(Arrays.asList(new NamespaceDataset().withName("dataset1")
                    .withDataSource("nsu=http://microsoft.com/Opc/OpcPlc/Oven;i=5")
                    .withTypeRef("dataset1TypeRef")
                    .withDatasetConfiguration("{\"publishingInterval\":10,\"samplingInterval\":15,\"queueSize\":20}")
                    .withDestinations(Arrays.asList(new DatasetBrokerStateStoreDestination().withConfiguration(
                        new BrokerStateStoreDestinationConfiguration().withKey("fakeTokenPlaceholder"))))
                    .withDataPoints(Arrays.asList(
                        new NamespaceDatasetDataPoint().withName("dataset1DataPoint1")
                            .withDataSource("nsu=http://microsoft.com/Opc/OpcPlc/;s=FastUInt3")
                            .withDataPointConfiguration(
                                "{\"publishingInterval\":8,\"samplingInterval\":8,\"queueSize\":4}")
                            .withTypeRef("dataset1DataPoint1TypeRef"),
                        new NamespaceDatasetDataPoint().withName("dataset1DataPoint2")
                            .withDataSource("nsu=http://microsoft.com/Opc/OpcPlc/;s=FastUInt4")
                            .withDataPointConfiguration(
                                "{\"publishingInterval\":8,\"samplingInterval\":8,\"queueSize\":4}")
                            .withTypeRef("dataset1DataPoint2TypeRef")))))
                .withEvents(Arrays.asList(
                    new NamespaceEvent().withName("event1")
                        .withEventNotifier("nsu=http://microsoft.com/Opc/OpcPlc/;s=FastUInt5")
                        .withEventConfiguration("{\"publishingInterval\":7,\"samplingInterval\":1,\"queueSize\":8}")
                        .withDestinations(Arrays.asList(new EventMqttDestination()
                            .withConfiguration(new MqttDestinationConfiguration().withTopic("/contoso/testEvent1")
                                .withRetain(TopicRetainType.KEEP)
                                .withQos(MqttDestinationQos.QOS0)
                                .withTtl(7200L))))
                        .withTypeRef("event1Ref")
                        .withDataPoints(Arrays.asList(
                            new NamespaceEventDataPoint().withName("event1DataPoint1")
                                .withDataSource("nsu=http://microsoft.com/Opc/OpcPlc/;s=FastUInt6")
                                .withDataPointConfiguration(
                                    "{\"publishingInterval\":8,\"samplingInterval\":8,\"queueSize\":4}"),
                            new NamespaceEventDataPoint().withName("event1DataPoint2")
                                .withDataSource("nsu=http://microsoft.com/Opc/OpcPlc/;s=FastUInt7")
                                .withDataPointConfiguration(
                                    "{\"publishingInterval\":8,\"samplingInterval\":8,\"queueSize\":4}"))),
                    new NamespaceEvent().withName("event2")
                        .withEventNotifier("nsu=http://microsoft.com/Opc/OpcPlc/;s=FastUInt8")
                        .withEventConfiguration("{\"publishingInterval\":7,\"samplingInterval\":1,\"queueSize\":8}")
                        .withDestinations(Arrays.asList(new EventStorageDestination()
                            .withConfiguration(new StorageDestinationConfiguration().withPath("/tmp/event2"))))
                        .withTypeRef("event2Ref")
                        .withDataPoints(Arrays.asList(
                            new NamespaceEventDataPoint().withName("event2DataPoint1")
                                .withDataSource("nsu=http://microsoft.com/Opc/OpcPlc/;s=FastUInt9")
                                .withDataPointConfiguration(
                                    "{\"publishingInterval\":8,\"samplingInterval\":8,\"queueSize\":4}"),
                            new NamespaceEventDataPoint().withName("event2DataPoint2")
                                .withDataSource("nsu=http://microsoft.com/Opc/OpcPlc/;s=FastUInt10")
                                .withDataPointConfiguration(
                                    "{\"publishingInterval\":8,\"samplingInterval\":8,\"queueSize\":4}")))))
                .withStreams(Arrays.asList(
                    new NamespaceStream().withName("stream1")
                        .withStreamConfiguration("{\"publishingInterval\":8,\"samplingInterval\":8,\"queueSize\":4}")
                        .withTypeRef("stream1TypeRef")
                        .withDestinations(Arrays.asList(new StreamStorageDestination()
                            .withConfiguration(new StorageDestinationConfiguration().withPath("/tmp/stream1")))),
                    new NamespaceStream().withName("stream2")
                        .withStreamConfiguration("{\"publishingInterval\":8,\"samplingInterval\":8,\"queueSize\":4}")
                        .withTypeRef("stream2TypeRef")
                        .withDestinations(Arrays.asList(new StreamMqttDestination()
                            .withConfiguration(new MqttDestinationConfiguration().withTopic("/contoso/testStream2")
                                .withRetain(TopicRetainType.NEVER)
                                .withQos(MqttDestinationQos.QOS0)
                                .withTtl(7200L))))))
                .withManagementGroups(
                    Arrays
                        .asList(
                            new ManagementGroup().withName("managementGroup1")
                                .withManagementGroupConfiguration("{\"retryCount\":10,\"retryBackoffInterval\":15}")
                                .withTypeRef("managementGroup1TypeRef")
                                .withDefaultTopic("/contoso/managementGroup1")
                                .withDefaultTimeoutInSeconds(100)
                                .withActions(
                                    Arrays
                                        .asList(
                                            new ManagementAction().withName("action1")
                                                .withActionConfiguration(
                                                    "{\"retryCount\":5,\"retryBackoffInterval\":5}")
                                                .withTargetUri("/onvif/device_service?ONVIFProfile=Profile1")
                                                .withTypeRef("action1TypeRef")
                                                .withTopic("/contoso/managementGroup1/action1")
                                                .withActionType(ManagementActionType.CALL)
                                                .withTimeoutInSeconds(60),
                                            new ManagementAction().withName("action2")
                                                .withActionConfiguration(
                                                    "{\"retryCount\":5,\"retryBackoffInterval\":5}")
                                                .withTargetUri("/onvif/device_service?ONVIFProfile=Profile2")
                                                .withTypeRef("action2TypeRef")
                                                .withTopic("/contoso/managementGroup1/action2")
                                                .withActionType(ManagementActionType.CALL)
                                                .withTimeoutInSeconds(60))))))
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
