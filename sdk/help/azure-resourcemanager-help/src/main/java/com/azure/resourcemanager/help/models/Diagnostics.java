// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.help.models;

import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;

/** Resource collection API of Diagnostics. */
public interface Diagnostics {
    /**
     * This API is used to check the uniqueness of a resource name used for a diagnostic check.
     *
     * @param scope This is an extension resource provider and only resource level extension is supported at the moment.
     * @param checkNameAvailabilityRequest The required parameters for availability check.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for whether the requested resource name is available or not along with {@link Response}.
     */
    Response<CheckNameAvailabilityResponse> checkNameAvailabilityWithResponse(
        String scope, CheckNameAvailabilityRequest checkNameAvailabilityRequest, Context context);

    /**
     * This API is used to check the uniqueness of a resource name used for a diagnostic check.
     *
     * @param scope This is an extension resource provider and only resource level extension is supported at the moment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for whether the requested resource name is available or not.
     */
    CheckNameAvailabilityResponse checkNameAvailability(String scope);

    /**
     * &lt;p&gt;&lt;b&gt;Overview:&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Azure Help API programmatically helps you troubleshoot
     * Azure issues and provides access to rich and powerful self-help solutions and diagnostics. Using the API, you can
     * perform the following operations: &lt;table&gt;&lt;tr&gt;&lt;td&gt;Solution Discovery&lt;/td&gt;&lt;td&gt;Lists
     * the diagnostics for an Azure issue based on the
     * prerequisites.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Diagnostics&lt;/td&gt;&lt;td&gt;Create and Get
     * diagnostics for issues with Azure resources based on prerequisites (see
     * below).&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;Prerequisites for Diagnostics:&lt;/b&gt;
     * &lt;br/&gt; &lt;br/&gt; The diagnostics API is called after solutions discovery and returns diagnostic info for
     * your Azure issue. &lt;br/&gt; &lt;br/&gt;You must have &lt;a
     * href="https://learn.microsoft.com/en-us/azure/role-based-access-control/built-in-roles#reader"&gt;reader access
     * role &lt;/a&gt; at the resource level to get the diagnostics. &lt;br/&gt; &lt;br/&gt; 'RequiredParameterSets'
     * from Discovery Solutions API response has to be passed via 'properties.insights.additionalParameters' as a
     * key-value pairs to Diagnostics Api.
     *
     * @param scope This is an extension resource provider and only resource level extension is supported at the moment.
     * @param diagnosticsResourceName Unique resource name for insight resources.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return diagnostic resource along with {@link Response}.
     */
    Response<DiagnosticResource> getWithResponse(String scope, String diagnosticsResourceName, Context context);

    /**
     * &lt;p&gt;&lt;b&gt;Overview:&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Azure Help API programmatically helps you troubleshoot
     * Azure issues and provides access to rich and powerful self-help solutions and diagnostics. Using the API, you can
     * perform the following operations: &lt;table&gt;&lt;tr&gt;&lt;td&gt;Solution Discovery&lt;/td&gt;&lt;td&gt;Lists
     * the diagnostics for an Azure issue based on the
     * prerequisites.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Diagnostics&lt;/td&gt;&lt;td&gt;Create and Get
     * diagnostics for issues with Azure resources based on prerequisites (see
     * below).&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;Prerequisites for Diagnostics:&lt;/b&gt;
     * &lt;br/&gt; &lt;br/&gt; The diagnostics API is called after solutions discovery and returns diagnostic info for
     * your Azure issue. &lt;br/&gt; &lt;br/&gt;You must have &lt;a
     * href="https://learn.microsoft.com/en-us/azure/role-based-access-control/built-in-roles#reader"&gt;reader access
     * role &lt;/a&gt; at the resource level to get the diagnostics. &lt;br/&gt; &lt;br/&gt; 'RequiredParameterSets'
     * from Discovery Solutions API response has to be passed via 'properties.insights.additionalParameters' as a
     * key-value pairs to Diagnostics Api.
     *
     * @param scope This is an extension resource provider and only resource level extension is supported at the moment.
     * @param diagnosticsResourceName Unique resource name for insight resources.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return diagnostic resource.
     */
    DiagnosticResource get(String scope, String diagnosticsResourceName);

    /**
     * &lt;p&gt;&lt;b&gt;Overview:&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Azure Help API programmatically helps you troubleshoot
     * Azure issues and provides access to rich and powerful self-help solutions and diagnostics. Using the API, you can
     * perform the following operations: &lt;table&gt;&lt;tr&gt;&lt;td&gt;Solution Discovery&lt;/td&gt;&lt;td&gt;Lists
     * the diagnostics for an Azure issue based on the
     * prerequisites.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Diagnostics&lt;/td&gt;&lt;td&gt;Create and Get
     * diagnostics for issues with Azure resources based on prerequisites (see
     * below).&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;Prerequisites for Diagnostics:&lt;/b&gt;
     * &lt;br/&gt; &lt;br/&gt; The diagnostics API is called after solutions discovery and returns diagnostic info for
     * your Azure issue. &lt;br/&gt; &lt;br/&gt;You must have &lt;a
     * href="https://learn.microsoft.com/en-us/azure/role-based-access-control/built-in-roles#reader"&gt;reader access
     * role &lt;/a&gt; at the resource level to get the diagnostics. &lt;br/&gt; &lt;br/&gt; 'RequiredParameterSets'
     * from Discovery Solutions API response has to be passed via 'properties.insights.additionalParameters' as a
     * key-value pairs to Diagnostics Api.
     *
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return diagnostic resource along with {@link Response}.
     */
    DiagnosticResource getById(String id);

    /**
     * &lt;p&gt;&lt;b&gt;Overview:&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Azure Help API programmatically helps you troubleshoot
     * Azure issues and provides access to rich and powerful self-help solutions and diagnostics. Using the API, you can
     * perform the following operations: &lt;table&gt;&lt;tr&gt;&lt;td&gt;Solution Discovery&lt;/td&gt;&lt;td&gt;Lists
     * the diagnostics for an Azure issue based on the
     * prerequisites.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Diagnostics&lt;/td&gt;&lt;td&gt;Create and Get
     * diagnostics for issues with Azure resources based on prerequisites (see
     * below).&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;Prerequisites for Diagnostics:&lt;/b&gt;
     * &lt;br/&gt; &lt;br/&gt; The diagnostics API is called after solutions discovery and returns diagnostic info for
     * your Azure issue. &lt;br/&gt; &lt;br/&gt;You must have &lt;a
     * href="https://learn.microsoft.com/en-us/azure/role-based-access-control/built-in-roles#reader"&gt;reader access
     * role &lt;/a&gt; at the resource level to get the diagnostics. &lt;br/&gt; &lt;br/&gt; 'RequiredParameterSets'
     * from Discovery Solutions API response has to be passed via 'properties.insights.additionalParameters' as a
     * key-value pairs to Diagnostics Api.
     *
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return diagnostic resource along with {@link Response}.
     */
    Response<DiagnosticResource> getByIdWithResponse(String id, Context context);

    /**
     * Begins definition for a new DiagnosticResource resource.
     *
     * @param name resource name.
     * @return the first stage of the new DiagnosticResource definition.
     */
    DiagnosticResource.DefinitionStages.Blank define(String name);
}
