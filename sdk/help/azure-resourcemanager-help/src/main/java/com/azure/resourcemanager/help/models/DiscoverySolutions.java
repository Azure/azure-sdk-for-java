// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.help.models;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.util.Context;

/** Resource collection API of DiscoverySolutions. */
public interface DiscoverySolutions {
    /**
     * &lt;p&gt;&lt;b&gt;Overview:&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Azure Help API programmatically helps you troubleshoot
     * Azure issues and provides access to rich and powerful self-help solutions and diagnostics. Using the API, you can
     * perform the following operations: &lt;table&gt;&lt;tr&gt;&lt;td&gt;Solution Discovery&lt;/td&gt;&lt;td&gt;Lists
     * the diagnostics for an Azure issue based on the prerequisites (see
     * below).&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Diagnostics&lt;/td&gt;&lt;td&gt;Create and Get diagnostics for
     * issues with Azure resources.&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;Prerequisites for
     * solution discovery:&lt;/b&gt;&lt;br/&gt; &lt;br/&gt;You can call the API to discover solutions with the following
     * inputs: &lt;br/&gt; i. Required inputs: resourceUri. &lt;br/&gt;ii. Optional input: problemClassificationId.
     * &lt;br/&gt; &lt;br/&gt; This API enables discovery of diagnostics for a defined list of Azure support issues, and
     * is not supported for all ProblemClassificationId(s) at the moment. For ProblemClassificationId(s) that are not
     * supported, the API response will not return any diagnostics. You can use ProblemClassifications API to get the
     * problem categories and ProblemClassificationId(s) &lt;a
     * href="https://docs.microsoft.com/azure/virtual-machine-scale-sets/virtual-machine-scale-sets-faq#how-do-i-turn-on-antimalware-in-my-virtual-machine-scale-set"&gt;reference.&lt;/a&gt;
     * &lt;br/&gt; &lt;br/&gt;You must have &lt;a
     * href="https://learn.microsoft.com/en-us/azure/role-based-access-control/built-in-roles#reader"&gt;reader access
     * role &lt;/a&gt; at the resource level to get the solutions.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Note:&lt;/b&gt;
     * 'RequiredParameterSets' from Discovery Solutions API response has to be passed via
     * 'properties.insights.additionalParameters' as an input to Diagnostics API.&lt;/p&gt;.
     *
     * @param scope This is an extension resource provider and only resource level extension is supported at the moment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return discovery response as paginated response with {@link PagedIterable}.
     */
    PagedIterable<SolutionMetadata> list(String scope);

    /**
     * &lt;p&gt;&lt;b&gt;Overview:&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Azure Help API programmatically helps you troubleshoot
     * Azure issues and provides access to rich and powerful self-help solutions and diagnostics. Using the API, you can
     * perform the following operations: &lt;table&gt;&lt;tr&gt;&lt;td&gt;Solution Discovery&lt;/td&gt;&lt;td&gt;Lists
     * the diagnostics for an Azure issue based on the prerequisites (see
     * below).&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Diagnostics&lt;/td&gt;&lt;td&gt;Create and Get diagnostics for
     * issues with Azure resources.&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;Prerequisites for
     * solution discovery:&lt;/b&gt;&lt;br/&gt; &lt;br/&gt;You can call the API to discover solutions with the following
     * inputs: &lt;br/&gt; i. Required inputs: resourceUri. &lt;br/&gt;ii. Optional input: problemClassificationId.
     * &lt;br/&gt; &lt;br/&gt; This API enables discovery of diagnostics for a defined list of Azure support issues, and
     * is not supported for all ProblemClassificationId(s) at the moment. For ProblemClassificationId(s) that are not
     * supported, the API response will not return any diagnostics. You can use ProblemClassifications API to get the
     * problem categories and ProblemClassificationId(s) &lt;a
     * href="https://docs.microsoft.com/azure/virtual-machine-scale-sets/virtual-machine-scale-sets-faq#how-do-i-turn-on-antimalware-in-my-virtual-machine-scale-set"&gt;reference.&lt;/a&gt;
     * &lt;br/&gt; &lt;br/&gt;You must have &lt;a
     * href="https://learn.microsoft.com/en-us/azure/role-based-access-control/built-in-roles#reader"&gt;reader access
     * role &lt;/a&gt; at the resource level to get the solutions.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Note:&lt;/b&gt;
     * 'RequiredParameterSets' from Discovery Solutions API response has to be passed via
     * 'properties.insights.additionalParameters' as an input to Diagnostics API.&lt;/p&gt;.
     *
     * @param scope This is an extension resource provider and only resource level extension is supported at the moment.
     * @param filter Can be used to filter solutionIds by 'ProblemClassificationId'. The filter supports only 'and' and
     *     'eq' operators. Example: $filter=ProblemClassificationId eq '1ddda5b4-cf6c-4d4f-91ad-bc38ab0e811e' and
     *     ProblemClassificationId eq '0a9673c2-7af6-4e19-90d3-4ee2461076d9'.
     * @param skiptoken Skiptoken is only used if a previous operation returned a partial result. If a previous response
     *     contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that
     *     specifies a starting point to use for subsequent calls.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return discovery response as paginated response with {@link PagedIterable}.
     */
    PagedIterable<SolutionMetadata> list(String scope, String filter, String skiptoken, Context context);
}
