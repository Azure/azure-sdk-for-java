// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.adp.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Location of a Data Pool. */
@Fluent
public final class DataPoolLocation {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(DataPoolLocation.class);

    /*
     * The location name
     */
    @JsonProperty(value = "name", required = true)
    private String name;

    /*
     * Encryption properties of a Data Pool location
     */
    @JsonProperty(value = "encryption")
    private DataPoolEncryption encryption;

    /*
     * The Storage SKU. Default: Standard_ZRS.
     */
    @JsonProperty(value = "storageSku")
    private StorageSku storageSku;

    /*
     * The amount of storage accounts provisioned per Data Pool. Default: 5
     */
    @JsonProperty(value = "storageAccountCount")
    private Integer storageAccountCount;

    /**
     * Get the name property: The location name.
     *
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: The location name.
     *
     * @param name the name value to set.
     * @return the DataPoolLocation object itself.
     */
    public DataPoolLocation withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the encryption property: Encryption properties of a Data Pool location.
     *
     * @return the encryption value.
     */
    public DataPoolEncryption encryption() {
        return this.encryption;
    }

    /**
     * Set the encryption property: Encryption properties of a Data Pool location.
     *
     * @param encryption the encryption value to set.
     * @return the DataPoolLocation object itself.
     */
    public DataPoolLocation withEncryption(DataPoolEncryption encryption) {
        this.encryption = encryption;
        return this;
    }

    /**
     * Get the storageSku property: The Storage SKU. Default: Standard_ZRS.
     *
     * @return the storageSku value.
     */
    public StorageSku storageSku() {
        return this.storageSku;
    }

    /**
     * Set the storageSku property: The Storage SKU. Default: Standard_ZRS.
     *
     * @param storageSku the storageSku value to set.
     * @return the DataPoolLocation object itself.
     */
    public DataPoolLocation withStorageSku(StorageSku storageSku) {
        this.storageSku = storageSku;
        return this;
    }

    /**
     * Get the storageAccountCount property: The amount of storage accounts provisioned per Data Pool. Default: 5.
     *
     * @return the storageAccountCount value.
     */
    public Integer storageAccountCount() {
        return this.storageAccountCount;
    }

    /**
     * Set the storageAccountCount property: The amount of storage accounts provisioned per Data Pool. Default: 5.
     *
     * @param storageAccountCount the storageAccountCount value to set.
     * @return the DataPoolLocation object itself.
     */
    public DataPoolLocation withStorageAccountCount(Integer storageAccountCount) {
        this.storageAccountCount = storageAccountCount;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (name() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property name in model DataPoolLocation"));
        }
        if (encryption() != null) {
            encryption().validate();
        }
        if (storageSku() != null) {
            storageSku().validate();
        }
    }
}
