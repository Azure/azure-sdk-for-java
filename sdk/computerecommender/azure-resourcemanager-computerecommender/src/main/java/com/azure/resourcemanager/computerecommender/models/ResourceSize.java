// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.computerecommender.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * SpotPlacementRecommender API response.
 */
@Fluent
public final class ResourceSize implements JsonSerializable<ResourceSize> {
    /*
     * The resource's CRP virtual machine SKU size.
     */
    private String sku;

    /**
     * Creates an instance of ResourceSize class.
     */
    public ResourceSize() {
    }

    /**
     * Get the sku property: The resource's CRP virtual machine SKU size.
     * 
     * @return the sku value.
     */
    public String sku() {
        return this.sku;
    }

    /**
     * Set the sku property: The resource's CRP virtual machine SKU size.
     * 
     * @param sku the sku value to set.
     * @return the ResourceSize object itself.
     */
    public ResourceSize withSku(String sku) {
        this.sku = sku;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("sku", this.sku);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ResourceSize from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ResourceSize if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ResourceSize.
     */
    public static ResourceSize fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ResourceSize deserializedResourceSize = new ResourceSize();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("sku".equals(fieldName)) {
                    deserializedResourceSize.sku = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedResourceSize;
        });
    }
}
