// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.ai.textanalytics.implementation.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;

/** A resolution for datetime entity instances. */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "resolutionKind")
@JsonTypeName("DateTimeResolution")
@Fluent
public final class DateTimeResolution extends BaseResolution {
    /*
     * An extended ISO 8601 date/time representation as described in
     * (https://github.com/Microsoft/Recognizers-Text/blob/master/Patterns/English/English-DateTime.yaml)
     */
    @JsonProperty(value = "timex", required = true)
    private String timex;

    /*
     * The DateTime SubKind
     */
    @JsonProperty(value = "dateTimeSubKind", required = true)
    private DateTimeSubKind dateTimeSubKind;

    /*
     * The actual time that the extracted text denote.
     */
    @JsonProperty(value = "value", required = true)
    private String value;

    /*
     * An optional modifier of a date/time instance.
     */
    @JsonProperty(value = "modifier")
    private TemporalModifier modifier;

    /** Creates an instance of DateTimeResolution class. */
    public DateTimeResolution() {}

    /**
     * Get the timex property: An extended ISO 8601 date/time representation as described in
     * (https://github.com/Microsoft/Recognizers-Text/blob/master/Patterns/English/English-DateTime.yaml).
     *
     * @return the timex value.
     */
    public String getTimex() {
        return this.timex;
    }

    /**
     * Set the timex property: An extended ISO 8601 date/time representation as described in
     * (https://github.com/Microsoft/Recognizers-Text/blob/master/Patterns/English/English-DateTime.yaml).
     *
     * @param timex the timex value to set.
     * @return the DateTimeResolution object itself.
     */
    public DateTimeResolution setTimex(String timex) {
        this.timex = timex;
        return this;
    }

    /**
     * Get the dateTimeSubKind property: The DateTime SubKind.
     *
     * @return the dateTimeSubKind value.
     */
    public DateTimeSubKind getDateTimeSubKind() {
        return this.dateTimeSubKind;
    }

    /**
     * Set the dateTimeSubKind property: The DateTime SubKind.
     *
     * @param dateTimeSubKind the dateTimeSubKind value to set.
     * @return the DateTimeResolution object itself.
     */
    public DateTimeResolution setDateTimeSubKind(DateTimeSubKind dateTimeSubKind) {
        this.dateTimeSubKind = dateTimeSubKind;
        return this;
    }

    /**
     * Get the value property: The actual time that the extracted text denote.
     *
     * @return the value value.
     */
    public String getValue() {
        return this.value;
    }

    /**
     * Set the value property: The actual time that the extracted text denote.
     *
     * @param value the value value to set.
     * @return the DateTimeResolution object itself.
     */
    public DateTimeResolution setValue(String value) {
        this.value = value;
        return this;
    }

    /**
     * Get the modifier property: An optional modifier of a date/time instance.
     *
     * @return the modifier value.
     */
    public TemporalModifier getModifier() {
        return this.modifier;
    }

    /**
     * Set the modifier property: An optional modifier of a date/time instance.
     *
     * @param modifier the modifier value to set.
     * @return the DateTimeResolution object itself.
     */
    public DateTimeResolution setModifier(TemporalModifier modifier) {
        this.modifier = modifier;
        return this;
    }
}
