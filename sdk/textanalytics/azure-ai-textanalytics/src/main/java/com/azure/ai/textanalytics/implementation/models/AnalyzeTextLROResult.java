// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.ai.textanalytics.implementation.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Objects;

/** The AnalyzeTextLROResult model. */
@Fluent
public class AnalyzeTextLROResult extends TaskState {
    /*
     * The taskName property.
     */
    private String taskName;

    /** Creates an instance of AnalyzeTextLROResult class. */
    public AnalyzeTextLROResult() {}

    /**
     * Get the taskName property: The taskName property.
     *
     * @return the taskName value.
     */
    public String getTaskName() {
        return this.taskName;
    }

    /**
     * Set the taskName property: The taskName property.
     *
     * @param taskName the taskName value to set.
     * @return the AnalyzeTextLROResult object itself.
     */
    public AnalyzeTextLROResult setTaskName(String taskName) {
        this.taskName = taskName;
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public AnalyzeTextLROResult setLastUpdateDateTime(OffsetDateTime lastUpdateDateTime) {
        super.setLastUpdateDateTime(lastUpdateDateTime);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public AnalyzeTextLROResult setStatus(State status) {
        super.setStatus(status);
        return this;
    }

    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("lastUpdateDateTime", Objects.toString(getLastUpdateDateTime(), null));
        jsonWriter.writeStringField("status", Objects.toString(getStatus(), null));
        jsonWriter.writeStringField("taskName", this.taskName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AnalyzeTextLROResult from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of AnalyzeTextLROResult if the JsonReader was pointing to an instance of it, or null if it
     *     was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties or the
     *     polymorphic discriminator.
     * @throws IOException If an error occurs while reading the AnalyzeTextLROResult.
     */
    public static AnalyzeTextLROResult fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(
                reader -> {
                    String discriminatorValue = null;
                    JsonReader readerToUse = reader.bufferObject();

                    readerToUse.nextToken(); // Prepare for reading
                    while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                        String fieldName = readerToUse.getFieldName();
                        readerToUse.nextToken();
                        if ("kind".equals(fieldName)) {
                            discriminatorValue = readerToUse.getString();
                            break;
                        } else {
                            readerToUse.skipChildren();
                        }
                    }

                    if (discriminatorValue != null) {
                        readerToUse = readerToUse.reset();
                    }
                    // Use the discriminator value to determine which subtype should be deserialized.
                    if ("EntityRecognitionLROResults".equals(discriminatorValue)) {
                        return EntityRecognitionLROResult.fromJson(readerToUse);
                    } else if ("CustomEntityRecognitionLROResults".equals(discriminatorValue)) {
                        return CustomEntityRecognitionLROResult.fromJson(readerToUse);
                    } else if ("CustomSingleLabelClassificationLROResults".equals(discriminatorValue)) {
                        return CustomSingleLabelClassificationLROResult.fromJson(readerToUse);
                    } else if ("CustomMultiLabelClassificationLROResults".equals(discriminatorValue)) {
                        return CustomMultiLabelClassificationLROResult.fromJson(readerToUse);
                    } else if ("EntityLinkingLROResults".equals(discriminatorValue)) {
                        return EntityLinkingLROResult.fromJson(readerToUse);
                    } else if ("PiiEntityRecognitionLROResults".equals(discriminatorValue)) {
                        return PiiEntityRecognitionLROResult.fromJson(readerToUse);
                    } else if ("ExtractiveSummarizationLROResults".equals(discriminatorValue)) {
                        return ExtractiveSummarizationLROResult.fromJson(readerToUse);
                    } else if ("HealthcareLROResults".equals(discriminatorValue)) {
                        return HealthcareLROResult.fromJson(readerToUse);
                    } else if ("SentimentAnalysisLROResults".equals(discriminatorValue)) {
                        return SentimentLROResult.fromJson(readerToUse);
                    } else if ("KeyPhraseExtractionLROResults".equals(discriminatorValue)) {
                        return KeyPhraseExtractionLROResult.fromJson(readerToUse);
                    } else if ("AbstractiveSummarizationLROResults".equals(discriminatorValue)) {
                        return AbstractiveSummarizationLROResult.fromJson(readerToUse);
                    } else {
                        throw new IllegalStateException(
                                "Discriminator field 'kind' didn't match one of the expected values 'EntityRecognitionLROResults', 'CustomEntityRecognitionLROResults', 'CustomSingleLabelClassificationLROResults', 'CustomMultiLabelClassificationLROResults', 'EntityLinkingLROResults', 'PiiEntityRecognitionLROResults', 'ExtractiveSummarizationLROResults', 'HealthcareLROResults', 'SentimentAnalysisLROResults', 'KeyPhraseExtractionLROResults', or 'AbstractiveSummarizationLROResults'. It was: '"
                                        + discriminatorValue
                                        + "'.");
                    }
                });
    }
}
