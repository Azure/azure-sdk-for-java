// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.ai.textanalytics.implementation;

import com.azure.ai.textanalytics.implementation.models.EntitiesResult;
import com.azure.ai.textanalytics.implementation.models.EntityLinkingResult;
import com.azure.ai.textanalytics.implementation.models.ErrorResponseException;
import com.azure.ai.textanalytics.implementation.models.KeyPhraseResult;
import com.azure.ai.textanalytics.implementation.models.LanguageBatchInput;
import com.azure.ai.textanalytics.implementation.models.LanguageResult;
import com.azure.ai.textanalytics.implementation.models.MultiLanguageBatchInput;
import com.azure.ai.textanalytics.implementation.models.PiiEntitiesResult;
import com.azure.ai.textanalytics.implementation.models.SentimentResponse;
import com.azure.ai.textanalytics.implementation.models.StringIndexType;
import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.HttpPipelineBuilder;
import com.azure.core.http.policy.CookiePolicy;
import com.azure.core.http.policy.RetryPolicy;
import com.azure.core.http.policy.UserAgentPolicy;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.Context;
import reactor.core.publisher.Mono;

/** Initializes a new instance of the TextAnalyticsClient type. */
public final class TextAnalyticsClientImpl {
    /** The proxy service used to perform REST calls. */
    private final TextAnalyticsClientService service;

    /**
     * Supported Cognitive Services endpoints (protocol and hostname, for example:
     * https://westus.api.cognitive.microsoft.com).
     */
    private final String endpoint;

    /**
     * Gets Supported Cognitive Services endpoints (protocol and hostname, for example:
     * https://westus.api.cognitive.microsoft.com).
     *
     * @return the endpoint value.
     */
    public String getEndpoint() {
        return this.endpoint;
    }

    /** The HTTP pipeline to send requests through. */
    private final HttpPipeline httpPipeline;

    /**
     * Gets The HTTP pipeline to send requests through.
     *
     * @return the httpPipeline value.
     */
    public HttpPipeline getHttpPipeline() {
        return this.httpPipeline;
    }

    /** Initializes an instance of TextAnalyticsClient client. */
    TextAnalyticsClientImpl(String endpoint) {
        this(
                new HttpPipelineBuilder()
                        .policies(new UserAgentPolicy(), new RetryPolicy(), new CookiePolicy())
                        .build(),
                endpoint);
    }

    /**
     * Initializes an instance of TextAnalyticsClient client.
     *
     * @param httpPipeline The HTTP pipeline to send requests through.
     */
    TextAnalyticsClientImpl(HttpPipeline httpPipeline, String endpoint) {
        this.httpPipeline = httpPipeline;
        this.endpoint = endpoint;
        this.service = RestProxy.create(TextAnalyticsClientService.class, this.httpPipeline);
    }

    /**
     * The interface defining all the services for TextAnalyticsClient to be used by the proxy service to perform REST
     * calls.
     */
    @Host("{Endpoint}/text/analytics/v3.1-preview.2")
    @ServiceInterface(name = "TextAnalyticsClient")
    private interface TextAnalyticsClientService {
        @Post("/entities/recognition/general")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<EntitiesResult>> entitiesRecognitionGeneral(
                @HostParam("Endpoint") String endpoint,
                @QueryParam("model-version") String modelVersion,
                @QueryParam("showStats") Boolean showStats,
                @QueryParam("stringIndexType") StringIndexType stringIndexType,
                @BodyParam("application/json") MultiLanguageBatchInput input,
                Context context);

        @Post("/entities/recognition/pii")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<PiiEntitiesResult>> entitiesRecognitionPii(
                @HostParam("Endpoint") String endpoint,
                @QueryParam("model-version") String modelVersion,
                @QueryParam("showStats") Boolean showStats,
                @QueryParam("domain") String domain,
                @QueryParam("stringIndexType") StringIndexType stringIndexType,
                @BodyParam("application/json") MultiLanguageBatchInput input,
                Context context);

        @Post("/entities/linking")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<EntityLinkingResult>> entitiesLinking(
                @HostParam("Endpoint") String endpoint,
                @QueryParam("model-version") String modelVersion,
                @QueryParam("showStats") Boolean showStats,
                @QueryParam("stringIndexType") StringIndexType stringIndexType,
                @BodyParam("application/json") MultiLanguageBatchInput input,
                Context context);

        @Post("/keyPhrases")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<KeyPhraseResult>> keyPhrases(
                @HostParam("Endpoint") String endpoint,
                @QueryParam("model-version") String modelVersion,
                @QueryParam("showStats") Boolean showStats,
                @BodyParam("application/json") MultiLanguageBatchInput input,
                Context context);

        @Post("/languages")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<LanguageResult>> languages(
                @HostParam("Endpoint") String endpoint,
                @QueryParam("model-version") String modelVersion,
                @QueryParam("showStats") Boolean showStats,
                @BodyParam("application/json") LanguageBatchInput input,
                Context context);

        @Post("/sentiment")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<SentimentResponse>> sentiment(
                @HostParam("Endpoint") String endpoint,
                @QueryParam("model-version") String modelVersion,
                @QueryParam("showStats") Boolean showStats,
                @QueryParam("opinionMining") Boolean opinionMining,
                @QueryParam("stringIndexType") StringIndexType stringIndexType,
                @BodyParam("application/json") MultiLanguageBatchInput input,
                Context context);
    }

    /**
     * The API returns a list of general named entities in a given document. For the list of supported entity types,
     * check &lt;a href="https://aka.ms/taner"&gt;Supported Entity Types in Text Analytics API&lt;/a&gt;. See the &lt;a
     * href="https://aka.ms/talangs"&gt;Supported languages in Text Analytics API&lt;/a&gt; for the list of enabled
     * languages.
     *
     * @param input Contains a set of input documents to be analyzed by the service.
     * @param modelVersion (Optional) This value indicates which model will be used for scoring. If a model-version is
     *     not specified, the API should default to the latest, non-preview version.
     * @param showStats (Optional) if set to true, response will contain request and document level statistics.
     * @param stringIndexType (Optional) Specifies the method used to interpret string offsets. Defaults to Text
     *     Elements (Graphemes) according to Unicode v8.0.0. For additional information see
     *     https://aka.ms/text-analytics-offsets.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<EntitiesResult>> entitiesRecognitionGeneralWithResponseAsync(
            MultiLanguageBatchInput input,
            String modelVersion,
            Boolean showStats,
            StringIndexType stringIndexType,
            Context context) {
        return service.entitiesRecognitionGeneral(
                this.getEndpoint(), modelVersion, showStats, stringIndexType, input, context);
    }

    /**
     * The API returns a list of entities with personal information (\"SSN\", \"Bank Account\" etc) in the document. For
     * the list of supported entity types, check &lt;a href="https://aka.ms/tanerpii"&gt;Supported Entity Types in Text
     * Analytics API&lt;/a&gt;. See the &lt;a href="https://aka.ms/talangs"&gt;Supported languages in Text Analytics
     * API&lt;/a&gt; for the list of enabled languages.
     *
     * @param input Contains a set of input documents to be analyzed by the service.
     * @param modelVersion (Optional) This value indicates which model will be used for scoring. If a model-version is
     *     not specified, the API should default to the latest, non-preview version.
     * @param showStats (Optional) if set to true, response will contain request and document level statistics.
     * @param domain (Optional) if set to 'PHI', response will contain only PHI entities.
     * @param stringIndexType (Optional) Specifies the method used to interpret string offsets. Defaults to Text
     *     Elements (Graphemes) according to Unicode v8.0.0. For additional information see
     *     https://aka.ms/text-analytics-offsets.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<PiiEntitiesResult>> entitiesRecognitionPiiWithResponseAsync(
            MultiLanguageBatchInput input,
            String modelVersion,
            Boolean showStats,
            String domain,
            StringIndexType stringIndexType,
            Context context) {
        return service.entitiesRecognitionPii(
                this.getEndpoint(), modelVersion, showStats, domain, stringIndexType, input, context);
    }

    /**
     * The API returns a list of recognized entities with links to a well-known knowledge base. See the &lt;a
     * href="https://aka.ms/talangs"&gt;Supported languages in Text Analytics API&lt;/a&gt; for the list of enabled
     * languages.
     *
     * @param input Contains a set of input documents to be analyzed by the service.
     * @param modelVersion (Optional) This value indicates which model will be used for scoring. If a model-version is
     *     not specified, the API should default to the latest, non-preview version.
     * @param showStats (Optional) if set to true, response will contain request and document level statistics.
     * @param stringIndexType (Optional) Specifies the method used to interpret string offsets. Defaults to Text
     *     Elements (Graphemes) according to Unicode v8.0.0. For additional information see
     *     https://aka.ms/text-analytics-offsets.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<EntityLinkingResult>> entitiesLinkingWithResponseAsync(
            MultiLanguageBatchInput input,
            String modelVersion,
            Boolean showStats,
            StringIndexType stringIndexType,
            Context context) {
        return service.entitiesLinking(this.getEndpoint(), modelVersion, showStats, stringIndexType, input, context);
    }

    /**
     * The API returns a list of strings denoting the key phrases in the input text. See the &lt;a
     * href="https://aka.ms/talangs"&gt;Supported languages in Text Analytics API&lt;/a&gt; for the list of enabled
     * languages.
     *
     * @param input Contains a set of input documents to be analyzed by the service.
     * @param modelVersion (Optional) This value indicates which model will be used for scoring. If a model-version is
     *     not specified, the API should default to the latest, non-preview version.
     * @param showStats (Optional) if set to true, response will contain request and document level statistics.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<KeyPhraseResult>> keyPhrasesWithResponseAsync(
            MultiLanguageBatchInput input, String modelVersion, Boolean showStats, Context context) {
        return service.keyPhrases(this.getEndpoint(), modelVersion, showStats, input, context);
    }

    /**
     * The API returns the detected language and a numeric score between 0 and 1. Scores close to 1 indicate 100%
     * certainty that the identified language is true. See the &lt;a href="https://aka.ms/talangs"&gt;Supported
     * languages in Text Analytics API&lt;/a&gt; for the list of enabled languages.
     *
     * @param input Collection of documents to analyze for language endpoint.
     * @param modelVersion (Optional) This value indicates which model will be used for scoring. If a model-version is
     *     not specified, the API should default to the latest, non-preview version.
     * @param showStats (Optional) if set to true, response will contain request and document level statistics.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<LanguageResult>> languagesWithResponseAsync(
            LanguageBatchInput input, String modelVersion, Boolean showStats, Context context) {
        return service.languages(this.getEndpoint(), modelVersion, showStats, input, context);
    }

    /**
     * The API returns a detailed sentiment analysis for the input text. The analysis is done in multiple levels of
     * granularity, start from the a document level, down to sentence and key terms (aspects) and opinions.
     *
     * @param input Contains a set of input documents to be analyzed by the service.
     * @param modelVersion (Optional) This value indicates which model will be used for scoring. If a model-version is
     *     not specified, the API should default to the latest, non-preview version.
     * @param showStats (Optional) if set to true, response will contain request and document level statistics.
     * @param opinionMining (Optional) if set to true, response will contain input and document level statistics
     *     including aspect-based sentiment analysis results.
     * @param stringIndexType (Optional) Specifies the method used to interpret string offsets. Defaults to Text
     *     Elements (Graphemes) according to Unicode v8.0.0. For additional information see
     *     https://aka.ms/text-analytics-offsets.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<SentimentResponse>> sentimentWithResponseAsync(
            MultiLanguageBatchInput input,
            String modelVersion,
            Boolean showStats,
            Boolean opinionMining,
            StringIndexType stringIndexType,
            Context context) {
        return service.sentiment(
                this.getEndpoint(), modelVersion, showStats, opinionMining, stringIndexType, input, context);
    }
}
