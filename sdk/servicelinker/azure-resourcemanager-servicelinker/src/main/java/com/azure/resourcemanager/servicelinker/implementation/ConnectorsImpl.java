// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicelinker.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.servicelinker.fluent.ConnectorsClient;
import com.azure.resourcemanager.servicelinker.fluent.models.ConfigurationResultInner;
import com.azure.resourcemanager.servicelinker.fluent.models.DryrunResourceInner;
import com.azure.resourcemanager.servicelinker.fluent.models.LinkerResourceInner;
import com.azure.resourcemanager.servicelinker.fluent.models.ValidateOperationResultInner;
import com.azure.resourcemanager.servicelinker.models.ConfigurationInfo;
import com.azure.resourcemanager.servicelinker.models.ConfigurationResult;
import com.azure.resourcemanager.servicelinker.models.Connectors;
import com.azure.resourcemanager.servicelinker.models.DryrunResource;
import com.azure.resourcemanager.servicelinker.models.LinkerPatch;
import com.azure.resourcemanager.servicelinker.models.LinkerResource;
import com.azure.resourcemanager.servicelinker.models.ValidateOperationResult;

public final class ConnectorsImpl implements Connectors {
    private static final ClientLogger LOGGER = new ClientLogger(ConnectorsImpl.class);

    private final ConnectorsClient innerClient;

    private final com.azure.resourcemanager.servicelinker.ServiceLinkerManager serviceManager;

    public ConnectorsImpl(ConnectorsClient innerClient,
        com.azure.resourcemanager.servicelinker.ServiceLinkerManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<DryrunResource> listDryrun(String subscriptionId, String resourceGroupName, String location) {
        PagedIterable<DryrunResourceInner> inner
            = this.serviceClient().listDryrun(subscriptionId, resourceGroupName, location);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new DryrunResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<DryrunResource> listDryrun(String subscriptionId, String resourceGroupName, String location,
        Context context) {
        PagedIterable<DryrunResourceInner> inner
            = this.serviceClient().listDryrun(subscriptionId, resourceGroupName, location, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new DryrunResourceImpl(inner1, this.manager()));
    }

    public Response<DryrunResource> getDryrunWithResponse(String subscriptionId, String resourceGroupName,
        String location, String dryrunName, Context context) {
        Response<DryrunResourceInner> inner = this.serviceClient()
            .getDryrunWithResponse(subscriptionId, resourceGroupName, location, dryrunName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new DryrunResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public DryrunResource getDryrun(String subscriptionId, String resourceGroupName, String location,
        String dryrunName) {
        DryrunResourceInner inner
            = this.serviceClient().getDryrun(subscriptionId, resourceGroupName, location, dryrunName);
        if (inner != null) {
            return new DryrunResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Void> deleteDryrunWithResponse(String subscriptionId, String resourceGroupName, String location,
        String dryrunName, Context context) {
        return this.serviceClient()
            .deleteDryrunWithResponse(subscriptionId, resourceGroupName, location, dryrunName, context);
    }

    public void deleteDryrun(String subscriptionId, String resourceGroupName, String location, String dryrunName) {
        this.serviceClient().deleteDryrun(subscriptionId, resourceGroupName, location, dryrunName);
    }

    public PagedIterable<LinkerResource> list(String subscriptionId, String resourceGroupName, String location) {
        PagedIterable<LinkerResourceInner> inner
            = this.serviceClient().list(subscriptionId, resourceGroupName, location);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new LinkerResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<LinkerResource> list(String subscriptionId, String resourceGroupName, String location,
        Context context) {
        PagedIterable<LinkerResourceInner> inner
            = this.serviceClient().list(subscriptionId, resourceGroupName, location, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new LinkerResourceImpl(inner1, this.manager()));
    }

    public Response<LinkerResource> getWithResponse(String subscriptionId, String resourceGroupName, String location,
        String connectorName, Context context) {
        Response<LinkerResourceInner> inner
            = this.serviceClient().getWithResponse(subscriptionId, resourceGroupName, location, connectorName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new LinkerResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public LinkerResource get(String subscriptionId, String resourceGroupName, String location, String connectorName) {
        LinkerResourceInner inner
            = this.serviceClient().get(subscriptionId, resourceGroupName, location, connectorName);
        if (inner != null) {
            return new LinkerResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public LinkerResource createOrUpdate(String subscriptionId, String resourceGroupName, String location,
        String connectorName, LinkerResourceInner parameters) {
        LinkerResourceInner inner = this.serviceClient()
            .createOrUpdate(subscriptionId, resourceGroupName, location, connectorName, parameters);
        if (inner != null) {
            return new LinkerResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public LinkerResource createOrUpdate(String subscriptionId, String resourceGroupName, String location,
        String connectorName, LinkerResourceInner parameters, Context context) {
        LinkerResourceInner inner = this.serviceClient()
            .createOrUpdate(subscriptionId, resourceGroupName, location, connectorName, parameters, context);
        if (inner != null) {
            return new LinkerResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void delete(String subscriptionId, String resourceGroupName, String location, String connectorName) {
        this.serviceClient().delete(subscriptionId, resourceGroupName, location, connectorName);
    }

    public void delete(String subscriptionId, String resourceGroupName, String location, String connectorName,
        Context context) {
        this.serviceClient().delete(subscriptionId, resourceGroupName, location, connectorName, context);
    }

    public LinkerResource update(String subscriptionId, String resourceGroupName, String location, String connectorName,
        LinkerPatch parameters) {
        LinkerResourceInner inner
            = this.serviceClient().update(subscriptionId, resourceGroupName, location, connectorName, parameters);
        if (inner != null) {
            return new LinkerResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public LinkerResource update(String subscriptionId, String resourceGroupName, String location, String connectorName,
        LinkerPatch parameters, Context context) {
        LinkerResourceInner inner = this.serviceClient()
            .update(subscriptionId, resourceGroupName, location, connectorName, parameters, context);
        if (inner != null) {
            return new LinkerResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ValidateOperationResult validate(String subscriptionId, String resourceGroupName, String location,
        String connectorName) {
        ValidateOperationResultInner inner
            = this.serviceClient().validate(subscriptionId, resourceGroupName, location, connectorName);
        if (inner != null) {
            return new ValidateOperationResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ValidateOperationResult validate(String subscriptionId, String resourceGroupName, String location,
        String connectorName, Context context) {
        ValidateOperationResultInner inner
            = this.serviceClient().validate(subscriptionId, resourceGroupName, location, connectorName, context);
        if (inner != null) {
            return new ValidateOperationResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ConfigurationResult> generateConfigurationsWithResponse(String subscriptionId,
        String resourceGroupName, String location, String connectorName, ConfigurationInfo parameters,
        Context context) {
        Response<ConfigurationResultInner> inner = this.serviceClient()
            .generateConfigurationsWithResponse(subscriptionId, resourceGroupName, location, connectorName, parameters,
                context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new ConfigurationResultImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ConfigurationResult generateConfigurations(String subscriptionId, String resourceGroupName, String location,
        String connectorName) {
        ConfigurationResultInner inner
            = this.serviceClient().generateConfigurations(subscriptionId, resourceGroupName, location, connectorName);
        if (inner != null) {
            return new ConfigurationResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public DryrunResource getDryrunById(String id) {
        String subscriptionId = ResourceManagerUtils.getValueFromIdByName(id, "subscriptions");
        if (subscriptionId == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'subscriptions'.", id)));
        }
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourcegroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourcegroups'.", id)));
        }
        String location = ResourceManagerUtils.getValueFromIdByName(id, "locations");
        if (location == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'locations'.", id)));
        }
        String dryrunName = ResourceManagerUtils.getValueFromIdByName(id, "dryruns");
        if (dryrunName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'dryruns'.", id)));
        }
        return this.getDryrunWithResponse(subscriptionId, resourceGroupName, location, dryrunName, Context.NONE)
            .getValue();
    }

    public Response<DryrunResource> getDryrunByIdWithResponse(String id, Context context) {
        String subscriptionId = ResourceManagerUtils.getValueFromIdByName(id, "subscriptions");
        if (subscriptionId == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'subscriptions'.", id)));
        }
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourcegroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourcegroups'.", id)));
        }
        String location = ResourceManagerUtils.getValueFromIdByName(id, "locations");
        if (location == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'locations'.", id)));
        }
        String dryrunName = ResourceManagerUtils.getValueFromIdByName(id, "dryruns");
        if (dryrunName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'dryruns'.", id)));
        }
        return this.getDryrunWithResponse(subscriptionId, resourceGroupName, location, dryrunName, context);
    }

    public void deleteDryrunById(String id) {
        String subscriptionId = ResourceManagerUtils.getValueFromIdByName(id, "subscriptions");
        if (subscriptionId == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'subscriptions'.", id)));
        }
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourcegroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourcegroups'.", id)));
        }
        String location = ResourceManagerUtils.getValueFromIdByName(id, "locations");
        if (location == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'locations'.", id)));
        }
        String dryrunName = ResourceManagerUtils.getValueFromIdByName(id, "dryruns");
        if (dryrunName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'dryruns'.", id)));
        }
        this.deleteDryrunWithResponse(subscriptionId, resourceGroupName, location, dryrunName, Context.NONE);
    }

    public Response<Void> deleteDryrunByIdWithResponse(String id, Context context) {
        String subscriptionId = ResourceManagerUtils.getValueFromIdByName(id, "subscriptions");
        if (subscriptionId == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'subscriptions'.", id)));
        }
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourcegroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourcegroups'.", id)));
        }
        String location = ResourceManagerUtils.getValueFromIdByName(id, "locations");
        if (location == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'locations'.", id)));
        }
        String dryrunName = ResourceManagerUtils.getValueFromIdByName(id, "dryruns");
        if (dryrunName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'dryruns'.", id)));
        }
        return this.deleteDryrunWithResponse(subscriptionId, resourceGroupName, location, dryrunName, context);
    }

    private ConnectorsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.servicelinker.ServiceLinkerManager manager() {
        return this.serviceManager;
    }

    public DryrunResourceImpl define(String name) {
        return new DryrunResourceImpl(name, this.manager());
    }
}
