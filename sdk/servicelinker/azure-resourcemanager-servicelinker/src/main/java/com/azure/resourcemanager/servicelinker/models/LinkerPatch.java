// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicelinker.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.JsonFlatten;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;

/** A linker to be updated. */
@JsonFlatten
@Fluent
public class LinkerPatch {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(LinkerPatch.class);

    /*
     * The resource Id of target service.
     */
    @JsonProperty(value = "properties.targetId")
    private String targetId;

    /*
     * The authentication type.
     */
    @JsonProperty(value = "properties.authInfo")
    private AuthInfoBase authInfo;

    /*
     * The application client type
     */
    @JsonProperty(value = "properties.clientType")
    private ClientType clientType;

    /*
     * The provisioning state.
     */
    @JsonProperty(value = "properties.provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private String provisioningState;

    /**
     * Get the targetId property: The resource Id of target service.
     *
     * @return the targetId value.
     */
    public String targetId() {
        return this.targetId;
    }

    /**
     * Set the targetId property: The resource Id of target service.
     *
     * @param targetId the targetId value to set.
     * @return the LinkerPatch object itself.
     */
    public LinkerPatch withTargetId(String targetId) {
        this.targetId = targetId;
        return this;
    }

    /**
     * Get the authInfo property: The authentication type.
     *
     * @return the authInfo value.
     */
    public AuthInfoBase authInfo() {
        return this.authInfo;
    }

    /**
     * Set the authInfo property: The authentication type.
     *
     * @param authInfo the authInfo value to set.
     * @return the LinkerPatch object itself.
     */
    public LinkerPatch withAuthInfo(AuthInfoBase authInfo) {
        this.authInfo = authInfo;
        return this;
    }

    /**
     * Get the clientType property: The application client type.
     *
     * @return the clientType value.
     */
    public ClientType clientType() {
        return this.clientType;
    }

    /**
     * Set the clientType property: The application client type.
     *
     * @param clientType the clientType value to set.
     * @return the LinkerPatch object itself.
     */
    public LinkerPatch withClientType(ClientType clientType) {
        this.clientType = clientType;
        return this;
    }

    /**
     * Get the provisioningState property: The provisioning state.
     *
     * @return the provisioningState value.
     */
    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (authInfo() != null) {
            authInfo().validate();
        }
    }
}
