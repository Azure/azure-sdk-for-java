// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.blockchain.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.blockchain.BlockchainManager;
import com.azure.resourcemanager.blockchain.fluent.TransactionNodesClient;
import com.azure.resourcemanager.blockchain.fluent.models.ApiKeyCollectionInner;
import com.azure.resourcemanager.blockchain.fluent.models.TransactionNodeInner;
import com.azure.resourcemanager.blockchain.models.ApiKey;
import com.azure.resourcemanager.blockchain.models.ApiKeyCollection;
import com.azure.resourcemanager.blockchain.models.TransactionNode;
import com.azure.resourcemanager.blockchain.models.TransactionNodes;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class TransactionNodesImpl implements TransactionNodes {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(TransactionNodesImpl.class);

    private final TransactionNodesClient innerClient;

    private final BlockchainManager serviceManager;

    public TransactionNodesImpl(TransactionNodesClient innerClient, BlockchainManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public TransactionNode get(String blockchainMemberName, String transactionNodeName, String resourceGroupName) {
        TransactionNodeInner inner =
            this.serviceClient().get(blockchainMemberName, transactionNodeName, resourceGroupName);
        if (inner != null) {
            return new TransactionNodeImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<TransactionNode> getWithResponse(
        String blockchainMemberName, String transactionNodeName, String resourceGroupName, Context context) {
        Response<TransactionNodeInner> inner =
            this.serviceClient().getWithResponse(blockchainMemberName, transactionNodeName, resourceGroupName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new TransactionNodeImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void delete(String blockchainMemberName, String transactionNodeName, String resourceGroupName) {
        this.serviceClient().delete(blockchainMemberName, transactionNodeName, resourceGroupName);
    }

    public void delete(
        String blockchainMemberName, String transactionNodeName, String resourceGroupName, Context context) {
        this.serviceClient().delete(blockchainMemberName, transactionNodeName, resourceGroupName, context);
    }

    public PagedIterable<TransactionNode> list(String blockchainMemberName, String resourceGroupName) {
        PagedIterable<TransactionNodeInner> inner = this.serviceClient().list(blockchainMemberName, resourceGroupName);
        return Utils.mapPage(inner, inner1 -> new TransactionNodeImpl(inner1, this.manager()));
    }

    public PagedIterable<TransactionNode> list(String blockchainMemberName, String resourceGroupName, Context context) {
        PagedIterable<TransactionNodeInner> inner =
            this.serviceClient().list(blockchainMemberName, resourceGroupName, context);
        return Utils.mapPage(inner, inner1 -> new TransactionNodeImpl(inner1, this.manager()));
    }

    public ApiKeyCollection listApiKeys(
        String blockchainMemberName, String transactionNodeName, String resourceGroupName) {
        ApiKeyCollectionInner inner =
            this.serviceClient().listApiKeys(blockchainMemberName, transactionNodeName, resourceGroupName);
        if (inner != null) {
            return new ApiKeyCollectionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ApiKeyCollection> listApiKeysWithResponse(
        String blockchainMemberName, String transactionNodeName, String resourceGroupName, Context context) {
        Response<ApiKeyCollectionInner> inner =
            this
                .serviceClient()
                .listApiKeysWithResponse(blockchainMemberName, transactionNodeName, resourceGroupName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ApiKeyCollectionImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ApiKeyCollection listRegenerateApiKeys(
        String blockchainMemberName, String transactionNodeName, String resourceGroupName) {
        ApiKeyCollectionInner inner =
            this.serviceClient().listRegenerateApiKeys(blockchainMemberName, transactionNodeName, resourceGroupName);
        if (inner != null) {
            return new ApiKeyCollectionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ApiKeyCollection> listRegenerateApiKeysWithResponse(
        String blockchainMemberName,
        String transactionNodeName,
        String resourceGroupName,
        ApiKey apiKey,
        Context context) {
        Response<ApiKeyCollectionInner> inner =
            this
                .serviceClient()
                .listRegenerateApiKeysWithResponse(
                    blockchainMemberName, transactionNodeName, resourceGroupName, apiKey, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ApiKeyCollectionImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public TransactionNode getById(String id) {
        String blockchainMemberName = Utils.getValueFromIdByName(id, "blockchainMembers");
        if (blockchainMemberName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'blockchainMembers'.", id)));
        }
        String transactionNodeName = Utils.getValueFromIdByName(id, "transactionNodes");
        if (transactionNodeName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'transactionNodes'.", id)));
        }
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        return this
            .getWithResponse(blockchainMemberName, transactionNodeName, resourceGroupName, Context.NONE)
            .getValue();
    }

    public Response<TransactionNode> getByIdWithResponse(String id, Context context) {
        String blockchainMemberName = Utils.getValueFromIdByName(id, "blockchainMembers");
        if (blockchainMemberName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'blockchainMembers'.", id)));
        }
        String transactionNodeName = Utils.getValueFromIdByName(id, "transactionNodes");
        if (transactionNodeName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'transactionNodes'.", id)));
        }
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        return this.getWithResponse(blockchainMemberName, transactionNodeName, resourceGroupName, context);
    }

    public void deleteById(String id) {
        String blockchainMemberName = Utils.getValueFromIdByName(id, "blockchainMembers");
        if (blockchainMemberName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'blockchainMembers'.", id)));
        }
        String transactionNodeName = Utils.getValueFromIdByName(id, "transactionNodes");
        if (transactionNodeName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'transactionNodes'.", id)));
        }
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        this.delete(blockchainMemberName, transactionNodeName, resourceGroupName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String blockchainMemberName = Utils.getValueFromIdByName(id, "blockchainMembers");
        if (blockchainMemberName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'blockchainMembers'.", id)));
        }
        String transactionNodeName = Utils.getValueFromIdByName(id, "transactionNodes");
        if (transactionNodeName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'transactionNodes'.", id)));
        }
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        this.delete(blockchainMemberName, transactionNodeName, resourceGroupName, context);
    }

    private TransactionNodesClient serviceClient() {
        return this.innerClient;
    }

    private BlockchainManager manager() {
        return this.serviceManager;
    }

    public TransactionNodeImpl define(String name) {
        return new TransactionNodeImpl(name, this.manager());
    }
}
