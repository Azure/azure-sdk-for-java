// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.blockchain.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.blockchain.fluent.BlockchainMembersClient;
import com.azure.resourcemanager.blockchain.fluent.models.ApiKeyCollectionInner;
import com.azure.resourcemanager.blockchain.fluent.models.BlockchainMemberInner;
import com.azure.resourcemanager.blockchain.fluent.models.ConsortiumMemberInner;
import com.azure.resourcemanager.blockchain.models.ApiKey;
import com.azure.resourcemanager.blockchain.models.BlockchainMemberCollection;
import com.azure.resourcemanager.blockchain.models.BlockchainMemberUpdate;
import com.azure.resourcemanager.blockchain.models.ConsortiumMemberCollection;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in BlockchainMembersClient. */
public final class BlockchainMembersClientImpl implements BlockchainMembersClient {
    private final ClientLogger logger = new ClientLogger(BlockchainMembersClientImpl.class);

    /** The proxy service used to perform REST calls. */
    private final BlockchainMembersService service;

    /** The service client containing this operation class. */
    private final BlockchainManagementClientImpl client;

    /**
     * Initializes an instance of BlockchainMembersClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    BlockchainMembersClientImpl(BlockchainManagementClientImpl client) {
        this.service =
            RestProxy.create(BlockchainMembersService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for BlockchainManagementClientBlockchainMembers to be used by the proxy
     * service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "BlockchainManagement")
    private interface BlockchainMembersService {
        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Blockchain"
                + "/blockchainMembers/{blockchainMemberName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<BlockchainMemberInner>> getByResourceGroup(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("blockchainMemberName") String blockchainMemberName,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Put(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Blockchain"
                + "/blockchainMembers/{blockchainMemberName}")
        @ExpectedResponses({200, 201})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> create(
            @HostParam("$host") String endpoint,
            @PathParam("blockchainMemberName") String blockchainMemberName,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @BodyParam("application/json") BlockchainMemberInner blockchainMember,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Accept: application/json;q=0.9", "Content-Type: application/json"})
        @Delete(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Blockchain"
                + "/blockchainMembers/{blockchainMemberName}")
        @ExpectedResponses({202, 204})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> delete(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("blockchainMemberName") String blockchainMemberName,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Patch(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Blockchain"
                + "/blockchainMembers/{blockchainMemberName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<BlockchainMemberInner>> update(
            @HostParam("$host") String endpoint,
            @PathParam("blockchainMemberName") String blockchainMemberName,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @BodyParam("application/json") BlockchainMemberUpdate blockchainMember,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Blockchain"
                + "/blockchainMembers")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<BlockchainMemberCollection>> listByResourceGroup(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("/subscriptions/{subscriptionId}/providers/Microsoft.Blockchain/blockchainMembers")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<BlockchainMemberCollection>> list(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Blockchain"
                + "/blockchainMembers/{blockchainMemberName}/consortiumMembers")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ConsortiumMemberCollection>> listConsortiumMembers(
            @HostParam("$host") String endpoint,
            @PathParam("blockchainMemberName") String blockchainMemberName,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Blockchain"
                + "/blockchainMembers/{blockchainMemberName}/listApiKeys")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ApiKeyCollectionInner>> listApiKeys(
            @HostParam("$host") String endpoint,
            @PathParam("blockchainMemberName") String blockchainMemberName,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Blockchain"
                + "/blockchainMembers/{blockchainMemberName}/regenerateApiKeys")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ApiKeyCollectionInner>> listRegenerateApiKeys(
            @HostParam("$host") String endpoint,
            @PathParam("blockchainMemberName") String blockchainMemberName,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @BodyParam("application/json") ApiKey apiKey,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<BlockchainMemberCollection>> listNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<BlockchainMemberCollection>> listAllNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ConsortiumMemberCollection>> listConsortiumMembersNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Get details about a blockchain member.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @param blockchainMemberName Blockchain member name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return details about a blockchain member.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<BlockchainMemberInner>> getByResourceGroupWithResponseAsync(
        String resourceGroupName, String blockchainMemberName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (blockchainMemberName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter blockchainMemberName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getByResourceGroup(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            blockchainMemberName,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get details about a blockchain member.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @param blockchainMemberName Blockchain member name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return details about a blockchain member.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<BlockchainMemberInner>> getByResourceGroupWithResponseAsync(
        String resourceGroupName, String blockchainMemberName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (blockchainMemberName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter blockchainMemberName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .getByResourceGroup(
                this.client.getEndpoint(),
                resourceGroupName,
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                blockchainMemberName,
                accept,
                context);
    }

    /**
     * Get details about a blockchain member.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @param blockchainMemberName Blockchain member name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return details about a blockchain member.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<BlockchainMemberInner> getByResourceGroupAsync(String resourceGroupName, String blockchainMemberName) {
        return getByResourceGroupWithResponseAsync(resourceGroupName, blockchainMemberName)
            .flatMap(
                (Response<BlockchainMemberInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Get details about a blockchain member.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @param blockchainMemberName Blockchain member name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return details about a blockchain member.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BlockchainMemberInner getByResourceGroup(String resourceGroupName, String blockchainMemberName) {
        return getByResourceGroupAsync(resourceGroupName, blockchainMemberName).block();
    }

    /**
     * Get details about a blockchain member.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @param blockchainMemberName Blockchain member name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return details about a blockchain member.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BlockchainMemberInner> getByResourceGroupWithResponse(
        String resourceGroupName, String blockchainMemberName, Context context) {
        return getByResourceGroupWithResponseAsync(resourceGroupName, blockchainMemberName, context).block();
    }

    /**
     * Create a blockchain member.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @param blockchainMember Payload to create a blockchain member.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return payload of the blockchain member which is exposed in the request/response of the resource provider.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createWithResponseAsync(
        String blockchainMemberName, String resourceGroupName, BlockchainMemberInner blockchainMember) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (blockchainMemberName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter blockchainMemberName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (blockchainMember != null) {
            blockchainMember.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .create(
                            this.client.getEndpoint(),
                            blockchainMemberName,
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            blockchainMember,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Create a blockchain member.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @param blockchainMember Payload to create a blockchain member.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return payload of the blockchain member which is exposed in the request/response of the resource provider.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createWithResponseAsync(
        String blockchainMemberName,
        String resourceGroupName,
        BlockchainMemberInner blockchainMember,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (blockchainMemberName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter blockchainMemberName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (blockchainMember != null) {
            blockchainMember.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .create(
                this.client.getEndpoint(),
                blockchainMemberName,
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                blockchainMember,
                accept,
                context);
    }

    /**
     * Create a blockchain member.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @param blockchainMember Payload to create a blockchain member.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return payload of the blockchain member which is exposed in the request/response of the resource provider.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<BlockchainMemberInner>, BlockchainMemberInner> beginCreateAsync(
        String blockchainMemberName, String resourceGroupName, BlockchainMemberInner blockchainMember) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            createWithResponseAsync(blockchainMemberName, resourceGroupName, blockchainMember);
        return this
            .client
            .<BlockchainMemberInner, BlockchainMemberInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                BlockchainMemberInner.class,
                BlockchainMemberInner.class,
                Context.NONE);
    }

    /**
     * Create a blockchain member.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @param blockchainMember Payload to create a blockchain member.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return payload of the blockchain member which is exposed in the request/response of the resource provider.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<BlockchainMemberInner>, BlockchainMemberInner> beginCreateAsync(
        String blockchainMemberName,
        String resourceGroupName,
        BlockchainMemberInner blockchainMember,
        Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            createWithResponseAsync(blockchainMemberName, resourceGroupName, blockchainMember, context);
        return this
            .client
            .<BlockchainMemberInner, BlockchainMemberInner>getLroResult(
                mono, this.client.getHttpPipeline(), BlockchainMemberInner.class, BlockchainMemberInner.class, context);
    }

    /**
     * Create a blockchain member.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @param blockchainMember Payload to create a blockchain member.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return payload of the blockchain member which is exposed in the request/response of the resource provider.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<BlockchainMemberInner>, BlockchainMemberInner> beginCreate(
        String blockchainMemberName, String resourceGroupName, BlockchainMemberInner blockchainMember) {
        return beginCreateAsync(blockchainMemberName, resourceGroupName, blockchainMember).getSyncPoller();
    }

    /**
     * Create a blockchain member.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @param blockchainMember Payload to create a blockchain member.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return payload of the blockchain member which is exposed in the request/response of the resource provider.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<BlockchainMemberInner>, BlockchainMemberInner> beginCreate(
        String blockchainMemberName,
        String resourceGroupName,
        BlockchainMemberInner blockchainMember,
        Context context) {
        return beginCreateAsync(blockchainMemberName, resourceGroupName, blockchainMember, context).getSyncPoller();
    }

    /**
     * Create a blockchain member.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @param blockchainMember Payload to create a blockchain member.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return payload of the blockchain member which is exposed in the request/response of the resource provider.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<BlockchainMemberInner> createAsync(
        String blockchainMemberName, String resourceGroupName, BlockchainMemberInner blockchainMember) {
        return beginCreateAsync(blockchainMemberName, resourceGroupName, blockchainMember)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create a blockchain member.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return payload of the blockchain member which is exposed in the request/response of the resource provider.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<BlockchainMemberInner> createAsync(String blockchainMemberName, String resourceGroupName) {
        final BlockchainMemberInner blockchainMember = null;
        return beginCreateAsync(blockchainMemberName, resourceGroupName, blockchainMember)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create a blockchain member.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @param blockchainMember Payload to create a blockchain member.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return payload of the blockchain member which is exposed in the request/response of the resource provider.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<BlockchainMemberInner> createAsync(
        String blockchainMemberName,
        String resourceGroupName,
        BlockchainMemberInner blockchainMember,
        Context context) {
        return beginCreateAsync(blockchainMemberName, resourceGroupName, blockchainMember, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create a blockchain member.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @param blockchainMember Payload to create a blockchain member.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return payload of the blockchain member which is exposed in the request/response of the resource provider.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BlockchainMemberInner create(
        String blockchainMemberName, String resourceGroupName, BlockchainMemberInner blockchainMember) {
        return createAsync(blockchainMemberName, resourceGroupName, blockchainMember).block();
    }

    /**
     * Create a blockchain member.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return payload of the blockchain member which is exposed in the request/response of the resource provider.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BlockchainMemberInner create(String blockchainMemberName, String resourceGroupName) {
        final BlockchainMemberInner blockchainMember = null;
        return createAsync(blockchainMemberName, resourceGroupName, blockchainMember).block();
    }

    /**
     * Create a blockchain member.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @param blockchainMember Payload to create a blockchain member.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return payload of the blockchain member which is exposed in the request/response of the resource provider.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BlockchainMemberInner create(
        String blockchainMemberName,
        String resourceGroupName,
        BlockchainMemberInner blockchainMember,
        Context context) {
        return createAsync(blockchainMemberName, resourceGroupName, blockchainMember, context).block();
    }

    /**
     * Delete a blockchain member.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @param blockchainMemberName Blockchain member name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(
        String resourceGroupName, String blockchainMemberName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (blockchainMemberName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter blockchainMemberName is required and cannot be null."));
        }
        return FluxUtil
            .withContext(
                context ->
                    service
                        .delete(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            blockchainMemberName,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Delete a blockchain member.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @param blockchainMemberName Blockchain member name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(
        String resourceGroupName, String blockchainMemberName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (blockchainMemberName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter blockchainMemberName is required and cannot be null."));
        }
        context = this.client.mergeContext(context);
        return service
            .delete(
                this.client.getEndpoint(),
                resourceGroupName,
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                blockchainMemberName,
                context);
    }

    /**
     * Delete a blockchain member.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @param blockchainMemberName Blockchain member name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(String resourceGroupName, String blockchainMemberName) {
        Mono<Response<Flux<ByteBuffer>>> mono = deleteWithResponseAsync(resourceGroupName, blockchainMemberName);
        return this
            .client
            .<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class, Context.NONE);
    }

    /**
     * Delete a blockchain member.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @param blockchainMemberName Blockchain member name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(
        String resourceGroupName, String blockchainMemberName, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            deleteWithResponseAsync(resourceGroupName, blockchainMemberName, context);
        return this
            .client
            .<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class, context);
    }

    /**
     * Delete a blockchain member.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @param blockchainMemberName Blockchain member name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String blockchainMemberName) {
        return beginDeleteAsync(resourceGroupName, blockchainMemberName).getSyncPoller();
    }

    /**
     * Delete a blockchain member.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @param blockchainMemberName Blockchain member name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<Void>, Void> beginDelete(
        String resourceGroupName, String blockchainMemberName, Context context) {
        return beginDeleteAsync(resourceGroupName, blockchainMemberName, context).getSyncPoller();
    }

    /**
     * Delete a blockchain member.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @param blockchainMemberName Blockchain member name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String blockchainMemberName) {
        return beginDeleteAsync(resourceGroupName, blockchainMemberName)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Delete a blockchain member.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @param blockchainMemberName Blockchain member name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String blockchainMemberName, Context context) {
        return beginDeleteAsync(resourceGroupName, blockchainMemberName, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Delete a blockchain member.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @param blockchainMemberName Blockchain member name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String blockchainMemberName) {
        deleteAsync(resourceGroupName, blockchainMemberName).block();
    }

    /**
     * Delete a blockchain member.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @param blockchainMemberName Blockchain member name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String blockchainMemberName, Context context) {
        deleteAsync(resourceGroupName, blockchainMemberName, context).block();
    }

    /**
     * Update a blockchain member.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @param blockchainMember Payload to update the blockchain member.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return payload of the blockchain member which is exposed in the request/response of the resource provider.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<BlockchainMemberInner>> updateWithResponseAsync(
        String blockchainMemberName, String resourceGroupName, BlockchainMemberUpdate blockchainMember) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (blockchainMemberName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter blockchainMemberName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (blockchainMember != null) {
            blockchainMember.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .update(
                            this.client.getEndpoint(),
                            blockchainMemberName,
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            blockchainMember,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Update a blockchain member.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @param blockchainMember Payload to update the blockchain member.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return payload of the blockchain member which is exposed in the request/response of the resource provider.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<BlockchainMemberInner>> updateWithResponseAsync(
        String blockchainMemberName,
        String resourceGroupName,
        BlockchainMemberUpdate blockchainMember,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (blockchainMemberName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter blockchainMemberName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (blockchainMember != null) {
            blockchainMember.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .update(
                this.client.getEndpoint(),
                blockchainMemberName,
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                blockchainMember,
                accept,
                context);
    }

    /**
     * Update a blockchain member.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @param blockchainMember Payload to update the blockchain member.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return payload of the blockchain member which is exposed in the request/response of the resource provider.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<BlockchainMemberInner> updateAsync(
        String blockchainMemberName, String resourceGroupName, BlockchainMemberUpdate blockchainMember) {
        return updateWithResponseAsync(blockchainMemberName, resourceGroupName, blockchainMember)
            .flatMap(
                (Response<BlockchainMemberInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Update a blockchain member.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return payload of the blockchain member which is exposed in the request/response of the resource provider.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<BlockchainMemberInner> updateAsync(String blockchainMemberName, String resourceGroupName) {
        final BlockchainMemberUpdate blockchainMember = null;
        return updateWithResponseAsync(blockchainMemberName, resourceGroupName, blockchainMember)
            .flatMap(
                (Response<BlockchainMemberInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Update a blockchain member.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return payload of the blockchain member which is exposed in the request/response of the resource provider.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BlockchainMemberInner update(String blockchainMemberName, String resourceGroupName) {
        final BlockchainMemberUpdate blockchainMember = null;
        return updateAsync(blockchainMemberName, resourceGroupName, blockchainMember).block();
    }

    /**
     * Update a blockchain member.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @param blockchainMember Payload to update the blockchain member.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return payload of the blockchain member which is exposed in the request/response of the resource provider.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BlockchainMemberInner> updateWithResponse(
        String blockchainMemberName,
        String resourceGroupName,
        BlockchainMemberUpdate blockchainMember,
        Context context) {
        return updateWithResponseAsync(blockchainMemberName, resourceGroupName, blockchainMember, context).block();
    }

    /**
     * Lists the blockchain members for a resource group.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of the blockchain member payload which is exposed in the request/response of the resource
     *     provider.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BlockchainMemberInner>> listByResourceGroupSinglePageAsync(String resourceGroupName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .listByResourceGroup(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            accept,
                            context))
            .<PagedResponse<BlockchainMemberInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Lists the blockchain members for a resource group.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of the blockchain member payload which is exposed in the request/response of the resource
     *     provider.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BlockchainMemberInner>> listByResourceGroupSinglePageAsync(
        String resourceGroupName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listByResourceGroup(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Lists the blockchain members for a resource group.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of the blockchain member payload which is exposed in the request/response of the resource
     *     provider.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<BlockchainMemberInner> listByResourceGroupAsync(String resourceGroupName) {
        return new PagedFlux<>(
            () -> listByResourceGroupSinglePageAsync(resourceGroupName), nextLink -> listNextSinglePageAsync(nextLink));
    }

    /**
     * Lists the blockchain members for a resource group.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of the blockchain member payload which is exposed in the request/response of the resource
     *     provider.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<BlockchainMemberInner> listByResourceGroupAsync(String resourceGroupName, Context context) {
        return new PagedFlux<>(
            () -> listByResourceGroupSinglePageAsync(resourceGroupName, context),
            nextLink -> listNextSinglePageAsync(nextLink, context));
    }

    /**
     * Lists the blockchain members for a resource group.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of the blockchain member payload which is exposed in the request/response of the resource
     *     provider.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BlockchainMemberInner> listByResourceGroup(String resourceGroupName) {
        return new PagedIterable<>(listByResourceGroupAsync(resourceGroupName));
    }

    /**
     * Lists the blockchain members for a resource group.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of the blockchain member payload which is exposed in the request/response of the resource
     *     provider.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BlockchainMemberInner> listByResourceGroup(String resourceGroupName, Context context) {
        return new PagedIterable<>(listByResourceGroupAsync(resourceGroupName, context));
    }

    /**
     * Lists the blockchain members for a subscription.
     *
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of the blockchain member payload which is exposed in the request/response of the resource
     *     provider.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BlockchainMemberInner>> listSinglePageAsync() {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .list(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            accept,
                            context))
            .<PagedResponse<BlockchainMemberInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Lists the blockchain members for a subscription.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of the blockchain member payload which is exposed in the request/response of the resource
     *     provider.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BlockchainMemberInner>> listSinglePageAsync(Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .list(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Lists the blockchain members for a subscription.
     *
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of the blockchain member payload which is exposed in the request/response of the resource
     *     provider.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<BlockchainMemberInner> listAsync() {
        return new PagedFlux<>(() -> listSinglePageAsync(), nextLink -> listAllNextSinglePageAsync(nextLink));
    }

    /**
     * Lists the blockchain members for a subscription.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of the blockchain member payload which is exposed in the request/response of the resource
     *     provider.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<BlockchainMemberInner> listAsync(Context context) {
        return new PagedFlux<>(
            () -> listSinglePageAsync(context), nextLink -> listAllNextSinglePageAsync(nextLink, context));
    }

    /**
     * Lists the blockchain members for a subscription.
     *
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of the blockchain member payload which is exposed in the request/response of the resource
     *     provider.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BlockchainMemberInner> list() {
        return new PagedIterable<>(listAsync());
    }

    /**
     * Lists the blockchain members for a subscription.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of the blockchain member payload which is exposed in the request/response of the resource
     *     provider.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BlockchainMemberInner> list(Context context) {
        return new PagedIterable<>(listAsync(context));
    }

    /**
     * Lists the consortium members for a blockchain member.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of consortium payload.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ConsortiumMemberInner>> listConsortiumMembersSinglePageAsync(
        String blockchainMemberName, String resourceGroupName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (blockchainMemberName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter blockchainMemberName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .listConsortiumMembers(
                            this.client.getEndpoint(),
                            blockchainMemberName,
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            accept,
                            context))
            .<PagedResponse<ConsortiumMemberInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Lists the consortium members for a blockchain member.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of consortium payload.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ConsortiumMemberInner>> listConsortiumMembersSinglePageAsync(
        String blockchainMemberName, String resourceGroupName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (blockchainMemberName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter blockchainMemberName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listConsortiumMembers(
                this.client.getEndpoint(),
                blockchainMemberName,
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Lists the consortium members for a blockchain member.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of consortium payload.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<ConsortiumMemberInner> listConsortiumMembersAsync(
        String blockchainMemberName, String resourceGroupName) {
        return new PagedFlux<>(
            () -> listConsortiumMembersSinglePageAsync(blockchainMemberName, resourceGroupName),
            nextLink -> listConsortiumMembersNextSinglePageAsync(nextLink));
    }

    /**
     * Lists the consortium members for a blockchain member.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of consortium payload.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<ConsortiumMemberInner> listConsortiumMembersAsync(
        String blockchainMemberName, String resourceGroupName, Context context) {
        return new PagedFlux<>(
            () -> listConsortiumMembersSinglePageAsync(blockchainMemberName, resourceGroupName, context),
            nextLink -> listConsortiumMembersNextSinglePageAsync(nextLink, context));
    }

    /**
     * Lists the consortium members for a blockchain member.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of consortium payload.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ConsortiumMemberInner> listConsortiumMembers(
        String blockchainMemberName, String resourceGroupName) {
        return new PagedIterable<>(listConsortiumMembersAsync(blockchainMemberName, resourceGroupName));
    }

    /**
     * Lists the consortium members for a blockchain member.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of consortium payload.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ConsortiumMemberInner> listConsortiumMembers(
        String blockchainMemberName, String resourceGroupName, Context context) {
        return new PagedIterable<>(listConsortiumMembersAsync(blockchainMemberName, resourceGroupName, context));
    }

    /**
     * Lists the API keys for a blockchain member.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of the API key payload which is exposed in the response of the resource provider.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ApiKeyCollectionInner>> listApiKeysWithResponseAsync(
        String blockchainMemberName, String resourceGroupName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (blockchainMemberName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter blockchainMemberName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .listApiKeys(
                            this.client.getEndpoint(),
                            blockchainMemberName,
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Lists the API keys for a blockchain member.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of the API key payload which is exposed in the response of the resource provider.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ApiKeyCollectionInner>> listApiKeysWithResponseAsync(
        String blockchainMemberName, String resourceGroupName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (blockchainMemberName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter blockchainMemberName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listApiKeys(
                this.client.getEndpoint(),
                blockchainMemberName,
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                accept,
                context);
    }

    /**
     * Lists the API keys for a blockchain member.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of the API key payload which is exposed in the response of the resource provider.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ApiKeyCollectionInner> listApiKeysAsync(String blockchainMemberName, String resourceGroupName) {
        return listApiKeysWithResponseAsync(blockchainMemberName, resourceGroupName)
            .flatMap(
                (Response<ApiKeyCollectionInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Lists the API keys for a blockchain member.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of the API key payload which is exposed in the response of the resource provider.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ApiKeyCollectionInner listApiKeys(String blockchainMemberName, String resourceGroupName) {
        return listApiKeysAsync(blockchainMemberName, resourceGroupName).block();
    }

    /**
     * Lists the API keys for a blockchain member.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of the API key payload which is exposed in the response of the resource provider.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ApiKeyCollectionInner> listApiKeysWithResponse(
        String blockchainMemberName, String resourceGroupName, Context context) {
        return listApiKeysWithResponseAsync(blockchainMemberName, resourceGroupName, context).block();
    }

    /**
     * Regenerate the API keys for a blockchain member.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @param apiKey api key to be regenerate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of the API key payload which is exposed in the response of the resource provider.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ApiKeyCollectionInner>> listRegenerateApiKeysWithResponseAsync(
        String blockchainMemberName, String resourceGroupName, ApiKey apiKey) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (blockchainMemberName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter blockchainMemberName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (apiKey != null) {
            apiKey.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .listRegenerateApiKeys(
                            this.client.getEndpoint(),
                            blockchainMemberName,
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            apiKey,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Regenerate the API keys for a blockchain member.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @param apiKey api key to be regenerate.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of the API key payload which is exposed in the response of the resource provider.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ApiKeyCollectionInner>> listRegenerateApiKeysWithResponseAsync(
        String blockchainMemberName, String resourceGroupName, ApiKey apiKey, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (blockchainMemberName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter blockchainMemberName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (apiKey != null) {
            apiKey.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listRegenerateApiKeys(
                this.client.getEndpoint(),
                blockchainMemberName,
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                apiKey,
                accept,
                context);
    }

    /**
     * Regenerate the API keys for a blockchain member.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @param apiKey api key to be regenerate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of the API key payload which is exposed in the response of the resource provider.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ApiKeyCollectionInner> listRegenerateApiKeysAsync(
        String blockchainMemberName, String resourceGroupName, ApiKey apiKey) {
        return listRegenerateApiKeysWithResponseAsync(blockchainMemberName, resourceGroupName, apiKey)
            .flatMap(
                (Response<ApiKeyCollectionInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Regenerate the API keys for a blockchain member.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of the API key payload which is exposed in the response of the resource provider.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ApiKeyCollectionInner> listRegenerateApiKeysAsync(
        String blockchainMemberName, String resourceGroupName) {
        final ApiKey apiKey = null;
        return listRegenerateApiKeysWithResponseAsync(blockchainMemberName, resourceGroupName, apiKey)
            .flatMap(
                (Response<ApiKeyCollectionInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Regenerate the API keys for a blockchain member.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of the API key payload which is exposed in the response of the resource provider.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ApiKeyCollectionInner listRegenerateApiKeys(String blockchainMemberName, String resourceGroupName) {
        final ApiKey apiKey = null;
        return listRegenerateApiKeysAsync(blockchainMemberName, resourceGroupName, apiKey).block();
    }

    /**
     * Regenerate the API keys for a blockchain member.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @param apiKey api key to be regenerate.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of the API key payload which is exposed in the response of the resource provider.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ApiKeyCollectionInner> listRegenerateApiKeysWithResponse(
        String blockchainMemberName, String resourceGroupName, ApiKey apiKey, Context context) {
        return listRegenerateApiKeysWithResponseAsync(blockchainMemberName, resourceGroupName, apiKey, context).block();
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of the blockchain member payload which is exposed in the request/response of the resource
     *     provider.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BlockchainMemberInner>> listNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<BlockchainMemberInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of the blockchain member payload which is exposed in the request/response of the resource
     *     provider.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BlockchainMemberInner>> listNextSinglePageAsync(String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of the blockchain member payload which is exposed in the request/response of the resource
     *     provider.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BlockchainMemberInner>> listAllNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listAllNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<BlockchainMemberInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of the blockchain member payload which is exposed in the request/response of the resource
     *     provider.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BlockchainMemberInner>> listAllNextSinglePageAsync(String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listAllNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of consortium payload.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ConsortiumMemberInner>> listConsortiumMembersNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.listConsortiumMembersNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<ConsortiumMemberInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of consortium payload.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ConsortiumMemberInner>> listConsortiumMembersNextSinglePageAsync(
        String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listConsortiumMembersNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }
}
