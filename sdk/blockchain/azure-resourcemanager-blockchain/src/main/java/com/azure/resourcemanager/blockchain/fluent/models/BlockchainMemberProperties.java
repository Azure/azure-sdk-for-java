// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.blockchain.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.blockchain.models.BlockchainMemberNodesSku;
import com.azure.resourcemanager.blockchain.models.BlockchainMemberProvisioningState;
import com.azure.resourcemanager.blockchain.models.BlockchainProtocol;
import com.azure.resourcemanager.blockchain.models.FirewallRule;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** Payload of the blockchain member properties for a blockchain member. */
@Fluent
public final class BlockchainMemberProperties {
    /*
     * Gets or sets the blockchain protocol.
     */
    @JsonProperty(value = "protocol")
    private BlockchainProtocol protocol;

    /*
     * Gets or sets the blockchain validator nodes Sku.
     */
    @JsonProperty(value = "validatorNodesSku")
    private BlockchainMemberNodesSku validatorNodesSku;

    /*
     * Gets or sets the blockchain member provision state.
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private BlockchainMemberProvisioningState provisioningState;

    /*
     * Gets the dns endpoint of the blockchain member.
     */
    @JsonProperty(value = "dns", access = JsonProperty.Access.WRITE_ONLY)
    private String dns;

    /*
     * Gets the auth user name of the blockchain member.
     */
    @JsonProperty(value = "userName", access = JsonProperty.Access.WRITE_ONLY)
    private String username;

    /*
     * Sets the basic auth password of the blockchain member.
     */
    @JsonProperty(value = "password")
    private String password;

    /*
     * Gets or sets the consortium for the blockchain member.
     */
    @JsonProperty(value = "consortium")
    private String consortium;

    /*
     * Gets the managed consortium management account address.
     */
    @JsonProperty(value = "consortiumManagementAccountAddress", access = JsonProperty.Access.WRITE_ONLY)
    private String consortiumManagementAccountAddress;

    /*
     * Sets the managed consortium management account password.
     */
    @JsonProperty(value = "consortiumManagementAccountPassword")
    private String consortiumManagementAccountPassword;

    /*
     * Gets the role of the member in the consortium.
     */
    @JsonProperty(value = "consortiumRole")
    private String consortiumRole;

    /*
     * Gets the display name of the member in the consortium.
     */
    @JsonProperty(value = "consortiumMemberDisplayName")
    private String consortiumMemberDisplayName;

    /*
     * Gets the Ethereum root contract address of the blockchain.
     */
    @JsonProperty(value = "rootContractAddress", access = JsonProperty.Access.WRITE_ONLY)
    private String rootContractAddress;

    /*
     * Gets the public key of the blockchain member (default transaction node).
     */
    @JsonProperty(value = "publicKey", access = JsonProperty.Access.WRITE_ONLY)
    private String publicKey;

    /*
     * Gets or sets firewall rules
     */
    @JsonProperty(value = "firewallRules")
    private List<FirewallRule> firewallRules;

    /**
     * Get the protocol property: Gets or sets the blockchain protocol.
     *
     * @return the protocol value.
     */
    public BlockchainProtocol protocol() {
        return this.protocol;
    }

    /**
     * Set the protocol property: Gets or sets the blockchain protocol.
     *
     * @param protocol the protocol value to set.
     * @return the BlockchainMemberProperties object itself.
     */
    public BlockchainMemberProperties withProtocol(BlockchainProtocol protocol) {
        this.protocol = protocol;
        return this;
    }

    /**
     * Get the validatorNodesSku property: Gets or sets the blockchain validator nodes Sku.
     *
     * @return the validatorNodesSku value.
     */
    public BlockchainMemberNodesSku validatorNodesSku() {
        return this.validatorNodesSku;
    }

    /**
     * Set the validatorNodesSku property: Gets or sets the blockchain validator nodes Sku.
     *
     * @param validatorNodesSku the validatorNodesSku value to set.
     * @return the BlockchainMemberProperties object itself.
     */
    public BlockchainMemberProperties withValidatorNodesSku(BlockchainMemberNodesSku validatorNodesSku) {
        this.validatorNodesSku = validatorNodesSku;
        return this;
    }

    /**
     * Get the provisioningState property: Gets or sets the blockchain member provision state.
     *
     * @return the provisioningState value.
     */
    public BlockchainMemberProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the dns property: Gets the dns endpoint of the blockchain member.
     *
     * @return the dns value.
     */
    public String dns() {
        return this.dns;
    }

    /**
     * Get the username property: Gets the auth user name of the blockchain member.
     *
     * @return the username value.
     */
    public String username() {
        return this.username;
    }

    /**
     * Get the password property: Sets the basic auth password of the blockchain member.
     *
     * @return the password value.
     */
    public String password() {
        return this.password;
    }

    /**
     * Set the password property: Sets the basic auth password of the blockchain member.
     *
     * @param password the password value to set.
     * @return the BlockchainMemberProperties object itself.
     */
    public BlockchainMemberProperties withPassword(String password) {
        this.password = password;
        return this;
    }

    /**
     * Get the consortium property: Gets or sets the consortium for the blockchain member.
     *
     * @return the consortium value.
     */
    public String consortium() {
        return this.consortium;
    }

    /**
     * Set the consortium property: Gets or sets the consortium for the blockchain member.
     *
     * @param consortium the consortium value to set.
     * @return the BlockchainMemberProperties object itself.
     */
    public BlockchainMemberProperties withConsortium(String consortium) {
        this.consortium = consortium;
        return this;
    }

    /**
     * Get the consortiumManagementAccountAddress property: Gets the managed consortium management account address.
     *
     * @return the consortiumManagementAccountAddress value.
     */
    public String consortiumManagementAccountAddress() {
        return this.consortiumManagementAccountAddress;
    }

    /**
     * Get the consortiumManagementAccountPassword property: Sets the managed consortium management account password.
     *
     * @return the consortiumManagementAccountPassword value.
     */
    public String consortiumManagementAccountPassword() {
        return this.consortiumManagementAccountPassword;
    }

    /**
     * Set the consortiumManagementAccountPassword property: Sets the managed consortium management account password.
     *
     * @param consortiumManagementAccountPassword the consortiumManagementAccountPassword value to set.
     * @return the BlockchainMemberProperties object itself.
     */
    public BlockchainMemberProperties withConsortiumManagementAccountPassword(
        String consortiumManagementAccountPassword) {
        this.consortiumManagementAccountPassword = consortiumManagementAccountPassword;
        return this;
    }

    /**
     * Get the consortiumRole property: Gets the role of the member in the consortium.
     *
     * @return the consortiumRole value.
     */
    public String consortiumRole() {
        return this.consortiumRole;
    }

    /**
     * Set the consortiumRole property: Gets the role of the member in the consortium.
     *
     * @param consortiumRole the consortiumRole value to set.
     * @return the BlockchainMemberProperties object itself.
     */
    public BlockchainMemberProperties withConsortiumRole(String consortiumRole) {
        this.consortiumRole = consortiumRole;
        return this;
    }

    /**
     * Get the consortiumMemberDisplayName property: Gets the display name of the member in the consortium.
     *
     * @return the consortiumMemberDisplayName value.
     */
    public String consortiumMemberDisplayName() {
        return this.consortiumMemberDisplayName;
    }

    /**
     * Set the consortiumMemberDisplayName property: Gets the display name of the member in the consortium.
     *
     * @param consortiumMemberDisplayName the consortiumMemberDisplayName value to set.
     * @return the BlockchainMemberProperties object itself.
     */
    public BlockchainMemberProperties withConsortiumMemberDisplayName(String consortiumMemberDisplayName) {
        this.consortiumMemberDisplayName = consortiumMemberDisplayName;
        return this;
    }

    /**
     * Get the rootContractAddress property: Gets the Ethereum root contract address of the blockchain.
     *
     * @return the rootContractAddress value.
     */
    public String rootContractAddress() {
        return this.rootContractAddress;
    }

    /**
     * Get the publicKey property: Gets the public key of the blockchain member (default transaction node).
     *
     * @return the publicKey value.
     */
    public String publicKey() {
        return this.publicKey;
    }

    /**
     * Get the firewallRules property: Gets or sets firewall rules.
     *
     * @return the firewallRules value.
     */
    public List<FirewallRule> firewallRules() {
        return this.firewallRules;
    }

    /**
     * Set the firewallRules property: Gets or sets firewall rules.
     *
     * @param firewallRules the firewallRules value to set.
     * @return the BlockchainMemberProperties object itself.
     */
    public BlockchainMemberProperties withFirewallRules(List<FirewallRule> firewallRules) {
        this.firewallRules = firewallRules;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (validatorNodesSku() != null) {
            validatorNodesSku().validate();
        }
        if (firewallRules() != null) {
            firewallRules().forEach(e -> e.validate());
        }
    }
}
