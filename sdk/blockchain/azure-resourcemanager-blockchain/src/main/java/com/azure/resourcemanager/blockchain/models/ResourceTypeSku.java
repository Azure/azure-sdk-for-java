// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.blockchain.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** Resource type Sku. */
@Fluent
public final class ResourceTypeSku {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(ResourceTypeSku.class);

    /*
     * Gets or sets the resource type
     */
    @JsonProperty(value = "resourceType")
    private String resourceType;

    /*
     * Gets or sets the Skus
     */
    @JsonProperty(value = "skus")
    private List<SkuSetting> skus;

    /**
     * Get the resourceType property: Gets or sets the resource type.
     *
     * @return the resourceType value.
     */
    public String resourceType() {
        return this.resourceType;
    }

    /**
     * Set the resourceType property: Gets or sets the resource type.
     *
     * @param resourceType the resourceType value to set.
     * @return the ResourceTypeSku object itself.
     */
    public ResourceTypeSku withResourceType(String resourceType) {
        this.resourceType = resourceType;
        return this;
    }

    /**
     * Get the skus property: Gets or sets the Skus.
     *
     * @return the skus value.
     */
    public List<SkuSetting> skus() {
        return this.skus;
    }

    /**
     * Set the skus property: Gets or sets the Skus.
     *
     * @param skus the skus value to set.
     * @return the ResourceTypeSku object itself.
     */
    public ResourceTypeSku withSkus(List<SkuSetting> skus) {
        this.skus = skus;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (skus() != null) {
            skus().forEach(e -> e.validate());
        }
    }
}
