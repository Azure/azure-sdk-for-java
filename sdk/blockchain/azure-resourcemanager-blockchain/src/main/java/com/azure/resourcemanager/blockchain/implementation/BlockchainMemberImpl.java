// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.blockchain.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.management.Region;
import com.azure.core.util.Context;
import com.azure.resourcemanager.blockchain.BlockchainManager;
import com.azure.resourcemanager.blockchain.fluent.models.BlockchainMemberInner;
import com.azure.resourcemanager.blockchain.models.ApiKey;
import com.azure.resourcemanager.blockchain.models.ApiKeyCollection;
import com.azure.resourcemanager.blockchain.models.BlockchainMember;
import com.azure.resourcemanager.blockchain.models.BlockchainMemberNodesSku;
import com.azure.resourcemanager.blockchain.models.BlockchainMemberProvisioningState;
import com.azure.resourcemanager.blockchain.models.BlockchainMemberUpdate;
import com.azure.resourcemanager.blockchain.models.BlockchainProtocol;
import com.azure.resourcemanager.blockchain.models.FirewallRule;
import com.azure.resourcemanager.blockchain.models.Sku;
import java.util.Collections;
import java.util.List;
import java.util.Map;

public final class BlockchainMemberImpl
    implements BlockchainMember, BlockchainMember.Definition, BlockchainMember.Update {
    private BlockchainMemberInner innerObject;

    private final BlockchainManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public Sku sku() {
        return this.innerModel().sku();
    }

    public BlockchainProtocol protocol() {
        return this.innerModel().protocol();
    }

    public BlockchainMemberNodesSku validatorNodesSku() {
        return this.innerModel().validatorNodesSku();
    }

    public BlockchainMemberProvisioningState provisioningState() {
        return this.innerModel().provisioningState();
    }

    public String dns() {
        return this.innerModel().dns();
    }

    public String username() {
        return this.innerModel().username();
    }

    public String password() {
        return this.innerModel().password();
    }

    public String consortium() {
        return this.innerModel().consortium();
    }

    public String consortiumManagementAccountAddress() {
        return this.innerModel().consortiumManagementAccountAddress();
    }

    public String consortiumManagementAccountPassword() {
        return this.innerModel().consortiumManagementAccountPassword();
    }

    public String consortiumRole() {
        return this.innerModel().consortiumRole();
    }

    public String consortiumMemberDisplayName() {
        return this.innerModel().consortiumMemberDisplayName();
    }

    public String rootContractAddress() {
        return this.innerModel().rootContractAddress();
    }

    public String publicKey() {
        return this.innerModel().publicKey();
    }

    public List<FirewallRule> firewallRules() {
        List<FirewallRule> inner = this.innerModel().firewallRules();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public BlockchainMemberInner innerModel() {
        return this.innerObject;
    }

    private BlockchainManager manager() {
        return this.serviceManager;
    }

    private String blockchainMemberName;

    private String resourceGroupName;

    private BlockchainMemberUpdate updateBlockchainMember;

    public BlockchainMemberImpl withExistingResourceGroup(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public BlockchainMember create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getBlockchainMembers()
                .create(blockchainMemberName, resourceGroupName, this.innerModel(), Context.NONE);
        return this;
    }

    public BlockchainMember create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getBlockchainMembers()
                .create(blockchainMemberName, resourceGroupName, this.innerModel(), context);
        return this;
    }

    BlockchainMemberImpl(String name, BlockchainManager serviceManager) {
        this.innerObject = new BlockchainMemberInner();
        this.serviceManager = serviceManager;
        this.blockchainMemberName = name;
    }

    public BlockchainMemberImpl update() {
        this.updateBlockchainMember = new BlockchainMemberUpdate();
        return this;
    }

    public BlockchainMember apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getBlockchainMembers()
                .updateWithResponse(blockchainMemberName, resourceGroupName, updateBlockchainMember, Context.NONE)
                .getValue();
        return this;
    }

    public BlockchainMember apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getBlockchainMembers()
                .updateWithResponse(blockchainMemberName, resourceGroupName, updateBlockchainMember, context)
                .getValue();
        return this;
    }

    BlockchainMemberImpl(BlockchainMemberInner innerObject, BlockchainManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.blockchainMemberName = Utils.getValueFromIdByName(innerObject.id(), "blockchainMembers");
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
    }

    public BlockchainMember refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getBlockchainMembers()
                .getByResourceGroupWithResponse(resourceGroupName, blockchainMemberName, Context.NONE)
                .getValue();
        return this;
    }

    public BlockchainMember refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getBlockchainMembers()
                .getByResourceGroupWithResponse(resourceGroupName, blockchainMemberName, context)
                .getValue();
        return this;
    }

    public ApiKeyCollection listApiKeys() {
        return serviceManager.blockchainMembers().listApiKeys(blockchainMemberName, resourceGroupName);
    }

    public Response<ApiKeyCollection> listApiKeysWithResponse(Context context) {
        return serviceManager
            .blockchainMembers()
            .listApiKeysWithResponse(blockchainMemberName, resourceGroupName, context);
    }

    public ApiKeyCollection listRegenerateApiKeys() {
        return serviceManager.blockchainMembers().listRegenerateApiKeys(blockchainMemberName, resourceGroupName);
    }

    public Response<ApiKeyCollection> listRegenerateApiKeysWithResponse(ApiKey apiKey, Context context) {
        return serviceManager
            .blockchainMembers()
            .listRegenerateApiKeysWithResponse(blockchainMemberName, resourceGroupName, apiKey, context);
    }

    public BlockchainMemberImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public BlockchainMemberImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public BlockchainMemberImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateBlockchainMember.withTags(tags);
            return this;
        }
    }

    public BlockchainMemberImpl withSku(Sku sku) {
        this.innerModel().withSku(sku);
        return this;
    }

    public BlockchainMemberImpl withProtocol(BlockchainProtocol protocol) {
        this.innerModel().withProtocol(protocol);
        return this;
    }

    public BlockchainMemberImpl withValidatorNodesSku(BlockchainMemberNodesSku validatorNodesSku) {
        this.innerModel().withValidatorNodesSku(validatorNodesSku);
        return this;
    }

    public BlockchainMemberImpl withPassword(String password) {
        if (isInCreateMode()) {
            this.innerModel().withPassword(password);
            return this;
        } else {
            this.updateBlockchainMember.withPassword(password);
            return this;
        }
    }

    public BlockchainMemberImpl withConsortium(String consortium) {
        this.innerModel().withConsortium(consortium);
        return this;
    }

    public BlockchainMemberImpl withConsortiumManagementAccountPassword(String consortiumManagementAccountPassword) {
        if (isInCreateMode()) {
            this.innerModel().withConsortiumManagementAccountPassword(consortiumManagementAccountPassword);
            return this;
        } else {
            this.updateBlockchainMember.withConsortiumManagementAccountPassword(consortiumManagementAccountPassword);
            return this;
        }
    }

    public BlockchainMemberImpl withConsortiumRole(String consortiumRole) {
        this.innerModel().withConsortiumRole(consortiumRole);
        return this;
    }

    public BlockchainMemberImpl withConsortiumMemberDisplayName(String consortiumMemberDisplayName) {
        this.innerModel().withConsortiumMemberDisplayName(consortiumMemberDisplayName);
        return this;
    }

    public BlockchainMemberImpl withFirewallRules(List<FirewallRule> firewallRules) {
        if (isInCreateMode()) {
            this.innerModel().withFirewallRules(firewallRules);
            return this;
        } else {
            this.updateBlockchainMember.withFirewallRules(firewallRules);
            return this;
        }
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
