// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.blockchain.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.Resource;
import com.azure.resourcemanager.blockchain.models.BlockchainMemberNodesSku;
import com.azure.resourcemanager.blockchain.models.BlockchainMemberProvisioningState;
import com.azure.resourcemanager.blockchain.models.BlockchainProtocol;
import com.azure.resourcemanager.blockchain.models.FirewallRule;
import com.azure.resourcemanager.blockchain.models.Sku;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;
import java.util.Map;

/** Payload of the blockchain member which is exposed in the request/response of the resource provider. */
@Fluent
public final class BlockchainMemberInner extends Resource {
    /*
     * Gets or sets the blockchain member properties.
     */
    @JsonProperty(value = "properties")
    private BlockchainMemberProperties innerProperties;

    /*
     * Gets or sets the blockchain member Sku.
     */
    @JsonProperty(value = "sku")
    private Sku sku;

    /**
     * Get the innerProperties property: Gets or sets the blockchain member properties.
     *
     * @return the innerProperties value.
     */
    private BlockchainMemberProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the sku property: Gets or sets the blockchain member Sku.
     *
     * @return the sku value.
     */
    public Sku sku() {
        return this.sku;
    }

    /**
     * Set the sku property: Gets or sets the blockchain member Sku.
     *
     * @param sku the sku value to set.
     * @return the BlockchainMemberInner object itself.
     */
    public BlockchainMemberInner withSku(Sku sku) {
        this.sku = sku;
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public BlockchainMemberInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public BlockchainMemberInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Get the protocol property: Gets or sets the blockchain protocol.
     *
     * @return the protocol value.
     */
    public BlockchainProtocol protocol() {
        return this.innerProperties() == null ? null : this.innerProperties().protocol();
    }

    /**
     * Set the protocol property: Gets or sets the blockchain protocol.
     *
     * @param protocol the protocol value to set.
     * @return the BlockchainMemberInner object itself.
     */
    public BlockchainMemberInner withProtocol(BlockchainProtocol protocol) {
        if (this.innerProperties() == null) {
            this.innerProperties = new BlockchainMemberProperties();
        }
        this.innerProperties().withProtocol(protocol);
        return this;
    }

    /**
     * Get the validatorNodesSku property: Gets or sets the blockchain validator nodes Sku.
     *
     * @return the validatorNodesSku value.
     */
    public BlockchainMemberNodesSku validatorNodesSku() {
        return this.innerProperties() == null ? null : this.innerProperties().validatorNodesSku();
    }

    /**
     * Set the validatorNodesSku property: Gets or sets the blockchain validator nodes Sku.
     *
     * @param validatorNodesSku the validatorNodesSku value to set.
     * @return the BlockchainMemberInner object itself.
     */
    public BlockchainMemberInner withValidatorNodesSku(BlockchainMemberNodesSku validatorNodesSku) {
        if (this.innerProperties() == null) {
            this.innerProperties = new BlockchainMemberProperties();
        }
        this.innerProperties().withValidatorNodesSku(validatorNodesSku);
        return this;
    }

    /**
     * Get the provisioningState property: Gets or sets the blockchain member provision state.
     *
     * @return the provisioningState value.
     */
    public BlockchainMemberProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Get the dns property: Gets the dns endpoint of the blockchain member.
     *
     * @return the dns value.
     */
    public String dns() {
        return this.innerProperties() == null ? null : this.innerProperties().dns();
    }

    /**
     * Get the username property: Gets the auth user name of the blockchain member.
     *
     * @return the username value.
     */
    public String username() {
        return this.innerProperties() == null ? null : this.innerProperties().username();
    }

    /**
     * Get the password property: Sets the basic auth password of the blockchain member.
     *
     * @return the password value.
     */
    public String password() {
        return this.innerProperties() == null ? null : this.innerProperties().password();
    }

    /**
     * Set the password property: Sets the basic auth password of the blockchain member.
     *
     * @param password the password value to set.
     * @return the BlockchainMemberInner object itself.
     */
    public BlockchainMemberInner withPassword(String password) {
        if (this.innerProperties() == null) {
            this.innerProperties = new BlockchainMemberProperties();
        }
        this.innerProperties().withPassword(password);
        return this;
    }

    /**
     * Get the consortium property: Gets or sets the consortium for the blockchain member.
     *
     * @return the consortium value.
     */
    public String consortium() {
        return this.innerProperties() == null ? null : this.innerProperties().consortium();
    }

    /**
     * Set the consortium property: Gets or sets the consortium for the blockchain member.
     *
     * @param consortium the consortium value to set.
     * @return the BlockchainMemberInner object itself.
     */
    public BlockchainMemberInner withConsortium(String consortium) {
        if (this.innerProperties() == null) {
            this.innerProperties = new BlockchainMemberProperties();
        }
        this.innerProperties().withConsortium(consortium);
        return this;
    }

    /**
     * Get the consortiumManagementAccountAddress property: Gets the managed consortium management account address.
     *
     * @return the consortiumManagementAccountAddress value.
     */
    public String consortiumManagementAccountAddress() {
        return this.innerProperties() == null ? null : this.innerProperties().consortiumManagementAccountAddress();
    }

    /**
     * Get the consortiumManagementAccountPassword property: Sets the managed consortium management account password.
     *
     * @return the consortiumManagementAccountPassword value.
     */
    public String consortiumManagementAccountPassword() {
        return this.innerProperties() == null ? null : this.innerProperties().consortiumManagementAccountPassword();
    }

    /**
     * Set the consortiumManagementAccountPassword property: Sets the managed consortium management account password.
     *
     * @param consortiumManagementAccountPassword the consortiumManagementAccountPassword value to set.
     * @return the BlockchainMemberInner object itself.
     */
    public BlockchainMemberInner withConsortiumManagementAccountPassword(String consortiumManagementAccountPassword) {
        if (this.innerProperties() == null) {
            this.innerProperties = new BlockchainMemberProperties();
        }
        this.innerProperties().withConsortiumManagementAccountPassword(consortiumManagementAccountPassword);
        return this;
    }

    /**
     * Get the consortiumRole property: Gets the role of the member in the consortium.
     *
     * @return the consortiumRole value.
     */
    public String consortiumRole() {
        return this.innerProperties() == null ? null : this.innerProperties().consortiumRole();
    }

    /**
     * Set the consortiumRole property: Gets the role of the member in the consortium.
     *
     * @param consortiumRole the consortiumRole value to set.
     * @return the BlockchainMemberInner object itself.
     */
    public BlockchainMemberInner withConsortiumRole(String consortiumRole) {
        if (this.innerProperties() == null) {
            this.innerProperties = new BlockchainMemberProperties();
        }
        this.innerProperties().withConsortiumRole(consortiumRole);
        return this;
    }

    /**
     * Get the consortiumMemberDisplayName property: Gets the display name of the member in the consortium.
     *
     * @return the consortiumMemberDisplayName value.
     */
    public String consortiumMemberDisplayName() {
        return this.innerProperties() == null ? null : this.innerProperties().consortiumMemberDisplayName();
    }

    /**
     * Set the consortiumMemberDisplayName property: Gets the display name of the member in the consortium.
     *
     * @param consortiumMemberDisplayName the consortiumMemberDisplayName value to set.
     * @return the BlockchainMemberInner object itself.
     */
    public BlockchainMemberInner withConsortiumMemberDisplayName(String consortiumMemberDisplayName) {
        if (this.innerProperties() == null) {
            this.innerProperties = new BlockchainMemberProperties();
        }
        this.innerProperties().withConsortiumMemberDisplayName(consortiumMemberDisplayName);
        return this;
    }

    /**
     * Get the rootContractAddress property: Gets the Ethereum root contract address of the blockchain.
     *
     * @return the rootContractAddress value.
     */
    public String rootContractAddress() {
        return this.innerProperties() == null ? null : this.innerProperties().rootContractAddress();
    }

    /**
     * Get the publicKey property: Gets the public key of the blockchain member (default transaction node).
     *
     * @return the publicKey value.
     */
    public String publicKey() {
        return this.innerProperties() == null ? null : this.innerProperties().publicKey();
    }

    /**
     * Get the firewallRules property: Gets or sets firewall rules.
     *
     * @return the firewallRules value.
     */
    public List<FirewallRule> firewallRules() {
        return this.innerProperties() == null ? null : this.innerProperties().firewallRules();
    }

    /**
     * Set the firewallRules property: Gets or sets firewall rules.
     *
     * @param firewallRules the firewallRules value to set.
     * @return the BlockchainMemberInner object itself.
     */
    public BlockchainMemberInner withFirewallRules(List<FirewallRule> firewallRules) {
        if (this.innerProperties() == null) {
            this.innerProperties = new BlockchainMemberProperties();
        }
        this.innerProperties().withFirewallRules(firewallRules);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
        if (sku() != null) {
            sku().validate();
        }
    }
}
