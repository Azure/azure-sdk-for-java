// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.blockchain.models;

import com.azure.core.http.rest.Response;
import com.azure.core.management.Region;
import com.azure.core.util.Context;
import com.azure.resourcemanager.blockchain.fluent.models.TransactionNodeInner;
import java.util.List;

/** An immutable client-side representation of TransactionNode. */
public interface TransactionNode {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     *
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     *
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     *
     * @return the type value.
     */
    String type();

    /**
     * Gets the location property: Gets or sets the transaction node location.
     *
     * @return the location value.
     */
    String location();

    /**
     * Gets the provisioningState property: Gets or sets the blockchain member provision state.
     *
     * @return the provisioningState value.
     */
    NodeProvisioningState provisioningState();

    /**
     * Gets the dns property: Gets or sets the transaction node dns endpoint.
     *
     * @return the dns value.
     */
    String dns();

    /**
     * Gets the publicKey property: Gets or sets the transaction node public key.
     *
     * @return the publicKey value.
     */
    String publicKey();

    /**
     * Gets the username property: Gets or sets the transaction node dns endpoint basic auth user name.
     *
     * @return the username value.
     */
    String username();

    /**
     * Gets the password property: Sets the transaction node dns endpoint basic auth password.
     *
     * @return the password value.
     */
    String password();

    /**
     * Gets the firewallRules property: Gets or sets the firewall rules.
     *
     * @return the firewallRules value.
     */
    List<FirewallRule> firewallRules();

    /**
     * Gets the region of the resource.
     *
     * @return the region of the resource.
     */
    Region region();

    /**
     * Gets the name of the resource region.
     *
     * @return the name of the resource region.
     */
    String regionName();

    /**
     * Gets the inner com.azure.resourcemanager.blockchain.fluent.models.TransactionNodeInner object.
     *
     * @return the inner object.
     */
    TransactionNodeInner innerModel();

    /** The entirety of the TransactionNode definition. */
    interface Definition
        extends DefinitionStages.Blank, DefinitionStages.WithParentResource, DefinitionStages.WithCreate {
    }
    /** The TransactionNode definition stages. */
    interface DefinitionStages {
        /** The first stage of the TransactionNode definition. */
        interface Blank extends WithParentResource {
        }
        /** The stage of the TransactionNode definition allowing to specify parent resource. */
        interface WithParentResource {
            /**
             * Specifies blockchainMemberName, resourceGroupName.
             *
             * @param blockchainMemberName Blockchain member name.
             * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this
             *     value from the Azure Resource Manager API or the portal.
             * @return the next definition stage.
             */
            WithCreate withExistingBlockchainMember(String blockchainMemberName, String resourceGroupName);
        }
        /**
         * The stage of the TransactionNode definition which contains all the minimum required properties for the
         * resource to be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate
            extends DefinitionStages.WithLocation, DefinitionStages.WithPassword, DefinitionStages.WithFirewallRules {
            /**
             * Executes the create request.
             *
             * @return the created resource.
             */
            TransactionNode create();

            /**
             * Executes the create request.
             *
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            TransactionNode create(Context context);
        }
        /** The stage of the TransactionNode definition allowing to specify location. */
        interface WithLocation {
            /**
             * Specifies the region for the resource.
             *
             * @param location Gets or sets the transaction node location.
             * @return the next definition stage.
             */
            WithCreate withRegion(Region location);

            /**
             * Specifies the region for the resource.
             *
             * @param location Gets or sets the transaction node location.
             * @return the next definition stage.
             */
            WithCreate withRegion(String location);
        }
        /** The stage of the TransactionNode definition allowing to specify password. */
        interface WithPassword {
            /**
             * Specifies the password property: Sets the transaction node dns endpoint basic auth password..
             *
             * @param password Sets the transaction node dns endpoint basic auth password.
             * @return the next definition stage.
             */
            WithCreate withPassword(String password);
        }
        /** The stage of the TransactionNode definition allowing to specify firewallRules. */
        interface WithFirewallRules {
            /**
             * Specifies the firewallRules property: Gets or sets the firewall rules..
             *
             * @param firewallRules Gets or sets the firewall rules.
             * @return the next definition stage.
             */
            WithCreate withFirewallRules(List<FirewallRule> firewallRules);
        }
    }
    /**
     * Begins update for the TransactionNode resource.
     *
     * @return the stage of resource update.
     */
    TransactionNode.Update update();

    /** The template for TransactionNode update. */
    interface Update extends UpdateStages.WithPassword, UpdateStages.WithFirewallRules {
        /**
         * Executes the update request.
         *
         * @return the updated resource.
         */
        TransactionNode apply();

        /**
         * Executes the update request.
         *
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        TransactionNode apply(Context context);
    }
    /** The TransactionNode update stages. */
    interface UpdateStages {
        /** The stage of the TransactionNode update allowing to specify password. */
        interface WithPassword {
            /**
             * Specifies the password property: Sets the transaction node dns endpoint basic auth password..
             *
             * @param password Sets the transaction node dns endpoint basic auth password.
             * @return the next definition stage.
             */
            Update withPassword(String password);
        }
        /** The stage of the TransactionNode update allowing to specify firewallRules. */
        interface WithFirewallRules {
            /**
             * Specifies the firewallRules property: Gets or sets the firewall rules..
             *
             * @param firewallRules Gets or sets the firewall rules.
             * @return the next definition stage.
             */
            Update withFirewallRules(List<FirewallRule> firewallRules);
        }
    }
    /**
     * Refreshes the resource to sync with Azure.
     *
     * @return the refreshed resource.
     */
    TransactionNode refresh();

    /**
     * Refreshes the resource to sync with Azure.
     *
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    TransactionNode refresh(Context context);

    /**
     * List the API keys for the transaction node.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of the API key payload which is exposed in the response of the resource provider.
     */
    ApiKeyCollection listApiKeys();

    /**
     * List the API keys for the transaction node.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of the API key payload which is exposed in the response of the resource provider.
     */
    Response<ApiKeyCollection> listApiKeysWithResponse(Context context);

    /**
     * Regenerate the API keys for the blockchain member.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of the API key payload which is exposed in the response of the resource provider.
     */
    ApiKeyCollection listRegenerateApiKeys();

    /**
     * Regenerate the API keys for the blockchain member.
     *
     * @param apiKey api key to be regenerated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of the API key payload which is exposed in the response of the resource provider.
     */
    Response<ApiKeyCollection> listRegenerateApiKeysWithResponse(ApiKey apiKey, Context context);
}
