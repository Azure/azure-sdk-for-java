// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.blockchain.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.blockchain.fluent.models.ApiKeyCollectionInner;
import com.azure.resourcemanager.blockchain.fluent.models.TransactionNodeInner;
import com.azure.resourcemanager.blockchain.models.ApiKey;
import com.azure.resourcemanager.blockchain.models.TransactionNodeUpdate;

/** An instance of this class provides access to all the operations defined in TransactionNodesClient. */
public interface TransactionNodesClient {
    /**
     * Get the details of the transaction node.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param transactionNodeName Transaction node name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the details of the transaction node.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    TransactionNodeInner get(String blockchainMemberName, String transactionNodeName, String resourceGroupName);

    /**
     * Get the details of the transaction node.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param transactionNodeName Transaction node name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the details of the transaction node.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<TransactionNodeInner> getWithResponse(
        String blockchainMemberName, String transactionNodeName, String resourceGroupName, Context context);

    /**
     * Create or update the transaction node.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param transactionNodeName Transaction node name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @param transactionNode Payload to create the transaction node.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return payload of the transaction node which is the request/response of the resource provider.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SyncPoller<PollResult<TransactionNodeInner>, TransactionNodeInner> beginCreate(
        String blockchainMemberName,
        String transactionNodeName,
        String resourceGroupName,
        TransactionNodeInner transactionNode);

    /**
     * Create or update the transaction node.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param transactionNodeName Transaction node name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @param transactionNode Payload to create the transaction node.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return payload of the transaction node which is the request/response of the resource provider.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SyncPoller<PollResult<TransactionNodeInner>, TransactionNodeInner> beginCreate(
        String blockchainMemberName,
        String transactionNodeName,
        String resourceGroupName,
        TransactionNodeInner transactionNode,
        Context context);

    /**
     * Create or update the transaction node.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param transactionNodeName Transaction node name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @param transactionNode Payload to create the transaction node.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return payload of the transaction node which is the request/response of the resource provider.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    TransactionNodeInner create(
        String blockchainMemberName,
        String transactionNodeName,
        String resourceGroupName,
        TransactionNodeInner transactionNode);

    /**
     * Create or update the transaction node.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param transactionNodeName Transaction node name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return payload of the transaction node which is the request/response of the resource provider.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    TransactionNodeInner create(String blockchainMemberName, String transactionNodeName, String resourceGroupName);

    /**
     * Create or update the transaction node.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param transactionNodeName Transaction node name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @param transactionNode Payload to create the transaction node.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return payload of the transaction node which is the request/response of the resource provider.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    TransactionNodeInner create(
        String blockchainMemberName,
        String transactionNodeName,
        String resourceGroupName,
        TransactionNodeInner transactionNode,
        Context context);

    /**
     * Delete the transaction node.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param transactionNodeName Transaction node name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SyncPoller<PollResult<Void>, Void> beginDelete(
        String blockchainMemberName, String transactionNodeName, String resourceGroupName);

    /**
     * Delete the transaction node.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param transactionNodeName Transaction node name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SyncPoller<PollResult<Void>, Void> beginDelete(
        String blockchainMemberName, String transactionNodeName, String resourceGroupName, Context context);

    /**
     * Delete the transaction node.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param transactionNodeName Transaction node name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String blockchainMemberName, String transactionNodeName, String resourceGroupName);

    /**
     * Delete the transaction node.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param transactionNodeName Transaction node name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String blockchainMemberName, String transactionNodeName, String resourceGroupName, Context context);

    /**
     * Update the transaction node.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param transactionNodeName Transaction node name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return payload of the transaction node which is the request/response of the resource provider.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    TransactionNodeInner update(String blockchainMemberName, String transactionNodeName, String resourceGroupName);

    /**
     * Update the transaction node.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param transactionNodeName Transaction node name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @param transactionNode Payload to create the transaction node.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return payload of the transaction node which is the request/response of the resource provider.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<TransactionNodeInner> updateWithResponse(
        String blockchainMemberName,
        String transactionNodeName,
        String resourceGroupName,
        TransactionNodeUpdate transactionNode,
        Context context);

    /**
     * Lists the transaction nodes for a blockchain member.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of transaction node payload which is exposed in the request/response of the resource provider.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<TransactionNodeInner> list(String blockchainMemberName, String resourceGroupName);

    /**
     * Lists the transaction nodes for a blockchain member.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of transaction node payload which is exposed in the request/response of the resource provider.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<TransactionNodeInner> list(String blockchainMemberName, String resourceGroupName, Context context);

    /**
     * List the API keys for the transaction node.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param transactionNodeName Transaction node name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of the API key payload which is exposed in the response of the resource provider.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ApiKeyCollectionInner listApiKeys(
        String blockchainMemberName, String transactionNodeName, String resourceGroupName);

    /**
     * List the API keys for the transaction node.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param transactionNodeName Transaction node name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of the API key payload which is exposed in the response of the resource provider.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<ApiKeyCollectionInner> listApiKeysWithResponse(
        String blockchainMemberName, String transactionNodeName, String resourceGroupName, Context context);

    /**
     * Regenerate the API keys for the blockchain member.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param transactionNodeName Transaction node name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of the API key payload which is exposed in the response of the resource provider.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ApiKeyCollectionInner listRegenerateApiKeys(
        String blockchainMemberName, String transactionNodeName, String resourceGroupName);

    /**
     * Regenerate the API keys for the blockchain member.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param transactionNodeName Transaction node name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @param apiKey api key to be regenerated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of the API key payload which is exposed in the response of the resource provider.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<ApiKeyCollectionInner> listRegenerateApiKeysWithResponse(
        String blockchainMemberName,
        String transactionNodeName,
        String resourceGroupName,
        ApiKey apiKey,
        Context context);
}
