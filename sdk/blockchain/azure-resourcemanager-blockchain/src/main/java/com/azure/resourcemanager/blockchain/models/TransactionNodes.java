// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.blockchain.models;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;

/** Resource collection API of TransactionNodes. */
public interface TransactionNodes {
    /**
     * Get the details of the transaction node.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param transactionNodeName Transaction node name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the details of the transaction node.
     */
    TransactionNode get(String blockchainMemberName, String transactionNodeName, String resourceGroupName);

    /**
     * Get the details of the transaction node.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param transactionNodeName Transaction node name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the details of the transaction node.
     */
    Response<TransactionNode> getWithResponse(
        String blockchainMemberName, String transactionNodeName, String resourceGroupName, Context context);

    /**
     * Delete the transaction node.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param transactionNodeName Transaction node name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void delete(String blockchainMemberName, String transactionNodeName, String resourceGroupName);

    /**
     * Delete the transaction node.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param transactionNodeName Transaction node name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void delete(String blockchainMemberName, String transactionNodeName, String resourceGroupName, Context context);

    /**
     * Lists the transaction nodes for a blockchain member.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of transaction node payload which is exposed in the request/response of the resource provider.
     */
    PagedIterable<TransactionNode> list(String blockchainMemberName, String resourceGroupName);

    /**
     * Lists the transaction nodes for a blockchain member.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of transaction node payload which is exposed in the request/response of the resource provider.
     */
    PagedIterable<TransactionNode> list(String blockchainMemberName, String resourceGroupName, Context context);

    /**
     * List the API keys for the transaction node.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param transactionNodeName Transaction node name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of the API key payload which is exposed in the response of the resource provider.
     */
    ApiKeyCollection listApiKeys(String blockchainMemberName, String transactionNodeName, String resourceGroupName);

    /**
     * List the API keys for the transaction node.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param transactionNodeName Transaction node name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of the API key payload which is exposed in the response of the resource provider.
     */
    Response<ApiKeyCollection> listApiKeysWithResponse(
        String blockchainMemberName, String transactionNodeName, String resourceGroupName, Context context);

    /**
     * Regenerate the API keys for the blockchain member.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param transactionNodeName Transaction node name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of the API key payload which is exposed in the response of the resource provider.
     */
    ApiKeyCollection listRegenerateApiKeys(
        String blockchainMemberName, String transactionNodeName, String resourceGroupName);

    /**
     * Regenerate the API keys for the blockchain member.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param transactionNodeName Transaction node name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @param apiKey api key to be regenerated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of the API key payload which is exposed in the response of the resource provider.
     */
    Response<ApiKeyCollection> listRegenerateApiKeysWithResponse(
        String blockchainMemberName,
        String transactionNodeName,
        String resourceGroupName,
        ApiKey apiKey,
        Context context);

    /**
     * Get the details of the transaction node.
     *
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the details of the transaction node.
     */
    TransactionNode getById(String id);

    /**
     * Get the details of the transaction node.
     *
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the details of the transaction node.
     */
    Response<TransactionNode> getByIdWithResponse(String id, Context context);

    /**
     * Delete the transaction node.
     *
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteById(String id);

    /**
     * Delete the transaction node.
     *
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteByIdWithResponse(String id, Context context);

    /**
     * Begins definition for a new TransactionNode resource.
     *
     * @param name resource name.
     * @return the first stage of the new TransactionNode definition.
     */
    TransactionNode.DefinitionStages.Blank define(String name);
}
