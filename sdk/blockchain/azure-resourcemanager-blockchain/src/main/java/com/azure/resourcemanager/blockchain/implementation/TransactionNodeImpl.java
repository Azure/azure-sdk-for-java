// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.blockchain.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.management.Region;
import com.azure.core.util.Context;
import com.azure.resourcemanager.blockchain.fluent.models.TransactionNodeInner;
import com.azure.resourcemanager.blockchain.models.ApiKey;
import com.azure.resourcemanager.blockchain.models.ApiKeyCollection;
import com.azure.resourcemanager.blockchain.models.FirewallRule;
import com.azure.resourcemanager.blockchain.models.NodeProvisioningState;
import com.azure.resourcemanager.blockchain.models.TransactionNode;
import com.azure.resourcemanager.blockchain.models.TransactionNodeUpdate;
import java.util.Collections;
import java.util.List;

public final class TransactionNodeImpl implements TransactionNode, TransactionNode.Definition, TransactionNode.Update {
    private TransactionNodeInner innerObject;

    private final com.azure.resourcemanager.blockchain.BlockchainManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public NodeProvisioningState provisioningState() {
        return this.innerModel().provisioningState();
    }

    public String dns() {
        return this.innerModel().dns();
    }

    public String publicKey() {
        return this.innerModel().publicKey();
    }

    public String username() {
        return this.innerModel().username();
    }

    public String password() {
        return this.innerModel().password();
    }

    public List<FirewallRule> firewallRules() {
        List<FirewallRule> inner = this.innerModel().firewallRules();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public TransactionNodeInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.blockchain.BlockchainManager manager() {
        return this.serviceManager;
    }

    private String blockchainMemberName;

    private String transactionNodeName;

    private String resourceGroupName;

    private TransactionNodeUpdate updateTransactionNode;

    public TransactionNodeImpl withExistingBlockchainMember(String blockchainMemberName, String resourceGroupName) {
        this.blockchainMemberName = blockchainMemberName;
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public TransactionNode create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getTransactionNodes()
                .create(blockchainMemberName, transactionNodeName, resourceGroupName, this.innerModel(), Context.NONE);
        return this;
    }

    public TransactionNode create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getTransactionNodes()
                .create(blockchainMemberName, transactionNodeName, resourceGroupName, this.innerModel(), context);
        return this;
    }

    TransactionNodeImpl(String name, com.azure.resourcemanager.blockchain.BlockchainManager serviceManager) {
        this.innerObject = new TransactionNodeInner();
        this.serviceManager = serviceManager;
        this.transactionNodeName = name;
    }

    public TransactionNodeImpl update() {
        this.updateTransactionNode = new TransactionNodeUpdate();
        return this;
    }

    public TransactionNode apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getTransactionNodes()
                .updateWithResponse(
                    blockchainMemberName, transactionNodeName, resourceGroupName, updateTransactionNode, Context.NONE)
                .getValue();
        return this;
    }

    public TransactionNode apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getTransactionNodes()
                .updateWithResponse(
                    blockchainMemberName, transactionNodeName, resourceGroupName, updateTransactionNode, context)
                .getValue();
        return this;
    }

    TransactionNodeImpl(
        TransactionNodeInner innerObject, com.azure.resourcemanager.blockchain.BlockchainManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.blockchainMemberName = Utils.getValueFromIdByName(innerObject.id(), "blockchainMembers");
        this.transactionNodeName = Utils.getValueFromIdByName(innerObject.id(), "transactionNodes");
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
    }

    public TransactionNode refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getTransactionNodes()
                .getWithResponse(blockchainMemberName, transactionNodeName, resourceGroupName, Context.NONE)
                .getValue();
        return this;
    }

    public TransactionNode refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getTransactionNodes()
                .getWithResponse(blockchainMemberName, transactionNodeName, resourceGroupName, context)
                .getValue();
        return this;
    }

    public ApiKeyCollection listApiKeys() {
        return serviceManager
            .transactionNodes()
            .listApiKeys(blockchainMemberName, transactionNodeName, resourceGroupName);
    }

    public Response<ApiKeyCollection> listApiKeysWithResponse(Context context) {
        return serviceManager
            .transactionNodes()
            .listApiKeysWithResponse(blockchainMemberName, transactionNodeName, resourceGroupName, context);
    }

    public ApiKeyCollection listRegenerateApiKeys() {
        return serviceManager
            .transactionNodes()
            .listRegenerateApiKeys(blockchainMemberName, transactionNodeName, resourceGroupName);
    }

    public Response<ApiKeyCollection> listRegenerateApiKeysWithResponse(ApiKey apiKey, Context context) {
        return serviceManager
            .transactionNodes()
            .listRegenerateApiKeysWithResponse(
                blockchainMemberName, transactionNodeName, resourceGroupName, apiKey, context);
    }

    public TransactionNodeImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public TransactionNodeImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public TransactionNodeImpl withPassword(String password) {
        if (isInCreateMode()) {
            this.innerModel().withPassword(password);
            return this;
        } else {
            this.updateTransactionNode.withPassword(password);
            return this;
        }
    }

    public TransactionNodeImpl withFirewallRules(List<FirewallRule> firewallRules) {
        if (isInCreateMode()) {
            this.innerModel().withFirewallRules(firewallRules);
            return this;
        } else {
            this.updateTransactionNode.withFirewallRules(firewallRules);
            return this;
        }
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
