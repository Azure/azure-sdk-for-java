// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.blockchain.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.JsonFlatten;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;
import java.util.Map;

/** Update the payload of the blockchain member which is exposed in the request/response of the resource provider. */
@JsonFlatten
@Fluent
public class BlockchainMemberUpdate {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(BlockchainMemberUpdate.class);

    /*
     * Tags of the service which is a list of key value pairs that describes
     * the resource.
     */
    @JsonProperty(value = "tags")
    private Map<String, String> tags;

    /*
     * Sets the transaction node dns endpoint basic auth password.
     */
    @JsonProperty(value = "properties.password")
    private String password;

    /*
     * Gets or sets the firewall rules.
     */
    @JsonProperty(value = "properties.firewallRules")
    private List<FirewallRule> firewallRules;

    /*
     * Sets the managed consortium management account password.
     */
    @JsonProperty(value = "properties.consortiumManagementAccountPassword")
    private String consortiumManagementAccountPassword;

    /**
     * Get the tags property: Tags of the service which is a list of key value pairs that describes the resource.
     *
     * @return the tags value.
     */
    public Map<String, String> tags() {
        return this.tags;
    }

    /**
     * Set the tags property: Tags of the service which is a list of key value pairs that describes the resource.
     *
     * @param tags the tags value to set.
     * @return the BlockchainMemberUpdate object itself.
     */
    public BlockchainMemberUpdate withTags(Map<String, String> tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Get the password property: Sets the transaction node dns endpoint basic auth password.
     *
     * @return the password value.
     */
    public String password() {
        return this.password;
    }

    /**
     * Set the password property: Sets the transaction node dns endpoint basic auth password.
     *
     * @param password the password value to set.
     * @return the BlockchainMemberUpdate object itself.
     */
    public BlockchainMemberUpdate withPassword(String password) {
        this.password = password;
        return this;
    }

    /**
     * Get the firewallRules property: Gets or sets the firewall rules.
     *
     * @return the firewallRules value.
     */
    public List<FirewallRule> firewallRules() {
        return this.firewallRules;
    }

    /**
     * Set the firewallRules property: Gets or sets the firewall rules.
     *
     * @param firewallRules the firewallRules value to set.
     * @return the BlockchainMemberUpdate object itself.
     */
    public BlockchainMemberUpdate withFirewallRules(List<FirewallRule> firewallRules) {
        this.firewallRules = firewallRules;
        return this;
    }

    /**
     * Get the consortiumManagementAccountPassword property: Sets the managed consortium management account password.
     *
     * @return the consortiumManagementAccountPassword value.
     */
    public String consortiumManagementAccountPassword() {
        return this.consortiumManagementAccountPassword;
    }

    /**
     * Set the consortiumManagementAccountPassword property: Sets the managed consortium management account password.
     *
     * @param consortiumManagementAccountPassword the consortiumManagementAccountPassword value to set.
     * @return the BlockchainMemberUpdate object itself.
     */
    public BlockchainMemberUpdate withConsortiumManagementAccountPassword(String consortiumManagementAccountPassword) {
        this.consortiumManagementAccountPassword = consortiumManagementAccountPassword;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (firewallRules() != null) {
            firewallRules().forEach(e -> e.validate());
        }
    }
}
