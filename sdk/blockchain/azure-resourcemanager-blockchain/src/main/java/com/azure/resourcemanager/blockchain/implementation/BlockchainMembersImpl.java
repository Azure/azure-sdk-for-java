// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.blockchain.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.blockchain.fluent.BlockchainMembersClient;
import com.azure.resourcemanager.blockchain.fluent.models.ApiKeyCollectionInner;
import com.azure.resourcemanager.blockchain.fluent.models.BlockchainMemberInner;
import com.azure.resourcemanager.blockchain.fluent.models.ConsortiumMemberInner;
import com.azure.resourcemanager.blockchain.models.ApiKey;
import com.azure.resourcemanager.blockchain.models.ApiKeyCollection;
import com.azure.resourcemanager.blockchain.models.BlockchainMember;
import com.azure.resourcemanager.blockchain.models.BlockchainMembers;
import com.azure.resourcemanager.blockchain.models.ConsortiumMember;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class BlockchainMembersImpl implements BlockchainMembers {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(BlockchainMembersImpl.class);

    private final BlockchainMembersClient innerClient;

    private final com.azure.resourcemanager.blockchain.BlockchainManager serviceManager;

    public BlockchainMembersImpl(
        BlockchainMembersClient innerClient, com.azure.resourcemanager.blockchain.BlockchainManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public BlockchainMember getByResourceGroup(String resourceGroupName, String blockchainMemberName) {
        BlockchainMemberInner inner = this.serviceClient().getByResourceGroup(resourceGroupName, blockchainMemberName);
        if (inner != null) {
            return new BlockchainMemberImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<BlockchainMember> getByResourceGroupWithResponse(
        String resourceGroupName, String blockchainMemberName, Context context) {
        Response<BlockchainMemberInner> inner =
            this.serviceClient().getByResourceGroupWithResponse(resourceGroupName, blockchainMemberName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new BlockchainMemberImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void deleteByResourceGroup(String resourceGroupName, String blockchainMemberName) {
        this.serviceClient().delete(resourceGroupName, blockchainMemberName);
    }

    public void delete(String resourceGroupName, String blockchainMemberName, Context context) {
        this.serviceClient().delete(resourceGroupName, blockchainMemberName, context);
    }

    public PagedIterable<BlockchainMember> listByResourceGroup(String resourceGroupName) {
        PagedIterable<BlockchainMemberInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName);
        return Utils.mapPage(inner, inner1 -> new BlockchainMemberImpl(inner1, this.manager()));
    }

    public PagedIterable<BlockchainMember> listByResourceGroup(String resourceGroupName, Context context) {
        PagedIterable<BlockchainMemberInner> inner =
            this.serviceClient().listByResourceGroup(resourceGroupName, context);
        return Utils.mapPage(inner, inner1 -> new BlockchainMemberImpl(inner1, this.manager()));
    }

    public PagedIterable<BlockchainMember> list() {
        PagedIterable<BlockchainMemberInner> inner = this.serviceClient().list();
        return Utils.mapPage(inner, inner1 -> new BlockchainMemberImpl(inner1, this.manager()));
    }

    public PagedIterable<BlockchainMember> list(Context context) {
        PagedIterable<BlockchainMemberInner> inner = this.serviceClient().list(context);
        return Utils.mapPage(inner, inner1 -> new BlockchainMemberImpl(inner1, this.manager()));
    }

    public PagedIterable<ConsortiumMember> listConsortiumMembers(
        String blockchainMemberName, String resourceGroupName) {
        PagedIterable<ConsortiumMemberInner> inner =
            this.serviceClient().listConsortiumMembers(blockchainMemberName, resourceGroupName);
        return Utils.mapPage(inner, inner1 -> new ConsortiumMemberImpl(inner1, this.manager()));
    }

    public PagedIterable<ConsortiumMember> listConsortiumMembers(
        String blockchainMemberName, String resourceGroupName, Context context) {
        PagedIterable<ConsortiumMemberInner> inner =
            this.serviceClient().listConsortiumMembers(blockchainMemberName, resourceGroupName, context);
        return Utils.mapPage(inner, inner1 -> new ConsortiumMemberImpl(inner1, this.manager()));
    }

    public ApiKeyCollection listApiKeys(String blockchainMemberName, String resourceGroupName) {
        ApiKeyCollectionInner inner = this.serviceClient().listApiKeys(blockchainMemberName, resourceGroupName);
        if (inner != null) {
            return new ApiKeyCollectionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ApiKeyCollection> listApiKeysWithResponse(
        String blockchainMemberName, String resourceGroupName, Context context) {
        Response<ApiKeyCollectionInner> inner =
            this.serviceClient().listApiKeysWithResponse(blockchainMemberName, resourceGroupName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ApiKeyCollectionImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ApiKeyCollection listRegenerateApiKeys(String blockchainMemberName, String resourceGroupName) {
        ApiKeyCollectionInner inner =
            this.serviceClient().listRegenerateApiKeys(blockchainMemberName, resourceGroupName);
        if (inner != null) {
            return new ApiKeyCollectionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ApiKeyCollection> listRegenerateApiKeysWithResponse(
        String blockchainMemberName, String resourceGroupName, ApiKey apiKey, Context context) {
        Response<ApiKeyCollectionInner> inner =
            this
                .serviceClient()
                .listRegenerateApiKeysWithResponse(blockchainMemberName, resourceGroupName, apiKey, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ApiKeyCollectionImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public BlockchainMember getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String blockchainMemberName = Utils.getValueFromIdByName(id, "blockchainMembers");
        if (blockchainMemberName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'blockchainMembers'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, blockchainMemberName, Context.NONE).getValue();
    }

    public Response<BlockchainMember> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String blockchainMemberName = Utils.getValueFromIdByName(id, "blockchainMembers");
        if (blockchainMemberName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'blockchainMembers'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, blockchainMemberName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String blockchainMemberName = Utils.getValueFromIdByName(id, "blockchainMembers");
        if (blockchainMemberName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'blockchainMembers'.", id)));
        }
        this.delete(resourceGroupName, blockchainMemberName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String blockchainMemberName = Utils.getValueFromIdByName(id, "blockchainMembers");
        if (blockchainMemberName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'blockchainMembers'.", id)));
        }
        this.delete(resourceGroupName, blockchainMemberName, context);
    }

    private BlockchainMembersClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.blockchain.BlockchainManager manager() {
        return this.serviceManager;
    }

    public BlockchainMemberImpl define(String name) {
        return new BlockchainMemberImpl(name, this.manager());
    }
}
