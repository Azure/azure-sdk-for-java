// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.blockchain.models;

import com.azure.core.http.rest.Response;
import com.azure.core.management.Region;
import com.azure.core.util.Context;
import com.azure.resourcemanager.blockchain.fluent.models.BlockchainMemberInner;
import java.util.List;
import java.util.Map;

/** An immutable client-side representation of BlockchainMember. */
public interface BlockchainMember {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     *
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     *
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     *
     * @return the type value.
     */
    String type();

    /**
     * Gets the location property: The geo-location where the resource lives.
     *
     * @return the location value.
     */
    String location();

    /**
     * Gets the tags property: Resource tags.
     *
     * @return the tags value.
     */
    Map<String, String> tags();

    /**
     * Gets the sku property: Gets or sets the blockchain member Sku.
     *
     * @return the sku value.
     */
    Sku sku();

    /**
     * Gets the protocol property: Gets or sets the blockchain protocol.
     *
     * @return the protocol value.
     */
    BlockchainProtocol protocol();

    /**
     * Gets the validatorNodesSku property: Gets or sets the blockchain validator nodes Sku.
     *
     * @return the validatorNodesSku value.
     */
    BlockchainMemberNodesSku validatorNodesSku();

    /**
     * Gets the provisioningState property: Gets or sets the blockchain member provision state.
     *
     * @return the provisioningState value.
     */
    BlockchainMemberProvisioningState provisioningState();

    /**
     * Gets the dns property: Gets the dns endpoint of the blockchain member.
     *
     * @return the dns value.
     */
    String dns();

    /**
     * Gets the username property: Gets the auth user name of the blockchain member.
     *
     * @return the username value.
     */
    String username();

    /**
     * Gets the password property: Sets the basic auth password of the blockchain member.
     *
     * @return the password value.
     */
    String password();

    /**
     * Gets the consortium property: Gets or sets the consortium for the blockchain member.
     *
     * @return the consortium value.
     */
    String consortium();

    /**
     * Gets the consortiumManagementAccountAddress property: Gets the managed consortium management account address.
     *
     * @return the consortiumManagementAccountAddress value.
     */
    String consortiumManagementAccountAddress();

    /**
     * Gets the consortiumManagementAccountPassword property: Sets the managed consortium management account password.
     *
     * @return the consortiumManagementAccountPassword value.
     */
    String consortiumManagementAccountPassword();

    /**
     * Gets the consortiumRole property: Gets the role of the member in the consortium.
     *
     * @return the consortiumRole value.
     */
    String consortiumRole();

    /**
     * Gets the consortiumMemberDisplayName property: Gets the display name of the member in the consortium.
     *
     * @return the consortiumMemberDisplayName value.
     */
    String consortiumMemberDisplayName();

    /**
     * Gets the rootContractAddress property: Gets the Ethereum root contract address of the blockchain.
     *
     * @return the rootContractAddress value.
     */
    String rootContractAddress();

    /**
     * Gets the publicKey property: Gets the public key of the blockchain member (default transaction node).
     *
     * @return the publicKey value.
     */
    String publicKey();

    /**
     * Gets the firewallRules property: Gets or sets firewall rules.
     *
     * @return the firewallRules value.
     */
    List<FirewallRule> firewallRules();

    /**
     * Gets the region of the resource.
     *
     * @return the region of the resource.
     */
    Region region();

    /**
     * Gets the name of the resource region.
     *
     * @return the name of the resource region.
     */
    String regionName();

    /**
     * Gets the inner com.azure.resourcemanager.blockchain.fluent.models.BlockchainMemberInner object.
     *
     * @return the inner object.
     */
    BlockchainMemberInner innerModel();

    /** The entirety of the BlockchainMember definition. */
    interface Definition
        extends DefinitionStages.Blank,
            DefinitionStages.WithLocation,
            DefinitionStages.WithResourceGroup,
            DefinitionStages.WithCreate {
    }
    /** The BlockchainMember definition stages. */
    interface DefinitionStages {
        /** The first stage of the BlockchainMember definition. */
        interface Blank extends WithLocation {
        }
        /** The stage of the BlockchainMember definition allowing to specify location. */
        interface WithLocation {
            /**
             * Specifies the region for the resource.
             *
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithResourceGroup withRegion(Region location);

            /**
             * Specifies the region for the resource.
             *
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithResourceGroup withRegion(String location);
        }
        /** The stage of the BlockchainMember definition allowing to specify parent resource. */
        interface WithResourceGroup {
            /**
             * Specifies resourceGroupName.
             *
             * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this
             *     value from the Azure Resource Manager API or the portal.
             * @return the next definition stage.
             */
            WithCreate withExistingResourceGroup(String resourceGroupName);
        }
        /**
         * The stage of the BlockchainMember definition which contains all the minimum required properties for the
         * resource to be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate
            extends DefinitionStages.WithTags,
                DefinitionStages.WithSku,
                DefinitionStages.WithProtocol,
                DefinitionStages.WithValidatorNodesSku,
                DefinitionStages.WithPassword,
                DefinitionStages.WithConsortium,
                DefinitionStages.WithConsortiumManagementAccountPassword,
                DefinitionStages.WithConsortiumRole,
                DefinitionStages.WithConsortiumMemberDisplayName,
                DefinitionStages.WithFirewallRules {
            /**
             * Executes the create request.
             *
             * @return the created resource.
             */
            BlockchainMember create();

            /**
             * Executes the create request.
             *
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            BlockchainMember create(Context context);
        }
        /** The stage of the BlockchainMember definition allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             *
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            WithCreate withTags(Map<String, String> tags);
        }
        /** The stage of the BlockchainMember definition allowing to specify sku. */
        interface WithSku {
            /**
             * Specifies the sku property: Gets or sets the blockchain member Sku..
             *
             * @param sku Gets or sets the blockchain member Sku.
             * @return the next definition stage.
             */
            WithCreate withSku(Sku sku);
        }
        /** The stage of the BlockchainMember definition allowing to specify protocol. */
        interface WithProtocol {
            /**
             * Specifies the protocol property: Gets or sets the blockchain protocol..
             *
             * @param protocol Gets or sets the blockchain protocol.
             * @return the next definition stage.
             */
            WithCreate withProtocol(BlockchainProtocol protocol);
        }
        /** The stage of the BlockchainMember definition allowing to specify validatorNodesSku. */
        interface WithValidatorNodesSku {
            /**
             * Specifies the validatorNodesSku property: Gets or sets the blockchain validator nodes Sku..
             *
             * @param validatorNodesSku Gets or sets the blockchain validator nodes Sku.
             * @return the next definition stage.
             */
            WithCreate withValidatorNodesSku(BlockchainMemberNodesSku validatorNodesSku);
        }
        /** The stage of the BlockchainMember definition allowing to specify password. */
        interface WithPassword {
            /**
             * Specifies the password property: Sets the basic auth password of the blockchain member..
             *
             * @param password Sets the basic auth password of the blockchain member.
             * @return the next definition stage.
             */
            WithCreate withPassword(String password);
        }
        /** The stage of the BlockchainMember definition allowing to specify consortium. */
        interface WithConsortium {
            /**
             * Specifies the consortium property: Gets or sets the consortium for the blockchain member..
             *
             * @param consortium Gets or sets the consortium for the blockchain member.
             * @return the next definition stage.
             */
            WithCreate withConsortium(String consortium);
        }
        /** The stage of the BlockchainMember definition allowing to specify consortiumManagementAccountPassword. */
        interface WithConsortiumManagementAccountPassword {
            /**
             * Specifies the consortiumManagementAccountPassword property: Sets the managed consortium management
             * account password..
             *
             * @param consortiumManagementAccountPassword Sets the managed consortium management account password.
             * @return the next definition stage.
             */
            WithCreate withConsortiumManagementAccountPassword(String consortiumManagementAccountPassword);
        }
        /** The stage of the BlockchainMember definition allowing to specify consortiumRole. */
        interface WithConsortiumRole {
            /**
             * Specifies the consortiumRole property: Gets the role of the member in the consortium..
             *
             * @param consortiumRole Gets the role of the member in the consortium.
             * @return the next definition stage.
             */
            WithCreate withConsortiumRole(String consortiumRole);
        }
        /** The stage of the BlockchainMember definition allowing to specify consortiumMemberDisplayName. */
        interface WithConsortiumMemberDisplayName {
            /**
             * Specifies the consortiumMemberDisplayName property: Gets the display name of the member in the
             * consortium..
             *
             * @param consortiumMemberDisplayName Gets the display name of the member in the consortium.
             * @return the next definition stage.
             */
            WithCreate withConsortiumMemberDisplayName(String consortiumMemberDisplayName);
        }
        /** The stage of the BlockchainMember definition allowing to specify firewallRules. */
        interface WithFirewallRules {
            /**
             * Specifies the firewallRules property: Gets or sets firewall rules.
             *
             * @param firewallRules Gets or sets firewall rules.
             * @return the next definition stage.
             */
            WithCreate withFirewallRules(List<FirewallRule> firewallRules);
        }
    }
    /**
     * Begins update for the BlockchainMember resource.
     *
     * @return the stage of resource update.
     */
    BlockchainMember.Update update();

    /** The template for BlockchainMember update. */
    interface Update
        extends UpdateStages.WithTags,
            UpdateStages.WithPassword,
            UpdateStages.WithFirewallRules,
            UpdateStages.WithConsortiumManagementAccountPassword {
        /**
         * Executes the update request.
         *
         * @return the updated resource.
         */
        BlockchainMember apply();

        /**
         * Executes the update request.
         *
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        BlockchainMember apply(Context context);
    }
    /** The BlockchainMember update stages. */
    interface UpdateStages {
        /** The stage of the BlockchainMember update allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: Tags of the service which is a list of key value pairs that describes the
             * resource..
             *
             * @param tags Tags of the service which is a list of key value pairs that describes the resource.
             * @return the next definition stage.
             */
            Update withTags(Map<String, String> tags);
        }
        /** The stage of the BlockchainMember update allowing to specify password. */
        interface WithPassword {
            /**
             * Specifies the password property: Sets the transaction node dns endpoint basic auth password..
             *
             * @param password Sets the transaction node dns endpoint basic auth password.
             * @return the next definition stage.
             */
            Update withPassword(String password);
        }
        /** The stage of the BlockchainMember update allowing to specify firewallRules. */
        interface WithFirewallRules {
            /**
             * Specifies the firewallRules property: Gets or sets the firewall rules..
             *
             * @param firewallRules Gets or sets the firewall rules.
             * @return the next definition stage.
             */
            Update withFirewallRules(List<FirewallRule> firewallRules);
        }
        /** The stage of the BlockchainMember update allowing to specify consortiumManagementAccountPassword. */
        interface WithConsortiumManagementAccountPassword {
            /**
             * Specifies the consortiumManagementAccountPassword property: Sets the managed consortium management
             * account password..
             *
             * @param consortiumManagementAccountPassword Sets the managed consortium management account password.
             * @return the next definition stage.
             */
            Update withConsortiumManagementAccountPassword(String consortiumManagementAccountPassword);
        }
    }
    /**
     * Refreshes the resource to sync with Azure.
     *
     * @return the refreshed resource.
     */
    BlockchainMember refresh();

    /**
     * Refreshes the resource to sync with Azure.
     *
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    BlockchainMember refresh(Context context);

    /**
     * Lists the API keys for a blockchain member.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of the API key payload which is exposed in the response of the resource provider.
     */
    ApiKeyCollection listApiKeys();

    /**
     * Lists the API keys for a blockchain member.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of the API key payload which is exposed in the response of the resource provider.
     */
    Response<ApiKeyCollection> listApiKeysWithResponse(Context context);

    /**
     * Regenerate the API keys for a blockchain member.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of the API key payload which is exposed in the response of the resource provider.
     */
    ApiKeyCollection listRegenerateApiKeys();

    /**
     * Regenerate the API keys for a blockchain member.
     *
     * @param apiKey api key to be regenerate.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of the API key payload which is exposed in the response of the resource provider.
     */
    Response<ApiKeyCollection> listRegenerateApiKeysWithResponse(ApiKey apiKey, Context context);
}
