// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.blockchain.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.blockchain.BlockchainManager;
import com.azure.resourcemanager.blockchain.fluent.LocationsClient;
import com.azure.resourcemanager.blockchain.fluent.models.ConsortiumCollectionInner;
import com.azure.resourcemanager.blockchain.fluent.models.NameAvailabilityInner;
import com.azure.resourcemanager.blockchain.models.ConsortiumCollection;
import com.azure.resourcemanager.blockchain.models.Locations;
import com.azure.resourcemanager.blockchain.models.NameAvailability;
import com.azure.resourcemanager.blockchain.models.NameAvailabilityRequest;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class LocationsImpl implements Locations {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(LocationsImpl.class);

    private final LocationsClient innerClient;

    private final BlockchainManager serviceManager;

    public LocationsImpl(LocationsClient innerClient, BlockchainManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public NameAvailability checkNameAvailability(String locationName) {
        NameAvailabilityInner inner = this.serviceClient().checkNameAvailability(locationName);
        if (inner != null) {
            return new NameAvailabilityImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<NameAvailability> checkNameAvailabilityWithResponse(
        String locationName, NameAvailabilityRequest nameAvailabilityRequest, Context context) {
        Response<NameAvailabilityInner> inner =
            this.serviceClient().checkNameAvailabilityWithResponse(locationName, nameAvailabilityRequest, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new NameAvailabilityImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ConsortiumCollection listConsortiums(String locationName) {
        ConsortiumCollectionInner inner = this.serviceClient().listConsortiums(locationName);
        if (inner != null) {
            return new ConsortiumCollectionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ConsortiumCollection> listConsortiumsWithResponse(String locationName, Context context) {
        Response<ConsortiumCollectionInner> inner =
            this.serviceClient().listConsortiumsWithResponse(locationName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ConsortiumCollectionImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    private LocationsClient serviceClient() {
        return this.innerClient;
    }

    private BlockchainManager manager() {
        return this.serviceManager;
    }
}
