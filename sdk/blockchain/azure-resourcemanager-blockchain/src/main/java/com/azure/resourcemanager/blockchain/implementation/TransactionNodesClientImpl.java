// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.blockchain.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.blockchain.fluent.TransactionNodesClient;
import com.azure.resourcemanager.blockchain.fluent.models.ApiKeyCollectionInner;
import com.azure.resourcemanager.blockchain.fluent.models.TransactionNodeInner;
import com.azure.resourcemanager.blockchain.models.ApiKey;
import com.azure.resourcemanager.blockchain.models.TransactionNodeCollection;
import com.azure.resourcemanager.blockchain.models.TransactionNodeUpdate;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in TransactionNodesClient. */
public final class TransactionNodesClientImpl implements TransactionNodesClient {
    private final ClientLogger logger = new ClientLogger(TransactionNodesClientImpl.class);

    /** The proxy service used to perform REST calls. */
    private final TransactionNodesService service;

    /** The service client containing this operation class. */
    private final BlockchainManagementClientImpl client;

    /**
     * Initializes an instance of TransactionNodesClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    TransactionNodesClientImpl(BlockchainManagementClientImpl client) {
        this.service =
            RestProxy.create(TransactionNodesService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for BlockchainManagementClientTransactionNodes to be used by the proxy
     * service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "BlockchainManagement")
    private interface TransactionNodesService {
        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Blockchain"
                + "/blockchainMembers/{blockchainMemberName}/transactionNodes/{transactionNodeName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<TransactionNodeInner>> get(
            @HostParam("$host") String endpoint,
            @PathParam("blockchainMemberName") String blockchainMemberName,
            @PathParam("transactionNodeName") String transactionNodeName,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Put(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Blockchain"
                + "/blockchainMembers/{blockchainMemberName}/transactionNodes/{transactionNodeName}")
        @ExpectedResponses({200, 201})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> create(
            @HostParam("$host") String endpoint,
            @PathParam("blockchainMemberName") String blockchainMemberName,
            @PathParam("transactionNodeName") String transactionNodeName,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @BodyParam("application/json") TransactionNodeInner transactionNode,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Accept: application/json;q=0.9", "Content-Type: application/json"})
        @Delete(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Blockchain"
                + "/blockchainMembers/{blockchainMemberName}/transactionNodes/{transactionNodeName}")
        @ExpectedResponses({202, 204})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> delete(
            @HostParam("$host") String endpoint,
            @PathParam("blockchainMemberName") String blockchainMemberName,
            @PathParam("transactionNodeName") String transactionNodeName,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Patch(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Blockchain"
                + "/blockchainMembers/{blockchainMemberName}/transactionNodes/{transactionNodeName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<TransactionNodeInner>> update(
            @HostParam("$host") String endpoint,
            @PathParam("blockchainMemberName") String blockchainMemberName,
            @PathParam("transactionNodeName") String transactionNodeName,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @BodyParam("application/json") TransactionNodeUpdate transactionNode,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Blockchain"
                + "/blockchainMembers/{blockchainMemberName}/transactionNodes")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<TransactionNodeCollection>> list(
            @HostParam("$host") String endpoint,
            @PathParam("blockchainMemberName") String blockchainMemberName,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Blockchain"
                + "/blockchainMembers/{blockchainMemberName}/transactionNodes/{transactionNodeName}/listApiKeys")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ApiKeyCollectionInner>> listApiKeys(
            @HostParam("$host") String endpoint,
            @PathParam("blockchainMemberName") String blockchainMemberName,
            @PathParam("transactionNodeName") String transactionNodeName,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Blockchain"
                + "/blockchainMembers/{blockchainMemberName}/transactionNodes/{transactionNodeName}/regenerateApiKeys")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ApiKeyCollectionInner>> listRegenerateApiKeys(
            @HostParam("$host") String endpoint,
            @PathParam("blockchainMemberName") String blockchainMemberName,
            @PathParam("transactionNodeName") String transactionNodeName,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @BodyParam("application/json") ApiKey apiKey,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<TransactionNodeCollection>> listNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Get the details of the transaction node.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param transactionNodeName Transaction node name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the details of the transaction node.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<TransactionNodeInner>> getWithResponseAsync(
        String blockchainMemberName, String transactionNodeName, String resourceGroupName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (blockchainMemberName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter blockchainMemberName is required and cannot be null."));
        }
        if (transactionNodeName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter transactionNodeName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .get(
                            this.client.getEndpoint(),
                            blockchainMemberName,
                            transactionNodeName,
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get the details of the transaction node.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param transactionNodeName Transaction node name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the details of the transaction node.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<TransactionNodeInner>> getWithResponseAsync(
        String blockchainMemberName, String transactionNodeName, String resourceGroupName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (blockchainMemberName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter blockchainMemberName is required and cannot be null."));
        }
        if (transactionNodeName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter transactionNodeName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .get(
                this.client.getEndpoint(),
                blockchainMemberName,
                transactionNodeName,
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                accept,
                context);
    }

    /**
     * Get the details of the transaction node.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param transactionNodeName Transaction node name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the details of the transaction node.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<TransactionNodeInner> getAsync(
        String blockchainMemberName, String transactionNodeName, String resourceGroupName) {
        return getWithResponseAsync(blockchainMemberName, transactionNodeName, resourceGroupName)
            .flatMap(
                (Response<TransactionNodeInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Get the details of the transaction node.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param transactionNodeName Transaction node name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the details of the transaction node.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TransactionNodeInner get(String blockchainMemberName, String transactionNodeName, String resourceGroupName) {
        return getAsync(blockchainMemberName, transactionNodeName, resourceGroupName).block();
    }

    /**
     * Get the details of the transaction node.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param transactionNodeName Transaction node name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the details of the transaction node.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<TransactionNodeInner> getWithResponse(
        String blockchainMemberName, String transactionNodeName, String resourceGroupName, Context context) {
        return getWithResponseAsync(blockchainMemberName, transactionNodeName, resourceGroupName, context).block();
    }

    /**
     * Create or update the transaction node.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param transactionNodeName Transaction node name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @param transactionNode Payload to create the transaction node.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return payload of the transaction node which is the request/response of the resource provider.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createWithResponseAsync(
        String blockchainMemberName,
        String transactionNodeName,
        String resourceGroupName,
        TransactionNodeInner transactionNode) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (blockchainMemberName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter blockchainMemberName is required and cannot be null."));
        }
        if (transactionNodeName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter transactionNodeName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (transactionNode != null) {
            transactionNode.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .create(
                            this.client.getEndpoint(),
                            blockchainMemberName,
                            transactionNodeName,
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            transactionNode,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Create or update the transaction node.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param transactionNodeName Transaction node name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @param transactionNode Payload to create the transaction node.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return payload of the transaction node which is the request/response of the resource provider.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createWithResponseAsync(
        String blockchainMemberName,
        String transactionNodeName,
        String resourceGroupName,
        TransactionNodeInner transactionNode,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (blockchainMemberName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter blockchainMemberName is required and cannot be null."));
        }
        if (transactionNodeName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter transactionNodeName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (transactionNode != null) {
            transactionNode.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .create(
                this.client.getEndpoint(),
                blockchainMemberName,
                transactionNodeName,
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                transactionNode,
                accept,
                context);
    }

    /**
     * Create or update the transaction node.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param transactionNodeName Transaction node name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @param transactionNode Payload to create the transaction node.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return payload of the transaction node which is the request/response of the resource provider.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<TransactionNodeInner>, TransactionNodeInner> beginCreateAsync(
        String blockchainMemberName,
        String transactionNodeName,
        String resourceGroupName,
        TransactionNodeInner transactionNode) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            createWithResponseAsync(blockchainMemberName, transactionNodeName, resourceGroupName, transactionNode);
        return this
            .client
            .<TransactionNodeInner, TransactionNodeInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                TransactionNodeInner.class,
                TransactionNodeInner.class,
                Context.NONE);
    }

    /**
     * Create or update the transaction node.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param transactionNodeName Transaction node name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @param transactionNode Payload to create the transaction node.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return payload of the transaction node which is the request/response of the resource provider.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<TransactionNodeInner>, TransactionNodeInner> beginCreateAsync(
        String blockchainMemberName,
        String transactionNodeName,
        String resourceGroupName,
        TransactionNodeInner transactionNode,
        Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            createWithResponseAsync(
                blockchainMemberName, transactionNodeName, resourceGroupName, transactionNode, context);
        return this
            .client
            .<TransactionNodeInner, TransactionNodeInner>getLroResult(
                mono, this.client.getHttpPipeline(), TransactionNodeInner.class, TransactionNodeInner.class, context);
    }

    /**
     * Create or update the transaction node.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param transactionNodeName Transaction node name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @param transactionNode Payload to create the transaction node.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return payload of the transaction node which is the request/response of the resource provider.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<TransactionNodeInner>, TransactionNodeInner> beginCreate(
        String blockchainMemberName,
        String transactionNodeName,
        String resourceGroupName,
        TransactionNodeInner transactionNode) {
        return beginCreateAsync(blockchainMemberName, transactionNodeName, resourceGroupName, transactionNode)
            .getSyncPoller();
    }

    /**
     * Create or update the transaction node.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param transactionNodeName Transaction node name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @param transactionNode Payload to create the transaction node.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return payload of the transaction node which is the request/response of the resource provider.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<TransactionNodeInner>, TransactionNodeInner> beginCreate(
        String blockchainMemberName,
        String transactionNodeName,
        String resourceGroupName,
        TransactionNodeInner transactionNode,
        Context context) {
        return beginCreateAsync(blockchainMemberName, transactionNodeName, resourceGroupName, transactionNode, context)
            .getSyncPoller();
    }

    /**
     * Create or update the transaction node.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param transactionNodeName Transaction node name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @param transactionNode Payload to create the transaction node.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return payload of the transaction node which is the request/response of the resource provider.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<TransactionNodeInner> createAsync(
        String blockchainMemberName,
        String transactionNodeName,
        String resourceGroupName,
        TransactionNodeInner transactionNode) {
        return beginCreateAsync(blockchainMemberName, transactionNodeName, resourceGroupName, transactionNode)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create or update the transaction node.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param transactionNodeName Transaction node name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return payload of the transaction node which is the request/response of the resource provider.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<TransactionNodeInner> createAsync(
        String blockchainMemberName, String transactionNodeName, String resourceGroupName) {
        final TransactionNodeInner transactionNode = null;
        return beginCreateAsync(blockchainMemberName, transactionNodeName, resourceGroupName, transactionNode)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create or update the transaction node.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param transactionNodeName Transaction node name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @param transactionNode Payload to create the transaction node.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return payload of the transaction node which is the request/response of the resource provider.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<TransactionNodeInner> createAsync(
        String blockchainMemberName,
        String transactionNodeName,
        String resourceGroupName,
        TransactionNodeInner transactionNode,
        Context context) {
        return beginCreateAsync(blockchainMemberName, transactionNodeName, resourceGroupName, transactionNode, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create or update the transaction node.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param transactionNodeName Transaction node name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @param transactionNode Payload to create the transaction node.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return payload of the transaction node which is the request/response of the resource provider.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TransactionNodeInner create(
        String blockchainMemberName,
        String transactionNodeName,
        String resourceGroupName,
        TransactionNodeInner transactionNode) {
        return createAsync(blockchainMemberName, transactionNodeName, resourceGroupName, transactionNode).block();
    }

    /**
     * Create or update the transaction node.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param transactionNodeName Transaction node name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return payload of the transaction node which is the request/response of the resource provider.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TransactionNodeInner create(
        String blockchainMemberName, String transactionNodeName, String resourceGroupName) {
        final TransactionNodeInner transactionNode = null;
        return createAsync(blockchainMemberName, transactionNodeName, resourceGroupName, transactionNode).block();
    }

    /**
     * Create or update the transaction node.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param transactionNodeName Transaction node name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @param transactionNode Payload to create the transaction node.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return payload of the transaction node which is the request/response of the resource provider.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TransactionNodeInner create(
        String blockchainMemberName,
        String transactionNodeName,
        String resourceGroupName,
        TransactionNodeInner transactionNode,
        Context context) {
        return createAsync(blockchainMemberName, transactionNodeName, resourceGroupName, transactionNode, context)
            .block();
    }

    /**
     * Delete the transaction node.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param transactionNodeName Transaction node name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(
        String blockchainMemberName, String transactionNodeName, String resourceGroupName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (blockchainMemberName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter blockchainMemberName is required and cannot be null."));
        }
        if (transactionNodeName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter transactionNodeName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        return FluxUtil
            .withContext(
                context ->
                    service
                        .delete(
                            this.client.getEndpoint(),
                            blockchainMemberName,
                            transactionNodeName,
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Delete the transaction node.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param transactionNodeName Transaction node name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(
        String blockchainMemberName, String transactionNodeName, String resourceGroupName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (blockchainMemberName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter blockchainMemberName is required and cannot be null."));
        }
        if (transactionNodeName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter transactionNodeName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        context = this.client.mergeContext(context);
        return service
            .delete(
                this.client.getEndpoint(),
                blockchainMemberName,
                transactionNodeName,
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                context);
    }

    /**
     * Delete the transaction node.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param transactionNodeName Transaction node name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(
        String blockchainMemberName, String transactionNodeName, String resourceGroupName) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            deleteWithResponseAsync(blockchainMemberName, transactionNodeName, resourceGroupName);
        return this
            .client
            .<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class, Context.NONE);
    }

    /**
     * Delete the transaction node.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param transactionNodeName Transaction node name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(
        String blockchainMemberName, String transactionNodeName, String resourceGroupName, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            deleteWithResponseAsync(blockchainMemberName, transactionNodeName, resourceGroupName, context);
        return this
            .client
            .<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class, context);
    }

    /**
     * Delete the transaction node.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param transactionNodeName Transaction node name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<Void>, Void> beginDelete(
        String blockchainMemberName, String transactionNodeName, String resourceGroupName) {
        return beginDeleteAsync(blockchainMemberName, transactionNodeName, resourceGroupName).getSyncPoller();
    }

    /**
     * Delete the transaction node.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param transactionNodeName Transaction node name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<Void>, Void> beginDelete(
        String blockchainMemberName, String transactionNodeName, String resourceGroupName, Context context) {
        return beginDeleteAsync(blockchainMemberName, transactionNodeName, resourceGroupName, context).getSyncPoller();
    }

    /**
     * Delete the transaction node.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param transactionNodeName Transaction node name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String blockchainMemberName, String transactionNodeName, String resourceGroupName) {
        return beginDeleteAsync(blockchainMemberName, transactionNodeName, resourceGroupName)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Delete the transaction node.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param transactionNodeName Transaction node name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(
        String blockchainMemberName, String transactionNodeName, String resourceGroupName, Context context) {
        return beginDeleteAsync(blockchainMemberName, transactionNodeName, resourceGroupName, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Delete the transaction node.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param transactionNodeName Transaction node name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String blockchainMemberName, String transactionNodeName, String resourceGroupName) {
        deleteAsync(blockchainMemberName, transactionNodeName, resourceGroupName).block();
    }

    /**
     * Delete the transaction node.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param transactionNodeName Transaction node name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(
        String blockchainMemberName, String transactionNodeName, String resourceGroupName, Context context) {
        deleteAsync(blockchainMemberName, transactionNodeName, resourceGroupName, context).block();
    }

    /**
     * Update the transaction node.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param transactionNodeName Transaction node name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @param transactionNode Payload to create the transaction node.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return payload of the transaction node which is the request/response of the resource provider.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<TransactionNodeInner>> updateWithResponseAsync(
        String blockchainMemberName,
        String transactionNodeName,
        String resourceGroupName,
        TransactionNodeUpdate transactionNode) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (blockchainMemberName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter blockchainMemberName is required and cannot be null."));
        }
        if (transactionNodeName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter transactionNodeName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (transactionNode != null) {
            transactionNode.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .update(
                            this.client.getEndpoint(),
                            blockchainMemberName,
                            transactionNodeName,
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            transactionNode,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Update the transaction node.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param transactionNodeName Transaction node name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @param transactionNode Payload to create the transaction node.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return payload of the transaction node which is the request/response of the resource provider.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<TransactionNodeInner>> updateWithResponseAsync(
        String blockchainMemberName,
        String transactionNodeName,
        String resourceGroupName,
        TransactionNodeUpdate transactionNode,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (blockchainMemberName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter blockchainMemberName is required and cannot be null."));
        }
        if (transactionNodeName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter transactionNodeName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (transactionNode != null) {
            transactionNode.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .update(
                this.client.getEndpoint(),
                blockchainMemberName,
                transactionNodeName,
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                transactionNode,
                accept,
                context);
    }

    /**
     * Update the transaction node.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param transactionNodeName Transaction node name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @param transactionNode Payload to create the transaction node.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return payload of the transaction node which is the request/response of the resource provider.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<TransactionNodeInner> updateAsync(
        String blockchainMemberName,
        String transactionNodeName,
        String resourceGroupName,
        TransactionNodeUpdate transactionNode) {
        return updateWithResponseAsync(blockchainMemberName, transactionNodeName, resourceGroupName, transactionNode)
            .flatMap(
                (Response<TransactionNodeInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Update the transaction node.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param transactionNodeName Transaction node name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return payload of the transaction node which is the request/response of the resource provider.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<TransactionNodeInner> updateAsync(
        String blockchainMemberName, String transactionNodeName, String resourceGroupName) {
        final TransactionNodeUpdate transactionNode = null;
        return updateWithResponseAsync(blockchainMemberName, transactionNodeName, resourceGroupName, transactionNode)
            .flatMap(
                (Response<TransactionNodeInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Update the transaction node.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param transactionNodeName Transaction node name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return payload of the transaction node which is the request/response of the resource provider.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TransactionNodeInner update(
        String blockchainMemberName, String transactionNodeName, String resourceGroupName) {
        final TransactionNodeUpdate transactionNode = null;
        return updateAsync(blockchainMemberName, transactionNodeName, resourceGroupName, transactionNode).block();
    }

    /**
     * Update the transaction node.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param transactionNodeName Transaction node name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @param transactionNode Payload to create the transaction node.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return payload of the transaction node which is the request/response of the resource provider.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<TransactionNodeInner> updateWithResponse(
        String blockchainMemberName,
        String transactionNodeName,
        String resourceGroupName,
        TransactionNodeUpdate transactionNode,
        Context context) {
        return updateWithResponseAsync(
                blockchainMemberName, transactionNodeName, resourceGroupName, transactionNode, context)
            .block();
    }

    /**
     * Lists the transaction nodes for a blockchain member.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of transaction node payload which is exposed in the request/response of the resource provider.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<TransactionNodeInner>> listSinglePageAsync(
        String blockchainMemberName, String resourceGroupName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (blockchainMemberName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter blockchainMemberName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .list(
                            this.client.getEndpoint(),
                            blockchainMemberName,
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            accept,
                            context))
            .<PagedResponse<TransactionNodeInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Lists the transaction nodes for a blockchain member.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of transaction node payload which is exposed in the request/response of the resource provider.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<TransactionNodeInner>> listSinglePageAsync(
        String blockchainMemberName, String resourceGroupName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (blockchainMemberName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter blockchainMemberName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .list(
                this.client.getEndpoint(),
                blockchainMemberName,
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Lists the transaction nodes for a blockchain member.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of transaction node payload which is exposed in the request/response of the resource provider.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<TransactionNodeInner> listAsync(String blockchainMemberName, String resourceGroupName) {
        return new PagedFlux<>(
            () -> listSinglePageAsync(blockchainMemberName, resourceGroupName),
            nextLink -> listNextSinglePageAsync(nextLink));
    }

    /**
     * Lists the transaction nodes for a blockchain member.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of transaction node payload which is exposed in the request/response of the resource provider.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<TransactionNodeInner> listAsync(
        String blockchainMemberName, String resourceGroupName, Context context) {
        return new PagedFlux<>(
            () -> listSinglePageAsync(blockchainMemberName, resourceGroupName, context),
            nextLink -> listNextSinglePageAsync(nextLink, context));
    }

    /**
     * Lists the transaction nodes for a blockchain member.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of transaction node payload which is exposed in the request/response of the resource provider.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<TransactionNodeInner> list(String blockchainMemberName, String resourceGroupName) {
        return new PagedIterable<>(listAsync(blockchainMemberName, resourceGroupName));
    }

    /**
     * Lists the transaction nodes for a blockchain member.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of transaction node payload which is exposed in the request/response of the resource provider.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<TransactionNodeInner> list(
        String blockchainMemberName, String resourceGroupName, Context context) {
        return new PagedIterable<>(listAsync(blockchainMemberName, resourceGroupName, context));
    }

    /**
     * List the API keys for the transaction node.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param transactionNodeName Transaction node name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of the API key payload which is exposed in the response of the resource provider.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ApiKeyCollectionInner>> listApiKeysWithResponseAsync(
        String blockchainMemberName, String transactionNodeName, String resourceGroupName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (blockchainMemberName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter blockchainMemberName is required and cannot be null."));
        }
        if (transactionNodeName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter transactionNodeName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .listApiKeys(
                            this.client.getEndpoint(),
                            blockchainMemberName,
                            transactionNodeName,
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * List the API keys for the transaction node.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param transactionNodeName Transaction node name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of the API key payload which is exposed in the response of the resource provider.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ApiKeyCollectionInner>> listApiKeysWithResponseAsync(
        String blockchainMemberName, String transactionNodeName, String resourceGroupName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (blockchainMemberName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter blockchainMemberName is required and cannot be null."));
        }
        if (transactionNodeName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter transactionNodeName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listApiKeys(
                this.client.getEndpoint(),
                blockchainMemberName,
                transactionNodeName,
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                accept,
                context);
    }

    /**
     * List the API keys for the transaction node.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param transactionNodeName Transaction node name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of the API key payload which is exposed in the response of the resource provider.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ApiKeyCollectionInner> listApiKeysAsync(
        String blockchainMemberName, String transactionNodeName, String resourceGroupName) {
        return listApiKeysWithResponseAsync(blockchainMemberName, transactionNodeName, resourceGroupName)
            .flatMap(
                (Response<ApiKeyCollectionInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * List the API keys for the transaction node.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param transactionNodeName Transaction node name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of the API key payload which is exposed in the response of the resource provider.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ApiKeyCollectionInner listApiKeys(
        String blockchainMemberName, String transactionNodeName, String resourceGroupName) {
        return listApiKeysAsync(blockchainMemberName, transactionNodeName, resourceGroupName).block();
    }

    /**
     * List the API keys for the transaction node.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param transactionNodeName Transaction node name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of the API key payload which is exposed in the response of the resource provider.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ApiKeyCollectionInner> listApiKeysWithResponse(
        String blockchainMemberName, String transactionNodeName, String resourceGroupName, Context context) {
        return listApiKeysWithResponseAsync(blockchainMemberName, transactionNodeName, resourceGroupName, context)
            .block();
    }

    /**
     * Regenerate the API keys for the blockchain member.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param transactionNodeName Transaction node name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @param apiKey api key to be regenerated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of the API key payload which is exposed in the response of the resource provider.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ApiKeyCollectionInner>> listRegenerateApiKeysWithResponseAsync(
        String blockchainMemberName, String transactionNodeName, String resourceGroupName, ApiKey apiKey) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (blockchainMemberName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter blockchainMemberName is required and cannot be null."));
        }
        if (transactionNodeName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter transactionNodeName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (apiKey != null) {
            apiKey.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .listRegenerateApiKeys(
                            this.client.getEndpoint(),
                            blockchainMemberName,
                            transactionNodeName,
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            apiKey,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Regenerate the API keys for the blockchain member.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param transactionNodeName Transaction node name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @param apiKey api key to be regenerated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of the API key payload which is exposed in the response of the resource provider.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ApiKeyCollectionInner>> listRegenerateApiKeysWithResponseAsync(
        String blockchainMemberName,
        String transactionNodeName,
        String resourceGroupName,
        ApiKey apiKey,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (blockchainMemberName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter blockchainMemberName is required and cannot be null."));
        }
        if (transactionNodeName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter transactionNodeName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (apiKey != null) {
            apiKey.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listRegenerateApiKeys(
                this.client.getEndpoint(),
                blockchainMemberName,
                transactionNodeName,
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                apiKey,
                accept,
                context);
    }

    /**
     * Regenerate the API keys for the blockchain member.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param transactionNodeName Transaction node name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @param apiKey api key to be regenerated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of the API key payload which is exposed in the response of the resource provider.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ApiKeyCollectionInner> listRegenerateApiKeysAsync(
        String blockchainMemberName, String transactionNodeName, String resourceGroupName, ApiKey apiKey) {
        return listRegenerateApiKeysWithResponseAsync(
                blockchainMemberName, transactionNodeName, resourceGroupName, apiKey)
            .flatMap(
                (Response<ApiKeyCollectionInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Regenerate the API keys for the blockchain member.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param transactionNodeName Transaction node name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of the API key payload which is exposed in the response of the resource provider.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ApiKeyCollectionInner> listRegenerateApiKeysAsync(
        String blockchainMemberName, String transactionNodeName, String resourceGroupName) {
        final ApiKey apiKey = null;
        return listRegenerateApiKeysWithResponseAsync(
                blockchainMemberName, transactionNodeName, resourceGroupName, apiKey)
            .flatMap(
                (Response<ApiKeyCollectionInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Regenerate the API keys for the blockchain member.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param transactionNodeName Transaction node name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of the API key payload which is exposed in the response of the resource provider.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ApiKeyCollectionInner listRegenerateApiKeys(
        String blockchainMemberName, String transactionNodeName, String resourceGroupName) {
        final ApiKey apiKey = null;
        return listRegenerateApiKeysAsync(blockchainMemberName, transactionNodeName, resourceGroupName, apiKey).block();
    }

    /**
     * Regenerate the API keys for the blockchain member.
     *
     * @param blockchainMemberName Blockchain member name.
     * @param transactionNodeName Transaction node name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value
     *     from the Azure Resource Manager API or the portal.
     * @param apiKey api key to be regenerated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of the API key payload which is exposed in the response of the resource provider.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ApiKeyCollectionInner> listRegenerateApiKeysWithResponse(
        String blockchainMemberName,
        String transactionNodeName,
        String resourceGroupName,
        ApiKey apiKey,
        Context context) {
        return listRegenerateApiKeysWithResponseAsync(
                blockchainMemberName, transactionNodeName, resourceGroupName, apiKey, context)
            .block();
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of transaction node payload which is exposed in the request/response of the resource provider.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<TransactionNodeInner>> listNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<TransactionNodeInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of transaction node payload which is exposed in the request/response of the resource provider.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<TransactionNodeInner>> listNextSinglePageAsync(String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }
}
