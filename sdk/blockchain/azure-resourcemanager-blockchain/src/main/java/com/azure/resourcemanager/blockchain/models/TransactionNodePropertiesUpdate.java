// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.blockchain.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** Update the payload of the transaction node properties in the transaction node payload. */
@Fluent
public class TransactionNodePropertiesUpdate {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(TransactionNodePropertiesUpdate.class);

    /*
     * Sets the transaction node dns endpoint basic auth password.
     */
    @JsonProperty(value = "password")
    private String password;

    /*
     * Gets or sets the firewall rules.
     */
    @JsonProperty(value = "firewallRules")
    private List<FirewallRule> firewallRules;

    /**
     * Get the password property: Sets the transaction node dns endpoint basic auth password.
     *
     * @return the password value.
     */
    public String password() {
        return this.password;
    }

    /**
     * Set the password property: Sets the transaction node dns endpoint basic auth password.
     *
     * @param password the password value to set.
     * @return the TransactionNodePropertiesUpdate object itself.
     */
    public TransactionNodePropertiesUpdate withPassword(String password) {
        this.password = password;
        return this;
    }

    /**
     * Get the firewallRules property: Gets or sets the firewall rules.
     *
     * @return the firewallRules value.
     */
    public List<FirewallRule> firewallRules() {
        return this.firewallRules;
    }

    /**
     * Set the firewallRules property: Gets or sets the firewall rules.
     *
     * @param firewallRules the firewallRules value to set.
     * @return the TransactionNodePropertiesUpdate object itself.
     */
    public TransactionNodePropertiesUpdate withFirewallRules(List<FirewallRule> firewallRules) {
        this.firewallRules = firewallRules;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (firewallRules() != null) {
            firewallRules().forEach(e -> e.validate());
        }
    }
}
