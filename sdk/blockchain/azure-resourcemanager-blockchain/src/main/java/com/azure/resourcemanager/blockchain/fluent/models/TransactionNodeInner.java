// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.blockchain.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.ProxyResource;
import com.azure.resourcemanager.blockchain.models.FirewallRule;
import com.azure.resourcemanager.blockchain.models.NodeProvisioningState;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** Payload of the transaction node which is the request/response of the resource provider. */
@Fluent
public final class TransactionNodeInner extends ProxyResource {
    /*
     * Gets or sets the transaction node location.
     */
    @JsonProperty(value = "location")
    private String location;

    /*
     * Gets or sets the blockchain member properties.
     */
    @JsonProperty(value = "properties")
    private TransactionNodeProperties innerProperties;

    /**
     * Get the location property: Gets or sets the transaction node location.
     *
     * @return the location value.
     */
    public String location() {
        return this.location;
    }

    /**
     * Set the location property: Gets or sets the transaction node location.
     *
     * @param location the location value to set.
     * @return the TransactionNodeInner object itself.
     */
    public TransactionNodeInner withLocation(String location) {
        this.location = location;
        return this;
    }

    /**
     * Get the innerProperties property: Gets or sets the blockchain member properties.
     *
     * @return the innerProperties value.
     */
    private TransactionNodeProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the provisioningState property: Gets or sets the blockchain member provision state.
     *
     * @return the provisioningState value.
     */
    public NodeProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Get the dns property: Gets or sets the transaction node dns endpoint.
     *
     * @return the dns value.
     */
    public String dns() {
        return this.innerProperties() == null ? null : this.innerProperties().dns();
    }

    /**
     * Get the publicKey property: Gets or sets the transaction node public key.
     *
     * @return the publicKey value.
     */
    public String publicKey() {
        return this.innerProperties() == null ? null : this.innerProperties().publicKey();
    }

    /**
     * Get the username property: Gets or sets the transaction node dns endpoint basic auth user name.
     *
     * @return the username value.
     */
    public String username() {
        return this.innerProperties() == null ? null : this.innerProperties().username();
    }

    /**
     * Get the password property: Sets the transaction node dns endpoint basic auth password.
     *
     * @return the password value.
     */
    public String password() {
        return this.innerProperties() == null ? null : this.innerProperties().password();
    }

    /**
     * Set the password property: Sets the transaction node dns endpoint basic auth password.
     *
     * @param password the password value to set.
     * @return the TransactionNodeInner object itself.
     */
    public TransactionNodeInner withPassword(String password) {
        if (this.innerProperties() == null) {
            this.innerProperties = new TransactionNodeProperties();
        }
        this.innerProperties().withPassword(password);
        return this;
    }

    /**
     * Get the firewallRules property: Gets or sets the firewall rules.
     *
     * @return the firewallRules value.
     */
    public List<FirewallRule> firewallRules() {
        return this.innerProperties() == null ? null : this.innerProperties().firewallRules();
    }

    /**
     * Set the firewallRules property: Gets or sets the firewall rules.
     *
     * @param firewallRules the firewallRules value to set.
     * @return the TransactionNodeInner object itself.
     */
    public TransactionNodeInner withFirewallRules(List<FirewallRule> firewallRules) {
        if (this.innerProperties() == null) {
            this.innerProperties = new TransactionNodeProperties();
        }
        this.innerProperties().withFirewallRules(firewallRules);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }
}
