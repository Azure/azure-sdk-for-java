// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.blockchain.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.JsonFlatten;
import com.azure.core.management.ProxyResource;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.blockchain.models.FirewallRule;
import com.azure.resourcemanager.blockchain.models.NodeProvisioningState;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** Payload of the transaction node which is the request/response of the resource provider. */
@JsonFlatten
@Fluent
public class TransactionNodeInner extends ProxyResource {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(TransactionNodeInner.class);

    /*
     * Gets or sets the transaction node location.
     */
    @JsonProperty(value = "location")
    private String location;

    /*
     * Gets or sets the blockchain member provision state.
     */
    @JsonProperty(value = "properties.provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private NodeProvisioningState provisioningState;

    /*
     * Gets or sets the transaction node dns endpoint.
     */
    @JsonProperty(value = "properties.dns", access = JsonProperty.Access.WRITE_ONLY)
    private String dns;

    /*
     * Gets or sets the transaction node public key.
     */
    @JsonProperty(value = "properties.publicKey", access = JsonProperty.Access.WRITE_ONLY)
    private String publicKey;

    /*
     * Gets or sets the transaction node dns endpoint basic auth user name.
     */
    @JsonProperty(value = "properties.userName", access = JsonProperty.Access.WRITE_ONLY)
    private String username;

    /*
     * Sets the transaction node dns endpoint basic auth password.
     */
    @JsonProperty(value = "properties.password")
    private String password;

    /*
     * Gets or sets the firewall rules.
     */
    @JsonProperty(value = "properties.firewallRules")
    private List<FirewallRule> firewallRules;

    /**
     * Get the location property: Gets or sets the transaction node location.
     *
     * @return the location value.
     */
    public String location() {
        return this.location;
    }

    /**
     * Set the location property: Gets or sets the transaction node location.
     *
     * @param location the location value to set.
     * @return the TransactionNodeInner object itself.
     */
    public TransactionNodeInner withLocation(String location) {
        this.location = location;
        return this;
    }

    /**
     * Get the provisioningState property: Gets or sets the blockchain member provision state.
     *
     * @return the provisioningState value.
     */
    public NodeProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the dns property: Gets or sets the transaction node dns endpoint.
     *
     * @return the dns value.
     */
    public String dns() {
        return this.dns;
    }

    /**
     * Get the publicKey property: Gets or sets the transaction node public key.
     *
     * @return the publicKey value.
     */
    public String publicKey() {
        return this.publicKey;
    }

    /**
     * Get the username property: Gets or sets the transaction node dns endpoint basic auth user name.
     *
     * @return the username value.
     */
    public String username() {
        return this.username;
    }

    /**
     * Get the password property: Sets the transaction node dns endpoint basic auth password.
     *
     * @return the password value.
     */
    public String password() {
        return this.password;
    }

    /**
     * Set the password property: Sets the transaction node dns endpoint basic auth password.
     *
     * @param password the password value to set.
     * @return the TransactionNodeInner object itself.
     */
    public TransactionNodeInner withPassword(String password) {
        this.password = password;
        return this;
    }

    /**
     * Get the firewallRules property: Gets or sets the firewall rules.
     *
     * @return the firewallRules value.
     */
    public List<FirewallRule> firewallRules() {
        return this.firewallRules;
    }

    /**
     * Set the firewallRules property: Gets or sets the firewall rules.
     *
     * @param firewallRules the firewallRules value to set.
     * @return the TransactionNodeInner object itself.
     */
    public TransactionNodeInner withFirewallRules(List<FirewallRule> firewallRules) {
        this.firewallRules = firewallRules;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (firewallRules() != null) {
            firewallRules().forEach(e -> e.validate());
        }
    }
}
