// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.windowsesu.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.Resource;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.windowsesu.models.OsType;
import com.azure.resourcemanager.windowsesu.models.ProvisioningState;
import com.azure.resourcemanager.windowsesu.models.SupportType;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;
import java.util.Map;

/** MAK key details. */
@Fluent
public final class MultipleActivationKeyInner extends Resource {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(MultipleActivationKeyInner.class);

    /*
     * MAK key specific properties.
     */
    @JsonProperty(value = "properties")
    private MultipleActivationKeyProperties innerProperties;

    /**
     * Get the innerProperties property: MAK key specific properties.
     *
     * @return the innerProperties value.
     */
    private MultipleActivationKeyProperties innerProperties() {
        return this.innerProperties;
    }

    /** {@inheritDoc} */
    @Override
    public MultipleActivationKeyInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public MultipleActivationKeyInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Get the multipleActivationKey property: MAK 5x5 key.
     *
     * @return the multipleActivationKey value.
     */
    public String multipleActivationKey() {
        return this.innerProperties() == null ? null : this.innerProperties().multipleActivationKey();
    }

    /**
     * Get the expirationDate property: End of support of security updates activated by the MAK key.
     *
     * @return the expirationDate value.
     */
    public OffsetDateTime expirationDate() {
        return this.innerProperties() == null ? null : this.innerProperties().expirationDate();
    }

    /**
     * Get the osType property: Type of OS for which the key is requested.
     *
     * @return the osType value.
     */
    public OsType osType() {
        return this.innerProperties() == null ? null : this.innerProperties().osType();
    }

    /**
     * Set the osType property: Type of OS for which the key is requested.
     *
     * @param osType the osType value to set.
     * @return the MultipleActivationKeyInner object itself.
     */
    public MultipleActivationKeyInner withOsType(OsType osType) {
        if (this.innerProperties() == null) {
            this.innerProperties = new MultipleActivationKeyProperties();
        }
        this.innerProperties().withOsType(osType);
        return this;
    }

    /**
     * Get the supportType property: Type of support.
     *
     * @return the supportType value.
     */
    public SupportType supportType() {
        return this.innerProperties() == null ? null : this.innerProperties().supportType();
    }

    /**
     * Set the supportType property: Type of support.
     *
     * @param supportType the supportType value to set.
     * @return the MultipleActivationKeyInner object itself.
     */
    public MultipleActivationKeyInner withSupportType(SupportType supportType) {
        if (this.innerProperties() == null) {
            this.innerProperties = new MultipleActivationKeyProperties();
        }
        this.innerProperties().withSupportType(supportType);
        return this;
    }

    /**
     * Get the installedServerNumber property: Number of activations/servers using the MAK key.
     *
     * @return the installedServerNumber value.
     */
    public Integer installedServerNumber() {
        return this.innerProperties() == null ? null : this.innerProperties().installedServerNumber();
    }

    /**
     * Set the installedServerNumber property: Number of activations/servers using the MAK key.
     *
     * @param installedServerNumber the installedServerNumber value to set.
     * @return the MultipleActivationKeyInner object itself.
     */
    public MultipleActivationKeyInner withInstalledServerNumber(Integer installedServerNumber) {
        if (this.innerProperties() == null) {
            this.innerProperties = new MultipleActivationKeyProperties();
        }
        this.innerProperties().withInstalledServerNumber(installedServerNumber);
        return this;
    }

    /**
     * Get the agreementNumber property: Agreement number under which the key is requested.
     *
     * @return the agreementNumber value.
     */
    public String agreementNumber() {
        return this.innerProperties() == null ? null : this.innerProperties().agreementNumber();
    }

    /**
     * Set the agreementNumber property: Agreement number under which the key is requested.
     *
     * @param agreementNumber the agreementNumber value to set.
     * @return the MultipleActivationKeyInner object itself.
     */
    public MultipleActivationKeyInner withAgreementNumber(String agreementNumber) {
        if (this.innerProperties() == null) {
            this.innerProperties = new MultipleActivationKeyProperties();
        }
        this.innerProperties().withAgreementNumber(agreementNumber);
        return this;
    }

    /**
     * Get the isEligible property: &lt;code&gt; true &lt;/code&gt; if user has eligible on-premises Windows physical or
     * virtual machines, and that the requested key will only be used in their organization; &lt;code&gt; false
     * &lt;/code&gt; otherwise.
     *
     * @return the isEligible value.
     */
    public Boolean isEligible() {
        return this.innerProperties() == null ? null : this.innerProperties().isEligible();
    }

    /**
     * Set the isEligible property: &lt;code&gt; true &lt;/code&gt; if user has eligible on-premises Windows physical or
     * virtual machines, and that the requested key will only be used in their organization; &lt;code&gt; false
     * &lt;/code&gt; otherwise.
     *
     * @param isEligible the isEligible value to set.
     * @return the MultipleActivationKeyInner object itself.
     */
    public MultipleActivationKeyInner withIsEligible(Boolean isEligible) {
        if (this.innerProperties() == null) {
            this.innerProperties = new MultipleActivationKeyProperties();
        }
        this.innerProperties().withIsEligible(isEligible);
        return this;
    }

    /**
     * Get the provisioningState property: The provisioningState property.
     *
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }
}
