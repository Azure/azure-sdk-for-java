// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.windowsesu.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.windowsesu.fluent.MultipleActivationKeysClient;
import com.azure.resourcemanager.windowsesu.fluent.models.MultipleActivationKeyInner;
import com.azure.resourcemanager.windowsesu.models.MultipleActivationKeyList;
import com.azure.resourcemanager.windowsesu.models.MultipleActivationKeyUpdate;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in MultipleActivationKeysClient. */
public final class MultipleActivationKeysClientImpl implements MultipleActivationKeysClient {
    private final ClientLogger logger = new ClientLogger(MultipleActivationKeysClientImpl.class);

    /** The proxy service used to perform REST calls. */
    private final MultipleActivationKeysService service;

    /** The service client containing this operation class. */
    private final WindowsesuImpl client;

    /**
     * Initializes an instance of MultipleActivationKeysClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    MultipleActivationKeysClientImpl(WindowsesuImpl client) {
        this.service =
            RestProxy
                .create(MultipleActivationKeysService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for WindowsesuMultipleActivationKeys to be used by the proxy service to
     * perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "WindowsesuMultipleAc")
    private interface MultipleActivationKeysService {
        @Headers({"Content-Type: application/json"})
        @Get("/subscriptions/{subscriptionId}/providers/Microsoft.WindowsESU/multipleActivationKeys")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<MultipleActivationKeyList>> list(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.WindowsESU"
                + "/multipleActivationKeys")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<MultipleActivationKeyList>> listByResourceGroup(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.WindowsESU"
                + "/multipleActivationKeys/{multipleActivationKeyName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<MultipleActivationKeyInner>> getByResourceGroup(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @QueryParam("api-version") String apiVersion,
            @PathParam("multipleActivationKeyName") String multipleActivationKeyName,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Put(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.WindowsESU"
                + "/multipleActivationKeys/{multipleActivationKeyName}")
        @ExpectedResponses({200, 201})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> create(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @QueryParam("api-version") String apiVersion,
            @PathParam("multipleActivationKeyName") String multipleActivationKeyName,
            @BodyParam("application/json") MultipleActivationKeyInner multipleActivationKey,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Patch(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.WindowsESU"
                + "/multipleActivationKeys/{multipleActivationKeyName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<MultipleActivationKeyInner>> update(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @QueryParam("api-version") String apiVersion,
            @PathParam("multipleActivationKeyName") String multipleActivationKeyName,
            @BodyParam("application/json") MultipleActivationKeyUpdate multipleActivationKey,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Delete(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.WindowsESU"
                + "/multipleActivationKeys/{multipleActivationKeyName}")
        @ExpectedResponses({200, 204})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Void>> delete(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @QueryParam("api-version") String apiVersion,
            @PathParam("multipleActivationKeyName") String multipleActivationKeyName,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<MultipleActivationKeyList>> listNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<MultipleActivationKeyList>> listByResourceGroupNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * List all Multiple Activation Keys (MAK) created for a subscription.
     *
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of MAK keys.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<MultipleActivationKeyInner>> listSinglePageAsync() {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .list(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            this.client.getApiVersion(),
                            accept,
                            context))
            .<PagedResponse<MultipleActivationKeyInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * List all Multiple Activation Keys (MAK) created for a subscription.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of MAK keys.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<MultipleActivationKeyInner>> listSinglePageAsync(Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .list(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                this.client.getApiVersion(),
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * List all Multiple Activation Keys (MAK) created for a subscription.
     *
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of MAK keys.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<MultipleActivationKeyInner> listAsync() {
        return new PagedFlux<>(() -> listSinglePageAsync(), nextLink -> listNextSinglePageAsync(nextLink));
    }

    /**
     * List all Multiple Activation Keys (MAK) created for a subscription.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of MAK keys.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<MultipleActivationKeyInner> listAsync(Context context) {
        return new PagedFlux<>(
            () -> listSinglePageAsync(context), nextLink -> listNextSinglePageAsync(nextLink, context));
    }

    /**
     * List all Multiple Activation Keys (MAK) created for a subscription.
     *
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of MAK keys.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<MultipleActivationKeyInner> list() {
        return new PagedIterable<>(listAsync());
    }

    /**
     * List all Multiple Activation Keys (MAK) created for a subscription.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of MAK keys.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<MultipleActivationKeyInner> list(Context context) {
        return new PagedIterable<>(listAsync(context));
    }

    /**
     * List all Multiple Activation Keys (MAK) in a resource group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of MAK keys.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<MultipleActivationKeyInner>> listByResourceGroupSinglePageAsync(
        String resourceGroupName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .listByResourceGroup(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            this.client.getApiVersion(),
                            accept,
                            context))
            .<PagedResponse<MultipleActivationKeyInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * List all Multiple Activation Keys (MAK) in a resource group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of MAK keys.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<MultipleActivationKeyInner>> listByResourceGroupSinglePageAsync(
        String resourceGroupName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listByResourceGroup(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                this.client.getApiVersion(),
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * List all Multiple Activation Keys (MAK) in a resource group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of MAK keys.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<MultipleActivationKeyInner> listByResourceGroupAsync(String resourceGroupName) {
        return new PagedFlux<>(
            () -> listByResourceGroupSinglePageAsync(resourceGroupName),
            nextLink -> listByResourceGroupNextSinglePageAsync(nextLink));
    }

    /**
     * List all Multiple Activation Keys (MAK) in a resource group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of MAK keys.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<MultipleActivationKeyInner> listByResourceGroupAsync(String resourceGroupName, Context context) {
        return new PagedFlux<>(
            () -> listByResourceGroupSinglePageAsync(resourceGroupName, context),
            nextLink -> listByResourceGroupNextSinglePageAsync(nextLink, context));
    }

    /**
     * List all Multiple Activation Keys (MAK) in a resource group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of MAK keys.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<MultipleActivationKeyInner> listByResourceGroup(String resourceGroupName) {
        return new PagedIterable<>(listByResourceGroupAsync(resourceGroupName));
    }

    /**
     * List all Multiple Activation Keys (MAK) in a resource group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of MAK keys.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<MultipleActivationKeyInner> listByResourceGroup(String resourceGroupName, Context context) {
        return new PagedIterable<>(listByResourceGroupAsync(resourceGroupName, context));
    }

    /**
     * Get a MAK key.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param multipleActivationKeyName The name of the MAK key.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a MAK key.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<MultipleActivationKeyInner>> getByResourceGroupWithResponseAsync(
        String resourceGroupName, String multipleActivationKeyName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (multipleActivationKeyName == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter multipleActivationKeyName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getByResourceGroup(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            this.client.getApiVersion(),
                            multipleActivationKeyName,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get a MAK key.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param multipleActivationKeyName The name of the MAK key.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a MAK key.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<MultipleActivationKeyInner>> getByResourceGroupWithResponseAsync(
        String resourceGroupName, String multipleActivationKeyName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (multipleActivationKeyName == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter multipleActivationKeyName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .getByResourceGroup(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                this.client.getApiVersion(),
                multipleActivationKeyName,
                accept,
                context);
    }

    /**
     * Get a MAK key.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param multipleActivationKeyName The name of the MAK key.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a MAK key.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<MultipleActivationKeyInner> getByResourceGroupAsync(
        String resourceGroupName, String multipleActivationKeyName) {
        return getByResourceGroupWithResponseAsync(resourceGroupName, multipleActivationKeyName)
            .flatMap(
                (Response<MultipleActivationKeyInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Get a MAK key.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param multipleActivationKeyName The name of the MAK key.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a MAK key.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public MultipleActivationKeyInner getByResourceGroup(String resourceGroupName, String multipleActivationKeyName) {
        return getByResourceGroupAsync(resourceGroupName, multipleActivationKeyName).block();
    }

    /**
     * Get a MAK key.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param multipleActivationKeyName The name of the MAK key.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a MAK key.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<MultipleActivationKeyInner> getByResourceGroupWithResponse(
        String resourceGroupName, String multipleActivationKeyName, Context context) {
        return getByResourceGroupWithResponseAsync(resourceGroupName, multipleActivationKeyName, context).block();
    }

    /**
     * Create a MAK key.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param multipleActivationKeyName The name of the MAK key.
     * @param multipleActivationKey Details of the MAK key.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return mAK key details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createWithResponseAsync(
        String resourceGroupName, String multipleActivationKeyName, MultipleActivationKeyInner multipleActivationKey) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (multipleActivationKeyName == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter multipleActivationKeyName is required and cannot be null."));
        }
        if (multipleActivationKey == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter multipleActivationKey is required and cannot be null."));
        } else {
            multipleActivationKey.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .create(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            this.client.getApiVersion(),
                            multipleActivationKeyName,
                            multipleActivationKey,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Create a MAK key.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param multipleActivationKeyName The name of the MAK key.
     * @param multipleActivationKey Details of the MAK key.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return mAK key details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createWithResponseAsync(
        String resourceGroupName,
        String multipleActivationKeyName,
        MultipleActivationKeyInner multipleActivationKey,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (multipleActivationKeyName == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter multipleActivationKeyName is required and cannot be null."));
        }
        if (multipleActivationKey == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter multipleActivationKey is required and cannot be null."));
        } else {
            multipleActivationKey.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .create(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                this.client.getApiVersion(),
                multipleActivationKeyName,
                multipleActivationKey,
                accept,
                context);
    }

    /**
     * Create a MAK key.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param multipleActivationKeyName The name of the MAK key.
     * @param multipleActivationKey Details of the MAK key.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return mAK key details.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<MultipleActivationKeyInner>, MultipleActivationKeyInner> beginCreateAsync(
        String resourceGroupName, String multipleActivationKeyName, MultipleActivationKeyInner multipleActivationKey) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            createWithResponseAsync(resourceGroupName, multipleActivationKeyName, multipleActivationKey);
        return this
            .client
            .<MultipleActivationKeyInner, MultipleActivationKeyInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                MultipleActivationKeyInner.class,
                MultipleActivationKeyInner.class,
                this.client.getContext());
    }

    /**
     * Create a MAK key.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param multipleActivationKeyName The name of the MAK key.
     * @param multipleActivationKey Details of the MAK key.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return mAK key details.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<MultipleActivationKeyInner>, MultipleActivationKeyInner> beginCreateAsync(
        String resourceGroupName,
        String multipleActivationKeyName,
        MultipleActivationKeyInner multipleActivationKey,
        Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            createWithResponseAsync(resourceGroupName, multipleActivationKeyName, multipleActivationKey, context);
        return this
            .client
            .<MultipleActivationKeyInner, MultipleActivationKeyInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                MultipleActivationKeyInner.class,
                MultipleActivationKeyInner.class,
                context);
    }

    /**
     * Create a MAK key.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param multipleActivationKeyName The name of the MAK key.
     * @param multipleActivationKey Details of the MAK key.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return mAK key details.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<MultipleActivationKeyInner>, MultipleActivationKeyInner> beginCreate(
        String resourceGroupName, String multipleActivationKeyName, MultipleActivationKeyInner multipleActivationKey) {
        return beginCreateAsync(resourceGroupName, multipleActivationKeyName, multipleActivationKey).getSyncPoller();
    }

    /**
     * Create a MAK key.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param multipleActivationKeyName The name of the MAK key.
     * @param multipleActivationKey Details of the MAK key.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return mAK key details.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<MultipleActivationKeyInner>, MultipleActivationKeyInner> beginCreate(
        String resourceGroupName,
        String multipleActivationKeyName,
        MultipleActivationKeyInner multipleActivationKey,
        Context context) {
        return beginCreateAsync(resourceGroupName, multipleActivationKeyName, multipleActivationKey, context)
            .getSyncPoller();
    }

    /**
     * Create a MAK key.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param multipleActivationKeyName The name of the MAK key.
     * @param multipleActivationKey Details of the MAK key.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return mAK key details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<MultipleActivationKeyInner> createAsync(
        String resourceGroupName, String multipleActivationKeyName, MultipleActivationKeyInner multipleActivationKey) {
        return beginCreateAsync(resourceGroupName, multipleActivationKeyName, multipleActivationKey)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create a MAK key.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param multipleActivationKeyName The name of the MAK key.
     * @param multipleActivationKey Details of the MAK key.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return mAK key details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<MultipleActivationKeyInner> createAsync(
        String resourceGroupName,
        String multipleActivationKeyName,
        MultipleActivationKeyInner multipleActivationKey,
        Context context) {
        return beginCreateAsync(resourceGroupName, multipleActivationKeyName, multipleActivationKey, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create a MAK key.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param multipleActivationKeyName The name of the MAK key.
     * @param multipleActivationKey Details of the MAK key.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return mAK key details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public MultipleActivationKeyInner create(
        String resourceGroupName, String multipleActivationKeyName, MultipleActivationKeyInner multipleActivationKey) {
        return createAsync(resourceGroupName, multipleActivationKeyName, multipleActivationKey).block();
    }

    /**
     * Create a MAK key.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param multipleActivationKeyName The name of the MAK key.
     * @param multipleActivationKey Details of the MAK key.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return mAK key details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public MultipleActivationKeyInner create(
        String resourceGroupName,
        String multipleActivationKeyName,
        MultipleActivationKeyInner multipleActivationKey,
        Context context) {
        return createAsync(resourceGroupName, multipleActivationKeyName, multipleActivationKey, context).block();
    }

    /**
     * Update a MAK key.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param multipleActivationKeyName The name of the MAK key.
     * @param multipleActivationKey Details of the MAK key.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return mAK key details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<MultipleActivationKeyInner>> updateWithResponseAsync(
        String resourceGroupName, String multipleActivationKeyName, MultipleActivationKeyUpdate multipleActivationKey) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (multipleActivationKeyName == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter multipleActivationKeyName is required and cannot be null."));
        }
        if (multipleActivationKey == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter multipleActivationKey is required and cannot be null."));
        } else {
            multipleActivationKey.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .update(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            this.client.getApiVersion(),
                            multipleActivationKeyName,
                            multipleActivationKey,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Update a MAK key.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param multipleActivationKeyName The name of the MAK key.
     * @param multipleActivationKey Details of the MAK key.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return mAK key details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<MultipleActivationKeyInner>> updateWithResponseAsync(
        String resourceGroupName,
        String multipleActivationKeyName,
        MultipleActivationKeyUpdate multipleActivationKey,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (multipleActivationKeyName == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter multipleActivationKeyName is required and cannot be null."));
        }
        if (multipleActivationKey == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter multipleActivationKey is required and cannot be null."));
        } else {
            multipleActivationKey.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .update(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                this.client.getApiVersion(),
                multipleActivationKeyName,
                multipleActivationKey,
                accept,
                context);
    }

    /**
     * Update a MAK key.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param multipleActivationKeyName The name of the MAK key.
     * @param multipleActivationKey Details of the MAK key.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return mAK key details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<MultipleActivationKeyInner> updateAsync(
        String resourceGroupName, String multipleActivationKeyName, MultipleActivationKeyUpdate multipleActivationKey) {
        return updateWithResponseAsync(resourceGroupName, multipleActivationKeyName, multipleActivationKey)
            .flatMap(
                (Response<MultipleActivationKeyInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Update a MAK key.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param multipleActivationKeyName The name of the MAK key.
     * @param multipleActivationKey Details of the MAK key.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return mAK key details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public MultipleActivationKeyInner update(
        String resourceGroupName, String multipleActivationKeyName, MultipleActivationKeyUpdate multipleActivationKey) {
        return updateAsync(resourceGroupName, multipleActivationKeyName, multipleActivationKey).block();
    }

    /**
     * Update a MAK key.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param multipleActivationKeyName The name of the MAK key.
     * @param multipleActivationKey Details of the MAK key.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return mAK key details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<MultipleActivationKeyInner> updateWithResponse(
        String resourceGroupName,
        String multipleActivationKeyName,
        MultipleActivationKeyUpdate multipleActivationKey,
        Context context) {
        return updateWithResponseAsync(resourceGroupName, multipleActivationKeyName, multipleActivationKey, context)
            .block();
    }

    /**
     * Delete a MAK key.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param multipleActivationKeyName The name of the MAK key.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteWithResponseAsync(String resourceGroupName, String multipleActivationKeyName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (multipleActivationKeyName == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter multipleActivationKeyName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .delete(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            this.client.getApiVersion(),
                            multipleActivationKeyName,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Delete a MAK key.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param multipleActivationKeyName The name of the MAK key.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteWithResponseAsync(
        String resourceGroupName, String multipleActivationKeyName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (multipleActivationKeyName == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter multipleActivationKeyName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .delete(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                this.client.getApiVersion(),
                multipleActivationKeyName,
                accept,
                context);
    }

    /**
     * Delete a MAK key.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param multipleActivationKeyName The name of the MAK key.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String multipleActivationKeyName) {
        return deleteWithResponseAsync(resourceGroupName, multipleActivationKeyName)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Delete a MAK key.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param multipleActivationKeyName The name of the MAK key.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String multipleActivationKeyName) {
        deleteAsync(resourceGroupName, multipleActivationKeyName).block();
    }

    /**
     * Delete a MAK key.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param multipleActivationKeyName The name of the MAK key.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteWithResponse(
        String resourceGroupName, String multipleActivationKeyName, Context context) {
        return deleteWithResponseAsync(resourceGroupName, multipleActivationKeyName, context).block();
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of MAK keys.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<MultipleActivationKeyInner>> listNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<MultipleActivationKeyInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of MAK keys.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<MultipleActivationKeyInner>> listNextSinglePageAsync(String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of MAK keys.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<MultipleActivationKeyInner>> listByResourceGroupNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.listByResourceGroupNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<MultipleActivationKeyInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of MAK keys.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<MultipleActivationKeyInner>> listByResourceGroupNextSinglePageAsync(
        String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listByResourceGroupNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }
}
