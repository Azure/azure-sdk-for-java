// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.windowsesu.implementation;

import com.azure.core.management.Region;
import com.azure.core.util.Context;
import com.azure.resourcemanager.windowsesu.fluent.models.MultipleActivationKeyInner;
import com.azure.resourcemanager.windowsesu.models.MultipleActivationKey;
import com.azure.resourcemanager.windowsesu.models.MultipleActivationKeyUpdate;
import com.azure.resourcemanager.windowsesu.models.OsType;
import com.azure.resourcemanager.windowsesu.models.ProvisioningState;
import com.azure.resourcemanager.windowsesu.models.SupportType;
import java.time.OffsetDateTime;
import java.util.Collections;
import java.util.Map;

public final class MultipleActivationKeyImpl
    implements MultipleActivationKey, MultipleActivationKey.Definition, MultipleActivationKey.Update {
    private MultipleActivationKeyInner innerObject;

    private final com.azure.resourcemanager.windowsesu.WindowsesuManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public String multipleActivationKey() {
        return this.innerModel().multipleActivationKey();
    }

    public OffsetDateTime expirationDate() {
        return this.innerModel().expirationDate();
    }

    public OsType osType() {
        return this.innerModel().osType();
    }

    public SupportType supportType() {
        return this.innerModel().supportType();
    }

    public Integer installedServerNumber() {
        return this.innerModel().installedServerNumber();
    }

    public String agreementNumber() {
        return this.innerModel().agreementNumber();
    }

    public Boolean isEligible() {
        return this.innerModel().isEligible();
    }

    public ProvisioningState provisioningState() {
        return this.innerModel().provisioningState();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public MultipleActivationKeyInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.windowsesu.WindowsesuManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String multipleActivationKeyName;

    private MultipleActivationKeyUpdate updateMultipleActivationKey;

    public MultipleActivationKeyImpl withExistingResourceGroup(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public MultipleActivationKey create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getMultipleActivationKeys()
                .create(resourceGroupName, multipleActivationKeyName, this.innerModel(), Context.NONE);
        return this;
    }

    public MultipleActivationKey create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getMultipleActivationKeys()
                .create(resourceGroupName, multipleActivationKeyName, this.innerModel(), context);
        return this;
    }

    MultipleActivationKeyImpl(String name, com.azure.resourcemanager.windowsesu.WindowsesuManager serviceManager) {
        this.innerObject = new MultipleActivationKeyInner();
        this.serviceManager = serviceManager;
        this.multipleActivationKeyName = name;
    }

    public MultipleActivationKeyImpl update() {
        this.updateMultipleActivationKey = new MultipleActivationKeyUpdate();
        return this;
    }

    public MultipleActivationKey apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getMultipleActivationKeys()
                .updateWithResponse(
                    resourceGroupName, multipleActivationKeyName, updateMultipleActivationKey, Context.NONE)
                .getValue();
        return this;
    }

    public MultipleActivationKey apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getMultipleActivationKeys()
                .updateWithResponse(resourceGroupName, multipleActivationKeyName, updateMultipleActivationKey, context)
                .getValue();
        return this;
    }

    MultipleActivationKeyImpl(
        MultipleActivationKeyInner innerObject, com.azure.resourcemanager.windowsesu.WindowsesuManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.multipleActivationKeyName = Utils.getValueFromIdByName(innerObject.id(), "multipleActivationKeys");
    }

    public MultipleActivationKey refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getMultipleActivationKeys()
                .getByResourceGroupWithResponse(resourceGroupName, multipleActivationKeyName, Context.NONE)
                .getValue();
        return this;
    }

    public MultipleActivationKey refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getMultipleActivationKeys()
                .getByResourceGroupWithResponse(resourceGroupName, multipleActivationKeyName, context)
                .getValue();
        return this;
    }

    public MultipleActivationKeyImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public MultipleActivationKeyImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public MultipleActivationKeyImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateMultipleActivationKey.withTags(tags);
            return this;
        }
    }

    public MultipleActivationKeyImpl withOsType(OsType osType) {
        this.innerModel().withOsType(osType);
        return this;
    }

    public MultipleActivationKeyImpl withSupportType(SupportType supportType) {
        this.innerModel().withSupportType(supportType);
        return this;
    }

    public MultipleActivationKeyImpl withInstalledServerNumber(Integer installedServerNumber) {
        this.innerModel().withInstalledServerNumber(installedServerNumber);
        return this;
    }

    public MultipleActivationKeyImpl withAgreementNumber(String agreementNumber) {
        this.innerModel().withAgreementNumber(agreementNumber);
        return this;
    }

    public MultipleActivationKeyImpl withIsEligible(Boolean isEligible) {
        this.innerModel().withIsEligible(isEligible);
        return this;
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
