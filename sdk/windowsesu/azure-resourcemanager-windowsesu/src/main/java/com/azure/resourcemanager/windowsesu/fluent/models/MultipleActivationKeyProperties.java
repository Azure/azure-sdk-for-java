// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.windowsesu.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.windowsesu.models.OsType;
import com.azure.resourcemanager.windowsesu.models.ProvisioningState;
import com.azure.resourcemanager.windowsesu.models.SupportType;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;

/** MAK key specific properties. */
@Fluent
public final class MultipleActivationKeyProperties {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(MultipleActivationKeyProperties.class);

    /*
     * MAK 5x5 key.
     */
    @JsonProperty(value = "multipleActivationKey", access = JsonProperty.Access.WRITE_ONLY)
    private String multipleActivationKey;

    /*
     * End of support of security updates activated by the MAK key.
     */
    @JsonProperty(value = "expirationDate", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime expirationDate;

    /*
     * Type of OS for which the key is requested.
     */
    @JsonProperty(value = "osType")
    private OsType osType;

    /*
     * Type of support
     */
    @JsonProperty(value = "supportType")
    private SupportType supportType;

    /*
     * Number of activations/servers using the MAK key.
     */
    @JsonProperty(value = "installedServerNumber")
    private Integer installedServerNumber;

    /*
     * Agreement number under which the key is requested.
     */
    @JsonProperty(value = "agreementNumber")
    private String agreementNumber;

    /*
     * <code> true </code> if user has eligible on-premises Windows physical or
     * virtual machines, and that the requested key will only be used in their
     * organization; <code> false </code> otherwise.
     */
    @JsonProperty(value = "isEligible")
    private Boolean isEligible;

    /*
     * The provisioningState property.
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private ProvisioningState provisioningState;

    /**
     * Get the multipleActivationKey property: MAK 5x5 key.
     *
     * @return the multipleActivationKey value.
     */
    public String multipleActivationKey() {
        return this.multipleActivationKey;
    }

    /**
     * Get the expirationDate property: End of support of security updates activated by the MAK key.
     *
     * @return the expirationDate value.
     */
    public OffsetDateTime expirationDate() {
        return this.expirationDate;
    }

    /**
     * Get the osType property: Type of OS for which the key is requested.
     *
     * @return the osType value.
     */
    public OsType osType() {
        return this.osType;
    }

    /**
     * Set the osType property: Type of OS for which the key is requested.
     *
     * @param osType the osType value to set.
     * @return the MultipleActivationKeyProperties object itself.
     */
    public MultipleActivationKeyProperties withOsType(OsType osType) {
        this.osType = osType;
        return this;
    }

    /**
     * Get the supportType property: Type of support.
     *
     * @return the supportType value.
     */
    public SupportType supportType() {
        return this.supportType;
    }

    /**
     * Set the supportType property: Type of support.
     *
     * @param supportType the supportType value to set.
     * @return the MultipleActivationKeyProperties object itself.
     */
    public MultipleActivationKeyProperties withSupportType(SupportType supportType) {
        this.supportType = supportType;
        return this;
    }

    /**
     * Get the installedServerNumber property: Number of activations/servers using the MAK key.
     *
     * @return the installedServerNumber value.
     */
    public Integer installedServerNumber() {
        return this.installedServerNumber;
    }

    /**
     * Set the installedServerNumber property: Number of activations/servers using the MAK key.
     *
     * @param installedServerNumber the installedServerNumber value to set.
     * @return the MultipleActivationKeyProperties object itself.
     */
    public MultipleActivationKeyProperties withInstalledServerNumber(Integer installedServerNumber) {
        this.installedServerNumber = installedServerNumber;
        return this;
    }

    /**
     * Get the agreementNumber property: Agreement number under which the key is requested.
     *
     * @return the agreementNumber value.
     */
    public String agreementNumber() {
        return this.agreementNumber;
    }

    /**
     * Set the agreementNumber property: Agreement number under which the key is requested.
     *
     * @param agreementNumber the agreementNumber value to set.
     * @return the MultipleActivationKeyProperties object itself.
     */
    public MultipleActivationKeyProperties withAgreementNumber(String agreementNumber) {
        this.agreementNumber = agreementNumber;
        return this;
    }

    /**
     * Get the isEligible property: &lt;code&gt; true &lt;/code&gt; if user has eligible on-premises Windows physical or
     * virtual machines, and that the requested key will only be used in their organization; &lt;code&gt; false
     * &lt;/code&gt; otherwise.
     *
     * @return the isEligible value.
     */
    public Boolean isEligible() {
        return this.isEligible;
    }

    /**
     * Set the isEligible property: &lt;code&gt; true &lt;/code&gt; if user has eligible on-premises Windows physical or
     * virtual machines, and that the requested key will only be used in their organization; &lt;code&gt; false
     * &lt;/code&gt; otherwise.
     *
     * @param isEligible the isEligible value to set.
     * @return the MultipleActivationKeyProperties object itself.
     */
    public MultipleActivationKeyProperties withIsEligible(Boolean isEligible) {
        this.isEligible = isEligible;
        return this;
    }

    /**
     * Get the provisioningState property: The provisioningState property.
     *
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
