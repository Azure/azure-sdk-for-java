// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.windowsesu.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.windowsesu.fluent.MultipleActivationKeysClient;
import com.azure.resourcemanager.windowsesu.fluent.models.MultipleActivationKeyInner;
import com.azure.resourcemanager.windowsesu.models.MultipleActivationKey;
import com.azure.resourcemanager.windowsesu.models.MultipleActivationKeys;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class MultipleActivationKeysImpl implements MultipleActivationKeys {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(MultipleActivationKeysImpl.class);

    private final MultipleActivationKeysClient innerClient;

    private final com.azure.resourcemanager.windowsesu.WindowsesuManager serviceManager;

    public MultipleActivationKeysImpl(
        MultipleActivationKeysClient innerClient,
        com.azure.resourcemanager.windowsesu.WindowsesuManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<MultipleActivationKey> list() {
        PagedIterable<MultipleActivationKeyInner> inner = this.serviceClient().list();
        return Utils.mapPage(inner, inner1 -> new MultipleActivationKeyImpl(inner1, this.manager()));
    }

    public PagedIterable<MultipleActivationKey> list(Context context) {
        PagedIterable<MultipleActivationKeyInner> inner = this.serviceClient().list(context);
        return Utils.mapPage(inner, inner1 -> new MultipleActivationKeyImpl(inner1, this.manager()));
    }

    public PagedIterable<MultipleActivationKey> listByResourceGroup(String resourceGroupName) {
        PagedIterable<MultipleActivationKeyInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName);
        return Utils.mapPage(inner, inner1 -> new MultipleActivationKeyImpl(inner1, this.manager()));
    }

    public PagedIterable<MultipleActivationKey> listByResourceGroup(String resourceGroupName, Context context) {
        PagedIterable<MultipleActivationKeyInner> inner =
            this.serviceClient().listByResourceGroup(resourceGroupName, context);
        return Utils.mapPage(inner, inner1 -> new MultipleActivationKeyImpl(inner1, this.manager()));
    }

    public MultipleActivationKey getByResourceGroup(String resourceGroupName, String multipleActivationKeyName) {
        MultipleActivationKeyInner inner =
            this.serviceClient().getByResourceGroup(resourceGroupName, multipleActivationKeyName);
        if (inner != null) {
            return new MultipleActivationKeyImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<MultipleActivationKey> getByResourceGroupWithResponse(
        String resourceGroupName, String multipleActivationKeyName, Context context) {
        Response<MultipleActivationKeyInner> inner =
            this.serviceClient().getByResourceGroupWithResponse(resourceGroupName, multipleActivationKeyName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new MultipleActivationKeyImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void deleteByResourceGroup(String resourceGroupName, String multipleActivationKeyName) {
        this.serviceClient().delete(resourceGroupName, multipleActivationKeyName);
    }

    public Response<Void> deleteWithResponse(
        String resourceGroupName, String multipleActivationKeyName, Context context) {
        return this.serviceClient().deleteWithResponse(resourceGroupName, multipleActivationKeyName, context);
    }

    public MultipleActivationKey getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String multipleActivationKeyName = Utils.getValueFromIdByName(id, "multipleActivationKeys");
        if (multipleActivationKeyName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'multipleActivationKeys'.",
                                id)));
        }
        return this
            .getByResourceGroupWithResponse(resourceGroupName, multipleActivationKeyName, Context.NONE)
            .getValue();
    }

    public Response<MultipleActivationKey> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String multipleActivationKeyName = Utils.getValueFromIdByName(id, "multipleActivationKeys");
        if (multipleActivationKeyName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'multipleActivationKeys'.",
                                id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, multipleActivationKeyName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String multipleActivationKeyName = Utils.getValueFromIdByName(id, "multipleActivationKeys");
        if (multipleActivationKeyName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'multipleActivationKeys'.",
                                id)));
        }
        this.deleteWithResponse(resourceGroupName, multipleActivationKeyName, Context.NONE);
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String multipleActivationKeyName = Utils.getValueFromIdByName(id, "multipleActivationKeys");
        if (multipleActivationKeyName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'multipleActivationKeys'.",
                                id)));
        }
        return this.deleteWithResponse(resourceGroupName, multipleActivationKeyName, context);
    }

    private MultipleActivationKeysClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.windowsesu.WindowsesuManager manager() {
        return this.serviceManager;
    }

    public MultipleActivationKeyImpl define(String name) {
        return new MultipleActivationKeyImpl(name, this.manager());
    }
}
