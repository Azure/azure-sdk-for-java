/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.postgresql.v2017_12_01_preview.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.postgresql.v2017_12_01_preview.ServerAdministrators;
import rx.Observable;
import rx.functions.Func1;
import java.util.List;
import com.microsoft.azure.management.postgresql.v2017_12_01_preview.ServerAdministratorResource;

class ServerAdministratorsImpl extends WrapperImpl<ServerAdministratorsInner> implements ServerAdministrators {
    private final DBforPostgreSQLManager manager;

    ServerAdministratorsImpl(DBforPostgreSQLManager manager) {
        super(manager.inner().serverAdministrators());
        this.manager = manager;
    }

    public DBforPostgreSQLManager manager() {
        return this.manager;
    }

    private ServerAdministratorResourceImpl wrapModel(ServerAdministratorResourceInner inner) {
        return  new ServerAdministratorResourceImpl(inner, manager());
    }

    @Override
    public Observable<ServerAdministratorResource> getAsync(String resourceGroupName, String serverName) {
        ServerAdministratorsInner client = this.inner();
        return client.getAsync(resourceGroupName, serverName)
        .map(new Func1<ServerAdministratorResourceInner, ServerAdministratorResource>() {
            @Override
            public ServerAdministratorResource call(ServerAdministratorResourceInner inner) {
                return new ServerAdministratorResourceImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<ServerAdministratorResource> createOrUpdateAsync(String resourceGroupName, String serverName, ServerAdministratorResourceInner properties) {
        ServerAdministratorsInner client = this.inner();
        return client.createOrUpdateAsync(resourceGroupName, serverName, properties)
        .map(new Func1<ServerAdministratorResourceInner, ServerAdministratorResource>() {
            @Override
            public ServerAdministratorResource call(ServerAdministratorResourceInner inner) {
                return new ServerAdministratorResourceImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<ServerAdministratorResource> deleteAsync(String resourceGroupName, String serverName) {
        ServerAdministratorsInner client = this.inner();
        return client.deleteAsync(resourceGroupName, serverName)
        .map(new Func1<ServerAdministratorResourceInner, ServerAdministratorResource>() {
            @Override
            public ServerAdministratorResource call(ServerAdministratorResourceInner inner) {
                return new ServerAdministratorResourceImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<ServerAdministratorResource> listByServerAsync(String resourceGroupName, String serverName) {
        ServerAdministratorsInner client = this.inner();
        return client.listByServerAsync(resourceGroupName, serverName)
        .flatMap(new Func1<List<ServerAdministratorResourceInner>, Observable<ServerAdministratorResourceInner>>() {
            @Override
            public Observable<ServerAdministratorResourceInner> call(List<ServerAdministratorResourceInner> innerList) {
                return Observable.from(innerList);
            }
        })
        .map(new Func1<ServerAdministratorResourceInner, ServerAdministratorResource>() {
            @Override
            public ServerAdministratorResource call(ServerAdministratorResourceInner inner) {
                return wrapModel(inner);
            }
        });
    }

}
