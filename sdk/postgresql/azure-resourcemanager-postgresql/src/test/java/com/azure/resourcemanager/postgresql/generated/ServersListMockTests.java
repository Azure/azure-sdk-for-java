// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.postgresql.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.postgresql.PostgreSqlManager;
import com.azure.resourcemanager.postgresql.models.GeoRedundantBackup;
import com.azure.resourcemanager.postgresql.models.IdentityType;
import com.azure.resourcemanager.postgresql.models.InfrastructureEncryption;
import com.azure.resourcemanager.postgresql.models.MinimalTlsVersionEnum;
import com.azure.resourcemanager.postgresql.models.PublicNetworkAccessEnum;
import com.azure.resourcemanager.postgresql.models.Server;
import com.azure.resourcemanager.postgresql.models.ServerState;
import com.azure.resourcemanager.postgresql.models.ServerVersion;
import com.azure.resourcemanager.postgresql.models.SkuTier;
import com.azure.resourcemanager.postgresql.models.SslEnforcementEnum;
import com.azure.resourcemanager.postgresql.models.StorageAutogrow;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ServersListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"identity\":{\"principalId\":\"b2d96fc6-b04b-4342-8218-0e07ad7e78cf\",\"type\":\"SystemAssigned\",\"tenantId\":\"4d061145-a079-4a69-a4f0-6a6aab85bf33\"},\"sku\":{\"name\":\"nd\",\"tier\":\"MemoryOptimized\",\"capacity\":906567669,\"size\":\"o\",\"family\":\"kcdyhbpk\"},\"properties\":{\"administratorLogin\":\"dreqnovvqf\",\"version\":\"9.6\",\"sslEnforcement\":\"Enabled\",\"minimalTlsVersion\":\"TLS1_1\",\"byokEnforcement\":\"uwsyrsndsytgadg\",\"infrastructureEncryption\":\"Disabled\",\"userVisibleState\":\"Disabled\",\"fullyQualifiedDomainName\":\"neqn\",\"earliestRestoreDate\":\"2021-12-02T13:04:58Z\",\"storageProfile\":{\"backupRetentionDays\":1854977873,\"geoRedundantBackup\":\"Enabled\",\"storageMB\":1564647724,\"storageAutogrow\":\"Enabled\"},\"replicationRole\":\"kacewiipfp\",\"masterServerId\":\"ji\",\"replicaCapacity\":1113434704,\"publicNetworkAccess\":\"Enabled\",\"privateEndpointConnections\":[{\"id\":\"qkvpuvksgplsakn\",\"properties\":{\"privateEndpoint\":{},\"privateLinkServiceConnectionState\":{\"status\":\"Approved\",\"description\":\"n\"},\"provisioningState\":\"Dropping\"}},{\"id\":\"uopxodlqiyntor\",\"properties\":{\"privateEndpoint\":{},\"privateLinkServiceConnectionState\":{\"status\":\"Pending\",\"description\":\"osjswsr\"},\"provisioningState\":\"Dropping\"}},{\"id\":\"zrpzb\",\"properties\":{\"privateEndpoint\":{},\"privateLinkServiceConnectionState\":{\"status\":\"Disconnected\",\"description\":\"qzqioxiysuiizy\"},\"provisioningState\":\"Approving\"}},{\"id\":\"yatrwy\",\"properties\":{\"privateEndpoint\":{},\"privateLinkServiceConnectionState\":{\"status\":\"Approved\",\"description\":\"zyh\"},\"provisioningState\":\"Approving\"}}]},\"location\":\"smypyynpc\",\"tags\":{\"nsorgjhxbldt\":\"mnzgmwznmabi\",\"kotl\":\"wwrlkdmtncv\",\"gsyocogj\":\"xdy\",\"kvci\":\"tdtbnnhadooc\"},\"id\":\"hnvpamqgxq\",\"name\":\"u\",\"type\":\"zikywgg\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        PostgreSqlManager manager = PostgreSqlManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<Server> response = manager.servers().list(com.azure.core.util.Context.NONE);

        Assertions.assertEquals("smypyynpc", response.iterator().next().location());
        Assertions.assertEquals("mnzgmwznmabi", response.iterator().next().tags().get("nsorgjhxbldt"));
        Assertions.assertEquals(IdentityType.SYSTEM_ASSIGNED, response.iterator().next().identity().type());
        Assertions.assertEquals("nd", response.iterator().next().sku().name());
        Assertions.assertEquals(SkuTier.MEMORY_OPTIMIZED, response.iterator().next().sku().tier());
        Assertions.assertEquals(906567669, response.iterator().next().sku().capacity());
        Assertions.assertEquals("o", response.iterator().next().sku().size());
        Assertions.assertEquals("kcdyhbpk", response.iterator().next().sku().family());
        Assertions.assertEquals("dreqnovvqf", response.iterator().next().administratorLogin());
        Assertions.assertEquals(ServerVersion.NINE_SIX, response.iterator().next().version());
        Assertions.assertEquals(SslEnforcementEnum.ENABLED, response.iterator().next().sslEnforcement());
        Assertions.assertEquals(MinimalTlsVersionEnum.TLS1_1, response.iterator().next().minimalTlsVersion());
        Assertions.assertEquals(InfrastructureEncryption.DISABLED,
            response.iterator().next().infrastructureEncryption());
        Assertions.assertEquals(ServerState.DISABLED, response.iterator().next().userVisibleState());
        Assertions.assertEquals("neqn", response.iterator().next().fullyQualifiedDomainName());
        Assertions.assertEquals(OffsetDateTime.parse("2021-12-02T13:04:58Z"),
            response.iterator().next().earliestRestoreDate());
        Assertions.assertEquals(1854977873, response.iterator().next().storageProfile().backupRetentionDays());
        Assertions.assertEquals(GeoRedundantBackup.ENABLED,
            response.iterator().next().storageProfile().geoRedundantBackup());
        Assertions.assertEquals(1564647724, response.iterator().next().storageProfile().storageMB());
        Assertions.assertEquals(StorageAutogrow.ENABLED, response.iterator().next().storageProfile().storageAutogrow());
        Assertions.assertEquals("kacewiipfp", response.iterator().next().replicationRole());
        Assertions.assertEquals("ji", response.iterator().next().masterServerId());
        Assertions.assertEquals(1113434704, response.iterator().next().replicaCapacity());
        Assertions.assertEquals(PublicNetworkAccessEnum.ENABLED, response.iterator().next().publicNetworkAccess());
    }
}
