// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.postgresql.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.postgresql.PostgreSqlManager;
import com.azure.resourcemanager.postgresql.models.PrivateEndpointConnection;
import com.azure.resourcemanager.postgresql.models.PrivateEndpointProperty;
import com.azure.resourcemanager.postgresql.models.PrivateLinkServiceConnectionStateProperty;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class PrivateEndpointConnectionsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"privateEndpoint\":{\"id\":\"jbabwidf\"},\"privateLinkServiceConnectionState\":{\"status\":\"sspuunnoxyhkx\",\"description\":\"qddrihpfhoqcaae\",\"actionsRequired\":\"aomdjvlpjxx\"},\"provisioningState\":\"Succeeded\"},\"id\":\"geivsiykzkdncj\",\"name\":\"xonbzoggculapz\",\"type\":\"y\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        PostgreSqlManager manager = PostgreSqlManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PrivateEndpointConnection response = manager.privateEndpointConnections()
            .define("yhddvia")
            .withExistingServer("bdgiogsjk", "nwqjnoba")
            .withPrivateEndpoint(new PrivateEndpointProperty().withId("n"))
            .withPrivateLinkServiceConnectionState(
                new PrivateLinkServiceConnectionStateProperty().withStatus("tfpmvmemfnczdw")
                    .withDescription("vbalxlllc"))
            .create();

        Assertions.assertEquals("jbabwidf", response.privateEndpoint().id());
        Assertions.assertEquals("sspuunnoxyhkx", response.privateLinkServiceConnectionState().status());
        Assertions.assertEquals("qddrihpfhoqcaae", response.privateLinkServiceConnectionState().description());
    }
}
