// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.postgresql.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.postgresql.models.GeoRedundantBackup;
import com.azure.resourcemanager.postgresql.models.IdentityType;
import com.azure.resourcemanager.postgresql.models.InfrastructureEncryption;
import com.azure.resourcemanager.postgresql.models.MinimalTlsVersionEnum;
import com.azure.resourcemanager.postgresql.models.PublicNetworkAccessEnum;
import com.azure.resourcemanager.postgresql.models.ResourceIdentity;
import com.azure.resourcemanager.postgresql.models.ServerForCreate;
import com.azure.resourcemanager.postgresql.models.ServerPropertiesForCreate;
import com.azure.resourcemanager.postgresql.models.ServerVersion;
import com.azure.resourcemanager.postgresql.models.Sku;
import com.azure.resourcemanager.postgresql.models.SkuTier;
import com.azure.resourcemanager.postgresql.models.SslEnforcementEnum;
import com.azure.resourcemanager.postgresql.models.StorageAutogrow;
import com.azure.resourcemanager.postgresql.models.StorageProfile;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ServerForCreateTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ServerForCreate model = BinaryData.fromString(
            "{\"identity\":{\"principalId\":\"42ca3871-bf2a-485e-94a6-4e198a8cdabb\",\"type\":\"SystemAssigned\",\"tenantId\":\"f7b1951b-c394-441f-bee2-03f38009ad0a\"},\"sku\":{\"name\":\"gjxpybczmehmt\",\"tier\":\"Basic\",\"capacity\":329045942,\"size\":\"h\",\"family\":\"pidgsybbejhphoyc\"},\"properties\":{\"createMode\":\"ServerPropertiesForCreate\",\"version\":\"10\",\"sslEnforcement\":\"Disabled\",\"minimalTlsVersion\":\"TLS1_2\",\"infrastructureEncryption\":\"Disabled\",\"publicNetworkAccess\":\"Enabled\",\"storageProfile\":{\"backupRetentionDays\":589802492,\"geoRedundantBackup\":\"Enabled\",\"storageMB\":1819090851,\"storageAutogrow\":\"Enabled\"}},\"location\":\"tbmufpo\",\"tags\":{\"qsoqijgkd\":\"izhwlrxy\"}}")
            .toObject(ServerForCreate.class);
        Assertions.assertEquals(IdentityType.SYSTEM_ASSIGNED, model.identity().type());
        Assertions.assertEquals("gjxpybczmehmt", model.sku().name());
        Assertions.assertEquals(SkuTier.BASIC, model.sku().tier());
        Assertions.assertEquals(329045942, model.sku().capacity());
        Assertions.assertEquals("h", model.sku().size());
        Assertions.assertEquals("pidgsybbejhphoyc", model.sku().family());
        Assertions.assertEquals(ServerVersion.ONE_ZERO, model.properties().version());
        Assertions.assertEquals(SslEnforcementEnum.DISABLED, model.properties().sslEnforcement());
        Assertions.assertEquals(MinimalTlsVersionEnum.TLS1_2, model.properties().minimalTlsVersion());
        Assertions.assertEquals(InfrastructureEncryption.DISABLED, model.properties().infrastructureEncryption());
        Assertions.assertEquals(PublicNetworkAccessEnum.ENABLED, model.properties().publicNetworkAccess());
        Assertions.assertEquals(589802492, model.properties().storageProfile().backupRetentionDays());
        Assertions.assertEquals(GeoRedundantBackup.ENABLED, model.properties().storageProfile().geoRedundantBackup());
        Assertions.assertEquals(1819090851, model.properties().storageProfile().storageMB());
        Assertions.assertEquals(StorageAutogrow.ENABLED, model.properties().storageProfile().storageAutogrow());
        Assertions.assertEquals("tbmufpo", model.location());
        Assertions.assertEquals("izhwlrxy", model.tags().get("qsoqijgkd"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ServerForCreate model
            = new ServerForCreate().withIdentity(new ResourceIdentity().withType(IdentityType.SYSTEM_ASSIGNED))
                .withSku(new Sku().withName("gjxpybczmehmt")
                    .withTier(SkuTier.BASIC)
                    .withCapacity(329045942)
                    .withSize("h")
                    .withFamily("pidgsybbejhphoyc"))
                .withProperties(new ServerPropertiesForCreate().withVersion(ServerVersion.ONE_ZERO)
                    .withSslEnforcement(SslEnforcementEnum.DISABLED)
                    .withMinimalTlsVersion(MinimalTlsVersionEnum.TLS1_2)
                    .withInfrastructureEncryption(InfrastructureEncryption.DISABLED)
                    .withPublicNetworkAccess(PublicNetworkAccessEnum.ENABLED)
                    .withStorageProfile(new StorageProfile().withBackupRetentionDays(589802492)
                        .withGeoRedundantBackup(GeoRedundantBackup.ENABLED)
                        .withStorageMB(1819090851)
                        .withStorageAutogrow(StorageAutogrow.ENABLED)))
                .withLocation("tbmufpo")
                .withTags(mapOf("qsoqijgkd", "izhwlrxy"));
        model = BinaryData.fromObject(model).toObject(ServerForCreate.class);
        Assertions.assertEquals(IdentityType.SYSTEM_ASSIGNED, model.identity().type());
        Assertions.assertEquals("gjxpybczmehmt", model.sku().name());
        Assertions.assertEquals(SkuTier.BASIC, model.sku().tier());
        Assertions.assertEquals(329045942, model.sku().capacity());
        Assertions.assertEquals("h", model.sku().size());
        Assertions.assertEquals("pidgsybbejhphoyc", model.sku().family());
        Assertions.assertEquals(ServerVersion.ONE_ZERO, model.properties().version());
        Assertions.assertEquals(SslEnforcementEnum.DISABLED, model.properties().sslEnforcement());
        Assertions.assertEquals(MinimalTlsVersionEnum.TLS1_2, model.properties().minimalTlsVersion());
        Assertions.assertEquals(InfrastructureEncryption.DISABLED, model.properties().infrastructureEncryption());
        Assertions.assertEquals(PublicNetworkAccessEnum.ENABLED, model.properties().publicNetworkAccess());
        Assertions.assertEquals(589802492, model.properties().storageProfile().backupRetentionDays());
        Assertions.assertEquals(GeoRedundantBackup.ENABLED, model.properties().storageProfile().geoRedundantBackup());
        Assertions.assertEquals(1819090851, model.properties().storageProfile().storageMB());
        Assertions.assertEquals(StorageAutogrow.ENABLED, model.properties().storageProfile().storageAutogrow());
        Assertions.assertEquals("tbmufpo", model.location());
        Assertions.assertEquals("izhwlrxy", model.tags().get("qsoqijgkd"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
