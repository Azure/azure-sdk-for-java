// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.postgresql.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.postgresql.fluent.models.ServerInner;
import com.azure.resourcemanager.postgresql.models.GeoRedundantBackup;
import com.azure.resourcemanager.postgresql.models.IdentityType;
import com.azure.resourcemanager.postgresql.models.InfrastructureEncryption;
import com.azure.resourcemanager.postgresql.models.MinimalTlsVersionEnum;
import com.azure.resourcemanager.postgresql.models.PublicNetworkAccessEnum;
import com.azure.resourcemanager.postgresql.models.ResourceIdentity;
import com.azure.resourcemanager.postgresql.models.ServerListResult;
import com.azure.resourcemanager.postgresql.models.ServerState;
import com.azure.resourcemanager.postgresql.models.ServerVersion;
import com.azure.resourcemanager.postgresql.models.Sku;
import com.azure.resourcemanager.postgresql.models.SkuTier;
import com.azure.resourcemanager.postgresql.models.SslEnforcementEnum;
import com.azure.resourcemanager.postgresql.models.StorageAutogrow;
import com.azure.resourcemanager.postgresql.models.StorageProfile;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ServerListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ServerListResult model = BinaryData.fromString(
            "{\"value\":[{\"identity\":{\"principalId\":\"2577697c-0eb6-45c6-b334-4ea45540c364\",\"type\":\"SystemAssigned\",\"tenantId\":\"34efcf9a-fa85-463d-8712-4c3cf76a462f\"},\"sku\":{\"name\":\"aeqjhqjbasvms\",\"tier\":\"Basic\",\"capacity\":2084272233,\"size\":\"gsntnbybkzgcwr\",\"family\":\"lxxwrljdouskc\"},\"properties\":{\"administratorLogin\":\"ocrcjdk\",\"version\":\"11\",\"sslEnforcement\":\"Disabled\",\"minimalTlsVersion\":\"TLSEnforcementDisabled\",\"byokEnforcement\":\"biksq\",\"infrastructureEncryption\":\"Enabled\",\"userVisibleState\":\"Disabled\",\"fullyQualifiedDomainName\":\"inqpjwnzll\",\"earliestRestoreDate\":\"2020-12-23T02:21:43Z\",\"storageProfile\":{\"backupRetentionDays\":450622751,\"geoRedundantBackup\":\"Disabled\",\"storageMB\":1530688943,\"storageAutogrow\":\"Disabled\"},\"replicationRole\":\"abkyqduujitcjcz\",\"masterServerId\":\"evndh\",\"replicaCapacity\":968287955,\"publicNetworkAccess\":\"Enabled\",\"privateEndpointConnections\":[{\"id\":\"dsbdkvwrwjf\",\"properties\":{}},{\"id\":\"nhutjeltmrldhugj\",\"properties\":{}},{\"id\":\"atqxho\",\"properties\":{}}]},\"location\":\"geablgphuticndvk\",\"tags\":{\"k\":\"wyiftyhxhur\",\"kjfkg\":\"tyxolniwpwc\",\"plwckbas\":\"awxklr\"},\"id\":\"ypnddhsgcb\",\"name\":\"cph\",\"type\":\"jkot\"},{\"identity\":{\"principalId\":\"6b521fd4-9e7f-4773-a933-bfcb5bee870a\",\"type\":\"SystemAssigned\",\"tenantId\":\"6959f769-3d82-4f8d-8a75-b783d8234784\"},\"sku\":{\"name\":\"zndlikwy\",\"tier\":\"Basic\",\"capacity\":1308251370,\"size\":\"bmadgak\",\"family\":\"s\"},\"properties\":{\"administratorLogin\":\"bzqqedqytbciq\",\"version\":\"9.5\",\"sslEnforcement\":\"Disabled\",\"minimalTlsVersion\":\"TLS1_1\",\"byokEnforcement\":\"kzsmodm\",\"infrastructureEncryption\":\"Enabled\",\"userVisibleState\":\"Disabled\",\"fullyQualifiedDomainName\":\"b\",\"earliestRestoreDate\":\"2021-03-24T00:19:46Z\",\"storageProfile\":{\"backupRetentionDays\":2110455897,\"geoRedundantBackup\":\"Enabled\",\"storageMB\":1519721589,\"storageAutogrow\":\"Enabled\"},\"replicationRole\":\"spwgcuertumkdosv\",\"masterServerId\":\"hbmdgbbjfdd\",\"replicaCapacity\":1359237516,\"publicNetworkAccess\":\"Enabled\",\"privateEndpointConnections\":[{\"id\":\"pbhtqqrolfpfpsa\",\"properties\":{}},{\"id\":\"qux\",\"properties\":{}},{\"id\":\"yjgzjaoyfhrtxiln\",\"properties\":{}}]},\"location\":\"kujysvlejuvfq\",\"tags\":{\"jvtbvpyss\":\"lyxwjkcprbnwbx\",\"wzwbnguitn\":\"dnrujqguhmuouqfp\",\"x\":\"uizga\",\"hr\":\"fizuckyf\"},\"id\":\"idf\",\"name\":\"zwdzuh\",\"type\":\"ymwisdkft\"}]}")
            .toObject(ServerListResult.class);
        Assertions.assertEquals("geablgphuticndvk", model.value().get(0).location());
        Assertions.assertEquals("wyiftyhxhur", model.value().get(0).tags().get("k"));
        Assertions.assertEquals(IdentityType.SYSTEM_ASSIGNED, model.value().get(0).identity().type());
        Assertions.assertEquals("aeqjhqjbasvms", model.value().get(0).sku().name());
        Assertions.assertEquals(SkuTier.BASIC, model.value().get(0).sku().tier());
        Assertions.assertEquals(2084272233, model.value().get(0).sku().capacity());
        Assertions.assertEquals("gsntnbybkzgcwr", model.value().get(0).sku().size());
        Assertions.assertEquals("lxxwrljdouskc", model.value().get(0).sku().family());
        Assertions.assertEquals("ocrcjdk", model.value().get(0).administratorLogin());
        Assertions.assertEquals(ServerVersion.ONE_ONE, model.value().get(0).version());
        Assertions.assertEquals(SslEnforcementEnum.DISABLED, model.value().get(0).sslEnforcement());
        Assertions.assertEquals(MinimalTlsVersionEnum.TLSENFORCEMENT_DISABLED,
            model.value().get(0).minimalTlsVersion());
        Assertions.assertEquals(InfrastructureEncryption.ENABLED, model.value().get(0).infrastructureEncryption());
        Assertions.assertEquals(ServerState.DISABLED, model.value().get(0).userVisibleState());
        Assertions.assertEquals("inqpjwnzll", model.value().get(0).fullyQualifiedDomainName());
        Assertions.assertEquals(OffsetDateTime.parse("2020-12-23T02:21:43Z"),
            model.value().get(0).earliestRestoreDate());
        Assertions.assertEquals(450622751, model.value().get(0).storageProfile().backupRetentionDays());
        Assertions.assertEquals(GeoRedundantBackup.DISABLED,
            model.value().get(0).storageProfile().geoRedundantBackup());
        Assertions.assertEquals(1530688943, model.value().get(0).storageProfile().storageMB());
        Assertions.assertEquals(StorageAutogrow.DISABLED, model.value().get(0).storageProfile().storageAutogrow());
        Assertions.assertEquals("abkyqduujitcjcz", model.value().get(0).replicationRole());
        Assertions.assertEquals("evndh", model.value().get(0).masterServerId());
        Assertions.assertEquals(968287955, model.value().get(0).replicaCapacity());
        Assertions.assertEquals(PublicNetworkAccessEnum.ENABLED, model.value().get(0).publicNetworkAccess());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ServerListResult model = new ServerListResult().withValue(Arrays.asList(
            new ServerInner().withLocation("geablgphuticndvk")
                .withTags(mapOf("k", "wyiftyhxhur", "kjfkg", "tyxolniwpwc", "plwckbas", "awxklr"))
                .withIdentity(new ResourceIdentity().withType(IdentityType.SYSTEM_ASSIGNED))
                .withSku(new Sku().withName("aeqjhqjbasvms")
                    .withTier(SkuTier.BASIC)
                    .withCapacity(2084272233)
                    .withSize("gsntnbybkzgcwr")
                    .withFamily("lxxwrljdouskc"))
                .withAdministratorLogin("ocrcjdk")
                .withVersion(ServerVersion.ONE_ONE)
                .withSslEnforcement(SslEnforcementEnum.DISABLED)
                .withMinimalTlsVersion(MinimalTlsVersionEnum.TLSENFORCEMENT_DISABLED)
                .withInfrastructureEncryption(InfrastructureEncryption.ENABLED)
                .withUserVisibleState(ServerState.DISABLED)
                .withFullyQualifiedDomainName("inqpjwnzll")
                .withEarliestRestoreDate(OffsetDateTime.parse("2020-12-23T02:21:43Z"))
                .withStorageProfile(new StorageProfile().withBackupRetentionDays(450622751)
                    .withGeoRedundantBackup(GeoRedundantBackup.DISABLED)
                    .withStorageMB(1530688943)
                    .withStorageAutogrow(StorageAutogrow.DISABLED))
                .withReplicationRole("abkyqduujitcjcz")
                .withMasterServerId("evndh")
                .withReplicaCapacity(968287955)
                .withPublicNetworkAccess(PublicNetworkAccessEnum.ENABLED),
            new ServerInner().withLocation("kujysvlejuvfq")
                .withTags(mapOf("jvtbvpyss", "lyxwjkcprbnwbx", "wzwbnguitn", "dnrujqguhmuouqfp", "x", "uizga", "hr",
                    "fizuckyf"))
                .withIdentity(new ResourceIdentity().withType(IdentityType.SYSTEM_ASSIGNED))
                .withSku(new Sku().withName("zndlikwy")
                    .withTier(SkuTier.BASIC)
                    .withCapacity(1308251370)
                    .withSize("bmadgak")
                    .withFamily("s"))
                .withAdministratorLogin("bzqqedqytbciq")
                .withVersion(ServerVersion.NINE_FIVE)
                .withSslEnforcement(SslEnforcementEnum.DISABLED)
                .withMinimalTlsVersion(MinimalTlsVersionEnum.TLS1_1)
                .withInfrastructureEncryption(InfrastructureEncryption.ENABLED)
                .withUserVisibleState(ServerState.DISABLED)
                .withFullyQualifiedDomainName("b")
                .withEarliestRestoreDate(OffsetDateTime.parse("2021-03-24T00:19:46Z"))
                .withStorageProfile(new StorageProfile().withBackupRetentionDays(2110455897)
                    .withGeoRedundantBackup(GeoRedundantBackup.ENABLED)
                    .withStorageMB(1519721589)
                    .withStorageAutogrow(StorageAutogrow.ENABLED))
                .withReplicationRole("spwgcuertumkdosv")
                .withMasterServerId("hbmdgbbjfdd")
                .withReplicaCapacity(1359237516)
                .withPublicNetworkAccess(PublicNetworkAccessEnum.ENABLED)));
        model = BinaryData.fromObject(model).toObject(ServerListResult.class);
        Assertions.assertEquals("geablgphuticndvk", model.value().get(0).location());
        Assertions.assertEquals("wyiftyhxhur", model.value().get(0).tags().get("k"));
        Assertions.assertEquals(IdentityType.SYSTEM_ASSIGNED, model.value().get(0).identity().type());
        Assertions.assertEquals("aeqjhqjbasvms", model.value().get(0).sku().name());
        Assertions.assertEquals(SkuTier.BASIC, model.value().get(0).sku().tier());
        Assertions.assertEquals(2084272233, model.value().get(0).sku().capacity());
        Assertions.assertEquals("gsntnbybkzgcwr", model.value().get(0).sku().size());
        Assertions.assertEquals("lxxwrljdouskc", model.value().get(0).sku().family());
        Assertions.assertEquals("ocrcjdk", model.value().get(0).administratorLogin());
        Assertions.assertEquals(ServerVersion.ONE_ONE, model.value().get(0).version());
        Assertions.assertEquals(SslEnforcementEnum.DISABLED, model.value().get(0).sslEnforcement());
        Assertions.assertEquals(MinimalTlsVersionEnum.TLSENFORCEMENT_DISABLED,
            model.value().get(0).minimalTlsVersion());
        Assertions.assertEquals(InfrastructureEncryption.ENABLED, model.value().get(0).infrastructureEncryption());
        Assertions.assertEquals(ServerState.DISABLED, model.value().get(0).userVisibleState());
        Assertions.assertEquals("inqpjwnzll", model.value().get(0).fullyQualifiedDomainName());
        Assertions.assertEquals(OffsetDateTime.parse("2020-12-23T02:21:43Z"),
            model.value().get(0).earliestRestoreDate());
        Assertions.assertEquals(450622751, model.value().get(0).storageProfile().backupRetentionDays());
        Assertions.assertEquals(GeoRedundantBackup.DISABLED,
            model.value().get(0).storageProfile().geoRedundantBackup());
        Assertions.assertEquals(1530688943, model.value().get(0).storageProfile().storageMB());
        Assertions.assertEquals(StorageAutogrow.DISABLED, model.value().get(0).storageProfile().storageAutogrow());
        Assertions.assertEquals("abkyqduujitcjcz", model.value().get(0).replicationRole());
        Assertions.assertEquals("evndh", model.value().get(0).masterServerId());
        Assertions.assertEquals(968287955, model.value().get(0).replicaCapacity());
        Assertions.assertEquals(PublicNetworkAccessEnum.ENABLED, model.value().get(0).publicNetworkAccess());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
