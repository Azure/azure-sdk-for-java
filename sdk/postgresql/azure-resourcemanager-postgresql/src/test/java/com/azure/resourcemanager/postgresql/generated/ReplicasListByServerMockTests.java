// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.postgresql.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.postgresql.PostgreSqlManager;
import com.azure.resourcemanager.postgresql.models.GeoRedundantBackup;
import com.azure.resourcemanager.postgresql.models.IdentityType;
import com.azure.resourcemanager.postgresql.models.InfrastructureEncryption;
import com.azure.resourcemanager.postgresql.models.MinimalTlsVersionEnum;
import com.azure.resourcemanager.postgresql.models.PublicNetworkAccessEnum;
import com.azure.resourcemanager.postgresql.models.Server;
import com.azure.resourcemanager.postgresql.models.ServerState;
import com.azure.resourcemanager.postgresql.models.ServerVersion;
import com.azure.resourcemanager.postgresql.models.SkuTier;
import com.azure.resourcemanager.postgresql.models.SslEnforcementEnum;
import com.azure.resourcemanager.postgresql.models.StorageAutogrow;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ReplicasListByServerMockTests {
    @Test
    public void testListByServer() throws Exception {
        String responseStr
            = "{\"value\":[{\"identity\":{\"principalId\":\"0806cba2-a56d-4b9e-a6bc-d86d24aa2d75\",\"type\":\"SystemAssigned\",\"tenantId\":\"c19f5f93-fe74-450d-8b87-985b09b2436c\"},\"sku\":{\"name\":\"jkniodko\",\"tier\":\"MemoryOptimized\",\"capacity\":719607713,\"size\":\"jhemms\",\"family\":\"dkcrodt\"},\"properties\":{\"administratorLogin\":\"fw\",\"version\":\"9.6\",\"sslEnforcement\":\"Enabled\",\"minimalTlsVersion\":\"TLS1_1\",\"byokEnforcement\":\"jvefkdlfoakggkfp\",\"infrastructureEncryption\":\"Enabled\",\"userVisibleState\":\"Ready\",\"fullyQualifiedDomainName\":\"ulpqblylsyxkqjn\",\"earliestRestoreDate\":\"2021-02-22T12:01:41Z\",\"storageProfile\":{\"backupRetentionDays\":1312829950,\"geoRedundantBackup\":\"Disabled\",\"storageMB\":574368120,\"storageAutogrow\":\"Enabled\"},\"replicationRole\":\"zuempsbzkf\",\"masterServerId\":\"eyvpnqicvinvkj\",\"replicaCapacity\":611015935,\"publicNetworkAccess\":\"Disabled\",\"privateEndpointConnections\":[{\"id\":\"kzclewyh\",\"properties\":{\"privateEndpoint\":{},\"privateLinkServiceConnectionState\":{\"status\":\"Approved\",\"description\":\"ztzp\"},\"provisioningState\":\"Approving\"}},{\"id\":\"ckw\",\"properties\":{\"privateEndpoint\":{},\"privateLinkServiceConnectionState\":{\"status\":\"Rejected\",\"description\":\"hxx\"},\"provisioningState\":\"Dropping\"}},{\"id\":\"a\",\"properties\":{\"privateEndpoint\":{},\"privateLinkServiceConnectionState\":{\"status\":\"Pending\",\"description\":\"ztppriolxorjalto\"},\"provisioningState\":\"Rejecting\"}},{\"id\":\"wsobqwcsdbn\",\"properties\":{\"privateEndpoint\":{},\"privateLinkServiceConnectionState\":{\"status\":\"Rejected\",\"description\":\"ucqdpfuvglsb\"},\"provisioningState\":\"Failed\"}}]},\"location\":\"anvx\",\"tags\":{\"r\":\"vudutncor\"},\"id\":\"xqtvcofu\",\"name\":\"f\",\"type\":\"vkg\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        PostgreSqlManager manager = PostgreSqlManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<Server> response
            = manager.replicas().listByServer("zwl", "nwxuqlcvydyp", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("anvx", response.iterator().next().location());
        Assertions.assertEquals("vudutncor", response.iterator().next().tags().get("r"));
        Assertions.assertEquals(IdentityType.SYSTEM_ASSIGNED, response.iterator().next().identity().type());
        Assertions.assertEquals("jkniodko", response.iterator().next().sku().name());
        Assertions.assertEquals(SkuTier.MEMORY_OPTIMIZED, response.iterator().next().sku().tier());
        Assertions.assertEquals(719607713, response.iterator().next().sku().capacity());
        Assertions.assertEquals("jhemms", response.iterator().next().sku().size());
        Assertions.assertEquals("dkcrodt", response.iterator().next().sku().family());
        Assertions.assertEquals("fw", response.iterator().next().administratorLogin());
        Assertions.assertEquals(ServerVersion.NINE_SIX, response.iterator().next().version());
        Assertions.assertEquals(SslEnforcementEnum.ENABLED, response.iterator().next().sslEnforcement());
        Assertions.assertEquals(MinimalTlsVersionEnum.TLS1_1, response.iterator().next().minimalTlsVersion());
        Assertions.assertEquals(InfrastructureEncryption.ENABLED,
            response.iterator().next().infrastructureEncryption());
        Assertions.assertEquals(ServerState.READY, response.iterator().next().userVisibleState());
        Assertions.assertEquals("ulpqblylsyxkqjn", response.iterator().next().fullyQualifiedDomainName());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-22T12:01:41Z"),
            response.iterator().next().earliestRestoreDate());
        Assertions.assertEquals(1312829950, response.iterator().next().storageProfile().backupRetentionDays());
        Assertions.assertEquals(GeoRedundantBackup.DISABLED,
            response.iterator().next().storageProfile().geoRedundantBackup());
        Assertions.assertEquals(574368120, response.iterator().next().storageProfile().storageMB());
        Assertions.assertEquals(StorageAutogrow.ENABLED, response.iterator().next().storageProfile().storageAutogrow());
        Assertions.assertEquals("zuempsbzkf", response.iterator().next().replicationRole());
        Assertions.assertEquals("eyvpnqicvinvkj", response.iterator().next().masterServerId());
        Assertions.assertEquals(611015935, response.iterator().next().replicaCapacity());
        Assertions.assertEquals(PublicNetworkAccessEnum.DISABLED, response.iterator().next().publicNetworkAccess());
    }
}
