// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.postgresql.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.postgresql.fluent.models.ServerInner;
import com.azure.resourcemanager.postgresql.models.GeoRedundantBackup;
import com.azure.resourcemanager.postgresql.models.IdentityType;
import com.azure.resourcemanager.postgresql.models.InfrastructureEncryption;
import com.azure.resourcemanager.postgresql.models.MinimalTlsVersionEnum;
import com.azure.resourcemanager.postgresql.models.PublicNetworkAccessEnum;
import com.azure.resourcemanager.postgresql.models.ResourceIdentity;
import com.azure.resourcemanager.postgresql.models.ServerState;
import com.azure.resourcemanager.postgresql.models.ServerVersion;
import com.azure.resourcemanager.postgresql.models.Sku;
import com.azure.resourcemanager.postgresql.models.SkuTier;
import com.azure.resourcemanager.postgresql.models.SslEnforcementEnum;
import com.azure.resourcemanager.postgresql.models.StorageAutogrow;
import com.azure.resourcemanager.postgresql.models.StorageProfile;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ServerInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ServerInner model = BinaryData.fromString(
            "{\"identity\":{\"principalId\":\"f94e2927-1a62-41b5-ac7d-464d3795627a\",\"type\":\"SystemAssigned\",\"tenantId\":\"7514310f-4b68-4cc2-98e7-b32dce102c43\"},\"sku\":{\"name\":\"ucmpoyfd\",\"tier\":\"Basic\",\"capacity\":934276292,\"size\":\"ygjofjdd\",\"family\":\"s\"},\"properties\":{\"administratorLogin\":\"upewnwreitjzy\",\"version\":\"11\",\"sslEnforcement\":\"Disabled\",\"minimalTlsVersion\":\"TLS1_1\",\"byokEnforcement\":\"ofcqhsm\",\"infrastructureEncryption\":\"Enabled\",\"userVisibleState\":\"Inaccessible\",\"fullyQualifiedDomainName\":\"mlxhekuksjtxukcd\",\"earliestRestoreDate\":\"2021-04-18T20:51:35Z\",\"storageProfile\":{\"backupRetentionDays\":1726077008,\"geoRedundantBackup\":\"Disabled\",\"storageMB\":1654422017,\"storageAutogrow\":\"Enabled\"},\"replicationRole\":\"xzdxtayrlhmwh\",\"masterServerId\":\"mrqobmtukknr\",\"replicaCapacity\":1077251222,\"publicNetworkAccess\":\"Enabled\",\"privateEndpointConnections\":[{\"id\":\"ijbpzvgnwzsymgl\",\"properties\":{\"privateEndpoint\":{\"id\":\"yzkohdbihanuf\"},\"privateLinkServiceConnectionState\":{\"status\":\"Approved\",\"description\":\"bj\",\"actionsRequired\":\"None\"},\"provisioningState\":\"Failed\"}}]},\"location\":\"th\",\"tags\":{\"npqxuh\":\"abifpikxwczbys\"},\"id\":\"vyq\",\"name\":\"iwbybrkxvdumjg\",\"type\":\"tfwvukxgaudc\"}")
            .toObject(ServerInner.class);
        Assertions.assertEquals("th", model.location());
        Assertions.assertEquals("abifpikxwczbys", model.tags().get("npqxuh"));
        Assertions.assertEquals(IdentityType.SYSTEM_ASSIGNED, model.identity().type());
        Assertions.assertEquals("ucmpoyfd", model.sku().name());
        Assertions.assertEquals(SkuTier.BASIC, model.sku().tier());
        Assertions.assertEquals(934276292, model.sku().capacity());
        Assertions.assertEquals("ygjofjdd", model.sku().size());
        Assertions.assertEquals("s", model.sku().family());
        Assertions.assertEquals("upewnwreitjzy", model.administratorLogin());
        Assertions.assertEquals(ServerVersion.ONE_ONE, model.version());
        Assertions.assertEquals(SslEnforcementEnum.DISABLED, model.sslEnforcement());
        Assertions.assertEquals(MinimalTlsVersionEnum.TLS1_1, model.minimalTlsVersion());
        Assertions.assertEquals(InfrastructureEncryption.ENABLED, model.infrastructureEncryption());
        Assertions.assertEquals(ServerState.INACCESSIBLE, model.userVisibleState());
        Assertions.assertEquals("mlxhekuksjtxukcd", model.fullyQualifiedDomainName());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-18T20:51:35Z"), model.earliestRestoreDate());
        Assertions.assertEquals(1726077008, model.storageProfile().backupRetentionDays());
        Assertions.assertEquals(GeoRedundantBackup.DISABLED, model.storageProfile().geoRedundantBackup());
        Assertions.assertEquals(1654422017, model.storageProfile().storageMB());
        Assertions.assertEquals(StorageAutogrow.ENABLED, model.storageProfile().storageAutogrow());
        Assertions.assertEquals("xzdxtayrlhmwh", model.replicationRole());
        Assertions.assertEquals("mrqobmtukknr", model.masterServerId());
        Assertions.assertEquals(1077251222, model.replicaCapacity());
        Assertions.assertEquals(PublicNetworkAccessEnum.ENABLED, model.publicNetworkAccess());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ServerInner model = new ServerInner().withLocation("th")
            .withTags(mapOf("npqxuh", "abifpikxwczbys"))
            .withIdentity(new ResourceIdentity().withType(IdentityType.SYSTEM_ASSIGNED))
            .withSku(new Sku().withName("ucmpoyfd")
                .withTier(SkuTier.BASIC)
                .withCapacity(934276292)
                .withSize("ygjofjdd")
                .withFamily("s"))
            .withAdministratorLogin("upewnwreitjzy")
            .withVersion(ServerVersion.ONE_ONE)
            .withSslEnforcement(SslEnforcementEnum.DISABLED)
            .withMinimalTlsVersion(MinimalTlsVersionEnum.TLS1_1)
            .withInfrastructureEncryption(InfrastructureEncryption.ENABLED)
            .withUserVisibleState(ServerState.INACCESSIBLE)
            .withFullyQualifiedDomainName("mlxhekuksjtxukcd")
            .withEarliestRestoreDate(OffsetDateTime.parse("2021-04-18T20:51:35Z"))
            .withStorageProfile(new StorageProfile().withBackupRetentionDays(1726077008)
                .withGeoRedundantBackup(GeoRedundantBackup.DISABLED)
                .withStorageMB(1654422017)
                .withStorageAutogrow(StorageAutogrow.ENABLED))
            .withReplicationRole("xzdxtayrlhmwh")
            .withMasterServerId("mrqobmtukknr")
            .withReplicaCapacity(1077251222)
            .withPublicNetworkAccess(PublicNetworkAccessEnum.ENABLED);
        model = BinaryData.fromObject(model).toObject(ServerInner.class);
        Assertions.assertEquals("th", model.location());
        Assertions.assertEquals("abifpikxwczbys", model.tags().get("npqxuh"));
        Assertions.assertEquals(IdentityType.SYSTEM_ASSIGNED, model.identity().type());
        Assertions.assertEquals("ucmpoyfd", model.sku().name());
        Assertions.assertEquals(SkuTier.BASIC, model.sku().tier());
        Assertions.assertEquals(934276292, model.sku().capacity());
        Assertions.assertEquals("ygjofjdd", model.sku().size());
        Assertions.assertEquals("s", model.sku().family());
        Assertions.assertEquals("upewnwreitjzy", model.administratorLogin());
        Assertions.assertEquals(ServerVersion.ONE_ONE, model.version());
        Assertions.assertEquals(SslEnforcementEnum.DISABLED, model.sslEnforcement());
        Assertions.assertEquals(MinimalTlsVersionEnum.TLS1_1, model.minimalTlsVersion());
        Assertions.assertEquals(InfrastructureEncryption.ENABLED, model.infrastructureEncryption());
        Assertions.assertEquals(ServerState.INACCESSIBLE, model.userVisibleState());
        Assertions.assertEquals("mlxhekuksjtxukcd", model.fullyQualifiedDomainName());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-18T20:51:35Z"), model.earliestRestoreDate());
        Assertions.assertEquals(1726077008, model.storageProfile().backupRetentionDays());
        Assertions.assertEquals(GeoRedundantBackup.DISABLED, model.storageProfile().geoRedundantBackup());
        Assertions.assertEquals(1654422017, model.storageProfile().storageMB());
        Assertions.assertEquals(StorageAutogrow.ENABLED, model.storageProfile().storageAutogrow());
        Assertions.assertEquals("xzdxtayrlhmwh", model.replicationRole());
        Assertions.assertEquals("mrqobmtukknr", model.masterServerId());
        Assertions.assertEquals(1077251222, model.replicaCapacity());
        Assertions.assertEquals(PublicNetworkAccessEnum.ENABLED, model.publicNetworkAccess());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
