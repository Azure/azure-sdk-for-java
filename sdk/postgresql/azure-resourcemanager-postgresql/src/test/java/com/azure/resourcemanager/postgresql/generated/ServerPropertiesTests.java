// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.postgresql.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.postgresql.fluent.models.ServerProperties;
import com.azure.resourcemanager.postgresql.models.GeoRedundantBackup;
import com.azure.resourcemanager.postgresql.models.InfrastructureEncryption;
import com.azure.resourcemanager.postgresql.models.MinimalTlsVersionEnum;
import com.azure.resourcemanager.postgresql.models.PublicNetworkAccessEnum;
import com.azure.resourcemanager.postgresql.models.ServerState;
import com.azure.resourcemanager.postgresql.models.ServerVersion;
import com.azure.resourcemanager.postgresql.models.SslEnforcementEnum;
import com.azure.resourcemanager.postgresql.models.StorageAutogrow;
import com.azure.resourcemanager.postgresql.models.StorageProfile;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;

public final class ServerPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ServerProperties model = BinaryData.fromString(
            "{\"administratorLogin\":\"nhsjcnyej\",\"version\":\"10.2\",\"sslEnforcement\":\"Disabled\",\"minimalTlsVersion\":\"TLS1_2\",\"byokEnforcement\":\"pczwlo\",\"infrastructureEncryption\":\"Disabled\",\"userVisibleState\":\"Dropping\",\"fullyQualifiedDomainName\":\"kvnipjoxz\",\"earliestRestoreDate\":\"2021-09-07T17:28:25Z\",\"storageProfile\":{\"backupRetentionDays\":519746852,\"geoRedundantBackup\":\"Enabled\",\"storageMB\":178199431,\"storageAutogrow\":\"Disabled\"},\"replicationRole\":\"ilzyd\",\"masterServerId\":\"o\",\"replicaCapacity\":1254785420,\"publicNetworkAccess\":\"Disabled\",\"privateEndpointConnections\":[{\"id\":\"npmqnjaqwixjspro\",\"properties\":{\"privateEndpoint\":{\"id\":\"utegjvwmfdats\"},\"privateLinkServiceConnectionState\":{\"status\":\"Disconnected\",\"description\":\"vpjhulsuuv\",\"actionsRequired\":\"None\"},\"provisioningState\":\"Approving\"}},{\"id\":\"rwfndiod\",\"properties\":{\"privateEndpoint\":{\"id\":\"w\"},\"privateLinkServiceConnectionState\":{\"status\":\"Disconnected\",\"description\":\"pvwryoqpsoacc\",\"actionsRequired\":\"None\"},\"provisioningState\":\"Approving\"}},{\"id\":\"j\",\"properties\":{\"privateEndpoint\":{\"id\":\"cr\"},\"privateLinkServiceConnectionState\":{\"status\":\"Rejected\",\"description\":\"dfdosygexp\",\"actionsRequired\":\"None\"},\"provisioningState\":\"Approving\"}}]}")
            .toObject(ServerProperties.class);
        Assertions.assertEquals("nhsjcnyej", model.administratorLogin());
        Assertions.assertEquals(ServerVersion.ONE_ZERO_TWO, model.version());
        Assertions.assertEquals(SslEnforcementEnum.DISABLED, model.sslEnforcement());
        Assertions.assertEquals(MinimalTlsVersionEnum.TLS1_2, model.minimalTlsVersion());
        Assertions.assertEquals(InfrastructureEncryption.DISABLED, model.infrastructureEncryption());
        Assertions.assertEquals(ServerState.DROPPING, model.userVisibleState());
        Assertions.assertEquals("kvnipjoxz", model.fullyQualifiedDomainName());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-07T17:28:25Z"), model.earliestRestoreDate());
        Assertions.assertEquals(519746852, model.storageProfile().backupRetentionDays());
        Assertions.assertEquals(GeoRedundantBackup.ENABLED, model.storageProfile().geoRedundantBackup());
        Assertions.assertEquals(178199431, model.storageProfile().storageMB());
        Assertions.assertEquals(StorageAutogrow.DISABLED, model.storageProfile().storageAutogrow());
        Assertions.assertEquals("ilzyd", model.replicationRole());
        Assertions.assertEquals("o", model.masterServerId());
        Assertions.assertEquals(1254785420, model.replicaCapacity());
        Assertions.assertEquals(PublicNetworkAccessEnum.DISABLED, model.publicNetworkAccess());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ServerProperties model = new ServerProperties().withAdministratorLogin("nhsjcnyej")
            .withVersion(ServerVersion.ONE_ZERO_TWO)
            .withSslEnforcement(SslEnforcementEnum.DISABLED)
            .withMinimalTlsVersion(MinimalTlsVersionEnum.TLS1_2)
            .withInfrastructureEncryption(InfrastructureEncryption.DISABLED)
            .withUserVisibleState(ServerState.DROPPING)
            .withFullyQualifiedDomainName("kvnipjoxz")
            .withEarliestRestoreDate(OffsetDateTime.parse("2021-09-07T17:28:25Z"))
            .withStorageProfile(new StorageProfile().withBackupRetentionDays(519746852)
                .withGeoRedundantBackup(GeoRedundantBackup.ENABLED)
                .withStorageMB(178199431)
                .withStorageAutogrow(StorageAutogrow.DISABLED))
            .withReplicationRole("ilzyd")
            .withMasterServerId("o")
            .withReplicaCapacity(1254785420)
            .withPublicNetworkAccess(PublicNetworkAccessEnum.DISABLED);
        model = BinaryData.fromObject(model).toObject(ServerProperties.class);
        Assertions.assertEquals("nhsjcnyej", model.administratorLogin());
        Assertions.assertEquals(ServerVersion.ONE_ZERO_TWO, model.version());
        Assertions.assertEquals(SslEnforcementEnum.DISABLED, model.sslEnforcement());
        Assertions.assertEquals(MinimalTlsVersionEnum.TLS1_2, model.minimalTlsVersion());
        Assertions.assertEquals(InfrastructureEncryption.DISABLED, model.infrastructureEncryption());
        Assertions.assertEquals(ServerState.DROPPING, model.userVisibleState());
        Assertions.assertEquals("kvnipjoxz", model.fullyQualifiedDomainName());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-07T17:28:25Z"), model.earliestRestoreDate());
        Assertions.assertEquals(519746852, model.storageProfile().backupRetentionDays());
        Assertions.assertEquals(GeoRedundantBackup.ENABLED, model.storageProfile().geoRedundantBackup());
        Assertions.assertEquals(178199431, model.storageProfile().storageMB());
        Assertions.assertEquals(StorageAutogrow.DISABLED, model.storageProfile().storageAutogrow());
        Assertions.assertEquals("ilzyd", model.replicationRole());
        Assertions.assertEquals("o", model.masterServerId());
        Assertions.assertEquals(1254785420, model.replicaCapacity());
        Assertions.assertEquals(PublicNetworkAccessEnum.DISABLED, model.publicNetworkAccess());
    }
}
