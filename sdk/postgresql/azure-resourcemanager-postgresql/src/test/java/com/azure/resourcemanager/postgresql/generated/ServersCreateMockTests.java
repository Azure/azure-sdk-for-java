// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.postgresql.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.postgresql.PostgreSqlManager;
import com.azure.resourcemanager.postgresql.models.GeoRedundantBackup;
import com.azure.resourcemanager.postgresql.models.IdentityType;
import com.azure.resourcemanager.postgresql.models.InfrastructureEncryption;
import com.azure.resourcemanager.postgresql.models.MinimalTlsVersionEnum;
import com.azure.resourcemanager.postgresql.models.PublicNetworkAccessEnum;
import com.azure.resourcemanager.postgresql.models.ResourceIdentity;
import com.azure.resourcemanager.postgresql.models.Server;
import com.azure.resourcemanager.postgresql.models.ServerPropertiesForCreate;
import com.azure.resourcemanager.postgresql.models.ServerState;
import com.azure.resourcemanager.postgresql.models.ServerVersion;
import com.azure.resourcemanager.postgresql.models.Sku;
import com.azure.resourcemanager.postgresql.models.SkuTier;
import com.azure.resourcemanager.postgresql.models.SslEnforcementEnum;
import com.azure.resourcemanager.postgresql.models.StorageAutogrow;
import com.azure.resourcemanager.postgresql.models.StorageProfile;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ServersCreateMockTests {
    @Test
    public void testCreate() throws Exception {
        String responseStr
            = "{\"identity\":{\"principalId\":\"94d240b7-4ddc-4fc4-9055-90723dcff387\",\"type\":\"SystemAssigned\",\"tenantId\":\"a16e2166-8876-40b4-b360-ceed93e9da33\"},\"sku\":{\"name\":\"elsfeaen\",\"tier\":\"GeneralPurpose\",\"capacity\":1448389214,\"size\":\"kl\",\"family\":\"xbjhwuaanozjosph\"},\"properties\":{\"administratorLogin\":\"l\",\"version\":\"11\",\"sslEnforcement\":\"Enabled\",\"minimalTlsVersion\":\"TLSEnforcementDisabled\",\"byokEnforcement\":\"rvimjwosytxitcsk\",\"infrastructureEncryption\":\"Enabled\",\"userVisibleState\":\"Dropping\",\"fullyQualifiedDomainName\":\"miekkezzikhlyfjh\",\"earliestRestoreDate\":\"2021-02-19T20:13:34Z\",\"storageProfile\":{\"backupRetentionDays\":1794228240,\"geoRedundantBackup\":\"Enabled\",\"storageMB\":1059730193,\"storageAutogrow\":\"Enabled\"},\"replicationRole\":\"eqidbqfatpx\",\"masterServerId\":\"rxcyjmoad\",\"replicaCapacity\":59301648,\"publicNetworkAccess\":\"Enabled\",\"privateEndpointConnections\":[{\"id\":\"dmjsjqb\",\"properties\":{\"privateEndpoint\":{},\"privateLinkServiceConnectionState\":{\"status\":\"Approved\",\"description\":\"xrwlyc\"},\"provisioningState\":\"Approving\"}},{\"id\":\"p\",\"properties\":{\"privateEndpoint\":{},\"privateLinkServiceConnectionState\":{\"status\":\"Disconnected\",\"description\":\"mareqnajxqugj\"},\"provisioningState\":\"Dropping\"}},{\"id\":\"ubeddg\",\"properties\":{\"privateEndpoint\":{},\"privateLinkServiceConnectionState\":{\"status\":\"Approved\",\"description\":\"qmzqalkrmnjijpx\"},\"provisioningState\":\"Failed\"}}]},\"location\":\"qudf\",\"tags\":{\"yffimrzrtuzqogs\":\"xbaaabjyv\",\"mewzsyyc\":\"xnevfdnwn\",\"judpfrxt\":\"uzsoi\",\"paxh\":\"thzvaytdwkqbrqu\"},\"id\":\"xiilivpdtiirqt\",\"name\":\"qoaxoruzfgs\",\"type\":\"uyfxrxxleptramxj\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        PostgreSqlManager manager = PostgreSqlManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        Server response = manager.servers()
            .define("rhyrnxxmueed")
            .withRegion("dblx")
            .withExistingResourceGroup("ivgvvcna")
            .withProperties(new ServerPropertiesForCreate().withVersion(ServerVersion.ONE_ONE)
                .withSslEnforcement(SslEnforcementEnum.ENABLED)
                .withMinimalTlsVersion(MinimalTlsVersionEnum.TLS1_0)
                .withInfrastructureEncryption(InfrastructureEncryption.DISABLED)
                .withPublicNetworkAccess(PublicNetworkAccessEnum.DISABLED)
                .withStorageProfile(new StorageProfile().withBackupRetentionDays(128514806)
                    .withGeoRedundantBackup(GeoRedundantBackup.DISABLED)
                    .withStorageMB(1528938748)
                    .withStorageAutogrow(StorageAutogrow.ENABLED)))
            .withTags(mapOf("j", "mfnjh", "oqreyfkzikfjawn", "wmszkk", "vxwc", "a"))
            .withIdentity(new ResourceIdentity().withType(IdentityType.SYSTEM_ASSIGNED))
            .withSku(new Sku().withName("kwqqtchealmf")
                .withTier(SkuTier.GENERAL_PURPOSE)
                .withCapacity(895344141)
                .withSize("gdv")
                .withFamily("gpiohgwxrtfudxe"))
            .create();

        Assertions.assertEquals("qudf", response.location());
        Assertions.assertEquals("xbaaabjyv", response.tags().get("yffimrzrtuzqogs"));
        Assertions.assertEquals(IdentityType.SYSTEM_ASSIGNED, response.identity().type());
        Assertions.assertEquals("elsfeaen", response.sku().name());
        Assertions.assertEquals(SkuTier.GENERAL_PURPOSE, response.sku().tier());
        Assertions.assertEquals(1448389214, response.sku().capacity());
        Assertions.assertEquals("kl", response.sku().size());
        Assertions.assertEquals("xbjhwuaanozjosph", response.sku().family());
        Assertions.assertEquals("l", response.administratorLogin());
        Assertions.assertEquals(ServerVersion.ONE_ONE, response.version());
        Assertions.assertEquals(SslEnforcementEnum.ENABLED, response.sslEnforcement());
        Assertions.assertEquals(MinimalTlsVersionEnum.TLSENFORCEMENT_DISABLED, response.minimalTlsVersion());
        Assertions.assertEquals(InfrastructureEncryption.ENABLED, response.infrastructureEncryption());
        Assertions.assertEquals(ServerState.DROPPING, response.userVisibleState());
        Assertions.assertEquals("miekkezzikhlyfjh", response.fullyQualifiedDomainName());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-19T20:13:34Z"), response.earliestRestoreDate());
        Assertions.assertEquals(1794228240, response.storageProfile().backupRetentionDays());
        Assertions.assertEquals(GeoRedundantBackup.ENABLED, response.storageProfile().geoRedundantBackup());
        Assertions.assertEquals(1059730193, response.storageProfile().storageMB());
        Assertions.assertEquals(StorageAutogrow.ENABLED, response.storageProfile().storageAutogrow());
        Assertions.assertEquals("eqidbqfatpx", response.replicationRole());
        Assertions.assertEquals("rxcyjmoad", response.masterServerId());
        Assertions.assertEquals(59301648, response.replicaCapacity());
        Assertions.assertEquals(PublicNetworkAccessEnum.ENABLED, response.publicNetworkAccess());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
