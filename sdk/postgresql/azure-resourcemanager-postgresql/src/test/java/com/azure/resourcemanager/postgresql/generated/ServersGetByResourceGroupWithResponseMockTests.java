// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.postgresql.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.postgresql.PostgreSqlManager;
import com.azure.resourcemanager.postgresql.models.GeoRedundantBackup;
import com.azure.resourcemanager.postgresql.models.IdentityType;
import com.azure.resourcemanager.postgresql.models.InfrastructureEncryption;
import com.azure.resourcemanager.postgresql.models.MinimalTlsVersionEnum;
import com.azure.resourcemanager.postgresql.models.PublicNetworkAccessEnum;
import com.azure.resourcemanager.postgresql.models.Server;
import com.azure.resourcemanager.postgresql.models.ServerState;
import com.azure.resourcemanager.postgresql.models.ServerVersion;
import com.azure.resourcemanager.postgresql.models.SkuTier;
import com.azure.resourcemanager.postgresql.models.SslEnforcementEnum;
import com.azure.resourcemanager.postgresql.models.StorageAutogrow;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ServersGetByResourceGroupWithResponseMockTests {
    @Test
    public void testGetByResourceGroupWithResponse() throws Exception {
        String responseStr
            = "{\"identity\":{\"principalId\":\"4700037e-66f1-4aec-a5e8-293087df736d\",\"type\":\"SystemAssigned\",\"tenantId\":\"45b93bf7-4c27-4fe7-b499-c6b78355c732\"},\"sku\":{\"name\":\"sldnkwwtppjflcxo\",\"tier\":\"Basic\",\"capacity\":584568005,\"size\":\"z\",\"family\":\"sikvmkqzeqqkdlt\"},\"properties\":{\"administratorLogin\":\"mhhv\",\"version\":\"10\",\"sslEnforcement\":\"Disabled\",\"minimalTlsVersion\":\"TLS1_2\",\"byokEnforcement\":\"wobdagxtibqdx\",\"infrastructureEncryption\":\"Disabled\",\"userVisibleState\":\"Inaccessible\",\"fullyQualifiedDomainName\":\"ogqxndlkzgxhuri\",\"earliestRestoreDate\":\"2021-08-01T11:38:37Z\",\"storageProfile\":{\"backupRetentionDays\":1784018500,\"geoRedundantBackup\":\"Enabled\",\"storageMB\":2086660215,\"storageAutogrow\":\"Disabled\"},\"replicationRole\":\"xmubyyntwlrbq\",\"masterServerId\":\"oievseotgqrlltm\",\"replicaCapacity\":1887219641,\"publicNetworkAccess\":\"Enabled\",\"privateEndpointConnections\":[{\"id\":\"zxb\",\"properties\":{\"privateEndpoint\":{},\"privateLinkServiceConnectionState\":{\"status\":\"Disconnected\",\"description\":\"efuzmuvpbttd\"},\"provisioningState\":\"Rejecting\"}},{\"id\":\"p\",\"properties\":{\"privateEndpoint\":{},\"privateLinkServiceConnectionState\":{\"status\":\"Approved\",\"description\":\"nzbtbhj\"},\"provisioningState\":\"Dropping\"}},{\"id\":\"fgohdneuelfphs\",\"properties\":{\"privateEndpoint\":{},\"privateLinkServiceConnectionState\":{\"status\":\"Rejected\",\"description\":\"zfikd\"},\"provisioningState\":\"Rejecting\"}}]},\"location\":\"quuvxzxcl\",\"tags\":{\"hcohfwdsjnk\":\"hhqzonosgg\",\"swacffgdkzz\":\"ljuti\",\"ppfufl\":\"wkfvhqcrailvp\",\"gafcnihgwqapnedg\":\"wdmhdlxyjrxs\"},\"id\":\"bcvkcvqvpkeq\",\"name\":\"cvdrhvoodsot\",\"type\":\"obzdopcjwvnhdl\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        PostgreSqlManager manager = PostgreSqlManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        Server response = manager.servers()
            .getByResourceGroupWithResponse("abnetshh", "zhedplvwiw", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("quuvxzxcl", response.location());
        Assertions.assertEquals("hhqzonosgg", response.tags().get("hcohfwdsjnk"));
        Assertions.assertEquals(IdentityType.SYSTEM_ASSIGNED, response.identity().type());
        Assertions.assertEquals("sldnkwwtppjflcxo", response.sku().name());
        Assertions.assertEquals(SkuTier.BASIC, response.sku().tier());
        Assertions.assertEquals(584568005, response.sku().capacity());
        Assertions.assertEquals("z", response.sku().size());
        Assertions.assertEquals("sikvmkqzeqqkdlt", response.sku().family());
        Assertions.assertEquals("mhhv", response.administratorLogin());
        Assertions.assertEquals(ServerVersion.ONE_ZERO, response.version());
        Assertions.assertEquals(SslEnforcementEnum.DISABLED, response.sslEnforcement());
        Assertions.assertEquals(MinimalTlsVersionEnum.TLS1_2, response.minimalTlsVersion());
        Assertions.assertEquals(InfrastructureEncryption.DISABLED, response.infrastructureEncryption());
        Assertions.assertEquals(ServerState.INACCESSIBLE, response.userVisibleState());
        Assertions.assertEquals("ogqxndlkzgxhuri", response.fullyQualifiedDomainName());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-01T11:38:37Z"), response.earliestRestoreDate());
        Assertions.assertEquals(1784018500, response.storageProfile().backupRetentionDays());
        Assertions.assertEquals(GeoRedundantBackup.ENABLED, response.storageProfile().geoRedundantBackup());
        Assertions.assertEquals(2086660215, response.storageProfile().storageMB());
        Assertions.assertEquals(StorageAutogrow.DISABLED, response.storageProfile().storageAutogrow());
        Assertions.assertEquals("xmubyyntwlrbq", response.replicationRole());
        Assertions.assertEquals("oievseotgqrlltm", response.masterServerId());
        Assertions.assertEquals(1887219641, response.replicaCapacity());
        Assertions.assertEquals(PublicNetworkAccessEnum.ENABLED, response.publicNetworkAccess());
    }
}
