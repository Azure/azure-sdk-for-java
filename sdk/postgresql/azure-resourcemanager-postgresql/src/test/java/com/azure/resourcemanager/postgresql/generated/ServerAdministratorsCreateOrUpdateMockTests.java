// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.postgresql.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.postgresql.PostgreSqlManager;
import com.azure.resourcemanager.postgresql.fluent.models.ServerAdministratorResourceInner;
import com.azure.resourcemanager.postgresql.models.AdministratorType;
import com.azure.resourcemanager.postgresql.models.ServerAdministratorResource;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.UUID;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ServerAdministratorsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"administratorType\":\"ActiveDirectory\",\"login\":\"zuhx\",\"sid\":\"17a8c830-8809-40df-9a6d-8bc604f578d6\",\"tenantId\":\"9d9bd4c3-f88e-47f3-bc9c-704e642cce39\"},\"id\":\"cpqjlihhyu\",\"name\":\"pskasdvlmfwdg\",\"type\":\"x\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        PostgreSqlManager manager = PostgreSqlManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        ServerAdministratorResource response = manager.serverAdministrators()
            .createOrUpdate("zzxscyhwzdgiruj", "zbomvzzbtdcqvpni",
                new ServerAdministratorResourceInner().withAdministratorType(AdministratorType.ACTIVE_DIRECTORY)
                    .withLogin("viylwdshfssnrbgy")
                    .withSid(UUID.fromString("154b97cb-aecc-40dc-a754-feadde14d243"))
                    .withTenantId(UUID.fromString("fbcc8a59-b5cb-4220-84c0-5a8c59bdad4b")),
                com.azure.core.util.Context.NONE);

        Assertions.assertEquals(AdministratorType.ACTIVE_DIRECTORY, response.administratorType());
        Assertions.assertEquals("zuhx", response.login());
        Assertions.assertEquals(UUID.fromString("17a8c830-8809-40df-9a6d-8bc604f578d6"), response.sid());
        Assertions.assertEquals(UUID.fromString("9d9bd4c3-f88e-47f3-bc9c-704e642cce39"), response.tenantId());
    }
}
