// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.postgresql.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.postgresql.PostgreSqlManager;
import com.azure.resourcemanager.postgresql.models.AdministratorType;
import com.azure.resourcemanager.postgresql.models.ServerAdministratorResource;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.UUID;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ServerAdministratorsListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"administratorType\":\"ActiveDirectory\",\"login\":\"uutpwoqhih\",\"sid\":\"ffdba228-0212-46f0-83a7-6fd8698f3ce1\",\"tenantId\":\"ae867c79-8fb2-4182-afe0-ddc818c432c0\"},\"id\":\"jqgwzp\",\"name\":\"fqntcyp\",\"type\":\"xjvfoimwksl\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        PostgreSqlManager manager = PostgreSqlManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<ServerAdministratorResource> response
            = manager.serverAdministrators().list("ytxifqjzgxmrh", "blwpcesutrgj", com.azure.core.util.Context.NONE);

        Assertions.assertEquals(AdministratorType.ACTIVE_DIRECTORY, response.iterator().next().administratorType());
        Assertions.assertEquals("uutpwoqhih", response.iterator().next().login());
        Assertions.assertEquals(UUID.fromString("ffdba228-0212-46f0-83a7-6fd8698f3ce1"),
            response.iterator().next().sid());
        Assertions.assertEquals(UUID.fromString("ae867c79-8fb2-4182-afe0-ddc818c432c0"),
            response.iterator().next().tenantId());
    }
}
