/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.powerbidedicated.v2017_10_01.implementation;

import com.microsoft.azure.arm.resources.models.implementation.GroupableResourceCoreImpl;
import com.microsoft.azure.management.powerbidedicated.v2017_10_01.DedicatedCapacity;
import rx.Observable;
import com.microsoft.azure.management.powerbidedicated.v2017_10_01.DedicatedCapacityUpdateParameters;
import com.microsoft.azure.management.powerbidedicated.v2017_10_01.ResourceSku;
import com.microsoft.azure.management.powerbidedicated.v2017_10_01.DedicatedCapacityAdministrators;
import com.microsoft.azure.management.powerbidedicated.v2017_10_01.State;
import com.microsoft.azure.management.powerbidedicated.v2017_10_01.ProvisioningState;
import rx.functions.Func1;

class DedicatedCapacityImpl extends GroupableResourceCoreImpl<DedicatedCapacity, DedicatedCapacityInner, DedicatedCapacityImpl, PowerBIDedicatedManager> implements DedicatedCapacity, DedicatedCapacity.Definition, DedicatedCapacity.Update {
    private DedicatedCapacityUpdateParameters updateParameter;
    DedicatedCapacityImpl(String name, DedicatedCapacityInner inner, PowerBIDedicatedManager manager) {
        super(name, inner, manager);
        this.updateParameter = new DedicatedCapacityUpdateParameters();
    }

    @Override
    public Observable<DedicatedCapacity> createResourceAsync() {
        CapacitiesInner client = this.manager().inner().capacities();
        return client.createAsync(this.resourceGroupName(), this.name(), this.inner())
            .map(new Func1<DedicatedCapacityInner, DedicatedCapacityInner>() {
               @Override
               public DedicatedCapacityInner call(DedicatedCapacityInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<DedicatedCapacity> updateResourceAsync() {
        CapacitiesInner client = this.manager().inner().capacities();
        return client.updateAsync(this.resourceGroupName(), this.name(), this.updateParameter)
            .map(new Func1<DedicatedCapacityInner, DedicatedCapacityInner>() {
               @Override
               public DedicatedCapacityInner call(DedicatedCapacityInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<DedicatedCapacityInner> getInnerAsync() {
        CapacitiesInner client = this.manager().inner().capacities();
        return client.getByResourceGroupAsync(this.resourceGroupName(), this.name());
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }

    private void resetCreateUpdateParameters() {
        this.updateParameter = new DedicatedCapacityUpdateParameters();
    }

    @Override
    public DedicatedCapacityAdministrators administration() {
        return this.inner().administration();
    }

    @Override
    public ProvisioningState provisioningState() {
        return this.inner().provisioningState();
    }

    @Override
    public ResourceSku sku() {
        return this.inner().sku();
    }

    @Override
    public State state() {
        return this.inner().state();
    }

    @Override
    public DedicatedCapacityImpl withSku(ResourceSku sku) {
        if (isInCreateMode()) {
            this.inner().withSku(sku);
        } else {
            this.updateParameter.withSku(sku);
        }
        return this;
    }

    @Override
    public DedicatedCapacityImpl withAdministration(DedicatedCapacityAdministrators administration) {
        if (isInCreateMode()) {
            this.inner().withAdministration(administration);
        } else {
            this.updateParameter.withAdministration(administration);
        }
        return this;
    }

}
