/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.powerbidedicated.v2017_10_01.implementation;

import com.microsoft.azure.arm.collection.InnerSupportsGet;
import com.microsoft.azure.arm.collection.InnerSupportsDelete;
import com.microsoft.azure.arm.collection.InnerSupportsListing;
import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.CloudException;
import com.microsoft.azure.management.powerbidedicated.v2017_10_01.CheckCapacityNameAvailabilityParameters;
import com.microsoft.azure.management.powerbidedicated.v2017_10_01.DedicatedCapacityUpdateParameters;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.PATCH;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Capacities.
 */
public class CapacitiesInner implements InnerSupportsGet<DedicatedCapacityInner>, InnerSupportsDelete<Void> {
    /** The Retrofit service to perform REST calls. */
    private CapacitiesService service;
    /** The service client containing this operation class. */
    private PowerBIDedicatedManagementClientImpl client;

    /**
     * Initializes an instance of CapacitiesInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public CapacitiesInner(Retrofit retrofit, PowerBIDedicatedManagementClientImpl client) {
        this.service = retrofit.create(CapacitiesService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Capacities to be
     * used by Retrofit to perform actually REST calls.
     */
    interface CapacitiesService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.powerbidedicated.v2017_10_01.Capacities getByResourceGroup" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PowerBIDedicated/capacities/{dedicatedCapacityName}")
        Observable<Response<ResponseBody>> getByResourceGroup(@Path("resourceGroupName") String resourceGroupName, @Path("dedicatedCapacityName") String dedicatedCapacityName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.powerbidedicated.v2017_10_01.Capacities create" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PowerBIDedicated/capacities/{dedicatedCapacityName}")
        Observable<Response<ResponseBody>> create(@Path("resourceGroupName") String resourceGroupName, @Path("dedicatedCapacityName") String dedicatedCapacityName, @Path("subscriptionId") String subscriptionId, @Body DedicatedCapacityInner capacityParameters, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.powerbidedicated.v2017_10_01.Capacities beginCreate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PowerBIDedicated/capacities/{dedicatedCapacityName}")
        Observable<Response<ResponseBody>> beginCreate(@Path("resourceGroupName") String resourceGroupName, @Path("dedicatedCapacityName") String dedicatedCapacityName, @Path("subscriptionId") String subscriptionId, @Body DedicatedCapacityInner capacityParameters, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.powerbidedicated.v2017_10_01.Capacities delete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PowerBIDedicated/capacities/{dedicatedCapacityName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("resourceGroupName") String resourceGroupName, @Path("dedicatedCapacityName") String dedicatedCapacityName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.powerbidedicated.v2017_10_01.Capacities beginDelete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PowerBIDedicated/capacities/{dedicatedCapacityName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> beginDelete(@Path("resourceGroupName") String resourceGroupName, @Path("dedicatedCapacityName") String dedicatedCapacityName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.powerbidedicated.v2017_10_01.Capacities update" })
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PowerBIDedicated/capacities/{dedicatedCapacityName}")
        Observable<Response<ResponseBody>> update(@Path("resourceGroupName") String resourceGroupName, @Path("dedicatedCapacityName") String dedicatedCapacityName, @Path("subscriptionId") String subscriptionId, @Body DedicatedCapacityUpdateParameters capacityUpdateParameters, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.powerbidedicated.v2017_10_01.Capacities beginUpdate" })
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PowerBIDedicated/capacities/{dedicatedCapacityName}")
        Observable<Response<ResponseBody>> beginUpdate(@Path("resourceGroupName") String resourceGroupName, @Path("dedicatedCapacityName") String dedicatedCapacityName, @Path("subscriptionId") String subscriptionId, @Body DedicatedCapacityUpdateParameters capacityUpdateParameters, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.powerbidedicated.v2017_10_01.Capacities suspend" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PowerBIDedicated/capacities/{dedicatedCapacityName}/suspend")
        Observable<Response<ResponseBody>> suspend(@Path("resourceGroupName") String resourceGroupName, @Path("dedicatedCapacityName") String dedicatedCapacityName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.powerbidedicated.v2017_10_01.Capacities beginSuspend" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PowerBIDedicated/capacities/{dedicatedCapacityName}/suspend")
        Observable<Response<ResponseBody>> beginSuspend(@Path("resourceGroupName") String resourceGroupName, @Path("dedicatedCapacityName") String dedicatedCapacityName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.powerbidedicated.v2017_10_01.Capacities resume" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PowerBIDedicated/capacities/{dedicatedCapacityName}/resume")
        Observable<Response<ResponseBody>> resume(@Path("resourceGroupName") String resourceGroupName, @Path("dedicatedCapacityName") String dedicatedCapacityName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.powerbidedicated.v2017_10_01.Capacities beginResume" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PowerBIDedicated/capacities/{dedicatedCapacityName}/resume")
        Observable<Response<ResponseBody>> beginResume(@Path("resourceGroupName") String resourceGroupName, @Path("dedicatedCapacityName") String dedicatedCapacityName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.powerbidedicated.v2017_10_01.Capacities listByResourceGroup" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PowerBIDedicated/capacities")
        Observable<Response<ResponseBody>> listByResourceGroup(@Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.powerbidedicated.v2017_10_01.Capacities list" })
        @GET("subscriptions/{subscriptionId}/providers/Microsoft.PowerBIDedicated/capacities")
        Observable<Response<ResponseBody>> list(@Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.powerbidedicated.v2017_10_01.Capacities listSkus" })
        @GET("subscriptions/{subscriptionId}/providers/Microsoft.PowerBIDedicated/skus")
        Observable<Response<ResponseBody>> listSkus(@Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.powerbidedicated.v2017_10_01.Capacities listSkusForCapacity" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PowerBIDedicated/capacities/{dedicatedCapacityName}/skus")
        Observable<Response<ResponseBody>> listSkusForCapacity(@Path("resourceGroupName") String resourceGroupName, @Path("dedicatedCapacityName") String dedicatedCapacityName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.powerbidedicated.v2017_10_01.Capacities checkNameAvailability" })
        @POST("subscriptions/{subscriptionId}/providers/Microsoft.PowerBIDedicated/locations/{location}/checkNameAvailability")
        Observable<Response<ResponseBody>> checkNameAvailability(@Path("location") String location, @Path("subscriptionId") String subscriptionId, @Body CheckCapacityNameAvailabilityParameters capacityParameters, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Gets details about the specified dedicated capacity.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given PowerBIDedicated capacity is part. This name must be at least 1 character in length, and no more than 90.
     * @param dedicatedCapacityName The name of the dedicated capacity. It must be a minimum of 3 characters, and a maximum of 63.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the DedicatedCapacityInner object if successful.
     */
    public DedicatedCapacityInner getByResourceGroup(String resourceGroupName, String dedicatedCapacityName) {
        return getByResourceGroupWithServiceResponseAsync(resourceGroupName, dedicatedCapacityName).toBlocking().single().body();
    }

    /**
     * Gets details about the specified dedicated capacity.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given PowerBIDedicated capacity is part. This name must be at least 1 character in length, and no more than 90.
     * @param dedicatedCapacityName The name of the dedicated capacity. It must be a minimum of 3 characters, and a maximum of 63.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<DedicatedCapacityInner> getByResourceGroupAsync(String resourceGroupName, String dedicatedCapacityName, final ServiceCallback<DedicatedCapacityInner> serviceCallback) {
        return ServiceFuture.fromResponse(getByResourceGroupWithServiceResponseAsync(resourceGroupName, dedicatedCapacityName), serviceCallback);
    }

    /**
     * Gets details about the specified dedicated capacity.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given PowerBIDedicated capacity is part. This name must be at least 1 character in length, and no more than 90.
     * @param dedicatedCapacityName The name of the dedicated capacity. It must be a minimum of 3 characters, and a maximum of 63.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DedicatedCapacityInner object
     */
    public Observable<DedicatedCapacityInner> getByResourceGroupAsync(String resourceGroupName, String dedicatedCapacityName) {
        return getByResourceGroupWithServiceResponseAsync(resourceGroupName, dedicatedCapacityName).map(new Func1<ServiceResponse<DedicatedCapacityInner>, DedicatedCapacityInner>() {
            @Override
            public DedicatedCapacityInner call(ServiceResponse<DedicatedCapacityInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets details about the specified dedicated capacity.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given PowerBIDedicated capacity is part. This name must be at least 1 character in length, and no more than 90.
     * @param dedicatedCapacityName The name of the dedicated capacity. It must be a minimum of 3 characters, and a maximum of 63.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DedicatedCapacityInner object
     */
    public Observable<ServiceResponse<DedicatedCapacityInner>> getByResourceGroupWithServiceResponseAsync(String resourceGroupName, String dedicatedCapacityName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (dedicatedCapacityName == null) {
            throw new IllegalArgumentException("Parameter dedicatedCapacityName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.getByResourceGroup(resourceGroupName, dedicatedCapacityName, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<DedicatedCapacityInner>>>() {
                @Override
                public Observable<ServiceResponse<DedicatedCapacityInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<DedicatedCapacityInner> clientResponse = getByResourceGroupDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<DedicatedCapacityInner> getByResourceGroupDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<DedicatedCapacityInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<DedicatedCapacityInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Provisions the specified Dedicated capacity based on the configuration specified in the request.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given PowerBIDedicated capacity is part. This name must be at least 1 character in length, and no more than 90.
     * @param dedicatedCapacityName The name of the Dedicated capacity. It must be a minimum of 3 characters, and a maximum of 63.
     * @param capacityParameters Contains the information used to provision the Dedicated capacity.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the DedicatedCapacityInner object if successful.
     */
    public DedicatedCapacityInner create(String resourceGroupName, String dedicatedCapacityName, DedicatedCapacityInner capacityParameters) {
        return createWithServiceResponseAsync(resourceGroupName, dedicatedCapacityName, capacityParameters).toBlocking().last().body();
    }

    /**
     * Provisions the specified Dedicated capacity based on the configuration specified in the request.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given PowerBIDedicated capacity is part. This name must be at least 1 character in length, and no more than 90.
     * @param dedicatedCapacityName The name of the Dedicated capacity. It must be a minimum of 3 characters, and a maximum of 63.
     * @param capacityParameters Contains the information used to provision the Dedicated capacity.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<DedicatedCapacityInner> createAsync(String resourceGroupName, String dedicatedCapacityName, DedicatedCapacityInner capacityParameters, final ServiceCallback<DedicatedCapacityInner> serviceCallback) {
        return ServiceFuture.fromResponse(createWithServiceResponseAsync(resourceGroupName, dedicatedCapacityName, capacityParameters), serviceCallback);
    }

    /**
     * Provisions the specified Dedicated capacity based on the configuration specified in the request.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given PowerBIDedicated capacity is part. This name must be at least 1 character in length, and no more than 90.
     * @param dedicatedCapacityName The name of the Dedicated capacity. It must be a minimum of 3 characters, and a maximum of 63.
     * @param capacityParameters Contains the information used to provision the Dedicated capacity.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<DedicatedCapacityInner> createAsync(String resourceGroupName, String dedicatedCapacityName, DedicatedCapacityInner capacityParameters) {
        return createWithServiceResponseAsync(resourceGroupName, dedicatedCapacityName, capacityParameters).map(new Func1<ServiceResponse<DedicatedCapacityInner>, DedicatedCapacityInner>() {
            @Override
            public DedicatedCapacityInner call(ServiceResponse<DedicatedCapacityInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Provisions the specified Dedicated capacity based on the configuration specified in the request.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given PowerBIDedicated capacity is part. This name must be at least 1 character in length, and no more than 90.
     * @param dedicatedCapacityName The name of the Dedicated capacity. It must be a minimum of 3 characters, and a maximum of 63.
     * @param capacityParameters Contains the information used to provision the Dedicated capacity.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<DedicatedCapacityInner>> createWithServiceResponseAsync(String resourceGroupName, String dedicatedCapacityName, DedicatedCapacityInner capacityParameters) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (dedicatedCapacityName == null) {
            throw new IllegalArgumentException("Parameter dedicatedCapacityName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (capacityParameters == null) {
            throw new IllegalArgumentException("Parameter capacityParameters is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(capacityParameters);
        Observable<Response<ResponseBody>> observable = service.create(resourceGroupName, dedicatedCapacityName, this.client.subscriptionId(), capacityParameters, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<DedicatedCapacityInner>() { }.getType());
    }

    /**
     * Provisions the specified Dedicated capacity based on the configuration specified in the request.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given PowerBIDedicated capacity is part. This name must be at least 1 character in length, and no more than 90.
     * @param dedicatedCapacityName The name of the Dedicated capacity. It must be a minimum of 3 characters, and a maximum of 63.
     * @param capacityParameters Contains the information used to provision the Dedicated capacity.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the DedicatedCapacityInner object if successful.
     */
    public DedicatedCapacityInner beginCreate(String resourceGroupName, String dedicatedCapacityName, DedicatedCapacityInner capacityParameters) {
        return beginCreateWithServiceResponseAsync(resourceGroupName, dedicatedCapacityName, capacityParameters).toBlocking().single().body();
    }

    /**
     * Provisions the specified Dedicated capacity based on the configuration specified in the request.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given PowerBIDedicated capacity is part. This name must be at least 1 character in length, and no more than 90.
     * @param dedicatedCapacityName The name of the Dedicated capacity. It must be a minimum of 3 characters, and a maximum of 63.
     * @param capacityParameters Contains the information used to provision the Dedicated capacity.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<DedicatedCapacityInner> beginCreateAsync(String resourceGroupName, String dedicatedCapacityName, DedicatedCapacityInner capacityParameters, final ServiceCallback<DedicatedCapacityInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginCreateWithServiceResponseAsync(resourceGroupName, dedicatedCapacityName, capacityParameters), serviceCallback);
    }

    /**
     * Provisions the specified Dedicated capacity based on the configuration specified in the request.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given PowerBIDedicated capacity is part. This name must be at least 1 character in length, and no more than 90.
     * @param dedicatedCapacityName The name of the Dedicated capacity. It must be a minimum of 3 characters, and a maximum of 63.
     * @param capacityParameters Contains the information used to provision the Dedicated capacity.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DedicatedCapacityInner object
     */
    public Observable<DedicatedCapacityInner> beginCreateAsync(String resourceGroupName, String dedicatedCapacityName, DedicatedCapacityInner capacityParameters) {
        return beginCreateWithServiceResponseAsync(resourceGroupName, dedicatedCapacityName, capacityParameters).map(new Func1<ServiceResponse<DedicatedCapacityInner>, DedicatedCapacityInner>() {
            @Override
            public DedicatedCapacityInner call(ServiceResponse<DedicatedCapacityInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Provisions the specified Dedicated capacity based on the configuration specified in the request.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given PowerBIDedicated capacity is part. This name must be at least 1 character in length, and no more than 90.
     * @param dedicatedCapacityName The name of the Dedicated capacity. It must be a minimum of 3 characters, and a maximum of 63.
     * @param capacityParameters Contains the information used to provision the Dedicated capacity.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DedicatedCapacityInner object
     */
    public Observable<ServiceResponse<DedicatedCapacityInner>> beginCreateWithServiceResponseAsync(String resourceGroupName, String dedicatedCapacityName, DedicatedCapacityInner capacityParameters) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (dedicatedCapacityName == null) {
            throw new IllegalArgumentException("Parameter dedicatedCapacityName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (capacityParameters == null) {
            throw new IllegalArgumentException("Parameter capacityParameters is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(capacityParameters);
        return service.beginCreate(resourceGroupName, dedicatedCapacityName, this.client.subscriptionId(), capacityParameters, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<DedicatedCapacityInner>>>() {
                @Override
                public Observable<ServiceResponse<DedicatedCapacityInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<DedicatedCapacityInner> clientResponse = beginCreateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<DedicatedCapacityInner> beginCreateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<DedicatedCapacityInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<DedicatedCapacityInner>() { }.getType())
                .register(201, new TypeToken<DedicatedCapacityInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Deletes the specified Dedicated capacity.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given PowerBIDedicated capacity is part. This name must be at least 1 character in length, and no more than 90.
     * @param dedicatedCapacityName The name of the Dedicated capacity. It must be at least 3 characters in length, and no more than 63.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String resourceGroupName, String dedicatedCapacityName) {
        deleteWithServiceResponseAsync(resourceGroupName, dedicatedCapacityName).toBlocking().last().body();
    }

    /**
     * Deletes the specified Dedicated capacity.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given PowerBIDedicated capacity is part. This name must be at least 1 character in length, and no more than 90.
     * @param dedicatedCapacityName The name of the Dedicated capacity. It must be at least 3 characters in length, and no more than 63.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String resourceGroupName, String dedicatedCapacityName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(resourceGroupName, dedicatedCapacityName), serviceCallback);
    }

    /**
     * Deletes the specified Dedicated capacity.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given PowerBIDedicated capacity is part. This name must be at least 1 character in length, and no more than 90.
     * @param dedicatedCapacityName The name of the Dedicated capacity. It must be at least 3 characters in length, and no more than 63.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Void> deleteAsync(String resourceGroupName, String dedicatedCapacityName) {
        return deleteWithServiceResponseAsync(resourceGroupName, dedicatedCapacityName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes the specified Dedicated capacity.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given PowerBIDedicated capacity is part. This name must be at least 1 character in length, and no more than 90.
     * @param dedicatedCapacityName The name of the Dedicated capacity. It must be at least 3 characters in length, and no more than 63.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String resourceGroupName, String dedicatedCapacityName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (dedicatedCapacityName == null) {
            throw new IllegalArgumentException("Parameter dedicatedCapacityName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Observable<Response<ResponseBody>> observable = service.delete(resourceGroupName, dedicatedCapacityName, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<Void>() { }.getType());
    }

    /**
     * Deletes the specified Dedicated capacity.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given PowerBIDedicated capacity is part. This name must be at least 1 character in length, and no more than 90.
     * @param dedicatedCapacityName The name of the Dedicated capacity. It must be at least 3 characters in length, and no more than 63.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void beginDelete(String resourceGroupName, String dedicatedCapacityName) {
        beginDeleteWithServiceResponseAsync(resourceGroupName, dedicatedCapacityName).toBlocking().single().body();
    }

    /**
     * Deletes the specified Dedicated capacity.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given PowerBIDedicated capacity is part. This name must be at least 1 character in length, and no more than 90.
     * @param dedicatedCapacityName The name of the Dedicated capacity. It must be at least 3 characters in length, and no more than 63.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> beginDeleteAsync(String resourceGroupName, String dedicatedCapacityName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(beginDeleteWithServiceResponseAsync(resourceGroupName, dedicatedCapacityName), serviceCallback);
    }

    /**
     * Deletes the specified Dedicated capacity.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given PowerBIDedicated capacity is part. This name must be at least 1 character in length, and no more than 90.
     * @param dedicatedCapacityName The name of the Dedicated capacity. It must be at least 3 characters in length, and no more than 63.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> beginDeleteAsync(String resourceGroupName, String dedicatedCapacityName) {
        return beginDeleteWithServiceResponseAsync(resourceGroupName, dedicatedCapacityName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes the specified Dedicated capacity.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given PowerBIDedicated capacity is part. This name must be at least 1 character in length, and no more than 90.
     * @param dedicatedCapacityName The name of the Dedicated capacity. It must be at least 3 characters in length, and no more than 63.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> beginDeleteWithServiceResponseAsync(String resourceGroupName, String dedicatedCapacityName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (dedicatedCapacityName == null) {
            throw new IllegalArgumentException("Parameter dedicatedCapacityName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.beginDelete(resourceGroupName, dedicatedCapacityName, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = beginDeleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> beginDeleteDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Updates the current state of the specified Dedicated capacity.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given PowerBIDedicated capacity is part. This name must be at least 1 character in length, and no more than 90.
     * @param dedicatedCapacityName The name of the Dedicated capacity. It must be at least 3 characters in length, and no more than 63.
     * @param capacityUpdateParameters Request object that contains the updated information for the capacity.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the DedicatedCapacityInner object if successful.
     */
    public DedicatedCapacityInner update(String resourceGroupName, String dedicatedCapacityName, DedicatedCapacityUpdateParameters capacityUpdateParameters) {
        return updateWithServiceResponseAsync(resourceGroupName, dedicatedCapacityName, capacityUpdateParameters).toBlocking().last().body();
    }

    /**
     * Updates the current state of the specified Dedicated capacity.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given PowerBIDedicated capacity is part. This name must be at least 1 character in length, and no more than 90.
     * @param dedicatedCapacityName The name of the Dedicated capacity. It must be at least 3 characters in length, and no more than 63.
     * @param capacityUpdateParameters Request object that contains the updated information for the capacity.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<DedicatedCapacityInner> updateAsync(String resourceGroupName, String dedicatedCapacityName, DedicatedCapacityUpdateParameters capacityUpdateParameters, final ServiceCallback<DedicatedCapacityInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(resourceGroupName, dedicatedCapacityName, capacityUpdateParameters), serviceCallback);
    }

    /**
     * Updates the current state of the specified Dedicated capacity.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given PowerBIDedicated capacity is part. This name must be at least 1 character in length, and no more than 90.
     * @param dedicatedCapacityName The name of the Dedicated capacity. It must be at least 3 characters in length, and no more than 63.
     * @param capacityUpdateParameters Request object that contains the updated information for the capacity.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<DedicatedCapacityInner> updateAsync(String resourceGroupName, String dedicatedCapacityName, DedicatedCapacityUpdateParameters capacityUpdateParameters) {
        return updateWithServiceResponseAsync(resourceGroupName, dedicatedCapacityName, capacityUpdateParameters).map(new Func1<ServiceResponse<DedicatedCapacityInner>, DedicatedCapacityInner>() {
            @Override
            public DedicatedCapacityInner call(ServiceResponse<DedicatedCapacityInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Updates the current state of the specified Dedicated capacity.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given PowerBIDedicated capacity is part. This name must be at least 1 character in length, and no more than 90.
     * @param dedicatedCapacityName The name of the Dedicated capacity. It must be at least 3 characters in length, and no more than 63.
     * @param capacityUpdateParameters Request object that contains the updated information for the capacity.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<DedicatedCapacityInner>> updateWithServiceResponseAsync(String resourceGroupName, String dedicatedCapacityName, DedicatedCapacityUpdateParameters capacityUpdateParameters) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (dedicatedCapacityName == null) {
            throw new IllegalArgumentException("Parameter dedicatedCapacityName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (capacityUpdateParameters == null) {
            throw new IllegalArgumentException("Parameter capacityUpdateParameters is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(capacityUpdateParameters);
        Observable<Response<ResponseBody>> observable = service.update(resourceGroupName, dedicatedCapacityName, this.client.subscriptionId(), capacityUpdateParameters, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<DedicatedCapacityInner>() { }.getType());
    }

    /**
     * Updates the current state of the specified Dedicated capacity.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given PowerBIDedicated capacity is part. This name must be at least 1 character in length, and no more than 90.
     * @param dedicatedCapacityName The name of the Dedicated capacity. It must be at least 3 characters in length, and no more than 63.
     * @param capacityUpdateParameters Request object that contains the updated information for the capacity.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the DedicatedCapacityInner object if successful.
     */
    public DedicatedCapacityInner beginUpdate(String resourceGroupName, String dedicatedCapacityName, DedicatedCapacityUpdateParameters capacityUpdateParameters) {
        return beginUpdateWithServiceResponseAsync(resourceGroupName, dedicatedCapacityName, capacityUpdateParameters).toBlocking().single().body();
    }

    /**
     * Updates the current state of the specified Dedicated capacity.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given PowerBIDedicated capacity is part. This name must be at least 1 character in length, and no more than 90.
     * @param dedicatedCapacityName The name of the Dedicated capacity. It must be at least 3 characters in length, and no more than 63.
     * @param capacityUpdateParameters Request object that contains the updated information for the capacity.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<DedicatedCapacityInner> beginUpdateAsync(String resourceGroupName, String dedicatedCapacityName, DedicatedCapacityUpdateParameters capacityUpdateParameters, final ServiceCallback<DedicatedCapacityInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginUpdateWithServiceResponseAsync(resourceGroupName, dedicatedCapacityName, capacityUpdateParameters), serviceCallback);
    }

    /**
     * Updates the current state of the specified Dedicated capacity.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given PowerBIDedicated capacity is part. This name must be at least 1 character in length, and no more than 90.
     * @param dedicatedCapacityName The name of the Dedicated capacity. It must be at least 3 characters in length, and no more than 63.
     * @param capacityUpdateParameters Request object that contains the updated information for the capacity.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DedicatedCapacityInner object
     */
    public Observable<DedicatedCapacityInner> beginUpdateAsync(String resourceGroupName, String dedicatedCapacityName, DedicatedCapacityUpdateParameters capacityUpdateParameters) {
        return beginUpdateWithServiceResponseAsync(resourceGroupName, dedicatedCapacityName, capacityUpdateParameters).map(new Func1<ServiceResponse<DedicatedCapacityInner>, DedicatedCapacityInner>() {
            @Override
            public DedicatedCapacityInner call(ServiceResponse<DedicatedCapacityInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Updates the current state of the specified Dedicated capacity.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given PowerBIDedicated capacity is part. This name must be at least 1 character in length, and no more than 90.
     * @param dedicatedCapacityName The name of the Dedicated capacity. It must be at least 3 characters in length, and no more than 63.
     * @param capacityUpdateParameters Request object that contains the updated information for the capacity.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DedicatedCapacityInner object
     */
    public Observable<ServiceResponse<DedicatedCapacityInner>> beginUpdateWithServiceResponseAsync(String resourceGroupName, String dedicatedCapacityName, DedicatedCapacityUpdateParameters capacityUpdateParameters) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (dedicatedCapacityName == null) {
            throw new IllegalArgumentException("Parameter dedicatedCapacityName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (capacityUpdateParameters == null) {
            throw new IllegalArgumentException("Parameter capacityUpdateParameters is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(capacityUpdateParameters);
        return service.beginUpdate(resourceGroupName, dedicatedCapacityName, this.client.subscriptionId(), capacityUpdateParameters, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<DedicatedCapacityInner>>>() {
                @Override
                public Observable<ServiceResponse<DedicatedCapacityInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<DedicatedCapacityInner> clientResponse = beginUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<DedicatedCapacityInner> beginUpdateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<DedicatedCapacityInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<DedicatedCapacityInner>() { }.getType())
                .register(202, new TypeToken<DedicatedCapacityInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Suspends operation of the specified dedicated capacity instance.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given PowerBIDedicated capacity is part. This name must be at least 1 character in length, and no more than 90.
     * @param dedicatedCapacityName The name of the Dedicated capacity. It must be at least 3 characters in length, and no more than 63.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void suspend(String resourceGroupName, String dedicatedCapacityName) {
        suspendWithServiceResponseAsync(resourceGroupName, dedicatedCapacityName).toBlocking().last().body();
    }

    /**
     * Suspends operation of the specified dedicated capacity instance.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given PowerBIDedicated capacity is part. This name must be at least 1 character in length, and no more than 90.
     * @param dedicatedCapacityName The name of the Dedicated capacity. It must be at least 3 characters in length, and no more than 63.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> suspendAsync(String resourceGroupName, String dedicatedCapacityName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(suspendWithServiceResponseAsync(resourceGroupName, dedicatedCapacityName), serviceCallback);
    }

    /**
     * Suspends operation of the specified dedicated capacity instance.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given PowerBIDedicated capacity is part. This name must be at least 1 character in length, and no more than 90.
     * @param dedicatedCapacityName The name of the Dedicated capacity. It must be at least 3 characters in length, and no more than 63.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Void> suspendAsync(String resourceGroupName, String dedicatedCapacityName) {
        return suspendWithServiceResponseAsync(resourceGroupName, dedicatedCapacityName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Suspends operation of the specified dedicated capacity instance.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given PowerBIDedicated capacity is part. This name must be at least 1 character in length, and no more than 90.
     * @param dedicatedCapacityName The name of the Dedicated capacity. It must be at least 3 characters in length, and no more than 63.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<Void>> suspendWithServiceResponseAsync(String resourceGroupName, String dedicatedCapacityName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (dedicatedCapacityName == null) {
            throw new IllegalArgumentException("Parameter dedicatedCapacityName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Observable<Response<ResponseBody>> observable = service.suspend(resourceGroupName, dedicatedCapacityName, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<Void>() { }.getType());
    }

    /**
     * Suspends operation of the specified dedicated capacity instance.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given PowerBIDedicated capacity is part. This name must be at least 1 character in length, and no more than 90.
     * @param dedicatedCapacityName The name of the Dedicated capacity. It must be at least 3 characters in length, and no more than 63.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void beginSuspend(String resourceGroupName, String dedicatedCapacityName) {
        beginSuspendWithServiceResponseAsync(resourceGroupName, dedicatedCapacityName).toBlocking().single().body();
    }

    /**
     * Suspends operation of the specified dedicated capacity instance.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given PowerBIDedicated capacity is part. This name must be at least 1 character in length, and no more than 90.
     * @param dedicatedCapacityName The name of the Dedicated capacity. It must be at least 3 characters in length, and no more than 63.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> beginSuspendAsync(String resourceGroupName, String dedicatedCapacityName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(beginSuspendWithServiceResponseAsync(resourceGroupName, dedicatedCapacityName), serviceCallback);
    }

    /**
     * Suspends operation of the specified dedicated capacity instance.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given PowerBIDedicated capacity is part. This name must be at least 1 character in length, and no more than 90.
     * @param dedicatedCapacityName The name of the Dedicated capacity. It must be at least 3 characters in length, and no more than 63.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> beginSuspendAsync(String resourceGroupName, String dedicatedCapacityName) {
        return beginSuspendWithServiceResponseAsync(resourceGroupName, dedicatedCapacityName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Suspends operation of the specified dedicated capacity instance.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given PowerBIDedicated capacity is part. This name must be at least 1 character in length, and no more than 90.
     * @param dedicatedCapacityName The name of the Dedicated capacity. It must be at least 3 characters in length, and no more than 63.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> beginSuspendWithServiceResponseAsync(String resourceGroupName, String dedicatedCapacityName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (dedicatedCapacityName == null) {
            throw new IllegalArgumentException("Parameter dedicatedCapacityName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.beginSuspend(resourceGroupName, dedicatedCapacityName, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = beginSuspendDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> beginSuspendDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Resumes operation of the specified Dedicated capacity instance.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given PowerBIDedicated capacity is part. This name must be at least 1 character in length, and no more than 90.
     * @param dedicatedCapacityName The name of the Dedicated capacity. It must be at least 3 characters in length, and no more than 63.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void resume(String resourceGroupName, String dedicatedCapacityName) {
        resumeWithServiceResponseAsync(resourceGroupName, dedicatedCapacityName).toBlocking().last().body();
    }

    /**
     * Resumes operation of the specified Dedicated capacity instance.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given PowerBIDedicated capacity is part. This name must be at least 1 character in length, and no more than 90.
     * @param dedicatedCapacityName The name of the Dedicated capacity. It must be at least 3 characters in length, and no more than 63.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> resumeAsync(String resourceGroupName, String dedicatedCapacityName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(resumeWithServiceResponseAsync(resourceGroupName, dedicatedCapacityName), serviceCallback);
    }

    /**
     * Resumes operation of the specified Dedicated capacity instance.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given PowerBIDedicated capacity is part. This name must be at least 1 character in length, and no more than 90.
     * @param dedicatedCapacityName The name of the Dedicated capacity. It must be at least 3 characters in length, and no more than 63.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Void> resumeAsync(String resourceGroupName, String dedicatedCapacityName) {
        return resumeWithServiceResponseAsync(resourceGroupName, dedicatedCapacityName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Resumes operation of the specified Dedicated capacity instance.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given PowerBIDedicated capacity is part. This name must be at least 1 character in length, and no more than 90.
     * @param dedicatedCapacityName The name of the Dedicated capacity. It must be at least 3 characters in length, and no more than 63.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<Void>> resumeWithServiceResponseAsync(String resourceGroupName, String dedicatedCapacityName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (dedicatedCapacityName == null) {
            throw new IllegalArgumentException("Parameter dedicatedCapacityName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Observable<Response<ResponseBody>> observable = service.resume(resourceGroupName, dedicatedCapacityName, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<Void>() { }.getType());
    }

    /**
     * Resumes operation of the specified Dedicated capacity instance.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given PowerBIDedicated capacity is part. This name must be at least 1 character in length, and no more than 90.
     * @param dedicatedCapacityName The name of the Dedicated capacity. It must be at least 3 characters in length, and no more than 63.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void beginResume(String resourceGroupName, String dedicatedCapacityName) {
        beginResumeWithServiceResponseAsync(resourceGroupName, dedicatedCapacityName).toBlocking().single().body();
    }

    /**
     * Resumes operation of the specified Dedicated capacity instance.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given PowerBIDedicated capacity is part. This name must be at least 1 character in length, and no more than 90.
     * @param dedicatedCapacityName The name of the Dedicated capacity. It must be at least 3 characters in length, and no more than 63.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> beginResumeAsync(String resourceGroupName, String dedicatedCapacityName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(beginResumeWithServiceResponseAsync(resourceGroupName, dedicatedCapacityName), serviceCallback);
    }

    /**
     * Resumes operation of the specified Dedicated capacity instance.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given PowerBIDedicated capacity is part. This name must be at least 1 character in length, and no more than 90.
     * @param dedicatedCapacityName The name of the Dedicated capacity. It must be at least 3 characters in length, and no more than 63.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> beginResumeAsync(String resourceGroupName, String dedicatedCapacityName) {
        return beginResumeWithServiceResponseAsync(resourceGroupName, dedicatedCapacityName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Resumes operation of the specified Dedicated capacity instance.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given PowerBIDedicated capacity is part. This name must be at least 1 character in length, and no more than 90.
     * @param dedicatedCapacityName The name of the Dedicated capacity. It must be at least 3 characters in length, and no more than 63.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> beginResumeWithServiceResponseAsync(String resourceGroupName, String dedicatedCapacityName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (dedicatedCapacityName == null) {
            throw new IllegalArgumentException("Parameter dedicatedCapacityName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.beginResume(resourceGroupName, dedicatedCapacityName, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = beginResumeDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> beginResumeDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets all the Dedicated capacities for the given resource group.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given PowerBIDedicated capacity is part. This name must be at least 1 character in length, and no more than 90.
     * @return the PagedList<DedicatedCapacityInner> object if successful.
     */
    public PagedList<DedicatedCapacityInner> listByResourceGroup(String resourceGroupName) {
        PageImpl<DedicatedCapacityInner> page = new PageImpl<>();
        page.setItems(listByResourceGroupWithServiceResponseAsync(resourceGroupName).toBlocking().single().body());
        page.setNextPageLink(null);
        return new PagedList<DedicatedCapacityInner>(page) {
            @Override
            public Page<DedicatedCapacityInner> nextPage(String nextPageLink) {
                return null;
            }
        };
    }

    /**
     * Gets all the Dedicated capacities for the given resource group.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given PowerBIDedicated capacity is part. This name must be at least 1 character in length, and no more than 90.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<DedicatedCapacityInner>> listByResourceGroupAsync(String resourceGroupName, final ServiceCallback<List<DedicatedCapacityInner>> serviceCallback) {
        return ServiceFuture.fromResponse(listByResourceGroupWithServiceResponseAsync(resourceGroupName), serviceCallback);
    }

    /**
     * Gets all the Dedicated capacities for the given resource group.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given PowerBIDedicated capacity is part. This name must be at least 1 character in length, and no more than 90.
     * @return the observable to the List&lt;DedicatedCapacityInner&gt; object
     */
    public Observable<Page<DedicatedCapacityInner>> listByResourceGroupAsync(String resourceGroupName) {
        return listByResourceGroupWithServiceResponseAsync(resourceGroupName).map(new Func1<ServiceResponse<List<DedicatedCapacityInner>>, Page<DedicatedCapacityInner>>() {
            @Override
            public Page<DedicatedCapacityInner> call(ServiceResponse<List<DedicatedCapacityInner>> response) {
                PageImpl<DedicatedCapacityInner> page = new PageImpl<>();
                page.setItems(response.body());
                return page;
            }
        });
    }

    /**
     * Gets all the Dedicated capacities for the given resource group.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given PowerBIDedicated capacity is part. This name must be at least 1 character in length, and no more than 90.
     * @return the observable to the List&lt;DedicatedCapacityInner&gt; object
     */
    public Observable<ServiceResponse<List<DedicatedCapacityInner>>> listByResourceGroupWithServiceResponseAsync(String resourceGroupName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByResourceGroup(resourceGroupName, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<DedicatedCapacityInner>>>>() {
                @Override
                public Observable<ServiceResponse<List<DedicatedCapacityInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<DedicatedCapacityInner>> result = listByResourceGroupDelegate(response);
                        List<DedicatedCapacityInner> items = null;
                        if (result.body() != null) {
                            items = result.body().items();
                        }
                        ServiceResponse<List<DedicatedCapacityInner>> clientResponse = new ServiceResponse<List<DedicatedCapacityInner>>(items, result.response());
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<DedicatedCapacityInner>> listByResourceGroupDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<DedicatedCapacityInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<DedicatedCapacityInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Lists all the Dedicated capacities for the given subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;DedicatedCapacityInner&gt; object if successful.
     */
    public List<DedicatedCapacityInner> list() {
        return listWithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     * Lists all the Dedicated capacities for the given subscription.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<DedicatedCapacityInner>> listAsync(final ServiceCallback<List<DedicatedCapacityInner>> serviceCallback) {
        return ServiceFuture.fromResponse(listWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Lists all the Dedicated capacities for the given subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;DedicatedCapacityInner&gt; object
     */
    public Observable<List<DedicatedCapacityInner>> listAsync() {
        return listWithServiceResponseAsync().map(new Func1<ServiceResponse<List<DedicatedCapacityInner>>, List<DedicatedCapacityInner>>() {
            @Override
            public List<DedicatedCapacityInner> call(ServiceResponse<List<DedicatedCapacityInner>> response) {
                return response.body();
            }
        });
    }

    /**
     * Lists all the Dedicated capacities for the given subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;DedicatedCapacityInner&gt; object
     */
    public Observable<ServiceResponse<List<DedicatedCapacityInner>>> listWithServiceResponseAsync() {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.list(this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<DedicatedCapacityInner>>>>() {
                @Override
                public Observable<ServiceResponse<List<DedicatedCapacityInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<DedicatedCapacityInner>> result = listDelegate(response);
                        List<DedicatedCapacityInner> items = null;
                        if (result.body() != null) {
                            items = result.body().items();
                        }
                        ServiceResponse<List<DedicatedCapacityInner>> clientResponse = new ServiceResponse<List<DedicatedCapacityInner>>(items, result.response());
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<DedicatedCapacityInner>> listDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<DedicatedCapacityInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<DedicatedCapacityInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Lists eligible SKUs for PowerBI Dedicated resource provider.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SkuEnumerationForNewResourceResultInner object if successful.
     */
    public SkuEnumerationForNewResourceResultInner listSkus() {
        return listSkusWithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     * Lists eligible SKUs for PowerBI Dedicated resource provider.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<SkuEnumerationForNewResourceResultInner> listSkusAsync(final ServiceCallback<SkuEnumerationForNewResourceResultInner> serviceCallback) {
        return ServiceFuture.fromResponse(listSkusWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Lists eligible SKUs for PowerBI Dedicated resource provider.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SkuEnumerationForNewResourceResultInner object
     */
    public Observable<SkuEnumerationForNewResourceResultInner> listSkusAsync() {
        return listSkusWithServiceResponseAsync().map(new Func1<ServiceResponse<SkuEnumerationForNewResourceResultInner>, SkuEnumerationForNewResourceResultInner>() {
            @Override
            public SkuEnumerationForNewResourceResultInner call(ServiceResponse<SkuEnumerationForNewResourceResultInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Lists eligible SKUs for PowerBI Dedicated resource provider.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SkuEnumerationForNewResourceResultInner object
     */
    public Observable<ServiceResponse<SkuEnumerationForNewResourceResultInner>> listSkusWithServiceResponseAsync() {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listSkus(this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<SkuEnumerationForNewResourceResultInner>>>() {
                @Override
                public Observable<ServiceResponse<SkuEnumerationForNewResourceResultInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<SkuEnumerationForNewResourceResultInner> clientResponse = listSkusDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<SkuEnumerationForNewResourceResultInner> listSkusDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<SkuEnumerationForNewResourceResultInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<SkuEnumerationForNewResourceResultInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Lists eligible SKUs for a PowerBI Dedicated resource.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given PowerBIDedicated capacity is part. This name must be at least 1 character in length, and no more than 90.
     * @param dedicatedCapacityName The name of the Dedicated capacity. It must be at least 3 characters in length, and no more than 63.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SkuEnumerationForExistingResourceResultInner object if successful.
     */
    public SkuEnumerationForExistingResourceResultInner listSkusForCapacity(String resourceGroupName, String dedicatedCapacityName) {
        return listSkusForCapacityWithServiceResponseAsync(resourceGroupName, dedicatedCapacityName).toBlocking().single().body();
    }

    /**
     * Lists eligible SKUs for a PowerBI Dedicated resource.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given PowerBIDedicated capacity is part. This name must be at least 1 character in length, and no more than 90.
     * @param dedicatedCapacityName The name of the Dedicated capacity. It must be at least 3 characters in length, and no more than 63.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<SkuEnumerationForExistingResourceResultInner> listSkusForCapacityAsync(String resourceGroupName, String dedicatedCapacityName, final ServiceCallback<SkuEnumerationForExistingResourceResultInner> serviceCallback) {
        return ServiceFuture.fromResponse(listSkusForCapacityWithServiceResponseAsync(resourceGroupName, dedicatedCapacityName), serviceCallback);
    }

    /**
     * Lists eligible SKUs for a PowerBI Dedicated resource.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given PowerBIDedicated capacity is part. This name must be at least 1 character in length, and no more than 90.
     * @param dedicatedCapacityName The name of the Dedicated capacity. It must be at least 3 characters in length, and no more than 63.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SkuEnumerationForExistingResourceResultInner object
     */
    public Observable<SkuEnumerationForExistingResourceResultInner> listSkusForCapacityAsync(String resourceGroupName, String dedicatedCapacityName) {
        return listSkusForCapacityWithServiceResponseAsync(resourceGroupName, dedicatedCapacityName).map(new Func1<ServiceResponse<SkuEnumerationForExistingResourceResultInner>, SkuEnumerationForExistingResourceResultInner>() {
            @Override
            public SkuEnumerationForExistingResourceResultInner call(ServiceResponse<SkuEnumerationForExistingResourceResultInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Lists eligible SKUs for a PowerBI Dedicated resource.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given PowerBIDedicated capacity is part. This name must be at least 1 character in length, and no more than 90.
     * @param dedicatedCapacityName The name of the Dedicated capacity. It must be at least 3 characters in length, and no more than 63.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SkuEnumerationForExistingResourceResultInner object
     */
    public Observable<ServiceResponse<SkuEnumerationForExistingResourceResultInner>> listSkusForCapacityWithServiceResponseAsync(String resourceGroupName, String dedicatedCapacityName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (dedicatedCapacityName == null) {
            throw new IllegalArgumentException("Parameter dedicatedCapacityName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listSkusForCapacity(resourceGroupName, dedicatedCapacityName, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<SkuEnumerationForExistingResourceResultInner>>>() {
                @Override
                public Observable<ServiceResponse<SkuEnumerationForExistingResourceResultInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<SkuEnumerationForExistingResourceResultInner> clientResponse = listSkusForCapacityDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<SkuEnumerationForExistingResourceResultInner> listSkusForCapacityDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<SkuEnumerationForExistingResourceResultInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<SkuEnumerationForExistingResourceResultInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Check the name availability in the target location.
     *
     * @param location The region name which the operation will lookup into.
     * @param capacityParameters The name of the capacity.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the CheckCapacityNameAvailabilityResultInner object if successful.
     */
    public CheckCapacityNameAvailabilityResultInner checkNameAvailability(String location, CheckCapacityNameAvailabilityParameters capacityParameters) {
        return checkNameAvailabilityWithServiceResponseAsync(location, capacityParameters).toBlocking().single().body();
    }

    /**
     * Check the name availability in the target location.
     *
     * @param location The region name which the operation will lookup into.
     * @param capacityParameters The name of the capacity.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<CheckCapacityNameAvailabilityResultInner> checkNameAvailabilityAsync(String location, CheckCapacityNameAvailabilityParameters capacityParameters, final ServiceCallback<CheckCapacityNameAvailabilityResultInner> serviceCallback) {
        return ServiceFuture.fromResponse(checkNameAvailabilityWithServiceResponseAsync(location, capacityParameters), serviceCallback);
    }

    /**
     * Check the name availability in the target location.
     *
     * @param location The region name which the operation will lookup into.
     * @param capacityParameters The name of the capacity.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CheckCapacityNameAvailabilityResultInner object
     */
    public Observable<CheckCapacityNameAvailabilityResultInner> checkNameAvailabilityAsync(String location, CheckCapacityNameAvailabilityParameters capacityParameters) {
        return checkNameAvailabilityWithServiceResponseAsync(location, capacityParameters).map(new Func1<ServiceResponse<CheckCapacityNameAvailabilityResultInner>, CheckCapacityNameAvailabilityResultInner>() {
            @Override
            public CheckCapacityNameAvailabilityResultInner call(ServiceResponse<CheckCapacityNameAvailabilityResultInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Check the name availability in the target location.
     *
     * @param location The region name which the operation will lookup into.
     * @param capacityParameters The name of the capacity.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CheckCapacityNameAvailabilityResultInner object
     */
    public Observable<ServiceResponse<CheckCapacityNameAvailabilityResultInner>> checkNameAvailabilityWithServiceResponseAsync(String location, CheckCapacityNameAvailabilityParameters capacityParameters) {
        if (location == null) {
            throw new IllegalArgumentException("Parameter location is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (capacityParameters == null) {
            throw new IllegalArgumentException("Parameter capacityParameters is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(capacityParameters);
        return service.checkNameAvailability(location, this.client.subscriptionId(), capacityParameters, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<CheckCapacityNameAvailabilityResultInner>>>() {
                @Override
                public Observable<ServiceResponse<CheckCapacityNameAvailabilityResultInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<CheckCapacityNameAvailabilityResultInner> clientResponse = checkNameAvailabilityDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<CheckCapacityNameAvailabilityResultInner> checkNameAvailabilityDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<CheckCapacityNameAvailabilityResultInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<CheckCapacityNameAvailabilityResultInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
