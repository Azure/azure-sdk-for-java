/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * def
 */

package com.microsoft.azure.management.powerbidedicated.v2017_10_01.implementation;

import com.microsoft.azure.arm.resources.collection.implementation.GroupableResourcesCoreImpl;
import com.microsoft.azure.management.powerbidedicated.v2017_10_01.Capacities;
import com.microsoft.azure.management.powerbidedicated.v2017_10_01.DedicatedCapacity;
import rx.Observable;
import rx.Completable;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import com.microsoft.azure.arm.resources.ResourceUtilsCore;
import com.microsoft.azure.arm.utils.RXMapper;
import rx.functions.Func1;
import com.microsoft.azure.PagedList;
import com.microsoft.azure.Page;
import java.util.List;
import com.microsoft.azure.management.powerbidedicated.v2017_10_01.SkuEnumerationForExistingResourceResult;
import com.microsoft.azure.management.powerbidedicated.v2017_10_01.SkuEnumerationForNewResourceResult;
import com.microsoft.azure.management.powerbidedicated.v2017_10_01.CheckCapacityNameAvailabilityResult;
import com.microsoft.azure.management.powerbidedicated.v2017_10_01.CheckCapacityNameAvailabilityParameters;

class CapacitiesImpl extends GroupableResourcesCoreImpl<DedicatedCapacity, DedicatedCapacityImpl, DedicatedCapacityInner, CapacitiesInner, PowerBIDedicatedManager>  implements Capacities {
    protected CapacitiesImpl(PowerBIDedicatedManager manager) {
        super(manager.inner().capacities(), manager);
    }

    @Override
    protected Observable<DedicatedCapacityInner> getInnerAsync(String resourceGroupName, String name) {
        CapacitiesInner client = this.inner();
        return client.getByResourceGroupAsync(resourceGroupName, name);
    }

    @Override
    protected Completable deleteInnerAsync(String resourceGroupName, String name) {
        CapacitiesInner client = this.inner();
        return client.deleteAsync(resourceGroupName, name).toCompletable();
    }

    @Override
    public Observable<String> deleteByIdsAsync(Collection<String> ids) {
        if (ids == null || ids.isEmpty()) {
            return Observable.empty();
        }
        Collection<Observable<String>> observables = new ArrayList<>();
        for (String id : ids) {
            final String resourceGroupName = ResourceUtilsCore.groupFromResourceId(id);
            final String name = ResourceUtilsCore.nameFromResourceId(id);
            Observable<String> o = RXMapper.map(this.inner().deleteAsync(resourceGroupName, name), id);
            observables.add(o);
        }
        return Observable.mergeDelayError(observables);
    }

    @Override
    public Observable<String> deleteByIdsAsync(String...ids) {
        return this.deleteByIdsAsync(new ArrayList<String>(Arrays.asList(ids)));
    }

    @Override
    public void deleteByIds(Collection<String> ids) {
        if (ids != null && !ids.isEmpty()) {
            this.deleteByIdsAsync(ids).toBlocking().last();
        }
    }

    @Override
    public void deleteByIds(String...ids) {
        this.deleteByIds(new ArrayList<String>(Arrays.asList(ids)));
    }

    @Override
    public PagedList<DedicatedCapacity> listByResourceGroup(String resourceGroupName) {
        CapacitiesInner client = this.inner();
        return this.wrapList(client.listByResourceGroup(resourceGroupName));
    }

    @Override
    public Observable<DedicatedCapacity> listByResourceGroupAsync(String resourceGroupName) {
        CapacitiesInner client = this.inner();
        return client.listByResourceGroupAsync(resourceGroupName)
        .flatMap(new Func1<Page<DedicatedCapacityInner>, Observable<DedicatedCapacityInner>>() {
            @Override
            public Observable<DedicatedCapacityInner> call(Page<DedicatedCapacityInner> innerPage) {
                return Observable.from(innerPage.items());
            }
        })
        .map(new Func1<DedicatedCapacityInner, DedicatedCapacity>() {
            @Override
            public DedicatedCapacity call(DedicatedCapacityInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public PagedList<DedicatedCapacity> list() {
        CapacitiesInner client = this.inner();
        return this.wrapList(client.list());
    }

    @Override
    public Observable<DedicatedCapacity> listAsync() {
        CapacitiesInner client = this.inner();
        return client.listAsync()
        .flatMap(new Func1<List<DedicatedCapacityInner>, Observable<DedicatedCapacityInner>>() {
            @Override
            public Observable<DedicatedCapacityInner> call(List<DedicatedCapacityInner> innerList) {
                return Observable.from(innerList);
            }
        })
        .map(new Func1<DedicatedCapacityInner, DedicatedCapacity>() {
            @Override
            public DedicatedCapacity call(DedicatedCapacityInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public DedicatedCapacityImpl define(String name) {
        return wrapModel(name);
    }

    @Override
    public Completable suspendAsync(String resourceGroupName, String dedicatedCapacityName) {
        CapacitiesInner client = this.inner();
        return client.suspendAsync(resourceGroupName, dedicatedCapacityName).toCompletable();
    }

    @Override
    public Completable resumeAsync(String resourceGroupName, String dedicatedCapacityName) {
        CapacitiesInner client = this.inner();
        return client.resumeAsync(resourceGroupName, dedicatedCapacityName).toCompletable();
    }

    @Override
    protected DedicatedCapacityImpl wrapModel(DedicatedCapacityInner inner) {
        return  new DedicatedCapacityImpl(inner.name(), inner, manager());
    }

    @Override
    protected DedicatedCapacityImpl wrapModel(String name) {
        return new DedicatedCapacityImpl(name, new DedicatedCapacityInner(), this.manager());
    }

    @Override
    public Observable<SkuEnumerationForExistingResourceResult> listSkusForCapacityAsync(String resourceGroupName, String dedicatedCapacityName) {
        CapacitiesInner client = this.inner();
        return client.listSkusForCapacityAsync(resourceGroupName, dedicatedCapacityName)
        .map(new Func1<SkuEnumerationForExistingResourceResultInner, SkuEnumerationForExistingResourceResult>() {
            @Override
            public SkuEnumerationForExistingResourceResult call(SkuEnumerationForExistingResourceResultInner inner) {
                return new SkuEnumerationForExistingResourceResultImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<SkuEnumerationForNewResourceResult> listSkusAsync() {
        CapacitiesInner client = this.inner();
        return client.listSkusAsync()
        .map(new Func1<SkuEnumerationForNewResourceResultInner, SkuEnumerationForNewResourceResult>() {
            @Override
            public SkuEnumerationForNewResourceResult call(SkuEnumerationForNewResourceResultInner inner) {
                return new SkuEnumerationForNewResourceResultImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<CheckCapacityNameAvailabilityResult> checkNameAvailabilityAsync(String location, CheckCapacityNameAvailabilityParameters capacityParameters) {
        CapacitiesInner client = this.inner();
        return client.checkNameAvailabilityAsync(location, capacityParameters)
        .map(new Func1<CheckCapacityNameAvailabilityResultInner, CheckCapacityNameAvailabilityResult>() {
            @Override
            public CheckCapacityNameAvailabilityResult call(CheckCapacityNameAvailabilityResultInner inner) {
                return new CheckCapacityNameAvailabilityResultImpl(inner, manager());
            }
        });
    }

}
