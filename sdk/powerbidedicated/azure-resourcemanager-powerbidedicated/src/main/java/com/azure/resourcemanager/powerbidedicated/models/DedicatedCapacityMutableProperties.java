// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.powerbidedicated.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;

/** An object that represents a set of mutable Dedicated capacity resource properties. */
@Fluent
public class DedicatedCapacityMutableProperties {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(DedicatedCapacityMutableProperties.class);

    /*
     * A collection of Dedicated capacity administrators
     */
    @JsonProperty(value = "administration")
    private DedicatedCapacityAdministrators administration;

    /*
     * The capacity mode.
     */
    @JsonProperty(value = "mode")
    private Mode mode;

    /**
     * Get the administration property: A collection of Dedicated capacity administrators.
     *
     * @return the administration value.
     */
    public DedicatedCapacityAdministrators administration() {
        return this.administration;
    }

    /**
     * Set the administration property: A collection of Dedicated capacity administrators.
     *
     * @param administration the administration value to set.
     * @return the DedicatedCapacityMutableProperties object itself.
     */
    public DedicatedCapacityMutableProperties withAdministration(DedicatedCapacityAdministrators administration) {
        this.administration = administration;
        return this;
    }

    /**
     * Get the mode property: The capacity mode.
     *
     * @return the mode value.
     */
    public Mode mode() {
        return this.mode;
    }

    /**
     * Set the mode property: The capacity mode.
     *
     * @param mode the mode value to set.
     * @return the DedicatedCapacityMutableProperties object itself.
     */
    public DedicatedCapacityMutableProperties withMode(Mode mode) {
        this.mode = mode;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (administration() != null) {
            administration().validate();
        }
    }
}
