// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.powerbidedicated.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.powerbidedicated.PowerBIDedicatedManager;
import com.azure.resourcemanager.powerbidedicated.models.CapacitySku;
import com.azure.resourcemanager.powerbidedicated.models.CapacitySkuTier;
import com.azure.resourcemanager.powerbidedicated.models.DedicatedCapacity;
import com.azure.resourcemanager.powerbidedicated.models.DedicatedCapacityAdministrators;
import com.azure.resourcemanager.powerbidedicated.models.Mode;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class CapacitiesCreateMockTests {
    @Test
    public void testCreate() throws Exception {
        String responseStr
            = "{\"sku\":{\"name\":\"gibtnm\",\"tier\":\"Premium\",\"capacity\":1258750458},\"properties\":{\"state\":\"Suspended\",\"provisioningState\":\"Succeeded\",\"administration\":{\"members\":[\"gwrtzju\",\"gwyzm\",\"txon\"]},\"mode\":\"Gen1\",\"tenantId\":\"avjcbpwx\",\"friendlyName\":\"srknftguv\"},\"location\":\"uhprwmdyvxqt\",\"tags\":{\"ibycno\":\"iwwroyqbexrmc\",\"nmefqsgzvahapj\":\"v\"},\"id\":\"zhpvgqzcjrvxd\",\"name\":\"zlmwlxkvugfhz\",\"type\":\"vawjvzunlu\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        PowerBIDedicatedManager manager = PowerBIDedicatedManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        DedicatedCapacity response = manager.capacities()
            .define("iotwmcdytdxwit")
            .withRegion("ow")
            .withExistingResourceGroup("euojgjrwju")
            .withSku(new CapacitySku().withName("nrjawgqwg")
                .withTier(CapacitySkuTier.AUTO_PREMIUM_HOST)
                .withCapacity(1353933533))
            .withTags(mapOf("lupj", "rzqlveu", "riplrbpbewtg", "khfxobbcswsrt"))
            .withAdministration(new DedicatedCapacityAdministrators().withMembers(Arrays.asList("gklwn")))
            .withMode(Mode.GEN2)
            .create();

        Assertions.assertEquals("uhprwmdyvxqt", response.location());
        Assertions.assertEquals("iwwroyqbexrmc", response.tags().get("ibycno"));
        Assertions.assertEquals("gibtnm", response.sku().name());
        Assertions.assertEquals(CapacitySkuTier.PREMIUM, response.sku().tier());
        Assertions.assertEquals(1258750458, response.sku().capacity());
        Assertions.assertEquals("gwrtzju", response.administration().members().get(0));
        Assertions.assertEquals(Mode.GEN1, response.mode());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
