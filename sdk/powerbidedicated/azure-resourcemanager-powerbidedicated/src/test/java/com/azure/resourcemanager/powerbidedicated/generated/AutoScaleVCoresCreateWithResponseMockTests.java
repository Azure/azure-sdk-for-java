// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.powerbidedicated.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.powerbidedicated.PowerBIDedicatedManager;
import com.azure.resourcemanager.powerbidedicated.models.AutoScaleVCore;
import com.azure.resourcemanager.powerbidedicated.models.AutoScaleVCoreSku;
import com.azure.resourcemanager.powerbidedicated.models.VCoreSkuTier;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class AutoScaleVCoresCreateWithResponseMockTests {
    @Test
    public void testCreateWithResponse() throws Exception {
        String responseStr
            = "{\"sku\":{\"name\":\"wlauwzizxbmpg\",\"tier\":\"AutoScale\",\"capacity\":85590242},\"properties\":{\"capacityObjectId\":\"uvpb\",\"provisioningState\":\"Succeeded\",\"capacityLimit\":1773574052},\"location\":\"rp\",\"tags\":{\"fgohdneuelfphs\":\"bmnzbtbhjpgl\",\"v\":\"yhtozfikdowwqu\",\"lvithhqzonosgg\":\"zx\",\"ljuti\":\"hcohfwdsjnk\"},\"id\":\"swacffgdkzz\",\"name\":\"wkfvhqcrailvp\",\"type\":\"ppfufl\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        PowerBIDedicatedManager manager = PowerBIDedicatedManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        AutoScaleVCore response = manager.autoScaleVCores()
            .define("fiwjmygtdssls")
            .withRegion("d")
            .withExistingResourceGroup("erscdntne")
            .withSku(new AutoScaleVCoreSku().withName("tmweriofzpyq")
                .withTier(VCoreSkuTier.AUTO_SCALE)
                .withCapacity(1966587888))
            .withTags(mapOf("mbes", "wiwubm", "okonzmnsikvmkqz", "dnkwwtppjflcxog", "eodkwobda", "qqkdltfzxmhhvhgu",
                "xndlkzgxhu", "xtibqdxbxwakbog"))
            .withCapacityObjectId("ets")
            .withCapacityLimit(199039203)
            .create();

        Assertions.assertEquals("rp", response.location());
        Assertions.assertEquals("bmnzbtbhjpgl", response.tags().get("fgohdneuelfphs"));
        Assertions.assertEquals("wlauwzizxbmpg", response.sku().name());
        Assertions.assertEquals(VCoreSkuTier.AUTO_SCALE, response.sku().tier());
        Assertions.assertEquals(85590242, response.sku().capacity());
        Assertions.assertEquals("uvpb", response.capacityObjectId());
        Assertions.assertEquals(1773574052, response.capacityLimit());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
