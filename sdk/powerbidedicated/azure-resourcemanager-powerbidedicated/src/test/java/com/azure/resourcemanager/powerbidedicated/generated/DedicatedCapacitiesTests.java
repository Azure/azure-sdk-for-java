// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.powerbidedicated.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.powerbidedicated.fluent.models.DedicatedCapacityInner;
import com.azure.resourcemanager.powerbidedicated.models.CapacitySku;
import com.azure.resourcemanager.powerbidedicated.models.CapacitySkuTier;
import com.azure.resourcemanager.powerbidedicated.models.DedicatedCapacities;
import com.azure.resourcemanager.powerbidedicated.models.DedicatedCapacityAdministrators;
import com.azure.resourcemanager.powerbidedicated.models.Mode;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DedicatedCapacitiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DedicatedCapacities model = BinaryData.fromString(
            "{\"value\":[{\"sku\":{\"name\":\"pmqnja\",\"tier\":\"AutoPremiumHost\",\"capacity\":1052966015},\"properties\":{\"state\":\"Scaling\",\"provisioningState\":\"Suspended\",\"administration\":{\"members\":[\"utegjvwmfdats\",\"mdvpjhulsu\",\"vmkjozkrwfndiodj\"]},\"mode\":\"Gen1\",\"tenantId\":\"ej\",\"friendlyName\":\"vwryoqpso\"},\"location\":\"ctazakljlahbcryf\",\"tags\":{\"xpaojakhmsbz\":\"dosyg\",\"hlxaolthqtr\":\"hcrzevd\"},\"id\":\"qjbpfzfsin\",\"name\":\"gvfcj\",\"type\":\"wzo\"},{\"sku\":{\"name\":\"xjtfelluwfzit\",\"tier\":\"PBIE_Azure\",\"capacity\":1181425969},\"properties\":{\"state\":\"Succeeded\",\"provisioningState\":\"Failed\",\"administration\":{\"members\":[\"fpdvhpfxxypi\",\"i\"]},\"mode\":\"Gen1\",\"tenantId\":\"huyb\",\"friendlyName\":\"podepoo\"},\"location\":\"nuvamiheogna\",\"tags\":{\"o\":\"xth\",\"cciqihnhungbwjz\":\"usivye\",\"kufubljo\":\"nfygxgispemvtz\",\"v\":\"xqeofjaeqjhqjba\"},\"id\":\"smjqulngsntnbyb\",\"name\":\"zgcwrw\",\"type\":\"lxxwrljdouskc\"},{\"sku\":{\"name\":\"vkocrcjdkwtn\",\"tier\":\"PBIE_Azure\",\"capacity\":1299495603},\"properties\":{\"state\":\"Preparing\",\"provisioningState\":\"Pausing\",\"administration\":{\"members\":[\"ssainqpjwnzll\",\"fmppe\"]},\"mode\":\"Gen1\",\"tenantId\":\"gxsabkyq\",\"friendlyName\":\"ujitcjcz\"},\"location\":\"evndh\",\"tags\":{\"dkvwrwjfe\":\"pdappds\",\"je\":\"snhu\",\"hocdgeab\":\"tmrldhugjzzdatq\"},\"id\":\"gphuticndvka\",\"name\":\"zwyiftyhxhur\",\"type\":\"k\"},{\"sku\":{\"name\":\"tyxolniwpwc\",\"tier\":\"Premium\",\"capacity\":1720882214},\"properties\":{\"state\":\"Suspended\",\"provisioningState\":\"Suspended\",\"administration\":{\"members\":[\"ypl\",\"ckbasyypndd\",\"sgcbac\",\"hejkotynqgou\"]},\"mode\":\"Gen1\",\"tenantId\":\"likwyqkgfgib\",\"friendlyName\":\"dgak\"},\"location\":\"s\",\"tags\":{\"ouf\":\"bzqqedqytbciq\"},\"id\":\"mmnkzsmodmgl\",\"name\":\"ugpbkw\",\"type\":\"mutduqktaps\"}]}")
            .toObject(DedicatedCapacities.class);
        Assertions.assertEquals("ctazakljlahbcryf", model.value().get(0).location());
        Assertions.assertEquals("dosyg", model.value().get(0).tags().get("xpaojakhmsbz"));
        Assertions.assertEquals("pmqnja", model.value().get(0).sku().name());
        Assertions.assertEquals(CapacitySkuTier.AUTO_PREMIUM_HOST, model.value().get(0).sku().tier());
        Assertions.assertEquals(1052966015, model.value().get(0).sku().capacity());
        Assertions.assertEquals("utegjvwmfdats", model.value().get(0).administration().members().get(0));
        Assertions.assertEquals(Mode.GEN1, model.value().get(0).mode());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DedicatedCapacities model = new DedicatedCapacities().withValue(Arrays.asList(
            new DedicatedCapacityInner().withLocation("ctazakljlahbcryf")
                .withTags(mapOf("xpaojakhmsbz", "dosyg", "hlxaolthqtr", "hcrzevd"))
                .withSku(new CapacitySku().withName("pmqnja")
                    .withTier(CapacitySkuTier.AUTO_PREMIUM_HOST)
                    .withCapacity(1052966015))
                .withAdministration(new DedicatedCapacityAdministrators()
                    .withMembers(Arrays.asList("utegjvwmfdats", "mdvpjhulsu", "vmkjozkrwfndiodj")))
                .withMode(Mode.GEN1),
            new DedicatedCapacityInner().withLocation("nuvamiheogna")
                .withTags(mapOf("o", "xth", "cciqihnhungbwjz", "usivye", "kufubljo", "nfygxgispemvtz", "v",
                    "xqeofjaeqjhqjba"))
                .withSku(new CapacitySku().withName("xjtfelluwfzit")
                    .withTier(CapacitySkuTier.PBIE_AZURE)
                    .withCapacity(1181425969))
                .withAdministration(
                    new DedicatedCapacityAdministrators().withMembers(Arrays.asList("fpdvhpfxxypi", "i")))
                .withMode(Mode.GEN1),
            new DedicatedCapacityInner().withLocation("evndh")
                .withTags(mapOf("dkvwrwjfe", "pdappds", "je", "snhu", "hocdgeab", "tmrldhugjzzdatq"))
                .withSku(new CapacitySku().withName("vkocrcjdkwtn")
                    .withTier(CapacitySkuTier.PBIE_AZURE)
                    .withCapacity(1299495603))
                .withAdministration(
                    new DedicatedCapacityAdministrators().withMembers(Arrays.asList("ssainqpjwnzll", "fmppe")))
                .withMode(Mode.GEN1),
            new DedicatedCapacityInner().withLocation("s")
                .withTags(mapOf("ouf", "bzqqedqytbciq"))
                .withSku(new CapacitySku().withName("tyxolniwpwc")
                    .withTier(CapacitySkuTier.PREMIUM)
                    .withCapacity(1720882214))
                .withAdministration(new DedicatedCapacityAdministrators()
                    .withMembers(Arrays.asList("ypl", "ckbasyypndd", "sgcbac", "hejkotynqgou")))
                .withMode(Mode.GEN1)));
        model = BinaryData.fromObject(model).toObject(DedicatedCapacities.class);
        Assertions.assertEquals("ctazakljlahbcryf", model.value().get(0).location());
        Assertions.assertEquals("dosyg", model.value().get(0).tags().get("xpaojakhmsbz"));
        Assertions.assertEquals("pmqnja", model.value().get(0).sku().name());
        Assertions.assertEquals(CapacitySkuTier.AUTO_PREMIUM_HOST, model.value().get(0).sku().tier());
        Assertions.assertEquals(1052966015, model.value().get(0).sku().capacity());
        Assertions.assertEquals("utegjvwmfdats", model.value().get(0).administration().members().get(0));
        Assertions.assertEquals(Mode.GEN1, model.value().get(0).mode());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
