// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.powerbidedicated.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.powerbidedicated.fluent.models.AutoScaleVCoreInner;
import com.azure.resourcemanager.powerbidedicated.models.AutoScaleVCoreSku;
import com.azure.resourcemanager.powerbidedicated.models.VCoreSkuTier;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AutoScaleVCoreInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AutoScaleVCoreInner model = BinaryData.fromString(
            "{\"sku\":{\"name\":\"v\",\"tier\":\"AutoScale\",\"capacity\":1443350377},\"properties\":{\"capacityObjectId\":\"bzoggigrx\",\"provisioningState\":\"Succeeded\",\"capacityLimit\":2000842411},\"location\":\"xxjnspydptk\",\"tags\":{\"bldngkpoc\":\"kouknvudwtiu\",\"npiucgygevqznty\":\"pazyxoegukg\"},\"id\":\"mrbpizcdrqj\",\"name\":\"dpydn\",\"type\":\"yhxdeoejzicwi\"}")
            .toObject(AutoScaleVCoreInner.class);
        Assertions.assertEquals("xxjnspydptk", model.location());
        Assertions.assertEquals("kouknvudwtiu", model.tags().get("bldngkpoc"));
        Assertions.assertEquals("v", model.sku().name());
        Assertions.assertEquals(VCoreSkuTier.AUTO_SCALE, model.sku().tier());
        Assertions.assertEquals(1443350377, model.sku().capacity());
        Assertions.assertEquals("bzoggigrx", model.capacityObjectId());
        Assertions.assertEquals(2000842411, model.capacityLimit());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AutoScaleVCoreInner model = new AutoScaleVCoreInner().withLocation("xxjnspydptk")
            .withTags(mapOf("bldngkpoc", "kouknvudwtiu", "npiucgygevqznty", "pazyxoegukg"))
            .withSku(new AutoScaleVCoreSku().withName("v").withTier(VCoreSkuTier.AUTO_SCALE).withCapacity(1443350377))
            .withCapacityObjectId("bzoggigrx")
            .withCapacityLimit(2000842411);
        model = BinaryData.fromObject(model).toObject(AutoScaleVCoreInner.class);
        Assertions.assertEquals("xxjnspydptk", model.location());
        Assertions.assertEquals("kouknvudwtiu", model.tags().get("bldngkpoc"));
        Assertions.assertEquals("v", model.sku().name());
        Assertions.assertEquals(VCoreSkuTier.AUTO_SCALE, model.sku().tier());
        Assertions.assertEquals(1443350377, model.sku().capacity());
        Assertions.assertEquals("bzoggigrx", model.capacityObjectId());
        Assertions.assertEquals(2000842411, model.capacityLimit());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
