// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.paloaltonetworks.ngfw.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Log Destination.
 */
@Fluent
public final class LogDestination implements JsonSerializable<LogDestination> {
    /*
     * Storage account configurations
     */
    private StorageAccount storageConfigurations;

    /*
     * Event Hub configurations
     */
    private EventHub eventHubConfigurations;

    /*
     * Monitor Log configurations
     */
    private MonitorLog monitorConfigurations;

    /**
     * Creates an instance of LogDestination class.
     */
    public LogDestination() {
    }

    /**
     * Get the storageConfigurations property: Storage account configurations.
     * 
     * @return the storageConfigurations value.
     */
    public StorageAccount storageConfigurations() {
        return this.storageConfigurations;
    }

    /**
     * Set the storageConfigurations property: Storage account configurations.
     * 
     * @param storageConfigurations the storageConfigurations value to set.
     * @return the LogDestination object itself.
     */
    public LogDestination withStorageConfigurations(StorageAccount storageConfigurations) {
        this.storageConfigurations = storageConfigurations;
        return this;
    }

    /**
     * Get the eventHubConfigurations property: Event Hub configurations.
     * 
     * @return the eventHubConfigurations value.
     */
    public EventHub eventHubConfigurations() {
        return this.eventHubConfigurations;
    }

    /**
     * Set the eventHubConfigurations property: Event Hub configurations.
     * 
     * @param eventHubConfigurations the eventHubConfigurations value to set.
     * @return the LogDestination object itself.
     */
    public LogDestination withEventHubConfigurations(EventHub eventHubConfigurations) {
        this.eventHubConfigurations = eventHubConfigurations;
        return this;
    }

    /**
     * Get the monitorConfigurations property: Monitor Log configurations.
     * 
     * @return the monitorConfigurations value.
     */
    public MonitorLog monitorConfigurations() {
        return this.monitorConfigurations;
    }

    /**
     * Set the monitorConfigurations property: Monitor Log configurations.
     * 
     * @param monitorConfigurations the monitorConfigurations value to set.
     * @return the LogDestination object itself.
     */
    public LogDestination withMonitorConfigurations(MonitorLog monitorConfigurations) {
        this.monitorConfigurations = monitorConfigurations;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (storageConfigurations() != null) {
            storageConfigurations().validate();
        }
        if (eventHubConfigurations() != null) {
            eventHubConfigurations().validate();
        }
        if (monitorConfigurations() != null) {
            monitorConfigurations().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("storageConfigurations", this.storageConfigurations);
        jsonWriter.writeJsonField("eventHubConfigurations", this.eventHubConfigurations);
        jsonWriter.writeJsonField("monitorConfigurations", this.monitorConfigurations);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LogDestination from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LogDestination if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the LogDestination.
     */
    public static LogDestination fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LogDestination deserializedLogDestination = new LogDestination();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("storageConfigurations".equals(fieldName)) {
                    deserializedLogDestination.storageConfigurations = StorageAccount.fromJson(reader);
                } else if ("eventHubConfigurations".equals(fieldName)) {
                    deserializedLogDestination.eventHubConfigurations = EventHub.fromJson(reader);
                } else if ("monitorConfigurations".equals(fieldName)) {
                    deserializedLogDestination.monitorConfigurations = MonitorLog.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLogDestination;
        });
    }
}
