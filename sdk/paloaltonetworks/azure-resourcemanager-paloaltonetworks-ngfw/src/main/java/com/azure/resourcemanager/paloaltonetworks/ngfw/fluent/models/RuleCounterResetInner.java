// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.paloaltonetworks.ngfw.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Rule counter reset.
 */
@Immutable
public final class RuleCounterResetInner implements JsonSerializable<RuleCounterResetInner> {
    /*
     * priority number
     */
    private String priority;

    /*
     * rule Stack Name
     */
    private String ruleStackName;

    /*
     * rule list name
     */
    private String ruleListName;

    /*
     * firewall name
     */
    private String firewallName;

    /*
     * rule name
     */
    private String ruleName;

    /**
     * Creates an instance of RuleCounterResetInner class.
     */
    private RuleCounterResetInner() {
    }

    /**
     * Get the priority property: priority number.
     * 
     * @return the priority value.
     */
    public String priority() {
        return this.priority;
    }

    /**
     * Get the ruleStackName property: rule Stack Name.
     * 
     * @return the ruleStackName value.
     */
    public String ruleStackName() {
        return this.ruleStackName;
    }

    /**
     * Get the ruleListName property: rule list name.
     * 
     * @return the ruleListName value.
     */
    public String ruleListName() {
        return this.ruleListName;
    }

    /**
     * Get the firewallName property: firewall name.
     * 
     * @return the firewallName value.
     */
    public String firewallName() {
        return this.firewallName;
    }

    /**
     * Get the ruleName property: rule name.
     * 
     * @return the ruleName value.
     */
    public String ruleName() {
        return this.ruleName;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("ruleStackName", this.ruleStackName);
        jsonWriter.writeStringField("ruleListName", this.ruleListName);
        jsonWriter.writeStringField("firewallName", this.firewallName);
        jsonWriter.writeStringField("ruleName", this.ruleName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RuleCounterResetInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RuleCounterResetInner if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the RuleCounterResetInner.
     */
    public static RuleCounterResetInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RuleCounterResetInner deserializedRuleCounterResetInner = new RuleCounterResetInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("priority".equals(fieldName)) {
                    deserializedRuleCounterResetInner.priority = reader.getString();
                } else if ("ruleStackName".equals(fieldName)) {
                    deserializedRuleCounterResetInner.ruleStackName = reader.getString();
                } else if ("ruleListName".equals(fieldName)) {
                    deserializedRuleCounterResetInner.ruleListName = reader.getString();
                } else if ("firewallName".equals(fieldName)) {
                    deserializedRuleCounterResetInner.firewallName = reader.getString();
                } else if ("ruleName".equals(fieldName)) {
                    deserializedRuleCounterResetInner.ruleName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRuleCounterResetInner;
        });
    }
}
