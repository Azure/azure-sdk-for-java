// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.paloaltonetworks.ngfw.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * EventHub configurations.
 */
@Fluent
public final class EventHub implements JsonSerializable<EventHub> {
    /*
     * Resource ID of EventHub
     */
    private String id;

    /*
     * Subscription Id
     */
    private String subscriptionId;

    /*
     * EventHub name
     */
    private String name;

    /*
     * EventHub namespace
     */
    private String nameSpace;

    /*
     * EventHub policy name
     */
    private String policyName;

    /**
     * Creates an instance of EventHub class.
     */
    public EventHub() {
    }

    /**
     * Get the id property: Resource ID of EventHub.
     * 
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Set the id property: Resource ID of EventHub.
     * 
     * @param id the id value to set.
     * @return the EventHub object itself.
     */
    public EventHub withId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get the subscriptionId property: Subscription Id.
     * 
     * @return the subscriptionId value.
     */
    public String subscriptionId() {
        return this.subscriptionId;
    }

    /**
     * Set the subscriptionId property: Subscription Id.
     * 
     * @param subscriptionId the subscriptionId value to set.
     * @return the EventHub object itself.
     */
    public EventHub withSubscriptionId(String subscriptionId) {
        this.subscriptionId = subscriptionId;
        return this;
    }

    /**
     * Get the name property: EventHub name.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: EventHub name.
     * 
     * @param name the name value to set.
     * @return the EventHub object itself.
     */
    public EventHub withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the nameSpace property: EventHub namespace.
     * 
     * @return the nameSpace value.
     */
    public String nameSpace() {
        return this.nameSpace;
    }

    /**
     * Set the nameSpace property: EventHub namespace.
     * 
     * @param nameSpace the nameSpace value to set.
     * @return the EventHub object itself.
     */
    public EventHub withNameSpace(String nameSpace) {
        this.nameSpace = nameSpace;
        return this;
    }

    /**
     * Get the policyName property: EventHub policy name.
     * 
     * @return the policyName value.
     */
    public String policyName() {
        return this.policyName;
    }

    /**
     * Set the policyName property: EventHub policy name.
     * 
     * @param policyName the policyName value to set.
     * @return the EventHub object itself.
     */
    public EventHub withPolicyName(String policyName) {
        this.policyName = policyName;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeStringField("subscriptionId", this.subscriptionId);
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("nameSpace", this.nameSpace);
        jsonWriter.writeStringField("policyName", this.policyName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EventHub from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of EventHub if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the EventHub.
     */
    public static EventHub fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            EventHub deserializedEventHub = new EventHub();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedEventHub.id = reader.getString();
                } else if ("subscriptionId".equals(fieldName)) {
                    deserializedEventHub.subscriptionId = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedEventHub.name = reader.getString();
                } else if ("nameSpace".equals(fieldName)) {
                    deserializedEventHub.nameSpace = reader.getString();
                } else if ("policyName".equals(fieldName)) {
                    deserializedEventHub.policyName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedEventHub;
        });
    }
}
