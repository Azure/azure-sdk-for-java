// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.paloaltonetworks.ngfw.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.paloaltonetworks.ngfw.fluent.PostRulesClient;
import com.azure.resourcemanager.paloaltonetworks.ngfw.fluent.models.PostRulesResourceInner;
import com.azure.resourcemanager.paloaltonetworks.ngfw.fluent.models.RuleCounterInner;
import com.azure.resourcemanager.paloaltonetworks.ngfw.fluent.models.RuleCounterResetInner;
import com.azure.resourcemanager.paloaltonetworks.ngfw.implementation.models.PostRulesResourceListResult;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in PostRulesClient.
 */
public final class PostRulesClientImpl implements PostRulesClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final PostRulesService service;

    /**
     * The service client containing this operation class.
     */
    private final PaloAltoNetworksNgfwManagementClientImpl client;

    /**
     * Initializes an instance of PostRulesClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    PostRulesClientImpl(PaloAltoNetworksNgfwManagementClientImpl client) {
        this.service
            = RestProxy.create(PostRulesService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for PaloAltoNetworksNgfwManagementClientPostRules to be used by the proxy
     * service to perform REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "PaloAltoNetworksNgfwManagementClientPostRules")
    public interface PostRulesService {
        @Headers({ "Content-Type: application/json" })
        @Get("/providers/PaloAltoNetworks.Cloudngfw/globalRulestacks/{globalRulestackName}/postRules/{priority}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<PostRulesResourceInner>> get(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("globalRulestackName") String globalRulestackName,
            @PathParam("priority") String priority, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/providers/PaloAltoNetworks.Cloudngfw/globalRulestacks/{globalRulestackName}/postRules/{priority}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<PostRulesResourceInner> getSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("globalRulestackName") String globalRulestackName,
            @PathParam("priority") String priority, @HeaderParam("Accept") String accept, Context context);

        @Put("/providers/PaloAltoNetworks.Cloudngfw/globalRulestacks/{globalRulestackName}/postRules/{priority}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> createOrUpdate(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("globalRulestackName") String globalRulestackName,
            @PathParam("priority") String priority, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") PostRulesResourceInner resource,
            Context context);

        @Put("/providers/PaloAltoNetworks.Cloudngfw/globalRulestacks/{globalRulestackName}/postRules/{priority}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> createOrUpdateSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("globalRulestackName") String globalRulestackName,
            @PathParam("priority") String priority, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") PostRulesResourceInner resource,
            Context context);

        @Headers({ "Accept: application/json;q=0.9", "Content-Type: application/json" })
        @Delete("/providers/PaloAltoNetworks.Cloudngfw/globalRulestacks/{globalRulestackName}/postRules/{priority}")
        @ExpectedResponses({ 200, 202, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> delete(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("globalRulestackName") String globalRulestackName,
            @PathParam("priority") String priority, Context context);

        @Headers({ "Accept: application/json;q=0.9", "Content-Type: application/json" })
        @Delete("/providers/PaloAltoNetworks.Cloudngfw/globalRulestacks/{globalRulestackName}/postRules/{priority}")
        @ExpectedResponses({ 200, 202, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> deleteSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("globalRulestackName") String globalRulestackName,
            @PathParam("priority") String priority, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/providers/PaloAltoNetworks.Cloudngfw/globalRulestacks/{globalRulestackName}/postRules")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<PostRulesResourceListResult>> list(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("globalRulestackName") String globalRulestackName,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/providers/PaloAltoNetworks.Cloudngfw/globalRulestacks/{globalRulestackName}/postRules")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<PostRulesResourceListResult> listSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("globalRulestackName") String globalRulestackName,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/providers/PaloAltoNetworks.Cloudngfw/globalRulestacks/{globalRulestackName}/postRules/{priority}/getCounters")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<RuleCounterInner>> getCounters(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("globalRulestackName") String globalRulestackName,
            @PathParam("priority") String priority, @QueryParam("firewallName") String firewallName,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/providers/PaloAltoNetworks.Cloudngfw/globalRulestacks/{globalRulestackName}/postRules/{priority}/getCounters")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<RuleCounterInner> getCountersSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("globalRulestackName") String globalRulestackName,
            @PathParam("priority") String priority, @QueryParam("firewallName") String firewallName,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Accept: application/json;q=0.9", "Content-Type: application/json" })
        @Post("/providers/PaloAltoNetworks.Cloudngfw/globalRulestacks/{globalRulestackName}/postRules/{priority}/refreshCounters")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Void>> refreshCounters(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("globalRulestackName") String globalRulestackName,
            @PathParam("priority") String priority, @QueryParam("firewallName") String firewallName, Context context);

        @Headers({ "Accept: application/json;q=0.9", "Content-Type: application/json" })
        @Post("/providers/PaloAltoNetworks.Cloudngfw/globalRulestacks/{globalRulestackName}/postRules/{priority}/refreshCounters")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<Void> refreshCountersSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("globalRulestackName") String globalRulestackName,
            @PathParam("priority") String priority, @QueryParam("firewallName") String firewallName, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/providers/PaloAltoNetworks.Cloudngfw/globalRulestacks/{globalRulestackName}/postRules/{priority}/resetCounters")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<RuleCounterResetInner>> resetCounters(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("globalRulestackName") String globalRulestackName,
            @PathParam("priority") String priority, @QueryParam("firewallName") String firewallName,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/providers/PaloAltoNetworks.Cloudngfw/globalRulestacks/{globalRulestackName}/postRules/{priority}/resetCounters")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<RuleCounterResetInner> resetCountersSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("globalRulestackName") String globalRulestackName,
            @PathParam("priority") String priority, @QueryParam("firewallName") String firewallName,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<PostRulesResourceListResult>> listNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<PostRulesResourceListResult> listNextSync(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Get a PostRulesResource.
     * 
     * @param globalRulestackName GlobalRulestack resource name.
     * @param priority Post Rule priority.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a PostRulesResource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<PostRulesResourceInner>> getWithResponseAsync(String globalRulestackName, String priority) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.get(this.client.getEndpoint(), this.client.getApiVersion(),
                globalRulestackName, priority, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get a PostRulesResource.
     * 
     * @param globalRulestackName GlobalRulestack resource name.
     * @param priority Post Rule priority.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a PostRulesResource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PostRulesResourceInner> getAsync(String globalRulestackName, String priority) {
        return getWithResponseAsync(globalRulestackName, priority).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get a PostRulesResource.
     * 
     * @param globalRulestackName GlobalRulestack resource name.
     * @param priority Post Rule priority.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a PostRulesResource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<PostRulesResourceInner> getWithResponse(String globalRulestackName, String priority,
        Context context) {
        final String accept = "application/json";
        return service.getSync(this.client.getEndpoint(), this.client.getApiVersion(), globalRulestackName, priority,
            accept, context);
    }

    /**
     * Get a PostRulesResource.
     * 
     * @param globalRulestackName GlobalRulestack resource name.
     * @param priority Post Rule priority.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a PostRulesResource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PostRulesResourceInner get(String globalRulestackName, String priority) {
        return getWithResponse(globalRulestackName, priority, Context.NONE).getValue();
    }

    /**
     * Create a PostRulesResource.
     * 
     * @param globalRulestackName GlobalRulestack resource name.
     * @param priority Post Rule priority.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return postRulestack rule list along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(String globalRulestackName,
        String priority, PostRulesResourceInner resource) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.createOrUpdate(this.client.getEndpoint(), this.client.getApiVersion(),
                globalRulestackName, priority, contentType, accept, resource, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Create a PostRulesResource.
     * 
     * @param globalRulestackName GlobalRulestack resource name.
     * @param priority Post Rule priority.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return postRulestack rule list along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> createOrUpdateWithResponse(String globalRulestackName, String priority,
        PostRulesResourceInner resource) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.createOrUpdateSync(this.client.getEndpoint(), this.client.getApiVersion(), globalRulestackName,
            priority, contentType, accept, resource, Context.NONE);
    }

    /**
     * Create a PostRulesResource.
     * 
     * @param globalRulestackName GlobalRulestack resource name.
     * @param priority Post Rule priority.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return postRulestack rule list along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> createOrUpdateWithResponse(String globalRulestackName, String priority,
        PostRulesResourceInner resource, Context context) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.createOrUpdateSync(this.client.getEndpoint(), this.client.getApiVersion(), globalRulestackName,
            priority, contentType, accept, resource, context);
    }

    /**
     * Create a PostRulesResource.
     * 
     * @param globalRulestackName GlobalRulestack resource name.
     * @param priority Post Rule priority.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of postRulestack rule list.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<PostRulesResourceInner>, PostRulesResourceInner>
        beginCreateOrUpdateAsync(String globalRulestackName, String priority, PostRulesResourceInner resource) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = createOrUpdateWithResponseAsync(globalRulestackName, priority, resource);
        return this.client.<PostRulesResourceInner, PostRulesResourceInner>getLroResult(mono,
            this.client.getHttpPipeline(), PostRulesResourceInner.class, PostRulesResourceInner.class,
            this.client.getContext());
    }

    /**
     * Create a PostRulesResource.
     * 
     * @param globalRulestackName GlobalRulestack resource name.
     * @param priority Post Rule priority.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of postRulestack rule list.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<PostRulesResourceInner>, PostRulesResourceInner>
        beginCreateOrUpdate(String globalRulestackName, String priority, PostRulesResourceInner resource) {
        Response<BinaryData> response = createOrUpdateWithResponse(globalRulestackName, priority, resource);
        return this.client.<PostRulesResourceInner, PostRulesResourceInner>getLroResult(response,
            PostRulesResourceInner.class, PostRulesResourceInner.class, Context.NONE);
    }

    /**
     * Create a PostRulesResource.
     * 
     * @param globalRulestackName GlobalRulestack resource name.
     * @param priority Post Rule priority.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of postRulestack rule list.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<PostRulesResourceInner>, PostRulesResourceInner> beginCreateOrUpdate(
        String globalRulestackName, String priority, PostRulesResourceInner resource, Context context) {
        Response<BinaryData> response = createOrUpdateWithResponse(globalRulestackName, priority, resource, context);
        return this.client.<PostRulesResourceInner, PostRulesResourceInner>getLroResult(response,
            PostRulesResourceInner.class, PostRulesResourceInner.class, context);
    }

    /**
     * Create a PostRulesResource.
     * 
     * @param globalRulestackName GlobalRulestack resource name.
     * @param priority Post Rule priority.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return postRulestack rule list on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PostRulesResourceInner> createOrUpdateAsync(String globalRulestackName, String priority,
        PostRulesResourceInner resource) {
        return beginCreateOrUpdateAsync(globalRulestackName, priority, resource).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create a PostRulesResource.
     * 
     * @param globalRulestackName GlobalRulestack resource name.
     * @param priority Post Rule priority.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return postRulestack rule list.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PostRulesResourceInner createOrUpdate(String globalRulestackName, String priority,
        PostRulesResourceInner resource) {
        return beginCreateOrUpdate(globalRulestackName, priority, resource).getFinalResult();
    }

    /**
     * Create a PostRulesResource.
     * 
     * @param globalRulestackName GlobalRulestack resource name.
     * @param priority Post Rule priority.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return postRulestack rule list.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PostRulesResourceInner createOrUpdate(String globalRulestackName, String priority,
        PostRulesResourceInner resource, Context context) {
        return beginCreateOrUpdate(globalRulestackName, priority, resource, context).getFinalResult();
    }

    /**
     * Delete a PostRulesResource.
     * 
     * @param globalRulestackName GlobalRulestack resource name.
     * @param priority Post Rule priority.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(String globalRulestackName, String priority) {
        return FluxUtil
            .withContext(context -> service.delete(this.client.getEndpoint(), this.client.getApiVersion(),
                globalRulestackName, priority, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Delete a PostRulesResource.
     * 
     * @param globalRulestackName GlobalRulestack resource name.
     * @param priority Post Rule priority.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> deleteWithResponse(String globalRulestackName, String priority) {
        return service.deleteSync(this.client.getEndpoint(), this.client.getApiVersion(), globalRulestackName, priority,
            Context.NONE);
    }

    /**
     * Delete a PostRulesResource.
     * 
     * @param globalRulestackName GlobalRulestack resource name.
     * @param priority Post Rule priority.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> deleteWithResponse(String globalRulestackName, String priority, Context context) {
        return service.deleteSync(this.client.getEndpoint(), this.client.getApiVersion(), globalRulestackName, priority,
            context);
    }

    /**
     * Delete a PostRulesResource.
     * 
     * @param globalRulestackName GlobalRulestack resource name.
     * @param priority Post Rule priority.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(String globalRulestackName, String priority) {
        Mono<Response<Flux<ByteBuffer>>> mono = deleteWithResponseAsync(globalRulestackName, priority);
        return this.client.<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class,
            this.client.getContext());
    }

    /**
     * Delete a PostRulesResource.
     * 
     * @param globalRulestackName GlobalRulestack resource name.
     * @param priority Post Rule priority.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String globalRulestackName, String priority) {
        Response<BinaryData> response = deleteWithResponse(globalRulestackName, priority);
        return this.client.<Void, Void>getLroResult(response, Void.class, Void.class, Context.NONE);
    }

    /**
     * Delete a PostRulesResource.
     * 
     * @param globalRulestackName GlobalRulestack resource name.
     * @param priority Post Rule priority.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String globalRulestackName, String priority,
        Context context) {
        Response<BinaryData> response = deleteWithResponse(globalRulestackName, priority, context);
        return this.client.<Void, Void>getLroResult(response, Void.class, Void.class, context);
    }

    /**
     * Delete a PostRulesResource.
     * 
     * @param globalRulestackName GlobalRulestack resource name.
     * @param priority Post Rule priority.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String globalRulestackName, String priority) {
        return beginDeleteAsync(globalRulestackName, priority).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Delete a PostRulesResource.
     * 
     * @param globalRulestackName GlobalRulestack resource name.
     * @param priority Post Rule priority.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String globalRulestackName, String priority) {
        beginDelete(globalRulestackName, priority).getFinalResult();
    }

    /**
     * Delete a PostRulesResource.
     * 
     * @param globalRulestackName GlobalRulestack resource name.
     * @param priority Post Rule priority.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String globalRulestackName, String priority, Context context) {
        beginDelete(globalRulestackName, priority, context).getFinalResult();
    }

    /**
     * List PostRulesResource resources by Tenant.
     * 
     * @param globalRulestackName GlobalRulestack resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a PostRulesResource list operation along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<PostRulesResourceInner>> listSinglePageAsync(String globalRulestackName) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.list(this.client.getEndpoint(), this.client.getApiVersion(),
                globalRulestackName, accept, context))
            .<PagedResponse<PostRulesResourceInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * List PostRulesResource resources by Tenant.
     * 
     * @param globalRulestackName GlobalRulestack resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a PostRulesResource list operation as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<PostRulesResourceInner> listAsync(String globalRulestackName) {
        return new PagedFlux<>(() -> listSinglePageAsync(globalRulestackName),
            nextLink -> listNextSinglePageAsync(nextLink));
    }

    /**
     * List PostRulesResource resources by Tenant.
     * 
     * @param globalRulestackName GlobalRulestack resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a PostRulesResource list operation along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<PostRulesResourceInner> listSinglePage(String globalRulestackName) {
        final String accept = "application/json";
        Response<PostRulesResourceListResult> res = service.listSync(this.client.getEndpoint(),
            this.client.getApiVersion(), globalRulestackName, accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * List PostRulesResource resources by Tenant.
     * 
     * @param globalRulestackName GlobalRulestack resource name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a PostRulesResource list operation along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<PostRulesResourceInner> listSinglePage(String globalRulestackName, Context context) {
        final String accept = "application/json";
        Response<PostRulesResourceListResult> res = service.listSync(this.client.getEndpoint(),
            this.client.getApiVersion(), globalRulestackName, accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * List PostRulesResource resources by Tenant.
     * 
     * @param globalRulestackName GlobalRulestack resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a PostRulesResource list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<PostRulesResourceInner> list(String globalRulestackName) {
        return new PagedIterable<>(() -> listSinglePage(globalRulestackName), nextLink -> listNextSinglePage(nextLink));
    }

    /**
     * List PostRulesResource resources by Tenant.
     * 
     * @param globalRulestackName GlobalRulestack resource name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a PostRulesResource list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<PostRulesResourceInner> list(String globalRulestackName, Context context) {
        return new PagedIterable<>(() -> listSinglePage(globalRulestackName, context),
            nextLink -> listNextSinglePage(nextLink, context));
    }

    /**
     * Get counters.
     * 
     * @param globalRulestackName GlobalRulestack resource name.
     * @param priority Post Rule priority.
     * @param firewallName The firewallName parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return counters along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<RuleCounterInner>> getCountersWithResponseAsync(String globalRulestackName, String priority,
        String firewallName) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.getCounters(this.client.getEndpoint(), this.client.getApiVersion(),
                globalRulestackName, priority, firewallName, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get counters.
     * 
     * @param globalRulestackName GlobalRulestack resource name.
     * @param priority Post Rule priority.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return counters on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<RuleCounterInner> getCountersAsync(String globalRulestackName, String priority) {
        final String firewallName = null;
        return getCountersWithResponseAsync(globalRulestackName, priority, firewallName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get counters.
     * 
     * @param globalRulestackName GlobalRulestack resource name.
     * @param priority Post Rule priority.
     * @param firewallName The firewallName parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return counters along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<RuleCounterInner> getCountersWithResponse(String globalRulestackName, String priority,
        String firewallName, Context context) {
        final String accept = "application/json";
        return service.getCountersSync(this.client.getEndpoint(), this.client.getApiVersion(), globalRulestackName,
            priority, firewallName, accept, context);
    }

    /**
     * Get counters.
     * 
     * @param globalRulestackName GlobalRulestack resource name.
     * @param priority Post Rule priority.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return counters.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RuleCounterInner getCounters(String globalRulestackName, String priority) {
        final String firewallName = null;
        return getCountersWithResponse(globalRulestackName, priority, firewallName, Context.NONE).getValue();
    }

    /**
     * Refresh counters.
     * 
     * @param globalRulestackName GlobalRulestack resource name.
     * @param priority Post Rule priority.
     * @param firewallName The firewallName parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> refreshCountersWithResponseAsync(String globalRulestackName, String priority,
        String firewallName) {
        return FluxUtil
            .withContext(context -> service.refreshCounters(this.client.getEndpoint(), this.client.getApiVersion(),
                globalRulestackName, priority, firewallName, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Refresh counters.
     * 
     * @param globalRulestackName GlobalRulestack resource name.
     * @param priority Post Rule priority.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> refreshCountersAsync(String globalRulestackName, String priority) {
        final String firewallName = null;
        return refreshCountersWithResponseAsync(globalRulestackName, priority, firewallName)
            .flatMap(ignored -> Mono.empty());
    }

    /**
     * Refresh counters.
     * 
     * @param globalRulestackName GlobalRulestack resource name.
     * @param priority Post Rule priority.
     * @param firewallName The firewallName parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> refreshCountersWithResponse(String globalRulestackName, String priority, String firewallName,
        Context context) {
        return service.refreshCountersSync(this.client.getEndpoint(), this.client.getApiVersion(), globalRulestackName,
            priority, firewallName, context);
    }

    /**
     * Refresh counters.
     * 
     * @param globalRulestackName GlobalRulestack resource name.
     * @param priority Post Rule priority.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void refreshCounters(String globalRulestackName, String priority) {
        final String firewallName = null;
        refreshCountersWithResponse(globalRulestackName, priority, firewallName, Context.NONE);
    }

    /**
     * Reset counters.
     * 
     * @param globalRulestackName GlobalRulestack resource name.
     * @param priority Post Rule priority.
     * @param firewallName The firewallName parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return rule counter reset along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<RuleCounterResetInner>> resetCountersWithResponseAsync(String globalRulestackName,
        String priority, String firewallName) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.resetCounters(this.client.getEndpoint(), this.client.getApiVersion(),
                globalRulestackName, priority, firewallName, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Reset counters.
     * 
     * @param globalRulestackName GlobalRulestack resource name.
     * @param priority Post Rule priority.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return rule counter reset on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<RuleCounterResetInner> resetCountersAsync(String globalRulestackName, String priority) {
        final String firewallName = null;
        return resetCountersWithResponseAsync(globalRulestackName, priority, firewallName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Reset counters.
     * 
     * @param globalRulestackName GlobalRulestack resource name.
     * @param priority Post Rule priority.
     * @param firewallName The firewallName parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return rule counter reset along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<RuleCounterResetInner> resetCountersWithResponse(String globalRulestackName, String priority,
        String firewallName, Context context) {
        final String accept = "application/json";
        return service.resetCountersSync(this.client.getEndpoint(), this.client.getApiVersion(), globalRulestackName,
            priority, firewallName, accept, context);
    }

    /**
     * Reset counters.
     * 
     * @param globalRulestackName GlobalRulestack resource name.
     * @param priority Post Rule priority.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return rule counter reset.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RuleCounterResetInner resetCounters(String globalRulestackName, String priority) {
        final String firewallName = null;
        return resetCountersWithResponse(globalRulestackName, priority, firewallName, Context.NONE).getValue();
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a PostRulesResource list operation along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<PostRulesResourceInner>> listNextSinglePageAsync(String nextLink) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.listNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<PostRulesResourceInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a PostRulesResource list operation along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<PostRulesResourceInner> listNextSinglePage(String nextLink) {
        final String accept = "application/json";
        Response<PostRulesResourceListResult> res
            = service.listNextSync(nextLink, this.client.getEndpoint(), accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a PostRulesResource list operation along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<PostRulesResourceInner> listNextSinglePage(String nextLink, Context context) {
        final String accept = "application/json";
        Response<PostRulesResourceListResult> res
            = service.listNextSync(nextLink, this.client.getEndpoint(), accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }
}
