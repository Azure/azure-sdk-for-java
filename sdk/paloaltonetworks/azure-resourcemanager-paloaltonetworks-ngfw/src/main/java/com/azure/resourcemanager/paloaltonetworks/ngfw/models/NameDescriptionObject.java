// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.paloaltonetworks.ngfw.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * object type info.
 */
@Immutable
public final class NameDescriptionObject implements JsonSerializable<NameDescriptionObject> {
    /*
     * name value
     */
    private String name;

    /*
     * description value
     */
    private String description;

    /**
     * Creates an instance of NameDescriptionObject class.
     */
    private NameDescriptionObject() {
    }

    /**
     * Get the name property: name value.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Get the description property: description value.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("description", this.description);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NameDescriptionObject from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NameDescriptionObject if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the NameDescriptionObject.
     */
    public static NameDescriptionObject fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NameDescriptionObject deserializedNameDescriptionObject = new NameDescriptionObject();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedNameDescriptionObject.name = reader.getString();
                } else if ("description".equals(fieldName)) {
                    deserializedNameDescriptionObject.description = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNameDescriptionObject;
        });
    }
}
