// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.paloaltonetworks.ngfw.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.BooleanEnum;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.HealthStatus;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.PanoramaStatus;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.ReadOnlyProvisioningState;
import java.io.IOException;

/**
 * Firewall Status.
 */
@Immutable
public final class FirewallStatusProperty implements JsonSerializable<FirewallStatusProperty> {
    /*
     * Panorama Managed: Default is False. Default will be CloudSec managed
     */
    private BooleanEnum isPanoramaManaged;

    /*
     * Current status of the Firewall
     */
    private HealthStatus healthStatus;

    /*
     * Detail description of current health of the Firewall
     */
    private String healthReason;

    /*
     * Panorama Status
     */
    private PanoramaStatus panoramaStatus;

    /*
     * Provisioning state of the resource.
     */
    private ReadOnlyProvisioningState provisioningState;

    /**
     * Creates an instance of FirewallStatusProperty class.
     */
    public FirewallStatusProperty() {
    }

    /**
     * Get the isPanoramaManaged property: Panorama Managed: Default is False. Default will be CloudSec managed.
     * 
     * @return the isPanoramaManaged value.
     */
    public BooleanEnum isPanoramaManaged() {
        return this.isPanoramaManaged;
    }

    /**
     * Get the healthStatus property: Current status of the Firewall.
     * 
     * @return the healthStatus value.
     */
    public HealthStatus healthStatus() {
        return this.healthStatus;
    }

    /**
     * Get the healthReason property: Detail description of current health of the Firewall.
     * 
     * @return the healthReason value.
     */
    public String healthReason() {
        return this.healthReason;
    }

    /**
     * Get the panoramaStatus property: Panorama Status.
     * 
     * @return the panoramaStatus value.
     */
    public PanoramaStatus panoramaStatus() {
        return this.panoramaStatus;
    }

    /**
     * Get the provisioningState property: Provisioning state of the resource.
     * 
     * @return the provisioningState value.
     */
    public ReadOnlyProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (panoramaStatus() != null) {
            panoramaStatus().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FirewallStatusProperty from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FirewallStatusProperty if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the FirewallStatusProperty.
     */
    public static FirewallStatusProperty fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FirewallStatusProperty deserializedFirewallStatusProperty = new FirewallStatusProperty();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("isPanoramaManaged".equals(fieldName)) {
                    deserializedFirewallStatusProperty.isPanoramaManaged = BooleanEnum.fromString(reader.getString());
                } else if ("healthStatus".equals(fieldName)) {
                    deserializedFirewallStatusProperty.healthStatus = HealthStatus.fromString(reader.getString());
                } else if ("healthReason".equals(fieldName)) {
                    deserializedFirewallStatusProperty.healthReason = reader.getString();
                } else if ("panoramaStatus".equals(fieldName)) {
                    deserializedFirewallStatusProperty.panoramaStatus = PanoramaStatus.fromJson(reader);
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedFirewallStatusProperty.provisioningState
                        = ReadOnlyProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedFirewallStatusProperty;
        });
    }
}
