// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.paloaltonetworks.ngfw.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * The properties of the managed service identities assigned to this resource.
 */
@Fluent
public final class AzureResourceManagerManagedIdentityProperties
    implements JsonSerializable<AzureResourceManagerManagedIdentityProperties> {
    /*
     * The Active Directory tenant id of the principal.
     */
    private String tenantId;

    /*
     * The active directory identifier of this principal.
     */
    private String principalId;

    /*
     * The type of managed identity assigned to this resource.
     */
    private ManagedIdentityType type;

    /*
     * The identities assigned to this resource by the user.
     */
    private Map<String, AzureResourceManagerUserAssignedIdentity> userAssignedIdentities;

    /**
     * Creates an instance of AzureResourceManagerManagedIdentityProperties class.
     */
    public AzureResourceManagerManagedIdentityProperties() {
    }

    /**
     * Get the tenantId property: The Active Directory tenant id of the principal.
     * 
     * @return the tenantId value.
     */
    public String tenantId() {
        return this.tenantId;
    }

    /**
     * Get the principalId property: The active directory identifier of this principal.
     * 
     * @return the principalId value.
     */
    public String principalId() {
        return this.principalId;
    }

    /**
     * Get the type property: The type of managed identity assigned to this resource.
     * 
     * @return the type value.
     */
    public ManagedIdentityType type() {
        return this.type;
    }

    /**
     * Set the type property: The type of managed identity assigned to this resource.
     * 
     * @param type the type value to set.
     * @return the AzureResourceManagerManagedIdentityProperties object itself.
     */
    public AzureResourceManagerManagedIdentityProperties withType(ManagedIdentityType type) {
        this.type = type;
        return this;
    }

    /**
     * Get the userAssignedIdentities property: The identities assigned to this resource by the user.
     * 
     * @return the userAssignedIdentities value.
     */
    public Map<String, AzureResourceManagerUserAssignedIdentity> userAssignedIdentities() {
        return this.userAssignedIdentities;
    }

    /**
     * Set the userAssignedIdentities property: The identities assigned to this resource by the user.
     * 
     * @param userAssignedIdentities the userAssignedIdentities value to set.
     * @return the AzureResourceManagerManagedIdentityProperties object itself.
     */
    public AzureResourceManagerManagedIdentityProperties
        withUserAssignedIdentities(Map<String, AzureResourceManagerUserAssignedIdentity> userAssignedIdentities) {
        this.userAssignedIdentities = userAssignedIdentities;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (type() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property type in model AzureResourceManagerManagedIdentityProperties"));
        }
        if (userAssignedIdentities() != null) {
            userAssignedIdentities().values().forEach(e -> {
                if (e != null) {
                    e.validate();
                }
            });
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(AzureResourceManagerManagedIdentityProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeMapField("userAssignedIdentities", this.userAssignedIdentities,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AzureResourceManagerManagedIdentityProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AzureResourceManagerManagedIdentityProperties if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AzureResourceManagerManagedIdentityProperties.
     */
    public static AzureResourceManagerManagedIdentityProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AzureResourceManagerManagedIdentityProperties deserializedAzureResourceManagerManagedIdentityProperties
                = new AzureResourceManagerManagedIdentityProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    deserializedAzureResourceManagerManagedIdentityProperties.type
                        = ManagedIdentityType.fromString(reader.getString());
                } else if ("tenantId".equals(fieldName)) {
                    deserializedAzureResourceManagerManagedIdentityProperties.tenantId = reader.getString();
                } else if ("principalId".equals(fieldName)) {
                    deserializedAzureResourceManagerManagedIdentityProperties.principalId = reader.getString();
                } else if ("userAssignedIdentities".equals(fieldName)) {
                    Map<String, AzureResourceManagerUserAssignedIdentity> userAssignedIdentities
                        = reader.readMap(reader1 -> AzureResourceManagerUserAssignedIdentity.fromJson(reader1));
                    deserializedAzureResourceManagerManagedIdentityProperties.userAssignedIdentities
                        = userAssignedIdentities;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAzureResourceManagerManagedIdentityProperties;
        });
    }
}
