// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.paloaltonetworks.ngfw.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * MonitorLog configurations.
 */
@Fluent
public final class MonitorLog implements JsonSerializable<MonitorLog> {
    /*
     * Resource ID of MonitorLog
     */
    private String id;

    /*
     * Subscription Id
     */
    private String subscriptionId;

    /*
     * MonitorLog workspace
     */
    private String workspace;

    /*
     * Primary Key value for Monitor
     */
    private String primaryKey;

    /*
     * Secondary Key value for Monitor
     */
    private String secondaryKey;

    /**
     * Creates an instance of MonitorLog class.
     */
    public MonitorLog() {
    }

    /**
     * Get the id property: Resource ID of MonitorLog.
     * 
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Set the id property: Resource ID of MonitorLog.
     * 
     * @param id the id value to set.
     * @return the MonitorLog object itself.
     */
    public MonitorLog withId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get the subscriptionId property: Subscription Id.
     * 
     * @return the subscriptionId value.
     */
    public String subscriptionId() {
        return this.subscriptionId;
    }

    /**
     * Set the subscriptionId property: Subscription Id.
     * 
     * @param subscriptionId the subscriptionId value to set.
     * @return the MonitorLog object itself.
     */
    public MonitorLog withSubscriptionId(String subscriptionId) {
        this.subscriptionId = subscriptionId;
        return this;
    }

    /**
     * Get the workspace property: MonitorLog workspace.
     * 
     * @return the workspace value.
     */
    public String workspace() {
        return this.workspace;
    }

    /**
     * Set the workspace property: MonitorLog workspace.
     * 
     * @param workspace the workspace value to set.
     * @return the MonitorLog object itself.
     */
    public MonitorLog withWorkspace(String workspace) {
        this.workspace = workspace;
        return this;
    }

    /**
     * Get the primaryKey property: Primary Key value for Monitor.
     * 
     * @return the primaryKey value.
     */
    public String primaryKey() {
        return this.primaryKey;
    }

    /**
     * Set the primaryKey property: Primary Key value for Monitor.
     * 
     * @param primaryKey the primaryKey value to set.
     * @return the MonitorLog object itself.
     */
    public MonitorLog withPrimaryKey(String primaryKey) {
        this.primaryKey = primaryKey;
        return this;
    }

    /**
     * Get the secondaryKey property: Secondary Key value for Monitor.
     * 
     * @return the secondaryKey value.
     */
    public String secondaryKey() {
        return this.secondaryKey;
    }

    /**
     * Set the secondaryKey property: Secondary Key value for Monitor.
     * 
     * @param secondaryKey the secondaryKey value to set.
     * @return the MonitorLog object itself.
     */
    public MonitorLog withSecondaryKey(String secondaryKey) {
        this.secondaryKey = secondaryKey;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeStringField("subscriptionId", this.subscriptionId);
        jsonWriter.writeStringField("workspace", this.workspace);
        jsonWriter.writeStringField("primaryKey", this.primaryKey);
        jsonWriter.writeStringField("secondaryKey", this.secondaryKey);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MonitorLog from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MonitorLog if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the MonitorLog.
     */
    public static MonitorLog fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MonitorLog deserializedMonitorLog = new MonitorLog();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedMonitorLog.id = reader.getString();
                } else if ("subscriptionId".equals(fieldName)) {
                    deserializedMonitorLog.subscriptionId = reader.getString();
                } else if ("workspace".equals(fieldName)) {
                    deserializedMonitorLog.workspace = reader.getString();
                } else if ("primaryKey".equals(fieldName)) {
                    deserializedMonitorLog.primaryKey = reader.getString();
                } else if ("secondaryKey".equals(fieldName)) {
                    deserializedMonitorLog.secondaryKey = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMonitorLog;
        });
    }
}
