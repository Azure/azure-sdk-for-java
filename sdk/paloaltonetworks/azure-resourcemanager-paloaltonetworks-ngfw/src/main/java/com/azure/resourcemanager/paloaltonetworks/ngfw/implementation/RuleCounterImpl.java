// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.paloaltonetworks.ngfw.implementation;

import com.azure.resourcemanager.paloaltonetworks.ngfw.fluent.models.RuleCounterInner;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.AppSeenData;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.RuleCounter;
import java.time.OffsetDateTime;

public final class RuleCounterImpl implements RuleCounter {
    private RuleCounterInner innerObject;

    private final com.azure.resourcemanager.paloaltonetworks.ngfw.PaloAltoNetworksNgfwManager serviceManager;

    RuleCounterImpl(
        RuleCounterInner innerObject,
        com.azure.resourcemanager.paloaltonetworks.ngfw.PaloAltoNetworksNgfwManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
    }

    public String priority() {
        return this.innerModel().priority();
    }

    public String ruleStackName() {
        return this.innerModel().ruleStackName();
    }

    public String ruleListName() {
        return this.innerModel().ruleListName();
    }

    public String firewallName() {
        return this.innerModel().firewallName();
    }

    public String ruleName() {
        return this.innerModel().ruleName();
    }

    public Integer hitCount() {
        return this.innerModel().hitCount();
    }

    public AppSeenData appSeen() {
        return this.innerModel().appSeen();
    }

    public OffsetDateTime timestamp() {
        return this.innerModel().timestamp();
    }

    public OffsetDateTime requestTimestamp() {
        return this.innerModel().requestTimestamp();
    }

    public OffsetDateTime lastUpdatedTimestamp() {
        return this.innerModel().lastUpdatedTimestamp();
    }

    public RuleCounterInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.paloaltonetworks.ngfw.PaloAltoNetworksNgfwManager manager() {
        return this.serviceManager;
    }
}
