// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.paloaltonetworks.ngfw.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Panorama Config.
 */
@Fluent
public final class PanoramaConfig implements JsonSerializable<PanoramaConfig> {
    /*
     * Base64 encoded string representing Panorama parameters to be used by Firewall to connect to Panorama. This string
     * is generated via azure plugin in Panorama
     */
    private String configString;

    /*
     * VM auth key for panorama connectivity
     */
    private String vmAuthKey;

    /*
     * Primary Panorama Server IP address value in dotted format for IPv4
     */
    private String panoramaServer;

    /*
     * Secondary Panorama Server IP address value in dotted format for IPv4
     */
    private String panoramaServer2;

    /*
     * Panorama Device Group to join
     */
    private String dgName;

    /*
     * Panorama Template Stack to join - (Once configured we can not edit the value)
     */
    private String tplName;

    /*
     * Panorama Collector Group to join - (Once configured we can not edit the value)
     */
    private String cgName;

    /*
     * Resource name(may be unique) for PN admin
     */
    private String hostname;

    /**
     * Creates an instance of PanoramaConfig class.
     */
    public PanoramaConfig() {
    }

    /**
     * Get the configString property: Base64 encoded string representing Panorama parameters to be used by Firewall to
     * connect to Panorama. This string is generated via azure plugin in Panorama.
     * 
     * @return the configString value.
     */
    public String configString() {
        return this.configString;
    }

    /**
     * Set the configString property: Base64 encoded string representing Panorama parameters to be used by Firewall to
     * connect to Panorama. This string is generated via azure plugin in Panorama.
     * 
     * @param configString the configString value to set.
     * @return the PanoramaConfig object itself.
     */
    public PanoramaConfig withConfigString(String configString) {
        this.configString = configString;
        return this;
    }

    /**
     * Get the vmAuthKey property: VM auth key for panorama connectivity.
     * 
     * @return the vmAuthKey value.
     */
    public String vmAuthKey() {
        return this.vmAuthKey;
    }

    /**
     * Get the panoramaServer property: Primary Panorama Server IP address value in dotted format for IPv4.
     * 
     * @return the panoramaServer value.
     */
    public String panoramaServer() {
        return this.panoramaServer;
    }

    /**
     * Get the panoramaServer2 property: Secondary Panorama Server IP address value in dotted format for IPv4.
     * 
     * @return the panoramaServer2 value.
     */
    public String panoramaServer2() {
        return this.panoramaServer2;
    }

    /**
     * Get the dgName property: Panorama Device Group to join.
     * 
     * @return the dgName value.
     */
    public String dgName() {
        return this.dgName;
    }

    /**
     * Get the tplName property: Panorama Template Stack to join - (Once configured we can not edit the value).
     * 
     * @return the tplName value.
     */
    public String tplName() {
        return this.tplName;
    }

    /**
     * Get the cgName property: Panorama Collector Group to join - (Once configured we can not edit the value).
     * 
     * @return the cgName value.
     */
    public String cgName() {
        return this.cgName;
    }

    /**
     * Get the hostname property: Resource name(may be unique) for PN admin.
     * 
     * @return the hostname value.
     */
    public String hostname() {
        return this.hostname;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (configString() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property configString in model PanoramaConfig"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(PanoramaConfig.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("configString", this.configString);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PanoramaConfig from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PanoramaConfig if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the PanoramaConfig.
     */
    public static PanoramaConfig fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PanoramaConfig deserializedPanoramaConfig = new PanoramaConfig();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("configString".equals(fieldName)) {
                    deserializedPanoramaConfig.configString = reader.getString();
                } else if ("vmAuthKey".equals(fieldName)) {
                    deserializedPanoramaConfig.vmAuthKey = reader.getString();
                } else if ("panoramaServer".equals(fieldName)) {
                    deserializedPanoramaConfig.panoramaServer = reader.getString();
                } else if ("panoramaServer2".equals(fieldName)) {
                    deserializedPanoramaConfig.panoramaServer2 = reader.getString();
                } else if ("dgName".equals(fieldName)) {
                    deserializedPanoramaConfig.dgName = reader.getString();
                } else if ("tplName".equals(fieldName)) {
                    deserializedPanoramaConfig.tplName = reader.getString();
                } else if ("cgName".equals(fieldName)) {
                    deserializedPanoramaConfig.cgName = reader.getString();
                } else if ("hostName".equals(fieldName)) {
                    deserializedPanoramaConfig.hostname = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPanoramaConfig;
        });
    }
}
