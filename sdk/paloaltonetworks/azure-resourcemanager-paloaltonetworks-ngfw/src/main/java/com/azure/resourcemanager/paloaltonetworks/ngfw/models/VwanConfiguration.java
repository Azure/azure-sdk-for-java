// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.paloaltonetworks.ngfw.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * VwanInfo for Firewall Networking.
 */
@Fluent
public final class VwanConfiguration implements JsonSerializable<VwanConfiguration> {
    /*
     * Network Virtual Appliance resource ID
     */
    private String networkVirtualApplianceId;

    /*
     * vHub Address
     */
    private IpAddressSpace vHub;

    /*
     * Trust Subnet
     */
    private IpAddressSpace trustSubnet;

    /*
     * Untrust Subnet
     */
    private IpAddressSpace unTrustSubnet;

    /*
     * IP of trust subnet for UDR
     */
    private IpAddress ipOfTrustSubnetForUdr;

    /**
     * Creates an instance of VwanConfiguration class.
     */
    public VwanConfiguration() {
    }

    /**
     * Get the networkVirtualApplianceId property: Network Virtual Appliance resource ID.
     * 
     * @return the networkVirtualApplianceId value.
     */
    public String networkVirtualApplianceId() {
        return this.networkVirtualApplianceId;
    }

    /**
     * Set the networkVirtualApplianceId property: Network Virtual Appliance resource ID.
     * 
     * @param networkVirtualApplianceId the networkVirtualApplianceId value to set.
     * @return the VwanConfiguration object itself.
     */
    public VwanConfiguration withNetworkVirtualApplianceId(String networkVirtualApplianceId) {
        this.networkVirtualApplianceId = networkVirtualApplianceId;
        return this;
    }

    /**
     * Get the vHub property: vHub Address.
     * 
     * @return the vHub value.
     */
    public IpAddressSpace vHub() {
        return this.vHub;
    }

    /**
     * Set the vHub property: vHub Address.
     * 
     * @param vHub the vHub value to set.
     * @return the VwanConfiguration object itself.
     */
    public VwanConfiguration withVHub(IpAddressSpace vHub) {
        this.vHub = vHub;
        return this;
    }

    /**
     * Get the trustSubnet property: Trust Subnet.
     * 
     * @return the trustSubnet value.
     */
    public IpAddressSpace trustSubnet() {
        return this.trustSubnet;
    }

    /**
     * Set the trustSubnet property: Trust Subnet.
     * 
     * @param trustSubnet the trustSubnet value to set.
     * @return the VwanConfiguration object itself.
     */
    public VwanConfiguration withTrustSubnet(IpAddressSpace trustSubnet) {
        this.trustSubnet = trustSubnet;
        return this;
    }

    /**
     * Get the unTrustSubnet property: Untrust Subnet.
     * 
     * @return the unTrustSubnet value.
     */
    public IpAddressSpace unTrustSubnet() {
        return this.unTrustSubnet;
    }

    /**
     * Set the unTrustSubnet property: Untrust Subnet.
     * 
     * @param unTrustSubnet the unTrustSubnet value to set.
     * @return the VwanConfiguration object itself.
     */
    public VwanConfiguration withUnTrustSubnet(IpAddressSpace unTrustSubnet) {
        this.unTrustSubnet = unTrustSubnet;
        return this;
    }

    /**
     * Get the ipOfTrustSubnetForUdr property: IP of trust subnet for UDR.
     * 
     * @return the ipOfTrustSubnetForUdr value.
     */
    public IpAddress ipOfTrustSubnetForUdr() {
        return this.ipOfTrustSubnetForUdr;
    }

    /**
     * Set the ipOfTrustSubnetForUdr property: IP of trust subnet for UDR.
     * 
     * @param ipOfTrustSubnetForUdr the ipOfTrustSubnetForUdr value to set.
     * @return the VwanConfiguration object itself.
     */
    public VwanConfiguration withIpOfTrustSubnetForUdr(IpAddress ipOfTrustSubnetForUdr) {
        this.ipOfTrustSubnetForUdr = ipOfTrustSubnetForUdr;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (vHub() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property vHub in model VwanConfiguration"));
        } else {
            vHub().validate();
        }
        if (trustSubnet() != null) {
            trustSubnet().validate();
        }
        if (unTrustSubnet() != null) {
            unTrustSubnet().validate();
        }
        if (ipOfTrustSubnetForUdr() != null) {
            ipOfTrustSubnetForUdr().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(VwanConfiguration.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("vHub", this.vHub);
        jsonWriter.writeStringField("networkVirtualApplianceId", this.networkVirtualApplianceId);
        jsonWriter.writeJsonField("trustSubnet", this.trustSubnet);
        jsonWriter.writeJsonField("unTrustSubnet", this.unTrustSubnet);
        jsonWriter.writeJsonField("ipOfTrustSubnetForUdr", this.ipOfTrustSubnetForUdr);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of VwanConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of VwanConfiguration if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the VwanConfiguration.
     */
    public static VwanConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            VwanConfiguration deserializedVwanConfiguration = new VwanConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("vHub".equals(fieldName)) {
                    deserializedVwanConfiguration.vHub = IpAddressSpace.fromJson(reader);
                } else if ("networkVirtualApplianceId".equals(fieldName)) {
                    deserializedVwanConfiguration.networkVirtualApplianceId = reader.getString();
                } else if ("trustSubnet".equals(fieldName)) {
                    deserializedVwanConfiguration.trustSubnet = IpAddressSpace.fromJson(reader);
                } else if ("unTrustSubnet".equals(fieldName)) {
                    deserializedVwanConfiguration.unTrustSubnet = IpAddressSpace.fromJson(reader);
                } else if ("ipOfTrustSubnetForUdr".equals(fieldName)) {
                    deserializedVwanConfiguration.ipOfTrustSubnetForUdr = IpAddress.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedVwanConfiguration;
        });
    }
}
