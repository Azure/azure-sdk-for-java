// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.paloaltonetworks.ngfw.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Data Type for App Seen.
 */
@Fluent
public final class AppSeenData implements JsonSerializable<AppSeenData> {
    /*
     * number of rows
     */
    private int count;

    /*
     * array of appSeen
     */
    private List<AppSeenInfo> appSeenList;

    /**
     * Creates an instance of AppSeenData class.
     */
    public AppSeenData() {
    }

    /**
     * Get the count property: number of rows.
     * 
     * @return the count value.
     */
    public int count() {
        return this.count;
    }

    /**
     * Set the count property: number of rows.
     * 
     * @param count the count value to set.
     * @return the AppSeenData object itself.
     */
    public AppSeenData withCount(int count) {
        this.count = count;
        return this;
    }

    /**
     * Get the appSeenList property: array of appSeen.
     * 
     * @return the appSeenList value.
     */
    public List<AppSeenInfo> appSeenList() {
        return this.appSeenList;
    }

    /**
     * Set the appSeenList property: array of appSeen.
     * 
     * @param appSeenList the appSeenList value to set.
     * @return the AppSeenData object itself.
     */
    public AppSeenData withAppSeenList(List<AppSeenInfo> appSeenList) {
        this.appSeenList = appSeenList;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (appSeenList() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property appSeenList in model AppSeenData"));
        } else {
            appSeenList().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(AppSeenData.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeIntField("count", this.count);
        jsonWriter.writeArrayField("appSeenList", this.appSeenList, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AppSeenData from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AppSeenData if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AppSeenData.
     */
    public static AppSeenData fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AppSeenData deserializedAppSeenData = new AppSeenData();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("count".equals(fieldName)) {
                    deserializedAppSeenData.count = reader.getInt();
                } else if ("appSeenList".equals(fieldName)) {
                    List<AppSeenInfo> appSeenList = reader.readArray(reader1 -> AppSeenInfo.fromJson(reader1));
                    deserializedAppSeenData.appSeenList = appSeenList;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAppSeenData;
        });
    }
}
