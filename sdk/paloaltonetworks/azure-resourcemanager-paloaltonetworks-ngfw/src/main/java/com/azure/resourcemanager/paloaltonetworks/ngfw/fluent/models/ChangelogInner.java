// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.paloaltonetworks.ngfw.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

/**
 * Changelog list.
 */
@Fluent
public final class ChangelogInner implements JsonSerializable<ChangelogInner> {
    /*
     * list of changes
     */
    private List<String> changes;

    /*
     * lastCommitted timestamp
     */
    private OffsetDateTime lastCommitted;

    /*
     * lastModified timestamp
     */
    private OffsetDateTime lastModified;

    /**
     * Creates an instance of ChangelogInner class.
     */
    public ChangelogInner() {
    }

    /**
     * Get the changes property: list of changes.
     * 
     * @return the changes value.
     */
    public List<String> changes() {
        return this.changes;
    }

    /**
     * Set the changes property: list of changes.
     * 
     * @param changes the changes value to set.
     * @return the ChangelogInner object itself.
     */
    public ChangelogInner withChanges(List<String> changes) {
        this.changes = changes;
        return this;
    }

    /**
     * Get the lastCommitted property: lastCommitted timestamp.
     * 
     * @return the lastCommitted value.
     */
    public OffsetDateTime lastCommitted() {
        return this.lastCommitted;
    }

    /**
     * Set the lastCommitted property: lastCommitted timestamp.
     * 
     * @param lastCommitted the lastCommitted value to set.
     * @return the ChangelogInner object itself.
     */
    public ChangelogInner withLastCommitted(OffsetDateTime lastCommitted) {
        this.lastCommitted = lastCommitted;
        return this;
    }

    /**
     * Get the lastModified property: lastModified timestamp.
     * 
     * @return the lastModified value.
     */
    public OffsetDateTime lastModified() {
        return this.lastModified;
    }

    /**
     * Set the lastModified property: lastModified timestamp.
     * 
     * @param lastModified the lastModified value to set.
     * @return the ChangelogInner object itself.
     */
    public ChangelogInner withLastModified(OffsetDateTime lastModified) {
        this.lastModified = lastModified;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (changes() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property changes in model ChangelogInner"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ChangelogInner.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("changes", this.changes, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("lastCommitted",
            this.lastCommitted == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.lastCommitted));
        jsonWriter.writeStringField("lastModified",
            this.lastModified == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.lastModified));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ChangelogInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ChangelogInner if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ChangelogInner.
     */
    public static ChangelogInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ChangelogInner deserializedChangelogInner = new ChangelogInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("changes".equals(fieldName)) {
                    List<String> changes = reader.readArray(reader1 -> reader1.getString());
                    deserializedChangelogInner.changes = changes;
                } else if ("lastCommitted".equals(fieldName)) {
                    deserializedChangelogInner.lastCommitted = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("lastModified".equals(fieldName)) {
                    deserializedChangelogInner.lastModified = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedChangelogInner;
        });
    }
}
