// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.paloaltonetworks.ngfw.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Network settings for Firewall.
 */
@Fluent
public final class NetworkProfile implements JsonSerializable<NetworkProfile> {
    /*
     * Vnet configurations
     */
    private VnetConfiguration vnetConfiguration;

    /*
     * Vwan configurations
     */
    private VwanConfiguration vwanConfiguration;

    /*
     * vnet or vwan, cannot be updated
     */
    private NetworkType networkType;

    /*
     * List of IPs associated with the Firewall
     */
    private List<IpAddress> publicIps;

    /*
     * Enable egress NAT, enabled by default
     */
    private EgressNat enableEgressNat;

    /*
     * Egress nat IP to use
     */
    private List<IpAddress> egressNatIp;

    /*
     * Non-RFC 1918 address
     */
    private List<String> trustedRanges;

    /**
     * Creates an instance of NetworkProfile class.
     */
    public NetworkProfile() {
    }

    /**
     * Get the vnetConfiguration property: Vnet configurations.
     * 
     * @return the vnetConfiguration value.
     */
    public VnetConfiguration vnetConfiguration() {
        return this.vnetConfiguration;
    }

    /**
     * Set the vnetConfiguration property: Vnet configurations.
     * 
     * @param vnetConfiguration the vnetConfiguration value to set.
     * @return the NetworkProfile object itself.
     */
    public NetworkProfile withVnetConfiguration(VnetConfiguration vnetConfiguration) {
        this.vnetConfiguration = vnetConfiguration;
        return this;
    }

    /**
     * Get the vwanConfiguration property: Vwan configurations.
     * 
     * @return the vwanConfiguration value.
     */
    public VwanConfiguration vwanConfiguration() {
        return this.vwanConfiguration;
    }

    /**
     * Set the vwanConfiguration property: Vwan configurations.
     * 
     * @param vwanConfiguration the vwanConfiguration value to set.
     * @return the NetworkProfile object itself.
     */
    public NetworkProfile withVwanConfiguration(VwanConfiguration vwanConfiguration) {
        this.vwanConfiguration = vwanConfiguration;
        return this;
    }

    /**
     * Get the networkType property: vnet or vwan, cannot be updated.
     * 
     * @return the networkType value.
     */
    public NetworkType networkType() {
        return this.networkType;
    }

    /**
     * Set the networkType property: vnet or vwan, cannot be updated.
     * 
     * @param networkType the networkType value to set.
     * @return the NetworkProfile object itself.
     */
    public NetworkProfile withNetworkType(NetworkType networkType) {
        this.networkType = networkType;
        return this;
    }

    /**
     * Get the publicIps property: List of IPs associated with the Firewall.
     * 
     * @return the publicIps value.
     */
    public List<IpAddress> publicIps() {
        return this.publicIps;
    }

    /**
     * Set the publicIps property: List of IPs associated with the Firewall.
     * 
     * @param publicIps the publicIps value to set.
     * @return the NetworkProfile object itself.
     */
    public NetworkProfile withPublicIps(List<IpAddress> publicIps) {
        this.publicIps = publicIps;
        return this;
    }

    /**
     * Get the enableEgressNat property: Enable egress NAT, enabled by default.
     * 
     * @return the enableEgressNat value.
     */
    public EgressNat enableEgressNat() {
        return this.enableEgressNat;
    }

    /**
     * Set the enableEgressNat property: Enable egress NAT, enabled by default.
     * 
     * @param enableEgressNat the enableEgressNat value to set.
     * @return the NetworkProfile object itself.
     */
    public NetworkProfile withEnableEgressNat(EgressNat enableEgressNat) {
        this.enableEgressNat = enableEgressNat;
        return this;
    }

    /**
     * Get the egressNatIp property: Egress nat IP to use.
     * 
     * @return the egressNatIp value.
     */
    public List<IpAddress> egressNatIp() {
        return this.egressNatIp;
    }

    /**
     * Set the egressNatIp property: Egress nat IP to use.
     * 
     * @param egressNatIp the egressNatIp value to set.
     * @return the NetworkProfile object itself.
     */
    public NetworkProfile withEgressNatIp(List<IpAddress> egressNatIp) {
        this.egressNatIp = egressNatIp;
        return this;
    }

    /**
     * Get the trustedRanges property: Non-RFC 1918 address.
     * 
     * @return the trustedRanges value.
     */
    public List<String> trustedRanges() {
        return this.trustedRanges;
    }

    /**
     * Set the trustedRanges property: Non-RFC 1918 address.
     * 
     * @param trustedRanges the trustedRanges value to set.
     * @return the NetworkProfile object itself.
     */
    public NetworkProfile withTrustedRanges(List<String> trustedRanges) {
        this.trustedRanges = trustedRanges;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (vnetConfiguration() != null) {
            vnetConfiguration().validate();
        }
        if (vwanConfiguration() != null) {
            vwanConfiguration().validate();
        }
        if (networkType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property networkType in model NetworkProfile"));
        }
        if (publicIps() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property publicIps in model NetworkProfile"));
        } else {
            publicIps().forEach(e -> e.validate());
        }
        if (enableEgressNat() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property enableEgressNat in model NetworkProfile"));
        }
        if (egressNatIp() != null) {
            egressNatIp().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(NetworkProfile.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("networkType", this.networkType == null ? null : this.networkType.toString());
        jsonWriter.writeArrayField("publicIps", this.publicIps, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("enableEgressNat",
            this.enableEgressNat == null ? null : this.enableEgressNat.toString());
        jsonWriter.writeJsonField("vnetConfiguration", this.vnetConfiguration);
        jsonWriter.writeJsonField("vwanConfiguration", this.vwanConfiguration);
        jsonWriter.writeArrayField("egressNatIp", this.egressNatIp, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("trustedRanges", this.trustedRanges,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NetworkProfile from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NetworkProfile if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the NetworkProfile.
     */
    public static NetworkProfile fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NetworkProfile deserializedNetworkProfile = new NetworkProfile();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("networkType".equals(fieldName)) {
                    deserializedNetworkProfile.networkType = NetworkType.fromString(reader.getString());
                } else if ("publicIps".equals(fieldName)) {
                    List<IpAddress> publicIps = reader.readArray(reader1 -> IpAddress.fromJson(reader1));
                    deserializedNetworkProfile.publicIps = publicIps;
                } else if ("enableEgressNat".equals(fieldName)) {
                    deserializedNetworkProfile.enableEgressNat = EgressNat.fromString(reader.getString());
                } else if ("vnetConfiguration".equals(fieldName)) {
                    deserializedNetworkProfile.vnetConfiguration = VnetConfiguration.fromJson(reader);
                } else if ("vwanConfiguration".equals(fieldName)) {
                    deserializedNetworkProfile.vwanConfiguration = VwanConfiguration.fromJson(reader);
                } else if ("egressNatIp".equals(fieldName)) {
                    List<IpAddress> egressNatIp = reader.readArray(reader1 -> IpAddress.fromJson(reader1));
                    deserializedNetworkProfile.egressNatIp = egressNatIp;
                } else if ("trustedRanges".equals(fieldName)) {
                    List<String> trustedRanges = reader.readArray(reader1 -> reader1.getString());
                    deserializedNetworkProfile.trustedRanges = trustedRanges;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNetworkProfile;
        });
    }
}
