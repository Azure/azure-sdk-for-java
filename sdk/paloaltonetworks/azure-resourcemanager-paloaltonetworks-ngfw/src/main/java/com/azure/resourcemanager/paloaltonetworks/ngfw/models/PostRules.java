// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.paloaltonetworks.ngfw.models;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;
import com.azure.resourcemanager.paloaltonetworks.ngfw.fluent.models.PostRulesResourceInner;

/** Resource collection API of PostRules. */
public interface PostRules {
    /**
     * List PostRulesResource resources by Tenant.
     *
     * @param globalRulestackName GlobalRulestack resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a PostRulesResource list operation as paginated response with {@link PagedIterable}.
     */
    PagedIterable<PostRulesResource> list(String globalRulestackName);

    /**
     * List PostRulesResource resources by Tenant.
     *
     * @param globalRulestackName GlobalRulestack resource name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a PostRulesResource list operation as paginated response with {@link PagedIterable}.
     */
    PagedIterable<PostRulesResource> list(String globalRulestackName, Context context);

    /**
     * Get a PostRulesResource.
     *
     * @param globalRulestackName GlobalRulestack resource name.
     * @param priority Post Rule priority.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a PostRulesResource along with {@link Response}.
     */
    Response<PostRulesResource> getWithResponse(String globalRulestackName, String priority, Context context);

    /**
     * Get a PostRulesResource.
     *
     * @param globalRulestackName GlobalRulestack resource name.
     * @param priority Post Rule priority.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a PostRulesResource.
     */
    PostRulesResource get(String globalRulestackName, String priority);

    /**
     * Create a PostRulesResource.
     *
     * @param globalRulestackName GlobalRulestack resource name.
     * @param priority Post Rule priority.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return postRulestack rule list.
     */
    PostRulesResource createOrUpdate(String globalRulestackName, String priority, PostRulesResourceInner resource);

    /**
     * Create a PostRulesResource.
     *
     * @param globalRulestackName GlobalRulestack resource name.
     * @param priority Post Rule priority.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return postRulestack rule list.
     */
    PostRulesResource createOrUpdate(
        String globalRulestackName, String priority, PostRulesResourceInner resource, Context context);

    /**
     * Delete a PostRulesResource.
     *
     * @param globalRulestackName GlobalRulestack resource name.
     * @param priority Post Rule priority.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteByResourceGroup(String globalRulestackName, String priority);

    /**
     * Delete a PostRulesResource.
     *
     * @param globalRulestackName GlobalRulestack resource name.
     * @param priority Post Rule priority.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void delete(String globalRulestackName, String priority, Context context);

    /**
     * Get counters.
     *
     * @param globalRulestackName GlobalRulestack resource name.
     * @param priority Post Rule priority.
     * @param firewallName The firewallName parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return counters along with {@link Response}.
     */
    Response<RuleCounter> getCountersWithResponse(
        String globalRulestackName, String priority, String firewallName, Context context);

    /**
     * Get counters.
     *
     * @param globalRulestackName GlobalRulestack resource name.
     * @param priority Post Rule priority.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return counters.
     */
    RuleCounter getCounters(String globalRulestackName, String priority);

    /**
     * Refresh counters.
     *
     * @param globalRulestackName GlobalRulestack resource name.
     * @param priority Post Rule priority.
     * @param firewallName The firewallName parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    Response<Void> refreshCountersWithResponse(
        String globalRulestackName, String priority, String firewallName, Context context);

    /**
     * Refresh counters.
     *
     * @param globalRulestackName GlobalRulestack resource name.
     * @param priority Post Rule priority.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void refreshCounters(String globalRulestackName, String priority);

    /**
     * Reset counters.
     *
     * @param globalRulestackName GlobalRulestack resource name.
     * @param priority Post Rule priority.
     * @param firewallName The firewallName parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return rule counter reset along with {@link Response}.
     */
    Response<RuleCounterReset> resetCountersWithResponse(
        String globalRulestackName, String priority, String firewallName, Context context);

    /**
     * Reset counters.
     *
     * @param globalRulestackName GlobalRulestack resource name.
     * @param priority Post Rule priority.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return rule counter reset.
     */
    RuleCounterReset resetCounters(String globalRulestackName, String priority);
}
