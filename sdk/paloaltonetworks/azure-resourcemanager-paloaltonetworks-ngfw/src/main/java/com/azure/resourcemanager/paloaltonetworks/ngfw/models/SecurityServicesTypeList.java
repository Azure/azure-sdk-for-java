// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.paloaltonetworks.ngfw.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Security services type list.
 */
@Fluent
public final class SecurityServicesTypeList implements JsonSerializable<SecurityServicesTypeList> {
    /*
     * security services type
     */
    private String type;

    /*
     * list
     */
    private List<NameDescriptionObject> entry;

    /**
     * Creates an instance of SecurityServicesTypeList class.
     */
    public SecurityServicesTypeList() {
    }

    /**
     * Get the type property: security services type.
     * 
     * @return the type value.
     */
    public String type() {
        return this.type;
    }

    /**
     * Set the type property: security services type.
     * 
     * @param type the type value to set.
     * @return the SecurityServicesTypeList object itself.
     */
    public SecurityServicesTypeList withType(String type) {
        this.type = type;
        return this;
    }

    /**
     * Get the entry property: list.
     * 
     * @return the entry value.
     */
    public List<NameDescriptionObject> entry() {
        return this.entry;
    }

    /**
     * Set the entry property: list.
     * 
     * @param entry the entry value to set.
     * @return the SecurityServicesTypeList object itself.
     */
    public SecurityServicesTypeList withEntry(List<NameDescriptionObject> entry) {
        this.entry = entry;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (entry() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property entry in model SecurityServicesTypeList"));
        } else {
            entry().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(SecurityServicesTypeList.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("entry", this.entry, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("type", this.type);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SecurityServicesTypeList from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SecurityServicesTypeList if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SecurityServicesTypeList.
     */
    public static SecurityServicesTypeList fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SecurityServicesTypeList deserializedSecurityServicesTypeList = new SecurityServicesTypeList();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("entry".equals(fieldName)) {
                    List<NameDescriptionObject> entry
                        = reader.readArray(reader1 -> NameDescriptionObject.fromJson(reader1));
                    deserializedSecurityServicesTypeList.entry = entry;
                } else if ("type".equals(fieldName)) {
                    deserializedSecurityServicesTypeList.type = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSecurityServicesTypeList;
        });
    }
}
