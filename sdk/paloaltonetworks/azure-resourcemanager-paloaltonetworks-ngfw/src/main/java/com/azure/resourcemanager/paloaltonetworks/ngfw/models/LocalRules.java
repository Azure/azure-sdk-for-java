// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.paloaltonetworks.ngfw.models;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;

/** Resource collection API of LocalRules. */
public interface LocalRules {
    /**
     * List LocalRulesResource resources by LocalRulestacks.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param localRulestackName LocalRulestack resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a LocalRulesResource list operation as paginated response with {@link PagedIterable}.
     */
    PagedIterable<LocalRulesResource> listByLocalRulestacks(String resourceGroupName, String localRulestackName);

    /**
     * List LocalRulesResource resources by LocalRulestacks.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param localRulestackName LocalRulestack resource name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a LocalRulesResource list operation as paginated response with {@link PagedIterable}.
     */
    PagedIterable<LocalRulesResource> listByLocalRulestacks(
        String resourceGroupName, String localRulestackName, Context context);

    /**
     * Get a LocalRulesResource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param localRulestackName LocalRulestack resource name.
     * @param priority Local Rule priority.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a LocalRulesResource along with {@link Response}.
     */
    Response<LocalRulesResource> getWithResponse(
        String resourceGroupName, String localRulestackName, String priority, Context context);

    /**
     * Get a LocalRulesResource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param localRulestackName LocalRulestack resource name.
     * @param priority Local Rule priority.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a LocalRulesResource.
     */
    LocalRulesResource get(String resourceGroupName, String localRulestackName, String priority);

    /**
     * Delete a LocalRulesResource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param localRulestackName LocalRulestack resource name.
     * @param priority Local Rule priority.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void delete(String resourceGroupName, String localRulestackName, String priority);

    /**
     * Delete a LocalRulesResource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param localRulestackName LocalRulestack resource name.
     * @param priority Local Rule priority.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void delete(String resourceGroupName, String localRulestackName, String priority, Context context);

    /**
     * Get counters.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param localRulestackName LocalRulestack resource name.
     * @param priority Local Rule priority.
     * @param firewallName The firewallName parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return counters along with {@link Response}.
     */
    Response<RuleCounter> getCountersWithResponse(
        String resourceGroupName, String localRulestackName, String priority, String firewallName, Context context);

    /**
     * Get counters.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param localRulestackName LocalRulestack resource name.
     * @param priority Local Rule priority.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return counters.
     */
    RuleCounter getCounters(String resourceGroupName, String localRulestackName, String priority);

    /**
     * Refresh counters.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param localRulestackName LocalRulestack resource name.
     * @param priority Local Rule priority.
     * @param firewallName The firewallName parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    Response<Void> refreshCountersWithResponse(
        String resourceGroupName, String localRulestackName, String priority, String firewallName, Context context);

    /**
     * Refresh counters.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param localRulestackName LocalRulestack resource name.
     * @param priority Local Rule priority.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void refreshCounters(String resourceGroupName, String localRulestackName, String priority);

    /**
     * Reset counters.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param localRulestackName LocalRulestack resource name.
     * @param priority Local Rule priority.
     * @param firewallName The firewallName parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return rule counter reset along with {@link Response}.
     */
    Response<RuleCounterReset> resetCountersWithResponse(
        String resourceGroupName, String localRulestackName, String priority, String firewallName, Context context);

    /**
     * Reset counters.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param localRulestackName LocalRulestack resource name.
     * @param priority Local Rule priority.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return rule counter reset.
     */
    RuleCounterReset resetCounters(String resourceGroupName, String localRulestackName, String priority);

    /**
     * Get a LocalRulesResource.
     *
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a LocalRulesResource along with {@link Response}.
     */
    LocalRulesResource getById(String id);

    /**
     * Get a LocalRulesResource.
     *
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a LocalRulesResource along with {@link Response}.
     */
    Response<LocalRulesResource> getByIdWithResponse(String id, Context context);

    /**
     * Delete a LocalRulesResource.
     *
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteById(String id);

    /**
     * Delete a LocalRulesResource.
     *
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteByIdWithResponse(String id, Context context);

    /**
     * Begins definition for a new LocalRulesResource resource.
     *
     * @param name resource name.
     * @return the first stage of the new LocalRulesResource definition.
     */
    LocalRulesResource.DefinitionStages.Blank define(String name);
}
