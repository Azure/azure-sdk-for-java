// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.paloaltonetworks.ngfw.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.paloaltonetworks.ngfw.fluent.PreRulesClient;
import com.azure.resourcemanager.paloaltonetworks.ngfw.fluent.models.PreRulesResourceInner;
import com.azure.resourcemanager.paloaltonetworks.ngfw.fluent.models.RuleCounterInner;
import com.azure.resourcemanager.paloaltonetworks.ngfw.fluent.models.RuleCounterResetInner;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.PreRulesResourceListResult;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in PreRulesClient. */
public final class PreRulesClientImpl implements PreRulesClient {
    /** The proxy service used to perform REST calls. */
    private final PreRulesService service;

    /** The service client containing this operation class. */
    private final PaloAltoNetworksCloudngfwImpl client;

    /**
     * Initializes an instance of PreRulesClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    PreRulesClientImpl(PaloAltoNetworksCloudngfwImpl client) {
        this.service = RestProxy.create(PreRulesService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for PaloAltoNetworksCloudngfwPreRules to be used by the proxy service to
     * perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "PaloAltoNetworksClou")
    public interface PreRulesService {
        @Headers({"Content-Type: application/json"})
        @Get("/providers/PaloAltoNetworks.Cloudngfw/globalRulestacks/{globalRulestackName}/preRules")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<PreRulesResourceListResult>> list(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("globalRulestackName") String globalRulestackName,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("/providers/PaloAltoNetworks.Cloudngfw/globalRulestacks/{globalRulestackName}/preRules/{priority}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<PreRulesResourceInner>> get(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("globalRulestackName") String globalRulestackName,
            @PathParam("priority") String priority,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Put("/providers/PaloAltoNetworks.Cloudngfw/globalRulestacks/{globalRulestackName}/preRules/{priority}")
        @ExpectedResponses({200, 201})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> createOrUpdate(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("globalRulestackName") String globalRulestackName,
            @PathParam("priority") String priority,
            @BodyParam("application/json") PreRulesResourceInner resource,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Delete("/providers/PaloAltoNetworks.Cloudngfw/globalRulestacks/{globalRulestackName}/preRules/{priority}")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> delete(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("globalRulestackName") String globalRulestackName,
            @PathParam("priority") String priority,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/providers/PaloAltoNetworks.Cloudngfw/globalRulestacks/{globalRulestackName}/preRules/{priority}/getCounters")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<RuleCounterInner>> getCounters(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("globalRulestackName") String globalRulestackName,
            @PathParam("priority") String priority,
            @QueryParam("firewallName") String firewallName,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/providers/PaloAltoNetworks.Cloudngfw/globalRulestacks/{globalRulestackName}/preRules/{priority}/refreshCounters")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Void>> refreshCounters(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("globalRulestackName") String globalRulestackName,
            @PathParam("priority") String priority,
            @QueryParam("firewallName") String firewallName,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/providers/PaloAltoNetworks.Cloudngfw/globalRulestacks/{globalRulestackName}/preRules/{priority}/resetCounters")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<RuleCounterResetInner>> resetCounters(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("globalRulestackName") String globalRulestackName,
            @PathParam("priority") String priority,
            @QueryParam("firewallName") String firewallName,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<PreRulesResourceListResult>> listNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * List PreRulesResource resources by Tenant.
     *
     * @param globalRulestackName GlobalRulestack resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a PreRulesResource list operation along with {@link PagedResponse} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<PreRulesResourceInner>> listSinglePageAsync(String globalRulestackName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (globalRulestackName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter globalRulestackName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .list(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            globalRulestackName,
                            accept,
                            context))
            .<PagedResponse<PreRulesResourceInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * List PreRulesResource resources by Tenant.
     *
     * @param globalRulestackName GlobalRulestack resource name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a PreRulesResource list operation along with {@link PagedResponse} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<PreRulesResourceInner>> listSinglePageAsync(
        String globalRulestackName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (globalRulestackName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter globalRulestackName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .list(this.client.getEndpoint(), this.client.getApiVersion(), globalRulestackName, accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * List PreRulesResource resources by Tenant.
     *
     * @param globalRulestackName GlobalRulestack resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a PreRulesResource list operation as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<PreRulesResourceInner> listAsync(String globalRulestackName) {
        return new PagedFlux<>(
            () -> listSinglePageAsync(globalRulestackName), nextLink -> listNextSinglePageAsync(nextLink));
    }

    /**
     * List PreRulesResource resources by Tenant.
     *
     * @param globalRulestackName GlobalRulestack resource name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a PreRulesResource list operation as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<PreRulesResourceInner> listAsync(String globalRulestackName, Context context) {
        return new PagedFlux<>(
            () -> listSinglePageAsync(globalRulestackName, context),
            nextLink -> listNextSinglePageAsync(nextLink, context));
    }

    /**
     * List PreRulesResource resources by Tenant.
     *
     * @param globalRulestackName GlobalRulestack resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a PreRulesResource list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<PreRulesResourceInner> list(String globalRulestackName) {
        return new PagedIterable<>(listAsync(globalRulestackName));
    }

    /**
     * List PreRulesResource resources by Tenant.
     *
     * @param globalRulestackName GlobalRulestack resource name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a PreRulesResource list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<PreRulesResourceInner> list(String globalRulestackName, Context context) {
        return new PagedIterable<>(listAsync(globalRulestackName, context));
    }

    /**
     * Get a PreRulesResource.
     *
     * @param globalRulestackName GlobalRulestack resource name.
     * @param priority Pre Rule priority.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a PreRulesResource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<PreRulesResourceInner>> getWithResponseAsync(String globalRulestackName, String priority) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (globalRulestackName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter globalRulestackName is required and cannot be null."));
        }
        if (priority == null) {
            return Mono.error(new IllegalArgumentException("Parameter priority is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .get(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            globalRulestackName,
                            priority,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get a PreRulesResource.
     *
     * @param globalRulestackName GlobalRulestack resource name.
     * @param priority Pre Rule priority.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a PreRulesResource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<PreRulesResourceInner>> getWithResponseAsync(
        String globalRulestackName, String priority, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (globalRulestackName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter globalRulestackName is required and cannot be null."));
        }
        if (priority == null) {
            return Mono.error(new IllegalArgumentException("Parameter priority is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .get(
                this.client.getEndpoint(), this.client.getApiVersion(), globalRulestackName, priority, accept, context);
    }

    /**
     * Get a PreRulesResource.
     *
     * @param globalRulestackName GlobalRulestack resource name.
     * @param priority Pre Rule priority.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a PreRulesResource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PreRulesResourceInner> getAsync(String globalRulestackName, String priority) {
        return getWithResponseAsync(globalRulestackName, priority).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get a PreRulesResource.
     *
     * @param globalRulestackName GlobalRulestack resource name.
     * @param priority Pre Rule priority.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a PreRulesResource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<PreRulesResourceInner> getWithResponse(
        String globalRulestackName, String priority, Context context) {
        return getWithResponseAsync(globalRulestackName, priority, context).block();
    }

    /**
     * Get a PreRulesResource.
     *
     * @param globalRulestackName GlobalRulestack resource name.
     * @param priority Pre Rule priority.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a PreRulesResource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PreRulesResourceInner get(String globalRulestackName, String priority) {
        return getWithResponse(globalRulestackName, priority, Context.NONE).getValue();
    }

    /**
     * Create a PreRulesResource.
     *
     * @param globalRulestackName GlobalRulestack resource name.
     * @param priority Pre Rule priority.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return preRulestack rule list along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(
        String globalRulestackName, String priority, PreRulesResourceInner resource) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (globalRulestackName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter globalRulestackName is required and cannot be null."));
        }
        if (priority == null) {
            return Mono.error(new IllegalArgumentException("Parameter priority is required and cannot be null."));
        }
        if (resource == null) {
            return Mono.error(new IllegalArgumentException("Parameter resource is required and cannot be null."));
        } else {
            resource.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .createOrUpdate(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            globalRulestackName,
                            priority,
                            resource,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Create a PreRulesResource.
     *
     * @param globalRulestackName GlobalRulestack resource name.
     * @param priority Pre Rule priority.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return preRulestack rule list along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(
        String globalRulestackName, String priority, PreRulesResourceInner resource, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (globalRulestackName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter globalRulestackName is required and cannot be null."));
        }
        if (priority == null) {
            return Mono.error(new IllegalArgumentException("Parameter priority is required and cannot be null."));
        }
        if (resource == null) {
            return Mono.error(new IllegalArgumentException("Parameter resource is required and cannot be null."));
        } else {
            resource.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .createOrUpdate(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                globalRulestackName,
                priority,
                resource,
                accept,
                context);
    }

    /**
     * Create a PreRulesResource.
     *
     * @param globalRulestackName GlobalRulestack resource name.
     * @param priority Pre Rule priority.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of preRulestack rule list.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<PreRulesResourceInner>, PreRulesResourceInner> beginCreateOrUpdateAsync(
        String globalRulestackName, String priority, PreRulesResourceInner resource) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            createOrUpdateWithResponseAsync(globalRulestackName, priority, resource);
        return this
            .client
            .<PreRulesResourceInner, PreRulesResourceInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                PreRulesResourceInner.class,
                PreRulesResourceInner.class,
                this.client.getContext());
    }

    /**
     * Create a PreRulesResource.
     *
     * @param globalRulestackName GlobalRulestack resource name.
     * @param priority Pre Rule priority.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of preRulestack rule list.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<PreRulesResourceInner>, PreRulesResourceInner> beginCreateOrUpdateAsync(
        String globalRulestackName, String priority, PreRulesResourceInner resource, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            createOrUpdateWithResponseAsync(globalRulestackName, priority, resource, context);
        return this
            .client
            .<PreRulesResourceInner, PreRulesResourceInner>getLroResult(
                mono, this.client.getHttpPipeline(), PreRulesResourceInner.class, PreRulesResourceInner.class, context);
    }

    /**
     * Create a PreRulesResource.
     *
     * @param globalRulestackName GlobalRulestack resource name.
     * @param priority Pre Rule priority.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of preRulestack rule list.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<PreRulesResourceInner>, PreRulesResourceInner> beginCreateOrUpdate(
        String globalRulestackName, String priority, PreRulesResourceInner resource) {
        return this.beginCreateOrUpdateAsync(globalRulestackName, priority, resource).getSyncPoller();
    }

    /**
     * Create a PreRulesResource.
     *
     * @param globalRulestackName GlobalRulestack resource name.
     * @param priority Pre Rule priority.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of preRulestack rule list.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<PreRulesResourceInner>, PreRulesResourceInner> beginCreateOrUpdate(
        String globalRulestackName, String priority, PreRulesResourceInner resource, Context context) {
        return this.beginCreateOrUpdateAsync(globalRulestackName, priority, resource, context).getSyncPoller();
    }

    /**
     * Create a PreRulesResource.
     *
     * @param globalRulestackName GlobalRulestack resource name.
     * @param priority Pre Rule priority.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return preRulestack rule list on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PreRulesResourceInner> createOrUpdateAsync(
        String globalRulestackName, String priority, PreRulesResourceInner resource) {
        return beginCreateOrUpdateAsync(globalRulestackName, priority, resource)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create a PreRulesResource.
     *
     * @param globalRulestackName GlobalRulestack resource name.
     * @param priority Pre Rule priority.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return preRulestack rule list on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PreRulesResourceInner> createOrUpdateAsync(
        String globalRulestackName, String priority, PreRulesResourceInner resource, Context context) {
        return beginCreateOrUpdateAsync(globalRulestackName, priority, resource, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create a PreRulesResource.
     *
     * @param globalRulestackName GlobalRulestack resource name.
     * @param priority Pre Rule priority.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return preRulestack rule list.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PreRulesResourceInner createOrUpdate(
        String globalRulestackName, String priority, PreRulesResourceInner resource) {
        return createOrUpdateAsync(globalRulestackName, priority, resource).block();
    }

    /**
     * Create a PreRulesResource.
     *
     * @param globalRulestackName GlobalRulestack resource name.
     * @param priority Pre Rule priority.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return preRulestack rule list.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PreRulesResourceInner createOrUpdate(
        String globalRulestackName, String priority, PreRulesResourceInner resource, Context context) {
        return createOrUpdateAsync(globalRulestackName, priority, resource, context).block();
    }

    /**
     * Delete a PreRulesResource.
     *
     * @param globalRulestackName GlobalRulestack resource name.
     * @param priority Pre Rule priority.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(String globalRulestackName, String priority) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (globalRulestackName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter globalRulestackName is required and cannot be null."));
        }
        if (priority == null) {
            return Mono.error(new IllegalArgumentException("Parameter priority is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .delete(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            globalRulestackName,
                            priority,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Delete a PreRulesResource.
     *
     * @param globalRulestackName GlobalRulestack resource name.
     * @param priority Pre Rule priority.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(
        String globalRulestackName, String priority, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (globalRulestackName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter globalRulestackName is required and cannot be null."));
        }
        if (priority == null) {
            return Mono.error(new IllegalArgumentException("Parameter priority is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .delete(
                this.client.getEndpoint(), this.client.getApiVersion(), globalRulestackName, priority, accept, context);
    }

    /**
     * Delete a PreRulesResource.
     *
     * @param globalRulestackName GlobalRulestack resource name.
     * @param priority Pre Rule priority.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(String globalRulestackName, String priority) {
        Mono<Response<Flux<ByteBuffer>>> mono = deleteWithResponseAsync(globalRulestackName, priority);
        return this
            .client
            .<Void, Void>getLroResult(
                mono, this.client.getHttpPipeline(), Void.class, Void.class, this.client.getContext());
    }

    /**
     * Delete a PreRulesResource.
     *
     * @param globalRulestackName GlobalRulestack resource name.
     * @param priority Pre Rule priority.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(
        String globalRulestackName, String priority, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono = deleteWithResponseAsync(globalRulestackName, priority, context);
        return this
            .client
            .<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class, context);
    }

    /**
     * Delete a PreRulesResource.
     *
     * @param globalRulestackName GlobalRulestack resource name.
     * @param priority Pre Rule priority.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String globalRulestackName, String priority) {
        return this.beginDeleteAsync(globalRulestackName, priority).getSyncPoller();
    }

    /**
     * Delete a PreRulesResource.
     *
     * @param globalRulestackName GlobalRulestack resource name.
     * @param priority Pre Rule priority.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(
        String globalRulestackName, String priority, Context context) {
        return this.beginDeleteAsync(globalRulestackName, priority, context).getSyncPoller();
    }

    /**
     * Delete a PreRulesResource.
     *
     * @param globalRulestackName GlobalRulestack resource name.
     * @param priority Pre Rule priority.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String globalRulestackName, String priority) {
        return beginDeleteAsync(globalRulestackName, priority).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Delete a PreRulesResource.
     *
     * @param globalRulestackName GlobalRulestack resource name.
     * @param priority Pre Rule priority.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String globalRulestackName, String priority, Context context) {
        return beginDeleteAsync(globalRulestackName, priority, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Delete a PreRulesResource.
     *
     * @param globalRulestackName GlobalRulestack resource name.
     * @param priority Pre Rule priority.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String globalRulestackName, String priority) {
        deleteAsync(globalRulestackName, priority).block();
    }

    /**
     * Delete a PreRulesResource.
     *
     * @param globalRulestackName GlobalRulestack resource name.
     * @param priority Pre Rule priority.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String globalRulestackName, String priority, Context context) {
        deleteAsync(globalRulestackName, priority, context).block();
    }

    /**
     * Get counters.
     *
     * @param globalRulestackName GlobalRulestack resource name.
     * @param priority Pre Rule priority.
     * @param firewallName The firewallName parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return counters along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<RuleCounterInner>> getCountersWithResponseAsync(
        String globalRulestackName, String priority, String firewallName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (globalRulestackName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter globalRulestackName is required and cannot be null."));
        }
        if (priority == null) {
            return Mono.error(new IllegalArgumentException("Parameter priority is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getCounters(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            globalRulestackName,
                            priority,
                            firewallName,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get counters.
     *
     * @param globalRulestackName GlobalRulestack resource name.
     * @param priority Pre Rule priority.
     * @param firewallName The firewallName parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return counters along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<RuleCounterInner>> getCountersWithResponseAsync(
        String globalRulestackName, String priority, String firewallName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (globalRulestackName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter globalRulestackName is required and cannot be null."));
        }
        if (priority == null) {
            return Mono.error(new IllegalArgumentException("Parameter priority is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .getCounters(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                globalRulestackName,
                priority,
                firewallName,
                accept,
                context);
    }

    /**
     * Get counters.
     *
     * @param globalRulestackName GlobalRulestack resource name.
     * @param priority Pre Rule priority.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return counters on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<RuleCounterInner> getCountersAsync(String globalRulestackName, String priority) {
        final String firewallName = null;
        return getCountersWithResponseAsync(globalRulestackName, priority, firewallName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get counters.
     *
     * @param globalRulestackName GlobalRulestack resource name.
     * @param priority Pre Rule priority.
     * @param firewallName The firewallName parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return counters along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<RuleCounterInner> getCountersWithResponse(
        String globalRulestackName, String priority, String firewallName, Context context) {
        return getCountersWithResponseAsync(globalRulestackName, priority, firewallName, context).block();
    }

    /**
     * Get counters.
     *
     * @param globalRulestackName GlobalRulestack resource name.
     * @param priority Pre Rule priority.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return counters.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RuleCounterInner getCounters(String globalRulestackName, String priority) {
        final String firewallName = null;
        return getCountersWithResponse(globalRulestackName, priority, firewallName, Context.NONE).getValue();
    }

    /**
     * Refresh counters.
     *
     * @param globalRulestackName GlobalRulestack resource name.
     * @param priority Pre Rule priority.
     * @param firewallName The firewallName parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> refreshCountersWithResponseAsync(
        String globalRulestackName, String priority, String firewallName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (globalRulestackName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter globalRulestackName is required and cannot be null."));
        }
        if (priority == null) {
            return Mono.error(new IllegalArgumentException("Parameter priority is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .refreshCounters(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            globalRulestackName,
                            priority,
                            firewallName,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Refresh counters.
     *
     * @param globalRulestackName GlobalRulestack resource name.
     * @param priority Pre Rule priority.
     * @param firewallName The firewallName parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> refreshCountersWithResponseAsync(
        String globalRulestackName, String priority, String firewallName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (globalRulestackName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter globalRulestackName is required and cannot be null."));
        }
        if (priority == null) {
            return Mono.error(new IllegalArgumentException("Parameter priority is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .refreshCounters(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                globalRulestackName,
                priority,
                firewallName,
                accept,
                context);
    }

    /**
     * Refresh counters.
     *
     * @param globalRulestackName GlobalRulestack resource name.
     * @param priority Pre Rule priority.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> refreshCountersAsync(String globalRulestackName, String priority) {
        final String firewallName = null;
        return refreshCountersWithResponseAsync(globalRulestackName, priority, firewallName)
            .flatMap(ignored -> Mono.empty());
    }

    /**
     * Refresh counters.
     *
     * @param globalRulestackName GlobalRulestack resource name.
     * @param priority Pre Rule priority.
     * @param firewallName The firewallName parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> refreshCountersWithResponse(
        String globalRulestackName, String priority, String firewallName, Context context) {
        return refreshCountersWithResponseAsync(globalRulestackName, priority, firewallName, context).block();
    }

    /**
     * Refresh counters.
     *
     * @param globalRulestackName GlobalRulestack resource name.
     * @param priority Pre Rule priority.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void refreshCounters(String globalRulestackName, String priority) {
        final String firewallName = null;
        refreshCountersWithResponse(globalRulestackName, priority, firewallName, Context.NONE);
    }

    /**
     * Reset counters.
     *
     * @param globalRulestackName GlobalRulestack resource name.
     * @param priority Pre Rule priority.
     * @param firewallName The firewallName parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return rule counter reset along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<RuleCounterResetInner>> resetCountersWithResponseAsync(
        String globalRulestackName, String priority, String firewallName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (globalRulestackName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter globalRulestackName is required and cannot be null."));
        }
        if (priority == null) {
            return Mono.error(new IllegalArgumentException("Parameter priority is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .resetCounters(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            globalRulestackName,
                            priority,
                            firewallName,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Reset counters.
     *
     * @param globalRulestackName GlobalRulestack resource name.
     * @param priority Pre Rule priority.
     * @param firewallName The firewallName parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return rule counter reset along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<RuleCounterResetInner>> resetCountersWithResponseAsync(
        String globalRulestackName, String priority, String firewallName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (globalRulestackName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter globalRulestackName is required and cannot be null."));
        }
        if (priority == null) {
            return Mono.error(new IllegalArgumentException("Parameter priority is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .resetCounters(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                globalRulestackName,
                priority,
                firewallName,
                accept,
                context);
    }

    /**
     * Reset counters.
     *
     * @param globalRulestackName GlobalRulestack resource name.
     * @param priority Pre Rule priority.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return rule counter reset on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<RuleCounterResetInner> resetCountersAsync(String globalRulestackName, String priority) {
        final String firewallName = null;
        return resetCountersWithResponseAsync(globalRulestackName, priority, firewallName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Reset counters.
     *
     * @param globalRulestackName GlobalRulestack resource name.
     * @param priority Pre Rule priority.
     * @param firewallName The firewallName parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return rule counter reset along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<RuleCounterResetInner> resetCountersWithResponse(
        String globalRulestackName, String priority, String firewallName, Context context) {
        return resetCountersWithResponseAsync(globalRulestackName, priority, firewallName, context).block();
    }

    /**
     * Reset counters.
     *
     * @param globalRulestackName GlobalRulestack resource name.
     * @param priority Pre Rule priority.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return rule counter reset.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RuleCounterResetInner resetCounters(String globalRulestackName, String priority) {
        final String firewallName = null;
        return resetCountersWithResponse(globalRulestackName, priority, firewallName, Context.NONE).getValue();
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The URL to get the next list of items
     *     <p>The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a PreRulesResource list operation along with {@link PagedResponse} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<PreRulesResourceInner>> listNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<PreRulesResourceInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The URL to get the next list of items
     *     <p>The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a PreRulesResource list operation along with {@link PagedResponse} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<PreRulesResourceInner>> listNextSinglePageAsync(String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }
}
