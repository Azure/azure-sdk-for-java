// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.paloaltonetworks.ngfw.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * destination address.
 */
@Fluent
public final class DestinationAddr implements JsonSerializable<DestinationAddr> {
    /*
     * special value 'any'
     */
    private List<String> cidrs;

    /*
     * list of countries
     */
    private List<String> countries;

    /*
     * list of feeds
     */
    private List<String> feeds;

    /*
     * prefix list
     */
    private List<String> prefixLists;

    /*
     * fqdn list
     */
    private List<String> fqdnLists;

    /**
     * Creates an instance of DestinationAddr class.
     */
    public DestinationAddr() {
    }

    /**
     * Get the cidrs property: special value 'any'.
     * 
     * @return the cidrs value.
     */
    public List<String> cidrs() {
        return this.cidrs;
    }

    /**
     * Set the cidrs property: special value 'any'.
     * 
     * @param cidrs the cidrs value to set.
     * @return the DestinationAddr object itself.
     */
    public DestinationAddr withCidrs(List<String> cidrs) {
        this.cidrs = cidrs;
        return this;
    }

    /**
     * Get the countries property: list of countries.
     * 
     * @return the countries value.
     */
    public List<String> countries() {
        return this.countries;
    }

    /**
     * Set the countries property: list of countries.
     * 
     * @param countries the countries value to set.
     * @return the DestinationAddr object itself.
     */
    public DestinationAddr withCountries(List<String> countries) {
        this.countries = countries;
        return this;
    }

    /**
     * Get the feeds property: list of feeds.
     * 
     * @return the feeds value.
     */
    public List<String> feeds() {
        return this.feeds;
    }

    /**
     * Set the feeds property: list of feeds.
     * 
     * @param feeds the feeds value to set.
     * @return the DestinationAddr object itself.
     */
    public DestinationAddr withFeeds(List<String> feeds) {
        this.feeds = feeds;
        return this;
    }

    /**
     * Get the prefixLists property: prefix list.
     * 
     * @return the prefixLists value.
     */
    public List<String> prefixLists() {
        return this.prefixLists;
    }

    /**
     * Set the prefixLists property: prefix list.
     * 
     * @param prefixLists the prefixLists value to set.
     * @return the DestinationAddr object itself.
     */
    public DestinationAddr withPrefixLists(List<String> prefixLists) {
        this.prefixLists = prefixLists;
        return this;
    }

    /**
     * Get the fqdnLists property: fqdn list.
     * 
     * @return the fqdnLists value.
     */
    public List<String> fqdnLists() {
        return this.fqdnLists;
    }

    /**
     * Set the fqdnLists property: fqdn list.
     * 
     * @param fqdnLists the fqdnLists value to set.
     * @return the DestinationAddr object itself.
     */
    public DestinationAddr withFqdnLists(List<String> fqdnLists) {
        this.fqdnLists = fqdnLists;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("cidrs", this.cidrs, (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("countries", this.countries, (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("feeds", this.feeds, (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("prefixLists", this.prefixLists, (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("fqdnLists", this.fqdnLists, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DestinationAddr from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DestinationAddr if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the DestinationAddr.
     */
    public static DestinationAddr fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DestinationAddr deserializedDestinationAddr = new DestinationAddr();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("cidrs".equals(fieldName)) {
                    List<String> cidrs = reader.readArray(reader1 -> reader1.getString());
                    deserializedDestinationAddr.cidrs = cidrs;
                } else if ("countries".equals(fieldName)) {
                    List<String> countries = reader.readArray(reader1 -> reader1.getString());
                    deserializedDestinationAddr.countries = countries;
                } else if ("feeds".equals(fieldName)) {
                    List<String> feeds = reader.readArray(reader1 -> reader1.getString());
                    deserializedDestinationAddr.feeds = feeds;
                } else if ("prefixLists".equals(fieldName)) {
                    List<String> prefixLists = reader.readArray(reader1 -> reader1.getString());
                    deserializedDestinationAddr.prefixLists = prefixLists;
                } else if ("fqdnLists".equals(fieldName)) {
                    List<String> fqdnLists = reader.readArray(reader1 -> reader1.getString());
                    deserializedDestinationAddr.fqdnLists = fqdnLists;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDestinationAddr;
        });
    }
}
