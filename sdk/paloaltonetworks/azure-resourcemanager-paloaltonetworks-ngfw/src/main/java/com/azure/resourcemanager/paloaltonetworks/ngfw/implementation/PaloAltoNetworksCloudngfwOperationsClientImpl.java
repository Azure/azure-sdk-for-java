// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.paloaltonetworks.ngfw.implementation;

import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.resourcemanager.paloaltonetworks.ngfw.fluent.PaloAltoNetworksCloudngfwOperationsClient;
import com.azure.resourcemanager.paloaltonetworks.ngfw.fluent.models.CloudManagerTenantListInner;
import com.azure.resourcemanager.paloaltonetworks.ngfw.fluent.models.ProductSerialNumberRequestStatusInner;
import com.azure.resourcemanager.paloaltonetworks.ngfw.fluent.models.ProductSerialNumberStatusInner;
import com.azure.resourcemanager.paloaltonetworks.ngfw.fluent.models.SupportInfoModelInner;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in PaloAltoNetworksCloudngfwOperationsClient.
 */
public final class PaloAltoNetworksCloudngfwOperationsClientImpl implements PaloAltoNetworksCloudngfwOperationsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final PaloAltoNetworksCloudngfwOperationsService service;

    /**
     * The service client containing this operation class.
     */
    private final PaloAltoNetworksNgfwManagementClientImpl client;

    /**
     * Initializes an instance of PaloAltoNetworksCloudngfwOperationsClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    PaloAltoNetworksCloudngfwOperationsClientImpl(PaloAltoNetworksNgfwManagementClientImpl client) {
        this.service = RestProxy.create(PaloAltoNetworksCloudngfwOperationsService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for
     * PaloAltoNetworksNgfwManagementClientPaloAltoNetworksCloudngfwOperations to be used by the proxy service to
     * perform REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "PaloAltoNetworksNgfwManagementClientPaloAltoNetworksCloudngfwOperations")
    public interface PaloAltoNetworksCloudngfwOperationsService {
        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/providers/PaloAltoNetworks.Cloudngfw/createProductSerialNumber")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ProductSerialNumberRequestStatusInner>> createProductSerialNumber(
            @HostParam("endpoint") String endpoint, @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/providers/PaloAltoNetworks.Cloudngfw/createProductSerialNumber")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<ProductSerialNumberRequestStatusInner> createProductSerialNumberSync(
            @HostParam("endpoint") String endpoint, @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/providers/PaloAltoNetworks.Cloudngfw/listCloudManagerTenants")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<CloudManagerTenantListInner>> listCloudManagerTenants(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/providers/PaloAltoNetworks.Cloudngfw/listCloudManagerTenants")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<CloudManagerTenantListInner> listCloudManagerTenantsSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/providers/PaloAltoNetworks.Cloudngfw/listProductSerialNumberStatus")
        @ExpectedResponses({ 200, 404 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ProductSerialNumberStatusInner>> listProductSerialNumberStatus(
            @HostParam("endpoint") String endpoint, @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/providers/PaloAltoNetworks.Cloudngfw/listProductSerialNumberStatus")
        @ExpectedResponses({ 200, 404 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<ProductSerialNumberStatusInner> listProductSerialNumberStatusSync(
            @HostParam("endpoint") String endpoint, @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/providers/PaloAltoNetworks.Cloudngfw/listSupportInfo")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SupportInfoModelInner>> listSupportInfo(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/providers/PaloAltoNetworks.Cloudngfw/listSupportInfo")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<SupportInfoModelInner> listSupportInfoSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * The createProductSerialNumber operation.
     * 
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return create Product Serial Number Request status along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ProductSerialNumberRequestStatusInner>> createProductSerialNumberWithResponseAsync() {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.createProductSerialNumber(this.client.getEndpoint(),
                this.client.getApiVersion(), this.client.getSubscriptionId(), accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * The createProductSerialNumber operation.
     * 
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return create Product Serial Number Request status on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ProductSerialNumberRequestStatusInner> createProductSerialNumberAsync() {
        return createProductSerialNumberWithResponseAsync().flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * The createProductSerialNumber operation.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return create Product Serial Number Request status along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ProductSerialNumberRequestStatusInner> createProductSerialNumberWithResponse(Context context) {
        final String accept = "application/json";
        return service.createProductSerialNumberSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), accept, context);
    }

    /**
     * The createProductSerialNumber operation.
     * 
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return create Product Serial Number Request status.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ProductSerialNumberRequestStatusInner createProductSerialNumber() {
        return createProductSerialNumberWithResponse(Context.NONE).getValue();
    }

    /**
     * The listCloudManagerTenants operation.
     * 
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return cloud Manager Tenant along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<CloudManagerTenantListInner>> listCloudManagerTenantsWithResponseAsync() {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listCloudManagerTenants(this.client.getEndpoint(),
                this.client.getApiVersion(), this.client.getSubscriptionId(), accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * The listCloudManagerTenants operation.
     * 
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return cloud Manager Tenant on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<CloudManagerTenantListInner> listCloudManagerTenantsAsync() {
        return listCloudManagerTenantsWithResponseAsync().flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * The listCloudManagerTenants operation.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return cloud Manager Tenant along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<CloudManagerTenantListInner> listCloudManagerTenantsWithResponse(Context context) {
        final String accept = "application/json";
        return service.listCloudManagerTenantsSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), accept, context);
    }

    /**
     * The listCloudManagerTenants operation.
     * 
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return cloud Manager Tenant.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CloudManagerTenantListInner listCloudManagerTenants() {
        return listCloudManagerTenantsWithResponse(Context.NONE).getValue();
    }

    /**
     * The listProductSerialNumberStatus operation.
     * 
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return product serial and status for the service along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ProductSerialNumberStatusInner>> listProductSerialNumberStatusWithResponseAsync() {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listProductSerialNumberStatus(this.client.getEndpoint(),
                this.client.getApiVersion(), this.client.getSubscriptionId(), accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * The listProductSerialNumberStatus operation.
     * 
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return product serial and status for the service on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ProductSerialNumberStatusInner> listProductSerialNumberStatusAsync() {
        return listProductSerialNumberStatusWithResponseAsync().flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * The listProductSerialNumberStatus operation.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return product serial and status for the service along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ProductSerialNumberStatusInner> listProductSerialNumberStatusWithResponse(Context context) {
        final String accept = "application/json";
        return service.listProductSerialNumberStatusSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), accept, context);
    }

    /**
     * The listProductSerialNumberStatus operation.
     * 
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return product serial and status for the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ProductSerialNumberStatusInner listProductSerialNumberStatus() {
        return listProductSerialNumberStatusWithResponse(Context.NONE).getValue();
    }

    /**
     * The listSupportInfo operation.
     * 
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return support information for the service along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SupportInfoModelInner>> listSupportInfoWithResponseAsync() {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listSupportInfo(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * The listSupportInfo operation.
     * 
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return support information for the service on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SupportInfoModelInner> listSupportInfoAsync() {
        return listSupportInfoWithResponseAsync().flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * The listSupportInfo operation.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return support information for the service along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<SupportInfoModelInner> listSupportInfoWithResponse(Context context) {
        final String accept = "application/json";
        return service.listSupportInfoSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), accept, context);
    }

    /**
     * The listSupportInfo operation.
     * 
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return support information for the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SupportInfoModelInner listSupportInfo() {
        return listSupportInfoWithResponse(Context.NONE).getValue();
    }
}
