// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.paloaltonetworks.ngfw.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Frontend setting for Firewall.
 */
@Fluent
public final class FrontendSetting implements JsonSerializable<FrontendSetting> {
    /*
     * Settings name
     */
    private String name;

    /*
     * Protocol Type
     */
    private ProtocolType protocol;

    /*
     * Frontend configurations
     */
    private EndpointConfiguration frontendConfiguration;

    /*
     * Backend configurations
     */
    private EndpointConfiguration backendConfiguration;

    /**
     * Creates an instance of FrontendSetting class.
     */
    public FrontendSetting() {
    }

    /**
     * Get the name property: Settings name.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: Settings name.
     * 
     * @param name the name value to set.
     * @return the FrontendSetting object itself.
     */
    public FrontendSetting withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the protocol property: Protocol Type.
     * 
     * @return the protocol value.
     */
    public ProtocolType protocol() {
        return this.protocol;
    }

    /**
     * Set the protocol property: Protocol Type.
     * 
     * @param protocol the protocol value to set.
     * @return the FrontendSetting object itself.
     */
    public FrontendSetting withProtocol(ProtocolType protocol) {
        this.protocol = protocol;
        return this;
    }

    /**
     * Get the frontendConfiguration property: Frontend configurations.
     * 
     * @return the frontendConfiguration value.
     */
    public EndpointConfiguration frontendConfiguration() {
        return this.frontendConfiguration;
    }

    /**
     * Set the frontendConfiguration property: Frontend configurations.
     * 
     * @param frontendConfiguration the frontendConfiguration value to set.
     * @return the FrontendSetting object itself.
     */
    public FrontendSetting withFrontendConfiguration(EndpointConfiguration frontendConfiguration) {
        this.frontendConfiguration = frontendConfiguration;
        return this;
    }

    /**
     * Get the backendConfiguration property: Backend configurations.
     * 
     * @return the backendConfiguration value.
     */
    public EndpointConfiguration backendConfiguration() {
        return this.backendConfiguration;
    }

    /**
     * Set the backendConfiguration property: Backend configurations.
     * 
     * @param backendConfiguration the backendConfiguration value to set.
     * @return the FrontendSetting object itself.
     */
    public FrontendSetting withBackendConfiguration(EndpointConfiguration backendConfiguration) {
        this.backendConfiguration = backendConfiguration;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (name() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property name in model FrontendSetting"));
        }
        if (protocol() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property protocol in model FrontendSetting"));
        }
        if (frontendConfiguration() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property frontendConfiguration in model FrontendSetting"));
        } else {
            frontendConfiguration().validate();
        }
        if (backendConfiguration() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property backendConfiguration in model FrontendSetting"));
        } else {
            backendConfiguration().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(FrontendSetting.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("protocol", this.protocol == null ? null : this.protocol.toString());
        jsonWriter.writeJsonField("frontendConfiguration", this.frontendConfiguration);
        jsonWriter.writeJsonField("backendConfiguration", this.backendConfiguration);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FrontendSetting from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FrontendSetting if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the FrontendSetting.
     */
    public static FrontendSetting fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FrontendSetting deserializedFrontendSetting = new FrontendSetting();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedFrontendSetting.name = reader.getString();
                } else if ("protocol".equals(fieldName)) {
                    deserializedFrontendSetting.protocol = ProtocolType.fromString(reader.getString());
                } else if ("frontendConfiguration".equals(fieldName)) {
                    deserializedFrontendSetting.frontendConfiguration = EndpointConfiguration.fromJson(reader);
                } else if ("backendConfiguration".equals(fieldName)) {
                    deserializedFrontendSetting.backendConfiguration = EndpointConfiguration.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedFrontendSetting;
        });
    }
}
