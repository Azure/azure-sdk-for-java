// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.paloaltonetworks.ngfw.models;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;
import com.azure.resourcemanager.paloaltonetworks.ngfw.fluent.models.CertificateObjectGlobalRulestackResourceInner;

/** Resource collection API of CertificateObjectGlobalRulestacks. */
public interface CertificateObjectGlobalRulestacks {
    /**
     * List CertificateObjectGlobalRulestackResource resources by Tenant.
     *
     * @param globalRulestackName GlobalRulestack resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a CertificateObjectGlobalRulestackResource list operation as paginated response with
     *     {@link PagedIterable}.
     */
    PagedIterable<CertificateObjectGlobalRulestackResource> list(String globalRulestackName);

    /**
     * List CertificateObjectGlobalRulestackResource resources by Tenant.
     *
     * @param globalRulestackName GlobalRulestack resource name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a CertificateObjectGlobalRulestackResource list operation as paginated response with
     *     {@link PagedIterable}.
     */
    PagedIterable<CertificateObjectGlobalRulestackResource> list(String globalRulestackName, Context context);

    /**
     * Get a CertificateObjectGlobalRulestackResource.
     *
     * @param globalRulestackName GlobalRulestack resource name.
     * @param name certificate name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a CertificateObjectGlobalRulestackResource along with {@link Response}.
     */
    Response<CertificateObjectGlobalRulestackResource> getWithResponse(
        String globalRulestackName, String name, Context context);

    /**
     * Get a CertificateObjectGlobalRulestackResource.
     *
     * @param globalRulestackName GlobalRulestack resource name.
     * @param name certificate name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a CertificateObjectGlobalRulestackResource.
     */
    CertificateObjectGlobalRulestackResource get(String globalRulestackName, String name);

    /**
     * Create a CertificateObjectGlobalRulestackResource.
     *
     * @param globalRulestackName GlobalRulestack resource name.
     * @param name certificate name.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return globalRulestack Certificate Object.
     */
    CertificateObjectGlobalRulestackResource createOrUpdate(
        String globalRulestackName, String name, CertificateObjectGlobalRulestackResourceInner resource);

    /**
     * Create a CertificateObjectGlobalRulestackResource.
     *
     * @param globalRulestackName GlobalRulestack resource name.
     * @param name certificate name.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return globalRulestack Certificate Object.
     */
    CertificateObjectGlobalRulestackResource createOrUpdate(
        String globalRulestackName,
        String name,
        CertificateObjectGlobalRulestackResourceInner resource,
        Context context);

    /**
     * Delete a CertificateObjectGlobalRulestackResource.
     *
     * @param globalRulestackName GlobalRulestack resource name.
     * @param name certificate name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteByResourceGroup(String globalRulestackName, String name);

    /**
     * Delete a CertificateObjectGlobalRulestackResource.
     *
     * @param globalRulestackName GlobalRulestack resource name.
     * @param name certificate name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void delete(String globalRulestackName, String name, Context context);
}
