// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.paloaltonetworks.ngfw.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.ProvisioningState;
import java.io.IOException;
import java.util.List;

/**
 * prefix entry.
 */
@Fluent
public final class PrefixObject implements JsonSerializable<PrefixObject> {
    /*
     * prefix description
     */
    private String description;

    /*
     * prefix list
     */
    private List<String> prefixList;

    /*
     * etag info
     */
    private String etag;

    /*
     * comment for this object
     */
    private String auditComment;

    /*
     * Provisioning state of the resource.
     */
    private ProvisioningState provisioningState;

    /**
     * Creates an instance of PrefixObject class.
     */
    public PrefixObject() {
    }

    /**
     * Get the description property: prefix description.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: prefix description.
     * 
     * @param description the description value to set.
     * @return the PrefixObject object itself.
     */
    public PrefixObject withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the prefixList property: prefix list.
     * 
     * @return the prefixList value.
     */
    public List<String> prefixList() {
        return this.prefixList;
    }

    /**
     * Set the prefixList property: prefix list.
     * 
     * @param prefixList the prefixList value to set.
     * @return the PrefixObject object itself.
     */
    public PrefixObject withPrefixList(List<String> prefixList) {
        this.prefixList = prefixList;
        return this;
    }

    /**
     * Get the etag property: etag info.
     * 
     * @return the etag value.
     */
    public String etag() {
        return this.etag;
    }

    /**
     * Set the etag property: etag info.
     * 
     * @param etag the etag value to set.
     * @return the PrefixObject object itself.
     */
    public PrefixObject withEtag(String etag) {
        this.etag = etag;
        return this;
    }

    /**
     * Get the auditComment property: comment for this object.
     * 
     * @return the auditComment value.
     */
    public String auditComment() {
        return this.auditComment;
    }

    /**
     * Set the auditComment property: comment for this object.
     * 
     * @param auditComment the auditComment value to set.
     * @return the PrefixObject object itself.
     */
    public PrefixObject withAuditComment(String auditComment) {
        this.auditComment = auditComment;
        return this;
    }

    /**
     * Get the provisioningState property: Provisioning state of the resource.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (prefixList() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property prefixList in model PrefixObject"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(PrefixObject.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("prefixList", this.prefixList, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeStringField("etag", this.etag);
        jsonWriter.writeStringField("auditComment", this.auditComment);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PrefixObject from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PrefixObject if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the PrefixObject.
     */
    public static PrefixObject fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PrefixObject deserializedPrefixObject = new PrefixObject();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("prefixList".equals(fieldName)) {
                    List<String> prefixList = reader.readArray(reader1 -> reader1.getString());
                    deserializedPrefixObject.prefixList = prefixList;
                } else if ("description".equals(fieldName)) {
                    deserializedPrefixObject.description = reader.getString();
                } else if ("etag".equals(fieldName)) {
                    deserializedPrefixObject.etag = reader.getString();
                } else if ("auditComment".equals(fieldName)) {
                    deserializedPrefixObject.auditComment = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedPrefixObject.provisioningState = ProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPrefixObject;
        });
    }
}
