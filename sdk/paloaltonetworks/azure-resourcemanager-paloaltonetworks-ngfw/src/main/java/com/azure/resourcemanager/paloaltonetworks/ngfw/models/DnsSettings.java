// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.paloaltonetworks.ngfw.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * DNS Proxy settings for Firewall.
 */
@Fluent
public final class DnsSettings implements JsonSerializable<DnsSettings> {
    /*
     * Enable DNS proxy, disabled by default
     */
    private DnsProxy enableDnsProxy;

    /*
     * Enabled DNS proxy type, disabled by default
     */
    private EnabledDnsType enabledDnsType;

    /*
     * List of IPs associated with the Firewall
     */
    private List<IpAddress> dnsServers;

    /**
     * Creates an instance of DnsSettings class.
     */
    public DnsSettings() {
    }

    /**
     * Get the enableDnsProxy property: Enable DNS proxy, disabled by default.
     * 
     * @return the enableDnsProxy value.
     */
    public DnsProxy enableDnsProxy() {
        return this.enableDnsProxy;
    }

    /**
     * Set the enableDnsProxy property: Enable DNS proxy, disabled by default.
     * 
     * @param enableDnsProxy the enableDnsProxy value to set.
     * @return the DnsSettings object itself.
     */
    public DnsSettings withEnableDnsProxy(DnsProxy enableDnsProxy) {
        this.enableDnsProxy = enableDnsProxy;
        return this;
    }

    /**
     * Get the enabledDnsType property: Enabled DNS proxy type, disabled by default.
     * 
     * @return the enabledDnsType value.
     */
    public EnabledDnsType enabledDnsType() {
        return this.enabledDnsType;
    }

    /**
     * Set the enabledDnsType property: Enabled DNS proxy type, disabled by default.
     * 
     * @param enabledDnsType the enabledDnsType value to set.
     * @return the DnsSettings object itself.
     */
    public DnsSettings withEnabledDnsType(EnabledDnsType enabledDnsType) {
        this.enabledDnsType = enabledDnsType;
        return this;
    }

    /**
     * Get the dnsServers property: List of IPs associated with the Firewall.
     * 
     * @return the dnsServers value.
     */
    public List<IpAddress> dnsServers() {
        return this.dnsServers;
    }

    /**
     * Set the dnsServers property: List of IPs associated with the Firewall.
     * 
     * @param dnsServers the dnsServers value to set.
     * @return the DnsSettings object itself.
     */
    public DnsSettings withDnsServers(List<IpAddress> dnsServers) {
        this.dnsServers = dnsServers;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (dnsServers() != null) {
            dnsServers().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("enableDnsProxy",
            this.enableDnsProxy == null ? null : this.enableDnsProxy.toString());
        jsonWriter.writeStringField("enabledDnsType",
            this.enabledDnsType == null ? null : this.enabledDnsType.toString());
        jsonWriter.writeArrayField("dnsServers", this.dnsServers, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DnsSettings from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DnsSettings if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the DnsSettings.
     */
    public static DnsSettings fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DnsSettings deserializedDnsSettings = new DnsSettings();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("enableDnsProxy".equals(fieldName)) {
                    deserializedDnsSettings.enableDnsProxy = DnsProxy.fromString(reader.getString());
                } else if ("enabledDnsType".equals(fieldName)) {
                    deserializedDnsSettings.enabledDnsType = EnabledDnsType.fromString(reader.getString());
                } else if ("dnsServers".equals(fieldName)) {
                    List<IpAddress> dnsServers = reader.readArray(reader1 -> IpAddress.fromJson(reader1));
                    deserializedDnsSettings.dnsServers = dnsServers;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDnsSettings;
        });
    }
}
