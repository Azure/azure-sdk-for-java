// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.paloaltonetworks.ngfw.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Endpoint Configuration for frontend and backend.
 */
@Fluent
public final class EndpointConfiguration implements JsonSerializable<EndpointConfiguration> {
    /*
     * port ID
     */
    private String port;

    /*
     * Address Space
     */
    private IpAddress address;

    /**
     * Creates an instance of EndpointConfiguration class.
     */
    public EndpointConfiguration() {
    }

    /**
     * Get the port property: port ID.
     * 
     * @return the port value.
     */
    public String port() {
        return this.port;
    }

    /**
     * Set the port property: port ID.
     * 
     * @param port the port value to set.
     * @return the EndpointConfiguration object itself.
     */
    public EndpointConfiguration withPort(String port) {
        this.port = port;
        return this;
    }

    /**
     * Get the address property: Address Space.
     * 
     * @return the address value.
     */
    public IpAddress address() {
        return this.address;
    }

    /**
     * Set the address property: Address Space.
     * 
     * @param address the address value to set.
     * @return the EndpointConfiguration object itself.
     */
    public EndpointConfiguration withAddress(IpAddress address) {
        this.address = address;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (port() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property port in model EndpointConfiguration"));
        }
        if (address() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property address in model EndpointConfiguration"));
        } else {
            address().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(EndpointConfiguration.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("port", this.port);
        jsonWriter.writeJsonField("address", this.address);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EndpointConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of EndpointConfiguration if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the EndpointConfiguration.
     */
    public static EndpointConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            EndpointConfiguration deserializedEndpointConfiguration = new EndpointConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("port".equals(fieldName)) {
                    deserializedEndpointConfiguration.port = reader.getString();
                } else if ("address".equals(fieldName)) {
                    deserializedEndpointConfiguration.address = IpAddress.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedEndpointConfiguration;
        });
    }
}
