// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.paloaltonetworks.ngfw.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition for App Seen.
 */
@Immutable
public final class AppSeenInfo implements JsonSerializable<AppSeenInfo> {
    /*
     * title
     */
    private String title;

    /*
     * category
     */
    private String category;

    /*
     * subCategory
     */
    private String subCategory;

    /*
     * risk
     */
    private String risk;

    /*
     * tag
     */
    private String tag;

    /*
     * technology
     */
    private String technology;

    /*
     * standardPorts
     */
    private String standardPorts;

    /**
     * Creates an instance of AppSeenInfo class.
     */
    private AppSeenInfo() {
    }

    /**
     * Get the title property: title.
     * 
     * @return the title value.
     */
    public String title() {
        return this.title;
    }

    /**
     * Get the category property: category.
     * 
     * @return the category value.
     */
    public String category() {
        return this.category;
    }

    /**
     * Get the subCategory property: subCategory.
     * 
     * @return the subCategory value.
     */
    public String subCategory() {
        return this.subCategory;
    }

    /**
     * Get the risk property: risk.
     * 
     * @return the risk value.
     */
    public String risk() {
        return this.risk;
    }

    /**
     * Get the tag property: tag.
     * 
     * @return the tag value.
     */
    public String tag() {
        return this.tag;
    }

    /**
     * Get the technology property: technology.
     * 
     * @return the technology value.
     */
    public String technology() {
        return this.technology;
    }

    /**
     * Get the standardPorts property: standardPorts.
     * 
     * @return the standardPorts value.
     */
    public String standardPorts() {
        return this.standardPorts;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("title", this.title);
        jsonWriter.writeStringField("category", this.category);
        jsonWriter.writeStringField("subCategory", this.subCategory);
        jsonWriter.writeStringField("risk", this.risk);
        jsonWriter.writeStringField("tag", this.tag);
        jsonWriter.writeStringField("technology", this.technology);
        jsonWriter.writeStringField("standardPorts", this.standardPorts);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AppSeenInfo from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AppSeenInfo if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AppSeenInfo.
     */
    public static AppSeenInfo fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AppSeenInfo deserializedAppSeenInfo = new AppSeenInfo();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("title".equals(fieldName)) {
                    deserializedAppSeenInfo.title = reader.getString();
                } else if ("category".equals(fieldName)) {
                    deserializedAppSeenInfo.category = reader.getString();
                } else if ("subCategory".equals(fieldName)) {
                    deserializedAppSeenInfo.subCategory = reader.getString();
                } else if ("risk".equals(fieldName)) {
                    deserializedAppSeenInfo.risk = reader.getString();
                } else if ("tag".equals(fieldName)) {
                    deserializedAppSeenInfo.tag = reader.getString();
                } else if ("technology".equals(fieldName)) {
                    deserializedAppSeenInfo.technology = reader.getString();
                } else if ("standardPorts".equals(fieldName)) {
                    deserializedAppSeenInfo.standardPorts = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAppSeenInfo;
        });
    }
}
