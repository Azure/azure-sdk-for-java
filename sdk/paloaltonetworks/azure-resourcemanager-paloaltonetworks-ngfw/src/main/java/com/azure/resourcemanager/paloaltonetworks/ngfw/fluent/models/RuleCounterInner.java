// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.paloaltonetworks.ngfw.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.AppSeenData;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Rule counter.
 */
@Fluent
public final class RuleCounterInner implements JsonSerializable<RuleCounterInner> {
    /*
     * priority number
     */
    private String priority;

    /*
     * rule Stack Name
     */
    private String ruleStackName;

    /*
     * rule list name
     */
    private String ruleListName;

    /*
     * firewall name
     */
    private String firewallName;

    /*
     * rule name
     */
    private String ruleName;

    /*
     * hit count
     */
    private Integer hitCount;

    /*
     * apps seen
     */
    private AppSeenData appSeen;

    /*
     * timestamp of response
     */
    private OffsetDateTime timestamp;

    /*
     * timestamp of request
     */
    private OffsetDateTime requestTimestamp;

    /*
     * last updated timestamp
     */
    private OffsetDateTime lastUpdatedTimestamp;

    /**
     * Creates an instance of RuleCounterInner class.
     */
    public RuleCounterInner() {
    }

    /**
     * Get the priority property: priority number.
     * 
     * @return the priority value.
     */
    public String priority() {
        return this.priority;
    }

    /**
     * Set the priority property: priority number.
     * 
     * @param priority the priority value to set.
     * @return the RuleCounterInner object itself.
     */
    public RuleCounterInner withPriority(String priority) {
        this.priority = priority;
        return this;
    }

    /**
     * Get the ruleStackName property: rule Stack Name.
     * 
     * @return the ruleStackName value.
     */
    public String ruleStackName() {
        return this.ruleStackName;
    }

    /**
     * Set the ruleStackName property: rule Stack Name.
     * 
     * @param ruleStackName the ruleStackName value to set.
     * @return the RuleCounterInner object itself.
     */
    public RuleCounterInner withRuleStackName(String ruleStackName) {
        this.ruleStackName = ruleStackName;
        return this;
    }

    /**
     * Get the ruleListName property: rule list name.
     * 
     * @return the ruleListName value.
     */
    public String ruleListName() {
        return this.ruleListName;
    }

    /**
     * Set the ruleListName property: rule list name.
     * 
     * @param ruleListName the ruleListName value to set.
     * @return the RuleCounterInner object itself.
     */
    public RuleCounterInner withRuleListName(String ruleListName) {
        this.ruleListName = ruleListName;
        return this;
    }

    /**
     * Get the firewallName property: firewall name.
     * 
     * @return the firewallName value.
     */
    public String firewallName() {
        return this.firewallName;
    }

    /**
     * Set the firewallName property: firewall name.
     * 
     * @param firewallName the firewallName value to set.
     * @return the RuleCounterInner object itself.
     */
    public RuleCounterInner withFirewallName(String firewallName) {
        this.firewallName = firewallName;
        return this;
    }

    /**
     * Get the ruleName property: rule name.
     * 
     * @return the ruleName value.
     */
    public String ruleName() {
        return this.ruleName;
    }

    /**
     * Set the ruleName property: rule name.
     * 
     * @param ruleName the ruleName value to set.
     * @return the RuleCounterInner object itself.
     */
    public RuleCounterInner withRuleName(String ruleName) {
        this.ruleName = ruleName;
        return this;
    }

    /**
     * Get the hitCount property: hit count.
     * 
     * @return the hitCount value.
     */
    public Integer hitCount() {
        return this.hitCount;
    }

    /**
     * Set the hitCount property: hit count.
     * 
     * @param hitCount the hitCount value to set.
     * @return the RuleCounterInner object itself.
     */
    public RuleCounterInner withHitCount(Integer hitCount) {
        this.hitCount = hitCount;
        return this;
    }

    /**
     * Get the appSeen property: apps seen.
     * 
     * @return the appSeen value.
     */
    public AppSeenData appSeen() {
        return this.appSeen;
    }

    /**
     * Set the appSeen property: apps seen.
     * 
     * @param appSeen the appSeen value to set.
     * @return the RuleCounterInner object itself.
     */
    public RuleCounterInner withAppSeen(AppSeenData appSeen) {
        this.appSeen = appSeen;
        return this;
    }

    /**
     * Get the timestamp property: timestamp of response.
     * 
     * @return the timestamp value.
     */
    public OffsetDateTime timestamp() {
        return this.timestamp;
    }

    /**
     * Set the timestamp property: timestamp of response.
     * 
     * @param timestamp the timestamp value to set.
     * @return the RuleCounterInner object itself.
     */
    public RuleCounterInner withTimestamp(OffsetDateTime timestamp) {
        this.timestamp = timestamp;
        return this;
    }

    /**
     * Get the requestTimestamp property: timestamp of request.
     * 
     * @return the requestTimestamp value.
     */
    public OffsetDateTime requestTimestamp() {
        return this.requestTimestamp;
    }

    /**
     * Set the requestTimestamp property: timestamp of request.
     * 
     * @param requestTimestamp the requestTimestamp value to set.
     * @return the RuleCounterInner object itself.
     */
    public RuleCounterInner withRequestTimestamp(OffsetDateTime requestTimestamp) {
        this.requestTimestamp = requestTimestamp;
        return this;
    }

    /**
     * Get the lastUpdatedTimestamp property: last updated timestamp.
     * 
     * @return the lastUpdatedTimestamp value.
     */
    public OffsetDateTime lastUpdatedTimestamp() {
        return this.lastUpdatedTimestamp;
    }

    /**
     * Set the lastUpdatedTimestamp property: last updated timestamp.
     * 
     * @param lastUpdatedTimestamp the lastUpdatedTimestamp value to set.
     * @return the RuleCounterInner object itself.
     */
    public RuleCounterInner withLastUpdatedTimestamp(OffsetDateTime lastUpdatedTimestamp) {
        this.lastUpdatedTimestamp = lastUpdatedTimestamp;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (priority() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property priority in model RuleCounterInner"));
        }
        if (ruleName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property ruleName in model RuleCounterInner"));
        }
        if (appSeen() != null) {
            appSeen().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(RuleCounterInner.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("priority", this.priority);
        jsonWriter.writeStringField("ruleName", this.ruleName);
        jsonWriter.writeStringField("ruleStackName", this.ruleStackName);
        jsonWriter.writeStringField("ruleListName", this.ruleListName);
        jsonWriter.writeStringField("firewallName", this.firewallName);
        jsonWriter.writeNumberField("hitCount", this.hitCount);
        jsonWriter.writeJsonField("appSeen", this.appSeen);
        jsonWriter.writeStringField("timestamp",
            this.timestamp == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.timestamp));
        jsonWriter.writeStringField("requestTimestamp",
            this.requestTimestamp == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.requestTimestamp));
        jsonWriter.writeStringField("lastUpdatedTimestamp",
            this.lastUpdatedTimestamp == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.lastUpdatedTimestamp));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RuleCounterInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RuleCounterInner if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the RuleCounterInner.
     */
    public static RuleCounterInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RuleCounterInner deserializedRuleCounterInner = new RuleCounterInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("priority".equals(fieldName)) {
                    deserializedRuleCounterInner.priority = reader.getString();
                } else if ("ruleName".equals(fieldName)) {
                    deserializedRuleCounterInner.ruleName = reader.getString();
                } else if ("ruleStackName".equals(fieldName)) {
                    deserializedRuleCounterInner.ruleStackName = reader.getString();
                } else if ("ruleListName".equals(fieldName)) {
                    deserializedRuleCounterInner.ruleListName = reader.getString();
                } else if ("firewallName".equals(fieldName)) {
                    deserializedRuleCounterInner.firewallName = reader.getString();
                } else if ("hitCount".equals(fieldName)) {
                    deserializedRuleCounterInner.hitCount = reader.getNullable(JsonReader::getInt);
                } else if ("appSeen".equals(fieldName)) {
                    deserializedRuleCounterInner.appSeen = AppSeenData.fromJson(reader);
                } else if ("timestamp".equals(fieldName)) {
                    deserializedRuleCounterInner.timestamp = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("requestTimestamp".equals(fieldName)) {
                    deserializedRuleCounterInner.requestTimestamp = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("lastUpdatedTimestamp".equals(fieldName)) {
                    deserializedRuleCounterInner.lastUpdatedTimestamp = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRuleCounterInner;
        });
    }
}
