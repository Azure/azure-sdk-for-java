// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.paloaltonetworks.ngfw.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.paloaltonetworks.ngfw.PaloAltoNetworksNgfwManager;
import com.azure.resourcemanager.paloaltonetworks.ngfw.fluent.models.PrefixListGlobalRulestackResourceInner;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.PrefixListGlobalRulestackResource;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class PrefixListGlobalRulestacksCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"description\":\"qagnepzwakl\",\"prefixList\":[\"sbq\",\"qagwwrxaomz\"],\"etag\":\"glrrczez\",\"auditComment\":\"hltnjadhqoawjq\",\"provisioningState\":\"Succeeded\"},\"id\":\"ayfbpcm\",\"name\":\"plby\",\"type\":\"rueqthwm\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        PaloAltoNetworksNgfwManager manager = PaloAltoNetworksNgfwManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PrefixListGlobalRulestackResource response = manager.prefixListGlobalRulestacks()
            .createOrUpdate("dmxzjijpv", "aurkihcirlde",
                new PrefixListGlobalRulestackResourceInner().withDescription("rdcoxnbkkj")
                    .withPrefixList(Arrays.asList("urnnqbnqbpiz", "qltgrd"))
                    .withEtag("ypxrx")
                    .withAuditComment("fihwu"),
                com.azure.core.util.Context.NONE);

        Assertions.assertEquals("qagnepzwakl", response.description());
        Assertions.assertEquals("sbq", response.prefixList().get(0));
        Assertions.assertEquals("glrrczez", response.etag());
        Assertions.assertEquals("hltnjadhqoawjq", response.auditComment());
    }
}
