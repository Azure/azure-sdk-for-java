// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.paloaltonetworks.ngfw.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.paloaltonetworks.ngfw.PaloAltoNetworksNgfwManager;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.ActionEnum;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.BooleanEnum;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.DecryptionRuleTypeEnum;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.LocalRulesResource;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.StateEnum;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class LocalRulesGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"etag\":\"peuknijd\",\"ruleName\":\"y\",\"priority\":933409161,\"description\":\"ydjfb\",\"ruleState\":\"DISABLED\",\"source\":{\"cidrs\":[],\"countries\":[],\"feeds\":[],\"prefixLists\":[]},\"negateSource\":\"TRUE\",\"destination\":{\"cidrs\":[],\"countries\":[],\"feeds\":[],\"prefixLists\":[],\"fqdnLists\":[]},\"negateDestination\":\"FALSE\",\"applications\":[\"uflgbhgauacdixm\",\"ufr\"],\"category\":{\"urlCustom\":[],\"feeds\":[]},\"protocol\":\"jqgdkfnozoeo\",\"protocolPortList\":[\"jhvefgwbmqjchnt\",\"sf\",\"ymxbulpzealb\"],\"inboundInspectionCertificate\":\"kyojwyvfk\",\"auditComment\":\"tsu\",\"actionType\":\"DenyResetServer\",\"enableLogging\":\"DISABLED\",\"decryptionRuleType\":\"SSLInboundInspection\",\"tags\":[],\"provisioningState\":\"Canceled\"},\"id\":\"rsc\",\"name\":\"biwsd\",\"type\":\"npxqwodi\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        PaloAltoNetworksNgfwManager manager =
            PaloAltoNetworksNgfwManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        LocalRulesResource response =
            manager
                .localRules()
                .getWithResponse("rweft", "wqejpmvsse", "aepwamcxtcz", com.azure.core.util.Context.NONE)
                .getValue();

        Assertions.assertEquals("peuknijd", response.etag());
        Assertions.assertEquals("y", response.ruleName());
        Assertions.assertEquals("ydjfb", response.description());
        Assertions.assertEquals(StateEnum.DISABLED, response.ruleState());
        Assertions.assertEquals(BooleanEnum.TRUE, response.negateSource());
        Assertions.assertEquals(BooleanEnum.FALSE, response.negateDestination());
        Assertions.assertEquals("uflgbhgauacdixm", response.applications().get(0));
        Assertions.assertEquals("jqgdkfnozoeo", response.protocol());
        Assertions.assertEquals("jhvefgwbmqjchnt", response.protocolPortList().get(0));
        Assertions.assertEquals("kyojwyvfk", response.inboundInspectionCertificate());
        Assertions.assertEquals("tsu", response.auditComment());
        Assertions.assertEquals(ActionEnum.DENY_RESET_SERVER, response.actionType());
        Assertions.assertEquals(StateEnum.DISABLED, response.enableLogging());
        Assertions.assertEquals(DecryptionRuleTypeEnum.SSLINBOUND_INSPECTION, response.decryptionRuleType());
    }
}
