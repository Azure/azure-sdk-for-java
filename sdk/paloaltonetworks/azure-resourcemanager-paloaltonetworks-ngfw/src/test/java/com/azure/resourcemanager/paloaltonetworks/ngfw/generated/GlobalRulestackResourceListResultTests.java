// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.paloaltonetworks.ngfw.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.paloaltonetworks.ngfw.fluent.models.GlobalRulestackResourceInner;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.AzureResourceManagerManagedIdentityProperties;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.AzureResourceManagerUserAssignedIdentity;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.DefaultMode;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.GlobalRulestackResourceListResult;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.ManagedIdentityType;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.ScopeType;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.SecurityServices;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class GlobalRulestackResourceListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        GlobalRulestackResourceListResult model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"panEtag\":\"hq\",\"panLocation\":\"gjxpybczmehmt\",\"scope\":\"GLOBAL\",\"associatedSubscriptions\":[\"phrupidgsybbejhp\",\"oycmsxaobhdxbmt\",\"ioq\"],\"description\":\"ehtbm\",\"defaultMode\":\"NONE\",\"minAppIdVersion\":\"wnoi\",\"provisioningState\":\"Failed\",\"securityServices\":{\"vulnerabilityProfile\":\"xybqsoqij\",\"antiSpywareProfile\":\"dmbpazlobcufpdz\",\"antiVirusProfile\":\"btcqq\",\"urlFilteringProfile\":\"qglhq\",\"fileBlockingProfile\":\"ufo\",\"dnsSubscription\":\"jywif\",\"outboundUnTrustCertificate\":\"esaagdfm\",\"outboundTrustCertificate\":\"zlhjxrifkwmrvkt\"}},\"location\":\"izntocipao\",\"identity\":{\"tenantId\":\"psqucmpoyf\",\"principalId\":\"fogknygjofjdde\",\"type\":\"None\",\"userAssignedIdentities\":{\"hs\":{\"clientId\":\"upewnwreitjzy\",\"principalId\":\"usarhmofc\"},\"arcryuanzwuxzdxt\":{\"clientId\":\"urkdtmlx\",\"principalId\":\"kuksjtxukcdm\"},\"rqobmtuk\":{\"clientId\":\"rlhm\",\"principalId\":\"fp\"}}},\"id\":\"ryrtihfxtijbpzv\",\"name\":\"nwzsymg\",\"type\":\"zufcyzkohdbi\"},{\"properties\":{\"panEtag\":\"nufhf\",\"panLocation\":\"jysagith\",\"scope\":\"LOCAL\",\"associatedSubscriptions\":[\"ifpikxwczby\",\"cnpqxuhivyqniwby\",\"rkxvdum\"],\"description\":\"rtfw\",\"defaultMode\":\"IPS\",\"minAppIdVersion\":\"gaudcc\",\"provisioningState\":\"Accepted\",\"securityServices\":{\"vulnerabilityProfile\":\"cnyejhkryhtnapcz\",\"antiSpywareProfile\":\"okjye\",\"antiVirusProfile\":\"kvnipjoxz\",\"urlFilteringProfile\":\"chgejspodm\",\"fileBlockingProfile\":\"lzydehojwyahux\",\"dnsSubscription\":\"pmqnja\",\"outboundUnTrustCertificate\":\"ixjsprozvcputeg\",\"outboundTrustCertificate\":\"wmfdatscmdvpjhul\"}},\"location\":\"uuvmkjozkrwfnd\",\"identity\":{\"tenantId\":\"jpslwejd\",\"principalId\":\"wryoqpsoacc\",\"type\":\"SystemAssigned\",\"userAssignedIdentities\":{\"xpaojakhmsbz\":{\"clientId\":\"ljlahbcryf\",\"principalId\":\"fdosyg\"}}},\"id\":\"crzevdphlx\",\"name\":\"olthqtrgqjbp\",\"type\":\"zfsinzgvf\"},{\"properties\":{\"panEtag\":\"rwzoxxjtfelluwf\",\"panLocation\":\"tonpe\",\"scope\":\"GLOBAL\",\"associatedSubscriptions\":[\"jlxofpdvhpfxxyp\",\"ninmayhuyb\",\"kpode\"],\"description\":\"oginuvamiheognar\",\"defaultMode\":\"NONE\",\"minAppIdVersion\":\"heotusiv\",\"provisioningState\":\"Deleting\",\"securityServices\":{\"vulnerabilityProfile\":\"iqihn\",\"antiSpywareProfile\":\"ngbwjz\",\"antiVirusProfile\":\"fygxgispemvtzfk\",\"urlFilteringProfile\":\"ubljofxqe\",\"fileBlockingProfile\":\"jaeq\",\"dnsSubscription\":\"qjbasvms\",\"outboundUnTrustCertificate\":\"qulngsntnbybkzgc\",\"outboundTrustCertificate\":\"wclxxwrl\"}},\"location\":\"douskcqvkocrcjdk\",\"identity\":{\"tenantId\":\"hxbnjbiksqrg\",\"principalId\":\"sainqpjwnzl\",\"type\":\"None\",\"userAssignedIdentities\":{\"yqduujit\":{\"clientId\":\"pee\",\"principalId\":\"mgxsab\"},\"pdappds\":{\"clientId\":\"czdzev\",\"principalId\":\"hkr\"},\"tmrldhugjzzdatq\":{\"clientId\":\"kvwrwjfeu\",\"principalId\":\"hutje\"}}},\"id\":\"oc\",\"name\":\"geablgphuticndvk\",\"type\":\"ozwyiftyhxhuro\"}],\"nextLink\":\"tyxolniwpwc\"}")
            .toObject(GlobalRulestackResourceListResult.class);
        Assertions.assertEquals("izntocipao", model.value().get(0).location());
        Assertions.assertEquals(ManagedIdentityType.NONE, model.value().get(0).identity().type());
        Assertions.assertEquals("upewnwreitjzy",
            model.value().get(0).identity().userAssignedIdentities().get("hs").clientId());
        Assertions.assertEquals("usarhmofc",
            model.value().get(0).identity().userAssignedIdentities().get("hs").principalId());
        Assertions.assertEquals("hq", model.value().get(0).panEtag());
        Assertions.assertEquals("gjxpybczmehmt", model.value().get(0).panLocation());
        Assertions.assertEquals(ScopeType.GLOBAL, model.value().get(0).scope());
        Assertions.assertEquals("phrupidgsybbejhp", model.value().get(0).associatedSubscriptions().get(0));
        Assertions.assertEquals("ehtbm", model.value().get(0).description());
        Assertions.assertEquals(DefaultMode.NONE, model.value().get(0).defaultMode());
        Assertions.assertEquals("wnoi", model.value().get(0).minAppIdVersion());
        Assertions.assertEquals("xybqsoqij", model.value().get(0).securityServices().vulnerabilityProfile());
        Assertions.assertEquals("dmbpazlobcufpdz", model.value().get(0).securityServices().antiSpywareProfile());
        Assertions.assertEquals("btcqq", model.value().get(0).securityServices().antiVirusProfile());
        Assertions.assertEquals("qglhq", model.value().get(0).securityServices().urlFilteringProfile());
        Assertions.assertEquals("ufo", model.value().get(0).securityServices().fileBlockingProfile());
        Assertions.assertEquals("jywif", model.value().get(0).securityServices().dnsSubscription());
        Assertions.assertEquals("esaagdfm", model.value().get(0).securityServices().outboundUnTrustCertificate());
        Assertions.assertEquals("zlhjxrifkwmrvkt", model.value().get(0).securityServices().outboundTrustCertificate());
        Assertions.assertEquals("tyxolniwpwc", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        GlobalRulestackResourceListResult model
            = new GlobalRulestackResourceListResult()
                .withValue(
                    Arrays
                        .asList(
                            new GlobalRulestackResourceInner()
                                .withLocation(
                                    "izntocipao")
                                .withIdentity(
                                    new AzureResourceManagerManagedIdentityProperties()
                                        .withType(ManagedIdentityType.NONE).withUserAssignedIdentities(
                                            mapOf("hs",
                                                new AzureResourceManagerUserAssignedIdentity()
                                                    .withClientId("upewnwreitjzy").withPrincipalId("usarhmofc"),
                                                "arcryuanzwuxzdxt",
                                                new AzureResourceManagerUserAssignedIdentity()
                                                    .withClientId("urkdtmlx").withPrincipalId("kuksjtxukcdm"),
                                                "rqobmtuk",
                                                new AzureResourceManagerUserAssignedIdentity().withClientId("rlhm")
                                                    .withPrincipalId("fp"))))
                                .withPanEtag("hq").withPanLocation("gjxpybczmehmt").withScope(ScopeType.GLOBAL)
                                .withAssociatedSubscriptions(
                                    Arrays.asList("phrupidgsybbejhp", "oycmsxaobhdxbmt", "ioq"))
                                .withDescription("ehtbm").withDefaultMode(
                                    DefaultMode.NONE)
                                .withMinAppIdVersion("wnoi")
                                .withSecurityServices(new SecurityServices()
                                    .withVulnerabilityProfile("xybqsoqij").withAntiSpywareProfile("dmbpazlobcufpdz")
                                    .withAntiVirusProfile("btcqq").withUrlFilteringProfile("qglhq")
                                    .withFileBlockingProfile("ufo").withDnsSubscription("jywif")
                                    .withOutboundUnTrustCertificate("esaagdfm").withOutboundTrustCertificate(
                                        "zlhjxrifkwmrvkt")),
                            new GlobalRulestackResourceInner().withLocation("uuvmkjozkrwfnd")
                                .withIdentity(new AzureResourceManagerManagedIdentityProperties()
                                    .withType(ManagedIdentityType.SYSTEM_ASSIGNED)
                                    .withUserAssignedIdentities(mapOf("xpaojakhmsbz",
                                        new AzureResourceManagerUserAssignedIdentity().withClientId("ljlahbcryf")
                                            .withPrincipalId("fdosyg"))))
                                .withPanEtag("nufhf").withPanLocation("jysagith").withScope(ScopeType.LOCAL)
                                .withAssociatedSubscriptions(
                                    Arrays.asList("ifpikxwczby", "cnpqxuhivyqniwby", "rkxvdum"))
                                .withDescription("rtfw").withDefaultMode(DefaultMode.IPS).withMinAppIdVersion("gaudcc")
                                .withSecurityServices(
                                    new SecurityServices()
                                        .withVulnerabilityProfile("cnyejhkryhtnapcz").withAntiSpywareProfile("okjye")
                                        .withAntiVirusProfile("kvnipjoxz").withUrlFilteringProfile("chgejspodm")
                                        .withFileBlockingProfile("lzydehojwyahux").withDnsSubscription("pmqnja")
                                        .withOutboundUnTrustCertificate(
                                            "ixjsprozvcputeg")
                                        .withOutboundTrustCertificate("wmfdatscmdvpjhul")),
                            new GlobalRulestackResourceInner().withLocation("douskcqvkocrcjdk")
                                .withIdentity(new AzureResourceManagerManagedIdentityProperties()
                                    .withType(ManagedIdentityType.NONE)
                                    .withUserAssignedIdentities(mapOf("yqduujit",
                                        new AzureResourceManagerUserAssignedIdentity().withClientId("pee")
                                            .withPrincipalId("mgxsab"),
                                        "pdappds",
                                        new AzureResourceManagerUserAssignedIdentity().withClientId("czdzev")
                                            .withPrincipalId("hkr"),
                                        "tmrldhugjzzdatq",
                                        new AzureResourceManagerUserAssignedIdentity().withClientId("kvwrwjfeu")
                                            .withPrincipalId("hutje"))))
                                .withPanEtag("rwzoxxjtfelluwf").withPanLocation("tonpe").withScope(ScopeType.GLOBAL)
                                .withAssociatedSubscriptions(Arrays.asList("jlxofpdvhpfxxyp", "ninmayhuyb", "kpode"))
                                .withDescription("oginuvamiheognar").withDefaultMode(DefaultMode.NONE)
                                .withMinAppIdVersion("heotusiv")
                                .withSecurityServices(new SecurityServices().withVulnerabilityProfile("iqihn")
                                    .withAntiSpywareProfile("ngbwjz").withAntiVirusProfile("fygxgispemvtzfk")
                                    .withUrlFilteringProfile("ubljofxqe").withFileBlockingProfile("jaeq")
                                    .withDnsSubscription("qjbasvms").withOutboundUnTrustCertificate("qulngsntnbybkzgc")
                                    .withOutboundTrustCertificate("wclxxwrl"))))
                .withNextLink("tyxolniwpwc");
        model = BinaryData.fromObject(model).toObject(GlobalRulestackResourceListResult.class);
        Assertions.assertEquals("izntocipao", model.value().get(0).location());
        Assertions.assertEquals(ManagedIdentityType.NONE, model.value().get(0).identity().type());
        Assertions.assertEquals("upewnwreitjzy",
            model.value().get(0).identity().userAssignedIdentities().get("hs").clientId());
        Assertions.assertEquals("usarhmofc",
            model.value().get(0).identity().userAssignedIdentities().get("hs").principalId());
        Assertions.assertEquals("hq", model.value().get(0).panEtag());
        Assertions.assertEquals("gjxpybczmehmt", model.value().get(0).panLocation());
        Assertions.assertEquals(ScopeType.GLOBAL, model.value().get(0).scope());
        Assertions.assertEquals("phrupidgsybbejhp", model.value().get(0).associatedSubscriptions().get(0));
        Assertions.assertEquals("ehtbm", model.value().get(0).description());
        Assertions.assertEquals(DefaultMode.NONE, model.value().get(0).defaultMode());
        Assertions.assertEquals("wnoi", model.value().get(0).minAppIdVersion());
        Assertions.assertEquals("xybqsoqij", model.value().get(0).securityServices().vulnerabilityProfile());
        Assertions.assertEquals("dmbpazlobcufpdz", model.value().get(0).securityServices().antiSpywareProfile());
        Assertions.assertEquals("btcqq", model.value().get(0).securityServices().antiVirusProfile());
        Assertions.assertEquals("qglhq", model.value().get(0).securityServices().urlFilteringProfile());
        Assertions.assertEquals("ufo", model.value().get(0).securityServices().fileBlockingProfile());
        Assertions.assertEquals("jywif", model.value().get(0).securityServices().dnsSubscription());
        Assertions.assertEquals("esaagdfm", model.value().get(0).securityServices().outboundUnTrustCertificate());
        Assertions.assertEquals("zlhjxrifkwmrvkt", model.value().get(0).securityServices().outboundTrustCertificate());
        Assertions.assertEquals("tyxolniwpwc", model.nextLink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
