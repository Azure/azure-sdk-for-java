// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.paloaltonetworks.ngfw.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.paloaltonetworks.ngfw.fluent.models.GlobalRulestackResourceInner;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.AzureResourceManagerManagedIdentityProperties;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.AzureResourceManagerUserAssignedIdentity;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.DefaultMode;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.ManagedIdentityType;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.ScopeType;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.SecurityServices;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class GlobalRulestackResourceInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        GlobalRulestackResourceInner model = BinaryData.fromString(
            "{\"properties\":{\"panEtag\":\"jfkgiawxk\",\"panLocation\":\"ypl\",\"scope\":\"LOCAL\",\"associatedSubscriptions\":[\"syyp\"],\"description\":\"dhsgcba\",\"defaultMode\":\"IPS\",\"minAppIdVersion\":\"jkot\",\"provisioningState\":\"Accepted\",\"securityServices\":{\"vulnerabilityProfile\":\"ulzndlikwyqk\",\"antiSpywareProfile\":\"gibma\",\"antiVirusProfile\":\"akeqs\",\"urlFilteringProfile\":\"yb\",\"fileBlockingProfile\":\"qedqytbciqfoufl\",\"dnsSubscription\":\"nkzsmodmglou\",\"outboundUnTrustCertificate\":\"b\",\"outboundTrustCertificate\":\"tmut\"}},\"location\":\"uqktap\",\"identity\":{\"tenantId\":\"gcue\",\"principalId\":\"umkdosvqwhbmd\",\"type\":\"SystemAssigned,UserAssigned\",\"userAssignedIdentities\":{\"pbhtqqrolfpfpsa\":{\"clientId\":\"ddgmb\",\"principalId\":\"ex\"},\"erkujys\":{\"clientId\":\"bquxigjy\",\"principalId\":\"zjaoyfhrtxil\"},\"cpr\":{\"clientId\":\"eju\",\"principalId\":\"qawrlyxwj\"}}},\"id\":\"wbxgjvt\",\"name\":\"vpys\",\"type\":\"zdn\"}")
            .toObject(GlobalRulestackResourceInner.class);
        Assertions.assertEquals("uqktap", model.location());
        Assertions.assertEquals(ManagedIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED, model.identity().type());
        Assertions.assertEquals("ddgmb", model.identity().userAssignedIdentities().get("pbhtqqrolfpfpsa").clientId());
        Assertions.assertEquals("ex", model.identity().userAssignedIdentities().get("pbhtqqrolfpfpsa").principalId());
        Assertions.assertEquals("jfkgiawxk", model.panEtag());
        Assertions.assertEquals("ypl", model.panLocation());
        Assertions.assertEquals(ScopeType.LOCAL, model.scope());
        Assertions.assertEquals("syyp", model.associatedSubscriptions().get(0));
        Assertions.assertEquals("dhsgcba", model.description());
        Assertions.assertEquals(DefaultMode.IPS, model.defaultMode());
        Assertions.assertEquals("jkot", model.minAppIdVersion());
        Assertions.assertEquals("ulzndlikwyqk", model.securityServices().vulnerabilityProfile());
        Assertions.assertEquals("gibma", model.securityServices().antiSpywareProfile());
        Assertions.assertEquals("akeqs", model.securityServices().antiVirusProfile());
        Assertions.assertEquals("yb", model.securityServices().urlFilteringProfile());
        Assertions.assertEquals("qedqytbciqfoufl", model.securityServices().fileBlockingProfile());
        Assertions.assertEquals("nkzsmodmglou", model.securityServices().dnsSubscription());
        Assertions.assertEquals("b", model.securityServices().outboundUnTrustCertificate());
        Assertions.assertEquals("tmut", model.securityServices().outboundTrustCertificate());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        GlobalRulestackResourceInner model = new GlobalRulestackResourceInner().withLocation("uqktap")
            .withIdentity(new AzureResourceManagerManagedIdentityProperties()
                .withType(ManagedIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED)
                .withUserAssignedIdentities(mapOf("pbhtqqrolfpfpsa",
                    new AzureResourceManagerUserAssignedIdentity().withClientId("ddgmb").withPrincipalId("ex"),
                    "erkujys",
                    new AzureResourceManagerUserAssignedIdentity().withClientId("bquxigjy")
                        .withPrincipalId("zjaoyfhrtxil"),
                    "cpr",
                    new AzureResourceManagerUserAssignedIdentity().withClientId("eju").withPrincipalId("qawrlyxwj"))))
            .withPanEtag("jfkgiawxk").withPanLocation("ypl").withScope(ScopeType.LOCAL)
            .withAssociatedSubscriptions(Arrays.asList("syyp")).withDescription("dhsgcba")
            .withDefaultMode(DefaultMode.IPS).withMinAppIdVersion("jkot")
            .withSecurityServices(new SecurityServices().withVulnerabilityProfile("ulzndlikwyqk")
                .withAntiSpywareProfile("gibma").withAntiVirusProfile("akeqs").withUrlFilteringProfile("yb")
                .withFileBlockingProfile("qedqytbciqfoufl").withDnsSubscription("nkzsmodmglou")
                .withOutboundUnTrustCertificate("b").withOutboundTrustCertificate("tmut"));
        model = BinaryData.fromObject(model).toObject(GlobalRulestackResourceInner.class);
        Assertions.assertEquals("uqktap", model.location());
        Assertions.assertEquals(ManagedIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED, model.identity().type());
        Assertions.assertEquals("ddgmb", model.identity().userAssignedIdentities().get("pbhtqqrolfpfpsa").clientId());
        Assertions.assertEquals("ex", model.identity().userAssignedIdentities().get("pbhtqqrolfpfpsa").principalId());
        Assertions.assertEquals("jfkgiawxk", model.panEtag());
        Assertions.assertEquals("ypl", model.panLocation());
        Assertions.assertEquals(ScopeType.LOCAL, model.scope());
        Assertions.assertEquals("syyp", model.associatedSubscriptions().get(0));
        Assertions.assertEquals("dhsgcba", model.description());
        Assertions.assertEquals(DefaultMode.IPS, model.defaultMode());
        Assertions.assertEquals("jkot", model.minAppIdVersion());
        Assertions.assertEquals("ulzndlikwyqk", model.securityServices().vulnerabilityProfile());
        Assertions.assertEquals("gibma", model.securityServices().antiSpywareProfile());
        Assertions.assertEquals("akeqs", model.securityServices().antiVirusProfile());
        Assertions.assertEquals("yb", model.securityServices().urlFilteringProfile());
        Assertions.assertEquals("qedqytbciqfoufl", model.securityServices().fileBlockingProfile());
        Assertions.assertEquals("nkzsmodmglou", model.securityServices().dnsSubscription());
        Assertions.assertEquals("b", model.securityServices().outboundUnTrustCertificate());
        Assertions.assertEquals("tmut", model.securityServices().outboundTrustCertificate());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
