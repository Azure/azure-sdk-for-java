// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.paloaltonetworks.ngfw.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.paloaltonetworks.ngfw.fluent.models.GlobalRulestackResourceInner;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.AzureResourceManagerManagedIdentityProperties;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.AzureResourceManagerUserAssignedIdentity;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.DefaultMode;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.ManagedIdentityType;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.ScopeType;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.SecurityServices;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class GlobalRulestackResourceInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        GlobalRulestackResourceInner model = BinaryData.fromString(
            "{\"properties\":{\"panEtag\":\"ijbpzvgnwzsymgl\",\"panLocation\":\"fcyzkohdbihanufh\",\"scope\":\"LOCAL\",\"associatedSubscriptions\":[\"s\"],\"description\":\"ithxqhabifpi\",\"defaultMode\":\"IPS\",\"minAppIdVersion\":\"zb\",\"provisioningState\":\"NotSpecified\",\"securityServices\":{\"vulnerabilityProfile\":\"q\",\"antiSpywareProfile\":\"hiv\",\"antiVirusProfile\":\"n\",\"urlFilteringProfile\":\"b\",\"fileBlockingProfile\":\"rkxvdum\",\"dnsSubscription\":\"rtfw\",\"outboundUnTrustCertificate\":\"k\",\"outboundTrustCertificate\":\"audccsnhs\"}},\"location\":\"cnyejhkryhtnapcz\",\"identity\":{\"tenantId\":\"kjyemkk\",\"principalId\":\"ipjoxzjnchgejs\",\"type\":\"UserAssigned\",\"userAssignedIdentities\":{\"wyahuxinpmqnja\":{\"clientId\":\"ilzyd\",\"principalId\":\"o\"},\"uuvmkjozkrwfnd\":{\"clientId\":\"ixjsprozvcputeg\",\"principalId\":\"wmfdatscmdvpjhul\"},\"akl\":{\"clientId\":\"djpslw\",\"principalId\":\"dpvwryoqpsoaccta\"}}},\"id\":\"ahbc\",\"name\":\"yffdfdos\",\"type\":\"gexpaojakhmsbz\"}")
            .toObject(GlobalRulestackResourceInner.class);
        Assertions.assertEquals("cnyejhkryhtnapcz", model.location());
        Assertions.assertEquals(ManagedIdentityType.USER_ASSIGNED, model.identity().type());
        Assertions.assertEquals("ilzyd", model.identity().userAssignedIdentities().get("wyahuxinpmqnja").clientId());
        Assertions.assertEquals("o", model.identity().userAssignedIdentities().get("wyahuxinpmqnja").principalId());
        Assertions.assertEquals("ijbpzvgnwzsymgl", model.panEtag());
        Assertions.assertEquals("fcyzkohdbihanufh", model.panLocation());
        Assertions.assertEquals(ScopeType.LOCAL, model.scope());
        Assertions.assertEquals("s", model.associatedSubscriptions().get(0));
        Assertions.assertEquals("ithxqhabifpi", model.description());
        Assertions.assertEquals(DefaultMode.IPS, model.defaultMode());
        Assertions.assertEquals("zb", model.minAppIdVersion());
        Assertions.assertEquals("q", model.securityServices().vulnerabilityProfile());
        Assertions.assertEquals("hiv", model.securityServices().antiSpywareProfile());
        Assertions.assertEquals("n", model.securityServices().antiVirusProfile());
        Assertions.assertEquals("b", model.securityServices().urlFilteringProfile());
        Assertions.assertEquals("rkxvdum", model.securityServices().fileBlockingProfile());
        Assertions.assertEquals("rtfw", model.securityServices().dnsSubscription());
        Assertions.assertEquals("k", model.securityServices().outboundUnTrustCertificate());
        Assertions.assertEquals("audccsnhs", model.securityServices().outboundTrustCertificate());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        GlobalRulestackResourceInner model = new GlobalRulestackResourceInner().withLocation("cnyejhkryhtnapcz")
            .withIdentity(
                new AzureResourceManagerManagedIdentityProperties().withType(ManagedIdentityType.USER_ASSIGNED)
                    .withUserAssignedIdentities(mapOf("wyahuxinpmqnja",
                        new AzureResourceManagerUserAssignedIdentity().withClientId("ilzyd").withPrincipalId("o"),
                        "uuvmkjozkrwfnd",
                        new AzureResourceManagerUserAssignedIdentity().withClientId("ixjsprozvcputeg")
                            .withPrincipalId("wmfdatscmdvpjhul"),
                        "akl",
                        new AzureResourceManagerUserAssignedIdentity().withClientId("djpslw")
                            .withPrincipalId("dpvwryoqpsoaccta"))))
            .withPanEtag("ijbpzvgnwzsymgl")
            .withPanLocation("fcyzkohdbihanufh")
            .withScope(ScopeType.LOCAL)
            .withAssociatedSubscriptions(Arrays.asList("s"))
            .withDescription("ithxqhabifpi")
            .withDefaultMode(DefaultMode.IPS)
            .withMinAppIdVersion("zb")
            .withSecurityServices(new SecurityServices().withVulnerabilityProfile("q")
                .withAntiSpywareProfile("hiv")
                .withAntiVirusProfile("n")
                .withUrlFilteringProfile("b")
                .withFileBlockingProfile("rkxvdum")
                .withDnsSubscription("rtfw")
                .withOutboundUnTrustCertificate("k")
                .withOutboundTrustCertificate("audccsnhs"));
        model = BinaryData.fromObject(model).toObject(GlobalRulestackResourceInner.class);
        Assertions.assertEquals("cnyejhkryhtnapcz", model.location());
        Assertions.assertEquals(ManagedIdentityType.USER_ASSIGNED, model.identity().type());
        Assertions.assertEquals("ilzyd", model.identity().userAssignedIdentities().get("wyahuxinpmqnja").clientId());
        Assertions.assertEquals("o", model.identity().userAssignedIdentities().get("wyahuxinpmqnja").principalId());
        Assertions.assertEquals("ijbpzvgnwzsymgl", model.panEtag());
        Assertions.assertEquals("fcyzkohdbihanufh", model.panLocation());
        Assertions.assertEquals(ScopeType.LOCAL, model.scope());
        Assertions.assertEquals("s", model.associatedSubscriptions().get(0));
        Assertions.assertEquals("ithxqhabifpi", model.description());
        Assertions.assertEquals(DefaultMode.IPS, model.defaultMode());
        Assertions.assertEquals("zb", model.minAppIdVersion());
        Assertions.assertEquals("q", model.securityServices().vulnerabilityProfile());
        Assertions.assertEquals("hiv", model.securityServices().antiSpywareProfile());
        Assertions.assertEquals("n", model.securityServices().antiVirusProfile());
        Assertions.assertEquals("b", model.securityServices().urlFilteringProfile());
        Assertions.assertEquals("rkxvdum", model.securityServices().fileBlockingProfile());
        Assertions.assertEquals("rtfw", model.securityServices().dnsSubscription());
        Assertions.assertEquals("k", model.securityServices().outboundUnTrustCertificate());
        Assertions.assertEquals("audccsnhs", model.securityServices().outboundTrustCertificate());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
