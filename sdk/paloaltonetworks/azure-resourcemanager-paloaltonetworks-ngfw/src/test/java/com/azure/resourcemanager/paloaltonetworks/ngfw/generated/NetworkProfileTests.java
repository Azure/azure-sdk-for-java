// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.paloaltonetworks.ngfw.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.EgressNat;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.IpAddress;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.IpAddressSpace;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.NetworkProfile;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.NetworkType;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.VnetConfiguration;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.VwanConfiguration;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class NetworkProfileTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        NetworkProfile model = BinaryData.fromString(
            "{\"vnetConfiguration\":{\"vnet\":{\"resourceId\":\"phvwauyqncygu\",\"addressSpace\":\"vipmdscwxqupevzh\"},\"trustSubnet\":{\"resourceId\":\"totxhojujb\",\"addressSpace\":\"elmcuvhixbjxyfw\"},\"unTrustSubnet\":{\"resourceId\":\"lrcoolsttpki\",\"addressSpace\":\"kbnujr\"},\"ipOfTrustSubnetForUdr\":{\"resourceId\":\"tylbfpncurdoiw\",\"address\":\"thtywub\"}},\"vwanConfiguration\":{\"networkVirtualApplianceId\":\"ihwqknfdntwjchr\",\"vHub\":{\"resourceId\":\"oihxumwctondzjlu\",\"addressSpace\":\"fdlwg\"},\"trustSubnet\":{\"resourceId\":\"sb\",\"addressSpace\":\"ovvtgseinqfiu\"},\"unTrustSubnet\":{\"resourceId\":\"knpirgnepttwq\",\"addressSpace\":\"niffcdmqnroj\"},\"ipOfTrustSubnetForUdr\":{\"resourceId\":\"jnkrxf\",\"address\":\"dhcrati\"}},\"networkType\":\"VWAN\",\"publicIps\":[{\"resourceId\":\"nasx\",\"address\":\"tozqyzhftwesgo\"},{\"resourceId\":\"zhonnxkrlgnyhmo\",\"address\":\"xkk\"},{\"resourceId\":\"h\",\"address\":\"gh\"}],\"enableEgressNat\":\"DISABLED\",\"egressNatIp\":[{\"resourceId\":\"qxvcxgfrpdsofb\",\"address\":\"rnsvbuswd\"},{\"resourceId\":\"yybyc\",\"address\":\"nvjsrtkfa\"}],\"trustedRanges\":[\"pqgik\",\"zirtxdyuxzejntps\",\"wgioilqukry\",\"xtqmieoxor\"],\"privateSourceNatRulesDestination\":[\"f\",\"yaomtb\",\"hhavgrvkffovjz\"]}")
            .toObject(NetworkProfile.class);
        Assertions.assertEquals("phvwauyqncygu", model.vnetConfiguration().vnet().resourceId());
        Assertions.assertEquals("vipmdscwxqupevzh", model.vnetConfiguration().vnet().addressSpace());
        Assertions.assertEquals("totxhojujb", model.vnetConfiguration().trustSubnet().resourceId());
        Assertions.assertEquals("elmcuvhixbjxyfw", model.vnetConfiguration().trustSubnet().addressSpace());
        Assertions.assertEquals("lrcoolsttpki", model.vnetConfiguration().unTrustSubnet().resourceId());
        Assertions.assertEquals("kbnujr", model.vnetConfiguration().unTrustSubnet().addressSpace());
        Assertions.assertEquals("tylbfpncurdoiw", model.vnetConfiguration().ipOfTrustSubnetForUdr().resourceId());
        Assertions.assertEquals("thtywub", model.vnetConfiguration().ipOfTrustSubnetForUdr().address());
        Assertions.assertEquals("ihwqknfdntwjchr", model.vwanConfiguration().networkVirtualApplianceId());
        Assertions.assertEquals("oihxumwctondzjlu", model.vwanConfiguration().vHub().resourceId());
        Assertions.assertEquals("fdlwg", model.vwanConfiguration().vHub().addressSpace());
        Assertions.assertEquals("sb", model.vwanConfiguration().trustSubnet().resourceId());
        Assertions.assertEquals("ovvtgseinqfiu", model.vwanConfiguration().trustSubnet().addressSpace());
        Assertions.assertEquals("knpirgnepttwq", model.vwanConfiguration().unTrustSubnet().resourceId());
        Assertions.assertEquals("niffcdmqnroj", model.vwanConfiguration().unTrustSubnet().addressSpace());
        Assertions.assertEquals("jnkrxf", model.vwanConfiguration().ipOfTrustSubnetForUdr().resourceId());
        Assertions.assertEquals("dhcrati", model.vwanConfiguration().ipOfTrustSubnetForUdr().address());
        Assertions.assertEquals(NetworkType.VWAN, model.networkType());
        Assertions.assertEquals("nasx", model.publicIps().get(0).resourceId());
        Assertions.assertEquals("tozqyzhftwesgo", model.publicIps().get(0).address());
        Assertions.assertEquals(EgressNat.DISABLED, model.enableEgressNat());
        Assertions.assertEquals("qxvcxgfrpdsofb", model.egressNatIp().get(0).resourceId());
        Assertions.assertEquals("rnsvbuswd", model.egressNatIp().get(0).address());
        Assertions.assertEquals("pqgik", model.trustedRanges().get(0));
        Assertions.assertEquals("f", model.privateSourceNatRulesDestination().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        NetworkProfile model
            = new NetworkProfile()
                .withVnetConfiguration(new VnetConfiguration()
                    .withVnet(new IpAddressSpace().withResourceId("phvwauyqncygu").withAddressSpace("vipmdscwxqupevzh"))
                    .withTrustSubnet(
                        new IpAddressSpace().withResourceId("totxhojujb").withAddressSpace("elmcuvhixbjxyfw"))
                    .withUnTrustSubnet(new IpAddressSpace().withResourceId("lrcoolsttpki").withAddressSpace("kbnujr"))
                    .withIpOfTrustSubnetForUdr(new IpAddress().withResourceId("tylbfpncurdoiw").withAddress("thtywub")))
                .withVwanConfiguration(new VwanConfiguration().withNetworkVirtualApplianceId("ihwqknfdntwjchr")
                    .withVHub(new IpAddressSpace().withResourceId("oihxumwctondzjlu").withAddressSpace("fdlwg"))
                    .withTrustSubnet(new IpAddressSpace().withResourceId("sb").withAddressSpace("ovvtgseinqfiu"))
                    .withUnTrustSubnet(
                        new IpAddressSpace().withResourceId("knpirgnepttwq").withAddressSpace("niffcdmqnroj"))
                    .withIpOfTrustSubnetForUdr(new IpAddress().withResourceId("jnkrxf").withAddress("dhcrati")))
                .withNetworkType(NetworkType.VWAN)
                .withPublicIps(Arrays.asList(new IpAddress().withResourceId("nasx").withAddress("tozqyzhftwesgo"),
                    new IpAddress().withResourceId("zhonnxkrlgnyhmo").withAddress("xkk"),
                    new IpAddress().withResourceId("h").withAddress("gh")))
                .withEnableEgressNat(EgressNat.DISABLED)
                .withEgressNatIp(
                    Arrays.asList(new IpAddress().withResourceId("qxvcxgfrpdsofb").withAddress("rnsvbuswd"),
                        new IpAddress().withResourceId("yybyc").withAddress("nvjsrtkfa")))
                .withTrustedRanges(Arrays.asList("pqgik", "zirtxdyuxzejntps", "wgioilqukry", "xtqmieoxor"))
                .withPrivateSourceNatRulesDestination(Arrays.asList("f", "yaomtb", "hhavgrvkffovjz"));
        model = BinaryData.fromObject(model).toObject(NetworkProfile.class);
        Assertions.assertEquals("phvwauyqncygu", model.vnetConfiguration().vnet().resourceId());
        Assertions.assertEquals("vipmdscwxqupevzh", model.vnetConfiguration().vnet().addressSpace());
        Assertions.assertEquals("totxhojujb", model.vnetConfiguration().trustSubnet().resourceId());
        Assertions.assertEquals("elmcuvhixbjxyfw", model.vnetConfiguration().trustSubnet().addressSpace());
        Assertions.assertEquals("lrcoolsttpki", model.vnetConfiguration().unTrustSubnet().resourceId());
        Assertions.assertEquals("kbnujr", model.vnetConfiguration().unTrustSubnet().addressSpace());
        Assertions.assertEquals("tylbfpncurdoiw", model.vnetConfiguration().ipOfTrustSubnetForUdr().resourceId());
        Assertions.assertEquals("thtywub", model.vnetConfiguration().ipOfTrustSubnetForUdr().address());
        Assertions.assertEquals("ihwqknfdntwjchr", model.vwanConfiguration().networkVirtualApplianceId());
        Assertions.assertEquals("oihxumwctondzjlu", model.vwanConfiguration().vHub().resourceId());
        Assertions.assertEquals("fdlwg", model.vwanConfiguration().vHub().addressSpace());
        Assertions.assertEquals("sb", model.vwanConfiguration().trustSubnet().resourceId());
        Assertions.assertEquals("ovvtgseinqfiu", model.vwanConfiguration().trustSubnet().addressSpace());
        Assertions.assertEquals("knpirgnepttwq", model.vwanConfiguration().unTrustSubnet().resourceId());
        Assertions.assertEquals("niffcdmqnroj", model.vwanConfiguration().unTrustSubnet().addressSpace());
        Assertions.assertEquals("jnkrxf", model.vwanConfiguration().ipOfTrustSubnetForUdr().resourceId());
        Assertions.assertEquals("dhcrati", model.vwanConfiguration().ipOfTrustSubnetForUdr().address());
        Assertions.assertEquals(NetworkType.VWAN, model.networkType());
        Assertions.assertEquals("nasx", model.publicIps().get(0).resourceId());
        Assertions.assertEquals("tozqyzhftwesgo", model.publicIps().get(0).address());
        Assertions.assertEquals(EgressNat.DISABLED, model.enableEgressNat());
        Assertions.assertEquals("qxvcxgfrpdsofb", model.egressNatIp().get(0).resourceId());
        Assertions.assertEquals("rnsvbuswd", model.egressNatIp().get(0).address());
        Assertions.assertEquals("pqgik", model.trustedRanges().get(0));
        Assertions.assertEquals("f", model.privateSourceNatRulesDestination().get(0));
    }
}
