// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.paloaltonetworks.ngfw.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.EgressNat;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.IpAddress;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.IpAddressSpace;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.NetworkProfile;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.NetworkType;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.VnetConfiguration;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.VwanConfiguration;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class NetworkProfileTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        NetworkProfile model = BinaryData.fromString(
            "{\"vnetConfiguration\":{\"vnet\":{\"resourceId\":\"xukndxdigr\",\"addressSpace\":\"uufzdmsyqtfihw\"},\"trustSubnet\":{\"resourceId\":\"otzi\",\"addressSpace\":\"amvpphoszqzudph\"},\"unTrustSubnet\":{\"resourceId\":\"mvdk\",\"addressSpace\":\"ynwcvtbv\"},\"ipOfTrustSubnetForUdr\":{\"resourceId\":\"hmtnvy\",\"address\":\"atkzwpcnpw\"}},\"vwanConfiguration\":{\"networkVirtualApplianceId\":\"a\",\"vHub\":{\"resourceId\":\"gvvs\",\"addressSpace\":\"yajguqfhwygzlv\"},\"trustSubnet\":{\"resourceId\":\"fxusemdwzr\",\"addressSpace\":\"hapfcqdpsqx\"},\"unTrustSubnet\":{\"resourceId\":\"svuo\",\"addressSpace\":\"gc\"},\"ipOfTrustSubnetForUdr\":{\"resourceId\":\"vezrypqlmfeo\",\"address\":\"rqwky\"}},\"networkType\":\"VWAN\",\"publicIps\":[{\"resourceId\":\"opgxedkowepb\",\"address\":\"cr\"}],\"enableEgressNat\":\"DISABLED\",\"egressNatIp\":[{\"resourceId\":\"csnjvcdwxlpqekft\",\"address\":\"htjsying\"},{\"resourceId\":\"qatmtdhtmdvy\",\"address\":\"ikdgszywkbir\"},{\"resourceId\":\"uzhlhkjoqrv\",\"address\":\"aatjinrvgoupmfi\"},{\"resourceId\":\"fggjioolvr\",\"address\":\"kvtkkg\"}],\"trustedRanges\":[\"wjygvjayvblmhvk\",\"uhbxvvy\"]}")
            .toObject(NetworkProfile.class);
        Assertions.assertEquals("xukndxdigr", model.vnetConfiguration().vnet().resourceId());
        Assertions.assertEquals("uufzdmsyqtfihw", model.vnetConfiguration().vnet().addressSpace());
        Assertions.assertEquals("otzi", model.vnetConfiguration().trustSubnet().resourceId());
        Assertions.assertEquals("amvpphoszqzudph", model.vnetConfiguration().trustSubnet().addressSpace());
        Assertions.assertEquals("mvdk", model.vnetConfiguration().unTrustSubnet().resourceId());
        Assertions.assertEquals("ynwcvtbv", model.vnetConfiguration().unTrustSubnet().addressSpace());
        Assertions.assertEquals("hmtnvy", model.vnetConfiguration().ipOfTrustSubnetForUdr().resourceId());
        Assertions.assertEquals("atkzwpcnpw", model.vnetConfiguration().ipOfTrustSubnetForUdr().address());
        Assertions.assertEquals("a", model.vwanConfiguration().networkVirtualApplianceId());
        Assertions.assertEquals("gvvs", model.vwanConfiguration().vHub().resourceId());
        Assertions.assertEquals("yajguqfhwygzlv", model.vwanConfiguration().vHub().addressSpace());
        Assertions.assertEquals("fxusemdwzr", model.vwanConfiguration().trustSubnet().resourceId());
        Assertions.assertEquals("hapfcqdpsqx", model.vwanConfiguration().trustSubnet().addressSpace());
        Assertions.assertEquals("svuo", model.vwanConfiguration().unTrustSubnet().resourceId());
        Assertions.assertEquals("gc", model.vwanConfiguration().unTrustSubnet().addressSpace());
        Assertions.assertEquals("vezrypqlmfeo", model.vwanConfiguration().ipOfTrustSubnetForUdr().resourceId());
        Assertions.assertEquals("rqwky", model.vwanConfiguration().ipOfTrustSubnetForUdr().address());
        Assertions.assertEquals(NetworkType.VWAN, model.networkType());
        Assertions.assertEquals("opgxedkowepb", model.publicIps().get(0).resourceId());
        Assertions.assertEquals("cr", model.publicIps().get(0).address());
        Assertions.assertEquals(EgressNat.DISABLED, model.enableEgressNat());
        Assertions.assertEquals("csnjvcdwxlpqekft", model.egressNatIp().get(0).resourceId());
        Assertions.assertEquals("htjsying", model.egressNatIp().get(0).address());
        Assertions.assertEquals("wjygvjayvblmhvk", model.trustedRanges().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        NetworkProfile model = new NetworkProfile()
            .withVnetConfiguration(new VnetConfiguration()
                .withVnet(new IpAddressSpace().withResourceId("xukndxdigr").withAddressSpace("uufzdmsyqtfihw"))
                .withTrustSubnet(new IpAddressSpace().withResourceId("otzi").withAddressSpace("amvpphoszqzudph"))
                .withUnTrustSubnet(new IpAddressSpace().withResourceId("mvdk").withAddressSpace("ynwcvtbv"))
                .withIpOfTrustSubnetForUdr(new IpAddress().withResourceId("hmtnvy").withAddress("atkzwpcnpw")))
            .withVwanConfiguration(new VwanConfiguration().withNetworkVirtualApplianceId("a")
                .withVHub(new IpAddressSpace().withResourceId("gvvs").withAddressSpace("yajguqfhwygzlv"))
                .withTrustSubnet(new IpAddressSpace().withResourceId("fxusemdwzr").withAddressSpace("hapfcqdpsqx"))
                .withUnTrustSubnet(new IpAddressSpace().withResourceId("svuo").withAddressSpace("gc"))
                .withIpOfTrustSubnetForUdr(new IpAddress().withResourceId("vezrypqlmfeo").withAddress("rqwky")))
            .withNetworkType(NetworkType.VWAN)
            .withPublicIps(Arrays.asList(new IpAddress().withResourceId("opgxedkowepb").withAddress("cr")))
            .withEnableEgressNat(EgressNat.DISABLED)
            .withEgressNatIp(Arrays.asList(new IpAddress().withResourceId("csnjvcdwxlpqekft").withAddress("htjsying"),
                new IpAddress().withResourceId("qatmtdhtmdvy").withAddress("ikdgszywkbir"),
                new IpAddress().withResourceId("uzhlhkjoqrv").withAddress("aatjinrvgoupmfi"),
                new IpAddress().withResourceId("fggjioolvr").withAddress("kvtkkg")))
            .withTrustedRanges(Arrays.asList("wjygvjayvblmhvk", "uhbxvvy"));
        model = BinaryData.fromObject(model).toObject(NetworkProfile.class);
        Assertions.assertEquals("xukndxdigr", model.vnetConfiguration().vnet().resourceId());
        Assertions.assertEquals("uufzdmsyqtfihw", model.vnetConfiguration().vnet().addressSpace());
        Assertions.assertEquals("otzi", model.vnetConfiguration().trustSubnet().resourceId());
        Assertions.assertEquals("amvpphoszqzudph", model.vnetConfiguration().trustSubnet().addressSpace());
        Assertions.assertEquals("mvdk", model.vnetConfiguration().unTrustSubnet().resourceId());
        Assertions.assertEquals("ynwcvtbv", model.vnetConfiguration().unTrustSubnet().addressSpace());
        Assertions.assertEquals("hmtnvy", model.vnetConfiguration().ipOfTrustSubnetForUdr().resourceId());
        Assertions.assertEquals("atkzwpcnpw", model.vnetConfiguration().ipOfTrustSubnetForUdr().address());
        Assertions.assertEquals("a", model.vwanConfiguration().networkVirtualApplianceId());
        Assertions.assertEquals("gvvs", model.vwanConfiguration().vHub().resourceId());
        Assertions.assertEquals("yajguqfhwygzlv", model.vwanConfiguration().vHub().addressSpace());
        Assertions.assertEquals("fxusemdwzr", model.vwanConfiguration().trustSubnet().resourceId());
        Assertions.assertEquals("hapfcqdpsqx", model.vwanConfiguration().trustSubnet().addressSpace());
        Assertions.assertEquals("svuo", model.vwanConfiguration().unTrustSubnet().resourceId());
        Assertions.assertEquals("gc", model.vwanConfiguration().unTrustSubnet().addressSpace());
        Assertions.assertEquals("vezrypqlmfeo", model.vwanConfiguration().ipOfTrustSubnetForUdr().resourceId());
        Assertions.assertEquals("rqwky", model.vwanConfiguration().ipOfTrustSubnetForUdr().address());
        Assertions.assertEquals(NetworkType.VWAN, model.networkType());
        Assertions.assertEquals("opgxedkowepb", model.publicIps().get(0).resourceId());
        Assertions.assertEquals("cr", model.publicIps().get(0).address());
        Assertions.assertEquals(EgressNat.DISABLED, model.enableEgressNat());
        Assertions.assertEquals("csnjvcdwxlpqekft", model.egressNatIp().get(0).resourceId());
        Assertions.assertEquals("htjsying", model.egressNatIp().get(0).address());
        Assertions.assertEquals("wjygvjayvblmhvk", model.trustedRanges().get(0));
    }
}
