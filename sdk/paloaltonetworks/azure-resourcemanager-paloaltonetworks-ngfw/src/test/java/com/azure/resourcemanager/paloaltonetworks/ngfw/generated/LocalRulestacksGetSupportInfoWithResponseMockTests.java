// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.paloaltonetworks.ngfw.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.paloaltonetworks.ngfw.PaloAltoNetworksNgfwManager;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.BooleanEnum;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.SupportInfo;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class LocalRulestacksGetSupportInfoWithResponseMockTests {
    @Test
    public void testGetSupportInfoWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr
            = "{\"productSku\":\"blnsntrpcaqk\",\"productSerial\":\"f\",\"accountRegistered\":\"FALSE\",\"accountId\":\"mhklbnl\",\"userDomainSupported\":\"TRUE\",\"userRegistered\":\"TRUE\",\"freeTrial\":\"TRUE\",\"freeTrialDaysLeft\":1033707853,\"freeTrialCreditLeft\":1377010436,\"helpURL\":\"wusqx\",\"supportURL\":\"rp\",\"registerURL\":\"r\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito.when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito.when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito.when(httpClient.send(httpRequest.capture(), Mockito.any())).thenReturn(Mono.defer(() -> {
            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
            return Mono.just(httpResponse);
        }));

        PaloAltoNetworksNgfwManager manager = PaloAltoNetworksNgfwManager.configure().withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        SupportInfo response = manager.localRulestacks()
            .getSupportInfoWithResponse("qiubxdukecpxda", "v", "hctmmkosz", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("blnsntrpcaqk", response.productSku());
        Assertions.assertEquals("f", response.productSerial());
        Assertions.assertEquals(BooleanEnum.FALSE, response.accountRegistered());
        Assertions.assertEquals("mhklbnl", response.accountId());
        Assertions.assertEquals(BooleanEnum.TRUE, response.userDomainSupported());
        Assertions.assertEquals(BooleanEnum.TRUE, response.userRegistered());
        Assertions.assertEquals(BooleanEnum.TRUE, response.freeTrial());
        Assertions.assertEquals(1033707853, response.freeTrialDaysLeft());
        Assertions.assertEquals(1377010436, response.freeTrialCreditLeft());
        Assertions.assertEquals("wusqx", response.helpUrl());
        Assertions.assertEquals("rp", response.supportUrl());
        Assertions.assertEquals("r", response.registerUrl());
    }
}
