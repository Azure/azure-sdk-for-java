// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.paloaltonetworks.ngfw.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.paloaltonetworks.ngfw.PaloAltoNetworksNgfwManager;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.FqdnListLocalRulestackResource;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class FqdnListLocalRulestacksListByLocalRulestacksMockTests {
    @Test
    public void testListByLocalRulestacks() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"description\":\"udndoabhjxw\",\"fqdnList\":[\"weuipmpvksmi\",\"nsqxtltc\"],\"etag\":\"rdpqgfhy\",\"auditComment\":\"rakkld\",\"provisioningState\":\"Deleting\"},\"id\":\"fcmfcn\",\"name\":\"jajqmatxjt\",\"type\":\"elnzqgxxgfbbmt\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        PaloAltoNetworksNgfwManager manager = PaloAltoNetworksNgfwManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PagedIterable<FqdnListLocalRulestackResource> response = manager.fqdnListLocalRulestacks()
            .listByLocalRulestacks("ywsxvjabjqqaxu", "vym", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("udndoabhjxw", response.iterator().next().description());
        Assertions.assertEquals("weuipmpvksmi", response.iterator().next().fqdnList().get(0));
        Assertions.assertEquals("rdpqgfhy", response.iterator().next().etag());
        Assertions.assertEquals("rakkld", response.iterator().next().auditComment());
    }
}
