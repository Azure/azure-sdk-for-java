// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.paloaltonetworks.ngfw.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.paloaltonetworks.ngfw.PaloAltoNetworksNgfwManager;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.FqdnListLocalRulestackResource;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class FqdnListLocalRulestacksCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"description\":\"j\",\"fqdnList\":[\"ggjh\",\"f\"],\"etag\":\"rqrkijpeuqlsdx\",\"auditComment\":\"ztv\",\"provisioningState\":\"Succeeded\"},\"id\":\"wmjswenaww\",\"name\":\"me\",\"type\":\"leqioulndh\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        PaloAltoNetworksNgfwManager manager = PaloAltoNetworksNgfwManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        FqdnListLocalRulestackResource response = manager.fqdnListLocalRulestacks()
            .define("aqzi")
            .withExistingLocalRulestack("pqagynoiprn", "calincryqxz")
            .withFqdnList(Arrays.asList("guhfupe", "asvvoqsbpkfl", "nfkgxsyaowuzowpu", "hdkcprgu"))
            .withDescription("qimiymqr")
            .withEtag("rztiochlutixmqr")
            .withAuditComment("jizcbfzmcrunfhiu")
            .create();

        Assertions.assertEquals("j", response.description());
        Assertions.assertEquals("ggjh", response.fqdnList().get(0));
        Assertions.assertEquals("rqrkijpeuqlsdx", response.etag());
        Assertions.assertEquals("ztv", response.auditComment());
    }
}
