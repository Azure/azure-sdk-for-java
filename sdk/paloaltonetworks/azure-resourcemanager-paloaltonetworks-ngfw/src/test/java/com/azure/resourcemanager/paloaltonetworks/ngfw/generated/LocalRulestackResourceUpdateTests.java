// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.paloaltonetworks.ngfw.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.AzureResourceManagerManagedIdentityProperties;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.AzureResourceManagerUserAssignedIdentity;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.DefaultMode;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.LocalRulestackResourceUpdate;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.LocalRulestackResourceUpdateProperties;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.ManagedIdentityType;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.ScopeType;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.SecurityServices;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class LocalRulestackResourceUpdateTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        LocalRulestackResourceUpdate model = BinaryData.fromString(
            "{\"identity\":{\"tenantId\":\"ylfsbtk\",\"principalId\":\"pysownbt\",\"type\":\"None\",\"userAssignedIdentities\":{\"cmisofie\":{\"clientId\":\"rj\",\"principalId\":\"to\"}}},\"tags\":{\"qdhcu\":\"foj\",\"khihihlhzds\":\"lcplc\",\"mvec\":\"tzbsrgnowcjhf\"},\"properties\":{\"panEtag\":\"xmwoteyowcluqo\",\"panLocation\":\"kqvgqouw\",\"scope\":\"LOCAL\",\"associatedSubscriptions\":[\"j\",\"yivqikfxcvhrfsp\"],\"description\":\"agr\",\"defaultMode\":\"NONE\",\"minAppIdVersion\":\"teusqczkvyklxu\",\"securityServices\":{\"vulnerabilityProfile\":\"affmmfblcqc\",\"antiSpywareProfile\":\"bgq\",\"antiVirusProfile\":\"rtalmet\",\"urlFilteringProfile\":\"wgdsl\",\"fileBlockingProfile\":\"ihhrmo\",\"dnsSubscription\":\"z\",\"outboundUnTrustCertificate\":\"eypxiutcxapzhyr\",\"outboundTrustCertificate\":\"togebjoxsl\"}}}")
            .toObject(LocalRulestackResourceUpdate.class);
        Assertions.assertEquals(ManagedIdentityType.NONE, model.identity().type());
        Assertions.assertEquals("rj", model.identity().userAssignedIdentities().get("cmisofie").clientId());
        Assertions.assertEquals("to", model.identity().userAssignedIdentities().get("cmisofie").principalId());
        Assertions.assertEquals("foj", model.tags().get("qdhcu"));
        Assertions.assertEquals("xmwoteyowcluqo", model.properties().panEtag());
        Assertions.assertEquals("kqvgqouw", model.properties().panLocation());
        Assertions.assertEquals(ScopeType.LOCAL, model.properties().scope());
        Assertions.assertEquals("j", model.properties().associatedSubscriptions().get(0));
        Assertions.assertEquals("agr", model.properties().description());
        Assertions.assertEquals(DefaultMode.NONE, model.properties().defaultMode());
        Assertions.assertEquals("teusqczkvyklxu", model.properties().minAppIdVersion());
        Assertions.assertEquals("affmmfblcqc", model.properties().securityServices().vulnerabilityProfile());
        Assertions.assertEquals("bgq", model.properties().securityServices().antiSpywareProfile());
        Assertions.assertEquals("rtalmet", model.properties().securityServices().antiVirusProfile());
        Assertions.assertEquals("wgdsl", model.properties().securityServices().urlFilteringProfile());
        Assertions.assertEquals("ihhrmo", model.properties().securityServices().fileBlockingProfile());
        Assertions.assertEquals("z", model.properties().securityServices().dnsSubscription());
        Assertions.assertEquals("eypxiutcxapzhyr", model.properties().securityServices().outboundUnTrustCertificate());
        Assertions.assertEquals("togebjoxsl", model.properties().securityServices().outboundTrustCertificate());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        LocalRulestackResourceUpdate model = new LocalRulestackResourceUpdate()
            .withIdentity(new AzureResourceManagerManagedIdentityProperties().withType(ManagedIdentityType.NONE)
                .withUserAssignedIdentities(mapOf("cmisofie",
                    new AzureResourceManagerUserAssignedIdentity().withClientId("rj").withPrincipalId("to"))))
            .withTags(mapOf("qdhcu", "foj", "khihihlhzds", "lcplc", "mvec", "tzbsrgnowcjhf"))
            .withProperties(new LocalRulestackResourceUpdateProperties().withPanEtag("xmwoteyowcluqo")
                .withPanLocation("kqvgqouw")
                .withScope(ScopeType.LOCAL)
                .withAssociatedSubscriptions(Arrays.asList("j", "yivqikfxcvhrfsp"))
                .withDescription("agr")
                .withDefaultMode(DefaultMode.NONE)
                .withMinAppIdVersion("teusqczkvyklxu")
                .withSecurityServices(new SecurityServices().withVulnerabilityProfile("affmmfblcqc")
                    .withAntiSpywareProfile("bgq")
                    .withAntiVirusProfile("rtalmet")
                    .withUrlFilteringProfile("wgdsl")
                    .withFileBlockingProfile("ihhrmo")
                    .withDnsSubscription("z")
                    .withOutboundUnTrustCertificate("eypxiutcxapzhyr")
                    .withOutboundTrustCertificate("togebjoxsl")));
        model = BinaryData.fromObject(model).toObject(LocalRulestackResourceUpdate.class);
        Assertions.assertEquals(ManagedIdentityType.NONE, model.identity().type());
        Assertions.assertEquals("rj", model.identity().userAssignedIdentities().get("cmisofie").clientId());
        Assertions.assertEquals("to", model.identity().userAssignedIdentities().get("cmisofie").principalId());
        Assertions.assertEquals("foj", model.tags().get("qdhcu"));
        Assertions.assertEquals("xmwoteyowcluqo", model.properties().panEtag());
        Assertions.assertEquals("kqvgqouw", model.properties().panLocation());
        Assertions.assertEquals(ScopeType.LOCAL, model.properties().scope());
        Assertions.assertEquals("j", model.properties().associatedSubscriptions().get(0));
        Assertions.assertEquals("agr", model.properties().description());
        Assertions.assertEquals(DefaultMode.NONE, model.properties().defaultMode());
        Assertions.assertEquals("teusqczkvyklxu", model.properties().minAppIdVersion());
        Assertions.assertEquals("affmmfblcqc", model.properties().securityServices().vulnerabilityProfile());
        Assertions.assertEquals("bgq", model.properties().securityServices().antiSpywareProfile());
        Assertions.assertEquals("rtalmet", model.properties().securityServices().antiVirusProfile());
        Assertions.assertEquals("wgdsl", model.properties().securityServices().urlFilteringProfile());
        Assertions.assertEquals("ihhrmo", model.properties().securityServices().fileBlockingProfile());
        Assertions.assertEquals("z", model.properties().securityServices().dnsSubscription());
        Assertions.assertEquals("eypxiutcxapzhyr", model.properties().securityServices().outboundUnTrustCertificate());
        Assertions.assertEquals("togebjoxsl", model.properties().securityServices().outboundTrustCertificate());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
