// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.paloaltonetworks.ngfw.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.AzureResourceManagerManagedIdentityProperties;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.AzureResourceManagerUserAssignedIdentity;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.DefaultMode;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.LocalRulestackResourceUpdate;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.LocalRulestackResourceUpdateProperties;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.ManagedIdentityType;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.ScopeType;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.SecurityServices;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class LocalRulestackResourceUpdateTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        LocalRulestackResourceUpdate model = BinaryData.fromString(
            "{\"identity\":{\"tenantId\":\"yinzqodfvpgs\",\"principalId\":\"xgsg\",\"type\":\"None\",\"userAssignedIdentities\":{\"vetnwsdtutn\":{\"clientId\":\"djtxvzflbq\",\"principalId\":\"aqvlgafcqusr\"},\"kuqgsjjxundxgket\":{\"clientId\":\"duy\",\"principalId\":\"uzhyrmewipmvekdx\"},\"gpmuneqsxvmhfbuz\":{\"clientId\":\"hhzjhfj\",\"principalId\":\"vvmu\"}}},\"tags\":{\"ypoh\":\"hsasbhu\",\"sqy\":\"uemsly\"},\"properties\":{\"panEtag\":\"oobrlttyms\",\"panLocation\":\"ygqdnfwqzdz\",\"scope\":\"LOCAL\",\"associatedSubscriptions\":[\"xhnfhqly\",\"ijouwivkxoyzunb\"],\"description\":\"xrtikvcpwpgclr\",\"defaultMode\":\"FIREWALL\",\"minAppIdVersion\":\"soxfrken\",\"securityServices\":{\"vulnerabilityProfile\":\"yyefrpmpdnqqs\",\"antiSpywareProfile\":\"waoqvmmb\",\"antiVirusProfile\":\"qfr\",\"urlFilteringProfile\":\"lkzmegnitgvkxl\",\"fileBlockingProfile\":\"qdrfegcealzxwhc\",\"dnsSubscription\":\"symoyq\",\"outboundUnTrustCertificate\":\"wigdi\",\"outboundTrustCertificate\":\"kbxgom\"}}}")
            .toObject(LocalRulestackResourceUpdate.class);
        Assertions.assertEquals(ManagedIdentityType.NONE, model.identity().type());
        Assertions.assertEquals("djtxvzflbq", model.identity().userAssignedIdentities().get("vetnwsdtutn").clientId());
        Assertions.assertEquals("aqvlgafcqusr",
            model.identity().userAssignedIdentities().get("vetnwsdtutn").principalId());
        Assertions.assertEquals("hsasbhu", model.tags().get("ypoh"));
        Assertions.assertEquals("oobrlttyms", model.properties().panEtag());
        Assertions.assertEquals("ygqdnfwqzdz", model.properties().panLocation());
        Assertions.assertEquals(ScopeType.LOCAL, model.properties().scope());
        Assertions.assertEquals("xhnfhqly", model.properties().associatedSubscriptions().get(0));
        Assertions.assertEquals("xrtikvcpwpgclr", model.properties().description());
        Assertions.assertEquals(DefaultMode.FIREWALL, model.properties().defaultMode());
        Assertions.assertEquals("soxfrken", model.properties().minAppIdVersion());
        Assertions.assertEquals("yyefrpmpdnqqs", model.properties().securityServices().vulnerabilityProfile());
        Assertions.assertEquals("waoqvmmb", model.properties().securityServices().antiSpywareProfile());
        Assertions.assertEquals("qfr", model.properties().securityServices().antiVirusProfile());
        Assertions.assertEquals("lkzmegnitgvkxl", model.properties().securityServices().urlFilteringProfile());
        Assertions.assertEquals("qdrfegcealzxwhc", model.properties().securityServices().fileBlockingProfile());
        Assertions.assertEquals("symoyq", model.properties().securityServices().dnsSubscription());
        Assertions.assertEquals("wigdi", model.properties().securityServices().outboundUnTrustCertificate());
        Assertions.assertEquals("kbxgom", model.properties().securityServices().outboundTrustCertificate());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        LocalRulestackResourceUpdate model = new LocalRulestackResourceUpdate()
            .withIdentity(new AzureResourceManagerManagedIdentityProperties().withType(ManagedIdentityType.NONE)
                .withUserAssignedIdentities(mapOf("vetnwsdtutn",
                    new AzureResourceManagerUserAssignedIdentity().withClientId("djtxvzflbq")
                        .withPrincipalId("aqvlgafcqusr"),
                    "kuqgsjjxundxgket",
                    new AzureResourceManagerUserAssignedIdentity().withClientId("duy")
                        .withPrincipalId("uzhyrmewipmvekdx"),
                    "gpmuneqsxvmhfbuz",
                    new AzureResourceManagerUserAssignedIdentity().withClientId("hhzjhfj").withPrincipalId("vvmu"))))
            .withTags(mapOf("ypoh", "hsasbhu", "sqy", "uemsly"))
            .withProperties(new LocalRulestackResourceUpdateProperties().withPanEtag("oobrlttyms")
                .withPanLocation("ygqdnfwqzdz").withScope(ScopeType.LOCAL)
                .withAssociatedSubscriptions(Arrays.asList("xhnfhqly", "ijouwivkxoyzunb"))
                .withDescription("xrtikvcpwpgclr").withDefaultMode(DefaultMode.FIREWALL).withMinAppIdVersion("soxfrken")
                .withSecurityServices(
                    new SecurityServices().withVulnerabilityProfile("yyefrpmpdnqqs").withAntiSpywareProfile("waoqvmmb")
                        .withAntiVirusProfile("qfr").withUrlFilteringProfile("lkzmegnitgvkxl")
                        .withFileBlockingProfile("qdrfegcealzxwhc").withDnsSubscription("symoyq")
                        .withOutboundUnTrustCertificate("wigdi").withOutboundTrustCertificate("kbxgom")));
        model = BinaryData.fromObject(model).toObject(LocalRulestackResourceUpdate.class);
        Assertions.assertEquals(ManagedIdentityType.NONE, model.identity().type());
        Assertions.assertEquals("djtxvzflbq", model.identity().userAssignedIdentities().get("vetnwsdtutn").clientId());
        Assertions.assertEquals("aqvlgafcqusr",
            model.identity().userAssignedIdentities().get("vetnwsdtutn").principalId());
        Assertions.assertEquals("hsasbhu", model.tags().get("ypoh"));
        Assertions.assertEquals("oobrlttyms", model.properties().panEtag());
        Assertions.assertEquals("ygqdnfwqzdz", model.properties().panLocation());
        Assertions.assertEquals(ScopeType.LOCAL, model.properties().scope());
        Assertions.assertEquals("xhnfhqly", model.properties().associatedSubscriptions().get(0));
        Assertions.assertEquals("xrtikvcpwpgclr", model.properties().description());
        Assertions.assertEquals(DefaultMode.FIREWALL, model.properties().defaultMode());
        Assertions.assertEquals("soxfrken", model.properties().minAppIdVersion());
        Assertions.assertEquals("yyefrpmpdnqqs", model.properties().securityServices().vulnerabilityProfile());
        Assertions.assertEquals("waoqvmmb", model.properties().securityServices().antiSpywareProfile());
        Assertions.assertEquals("qfr", model.properties().securityServices().antiVirusProfile());
        Assertions.assertEquals("lkzmegnitgvkxl", model.properties().securityServices().urlFilteringProfile());
        Assertions.assertEquals("qdrfegcealzxwhc", model.properties().securityServices().fileBlockingProfile());
        Assertions.assertEquals("symoyq", model.properties().securityServices().dnsSubscription());
        Assertions.assertEquals("wigdi", model.properties().securityServices().outboundUnTrustCertificate());
        Assertions.assertEquals("kbxgom", model.properties().securityServices().outboundTrustCertificate());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
