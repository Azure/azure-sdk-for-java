// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.paloaltonetworks.ngfw.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.AzureResourceManagerManagedIdentityProperties;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.AzureResourceManagerUserAssignedIdentity;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.ManagedIdentityType;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AzureResourceManagerManagedIdentityPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AzureResourceManagerManagedIdentityProperties model = BinaryData.fromString(
            "{\"tenantId\":\"urzafb\",\"principalId\":\"j\",\"type\":\"UserAssigned\",\"userAssignedIdentities\":{\"ulpkudjkrl\":{\"clientId\":\"qcjm\",\"principalId\":\"javbqidtqajz\"},\"scpai\":{\"clientId\":\"bzhfepgzgqexz\",\"principalId\":\"c\"},\"onpimexgstxg\":{\"clientId\":\"hhbcsglummajtjao\",\"principalId\":\"obnbdxkqpxokaj\"}}}")
            .toObject(AzureResourceManagerManagedIdentityProperties.class);
        Assertions.assertEquals(ManagedIdentityType.USER_ASSIGNED, model.type());
        Assertions.assertEquals("qcjm", model.userAssignedIdentities().get("ulpkudjkrl").clientId());
        Assertions.assertEquals("javbqidtqajz", model.userAssignedIdentities().get("ulpkudjkrl").principalId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AzureResourceManagerManagedIdentityProperties model
            = new AzureResourceManagerManagedIdentityProperties().withType(ManagedIdentityType.USER_ASSIGNED)
                .withUserAssignedIdentities(mapOf("ulpkudjkrl",
                    new AzureResourceManagerUserAssignedIdentity().withClientId("qcjm").withPrincipalId("javbqidtqajz"),
                    "scpai",
                    new AzureResourceManagerUserAssignedIdentity().withClientId("bzhfepgzgqexz").withPrincipalId("c"),
                    "onpimexgstxg", new AzureResourceManagerUserAssignedIdentity().withClientId("hhbcsglummajtjao")
                        .withPrincipalId("obnbdxkqpxokaj")));
        model = BinaryData.fromObject(model).toObject(AzureResourceManagerManagedIdentityProperties.class);
        Assertions.assertEquals(ManagedIdentityType.USER_ASSIGNED, model.type());
        Assertions.assertEquals("qcjm", model.userAssignedIdentities().get("ulpkudjkrl").clientId());
        Assertions.assertEquals("javbqidtqajz", model.userAssignedIdentities().get("ulpkudjkrl").principalId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
