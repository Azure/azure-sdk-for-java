// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.paloaltonetworks.ngfw.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.paloaltonetworks.ngfw.fluent.models.LocalRulestackResourceInner;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.AzureResourceManagerManagedIdentityProperties;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.AzureResourceManagerUserAssignedIdentity;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.DefaultMode;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.LocalRulestackResourceListResult;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.ManagedIdentityType;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.ScopeType;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.SecurityServices;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class LocalRulestackResourceListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        LocalRulestackResourceListResult model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"panEtag\":\"xum\",\"panLocation\":\"ton\",\"scope\":\"LOCAL\",\"associatedSubscriptions\":[\"udfdlwgg\"],\"description\":\"sb\",\"defaultMode\":\"IPS\",\"minAppIdVersion\":\"vtgsei\",\"provisioningState\":\"Creating\",\"securityServices\":{\"vulnerabilityProfile\":\"fxqknpirgneptt\",\"antiSpywareProfile\":\"msniffc\",\"antiVirusProfile\":\"qnrojlpijnkrxfrd\",\"urlFilteringProfile\":\"c\",\"fileBlockingProfile\":\"tizzronasxif\",\"dnsSubscription\":\"zq\",\"outboundUnTrustCertificate\":\"hftwesgog\",\"outboundTrustCertificate\":\"honnxkrlgnyhmos\"}},\"identity\":{\"tenantId\":\"kgthrrghxjbd\",\"principalId\":\"xvcxgfrpdsofbshr\",\"type\":\"UserAssigned\",\"userAssignedIdentities\":{\"nopqgikyzirtx\":{\"clientId\":\"swdvzyybycnun\",\"principalId\":\"srtkfa\"},\"qukrydxt\":{\"clientId\":\"uxzejntpsew\",\"principalId\":\"oi\"},\"pjbi\":{\"clientId\":\"ieoxorggufhyaomt\",\"principalId\":\"hhavgrvkffovjz\"}}},\"location\":\"jmfxumvf\",\"tags\":{\"wxnb\":\"yo\",\"rujbzbomvzzbtdc\":\"fezzxscyhwzdg\"},\"id\":\"vp\",\"name\":\"iyujviylwdshfs\",\"type\":\"n\"},{\"properties\":{\"panEtag\":\"gy\",\"panLocation\":\"rymsgaojfmw\",\"scope\":\"LOCAL\",\"associatedSubscriptions\":[\"rfh\",\"rctym\",\"xoftpipiwyczu\"],\"description\":\"a\",\"defaultMode\":\"IPS\",\"minAppIdVersion\":\"lihhyuspskasdvlm\",\"provisioningState\":\"Canceled\",\"securityServices\":{\"vulnerabilityProfile\":\"x\",\"antiSpywareProfile\":\"ucvpamrs\",\"antiVirusProfile\":\"uzvx\",\"urlFilteringProfile\":\"i\",\"fileBlockingProfile\":\"nhn\",\"dnsSubscription\":\"xifqjzgxm\",\"outboundUnTrustCertificate\":\"ublwpcesutrg\",\"outboundTrustCertificate\":\"pauutpw\"}},\"identity\":{\"tenantId\":\"ih\",\"principalId\":\"qg\",\"type\":\"SystemAssigned,UserAssigned\",\"userAssignedIdentities\":{\"fceacvlhvygd\":{\"clientId\":\"qntcypsxjvfoimwk\",\"principalId\":\"ircizjxvy\"}}},\"location\":\"t\",\"tags\":{\"ztsfmznbaeqp\":\"twnawjslbiwkojgc\",\"qgaifmviklbydv\":\"chqnrnrpxehuwry\",\"volvtn\":\"hbejdznxcvdsrhnj\"},\"id\":\"v\",\"name\":\"fzg\",\"type\":\"mjdftu\"},{\"properties\":{\"panEtag\":\"ltducea\",\"panLocation\":\"mczuo\",\"scope\":\"LOCAL\",\"associatedSubscriptions\":[\"w\",\"qioknssxmojm\"],\"description\":\"p\",\"defaultMode\":\"FIREWALL\",\"minAppIdVersion\":\"vk\",\"provisioningState\":\"Canceled\",\"securityServices\":{\"vulnerabilityProfile\":\"ljyxgtczhe\",\"antiSpywareProfile\":\"bsdshmkxmaehvbbx\",\"antiVirusProfile\":\"iplt\",\"urlFilteringProfile\":\"htba\",\"fileBlockingProfile\":\"gx\",\"dnsSubscription\":\"rc\",\"outboundUnTrustCertificate\":\"yklyhpluodpvruud\",\"outboundTrustCertificate\":\"zibt\"}},\"identity\":{\"tenantId\":\"tgk\",\"principalId\":\"tvdxeclzedqb\",\"type\":\"None\",\"userAssignedIdentities\":{\"mlkxtrqjfs\":{\"clientId\":\"h\",\"principalId\":\"odqkdlwwqfb\"}}},\"location\":\"mbtxhwgf\",\"tags\":{\"ezbrhubskh\":\"tawc\",\"ookk\":\"dyg\",\"fmluiqtqzfavyvn\":\"fqjbvleo\"},\"id\":\"qybaryeua\",\"name\":\"jkqa\",\"type\":\"qgzsles\"},{\"properties\":{\"panEtag\":\"bhernntiew\",\"panLocation\":\"cv\",\"scope\":\"GLOBAL\",\"associatedSubscriptions\":[\"behwagohb\"],\"description\":\"fkmr\",\"defaultMode\":\"IPS\",\"minAppIdVersion\":\"vhmxtdrjfu\",\"provisioningState\":\"Updating\",\"securityServices\":{\"vulnerabilityProfile\":\"bj\",\"antiSpywareProfile\":\"wzcjznmwcpmgua\",\"antiVirusProfile\":\"raufactkahzova\",\"urlFilteringProfile\":\"ziuxxpshnee\",\"fileBlockingProfile\":\"lfg\",\"dnsSubscription\":\"qubkw\",\"outboundUnTrustCertificate\":\"enr\",\"outboundTrustCertificate\":\"utujba\"}},\"identity\":{\"tenantId\":\"uo\",\"principalId\":\"inyflnorwmduvwp\",\"type\":\"SystemAssigned\",\"userAssignedIdentities\":{\"bjcrxgibbdaxco\":{\"clientId\":\"mygdxpgpqch\",\"principalId\":\"zepn\"},\"uuepzlrphwzsoldw\":{\"clientId\":\"ozauorsukokwb\",\"principalId\":\"lhlv\"},\"v\":{\"clientId\":\"uqdunvmnnrwrbi\",\"principalId\":\"ktalywjhhgdnhxms\"}}},\"location\":\"miloxggdufiqndie\",\"tags\":{\"dotcubiipuip\":\"ofjchvcyyysf\"},\"id\":\"oqonma\",\"name\":\"jeknizshq\",\"type\":\"cimpevfg\"}],\"nextLink\":\"lrri\"}")
            .toObject(LocalRulestackResourceListResult.class);
        Assertions.assertEquals("jmfxumvf", model.value().get(0).location());
        Assertions.assertEquals("yo", model.value().get(0).tags().get("wxnb"));
        Assertions.assertEquals(ManagedIdentityType.USER_ASSIGNED, model.value().get(0).identity().type());
        Assertions.assertEquals("swdvzyybycnun",
            model.value().get(0).identity().userAssignedIdentities().get("nopqgikyzirtx").clientId());
        Assertions.assertEquals("srtkfa",
            model.value().get(0).identity().userAssignedIdentities().get("nopqgikyzirtx").principalId());
        Assertions.assertEquals("xum", model.value().get(0).panEtag());
        Assertions.assertEquals("ton", model.value().get(0).panLocation());
        Assertions.assertEquals(ScopeType.LOCAL, model.value().get(0).scope());
        Assertions.assertEquals("udfdlwgg", model.value().get(0).associatedSubscriptions().get(0));
        Assertions.assertEquals("sb", model.value().get(0).description());
        Assertions.assertEquals(DefaultMode.IPS, model.value().get(0).defaultMode());
        Assertions.assertEquals("vtgsei", model.value().get(0).minAppIdVersion());
        Assertions.assertEquals("fxqknpirgneptt", model.value().get(0).securityServices().vulnerabilityProfile());
        Assertions.assertEquals("msniffc", model.value().get(0).securityServices().antiSpywareProfile());
        Assertions.assertEquals("qnrojlpijnkrxfrd", model.value().get(0).securityServices().antiVirusProfile());
        Assertions.assertEquals("c", model.value().get(0).securityServices().urlFilteringProfile());
        Assertions.assertEquals("tizzronasxif", model.value().get(0).securityServices().fileBlockingProfile());
        Assertions.assertEquals("zq", model.value().get(0).securityServices().dnsSubscription());
        Assertions.assertEquals("hftwesgog", model.value().get(0).securityServices().outboundUnTrustCertificate());
        Assertions.assertEquals("honnxkrlgnyhmos", model.value().get(0).securityServices().outboundTrustCertificate());
        Assertions.assertEquals("lrri", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        LocalRulestackResourceListResult model
            = new LocalRulestackResourceListResult()
                .withValue(Arrays.asList(
                    new LocalRulestackResourceInner().withLocation("jmfxumvf")
                        .withTags(mapOf("wxnb", "yo", "rujbzbomvzzbtdc", "fezzxscyhwzdg"))
                        .withIdentity(new AzureResourceManagerManagedIdentityProperties()
                            .withType(ManagedIdentityType.USER_ASSIGNED)
                            .withUserAssignedIdentities(mapOf("nopqgikyzirtx",
                                new AzureResourceManagerUserAssignedIdentity().withClientId("swdvzyybycnun")
                                    .withPrincipalId("srtkfa"),
                                "qukrydxt",
                                new AzureResourceManagerUserAssignedIdentity()
                                    .withClientId("uxzejntpsew").withPrincipalId("oi"),
                                "pjbi",
                                new AzureResourceManagerUserAssignedIdentity().withClientId("ieoxorggufhyaomt")
                                    .withPrincipalId("hhavgrvkffovjz"))))
                        .withPanEtag("xum").withPanLocation("ton").withScope(ScopeType.LOCAL)
                        .withAssociatedSubscriptions(Arrays.asList("udfdlwgg")).withDescription("sb")
                        .withDefaultMode(DefaultMode.IPS).withMinAppIdVersion("vtgsei")
                        .withSecurityServices(new SecurityServices().withVulnerabilityProfile("fxqknpirgneptt")
                            .withAntiSpywareProfile("msniffc").withAntiVirusProfile("qnrojlpijnkrxfrd")
                            .withUrlFilteringProfile("c").withFileBlockingProfile("tizzronasxif")
                            .withDnsSubscription("zq").withOutboundUnTrustCertificate("hftwesgog")
                            .withOutboundTrustCertificate("honnxkrlgnyhmos")),
                    new LocalRulestackResourceInner().withLocation("t")
                        .withTags(mapOf("ztsfmznbaeqp", "twnawjslbiwkojgc", "qgaifmviklbydv", "chqnrnrpxehuwry",
                            "volvtn", "hbejdznxcvdsrhnj"))
                        .withIdentity(new AzureResourceManagerManagedIdentityProperties()
                            .withType(ManagedIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED)
                            .withUserAssignedIdentities(mapOf("fceacvlhvygd",
                                new AzureResourceManagerUserAssignedIdentity().withClientId("qntcypsxjvfoimwk")
                                    .withPrincipalId("ircizjxvy"))))
                        .withPanEtag("gy").withPanLocation("rymsgaojfmw").withScope(ScopeType.LOCAL)
                        .withAssociatedSubscriptions(Arrays.asList("rfh", "rctym", "xoftpipiwyczu"))
                        .withDescription("a").withDefaultMode(DefaultMode.IPS).withMinAppIdVersion("lihhyuspskasdvlm")
                        .withSecurityServices(new SecurityServices().withVulnerabilityProfile("x")
                            .withAntiSpywareProfile("ucvpamrs").withAntiVirusProfile("uzvx")
                            .withUrlFilteringProfile("i").withFileBlockingProfile(
                                "nhn")
                            .withDnsSubscription("xifqjzgxm").withOutboundUnTrustCertificate("ublwpcesutrg")
                            .withOutboundTrustCertificate("pauutpw")),
                    new LocalRulestackResourceInner().withLocation("mbtxhwgf")
                        .withTags(mapOf("ezbrhubskh", "tawc", "ookk", "dyg", "fmluiqtqzfavyvn", "fqjbvleo"))
                        .withIdentity(
                            new AzureResourceManagerManagedIdentityProperties().withType(ManagedIdentityType.NONE)
                                .withUserAssignedIdentities(mapOf("mlkxtrqjfs",
                                    new AzureResourceManagerUserAssignedIdentity().withClientId("h")
                                        .withPrincipalId("odqkdlwwqfb"))))
                        .withPanEtag("ltducea").withPanLocation("mczuo").withScope(ScopeType.LOCAL)
                        .withAssociatedSubscriptions(Arrays.asList("w", "qioknssxmojm")).withDescription("p")
                        .withDefaultMode(DefaultMode.FIREWALL).withMinAppIdVersion("vk").withSecurityServices(
                            new SecurityServices().withVulnerabilityProfile("ljyxgtczhe")
                                .withAntiSpywareProfile("bsdshmkxmaehvbbx").withAntiVirusProfile("iplt")
                                .withUrlFilteringProfile("htba").withFileBlockingProfile("gx").withDnsSubscription("rc")
                                .withOutboundUnTrustCertificate("yklyhpluodpvruud")
                                .withOutboundTrustCertificate("zibt")),
                    new LocalRulestackResourceInner().withLocation("miloxggdufiqndie")
                        .withTags(mapOf("dotcubiipuip", "ofjchvcyyysf"))
                        .withIdentity(new AzureResourceManagerManagedIdentityProperties()
                            .withType(ManagedIdentityType.SYSTEM_ASSIGNED)
                            .withUserAssignedIdentities(mapOf("bjcrxgibbdaxco",
                                new AzureResourceManagerUserAssignedIdentity().withClientId("mygdxpgpqch")
                                    .withPrincipalId("zepn"),
                                "uuepzlrphwzsoldw",
                                new AzureResourceManagerUserAssignedIdentity()
                                    .withClientId("ozauorsukokwb").withPrincipalId("lhlv"),
                                "v",
                                new AzureResourceManagerUserAssignedIdentity().withClientId("uqdunvmnnrwrbi")
                                    .withPrincipalId("ktalywjhhgdnhxms"))))
                        .withPanEtag("bhernntiew").withPanLocation("cv").withScope(ScopeType.GLOBAL)
                        .withAssociatedSubscriptions(Arrays.asList("behwagohb")).withDescription("fkmr")
                        .withDefaultMode(DefaultMode.IPS).withMinAppIdVersion("vhmxtdrjfu")
                        .withSecurityServices(new SecurityServices().withVulnerabilityProfile("bj")
                            .withAntiSpywareProfile("wzcjznmwcpmgua").withAntiVirusProfile("raufactkahzova")
                            .withUrlFilteringProfile("ziuxxpshnee").withFileBlockingProfile("lfg")
                            .withDnsSubscription("qubkw").withOutboundUnTrustCertificate("enr")
                            .withOutboundTrustCertificate("utujba"))))
                .withNextLink("lrri");
        model = BinaryData.fromObject(model).toObject(LocalRulestackResourceListResult.class);
        Assertions.assertEquals("jmfxumvf", model.value().get(0).location());
        Assertions.assertEquals("yo", model.value().get(0).tags().get("wxnb"));
        Assertions.assertEquals(ManagedIdentityType.USER_ASSIGNED, model.value().get(0).identity().type());
        Assertions.assertEquals("swdvzyybycnun",
            model.value().get(0).identity().userAssignedIdentities().get("nopqgikyzirtx").clientId());
        Assertions.assertEquals("srtkfa",
            model.value().get(0).identity().userAssignedIdentities().get("nopqgikyzirtx").principalId());
        Assertions.assertEquals("xum", model.value().get(0).panEtag());
        Assertions.assertEquals("ton", model.value().get(0).panLocation());
        Assertions.assertEquals(ScopeType.LOCAL, model.value().get(0).scope());
        Assertions.assertEquals("udfdlwgg", model.value().get(0).associatedSubscriptions().get(0));
        Assertions.assertEquals("sb", model.value().get(0).description());
        Assertions.assertEquals(DefaultMode.IPS, model.value().get(0).defaultMode());
        Assertions.assertEquals("vtgsei", model.value().get(0).minAppIdVersion());
        Assertions.assertEquals("fxqknpirgneptt", model.value().get(0).securityServices().vulnerabilityProfile());
        Assertions.assertEquals("msniffc", model.value().get(0).securityServices().antiSpywareProfile());
        Assertions.assertEquals("qnrojlpijnkrxfrd", model.value().get(0).securityServices().antiVirusProfile());
        Assertions.assertEquals("c", model.value().get(0).securityServices().urlFilteringProfile());
        Assertions.assertEquals("tizzronasxif", model.value().get(0).securityServices().fileBlockingProfile());
        Assertions.assertEquals("zq", model.value().get(0).securityServices().dnsSubscription());
        Assertions.assertEquals("hftwesgog", model.value().get(0).securityServices().outboundUnTrustCertificate());
        Assertions.assertEquals("honnxkrlgnyhmos", model.value().get(0).securityServices().outboundTrustCertificate());
        Assertions.assertEquals("lrri", model.nextLink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
