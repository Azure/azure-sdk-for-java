// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.paloaltonetworks.ngfw.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.paloaltonetworks.ngfw.PaloAltoNetworksNgfwManager;
import com.azure.resourcemanager.paloaltonetworks.ngfw.fluent.models.GlobalRulestackResourceInner;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.AzureResourceManagerManagedIdentityProperties;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.DefaultMode;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.GlobalRulestackResource;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.ManagedIdentityType;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.ScopeType;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.SecurityServices;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class GlobalRulestacksCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"panEtag\":\"idxas\",\"panLocation\":\"ddyvvjskgfmo\",\"scope\":\"LOCAL\",\"associatedSubscriptions\":[\"qgatjeaahhvjhhn\"],\"description\":\"zybbj\",\"defaultMode\":\"FIREWALL\",\"minAppIdVersion\":\"ksyxkyxvxevblbje\",\"provisioningState\":\"Succeeded\",\"securityServices\":{\"vulnerabilityProfile\":\"age\",\"antiSpywareProfile\":\"ulxunsmjbnkpp\",\"antiVirusProfile\":\"nenlsvxeizzg\",\"urlFilteringProfile\":\"lnsrmffe\",\"fileBlockingProfile\":\"xcktpiymerteeamm\",\"dnsSubscription\":\"iekkkzddrtkgdojb\",\"outboundUnTrustCertificate\":\"vavrefdees\",\"outboundTrustCertificate\":\"cuijpxt\"}},\"location\":\"s\",\"identity\":{\"tenantId\":\"rtujwsawddjibab\",\"principalId\":\"ititvtzeexavoxt\",\"type\":\"SystemAssigned,UserAssigned\",\"userAssignedIdentities\":{}},\"id\":\"dmdqb\",\"name\":\"pypqtgsfj\",\"type\":\"cbslhhx\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        PaloAltoNetworksNgfwManager manager =
            PaloAltoNetworksNgfwManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        GlobalRulestackResource response =
            manager
                .globalRulestacks()
                .createOrUpdate(
                    "gpmuneqsxvmhfbuz",
                    new GlobalRulestackResourceInner()
                        .withLocation("yqdrf")
                        .withIdentity(
                            new AzureResourceManagerManagedIdentityProperties()
                                .withType(ManagedIdentityType.USER_ASSIGNED)
                                .withUserAssignedIdentities(mapOf()))
                        .withPanEtag("ihsasb")
                        .withPanLocation("dyp")
                        .withScope(ScopeType.LOCAL)
                        .withAssociatedSubscriptions(Arrays.asList("ms", "ynsqyrpfoobr", "ttymsjny"))
                        .withDescription("dnfwqzdzg")
                        .withDefaultMode(DefaultMode.IPS)
                        .withMinAppIdVersion("xhnfhqly")
                        .withSecurityServices(
                            new SecurityServices()
                                .withVulnerabilityProfile("wivkxo")
                                .withAntiSpywareProfile("un")
                                .withAntiVirusProfile("xxrtikvc")
                                .withUrlFilteringProfile("pgclrciv")
                                .withFileBlockingProfile("oxfrkenxpmyyefr")
                                .withDnsSubscription("pdnqqskawaoqvmmb")
                                .withOutboundUnTrustCertificate("qfr")
                                .withOutboundTrustCertificate("lkzmegnitgvkxl")),
                    com.azure.core.util.Context.NONE);

        Assertions.assertEquals("s", response.location());
        Assertions.assertEquals(ManagedIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED, response.identity().type());
        Assertions.assertEquals("idxas", response.panEtag());
        Assertions.assertEquals("ddyvvjskgfmo", response.panLocation());
        Assertions.assertEquals(ScopeType.LOCAL, response.scope());
        Assertions.assertEquals("qgatjeaahhvjhhn", response.associatedSubscriptions().get(0));
        Assertions.assertEquals("zybbj", response.description());
        Assertions.assertEquals(DefaultMode.FIREWALL, response.defaultMode());
        Assertions.assertEquals("ksyxkyxvxevblbje", response.minAppIdVersion());
        Assertions.assertEquals("age", response.securityServices().vulnerabilityProfile());
        Assertions.assertEquals("ulxunsmjbnkpp", response.securityServices().antiSpywareProfile());
        Assertions.assertEquals("nenlsvxeizzg", response.securityServices().antiVirusProfile());
        Assertions.assertEquals("lnsrmffe", response.securityServices().urlFilteringProfile());
        Assertions.assertEquals("xcktpiymerteeamm", response.securityServices().fileBlockingProfile());
        Assertions.assertEquals("iekkkzddrtkgdojb", response.securityServices().dnsSubscription());
        Assertions.assertEquals("vavrefdees", response.securityServices().outboundUnTrustCertificate());
        Assertions.assertEquals("cuijpxt", response.securityServices().outboundTrustCertificate());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
