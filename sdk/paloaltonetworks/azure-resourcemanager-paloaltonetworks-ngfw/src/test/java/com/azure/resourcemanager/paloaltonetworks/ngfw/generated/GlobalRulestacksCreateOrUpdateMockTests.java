// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.paloaltonetworks.ngfw.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.paloaltonetworks.ngfw.PaloAltoNetworksNgfwManager;
import com.azure.resourcemanager.paloaltonetworks.ngfw.fluent.models.GlobalRulestackResourceInner;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.AzureResourceManagerManagedIdentityProperties;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.AzureResourceManagerUserAssignedIdentity;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.DefaultMode;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.GlobalRulestackResource;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.ManagedIdentityType;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.ScopeType;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.SecurityServices;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class GlobalRulestacksCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"panEtag\":\"atzv\",\"panLocation\":\"glbyvi\",\"scope\":\"GLOBAL\",\"associatedSubscriptions\":[\"rxkjzwrgxffmshk\",\"fbkgozxwopdby\"],\"description\":\"izqaclnapxbiyg\",\"defaultMode\":\"FIREWALL\",\"minAppIdVersion\":\"knfsmfcttuxuuyil\",\"provisioningState\":\"Succeeded\",\"securityServices\":{\"vulnerabilityProfile\":\"quvre\",\"antiSpywareProfile\":\"rnjhvsujztczytqj\",\"antiVirusProfile\":\"h\",\"urlFilteringProfile\":\"unfprnjletlxs\",\"fileBlockingProfile\":\"pddouifamowaziyn\",\"dnsSubscription\":\"lqwzdvpiwhxqsz\",\"outboundUnTrustCertificate\":\"maajquhuxylr\",\"outboundTrustCertificate\":\"m\"}},\"location\":\"ygjbmzyospspsh\",\"identity\":{\"tenantId\":\"kyjpmspbps\",\"principalId\":\"fppyogtieyujtvcz\",\"type\":\"UserAssigned\",\"userAssignedIdentities\":{\"paglqivbgk\":{\"clientId\":\"rxmunjdxvgln\",\"principalId\":\"xl\"},\"bcpzgpxtivh\":{\"clientId\":\"khpzvuqdflv\",\"principalId\":\"iypfp\"}}},\"id\":\"nidibgqjxg\",\"name\":\"n\",\"type\":\"hgovfgp\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        PaloAltoNetworksNgfwManager manager = PaloAltoNetworksNgfwManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        GlobalRulestackResource response = manager.globalRulestacks()
            .createOrUpdate("rytfmpcycil", new GlobalRulestackResourceInner().withLocation("wtlmjjyuo")
                .withIdentity(new AzureResourceManagerManagedIdentityProperties().withType(ManagedIdentityType.NONE)
                    .withUserAssignedIdentities(mapOf("aulk",
                        new AzureResourceManagerUserAssignedIdentity().withClientId("qbhsyrq")
                            .withPrincipalId("jqhden"),
                        "bpxuckpggqoweyi",
                        new AzureResourceManagerUserAssignedIdentity().withClientId("kdk").withPrincipalId("mjnnawtq"),
                        "xiw",
                        new AzureResourceManagerUserAssignedIdentity().withClientId("hlisngw")
                            .withPrincipalId("qqmpizruwnpqx"))))
                .withPanEtag("caykggnoxuz")
                .withPanLocation("ksxwpnd")
                .withScope(ScopeType.GLOBAL)
                .withAssociatedSubscriptions(Arrays.asList("znth", "twk"))
                .withDescription("osrxuzvoa")
                .withDefaultMode(DefaultMode.NONE)
                .withMinAppIdVersion("q")
                .withSecurityServices(new SecurityServices().withVulnerabilityProfile("bzahgxqd")
                    .withAntiSpywareProfile("rtltla")
                    .withAntiVirusProfile("ltzkatbhjmznnb")
                    .withUrlFilteringProfile("qeqala")
                    .withFileBlockingProfile("lagun")
                    .withDnsSubscription("gfebwlnb")
                    .withOutboundUnTrustCertificate("yreeudz")
                    .withOutboundTrustCertificate("vbpdqmjxlyyzglgo")),
                com.azure.core.util.Context.NONE);

        Assertions.assertEquals("ygjbmzyospspsh", response.location());
        Assertions.assertEquals(ManagedIdentityType.USER_ASSIGNED, response.identity().type());
        Assertions.assertEquals("rxmunjdxvgln",
            response.identity().userAssignedIdentities().get("paglqivbgk").clientId());
        Assertions.assertEquals("xl", response.identity().userAssignedIdentities().get("paglqivbgk").principalId());
        Assertions.assertEquals("atzv", response.panEtag());
        Assertions.assertEquals("glbyvi", response.panLocation());
        Assertions.assertEquals(ScopeType.GLOBAL, response.scope());
        Assertions.assertEquals("rxkjzwrgxffmshk", response.associatedSubscriptions().get(0));
        Assertions.assertEquals("izqaclnapxbiyg", response.description());
        Assertions.assertEquals(DefaultMode.FIREWALL, response.defaultMode());
        Assertions.assertEquals("knfsmfcttuxuuyil", response.minAppIdVersion());
        Assertions.assertEquals("quvre", response.securityServices().vulnerabilityProfile());
        Assertions.assertEquals("rnjhvsujztczytqj", response.securityServices().antiSpywareProfile());
        Assertions.assertEquals("h", response.securityServices().antiVirusProfile());
        Assertions.assertEquals("unfprnjletlxs", response.securityServices().urlFilteringProfile());
        Assertions.assertEquals("pddouifamowaziyn", response.securityServices().fileBlockingProfile());
        Assertions.assertEquals("lqwzdvpiwhxqsz", response.securityServices().dnsSubscription());
        Assertions.assertEquals("maajquhuxylr", response.securityServices().outboundUnTrustCertificate());
        Assertions.assertEquals("m", response.securityServices().outboundTrustCertificate());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
