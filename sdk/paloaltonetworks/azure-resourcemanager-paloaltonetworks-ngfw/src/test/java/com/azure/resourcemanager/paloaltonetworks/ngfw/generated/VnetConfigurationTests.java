// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.paloaltonetworks.ngfw.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.IpAddress;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.IpAddressSpace;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.VnetConfiguration;
import org.junit.jupiter.api.Assertions;

public final class VnetConfigurationTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        VnetConfiguration model = BinaryData.fromString(
            "{\"vnet\":{\"resourceId\":\"jbibg\",\"addressSpace\":\"fxumv\"},\"trustSubnet\":{\"resourceId\":\"luyovwxnbkfezzx\",\"addressSpace\":\"yhwzdgiruj\"},\"unTrustSubnet\":{\"resourceId\":\"bomvzzbtdcqv\",\"addressSpace\":\"iyujviylwdshfs\"},\"ipOfTrustSubnetForUdr\":{\"resourceId\":\"bgye\",\"address\":\"ymsgaojfmwnc\"}}")
            .toObject(VnetConfiguration.class);
        Assertions.assertEquals("jbibg", model.vnet().resourceId());
        Assertions.assertEquals("fxumv", model.vnet().addressSpace());
        Assertions.assertEquals("luyovwxnbkfezzx", model.trustSubnet().resourceId());
        Assertions.assertEquals("yhwzdgiruj", model.trustSubnet().addressSpace());
        Assertions.assertEquals("bomvzzbtdcqv", model.unTrustSubnet().resourceId());
        Assertions.assertEquals("iyujviylwdshfs", model.unTrustSubnet().addressSpace());
        Assertions.assertEquals("bgye", model.ipOfTrustSubnetForUdr().resourceId());
        Assertions.assertEquals("ymsgaojfmwnc", model.ipOfTrustSubnetForUdr().address());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        VnetConfiguration model
            = new VnetConfiguration().withVnet(new IpAddressSpace().withResourceId("jbibg").withAddressSpace("fxumv"))
                .withTrustSubnet(new IpAddressSpace().withResourceId("luyovwxnbkfezzx").withAddressSpace("yhwzdgiruj"))
                .withUnTrustSubnet(
                    new IpAddressSpace().withResourceId("bomvzzbtdcqv").withAddressSpace("iyujviylwdshfs"))
                .withIpOfTrustSubnetForUdr(new IpAddress().withResourceId("bgye").withAddress("ymsgaojfmwnc"));
        model = BinaryData.fromObject(model).toObject(VnetConfiguration.class);
        Assertions.assertEquals("jbibg", model.vnet().resourceId());
        Assertions.assertEquals("fxumv", model.vnet().addressSpace());
        Assertions.assertEquals("luyovwxnbkfezzx", model.trustSubnet().resourceId());
        Assertions.assertEquals("yhwzdgiruj", model.trustSubnet().addressSpace());
        Assertions.assertEquals("bomvzzbtdcqv", model.unTrustSubnet().resourceId());
        Assertions.assertEquals("iyujviylwdshfs", model.unTrustSubnet().addressSpace());
        Assertions.assertEquals("bgye", model.ipOfTrustSubnetForUdr().resourceId());
        Assertions.assertEquals("ymsgaojfmwnc", model.ipOfTrustSubnetForUdr().address());
    }
}
