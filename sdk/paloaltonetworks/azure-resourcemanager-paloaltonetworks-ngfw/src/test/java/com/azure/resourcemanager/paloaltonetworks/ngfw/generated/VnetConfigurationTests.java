// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.paloaltonetworks.ngfw.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.IpAddress;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.IpAddressSpace;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.VnetConfiguration;
import org.junit.jupiter.api.Assertions;

public final class VnetConfigurationTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        VnetConfiguration model = BinaryData.fromString(
            "{\"vnet\":{\"resourceId\":\"s\",\"addressSpace\":\"byrqufeg\"},\"trustSubnet\":{\"resourceId\":\"vwz\",\"addressSpace\":\"nhlmctlpdng\"},\"unTrustSubnet\":{\"resourceId\":\"vgbmhr\",\"addressSpace\":\"kw\"},\"ipOfTrustSubnetForUdr\":{\"resourceId\":\"jejveg\",\"address\":\"bpnaixexccbdre\"}}")
            .toObject(VnetConfiguration.class);
        Assertions.assertEquals("s", model.vnet().resourceId());
        Assertions.assertEquals("byrqufeg", model.vnet().addressSpace());
        Assertions.assertEquals("vwz", model.trustSubnet().resourceId());
        Assertions.assertEquals("nhlmctlpdng", model.trustSubnet().addressSpace());
        Assertions.assertEquals("vgbmhr", model.unTrustSubnet().resourceId());
        Assertions.assertEquals("kw", model.unTrustSubnet().addressSpace());
        Assertions.assertEquals("jejveg", model.ipOfTrustSubnetForUdr().resourceId());
        Assertions.assertEquals("bpnaixexccbdre", model.ipOfTrustSubnetForUdr().address());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        VnetConfiguration model
            = new VnetConfiguration().withVnet(new IpAddressSpace().withResourceId("s").withAddressSpace("byrqufeg"))
                .withTrustSubnet(new IpAddressSpace().withResourceId("vwz").withAddressSpace("nhlmctlpdng"))
                .withUnTrustSubnet(new IpAddressSpace().withResourceId("vgbmhr").withAddressSpace("kw"))
                .withIpOfTrustSubnetForUdr(new IpAddress().withResourceId("jejveg").withAddress("bpnaixexccbdre"));
        model = BinaryData.fromObject(model).toObject(VnetConfiguration.class);
        Assertions.assertEquals("s", model.vnet().resourceId());
        Assertions.assertEquals("byrqufeg", model.vnet().addressSpace());
        Assertions.assertEquals("vwz", model.trustSubnet().resourceId());
        Assertions.assertEquals("nhlmctlpdng", model.trustSubnet().addressSpace());
        Assertions.assertEquals("vgbmhr", model.unTrustSubnet().resourceId());
        Assertions.assertEquals("kw", model.unTrustSubnet().addressSpace());
        Assertions.assertEquals("jejveg", model.ipOfTrustSubnetForUdr().resourceId());
        Assertions.assertEquals("bpnaixexccbdre", model.ipOfTrustSubnetForUdr().address());
    }
}
