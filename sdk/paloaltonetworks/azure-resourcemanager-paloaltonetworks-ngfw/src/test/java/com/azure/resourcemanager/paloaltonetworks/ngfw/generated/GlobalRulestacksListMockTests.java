// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.paloaltonetworks.ngfw.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.paloaltonetworks.ngfw.PaloAltoNetworksNgfwManager;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.DefaultMode;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.GlobalRulestackResource;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.ManagedIdentityType;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.ScopeType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class GlobalRulestacksListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"panEtag\":\"hs\",\"panLocation\":\"koj\",\"scope\":\"LOCAL\",\"associatedSubscriptions\":[\"npdwr\",\"qafgfugsnnfhyet\",\"fypococtfjgti\"],\"description\":\"jvzuy\",\"defaultMode\":\"FIREWALL\",\"minAppIdVersion\":\"lmuowo\",\"provisioningState\":\"NotSpecified\",\"securityServices\":{\"vulnerabilityProfile\":\"ropions\",\"antiSpywareProfile\":\"nw\",\"antiVirusProfile\":\"gajinnixjawrtmj\",\"urlFilteringProfile\":\"myccx\",\"fileBlockingProfile\":\"hcoxov\",\"dnsSubscription\":\"khenlus\",\"outboundUnTrustCertificate\":\"rd\",\"outboundTrustCertificate\":\"xtxrdcqtjvidt\"}},\"location\":\"gepuslvyjtc\",\"identity\":{\"tenantId\":\"kasizie\",\"principalId\":\"uughtuqfecjxeyg\",\"type\":\"None\",\"userAssignedIdentities\":{\"rhwpus\":{\"clientId\":\"ic\",\"principalId\":\"ewmrswnjlxu\"}}},\"id\":\"baqehgpdoh\",\"name\":\"jqatucoigebxn\",\"type\":\"nwfepbnwg\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        PaloAltoNetworksNgfwManager manager = PaloAltoNetworksNgfwManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PagedIterable<GlobalRulestackResource> response
            = manager.globalRulestacks().list(com.azure.core.util.Context.NONE);

        Assertions.assertEquals("gepuslvyjtc", response.iterator().next().location());
        Assertions.assertEquals(ManagedIdentityType.NONE, response.iterator().next().identity().type());
        Assertions.assertEquals("ic",
            response.iterator().next().identity().userAssignedIdentities().get("rhwpus").clientId());
        Assertions.assertEquals("ewmrswnjlxu",
            response.iterator().next().identity().userAssignedIdentities().get("rhwpus").principalId());
        Assertions.assertEquals("hs", response.iterator().next().panEtag());
        Assertions.assertEquals("koj", response.iterator().next().panLocation());
        Assertions.assertEquals(ScopeType.LOCAL, response.iterator().next().scope());
        Assertions.assertEquals("npdwr", response.iterator().next().associatedSubscriptions().get(0));
        Assertions.assertEquals("jvzuy", response.iterator().next().description());
        Assertions.assertEquals(DefaultMode.FIREWALL, response.iterator().next().defaultMode());
        Assertions.assertEquals("lmuowo", response.iterator().next().minAppIdVersion());
        Assertions.assertEquals("ropions", response.iterator().next().securityServices().vulnerabilityProfile());
        Assertions.assertEquals("nw", response.iterator().next().securityServices().antiSpywareProfile());
        Assertions.assertEquals("gajinnixjawrtmj", response.iterator().next().securityServices().antiVirusProfile());
        Assertions.assertEquals("myccx", response.iterator().next().securityServices().urlFilteringProfile());
        Assertions.assertEquals("hcoxov", response.iterator().next().securityServices().fileBlockingProfile());
        Assertions.assertEquals("khenlus", response.iterator().next().securityServices().dnsSubscription());
        Assertions.assertEquals("rd", response.iterator().next().securityServices().outboundUnTrustCertificate());
        Assertions.assertEquals("xtxrdcqtjvidt",
            response.iterator().next().securityServices().outboundTrustCertificate());
    }
}
