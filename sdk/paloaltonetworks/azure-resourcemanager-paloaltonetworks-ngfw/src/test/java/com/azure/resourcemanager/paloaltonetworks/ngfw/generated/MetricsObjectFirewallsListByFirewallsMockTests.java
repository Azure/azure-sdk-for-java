// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.paloaltonetworks.ngfw.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.paloaltonetworks.ngfw.PaloAltoNetworksNgfwManager;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.MetricsObjectFirewallResource;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class MetricsObjectFirewallsListByFirewallsMockTests {
    @Test
    public void testListByFirewalls() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"applicationInsightsResourceId\":\"bcbcpz\",\"applicationInsightsConnectionString\":\"rpzeqac\",\"panEtag\":\"dtzmpype\",\"provisioningState\":\"Deleted\"},\"id\":\"zshnuqndaizup\",\"name\":\"kh\",\"type\":\"ytus\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        PaloAltoNetworksNgfwManager manager = PaloAltoNetworksNgfwManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PagedIterable<MetricsObjectFirewallResource> response
            = manager.metricsObjectFirewalls().listByFirewalls("fn", "hctmjtsgh", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("bcbcpz", response.iterator().next().applicationInsightsResourceId());
        Assertions.assertEquals("rpzeqac", response.iterator().next().applicationInsightsConnectionString());
        Assertions.assertEquals("dtzmpype", response.iterator().next().panEtag());
    }
}
