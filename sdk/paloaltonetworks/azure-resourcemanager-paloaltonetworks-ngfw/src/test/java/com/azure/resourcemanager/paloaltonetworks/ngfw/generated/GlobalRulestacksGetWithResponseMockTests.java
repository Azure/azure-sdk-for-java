// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.paloaltonetworks.ngfw.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.paloaltonetworks.ngfw.PaloAltoNetworksNgfwManager;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.DefaultMode;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.GlobalRulestackResource;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.ManagedIdentityType;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.ScopeType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class GlobalRulestacksGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"panEtag\":\"lkkshkbffmbmx\",\"panLocation\":\"rgywwp\",\"scope\":\"LOCAL\",\"associatedSubscriptions\":[\"ptfujgicgaaoept\",\"aqutdewemxswvruu\"],\"description\":\"zjgehkfkim\",\"defaultMode\":\"NONE\",\"minAppIdVersion\":\"okffqyinljqepqwh\",\"provisioningState\":\"Succeeded\",\"securityServices\":{\"vulnerabilityProfile\":\"stshiy\",\"antiSpywareProfile\":\"velfcldu\",\"antiVirusProfile\":\"birdsvuwcobiegs\",\"urlFilteringProfile\":\"ninwjizc\",\"fileBlockingProfile\":\"nghgshej\",\"dnsSubscription\":\"bxqmu\",\"outboundUnTrustCertificate\":\"xlxqzvn\",\"outboundTrustCertificate\":\"sbycucrwnamikz\"}},\"location\":\"brqbsmswzi\",\"identity\":{\"tenantId\":\"uhok\",\"principalId\":\"uswhvhczznvfbycj\",\"type\":\"None\",\"userAssignedIdentities\":{\"dvnoamldsehaohdj\":{\"clientId\":\"i\",\"principalId\":\"vumwmxqh\"},\"nje\":{\"clientId\":\"flzokxco\",\"principalId\":\"e\"},\"pnpbswveflocc\":{\"clientId\":\"gltsxoat\",\"principalId\":\"g\"}}},\"id\":\"mozi\",\"name\":\"m\",\"type\":\"pgawtxxpkyjcxcjx\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        PaloAltoNetworksNgfwManager manager = PaloAltoNetworksNgfwManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        GlobalRulestackResource response
            = manager.globalRulestacks().getWithResponse("deqvhp", com.azure.core.util.Context.NONE).getValue();

        Assertions.assertEquals("brqbsmswzi", response.location());
        Assertions.assertEquals(ManagedIdentityType.NONE, response.identity().type());
        Assertions.assertEquals("i", response.identity().userAssignedIdentities().get("dvnoamldsehaohdj").clientId());
        Assertions.assertEquals("vumwmxqh",
            response.identity().userAssignedIdentities().get("dvnoamldsehaohdj").principalId());
        Assertions.assertEquals("lkkshkbffmbmx", response.panEtag());
        Assertions.assertEquals("rgywwp", response.panLocation());
        Assertions.assertEquals(ScopeType.LOCAL, response.scope());
        Assertions.assertEquals("ptfujgicgaaoept", response.associatedSubscriptions().get(0));
        Assertions.assertEquals("zjgehkfkim", response.description());
        Assertions.assertEquals(DefaultMode.NONE, response.defaultMode());
        Assertions.assertEquals("okffqyinljqepqwh", response.minAppIdVersion());
        Assertions.assertEquals("stshiy", response.securityServices().vulnerabilityProfile());
        Assertions.assertEquals("velfcldu", response.securityServices().antiSpywareProfile());
        Assertions.assertEquals("birdsvuwcobiegs", response.securityServices().antiVirusProfile());
        Assertions.assertEquals("ninwjizc", response.securityServices().urlFilteringProfile());
        Assertions.assertEquals("nghgshej", response.securityServices().fileBlockingProfile());
        Assertions.assertEquals("bxqmu", response.securityServices().dnsSubscription());
        Assertions.assertEquals("xlxqzvn", response.securityServices().outboundUnTrustCertificate());
        Assertions.assertEquals("sbycucrwnamikz", response.securityServices().outboundTrustCertificate());
    }
}
