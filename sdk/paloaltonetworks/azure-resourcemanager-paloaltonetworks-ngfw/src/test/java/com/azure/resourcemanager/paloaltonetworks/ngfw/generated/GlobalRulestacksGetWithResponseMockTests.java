// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.paloaltonetworks.ngfw.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.paloaltonetworks.ngfw.PaloAltoNetworksNgfwManager;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.DefaultMode;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.GlobalRulestackResource;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.ManagedIdentityType;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.ScopeType;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class GlobalRulestacksGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr
            = "{\"properties\":{\"panEtag\":\"hsphaivmxyas\",\"panLocation\":\"vgsgzwywakoihkn\",\"scope\":\"GLOBAL\",\"associatedSubscriptions\":[\"mlj\",\"lnymzotqy\",\"yuzcbmqqvxmvw\",\"gtayxonsupeujlz\"],\"description\":\"hcvsqltnzoi\",\"defaultMode\":\"IPS\",\"minAppIdVersion\":\"gnxf\",\"provisioningState\":\"Canceled\",\"securityServices\":{\"vulnerabilityProfile\":\"p\",\"antiSpywareProfile\":\"xwdofdb\",\"antiVirusProfile\":\"qxeiiqbimhtmwwi\",\"urlFilteringProfile\":\"ehfqpofvwbc\",\"fileBlockingProfile\":\"embnkbw\",\"dnsSubscription\":\"vxkdivqihebwtswb\",\"outboundUnTrustCertificate\":\"wfmdurage\",\"outboundTrustCertificate\":\"zvcjfelisdjubggb\"}},\"location\":\"igkxkbsazga\",\"identity\":{\"tenantId\":\"cyrcmjdmspo\",\"principalId\":\"pv\",\"type\":\"None\",\"userAssignedIdentities\":{\"bzjedmstk\":{\"clientId\":\"ni\",\"principalId\":\"rz\"},\"ktwfa\":{\"clientId\":\"l\",\"principalId\":\"bcuiiz\"}}},\"id\":\"nv\",\"name\":\"dibmikostbzbkiwb\",\"type\":\"qnyophzfyls\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito.when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito.when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito.when(httpClient.send(httpRequest.capture(), Mockito.any())).thenReturn(Mono.defer(() -> {
            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
            return Mono.just(httpResponse);
        }));

        PaloAltoNetworksNgfwManager manager = PaloAltoNetworksNgfwManager.configure().withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        GlobalRulestackResource response
            = manager.globalRulestacks().getWithResponse("uamwabzxrvxc", com.azure.core.util.Context.NONE).getValue();

        Assertions.assertEquals("igkxkbsazga", response.location());
        Assertions.assertEquals(ManagedIdentityType.NONE, response.identity().type());
        Assertions.assertEquals("ni", response.identity().userAssignedIdentities().get("bzjedmstk").clientId());
        Assertions.assertEquals("rz", response.identity().userAssignedIdentities().get("bzjedmstk").principalId());
        Assertions.assertEquals("hsphaivmxyas", response.panEtag());
        Assertions.assertEquals("vgsgzwywakoihkn", response.panLocation());
        Assertions.assertEquals(ScopeType.GLOBAL, response.scope());
        Assertions.assertEquals("mlj", response.associatedSubscriptions().get(0));
        Assertions.assertEquals("hcvsqltnzoi", response.description());
        Assertions.assertEquals(DefaultMode.IPS, response.defaultMode());
        Assertions.assertEquals("gnxf", response.minAppIdVersion());
        Assertions.assertEquals("p", response.securityServices().vulnerabilityProfile());
        Assertions.assertEquals("xwdofdb", response.securityServices().antiSpywareProfile());
        Assertions.assertEquals("qxeiiqbimhtmwwi", response.securityServices().antiVirusProfile());
        Assertions.assertEquals("ehfqpofvwbc", response.securityServices().urlFilteringProfile());
        Assertions.assertEquals("embnkbw", response.securityServices().fileBlockingProfile());
        Assertions.assertEquals("vxkdivqihebwtswb", response.securityServices().dnsSubscription());
        Assertions.assertEquals("wfmdurage", response.securityServices().outboundUnTrustCertificate());
        Assertions.assertEquals("zvcjfelisdjubggb", response.securityServices().outboundTrustCertificate());
    }
}
