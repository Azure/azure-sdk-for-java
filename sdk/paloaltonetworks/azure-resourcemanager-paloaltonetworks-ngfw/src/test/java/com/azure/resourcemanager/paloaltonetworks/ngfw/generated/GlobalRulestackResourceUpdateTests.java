// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.paloaltonetworks.ngfw.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.AzureResourceManagerManagedIdentityProperties;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.AzureResourceManagerUserAssignedIdentity;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.DefaultMode;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.GlobalRulestackResourceUpdate;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.GlobalRulestackResourceUpdateProperties;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.ManagedIdentityType;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.ScopeType;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.SecurityServices;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class GlobalRulestackResourceUpdateTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        GlobalRulestackResourceUpdate model = BinaryData.fromString(
            "{\"location\":\"aqsqsycbkbfk\",\"identity\":{\"tenantId\":\"dkexxppofm\",\"principalId\":\"x\",\"type\":\"SystemAssigned,UserAssigned\",\"userAssignedIdentities\":{\"bqe\":{\"clientId\":\"ddtocjjxhvp\",\"principalId\":\"uexhdzx\"}}},\"properties\":{\"panEtag\":\"xqbzvddntwnd\",\"panLocation\":\"cbtwnpzaoqvuh\",\"scope\":\"GLOBAL\",\"associatedSubscriptions\":[\"cyddglmjthjqk\",\"pyeicxm\"],\"description\":\"iwqvhkh\",\"defaultMode\":\"IPS\",\"minAppIdVersion\":\"gdtopbobjogh\",\"securityServices\":{\"vulnerabilityProfile\":\"u\",\"antiSpywareProfile\":\"a\",\"antiVirusProfile\":\"rzayv\",\"urlFilteringProfile\":\"pgvdf\",\"fileBlockingProfile\":\"otkftutqxlngx\",\"dnsSubscription\":\"fgugnxkrxdqmid\",\"outboundUnTrustCertificate\":\"hzrvqd\",\"outboundTrustCertificate\":\"bhj\"}}}")
            .toObject(GlobalRulestackResourceUpdate.class);
        Assertions.assertEquals("aqsqsycbkbfk", model.location());
        Assertions.assertEquals(ManagedIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED, model.identity().type());
        Assertions.assertEquals("ddtocjjxhvp", model.identity().userAssignedIdentities().get("bqe").clientId());
        Assertions.assertEquals("uexhdzx", model.identity().userAssignedIdentities().get("bqe").principalId());
        Assertions.assertEquals("xqbzvddntwnd", model.properties().panEtag());
        Assertions.assertEquals("cbtwnpzaoqvuh", model.properties().panLocation());
        Assertions.assertEquals(ScopeType.GLOBAL, model.properties().scope());
        Assertions.assertEquals("cyddglmjthjqk", model.properties().associatedSubscriptions().get(0));
        Assertions.assertEquals("iwqvhkh", model.properties().description());
        Assertions.assertEquals(DefaultMode.IPS, model.properties().defaultMode());
        Assertions.assertEquals("gdtopbobjogh", model.properties().minAppIdVersion());
        Assertions.assertEquals("u", model.properties().securityServices().vulnerabilityProfile());
        Assertions.assertEquals("a", model.properties().securityServices().antiSpywareProfile());
        Assertions.assertEquals("rzayv", model.properties().securityServices().antiVirusProfile());
        Assertions.assertEquals("pgvdf", model.properties().securityServices().urlFilteringProfile());
        Assertions.assertEquals("otkftutqxlngx", model.properties().securityServices().fileBlockingProfile());
        Assertions.assertEquals("fgugnxkrxdqmid", model.properties().securityServices().dnsSubscription());
        Assertions.assertEquals("hzrvqd", model.properties().securityServices().outboundUnTrustCertificate());
        Assertions.assertEquals("bhj", model.properties().securityServices().outboundTrustCertificate());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        GlobalRulestackResourceUpdate model = new GlobalRulestackResourceUpdate().withLocation("aqsqsycbkbfk")
            .withIdentity(new AzureResourceManagerManagedIdentityProperties()
                .withType(ManagedIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED)
                .withUserAssignedIdentities(mapOf("bqe",
                    new AzureResourceManagerUserAssignedIdentity().withClientId("ddtocjjxhvp")
                        .withPrincipalId("uexhdzx"))))
            .withProperties(new GlobalRulestackResourceUpdateProperties().withPanEtag("xqbzvddntwnd")
                .withPanLocation("cbtwnpzaoqvuh").withScope(ScopeType.GLOBAL)
                .withAssociatedSubscriptions(Arrays.asList("cyddglmjthjqk", "pyeicxm")).withDescription("iwqvhkh")
                .withDefaultMode(DefaultMode.IPS).withMinAppIdVersion("gdtopbobjogh")
                .withSecurityServices(new SecurityServices().withVulnerabilityProfile("u").withAntiSpywareProfile("a")
                    .withAntiVirusProfile("rzayv").withUrlFilteringProfile("pgvdf")
                    .withFileBlockingProfile("otkftutqxlngx").withDnsSubscription("fgugnxkrxdqmid")
                    .withOutboundUnTrustCertificate("hzrvqd").withOutboundTrustCertificate("bhj")));
        model = BinaryData.fromObject(model).toObject(GlobalRulestackResourceUpdate.class);
        Assertions.assertEquals("aqsqsycbkbfk", model.location());
        Assertions.assertEquals(ManagedIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED, model.identity().type());
        Assertions.assertEquals("ddtocjjxhvp", model.identity().userAssignedIdentities().get("bqe").clientId());
        Assertions.assertEquals("uexhdzx", model.identity().userAssignedIdentities().get("bqe").principalId());
        Assertions.assertEquals("xqbzvddntwnd", model.properties().panEtag());
        Assertions.assertEquals("cbtwnpzaoqvuh", model.properties().panLocation());
        Assertions.assertEquals(ScopeType.GLOBAL, model.properties().scope());
        Assertions.assertEquals("cyddglmjthjqk", model.properties().associatedSubscriptions().get(0));
        Assertions.assertEquals("iwqvhkh", model.properties().description());
        Assertions.assertEquals(DefaultMode.IPS, model.properties().defaultMode());
        Assertions.assertEquals("gdtopbobjogh", model.properties().minAppIdVersion());
        Assertions.assertEquals("u", model.properties().securityServices().vulnerabilityProfile());
        Assertions.assertEquals("a", model.properties().securityServices().antiSpywareProfile());
        Assertions.assertEquals("rzayv", model.properties().securityServices().antiVirusProfile());
        Assertions.assertEquals("pgvdf", model.properties().securityServices().urlFilteringProfile());
        Assertions.assertEquals("otkftutqxlngx", model.properties().securityServices().fileBlockingProfile());
        Assertions.assertEquals("fgugnxkrxdqmid", model.properties().securityServices().dnsSubscription());
        Assertions.assertEquals("hzrvqd", model.properties().securityServices().outboundUnTrustCertificate());
        Assertions.assertEquals("bhj", model.properties().securityServices().outboundTrustCertificate());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
