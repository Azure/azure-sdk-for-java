// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.paloaltonetworks.ngfw.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.AzureResourceManagerManagedIdentityProperties;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.AzureResourceManagerUserAssignedIdentity;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.DefaultMode;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.GlobalRulestackResourceUpdate;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.GlobalRulestackResourceUpdateProperties;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.ManagedIdentityType;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.ScopeType;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.SecurityServices;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class GlobalRulestackResourceUpdateTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        GlobalRulestackResourceUpdate model = BinaryData.fromString(
            "{\"location\":\"qxhocdgeablgphut\",\"identity\":{\"tenantId\":\"dvkaozw\",\"principalId\":\"ftyhxhurokf\",\"type\":\"SystemAssigned\",\"userAssignedIdentities\":{\"lryplwckbasyy\":{\"clientId\":\"niwpwcukj\",\"principalId\":\"giawx\"},\"nqgoulzndli\":{\"clientId\":\"ddhsgcbacphe\",\"principalId\":\"ot\"},\"qqedqytbciqfou\":{\"clientId\":\"yqkgfg\",\"principalId\":\"madgakeqsrxyb\"}}},\"properties\":{\"panEtag\":\"mnkzsmod\",\"panLocation\":\"lougpbkw\",\"scope\":\"GLOBAL\",\"associatedSubscriptions\":[\"uqktap\",\"pwgcuertu\"],\"description\":\"dosvqwhbmdgbbjf\",\"defaultMode\":\"IPS\",\"minAppIdVersion\":\"bmbexppbhtqqro\",\"securityServices\":{\"vulnerabilityProfile\":\"fpsalgbqu\",\"antiSpywareProfile\":\"gjyjgzjaoyfhrtxi\",\"antiVirusProfile\":\"erkujys\",\"urlFilteringProfile\":\"eju\",\"fileBlockingProfile\":\"qawrlyxwj\",\"dnsSubscription\":\"prbnwbxgjvtbv\",\"outboundUnTrustCertificate\":\"sszdnru\",\"outboundTrustCertificate\":\"guhmuouqfpr\"}}}")
            .toObject(GlobalRulestackResourceUpdate.class);
        Assertions.assertEquals("qxhocdgeablgphut", model.location());
        Assertions.assertEquals(ManagedIdentityType.SYSTEM_ASSIGNED, model.identity().type());
        Assertions.assertEquals("niwpwcukj", model.identity().userAssignedIdentities().get("lryplwckbasyy").clientId());
        Assertions.assertEquals("giawx", model.identity().userAssignedIdentities().get("lryplwckbasyy").principalId());
        Assertions.assertEquals("mnkzsmod", model.properties().panEtag());
        Assertions.assertEquals("lougpbkw", model.properties().panLocation());
        Assertions.assertEquals(ScopeType.GLOBAL, model.properties().scope());
        Assertions.assertEquals("uqktap", model.properties().associatedSubscriptions().get(0));
        Assertions.assertEquals("dosvqwhbmdgbbjf", model.properties().description());
        Assertions.assertEquals(DefaultMode.IPS, model.properties().defaultMode());
        Assertions.assertEquals("bmbexppbhtqqro", model.properties().minAppIdVersion());
        Assertions.assertEquals("fpsalgbqu", model.properties().securityServices().vulnerabilityProfile());
        Assertions.assertEquals("gjyjgzjaoyfhrtxi", model.properties().securityServices().antiSpywareProfile());
        Assertions.assertEquals("erkujys", model.properties().securityServices().antiVirusProfile());
        Assertions.assertEquals("eju", model.properties().securityServices().urlFilteringProfile());
        Assertions.assertEquals("qawrlyxwj", model.properties().securityServices().fileBlockingProfile());
        Assertions.assertEquals("prbnwbxgjvtbv", model.properties().securityServices().dnsSubscription());
        Assertions.assertEquals("sszdnru", model.properties().securityServices().outboundUnTrustCertificate());
        Assertions.assertEquals("guhmuouqfpr", model.properties().securityServices().outboundTrustCertificate());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        GlobalRulestackResourceUpdate model = new GlobalRulestackResourceUpdate().withLocation("qxhocdgeablgphut")
            .withIdentity(new AzureResourceManagerManagedIdentityProperties()
                .withType(ManagedIdentityType.SYSTEM_ASSIGNED)
                .withUserAssignedIdentities(mapOf("lryplwckbasyy",
                    new AzureResourceManagerUserAssignedIdentity().withClientId("niwpwcukj").withPrincipalId("giawx"),
                    "nqgoulzndli",
                    new AzureResourceManagerUserAssignedIdentity().withClientId("ddhsgcbacphe").withPrincipalId("ot"),
                    "qqedqytbciqfou",
                    new AzureResourceManagerUserAssignedIdentity().withClientId("yqkgfg")
                        .withPrincipalId("madgakeqsrxyb"))))
            .withProperties(new GlobalRulestackResourceUpdateProperties().withPanEtag("mnkzsmod")
                .withPanLocation("lougpbkw")
                .withScope(ScopeType.GLOBAL)
                .withAssociatedSubscriptions(Arrays.asList("uqktap", "pwgcuertu"))
                .withDescription("dosvqwhbmdgbbjf")
                .withDefaultMode(DefaultMode.IPS)
                .withMinAppIdVersion("bmbexppbhtqqro")
                .withSecurityServices(new SecurityServices().withVulnerabilityProfile("fpsalgbqu")
                    .withAntiSpywareProfile("gjyjgzjaoyfhrtxi")
                    .withAntiVirusProfile("erkujys")
                    .withUrlFilteringProfile("eju")
                    .withFileBlockingProfile("qawrlyxwj")
                    .withDnsSubscription("prbnwbxgjvtbv")
                    .withOutboundUnTrustCertificate("sszdnru")
                    .withOutboundTrustCertificate("guhmuouqfpr")));
        model = BinaryData.fromObject(model).toObject(GlobalRulestackResourceUpdate.class);
        Assertions.assertEquals("qxhocdgeablgphut", model.location());
        Assertions.assertEquals(ManagedIdentityType.SYSTEM_ASSIGNED, model.identity().type());
        Assertions.assertEquals("niwpwcukj", model.identity().userAssignedIdentities().get("lryplwckbasyy").clientId());
        Assertions.assertEquals("giawx", model.identity().userAssignedIdentities().get("lryplwckbasyy").principalId());
        Assertions.assertEquals("mnkzsmod", model.properties().panEtag());
        Assertions.assertEquals("lougpbkw", model.properties().panLocation());
        Assertions.assertEquals(ScopeType.GLOBAL, model.properties().scope());
        Assertions.assertEquals("uqktap", model.properties().associatedSubscriptions().get(0));
        Assertions.assertEquals("dosvqwhbmdgbbjf", model.properties().description());
        Assertions.assertEquals(DefaultMode.IPS, model.properties().defaultMode());
        Assertions.assertEquals("bmbexppbhtqqro", model.properties().minAppIdVersion());
        Assertions.assertEquals("fpsalgbqu", model.properties().securityServices().vulnerabilityProfile());
        Assertions.assertEquals("gjyjgzjaoyfhrtxi", model.properties().securityServices().antiSpywareProfile());
        Assertions.assertEquals("erkujys", model.properties().securityServices().antiVirusProfile());
        Assertions.assertEquals("eju", model.properties().securityServices().urlFilteringProfile());
        Assertions.assertEquals("qawrlyxwj", model.properties().securityServices().fileBlockingProfile());
        Assertions.assertEquals("prbnwbxgjvtbv", model.properties().securityServices().dnsSubscription());
        Assertions.assertEquals("sszdnru", model.properties().securityServices().outboundUnTrustCertificate());
        Assertions.assertEquals("guhmuouqfpr", model.properties().securityServices().outboundTrustCertificate());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
