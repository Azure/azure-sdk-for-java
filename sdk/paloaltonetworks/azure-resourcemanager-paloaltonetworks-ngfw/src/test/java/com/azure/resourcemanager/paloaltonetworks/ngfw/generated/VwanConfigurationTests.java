// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.paloaltonetworks.ngfw.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.IpAddress;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.IpAddressSpace;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.VwanConfiguration;
import org.junit.jupiter.api.Assertions;

public final class VwanConfigurationTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        VwanConfiguration model = BinaryData.fromString(
            "{\"networkVirtualApplianceId\":\"mrsreuzvxurisjnh\",\"vHub\":{\"resourceId\":\"txifqj\",\"addressSpace\":\"xmrhu\"},\"trustSubnet\":{\"resourceId\":\"pcesutrg\",\"addressSpace\":\"pauutpw\"},\"unTrustSubnet\":{\"resourceId\":\"ih\",\"addressSpace\":\"qg\"},\"ipOfTrustSubnetForUdr\":{\"resourceId\":\"nfqn\",\"address\":\"ypsxjvfoim\"}}")
            .toObject(VwanConfiguration.class);
        Assertions.assertEquals("mrsreuzvxurisjnh", model.networkVirtualApplianceId());
        Assertions.assertEquals("txifqj", model.vHub().resourceId());
        Assertions.assertEquals("xmrhu", model.vHub().addressSpace());
        Assertions.assertEquals("pcesutrg", model.trustSubnet().resourceId());
        Assertions.assertEquals("pauutpw", model.trustSubnet().addressSpace());
        Assertions.assertEquals("ih", model.unTrustSubnet().resourceId());
        Assertions.assertEquals("qg", model.unTrustSubnet().addressSpace());
        Assertions.assertEquals("nfqn", model.ipOfTrustSubnetForUdr().resourceId());
        Assertions.assertEquals("ypsxjvfoim", model.ipOfTrustSubnetForUdr().address());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        VwanConfiguration model = new VwanConfiguration().withNetworkVirtualApplianceId("mrsreuzvxurisjnh")
            .withVHub(new IpAddressSpace().withResourceId("txifqj").withAddressSpace("xmrhu"))
            .withTrustSubnet(new IpAddressSpace().withResourceId("pcesutrg").withAddressSpace("pauutpw"))
            .withUnTrustSubnet(new IpAddressSpace().withResourceId("ih").withAddressSpace("qg"))
            .withIpOfTrustSubnetForUdr(new IpAddress().withResourceId("nfqn").withAddress("ypsxjvfoim"));
        model = BinaryData.fromObject(model).toObject(VwanConfiguration.class);
        Assertions.assertEquals("mrsreuzvxurisjnh", model.networkVirtualApplianceId());
        Assertions.assertEquals("txifqj", model.vHub().resourceId());
        Assertions.assertEquals("xmrhu", model.vHub().addressSpace());
        Assertions.assertEquals("pcesutrg", model.trustSubnet().resourceId());
        Assertions.assertEquals("pauutpw", model.trustSubnet().addressSpace());
        Assertions.assertEquals("ih", model.unTrustSubnet().resourceId());
        Assertions.assertEquals("qg", model.unTrustSubnet().addressSpace());
        Assertions.assertEquals("nfqn", model.ipOfTrustSubnetForUdr().resourceId());
        Assertions.assertEquals("ypsxjvfoim", model.ipOfTrustSubnetForUdr().address());
    }
}
