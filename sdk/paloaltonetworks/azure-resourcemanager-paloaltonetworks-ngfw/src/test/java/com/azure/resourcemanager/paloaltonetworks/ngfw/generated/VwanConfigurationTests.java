// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.paloaltonetworks.ngfw.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.IpAddress;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.IpAddressSpace;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.VwanConfiguration;
import org.junit.jupiter.api.Assertions;

public final class VwanConfigurationTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        VwanConfiguration model = BinaryData.fromString(
            "{\"networkVirtualApplianceId\":\"ppyostronzmyhgf\",\"vHub\":{\"resourceId\":\"nsxkmcwaekrrjr\",\"addressSpace\":\"fxtsgum\"},\"trustSubnet\":{\"resourceId\":\"lik\",\"addressSpace\":\"wslolbqp\"},\"unTrustSubnet\":{\"resourceId\":\"lmv\",\"addressSpace\":\"lfktgplcrpwjxe\"},\"ipOfTrustSubnetForUdr\":{\"resourceId\":\"igbrnjw\",\"address\":\"kpnb\"}}")
            .toObject(VwanConfiguration.class);
        Assertions.assertEquals("ppyostronzmyhgf", model.networkVirtualApplianceId());
        Assertions.assertEquals("nsxkmcwaekrrjr", model.vHub().resourceId());
        Assertions.assertEquals("fxtsgum", model.vHub().addressSpace());
        Assertions.assertEquals("lik", model.trustSubnet().resourceId());
        Assertions.assertEquals("wslolbqp", model.trustSubnet().addressSpace());
        Assertions.assertEquals("lmv", model.unTrustSubnet().resourceId());
        Assertions.assertEquals("lfktgplcrpwjxe", model.unTrustSubnet().addressSpace());
        Assertions.assertEquals("igbrnjw", model.ipOfTrustSubnetForUdr().resourceId());
        Assertions.assertEquals("kpnb", model.ipOfTrustSubnetForUdr().address());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        VwanConfiguration model = new VwanConfiguration().withNetworkVirtualApplianceId("ppyostronzmyhgf")
            .withVHub(new IpAddressSpace().withResourceId("nsxkmcwaekrrjr").withAddressSpace("fxtsgum"))
            .withTrustSubnet(new IpAddressSpace().withResourceId("lik").withAddressSpace("wslolbqp"))
            .withUnTrustSubnet(new IpAddressSpace().withResourceId("lmv").withAddressSpace("lfktgplcrpwjxe"))
            .withIpOfTrustSubnetForUdr(new IpAddress().withResourceId("igbrnjw").withAddress("kpnb"));
        model = BinaryData.fromObject(model).toObject(VwanConfiguration.class);
        Assertions.assertEquals("ppyostronzmyhgf", model.networkVirtualApplianceId());
        Assertions.assertEquals("nsxkmcwaekrrjr", model.vHub().resourceId());
        Assertions.assertEquals("fxtsgum", model.vHub().addressSpace());
        Assertions.assertEquals("lik", model.trustSubnet().resourceId());
        Assertions.assertEquals("wslolbqp", model.trustSubnet().addressSpace());
        Assertions.assertEquals("lmv", model.unTrustSubnet().resourceId());
        Assertions.assertEquals("lfktgplcrpwjxe", model.unTrustSubnet().addressSpace());
        Assertions.assertEquals("igbrnjw", model.ipOfTrustSubnetForUdr().resourceId());
        Assertions.assertEquals("kpnb", model.ipOfTrustSubnetForUdr().address());
    }
}
