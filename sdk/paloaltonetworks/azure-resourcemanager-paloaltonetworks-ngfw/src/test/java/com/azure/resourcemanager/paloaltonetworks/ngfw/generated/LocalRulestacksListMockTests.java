// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.paloaltonetworks.ngfw.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.paloaltonetworks.ngfw.PaloAltoNetworksNgfwManager;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.DefaultMode;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.LocalRulestackResource;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.ManagedIdentityType;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.ScopeType;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class LocalRulestacksListMockTests {
    @Test
    public void testList() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"value\":[{\"properties\":{\"panEtag\":\"nmg\",\"panLocation\":\"ouxddbhfhpfpazj\",\"scope\":\"LOCAL\",\"associatedSubscriptions\":[\"xhpdulontacnpqwt\",\"htuevrhrljy\",\"ogwxhnsduugwb\",\"reur\"],\"description\":\"kfuarenlv\",\"defaultMode\":\"NONE\",\"minAppIdVersion\":\"lnvnafvvkyfedev\",\"provisioningState\":\"Creating\",\"securityServices\":{\"vulnerabilityProfile\":\"cqxypokkhminq\",\"antiSpywareProfile\":\"mczngn\",\"antiVirusProfile\":\"xxewu\",\"urlFilteringProfile\":\"nvudbchaqdtvqecr\",\"fileBlockingProfile\":\"tmxxdtddmflhuy\",\"dnsSubscription\":\"zv\",\"outboundUnTrustCertificate\":\"napxbannovv\",\"outboundTrustCertificate\":\"czytprwn\"}},\"identity\":{\"tenantId\":\"oevytlyokr\",\"principalId\":\"o\",\"type\":\"SystemAssigned,UserAssigned\",\"userAssignedIdentities\":{}},\"location\":\"sasbcrymodizrx\",\"tags\":{\"mkmlmvevfx\":\"bdxnaz\",\"hbzxli\":\"op\",\"tfgxqbawpcb\":\"hrdd\",\"napqo\":\"nzqcy\"},\"id\":\"yuicdhzbdy\",\"name\":\"wwgbdv\",\"type\":\"bid\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        PaloAltoNetworksNgfwManager manager =
            PaloAltoNetworksNgfwManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<LocalRulestackResource> response =
            manager.localRulestacks().list(com.azure.core.util.Context.NONE);

        Assertions.assertEquals("sasbcrymodizrx", response.iterator().next().location());
        Assertions.assertEquals("bdxnaz", response.iterator().next().tags().get("mkmlmvevfx"));
        Assertions
            .assertEquals(
                ManagedIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED, response.iterator().next().identity().type());
        Assertions.assertEquals("nmg", response.iterator().next().panEtag());
        Assertions.assertEquals("ouxddbhfhpfpazj", response.iterator().next().panLocation());
        Assertions.assertEquals(ScopeType.LOCAL, response.iterator().next().scope());
        Assertions.assertEquals("xhpdulontacnpqwt", response.iterator().next().associatedSubscriptions().get(0));
        Assertions.assertEquals("kfuarenlv", response.iterator().next().description());
        Assertions.assertEquals(DefaultMode.NONE, response.iterator().next().defaultMode());
        Assertions.assertEquals("lnvnafvvkyfedev", response.iterator().next().minAppIdVersion());
        Assertions.assertEquals("cqxypokkhminq", response.iterator().next().securityServices().vulnerabilityProfile());
        Assertions.assertEquals("mczngn", response.iterator().next().securityServices().antiSpywareProfile());
        Assertions.assertEquals("xxewu", response.iterator().next().securityServices().antiVirusProfile());
        Assertions
            .assertEquals("nvudbchaqdtvqecr", response.iterator().next().securityServices().urlFilteringProfile());
        Assertions.assertEquals("tmxxdtddmflhuy", response.iterator().next().securityServices().fileBlockingProfile());
        Assertions.assertEquals("zv", response.iterator().next().securityServices().dnsSubscription());
        Assertions
            .assertEquals("napxbannovv", response.iterator().next().securityServices().outboundUnTrustCertificate());
        Assertions.assertEquals("czytprwn", response.iterator().next().securityServices().outboundTrustCertificate());
    }
}
