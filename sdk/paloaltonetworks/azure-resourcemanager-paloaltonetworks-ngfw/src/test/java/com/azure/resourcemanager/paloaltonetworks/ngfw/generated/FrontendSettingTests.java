// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.paloaltonetworks.ngfw.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.EndpointConfiguration;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.FrontendSetting;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.IpAddress;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.ProtocolType;
import org.junit.jupiter.api.Assertions;

public final class FrontendSettingTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        FrontendSetting model = BinaryData.fromString(
            "{\"name\":\"hbejdznxcvdsrhnj\",\"protocol\":\"TCP\",\"frontendConfiguration\":{\"port\":\"olvtnovqfzge\",\"address\":{\"resourceId\":\"dftuljltduce\",\"address\":\"tmczuomejwcwwqi\"}},\"backendConfiguration\":{\"port\":\"knssxmojm\",\"address\":{\"resourceId\":\"p\",\"address\":\"prvkwcfzqljyxgtc\"}}}")
            .toObject(FrontendSetting.class);
        Assertions.assertEquals("hbejdznxcvdsrhnj", model.name());
        Assertions.assertEquals(ProtocolType.TCP, model.protocol());
        Assertions.assertEquals("olvtnovqfzge", model.frontendConfiguration().port());
        Assertions.assertEquals("dftuljltduce", model.frontendConfiguration().address().resourceId());
        Assertions.assertEquals("tmczuomejwcwwqi", model.frontendConfiguration().address().address());
        Assertions.assertEquals("knssxmojm", model.backendConfiguration().port());
        Assertions.assertEquals("p", model.backendConfiguration().address().resourceId());
        Assertions.assertEquals("prvkwcfzqljyxgtc", model.backendConfiguration().address().address());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        FrontendSetting model = new FrontendSetting().withName("hbejdznxcvdsrhnj")
            .withProtocol(ProtocolType.TCP)
            .withFrontendConfiguration(new EndpointConfiguration().withPort("olvtnovqfzge")
                .withAddress(new IpAddress().withResourceId("dftuljltduce").withAddress("tmczuomejwcwwqi")))
            .withBackendConfiguration(new EndpointConfiguration().withPort("knssxmojm")
                .withAddress(new IpAddress().withResourceId("p").withAddress("prvkwcfzqljyxgtc")));
        model = BinaryData.fromObject(model).toObject(FrontendSetting.class);
        Assertions.assertEquals("hbejdznxcvdsrhnj", model.name());
        Assertions.assertEquals(ProtocolType.TCP, model.protocol());
        Assertions.assertEquals("olvtnovqfzge", model.frontendConfiguration().port());
        Assertions.assertEquals("dftuljltduce", model.frontendConfiguration().address().resourceId());
        Assertions.assertEquals("tmczuomejwcwwqi", model.frontendConfiguration().address().address());
        Assertions.assertEquals("knssxmojm", model.backendConfiguration().port());
        Assertions.assertEquals("p", model.backendConfiguration().address().resourceId());
        Assertions.assertEquals("prvkwcfzqljyxgtc", model.backendConfiguration().address().address());
    }
}
