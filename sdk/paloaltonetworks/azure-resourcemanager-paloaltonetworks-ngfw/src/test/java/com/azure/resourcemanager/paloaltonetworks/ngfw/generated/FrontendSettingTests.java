// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.paloaltonetworks.ngfw.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.EndpointConfiguration;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.FrontendSetting;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.IpAddress;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.ProtocolType;
import org.junit.jupiter.api.Assertions;

public final class FrontendSettingTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        FrontendSetting model = BinaryData.fromString(
            "{\"name\":\"kixqtnqtt\",\"protocol\":\"UDP\",\"frontendConfiguration\":{\"port\":\"lwfffi\",\"address\":{\"resourceId\":\"pjpqqmtedltmmji\",\"address\":\"eozphv\"}},\"backendConfiguration\":{\"port\":\"auyqncygupkv\",\"address\":{\"resourceId\":\"mdscwxqupev\",\"address\":\"f\"}}}")
            .toObject(FrontendSetting.class);
        Assertions.assertEquals("kixqtnqtt", model.name());
        Assertions.assertEquals(ProtocolType.UDP, model.protocol());
        Assertions.assertEquals("lwfffi", model.frontendConfiguration().port());
        Assertions.assertEquals("pjpqqmtedltmmji", model.frontendConfiguration().address().resourceId());
        Assertions.assertEquals("eozphv", model.frontendConfiguration().address().address());
        Assertions.assertEquals("auyqncygupkv", model.backendConfiguration().port());
        Assertions.assertEquals("mdscwxqupev", model.backendConfiguration().address().resourceId());
        Assertions.assertEquals("f", model.backendConfiguration().address().address());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        FrontendSetting model = new FrontendSetting().withName("kixqtnqtt").withProtocol(ProtocolType.UDP)
            .withFrontendConfiguration(new EndpointConfiguration().withPort("lwfffi")
                .withAddress(new IpAddress().withResourceId("pjpqqmtedltmmji").withAddress("eozphv")))
            .withBackendConfiguration(new EndpointConfiguration().withPort("auyqncygupkv")
                .withAddress(new IpAddress().withResourceId("mdscwxqupev").withAddress("f")));
        model = BinaryData.fromObject(model).toObject(FrontendSetting.class);
        Assertions.assertEquals("kixqtnqtt", model.name());
        Assertions.assertEquals(ProtocolType.UDP, model.protocol());
        Assertions.assertEquals("lwfffi", model.frontendConfiguration().port());
        Assertions.assertEquals("pjpqqmtedltmmji", model.frontendConfiguration().address().resourceId());
        Assertions.assertEquals("eozphv", model.frontendConfiguration().address().address());
        Assertions.assertEquals("auyqncygupkv", model.backendConfiguration().port());
        Assertions.assertEquals("mdscwxqupev", model.backendConfiguration().address().resourceId());
        Assertions.assertEquals("f", model.backendConfiguration().address().address());
    }
}
