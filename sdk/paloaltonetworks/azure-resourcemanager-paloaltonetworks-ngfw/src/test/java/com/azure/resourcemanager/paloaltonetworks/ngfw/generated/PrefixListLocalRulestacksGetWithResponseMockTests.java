// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.paloaltonetworks.ngfw.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.paloaltonetworks.ngfw.PaloAltoNetworksNgfwManager;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.PrefixListResource;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class PrefixListLocalRulestacksGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"description\":\"ios\",\"prefixList\":[\"cyvaifppuacvfy\",\"owpsfxt\",\"dhsoymhpv\",\"yqfttehdpboujst\"],\"etag\":\"vvdshxcdedsue\",\"auditComment\":\"gnxcgjtfrnquktr\",\"provisioningState\":\"Creating\"},\"id\":\"nlrxsmyltrwntfmt\",\"name\":\"g\",\"type\":\"jdxwnazkurrdre\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        PaloAltoNetworksNgfwManager manager = PaloAltoNetworksNgfwManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PrefixListResource response = manager.prefixListLocalRulestacks()
            .getWithResponse("ij", "ykwlefksxqceazf", "xgnmqvzvluyq", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("ios", response.description());
        Assertions.assertEquals("cyvaifppuacvfy", response.prefixList().get(0));
        Assertions.assertEquals("vvdshxcdedsue", response.etag());
        Assertions.assertEquals("gnxcgjtfrnquktr", response.auditComment());
    }
}
