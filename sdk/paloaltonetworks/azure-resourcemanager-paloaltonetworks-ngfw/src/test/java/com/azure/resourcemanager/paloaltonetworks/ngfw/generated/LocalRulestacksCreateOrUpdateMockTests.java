// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.paloaltonetworks.ngfw.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.paloaltonetworks.ngfw.PaloAltoNetworksNgfwManager;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.AzureResourceManagerManagedIdentityProperties;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.AzureResourceManagerUserAssignedIdentity;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.DefaultMode;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.LocalRulestackResource;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.ManagedIdentityType;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.ScopeType;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.SecurityServices;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class LocalRulestacksCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"panEtag\":\"lhdyzmyckzex\",\"panLocation\":\"akckywym\",\"scope\":\"GLOBAL\",\"associatedSubscriptions\":[\"jkdtfoh\",\"aogzvkiw\",\"siwdyjqur\"],\"description\":\"crraueekcsu\",\"defaultMode\":\"FIREWALL\",\"minAppIdVersion\":\"ddacbcbgydlqidy\",\"provisioningState\":\"Succeeded\",\"securityServices\":{\"vulnerabilityProfile\":\"tyrilkfbnrqqxvz\",\"antiSpywareProfile\":\"bnfnqtxjtoma\",\"antiVirusProfile\":\"wbnfddepl\",\"urlFilteringProfile\":\"qjn\",\"fileBlockingProfile\":\"zygleexahvm\",\"dnsSubscription\":\"hsbrcary\",\"outboundUnTrustCertificate\":\"jjzyvoaqajuve\",\"outboundTrustCertificate\":\"ptdmkrrbhmpful\"}},\"identity\":{\"tenantId\":\"fgybpmfbf\",\"principalId\":\"unmpzkrvfyifkdsc\",\"type\":\"SystemAssigned,UserAssigned\",\"userAssignedIdentities\":{\"gm\":{\"clientId\":\"ictnkjjwgcw\",\"principalId\":\"hbkgfyrt\"},\"ygevgwmseharx\":{\"clientId\":\"j\",\"principalId\":\"scdfpdqw\"},\"tpakf\":{\"clientId\":\"vqnrxtmbpj\",\"principalId\":\"nvwjhrsidqpxl\"},\"wmfjhp\":{\"clientId\":\"gatwmykyu\",\"principalId\":\"ym\"}}},\"location\":\"vjqdvdwkq\",\"tags\":{\"gnteta\":\"rlefgnaavu\",\"duyeuyl\":\"utnpdctuhspfefyi\",\"ybkcgsuthhllnmwy\":\"phm\",\"i\":\"efxexlf\"},\"id\":\"txtjrrlkmds\",\"name\":\"jhhxdlajf\",\"type\":\"xcxscvslxlh\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        PaloAltoNetworksNgfwManager manager = PaloAltoNetworksNgfwManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        LocalRulestackResource response = manager.localRulestacks()
            .define("parybjufpt")
            .withRegion("fajs")
            .withExistingResourceGroup("apezkiswqjmdghs")
            .withTags(mapOf("zzkivyhjr", "kmq", "solronqqlm", "iizjixlqfhefkwa", "hvuqbo", "nlqxsjxtele", "cnn",
                "oolzqocarkuzl"))
            .withIdentity(
                new AzureResourceManagerManagedIdentityProperties().withType(ManagedIdentityType.SYSTEM_ASSIGNED)
                    .withUserAssignedIdentities(mapOf("cnulgmnhjevdy",
                        new AzureResourceManagerUserAssignedIdentity().withClientId("irfqjpnqnoow")
                            .withPrincipalId("edenrexkxbhxv"))))
            .withPanEtag("czjnc")
            .withPanLocation("iyqvldaswv")
            .withScope(ScopeType.LOCAL)
            .withAssociatedSubscriptions(Arrays.asList("qzlgcndhzxrrfcfs", "hkhg", "nxu"))
            .withDescription("kpphefsbzx")
            .withDefaultMode(DefaultMode.FIREWALL)
            .withMinAppIdVersion("omeikjcl")
            .withSecurityServices(new SecurityServices().withVulnerabilityProfile("mwpfs")
                .withAntiSpywareProfile("t")
                .withAntiVirusProfile("zyqbxyxoyfpuq")
                .withUrlFilteringProfile("qezxlhdj")
                .withFileBlockingProfile("dcadwvpsozjiihjr")
                .withDnsSubscription("bmrzoepnx")
                .withOutboundUnTrustCertificate("v")
                .withOutboundTrustCertificate("jkgv"))
            .create();

        Assertions.assertEquals("vjqdvdwkq", response.location());
        Assertions.assertEquals("rlefgnaavu", response.tags().get("gnteta"));
        Assertions.assertEquals(ManagedIdentityType.SYSTEM_AND_USER_ASSIGNED, response.identity().type());
        Assertions.assertEquals("ictnkjjwgcw", response.identity().userAssignedIdentities().get("gm").clientId());
        Assertions.assertEquals("hbkgfyrt", response.identity().userAssignedIdentities().get("gm").principalId());
        Assertions.assertEquals("lhdyzmyckzex", response.panEtag());
        Assertions.assertEquals("akckywym", response.panLocation());
        Assertions.assertEquals(ScopeType.GLOBAL, response.scope());
        Assertions.assertEquals("jkdtfoh", response.associatedSubscriptions().get(0));
        Assertions.assertEquals("crraueekcsu", response.description());
        Assertions.assertEquals(DefaultMode.FIREWALL, response.defaultMode());
        Assertions.assertEquals("ddacbcbgydlqidy", response.minAppIdVersion());
        Assertions.assertEquals("tyrilkfbnrqqxvz", response.securityServices().vulnerabilityProfile());
        Assertions.assertEquals("bnfnqtxjtoma", response.securityServices().antiSpywareProfile());
        Assertions.assertEquals("wbnfddepl", response.securityServices().antiVirusProfile());
        Assertions.assertEquals("qjn", response.securityServices().urlFilteringProfile());
        Assertions.assertEquals("zygleexahvm", response.securityServices().fileBlockingProfile());
        Assertions.assertEquals("hsbrcary", response.securityServices().dnsSubscription());
        Assertions.assertEquals("jjzyvoaqajuve", response.securityServices().outboundUnTrustCertificate());
        Assertions.assertEquals("ptdmkrrbhmpful", response.securityServices().outboundTrustCertificate());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
