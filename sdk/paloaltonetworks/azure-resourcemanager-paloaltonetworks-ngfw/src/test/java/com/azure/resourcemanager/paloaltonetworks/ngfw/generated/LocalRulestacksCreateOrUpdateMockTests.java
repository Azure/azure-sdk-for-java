// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.paloaltonetworks.ngfw.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.paloaltonetworks.ngfw.PaloAltoNetworksNgfwManager;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.AzureResourceManagerManagedIdentityProperties;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.AzureResourceManagerUserAssignedIdentity;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.DefaultMode;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.LocalRulestackResource;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.ManagedIdentityType;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.ScopeType;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.SecurityServices;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class LocalRulestacksCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"panEtag\":\"zi\",\"panLocation\":\"wypusuvjsl\",\"scope\":\"LOCAL\",\"associatedSubscriptions\":[\"idjsllfryv\"],\"description\":\"vxadqacfrgnawbab\",\"defaultMode\":\"FIREWALL\",\"minAppIdVersion\":\"t\",\"provisioningState\":\"Succeeded\",\"securityServices\":{\"vulnerabilityProfile\":\"zlfsyqkfrbzgowo\",\"antiSpywareProfile\":\"mj\",\"antiVirusProfile\":\"jcx\",\"urlFilteringProfile\":\"qg\",\"fileBlockingProfile\":\"lusrv\",\"dnsSubscription\":\"simjceagbjqvlsu\",\"outboundUnTrustCertificate\":\"wzas\",\"outboundTrustCertificate\":\"gon\"}},\"identity\":{\"tenantId\":\"fq\",\"principalId\":\"ubyzn\",\"type\":\"None\",\"userAssignedIdentities\":{\"vn\":{\"clientId\":\"eebgvopemtuoqu\",\"principalId\":\"yegq\"},\"msxbaevwjcnkott\":{\"clientId\":\"flqqbtnyjpylxd\",\"principalId\":\"vabm\"},\"mvrscmqerndbrny\":{\"clientId\":\"uhvajmailfemjjza\",\"principalId\":\"wjiqullqxb\"},\"ynnfmuiii\":{\"clientId\":\"fltfnnxr\",\"principalId\":\"dj\"}}},\"location\":\"pfoh\",\"tags\":{\"zbeewoiymrvzbju\":\"kxbbcbrwjiutgnj\"},\"id\":\"rsrziuctix\",\"name\":\"bdsuifr\",\"type\":\"vka\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        PaloAltoNetworksNgfwManager manager = PaloAltoNetworksNgfwManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        LocalRulestackResource response
            = manager.localRulestacks()
                .define("hdvafjrqpjiyrqjc")
                .withRegion("ccxetyvkun")
                .withExistingResourceGroup("ulhmzyq")
                .withTags(mapOf("g", "nohikkgq"))
                .withIdentity(new AzureResourceManagerManagedIdentityProperties()
                    .withType(ManagedIdentityType.USER_ASSIGNED)
                    .withUserAssignedIdentities(mapOf("ii",
                        new AzureResourceManagerUserAssignedIdentity().withClientId("qkaye")
                            .withPrincipalId("xtlgflwfg"),
                        "tvamcaszknx",
                        new AzureResourceManagerUserAssignedIdentity().withClientId("ijjcea").withPrincipalId("ijjj"))))
                .withPanEtag("a")
                .withPanLocation("mzwdfk")
                .withScope(ScopeType.LOCAL)
                .withAssociatedSubscriptions(Arrays.asList("rpdltbq", "tqjfgxxsaet", "zdgvpyigdaqqilz"))
                .withDescription("d")
                .withDefaultMode(DefaultMode.FIREWALL)
                .withMinAppIdVersion("edxn")
                .withSecurityServices(new SecurityServices().withVulnerabilityProfile("fpaurw")
                    .withAntiSpywareProfile("ilfjqqacdmk")
                    .withAntiVirusProfile("xdcvjwcy")
                    .withUrlFilteringProfile("akeciqchx")
                    .withFileBlockingProfile("uicdsiwdfmmpzhzz")
                    .withDnsSubscription("ywrgyngydgr")
                    .withOutboundUnTrustCertificate("n")
                    .withOutboundTrustCertificate("kiqaondjr"))
                .create();

        Assertions.assertEquals("pfoh", response.location());
        Assertions.assertEquals("kxbbcbrwjiutgnj", response.tags().get("zbeewoiymrvzbju"));
        Assertions.assertEquals(ManagedIdentityType.NONE, response.identity().type());
        Assertions.assertEquals("eebgvopemtuoqu", response.identity().userAssignedIdentities().get("vn").clientId());
        Assertions.assertEquals("yegq", response.identity().userAssignedIdentities().get("vn").principalId());
        Assertions.assertEquals("zi", response.panEtag());
        Assertions.assertEquals("wypusuvjsl", response.panLocation());
        Assertions.assertEquals(ScopeType.LOCAL, response.scope());
        Assertions.assertEquals("idjsllfryv", response.associatedSubscriptions().get(0));
        Assertions.assertEquals("vxadqacfrgnawbab", response.description());
        Assertions.assertEquals(DefaultMode.FIREWALL, response.defaultMode());
        Assertions.assertEquals("t", response.minAppIdVersion());
        Assertions.assertEquals("zlfsyqkfrbzgowo", response.securityServices().vulnerabilityProfile());
        Assertions.assertEquals("mj", response.securityServices().antiSpywareProfile());
        Assertions.assertEquals("jcx", response.securityServices().antiVirusProfile());
        Assertions.assertEquals("qg", response.securityServices().urlFilteringProfile());
        Assertions.assertEquals("lusrv", response.securityServices().fileBlockingProfile());
        Assertions.assertEquals("simjceagbjqvlsu", response.securityServices().dnsSubscription());
        Assertions.assertEquals("wzas", response.securityServices().outboundUnTrustCertificate());
        Assertions.assertEquals("gon", response.securityServices().outboundTrustCertificate());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
