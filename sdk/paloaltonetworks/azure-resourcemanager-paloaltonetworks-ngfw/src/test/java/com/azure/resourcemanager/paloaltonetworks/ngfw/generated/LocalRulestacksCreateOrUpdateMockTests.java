// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.paloaltonetworks.ngfw.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.paloaltonetworks.ngfw.PaloAltoNetworksNgfwManager;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.AzureResourceManagerManagedIdentityProperties;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.DefaultMode;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.LocalRulestackResource;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.ManagedIdentityType;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.ScopeType;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.SecurityServices;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class LocalRulestacksCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"panEtag\":\"mifoxxkub\",\"panLocation\":\"havpmhbrbqgvg\",\"scope\":\"GLOBAL\",\"associatedSubscriptions\":[\"ttefjoknssq\",\"zqedikdfrdbi\",\"mrjgeihfqlggwfi\"],\"description\":\"cxmjpbyephmg\",\"defaultMode\":\"IPS\",\"minAppIdVersion\":\"vrcmyfqipgxhnpo\",\"provisioningState\":\"Succeeded\",\"securityServices\":{\"vulnerabilityProfile\":\"abvn\",\"antiSpywareProfile\":\"leeyaswl\",\"antiVirusProfile\":\"ugmrmf\",\"urlFilteringProfile\":\"rxwtoaukhfkvc\",\"fileBlockingProfile\":\"izmoaeds\",\"dnsSubscription\":\"wuived\",\"outboundUnTrustCertificate\":\"gyeewxeiq\",\"outboundTrustCertificate\":\"smgomguaml\"}},\"identity\":{\"tenantId\":\"rgmsplzga\",\"principalId\":\"cshhv\",\"type\":\"SystemAssigned,UserAssigned\",\"userAssignedIdentities\":{}},\"location\":\"xkym\",\"tags\":{\"nyghshxcylhkgmn\":\"nxrjkixtwbtaoy\",\"jjkhvyomaclu\":\"ghpxycphdr\"},\"id\":\"vxnqmhrpqpd\",\"name\":\"wmkoisq\",\"type\":\"ssffxuifmc\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        PaloAltoNetworksNgfwManager manager =
            PaloAltoNetworksNgfwManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        LocalRulestackResource response =
            manager
                .localRulestacks()
                .define("oe")
                .withRegion("hr")
                .withExistingResourceGroup("naoyank")
                .withTags(
                    mapOf(
                        "iiiovgqcgxuugq",
                        "sl",
                        "e",
                        "ctotiowlx",
                        "wphqlkccuzgygqw",
                        "dptjgwdtgukranb",
                        "lwgniiprglvawu",
                        "hoi"))
                .withIdentity(
                    new AzureResourceManagerManagedIdentityProperties()
                        .withType(ManagedIdentityType.NONE)
                        .withUserAssignedIdentities(mapOf()))
                .withPanEtag("wankltytmhdroznn")
                .withPanLocation("rlktgjcsggu")
                .withScope(ScopeType.LOCAL)
                .withAssociatedSubscriptions(Arrays.asList("wyw", "eeczgfbu"))
                .withDescription("lelssxblycsxzujk")
                .withDefaultMode(DefaultMode.FIREWALL)
                .withMinAppIdVersion("mdesqp")
                .withSecurityServices(
                    new SecurityServices()
                        .withVulnerabilityProfile("cdoewbidyv")
                        .withAntiSpywareProfile("owx")
                        .withAntiVirusProfile("piudeugfsxzecpa")
                        .withUrlFilteringProfile("kufykhvu")
                        .withFileBlockingProfile("epmrut")
                        .withDnsSubscription("abaobnslujdjltym")
                        .withOutboundUnTrustCertificate("vguihywar")
                        .withOutboundTrustCertificate("pphkixkykxds"))
                .create();

        Assertions.assertEquals("xkym", response.location());
        Assertions.assertEquals("nxrjkixtwbtaoy", response.tags().get("nyghshxcylhkgmn"));
        Assertions.assertEquals(ManagedIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED, response.identity().type());
        Assertions.assertEquals("mifoxxkub", response.panEtag());
        Assertions.assertEquals("havpmhbrbqgvg", response.panLocation());
        Assertions.assertEquals(ScopeType.GLOBAL, response.scope());
        Assertions.assertEquals("ttefjoknssq", response.associatedSubscriptions().get(0));
        Assertions.assertEquals("cxmjpbyephmg", response.description());
        Assertions.assertEquals(DefaultMode.IPS, response.defaultMode());
        Assertions.assertEquals("vrcmyfqipgxhnpo", response.minAppIdVersion());
        Assertions.assertEquals("abvn", response.securityServices().vulnerabilityProfile());
        Assertions.assertEquals("leeyaswl", response.securityServices().antiSpywareProfile());
        Assertions.assertEquals("ugmrmf", response.securityServices().antiVirusProfile());
        Assertions.assertEquals("rxwtoaukhfkvc", response.securityServices().urlFilteringProfile());
        Assertions.assertEquals("izmoaeds", response.securityServices().fileBlockingProfile());
        Assertions.assertEquals("wuived", response.securityServices().dnsSubscription());
        Assertions.assertEquals("gyeewxeiq", response.securityServices().outboundUnTrustCertificate());
        Assertions.assertEquals("smgomguaml", response.securityServices().outboundTrustCertificate());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
