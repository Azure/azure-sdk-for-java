// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.paloaltonetworks.ngfw.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.paloaltonetworks.ngfw.PaloAltoNetworksNgfwManager;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.DefaultMode;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.LocalRulestackResource;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.ManagedIdentityType;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.ScopeType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class LocalRulestacksListByResourceGroupMockTests {
    @Test
    public void testListByResourceGroup() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"panEtag\":\"iuas\",\"panLocation\":\"rowsocnequy\",\"scope\":\"LOCAL\",\"associatedSubscriptions\":[\"qgrm\",\"qjkqevadrmmwi\",\"awvcmjzkxiid\",\"scz\"],\"description\":\"oswoqiqazugamx\",\"defaultMode\":\"NONE\",\"minAppIdVersion\":\"coiisbamnppcce\",\"provisioningState\":\"Succeeded\",\"securityServices\":{\"vulnerabilityProfile\":\"sbezaxyfukzxuizh\",\"antiSpywareProfile\":\"nepk\",\"antiVirusProfile\":\"tiarxqiubxduk\",\"urlFilteringProfile\":\"pxdazv\",\"fileBlockingProfile\":\"ctmmkoszudbl\",\"dnsSubscription\":\"ntrpcaqkiof\",\"outboundUnTrustCertificate\":\"tfmhklbnldpvcb\",\"outboundTrustCertificate\":\"ezyquw\"}},\"identity\":{\"tenantId\":\"xut\",\"principalId\":\"brruyuuatv\",\"type\":\"UserAssigned\",\"userAssignedIdentities\":{\"ahprzrvxhmtfhocn\":{\"clientId\":\"colbmxlb\",\"principalId\":\"tpc\"},\"jevhdlmydidw\":{\"clientId\":\"cmj\",\"principalId\":\"gxnoqrxtdis\"}}},\"location\":\"pfwwt\",\"tags\":{\"sxxh\":\"o\",\"kxhnegknj\":\"wcdbckyoik\",\"bpgsnbagnc\":\"rbhtmeplvukaobr\"},\"id\":\"jhgem\",\"name\":\"owa\",\"type\":\"ywalhjymxcg\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        PaloAltoNetworksNgfwManager manager = PaloAltoNetworksNgfwManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PagedIterable<LocalRulestackResource> response
            = manager.localRulestacks().listByResourceGroup("ollgry", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("pfwwt", response.iterator().next().location());
        Assertions.assertEquals("o", response.iterator().next().tags().get("sxxh"));
        Assertions.assertEquals(ManagedIdentityType.USER_ASSIGNED, response.iterator().next().identity().type());
        Assertions.assertEquals("colbmxlb",
            response.iterator().next().identity().userAssignedIdentities().get("ahprzrvxhmtfhocn").clientId());
        Assertions.assertEquals("tpc",
            response.iterator().next().identity().userAssignedIdentities().get("ahprzrvxhmtfhocn").principalId());
        Assertions.assertEquals("iuas", response.iterator().next().panEtag());
        Assertions.assertEquals("rowsocnequy", response.iterator().next().panLocation());
        Assertions.assertEquals(ScopeType.LOCAL, response.iterator().next().scope());
        Assertions.assertEquals("qgrm", response.iterator().next().associatedSubscriptions().get(0));
        Assertions.assertEquals("oswoqiqazugamx", response.iterator().next().description());
        Assertions.assertEquals(DefaultMode.NONE, response.iterator().next().defaultMode());
        Assertions.assertEquals("coiisbamnppcce", response.iterator().next().minAppIdVersion());
        Assertions.assertEquals("sbezaxyfukzxuizh",
            response.iterator().next().securityServices().vulnerabilityProfile());
        Assertions.assertEquals("nepk", response.iterator().next().securityServices().antiSpywareProfile());
        Assertions.assertEquals("tiarxqiubxduk", response.iterator().next().securityServices().antiVirusProfile());
        Assertions.assertEquals("pxdazv", response.iterator().next().securityServices().urlFilteringProfile());
        Assertions.assertEquals("ctmmkoszudbl", response.iterator().next().securityServices().fileBlockingProfile());
        Assertions.assertEquals("ntrpcaqkiof", response.iterator().next().securityServices().dnsSubscription());
        Assertions.assertEquals("tfmhklbnldpvcb",
            response.iterator().next().securityServices().outboundUnTrustCertificate());
        Assertions.assertEquals("ezyquw", response.iterator().next().securityServices().outboundTrustCertificate());
    }
}
