// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.paloaltonetworks.ngfw.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.paloaltonetworks.ngfw.PaloAltoNetworksNgfwManager;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.DefaultMode;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.LocalRulestackResource;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.ManagedIdentityType;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.ScopeType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class LocalRulestacksListByResourceGroupMockTests {
    @Test
    public void testListByResourceGroup() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"panEtag\":\"pqsixymmp\",\"panLocation\":\"ivyqlkjuvsmbmsl\",\"scope\":\"GLOBAL\",\"associatedSubscriptions\":[\"wzdbpqvybefgv\",\"x\",\"okcvtlubses\"],\"description\":\"cua\",\"defaultMode\":\"FIREWALL\",\"minAppIdVersion\":\"unlpirykycndz\",\"provisioningState\":\"Failed\",\"securityServices\":{\"vulnerabilityProfile\":\"reuykbbmnwagl\",\"antiSpywareProfile\":\"xoe\",\"antiVirusProfile\":\"nqlnfwmyymvqd\",\"urlFilteringProfile\":\"bhfckdvezcrcssb\",\"fileBlockingProfile\":\"ddubbnqfblhkal\",\"dnsSubscription\":\"pavawugiqjtio\",\"outboundUnTrustCertificate\":\"gdmin\",\"outboundTrustCertificate\":\"tteajohiygs\"}},\"identity\":{\"tenantId\":\"onhpcz\",\"principalId\":\"mktp\",\"type\":\"SystemAssigned,UserAssigned\",\"userAssignedIdentities\":{\"zulo\":{\"clientId\":\"sehch\",\"principalId\":\"ufmpqumqyjgy\"}}},\"location\":\"aeuzanh\",\"tags\":{\"wphpzfngqj\":\"hse\",\"fwbeqrkuorh\":\"lidftujwjj\",\"tiq\":\"ssruqnmdvhazcvj\",\"ukvlb\":\"wbqerzwxiytxtd\"},\"id\":\"ktg\",\"name\":\"styoua\",\"type\":\"bewreswmowegmmut\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        PaloAltoNetworksNgfwManager manager = PaloAltoNetworksNgfwManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<LocalRulestackResource> response
            = manager.localRulestacks().listByResourceGroup("zrltixldzyyf", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("aeuzanh", response.iterator().next().location());
        Assertions.assertEquals("hse", response.iterator().next().tags().get("wphpzfngqj"));
        Assertions.assertEquals(ManagedIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED,
            response.iterator().next().identity().type());
        Assertions.assertEquals("sehch",
            response.iterator().next().identity().userAssignedIdentities().get("zulo").clientId());
        Assertions.assertEquals("ufmpqumqyjgy",
            response.iterator().next().identity().userAssignedIdentities().get("zulo").principalId());
        Assertions.assertEquals("pqsixymmp", response.iterator().next().panEtag());
        Assertions.assertEquals("ivyqlkjuvsmbmsl", response.iterator().next().panLocation());
        Assertions.assertEquals(ScopeType.GLOBAL, response.iterator().next().scope());
        Assertions.assertEquals("wzdbpqvybefgv", response.iterator().next().associatedSubscriptions().get(0));
        Assertions.assertEquals("cua", response.iterator().next().description());
        Assertions.assertEquals(DefaultMode.FIREWALL, response.iterator().next().defaultMode());
        Assertions.assertEquals("unlpirykycndz", response.iterator().next().minAppIdVersion());
        Assertions.assertEquals("reuykbbmnwagl", response.iterator().next().securityServices().vulnerabilityProfile());
        Assertions.assertEquals("xoe", response.iterator().next().securityServices().antiSpywareProfile());
        Assertions.assertEquals("nqlnfwmyymvqd", response.iterator().next().securityServices().antiVirusProfile());
        Assertions.assertEquals("bhfckdvezcrcssb", response.iterator().next().securityServices().urlFilteringProfile());
        Assertions.assertEquals("ddubbnqfblhkal", response.iterator().next().securityServices().fileBlockingProfile());
        Assertions.assertEquals("pavawugiqjtio", response.iterator().next().securityServices().dnsSubscription());
        Assertions.assertEquals("gdmin", response.iterator().next().securityServices().outboundUnTrustCertificate());
        Assertions.assertEquals("tteajohiygs",
            response.iterator().next().securityServices().outboundTrustCertificate());
    }
}
