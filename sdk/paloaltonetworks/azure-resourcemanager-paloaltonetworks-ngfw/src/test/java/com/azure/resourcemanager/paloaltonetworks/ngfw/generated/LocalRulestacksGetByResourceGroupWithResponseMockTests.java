// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.paloaltonetworks.ngfw.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.paloaltonetworks.ngfw.PaloAltoNetworksNgfwManager;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.DefaultMode;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.LocalRulestackResource;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.ManagedIdentityType;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.ScopeType;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class LocalRulestacksGetByResourceGroupWithResponseMockTests {
    @Test
    public void testGetByResourceGroupWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"panEtag\":\"r\",\"panLocation\":\"uyzlw\",\"scope\":\"GLOBAL\",\"associatedSubscriptions\":[\"hoocl\",\"tnpqmemczjk\"],\"description\":\"ykyujxsg\",\"defaultMode\":\"NONE\",\"minAppIdVersion\":\"rryejylmbkzudnig\",\"provisioningState\":\"Updating\",\"securityServices\":{\"vulnerabilityProfile\":\"tjewlpxuzzj\",\"antiSpywareProfile\":\"refqy\",\"antiVirusProfile\":\"otoihiqa\",\"urlFilteringProfile\":\"diw\",\"fileBlockingProfile\":\"rkwpzdqtvhcspod\",\"dnsSubscription\":\"axsipietgb\",\"outboundUnTrustCertificate\":\"jfulbmoic\",\"outboundTrustCertificate\":\"lpnfpubntnb\"}},\"identity\":{\"tenantId\":\"viqsowsaaelcattc\",\"principalId\":\"hplrvkmjcwmjvlg\",\"type\":\"SystemAssigned\",\"userAssignedIdentities\":{}},\"location\":\"kyylizr\",\"tags\":{\"ztlvtmvagbwidqlv\":\"psfxsf\",\"rvjfnmjmvlw\":\"ukoveofi\"},\"id\":\"z\",\"name\":\"iblkujr\",\"type\":\"lfojuidjp\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        PaloAltoNetworksNgfwManager manager =
            PaloAltoNetworksNgfwManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        LocalRulestackResource response =
            manager
                .localRulestacks()
                .getByResourceGroupWithResponse("hvtrrmhwrbfdpyf", "ubhvj", com.azure.core.util.Context.NONE)
                .getValue();

        Assertions.assertEquals("kyylizr", response.location());
        Assertions.assertEquals("psfxsf", response.tags().get("ztlvtmvagbwidqlv"));
        Assertions.assertEquals(ManagedIdentityType.SYSTEM_ASSIGNED, response.identity().type());
        Assertions.assertEquals("r", response.panEtag());
        Assertions.assertEquals("uyzlw", response.panLocation());
        Assertions.assertEquals(ScopeType.GLOBAL, response.scope());
        Assertions.assertEquals("hoocl", response.associatedSubscriptions().get(0));
        Assertions.assertEquals("ykyujxsg", response.description());
        Assertions.assertEquals(DefaultMode.NONE, response.defaultMode());
        Assertions.assertEquals("rryejylmbkzudnig", response.minAppIdVersion());
        Assertions.assertEquals("tjewlpxuzzj", response.securityServices().vulnerabilityProfile());
        Assertions.assertEquals("refqy", response.securityServices().antiSpywareProfile());
        Assertions.assertEquals("otoihiqa", response.securityServices().antiVirusProfile());
        Assertions.assertEquals("diw", response.securityServices().urlFilteringProfile());
        Assertions.assertEquals("rkwpzdqtvhcspod", response.securityServices().fileBlockingProfile());
        Assertions.assertEquals("axsipietgb", response.securityServices().dnsSubscription());
        Assertions.assertEquals("jfulbmoic", response.securityServices().outboundUnTrustCertificate());
        Assertions.assertEquals("lpnfpubntnb", response.securityServices().outboundTrustCertificate());
    }
}
