// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.paloaltonetworks.ngfw.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.paloaltonetworks.ngfw.PaloAltoNetworksNgfwManager;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.DefaultMode;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.LocalRulestackResource;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.ManagedIdentityType;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.ScopeType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class LocalRulestacksGetByResourceGroupWithResponseMockTests {
    @Test
    public void testGetByResourceGroupWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"panEtag\":\"fanraybfu\",\"panLocation\":\"frojsydgr\",\"scope\":\"GLOBAL\",\"associatedSubscriptions\":[\"gywezskiec\",\"f\"],\"description\":\"zmxieqvdsmaklix\",\"defaultMode\":\"IPS\",\"minAppIdVersion\":\"y\",\"provisioningState\":\"Updating\",\"securityServices\":{\"vulnerabilityProfile\":\"bx\",\"antiSpywareProfile\":\"oij\",\"antiVirusProfile\":\"dtblxpk\",\"urlFilteringProfile\":\"j\",\"fileBlockingProfile\":\"odqhyk\",\"dnsSubscription\":\"cnre\",\"outboundUnTrustCertificate\":\"hllizhceumoq\",\"outboundTrustCertificate\":\"kadppyibngq\"}},\"identity\":{\"tenantId\":\"ywrxw\",\"principalId\":\"dtluvvadswzsn\",\"type\":\"SystemAssigned,UserAssigned\",\"userAssignedIdentities\":{\"mouvbl\":{\"clientId\":\"owuowh\",\"principalId\":\"lnwy\"},\"cvjdrqcrjidhft\":{\"clientId\":\"okzkltr\",\"principalId\":\"wtdvrfmvli\"},\"kfnjyixhafrat\":{\"clientId\":\"vhdxlwyo\",\"principalId\":\"fqz\"}}},\"location\":\"mbjrou\",\"tags\":{\"al\":\"n\"},\"id\":\"jrhuzgf\",\"name\":\"on\",\"type\":\"tpusllywp\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        PaloAltoNetworksNgfwManager manager = PaloAltoNetworksNgfwManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        LocalRulestackResource response = manager.localRulestacks()
            .getByResourceGroupWithResponse("ijiitns", "xlzdesygrijwa", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("mbjrou", response.location());
        Assertions.assertEquals("n", response.tags().get("al"));
        Assertions.assertEquals(ManagedIdentityType.SYSTEM_AND_USER_ASSIGNED, response.identity().type());
        Assertions.assertEquals("owuowh", response.identity().userAssignedIdentities().get("mouvbl").clientId());
        Assertions.assertEquals("lnwy", response.identity().userAssignedIdentities().get("mouvbl").principalId());
        Assertions.assertEquals("fanraybfu", response.panEtag());
        Assertions.assertEquals("frojsydgr", response.panLocation());
        Assertions.assertEquals(ScopeType.GLOBAL, response.scope());
        Assertions.assertEquals("gywezskiec", response.associatedSubscriptions().get(0));
        Assertions.assertEquals("zmxieqvdsmaklix", response.description());
        Assertions.assertEquals(DefaultMode.IPS, response.defaultMode());
        Assertions.assertEquals("y", response.minAppIdVersion());
        Assertions.assertEquals("bx", response.securityServices().vulnerabilityProfile());
        Assertions.assertEquals("oij", response.securityServices().antiSpywareProfile());
        Assertions.assertEquals("dtblxpk", response.securityServices().antiVirusProfile());
        Assertions.assertEquals("j", response.securityServices().urlFilteringProfile());
        Assertions.assertEquals("odqhyk", response.securityServices().fileBlockingProfile());
        Assertions.assertEquals("cnre", response.securityServices().dnsSubscription());
        Assertions.assertEquals("hllizhceumoq", response.securityServices().outboundUnTrustCertificate());
        Assertions.assertEquals("kadppyibngq", response.securityServices().outboundTrustCertificate());
    }
}
