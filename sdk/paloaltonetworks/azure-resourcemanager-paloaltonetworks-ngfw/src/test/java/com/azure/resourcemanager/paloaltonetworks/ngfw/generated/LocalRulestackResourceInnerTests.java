// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.paloaltonetworks.ngfw.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.paloaltonetworks.ngfw.fluent.models.LocalRulestackResourceInner;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.AzureResourceManagerManagedIdentityProperties;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.AzureResourceManagerUserAssignedIdentity;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.DefaultMode;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.ManagedIdentityType;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.ScopeType;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.SecurityServices;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class LocalRulestackResourceInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        LocalRulestackResourceInner model = BinaryData.fromString(
            "{\"properties\":{\"panEtag\":\"wmn\",\"panLocation\":\"ttijfybvpoekrs\",\"scope\":\"GLOBAL\",\"associatedSubscriptions\":[\"huzqgn\",\"dgkynscliqhzvhxn\",\"omtkub\"],\"description\":\"ppnvdxz\",\"defaultMode\":\"IPS\",\"minAppIdVersion\":\"frbbc\",\"provisioningState\":\"Updating\",\"securityServices\":{\"vulnerabilityProfile\":\"tltdhlfkqojpy\",\"antiSpywareProfile\":\"gtrd\",\"antiVirusProfile\":\"ifmzzsd\",\"urlFilteringProfile\":\"brn\",\"fileBlockingProfile\":\"u\",\"dnsSubscription\":\"prafwgckhoc\",\"outboundUnTrustCertificate\":\"d\",\"outboundTrustCertificate\":\"fwafqrouda\"}},\"identity\":{\"tenantId\":\"vehhrvkbunzozu\",\"principalId\":\"cxgkmoyxcdyui\",\"type\":\"SystemAssigned,UserAssigned\",\"userAssignedIdentities\":{\"fukiscvwmzhw\":{\"clientId\":\"nbzydvfvfcj\",\"principalId\":\"eoisrvhmgor\"}}},\"location\":\"efaxvxilc\",\"tags\":{\"jfzqlqhycavodgg\":\"nhnzeyqxt\",\"nlrariaawiuagy\":\"dbeesmie\"},\"id\":\"wqfbylyrfgiagt\",\"name\":\"ojocqwogf\",\"type\":\"zjvusfzldmo\"}")
            .toObject(LocalRulestackResourceInner.class);
        Assertions.assertEquals("efaxvxilc", model.location());
        Assertions.assertEquals("nhnzeyqxt", model.tags().get("jfzqlqhycavodgg"));
        Assertions.assertEquals(ManagedIdentityType.SYSTEM_AND_USER_ASSIGNED, model.identity().type());
        Assertions.assertEquals("nbzydvfvfcj",
            model.identity().userAssignedIdentities().get("fukiscvwmzhw").clientId());
        Assertions.assertEquals("eoisrvhmgor",
            model.identity().userAssignedIdentities().get("fukiscvwmzhw").principalId());
        Assertions.assertEquals("wmn", model.panEtag());
        Assertions.assertEquals("ttijfybvpoekrs", model.panLocation());
        Assertions.assertEquals(ScopeType.GLOBAL, model.scope());
        Assertions.assertEquals("huzqgn", model.associatedSubscriptions().get(0));
        Assertions.assertEquals("ppnvdxz", model.description());
        Assertions.assertEquals(DefaultMode.IPS, model.defaultMode());
        Assertions.assertEquals("frbbc", model.minAppIdVersion());
        Assertions.assertEquals("tltdhlfkqojpy", model.securityServices().vulnerabilityProfile());
        Assertions.assertEquals("gtrd", model.securityServices().antiSpywareProfile());
        Assertions.assertEquals("ifmzzsd", model.securityServices().antiVirusProfile());
        Assertions.assertEquals("brn", model.securityServices().urlFilteringProfile());
        Assertions.assertEquals("u", model.securityServices().fileBlockingProfile());
        Assertions.assertEquals("prafwgckhoc", model.securityServices().dnsSubscription());
        Assertions.assertEquals("d", model.securityServices().outboundUnTrustCertificate());
        Assertions.assertEquals("fwafqrouda", model.securityServices().outboundTrustCertificate());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        LocalRulestackResourceInner model = new LocalRulestackResourceInner().withLocation("efaxvxilc")
            .withTags(mapOf("jfzqlqhycavodgg", "nhnzeyqxt", "nlrariaawiuagy", "dbeesmie"))
            .withIdentity(new AzureResourceManagerManagedIdentityProperties()
                .withType(ManagedIdentityType.SYSTEM_AND_USER_ASSIGNED)
                .withUserAssignedIdentities(mapOf("fukiscvwmzhw",
                    new AzureResourceManagerUserAssignedIdentity().withClientId("nbzydvfvfcj")
                        .withPrincipalId("eoisrvhmgor"))))
            .withPanEtag("wmn")
            .withPanLocation("ttijfybvpoekrs")
            .withScope(ScopeType.GLOBAL)
            .withAssociatedSubscriptions(Arrays.asList("huzqgn", "dgkynscliqhzvhxn", "omtkub"))
            .withDescription("ppnvdxz")
            .withDefaultMode(DefaultMode.IPS)
            .withMinAppIdVersion("frbbc")
            .withSecurityServices(new SecurityServices().withVulnerabilityProfile("tltdhlfkqojpy")
                .withAntiSpywareProfile("gtrd")
                .withAntiVirusProfile("ifmzzsd")
                .withUrlFilteringProfile("brn")
                .withFileBlockingProfile("u")
                .withDnsSubscription("prafwgckhoc")
                .withOutboundUnTrustCertificate("d")
                .withOutboundTrustCertificate("fwafqrouda"));
        model = BinaryData.fromObject(model).toObject(LocalRulestackResourceInner.class);
        Assertions.assertEquals("efaxvxilc", model.location());
        Assertions.assertEquals("nhnzeyqxt", model.tags().get("jfzqlqhycavodgg"));
        Assertions.assertEquals(ManagedIdentityType.SYSTEM_AND_USER_ASSIGNED, model.identity().type());
        Assertions.assertEquals("nbzydvfvfcj",
            model.identity().userAssignedIdentities().get("fukiscvwmzhw").clientId());
        Assertions.assertEquals("eoisrvhmgor",
            model.identity().userAssignedIdentities().get("fukiscvwmzhw").principalId());
        Assertions.assertEquals("wmn", model.panEtag());
        Assertions.assertEquals("ttijfybvpoekrs", model.panLocation());
        Assertions.assertEquals(ScopeType.GLOBAL, model.scope());
        Assertions.assertEquals("huzqgn", model.associatedSubscriptions().get(0));
        Assertions.assertEquals("ppnvdxz", model.description());
        Assertions.assertEquals(DefaultMode.IPS, model.defaultMode());
        Assertions.assertEquals("frbbc", model.minAppIdVersion());
        Assertions.assertEquals("tltdhlfkqojpy", model.securityServices().vulnerabilityProfile());
        Assertions.assertEquals("gtrd", model.securityServices().antiSpywareProfile());
        Assertions.assertEquals("ifmzzsd", model.securityServices().antiVirusProfile());
        Assertions.assertEquals("brn", model.securityServices().urlFilteringProfile());
        Assertions.assertEquals("u", model.securityServices().fileBlockingProfile());
        Assertions.assertEquals("prafwgckhoc", model.securityServices().dnsSubscription());
        Assertions.assertEquals("d", model.securityServices().outboundUnTrustCertificate());
        Assertions.assertEquals("fwafqrouda", model.securityServices().outboundTrustCertificate());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
