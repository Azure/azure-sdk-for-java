// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.paloaltonetworks.ngfw.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.paloaltonetworks.ngfw.fluent.models.LocalRulestackResourceInner;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.AzureResourceManagerManagedIdentityProperties;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.AzureResourceManagerUserAssignedIdentity;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.DefaultMode;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.ManagedIdentityType;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.ScopeType;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.SecurityServices;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class LocalRulestackResourceInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        LocalRulestackResourceInner model = BinaryData.fromString(
            "{\"properties\":{\"panEtag\":\"ywdxsmic\",\"panLocation\":\"rwfscjfnynszquj\",\"scope\":\"LOCAL\",\"associatedSubscriptions\":[\"qytibyowbblgyavu\",\"pthjoxo\",\"smsks\",\"pi\"],\"description\":\"qolj\",\"defaultMode\":\"NONE\",\"minAppIdVersion\":\"xxlxsffgcvizq\",\"provisioningState\":\"Deleting\",\"securityServices\":{\"vulnerabilityProfile\":\"w\",\"antiSpywareProfile\":\"oupfgfb\",\"antiVirusProfile\":\"ubdyhgk\",\"urlFilteringProfile\":\"in\",\"fileBlockingProfile\":\"owzfttsttkt\",\"dnsSubscription\":\"hbq\",\"outboundUnTrustCertificate\":\"tx\",\"outboundTrustCertificate\":\"zukxitmmqtgqq\"}},\"identity\":{\"tenantId\":\"rnxrxcpj\",\"principalId\":\"savokqdzf\",\"type\":\"SystemAssigned,UserAssigned\",\"userAssignedIdentities\":{\"nwxyiop\":{\"clientId\":\"jlfrq\",\"principalId\":\"bajlka\"},\"xkdmligo\":{\"clientId\":\"kqqfk\",\"principalId\":\"s\"},\"bteoybf\":{\"clientId\":\"brxk\",\"principalId\":\"loazuruocbgoo\"},\"b\":{\"clientId\":\"xakvvjgslor\",\"principalId\":\"lmywwtkgkxnyed\"}}},\"location\":\"vudtjuewbcihx\",\"tags\":{\"ybvpay\":\"hcjyxc\",\"gwjplmag\":\"kkudzp\"},\"id\":\"tcyohpfkyrk\",\"name\":\"bdgiogsjk\",\"type\":\"nwqjnoba\"}")
            .toObject(LocalRulestackResourceInner.class);
        Assertions.assertEquals("vudtjuewbcihx", model.location());
        Assertions.assertEquals("hcjyxc", model.tags().get("ybvpay"));
        Assertions.assertEquals(ManagedIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED, model.identity().type());
        Assertions.assertEquals("jlfrq", model.identity().userAssignedIdentities().get("nwxyiop").clientId());
        Assertions.assertEquals("bajlka", model.identity().userAssignedIdentities().get("nwxyiop").principalId());
        Assertions.assertEquals("ywdxsmic", model.panEtag());
        Assertions.assertEquals("rwfscjfnynszquj", model.panLocation());
        Assertions.assertEquals(ScopeType.LOCAL, model.scope());
        Assertions.assertEquals("qytibyowbblgyavu", model.associatedSubscriptions().get(0));
        Assertions.assertEquals("qolj", model.description());
        Assertions.assertEquals(DefaultMode.NONE, model.defaultMode());
        Assertions.assertEquals("xxlxsffgcvizq", model.minAppIdVersion());
        Assertions.assertEquals("w", model.securityServices().vulnerabilityProfile());
        Assertions.assertEquals("oupfgfb", model.securityServices().antiSpywareProfile());
        Assertions.assertEquals("ubdyhgk", model.securityServices().antiVirusProfile());
        Assertions.assertEquals("in", model.securityServices().urlFilteringProfile());
        Assertions.assertEquals("owzfttsttkt", model.securityServices().fileBlockingProfile());
        Assertions.assertEquals("hbq", model.securityServices().dnsSubscription());
        Assertions.assertEquals("tx", model.securityServices().outboundUnTrustCertificate());
        Assertions.assertEquals("zukxitmmqtgqq", model.securityServices().outboundTrustCertificate());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        LocalRulestackResourceInner model
            = new LocalRulestackResourceInner().withLocation("vudtjuewbcihx")
                .withTags(mapOf("ybvpay", "hcjyxc", "gwjplmag", "kkudzp"))
                .withIdentity(
                    new AzureResourceManagerManagedIdentityProperties()
                        .withType(ManagedIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED)
                        .withUserAssignedIdentities(mapOf("nwxyiop",
                            new AzureResourceManagerUserAssignedIdentity().withClientId("jlfrq")
                                .withPrincipalId("bajlka"),
                            "xkdmligo",
                            new AzureResourceManagerUserAssignedIdentity().withClientId("kqqfk").withPrincipalId("s"),
                            "bteoybf",
                            new AzureResourceManagerUserAssignedIdentity().withClientId("brxk")
                                .withPrincipalId("loazuruocbgoo"),
                            "b",
                            new AzureResourceManagerUserAssignedIdentity().withClientId("xakvvjgslor")
                                .withPrincipalId("lmywwtkgkxnyed"))))
                .withPanEtag("ywdxsmic").withPanLocation("rwfscjfnynszquj").withScope(ScopeType.LOCAL)
                .withAssociatedSubscriptions(Arrays.asList("qytibyowbblgyavu", "pthjoxo", "smsks", "pi"))
                .withDescription("qolj").withDefaultMode(DefaultMode.NONE).withMinAppIdVersion("xxlxsffgcvizq")
                .withSecurityServices(new SecurityServices().withVulnerabilityProfile("w")
                    .withAntiSpywareProfile("oupfgfb").withAntiVirusProfile("ubdyhgk").withUrlFilteringProfile("in")
                    .withFileBlockingProfile("owzfttsttkt").withDnsSubscription("hbq")
                    .withOutboundUnTrustCertificate("tx").withOutboundTrustCertificate("zukxitmmqtgqq"));
        model = BinaryData.fromObject(model).toObject(LocalRulestackResourceInner.class);
        Assertions.assertEquals("vudtjuewbcihx", model.location());
        Assertions.assertEquals("hcjyxc", model.tags().get("ybvpay"));
        Assertions.assertEquals(ManagedIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED, model.identity().type());
        Assertions.assertEquals("jlfrq", model.identity().userAssignedIdentities().get("nwxyiop").clientId());
        Assertions.assertEquals("bajlka", model.identity().userAssignedIdentities().get("nwxyiop").principalId());
        Assertions.assertEquals("ywdxsmic", model.panEtag());
        Assertions.assertEquals("rwfscjfnynszquj", model.panLocation());
        Assertions.assertEquals(ScopeType.LOCAL, model.scope());
        Assertions.assertEquals("qytibyowbblgyavu", model.associatedSubscriptions().get(0));
        Assertions.assertEquals("qolj", model.description());
        Assertions.assertEquals(DefaultMode.NONE, model.defaultMode());
        Assertions.assertEquals("xxlxsffgcvizq", model.minAppIdVersion());
        Assertions.assertEquals("w", model.securityServices().vulnerabilityProfile());
        Assertions.assertEquals("oupfgfb", model.securityServices().antiSpywareProfile());
        Assertions.assertEquals("ubdyhgk", model.securityServices().antiVirusProfile());
        Assertions.assertEquals("in", model.securityServices().urlFilteringProfile());
        Assertions.assertEquals("owzfttsttkt", model.securityServices().fileBlockingProfile());
        Assertions.assertEquals("hbq", model.securityServices().dnsSubscription());
        Assertions.assertEquals("tx", model.securityServices().outboundUnTrustCertificate());
        Assertions.assertEquals("zukxitmmqtgqq", model.securityServices().outboundTrustCertificate());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
