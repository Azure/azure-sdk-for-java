// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.paloaltonetworks.ngfw.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.paloaltonetworks.ngfw.PaloAltoNetworksNgfwManager;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.AzureResourceManagerManagedIdentityProperties;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.AzureResourceManagerUserAssignedIdentity;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.DefaultMode;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.GlobalRulestackResource;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.GlobalRulestackResourceUpdate;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.GlobalRulestackResourceUpdateProperties;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.ManagedIdentityType;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.ScopeType;
import com.azure.resourcemanager.paloaltonetworks.ngfw.models.SecurityServices;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class GlobalRulestacksUpdateWithResponseMockTests {
    @Test
    public void testUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"panEtag\":\"buzphdugn\",\"panLocation\":\"knpgoxgjiuq\",\"scope\":\"GLOBAL\",\"associatedSubscriptions\":[\"z\",\"pqwjedm\",\"rrxxgewpktvq\",\"lkm\"],\"description\":\"zoyhlfbcgwg\",\"defaultMode\":\"NONE\",\"minAppIdVersion\":\"oebqinjipn\",\"provisioningState\":\"Updating\",\"securityServices\":{\"vulnerabilityProfile\":\"qlafcbahhpzpofoi\",\"antiSpywareProfile\":\"w\",\"antiVirusProfile\":\"ilkmk\",\"urlFilteringProfile\":\"olvdnd\",\"fileBlockingProfile\":\"auo\",\"dnsSubscription\":\"huartv\",\"outboundUnTrustCertificate\":\"ukyefchnmnahmnxh\",\"outboundTrustCertificate\":\"jqirwrw\"}},\"location\":\"ooxf\",\"identity\":{\"tenantId\":\"hx\",\"principalId\":\"snewmozqvbub\",\"type\":\"None\",\"userAssignedIdentities\":{\"dvmfqhppub\":{\"clientId\":\"sycxhxzgaz\",\"principalId\":\"abo\"}}},\"id\":\"sepdfgk\",\"name\":\"tdherngbtcjuahok\",\"type\":\"tobkauxofshfph\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        PaloAltoNetworksNgfwManager manager = PaloAltoNetworksNgfwManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        GlobalRulestackResource response
            = manager.globalRulestacks()
                .updateWithResponse("kqmhhaowjr",
                    new GlobalRulestackResourceUpdate().withLocation("vuporqzdfuydzv")
                        .withIdentity(new AzureResourceManagerManagedIdentityProperties()
                            .withType(ManagedIdentityType.USER_ASSIGNED)
                            .withUserAssignedIdentities(mapOf("icrmnzh",
                                new AzureResourceManagerUserAssignedIdentity().withClientId("sz")
                                    .withPrincipalId("iwtglxxhljfpg"))))
                        .withProperties(new GlobalRulestackResourceUpdateProperties().withPanEtag("qgjsxvpqcbfrmbod")
                            .withPanLocation("s")
                            .withScope(ScopeType.GLOBAL)
                            .withAssociatedSubscriptions(Arrays.asList("iibakcl", "c", "fr"))
                            .withDescription("ousxauzlwvsgmw")
                            .withDefaultMode(DefaultMode.NONE)
                            .withMinAppIdVersion("zizvuxmmk")
                            .withSecurityServices(new SecurityServices().withVulnerabilityProfile("thnwpzte")
                                .withAntiSpywareProfile("vmribiat")
                                .withAntiVirusProfile("plucfotangcfhnyk")
                                .withUrlFilteringProfile("ugswvx")
                                .withFileBlockingProfile("mzqwmvtxnjmxmcu")
                                .withDnsSubscription("dtcvcl")
                                .withOutboundUnTrustCertificate("npdkv")
                                .withOutboundTrustCertificate("abuiy"))),
                    com.azure.core.util.Context.NONE)
                .getValue();

        Assertions.assertEquals("ooxf", response.location());
        Assertions.assertEquals(ManagedIdentityType.NONE, response.identity().type());
        Assertions.assertEquals("sycxhxzgaz",
            response.identity().userAssignedIdentities().get("dvmfqhppub").clientId());
        Assertions.assertEquals("abo", response.identity().userAssignedIdentities().get("dvmfqhppub").principalId());
        Assertions.assertEquals("buzphdugn", response.panEtag());
        Assertions.assertEquals("knpgoxgjiuq", response.panLocation());
        Assertions.assertEquals(ScopeType.GLOBAL, response.scope());
        Assertions.assertEquals("z", response.associatedSubscriptions().get(0));
        Assertions.assertEquals("zoyhlfbcgwg", response.description());
        Assertions.assertEquals(DefaultMode.NONE, response.defaultMode());
        Assertions.assertEquals("oebqinjipn", response.minAppIdVersion());
        Assertions.assertEquals("qlafcbahhpzpofoi", response.securityServices().vulnerabilityProfile());
        Assertions.assertEquals("w", response.securityServices().antiSpywareProfile());
        Assertions.assertEquals("ilkmk", response.securityServices().antiVirusProfile());
        Assertions.assertEquals("olvdnd", response.securityServices().urlFilteringProfile());
        Assertions.assertEquals("auo", response.securityServices().fileBlockingProfile());
        Assertions.assertEquals("huartv", response.securityServices().dnsSubscription());
        Assertions.assertEquals("ukyefchnmnahmnxh", response.securityServices().outboundUnTrustCertificate());
        Assertions.assertEquals("jqirwrw", response.securityServices().outboundTrustCertificate());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
