// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datalakestore.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The encryption configuration used to update a user managed Key Vault key.
 */
@Fluent
public final class UpdateEncryptionConfig implements JsonSerializable<UpdateEncryptionConfig> {
    /*
     * The updated Key Vault key to use in user managed key rotation.
     */
    private UpdateKeyVaultMetaInfo keyVaultMetaInfo;

    /**
     * Creates an instance of UpdateEncryptionConfig class.
     */
    public UpdateEncryptionConfig() {
    }

    /**
     * Get the keyVaultMetaInfo property: The updated Key Vault key to use in user managed key rotation.
     * 
     * @return the keyVaultMetaInfo value.
     */
    public UpdateKeyVaultMetaInfo keyVaultMetaInfo() {
        return this.keyVaultMetaInfo;
    }

    /**
     * Set the keyVaultMetaInfo property: The updated Key Vault key to use in user managed key rotation.
     * 
     * @param keyVaultMetaInfo the keyVaultMetaInfo value to set.
     * @return the UpdateEncryptionConfig object itself.
     */
    public UpdateEncryptionConfig withKeyVaultMetaInfo(UpdateKeyVaultMetaInfo keyVaultMetaInfo) {
        this.keyVaultMetaInfo = keyVaultMetaInfo;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (keyVaultMetaInfo() != null) {
            keyVaultMetaInfo().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("keyVaultMetaInfo", this.keyVaultMetaInfo);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of UpdateEncryptionConfig from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of UpdateEncryptionConfig if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the UpdateEncryptionConfig.
     */
    public static UpdateEncryptionConfig fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            UpdateEncryptionConfig deserializedUpdateEncryptionConfig = new UpdateEncryptionConfig();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("keyVaultMetaInfo".equals(fieldName)) {
                    deserializedUpdateEncryptionConfig.keyVaultMetaInfo = UpdateKeyVaultMetaInfo.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedUpdateEncryptionConfig;
        });
    }
}
