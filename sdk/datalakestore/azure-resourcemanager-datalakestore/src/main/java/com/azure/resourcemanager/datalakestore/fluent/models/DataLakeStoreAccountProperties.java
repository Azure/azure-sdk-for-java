// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datalakestore.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.datalakestore.models.DataLakeStoreAccountState;
import com.azure.resourcemanager.datalakestore.models.DataLakeStoreAccountStatus;
import com.azure.resourcemanager.datalakestore.models.EncryptionConfig;
import com.azure.resourcemanager.datalakestore.models.EncryptionProvisioningState;
import com.azure.resourcemanager.datalakestore.models.EncryptionState;
import com.azure.resourcemanager.datalakestore.models.FirewallAllowAzureIpsState;
import com.azure.resourcemanager.datalakestore.models.FirewallState;
import com.azure.resourcemanager.datalakestore.models.TierType;
import com.azure.resourcemanager.datalakestore.models.TrustedIdProviderState;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.UUID;

/**
 * Data Lake Store account properties information.
 */
@Immutable
public final class DataLakeStoreAccountProperties extends DataLakeStoreAccountPropertiesBasic {
    /*
     * The default owner group for all new folders and files created in the Data Lake Store account.
     */
    private String defaultGroup;

    /*
     * The Key Vault encryption configuration.
     */
    private EncryptionConfig encryptionConfig;

    /*
     * The current state of encryption for this Data Lake Store account.
     */
    private EncryptionState encryptionState;

    /*
     * The current state of encryption provisioning for this Data Lake Store account.
     */
    private EncryptionProvisioningState encryptionProvisioningState;

    /*
     * The list of firewall rules associated with this Data Lake Store account.
     */
    private List<FirewallRuleInner> firewallRules;

    /*
     * The list of virtual network rules associated with this Data Lake Store account.
     */
    private List<VirtualNetworkRuleInner> virtualNetworkRules;

    /*
     * The current state of the IP address firewall for this Data Lake Store account.
     */
    private FirewallState firewallState;

    /*
     * The current state of allowing or disallowing IPs originating within Azure through the firewall. If the firewall
     * is disabled, this is not enforced.
     */
    private FirewallAllowAzureIpsState firewallAllowAzureIps;

    /*
     * The list of trusted identity providers associated with this Data Lake Store account.
     */
    private List<TrustedIdProviderInner> trustedIdProviders;

    /*
     * The current state of the trusted identity provider feature for this Data Lake Store account.
     */
    private TrustedIdProviderState trustedIdProviderState;

    /*
     * The commitment tier to use for next month.
     */
    private TierType newTier;

    /*
     * The commitment tier in use for the current month.
     */
    private TierType currentTier;

    /*
     * The full CName endpoint for this account.
     */
    private String endpoint;

    /*
     * The account last modified time.
     */
    private OffsetDateTime lastModifiedTime;

    /*
     * The account creation time.
     */
    private OffsetDateTime creationTime;

    /*
     * The state of the Data Lake Store account.
     */
    private DataLakeStoreAccountState state;

    /*
     * The provisioning status of the Data Lake Store account.
     */
    private DataLakeStoreAccountStatus provisioningState;

    /*
     * The unique identifier associated with this Data Lake Store account.
     */
    private UUID accountId;

    /**
     * Creates an instance of DataLakeStoreAccountProperties class.
     */
    public DataLakeStoreAccountProperties() {
    }

    /**
     * Get the defaultGroup property: The default owner group for all new folders and files created in the Data Lake
     * Store account.
     * 
     * @return the defaultGroup value.
     */
    public String defaultGroup() {
        return this.defaultGroup;
    }

    /**
     * Get the encryptionConfig property: The Key Vault encryption configuration.
     * 
     * @return the encryptionConfig value.
     */
    public EncryptionConfig encryptionConfig() {
        return this.encryptionConfig;
    }

    /**
     * Get the encryptionState property: The current state of encryption for this Data Lake Store account.
     * 
     * @return the encryptionState value.
     */
    public EncryptionState encryptionState() {
        return this.encryptionState;
    }

    /**
     * Get the encryptionProvisioningState property: The current state of encryption provisioning for this Data Lake
     * Store account.
     * 
     * @return the encryptionProvisioningState value.
     */
    public EncryptionProvisioningState encryptionProvisioningState() {
        return this.encryptionProvisioningState;
    }

    /**
     * Get the firewallRules property: The list of firewall rules associated with this Data Lake Store account.
     * 
     * @return the firewallRules value.
     */
    public List<FirewallRuleInner> firewallRules() {
        return this.firewallRules;
    }

    /**
     * Get the virtualNetworkRules property: The list of virtual network rules associated with this Data Lake Store
     * account.
     * 
     * @return the virtualNetworkRules value.
     */
    public List<VirtualNetworkRuleInner> virtualNetworkRules() {
        return this.virtualNetworkRules;
    }

    /**
     * Get the firewallState property: The current state of the IP address firewall for this Data Lake Store account.
     * 
     * @return the firewallState value.
     */
    public FirewallState firewallState() {
        return this.firewallState;
    }

    /**
     * Get the firewallAllowAzureIps property: The current state of allowing or disallowing IPs originating within Azure
     * through the firewall. If the firewall is disabled, this is not enforced.
     * 
     * @return the firewallAllowAzureIps value.
     */
    public FirewallAllowAzureIpsState firewallAllowAzureIps() {
        return this.firewallAllowAzureIps;
    }

    /**
     * Get the trustedIdProviders property: The list of trusted identity providers associated with this Data Lake Store
     * account.
     * 
     * @return the trustedIdProviders value.
     */
    public List<TrustedIdProviderInner> trustedIdProviders() {
        return this.trustedIdProviders;
    }

    /**
     * Get the trustedIdProviderState property: The current state of the trusted identity provider feature for this Data
     * Lake Store account.
     * 
     * @return the trustedIdProviderState value.
     */
    public TrustedIdProviderState trustedIdProviderState() {
        return this.trustedIdProviderState;
    }

    /**
     * Get the newTier property: The commitment tier to use for next month.
     * 
     * @return the newTier value.
     */
    public TierType newTier() {
        return this.newTier;
    }

    /**
     * Get the currentTier property: The commitment tier in use for the current month.
     * 
     * @return the currentTier value.
     */
    public TierType currentTier() {
        return this.currentTier;
    }

    /**
     * Get the endpoint property: The full CName endpoint for this account.
     * 
     * @return the endpoint value.
     */
    @Override
    public String endpoint() {
        return this.endpoint;
    }

    /**
     * Get the lastModifiedTime property: The account last modified time.
     * 
     * @return the lastModifiedTime value.
     */
    @Override
    public OffsetDateTime lastModifiedTime() {
        return this.lastModifiedTime;
    }

    /**
     * Get the creationTime property: The account creation time.
     * 
     * @return the creationTime value.
     */
    @Override
    public OffsetDateTime creationTime() {
        return this.creationTime;
    }

    /**
     * Get the state property: The state of the Data Lake Store account.
     * 
     * @return the state value.
     */
    @Override
    public DataLakeStoreAccountState state() {
        return this.state;
    }

    /**
     * Get the provisioningState property: The provisioning status of the Data Lake Store account.
     * 
     * @return the provisioningState value.
     */
    @Override
    public DataLakeStoreAccountStatus provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the accountId property: The unique identifier associated with this Data Lake Store account.
     * 
     * @return the accountId value.
     */
    @Override
    public UUID accountId() {
        return this.accountId;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (encryptionConfig() != null) {
            encryptionConfig().validate();
        }
        if (firewallRules() != null) {
            firewallRules().forEach(e -> e.validate());
        }
        if (virtualNetworkRules() != null) {
            virtualNetworkRules().forEach(e -> e.validate());
        }
        if (trustedIdProviders() != null) {
            trustedIdProviders().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DataLakeStoreAccountProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DataLakeStoreAccountProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DataLakeStoreAccountProperties.
     */
    public static DataLakeStoreAccountProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DataLakeStoreAccountProperties deserializedDataLakeStoreAccountProperties
                = new DataLakeStoreAccountProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("accountId".equals(fieldName)) {
                    deserializedDataLakeStoreAccountProperties.accountId
                        = reader.getNullable(nonNullReader -> UUID.fromString(nonNullReader.getString()));
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedDataLakeStoreAccountProperties.provisioningState
                        = DataLakeStoreAccountStatus.fromString(reader.getString());
                } else if ("state".equals(fieldName)) {
                    deserializedDataLakeStoreAccountProperties.state
                        = DataLakeStoreAccountState.fromString(reader.getString());
                } else if ("creationTime".equals(fieldName)) {
                    deserializedDataLakeStoreAccountProperties.creationTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("lastModifiedTime".equals(fieldName)) {
                    deserializedDataLakeStoreAccountProperties.lastModifiedTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("endpoint".equals(fieldName)) {
                    deserializedDataLakeStoreAccountProperties.endpoint = reader.getString();
                } else if ("defaultGroup".equals(fieldName)) {
                    deserializedDataLakeStoreAccountProperties.defaultGroup = reader.getString();
                } else if ("encryptionConfig".equals(fieldName)) {
                    deserializedDataLakeStoreAccountProperties.encryptionConfig = EncryptionConfig.fromJson(reader);
                } else if ("encryptionState".equals(fieldName)) {
                    deserializedDataLakeStoreAccountProperties.encryptionState
                        = EncryptionState.fromString(reader.getString());
                } else if ("encryptionProvisioningState".equals(fieldName)) {
                    deserializedDataLakeStoreAccountProperties.encryptionProvisioningState
                        = EncryptionProvisioningState.fromString(reader.getString());
                } else if ("firewallRules".equals(fieldName)) {
                    List<FirewallRuleInner> firewallRules
                        = reader.readArray(reader1 -> FirewallRuleInner.fromJson(reader1));
                    deserializedDataLakeStoreAccountProperties.firewallRules = firewallRules;
                } else if ("virtualNetworkRules".equals(fieldName)) {
                    List<VirtualNetworkRuleInner> virtualNetworkRules
                        = reader.readArray(reader1 -> VirtualNetworkRuleInner.fromJson(reader1));
                    deserializedDataLakeStoreAccountProperties.virtualNetworkRules = virtualNetworkRules;
                } else if ("firewallState".equals(fieldName)) {
                    deserializedDataLakeStoreAccountProperties.firewallState
                        = FirewallState.fromString(reader.getString());
                } else if ("firewallAllowAzureIps".equals(fieldName)) {
                    deserializedDataLakeStoreAccountProperties.firewallAllowAzureIps
                        = FirewallAllowAzureIpsState.fromString(reader.getString());
                } else if ("trustedIdProviders".equals(fieldName)) {
                    List<TrustedIdProviderInner> trustedIdProviders
                        = reader.readArray(reader1 -> TrustedIdProviderInner.fromJson(reader1));
                    deserializedDataLakeStoreAccountProperties.trustedIdProviders = trustedIdProviders;
                } else if ("trustedIdProviderState".equals(fieldName)) {
                    deserializedDataLakeStoreAccountProperties.trustedIdProviderState
                        = TrustedIdProviderState.fromString(reader.getString());
                } else if ("newTier".equals(fieldName)) {
                    deserializedDataLakeStoreAccountProperties.newTier = TierType.fromString(reader.getString());
                } else if ("currentTier".equals(fieldName)) {
                    deserializedDataLakeStoreAccountProperties.currentTier = TierType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDataLakeStoreAccountProperties;
        });
    }
}
