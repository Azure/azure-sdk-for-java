// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datalakestore.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.datalakestore.models.DataLakeStoreAccountState;
import com.azure.resourcemanager.datalakestore.models.DataLakeStoreAccountStatus;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.UUID;

/**
 * The basic account specific properties that are associated with an underlying Data Lake Store account.
 */
@Immutable
public class DataLakeStoreAccountPropertiesBasic implements JsonSerializable<DataLakeStoreAccountPropertiesBasic> {
    /*
     * The unique identifier associated with this Data Lake Store account.
     */
    private UUID accountId;

    /*
     * The provisioning status of the Data Lake Store account.
     */
    private DataLakeStoreAccountStatus provisioningState;

    /*
     * The state of the Data Lake Store account.
     */
    private DataLakeStoreAccountState state;

    /*
     * The account creation time.
     */
    private OffsetDateTime creationTime;

    /*
     * The account last modified time.
     */
    private OffsetDateTime lastModifiedTime;

    /*
     * The full CName endpoint for this account.
     */
    private String endpoint;

    /**
     * Creates an instance of DataLakeStoreAccountPropertiesBasic class.
     */
    public DataLakeStoreAccountPropertiesBasic() {
    }

    /**
     * Get the accountId property: The unique identifier associated with this Data Lake Store account.
     * 
     * @return the accountId value.
     */
    public UUID accountId() {
        return this.accountId;
    }

    /**
     * Set the accountId property: The unique identifier associated with this Data Lake Store account.
     * 
     * @param accountId the accountId value to set.
     * @return the DataLakeStoreAccountPropertiesBasic object itself.
     */
    DataLakeStoreAccountPropertiesBasic withAccountId(UUID accountId) {
        this.accountId = accountId;
        return this;
    }

    /**
     * Get the provisioningState property: The provisioning status of the Data Lake Store account.
     * 
     * @return the provisioningState value.
     */
    public DataLakeStoreAccountStatus provisioningState() {
        return this.provisioningState;
    }

    /**
     * Set the provisioningState property: The provisioning status of the Data Lake Store account.
     * 
     * @param provisioningState the provisioningState value to set.
     * @return the DataLakeStoreAccountPropertiesBasic object itself.
     */
    DataLakeStoreAccountPropertiesBasic withProvisioningState(DataLakeStoreAccountStatus provisioningState) {
        this.provisioningState = provisioningState;
        return this;
    }

    /**
     * Get the state property: The state of the Data Lake Store account.
     * 
     * @return the state value.
     */
    public DataLakeStoreAccountState state() {
        return this.state;
    }

    /**
     * Set the state property: The state of the Data Lake Store account.
     * 
     * @param state the state value to set.
     * @return the DataLakeStoreAccountPropertiesBasic object itself.
     */
    DataLakeStoreAccountPropertiesBasic withState(DataLakeStoreAccountState state) {
        this.state = state;
        return this;
    }

    /**
     * Get the creationTime property: The account creation time.
     * 
     * @return the creationTime value.
     */
    public OffsetDateTime creationTime() {
        return this.creationTime;
    }

    /**
     * Set the creationTime property: The account creation time.
     * 
     * @param creationTime the creationTime value to set.
     * @return the DataLakeStoreAccountPropertiesBasic object itself.
     */
    DataLakeStoreAccountPropertiesBasic withCreationTime(OffsetDateTime creationTime) {
        this.creationTime = creationTime;
        return this;
    }

    /**
     * Get the lastModifiedTime property: The account last modified time.
     * 
     * @return the lastModifiedTime value.
     */
    public OffsetDateTime lastModifiedTime() {
        return this.lastModifiedTime;
    }

    /**
     * Set the lastModifiedTime property: The account last modified time.
     * 
     * @param lastModifiedTime the lastModifiedTime value to set.
     * @return the DataLakeStoreAccountPropertiesBasic object itself.
     */
    DataLakeStoreAccountPropertiesBasic withLastModifiedTime(OffsetDateTime lastModifiedTime) {
        this.lastModifiedTime = lastModifiedTime;
        return this;
    }

    /**
     * Get the endpoint property: The full CName endpoint for this account.
     * 
     * @return the endpoint value.
     */
    public String endpoint() {
        return this.endpoint;
    }

    /**
     * Set the endpoint property: The full CName endpoint for this account.
     * 
     * @param endpoint the endpoint value to set.
     * @return the DataLakeStoreAccountPropertiesBasic object itself.
     */
    DataLakeStoreAccountPropertiesBasic withEndpoint(String endpoint) {
        this.endpoint = endpoint;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DataLakeStoreAccountPropertiesBasic from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DataLakeStoreAccountPropertiesBasic if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DataLakeStoreAccountPropertiesBasic.
     */
    public static DataLakeStoreAccountPropertiesBasic fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DataLakeStoreAccountPropertiesBasic deserializedDataLakeStoreAccountPropertiesBasic
                = new DataLakeStoreAccountPropertiesBasic();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("accountId".equals(fieldName)) {
                    deserializedDataLakeStoreAccountPropertiesBasic.accountId
                        = reader.getNullable(nonNullReader -> UUID.fromString(nonNullReader.getString()));
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedDataLakeStoreAccountPropertiesBasic.provisioningState
                        = DataLakeStoreAccountStatus.fromString(reader.getString());
                } else if ("state".equals(fieldName)) {
                    deserializedDataLakeStoreAccountPropertiesBasic.state
                        = DataLakeStoreAccountState.fromString(reader.getString());
                } else if ("creationTime".equals(fieldName)) {
                    deserializedDataLakeStoreAccountPropertiesBasic.creationTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("lastModifiedTime".equals(fieldName)) {
                    deserializedDataLakeStoreAccountPropertiesBasic.lastModifiedTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("endpoint".equals(fieldName)) {
                    deserializedDataLakeStoreAccountPropertiesBasic.endpoint = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDataLakeStoreAccountPropertiesBasic;
        });
    }
}
