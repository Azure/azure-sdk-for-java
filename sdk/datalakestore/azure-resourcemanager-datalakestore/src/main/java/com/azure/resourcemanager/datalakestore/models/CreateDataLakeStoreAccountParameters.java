// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datalakestore.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.JsonFlatten;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;
import java.util.Map;

/** The CreateDataLakeStoreAccountParameters model. */
@JsonFlatten
@Fluent
public class CreateDataLakeStoreAccountParameters {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(CreateDataLakeStoreAccountParameters.class);

    /*
     * The resource location.
     */
    @JsonProperty(value = "location", required = true)
    private String location;

    /*
     * The resource tags.
     */
    @JsonProperty(value = "tags")
    private Map<String, String> tags;

    /*
     * The Key Vault encryption identity, if any.
     */
    @JsonProperty(value = "identity")
    private EncryptionIdentity identity;

    /*
     * The default owner group for all new folders and files created in the
     * Data Lake Store account.
     */
    @JsonProperty(value = "properties.defaultGroup")
    private String defaultGroup;

    /*
     * The Key Vault encryption configuration.
     */
    @JsonProperty(value = "properties.encryptionConfig")
    private EncryptionConfig encryptionConfig;

    /*
     * The current state of encryption for this Data Lake Store account.
     */
    @JsonProperty(value = "properties.encryptionState")
    private EncryptionState encryptionState;

    /*
     * The list of firewall rules associated with this Data Lake Store account.
     */
    @JsonProperty(value = "properties.firewallRules")
    private List<CreateFirewallRuleWithAccountParameters> firewallRules;

    /*
     * The list of virtual network rules associated with this Data Lake Store
     * account.
     */
    @JsonProperty(value = "properties.virtualNetworkRules")
    private List<CreateVirtualNetworkRuleWithAccountParameters> virtualNetworkRules;

    /*
     * The current state of the IP address firewall for this Data Lake Store
     * account.
     */
    @JsonProperty(value = "properties.firewallState")
    private FirewallState firewallState;

    /*
     * The current state of allowing or disallowing IPs originating within
     * Azure through the firewall. If the firewall is disabled, this is not
     * enforced.
     */
    @JsonProperty(value = "properties.firewallAllowAzureIps")
    private FirewallAllowAzureIpsState firewallAllowAzureIps;

    /*
     * The list of trusted identity providers associated with this Data Lake
     * Store account.
     */
    @JsonProperty(value = "properties.trustedIdProviders")
    private List<CreateTrustedIdProviderWithAccountParameters> trustedIdProviders;

    /*
     * The current state of the trusted identity provider feature for this Data
     * Lake Store account.
     */
    @JsonProperty(value = "properties.trustedIdProviderState")
    private TrustedIdProviderState trustedIdProviderState;

    /*
     * The commitment tier to use for next month.
     */
    @JsonProperty(value = "properties.newTier")
    private TierType newTier;

    /**
     * Get the location property: The resource location.
     *
     * @return the location value.
     */
    public String location() {
        return this.location;
    }

    /**
     * Set the location property: The resource location.
     *
     * @param location the location value to set.
     * @return the CreateDataLakeStoreAccountParameters object itself.
     */
    public CreateDataLakeStoreAccountParameters withLocation(String location) {
        this.location = location;
        return this;
    }

    /**
     * Get the tags property: The resource tags.
     *
     * @return the tags value.
     */
    public Map<String, String> tags() {
        return this.tags;
    }

    /**
     * Set the tags property: The resource tags.
     *
     * @param tags the tags value to set.
     * @return the CreateDataLakeStoreAccountParameters object itself.
     */
    public CreateDataLakeStoreAccountParameters withTags(Map<String, String> tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Get the identity property: The Key Vault encryption identity, if any.
     *
     * @return the identity value.
     */
    public EncryptionIdentity identity() {
        return this.identity;
    }

    /**
     * Set the identity property: The Key Vault encryption identity, if any.
     *
     * @param identity the identity value to set.
     * @return the CreateDataLakeStoreAccountParameters object itself.
     */
    public CreateDataLakeStoreAccountParameters withIdentity(EncryptionIdentity identity) {
        this.identity = identity;
        return this;
    }

    /**
     * Get the defaultGroup property: The default owner group for all new folders and files created in the Data Lake
     * Store account.
     *
     * @return the defaultGroup value.
     */
    public String defaultGroup() {
        return this.defaultGroup;
    }

    /**
     * Set the defaultGroup property: The default owner group for all new folders and files created in the Data Lake
     * Store account.
     *
     * @param defaultGroup the defaultGroup value to set.
     * @return the CreateDataLakeStoreAccountParameters object itself.
     */
    public CreateDataLakeStoreAccountParameters withDefaultGroup(String defaultGroup) {
        this.defaultGroup = defaultGroup;
        return this;
    }

    /**
     * Get the encryptionConfig property: The Key Vault encryption configuration.
     *
     * @return the encryptionConfig value.
     */
    public EncryptionConfig encryptionConfig() {
        return this.encryptionConfig;
    }

    /**
     * Set the encryptionConfig property: The Key Vault encryption configuration.
     *
     * @param encryptionConfig the encryptionConfig value to set.
     * @return the CreateDataLakeStoreAccountParameters object itself.
     */
    public CreateDataLakeStoreAccountParameters withEncryptionConfig(EncryptionConfig encryptionConfig) {
        this.encryptionConfig = encryptionConfig;
        return this;
    }

    /**
     * Get the encryptionState property: The current state of encryption for this Data Lake Store account.
     *
     * @return the encryptionState value.
     */
    public EncryptionState encryptionState() {
        return this.encryptionState;
    }

    /**
     * Set the encryptionState property: The current state of encryption for this Data Lake Store account.
     *
     * @param encryptionState the encryptionState value to set.
     * @return the CreateDataLakeStoreAccountParameters object itself.
     */
    public CreateDataLakeStoreAccountParameters withEncryptionState(EncryptionState encryptionState) {
        this.encryptionState = encryptionState;
        return this;
    }

    /**
     * Get the firewallRules property: The list of firewall rules associated with this Data Lake Store account.
     *
     * @return the firewallRules value.
     */
    public List<CreateFirewallRuleWithAccountParameters> firewallRules() {
        return this.firewallRules;
    }

    /**
     * Set the firewallRules property: The list of firewall rules associated with this Data Lake Store account.
     *
     * @param firewallRules the firewallRules value to set.
     * @return the CreateDataLakeStoreAccountParameters object itself.
     */
    public CreateDataLakeStoreAccountParameters withFirewallRules(
        List<CreateFirewallRuleWithAccountParameters> firewallRules) {
        this.firewallRules = firewallRules;
        return this;
    }

    /**
     * Get the virtualNetworkRules property: The list of virtual network rules associated with this Data Lake Store
     * account.
     *
     * @return the virtualNetworkRules value.
     */
    public List<CreateVirtualNetworkRuleWithAccountParameters> virtualNetworkRules() {
        return this.virtualNetworkRules;
    }

    /**
     * Set the virtualNetworkRules property: The list of virtual network rules associated with this Data Lake Store
     * account.
     *
     * @param virtualNetworkRules the virtualNetworkRules value to set.
     * @return the CreateDataLakeStoreAccountParameters object itself.
     */
    public CreateDataLakeStoreAccountParameters withVirtualNetworkRules(
        List<CreateVirtualNetworkRuleWithAccountParameters> virtualNetworkRules) {
        this.virtualNetworkRules = virtualNetworkRules;
        return this;
    }

    /**
     * Get the firewallState property: The current state of the IP address firewall for this Data Lake Store account.
     *
     * @return the firewallState value.
     */
    public FirewallState firewallState() {
        return this.firewallState;
    }

    /**
     * Set the firewallState property: The current state of the IP address firewall for this Data Lake Store account.
     *
     * @param firewallState the firewallState value to set.
     * @return the CreateDataLakeStoreAccountParameters object itself.
     */
    public CreateDataLakeStoreAccountParameters withFirewallState(FirewallState firewallState) {
        this.firewallState = firewallState;
        return this;
    }

    /**
     * Get the firewallAllowAzureIps property: The current state of allowing or disallowing IPs originating within Azure
     * through the firewall. If the firewall is disabled, this is not enforced.
     *
     * @return the firewallAllowAzureIps value.
     */
    public FirewallAllowAzureIpsState firewallAllowAzureIps() {
        return this.firewallAllowAzureIps;
    }

    /**
     * Set the firewallAllowAzureIps property: The current state of allowing or disallowing IPs originating within Azure
     * through the firewall. If the firewall is disabled, this is not enforced.
     *
     * @param firewallAllowAzureIps the firewallAllowAzureIps value to set.
     * @return the CreateDataLakeStoreAccountParameters object itself.
     */
    public CreateDataLakeStoreAccountParameters withFirewallAllowAzureIps(
        FirewallAllowAzureIpsState firewallAllowAzureIps) {
        this.firewallAllowAzureIps = firewallAllowAzureIps;
        return this;
    }

    /**
     * Get the trustedIdProviders property: The list of trusted identity providers associated with this Data Lake Store
     * account.
     *
     * @return the trustedIdProviders value.
     */
    public List<CreateTrustedIdProviderWithAccountParameters> trustedIdProviders() {
        return this.trustedIdProviders;
    }

    /**
     * Set the trustedIdProviders property: The list of trusted identity providers associated with this Data Lake Store
     * account.
     *
     * @param trustedIdProviders the trustedIdProviders value to set.
     * @return the CreateDataLakeStoreAccountParameters object itself.
     */
    public CreateDataLakeStoreAccountParameters withTrustedIdProviders(
        List<CreateTrustedIdProviderWithAccountParameters> trustedIdProviders) {
        this.trustedIdProviders = trustedIdProviders;
        return this;
    }

    /**
     * Get the trustedIdProviderState property: The current state of the trusted identity provider feature for this Data
     * Lake Store account.
     *
     * @return the trustedIdProviderState value.
     */
    public TrustedIdProviderState trustedIdProviderState() {
        return this.trustedIdProviderState;
    }

    /**
     * Set the trustedIdProviderState property: The current state of the trusted identity provider feature for this Data
     * Lake Store account.
     *
     * @param trustedIdProviderState the trustedIdProviderState value to set.
     * @return the CreateDataLakeStoreAccountParameters object itself.
     */
    public CreateDataLakeStoreAccountParameters withTrustedIdProviderState(
        TrustedIdProviderState trustedIdProviderState) {
        this.trustedIdProviderState = trustedIdProviderState;
        return this;
    }

    /**
     * Get the newTier property: The commitment tier to use for next month.
     *
     * @return the newTier value.
     */
    public TierType newTier() {
        return this.newTier;
    }

    /**
     * Set the newTier property: The commitment tier to use for next month.
     *
     * @param newTier the newTier value to set.
     * @return the CreateDataLakeStoreAccountParameters object itself.
     */
    public CreateDataLakeStoreAccountParameters withNewTier(TierType newTier) {
        this.newTier = newTier;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (location() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property location in model CreateDataLakeStoreAccountParameters"));
        }
        if (identity() != null) {
            identity().validate();
        }
        if (encryptionConfig() != null) {
            encryptionConfig().validate();
        }
        if (firewallRules() != null) {
            firewallRules().forEach(e -> e.validate());
        }
        if (virtualNetworkRules() != null) {
            virtualNetworkRules().forEach(e -> e.validate());
        }
        if (trustedIdProviders() != null) {
            trustedIdProviders().forEach(e -> e.validate());
        }
    }
}
