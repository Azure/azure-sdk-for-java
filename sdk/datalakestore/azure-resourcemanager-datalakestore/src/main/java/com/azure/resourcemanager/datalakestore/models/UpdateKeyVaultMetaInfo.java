// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datalakestore.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The Key Vault update information used for user managed key rotation.
 */
@Fluent
public final class UpdateKeyVaultMetaInfo implements JsonSerializable<UpdateKeyVaultMetaInfo> {
    /*
     * The version of the user managed encryption key to update through a key rotation.
     */
    private String encryptionKeyVersion;

    /**
     * Creates an instance of UpdateKeyVaultMetaInfo class.
     */
    public UpdateKeyVaultMetaInfo() {
    }

    /**
     * Get the encryptionKeyVersion property: The version of the user managed encryption key to update through a key
     * rotation.
     * 
     * @return the encryptionKeyVersion value.
     */
    public String encryptionKeyVersion() {
        return this.encryptionKeyVersion;
    }

    /**
     * Set the encryptionKeyVersion property: The version of the user managed encryption key to update through a key
     * rotation.
     * 
     * @param encryptionKeyVersion the encryptionKeyVersion value to set.
     * @return the UpdateKeyVaultMetaInfo object itself.
     */
    public UpdateKeyVaultMetaInfo withEncryptionKeyVersion(String encryptionKeyVersion) {
        this.encryptionKeyVersion = encryptionKeyVersion;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("encryptionKeyVersion", this.encryptionKeyVersion);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of UpdateKeyVaultMetaInfo from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of UpdateKeyVaultMetaInfo if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the UpdateKeyVaultMetaInfo.
     */
    public static UpdateKeyVaultMetaInfo fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            UpdateKeyVaultMetaInfo deserializedUpdateKeyVaultMetaInfo = new UpdateKeyVaultMetaInfo();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("encryptionKeyVersion".equals(fieldName)) {
                    deserializedUpdateKeyVaultMetaInfo.encryptionKeyVersion = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedUpdateKeyVaultMetaInfo;
        });
    }
}
