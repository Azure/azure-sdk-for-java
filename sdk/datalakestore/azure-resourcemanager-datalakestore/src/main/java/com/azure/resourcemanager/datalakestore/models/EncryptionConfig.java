// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datalakestore.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The encryption configuration for the account.
 */
@Fluent
public final class EncryptionConfig implements JsonSerializable<EncryptionConfig> {
    /*
     * The type of encryption configuration being used. Currently the only supported types are 'UserManaged' and
     * 'ServiceManaged'.
     */
    private EncryptionConfigType type;

    /*
     * The Key Vault information for connecting to user managed encryption keys.
     */
    private KeyVaultMetaInfo keyVaultMetaInfo;

    /**
     * Creates an instance of EncryptionConfig class.
     */
    public EncryptionConfig() {
    }

    /**
     * Get the type property: The type of encryption configuration being used. Currently the only supported types are
     * 'UserManaged' and 'ServiceManaged'.
     * 
     * @return the type value.
     */
    public EncryptionConfigType type() {
        return this.type;
    }

    /**
     * Set the type property: The type of encryption configuration being used. Currently the only supported types are
     * 'UserManaged' and 'ServiceManaged'.
     * 
     * @param type the type value to set.
     * @return the EncryptionConfig object itself.
     */
    public EncryptionConfig withType(EncryptionConfigType type) {
        this.type = type;
        return this;
    }

    /**
     * Get the keyVaultMetaInfo property: The Key Vault information for connecting to user managed encryption keys.
     * 
     * @return the keyVaultMetaInfo value.
     */
    public KeyVaultMetaInfo keyVaultMetaInfo() {
        return this.keyVaultMetaInfo;
    }

    /**
     * Set the keyVaultMetaInfo property: The Key Vault information for connecting to user managed encryption keys.
     * 
     * @param keyVaultMetaInfo the keyVaultMetaInfo value to set.
     * @return the EncryptionConfig object itself.
     */
    public EncryptionConfig withKeyVaultMetaInfo(KeyVaultMetaInfo keyVaultMetaInfo) {
        this.keyVaultMetaInfo = keyVaultMetaInfo;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (type() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property type in model EncryptionConfig"));
        }
        if (keyVaultMetaInfo() != null) {
            keyVaultMetaInfo().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(EncryptionConfig.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeJsonField("keyVaultMetaInfo", this.keyVaultMetaInfo);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EncryptionConfig from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of EncryptionConfig if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the EncryptionConfig.
     */
    public static EncryptionConfig fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            EncryptionConfig deserializedEncryptionConfig = new EncryptionConfig();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    deserializedEncryptionConfig.type = EncryptionConfigType.fromString(reader.getString());
                } else if ("keyVaultMetaInfo".equals(fieldName)) {
                    deserializedEncryptionConfig.keyVaultMetaInfo = KeyVaultMetaInfo.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedEncryptionConfig;
        });
    }
}
