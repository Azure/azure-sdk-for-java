// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datalakestore.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;
import com.azure.resourcemanager.datalakestore.fluent.models.TrustedIdProviderInner;
import com.azure.resourcemanager.datalakestore.models.CreateOrUpdateTrustedIdProviderParameters;
import com.azure.resourcemanager.datalakestore.models.UpdateTrustedIdProviderParameters;

/** An instance of this class provides access to all the operations defined in TrustedIdProvidersClient. */
public interface TrustedIdProvidersClient {
    /**
     * Lists the Data Lake Store trusted identity providers within the specified Data Lake Store account.
     *
     * @param resourceGroupName The name of the Azure resource group.
     * @param accountName The name of the Data Lake Store account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return data Lake Store trusted identity provider list information.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<TrustedIdProviderInner> listByAccount(String resourceGroupName, String accountName);

    /**
     * Lists the Data Lake Store trusted identity providers within the specified Data Lake Store account.
     *
     * @param resourceGroupName The name of the Azure resource group.
     * @param accountName The name of the Data Lake Store account.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return data Lake Store trusted identity provider list information.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<TrustedIdProviderInner> listByAccount(String resourceGroupName, String accountName, Context context);

    /**
     * Creates or updates the specified trusted identity provider. During update, the trusted identity provider with the
     * specified name will be replaced with this new provider.
     *
     * @param resourceGroupName The name of the Azure resource group.
     * @param accountName The name of the Data Lake Store account.
     * @param trustedIdProviderName The name of the trusted identity provider. This is used for differentiation of
     *     providers in the account.
     * @param parameters Parameters supplied to create or replace the trusted identity provider.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return data Lake Store trusted identity provider information.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    TrustedIdProviderInner createOrUpdate(
        String resourceGroupName,
        String accountName,
        String trustedIdProviderName,
        CreateOrUpdateTrustedIdProviderParameters parameters);

    /**
     * Creates or updates the specified trusted identity provider. During update, the trusted identity provider with the
     * specified name will be replaced with this new provider.
     *
     * @param resourceGroupName The name of the Azure resource group.
     * @param accountName The name of the Data Lake Store account.
     * @param trustedIdProviderName The name of the trusted identity provider. This is used for differentiation of
     *     providers in the account.
     * @param parameters Parameters supplied to create or replace the trusted identity provider.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return data Lake Store trusted identity provider information.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<TrustedIdProviderInner> createOrUpdateWithResponse(
        String resourceGroupName,
        String accountName,
        String trustedIdProviderName,
        CreateOrUpdateTrustedIdProviderParameters parameters,
        Context context);

    /**
     * Gets the specified Data Lake Store trusted identity provider.
     *
     * @param resourceGroupName The name of the Azure resource group.
     * @param accountName The name of the Data Lake Store account.
     * @param trustedIdProviderName The name of the trusted identity provider to retrieve.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the specified Data Lake Store trusted identity provider.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    TrustedIdProviderInner get(String resourceGroupName, String accountName, String trustedIdProviderName);

    /**
     * Gets the specified Data Lake Store trusted identity provider.
     *
     * @param resourceGroupName The name of the Azure resource group.
     * @param accountName The name of the Data Lake Store account.
     * @param trustedIdProviderName The name of the trusted identity provider to retrieve.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the specified Data Lake Store trusted identity provider.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<TrustedIdProviderInner> getWithResponse(
        String resourceGroupName, String accountName, String trustedIdProviderName, Context context);

    /**
     * Updates the specified trusted identity provider.
     *
     * @param resourceGroupName The name of the Azure resource group.
     * @param accountName The name of the Data Lake Store account.
     * @param trustedIdProviderName The name of the trusted identity provider. This is used for differentiation of
     *     providers in the account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return data Lake Store trusted identity provider information.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    TrustedIdProviderInner update(String resourceGroupName, String accountName, String trustedIdProviderName);

    /**
     * Updates the specified trusted identity provider.
     *
     * @param resourceGroupName The name of the Azure resource group.
     * @param accountName The name of the Data Lake Store account.
     * @param trustedIdProviderName The name of the trusted identity provider. This is used for differentiation of
     *     providers in the account.
     * @param parameters Parameters supplied to update the trusted identity provider.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return data Lake Store trusted identity provider information.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<TrustedIdProviderInner> updateWithResponse(
        String resourceGroupName,
        String accountName,
        String trustedIdProviderName,
        UpdateTrustedIdProviderParameters parameters,
        Context context);

    /**
     * Deletes the specified trusted identity provider from the specified Data Lake Store account.
     *
     * @param resourceGroupName The name of the Azure resource group.
     * @param accountName The name of the Data Lake Store account.
     * @param trustedIdProviderName The name of the trusted identity provider to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String accountName, String trustedIdProviderName);

    /**
     * Deletes the specified trusted identity provider from the specified Data Lake Store account.
     *
     * @param resourceGroupName The name of the Azure resource group.
     * @param accountName The name of the Data Lake Store account.
     * @param trustedIdProviderName The name of the trusted identity provider to delete.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<Void> deleteWithResponse(
        String resourceGroupName, String accountName, String trustedIdProviderName, Context context);
}
