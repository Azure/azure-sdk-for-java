// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datalakestore.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The trusted identity provider properties to use when creating a new trusted identity provider.
 */
@Fluent
public final class CreateOrUpdateTrustedIdProviderProperties
    implements JsonSerializable<CreateOrUpdateTrustedIdProviderProperties> {
    /*
     * The URL of this trusted identity provider.
     */
    private String idProvider;

    /**
     * Creates an instance of CreateOrUpdateTrustedIdProviderProperties class.
     */
    public CreateOrUpdateTrustedIdProviderProperties() {
    }

    /**
     * Get the idProvider property: The URL of this trusted identity provider.
     * 
     * @return the idProvider value.
     */
    public String idProvider() {
        return this.idProvider;
    }

    /**
     * Set the idProvider property: The URL of this trusted identity provider.
     * 
     * @param idProvider the idProvider value to set.
     * @return the CreateOrUpdateTrustedIdProviderProperties object itself.
     */
    public CreateOrUpdateTrustedIdProviderProperties withIdProvider(String idProvider) {
        this.idProvider = idProvider;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (idProvider() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property idProvider in model CreateOrUpdateTrustedIdProviderProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(CreateOrUpdateTrustedIdProviderProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("idProvider", this.idProvider);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CreateOrUpdateTrustedIdProviderProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CreateOrUpdateTrustedIdProviderProperties if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CreateOrUpdateTrustedIdProviderProperties.
     */
    public static CreateOrUpdateTrustedIdProviderProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CreateOrUpdateTrustedIdProviderProperties deserializedCreateOrUpdateTrustedIdProviderProperties
                = new CreateOrUpdateTrustedIdProviderProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("idProvider".equals(fieldName)) {
                    deserializedCreateOrUpdateTrustedIdProviderProperties.idProvider = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCreateOrUpdateTrustedIdProviderProperties;
        });
    }
}
