// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datalakestore.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.datalakestore.fluent.models.UpdateTrustedIdProviderProperties;
import com.fasterxml.jackson.annotation.JsonProperty;

/** The parameters used to update a trusted identity provider. */
@Fluent
public final class UpdateTrustedIdProviderParameters {
    /*
     * The trusted identity provider properties to use when updating a trusted identity provider.
     */
    @JsonProperty(value = "properties")
    private UpdateTrustedIdProviderProperties innerProperties;

    /** Creates an instance of UpdateTrustedIdProviderParameters class. */
    public UpdateTrustedIdProviderParameters() {
    }

    /**
     * Get the innerProperties property: The trusted identity provider properties to use when updating a trusted
     * identity provider.
     *
     * @return the innerProperties value.
     */
    private UpdateTrustedIdProviderProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the idProvider property: The URL of this trusted identity provider.
     *
     * @return the idProvider value.
     */
    public String idProvider() {
        return this.innerProperties() == null ? null : this.innerProperties().idProvider();
    }

    /**
     * Set the idProvider property: The URL of this trusted identity provider.
     *
     * @param idProvider the idProvider value to set.
     * @return the UpdateTrustedIdProviderParameters object itself.
     */
    public UpdateTrustedIdProviderParameters withIdProvider(String idProvider) {
        if (this.innerProperties() == null) {
            this.innerProperties = new UpdateTrustedIdProviderProperties();
        }
        this.innerProperties().withIdProvider(idProvider);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }
}
