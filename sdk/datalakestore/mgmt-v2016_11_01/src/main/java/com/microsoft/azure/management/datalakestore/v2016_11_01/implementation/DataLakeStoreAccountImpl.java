/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.datalakestore.v2016_11_01.implementation;

import com.microsoft.azure.arm.resources.models.implementation.GroupableResourceCoreImpl;
import com.microsoft.azure.management.datalakestore.v2016_11_01.DataLakeStoreAccount;
import rx.Observable;
import com.microsoft.azure.management.datalakestore.v2016_11_01.UpdateDataLakeStoreAccountParameters;
import java.util.List;
import com.microsoft.azure.management.datalakestore.v2016_11_01.CreateDataLakeStoreAccountParameters;
import java.util.UUID;
import org.joda.time.DateTime;
import com.microsoft.azure.management.datalakestore.v2016_11_01.TierType;
import com.microsoft.azure.management.datalakestore.v2016_11_01.EncryptionConfig;
import com.microsoft.azure.management.datalakestore.v2016_11_01.EncryptionProvisioningState;
import com.microsoft.azure.management.datalakestore.v2016_11_01.EncryptionState;
import com.microsoft.azure.management.datalakestore.v2016_11_01.FirewallAllowAzureIpsState;
import java.util.ArrayList;
import com.microsoft.azure.management.datalakestore.v2016_11_01.FirewallRule;
import com.microsoft.azure.management.datalakestore.v2016_11_01.FirewallState;
import com.microsoft.azure.management.datalakestore.v2016_11_01.EncryptionIdentity;
import com.microsoft.azure.management.datalakestore.v2016_11_01.DataLakeStoreAccountStatus;
import com.microsoft.azure.management.datalakestore.v2016_11_01.DataLakeStoreAccountState;
import com.microsoft.azure.management.datalakestore.v2016_11_01.TrustedIdProvider;
import com.microsoft.azure.management.datalakestore.v2016_11_01.TrustedIdProviderState;
import com.microsoft.azure.management.datalakestore.v2016_11_01.VirtualNetworkRule;
import com.microsoft.azure.management.datalakestore.v2016_11_01.CreateFirewallRuleWithAccountParameters;
import com.microsoft.azure.management.datalakestore.v2016_11_01.CreateTrustedIdProviderWithAccountParameters;
import com.microsoft.azure.management.datalakestore.v2016_11_01.CreateVirtualNetworkRuleWithAccountParameters;
import com.microsoft.azure.management.datalakestore.v2016_11_01.UpdateEncryptionConfig;
import com.microsoft.azure.management.datalakestore.v2016_11_01.UpdateFirewallRuleWithAccountParameters;
import com.microsoft.azure.management.datalakestore.v2016_11_01.UpdateTrustedIdProviderWithAccountParameters;
import com.microsoft.azure.management.datalakestore.v2016_11_01.UpdateVirtualNetworkRuleWithAccountParameters;
import rx.functions.Func1;

class DataLakeStoreAccountImpl extends GroupableResourceCoreImpl<DataLakeStoreAccount, DataLakeStoreAccountInner, DataLakeStoreAccountImpl, DataLakeStoreManager> implements DataLakeStoreAccount, DataLakeStoreAccount.Definition, DataLakeStoreAccount.Update {
    private CreateDataLakeStoreAccountParameters createParameter;
    private UpdateDataLakeStoreAccountParameters updateParameter;
    DataLakeStoreAccountImpl(String name, DataLakeStoreAccountInner inner, DataLakeStoreManager manager) {
        super(name, inner, manager);
        this.createParameter = new CreateDataLakeStoreAccountParameters();
        this.updateParameter = new UpdateDataLakeStoreAccountParameters();
    }

    @Override
    public Observable<DataLakeStoreAccount> createResourceAsync() {
        AccountsInner client = this.manager().inner().accounts();
        this.createParameter.withLocation(inner().location());
        this.createParameter.withTags(inner().getTags());
        return client.createAsync(this.resourceGroupName(), this.name(), this.createParameter)
            .map(new Func1<DataLakeStoreAccountInner, DataLakeStoreAccountInner>() {
               @Override
               public DataLakeStoreAccountInner call(DataLakeStoreAccountInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<DataLakeStoreAccount> updateResourceAsync() {
        AccountsInner client = this.manager().inner().accounts();
        return client.updateAsync(this.resourceGroupName(), this.name(), this.updateParameter)
            .map(new Func1<DataLakeStoreAccountInner, DataLakeStoreAccountInner>() {
               @Override
               public DataLakeStoreAccountInner call(DataLakeStoreAccountInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<DataLakeStoreAccountInner> getInnerAsync() {
        AccountsInner client = this.manager().inner().accounts();
        return client.getByResourceGroupAsync(this.resourceGroupName(), this.name());
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }

    private void resetCreateUpdateParameters() {
        this.createParameter = new CreateDataLakeStoreAccountParameters();
        this.updateParameter = new UpdateDataLakeStoreAccountParameters();
    }

    @Override
    public UUID accountId() {
        return this.inner().accountId();
    }

    @Override
    public DateTime creationTime() {
        return this.inner().creationTime();
    }

    @Override
    public TierType currentTier() {
        return this.inner().currentTier();
    }

    @Override
    public String defaultGroup() {
        return this.inner().defaultGroup();
    }

    @Override
    public EncryptionConfig encryptionConfig() {
        return this.inner().encryptionConfig();
    }

    @Override
    public EncryptionProvisioningState encryptionProvisioningState() {
        return this.inner().encryptionProvisioningState();
    }

    @Override
    public EncryptionState encryptionState() {
        return this.inner().encryptionState();
    }

    @Override
    public String endpoint() {
        return this.inner().endpoint();
    }

    @Override
    public FirewallAllowAzureIpsState firewallAllowAzureIps() {
        return this.inner().firewallAllowAzureIps();
    }

    @Override
    public List<FirewallRule> firewallRules() {
        List<FirewallRule> lst = new ArrayList<FirewallRule>();
        if (this.inner().firewallRules() != null) {
            for (FirewallRuleInner inner : this.inner().firewallRules()) {
                lst.add( new FirewallRuleImpl(inner, manager()));
            }
        }
        return lst;
    }

    @Override
    public FirewallState firewallState() {
        return this.inner().firewallState();
    }

    @Override
    public EncryptionIdentity identity() {
        return this.inner().identity();
    }

    @Override
    public DateTime lastModifiedTime() {
        return this.inner().lastModifiedTime();
    }

    @Override
    public TierType newTier() {
        return this.inner().newTier();
    }

    @Override
    public DataLakeStoreAccountStatus provisioningState() {
        return this.inner().provisioningState();
    }

    @Override
    public DataLakeStoreAccountState state() {
        return this.inner().state();
    }

    @Override
    public List<TrustedIdProvider> trustedIdProviders() {
        List<TrustedIdProvider> lst = new ArrayList<TrustedIdProvider>();
        if (this.inner().trustedIdProviders() != null) {
            for (TrustedIdProviderInner inner : this.inner().trustedIdProviders()) {
                lst.add( new TrustedIdProviderImpl(inner, manager()));
            }
        }
        return lst;
    }

    @Override
    public TrustedIdProviderState trustedIdProviderState() {
        return this.inner().trustedIdProviderState();
    }

    @Override
    public List<VirtualNetworkRule> virtualNetworkRules() {
        List<VirtualNetworkRule> lst = new ArrayList<VirtualNetworkRule>();
        if (this.inner().virtualNetworkRules() != null) {
            for (VirtualNetworkRuleInner inner : this.inner().virtualNetworkRules()) {
                lst.add( new VirtualNetworkRuleImpl(inner, manager()));
            }
        }
        return lst;
    }

    @Override
    public DataLakeStoreAccountImpl withEncryptionConfig(EncryptionConfig encryptionConfig) {
        this.createParameter.withEncryptionConfig(encryptionConfig);
        return this;
    }

    @Override
    public DataLakeStoreAccountImpl withEncryptionState(EncryptionState encryptionState) {
        this.createParameter.withEncryptionState(encryptionState);
        return this;
    }

    @Override
    public DataLakeStoreAccountImpl withFirewallRulesForCreate(List<CreateFirewallRuleWithAccountParameters> firewallRules) {
        this.createParameter.withFirewallRules(firewallRules);
        return this;
    }

    @Override
    public DataLakeStoreAccountImpl withIdentity(EncryptionIdentity identity) {
        this.createParameter.withIdentity(identity);
        return this;
    }

    @Override
    public DataLakeStoreAccountImpl withTrustedIdProvidersForCreate(List<CreateTrustedIdProviderWithAccountParameters> trustedIdProviders) {
        this.createParameter.withTrustedIdProviders(trustedIdProviders);
        return this;
    }

    @Override
    public DataLakeStoreAccountImpl withVirtualNetworkRulesForCreate(List<CreateVirtualNetworkRuleWithAccountParameters> virtualNetworkRules) {
        this.createParameter.withVirtualNetworkRules(virtualNetworkRules);
        return this;
    }

    @Override
    public DataLakeStoreAccountImpl withEncryptionConfig(UpdateEncryptionConfig encryptionConfig) {
        this.updateParameter.withEncryptionConfig(encryptionConfig);
        return this;
    }

    @Override
    public DataLakeStoreAccountImpl withFirewallRulesForUpdate(List<UpdateFirewallRuleWithAccountParameters> firewallRules) {
        this.updateParameter.withFirewallRules(firewallRules);
        return this;
    }

    @Override
    public DataLakeStoreAccountImpl withTrustedIdProvidersForUpdate(List<UpdateTrustedIdProviderWithAccountParameters> trustedIdProviders) {
        this.updateParameter.withTrustedIdProviders(trustedIdProviders);
        return this;
    }

    @Override
    public DataLakeStoreAccountImpl withVirtualNetworkRulesForUpdate(List<UpdateVirtualNetworkRuleWithAccountParameters> virtualNetworkRules) {
        this.updateParameter.withVirtualNetworkRules(virtualNetworkRules);
        return this;
    }

    @Override
    public DataLakeStoreAccountImpl withDefaultGroup(String defaultGroup) {
        if (isInCreateMode()) {
            this.createParameter.withDefaultGroup(defaultGroup);
        } else {
            this.updateParameter.withDefaultGroup(defaultGroup);
        }
        return this;
    }

    @Override
    public DataLakeStoreAccountImpl withFirewallAllowAzureIps(FirewallAllowAzureIpsState firewallAllowAzureIps) {
        if (isInCreateMode()) {
            this.createParameter.withFirewallAllowAzureIps(firewallAllowAzureIps);
        } else {
            this.updateParameter.withFirewallAllowAzureIps(firewallAllowAzureIps);
        }
        return this;
    }

    @Override
    public DataLakeStoreAccountImpl withFirewallState(FirewallState firewallState) {
        if (isInCreateMode()) {
            this.createParameter.withFirewallState(firewallState);
        } else {
            this.updateParameter.withFirewallState(firewallState);
        }
        return this;
    }

    @Override
    public DataLakeStoreAccountImpl withNewTier(TierType newTier) {
        if (isInCreateMode()) {
            this.createParameter.withNewTier(newTier);
        } else {
            this.updateParameter.withNewTier(newTier);
        }
        return this;
    }

    @Override
    public DataLakeStoreAccountImpl withTrustedIdProviderState(TrustedIdProviderState trustedIdProviderState) {
        if (isInCreateMode()) {
            this.createParameter.withTrustedIdProviderState(trustedIdProviderState);
        } else {
            this.updateParameter.withTrustedIdProviderState(trustedIdProviderState);
        }
        return this;
    }

}
