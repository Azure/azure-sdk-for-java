/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.datalakestore.v2015_10_01_preview.implementation;

import com.microsoft.azure.management.datalakestore.v2015_10_01_preview.FirewallRule;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import com.microsoft.azure.management.datalakestore.v2015_10_01_preview.FirewallRuleProperties;

class FirewallRuleImpl extends CreatableUpdatableImpl<FirewallRule, FirewallRuleInner, FirewallRuleImpl> implements FirewallRule, FirewallRule.Definition, FirewallRule.Update {
    private final DataLakeStoreManager manager;
    private String resourceGroupName;
    private String accountName;
    private String name;

    FirewallRuleImpl(String name, DataLakeStoreManager manager) {
        super(name, new FirewallRuleInner());
        this.manager = manager;
        // Set resource name
        this.name = name;
        //
    }

    FirewallRuleImpl(FirewallRuleInner inner, DataLakeStoreManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.name = inner.name();
        // resource ancestor names
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.accountName = IdParsingUtils.getValueFromIdByName(inner.id(), "accounts");
        this.name = IdParsingUtils.getValueFromIdByName(inner.id(), "firewallRules");
        //
    }

    @Override
    public DataLakeStoreManager manager() {
        return this.manager;
    }

    @Override
    public Observable<FirewallRule> createResourceAsync() {
        AccountsInner client = this.manager().inner().accounts();
        return client.createOrUpdateFirewallRuleAsync(this.resourceGroupName, this.accountName, this.name, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<FirewallRule> updateResourceAsync() {
        AccountsInner client = this.manager().inner().accounts();
        return client.createOrUpdateFirewallRuleAsync(this.resourceGroupName, this.accountName, this.name, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<FirewallRuleInner> getInnerAsync() {
        AccountsInner client = this.manager().inner().accounts();
        return client.getFirewallRuleAsync(this.resourceGroupName, this.accountName, this.name);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String location() {
        return this.inner().location();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public FirewallRuleProperties properties() {
        return this.inner().properties();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public FirewallRuleImpl withExistingAccount(String resourceGroupName, String accountName) {
        this.resourceGroupName = resourceGroupName;
        this.accountName = accountName;
        return this;
    }

    @Override
    public FirewallRuleImpl withId(String id) {
        this.inner().withId(id);
        return this;
    }

    @Override
    public FirewallRuleImpl withLocation(String location) {
        this.inner().withLocation(location);
        return this;
    }

    @Override
    public FirewallRuleImpl withName(String name) {
        this.inner().withName(name);
        return this;
    }

    @Override
    public FirewallRuleImpl withProperties(FirewallRuleProperties properties) {
        this.inner().withProperties(properties);
        return this;
    }

}
