/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.servicebus.v2017_04_01.implementation;

import com.microsoft.azure.management.servicebus.v2017_04_01.MigrationConfigProperties;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;

class MigrationConfigPropertiesImpl extends CreatableUpdatableImpl<MigrationConfigProperties, MigrationConfigPropertiesInner, MigrationConfigPropertiesImpl> implements MigrationConfigProperties, MigrationConfigProperties.Definition, MigrationConfigProperties.Update {
    private final ServiceBusManager manager;
    private String resourceGroupName;
    private String namespaceName;

    MigrationConfigPropertiesImpl(String name, ServiceBusManager manager) {
        super(name, new MigrationConfigPropertiesInner());
        this.manager = manager;
        // Set resource name
        this.namespaceName = name;
        //
    }

    MigrationConfigPropertiesImpl(MigrationConfigPropertiesInner inner, ServiceBusManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.namespaceName = inner.name();
        // set resource ancestor and positional variables
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.namespaceName = IdParsingUtils.getValueFromIdByName(inner.id(), "namespaces");
        //
    }

    @Override
    public ServiceBusManager manager() {
        return this.manager;
    }

    @Override
    public Observable<MigrationConfigProperties> createResourceAsync() {
        MigrationConfigsInner client = this.manager().inner().migrationConfigs();
        return client.createAndStartMigrationAsync(this.resourceGroupName, this.namespaceName, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<MigrationConfigProperties> updateResourceAsync() {
        MigrationConfigsInner client = this.manager().inner().migrationConfigs();
        return client.createAndStartMigrationAsync(this.resourceGroupName, this.namespaceName, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<MigrationConfigPropertiesInner> getInnerAsync() {
        MigrationConfigsInner client = this.manager().inner().migrationConfigs();
        return client.getAsync(this.resourceGroupName, this.namespaceName);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String migrationState() {
        return this.inner().migrationState();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public Long pendingReplicationOperationsCount() {
        return this.inner().pendingReplicationOperationsCount();
    }

    @Override
    public String postMigrationName() {
        return this.inner().postMigrationName();
    }

    @Override
    public String provisioningState() {
        return this.inner().provisioningState();
    }

    @Override
    public String targetNamespace() {
        return this.inner().targetNamespace();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public MigrationConfigPropertiesImpl withExistingNamespace(String resourceGroupName, String namespaceName) {
        this.resourceGroupName = resourceGroupName;
        this.namespaceName = namespaceName;
        return this;
    }

    @Override
    public MigrationConfigPropertiesImpl withPostMigrationName(String postMigrationName) {
        this.inner().withPostMigrationName(postMigrationName);
        return this;
    }

    @Override
    public MigrationConfigPropertiesImpl withTargetNamespace(String targetNamespace) {
        this.inner().withTargetNamespace(targetNamespace);
        return this;
    }

}
