/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.servicebus.v2015_08_01;

import com.microsoft.azure.arm.model.HasInner;
import com.microsoft.azure.management.servicebus.v2015_08_01.implementation.TopicResourceInner;
import com.microsoft.azure.arm.model.Indexable;
import com.microsoft.azure.arm.model.Refreshable;
import com.microsoft.azure.arm.model.Updatable;
import com.microsoft.azure.arm.model.Appliable;
import com.microsoft.azure.arm.model.Creatable;
import com.microsoft.azure.arm.resources.models.HasManager;
import com.microsoft.azure.management.servicebus.v2015_08_01.implementation.ServiceBusManager;
import org.joda.time.DateTime;

/**
 * Type representing TopicResource.
 */
public interface TopicResource extends HasInner<TopicResourceInner>, Indexable, Refreshable<TopicResource>, Updatable<TopicResource.Update>, HasManager<ServiceBusManager> {
    /**
     * @return the accessedAt value.
     */
    DateTime accessedAt();

    /**
     * @return the autoDeleteOnIdle value.
     */
    String autoDeleteOnIdle();

    /**
     * @return the countDetails value.
     */
    MessageCountDetails countDetails();

    /**
     * @return the createdAt value.
     */
    DateTime createdAt();

    /**
     * @return the defaultMessageTimeToLive value.
     */
    String defaultMessageTimeToLive();

    /**
     * @return the duplicateDetectionHistoryTimeWindow value.
     */
    String duplicateDetectionHistoryTimeWindow();

    /**
     * @return the enableBatchedOperations value.
     */
    Boolean enableBatchedOperations();

    /**
     * @return the enableExpress value.
     */
    Boolean enableExpress();

    /**
     * @return the enablePartitioning value.
     */
    Boolean enablePartitioning();

    /**
     * @return the entityAvailabilityStatus value.
     */
    EntityAvailabilityStatus entityAvailabilityStatus();

    /**
     * @return the filteringMessagesBeforePublishing value.
     */
    Boolean filteringMessagesBeforePublishing();

    /**
     * @return the id value.
     */
    String id();

    /**
     * @return the isAnonymousAccessible value.
     */
    Boolean isAnonymousAccessible();

    /**
     * @return the isExpress value.
     */
    Boolean isExpress();

    /**
     * @return the location value.
     */
    String location();

    /**
     * @return the maxSizeInMegabytes value.
     */
    Long maxSizeInMegabytes();

    /**
     * @return the name value.
     */
    String name();

    /**
     * @return the requiresDuplicateDetection value.
     */
    Boolean requiresDuplicateDetection();

    /**
     * @return the sizeInBytes value.
     */
    Long sizeInBytes();

    /**
     * @return the status value.
     */
    EntityStatus status();

    /**
     * @return the subscriptionCount value.
     */
    Integer subscriptionCount();

    /**
     * @return the supportOrdering value.
     */
    Boolean supportOrdering();

    /**
     * @return the type value.
     */
    String type();

    /**
     * @return the updatedAt value.
     */
    DateTime updatedAt();

    /**
     * The entirety of the TopicResource definition.
     */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithNamespace, DefinitionStages.WithLocation, DefinitionStages.WithCreate {
    }

    /**
     * Grouping of TopicResource definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of a TopicResource definition.
         */
        interface Blank extends WithNamespace {
        }

        /**
         * The stage of the topicresource definition allowing to specify Namespace.
         */
        interface WithNamespace {
           /**
            * Specifies resourceGroupName, namespaceName.
            * @param resourceGroupName Name of the Resource group within the Azure subscription
            * @param namespaceName The namespace name
            * @return the next definition stage
            */
            WithLocation withExistingNamespace(String resourceGroupName, String namespaceName);
        }

        /**
         * The stage of the topicresource definition allowing to specify Location.
         */
        interface WithLocation {
           /**
            * Specifies location.
            * @param location Location of the resource
            * @return the next definition stage
            */
            WithCreate withLocation(String location);
        }

        /**
         * The stage of the topicresource definition allowing to specify AutoDeleteOnIdle.
         */
        interface WithAutoDeleteOnIdle {
            /**
             * Specifies autoDeleteOnIdle.
             * @param autoDeleteOnIdle TimeSpan idle interval after which the topic is automatically deleted. The minimum duration is 5 minutes
             * @return the next definition stage
             */
            WithCreate withAutoDeleteOnIdle(String autoDeleteOnIdle);
        }

        /**
         * The stage of the topicresource definition allowing to specify DefaultMessageTimeToLive.
         */
        interface WithDefaultMessageTimeToLive {
            /**
             * Specifies defaultMessageTimeToLive.
             * @param defaultMessageTimeToLive Default message time to live value. This is the duration after which the message expires, starting from when the message is sent to Service Bus. This is the default value used when TimeToLive is not set on a message itself
             * @return the next definition stage
             */
            WithCreate withDefaultMessageTimeToLive(String defaultMessageTimeToLive);
        }

        /**
         * The stage of the topicresource definition allowing to specify DuplicateDetectionHistoryTimeWindow.
         */
        interface WithDuplicateDetectionHistoryTimeWindow {
            /**
             * Specifies duplicateDetectionHistoryTimeWindow.
             * @param duplicateDetectionHistoryTimeWindow TimeSpan structure that defines the duration of the duplicate detection history. The default value is 10 minutes
             * @return the next definition stage
             */
            WithCreate withDuplicateDetectionHistoryTimeWindow(String duplicateDetectionHistoryTimeWindow);
        }

        /**
         * The stage of the topicresource definition allowing to specify EnableBatchedOperations.
         */
        interface WithEnableBatchedOperations {
            /**
             * Specifies enableBatchedOperations.
             * @param enableBatchedOperations Value that indicates whether server-side batched operations are enabled
             * @return the next definition stage
             */
            WithCreate withEnableBatchedOperations(Boolean enableBatchedOperations);
        }

        /**
         * The stage of the topicresource definition allowing to specify EnableExpress.
         */
        interface WithEnableExpress {
            /**
             * Specifies enableExpress.
             * @param enableExpress Value that indicates whether Express Entities are enabled. An express topic holds a message in memory temporarily before writing it to persistent storage
             * @return the next definition stage
             */
            WithCreate withEnableExpress(Boolean enableExpress);
        }

        /**
         * The stage of the topicresource definition allowing to specify EnablePartitioning.
         */
        interface WithEnablePartitioning {
            /**
             * Specifies enablePartitioning.
             * @param enablePartitioning Value that indicates whether the topic to be partitioned across multiple message brokers is enabled
             * @return the next definition stage
             */
            WithCreate withEnablePartitioning(Boolean enablePartitioning);
        }

        /**
         * The stage of the topicresource definition allowing to specify EntityAvailabilityStatus.
         */
        interface WithEntityAvailabilityStatus {
            /**
             * Specifies entityAvailabilityStatus.
             * @param entityAvailabilityStatus Entity availability status for the topic. Possible values include: 'Available', 'Limited', 'Renaming', 'Restoring', 'Unknown'
             * @return the next definition stage
             */
            WithCreate withEntityAvailabilityStatus(EntityAvailabilityStatus entityAvailabilityStatus);
        }

        /**
         * The stage of the topicresource definition allowing to specify FilteringMessagesBeforePublishing.
         */
        interface WithFilteringMessagesBeforePublishing {
            /**
             * Specifies filteringMessagesBeforePublishing.
             * @param filteringMessagesBeforePublishing Whether messages should be filtered before publishing
             * @return the next definition stage
             */
            WithCreate withFilteringMessagesBeforePublishing(Boolean filteringMessagesBeforePublishing);
        }

        /**
         * The stage of the topicresource definition allowing to specify IsAnonymousAccessible.
         */
        interface WithIsAnonymousAccessible {
            /**
             * Specifies isAnonymousAccessible.
             * @param isAnonymousAccessible Value that indicates whether the message is accessible anonymously
             * @return the next definition stage
             */
            WithCreate withIsAnonymousAccessible(Boolean isAnonymousAccessible);
        }

        /**
         * The stage of the topicresource definition allowing to specify IsExpress.
         */
        interface WithIsExpress {
            /**
             * Specifies isExpress.
             * @param isExpress the isExpress parameter value
             * @return the next definition stage
             */
            WithCreate withIsExpress(Boolean isExpress);
        }

        /**
         * The stage of the topicresource definition allowing to specify MaxSizeInMegabytes.
         */
        interface WithMaxSizeInMegabytes {
            /**
             * Specifies maxSizeInMegabytes.
             * @param maxSizeInMegabytes Maximum size of the topic in megabytes, which is the size of the memory allocated for the topic
             * @return the next definition stage
             */
            WithCreate withMaxSizeInMegabytes(Long maxSizeInMegabytes);
        }

        /**
         * The stage of the topicresource definition allowing to specify Name.
         */
        interface WithName {
            /**
             * Specifies name.
             * @param name Topic name
             * @return the next definition stage
             */
            WithCreate withName(String name);
        }

        /**
         * The stage of the topicresource definition allowing to specify RequiresDuplicateDetection.
         */
        interface WithRequiresDuplicateDetection {
            /**
             * Specifies requiresDuplicateDetection.
             * @param requiresDuplicateDetection Value indicating if this topic requires duplicate detection
             * @return the next definition stage
             */
            WithCreate withRequiresDuplicateDetection(Boolean requiresDuplicateDetection);
        }

        /**
         * The stage of the topicresource definition allowing to specify Status.
         */
        interface WithStatus {
            /**
             * Specifies status.
             * @param status Enumerates the possible values for the status of a messaging entity. Possible values include: 'Active', 'Creating', 'Deleting', 'Disabled', 'ReceiveDisabled', 'Renaming', 'Restoring', 'SendDisabled', 'Unknown'
             * @return the next definition stage
             */
            WithCreate withStatus(EntityStatus status);
        }

        /**
         * The stage of the topicresource definition allowing to specify SupportOrdering.
         */
        interface WithSupportOrdering {
            /**
             * Specifies supportOrdering.
             * @param supportOrdering Value that indicates whether the topic supports ordering
             * @return the next definition stage
             */
            WithCreate withSupportOrdering(Boolean supportOrdering);
        }

        /**
         * The stage of the definition which contains all the minimum required inputs for
         * the resource to be created (via {@link WithCreate#create()}), but also allows
         * for any other optional settings to be specified.
         */
        interface WithCreate extends Creatable<TopicResource>, DefinitionStages.WithAutoDeleteOnIdle, DefinitionStages.WithDefaultMessageTimeToLive, DefinitionStages.WithDuplicateDetectionHistoryTimeWindow, DefinitionStages.WithEnableBatchedOperations, DefinitionStages.WithEnableExpress, DefinitionStages.WithEnablePartitioning, DefinitionStages.WithEntityAvailabilityStatus, DefinitionStages.WithFilteringMessagesBeforePublishing, DefinitionStages.WithIsAnonymousAccessible, DefinitionStages.WithIsExpress, DefinitionStages.WithMaxSizeInMegabytes, DefinitionStages.WithName, DefinitionStages.WithRequiresDuplicateDetection, DefinitionStages.WithStatus, DefinitionStages.WithSupportOrdering {
        }
    }
    /**
     * The template for a TopicResource update operation, containing all the settings that can be modified.
     */
    interface Update extends Appliable<TopicResource>, UpdateStages.WithAutoDeleteOnIdle, UpdateStages.WithDefaultMessageTimeToLive, UpdateStages.WithDuplicateDetectionHistoryTimeWindow, UpdateStages.WithEnableBatchedOperations, UpdateStages.WithEnableExpress, UpdateStages.WithEnablePartitioning, UpdateStages.WithEntityAvailabilityStatus, UpdateStages.WithFilteringMessagesBeforePublishing, UpdateStages.WithIsAnonymousAccessible, UpdateStages.WithIsExpress, UpdateStages.WithMaxSizeInMegabytes, UpdateStages.WithName, UpdateStages.WithRequiresDuplicateDetection, UpdateStages.WithStatus, UpdateStages.WithSupportOrdering {
    }

    /**
     * Grouping of TopicResource update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the topicresource update allowing to specify AutoDeleteOnIdle.
         */
        interface WithAutoDeleteOnIdle {
            /**
             * Specifies autoDeleteOnIdle.
             * @param autoDeleteOnIdle TimeSpan idle interval after which the topic is automatically deleted. The minimum duration is 5 minutes
             * @return the next update stage
             */
            Update withAutoDeleteOnIdle(String autoDeleteOnIdle);
        }

        /**
         * The stage of the topicresource update allowing to specify DefaultMessageTimeToLive.
         */
        interface WithDefaultMessageTimeToLive {
            /**
             * Specifies defaultMessageTimeToLive.
             * @param defaultMessageTimeToLive Default message time to live value. This is the duration after which the message expires, starting from when the message is sent to Service Bus. This is the default value used when TimeToLive is not set on a message itself
             * @return the next update stage
             */
            Update withDefaultMessageTimeToLive(String defaultMessageTimeToLive);
        }

        /**
         * The stage of the topicresource update allowing to specify DuplicateDetectionHistoryTimeWindow.
         */
        interface WithDuplicateDetectionHistoryTimeWindow {
            /**
             * Specifies duplicateDetectionHistoryTimeWindow.
             * @param duplicateDetectionHistoryTimeWindow TimeSpan structure that defines the duration of the duplicate detection history. The default value is 10 minutes
             * @return the next update stage
             */
            Update withDuplicateDetectionHistoryTimeWindow(String duplicateDetectionHistoryTimeWindow);
        }

        /**
         * The stage of the topicresource update allowing to specify EnableBatchedOperations.
         */
        interface WithEnableBatchedOperations {
            /**
             * Specifies enableBatchedOperations.
             * @param enableBatchedOperations Value that indicates whether server-side batched operations are enabled
             * @return the next update stage
             */
            Update withEnableBatchedOperations(Boolean enableBatchedOperations);
        }

        /**
         * The stage of the topicresource update allowing to specify EnableExpress.
         */
        interface WithEnableExpress {
            /**
             * Specifies enableExpress.
             * @param enableExpress Value that indicates whether Express Entities are enabled. An express topic holds a message in memory temporarily before writing it to persistent storage
             * @return the next update stage
             */
            Update withEnableExpress(Boolean enableExpress);
        }

        /**
         * The stage of the topicresource update allowing to specify EnablePartitioning.
         */
        interface WithEnablePartitioning {
            /**
             * Specifies enablePartitioning.
             * @param enablePartitioning Value that indicates whether the topic to be partitioned across multiple message brokers is enabled
             * @return the next update stage
             */
            Update withEnablePartitioning(Boolean enablePartitioning);
        }

        /**
         * The stage of the topicresource update allowing to specify EntityAvailabilityStatus.
         */
        interface WithEntityAvailabilityStatus {
            /**
             * Specifies entityAvailabilityStatus.
             * @param entityAvailabilityStatus Entity availability status for the topic. Possible values include: 'Available', 'Limited', 'Renaming', 'Restoring', 'Unknown'
             * @return the next update stage
             */
            Update withEntityAvailabilityStatus(EntityAvailabilityStatus entityAvailabilityStatus);
        }

        /**
         * The stage of the topicresource update allowing to specify FilteringMessagesBeforePublishing.
         */
        interface WithFilteringMessagesBeforePublishing {
            /**
             * Specifies filteringMessagesBeforePublishing.
             * @param filteringMessagesBeforePublishing Whether messages should be filtered before publishing
             * @return the next update stage
             */
            Update withFilteringMessagesBeforePublishing(Boolean filteringMessagesBeforePublishing);
        }

        /**
         * The stage of the topicresource update allowing to specify IsAnonymousAccessible.
         */
        interface WithIsAnonymousAccessible {
            /**
             * Specifies isAnonymousAccessible.
             * @param isAnonymousAccessible Value that indicates whether the message is accessible anonymously
             * @return the next update stage
             */
            Update withIsAnonymousAccessible(Boolean isAnonymousAccessible);
        }

        /**
         * The stage of the topicresource update allowing to specify IsExpress.
         */
        interface WithIsExpress {
            /**
             * Specifies isExpress.
             * @param isExpress the isExpress parameter value
             * @return the next update stage
             */
            Update withIsExpress(Boolean isExpress);
        }

        /**
         * The stage of the topicresource update allowing to specify MaxSizeInMegabytes.
         */
        interface WithMaxSizeInMegabytes {
            /**
             * Specifies maxSizeInMegabytes.
             * @param maxSizeInMegabytes Maximum size of the topic in megabytes, which is the size of the memory allocated for the topic
             * @return the next update stage
             */
            Update withMaxSizeInMegabytes(Long maxSizeInMegabytes);
        }

        /**
         * The stage of the topicresource update allowing to specify Name.
         */
        interface WithName {
            /**
             * Specifies name.
             * @param name Topic name
             * @return the next update stage
             */
            Update withName(String name);
        }

        /**
         * The stage of the topicresource update allowing to specify RequiresDuplicateDetection.
         */
        interface WithRequiresDuplicateDetection {
            /**
             * Specifies requiresDuplicateDetection.
             * @param requiresDuplicateDetection Value indicating if this topic requires duplicate detection
             * @return the next update stage
             */
            Update withRequiresDuplicateDetection(Boolean requiresDuplicateDetection);
        }

        /**
         * The stage of the topicresource update allowing to specify Status.
         */
        interface WithStatus {
            /**
             * Specifies status.
             * @param status Enumerates the possible values for the status of a messaging entity. Possible values include: 'Active', 'Creating', 'Deleting', 'Disabled', 'ReceiveDisabled', 'Renaming', 'Restoring', 'SendDisabled', 'Unknown'
             * @return the next update stage
             */
            Update withStatus(EntityStatus status);
        }

        /**
         * The stage of the topicresource update allowing to specify SupportOrdering.
         */
        interface WithSupportOrdering {
            /**
             * Specifies supportOrdering.
             * @param supportOrdering Value that indicates whether the topic supports ordering
             * @return the next update stage
             */
            Update withSupportOrdering(Boolean supportOrdering);
        }

    }
}
