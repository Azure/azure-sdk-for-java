/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.servicebus.v2015_08_01.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.servicebus.v2015_08_01.Queues;
import rx.Completable;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.servicebus.v2015_08_01.QueueResource;
import com.microsoft.azure.management.servicebus.v2015_08_01.QueueNamespaceSharedAccessAuthorizationRuleResource;
import com.microsoft.azure.management.servicebus.v2015_08_01.NamespaceSharedAccessAuthorizationRuleResource;
import com.microsoft.azure.management.servicebus.v2015_08_01.ResourceListKeys;

class QueuesImpl extends WrapperImpl<QueuesInner> implements Queues {
    private final ServiceBusManager manager;

    QueuesImpl(ServiceBusManager manager) {
        super(manager.inner().queues());
        this.manager = manager;
    }

    public ServiceBusManager manager() {
        return this.manager;
    }

    @Override
    public QueueResourceImpl define(String name) {
        return wrapModel(name);
    }

    private QueueResourceImpl wrapModel(QueueResourceInner inner) {
        return  new QueueResourceImpl(inner, manager());
    }

    private QueueResourceImpl wrapModel(String name) {
        return new QueueResourceImpl(name, this.manager());
    }

    @Override
    public Observable<QueueResource> listAllAsync(final String resourceGroupName, final String namespaceName) {
        QueuesInner client = this.inner();
        return client.listAllAsync(resourceGroupName, namespaceName)
        .flatMapIterable(new Func1<Page<QueueResourceInner>, Iterable<QueueResourceInner>>() {
            @Override
            public Iterable<QueueResourceInner> call(Page<QueueResourceInner> page) {
                return page.items();
            }
        })
        .map(new Func1<QueueResourceInner, QueueResource>() {
            @Override
            public QueueResource call(QueueResourceInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public Observable<QueueResource> getAsync(String resourceGroupName, String namespaceName, String queueName) {
        QueuesInner client = this.inner();
        return client.getAsync(resourceGroupName, namespaceName, queueName)
        .map(new Func1<QueueResourceInner, QueueResource>() {
            @Override
            public QueueResource call(QueueResourceInner inner) {
                return wrapModel(inner);
            }
       });
    }

    @Override
    public Completable deleteAsync(String resourceGroupName, String namespaceName, String queueName) {
        QueuesInner client = this.inner();
        return client.deleteAsync(resourceGroupName, namespaceName, queueName).toCompletable();
    }

    @Override
    public QueueNamespaceSharedAccessAuthorizationRuleResourceImpl defineAuthorizationRule(String name) {
        return wrapAuthorizationRuleModel(name);
    }

    private QueueNamespaceSharedAccessAuthorizationRuleResourceImpl wrapAuthorizationRuleModel(String name) {
        return new QueueNamespaceSharedAccessAuthorizationRuleResourceImpl(name, this.manager());
    }

    private QueueNamespaceSharedAccessAuthorizationRuleResourceImpl wrapQueueNamespaceSharedAccessAuthorizationRuleResourceModel(SharedAccessAuthorizationRuleResourceInner inner) {
        return  new QueueNamespaceSharedAccessAuthorizationRuleResourceImpl(inner, manager());
    }

    private Observable<SharedAccessAuthorizationRuleResourceInner> getSharedAccessAuthorizationRuleResourceInnerUsingQueuesInnerAsync(String id) {
        String resourceGroupName = IdParsingUtils.getValueFromIdByName(id, "resourceGroups");
        String namespaceName = IdParsingUtils.getValueFromIdByName(id, "namespaces");
        String queueName = IdParsingUtils.getValueFromIdByName(id, "queues");
        String authorizationRuleName = IdParsingUtils.getValueFromIdByName(id, "authorizationRules");
        QueuesInner client = this.inner();
        return client.getAuthorizationRuleAsync(resourceGroupName, namespaceName, queueName, authorizationRuleName);
    }

    @Override
    public Observable<QueueNamespaceSharedAccessAuthorizationRuleResource> getAuthorizationRuleAsync(String resourceGroupName, String namespaceName, String queueName, String authorizationRuleName) {
        QueuesInner client = this.inner();
        return client.getAuthorizationRuleAsync(resourceGroupName, namespaceName, queueName, authorizationRuleName)
        .map(new Func1<SharedAccessAuthorizationRuleResourceInner, QueueNamespaceSharedAccessAuthorizationRuleResource>() {
            @Override
            public QueueNamespaceSharedAccessAuthorizationRuleResource call(SharedAccessAuthorizationRuleResourceInner inner) {
                return wrapQueueNamespaceSharedAccessAuthorizationRuleResourceModel(inner);
            }
       });
    }

    @Override
    public Observable<QueueNamespaceSharedAccessAuthorizationRuleResource> listAuthorizationRulesAsync(final String resourceGroupName, final String namespaceName, final String queueName) {
        QueuesInner client = this.inner();
        return client.listAuthorizationRulesAsync(resourceGroupName, namespaceName, queueName)
        .flatMapIterable(new Func1<Page<SharedAccessAuthorizationRuleResourceInner>, Iterable<SharedAccessAuthorizationRuleResourceInner>>() {
            @Override
            public Iterable<SharedAccessAuthorizationRuleResourceInner> call(Page<SharedAccessAuthorizationRuleResourceInner> page) {
                return page.items();
            }
        })
        .map(new Func1<SharedAccessAuthorizationRuleResourceInner, QueueNamespaceSharedAccessAuthorizationRuleResource>() {
            @Override
            public QueueNamespaceSharedAccessAuthorizationRuleResource call(SharedAccessAuthorizationRuleResourceInner inner) {
                return wrapQueueNamespaceSharedAccessAuthorizationRuleResourceModel(inner);
            }
        });
    }

    @Override
    public Completable deleteAuthorizationRuleAsync(String resourceGroupName, String namespaceName, String queueName, String authorizationRuleName) {
        QueuesInner client = this.inner();
        return client.deleteAuthorizationRuleAsync(resourceGroupName, namespaceName, queueName, authorizationRuleName).toCompletable();
    }

    @Override
    public Observable<NamespaceSharedAccessAuthorizationRuleResource> postAuthorizationRuleAsync(String resourceGroupName, String namespaceName, String queueName, String authorizationRuleName) {
        QueuesInner client = this.inner();
        return client.postAuthorizationRuleAsync(resourceGroupName, namespaceName, queueName, authorizationRuleName)
        .map(new Func1<SharedAccessAuthorizationRuleResourceInner, NamespaceSharedAccessAuthorizationRuleResource>() {
            @Override
            public NamespaceSharedAccessAuthorizationRuleResource call(SharedAccessAuthorizationRuleResourceInner inner) {
                return new NamespaceSharedAccessAuthorizationRuleResourceImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<ResourceListKeys> listKeysAsync(String resourceGroupName, String namespaceName, String queueName, String authorizationRuleName) {
        QueuesInner client = this.inner();
        return client.listKeysAsync(resourceGroupName, namespaceName, queueName, authorizationRuleName)
        .map(new Func1<ResourceListKeysInner, ResourceListKeys>() {
            @Override
            public ResourceListKeys call(ResourceListKeysInner inner) {
                return new ResourceListKeysImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<ResourceListKeys> regenerateKeysAsync(String resourceGroupName, String namespaceName, String queueName, String authorizationRuleName) {
        QueuesInner client = this.inner();
        return client.regenerateKeysAsync(resourceGroupName, namespaceName, queueName, authorizationRuleName)
        .map(new Func1<ResourceListKeysInner, ResourceListKeys>() {
            @Override
            public ResourceListKeys call(ResourceListKeysInner inner) {
                return new ResourceListKeysImpl(inner, manager());
            }
        });
    }

}
