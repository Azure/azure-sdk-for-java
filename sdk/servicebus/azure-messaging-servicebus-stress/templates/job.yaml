{{- include "stress-test-addons.deploy-job-template.from-pod" (list . "stress.java-servicebus") -}}
{{- define "stress.java-servicebus" -}}
metadata:
  labels:
    testInstance: "{{.Stress.Scenario}}-{{ .Release.Name }}-{{ .Release.Revision }}"
    testName: servicebus-stress-test
    chaos: "{{ default false .Stress.chaos }}"
spec:
  containers:
    - name: sender
      image: {{ .Stress.imageTag }}
      imagePullPolicy: Always
      command: ['sh', '-c']
      args:
        - |
          set -a &&
          source $ENV_FILE &&
          export CONTAINER_NAME=sender &&
          export APPLICATIONINSIGHTS_ROLE_NAME=sender &&
          export OTEL_RESOURCE_ATTRIBUTES=runId={{ .Stress.BaseName }} &&
          java -javaagent:BOOT-INF/classes/applicationinsights-agent-3.4.13.jar \
          "org.springframework.boot.loader.JarLauncher" \
          --TEST_CLASS=MessageSenderAsync
      {{- include "stress-test-addons.container-env" . | nindent 6 }}
      resources:
        requests:
          memory: "1G"
          cpu: "1"
        limits:
          memory: "2G"
          cpu: "2"
    - name: receiver
      image: {{ .Stress.imageTag }}
      imagePullPolicy: Always
      command: ['sh', '-c']
      args:
        - |
          set -a &&
          source $ENV_FILE &&
          export CONTAINER_NAME=receiver &&
          export APPLICATIONINSIGHTS_ROLE_NAME=receiver &&
          export OTEL_RESOURCE_ATTRIBUTES=runId={{ .Stress.BaseName }} &&
          java -javaagent:BOOT-INF/classes/applicationinsights-agent-3.4.13.jar \
          -Dreactor.schedulers.defaultBoundedElasticSize=100 \
          "org.springframework.boot.loader.JarLauncher" \
          --TEST_CLASS=MessageProcessor
      {{- include "stress-test-addons.container-env" . | nindent 6 }}
      resources:
        requests:
          memory: "1G"
          cpu: "1"
        limits:
          memory: "2G"
          cpu: "2"
{{- end -}}

{{- include "stress-test-addons.chaos-wrapper.tpl" (list . "stress.network-chaos") -}}
{{- define "stress.network-chaos" -}}
kind: NetworkChaos
apiVersion: chaos-mesh.org/v1alpha1
spec:
  selector:
    namespaces:
      - "{{ .Release.Namespace }}"
    labelSelectors:
      testInstance: "{{.Stress.Scenario}}-{{ .Release.Name }}-{{ .Release.Revision }}"
      chaos: "true"
  mode: all
  action: loss
  loss:
    loss: '40'
    correlation: '95'
  direction: to
  target:
    selector:
      namespaces:
        - {{ .Release.Namespace }}
      labelSelectors:
        testInstance: "{{.Stress.Scenario}}-{{ .Release.Name }}-{{ .Release.Revision }}"
        chaos: "true"
    mode: all
  externalTargets:
    - {{ .Stress.BaseName }}.servicebus.windows.net
{{- end -}}
