// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.messaging.servicebus.administration.models;

import com.azure.messaging.servicebus.implementation.EntityHelper;
import com.azure.messaging.servicebus.implementation.models.AuthorizationRuleImpl;
import com.azure.messaging.servicebus.implementation.models.QueueDescription;
import org.junit.jupiter.api.Test;

import java.time.Duration;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;

import static com.azure.messaging.servicebus.implementation.ServiceBusConstants.DEFAULT_DUPLICATE_DETECTION_DURATION;
import static com.azure.messaging.servicebus.implementation.ServiceBusConstants.DEFAULT_LOCK_DURATION;
import static com.azure.messaging.servicebus.implementation.ServiceBusConstants.DEFAULT_MAX_DELIVERY_COUNT;
import static com.azure.messaging.servicebus.implementation.ServiceBusConstants.DEFAULT_QUEUE_SIZE;
import static com.azure.messaging.servicebus.implementation.ServiceBusConstants.MAX_DURATION;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertTrue;

class CreateQueueOptionsTest {
    /**
     * Creates an instance with the given defaults.
     */
    @Test
    void constructor() {
        // Act
        final CreateQueueOptions actual = new CreateQueueOptions();

        // Assert
        assertEquals(MAX_DURATION, actual.getAutoDeleteOnIdle());
        assertEquals(MAX_DURATION, actual.getDefaultMessageTimeToLive());
        assertEquals(DEFAULT_DUPLICATE_DETECTION_DURATION, actual.getDuplicateDetectionHistoryTimeWindow());
        assertTrue(actual.enableBatchedOperations());
        assertFalse(actual.enablePartitioning());
        assertEquals(DEFAULT_LOCK_DURATION, actual.getLockDuration());
        assertEquals(DEFAULT_MAX_DELIVERY_COUNT, actual.getMaxDeliveryCount());
        assertEquals(DEFAULT_QUEUE_SIZE, actual.getMaxSizeInMegabytes());
        assertFalse(actual.requiresDuplicateDetection());
        assertFalse(actual.requiresSession());
        assertFalse(actual.deadLetteringOnMessageExpiration());
        assertNull(actual.getUserMetadata());
        assertEquals(EntityStatus.ACTIVE, actual.getStatus());
    }

    @Test
    void constructorWithOptions() {
        // Arrange
        final List<AuthorizationRuleImpl> rules = Arrays.asList(
            new AuthorizationRuleImpl().setClaimType("a").setClaimValue("b").setKeyName("c").setPrimaryKey("pk")
                .setSecondaryKey("sk").setRights(Arrays.asList(AccessRights.LISTEN, AccessRights.MANAGE)),
            new AuthorizationRuleImpl().setClaimType("a2").setClaimValue("b2").setKeyName("c2").setPrimaryKey("pk2")
                .setSecondaryKey("sk2").setRights(Collections.singletonList(AccessRights.LISTEN))
        );
        final QueueProperties expected = EntityHelper.toModel(new QueueDescription().setAuthorizationRules(rules))
            .setAutoDeleteOnIdle(Duration.ofSeconds(15))
            .setDefaultMessageTimeToLive(Duration.ofSeconds(50))
            .setDuplicateDetectionHistoryTimeWindow(Duration.ofSeconds(13))
            .setEnableBatchedOperations(false)
            .setEnablePartitioning(true)
            .setForwardTo("Forward-To-This-Queue")
            .setForwardDeadLetteredMessagesTo("Dead-Lettered-Forward-To")
            .setLockDuration(Duration.ofSeconds(120))
            .setMaxDeliveryCount(15)
            .setMaxSizeInMegabytes(2048)
            .setRequiresDuplicateDetection(true)
            .setRequiresSession(true)
            .setUserMetadata("Test-queue-Metadata")
            .setStatus(EntityStatus.DISABLED);
        final String queueName = "some-queue";

        EntityHelper.setQueueName(expected, queueName);

        // Act
        final CreateQueueOptions actual = new CreateQueueOptions(expected);

        // Assert
        assertEquals(expected.getAutoDeleteOnIdle(), actual.getAutoDeleteOnIdle());
        assertEquals(expected.getDefaultMessageTimeToLive(), actual.getDefaultMessageTimeToLive());
        assertFalse(actual.deadLetteringOnMessageExpiration());
        assertEquals(expected.getDuplicateDetectionHistoryTimeWindow(),
            actual.getDuplicateDetectionHistoryTimeWindow());
        assertEquals(expected.enableBatchedOperations(), actual.enableBatchedOperations());
        assertEquals(expected.enablePartitioning(), actual.enablePartitioning());
        assertEquals(expected.getForwardTo(), actual.getForwardTo());
        assertEquals(expected.getForwardDeadLetteredMessagesTo(), actual.getForwardDeadLetteredMessagesTo());
        assertEquals(expected.getLockDuration(), actual.getLockDuration());
        assertEquals(expected.getMaxDeliveryCount(), actual.getMaxDeliveryCount());
        assertEquals(expected.requiresDuplicateDetection(), actual.requiresDuplicateDetection());
        assertEquals(expected.requiresSession(), actual.requiresSession());
        assertEquals(expected.getUserMetadata(), actual.getUserMetadata());
        assertEquals(expected.getStatus(), actual.getStatus());

        final List<AuthorizationRule> actualRules = actual.getAuthorizationRules();
        assertNotNull(actualRules);
        assertEquals(rules.size(), actualRules.size());

        for (int i = 0; i < rules.size(); i++) {
            final AuthorizationRuleImpl expectedRule = rules.get(i);
            final AuthorizationRule actualRule = actualRules.get(i);

            assertEquals(expectedRule.getKeyName(), actualRule.getKeyName());
            assertEquals(expectedRule.getClaimType(), actualRule.getClaimType());
            assertEquals(expectedRule.getClaimValue(), actualRule.getClaimValue());
            assertEquals(expectedRule.getPrimaryKey(), actualRule.getPrimaryKey());
            assertEquals(expectedRule.getSecondaryKey(), actualRule.getSecondaryKey());

            final HashSet<AccessRights> expectedRights = new HashSet<>(expectedRule.getRights());
            final HashSet<AccessRights> actualRights = new HashSet<>(actualRule.getAccessRights());

            assertEquals(expectedRights.size(), actualRights.size());
            expectedRights.forEach(right -> assertTrue(actualRights.contains(right)));
        }
    }
}
