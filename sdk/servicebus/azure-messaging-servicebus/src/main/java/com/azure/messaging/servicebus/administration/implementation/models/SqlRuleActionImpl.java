// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.messaging.servicebus.administration.implementation.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.xml.XmlReader;
import com.azure.xml.XmlSerializable;
import com.azure.xml.XmlToken;
import com.azure.xml.XmlWriter;
import java.util.ArrayList;
import java.util.List;
import javax.xml.namespace.QName;
import javax.xml.stream.XMLStreamException;

/** The SqlRuleAction model. */
@Fluent
public final class SqlRuleActionImpl extends RuleActionImpl {
    /*
     * The type property.
     */
    private static final String TYPE = "SqlRuleAction";

    /*
     * The sqlExpression property.
     */
    private String sqlExpression;

    /*
     * The compatibilityLevel property.
     */
    private String compatibilityLevel;

    static final class ParametersWrapper implements XmlSerializable<ParametersWrapper> {
        private final List<KeyValueImpl> items;

        private ParametersWrapper(List<KeyValueImpl> items) {
            this.items = items;
        }

        @Override
        public XmlWriter toXml(XmlWriter xmlWriter) throws XMLStreamException {
            return toXml(xmlWriter, null);
        }

        @Override
        public XmlWriter toXml(XmlWriter xmlWriter, String rootElementName) throws XMLStreamException {
            rootElementName = CoreUtils.isNullOrEmpty(rootElementName) ? "Parameters" : rootElementName;
            xmlWriter.writeStartElement(
                    "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", rootElementName);
            if (items != null) {
                for (KeyValueImpl element : items) {
                    xmlWriter.writeXml(element, "KeyValueOfstringanyType");
                }
            }
            return xmlWriter.writeEndElement();
        }

        public static ParametersWrapper fromXml(XmlReader xmlReader) throws XMLStreamException {
            return fromXml(xmlReader, null);
        }

        public static ParametersWrapper fromXml(XmlReader xmlReader, String rootElementName) throws XMLStreamException {
            rootElementName = CoreUtils.isNullOrEmpty(rootElementName) ? "Parameters" : rootElementName;
            return xmlReader.readObject(
                    "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect",
                    rootElementName,
                    reader -> {
                        List<KeyValueImpl> items = null;

                        while (reader.nextElement() != XmlToken.END_ELEMENT) {
                            String elementName = reader.getElementName().getLocalPart();

                            if ("KeyValueOfstringanyType".equals(elementName)) {
                                if (items == null) {
                                    items = new ArrayList<>();
                                }

                                items.add(KeyValueImpl.fromXml(reader));
                            } else {
                                reader.nextElement();
                            }
                        }
                        return new ParametersWrapper(items);
                    });
        }
    }

    /*
     * The parameters property.
     */
    private ParametersWrapper parameters;

    /*
     * The requiresPreprocessing property.
     */
    private Boolean requiresPreprocessing;

    /** Creates an instance of SqlRuleAction class. */
    public SqlRuleActionImpl() {}

    /**
     * Get the sqlExpression property: The sqlExpression property.
     *
     * @return the sqlExpression value.
     */
    public String getSqlExpression() {
        return this.sqlExpression;
    }

    /**
     * Set the sqlExpression property: The sqlExpression property.
     *
     * @param sqlExpression the sqlExpression value to set.
     * @return the SqlRuleAction object itself.
     */
    public SqlRuleActionImpl setSqlExpression(String sqlExpression) {
        this.sqlExpression = sqlExpression;
        return this;
    }

    /**
     * Get the compatibilityLevel property: The compatibilityLevel property.
     *
     * @return the compatibilityLevel value.
     */
    public String getCompatibilityLevel() {
        return this.compatibilityLevel;
    }

    /**
     * Set the compatibilityLevel property: The compatibilityLevel property.
     *
     * @param compatibilityLevel the compatibilityLevel value to set.
     * @return the SqlRuleAction object itself.
     */
    public SqlRuleActionImpl setCompatibilityLevel(String compatibilityLevel) {
        this.compatibilityLevel = compatibilityLevel;
        return this;
    }

    /**
     * Get the parameters property: The parameters property.
     *
     * @return the parameters value.
     */
    public List<KeyValueImpl> getParameters() {
        if (this.parameters == null) {
            this.parameters = new ParametersWrapper(new ArrayList<KeyValueImpl>());
        }
        return this.parameters.items;
    }

    /**
     * Set the parameters property: The parameters property.
     *
     * @param parameters the parameters value to set.
     * @return the SqlRuleAction object itself.
     */
    public SqlRuleActionImpl setParameters(List<KeyValueImpl> parameters) {
        this.parameters = new ParametersWrapper(parameters);
        return this;
    }

    /**
     * Get the requiresPreprocessing property: The requiresPreprocessing property.
     *
     * @return the requiresPreprocessing value.
     */
    public Boolean isRequiresPreprocessing() {
        return this.requiresPreprocessing;
    }

    /**
     * Set the requiresPreprocessing property: The requiresPreprocessing property.
     *
     * @param requiresPreprocessing the requiresPreprocessing value to set.
     * @return the SqlRuleAction object itself.
     */
    public SqlRuleActionImpl setRequiresPreprocessing(Boolean requiresPreprocessing) {
        this.requiresPreprocessing = requiresPreprocessing;
        return this;
    }

    @Override
    public XmlWriter toXml(XmlWriter xmlWriter) throws XMLStreamException {
        return toXml(xmlWriter, null);
    }

    @Override
    public XmlWriter toXml(XmlWriter xmlWriter, String rootElementName) throws XMLStreamException {
        rootElementName = CoreUtils.isNullOrEmpty(rootElementName) ? "Action" : rootElementName;
        xmlWriter.writeStartElement(rootElementName);
        xmlWriter.writeNamespace("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect");
        xmlWriter.writeNamespace("xsi", "http://www.w3.org/2001/XMLSchema-instance");
        xmlWriter.writeStringAttribute("http://www.w3.org/2001/XMLSchema-instance", "type", TYPE);
        xmlWriter.writeStringElement(
                "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect",
                "SqlExpression",
                this.sqlExpression);
        xmlWriter.writeStringElement(
                "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect",
                "CompatibilityLevel",
                this.compatibilityLevel);
        xmlWriter.writeXml(this.parameters);
        xmlWriter.writeBooleanElement(
                "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect",
                "RequiresPreprocessing",
                this.requiresPreprocessing);
        return xmlWriter.writeEndElement();
    }

    /**
     * Reads an instance of SqlRuleAction from the XmlReader.
     *
     * @param xmlReader The XmlReader being read.
     * @return An instance of SqlRuleAction if the XmlReader was pointing to an instance of it, or null if it was
     *     pointing to XML null.
     * @throws IllegalStateException If the deserialized XML object was missing the polymorphic discriminator.
     */
    public static SqlRuleActionImpl fromXml(XmlReader xmlReader) throws XMLStreamException {
        return fromXml(xmlReader, null);
    }

    /**
     * Reads an instance of SqlRuleAction from the XmlReader.
     *
     * @param xmlReader The XmlReader being read.
     * @return An instance of SqlRuleAction if the XmlReader was pointing to an instance of it, or null if it was
     *     pointing to XML null.
     * @throws IllegalStateException If the deserialized XML object was missing the polymorphic discriminator.
     */
    public static SqlRuleActionImpl fromXml(XmlReader xmlReader, String rootElementName) throws XMLStreamException {
        String finalRootElementName = CoreUtils.isNullOrEmpty(rootElementName) ? "Action" : rootElementName;
        return xmlReader.readObject(
                "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect",
                finalRootElementName,
                reader -> {
                    String type = reader.getStringAttribute("http://www.w3.org/2001/XMLSchema-instance", "type");
                    if (!"SqlRuleAction".equals(type)) {
                        throw new IllegalStateException(
                                "'type' was expected to be non-null and equal to 'SqlRuleAction'. The found 'type' was '"
                                        + type
                                        + "'.");
                    }
                    String sqlExpression = null;
                    String compatibilityLevel = null;
                    ParametersWrapper parameters = null;
                    Boolean requiresPreprocessing = null;
                    while (reader.nextElement() != XmlToken.END_ELEMENT) {
                        QName elementName = reader.getElementName();

                        if ("SqlExpression".equals(elementName.getLocalPart())
                                && "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"
                                        .equals(elementName.getNamespaceURI())) {
                            sqlExpression = reader.getStringElement();
                        } else if ("CompatibilityLevel".equals(elementName.getLocalPart())
                                && "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"
                                        .equals(elementName.getNamespaceURI())) {
                            compatibilityLevel = reader.getStringElement();
                        } else if ("Parameters".equals(elementName.getLocalPart())
                                && "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"
                                        .equals(elementName.getNamespaceURI())) {
                            parameters = ParametersWrapper.fromXml(reader);
                        } else if ("RequiresPreprocessing".equals(elementName.getLocalPart())
                                && "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"
                                        .equals(elementName.getNamespaceURI())) {
                            requiresPreprocessing = reader.getNullableElement(Boolean::parseBoolean);
                        } else {
                            reader.skipElement();
                        }
                    }
                    SqlRuleActionImpl deserializedSqlRuleAction = new SqlRuleActionImpl();
                    deserializedSqlRuleAction.sqlExpression = sqlExpression;
                    deserializedSqlRuleAction.compatibilityLevel = compatibilityLevel;
                    deserializedSqlRuleAction.parameters = parameters;
                    deserializedSqlRuleAction.requiresPreprocessing = requiresPreprocessing;

                    return deserializedSqlRuleAction;
                });
    }
}
