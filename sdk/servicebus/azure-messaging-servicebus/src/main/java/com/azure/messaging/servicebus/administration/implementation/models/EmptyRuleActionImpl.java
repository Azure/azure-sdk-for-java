// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.messaging.servicebus.administration.implementation.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.xml.XmlReader;
import com.azure.xml.XmlToken;
import com.azure.xml.XmlWriter;
import javax.xml.stream.XMLStreamException;

/** The EmptyRuleAction model. */
@Immutable
public final class EmptyRuleActionImpl extends RuleActionImpl {
    /*
     * The type property.
     */
    private static final String TYPE = "EmptyRuleAction";

    /** Creates an instance of EmptyRuleAction class. */
    public EmptyRuleActionImpl() {}

    @Override
    public XmlWriter toXml(XmlWriter xmlWriter) throws XMLStreamException {
        return toXml(xmlWriter, null);
    }

    @Override
    public XmlWriter toXml(XmlWriter xmlWriter, String rootElementName) throws XMLStreamException {
        rootElementName = CoreUtils.isNullOrEmpty(rootElementName) ? "Action" : rootElementName;
        xmlWriter.writeStartElement(rootElementName);
        xmlWriter.writeNamespace("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect");
        xmlWriter.writeNamespace("xsi", "http://www.w3.org/2001/XMLSchema-instance");
        xmlWriter.writeStringAttribute("http://www.w3.org/2001/XMLSchema-instance", "type", TYPE);
        return xmlWriter.writeEndElement();
    }

    /**
     * Reads an instance of EmptyRuleAction from the XmlReader.
     *
     * @param xmlReader The XmlReader being read.
     * @return An instance of EmptyRuleAction if the XmlReader was pointing to an instance of it, or null if it was
     *     pointing to XML null.
     * @throws IllegalStateException If the deserialized XML object was missing the polymorphic discriminator.
     * @throws XMLStreamException If an error occurs while reading the EmptyRuleAction.
     */
    public static EmptyRuleActionImpl fromXml(XmlReader xmlReader) throws XMLStreamException {
        return fromXml(xmlReader, null);
    }

    /**
     * Reads an instance of EmptyRuleAction from the XmlReader.
     *
     * @param xmlReader The XmlReader being read.
     * @param rootElementName Optional root element name to override the default defined by the model. Used to support
     *     cases where the model can deserialize from different root element names.
     * @return An instance of EmptyRuleAction if the XmlReader was pointing to an instance of it, or null if it was
     *     pointing to XML null.
     * @throws IllegalStateException If the deserialized XML object was missing the polymorphic discriminator.
     * @throws XMLStreamException If an error occurs while reading the EmptyRuleAction.
     */
    public static EmptyRuleActionImpl fromXml(XmlReader xmlReader, String rootElementName) throws XMLStreamException {
        String finalRootElementName = CoreUtils.isNullOrEmpty(rootElementName) ? "Action" : rootElementName;
        return xmlReader.readObject(
                "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect",
                finalRootElementName,
                reader -> {
                    String type = reader.getStringAttribute("http://www.w3.org/2001/XMLSchema-instance", "type");
                    if (!"EmptyRuleAction".equals(type)) {
                        throw new IllegalStateException(
                                "'type' was expected to be non-null and equal to 'EmptyRuleAction'. The found 'type' was '"
                                        + type
                                        + "'.");
                    }
                    while (reader.nextElement() != XmlToken.END_ELEMENT) {
                        reader.skipElement();
                    }
                    EmptyRuleActionImpl deserializedEmptyRuleActionImpl = new EmptyRuleActionImpl();

                    return deserializedEmptyRuleActionImpl;
                });
    }
}
