// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.messaging.servicebus.administration.implementation.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.messaging.servicebus.administration.implementation.EntityHelper;
import com.azure.xml.XmlReader;
import com.azure.xml.XmlSerializable;
import com.azure.xml.XmlToken;
import com.azure.xml.XmlWriter;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Objects;
import javax.xml.namespace.QName;
import javax.xml.stream.XMLStreamException;

/** Response from listing Service Bus rules. */
@Fluent
public final class RuleDescriptionFeedImpl implements XmlSerializable<RuleDescriptionFeedImpl> {
    /*
     * URL of the list rules query.
     */
    private String id;

    /*
     * The entity type for the feed.
     */
    private TitleImpl title;

    /*
     * Datetime of the query.
     */
    private OffsetDateTime updated;

    /*
     * Links to paginated response.
     */
    private List<ResponseLinkImpl> link = new ArrayList<>();

    /*
     * Rules entries.
     */
    private List<RuleDescriptionEntryImpl> entry = new ArrayList<>();

    /** Creates an instance of RuleDescriptionFeed class. */
    public RuleDescriptionFeedImpl() {}

    /**
     * Get the id property: URL of the list rules query.
     *
     * @return the id value.
     */
    public String getId() {
        return this.id;
    }

    /**
     * Set the id property: URL of the list rules query.
     *
     * @param id the id value to set.
     * @return the RuleDescriptionFeed object itself.
     */
    public RuleDescriptionFeedImpl setId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get the title property: The entity type for the feed.
     *
     * @return the title value.
     */
    public TitleImpl getTitle() {
        return this.title;
    }

    /**
     * Set the title property: The entity type for the feed.
     *
     * @param title the title value to set.
     * @return the RuleDescriptionFeed object itself.
     */
    public RuleDescriptionFeedImpl setTitle(TitleImpl title) {
        this.title = title;
        return this;
    }

    /**
     * Get the updated property: Datetime of the query.
     *
     * @return the updated value.
     */
    public OffsetDateTime getUpdated() {
        return this.updated;
    }

    /**
     * Set the updated property: Datetime of the query.
     *
     * @param updated the updated value to set.
     * @return the RuleDescriptionFeed object itself.
     */
    public RuleDescriptionFeedImpl setUpdated(OffsetDateTime updated) {
        this.updated = updated;
        return this;
    }

    /**
     * Get the link property: Links to paginated response.
     *
     * @return the link value.
     */
    public List<ResponseLinkImpl> getLink() {
        return this.link;
    }

    /**
     * Set the link property: Links to paginated response.
     *
     * @param link the link value to set.
     * @return the RuleDescriptionFeed object itself.
     */
    public RuleDescriptionFeedImpl setLink(List<ResponseLinkImpl> link) {
        this.link = link;
        return this;
    }

    /**
     * Get the entry property: Rules entries.
     *
     * @return the entry value.
     */
    public List<RuleDescriptionEntryImpl> getEntry() {
        return this.entry;
    }

    /**
     * Set the entry property: Rules entries.
     *
     * @param entry the entry value to set.
     * @return the RuleDescriptionFeed object itself.
     */
    public RuleDescriptionFeedImpl setEntry(List<RuleDescriptionEntryImpl> entry) {
        this.entry = entry;
        return this;
    }

    @Override
    public XmlWriter toXml(XmlWriter xmlWriter) throws XMLStreamException {
        return toXml(xmlWriter, null);
    }

    @Override
    public XmlWriter toXml(XmlWriter xmlWriter, String rootElementName) throws XMLStreamException {
        rootElementName = CoreUtils.isNullOrEmpty(rootElementName) ? "feed" : rootElementName;
        xmlWriter.writeStartElement(rootElementName);
        xmlWriter.writeNamespace("http://www.w3.org/2005/Atom");
        xmlWriter.writeStringElement("http://www.w3.org/2005/Atom", "id", this.id);
        xmlWriter.writeXml(this.title, "title");
        xmlWriter.writeStringElement("http://www.w3.org/2005/Atom", "updated", Objects.toString(this.updated, null));
        if (this.link != null) {
            for (ResponseLinkImpl element : this.link) {
                xmlWriter.writeXml(element, "link");
            }
        }
        if (this.entry != null) {
            for (RuleDescriptionEntryImpl element : this.entry) {
                xmlWriter.writeXml(element, "entry");
            }
        }
        return xmlWriter.writeEndElement();
    }

    /**
     * Reads an instance of RuleDescriptionFeed from the XmlReader.
     *
     * @param xmlReader The XmlReader being read.
     * @return An instance of RuleDescriptionFeed if the XmlReader was pointing to an instance of it, or null if it was
     *     pointing to XML null.
     * @throws XMLStreamException If an error occurs while reading the RuleDescriptionFeed.
     */
    public static RuleDescriptionFeedImpl fromXml(XmlReader xmlReader) throws XMLStreamException {
        return fromXml(xmlReader, null);
    }

    /**
     * Reads an instance of RuleDescriptionFeed from the XmlReader.
     *
     * @param xmlReader The XmlReader being read.
     * @param rootElementName Optional root element name to override the default definedby the model. Used to support
     *     cases where the model can deserialize from different root elementnames.
     * @return An instance of RuleDescriptionFeed if the XmlReader was pointing to an instance of it, or null if it was
     *     pointing to XML null.
     * @throws XMLStreamException If an error occurs while reading the RuleDescriptionFeed.
     */
    public static RuleDescriptionFeedImpl fromXml(XmlReader xmlReader, String rootElementName)
            throws XMLStreamException {
        String finalRootElementName = CoreUtils.isNullOrEmpty(rootElementName) ? "feed" : rootElementName;
        return xmlReader.readObject(
                "http://www.w3.org/2005/Atom",
                finalRootElementName,
                reader -> {
                    String id = null;
                    TitleImpl title = null;
                    OffsetDateTime updated = null;
                    List<ResponseLinkImpl> link = null;
                    List<RuleDescriptionEntryImpl> entry = null;
                    while (reader.nextElement() != XmlToken.END_ELEMENT) {
                        QName elementName = reader.getElementName();

                        if ("id".equals(elementName.getLocalPart())
                                && "http://www.w3.org/2005/Atom".equals(elementName.getNamespaceURI())) {
                            id = reader.getStringElement();
                        } else if ("title".equals(elementName.getLocalPart())
                                && "http://www.w3.org/2005/Atom".equals(elementName.getNamespaceURI())) {
                            title = TitleImpl.fromXml(reader, "title");
                        } else if ("updated".equals(elementName.getLocalPart())
                                && "http://www.w3.org/2005/Atom".equals(elementName.getNamespaceURI())) {
                            updated = reader.getNullableElement(EntityHelper::parseOffsetDateTimeBest);
                        } else if ("link".equals(elementName.getLocalPart())) {
                            if (link == null) {
                                link = new LinkedList<>();
                            }
                            link.add(ResponseLinkImpl.fromXml(reader, "link"));
                        } else if ("entry".equals(elementName.getLocalPart())) {
                            if (entry == null) {
                                entry = new LinkedList<>();
                            }
                            entry.add(RuleDescriptionEntryImpl.fromXml(reader, "entry"));
                        } else {
                            reader.skipElement();
                        }
                    }
                    RuleDescriptionFeedImpl deserializedRuleDescriptionFeed = new RuleDescriptionFeedImpl();
                    deserializedRuleDescriptionFeed.id = id;
                    deserializedRuleDescriptionFeed.title = title;
                    deserializedRuleDescriptionFeed.updated = updated;
                    deserializedRuleDescriptionFeed.link = link;
                    deserializedRuleDescriptionFeed.entry = entry;

                    return deserializedRuleDescriptionFeed;
                });
    }
}
