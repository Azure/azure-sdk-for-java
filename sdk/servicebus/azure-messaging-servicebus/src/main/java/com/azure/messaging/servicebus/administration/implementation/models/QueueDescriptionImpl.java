// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.messaging.servicebus.administration.implementation.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.messaging.servicebus.administration.models.EntityStatus;
import com.azure.xml.XmlReader;
import com.azure.xml.XmlSerializable;
import com.azure.xml.XmlToken;
import com.azure.xml.XmlWriter;

import javax.xml.namespace.QName;
import javax.xml.stream.XMLStreamException;
import java.time.Duration;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/** Description of a Service Bus queue resource. */
@Fluent
public final class QueueDescriptionImpl implements XmlSerializable<QueueDescriptionImpl> {
    /*
     * ISO 8601 timespan duration of a peek-lock; that is, the amount of time that the message is locked for other
     * receivers. The maximum value for LockDuration is 5 minutes; the default value is 1 minute.
     */
    private Duration lockDuration;

    /*
     * The maximum size of the queue in megabytes, which is the size of memory allocated for the queue.
     */
    private Long maxSizeInMegabytes;

    /*
     * A value indicating if this queue requires duplicate detection.
     */
    private Boolean requiresDuplicateDetection;

    /*
     * A value that indicates whether the queue supports the concept of sessions.
     */
    private Boolean requiresSession;

    /*
     * ISO 8601 default message timespan to live value. This is the duration after which the message expires, starting
     * from when the message is sent to Service Bus. This is the default value used when TimeToLive is not set on a
     * message itself.
     */
    private Duration defaultMessageTimeToLive;

    /*
     * A value that indicates whether this queue has dead letter support when a message expires.
     */
    private Boolean deadLetteringOnMessageExpiration;

    /*
     * ISO 8601 timeSpan structure that defines the duration of the duplicate detection history. The default value is
     * 10 minutes.
     */
    private Duration duplicateDetectionHistoryTimeWindow;

    /*
     * The maximum delivery count. A message is automatically deadlettered after this number of deliveries. Default
     * value is 10.
     */
    private Integer maxDeliveryCount;

    /*
     * Value that indicates whether server-side batched operations are enabled.
     */
    private Boolean enableBatchedOperations;

    /*
     * The size of the queue, in bytes.
     */
    private Long sizeInBytes;

    /*
     * The number of messages in the queue.
     */
    private Integer messageCount;

    /*
     * A value indicating if the resource can be accessed without authorization.
     */
    private Boolean isAnonymousAccessible;

    static final class AuthorizationRulesWrapper implements XmlSerializable<AuthorizationRulesWrapper> {
        private final List<AuthorizationRuleImpl> items;

        private AuthorizationRulesWrapper(List<AuthorizationRuleImpl> items) {
            this.items = items;
        }

        @Override
        public XmlWriter toXml(XmlWriter xmlWriter) throws XMLStreamException {
            return toXml(xmlWriter, null);
        }

        @Override
        public XmlWriter toXml(XmlWriter xmlWriter, String rootElementName) throws XMLStreamException {
            rootElementName = CoreUtils.isNullOrEmpty(rootElementName) ? "AuthorizationRules" : rootElementName;
            xmlWriter.writeStartElement(
                    "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", rootElementName);
            if (items != null) {
                for (AuthorizationRuleImpl element : items) {
                    xmlWriter.writeXml(element, "AuthorizationRule");
                }
            }
            return xmlWriter.writeEndElement();
        }

        public static AuthorizationRulesWrapper fromXml(XmlReader xmlReader) throws XMLStreamException {
            return fromXml(xmlReader, null);
        }

        public static AuthorizationRulesWrapper fromXml(XmlReader xmlReader, String rootElementName)
                throws XMLStreamException {
            rootElementName = CoreUtils.isNullOrEmpty(rootElementName) ? "AuthorizationRules" : rootElementName;
            return xmlReader.readObject(
                    "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect",
                    rootElementName,
                    reader -> {
                        List<AuthorizationRuleImpl> items = null;

                        while (reader.nextElement() != XmlToken.END_ELEMENT) {
                            String elementName = reader.getElementName().getLocalPart();

                            if ("AuthorizationRule".equals(elementName)) {
                                if (items == null) {
                                    items = new ArrayList<>();
                                }

                                items.add(AuthorizationRuleImpl.fromXml(reader));
                            } else {
                                reader.nextElement();
                            }
                        }
                        return new AuthorizationRulesWrapper(items);
                    });
        }
    }

    /*
     * Authorization rules for resource.
     */
    private AuthorizationRulesWrapper authorizationRules;

    /*
     * Status of a Service Bus resource
     */
    private EntityStatus status;

    /*
     * The name of the recipient entity to which all the messages sent to the queue are forwarded to.
     */
    private String forwardTo;

    /*
     * Custom metadata that user can associate with the description. Max length is 1024 chars.
     */
    private String userMetadata;

    /*
     * The exact time the queue was created.
     */
    private OffsetDateTime createdAt;

    /*
     * The exact time the entity description was last updated.
     */
    private OffsetDateTime updatedAt;

    /*
     * Last time a message was sent, or the last time there was a receive request to this queue.
     */
    private OffsetDateTime accessedAt;

    /*
     * Indicates if messages are received in the same order they are sent. For queues, defaults to true and setting it
     * to false has no effect.
     */
    private Boolean supportOrdering;

    /*
     * Details about the message counts in entity.
     */
    private MessageCountDetailsImpl messageCountDetails;

    /*
     * ISO 8601 timeSpan idle interval after which the queue is automatically deleted. The minimum duration is 5
     * minutes.
     */
    private Duration autoDeleteOnIdle;

    /*
     * A value that indicates whether the queue is to be partitioned across multiple message brokers.
     */
    private Boolean enablePartitioning;

    /*
     * Availability status of the entity
     */
    private EntityAvailabilityStatusImpl entityAvailabilityStatus;

    /*
     * A value that indicates whether Express Entities are enabled. An express queue holds a message in memory
     * temporarily before writing it to persistent storage.
     */
    private Boolean enableExpress;

    /*
     * The name of the recipient entity to which all the dead-lettered messages of this subscription are forwarded to.
     */
    private String forwardDeadLetteredMessagesTo;

    /*
     * The maximum size in kilobytes of message payload that can be accepted by the queue.
     */
    private Long maxMessageSizeInKilobytes;

    /** Creates an instance of QueueDescription class. */
    public QueueDescriptionImpl() {}

    /**
     * Get the lockDuration property: ISO 8601 timespan duration of a peek-lock; that is, the amount of time that the
     * message is locked for other receivers. The maximum value for LockDuration is 5 minutes; the default value is 1
     * minute.
     *
     * @return the lockDuration value.
     */
    public Duration getLockDuration() {
        return this.lockDuration;
    }

    /**
     * Set the lockDuration property: ISO 8601 timespan duration of a peek-lock; that is, the amount of time that the
     * message is locked for other receivers. The maximum value for LockDuration is 5 minutes; the default value is 1
     * minute.
     *
     * @param lockDuration the lockDuration value to set.
     * @return the QueueDescription object itself.
     */
    public QueueDescriptionImpl setLockDuration(Duration lockDuration) {
        this.lockDuration = lockDuration;
        return this;
    }

    /**
     * Get the maxSizeInMegabytes property: The maximum size of the queue in megabytes, which is the size of memory
     * allocated for the queue.
     *
     * @return the maxSizeInMegabytes value.
     */
    public Long getMaxSizeInMegabytes() {
        return this.maxSizeInMegabytes;
    }

    /**
     * Set the maxSizeInMegabytes property: The maximum size of the queue in megabytes, which is the size of memory
     * allocated for the queue.
     *
     * @param maxSizeInMegabytes the maxSizeInMegabytes value to set.
     * @return the QueueDescription object itself.
     */
    public QueueDescriptionImpl setMaxSizeInMegabytes(Long maxSizeInMegabytes) {
        this.maxSizeInMegabytes = maxSizeInMegabytes;
        return this;
    }

    /**
     * Get the requiresDuplicateDetection property: A value indicating if this queue requires duplicate detection.
     *
     * @return the requiresDuplicateDetection value.
     */
    public Boolean isRequiresDuplicateDetection() {
        return this.requiresDuplicateDetection;
    }

    /**
     * Set the requiresDuplicateDetection property: A value indicating if this queue requires duplicate detection.
     *
     * @param requiresDuplicateDetection the requiresDuplicateDetection value to set.
     * @return the QueueDescription object itself.
     */
    public QueueDescriptionImpl setRequiresDuplicateDetection(Boolean requiresDuplicateDetection) {
        this.requiresDuplicateDetection = requiresDuplicateDetection;
        return this;
    }

    /**
     * Get the requiresSession property: A value that indicates whether the queue supports the concept of sessions.
     *
     * @return the requiresSession value.
     */
    public Boolean isRequiresSession() {
        return this.requiresSession;
    }

    /**
     * Set the requiresSession property: A value that indicates whether the queue supports the concept of sessions.
     *
     * @param requiresSession the requiresSession value to set.
     * @return the QueueDescription object itself.
     */
    public QueueDescriptionImpl setRequiresSession(Boolean requiresSession) {
        this.requiresSession = requiresSession;
        return this;
    }

    /**
     * Get the defaultMessageTimeToLive property: ISO 8601 default message timespan to live value. This is the duration
     * after which the message expires, starting from when the message is sent to Service Bus. This is the default value
     * used when TimeToLive is not set on a message itself.
     *
     * @return the defaultMessageTimeToLive value.
     */
    public Duration getDefaultMessageTimeToLive() {
        return this.defaultMessageTimeToLive;
    }

    /**
     * Set the defaultMessageTimeToLive property: ISO 8601 default message timespan to live value. This is the duration
     * after which the message expires, starting from when the message is sent to Service Bus. This is the default value
     * used when TimeToLive is not set on a message itself.
     *
     * @param defaultMessageTimeToLive the defaultMessageTimeToLive value to set.
     * @return the QueueDescription object itself.
     */
    public QueueDescriptionImpl setDefaultMessageTimeToLive(Duration defaultMessageTimeToLive) {
        this.defaultMessageTimeToLive = defaultMessageTimeToLive;
        return this;
    }

    /**
     * Get the deadLetteringOnMessageExpiration property: A value that indicates whether this queue has dead letter
     * support when a message expires.
     *
     * @return the deadLetteringOnMessageExpiration value.
     */
    public Boolean isDeadLetteringOnMessageExpiration() {
        return this.deadLetteringOnMessageExpiration;
    }

    /**
     * Set the deadLetteringOnMessageExpiration property: A value that indicates whether this queue has dead letter
     * support when a message expires.
     *
     * @param deadLetteringOnMessageExpiration the deadLetteringOnMessageExpiration value to set.
     * @return the QueueDescription object itself.
     */
    public QueueDescriptionImpl setDeadLetteringOnMessageExpiration(Boolean deadLetteringOnMessageExpiration) {
        this.deadLetteringOnMessageExpiration = deadLetteringOnMessageExpiration;
        return this;
    }

    /**
     * Get the duplicateDetectionHistoryTimeWindow property: ISO 8601 timeSpan structure that defines the duration of
     * the duplicate detection history. The default value is 10 minutes.
     *
     * @return the duplicateDetectionHistoryTimeWindow value.
     */
    public Duration getDuplicateDetectionHistoryTimeWindow() {
        return this.duplicateDetectionHistoryTimeWindow;
    }

    /**
     * Set the duplicateDetectionHistoryTimeWindow property: ISO 8601 timeSpan structure that defines the duration of
     * the duplicate detection history. The default value is 10 minutes.
     *
     * @param duplicateDetectionHistoryTimeWindow the duplicateDetectionHistoryTimeWindow value to set.
     * @return the QueueDescription object itself.
     */
    public QueueDescriptionImpl setDuplicateDetectionHistoryTimeWindow(Duration duplicateDetectionHistoryTimeWindow) {
        this.duplicateDetectionHistoryTimeWindow = duplicateDetectionHistoryTimeWindow;
        return this;
    }

    /**
     * Get the maxDeliveryCount property: The maximum delivery count. A message is automatically deadlettered after this
     * number of deliveries. Default value is 10.
     *
     * @return the maxDeliveryCount value.
     */
    public Integer getMaxDeliveryCount() {
        return this.maxDeliveryCount;
    }

    /**
     * Set the maxDeliveryCount property: The maximum delivery count. A message is automatically deadlettered after this
     * number of deliveries. Default value is 10.
     *
     * @param maxDeliveryCount the maxDeliveryCount value to set.
     * @return the QueueDescription object itself.
     */
    public QueueDescriptionImpl setMaxDeliveryCount(Integer maxDeliveryCount) {
        this.maxDeliveryCount = maxDeliveryCount;
        return this;
    }

    /**
     * Get the enableBatchedOperations property: Value that indicates whether server-side batched operations are
     * enabled.
     *
     * @return the enableBatchedOperations value.
     */
    public Boolean isEnableBatchedOperations() {
        return this.enableBatchedOperations;
    }

    /**
     * Set the enableBatchedOperations property: Value that indicates whether server-side batched operations are
     * enabled.
     *
     * @param enableBatchedOperations the enableBatchedOperations value to set.
     * @return the QueueDescription object itself.
     */
    public QueueDescriptionImpl setEnableBatchedOperations(Boolean enableBatchedOperations) {
        this.enableBatchedOperations = enableBatchedOperations;
        return this;
    }

    /**
     * Get the sizeInBytes property: The size of the queue, in bytes.
     *
     * @return the sizeInBytes value.
     */
    public Long getSizeInBytes() {
        return this.sizeInBytes;
    }

    /**
     * Set the sizeInBytes property: The size of the queue, in bytes.
     *
     * @param sizeInBytes the sizeInBytes value to set.
     * @return the QueueDescription object itself.
     */
    public QueueDescriptionImpl setSizeInBytes(Long sizeInBytes) {
        this.sizeInBytes = sizeInBytes;
        return this;
    }

    /**
     * Get the messageCount property: The number of messages in the queue.
     *
     * @return the messageCount value.
     */
    public Integer getMessageCount() {
        return this.messageCount;
    }

    /**
     * Set the messageCount property: The number of messages in the queue.
     *
     * @param messageCount the messageCount value to set.
     * @return the QueueDescription object itself.
     */
    public QueueDescriptionImpl setMessageCount(Integer messageCount) {
        this.messageCount = messageCount;
        return this;
    }

    /**
     * Get the isAnonymousAccessible property: A value indicating if the resource can be accessed without authorization.
     *
     * @return the isAnonymousAccessible value.
     */
    public Boolean isAnonymousAccessible() {
        return this.isAnonymousAccessible;
    }

    /**
     * Set the isAnonymousAccessible property: A value indicating if the resource can be accessed without authorization.
     *
     * @param isAnonymousAccessible the isAnonymousAccessible value to set.
     * @return the QueueDescription object itself.
     */
    public QueueDescriptionImpl setIsAnonymousAccessible(Boolean isAnonymousAccessible) {
        this.isAnonymousAccessible = isAnonymousAccessible;
        return this;
    }

    /**
     * Get the authorizationRules property: Authorization rules for resource.
     *
     * @return the authorizationRules value.
     */
    public List<AuthorizationRuleImpl> getAuthorizationRules() {
        if (this.authorizationRules == null) {
            this.authorizationRules = new AuthorizationRulesWrapper(new ArrayList<AuthorizationRuleImpl>());
        }
        return this.authorizationRules.items;
    }

    /**
     * Set the authorizationRules property: Authorization rules for resource.
     *
     * @param authorizationRules the authorizationRules value to set.
     * @return the QueueDescription object itself.
     */
    public QueueDescriptionImpl setAuthorizationRules(List<AuthorizationRuleImpl> authorizationRules) {
        this.authorizationRules = new AuthorizationRulesWrapper(authorizationRules);
        return this;
    }

    /**
     * Get the status property: Status of a Service Bus resource.
     *
     * @return the status value.
     */
    public EntityStatus getStatus() {
        return this.status;
    }

    /**
     * Set the status property: Status of a Service Bus resource.
     *
     * @param status the status value to set.
     * @return the QueueDescription object itself.
     */
    public QueueDescriptionImpl setStatus(EntityStatus status) {
        this.status = status;
        return this;
    }

    /**
     * Get the forwardTo property: The name of the recipient entity to which all the messages sent to the queue are
     * forwarded to.
     *
     * @return the forwardTo value.
     */
    public String getForwardTo() {
        return this.forwardTo;
    }

    /**
     * Set the forwardTo property: The name of the recipient entity to which all the messages sent to the queue are
     * forwarded to.
     *
     * @param forwardTo the forwardTo value to set.
     * @return the QueueDescription object itself.
     */
    public QueueDescriptionImpl setForwardTo(String forwardTo) {
        this.forwardTo = forwardTo;
        return this;
    }

    /**
     * Get the userMetadata property: Custom metadata that user can associate with the description. Max length is 1024
     * chars.
     *
     * @return the userMetadata value.
     */
    public String getUserMetadata() {
        return this.userMetadata;
    }

    /**
     * Set the userMetadata property: Custom metadata that user can associate with the description. Max length is 1024
     * chars.
     *
     * @param userMetadata the userMetadata value to set.
     * @return the QueueDescription object itself.
     */
    public QueueDescriptionImpl setUserMetadata(String userMetadata) {
        this.userMetadata = userMetadata;
        return this;
    }

    /**
     * Get the createdAt property: The exact time the queue was created.
     *
     * @return the createdAt value.
     */
    public OffsetDateTime getCreatedAt() {
        return this.createdAt;
    }

    /**
     * Set the createdAt property: The exact time the queue was created.
     *
     * @param createdAt the createdAt value to set.
     * @return the QueueDescription object itself.
     */
    public QueueDescriptionImpl setCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }

    /**
     * Get the updatedAt property: The exact time the entity description was last updated.
     *
     * @return the updatedAt value.
     */
    public OffsetDateTime getUpdatedAt() {
        return this.updatedAt;
    }

    /**
     * Set the updatedAt property: The exact time the entity description was last updated.
     *
     * @param updatedAt the updatedAt value to set.
     * @return the QueueDescription object itself.
     */
    public QueueDescriptionImpl setUpdatedAt(OffsetDateTime updatedAt) {
        this.updatedAt = updatedAt;
        return this;
    }

    /**
     * Get the accessedAt property: Last time a message was sent, or the last time there was a receive request to this
     * queue.
     *
     * @return the accessedAt value.
     */
    public OffsetDateTime getAccessedAt() {
        return this.accessedAt;
    }

    /**
     * Set the accessedAt property: Last time a message was sent, or the last time there was a receive request to this
     * queue.
     *
     * @param accessedAt the accessedAt value to set.
     * @return the QueueDescription object itself.
     */
    public QueueDescriptionImpl setAccessedAt(OffsetDateTime accessedAt) {
        this.accessedAt = accessedAt;
        return this;
    }

    /**
     * Get the supportOrdering property: Indicates if messages are received in the same order they are sent. For queues,
     * defaults to true and setting it to false has no effect.
     *
     * @return the supportOrdering value.
     */
    public Boolean isSupportOrdering() {
        return this.supportOrdering;
    }

    /**
     * Set the supportOrdering property: Indicates if messages are received in the same order they are sent. For queues,
     * defaults to true and setting it to false has no effect.
     *
     * @param supportOrdering the supportOrdering value to set.
     * @return the QueueDescription object itself.
     */
    public QueueDescriptionImpl setSupportOrdering(Boolean supportOrdering) {
        this.supportOrdering = supportOrdering;
        return this;
    }

    /**
     * Get the messageCountDetails property: Details about the message counts in entity.
     *
     * @return the messageCountDetails value.
     */
    public MessageCountDetailsImpl getMessageCountDetails() {
        return this.messageCountDetails;
    }

    /**
     * Set the messageCountDetails property: Details about the message counts in entity.
     *
     * @param messageCountDetails the messageCountDetails value to set.
     * @return the QueueDescription object itself.
     */
    public QueueDescriptionImpl setMessageCountDetails(MessageCountDetailsImpl messageCountDetails) {
        this.messageCountDetails = messageCountDetails;
        return this;
    }

    /**
     * Get the autoDeleteOnIdle property: ISO 8601 timeSpan idle interval after which the queue is automatically
     * deleted. The minimum duration is 5 minutes.
     *
     * @return the autoDeleteOnIdle value.
     */
    public Duration getAutoDeleteOnIdle() {
        return this.autoDeleteOnIdle;
    }

    /**
     * Set the autoDeleteOnIdle property: ISO 8601 timeSpan idle interval after which the queue is automatically
     * deleted. The minimum duration is 5 minutes.
     *
     * @param autoDeleteOnIdle the autoDeleteOnIdle value to set.
     * @return the QueueDescription object itself.
     */
    public QueueDescriptionImpl setAutoDeleteOnIdle(Duration autoDeleteOnIdle) {
        this.autoDeleteOnIdle = autoDeleteOnIdle;
        return this;
    }

    /**
     * Get the enablePartitioning property: A value that indicates whether the queue is to be partitioned across
     * multiple message brokers.
     *
     * @return the enablePartitioning value.
     */
    public Boolean isEnablePartitioning() {
        return this.enablePartitioning;
    }

    /**
     * Set the enablePartitioning property: A value that indicates whether the queue is to be partitioned across
     * multiple message brokers.
     *
     * @param enablePartitioning the enablePartitioning value to set.
     * @return the QueueDescription object itself.
     */
    public QueueDescriptionImpl setEnablePartitioning(Boolean enablePartitioning) {
        this.enablePartitioning = enablePartitioning;
        return this;
    }

    /**
     * Get the entityAvailabilityStatus property: Availability status of the entity.
     *
     * @return the entityAvailabilityStatus value.
     */
    public EntityAvailabilityStatusImpl getEntityAvailabilityStatus() {
        return this.entityAvailabilityStatus;
    }

    /**
     * Set the entityAvailabilityStatus property: Availability status of the entity.
     *
     * @param entityAvailabilityStatus the entityAvailabilityStatus value to set.
     * @return the QueueDescription object itself.
     */
    public QueueDescriptionImpl setEntityAvailabilityStatus(EntityAvailabilityStatusImpl entityAvailabilityStatus) {
        this.entityAvailabilityStatus = entityAvailabilityStatus;
        return this;
    }

    /**
     * Get the enableExpress property: A value that indicates whether Express Entities are enabled. An express queue
     * holds a message in memory temporarily before writing it to persistent storage.
     *
     * @return the enableExpress value.
     */
    public Boolean isEnableExpress() {
        return this.enableExpress;
    }

    /**
     * Set the enableExpress property: A value that indicates whether Express Entities are enabled. An express queue
     * holds a message in memory temporarily before writing it to persistent storage.
     *
     * @param enableExpress the enableExpress value to set.
     * @return the QueueDescription object itself.
     */
    public QueueDescriptionImpl setEnableExpress(Boolean enableExpress) {
        this.enableExpress = enableExpress;
        return this;
    }

    /**
     * Get the forwardDeadLetteredMessagesTo property: The name of the recipient entity to which all the dead-lettered
     * messages of this subscription are forwarded to.
     *
     * @return the forwardDeadLetteredMessagesTo value.
     */
    public String getForwardDeadLetteredMessagesTo() {
        return this.forwardDeadLetteredMessagesTo;
    }

    /**
     * Set the forwardDeadLetteredMessagesTo property: The name of the recipient entity to which all the dead-lettered
     * messages of this subscription are forwarded to.
     *
     * @param forwardDeadLetteredMessagesTo the forwardDeadLetteredMessagesTo value to set.
     * @return the QueueDescription object itself.
     */
    public QueueDescriptionImpl setForwardDeadLetteredMessagesTo(String forwardDeadLetteredMessagesTo) {
        this.forwardDeadLetteredMessagesTo = forwardDeadLetteredMessagesTo;
        return this;
    }

    /**
     * Get the maxMessageSizeInKilobytes property: The maximum size in kilobytes of message payload that can be accepted
     * by the queue.
     *
     * @return the maxMessageSizeInKilobytes value.
     */
    public Long getMaxMessageSizeInKilobytes() {
        return this.maxMessageSizeInKilobytes;
    }

    /**
     * Set the maxMessageSizeInKilobytes property: The maximum size in kilobytes of message payload that can be accepted
     * by the queue.
     *
     * @param maxMessageSizeInKilobytes the maxMessageSizeInKilobytes value to set.
     * @return the QueueDescription object itself.
     */
    public QueueDescriptionImpl setMaxMessageSizeInKilobytes(Long maxMessageSizeInKilobytes) {
        this.maxMessageSizeInKilobytes = maxMessageSizeInKilobytes;
        return this;
    }

    @Override
    public XmlWriter toXml(XmlWriter xmlWriter) throws XMLStreamException {
        return toXml(xmlWriter, null);
    }

    @Override
    public XmlWriter toXml(XmlWriter xmlWriter, String rootElementName) throws XMLStreamException {
        rootElementName = CoreUtils.isNullOrEmpty(rootElementName) ? "QueueDescription" : rootElementName;
        xmlWriter.writeStartElement(rootElementName);
        xmlWriter.writeNamespace("http://schemas.microsoft.com/netservices/2010/10/servicebus/connect");
        xmlWriter.writeStringElement(
                "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect",
                "LockDuration",
                Objects.toString(this.lockDuration, null));
        xmlWriter.writeNumberElement(
                "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect",
                "MaxSizeInMegabytes",
                this.maxSizeInMegabytes);
        xmlWriter.writeBooleanElement(
                "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect",
                "RequiresDuplicateDetection",
                this.requiresDuplicateDetection);
        xmlWriter.writeBooleanElement(
                "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect",
                "RequiresSession",
                this.requiresSession);
        xmlWriter.writeStringElement(
                "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect",
                "DefaultMessageTimeToLive",
                Objects.toString(this.defaultMessageTimeToLive, null));
        xmlWriter.writeBooleanElement(
                "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect",
                "DeadLetteringOnMessageExpiration",
                this.deadLetteringOnMessageExpiration);
        xmlWriter.writeStringElement(
                "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect",
                "DuplicateDetectionHistoryTimeWindow",
                Objects.toString(this.duplicateDetectionHistoryTimeWindow, null));
        xmlWriter.writeNumberElement(
                "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect",
                "MaxDeliveryCount",
                this.maxDeliveryCount);
        xmlWriter.writeBooleanElement(
                "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect",
                "EnableBatchedOperations",
                this.enableBatchedOperations);
        xmlWriter.writeNumberElement(
                "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "SizeInBytes", this.sizeInBytes);
        xmlWriter.writeNumberElement(
                "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect",
                "MessageCount",
                this.messageCount);
        xmlWriter.writeBooleanElement(
                "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect",
                "IsAnonymousAccessible",
                this.isAnonymousAccessible);
        xmlWriter.writeXml(this.authorizationRules);
        xmlWriter.writeStringElement(
                "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect",
                "Status",
                Objects.toString(this.status, null));
        xmlWriter.writeStringElement(
                "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect", "ForwardTo", this.forwardTo);
        xmlWriter.writeStringElement(
                "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect",
                "UserMetadata",
                this.userMetadata);
        xmlWriter.writeStringElement(
                "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect",
                "CreatedAt",
                Objects.toString(this.createdAt, null));
        xmlWriter.writeStringElement(
                "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect",
                "UpdatedAt",
                Objects.toString(this.updatedAt, null));
        xmlWriter.writeStringElement(
                "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect",
                "AccessedAt",
                Objects.toString(this.accessedAt, null));
        xmlWriter.writeBooleanElement(
                "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect",
                "SupportOrdering",
                this.supportOrdering);
        xmlWriter.writeXml(this.messageCountDetails, "CountDetails");
        xmlWriter.writeStringElement(
                "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect",
                "AutoDeleteOnIdle",
                Objects.toString(this.autoDeleteOnIdle, null));
        xmlWriter.writeBooleanElement(
                "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect",
                "EnablePartitioning",
                this.enablePartitioning);
        xmlWriter.writeStringElement(
                "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect",
                "EntityAvailabilityStatus",
                Objects.toString(this.entityAvailabilityStatus, null));
        xmlWriter.writeBooleanElement(
                "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect",
                "EnableExpress",
                this.enableExpress);
        xmlWriter.writeStringElement(
                "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect",
                "ForwardDeadLetteredMessagesTo",
                this.forwardDeadLetteredMessagesTo);
        xmlWriter.writeNumberElement(
                "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect",
                "MaxMessageSizeInKilobytes",
                this.maxMessageSizeInKilobytes);
        return xmlWriter.writeEndElement();
    }

    /**
     * Reads an instance of QueueDescription from the XmlReader.
     *
     * @param xmlReader The XmlReader being read.
     * @return An instance of QueueDescription if the XmlReader was pointing to an instance of it, or null if it was
     *     pointing to XML null.
     */
    public static QueueDescriptionImpl fromXml(XmlReader xmlReader) throws XMLStreamException {
        return fromXml(xmlReader, null);
    }

    /**
     * Reads an instance of QueueDescription from the XmlReader.
     *
     * @param xmlReader The XmlReader being read.
     * @return An instance of QueueDescription if the XmlReader was pointing to an instance of it, or null if it was
     *     pointing to XML null.
     */
    public static QueueDescriptionImpl fromXml(XmlReader xmlReader, String rootElementName) throws XMLStreamException {
        String finalRootElementName = CoreUtils.isNullOrEmpty(rootElementName) ? "QueueDescription" : rootElementName;
        return xmlReader.readObject(
                "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect",
                finalRootElementName,
                reader -> {
                    Duration lockDuration = null;
                    Long maxSizeInMegabytes = null;
                    Boolean requiresDuplicateDetection = null;
                    Boolean requiresSession = null;
                    Duration defaultMessageTimeToLive = null;
                    Boolean deadLetteringOnMessageExpiration = null;
                    Duration duplicateDetectionHistoryTimeWindow = null;
                    Integer maxDeliveryCount = null;
                    Boolean enableBatchedOperations = null;
                    Long sizeInBytes = null;
                    Integer messageCount = null;
                    Boolean isAnonymousAccessible = null;
                    AuthorizationRulesWrapper authorizationRules = null;
                    EntityStatus status = null;
                    String forwardTo = null;
                    String userMetadata = null;
                    OffsetDateTime createdAt = null;
                    OffsetDateTime updatedAt = null;
                    OffsetDateTime accessedAt = null;
                    Boolean supportOrdering = null;
                    MessageCountDetailsImpl messageCountDetails = null;
                    Duration autoDeleteOnIdle = null;
                    Boolean enablePartitioning = null;
                    EntityAvailabilityStatusImpl entityAvailabilityStatus = null;
                    Boolean enableExpress = null;
                    String forwardDeadLetteredMessagesTo = null;
                    Long maxMessageSizeInKilobytes = null;
                    while (reader.nextElement() != XmlToken.END_ELEMENT) {
                        QName elementName = reader.getElementName();

                        if ("LockDuration".equals(elementName.getLocalPart())
                                && "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"
                                        .equals(elementName.getNamespaceURI())) {
                            lockDuration = reader.getNullableElement(Duration::parse);
                        } else if ("MaxSizeInMegabytes".equals(elementName.getLocalPart())
                                && "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"
                                        .equals(elementName.getNamespaceURI())) {
                            maxSizeInMegabytes = reader.getNullableElement(Long::parseLong);
                        } else if ("RequiresDuplicateDetection".equals(elementName.getLocalPart())
                                && "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"
                                        .equals(elementName.getNamespaceURI())) {
                            requiresDuplicateDetection = reader.getNullableElement(Boolean::parseBoolean);
                        } else if ("RequiresSession".equals(elementName.getLocalPart())
                                && "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"
                                        .equals(elementName.getNamespaceURI())) {
                            requiresSession = reader.getNullableElement(Boolean::parseBoolean);
                        } else if ("DefaultMessageTimeToLive".equals(elementName.getLocalPart())
                                && "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"
                                        .equals(elementName.getNamespaceURI())) {
                            defaultMessageTimeToLive = reader.getNullableElement(Duration::parse);
                        } else if ("DeadLetteringOnMessageExpiration".equals(elementName.getLocalPart())
                                && "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"
                                        .equals(elementName.getNamespaceURI())) {
                            deadLetteringOnMessageExpiration = reader.getNullableElement(Boolean::parseBoolean);
                        } else if ("DuplicateDetectionHistoryTimeWindow".equals(elementName.getLocalPart())
                                && "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"
                                        .equals(elementName.getNamespaceURI())) {
                            duplicateDetectionHistoryTimeWindow = reader.getNullableElement(Duration::parse);
                        } else if ("MaxDeliveryCount".equals(elementName.getLocalPart())
                                && "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"
                                        .equals(elementName.getNamespaceURI())) {
                            maxDeliveryCount = reader.getNullableElement(Integer::parseInt);
                        } else if ("EnableBatchedOperations".equals(elementName.getLocalPart())
                                && "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"
                                        .equals(elementName.getNamespaceURI())) {
                            enableBatchedOperations = reader.getNullableElement(Boolean::parseBoolean);
                        } else if ("SizeInBytes".equals(elementName.getLocalPart())
                                && "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"
                                        .equals(elementName.getNamespaceURI())) {
                            sizeInBytes = reader.getNullableElement(Long::parseLong);
                        } else if ("MessageCount".equals(elementName.getLocalPart())
                                && "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"
                                        .equals(elementName.getNamespaceURI())) {
                            messageCount = reader.getNullableElement(Integer::parseInt);
                        } else if ("IsAnonymousAccessible".equals(elementName.getLocalPart())
                                && "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"
                                        .equals(elementName.getNamespaceURI())) {
                            isAnonymousAccessible = reader.getNullableElement(Boolean::parseBoolean);
                        } else if ("AuthorizationRules".equals(elementName.getLocalPart())
                                && "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"
                                        .equals(elementName.getNamespaceURI())) {
                            authorizationRules = AuthorizationRulesWrapper.fromXml(reader);
                        } else if ("Status".equals(elementName.getLocalPart())
                                && "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"
                                        .equals(elementName.getNamespaceURI())) {
                            status = reader.getNullableElement(EntityStatus::fromString);
                        } else if ("ForwardTo".equals(elementName.getLocalPart())
                                && "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"
                                        .equals(elementName.getNamespaceURI())) {
                            forwardTo = reader.getStringElement();
                        } else if ("UserMetadata".equals(elementName.getLocalPart())
                                && "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"
                                        .equals(elementName.getNamespaceURI())) {
                            userMetadata = reader.getStringElement();
                        } else if ("CreatedAt".equals(elementName.getLocalPart())
                                && "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"
                                        .equals(elementName.getNamespaceURI())) {
                            createdAt = reader.getNullableElement(OffsetDateTime::parse);
                        } else if ("UpdatedAt".equals(elementName.getLocalPart())
                                && "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"
                                        .equals(elementName.getNamespaceURI())) {
                            updatedAt = reader.getNullableElement(OffsetDateTime::parse);
                        } else if ("AccessedAt".equals(elementName.getLocalPart())
                                && "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"
                                        .equals(elementName.getNamespaceURI())) {
                            accessedAt = reader.getNullableElement(OffsetDateTime::parse);
                        } else if ("SupportOrdering".equals(elementName.getLocalPart())
                                && "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"
                                        .equals(elementName.getNamespaceURI())) {
                            supportOrdering = reader.getNullableElement(Boolean::parseBoolean);
                        } else if ("CountDetails".equals(elementName.getLocalPart())
                                && "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"
                                        .equals(elementName.getNamespaceURI())) {
                            messageCountDetails = MessageCountDetailsImpl.fromXml(reader, "CountDetails");
                        } else if ("AutoDeleteOnIdle".equals(elementName.getLocalPart())
                                && "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"
                                        .equals(elementName.getNamespaceURI())) {
                            autoDeleteOnIdle = reader.getNullableElement(Duration::parse);
                        } else if ("EnablePartitioning".equals(elementName.getLocalPart())
                                && "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"
                                        .equals(elementName.getNamespaceURI())) {
                            enablePartitioning = reader.getNullableElement(Boolean::parseBoolean);
                        } else if ("EntityAvailabilityStatus".equals(elementName.getLocalPart())
                                && "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"
                                        .equals(elementName.getNamespaceURI())) {
                            entityAvailabilityStatus =
                                    reader.getNullableElement(EntityAvailabilityStatusImpl::fromString);
                        } else if ("EnableExpress".equals(elementName.getLocalPart())
                                && "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"
                                        .equals(elementName.getNamespaceURI())) {
                            enableExpress = reader.getNullableElement(Boolean::parseBoolean);
                        } else if ("ForwardDeadLetteredMessagesTo".equals(elementName.getLocalPart())
                                && "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"
                                        .equals(elementName.getNamespaceURI())) {
                            forwardDeadLetteredMessagesTo = reader.getStringElement();
                        } else if ("MaxMessageSizeInKilobytes".equals(elementName.getLocalPart())
                                && "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"
                                        .equals(elementName.getNamespaceURI())) {
                            maxMessageSizeInKilobytes = reader.getNullableElement(Long::parseLong);
                        } else {
                            reader.skipElement();
                        }
                    }
                    QueueDescriptionImpl deserializedQueueDescription = new QueueDescriptionImpl();
                    deserializedQueueDescription.lockDuration = lockDuration;
                    deserializedQueueDescription.maxSizeInMegabytes = maxSizeInMegabytes;
                    deserializedQueueDescription.requiresDuplicateDetection = requiresDuplicateDetection;
                    deserializedQueueDescription.requiresSession = requiresSession;
                    deserializedQueueDescription.defaultMessageTimeToLive = defaultMessageTimeToLive;
                    deserializedQueueDescription.deadLetteringOnMessageExpiration = deadLetteringOnMessageExpiration;
                    deserializedQueueDescription.duplicateDetectionHistoryTimeWindow =
                            duplicateDetectionHistoryTimeWindow;
                    deserializedQueueDescription.maxDeliveryCount = maxDeliveryCount;
                    deserializedQueueDescription.enableBatchedOperations = enableBatchedOperations;
                    deserializedQueueDescription.sizeInBytes = sizeInBytes;
                    deserializedQueueDescription.messageCount = messageCount;
                    deserializedQueueDescription.isAnonymousAccessible = isAnonymousAccessible;
                    deserializedQueueDescription.authorizationRules = authorizationRules;
                    deserializedQueueDescription.status = status;
                    deserializedQueueDescription.forwardTo = forwardTo;
                    deserializedQueueDescription.userMetadata = userMetadata;
                    deserializedQueueDescription.createdAt = createdAt;
                    deserializedQueueDescription.updatedAt = updatedAt;
                    deserializedQueueDescription.accessedAt = accessedAt;
                    deserializedQueueDescription.supportOrdering = supportOrdering;
                    deserializedQueueDescription.messageCountDetails = messageCountDetails;
                    deserializedQueueDescription.autoDeleteOnIdle = autoDeleteOnIdle;
                    deserializedQueueDescription.enablePartitioning = enablePartitioning;
                    deserializedQueueDescription.entityAvailabilityStatus = entityAvailabilityStatus;
                    deserializedQueueDescription.enableExpress = enableExpress;
                    deserializedQueueDescription.forwardDeadLetteredMessagesTo = forwardDeadLetteredMessagesTo;
                    deserializedQueueDescription.maxMessageSizeInKilobytes = maxMessageSizeInKilobytes;

                    return deserializedQueueDescription;
                });
    }
}
