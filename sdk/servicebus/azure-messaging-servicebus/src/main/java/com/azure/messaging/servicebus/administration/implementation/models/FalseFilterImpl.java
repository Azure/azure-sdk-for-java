// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.messaging.servicebus.administration.implementation.models;

import com.azure.core.annotation.Fluent;
import com.azure.xml.XmlReader;
import com.azure.xml.XmlToken;
import com.azure.xml.XmlWriter;
import java.util.List;
import javax.xml.namespace.QName;
import javax.xml.stream.XMLStreamException;

/** The FalseFilter model. */
@Fluent
public final class FalseFilterImpl extends SqlFilterImpl {
    /*
     * The type property.
     */
    private static final String TYPE = "FalseFilter";

    /** Creates an instance of FalseFilter class. */
    public FalseFilterImpl() {}

    /** {@inheritDoc} */
    @Override
    public FalseFilterImpl setSqlExpression(String sqlExpression) {
        super.setSqlExpression(sqlExpression);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public FalseFilterImpl setCompatibilityLevel(String compatibilityLevel) {
        super.setCompatibilityLevel(compatibilityLevel);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public FalseFilterImpl setParameters(List<KeyValueImpl> parameters) {
        super.setParameters(parameters);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public FalseFilterImpl setRequiresPreprocessing(Boolean requiresPreprocessing) {
        super.setRequiresPreprocessing(requiresPreprocessing);
        return this;
    }

    @Override
    public XmlWriter toXml(XmlWriter xmlWriter) throws XMLStreamException {
        xmlWriter.writeStartElement("FalseFilter");
        xmlWriter.writeStringAttribute("http://www.w3.org/2001/XMLSchema-instance", "type", TYPE);
        xmlWriter.writeStringElement(
                "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect",
                "SqlExpression",
                getSqlExpression());
        xmlWriter.writeStringElement(
                "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect",
                "CompatibilityLevel",
                getCompatibilityLevel());
        xmlWriter.writeXml(getParametersInternal());
        xmlWriter.writeBooleanElement(
                "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect",
                "RequiresPreprocessing",
                isRequiresPreprocessing());
        return xmlWriter.writeEndElement();
    }

    /**
     * Reads an instance of FalseFilter from the XmlReader.
     *
     * @param xmlReader The XmlReader being read.
     * @return An instance of FalseFilter if the XmlReader was pointing to an instance of it, or null if it was pointing
     *     to XML null.
     * @throws IllegalStateException If the deserialized XML object was missing the polymorphic discriminator.
     */
    public static FalseFilterImpl fromXml(XmlReader xmlReader) throws XMLStreamException {
        return xmlReader.readObject(
                "FalseFilter",
                reader -> {
                    String type = reader.getStringAttribute("http://www.w3.org/2001/XMLSchema-instance", "type");
                    if (!"FalseFilter".equals(type)) {
                        throw new IllegalStateException(
                                "'type' was expected to be non-null and equal to 'FalseFilter'. The found 'type' was '"
                                        + type
                                        + "'.");
                    }
                    String sqlExpression = null;
                    String compatibilityLevel = null;
                    ParametersWrapper parameters = null;
                    Boolean requiresPreprocessing = null;
                    while (reader.nextElement() != XmlToken.END_ELEMENT) {
                        QName elementName = reader.getElementName();

                        if ("SqlExpression".equals(elementName.getLocalPart())
                                && "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"
                                        .equals(elementName.getNamespaceURI())) {
                            sqlExpression = reader.getStringElement();
                        } else if ("CompatibilityLevel".equals(elementName.getLocalPart())
                                && "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"
                                        .equals(elementName.getNamespaceURI())) {
                            compatibilityLevel = reader.getStringElement();
                        } else if ("Parameters".equals(elementName.getLocalPart())
                                && "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"
                                        .equals(elementName.getNamespaceURI())) {
                            parameters = ParametersWrapper.fromXml(reader);
                        } else if ("RequiresPreprocessing".equals(elementName.getLocalPart())
                                && "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"
                                        .equals(elementName.getNamespaceURI())) {
                            requiresPreprocessing = reader.getNullableElement(Boolean::parseBoolean);
                        } else {
                            reader.skipElement();
                        }
                    }
                    FalseFilterImpl deserializedFalseFilter = new FalseFilterImpl();
                    deserializedFalseFilter.setSqlExpression(sqlExpression);
                    deserializedFalseFilter.setCompatibilityLevel(compatibilityLevel);
                    deserializedFalseFilter.setParametersInternal(parameters);
                    deserializedFalseFilter.setRequiresPreprocessing(requiresPreprocessing);

                    return deserializedFalseFilter;
                });
    }
}
