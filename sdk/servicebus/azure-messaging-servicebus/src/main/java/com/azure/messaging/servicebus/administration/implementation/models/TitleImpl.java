// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.messaging.servicebus.administration.implementation.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.xml.XmlReader;
import com.azure.xml.XmlSerializable;
import com.azure.xml.XmlWriter;
import javax.xml.stream.XMLStreamException;

/** The Title model. */
@Fluent
public final class TitleImpl implements XmlSerializable<TitleImpl> {
    /*
     * The type of the title.
     */
    private String type;

    /*
     * The title.
     */
    private String content;

    /** Creates an instance of Title class. */
    public TitleImpl() {}

    /**
     * Get the type property: The type of the title.
     *
     * @return the type value.
     */
    public String getType() {
        return this.type;
    }

    /**
     * Set the type property: The type of the title.
     *
     * @param type the type value to set.
     * @return the Title object itself.
     */
    public TitleImpl setType(String type) {
        this.type = type;
        return this;
    }

    /**
     * Get the content property: The title.
     *
     * @return the content value.
     */
    public String getContent() {
        return this.content;
    }

    /**
     * Set the content property: The title.
     *
     * @param content the content value to set.
     * @return the Title object itself.
     */
    public TitleImpl setContent(String content) {
        this.content = content;
        return this;
    }

    @Override
    public XmlWriter toXml(XmlWriter xmlWriter) throws XMLStreamException {
        return toXml(xmlWriter, null);
    }

    @Override
    public XmlWriter toXml(XmlWriter xmlWriter, String rootElementName) throws XMLStreamException {
        rootElementName = CoreUtils.isNullOrEmpty(rootElementName) ? "title" : rootElementName;
        xmlWriter.writeStartElement(rootElementName);
        xmlWriter.writeNamespace("http://www.w3.org/2005/Atom");
        xmlWriter.writeStringAttribute("http://www.w3.org/2005/Atom", "type", this.type);
        xmlWriter.writeString(this.content);
        return xmlWriter.writeEndElement();
    }

    /**
     * Reads an instance of Title from the XmlReader.
     *
     * @param xmlReader The XmlReader being read.
     * @return An instance of Title if the XmlReader was pointing to an instance of it, or null if it was pointing to
     *     XML null.
     * @throws XMLStreamException If an error occurs while reading the Title.
     */
    public static TitleImpl fromXml(XmlReader xmlReader) throws XMLStreamException {
        return fromXml(xmlReader, null);
    }

    /**
     * Reads an instance of Title from the XmlReader.
     *
     * @param xmlReader The XmlReader being read.
     * @param rootElementName Optional root element name to override the default definedby the model. Used to support
     *     cases where the model can deserialize from different root elementnames.
     * @return An instance of Title if the XmlReader was pointing to an instance of it, or null if it was pointing to
     *     XML null.
     * @throws XMLStreamException If an error occurs while reading the Title.
     */
    public static TitleImpl fromXml(XmlReader xmlReader, String rootElementName) throws XMLStreamException {
        String finalRootElementName = CoreUtils.isNullOrEmpty(rootElementName) ? "title" : rootElementName;
        return xmlReader.readObject(
                "http://www.w3.org/2005/Atom",
                finalRootElementName,
                reader -> {
                    String type = reader.getStringAttribute("http://www.w3.org/2005/Atom", "type");
                    String content = reader.getStringElement();
                    TitleImpl deserializedTitle = new TitleImpl();
                    deserializedTitle.type = type;
                    deserializedTitle.content = content;

                    return deserializedTitle;
                });
    }
}
