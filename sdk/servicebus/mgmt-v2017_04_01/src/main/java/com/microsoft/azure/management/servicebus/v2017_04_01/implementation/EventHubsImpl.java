/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.servicebus.v2017_04_01.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.servicebus.v2017_04_01.EventHubs;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.servicebus.v2017_04_01.Eventhub;

class EventHubsImpl extends WrapperImpl<EventHubsInner> implements EventHubs {
    private final ServiceBusManager manager;

    EventHubsImpl(ServiceBusManager manager) {
        super(manager.inner().eventHubs());
        this.manager = manager;
    }

    public ServiceBusManager manager() {
        return this.manager;
    }

    private EventhubImpl wrapModel(EventhubInner inner) {
        return  new EventhubImpl(inner, manager());
    }

    @Override
    public Observable<Eventhub> listByNamespaceAsync(final String resourceGroupName, final String namespaceName) {
        EventHubsInner client = this.inner();
        return client.listByNamespaceAsync(resourceGroupName, namespaceName)
        .flatMapIterable(new Func1<Page<EventhubInner>, Iterable<EventhubInner>>() {
            @Override
            public Iterable<EventhubInner> call(Page<EventhubInner> page) {
                return page.items();
            }
        })
        .map(new Func1<EventhubInner, Eventhub>() {
            @Override
            public Eventhub call(EventhubInner inner) {
                return wrapModel(inner);
            }
        });
    }

}
