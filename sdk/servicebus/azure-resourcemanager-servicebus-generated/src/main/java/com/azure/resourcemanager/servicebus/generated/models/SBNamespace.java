// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicebus.generated.models;

import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.servicebus.generated.fluent.models.PrivateEndpointConnectionInner;
import com.azure.resourcemanager.servicebus.generated.fluent.models.SBNamespaceInner;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;

/** An immutable client-side representation of SBNamespace. */
public interface SBNamespace {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     *
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     *
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     *
     * @return the type value.
     */
    String type();

    /**
     * Gets the location property: The geo-location where the resource lives.
     *
     * @return the location value.
     */
    String location();

    /**
     * Gets the tags property: Resource tags.
     *
     * @return the tags value.
     */
    Map<String, String> tags();

    /**
     * Gets the sku property: Properties of SKU.
     *
     * @return the sku value.
     */
    SBSku sku();

    /**
     * Gets the systemData property: The system meta data relating to this resource.
     *
     * @return the systemData value.
     */
    SystemData systemData();

    /**
     * Gets the principalId property: ObjectId from the KeyVault.
     *
     * @return the principalId value.
     */
    String principalId();

    /**
     * Gets the tenantId property: TenantId from the KeyVault.
     *
     * @return the tenantId value.
     */
    String tenantId();

    /**
     * Gets the typeIdentityType property: Type of managed service identity.
     *
     * @return the typeIdentityType value.
     */
    ManagedServiceIdentityType typeIdentityType();

    /**
     * Gets the userAssignedIdentities property: Properties for User Assigned Identities.
     *
     * @return the userAssignedIdentities value.
     */
    Map<String, UserAssignedIdentity> userAssignedIdentities();

    /**
     * Gets the provisioningState property: Provisioning state of the namespace.
     *
     * @return the provisioningState value.
     */
    String provisioningState();

    /**
     * Gets the status property: Status of the namespace.
     *
     * @return the status value.
     */
    String status();

    /**
     * Gets the createdAt property: The time the namespace was created.
     *
     * @return the createdAt value.
     */
    OffsetDateTime createdAt();

    /**
     * Gets the updatedAt property: The time the namespace was updated.
     *
     * @return the updatedAt value.
     */
    OffsetDateTime updatedAt();

    /**
     * Gets the serviceBusEndpoint property: Endpoint you can use to perform Service Bus operations.
     *
     * @return the serviceBusEndpoint value.
     */
    String serviceBusEndpoint();

    /**
     * Gets the metricId property: Identifier for Azure Insights metrics.
     *
     * @return the metricId value.
     */
    String metricId();

    /**
     * Gets the zoneRedundant property: Enabling this property creates a Premium Service Bus Namespace in regions
     * supported availability zones.
     *
     * @return the zoneRedundant value.
     */
    Boolean zoneRedundant();

    /**
     * Gets the privateEndpointConnections property: List of private endpoint connections.
     *
     * @return the privateEndpointConnections value.
     */
    List<PrivateEndpointConnection> privateEndpointConnections();

    /**
     * Gets the disableLocalAuth property: This property disables SAS authentication for the Service Bus namespace.
     *
     * @return the disableLocalAuth value.
     */
    Boolean disableLocalAuth();

    /**
     * Gets the alternateName property: Alternate name for namespace.
     *
     * @return the alternateName value.
     */
    String alternateName();

    /**
     * Gets the keyVaultProperties property: Properties of KeyVault.
     *
     * @return the keyVaultProperties value.
     */
    List<KeyVaultProperties> keyVaultProperties();

    /**
     * Gets the keySource property: Enumerates the possible value of keySource for Encryption.
     *
     * @return the keySource value.
     */
    KeySource keySource();

    /**
     * Gets the requireInfrastructureEncryption property: Enable Infrastructure Encryption (Double Encryption).
     *
     * @return the requireInfrastructureEncryption value.
     */
    Boolean requireInfrastructureEncryption();

    /**
     * Gets the region of the resource.
     *
     * @return the region of the resource.
     */
    Region region();

    /**
     * Gets the name of the resource region.
     *
     * @return the name of the resource region.
     */
    String regionName();

    /**
     * Gets the inner com.azure.resourcemanager.servicebus.generated.fluent.models.SBNamespaceInner object.
     *
     * @return the inner object.
     */
    SBNamespaceInner innerModel();

    /** The entirety of the SBNamespace definition. */
    interface Definition
        extends DefinitionStages.Blank,
            DefinitionStages.WithLocation,
            DefinitionStages.WithResourceGroup,
            DefinitionStages.WithCreate {
    }
    /** The SBNamespace definition stages. */
    interface DefinitionStages {
        /** The first stage of the SBNamespace definition. */
        interface Blank extends WithLocation {
        }
        /** The stage of the SBNamespace definition allowing to specify location. */
        interface WithLocation {
            /**
             * Specifies the region for the resource.
             *
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithResourceGroup withRegion(Region location);

            /**
             * Specifies the region for the resource.
             *
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithResourceGroup withRegion(String location);
        }
        /** The stage of the SBNamespace definition allowing to specify parent resource. */
        interface WithResourceGroup {
            /**
             * Specifies resourceGroupName.
             *
             * @param resourceGroupName Name of the Resource group within the Azure subscription.
             * @return the next definition stage.
             */
            WithCreate withExistingResourceGroup(String resourceGroupName);
        }
        /**
         * The stage of the SBNamespace definition which contains all the minimum required properties for the resource
         * to be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate
            extends DefinitionStages.WithTags,
                DefinitionStages.WithSku,
                DefinitionStages.WithTypeIdentityType,
                DefinitionStages.WithUserAssignedIdentities,
                DefinitionStages.WithZoneRedundant,
                DefinitionStages.WithPrivateEndpointConnections,
                DefinitionStages.WithDisableLocalAuth,
                DefinitionStages.WithAlternateName,
                DefinitionStages.WithKeyVaultProperties,
                DefinitionStages.WithKeySource,
                DefinitionStages.WithRequireInfrastructureEncryption {
            /**
             * Executes the create request.
             *
             * @return the created resource.
             */
            SBNamespace create();

            /**
             * Executes the create request.
             *
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            SBNamespace create(Context context);
        }
        /** The stage of the SBNamespace definition allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             *
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            WithCreate withTags(Map<String, String> tags);
        }
        /** The stage of the SBNamespace definition allowing to specify sku. */
        interface WithSku {
            /**
             * Specifies the sku property: Properties of SKU.
             *
             * @param sku Properties of SKU.
             * @return the next definition stage.
             */
            WithCreate withSku(SBSku sku);
        }
        /** The stage of the SBNamespace definition allowing to specify typeIdentityType. */
        interface WithTypeIdentityType {
            /**
             * Specifies the typeIdentityType property: Type of managed service identity..
             *
             * @param typeIdentityType Type of managed service identity.
             * @return the next definition stage.
             */
            WithCreate withTypeIdentityType(ManagedServiceIdentityType typeIdentityType);
        }
        /** The stage of the SBNamespace definition allowing to specify userAssignedIdentities. */
        interface WithUserAssignedIdentities {
            /**
             * Specifies the userAssignedIdentities property: Properties for User Assigned Identities.
             *
             * @param userAssignedIdentities Properties for User Assigned Identities.
             * @return the next definition stage.
             */
            WithCreate withUserAssignedIdentities(Map<String, UserAssignedIdentity> userAssignedIdentities);
        }
        /** The stage of the SBNamespace definition allowing to specify zoneRedundant. */
        interface WithZoneRedundant {
            /**
             * Specifies the zoneRedundant property: Enabling this property creates a Premium Service Bus Namespace in
             * regions supported availability zones..
             *
             * @param zoneRedundant Enabling this property creates a Premium Service Bus Namespace in regions supported
             *     availability zones.
             * @return the next definition stage.
             */
            WithCreate withZoneRedundant(Boolean zoneRedundant);
        }
        /** The stage of the SBNamespace definition allowing to specify privateEndpointConnections. */
        interface WithPrivateEndpointConnections {
            /**
             * Specifies the privateEndpointConnections property: List of private endpoint connections..
             *
             * @param privateEndpointConnections List of private endpoint connections.
             * @return the next definition stage.
             */
            WithCreate withPrivateEndpointConnections(List<PrivateEndpointConnectionInner> privateEndpointConnections);
        }
        /** The stage of the SBNamespace definition allowing to specify disableLocalAuth. */
        interface WithDisableLocalAuth {
            /**
             * Specifies the disableLocalAuth property: This property disables SAS authentication for the Service Bus
             * namespace..
             *
             * @param disableLocalAuth This property disables SAS authentication for the Service Bus namespace.
             * @return the next definition stage.
             */
            WithCreate withDisableLocalAuth(Boolean disableLocalAuth);
        }
        /** The stage of the SBNamespace definition allowing to specify alternateName. */
        interface WithAlternateName {
            /**
             * Specifies the alternateName property: Alternate name for namespace.
             *
             * @param alternateName Alternate name for namespace.
             * @return the next definition stage.
             */
            WithCreate withAlternateName(String alternateName);
        }
        /** The stage of the SBNamespace definition allowing to specify keyVaultProperties. */
        interface WithKeyVaultProperties {
            /**
             * Specifies the keyVaultProperties property: Properties of KeyVault.
             *
             * @param keyVaultProperties Properties of KeyVault.
             * @return the next definition stage.
             */
            WithCreate withKeyVaultProperties(List<KeyVaultProperties> keyVaultProperties);
        }
        /** The stage of the SBNamespace definition allowing to specify keySource. */
        interface WithKeySource {
            /**
             * Specifies the keySource property: Enumerates the possible value of keySource for Encryption.
             *
             * @param keySource Enumerates the possible value of keySource for Encryption.
             * @return the next definition stage.
             */
            WithCreate withKeySource(KeySource keySource);
        }
        /** The stage of the SBNamespace definition allowing to specify requireInfrastructureEncryption. */
        interface WithRequireInfrastructureEncryption {
            /**
             * Specifies the requireInfrastructureEncryption property: Enable Infrastructure Encryption (Double
             * Encryption).
             *
             * @param requireInfrastructureEncryption Enable Infrastructure Encryption (Double Encryption).
             * @return the next definition stage.
             */
            WithCreate withRequireInfrastructureEncryption(Boolean requireInfrastructureEncryption);
        }
    }
    /**
     * Begins update for the SBNamespace resource.
     *
     * @return the stage of resource update.
     */
    SBNamespace.Update update();

    /** The template for SBNamespace update. */
    interface Update
        extends UpdateStages.WithTags,
            UpdateStages.WithSku,
            UpdateStages.WithPrivateEndpointConnections,
            UpdateStages.WithDisableLocalAuth,
            UpdateStages.WithAlternateName,
            UpdateStages.WithKeyVaultProperties,
            UpdateStages.WithKeySource,
            UpdateStages.WithRequireInfrastructureEncryption,
            UpdateStages.WithTypeIdentityType,
            UpdateStages.WithUserAssignedIdentities {
        /**
         * Executes the update request.
         *
         * @return the updated resource.
         */
        SBNamespace apply();

        /**
         * Executes the update request.
         *
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        SBNamespace apply(Context context);
    }
    /** The SBNamespace update stages. */
    interface UpdateStages {
        /** The stage of the SBNamespace update allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags.
             *
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            Update withTags(Map<String, String> tags);
        }
        /** The stage of the SBNamespace update allowing to specify sku. */
        interface WithSku {
            /**
             * Specifies the sku property: Properties of SKU.
             *
             * @param sku Properties of SKU.
             * @return the next definition stage.
             */
            Update withSku(SBSku sku);
        }
        /** The stage of the SBNamespace update allowing to specify privateEndpointConnections. */
        interface WithPrivateEndpointConnections {
            /**
             * Specifies the privateEndpointConnections property: List of private endpoint connections..
             *
             * @param privateEndpointConnections List of private endpoint connections.
             * @return the next definition stage.
             */
            Update withPrivateEndpointConnections(List<PrivateEndpointConnectionInner> privateEndpointConnections);
        }
        /** The stage of the SBNamespace update allowing to specify disableLocalAuth. */
        interface WithDisableLocalAuth {
            /**
             * Specifies the disableLocalAuth property: This property disables SAS authentication for the Service Bus
             * namespace..
             *
             * @param disableLocalAuth This property disables SAS authentication for the Service Bus namespace.
             * @return the next definition stage.
             */
            Update withDisableLocalAuth(Boolean disableLocalAuth);
        }
        /** The stage of the SBNamespace update allowing to specify alternateName. */
        interface WithAlternateName {
            /**
             * Specifies the alternateName property: Alternate name for namespace.
             *
             * @param alternateName Alternate name for namespace.
             * @return the next definition stage.
             */
            Update withAlternateName(String alternateName);
        }
        /** The stage of the SBNamespace update allowing to specify keyVaultProperties. */
        interface WithKeyVaultProperties {
            /**
             * Specifies the keyVaultProperties property: Properties of KeyVault.
             *
             * @param keyVaultProperties Properties of KeyVault.
             * @return the next definition stage.
             */
            Update withKeyVaultProperties(List<KeyVaultProperties> keyVaultProperties);
        }
        /** The stage of the SBNamespace update allowing to specify keySource. */
        interface WithKeySource {
            /**
             * Specifies the keySource property: Enumerates the possible value of keySource for Encryption.
             *
             * @param keySource Enumerates the possible value of keySource for Encryption.
             * @return the next definition stage.
             */
            Update withKeySource(KeySource keySource);
        }
        /** The stage of the SBNamespace update allowing to specify requireInfrastructureEncryption. */
        interface WithRequireInfrastructureEncryption {
            /**
             * Specifies the requireInfrastructureEncryption property: Enable Infrastructure Encryption (Double
             * Encryption).
             *
             * @param requireInfrastructureEncryption Enable Infrastructure Encryption (Double Encryption).
             * @return the next definition stage.
             */
            Update withRequireInfrastructureEncryption(Boolean requireInfrastructureEncryption);
        }
        /** The stage of the SBNamespace update allowing to specify typeIdentityType. */
        interface WithTypeIdentityType {
            /**
             * Specifies the typeIdentityType property: Type of managed service identity..
             *
             * @param typeIdentityType Type of managed service identity.
             * @return the next definition stage.
             */
            Update withTypeIdentityType(ManagedServiceIdentityType typeIdentityType);
        }
        /** The stage of the SBNamespace update allowing to specify userAssignedIdentities. */
        interface WithUserAssignedIdentities {
            /**
             * Specifies the userAssignedIdentities property: Properties for User Assigned Identities.
             *
             * @param userAssignedIdentities Properties for User Assigned Identities.
             * @return the next definition stage.
             */
            Update withUserAssignedIdentities(Map<String, UserAssignedIdentity> userAssignedIdentities);
        }
    }
    /**
     * Refreshes the resource to sync with Azure.
     *
     * @return the refreshed resource.
     */
    SBNamespace refresh();

    /**
     * Refreshes the resource to sync with Azure.
     *
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    SBNamespace refresh(Context context);
}
