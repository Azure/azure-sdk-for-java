// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicebus.generated.implementation;

import com.azure.core.util.Context;
import com.azure.resourcemanager.servicebus.generated.ServiceBusManager;
import com.azure.resourcemanager.servicebus.generated.fluent.models.SBQueueInner;
import com.azure.resourcemanager.servicebus.generated.models.EntityStatus;
import com.azure.resourcemanager.servicebus.generated.models.MessageCountDetails;
import com.azure.resourcemanager.servicebus.generated.models.SBQueue;
import java.time.Duration;
import java.time.OffsetDateTime;

public final class SBQueueImpl implements SBQueue, SBQueue.Definition, SBQueue.Update {
    private SBQueueInner innerObject;

    private final ServiceBusManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public MessageCountDetails countDetails() {
        return this.innerModel().countDetails();
    }

    public OffsetDateTime createdAt() {
        return this.innerModel().createdAt();
    }

    public OffsetDateTime updatedAt() {
        return this.innerModel().updatedAt();
    }

    public OffsetDateTime accessedAt() {
        return this.innerModel().accessedAt();
    }

    public Long sizeInBytes() {
        return this.innerModel().sizeInBytes();
    }

    public Long messageCount() {
        return this.innerModel().messageCount();
    }

    public Duration lockDuration() {
        return this.innerModel().lockDuration();
    }

    public Integer maxSizeInMegabytes() {
        return this.innerModel().maxSizeInMegabytes();
    }

    public Boolean requiresDuplicateDetection() {
        return this.innerModel().requiresDuplicateDetection();
    }

    public Boolean requiresSession() {
        return this.innerModel().requiresSession();
    }

    public Duration defaultMessageTimeToLive() {
        return this.innerModel().defaultMessageTimeToLive();
    }

    public Boolean deadLetteringOnMessageExpiration() {
        return this.innerModel().deadLetteringOnMessageExpiration();
    }

    public Duration duplicateDetectionHistoryTimeWindow() {
        return this.innerModel().duplicateDetectionHistoryTimeWindow();
    }

    public Integer maxDeliveryCount() {
        return this.innerModel().maxDeliveryCount();
    }

    public EntityStatus status() {
        return this.innerModel().status();
    }

    public Boolean enableBatchedOperations() {
        return this.innerModel().enableBatchedOperations();
    }

    public Duration autoDeleteOnIdle() {
        return this.innerModel().autoDeleteOnIdle();
    }

    public Boolean enablePartitioning() {
        return this.innerModel().enablePartitioning();
    }

    public Boolean enableExpress() {
        return this.innerModel().enableExpress();
    }

    public String forwardTo() {
        return this.innerModel().forwardTo();
    }

    public String forwardDeadLetteredMessagesTo() {
        return this.innerModel().forwardDeadLetteredMessagesTo();
    }

    public SBQueueInner innerModel() {
        return this.innerObject;
    }

    private ServiceBusManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String namespaceName;

    private String queueName;

    public SBQueueImpl withExistingNamespace(String resourceGroupName, String namespaceName) {
        this.resourceGroupName = resourceGroupName;
        this.namespaceName = namespaceName;
        return this;
    }

    public SBQueue create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getQueues()
                .createOrUpdateWithResponse(
                    resourceGroupName, namespaceName, queueName, this.innerModel(), Context.NONE)
                .getValue();
        return this;
    }

    public SBQueue create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getQueues()
                .createOrUpdateWithResponse(resourceGroupName, namespaceName, queueName, this.innerModel(), context)
                .getValue();
        return this;
    }

    public SBQueueImpl(String name, ServiceBusManager serviceManager) {
        this.innerObject = new SBQueueInner();
        this.serviceManager = serviceManager;
        this.queueName = name;
    }

    public SBQueueImpl update() {
        return this;
    }

    public SBQueue apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getQueues()
                .createOrUpdateWithResponse(
                    resourceGroupName, namespaceName, queueName, this.innerModel(), Context.NONE)
                .getValue();
        return this;
    }

    public SBQueue apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getQueues()
                .createOrUpdateWithResponse(resourceGroupName, namespaceName, queueName, this.innerModel(), context)
                .getValue();
        return this;
    }

    public SBQueueImpl(SBQueueInner innerObject, ServiceBusManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.namespaceName = Utils.getValueFromIdByName(innerObject.id(), "namespaces");
        this.queueName = Utils.getValueFromIdByName(innerObject.id(), "queues");
    }

    public SBQueue refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getQueues()
                .getWithResponse(resourceGroupName, namespaceName, queueName, Context.NONE)
                .getValue();
        return this;
    }

    public SBQueue refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getQueues()
                .getWithResponse(resourceGroupName, namespaceName, queueName, context)
                .getValue();
        return this;
    }

    public SBQueueImpl withLockDuration(Duration lockDuration) {
        this.innerModel().withLockDuration(lockDuration);
        return this;
    }

    public SBQueueImpl withMaxSizeInMegabytes(Integer maxSizeInMegabytes) {
        this.innerModel().withMaxSizeInMegabytes(maxSizeInMegabytes);
        return this;
    }

    public SBQueueImpl withRequiresDuplicateDetection(Boolean requiresDuplicateDetection) {
        this.innerModel().withRequiresDuplicateDetection(requiresDuplicateDetection);
        return this;
    }

    public SBQueueImpl withRequiresSession(Boolean requiresSession) {
        this.innerModel().withRequiresSession(requiresSession);
        return this;
    }

    public SBQueueImpl withDefaultMessageTimeToLive(Duration defaultMessageTimeToLive) {
        this.innerModel().withDefaultMessageTimeToLive(defaultMessageTimeToLive);
        return this;
    }

    public SBQueueImpl withDeadLetteringOnMessageExpiration(Boolean deadLetteringOnMessageExpiration) {
        this.innerModel().withDeadLetteringOnMessageExpiration(deadLetteringOnMessageExpiration);
        return this;
    }

    public SBQueueImpl withDuplicateDetectionHistoryTimeWindow(Duration duplicateDetectionHistoryTimeWindow) {
        this.innerModel().withDuplicateDetectionHistoryTimeWindow(duplicateDetectionHistoryTimeWindow);
        return this;
    }

    public SBQueueImpl withMaxDeliveryCount(Integer maxDeliveryCount) {
        this.innerModel().withMaxDeliveryCount(maxDeliveryCount);
        return this;
    }

    public SBQueueImpl withStatus(EntityStatus status) {
        this.innerModel().withStatus(status);
        return this;
    }

    public SBQueueImpl withEnableBatchedOperations(Boolean enableBatchedOperations) {
        this.innerModel().withEnableBatchedOperations(enableBatchedOperations);
        return this;
    }

    public SBQueueImpl withAutoDeleteOnIdle(Duration autoDeleteOnIdle) {
        this.innerModel().withAutoDeleteOnIdle(autoDeleteOnIdle);
        return this;
    }

    public SBQueueImpl withEnablePartitioning(Boolean enablePartitioning) {
        this.innerModel().withEnablePartitioning(enablePartitioning);
        return this;
    }

    public SBQueueImpl withEnableExpress(Boolean enableExpress) {
        this.innerModel().withEnableExpress(enableExpress);
        return this;
    }

    public SBQueueImpl withForwardTo(String forwardTo) {
        this.innerModel().withForwardTo(forwardTo);
        return this;
    }

    public SBQueueImpl withForwardDeadLetteredMessagesTo(String forwardDeadLetteredMessagesTo) {
        this.innerModel().withForwardDeadLetteredMessagesTo(forwardDeadLetteredMessagesTo);
        return this;
    }
}
