// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicebus.generated.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.management.Region;
import com.azure.core.util.Context;
import com.azure.resourcemanager.servicebus.generated.fluent.models.SBNamespaceInner;
import com.azure.resourcemanager.servicebus.generated.models.Encryption;
import com.azure.resourcemanager.servicebus.generated.models.Identity;
import com.azure.resourcemanager.servicebus.generated.models.SBNamespace;
import com.azure.resourcemanager.servicebus.generated.models.SBNamespaceMigrate;
import com.azure.resourcemanager.servicebus.generated.models.SBNamespaceUpdateParameters;
import com.azure.resourcemanager.servicebus.generated.models.SBSku;
import java.time.OffsetDateTime;
import java.util.Collections;
import java.util.Map;

public final class SBNamespaceImpl implements SBNamespace, SBNamespace.Definition, SBNamespace.Update {
    private SBNamespaceInner innerObject;

    private final com.azure.resourcemanager.servicebus.generated.ServiceBusManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public SBSku sku() {
        return this.innerModel().sku();
    }

    public Identity identity() {
        return this.innerModel().identity();
    }

    public String provisioningState() {
        return this.innerModel().provisioningState();
    }

    public String status() {
        return this.innerModel().status();
    }

    public OffsetDateTime createdAt() {
        return this.innerModel().createdAt();
    }

    public OffsetDateTime updatedAt() {
        return this.innerModel().updatedAt();
    }

    public String serviceBusEndpoint() {
        return this.innerModel().serviceBusEndpoint();
    }

    public String metricId() {
        return this.innerModel().metricId();
    }

    public Boolean zoneRedundant() {
        return this.innerModel().zoneRedundant();
    }

    public Encryption encryption() {
        return this.innerModel().encryption();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public SBNamespaceInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.servicebus.generated.ServiceBusManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String namespaceName;

    private SBNamespaceUpdateParameters updateParameters;

    public SBNamespaceImpl withExistingResourceGroup(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public SBNamespace create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getNamespaces()
                .createOrUpdate(resourceGroupName, namespaceName, this.innerModel(), Context.NONE);
        return this;
    }

    public SBNamespace create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getNamespaces()
                .createOrUpdate(resourceGroupName, namespaceName, this.innerModel(), context);
        return this;
    }

    SBNamespaceImpl(String name, com.azure.resourcemanager.servicebus.generated.ServiceBusManager serviceManager) {
        this.innerObject = new SBNamespaceInner();
        this.serviceManager = serviceManager;
        this.namespaceName = name;
    }

    public SBNamespaceImpl update() {
        this.updateParameters = new SBNamespaceUpdateParameters();
        return this;
    }

    public SBNamespace apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getNamespaces()
                .updateWithResponse(resourceGroupName, namespaceName, updateParameters, Context.NONE)
                .getValue();
        return this;
    }

    public SBNamespace apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getNamespaces()
                .updateWithResponse(resourceGroupName, namespaceName, updateParameters, context)
                .getValue();
        return this;
    }

    SBNamespaceImpl(
        SBNamespaceInner innerObject, com.azure.resourcemanager.servicebus.generated.ServiceBusManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.namespaceName = Utils.getValueFromIdByName(innerObject.id(), "namespaces");
    }

    public SBNamespace refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getNamespaces()
                .getByResourceGroupWithResponse(resourceGroupName, namespaceName, Context.NONE)
                .getValue();
        return this;
    }

    public SBNamespace refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getNamespaces()
                .getByResourceGroupWithResponse(resourceGroupName, namespaceName, context)
                .getValue();
        return this;
    }

    public void migrate(SBNamespaceMigrate parameters) {
        serviceManager.namespaces().migrate(resourceGroupName, namespaceName, parameters);
    }

    public Response<Void> migrateWithResponse(SBNamespaceMigrate parameters, Context context) {
        return serviceManager.namespaces().migrateWithResponse(resourceGroupName, namespaceName, parameters, context);
    }

    public SBNamespaceImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public SBNamespaceImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public SBNamespaceImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateParameters.withTags(tags);
            return this;
        }
    }

    public SBNamespaceImpl withSku(SBSku sku) {
        if (isInCreateMode()) {
            this.innerModel().withSku(sku);
            return this;
        } else {
            this.updateParameters.withSku(sku);
            return this;
        }
    }

    public SBNamespaceImpl withIdentity(Identity identity) {
        if (isInCreateMode()) {
            this.innerModel().withIdentity(identity);
            return this;
        } else {
            this.updateParameters.withIdentity(identity);
            return this;
        }
    }

    public SBNamespaceImpl withZoneRedundant(Boolean zoneRedundant) {
        if (isInCreateMode()) {
            this.innerModel().withZoneRedundant(zoneRedundant);
            return this;
        } else {
            this.updateParameters.withZoneRedundant(zoneRedundant);
            return this;
        }
    }

    public SBNamespaceImpl withEncryption(Encryption encryption) {
        if (isInCreateMode()) {
            this.innerModel().withEncryption(encryption);
            return this;
        } else {
            this.updateParameters.withEncryption(encryption);
            return this;
        }
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
