// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicebus.generated.implementation;

import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.servicebus.generated.fluent.models.PrivateEndpointConnectionInner;
import com.azure.resourcemanager.servicebus.generated.fluent.models.SBNamespaceInner;
import com.azure.resourcemanager.servicebus.generated.models.KeySource;
import com.azure.resourcemanager.servicebus.generated.models.KeyVaultProperties;
import com.azure.resourcemanager.servicebus.generated.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.servicebus.generated.models.PrivateEndpointConnection;
import com.azure.resourcemanager.servicebus.generated.models.SBNamespace;
import com.azure.resourcemanager.servicebus.generated.models.SBNamespaceUpdateParameters;
import com.azure.resourcemanager.servicebus.generated.models.SBSku;
import com.azure.resourcemanager.servicebus.generated.models.UserAssignedIdentity;
import java.time.OffsetDateTime;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

public final class SBNamespaceImpl implements SBNamespace, SBNamespace.Definition, SBNamespace.Update {
    private SBNamespaceInner innerObject;

    private final com.azure.resourcemanager.servicebus.generated.ServiceBusManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public SBSku sku() {
        return this.innerModel().sku();
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public String principalId() {
        return this.innerModel().principalId();
    }

    public String tenantId() {
        return this.innerModel().tenantId();
    }

    public ManagedServiceIdentityType typeIdentityType() {
        return this.innerModel().typeIdentityType();
    }

    public Map<String, UserAssignedIdentity> userAssignedIdentities() {
        Map<String, UserAssignedIdentity> inner = this.innerModel().userAssignedIdentities();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public String provisioningState() {
        return this.innerModel().provisioningState();
    }

    public String status() {
        return this.innerModel().status();
    }

    public OffsetDateTime createdAt() {
        return this.innerModel().createdAt();
    }

    public OffsetDateTime updatedAt() {
        return this.innerModel().updatedAt();
    }

    public String serviceBusEndpoint() {
        return this.innerModel().serviceBusEndpoint();
    }

    public String metricId() {
        return this.innerModel().metricId();
    }

    public Boolean zoneRedundant() {
        return this.innerModel().zoneRedundant();
    }

    public List<PrivateEndpointConnection> privateEndpointConnections() {
        List<PrivateEndpointConnectionInner> inner = this.innerModel().privateEndpointConnections();
        if (inner != null) {
            return Collections
                .unmodifiableList(
                    inner
                        .stream()
                        .map(inner1 -> new PrivateEndpointConnectionImpl(inner1, this.manager()))
                        .collect(Collectors.toList()));
        } else {
            return Collections.emptyList();
        }
    }

    public Boolean disableLocalAuth() {
        return this.innerModel().disableLocalAuth();
    }

    public String alternateName() {
        return this.innerModel().alternateName();
    }

    public List<KeyVaultProperties> keyVaultProperties() {
        List<KeyVaultProperties> inner = this.innerModel().keyVaultProperties();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public KeySource keySource() {
        return this.innerModel().keySource();
    }

    public Boolean requireInfrastructureEncryption() {
        return this.innerModel().requireInfrastructureEncryption();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public SBNamespaceInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.servicebus.generated.ServiceBusManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String namespaceName;

    private SBNamespaceUpdateParameters updateParameters;

    public SBNamespaceImpl withExistingResourceGroup(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public SBNamespace create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getNamespaces()
                .createOrUpdate(resourceGroupName, namespaceName, this.innerModel(), Context.NONE);
        return this;
    }

    public SBNamespace create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getNamespaces()
                .createOrUpdate(resourceGroupName, namespaceName, this.innerModel(), context);
        return this;
    }

    SBNamespaceImpl(String name, com.azure.resourcemanager.servicebus.generated.ServiceBusManager serviceManager) {
        this.innerObject = new SBNamespaceInner();
        this.serviceManager = serviceManager;
        this.namespaceName = name;
    }

    public SBNamespaceImpl update() {
        this.updateParameters = new SBNamespaceUpdateParameters();
        return this;
    }

    public SBNamespace apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getNamespaces()
                .updateWithResponse(resourceGroupName, namespaceName, updateParameters, Context.NONE)
                .getValue();
        return this;
    }

    public SBNamespace apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getNamespaces()
                .updateWithResponse(resourceGroupName, namespaceName, updateParameters, context)
                .getValue();
        return this;
    }

    SBNamespaceImpl(
        SBNamespaceInner innerObject, com.azure.resourcemanager.servicebus.generated.ServiceBusManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.namespaceName = Utils.getValueFromIdByName(innerObject.id(), "namespaces");
    }

    public SBNamespace refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getNamespaces()
                .getByResourceGroupWithResponse(resourceGroupName, namespaceName, Context.NONE)
                .getValue();
        return this;
    }

    public SBNamespace refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getNamespaces()
                .getByResourceGroupWithResponse(resourceGroupName, namespaceName, context)
                .getValue();
        return this;
    }

    public SBNamespaceImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public SBNamespaceImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public SBNamespaceImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateParameters.withTags(tags);
            return this;
        }
    }

    public SBNamespaceImpl withSku(SBSku sku) {
        if (isInCreateMode()) {
            this.innerModel().withSku(sku);
            return this;
        } else {
            this.updateParameters.withSku(sku);
            return this;
        }
    }

    public SBNamespaceImpl withTypeIdentityType(ManagedServiceIdentityType typeIdentityType) {
        if (isInCreateMode()) {
            this.innerModel().withTypeIdentityType(typeIdentityType);
            return this;
        } else {
            this.updateParameters.withTypeIdentityType(typeIdentityType);
            return this;
        }
    }

    public SBNamespaceImpl withUserAssignedIdentities(Map<String, UserAssignedIdentity> userAssignedIdentities) {
        if (isInCreateMode()) {
            this.innerModel().withUserAssignedIdentities(userAssignedIdentities);
            return this;
        } else {
            this.updateParameters.withUserAssignedIdentities(userAssignedIdentities);
            return this;
        }
    }

    public SBNamespaceImpl withZoneRedundant(Boolean zoneRedundant) {
        this.innerModel().withZoneRedundant(zoneRedundant);
        return this;
    }

    public SBNamespaceImpl withPrivateEndpointConnections(
        List<PrivateEndpointConnectionInner> privateEndpointConnections) {
        if (isInCreateMode()) {
            this.innerModel().withPrivateEndpointConnections(privateEndpointConnections);
            return this;
        } else {
            this.updateParameters.withPrivateEndpointConnections(privateEndpointConnections);
            return this;
        }
    }

    public SBNamespaceImpl withDisableLocalAuth(Boolean disableLocalAuth) {
        if (isInCreateMode()) {
            this.innerModel().withDisableLocalAuth(disableLocalAuth);
            return this;
        } else {
            this.updateParameters.withDisableLocalAuth(disableLocalAuth);
            return this;
        }
    }

    public SBNamespaceImpl withAlternateName(String alternateName) {
        if (isInCreateMode()) {
            this.innerModel().withAlternateName(alternateName);
            return this;
        } else {
            this.updateParameters.withAlternateName(alternateName);
            return this;
        }
    }

    public SBNamespaceImpl withKeyVaultProperties(List<KeyVaultProperties> keyVaultProperties) {
        if (isInCreateMode()) {
            this.innerModel().withKeyVaultProperties(keyVaultProperties);
            return this;
        } else {
            this.updateParameters.withKeyVaultProperties(keyVaultProperties);
            return this;
        }
    }

    public SBNamespaceImpl withKeySource(KeySource keySource) {
        if (isInCreateMode()) {
            this.innerModel().withKeySource(keySource);
            return this;
        } else {
            this.updateParameters.withKeySource(keySource);
            return this;
        }
    }

    public SBNamespaceImpl withRequireInfrastructureEncryption(Boolean requireInfrastructureEncryption) {
        if (isInCreateMode()) {
            this.innerModel().withRequireInfrastructureEncryption(requireInfrastructureEncryption);
            return this;
        } else {
            this.updateParameters.withRequireInfrastructureEncryption(requireInfrastructureEncryption);
            return this;
        }
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
