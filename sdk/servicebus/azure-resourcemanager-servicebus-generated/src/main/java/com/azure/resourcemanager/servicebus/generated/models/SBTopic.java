// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicebus.generated.models;

import com.azure.core.util.Context;
import com.azure.resourcemanager.servicebus.generated.fluent.models.SBTopicInner;
import java.time.Duration;
import java.time.OffsetDateTime;

/** An immutable client-side representation of SBTopic. */
public interface SBTopic {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     *
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     *
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     *
     * @return the type value.
     */
    String type();

    /**
     * Gets the sizeInBytes property: Size of the topic, in bytes.
     *
     * @return the sizeInBytes value.
     */
    Long sizeInBytes();

    /**
     * Gets the createdAt property: Exact time the message was created.
     *
     * @return the createdAt value.
     */
    OffsetDateTime createdAt();

    /**
     * Gets the updatedAt property: The exact time the message was updated.
     *
     * @return the updatedAt value.
     */
    OffsetDateTime updatedAt();

    /**
     * Gets the accessedAt property: Last time the message was sent, or a request was received, for this topic.
     *
     * @return the accessedAt value.
     */
    OffsetDateTime accessedAt();

    /**
     * Gets the subscriptionCount property: Number of subscriptions.
     *
     * @return the subscriptionCount value.
     */
    Integer subscriptionCount();

    /**
     * Gets the countDetails property: Message count details.
     *
     * @return the countDetails value.
     */
    MessageCountDetails countDetails();

    /**
     * Gets the defaultMessageTimeToLive property: ISO 8601 Default message timespan to live value. This is the duration
     * after which the message expires, starting from when the message is sent to Service Bus. This is the default value
     * used when TimeToLive is not set on a message itself.
     *
     * @return the defaultMessageTimeToLive value.
     */
    Duration defaultMessageTimeToLive();

    /**
     * Gets the maxSizeInMegabytes property: Maximum size of the topic in megabytes, which is the size of the memory
     * allocated for the topic. Default is 1024.
     *
     * @return the maxSizeInMegabytes value.
     */
    Integer maxSizeInMegabytes();

    /**
     * Gets the requiresDuplicateDetection property: Value indicating if this topic requires duplicate detection.
     *
     * @return the requiresDuplicateDetection value.
     */
    Boolean requiresDuplicateDetection();

    /**
     * Gets the duplicateDetectionHistoryTimeWindow property: ISO8601 timespan structure that defines the duration of
     * the duplicate detection history. The default value is 10 minutes.
     *
     * @return the duplicateDetectionHistoryTimeWindow value.
     */
    Duration duplicateDetectionHistoryTimeWindow();

    /**
     * Gets the enableBatchedOperations property: Value that indicates whether server-side batched operations are
     * enabled.
     *
     * @return the enableBatchedOperations value.
     */
    Boolean enableBatchedOperations();

    /**
     * Gets the status property: Enumerates the possible values for the status of a messaging entity.
     *
     * @return the status value.
     */
    EntityStatus status();

    /**
     * Gets the supportOrdering property: Value that indicates whether the topic supports ordering.
     *
     * @return the supportOrdering value.
     */
    Boolean supportOrdering();

    /**
     * Gets the autoDeleteOnIdle property: ISO 8601 timespan idle interval after which the topic is automatically
     * deleted. The minimum duration is 5 minutes.
     *
     * @return the autoDeleteOnIdle value.
     */
    Duration autoDeleteOnIdle();

    /**
     * Gets the enablePartitioning property: Value that indicates whether the topic to be partitioned across multiple
     * message brokers is enabled.
     *
     * @return the enablePartitioning value.
     */
    Boolean enablePartitioning();

    /**
     * Gets the enableExpress property: Value that indicates whether Express Entities are enabled. An express topic
     * holds a message in memory temporarily before writing it to persistent storage.
     *
     * @return the enableExpress value.
     */
    Boolean enableExpress();

    /**
     * Gets the inner com.azure.resourcemanager.servicebus.generated.fluent.models.SBTopicInner object.
     *
     * @return the inner object.
     */
    SBTopicInner innerModel();

    /** The entirety of the SBTopic definition. */
    interface Definition
        extends DefinitionStages.Blank, DefinitionStages.WithParentResource, DefinitionStages.WithCreate {
    }
    /** The SBTopic definition stages. */
    interface DefinitionStages {
        /** The first stage of the SBTopic definition. */
        interface Blank extends WithParentResource {
        }
        /** The stage of the SBTopic definition allowing to specify parent resource. */
        interface WithParentResource {
            /**
             * Specifies resourceGroupName, namespaceName.
             *
             * @param resourceGroupName Name of the Resource group within the Azure subscription.
             * @param namespaceName The namespace name.
             * @return the next definition stage.
             */
            WithCreate withExistingNamespace(String resourceGroupName, String namespaceName);
        }
        /**
         * The stage of the SBTopic definition which contains all the minimum required properties for the resource to be
         * created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate
            extends DefinitionStages.WithDefaultMessageTimeToLive,
                DefinitionStages.WithMaxSizeInMegabytes,
                DefinitionStages.WithRequiresDuplicateDetection,
                DefinitionStages.WithDuplicateDetectionHistoryTimeWindow,
                DefinitionStages.WithEnableBatchedOperations,
                DefinitionStages.WithStatus,
                DefinitionStages.WithSupportOrdering,
                DefinitionStages.WithAutoDeleteOnIdle,
                DefinitionStages.WithEnablePartitioning,
                DefinitionStages.WithEnableExpress {
            /**
             * Executes the create request.
             *
             * @return the created resource.
             */
            SBTopic create();

            /**
             * Executes the create request.
             *
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            SBTopic create(Context context);
        }
        /** The stage of the SBTopic definition allowing to specify defaultMessageTimeToLive. */
        interface WithDefaultMessageTimeToLive {
            /**
             * Specifies the defaultMessageTimeToLive property: ISO 8601 Default message timespan to live value. This is
             * the duration after which the message expires, starting from when the message is sent to Service Bus. This
             * is the default value used when TimeToLive is not set on a message itself..
             *
             * @param defaultMessageTimeToLive ISO 8601 Default message timespan to live value. This is the duration
             *     after which the message expires, starting from when the message is sent to Service Bus. This is the
             *     default value used when TimeToLive is not set on a message itself.
             * @return the next definition stage.
             */
            WithCreate withDefaultMessageTimeToLive(Duration defaultMessageTimeToLive);
        }
        /** The stage of the SBTopic definition allowing to specify maxSizeInMegabytes. */
        interface WithMaxSizeInMegabytes {
            /**
             * Specifies the maxSizeInMegabytes property: Maximum size of the topic in megabytes, which is the size of
             * the memory allocated for the topic. Default is 1024..
             *
             * @param maxSizeInMegabytes Maximum size of the topic in megabytes, which is the size of the memory
             *     allocated for the topic. Default is 1024.
             * @return the next definition stage.
             */
            WithCreate withMaxSizeInMegabytes(Integer maxSizeInMegabytes);
        }
        /** The stage of the SBTopic definition allowing to specify requiresDuplicateDetection. */
        interface WithRequiresDuplicateDetection {
            /**
             * Specifies the requiresDuplicateDetection property: Value indicating if this topic requires duplicate
             * detection..
             *
             * @param requiresDuplicateDetection Value indicating if this topic requires duplicate detection.
             * @return the next definition stage.
             */
            WithCreate withRequiresDuplicateDetection(Boolean requiresDuplicateDetection);
        }
        /** The stage of the SBTopic definition allowing to specify duplicateDetectionHistoryTimeWindow. */
        interface WithDuplicateDetectionHistoryTimeWindow {
            /**
             * Specifies the duplicateDetectionHistoryTimeWindow property: ISO8601 timespan structure that defines the
             * duration of the duplicate detection history. The default value is 10 minutes..
             *
             * @param duplicateDetectionHistoryTimeWindow ISO8601 timespan structure that defines the duration of the
             *     duplicate detection history. The default value is 10 minutes.
             * @return the next definition stage.
             */
            WithCreate withDuplicateDetectionHistoryTimeWindow(Duration duplicateDetectionHistoryTimeWindow);
        }
        /** The stage of the SBTopic definition allowing to specify enableBatchedOperations. */
        interface WithEnableBatchedOperations {
            /**
             * Specifies the enableBatchedOperations property: Value that indicates whether server-side batched
             * operations are enabled..
             *
             * @param enableBatchedOperations Value that indicates whether server-side batched operations are enabled.
             * @return the next definition stage.
             */
            WithCreate withEnableBatchedOperations(Boolean enableBatchedOperations);
        }
        /** The stage of the SBTopic definition allowing to specify status. */
        interface WithStatus {
            /**
             * Specifies the status property: Enumerates the possible values for the status of a messaging entity..
             *
             * @param status Enumerates the possible values for the status of a messaging entity.
             * @return the next definition stage.
             */
            WithCreate withStatus(EntityStatus status);
        }
        /** The stage of the SBTopic definition allowing to specify supportOrdering. */
        interface WithSupportOrdering {
            /**
             * Specifies the supportOrdering property: Value that indicates whether the topic supports ordering..
             *
             * @param supportOrdering Value that indicates whether the topic supports ordering.
             * @return the next definition stage.
             */
            WithCreate withSupportOrdering(Boolean supportOrdering);
        }
        /** The stage of the SBTopic definition allowing to specify autoDeleteOnIdle. */
        interface WithAutoDeleteOnIdle {
            /**
             * Specifies the autoDeleteOnIdle property: ISO 8601 timespan idle interval after which the topic is
             * automatically deleted. The minimum duration is 5 minutes..
             *
             * @param autoDeleteOnIdle ISO 8601 timespan idle interval after which the topic is automatically deleted.
             *     The minimum duration is 5 minutes.
             * @return the next definition stage.
             */
            WithCreate withAutoDeleteOnIdle(Duration autoDeleteOnIdle);
        }
        /** The stage of the SBTopic definition allowing to specify enablePartitioning. */
        interface WithEnablePartitioning {
            /**
             * Specifies the enablePartitioning property: Value that indicates whether the topic to be partitioned
             * across multiple message brokers is enabled..
             *
             * @param enablePartitioning Value that indicates whether the topic to be partitioned across multiple
             *     message brokers is enabled.
             * @return the next definition stage.
             */
            WithCreate withEnablePartitioning(Boolean enablePartitioning);
        }
        /** The stage of the SBTopic definition allowing to specify enableExpress. */
        interface WithEnableExpress {
            /**
             * Specifies the enableExpress property: Value that indicates whether Express Entities are enabled. An
             * express topic holds a message in memory temporarily before writing it to persistent storage..
             *
             * @param enableExpress Value that indicates whether Express Entities are enabled. An express topic holds a
             *     message in memory temporarily before writing it to persistent storage.
             * @return the next definition stage.
             */
            WithCreate withEnableExpress(Boolean enableExpress);
        }
    }
    /**
     * Begins update for the SBTopic resource.
     *
     * @return the stage of resource update.
     */
    SBTopic.Update update();

    /** The template for SBTopic update. */
    interface Update
        extends UpdateStages.WithDefaultMessageTimeToLive,
            UpdateStages.WithMaxSizeInMegabytes,
            UpdateStages.WithRequiresDuplicateDetection,
            UpdateStages.WithDuplicateDetectionHistoryTimeWindow,
            UpdateStages.WithEnableBatchedOperations,
            UpdateStages.WithStatus,
            UpdateStages.WithSupportOrdering,
            UpdateStages.WithAutoDeleteOnIdle,
            UpdateStages.WithEnablePartitioning,
            UpdateStages.WithEnableExpress {
        /**
         * Executes the update request.
         *
         * @return the updated resource.
         */
        SBTopic apply();

        /**
         * Executes the update request.
         *
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        SBTopic apply(Context context);
    }
    /** The SBTopic update stages. */
    interface UpdateStages {
        /** The stage of the SBTopic update allowing to specify defaultMessageTimeToLive. */
        interface WithDefaultMessageTimeToLive {
            /**
             * Specifies the defaultMessageTimeToLive property: ISO 8601 Default message timespan to live value. This is
             * the duration after which the message expires, starting from when the message is sent to Service Bus. This
             * is the default value used when TimeToLive is not set on a message itself..
             *
             * @param defaultMessageTimeToLive ISO 8601 Default message timespan to live value. This is the duration
             *     after which the message expires, starting from when the message is sent to Service Bus. This is the
             *     default value used when TimeToLive is not set on a message itself.
             * @return the next definition stage.
             */
            Update withDefaultMessageTimeToLive(Duration defaultMessageTimeToLive);
        }
        /** The stage of the SBTopic update allowing to specify maxSizeInMegabytes. */
        interface WithMaxSizeInMegabytes {
            /**
             * Specifies the maxSizeInMegabytes property: Maximum size of the topic in megabytes, which is the size of
             * the memory allocated for the topic. Default is 1024..
             *
             * @param maxSizeInMegabytes Maximum size of the topic in megabytes, which is the size of the memory
             *     allocated for the topic. Default is 1024.
             * @return the next definition stage.
             */
            Update withMaxSizeInMegabytes(Integer maxSizeInMegabytes);
        }
        /** The stage of the SBTopic update allowing to specify requiresDuplicateDetection. */
        interface WithRequiresDuplicateDetection {
            /**
             * Specifies the requiresDuplicateDetection property: Value indicating if this topic requires duplicate
             * detection..
             *
             * @param requiresDuplicateDetection Value indicating if this topic requires duplicate detection.
             * @return the next definition stage.
             */
            Update withRequiresDuplicateDetection(Boolean requiresDuplicateDetection);
        }
        /** The stage of the SBTopic update allowing to specify duplicateDetectionHistoryTimeWindow. */
        interface WithDuplicateDetectionHistoryTimeWindow {
            /**
             * Specifies the duplicateDetectionHistoryTimeWindow property: ISO8601 timespan structure that defines the
             * duration of the duplicate detection history. The default value is 10 minutes..
             *
             * @param duplicateDetectionHistoryTimeWindow ISO8601 timespan structure that defines the duration of the
             *     duplicate detection history. The default value is 10 minutes.
             * @return the next definition stage.
             */
            Update withDuplicateDetectionHistoryTimeWindow(Duration duplicateDetectionHistoryTimeWindow);
        }
        /** The stage of the SBTopic update allowing to specify enableBatchedOperations. */
        interface WithEnableBatchedOperations {
            /**
             * Specifies the enableBatchedOperations property: Value that indicates whether server-side batched
             * operations are enabled..
             *
             * @param enableBatchedOperations Value that indicates whether server-side batched operations are enabled.
             * @return the next definition stage.
             */
            Update withEnableBatchedOperations(Boolean enableBatchedOperations);
        }
        /** The stage of the SBTopic update allowing to specify status. */
        interface WithStatus {
            /**
             * Specifies the status property: Enumerates the possible values for the status of a messaging entity..
             *
             * @param status Enumerates the possible values for the status of a messaging entity.
             * @return the next definition stage.
             */
            Update withStatus(EntityStatus status);
        }
        /** The stage of the SBTopic update allowing to specify supportOrdering. */
        interface WithSupportOrdering {
            /**
             * Specifies the supportOrdering property: Value that indicates whether the topic supports ordering..
             *
             * @param supportOrdering Value that indicates whether the topic supports ordering.
             * @return the next definition stage.
             */
            Update withSupportOrdering(Boolean supportOrdering);
        }
        /** The stage of the SBTopic update allowing to specify autoDeleteOnIdle. */
        interface WithAutoDeleteOnIdle {
            /**
             * Specifies the autoDeleteOnIdle property: ISO 8601 timespan idle interval after which the topic is
             * automatically deleted. The minimum duration is 5 minutes..
             *
             * @param autoDeleteOnIdle ISO 8601 timespan idle interval after which the topic is automatically deleted.
             *     The minimum duration is 5 minutes.
             * @return the next definition stage.
             */
            Update withAutoDeleteOnIdle(Duration autoDeleteOnIdle);
        }
        /** The stage of the SBTopic update allowing to specify enablePartitioning. */
        interface WithEnablePartitioning {
            /**
             * Specifies the enablePartitioning property: Value that indicates whether the topic to be partitioned
             * across multiple message brokers is enabled..
             *
             * @param enablePartitioning Value that indicates whether the topic to be partitioned across multiple
             *     message brokers is enabled.
             * @return the next definition stage.
             */
            Update withEnablePartitioning(Boolean enablePartitioning);
        }
        /** The stage of the SBTopic update allowing to specify enableExpress. */
        interface WithEnableExpress {
            /**
             * Specifies the enableExpress property: Value that indicates whether Express Entities are enabled. An
             * express topic holds a message in memory temporarily before writing it to persistent storage..
             *
             * @param enableExpress Value that indicates whether Express Entities are enabled. An express topic holds a
             *     message in memory temporarily before writing it to persistent storage.
             * @return the next definition stage.
             */
            Update withEnableExpress(Boolean enableExpress);
        }
    }
    /**
     * Refreshes the resource to sync with Azure.
     *
     * @return the refreshed resource.
     */
    SBTopic refresh();

    /**
     * Refreshes the resource to sync with Azure.
     *
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    SBTopic refresh(Context context);
}
