// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicebus.generated.models;

import com.azure.core.util.Context;
import com.azure.resourcemanager.servicebus.generated.fluent.models.SBQueueInner;
import java.time.Duration;
import java.time.OffsetDateTime;

/** An immutable client-side representation of SBQueue. */
public interface SBQueue {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     *
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     *
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     *
     * @return the type value.
     */
    String type();

    /**
     * Gets the countDetails property: Message Count Details.
     *
     * @return the countDetails value.
     */
    MessageCountDetails countDetails();

    /**
     * Gets the createdAt property: The exact time the message was created.
     *
     * @return the createdAt value.
     */
    OffsetDateTime createdAt();

    /**
     * Gets the updatedAt property: The exact time the message was updated.
     *
     * @return the updatedAt value.
     */
    OffsetDateTime updatedAt();

    /**
     * Gets the accessedAt property: Last time a message was sent, or the last time there was a receive request to this
     * queue.
     *
     * @return the accessedAt value.
     */
    OffsetDateTime accessedAt();

    /**
     * Gets the sizeInBytes property: The size of the queue, in bytes.
     *
     * @return the sizeInBytes value.
     */
    Long sizeInBytes();

    /**
     * Gets the messageCount property: The number of messages in the queue.
     *
     * @return the messageCount value.
     */
    Long messageCount();

    /**
     * Gets the lockDuration property: ISO 8601 timespan duration of a peek-lock; that is, the amount of time that the
     * message is locked for other receivers. The maximum value for LockDuration is 5 minutes; the default value is 1
     * minute.
     *
     * @return the lockDuration value.
     */
    Duration lockDuration();

    /**
     * Gets the maxSizeInMegabytes property: The maximum size of the queue in megabytes, which is the size of memory
     * allocated for the queue. Default is 1024.
     *
     * @return the maxSizeInMegabytes value.
     */
    Integer maxSizeInMegabytes();

    /**
     * Gets the requiresDuplicateDetection property: A value indicating if this queue requires duplicate detection.
     *
     * @return the requiresDuplicateDetection value.
     */
    Boolean requiresDuplicateDetection();

    /**
     * Gets the requiresSession property: A value that indicates whether the queue supports the concept of sessions.
     *
     * @return the requiresSession value.
     */
    Boolean requiresSession();

    /**
     * Gets the defaultMessageTimeToLive property: ISO 8601 default message timespan to live value. This is the duration
     * after which the message expires, starting from when the message is sent to Service Bus. This is the default value
     * used when TimeToLive is not set on a message itself.
     *
     * @return the defaultMessageTimeToLive value.
     */
    Duration defaultMessageTimeToLive();

    /**
     * Gets the deadLetteringOnMessageExpiration property: A value that indicates whether this queue has dead letter
     * support when a message expires.
     *
     * @return the deadLetteringOnMessageExpiration value.
     */
    Boolean deadLetteringOnMessageExpiration();

    /**
     * Gets the duplicateDetectionHistoryTimeWindow property: ISO 8601 timeSpan structure that defines the duration of
     * the duplicate detection history. The default value is 10 minutes.
     *
     * @return the duplicateDetectionHistoryTimeWindow value.
     */
    Duration duplicateDetectionHistoryTimeWindow();

    /**
     * Gets the maxDeliveryCount property: The maximum delivery count. A message is automatically deadlettered after
     * this number of deliveries. default value is 10.
     *
     * @return the maxDeliveryCount value.
     */
    Integer maxDeliveryCount();

    /**
     * Gets the status property: Enumerates the possible values for the status of a messaging entity.
     *
     * @return the status value.
     */
    EntityStatus status();

    /**
     * Gets the enableBatchedOperations property: Value that indicates whether server-side batched operations are
     * enabled.
     *
     * @return the enableBatchedOperations value.
     */
    Boolean enableBatchedOperations();

    /**
     * Gets the autoDeleteOnIdle property: ISO 8061 timeSpan idle interval after which the queue is automatically
     * deleted. The minimum duration is 5 minutes.
     *
     * @return the autoDeleteOnIdle value.
     */
    Duration autoDeleteOnIdle();

    /**
     * Gets the enablePartitioning property: A value that indicates whether the queue is to be partitioned across
     * multiple message brokers.
     *
     * @return the enablePartitioning value.
     */
    Boolean enablePartitioning();

    /**
     * Gets the enableExpress property: A value that indicates whether Express Entities are enabled. An express queue
     * holds a message in memory temporarily before writing it to persistent storage.
     *
     * @return the enableExpress value.
     */
    Boolean enableExpress();

    /**
     * Gets the forwardTo property: Queue/Topic name to forward the messages.
     *
     * @return the forwardTo value.
     */
    String forwardTo();

    /**
     * Gets the forwardDeadLetteredMessagesTo property: Queue/Topic name to forward the Dead Letter message.
     *
     * @return the forwardDeadLetteredMessagesTo value.
     */
    String forwardDeadLetteredMessagesTo();

    /**
     * Gets the inner com.azure.resourcemanager.servicebus.generated.fluent.models.SBQueueInner object.
     *
     * @return the inner object.
     */
    SBQueueInner innerModel();

    /** The entirety of the SBQueue definition. */
    interface Definition
        extends DefinitionStages.Blank, DefinitionStages.WithParentResource, DefinitionStages.WithCreate {
    }
    /** The SBQueue definition stages. */
    interface DefinitionStages {
        /** The first stage of the SBQueue definition. */
        interface Blank extends WithParentResource {
        }
        /** The stage of the SBQueue definition allowing to specify parent resource. */
        interface WithParentResource {
            /**
             * Specifies resourceGroupName, namespaceName.
             *
             * @param resourceGroupName Name of the Resource group within the Azure subscription.
             * @param namespaceName The namespace name.
             * @return the next definition stage.
             */
            WithCreate withExistingNamespace(String resourceGroupName, String namespaceName);
        }
        /**
         * The stage of the SBQueue definition which contains all the minimum required properties for the resource to be
         * created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate
            extends DefinitionStages.WithLockDuration,
                DefinitionStages.WithMaxSizeInMegabytes,
                DefinitionStages.WithRequiresDuplicateDetection,
                DefinitionStages.WithRequiresSession,
                DefinitionStages.WithDefaultMessageTimeToLive,
                DefinitionStages.WithDeadLetteringOnMessageExpiration,
                DefinitionStages.WithDuplicateDetectionHistoryTimeWindow,
                DefinitionStages.WithMaxDeliveryCount,
                DefinitionStages.WithStatus,
                DefinitionStages.WithEnableBatchedOperations,
                DefinitionStages.WithAutoDeleteOnIdle,
                DefinitionStages.WithEnablePartitioning,
                DefinitionStages.WithEnableExpress,
                DefinitionStages.WithForwardTo,
                DefinitionStages.WithForwardDeadLetteredMessagesTo {
            /**
             * Executes the create request.
             *
             * @return the created resource.
             */
            SBQueue create();

            /**
             * Executes the create request.
             *
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            SBQueue create(Context context);
        }
        /** The stage of the SBQueue definition allowing to specify lockDuration. */
        interface WithLockDuration {
            /**
             * Specifies the lockDuration property: ISO 8601 timespan duration of a peek-lock; that is, the amount of
             * time that the message is locked for other receivers. The maximum value for LockDuration is 5 minutes; the
             * default value is 1 minute..
             *
             * @param lockDuration ISO 8601 timespan duration of a peek-lock; that is, the amount of time that the
             *     message is locked for other receivers. The maximum value for LockDuration is 5 minutes; the default
             *     value is 1 minute.
             * @return the next definition stage.
             */
            WithCreate withLockDuration(Duration lockDuration);
        }
        /** The stage of the SBQueue definition allowing to specify maxSizeInMegabytes. */
        interface WithMaxSizeInMegabytes {
            /**
             * Specifies the maxSizeInMegabytes property: The maximum size of the queue in megabytes, which is the size
             * of memory allocated for the queue. Default is 1024..
             *
             * @param maxSizeInMegabytes The maximum size of the queue in megabytes, which is the size of memory
             *     allocated for the queue. Default is 1024.
             * @return the next definition stage.
             */
            WithCreate withMaxSizeInMegabytes(Integer maxSizeInMegabytes);
        }
        /** The stage of the SBQueue definition allowing to specify requiresDuplicateDetection. */
        interface WithRequiresDuplicateDetection {
            /**
             * Specifies the requiresDuplicateDetection property: A value indicating if this queue requires duplicate
             * detection..
             *
             * @param requiresDuplicateDetection A value indicating if this queue requires duplicate detection.
             * @return the next definition stage.
             */
            WithCreate withRequiresDuplicateDetection(Boolean requiresDuplicateDetection);
        }
        /** The stage of the SBQueue definition allowing to specify requiresSession. */
        interface WithRequiresSession {
            /**
             * Specifies the requiresSession property: A value that indicates whether the queue supports the concept of
             * sessions..
             *
             * @param requiresSession A value that indicates whether the queue supports the concept of sessions.
             * @return the next definition stage.
             */
            WithCreate withRequiresSession(Boolean requiresSession);
        }
        /** The stage of the SBQueue definition allowing to specify defaultMessageTimeToLive. */
        interface WithDefaultMessageTimeToLive {
            /**
             * Specifies the defaultMessageTimeToLive property: ISO 8601 default message timespan to live value. This is
             * the duration after which the message expires, starting from when the message is sent to Service Bus. This
             * is the default value used when TimeToLive is not set on a message itself..
             *
             * @param defaultMessageTimeToLive ISO 8601 default message timespan to live value. This is the duration
             *     after which the message expires, starting from when the message is sent to Service Bus. This is the
             *     default value used when TimeToLive is not set on a message itself.
             * @return the next definition stage.
             */
            WithCreate withDefaultMessageTimeToLive(Duration defaultMessageTimeToLive);
        }
        /** The stage of the SBQueue definition allowing to specify deadLetteringOnMessageExpiration. */
        interface WithDeadLetteringOnMessageExpiration {
            /**
             * Specifies the deadLetteringOnMessageExpiration property: A value that indicates whether this queue has
             * dead letter support when a message expires..
             *
             * @param deadLetteringOnMessageExpiration A value that indicates whether this queue has dead letter support
             *     when a message expires.
             * @return the next definition stage.
             */
            WithCreate withDeadLetteringOnMessageExpiration(Boolean deadLetteringOnMessageExpiration);
        }
        /** The stage of the SBQueue definition allowing to specify duplicateDetectionHistoryTimeWindow. */
        interface WithDuplicateDetectionHistoryTimeWindow {
            /**
             * Specifies the duplicateDetectionHistoryTimeWindow property: ISO 8601 timeSpan structure that defines the
             * duration of the duplicate detection history. The default value is 10 minutes..
             *
             * @param duplicateDetectionHistoryTimeWindow ISO 8601 timeSpan structure that defines the duration of the
             *     duplicate detection history. The default value is 10 minutes.
             * @return the next definition stage.
             */
            WithCreate withDuplicateDetectionHistoryTimeWindow(Duration duplicateDetectionHistoryTimeWindow);
        }
        /** The stage of the SBQueue definition allowing to specify maxDeliveryCount. */
        interface WithMaxDeliveryCount {
            /**
             * Specifies the maxDeliveryCount property: The maximum delivery count. A message is automatically
             * deadlettered after this number of deliveries. default value is 10..
             *
             * @param maxDeliveryCount The maximum delivery count. A message is automatically deadlettered after this
             *     number of deliveries. default value is 10.
             * @return the next definition stage.
             */
            WithCreate withMaxDeliveryCount(Integer maxDeliveryCount);
        }
        /** The stage of the SBQueue definition allowing to specify status. */
        interface WithStatus {
            /**
             * Specifies the status property: Enumerates the possible values for the status of a messaging entity..
             *
             * @param status Enumerates the possible values for the status of a messaging entity.
             * @return the next definition stage.
             */
            WithCreate withStatus(EntityStatus status);
        }
        /** The stage of the SBQueue definition allowing to specify enableBatchedOperations. */
        interface WithEnableBatchedOperations {
            /**
             * Specifies the enableBatchedOperations property: Value that indicates whether server-side batched
             * operations are enabled..
             *
             * @param enableBatchedOperations Value that indicates whether server-side batched operations are enabled.
             * @return the next definition stage.
             */
            WithCreate withEnableBatchedOperations(Boolean enableBatchedOperations);
        }
        /** The stage of the SBQueue definition allowing to specify autoDeleteOnIdle. */
        interface WithAutoDeleteOnIdle {
            /**
             * Specifies the autoDeleteOnIdle property: ISO 8061 timeSpan idle interval after which the queue is
             * automatically deleted. The minimum duration is 5 minutes..
             *
             * @param autoDeleteOnIdle ISO 8061 timeSpan idle interval after which the queue is automatically deleted.
             *     The minimum duration is 5 minutes.
             * @return the next definition stage.
             */
            WithCreate withAutoDeleteOnIdle(Duration autoDeleteOnIdle);
        }
        /** The stage of the SBQueue definition allowing to specify enablePartitioning. */
        interface WithEnablePartitioning {
            /**
             * Specifies the enablePartitioning property: A value that indicates whether the queue is to be partitioned
             * across multiple message brokers..
             *
             * @param enablePartitioning A value that indicates whether the queue is to be partitioned across multiple
             *     message brokers.
             * @return the next definition stage.
             */
            WithCreate withEnablePartitioning(Boolean enablePartitioning);
        }
        /** The stage of the SBQueue definition allowing to specify enableExpress. */
        interface WithEnableExpress {
            /**
             * Specifies the enableExpress property: A value that indicates whether Express Entities are enabled. An
             * express queue holds a message in memory temporarily before writing it to persistent storage..
             *
             * @param enableExpress A value that indicates whether Express Entities are enabled. An express queue holds
             *     a message in memory temporarily before writing it to persistent storage.
             * @return the next definition stage.
             */
            WithCreate withEnableExpress(Boolean enableExpress);
        }
        /** The stage of the SBQueue definition allowing to specify forwardTo. */
        interface WithForwardTo {
            /**
             * Specifies the forwardTo property: Queue/Topic name to forward the messages.
             *
             * @param forwardTo Queue/Topic name to forward the messages.
             * @return the next definition stage.
             */
            WithCreate withForwardTo(String forwardTo);
        }
        /** The stage of the SBQueue definition allowing to specify forwardDeadLetteredMessagesTo. */
        interface WithForwardDeadLetteredMessagesTo {
            /**
             * Specifies the forwardDeadLetteredMessagesTo property: Queue/Topic name to forward the Dead Letter
             * message.
             *
             * @param forwardDeadLetteredMessagesTo Queue/Topic name to forward the Dead Letter message.
             * @return the next definition stage.
             */
            WithCreate withForwardDeadLetteredMessagesTo(String forwardDeadLetteredMessagesTo);
        }
    }
    /**
     * Begins update for the SBQueue resource.
     *
     * @return the stage of resource update.
     */
    SBQueue.Update update();

    /** The template for SBQueue update. */
    interface Update
        extends UpdateStages.WithLockDuration,
            UpdateStages.WithMaxSizeInMegabytes,
            UpdateStages.WithRequiresDuplicateDetection,
            UpdateStages.WithRequiresSession,
            UpdateStages.WithDefaultMessageTimeToLive,
            UpdateStages.WithDeadLetteringOnMessageExpiration,
            UpdateStages.WithDuplicateDetectionHistoryTimeWindow,
            UpdateStages.WithMaxDeliveryCount,
            UpdateStages.WithStatus,
            UpdateStages.WithEnableBatchedOperations,
            UpdateStages.WithAutoDeleteOnIdle,
            UpdateStages.WithEnablePartitioning,
            UpdateStages.WithEnableExpress,
            UpdateStages.WithForwardTo,
            UpdateStages.WithForwardDeadLetteredMessagesTo {
        /**
         * Executes the update request.
         *
         * @return the updated resource.
         */
        SBQueue apply();

        /**
         * Executes the update request.
         *
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        SBQueue apply(Context context);
    }
    /** The SBQueue update stages. */
    interface UpdateStages {
        /** The stage of the SBQueue update allowing to specify lockDuration. */
        interface WithLockDuration {
            /**
             * Specifies the lockDuration property: ISO 8601 timespan duration of a peek-lock; that is, the amount of
             * time that the message is locked for other receivers. The maximum value for LockDuration is 5 minutes; the
             * default value is 1 minute..
             *
             * @param lockDuration ISO 8601 timespan duration of a peek-lock; that is, the amount of time that the
             *     message is locked for other receivers. The maximum value for LockDuration is 5 minutes; the default
             *     value is 1 minute.
             * @return the next definition stage.
             */
            Update withLockDuration(Duration lockDuration);
        }
        /** The stage of the SBQueue update allowing to specify maxSizeInMegabytes. */
        interface WithMaxSizeInMegabytes {
            /**
             * Specifies the maxSizeInMegabytes property: The maximum size of the queue in megabytes, which is the size
             * of memory allocated for the queue. Default is 1024..
             *
             * @param maxSizeInMegabytes The maximum size of the queue in megabytes, which is the size of memory
             *     allocated for the queue. Default is 1024.
             * @return the next definition stage.
             */
            Update withMaxSizeInMegabytes(Integer maxSizeInMegabytes);
        }
        /** The stage of the SBQueue update allowing to specify requiresDuplicateDetection. */
        interface WithRequiresDuplicateDetection {
            /**
             * Specifies the requiresDuplicateDetection property: A value indicating if this queue requires duplicate
             * detection..
             *
             * @param requiresDuplicateDetection A value indicating if this queue requires duplicate detection.
             * @return the next definition stage.
             */
            Update withRequiresDuplicateDetection(Boolean requiresDuplicateDetection);
        }
        /** The stage of the SBQueue update allowing to specify requiresSession. */
        interface WithRequiresSession {
            /**
             * Specifies the requiresSession property: A value that indicates whether the queue supports the concept of
             * sessions..
             *
             * @param requiresSession A value that indicates whether the queue supports the concept of sessions.
             * @return the next definition stage.
             */
            Update withRequiresSession(Boolean requiresSession);
        }
        /** The stage of the SBQueue update allowing to specify defaultMessageTimeToLive. */
        interface WithDefaultMessageTimeToLive {
            /**
             * Specifies the defaultMessageTimeToLive property: ISO 8601 default message timespan to live value. This is
             * the duration after which the message expires, starting from when the message is sent to Service Bus. This
             * is the default value used when TimeToLive is not set on a message itself..
             *
             * @param defaultMessageTimeToLive ISO 8601 default message timespan to live value. This is the duration
             *     after which the message expires, starting from when the message is sent to Service Bus. This is the
             *     default value used when TimeToLive is not set on a message itself.
             * @return the next definition stage.
             */
            Update withDefaultMessageTimeToLive(Duration defaultMessageTimeToLive);
        }
        /** The stage of the SBQueue update allowing to specify deadLetteringOnMessageExpiration. */
        interface WithDeadLetteringOnMessageExpiration {
            /**
             * Specifies the deadLetteringOnMessageExpiration property: A value that indicates whether this queue has
             * dead letter support when a message expires..
             *
             * @param deadLetteringOnMessageExpiration A value that indicates whether this queue has dead letter support
             *     when a message expires.
             * @return the next definition stage.
             */
            Update withDeadLetteringOnMessageExpiration(Boolean deadLetteringOnMessageExpiration);
        }
        /** The stage of the SBQueue update allowing to specify duplicateDetectionHistoryTimeWindow. */
        interface WithDuplicateDetectionHistoryTimeWindow {
            /**
             * Specifies the duplicateDetectionHistoryTimeWindow property: ISO 8601 timeSpan structure that defines the
             * duration of the duplicate detection history. The default value is 10 minutes..
             *
             * @param duplicateDetectionHistoryTimeWindow ISO 8601 timeSpan structure that defines the duration of the
             *     duplicate detection history. The default value is 10 minutes.
             * @return the next definition stage.
             */
            Update withDuplicateDetectionHistoryTimeWindow(Duration duplicateDetectionHistoryTimeWindow);
        }
        /** The stage of the SBQueue update allowing to specify maxDeliveryCount. */
        interface WithMaxDeliveryCount {
            /**
             * Specifies the maxDeliveryCount property: The maximum delivery count. A message is automatically
             * deadlettered after this number of deliveries. default value is 10..
             *
             * @param maxDeliveryCount The maximum delivery count. A message is automatically deadlettered after this
             *     number of deliveries. default value is 10.
             * @return the next definition stage.
             */
            Update withMaxDeliveryCount(Integer maxDeliveryCount);
        }
        /** The stage of the SBQueue update allowing to specify status. */
        interface WithStatus {
            /**
             * Specifies the status property: Enumerates the possible values for the status of a messaging entity..
             *
             * @param status Enumerates the possible values for the status of a messaging entity.
             * @return the next definition stage.
             */
            Update withStatus(EntityStatus status);
        }
        /** The stage of the SBQueue update allowing to specify enableBatchedOperations. */
        interface WithEnableBatchedOperations {
            /**
             * Specifies the enableBatchedOperations property: Value that indicates whether server-side batched
             * operations are enabled..
             *
             * @param enableBatchedOperations Value that indicates whether server-side batched operations are enabled.
             * @return the next definition stage.
             */
            Update withEnableBatchedOperations(Boolean enableBatchedOperations);
        }
        /** The stage of the SBQueue update allowing to specify autoDeleteOnIdle. */
        interface WithAutoDeleteOnIdle {
            /**
             * Specifies the autoDeleteOnIdle property: ISO 8061 timeSpan idle interval after which the queue is
             * automatically deleted. The minimum duration is 5 minutes..
             *
             * @param autoDeleteOnIdle ISO 8061 timeSpan idle interval after which the queue is automatically deleted.
             *     The minimum duration is 5 minutes.
             * @return the next definition stage.
             */
            Update withAutoDeleteOnIdle(Duration autoDeleteOnIdle);
        }
        /** The stage of the SBQueue update allowing to specify enablePartitioning. */
        interface WithEnablePartitioning {
            /**
             * Specifies the enablePartitioning property: A value that indicates whether the queue is to be partitioned
             * across multiple message brokers..
             *
             * @param enablePartitioning A value that indicates whether the queue is to be partitioned across multiple
             *     message brokers.
             * @return the next definition stage.
             */
            Update withEnablePartitioning(Boolean enablePartitioning);
        }
        /** The stage of the SBQueue update allowing to specify enableExpress. */
        interface WithEnableExpress {
            /**
             * Specifies the enableExpress property: A value that indicates whether Express Entities are enabled. An
             * express queue holds a message in memory temporarily before writing it to persistent storage..
             *
             * @param enableExpress A value that indicates whether Express Entities are enabled. An express queue holds
             *     a message in memory temporarily before writing it to persistent storage.
             * @return the next definition stage.
             */
            Update withEnableExpress(Boolean enableExpress);
        }
        /** The stage of the SBQueue update allowing to specify forwardTo. */
        interface WithForwardTo {
            /**
             * Specifies the forwardTo property: Queue/Topic name to forward the messages.
             *
             * @param forwardTo Queue/Topic name to forward the messages.
             * @return the next definition stage.
             */
            Update withForwardTo(String forwardTo);
        }
        /** The stage of the SBQueue update allowing to specify forwardDeadLetteredMessagesTo. */
        interface WithForwardDeadLetteredMessagesTo {
            /**
             * Specifies the forwardDeadLetteredMessagesTo property: Queue/Topic name to forward the Dead Letter
             * message.
             *
             * @param forwardDeadLetteredMessagesTo Queue/Topic name to forward the Dead Letter message.
             * @return the next definition stage.
             */
            Update withForwardDeadLetteredMessagesTo(String forwardDeadLetteredMessagesTo);
        }
    }
    /**
     * Refreshes the resource to sync with Azure.
     *
     * @return the refreshed resource.
     */
    SBQueue refresh();

    /**
     * Refreshes the resource to sync with Azure.
     *
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    SBQueue refresh(Context context);
}
