/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.servicebus.v2018_01_01_preview.implementation;

import com.microsoft.azure.arm.resources.models.implementation.GroupableResourceCoreImpl;
import com.microsoft.azure.management.servicebus.v2018_01_01_preview.SBNamespace;
import rx.Observable;
import com.microsoft.azure.management.servicebus.v2018_01_01_preview.SBNamespaceUpdateParameters;
import org.joda.time.DateTime;
import com.microsoft.azure.management.servicebus.v2018_01_01_preview.SBSku;
import com.microsoft.azure.management.servicebus.v2018_01_01_preview.Identity;
import com.microsoft.azure.management.servicebus.v2018_01_01_preview.Encryption;
import rx.functions.Func1;

class SBNamespaceImpl extends GroupableResourceCoreImpl<SBNamespace, SBNamespaceInner, SBNamespaceImpl, ServiceBusManager> implements SBNamespace, SBNamespace.Definition, SBNamespace.Update {
    private SBNamespaceUpdateParameters updateParameter;
    SBNamespaceImpl(String name, SBNamespaceInner inner, ServiceBusManager manager) {
        super(name, inner, manager);
        this.updateParameter = new SBNamespaceUpdateParameters();
    }

    @Override
    public Observable<SBNamespace> createResourceAsync() {
        NamespacesInner client = this.manager().inner().namespaces();
        return client.createOrUpdateAsync(this.resourceGroupName(), this.name(), this.inner())
            .map(new Func1<SBNamespaceInner, SBNamespaceInner>() {
               @Override
               public SBNamespaceInner call(SBNamespaceInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<SBNamespace> updateResourceAsync() {
        NamespacesInner client = this.manager().inner().namespaces();
        return client.updateAsync(this.resourceGroupName(), this.name(), this.updateParameter)
            .map(new Func1<SBNamespaceInner, SBNamespaceInner>() {
               @Override
               public SBNamespaceInner call(SBNamespaceInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<SBNamespaceInner> getInnerAsync() {
        NamespacesInner client = this.manager().inner().namespaces();
        return client.getByResourceGroupAsync(this.resourceGroupName(), this.name());
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }

    private void resetCreateUpdateParameters() {
        this.updateParameter = new SBNamespaceUpdateParameters();
    }

    @Override
    public DateTime createdAt() {
        return this.inner().createdAt();
    }

    @Override
    public Encryption encryption() {
        return this.inner().encryption();
    }

    @Override
    public Identity identity() {
        return this.inner().identity();
    }

    @Override
    public String metricId() {
        return this.inner().metricId();
    }

    @Override
    public String provisioningState() {
        return this.inner().provisioningState();
    }

    @Override
    public String serviceBusEndpoint() {
        return this.inner().serviceBusEndpoint();
    }

    @Override
    public SBSku sku() {
        return this.inner().sku();
    }

    @Override
    public DateTime updatedAt() {
        return this.inner().updatedAt();
    }

    @Override
    public Boolean zoneRedundant() {
        return this.inner().zoneRedundant();
    }

    @Override
    public SBNamespaceImpl withEncryption(Encryption encryption) {
        if (isInCreateMode()) {
            this.inner().withEncryption(encryption);
        } else {
            this.updateParameter.withEncryption(encryption);
        }
        return this;
    }

    @Override
    public SBNamespaceImpl withIdentity(Identity identity) {
        if (isInCreateMode()) {
            this.inner().withIdentity(identity);
        } else {
            this.updateParameter.withIdentity(identity);
        }
        return this;
    }

    @Override
    public SBNamespaceImpl withSku(SBSku sku) {
        if (isInCreateMode()) {
            this.inner().withSku(sku);
        } else {
            this.updateParameter.withSku(sku);
        }
        return this;
    }

    @Override
    public SBNamespaceImpl withZoneRedundant(Boolean zoneRedundant) {
        if (isInCreateMode()) {
            this.inner().withZoneRedundant(zoneRedundant);
        } else {
            this.updateParameter.withZoneRedundant(zoneRedundant);
        }
        return this;
    }

}
