// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.developer.devcenter;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.util.Configuration;
import com.azure.core.util.polling.SyncPoller;
import com.azure.developer.devcenter.models.DevBox;
import com.azure.developer.devcenter.models.DevBoxPool;
import com.azure.developer.devcenter.models.DevCenterOperationDetails;
import com.azure.developer.devcenter.models.DevCenterProject;
import com.azure.developer.devcenter.models.RemoteConnection;
import com.azure.identity.DefaultAzureCredentialBuilder;

public final class DevBoxSamples {
    public void devBoxSamples() {

        // BEGIN: com.azure.developer.devcenter.readme.devboxes
        String endpoint = Configuration.getGlobalConfiguration().get("DEVCENTER_ENDPOINT");

        // Build our clients
        DevCenterClient devCenterClient =
                        new DevCenterClientBuilder()
                                .endpoint(endpoint)
                                .credential(new DefaultAzureCredentialBuilder().build())
                                .buildClient();

        // BEGIN: com.azure.developer.devcenter.readme.getDevBoxClient
        DevBoxesClient devBoxClient = devCenterClient.getDevBoxesClient();
        // END: com.azure.developer.devcenter.readme.getDevBoxClient

        // BEGIN: com.azure.developer.devcenter.readme.getProjectsAndPools
        // Find available Projects and Pools
        PagedIterable<DevCenterProject> projectListResponse = devCenterClient.listProjects();
        for (DevCenterProject project: projectListResponse) {
            System.out.println(project.getName());
        }

        // Use the first project in the list
        DevCenterProject project = projectListResponse.iterator().next();
        String projectName = project.getName();

        PagedIterable<DevBoxPool> poolListResponse = devBoxClient.listPools(projectName);
        for (DevBoxPool pool: poolListResponse) {
            System.out.println(pool.getName());
        }

        // Use the first pool in the list
        DevBoxPool pool = poolListResponse.iterator().next();
        String poolName = pool.getName();
        // END: com.azure.developer.devcenter.readme.getProjectsAndPools

        System.out.println("Starting to create dev box in project " + projectName + " and pool " + poolName);

        // BEGIN: com.azure.developer.devcenter.readme.createAndConnectToDevBox
        // Provision a Dev Box
        SyncPoller<DevCenterOperationDetails, DevBox> devBoxCreateResponse =
                        devBoxClient.beginCreateDevBox(projectName, "me", new DevBox("MyDevBox", poolName));
        devBoxCreateResponse.waitForCompletion();
        DevBox devBox = devBoxCreateResponse.getFinalResult();

        String devBoxName = devBox.getName();
        System.out.println("DevBox " + devBoxName + "finished provisioning with status " + devBox.getProvisioningState());

        RemoteConnection remoteConnection =
                        devBoxClient.getRemoteConnection(projectName, "me", devBoxName);
        System.out.println("Dev Box web url is " + remoteConnection.getWebUrl());
        // END: com.azure.developer.devcenter.readme.createAndConnectToDevBox

        System.out.println("Start deleting dev box");
        // BEGIN: com.azure.developer.devcenter.readme.deleteDevBox
        // Tear down the Dev Box when we're finished:
        SyncPoller<DevCenterOperationDetails, Void> devBoxDeleteResponse =
                        devBoxClient.beginDeleteDevBox(projectName, "me", devBoxName);
        devBoxDeleteResponse.waitForCompletion();
        // END: com.azure.developer.devcenter.readme.deleteDevBox
        System.out.println("Done deleting dev box");
        // END: com.azure.developer.devcenter.readme.devboxes
    }
}
