// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.developer.devcenter;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.util.Configuration;
import com.azure.core.util.polling.SyncPoller;
import com.azure.developer.devcenter.models.DevCenterCatalog;
import com.azure.developer.devcenter.models.DevCenterEnvironment;
import com.azure.developer.devcenter.models.DevCenterEnvironmentType;
import com.azure.developer.devcenter.models.DevCenterOperationDetails;
import com.azure.developer.devcenter.models.DevCenterProject;
import com.azure.developer.devcenter.models.EnvironmentDefinition;
import com.azure.identity.DefaultAzureCredentialBuilder;

public final class EnvironmentSamples {
    public void environmentSamples() {

        // BEGIN: com.azure.developer.devcenter.readme.environments
        String endpoint = Configuration.getGlobalConfiguration().get("DEVCENTER_ENDPOINT");

        // Build our clients
        DevCenterClient devCenterClient =
                        new DevCenterClientBuilder()
                                .endpoint(endpoint)
                                .credential(new DefaultAzureCredentialBuilder().build())
                                .buildClient();
       
        // BEGIN: com.azure.developer.devcenter.readme.getEnvironmentsClient
        DeploymentEnvironmentsClient environmentsClient = devCenterClient.getDeploymentEnvironmentsClient();
        // END: com.azure.developer.devcenter.readme.getEnvironmentsClient

        // Find available Projects 
        PagedIterable<DevCenterProject> projectListResponse = devCenterClient.listProjects();
        for (DevCenterProject project: projectListResponse) {
            System.out.println(project.getName());
        }

        // Use the first project in the list
        DevCenterProject project = projectListResponse.iterator().next();
        String projectName = project.getName();

        // BEGIN: com.azure.developer.devcenter.readme.getEnvironmentDefinitionsAndTypes
        // Fetch available environment definitions and environment types
        PagedIterable<DevCenterCatalog> catalogs = environmentsClient.listCatalogs(projectName);
        for (DevCenterCatalog catalog: catalogs) {
            System.out.println(catalog.getName());
        }

        // Use the first catalog in the list
        String catalogName = catalogs.iterator().next().getName();

        PagedIterable<EnvironmentDefinition> environmentDefinitions = environmentsClient.listEnvironmentDefinitionsByCatalog(projectName, catalogName);
        for (EnvironmentDefinition environmentDefinition: environmentDefinitions) {
            System.out.println(environmentDefinition.getName());
        }

        // Use the first environment definition in the list
        String envDefinitionName = environmentDefinitions.iterator().next().getName();

        PagedIterable<DevCenterEnvironmentType> environmentTypes = environmentsClient.listEnvironmentTypes(projectName);
        for (DevCenterEnvironmentType envType: environmentTypes) {
            System.out.println(envType.getName());
        }

        // Use the first environment type in the list
        String envTypeName = environmentTypes.iterator().next().getName();
        // END: com.azure.developer.devcenter.readme.getEnvironmentDefinitionsAndTypes

        System.out.println("Starting to create environment in project " + projectName + ", with catalog " + catalogName
            + ", environment definition " + envDefinitionName + ", environment type " + envTypeName);

        // BEGIN: com.azure.developer.devcenter.readme.createEnvironment
        // Create an environment
        SyncPoller<DevCenterOperationDetails, DevCenterEnvironment> environmentCreateResponse 
                    = environmentsClient.beginCreateOrUpdateEnvironment(projectName, "me",
                        new DevCenterEnvironment("myEnvironmentName", envTypeName, catalogName, envDefinitionName));
        environmentCreateResponse.waitForCompletion();
        DevCenterEnvironment environment = environmentCreateResponse.getFinalResult();
        // END: com.azure.developer.devcenter.readme.createEnvironment

        String environmentName = environment.getName();
        System.out.println("Environment " + environmentName + "finished provisioning with status " + environment.getProvisioningState());

        System.out.println("Start deleting environment " + environmentName);
        // BEGIN: com.azure.developer.devcenter.readme.deleteEnvironment
        // Delete the environment when we're finished:
        SyncPoller<DevCenterOperationDetails, Void> environmentDeleteResponse =
                        environmentsClient.beginDeleteEnvironment(projectName, "me", environmentName);
        environmentDeleteResponse.waitForCompletion();
        System.out.println("Done deleting environment" + environmentName);
        // END: com.azure.developer.devcenter.readme.deleteEnvironment
        // END: com.azure.developer.devcenter.readme.environments
    }
}
