// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.developer.devcenter;

import com.azure.core.util.Configuration;
import com.azure.core.util.BinaryData;
import com.azure.core.util.polling.SyncPoller;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.identity.DefaultAzureCredentialBuilder;

public final class ReadmeSamples {
    public void readmeSamples() {
        // BEGIN: com.azure.developer.devcenter.readme.devboxes
        String tenantId = Configuration.getGlobalConfiguration().get("AZURE_ACCOUNT_ENDPOINT");
        String devCenterName = Configuration.getGlobalConfiguration().get("DEVCENTER_NAME");

        // Build our clients
        DevCenterClient devCenterClient =
                        new DevCenterClientBuilder()
                                .devCenter(devCenterName)
                                .tenantId(tenantId)
                                .credential(new DefaultAzureCredentialBuilder().build())
                                .buildClient();

        DevBoxesClient devBoxClient =
                        new DevBoxesClientBuilder()
                                .devCenter(devCenterName)
                                .tenantId(tenantId)
                                .credential(new DefaultAzureCredentialBuilder().build())
                                .buildClient();

        // Find available Projects and Pools
        PagedIterable<BinaryData> projectListResponse = devCenterClient.listProjects(null);
        for (BinaryData p: projectListResponse) {
            System.out.println(p);
        }

        PagedIterable<BinaryData> poolListResponse = devBoxClient.listPools("myProject", null);
        for (BinaryData p: poolListResponse) {
            System.out.println(p);
        }

        // Provision a Dev Box
        BinaryData devBoxBody = BinaryData.fromString("{\"poolName\":\"MyPool\"}");
        SyncPoller<BinaryData, BinaryData> devBoxCreateResponse =
                devBoxClient.beginCreateDevBox("myProject", "me", "MyDevBox", devBoxBody, null);
        devBoxCreateResponse.waitForCompletion();

        
        Response<BinaryData> remoteConnectionResponse =
                        devBoxClient.getRemoteConnectionWithResponse("myProject", "me", "MyDevBox", null);
        System.out.println(remoteConnectionResponse.getValue());

        // Tear down the Dev Box when we're finished:
        SyncPoller<BinaryData, BinaryData> devBoxDeleteResponse =
                        devBoxClient.beginDeleteDevBox("myProject", "me", "MyDevBox", null);
        devBoxDeleteResponse.waitForCompletion();        
        // END: com.azure.developer.devcenter.readme.devboxes

        // BEGIN: com.azure.developer.devcenter.readme.environments
        EnvironmentsClient environmentsClient =
                        new EnvironmentsClientBuilder()
                                .devCenter(devCenterName)
                                .tenantId(tenantId)
                                .credential(new DefaultAzureCredentialBuilder().build())
                                .buildClient();

        // Fetch available catalog items and environment types
        PagedIterable<BinaryData> catalogItemListResponse = environmentsClient.listCatalogItems("myProject", null);
        for (BinaryData p: catalogItemListResponse) {
            System.out.println(p);
        }

        PagedIterable<BinaryData> environmentTypesListResponse = environmentsClient.listEnvironmentTypes("myProject", null);
        for (BinaryData p: environmentTypesListResponse) {
            System.out.println(p);
        }

        // Create an environment
        BinaryData environmentBody = BinaryData.fromString("{\"catalogItemName\":\"MyCatalogItem\", \"environmentType\":\"MyEnvironmentType\"}");
        SyncPoller<BinaryData, BinaryData> environmentCreateResponse =
                environmentsClient.beginCreateOrUpdateEnvironment("myProject", "me", "TestEnvironment", environmentBody, null);
        environmentCreateResponse.waitForCompletion();


        // Fetch the deployment artifacts:
        PagedIterable<BinaryData> artifactListResponse = environmentsClient.listArtifactsByEnvironment("myProject", "me", "TestEnvironment", null);
        for (BinaryData p: artifactListResponse) {
            System.out.println(p);
        }


        // Delete the environment when we're finished:
        SyncPoller<BinaryData, BinaryData> environmentDeleteResponse =
                        environmentsClient.beginDeleteEnvironment("myProject", "me", "TestEnvironment", null);
        environmentDeleteResponse.waitForCompletion();

        // END: com.azure.developer.devcenter.readme.environments
    }
}
