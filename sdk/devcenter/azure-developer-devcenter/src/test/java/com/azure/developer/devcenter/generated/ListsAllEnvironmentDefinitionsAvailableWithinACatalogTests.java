// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.developer.devcenter.generated;

import com.azure.core.http.rest.PagedIterable;
import com.azure.developer.devcenter.models.EnvironmentDefinition;
import com.azure.developer.devcenter.models.EnvironmentDefinitionParameter;
import com.azure.developer.devcenter.models.EnvironmentDefinitionParameterType;
import java.util.List;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

@Disabled
public final class ListsAllEnvironmentDefinitionsAvailableWithinACatalogTests extends DevCenterClientTestBase {
    @Test
    @Disabled
    public void testListsAllEnvironmentDefinitionsAvailableWithinACatalogTests() {
        // method invocation
        PagedIterable<EnvironmentDefinition> response
            = deploymentEnvironmentsClient.listEnvironmentDefinitionsByCatalog("myProject", "myCatalog");

        // response assertion
        Assertions.assertEquals(200, response.iterableByPage().iterator().next().getStatusCode());
        EnvironmentDefinition firstItem = response.iterator().next();
        Assertions.assertNotNull(firstItem);
        // verify property "id"
        Assertions.assertEquals("/projects/myProject/catalogs/myCatalog/environmentDefinitions/foo", firstItem.getId());
        // verify property "name"
        Assertions.assertEquals("foo", firstItem.getName());
        // verify property "catalogName"
        Assertions.assertEquals("myCatalog", firstItem.getCatalogName());
        // verify property "description"
        Assertions.assertEquals("This environment definition is just for example purposes.",
            firstItem.getDescription());
        // verify property "parameters"
        List<EnvironmentDefinitionParameter> firstItemParameters = firstItem.getParameters();
        EnvironmentDefinitionParameter firstItemParametersFirstItem = firstItemParameters.iterator().next();
        Assertions.assertNotNull(firstItemParametersFirstItem);
        Assertions.assertEquals("functionAppRuntime", firstItemParametersFirstItem.getId());
        Assertions.assertEquals("Function App Runtime", firstItemParametersFirstItem.getName());
        Assertions.assertEquals("dotnet", firstItemParametersFirstItem.getDefaultValue());
        Assertions.assertEquals(EnvironmentDefinitionParameterType.STRING,
            firstItemParametersFirstItem.getParameterType());
        Assertions.assertEquals(true, firstItemParametersFirstItem.isRequired());
        List<String> firstItemParametersFirstItemAllowed = firstItemParametersFirstItem.getAllowed();
        Assertions.assertEquals("node", firstItemParametersFirstItemAllowed.iterator().next());
        // verify property "parametersSchema"
        Assertions.assertEquals(
            "{\"type\":\"object\",\"properties\":{\"functionAppRuntime\":{\"$id\":\"functionAppRuntime\",\"value\":\"dotnet\",\"displayName\":\"Function App Runtime\",\"type\":\"string\",\"enum\":[\"node\",\"dotnet\",\"java\"]},\"storageAccountType\":{\"$id\":\"storageAccountType\",\"value\":\"Standard_LRS\",\"displayName\":\"Storage Account Type\",\"type\":\"string\",\"enum\":[\"Standard_LRS\",\"Standard_GRS\",\"Standard_RAGRS\"]},\"httpsOnly\":{\"$id\":\"httpsOnly\",\"value\":true,\"displayName\":\"HTTPS only\",\"type\":\"boolean\"}},\"required\":[\"functionAppRuntime\",\"storageAccountType\"]}",
            firstItem.getParametersSchema());
        // verify property "templatePath"
        Assertions.assertEquals("azuredeploy.json", firstItem.getTemplatePath());
    }
}
