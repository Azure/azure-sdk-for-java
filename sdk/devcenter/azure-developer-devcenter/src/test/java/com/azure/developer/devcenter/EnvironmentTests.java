// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.developer.devcenter;

import com.azure.core.util.Configuration;
import com.azure.core.util.BinaryData;
import com.azure.core.util.polling.LongRunningOperationStatus;
import com.azure.core.util.polling.SyncPoller;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.identity.DefaultAzureCredentialBuilder;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Assertions;

class EnvironmentTests extends DevCenterClientTestBase {
    @Test
    public void testCreateEnvironment() {
        String projectName = Configuration.getGlobalConfiguration().get("DEFAULT_PROJECT_NAME");
        String environmentTypeName = Configuration.getGlobalConfiguration().get("DEFAULT_ENVIRONMENT_TYPE_NAME");
        String catalogName = Configuration.getGlobalConfiguration().get("DEFAULT_CATALOG_NAME");
        String catalogItemName = Configuration.getGlobalConfiguration().get("DEFAULT_CATALOG_ITEM_NAME");

        // Create an environment
        BinaryData environmentBody = BinaryData.fromString(
            "{\"catalogItemName\":\"" + catalogItemName
            + "\", \"catalogName\":\"" + catalogName
            + "\", \"environmentType\":\"" + environmentTypeName  + "\"}");
        SyncPoller<BinaryData, BinaryData> environmentCreateResponse =
                environmentsClient.beginCreateOrUpdateEnvironment(projectName, "me", "SdkTestEnvironment", environmentBody, null);
        Assertions.assertEquals(
                LongRunningOperationStatus.SUCCESSFULLY_COMPLETED, environmentCreateResponse.waitForCompletion().getStatus());


        // Fetch the deployment artifacts:
        PagedIterable<BinaryData> artifactListResponse = environmentsClient.listArtifactsByEnvironment(projectName, "me", "SdkTestEnvironment", null);
        for (BinaryData p: artifactListResponse) {
            System.out.println(p);
        }

        // Delete the environment when we're finished:
        SyncPoller<BinaryData, BinaryData> environmentDeleteResponse =
                        environmentsClient.beginDeleteEnvironment(projectName, "me", "SdkTestEnvironment", null);
        Assertions.assertEquals(
                LongRunningOperationStatus.SUCCESSFULLY_COMPLETED, environmentDeleteResponse.waitForCompletion().getStatus());
    }
}
