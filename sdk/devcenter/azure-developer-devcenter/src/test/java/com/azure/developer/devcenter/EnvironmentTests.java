// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.developer.devcenter;

import com.azure.core.util.polling.LongRunningOperationStatus;
import com.azure.core.util.polling.SyncPoller;
import com.azure.developer.devcenter.models.DevCenterEnvironment;
import com.azure.developer.devcenter.models.DevCenterEnvironmentType;
import com.azure.developer.devcenter.models.DevCenterOperationDetails;
import com.azure.developer.devcenter.models.EnvironmentDefinition;
import com.azure.developer.devcenter.models.DevCenterCatalog;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

import java.util.List;
import java.util.stream.Collectors;

class EnvironmentTests extends DevCenterClientTestBase {
    @Test
    public void testCreateEnvironment() {
        DevCenterEnvironment environment = new DevCenterEnvironment(devEnvironmentName, envTypeName, catalogName, envDefinitionName);

        SyncPoller<DevCenterOperationDetails, DevCenterEnvironment> environmentCreateResponse =
                deploymentEnvironmentsClient.beginCreateOrUpdateEnvironment(projectName, meUserId, environment);
        Assertions.assertEquals(
            LongRunningOperationStatus.SUCCESSFULLY_COMPLETED, environmentCreateResponse.waitForCompletion().getStatus());
        Assertions.assertEquals(devEnvironmentName, environmentCreateResponse.getFinalResult().getName());
    }

    @Test
    public void testGetEnvironment() {
        setupEnvironment();
        
        DevCenterEnvironment environment = deploymentEnvironmentsClient.getEnvironment(projectName, meUserId, devEnvironmentName);
        Assertions.assertEquals(devEnvironmentName, environment.getName());
    }

    @Test
    public void testListEnvironments() {
        setupEnvironment();
        
        List<DevCenterEnvironment> environments = deploymentEnvironmentsClient.listEnvironments(projectName, meUserId).stream().collect(Collectors.toList());        
        Assertions.assertEquals(1, environments.size());
        Assertions.assertEquals(devEnvironmentName, environments.get(0).getName());
    }

    @Test
    public void testListAllEnvironments() {
        setupEnvironment();
        
        List<DevCenterEnvironment> environments = deploymentEnvironmentsClient.listAllEnvironments(projectName).stream().collect(Collectors.toList());        
        Assertions.assertEquals(1, environments.size());
        Assertions.assertEquals(devEnvironmentName, environments.get(0).getName());
    }

    @Test
    public void testDeleteEnvironment() {
        setupEnvironment();

        SyncPoller<DevCenterOperationDetails, Void> environmentDeleteResponse =
                deploymentEnvironmentsClient.beginDeleteEnvironment(projectName, meUserId, devEnvironmentName);
        Assertions.assertEquals(
                LongRunningOperationStatus.SUCCESSFULLY_COMPLETED, environmentDeleteResponse.waitForCompletion().getStatus());
    }

    @Test
    public void testGetCatalog() {
        DevCenterCatalog catalog = deploymentEnvironmentsClient.getCatalog(projectName, catalogName);
        Assertions.assertEquals(catalogName, catalog.getName());
    }

    @Test
    public void testListCatalogs() {
        List<DevCenterCatalog> catalogs = deploymentEnvironmentsClient.listCatalogs(projectName).stream().collect(Collectors.toList()); 
        Assertions.assertEquals(1, catalogs.size());
        Assertions.assertEquals(catalogName, catalogs.get(0).getName());
    }
    
    @Test
    public void testGetEnvironmentDefinition() {
        EnvironmentDefinition envDefinition = deploymentEnvironmentsClient.getEnvironmentDefinition(projectName, catalogName, envDefinitionName);
        Assertions.assertEquals(envDefinitionName, envDefinition.getName());
    }

    @Test
    public void testListEnvironmentDefinitions() {
        List<EnvironmentDefinition> envDefinitions = deploymentEnvironmentsClient.listEnvironmentDefinitions(projectName).stream().collect(Collectors.toList());        
        Assertions.assertEquals(3, envDefinitions.size());
        for (EnvironmentDefinition envDefinition : envDefinitions) {
            Assertions.assertNotNull(envDefinition);
            Assertions.assertNotNull(envDefinition.getName());
        }
    }

    @Test
    public void testListEnvironmentDefinitionsByCatalog() {
        List<EnvironmentDefinition> envDefinitions = deploymentEnvironmentsClient.listEnvironmentDefinitionsByCatalog(
                projectName, catalogName).stream().collect(Collectors.toList());        
        Assertions.assertEquals(3, envDefinitions.size());
        for (EnvironmentDefinition envDefinition : envDefinitions) {
            Assertions.assertNotNull(envDefinition);
            Assertions.assertNotNull(envDefinition.getName());
        }
    }

    @Test 
    public void testListEnvironmentTypes() {
        List<DevCenterEnvironmentType> envTypes = deploymentEnvironmentsClient.listEnvironmentTypes(projectName).stream().collect(Collectors.toList()); 
        Assertions.assertEquals(1, envTypes.size());
        Assertions.assertEquals(envTypeName, envTypes.get(0).getName());
    }

    public DevCenterEnvironment setupEnvironment() {
        //get environment if exists. If not, NotFound error will be thrown, and then we create environment

        DevCenterEnvironment environment; 
        try {
            environment = deploymentEnvironmentsClient.getEnvironment(projectName, meUserId, devEnvironmentName);
        } catch (Exception e) {
            DevCenterEnvironment createEnvironment = new DevCenterEnvironment(devEnvironmentName, envTypeName, catalogName, envDefinitionName);

            SyncPoller<DevCenterOperationDetails, DevCenterEnvironment> environmentCreateResponse =
                    deploymentEnvironmentsClient.beginCreateOrUpdateEnvironment(projectName, meUserId, createEnvironment);
            Assertions.assertEquals(
                LongRunningOperationStatus.SUCCESSFULLY_COMPLETED, environmentCreateResponse.waitForCompletion().getStatus());
            
            environment = environmentCreateResponse.getFinalResult();
        }
        Assertions.assertNotNull(environment);
        Assertions.assertEquals(devEnvironmentName, environment.getName());

        return environment;
    }
    
}
