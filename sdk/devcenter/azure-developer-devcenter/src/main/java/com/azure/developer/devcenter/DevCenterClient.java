// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.developer.devcenter;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.developer.devcenter.implementation.DevCenterClientImpl;
import com.azure.developer.devcenter.models.DevCenterProject;
import com.azure.developer.devcenter.implementation.DeploymentEnvironmentsClientImpl;
import com.azure.developer.devcenter.implementation.DevBoxesClientImpl;

/**
 * Initializes a new instance of the synchronous DevCenterClient type.
 */
@ServiceClient(builder = DevCenterClientBuilder.class)
public final class DevCenterClient {

    @Generated
    private final DevCenterClientImpl serviceClient;

    /**
     * Initializes an instance of DevCenterClient class.
     *
     * @param serviceClient the service client implementation.
     */
    @Generated
    DevCenterClient(DevCenterClientImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Initializes a new instance of DevBoxesClient from DevCenterClient.
     *
     * @return Dev Boxes Client
     */
    public DevBoxesClient getDevBoxesClient() {
        return new DevBoxesClient(new DevBoxesClientImpl(serviceClient.getHttpPipeline(),
            serviceClient.getSerializerAdapter(), serviceClient.getEndpoint(), serviceClient.getServiceVersion()));
    }

    /**
     * Initializes a new instance of DeploymentEnvironmentsClient from DevCenterClient.
     *
     * @return Deployment Environments Client
     */
    public DeploymentEnvironmentsClient getDeploymentEnvironmentsClient() {
        return new DeploymentEnvironmentsClient(new DeploymentEnvironmentsClientImpl(serviceClient.getHttpPipeline(),
            serviceClient.getSerializerAdapter(), serviceClient.getEndpoint(), serviceClient.getServiceVersion()));
    }

    /**
     * Lists all projects.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     name: String (Required)
     *     description: String (Optional)
     *     maxDevBoxesPerUser: Integer (Optional)
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of Project items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listProjects(RequestOptions requestOptions) {
        return this.serviceClient.listProjects(requestOptions);
    }

    /**
     * Gets a project.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     name: String (Required)
     *     description: String (Optional)
     *     maxDevBoxesPerUser: Integer (Optional)
     * }
     * }</pre>
     *
     * @param projectName Name of the project.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a project along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getProjectWithResponse(String projectName, RequestOptions requestOptions) {
        return this.serviceClient.getProjectWithResponse(projectName, requestOptions);
    }

    /**
     * Lists all projects.
     *
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of Project items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DevCenterProject> listProjects() {
        // Generated convenience method for listProjects
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.listProjects(requestOptions)
            .mapPage(bodyItemValue -> bodyItemValue.toObject(DevCenterProject.class));
    }

    /**
     * Gets a project.
     *
     * @param projectName Name of the project.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a project.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DevCenterProject getProject(String projectName) {
        // Generated convenience method for getProjectWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getProjectWithResponse(projectName, requestOptions).getValue().toObject(DevCenterProject.class);
    }
}
