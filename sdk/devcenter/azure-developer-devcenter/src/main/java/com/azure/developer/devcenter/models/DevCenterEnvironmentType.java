// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.developer.devcenter.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Properties of an environment type.
 */
@Immutable
public final class DevCenterEnvironmentType implements JsonSerializable<DevCenterEnvironmentType> {

    /*
     * Name of the environment type.
     */
    @Generated
    private final String name;

    /*
     * Id of a subscription or management group that the environment type will be
     * mapped to. The environment's resources will be deployed into this subscription
     * or management group.
     */
    @Generated
    private final String deploymentTargetId;

    /*
     * Indicates whether this environment type is enabled for use in this project.
     */
    @Generated
    private final EnvironmentTypeStatus status;

    /**
     * Creates an instance of DevCenterEnvironmentType class.
     *
     * @param name the name value to set.
     * @param deploymentTargetId the deploymentTargetId value to set.
     * @param status the status value to set.
     */
    @Generated
    private DevCenterEnvironmentType(String name, String deploymentTargetId, EnvironmentTypeStatus status) {
        this.name = name;
        this.deploymentTargetId = deploymentTargetId;
        this.status = status;
    }

    /**
     * Get the name property: Name of the environment type.
     *
     * @return the name value.
     */
    @Generated
    public String getName() {
        return this.name;
    }

    /**
     * Get the deploymentTargetId property: Id of a subscription or management group that the environment type will be
     * mapped to. The environment's resources will be deployed into this subscription
     * or management group.
     *
     * @return the deploymentTargetId value.
     */
    @Generated
    public String getDeploymentTargetId() {
        return this.deploymentTargetId;
    }

    /**
     * Get the status property: Indicates whether this environment type is enabled for use in this project.
     *
     * @return the status value.
     */
    @Generated
    public EnvironmentTypeStatus getStatus() {
        return this.status;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("deploymentTargetId", this.deploymentTargetId);
        jsonWriter.writeStringField("status", this.status == null ? null : this.status.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DevCenterEnvironmentType from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of DevCenterEnvironmentType if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DevCenterEnvironmentType.
     */
    @Generated
    public static DevCenterEnvironmentType fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String name = null;
            String deploymentTargetId = null;
            EnvironmentTypeStatus status = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("name".equals(fieldName)) {
                    name = reader.getString();
                } else if ("deploymentTargetId".equals(fieldName)) {
                    deploymentTargetId = reader.getString();
                } else if ("status".equals(fieldName)) {
                    status = EnvironmentTypeStatus.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            return new DevCenterEnvironmentType(name, deploymentTargetId, status);
        });
    }
}
