// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.developer.devcenter.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Properties of an Environment Definition parameter.
 */
@Immutable
public final class EnvironmentDefinitionParameter implements JsonSerializable<EnvironmentDefinitionParameter> {

    /*
     * Unique ID of the parameter.
     */
    @Generated
    private final String id;

    /*
     * Display name of the parameter.
     */
    @Generated
    private String name;

    /*
     * Description of the parameter.
     */
    @Generated
    private String description;

    /*
     * Default value of the parameter.
     */
    @Generated
    private String defaultValue;

    /*
     * A string of one of the basic JSON types (number, integer, array, object,
     * boolean, string).
     */
    @Generated
    private final EnvironmentDefinitionParameterType parameterType;

    /*
     * Whether or not this parameter is read-only. If true, default should have a
     * value.
     */
    @Generated
    private Boolean readOnly;

    /*
     * Whether or not this parameter is required.
     */
    @Generated
    private final boolean required;

    /*
     * An array of allowed values.
     */
    @Generated
    private List<String> allowed;

    /**
     * Creates an instance of EnvironmentDefinitionParameter class.
     *
     * @param id the id value to set.
     * @param parameterType the parameterType value to set.
     * @param required the required value to set.
     */
    @Generated
    private EnvironmentDefinitionParameter(String id, EnvironmentDefinitionParameterType parameterType,
        boolean required) {
        this.id = id;
        this.parameterType = parameterType;
        this.required = required;
    }

    /**
     * Get the id property: Unique ID of the parameter.
     *
     * @return the id value.
     */
    @Generated
    public String getId() {
        return this.id;
    }

    /**
     * Get the name property: Display name of the parameter.
     *
     * @return the name value.
     */
    @Generated
    public String getName() {
        return this.name;
    }

    /**
     * Get the description property: Description of the parameter.
     *
     * @return the description value.
     */
    @Generated
    public String getDescription() {
        return this.description;
    }

    /**
     * Get the defaultValue property: Default value of the parameter.
     *
     * @return the defaultValue value.
     */
    @Generated
    public String getDefaultValue() {
        return this.defaultValue;
    }

    /**
     * Get the parameterType property: A string of one of the basic JSON types (number, integer, array, object,
     * boolean, string).
     *
     * @return the parameterType value.
     */
    @Generated
    public EnvironmentDefinitionParameterType getParameterType() {
        return this.parameterType;
    }

    /**
     * Get the readOnly property: Whether or not this parameter is read-only. If true, default should have a
     * value.
     *
     * @return the readOnly value.
     */
    @Generated
    public Boolean isReadOnly() {
        return this.readOnly;
    }

    /**
     * Get the required property: Whether or not this parameter is required.
     *
     * @return the required value.
     */
    @Generated
    public boolean isRequired() {
        return this.required;
    }

    /**
     * Get the allowed property: An array of allowed values.
     *
     * @return the allowed value.
     */
    @Generated
    public List<String> getAllowed() {
        return this.allowed;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeStringField("type", this.parameterType == null ? null : this.parameterType.toString());
        jsonWriter.writeBooleanField("required", this.required);
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeStringField("default", this.defaultValue);
        jsonWriter.writeBooleanField("readOnly", this.readOnly);
        jsonWriter.writeArrayField("allowed", this.allowed, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EnvironmentDefinitionParameter from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of EnvironmentDefinitionParameter if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the EnvironmentDefinitionParameter.
     */
    @Generated
    public static EnvironmentDefinitionParameter fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String id = null;
            EnvironmentDefinitionParameterType parameterType = null;
            boolean required = false;
            String name = null;
            String description = null;
            String defaultValue = null;
            Boolean readOnly = null;
            List<String> allowed = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("id".equals(fieldName)) {
                    id = reader.getString();
                } else if ("type".equals(fieldName)) {
                    parameterType = EnvironmentDefinitionParameterType.fromString(reader.getString());
                } else if ("required".equals(fieldName)) {
                    required = reader.getBoolean();
                } else if ("name".equals(fieldName)) {
                    name = reader.getString();
                } else if ("description".equals(fieldName)) {
                    description = reader.getString();
                } else if ("default".equals(fieldName)) {
                    defaultValue = reader.getString();
                } else if ("readOnly".equals(fieldName)) {
                    readOnly = reader.getNullable(JsonReader::getBoolean);
                } else if ("allowed".equals(fieldName)) {
                    allowed = reader.readArray(reader1 -> reader1.getString());
                } else {
                    reader.skipChildren();
                }
            }
            EnvironmentDefinitionParameter deserializedEnvironmentDefinitionParameter
                = new EnvironmentDefinitionParameter(id, parameterType, required);
            deserializedEnvironmentDefinitionParameter.name = name;
            deserializedEnvironmentDefinitionParameter.description = description;
            deserializedEnvironmentDefinitionParameter.defaultValue = defaultValue;
            deserializedEnvironmentDefinitionParameter.readOnly = readOnly;
            deserializedEnvironmentDefinitionParameter.allowed = allowed;
            return deserializedEnvironmentDefinitionParameter;
        });
    }
}
