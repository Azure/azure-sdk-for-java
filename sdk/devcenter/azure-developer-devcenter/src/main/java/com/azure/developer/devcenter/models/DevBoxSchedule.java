// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.developer.devcenter.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.LocalTime;

/**
 * A Schedule to execute action.
 */
@Immutable
public final class DevBoxSchedule implements JsonSerializable<DevBoxSchedule> {

    /*
     * Display name for the Schedule.
     */
    @Generated
    private String name;

    /*
     * Supported type this scheduled task represents.
     */
    @Generated
    private final ScheduleType scheduleType;

    /*
     * The frequency of this scheduled task.
     */
    @Generated
    private final ScheduleFrequency scheduleFrequency;

    /*
     * The target time to trigger the action. The format is HH:MM.
     */
    private final LocalTime time;

    /*
     * The IANA timezone id at which the schedule should execute.
     */
    @Generated
    private final String timeZone;

    /**
     * Creates an instance of DevBoxSchedule class.
     *
     * @param scheduleType the scheduleType value to set.
     * @param scheduleFrequency the scheduleFrequency value to set.
     * @param time the time value to set.
     * @param timeZone the timeZone value to set.
     */
    private DevBoxSchedule(ScheduleType scheduleType, ScheduleFrequency scheduleFrequency, LocalTime time,
        String timeZone) {
        this.scheduleType = scheduleType;
        this.scheduleFrequency = scheduleFrequency;
        this.time = time;
        this.timeZone = timeZone;
    }

    /**
     * Get the name property: Display name for the Schedule.
     *
     * @return the name value.
     */
    @Generated
    public String getName() {
        return this.name;
    }

    /**
     * Get the scheduleType property: Supported type this scheduled task represents.
     *
     * @return the scheduleType value.
     */
    @Generated
    public ScheduleType getScheduleType() {
        return this.scheduleType;
    }

    /**
     * Get the scheduleFrequency property: The frequency of this scheduled task.
     *
     * @return the scheduleFrequency value.
     */
    @Generated
    public ScheduleFrequency getScheduleFrequency() {
        return this.scheduleFrequency;
    }

    /**
     * Get the time property: The target time to trigger the action. The format is HH:MM.
     *
     * @return the time value.
     */
    public LocalTime getTime() {
        return this.time;
    }

    /**
     * Get the timeZone property: The IANA timezone id at which the schedule should execute.
     *
     * @return the timeZone value.
     */
    @Generated
    public String getTimeZone() {
        return this.timeZone;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.scheduleType == null ? null : this.scheduleType.toString());
        jsonWriter.writeStringField("frequency",
            this.scheduleFrequency == null ? null : this.scheduleFrequency.toString());
        jsonWriter.writeStringField("time", this.time.toString());
        jsonWriter.writeStringField("timeZone", this.timeZone);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DevBoxSchedule from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of DevBoxSchedule if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DevBoxSchedule.
     */
    public static DevBoxSchedule fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String name = null;
            ScheduleType scheduleType = null;
            ScheduleFrequency scheduleFrequency = null;
            LocalTime time = null;
            String timeZone = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("name".equals(fieldName)) {
                    name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    scheduleType = ScheduleType.fromString(reader.getString());
                } else if ("frequency".equals(fieldName)) {
                    scheduleFrequency = ScheduleFrequency.fromString(reader.getString());
                } else if ("time".equals(fieldName)) {
                    time = reader.getNullable(nonNullReader -> LocalTime.parse(nonNullReader.getString()));
                } else if ("timeZone".equals(fieldName)) {
                    timeZone = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            DevBoxSchedule deserializedDevBoxSchedule
                = new DevBoxSchedule(scheduleType, scheduleFrequency, time, timeZone);
            deserializedDevBoxSchedule.name = name;
            return deserializedDevBoxSchedule;
        });
    }
}
