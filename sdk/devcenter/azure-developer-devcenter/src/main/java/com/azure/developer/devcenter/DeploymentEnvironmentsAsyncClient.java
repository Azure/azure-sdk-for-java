// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.developer.devcenter;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.developer.devcenter.implementation.DeploymentEnvironmentsClientImpl;
import com.azure.developer.devcenter.models.Catalog;
import com.azure.developer.devcenter.models.Environment;
import com.azure.developer.devcenter.models.EnvironmentDefinition;
import com.azure.developer.devcenter.models.EnvironmentType;
import com.azure.developer.devcenter.models.OperationStatus;
import java.util.stream.Collectors;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * Initializes a new instance of the asynchronous DeploymentEnvironmentsClient type.
 */
@ServiceClient(builder = DeploymentEnvironmentsClientBuilder.class, isAsync = true)
public final class DeploymentEnvironmentsAsyncClient {
    @Generated
    private final DeploymentEnvironmentsClientImpl serviceClient;

    /**
     * Initializes an instance of DeploymentEnvironmentsAsyncClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    DeploymentEnvironmentsAsyncClient(DeploymentEnvironmentsClientImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Lists the environments for a project.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>top</td>
     * <td>Integer</td>
     * <td>No</td>
     * <td>The maximum number of resources to return from the operation. Example: 'top=10'.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     parameters: Object (Optional)
     *     name: String (Optional)
     *     environmentType: String (Required)
     *     user: String (Optional)
     *     provisioningState: String (Optional)
     *     resourceGroupId: String (Optional)
     *     catalogName: String (Required)
     *     environmentDefinitionName: String (Required)
     *     error (Optional): {
     *         code: String (Required)
     *         message: String (Required)
     *         target: String (Optional)
     *         details (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         innererror (Optional): {
     *             code: String (Optional)
     *             innererror (Optional): (recursive schema, see innererror above)
     *         }
     *     }
     * }
     * }</pre>
     * 
     * @param projectName The DevCenter Project upon which to execute operations.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return results of the environment list operation as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listAllEnvironments(String projectName, RequestOptions requestOptions) {
        return this.serviceClient.listAllEnvironmentsAsync(projectName, requestOptions);
    }

    /**
     * Lists the environments for a project and user.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>top</td>
     * <td>Integer</td>
     * <td>No</td>
     * <td>The maximum number of resources to return from the operation. Example: 'top=10'.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     parameters: Object (Optional)
     *     name: String (Optional)
     *     environmentType: String (Required)
     *     user: String (Optional)
     *     provisioningState: String (Optional)
     *     resourceGroupId: String (Optional)
     *     catalogName: String (Required)
     *     environmentDefinitionName: String (Required)
     *     error (Optional): {
     *         code: String (Required)
     *         message: String (Required)
     *         target: String (Optional)
     *         details (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         innererror (Optional): {
     *             code: String (Optional)
     *             innererror (Optional): (recursive schema, see innererror above)
     *         }
     *     }
     * }
     * }</pre>
     * 
     * @param projectName The DevCenter Project upon which to execute operations.
     * @param userId The AAD object id of the user. If value is 'me', the identity is taken from the authentication
     * context.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return results of the environment list operation as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listEnvironments(String projectName, String userId, RequestOptions requestOptions) {
        return this.serviceClient.listEnvironmentsAsync(projectName, userId, requestOptions);
    }

    /**
     * Gets an environment.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     parameters: Object (Optional)
     *     name: String (Optional)
     *     environmentType: String (Required)
     *     user: String (Optional)
     *     provisioningState: String (Optional)
     *     resourceGroupId: String (Optional)
     *     catalogName: String (Required)
     *     environmentDefinitionName: String (Required)
     *     error (Optional): {
     *         code: String (Required)
     *         message: String (Required)
     *         target: String (Optional)
     *         details (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         innererror (Optional): {
     *             code: String (Optional)
     *             innererror (Optional): (recursive schema, see innererror above)
     *         }
     *     }
     * }
     * }</pre>
     * 
     * @param projectName The DevCenter Project upon which to execute operations.
     * @param userId The AAD object id of the user. If value is 'me', the identity is taken from the authentication
     * context.
     * @param environmentName The name of the environment.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return an environment along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getEnvironmentWithResponse(String projectName, String userId,
        String environmentName, RequestOptions requestOptions) {
        return this.serviceClient.getEnvironmentWithResponseAsync(projectName, userId, environmentName, requestOptions);
    }

    /**
     * Creates or updates an environment.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     parameters: Object (Optional)
     *     name: String (Optional)
     *     environmentType: String (Required)
     *     user: String (Optional)
     *     provisioningState: String (Optional)
     *     resourceGroupId: String (Optional)
     *     catalogName: String (Required)
     *     environmentDefinitionName: String (Required)
     *     error (Optional): {
     *         code: String (Required)
     *         message: String (Required)
     *         target: String (Optional)
     *         details (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         innererror (Optional): {
     *             code: String (Optional)
     *             innererror (Optional): (recursive schema, see innererror above)
     *         }
     *     }
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     parameters: Object (Optional)
     *     name: String (Optional)
     *     environmentType: String (Required)
     *     user: String (Optional)
     *     provisioningState: String (Optional)
     *     resourceGroupId: String (Optional)
     *     catalogName: String (Required)
     *     environmentDefinitionName: String (Required)
     *     error (Optional): {
     *         code: String (Required)
     *         message: String (Required)
     *         target: String (Optional)
     *         details (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         innererror (Optional): {
     *             code: String (Optional)
     *             innererror (Optional): (recursive schema, see innererror above)
     *         }
     *     }
     * }
     * }</pre>
     * 
     * @param projectName The DevCenter Project upon which to execute operations.
     * @param userId The AAD object id of the user. If value is 'me', the identity is taken from the authentication
     * context.
     * @param environmentName The name of the environment.
     * @param body Represents an environment.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of properties of an environment.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<BinaryData, BinaryData> beginCreateOrUpdateEnvironment(String projectName, String userId,
        String environmentName, BinaryData body, RequestOptions requestOptions) {
        return this.serviceClient.beginCreateOrUpdateEnvironmentAsync(projectName, userId, environmentName, body,
            requestOptions);
    }

    /**
     * Deletes an environment and all its associated resources.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     name: String (Optional)
     *     status: String(Running/Completed/Canceled/Failed) (Required)
     *     resourceId: String (Optional)
     *     startTime: OffsetDateTime (Optional)
     *     endTime: OffsetDateTime (Optional)
     *     percentComplete: Double (Optional)
     *     properties: Object (Optional)
     *     error (Optional): {
     *         code: String (Optional)
     *         message: String (Optional)
     *     }
     * }
     * }</pre>
     * 
     * @param projectName The DevCenter Project upon which to execute operations.
     * @param userId The AAD object id of the user. If value is 'me', the identity is taken from the authentication
     * context.
     * @param environmentName The name of the environment.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of the current status of an async operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<BinaryData, Void> beginDeleteEnvironment(String projectName, String userId,
        String environmentName, RequestOptions requestOptions) {
        return this.serviceClient.beginDeleteEnvironmentAsync(projectName, userId, environmentName, requestOptions);
    }

    /**
     * Lists all of the catalogs available for a project.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>top</td>
     * <td>Integer</td>
     * <td>No</td>
     * <td>The maximum number of resources to return from the operation. Example: 'top=10'.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     name: String (Required)
     * }
     * }</pre>
     * 
     * @param projectName The DevCenter Project upon which to execute operations.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return results of the catalog list operation as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listCatalogs(String projectName, RequestOptions requestOptions) {
        return this.serviceClient.listCatalogsAsync(projectName, requestOptions);
    }

    /**
     * Gets the specified catalog within the project.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     name: String (Required)
     * }
     * }</pre>
     * 
     * @param projectName The DevCenter Project upon which to execute operations.
     * @param catalogName The name of the catalog.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the specified catalog within the project along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getCatalogWithResponse(String projectName, String catalogName,
        RequestOptions requestOptions) {
        return this.serviceClient.getCatalogWithResponseAsync(projectName, catalogName, requestOptions);
    }

    /**
     * Lists all environment definitions available for a project.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>top</td>
     * <td>Integer</td>
     * <td>No</td>
     * <td>The maximum number of resources to return from the operation. Example: 'top=10'.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     id: String (Required)
     *     name: String (Required)
     *     catalogName: String (Required)
     *     description: String (Optional)
     *     parameters (Optional): [
     *          (Optional){
     *             id: String (Required)
     *             name: String (Optional)
     *             description: String (Optional)
     *             default: String (Optional)
     *             type: String(array/boolean/integer/number/object/string) (Required)
     *             readOnly: Boolean (Optional)
     *             required: boolean (Required)
     *             allowed (Optional): [
     *                 String (Optional)
     *             ]
     *         }
     *     ]
     *     parametersSchema: String (Optional)
     *     templatePath: String (Optional)
     * }
     * }</pre>
     * 
     * @param projectName The DevCenter Project upon which to execute operations.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return results of the environment definition list operation as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listEnvironmentDefinitions(String projectName, RequestOptions requestOptions) {
        return this.serviceClient.listEnvironmentDefinitionsAsync(projectName, requestOptions);
    }

    /**
     * Lists all environment definitions available within a catalog.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>top</td>
     * <td>Integer</td>
     * <td>No</td>
     * <td>The maximum number of resources to return from the operation. Example: 'top=10'.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     id: String (Required)
     *     name: String (Required)
     *     catalogName: String (Required)
     *     description: String (Optional)
     *     parameters (Optional): [
     *          (Optional){
     *             id: String (Required)
     *             name: String (Optional)
     *             description: String (Optional)
     *             default: String (Optional)
     *             type: String(array/boolean/integer/number/object/string) (Required)
     *             readOnly: Boolean (Optional)
     *             required: boolean (Required)
     *             allowed (Optional): [
     *                 String (Optional)
     *             ]
     *         }
     *     ]
     *     parametersSchema: String (Optional)
     *     templatePath: String (Optional)
     * }
     * }</pre>
     * 
     * @param projectName The DevCenter Project upon which to execute operations.
     * @param catalogName The name of the catalog.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return results of the environment definition list operation as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listEnvironmentDefinitionsByCatalog(String projectName, String catalogName,
        RequestOptions requestOptions) {
        return this.serviceClient.listEnvironmentDefinitionsByCatalogAsync(projectName, catalogName, requestOptions);
    }

    /**
     * Get an environment definition from a catalog.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     id: String (Required)
     *     name: String (Required)
     *     catalogName: String (Required)
     *     description: String (Optional)
     *     parameters (Optional): [
     *          (Optional){
     *             id: String (Required)
     *             name: String (Optional)
     *             description: String (Optional)
     *             default: String (Optional)
     *             type: String(array/boolean/integer/number/object/string) (Required)
     *             readOnly: Boolean (Optional)
     *             required: boolean (Required)
     *             allowed (Optional): [
     *                 String (Optional)
     *             ]
     *         }
     *     ]
     *     parametersSchema: String (Optional)
     *     templatePath: String (Optional)
     * }
     * }</pre>
     * 
     * @param projectName The DevCenter Project upon which to execute operations.
     * @param catalogName The name of the catalog.
     * @param definitionName The name of the environment definition.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return an environment definition from a catalog along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getEnvironmentDefinitionWithResponse(String projectName, String catalogName,
        String definitionName, RequestOptions requestOptions) {
        return this.serviceClient.getEnvironmentDefinitionWithResponseAsync(projectName, catalogName, definitionName,
            requestOptions);
    }

    /**
     * Lists all environment types configured for a project.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>top</td>
     * <td>Integer</td>
     * <td>No</td>
     * <td>The maximum number of resources to return from the operation. Example: 'top=10'.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     name: String (Required)
     *     deploymentTargetId: String (Required)
     *     status: String(Enabled/Disabled) (Required)
     * }
     * }</pre>
     * 
     * @param projectName The DevCenter Project upon which to execute operations.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return result of the environment type list operation as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listEnvironmentTypes(String projectName, RequestOptions requestOptions) {
        return this.serviceClient.listEnvironmentTypesAsync(projectName, requestOptions);
    }

    /**
     * Lists the environments for a project.
     * 
     * @param projectName The DevCenter Project upon which to execute operations.
     * @param top The maximum number of resources to return from the operation. Example: 'top=10'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return results of the environment list operation as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<Environment> listAllEnvironments(String projectName, Integer top) {
        // Generated convenience method for listAllEnvironments
        RequestOptions requestOptions = new RequestOptions();
        if (top != null) {
            requestOptions.addQueryParam("top", String.valueOf(top), false);
        }
        PagedFlux<BinaryData> pagedFluxResponse = listAllEnvironments(projectName, requestOptions);
        return PagedFlux.create(() -> (continuationToken, pageSize) -> {
            Flux<PagedResponse<BinaryData>> flux = (continuationToken == null) ? pagedFluxResponse.byPage().take(1)
                : pagedFluxResponse.byPage(continuationToken).take(1);
            return flux.map(pagedResponse -> new PagedResponseBase<Void, Environment>(pagedResponse.getRequest(),
                pagedResponse.getStatusCode(), pagedResponse.getHeaders(),
                pagedResponse.getValue().stream()
                    .map(protocolMethodData -> protocolMethodData.toObject(Environment.class))
                    .collect(Collectors.toList()),
                pagedResponse.getContinuationToken(), null));
        });
    }

    /**
     * Lists the environments for a project.
     * 
     * @param projectName The DevCenter Project upon which to execute operations.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return results of the environment list operation as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<Environment> listAllEnvironments(String projectName) {
        // Generated convenience method for listAllEnvironments
        RequestOptions requestOptions = new RequestOptions();
        PagedFlux<BinaryData> pagedFluxResponse = listAllEnvironments(projectName, requestOptions);
        return PagedFlux.create(() -> (continuationToken, pageSize) -> {
            Flux<PagedResponse<BinaryData>> flux = (continuationToken == null) ? pagedFluxResponse.byPage().take(1)
                : pagedFluxResponse.byPage(continuationToken).take(1);
            return flux.map(pagedResponse -> new PagedResponseBase<Void, Environment>(pagedResponse.getRequest(),
                pagedResponse.getStatusCode(), pagedResponse.getHeaders(),
                pagedResponse.getValue().stream()
                    .map(protocolMethodData -> protocolMethodData.toObject(Environment.class))
                    .collect(Collectors.toList()),
                pagedResponse.getContinuationToken(), null));
        });
    }

    /**
     * Lists the environments for a project and user.
     * 
     * @param projectName The DevCenter Project upon which to execute operations.
     * @param userId The AAD object id of the user. If value is 'me', the identity is taken from the authentication
     * context.
     * @param top The maximum number of resources to return from the operation. Example: 'top=10'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return results of the environment list operation as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<Environment> listEnvironments(String projectName, String userId, Integer top) {
        // Generated convenience method for listEnvironments
        RequestOptions requestOptions = new RequestOptions();
        if (top != null) {
            requestOptions.addQueryParam("top", String.valueOf(top), false);
        }
        PagedFlux<BinaryData> pagedFluxResponse = listEnvironments(projectName, userId, requestOptions);
        return PagedFlux.create(() -> (continuationToken, pageSize) -> {
            Flux<PagedResponse<BinaryData>> flux = (continuationToken == null) ? pagedFluxResponse.byPage().take(1)
                : pagedFluxResponse.byPage(continuationToken).take(1);
            return flux.map(pagedResponse -> new PagedResponseBase<Void, Environment>(pagedResponse.getRequest(),
                pagedResponse.getStatusCode(), pagedResponse.getHeaders(),
                pagedResponse.getValue().stream()
                    .map(protocolMethodData -> protocolMethodData.toObject(Environment.class))
                    .collect(Collectors.toList()),
                pagedResponse.getContinuationToken(), null));
        });
    }

    /**
     * Lists the environments for a project and user.
     * 
     * @param projectName The DevCenter Project upon which to execute operations.
     * @param userId The AAD object id of the user. If value is 'me', the identity is taken from the authentication
     * context.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return results of the environment list operation as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<Environment> listEnvironments(String projectName, String userId) {
        // Generated convenience method for listEnvironments
        RequestOptions requestOptions = new RequestOptions();
        PagedFlux<BinaryData> pagedFluxResponse = listEnvironments(projectName, userId, requestOptions);
        return PagedFlux.create(() -> (continuationToken, pageSize) -> {
            Flux<PagedResponse<BinaryData>> flux = (continuationToken == null) ? pagedFluxResponse.byPage().take(1)
                : pagedFluxResponse.byPage(continuationToken).take(1);
            return flux.map(pagedResponse -> new PagedResponseBase<Void, Environment>(pagedResponse.getRequest(),
                pagedResponse.getStatusCode(), pagedResponse.getHeaders(),
                pagedResponse.getValue().stream()
                    .map(protocolMethodData -> protocolMethodData.toObject(Environment.class))
                    .collect(Collectors.toList()),
                pagedResponse.getContinuationToken(), null));
        });
    }

    /**
     * Gets an environment.
     * 
     * @param projectName The DevCenter Project upon which to execute operations.
     * @param userId The AAD object id of the user. If value is 'me', the identity is taken from the authentication
     * context.
     * @param environmentName The name of the environment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an environment on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Environment> getEnvironment(String projectName, String userId, String environmentName) {
        // Generated convenience method for getEnvironmentWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getEnvironmentWithResponse(projectName, userId, environmentName, requestOptions)
            .flatMap(FluxUtil::toMono).map(protocolMethodData -> protocolMethodData.toObject(Environment.class));
    }

    /**
     * Creates or updates an environment.
     * 
     * @param projectName The DevCenter Project upon which to execute operations.
     * @param userId The AAD object id of the user. If value is 'me', the identity is taken from the authentication
     * context.
     * @param environmentName The name of the environment.
     * @param body Represents an environment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of properties of an environment.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<OperationStatus, Environment> beginCreateOrUpdateEnvironment(String projectName, String userId,
        String environmentName, Environment body) {
        // Generated convenience method for beginCreateOrUpdateEnvironmentWithModel
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.beginCreateOrUpdateEnvironmentWithModelAsync(projectName, userId, environmentName,
            BinaryData.fromObject(body), requestOptions);
    }

    /**
     * Deletes an environment and all its associated resources.
     * 
     * @param projectName The DevCenter Project upon which to execute operations.
     * @param userId The AAD object id of the user. If value is 'me', the identity is taken from the authentication
     * context.
     * @param environmentName The name of the environment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of the current status of an async operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<OperationStatus, Void> beginDeleteEnvironment(String projectName, String userId,
        String environmentName) {
        // Generated convenience method for beginDeleteEnvironmentWithModel
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.beginDeleteEnvironmentWithModelAsync(projectName, userId, environmentName, requestOptions);
    }

    /**
     * Lists all of the catalogs available for a project.
     * 
     * @param projectName The DevCenter Project upon which to execute operations.
     * @param top The maximum number of resources to return from the operation. Example: 'top=10'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return results of the catalog list operation as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<Catalog> listCatalogs(String projectName, Integer top) {
        // Generated convenience method for listCatalogs
        RequestOptions requestOptions = new RequestOptions();
        if (top != null) {
            requestOptions.addQueryParam("top", String.valueOf(top), false);
        }
        PagedFlux<BinaryData> pagedFluxResponse = listCatalogs(projectName, requestOptions);
        return PagedFlux.create(() -> (continuationToken, pageSize) -> {
            Flux<PagedResponse<BinaryData>> flux = (continuationToken == null) ? pagedFluxResponse.byPage().take(1)
                : pagedFluxResponse.byPage(continuationToken).take(1);
            return flux.map(pagedResponse -> new PagedResponseBase<Void, Catalog>(pagedResponse.getRequest(),
                pagedResponse.getStatusCode(), pagedResponse.getHeaders(), pagedResponse.getValue().stream()
                    .map(protocolMethodData -> protocolMethodData.toObject(Catalog.class)).collect(Collectors.toList()),
                pagedResponse.getContinuationToken(), null));
        });
    }

    /**
     * Lists all of the catalogs available for a project.
     * 
     * @param projectName The DevCenter Project upon which to execute operations.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return results of the catalog list operation as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<Catalog> listCatalogs(String projectName) {
        // Generated convenience method for listCatalogs
        RequestOptions requestOptions = new RequestOptions();
        PagedFlux<BinaryData> pagedFluxResponse = listCatalogs(projectName, requestOptions);
        return PagedFlux.create(() -> (continuationToken, pageSize) -> {
            Flux<PagedResponse<BinaryData>> flux = (continuationToken == null) ? pagedFluxResponse.byPage().take(1)
                : pagedFluxResponse.byPage(continuationToken).take(1);
            return flux.map(pagedResponse -> new PagedResponseBase<Void, Catalog>(pagedResponse.getRequest(),
                pagedResponse.getStatusCode(), pagedResponse.getHeaders(), pagedResponse.getValue().stream()
                    .map(protocolMethodData -> protocolMethodData.toObject(Catalog.class)).collect(Collectors.toList()),
                pagedResponse.getContinuationToken(), null));
        });
    }

    /**
     * Gets the specified catalog within the project.
     * 
     * @param projectName The DevCenter Project upon which to execute operations.
     * @param catalogName The name of the catalog.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the specified catalog within the project on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Catalog> getCatalog(String projectName, String catalogName) {
        // Generated convenience method for getCatalogWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getCatalogWithResponse(projectName, catalogName, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(Catalog.class));
    }

    /**
     * Lists all environment definitions available for a project.
     * 
     * @param projectName The DevCenter Project upon which to execute operations.
     * @param top The maximum number of resources to return from the operation. Example: 'top=10'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return results of the environment definition list operation as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<EnvironmentDefinition> listEnvironmentDefinitions(String projectName, Integer top) {
        // Generated convenience method for listEnvironmentDefinitions
        RequestOptions requestOptions = new RequestOptions();
        if (top != null) {
            requestOptions.addQueryParam("top", String.valueOf(top), false);
        }
        PagedFlux<BinaryData> pagedFluxResponse = listEnvironmentDefinitions(projectName, requestOptions);
        return PagedFlux.create(() -> (continuationToken, pageSize) -> {
            Flux<PagedResponse<BinaryData>> flux = (continuationToken == null) ? pagedFluxResponse.byPage().take(1)
                : pagedFluxResponse.byPage(continuationToken).take(1);
            return flux
                .map(pagedResponse -> new PagedResponseBase<Void, EnvironmentDefinition>(pagedResponse.getRequest(),
                    pagedResponse.getStatusCode(), pagedResponse.getHeaders(),
                    pagedResponse.getValue().stream()
                        .map(protocolMethodData -> protocolMethodData.toObject(EnvironmentDefinition.class))
                        .collect(Collectors.toList()),
                    pagedResponse.getContinuationToken(), null));
        });
    }

    /**
     * Lists all environment definitions available for a project.
     * 
     * @param projectName The DevCenter Project upon which to execute operations.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return results of the environment definition list operation as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<EnvironmentDefinition> listEnvironmentDefinitions(String projectName) {
        // Generated convenience method for listEnvironmentDefinitions
        RequestOptions requestOptions = new RequestOptions();
        PagedFlux<BinaryData> pagedFluxResponse = listEnvironmentDefinitions(projectName, requestOptions);
        return PagedFlux.create(() -> (continuationToken, pageSize) -> {
            Flux<PagedResponse<BinaryData>> flux = (continuationToken == null) ? pagedFluxResponse.byPage().take(1)
                : pagedFluxResponse.byPage(continuationToken).take(1);
            return flux
                .map(pagedResponse -> new PagedResponseBase<Void, EnvironmentDefinition>(pagedResponse.getRequest(),
                    pagedResponse.getStatusCode(), pagedResponse.getHeaders(),
                    pagedResponse.getValue().stream()
                        .map(protocolMethodData -> protocolMethodData.toObject(EnvironmentDefinition.class))
                        .collect(Collectors.toList()),
                    pagedResponse.getContinuationToken(), null));
        });
    }

    /**
     * Lists all environment definitions available within a catalog.
     * 
     * @param projectName The DevCenter Project upon which to execute operations.
     * @param catalogName The name of the catalog.
     * @param top The maximum number of resources to return from the operation. Example: 'top=10'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return results of the environment definition list operation as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<EnvironmentDefinition> listEnvironmentDefinitionsByCatalog(String projectName, String catalogName,
        Integer top) {
        // Generated convenience method for listEnvironmentDefinitionsByCatalog
        RequestOptions requestOptions = new RequestOptions();
        if (top != null) {
            requestOptions.addQueryParam("top", String.valueOf(top), false);
        }
        PagedFlux<BinaryData> pagedFluxResponse
            = listEnvironmentDefinitionsByCatalog(projectName, catalogName, requestOptions);
        return PagedFlux.create(() -> (continuationToken, pageSize) -> {
            Flux<PagedResponse<BinaryData>> flux = (continuationToken == null) ? pagedFluxResponse.byPage().take(1)
                : pagedFluxResponse.byPage(continuationToken).take(1);
            return flux
                .map(pagedResponse -> new PagedResponseBase<Void, EnvironmentDefinition>(pagedResponse.getRequest(),
                    pagedResponse.getStatusCode(), pagedResponse.getHeaders(),
                    pagedResponse.getValue().stream()
                        .map(protocolMethodData -> protocolMethodData.toObject(EnvironmentDefinition.class))
                        .collect(Collectors.toList()),
                    pagedResponse.getContinuationToken(), null));
        });
    }

    /**
     * Lists all environment definitions available within a catalog.
     * 
     * @param projectName The DevCenter Project upon which to execute operations.
     * @param catalogName The name of the catalog.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return results of the environment definition list operation as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<EnvironmentDefinition> listEnvironmentDefinitionsByCatalog(String projectName,
        String catalogName) {
        // Generated convenience method for listEnvironmentDefinitionsByCatalog
        RequestOptions requestOptions = new RequestOptions();
        PagedFlux<BinaryData> pagedFluxResponse
            = listEnvironmentDefinitionsByCatalog(projectName, catalogName, requestOptions);
        return PagedFlux.create(() -> (continuationToken, pageSize) -> {
            Flux<PagedResponse<BinaryData>> flux = (continuationToken == null) ? pagedFluxResponse.byPage().take(1)
                : pagedFluxResponse.byPage(continuationToken).take(1);
            return flux
                .map(pagedResponse -> new PagedResponseBase<Void, EnvironmentDefinition>(pagedResponse.getRequest(),
                    pagedResponse.getStatusCode(), pagedResponse.getHeaders(),
                    pagedResponse.getValue().stream()
                        .map(protocolMethodData -> protocolMethodData.toObject(EnvironmentDefinition.class))
                        .collect(Collectors.toList()),
                    pagedResponse.getContinuationToken(), null));
        });
    }

    /**
     * Get an environment definition from a catalog.
     * 
     * @param projectName The DevCenter Project upon which to execute operations.
     * @param catalogName The name of the catalog.
     * @param definitionName The name of the environment definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an environment definition from a catalog on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<EnvironmentDefinition> getEnvironmentDefinition(String projectName, String catalogName,
        String definitionName) {
        // Generated convenience method for getEnvironmentDefinitionWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getEnvironmentDefinitionWithResponse(projectName, catalogName, definitionName, requestOptions)
            .flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(EnvironmentDefinition.class));
    }

    /**
     * Lists all environment types configured for a project.
     * 
     * @param projectName The DevCenter Project upon which to execute operations.
     * @param top The maximum number of resources to return from the operation. Example: 'top=10'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of the environment type list operation as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<EnvironmentType> listEnvironmentTypes(String projectName, Integer top) {
        // Generated convenience method for listEnvironmentTypes
        RequestOptions requestOptions = new RequestOptions();
        if (top != null) {
            requestOptions.addQueryParam("top", String.valueOf(top), false);
        }
        PagedFlux<BinaryData> pagedFluxResponse = listEnvironmentTypes(projectName, requestOptions);
        return PagedFlux.create(() -> (continuationToken, pageSize) -> {
            Flux<PagedResponse<BinaryData>> flux = (continuationToken == null) ? pagedFluxResponse.byPage().take(1)
                : pagedFluxResponse.byPage(continuationToken).take(1);
            return flux.map(pagedResponse -> new PagedResponseBase<Void, EnvironmentType>(pagedResponse.getRequest(),
                pagedResponse.getStatusCode(), pagedResponse.getHeaders(),
                pagedResponse.getValue().stream()
                    .map(protocolMethodData -> protocolMethodData.toObject(EnvironmentType.class))
                    .collect(Collectors.toList()),
                pagedResponse.getContinuationToken(), null));
        });
    }

    /**
     * Lists all environment types configured for a project.
     * 
     * @param projectName The DevCenter Project upon which to execute operations.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of the environment type list operation as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<EnvironmentType> listEnvironmentTypes(String projectName) {
        // Generated convenience method for listEnvironmentTypes
        RequestOptions requestOptions = new RequestOptions();
        PagedFlux<BinaryData> pagedFluxResponse = listEnvironmentTypes(projectName, requestOptions);
        return PagedFlux.create(() -> (continuationToken, pageSize) -> {
            Flux<PagedResponse<BinaryData>> flux = (continuationToken == null) ? pagedFluxResponse.byPage().take(1)
                : pagedFluxResponse.byPage(continuationToken).take(1);
            return flux.map(pagedResponse -> new PagedResponseBase<Void, EnvironmentType>(pagedResponse.getRequest(),
                pagedResponse.getStatusCode(), pagedResponse.getHeaders(),
                pagedResponse.getValue().stream()
                    .map(protocolMethodData -> protocolMethodData.toObject(EnvironmentType.class))
                    .collect(Collectors.toList()),
                pagedResponse.getContinuationToken(), null));
        });
    }
}
