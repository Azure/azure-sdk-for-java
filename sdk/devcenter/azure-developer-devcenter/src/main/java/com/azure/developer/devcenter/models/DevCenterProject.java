// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.developer.devcenter.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Project details.
 */
@Immutable
public final class DevCenterProject implements JsonSerializable<DevCenterProject> {

    /*
     * Name of the project.
     */
    @Generated
    private String name;

    /*
     * Description of the project.
     */
    @Generated
    private String description;

    /*
     * When specified, indicates the maximum number of Dev Boxes a single user can
     * create across all pools in the project.
     */
    @Generated
    private Integer maxDevBoxesPerUser;

    /**
     * Creates an instance of DevCenterProject class.
     */
    @Generated
    private DevCenterProject() {
    }

    /**
     * Get the name property: Name of the project.
     *
     * @return the name value.
     */
    @Generated
    public String getName() {
        return this.name;
    }

    /**
     * Get the description property: Description of the project.
     *
     * @return the description value.
     */
    @Generated
    public String getDescription() {
        return this.description;
    }

    /**
     * Get the maxDevBoxesPerUser property: When specified, indicates the maximum number of Dev Boxes a single user can
     * create across all pools in the project.
     *
     * @return the maxDevBoxesPerUser value.
     */
    @Generated
    public Integer getMaxDevBoxesPerUser() {
        return this.maxDevBoxesPerUser;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeNumberField("maxDevBoxesPerUser", this.maxDevBoxesPerUser);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DevCenterProject from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of DevCenterProject if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DevCenterProject.
     */
    @Generated
    public static DevCenterProject fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DevCenterProject deserializedDevCenterProject = new DevCenterProject();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("name".equals(fieldName)) {
                    deserializedDevCenterProject.name = reader.getString();
                } else if ("description".equals(fieldName)) {
                    deserializedDevCenterProject.description = reader.getString();
                } else if ("maxDevBoxesPerUser".equals(fieldName)) {
                    deserializedDevCenterProject.maxDevBoxesPerUser = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedDevCenterProject;
        });
    }
}
