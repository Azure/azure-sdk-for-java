// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.developer.devcenter.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.core.models.ResponseError;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * Properties of an environment.
 */
@Fluent
public final class DevCenterEnvironment implements JsonSerializable<DevCenterEnvironment> {

    /*
     * Parameters object for the environment.
     */
    @Generated
    private Map<String, Object> parameters;

    /*
     * Environment name.
     */
    @Generated
    private String name;

    /*
     * Environment type.
     */
    @Generated
    private final String environmentTypeName;

    /*
     * The AAD object id of the owner of this Environment.
     */
    @Generated
    private String userId;

    /*
     * The provisioning state of the environment.
     */
    @Generated
    private EnvironmentProvisioningState provisioningState;

    /*
     * The identifier of the resource group containing the environment's resources.
     */
    @Generated
    private String resourceGroupId;

    /*
     * Name of the catalog.
     */
    @Generated
    private final String catalogName;

    /*
     * Name of the environment definition.
     */
    @Generated
    private final String environmentDefinitionName;

    /*
     * Provisioning error details. Populated only for error states.
     */
    @Generated
    private ResponseError error;

    /**
     * Creates an instance of DevCenterEnvironment class.
     *
     * @param environmentName the environmentName value to set.
     * @param environmentTypeName the environmentTypeName value to set.
     * @param catalogName the catalogName value to set.
     * @param environmentDefinitionName the environmentDefinitionName value to set.
     */
    public DevCenterEnvironment(String environmentName, String environmentTypeName, String catalogName,
        String environmentDefinitionName) {
        this.name = environmentName;
        this.environmentTypeName = environmentTypeName;
        this.catalogName = catalogName;
        this.environmentDefinitionName = environmentDefinitionName;
    }

    /**
     * Get the parameters property: Parameters object for the environment.
     *
     * @return the parameters value.
     */
    @Generated
    public Map<String, Object> getParameters() {
        return this.parameters;
    }

    /**
     * Set the parameters property: Parameters object for the environment.
     *
     * @param parameters the parameters value to set.
     * @return the DevCenterEnvironment object itself.
     */
    @Generated
    public DevCenterEnvironment setParameters(Map<String, Object> parameters) {
        this.parameters = parameters;
        return this;
    }

    /**
     * Get the name property: Environment name.
     *
     * @return the name value.
     */
    @Generated
    public String getName() {
        return this.name;
    }

    /**
     * Get the environmentTypeName property: Environment type.
     *
     * @return the environmentTypeName value.
     */
    @Generated
    public String getEnvironmentTypeName() {
        return this.environmentTypeName;
    }

    /**
     * Get the userId property: The AAD object id of the owner of this Environment.
     *
     * @return the userId value.
     */
    @Generated
    public String getUserId() {
        return this.userId;
    }

    /**
     * Get the provisioningState property: The provisioning state of the environment.
     *
     * @return the provisioningState value.
     */
    @Generated
    public EnvironmentProvisioningState getProvisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the resourceGroupId property: The identifier of the resource group containing the environment's resources.
     *
     * @return the resourceGroupId value.
     */
    @Generated
    public String getResourceGroupId() {
        return this.resourceGroupId;
    }

    /**
     * Get the catalogName property: Name of the catalog.
     *
     * @return the catalogName value.
     */
    @Generated
    public String getCatalogName() {
        return this.catalogName;
    }

    /**
     * Get the environmentDefinitionName property: Name of the environment definition.
     *
     * @return the environmentDefinitionName value.
     */
    @Generated
    public String getEnvironmentDefinitionName() {
        return this.environmentDefinitionName;
    }

    /**
     * Get the error property: Provisioning error details. Populated only for error states.
     *
     * @return the error value.
     */
    @Generated
    public ResponseError getError() {
        return this.error;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("environmentType", this.environmentTypeName);
        jsonWriter.writeStringField("catalogName", this.catalogName);
        jsonWriter.writeStringField("environmentDefinitionName", this.environmentDefinitionName);
        jsonWriter.writeMapField("parameters", this.parameters, (writer, element) -> writer.writeUntyped(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DevCenterEnvironment from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of DevCenterEnvironment if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DevCenterEnvironment.
     */
    public static DevCenterEnvironment fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String name = null;
            String environmentTypeName = null;
            String catalogName = null;
            String environmentDefinitionName = null;
            Map<String, Object> parameters = null;
            String userId = null;
            EnvironmentProvisioningState provisioningState = null;
            String resourceGroupId = null;
            ResponseError error = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("name".equals(fieldName)) {
                    name = reader.getString();
                } else if ("environmentType".equals(fieldName)) {
                    environmentTypeName = reader.getString();
                } else if ("catalogName".equals(fieldName)) {
                    catalogName = reader.getString();
                } else if ("environmentDefinitionName".equals(fieldName)) {
                    environmentDefinitionName = reader.getString();
                } else if ("parameters".equals(fieldName)) {
                    parameters = reader.readMap(reader1 -> reader1.readUntyped());
                } else if ("user".equals(fieldName)) {
                    userId = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    provisioningState = EnvironmentProvisioningState.fromString(reader.getString());
                } else if ("resourceGroupId".equals(fieldName)) {
                    resourceGroupId = reader.getString();
                } else if ("error".equals(fieldName)) {
                    error = ResponseError.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            DevCenterEnvironment deserializedDevCenterEnvironment
                = new DevCenterEnvironment(name, environmentTypeName, catalogName, environmentDefinitionName);
            deserializedDevCenterEnvironment.parameters = parameters;
            deserializedDevCenterEnvironment.userId = userId;
            deserializedDevCenterEnvironment.provisioningState = provisioningState;
            deserializedDevCenterEnvironment.resourceGroupId = resourceGroupId;
            deserializedDevCenterEnvironment.error = error;
            return deserializedDevCenterEnvironment;
        });
    }
}
