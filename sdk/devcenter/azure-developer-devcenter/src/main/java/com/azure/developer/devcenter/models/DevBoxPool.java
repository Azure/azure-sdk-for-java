// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.developer.devcenter.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * A pool of Dev Boxes.
 */
@Immutable
public final class DevBoxPool implements JsonSerializable<DevBoxPool> {

    /*
     * Pool name.
     */
    @Generated
    private String name;

    /*
     * Azure region where Dev Boxes in the pool are located.
     */
    @Generated
    private final String location;

    /*
     * The operating system type of Dev Boxes in this pool.
     */
    @Generated
    private DevBoxOsType osType;

    /*
     * Hardware settings for the Dev Boxes created in this pool.
     */
    @Generated
    private DevBoxHardwareProfile hardwareProfile;

    /*
     * Indicates whether hibernate is enabled/disabled or unknown.
     */
    @Generated
    private HibernateSupport hibernateSupport;

    /*
     * Storage settings for Dev Box created in this pool.
     */
    @Generated
    private DevBoxStorageProfile storageProfile;

    /*
     * Image settings for Dev Boxes create in this pool.
     */
    @Generated
    private DevBoxImageReference imageReference;

    /*
     * Indicates whether owners of Dev Boxes in this pool are local administrators on
     * the Dev Boxes.
     */
    @Generated
    private LocalAdministratorStatus localAdministratorStatus;

    /*
     * Stop on disconnect configuration settings for Dev Boxes created in this pool.
     */
    @Generated
    private StopOnDisconnectConfiguration stopOnDisconnect;

    /*
     * Overall health status of the Pool. Indicates whether or not the Pool is
     * available to create Dev Boxes.
     */
    @Generated
    private final PoolHealthStatus healthStatus;

    /**
     * Creates an instance of DevBoxPool class.
     *
     * @param location the location value to set.
     * @param healthStatus the healthStatus value to set.
     */
    @Generated
    private DevBoxPool(String location, PoolHealthStatus healthStatus) {
        this.location = location;
        this.healthStatus = healthStatus;
    }

    /**
     * Get the name property: Pool name.
     *
     * @return the name value.
     */
    @Generated
    public String getName() {
        return this.name;
    }

    /**
     * Get the location property: Azure region where Dev Boxes in the pool are located.
     *
     * @return the location value.
     */
    @Generated
    public String getLocation() {
        return this.location;
    }

    /**
     * Get the osType property: The operating system type of Dev Boxes in this pool.
     *
     * @return the osType value.
     */
    @Generated
    public DevBoxOsType getOsType() {
        return this.osType;
    }

    /**
     * Get the hardwareProfile property: Hardware settings for the Dev Boxes created in this pool.
     *
     * @return the hardwareProfile value.
     */
    @Generated
    public DevBoxHardwareProfile getHardwareProfile() {
        return this.hardwareProfile;
    }

    /**
     * Get the hibernateSupport property: Indicates whether hibernate is enabled/disabled or unknown.
     *
     * @return the hibernateSupport value.
     */
    @Generated
    public HibernateSupport getHibernateSupport() {
        return this.hibernateSupport;
    }

    /**
     * Get the storageProfile property: Storage settings for Dev Box created in this pool.
     *
     * @return the storageProfile value.
     */
    @Generated
    public DevBoxStorageProfile getStorageProfile() {
        return this.storageProfile;
    }

    /**
     * Get the imageReference property: Image settings for Dev Boxes create in this pool.
     *
     * @return the imageReference value.
     */
    @Generated
    public DevBoxImageReference getImageReference() {
        return this.imageReference;
    }

    /**
     * Get the localAdministratorStatus property: Indicates whether owners of Dev Boxes in this pool are local
     * administrators on
     * the Dev Boxes.
     *
     * @return the localAdministratorStatus value.
     */
    @Generated
    public LocalAdministratorStatus getLocalAdministratorStatus() {
        return this.localAdministratorStatus;
    }

    /**
     * Get the stopOnDisconnect property: Stop on disconnect configuration settings for Dev Boxes created in this pool.
     *
     * @return the stopOnDisconnect value.
     */
    @Generated
    public StopOnDisconnectConfiguration getStopOnDisconnect() {
        return this.stopOnDisconnect;
    }

    /**
     * Get the healthStatus property: Overall health status of the Pool. Indicates whether or not the Pool is
     * available to create Dev Boxes.
     *
     * @return the healthStatus value.
     */
    @Generated
    public PoolHealthStatus getHealthStatus() {
        return this.healthStatus;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("location", this.location);
        jsonWriter.writeStringField("healthStatus", this.healthStatus == null ? null : this.healthStatus.toString());
        jsonWriter.writeStringField("osType", this.osType == null ? null : this.osType.toString());
        jsonWriter.writeJsonField("hardwareProfile", this.hardwareProfile);
        jsonWriter.writeStringField("hibernateSupport",
            this.hibernateSupport == null ? null : this.hibernateSupport.toString());
        jsonWriter.writeJsonField("storageProfile", this.storageProfile);
        jsonWriter.writeJsonField("imageReference", this.imageReference);
        jsonWriter.writeStringField("localAdministrator",
            this.localAdministratorStatus == null ? null : this.localAdministratorStatus.toString());
        jsonWriter.writeJsonField("stopOnDisconnect", this.stopOnDisconnect);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DevBoxPool from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of DevBoxPool if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DevBoxPool.
     */
    @Generated
    public static DevBoxPool fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String name = null;
            String location = null;
            PoolHealthStatus healthStatus = null;
            DevBoxOsType osType = null;
            DevBoxHardwareProfile hardwareProfile = null;
            HibernateSupport hibernateSupport = null;
            DevBoxStorageProfile storageProfile = null;
            DevBoxImageReference imageReference = null;
            LocalAdministratorStatus localAdministratorStatus = null;
            StopOnDisconnectConfiguration stopOnDisconnect = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("name".equals(fieldName)) {
                    name = reader.getString();
                } else if ("location".equals(fieldName)) {
                    location = reader.getString();
                } else if ("healthStatus".equals(fieldName)) {
                    healthStatus = PoolHealthStatus.fromString(reader.getString());
                } else if ("osType".equals(fieldName)) {
                    osType = DevBoxOsType.fromString(reader.getString());
                } else if ("hardwareProfile".equals(fieldName)) {
                    hardwareProfile = DevBoxHardwareProfile.fromJson(reader);
                } else if ("hibernateSupport".equals(fieldName)) {
                    hibernateSupport = HibernateSupport.fromString(reader.getString());
                } else if ("storageProfile".equals(fieldName)) {
                    storageProfile = DevBoxStorageProfile.fromJson(reader);
                } else if ("imageReference".equals(fieldName)) {
                    imageReference = DevBoxImageReference.fromJson(reader);
                } else if ("localAdministrator".equals(fieldName)) {
                    localAdministratorStatus = LocalAdministratorStatus.fromString(reader.getString());
                } else if ("stopOnDisconnect".equals(fieldName)) {
                    stopOnDisconnect = StopOnDisconnectConfiguration.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            DevBoxPool deserializedDevBoxPool = new DevBoxPool(location, healthStatus);
            deserializedDevBoxPool.name = name;
            deserializedDevBoxPool.osType = osType;
            deserializedDevBoxPool.hardwareProfile = hardwareProfile;
            deserializedDevBoxPool.hibernateSupport = hibernateSupport;
            deserializedDevBoxPool.storageProfile = storageProfile;
            deserializedDevBoxPool.imageReference = imageReference;
            deserializedDevBoxPool.localAdministratorStatus = localAdministratorStatus;
            deserializedDevBoxPool.stopOnDisconnect = stopOnDisconnect;
            return deserializedDevBoxPool;
        });
    }
}
