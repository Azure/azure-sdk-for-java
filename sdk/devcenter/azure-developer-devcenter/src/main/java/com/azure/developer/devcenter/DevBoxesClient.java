// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.developer.devcenter;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.core.util.polling.SyncPoller;
import com.azure.developer.devcenter.implementation.DevBoxesClientImpl;
import com.azure.developer.devcenter.models.DevBox;
import com.azure.developer.devcenter.models.DevBoxAction;
import com.azure.developer.devcenter.models.DevBoxActionDelayResult;
import com.azure.developer.devcenter.models.OperationStatus;
import com.azure.developer.devcenter.models.Pool;
import com.azure.developer.devcenter.models.RemoteConnection;
import com.azure.developer.devcenter.models.Schedule;
import java.time.OffsetDateTime;

/**
 * Initializes a new instance of the synchronous DevBoxesClient type.
 */
@ServiceClient(builder = DevBoxesClientBuilder.class)
public final class DevBoxesClient {
    @Generated
    private final DevBoxesClientImpl serviceClient;

    /**
     * Initializes an instance of DevBoxesClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    DevBoxesClient(DevBoxesClientImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Lists available pools.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>filter</td>
     * <td>String</td>
     * <td>No</td>
     * <td>An OData filter clause to apply to the operation.</td>
     * </tr>
     * <tr>
     * <td>top</td>
     * <td>Integer</td>
     * <td>No</td>
     * <td>The maximum number of resources to return from the operation. Example: 'top=10'.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     name: String (Required)
     *     location: String (Required)
     *     osType: String(Windows) (Optional)
     *     hardwareProfile (Optional): {
     *         skuName: String (Optional)
     *         vCPUs: Integer (Optional)
     *         memoryGB: Integer (Optional)
     *     }
     *     hibernateSupport: String(Enabled/Disabled/OsUnsupported) (Optional)
     *     storageProfile (Optional): {
     *         osDisk (Optional): {
     *             diskSizeGB: Integer (Optional)
     *         }
     *     }
     *     imageReference (Optional): {
     *         name: String (Optional)
     *         version: String (Optional)
     *         operatingSystem: String (Optional)
     *         osBuildNumber: String (Optional)
     *         publishedDate: OffsetDateTime (Optional)
     *     }
     *     localAdministrator: String(Enabled/Disabled) (Optional)
     *     stopOnDisconnect (Optional): {
     *         status: String(Enabled/Disabled) (Required)
     *         gracePeriodMinutes: Integer (Optional)
     *     }
     *     healthStatus: String(Unknown/Pending/Healthy/Warning/Unhealthy) (Required)
     * }
     * }</pre>
     * 
     * @param projectName The DevCenter Project upon which to execute operations.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the Pool list result as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listPools(String projectName, RequestOptions requestOptions) {
        return this.serviceClient.listPools(projectName, requestOptions);
    }

    /**
     * Gets a pool.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     name: String (Required)
     *     location: String (Required)
     *     osType: String(Windows) (Optional)
     *     hardwareProfile (Optional): {
     *         skuName: String (Optional)
     *         vCPUs: Integer (Optional)
     *         memoryGB: Integer (Optional)
     *     }
     *     hibernateSupport: String(Enabled/Disabled/OsUnsupported) (Optional)
     *     storageProfile (Optional): {
     *         osDisk (Optional): {
     *             diskSizeGB: Integer (Optional)
     *         }
     *     }
     *     imageReference (Optional): {
     *         name: String (Optional)
     *         version: String (Optional)
     *         operatingSystem: String (Optional)
     *         osBuildNumber: String (Optional)
     *         publishedDate: OffsetDateTime (Optional)
     *     }
     *     localAdministrator: String(Enabled/Disabled) (Optional)
     *     stopOnDisconnect (Optional): {
     *         status: String(Enabled/Disabled) (Required)
     *         gracePeriodMinutes: Integer (Optional)
     *     }
     *     healthStatus: String(Unknown/Pending/Healthy/Warning/Unhealthy) (Required)
     * }
     * }</pre>
     * 
     * @param projectName The DevCenter Project upon which to execute operations.
     * @param poolName The name of a pool of Dev Boxes.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a pool along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getPoolWithResponse(String projectName, String poolName,
        RequestOptions requestOptions) {
        return this.serviceClient.getPoolWithResponse(projectName, poolName, requestOptions);
    }

    /**
     * Lists available schedules for a pool.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>filter</td>
     * <td>String</td>
     * <td>No</td>
     * <td>An OData filter clause to apply to the operation.</td>
     * </tr>
     * <tr>
     * <td>top</td>
     * <td>Integer</td>
     * <td>No</td>
     * <td>The maximum number of resources to return from the operation. Example: 'top=10'.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     name: String (Required)
     *     type: String(StopDevBox) (Required)
     *     frequency: String(Daily) (Required)
     *     time: String (Required)
     *     timeZone: String (Required)
     * }
     * }</pre>
     * 
     * @param projectName The DevCenter Project upon which to execute operations.
     * @param poolName The name of a pool of Dev Boxes.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the Schedule list result as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listSchedules(String projectName, String poolName, RequestOptions requestOptions) {
        return this.serviceClient.listSchedules(projectName, poolName, requestOptions);
    }

    /**
     * Gets a schedule.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     name: String (Required)
     *     type: String(StopDevBox) (Required)
     *     frequency: String(Daily) (Required)
     *     time: String (Required)
     *     timeZone: String (Required)
     * }
     * }</pre>
     * 
     * @param projectName The DevCenter Project upon which to execute operations.
     * @param poolName The name of a pool of Dev Boxes.
     * @param scheduleName The name of a schedule.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a schedule along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getScheduleWithResponse(String projectName, String poolName, String scheduleName,
        RequestOptions requestOptions) {
        return this.serviceClient.getScheduleWithResponse(projectName, poolName, scheduleName, requestOptions);
    }

    /**
     * Lists Dev Boxes that the caller has access to in the DevCenter.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>filter</td>
     * <td>String</td>
     * <td>No</td>
     * <td>An OData filter clause to apply to the operation.</td>
     * </tr>
     * <tr>
     * <td>top</td>
     * <td>Integer</td>
     * <td>No</td>
     * <td>The maximum number of resources to return from the operation. Example: 'top=10'.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     name: String (Required)
     *     projectName: String (Optional)
     *     poolName: String (Required)
     *     hibernateSupport: String(Enabled/Disabled/OsUnsupported) (Optional)
     *     provisioningState: String (Optional)
     *     actionState: String (Optional)
     *     powerState: String(Unknown/Running/Deallocated/PoweredOff/Hibernated) (Optional)
     *     uniqueId: String (Optional)
     *     error (Optional): {
     *         code: String (Required)
     *         message: String (Required)
     *         target: String (Optional)
     *         details (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         innererror (Optional): {
     *             code: String (Optional)
     *             innererror (Optional): (recursive schema, see innererror above)
     *         }
     *     }
     *     location: String (Optional)
     *     osType: String(Windows) (Optional)
     *     user: String (Optional)
     *     hardwareProfile (Optional): {
     *         skuName: String (Optional)
     *         vCPUs: Integer (Optional)
     *         memoryGB: Integer (Optional)
     *     }
     *     storageProfile (Optional): {
     *         osDisk (Optional): {
     *             diskSizeGB: Integer (Optional)
     *         }
     *     }
     *     imageReference (Optional): {
     *         name: String (Optional)
     *         version: String (Optional)
     *         operatingSystem: String (Optional)
     *         osBuildNumber: String (Optional)
     *         publishedDate: OffsetDateTime (Optional)
     *     }
     *     createdTime: OffsetDateTime (Optional)
     *     localAdministrator: String(Enabled/Disabled) (Optional)
     * }
     * }</pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the Dev Box list result as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listAllDevBoxes(RequestOptions requestOptions) {
        return this.serviceClient.listAllDevBoxes(requestOptions);
    }

    /**
     * Lists Dev Boxes in the Dev Center for a particular user.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>filter</td>
     * <td>String</td>
     * <td>No</td>
     * <td>An OData filter clause to apply to the operation.</td>
     * </tr>
     * <tr>
     * <td>top</td>
     * <td>Integer</td>
     * <td>No</td>
     * <td>The maximum number of resources to return from the operation. Example: 'top=10'.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     name: String (Required)
     *     projectName: String (Optional)
     *     poolName: String (Required)
     *     hibernateSupport: String(Enabled/Disabled/OsUnsupported) (Optional)
     *     provisioningState: String (Optional)
     *     actionState: String (Optional)
     *     powerState: String(Unknown/Running/Deallocated/PoweredOff/Hibernated) (Optional)
     *     uniqueId: String (Optional)
     *     error (Optional): {
     *         code: String (Required)
     *         message: String (Required)
     *         target: String (Optional)
     *         details (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         innererror (Optional): {
     *             code: String (Optional)
     *             innererror (Optional): (recursive schema, see innererror above)
     *         }
     *     }
     *     location: String (Optional)
     *     osType: String(Windows) (Optional)
     *     user: String (Optional)
     *     hardwareProfile (Optional): {
     *         skuName: String (Optional)
     *         vCPUs: Integer (Optional)
     *         memoryGB: Integer (Optional)
     *     }
     *     storageProfile (Optional): {
     *         osDisk (Optional): {
     *             diskSizeGB: Integer (Optional)
     *         }
     *     }
     *     imageReference (Optional): {
     *         name: String (Optional)
     *         version: String (Optional)
     *         operatingSystem: String (Optional)
     *         osBuildNumber: String (Optional)
     *         publishedDate: OffsetDateTime (Optional)
     *     }
     *     createdTime: OffsetDateTime (Optional)
     *     localAdministrator: String(Enabled/Disabled) (Optional)
     * }
     * }</pre>
     * 
     * @param userId The AAD object id of the user. If value is 'me', the identity is taken from the authentication
     * context.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the Dev Box list result as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listAllDevBoxesByUser(String userId, RequestOptions requestOptions) {
        return this.serviceClient.listAllDevBoxesByUser(userId, requestOptions);
    }

    /**
     * Lists Dev Boxes in the project for a particular user.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>filter</td>
     * <td>String</td>
     * <td>No</td>
     * <td>An OData filter clause to apply to the operation.</td>
     * </tr>
     * <tr>
     * <td>top</td>
     * <td>Integer</td>
     * <td>No</td>
     * <td>The maximum number of resources to return from the operation. Example: 'top=10'.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     name: String (Required)
     *     projectName: String (Optional)
     *     poolName: String (Required)
     *     hibernateSupport: String(Enabled/Disabled/OsUnsupported) (Optional)
     *     provisioningState: String (Optional)
     *     actionState: String (Optional)
     *     powerState: String(Unknown/Running/Deallocated/PoweredOff/Hibernated) (Optional)
     *     uniqueId: String (Optional)
     *     error (Optional): {
     *         code: String (Required)
     *         message: String (Required)
     *         target: String (Optional)
     *         details (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         innererror (Optional): {
     *             code: String (Optional)
     *             innererror (Optional): (recursive schema, see innererror above)
     *         }
     *     }
     *     location: String (Optional)
     *     osType: String(Windows) (Optional)
     *     user: String (Optional)
     *     hardwareProfile (Optional): {
     *         skuName: String (Optional)
     *         vCPUs: Integer (Optional)
     *         memoryGB: Integer (Optional)
     *     }
     *     storageProfile (Optional): {
     *         osDisk (Optional): {
     *             diskSizeGB: Integer (Optional)
     *         }
     *     }
     *     imageReference (Optional): {
     *         name: String (Optional)
     *         version: String (Optional)
     *         operatingSystem: String (Optional)
     *         osBuildNumber: String (Optional)
     *         publishedDate: OffsetDateTime (Optional)
     *     }
     *     createdTime: OffsetDateTime (Optional)
     *     localAdministrator: String(Enabled/Disabled) (Optional)
     * }
     * }</pre>
     * 
     * @param projectName The DevCenter Project upon which to execute operations.
     * @param userId The AAD object id of the user. If value is 'me', the identity is taken from the authentication
     * context.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the Dev Box list result as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listDevBoxes(String projectName, String userId, RequestOptions requestOptions) {
        return this.serviceClient.listDevBoxes(projectName, userId, requestOptions);
    }

    /**
     * Gets a Dev Box.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     name: String (Required)
     *     projectName: String (Optional)
     *     poolName: String (Required)
     *     hibernateSupport: String(Enabled/Disabled/OsUnsupported) (Optional)
     *     provisioningState: String (Optional)
     *     actionState: String (Optional)
     *     powerState: String(Unknown/Running/Deallocated/PoweredOff/Hibernated) (Optional)
     *     uniqueId: String (Optional)
     *     error (Optional): {
     *         code: String (Required)
     *         message: String (Required)
     *         target: String (Optional)
     *         details (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         innererror (Optional): {
     *             code: String (Optional)
     *             innererror (Optional): (recursive schema, see innererror above)
     *         }
     *     }
     *     location: String (Optional)
     *     osType: String(Windows) (Optional)
     *     user: String (Optional)
     *     hardwareProfile (Optional): {
     *         skuName: String (Optional)
     *         vCPUs: Integer (Optional)
     *         memoryGB: Integer (Optional)
     *     }
     *     storageProfile (Optional): {
     *         osDisk (Optional): {
     *             diskSizeGB: Integer (Optional)
     *         }
     *     }
     *     imageReference (Optional): {
     *         name: String (Optional)
     *         version: String (Optional)
     *         operatingSystem: String (Optional)
     *         osBuildNumber: String (Optional)
     *         publishedDate: OffsetDateTime (Optional)
     *     }
     *     createdTime: OffsetDateTime (Optional)
     *     localAdministrator: String(Enabled/Disabled) (Optional)
     * }
     * }</pre>
     * 
     * @param projectName The DevCenter Project upon which to execute operations.
     * @param userId The AAD object id of the user. If value is 'me', the identity is taken from the authentication
     * context.
     * @param devBoxName The name of a Dev Box.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a Dev Box along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getDevBoxWithResponse(String projectName, String userId, String devBoxName,
        RequestOptions requestOptions) {
        return this.serviceClient.getDevBoxWithResponse(projectName, userId, devBoxName, requestOptions);
    }

    /**
     * Creates or replaces a Dev Box.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     name: String (Required)
     *     projectName: String (Optional)
     *     poolName: String (Required)
     *     hibernateSupport: String(Enabled/Disabled/OsUnsupported) (Optional)
     *     provisioningState: String (Optional)
     *     actionState: String (Optional)
     *     powerState: String(Unknown/Running/Deallocated/PoweredOff/Hibernated) (Optional)
     *     uniqueId: String (Optional)
     *     error (Optional): {
     *         code: String (Required)
     *         message: String (Required)
     *         target: String (Optional)
     *         details (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         innererror (Optional): {
     *             code: String (Optional)
     *             innererror (Optional): (recursive schema, see innererror above)
     *         }
     *     }
     *     location: String (Optional)
     *     osType: String(Windows) (Optional)
     *     user: String (Optional)
     *     hardwareProfile (Optional): {
     *         skuName: String (Optional)
     *         vCPUs: Integer (Optional)
     *         memoryGB: Integer (Optional)
     *     }
     *     storageProfile (Optional): {
     *         osDisk (Optional): {
     *             diskSizeGB: Integer (Optional)
     *         }
     *     }
     *     imageReference (Optional): {
     *         name: String (Optional)
     *         version: String (Optional)
     *         operatingSystem: String (Optional)
     *         osBuildNumber: String (Optional)
     *         publishedDate: OffsetDateTime (Optional)
     *     }
     *     createdTime: OffsetDateTime (Optional)
     *     localAdministrator: String(Enabled/Disabled) (Optional)
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     name: String (Required)
     *     projectName: String (Optional)
     *     poolName: String (Required)
     *     hibernateSupport: String(Enabled/Disabled/OsUnsupported) (Optional)
     *     provisioningState: String (Optional)
     *     actionState: String (Optional)
     *     powerState: String(Unknown/Running/Deallocated/PoweredOff/Hibernated) (Optional)
     *     uniqueId: String (Optional)
     *     error (Optional): {
     *         code: String (Required)
     *         message: String (Required)
     *         target: String (Optional)
     *         details (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         innererror (Optional): {
     *             code: String (Optional)
     *             innererror (Optional): (recursive schema, see innererror above)
     *         }
     *     }
     *     location: String (Optional)
     *     osType: String(Windows) (Optional)
     *     user: String (Optional)
     *     hardwareProfile (Optional): {
     *         skuName: String (Optional)
     *         vCPUs: Integer (Optional)
     *         memoryGB: Integer (Optional)
     *     }
     *     storageProfile (Optional): {
     *         osDisk (Optional): {
     *             diskSizeGB: Integer (Optional)
     *         }
     *     }
     *     imageReference (Optional): {
     *         name: String (Optional)
     *         version: String (Optional)
     *         operatingSystem: String (Optional)
     *         osBuildNumber: String (Optional)
     *         publishedDate: OffsetDateTime (Optional)
     *     }
     *     createdTime: OffsetDateTime (Optional)
     *     localAdministrator: String(Enabled/Disabled) (Optional)
     * }
     * }</pre>
     * 
     * @param projectName The DevCenter Project upon which to execute operations.
     * @param userId The AAD object id of the user. If value is 'me', the identity is taken from the authentication
     * context.
     * @param devBoxName The name of a Dev Box.
     * @param body Represents a environment.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of a Dev Box.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, BinaryData> beginCreateDevBox(String projectName, String userId, String devBoxName,
        BinaryData body, RequestOptions requestOptions) {
        return this.serviceClient.beginCreateDevBox(projectName, userId, devBoxName, body, requestOptions);
    }

    /**
     * Deletes a Dev Box.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     name: String (Optional)
     *     status: String(Running/Completed/Canceled/Failed) (Required)
     *     resourceId: String (Optional)
     *     startTime: OffsetDateTime (Optional)
     *     endTime: OffsetDateTime (Optional)
     *     percentComplete: Double (Optional)
     *     properties: Object (Optional)
     *     error (Optional): {
     *         code: String (Optional)
     *         message: String (Optional)
     *     }
     * }
     * }</pre>
     * 
     * @param projectName The DevCenter Project upon which to execute operations.
     * @param userId The AAD object id of the user. If value is 'me', the identity is taken from the authentication
     * context.
     * @param devBoxName The name of a Dev Box.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of the current status of an async operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, Void> beginDeleteDevBox(String projectName, String userId, String devBoxName,
        RequestOptions requestOptions) {
        return this.serviceClient.beginDeleteDevBox(projectName, userId, devBoxName, requestOptions);
    }

    /**
     * Starts a Dev Box.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     name: String (Optional)
     *     status: String(Running/Completed/Canceled/Failed) (Required)
     *     resourceId: String (Optional)
     *     startTime: OffsetDateTime (Optional)
     *     endTime: OffsetDateTime (Optional)
     *     percentComplete: Double (Optional)
     *     properties: Object (Optional)
     *     error (Optional): {
     *         code: String (Optional)
     *         message: String (Optional)
     *     }
     * }
     * }</pre>
     * 
     * @param projectName The DevCenter Project upon which to execute operations.
     * @param userId The AAD object id of the user. If value is 'me', the identity is taken from the authentication
     * context.
     * @param devBoxName The name of a Dev Box.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of the current status of an async operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, BinaryData> beginStartDevBox(String projectName, String userId, String devBoxName,
        RequestOptions requestOptions) {
        return this.serviceClient.beginStartDevBox(projectName, userId, devBoxName, requestOptions);
    }

    /**
     * Stops a Dev Box.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>hibernate</td>
     * <td>Boolean</td>
     * <td>No</td>
     * <td>Optional parameter to hibernate the dev box.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     name: String (Optional)
     *     status: String(Running/Completed/Canceled/Failed) (Required)
     *     resourceId: String (Optional)
     *     startTime: OffsetDateTime (Optional)
     *     endTime: OffsetDateTime (Optional)
     *     percentComplete: Double (Optional)
     *     properties: Object (Optional)
     *     error (Optional): {
     *         code: String (Optional)
     *         message: String (Optional)
     *     }
     * }
     * }</pre>
     * 
     * @param projectName The DevCenter Project upon which to execute operations.
     * @param userId The AAD object id of the user. If value is 'me', the identity is taken from the authentication
     * context.
     * @param devBoxName The name of a Dev Box.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of the current status of an async operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, BinaryData> beginStopDevBox(String projectName, String userId, String devBoxName,
        RequestOptions requestOptions) {
        return this.serviceClient.beginStopDevBox(projectName, userId, devBoxName, requestOptions);
    }

    /**
     * Restarts a Dev Box.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     name: String (Optional)
     *     status: String(Running/Completed/Canceled/Failed) (Required)
     *     resourceId: String (Optional)
     *     startTime: OffsetDateTime (Optional)
     *     endTime: OffsetDateTime (Optional)
     *     percentComplete: Double (Optional)
     *     properties: Object (Optional)
     *     error (Optional): {
     *         code: String (Optional)
     *         message: String (Optional)
     *     }
     * }
     * }</pre>
     * 
     * @param projectName The DevCenter Project upon which to execute operations.
     * @param userId The AAD object id of the user. If value is 'me', the identity is taken from the authentication
     * context.
     * @param devBoxName The name of a Dev Box.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of the current status of an async operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, BinaryData> beginRestartDevBox(String projectName, String userId, String devBoxName,
        RequestOptions requestOptions) {
        return this.serviceClient.beginRestartDevBox(projectName, userId, devBoxName, requestOptions);
    }

    /**
     * Gets RDP Connection info.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     webUrl: String (Optional)
     *     rdpConnectionUrl: String (Optional)
     * }
     * }</pre>
     * 
     * @param projectName The DevCenter Project upon which to execute operations.
     * @param userId The AAD object id of the user. If value is 'me', the identity is taken from the authentication
     * context.
     * @param devBoxName The name of a Dev Box.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return rDP Connection info along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getRemoteConnectionWithResponse(String projectName, String userId, String devBoxName,
        RequestOptions requestOptions) {
        return this.serviceClient.getRemoteConnectionWithResponse(projectName, userId, devBoxName, requestOptions);
    }

    /**
     * Lists actions on a Dev Box.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     name: String (Required)
     *     actionType: String(Stop) (Required)
     *     sourceId: String (Required)
     *     suspendedUntil: OffsetDateTime (Optional)
     *     next (Optional): {
     *         scheduledTime: OffsetDateTime (Required)
     *     }
     * }
     * }</pre>
     * 
     * @param projectName The DevCenter Project upon which to execute operations.
     * @param userId The AAD object id of the user. If value is 'me', the identity is taken from the authentication
     * context.
     * @param devBoxName The name of a Dev Box.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the actions list result as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listDevBoxActions(String projectName, String userId, String devBoxName,
        RequestOptions requestOptions) {
        return this.serviceClient.listDevBoxActions(projectName, userId, devBoxName, requestOptions);
    }

    /**
     * Gets an action.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     name: String (Required)
     *     actionType: String(Stop) (Required)
     *     sourceId: String (Required)
     *     suspendedUntil: OffsetDateTime (Optional)
     *     next (Optional): {
     *         scheduledTime: OffsetDateTime (Required)
     *     }
     * }
     * }</pre>
     * 
     * @param projectName The DevCenter Project upon which to execute operations.
     * @param userId The AAD object id of the user. If value is 'me', the identity is taken from the authentication
     * context.
     * @param devBoxName The name of a Dev Box.
     * @param actionName The name of an action that will take place on a Dev Box.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return an action along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getDevBoxActionWithResponse(String projectName, String userId, String devBoxName,
        String actionName, RequestOptions requestOptions) {
        return this.serviceClient.getDevBoxActionWithResponse(projectName, userId, devBoxName, actionName,
            requestOptions);
    }

    /**
     * Skips an occurrence of an action.
     * 
     * @param projectName The DevCenter Project upon which to execute operations.
     * @param userId The AAD object id of the user. If value is 'me', the identity is taken from the authentication
     * context.
     * @param devBoxName The name of a Dev Box.
     * @param actionName The name of an action that will take place on a Dev Box.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> skipActionWithResponse(String projectName, String userId, String devBoxName,
        String actionName, RequestOptions requestOptions) {
        return this.serviceClient.skipActionWithResponse(projectName, userId, devBoxName, actionName, requestOptions);
    }

    /**
     * Delays the occurrence of an action.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     name: String (Required)
     *     actionType: String(Stop) (Required)
     *     sourceId: String (Required)
     *     suspendedUntil: OffsetDateTime (Optional)
     *     next (Optional): {
     *         scheduledTime: OffsetDateTime (Required)
     *     }
     * }
     * }</pre>
     * 
     * @param projectName The DevCenter Project upon which to execute operations.
     * @param userId The AAD object id of the user. If value is 'me', the identity is taken from the authentication
     * context.
     * @param devBoxName The name of a Dev Box.
     * @param actionName The name of an action that will take place on a Dev Box.
     * @param delayUntil The time to delay the Dev Box action or actions until.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return an action which will take place on a Dev Box along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> delayActionWithResponse(String projectName, String userId, String devBoxName,
        String actionName, OffsetDateTime delayUntil, RequestOptions requestOptions) {
        return this.serviceClient.delayActionWithResponse(projectName, userId, devBoxName, actionName, delayUntil,
            requestOptions);
    }

    /**
     * Delays all actions.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     name: String (Required)
     *     result: String(Succeeded/Failed) (Required)
     *     action (Optional): {
     *         name: String (Required)
     *         actionType: String(Stop) (Required)
     *         sourceId: String (Required)
     *         suspendedUntil: OffsetDateTime (Optional)
     *         next (Optional): {
     *             scheduledTime: OffsetDateTime (Required)
     *         }
     *     }
     *     error (Optional): {
     *         code: String (Required)
     *         message: String (Required)
     *         target: String (Optional)
     *         details (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         innererror (Optional): {
     *             code: String (Optional)
     *             innererror (Optional): (recursive schema, see innererror above)
     *         }
     *     }
     * }
     * }</pre>
     * 
     * @param projectName The DevCenter Project upon which to execute operations.
     * @param userId The AAD object id of the user. If value is 'me', the identity is taken from the authentication
     * context.
     * @param devBoxName The name of a Dev Box.
     * @param delayUntil The time to delay the Dev Box action or actions until.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the actions list result as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> delayAllActions(String projectName, String userId, String devBoxName,
        OffsetDateTime delayUntil, RequestOptions requestOptions) {
        return this.serviceClient.delayAllActions(projectName, userId, devBoxName, delayUntil, requestOptions);
    }

    /**
     * Lists available pools.
     * 
     * @param projectName The DevCenter Project upon which to execute operations.
     * @param filter An OData filter clause to apply to the operation.
     * @param top The maximum number of resources to return from the operation. Example: 'top=10'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Pool list result as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<Pool> listPools(String projectName, String filter, Integer top) {
        // Generated convenience method for listPools
        RequestOptions requestOptions = new RequestOptions();
        if (filter != null) {
            requestOptions.addQueryParam("filter", filter, false);
        }
        if (top != null) {
            requestOptions.addQueryParam("top", String.valueOf(top), false);
        }
        return serviceClient.listPools(projectName, requestOptions)
            .mapPage(bodyItemValue -> bodyItemValue.toObject(Pool.class));
    }

    /**
     * Lists available pools.
     * 
     * @param projectName The DevCenter Project upon which to execute operations.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Pool list result as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<Pool> listPools(String projectName) {
        // Generated convenience method for listPools
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.listPools(projectName, requestOptions)
            .mapPage(bodyItemValue -> bodyItemValue.toObject(Pool.class));
    }

    /**
     * Gets a pool.
     * 
     * @param projectName The DevCenter Project upon which to execute operations.
     * @param poolName The name of a pool of Dev Boxes.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a pool.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Pool getPool(String projectName, String poolName) {
        // Generated convenience method for getPoolWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getPoolWithResponse(projectName, poolName, requestOptions).getValue().toObject(Pool.class);
    }

    /**
     * Lists available schedules for a pool.
     * 
     * @param projectName The DevCenter Project upon which to execute operations.
     * @param poolName The name of a pool of Dev Boxes.
     * @param filter An OData filter clause to apply to the operation.
     * @param top The maximum number of resources to return from the operation. Example: 'top=10'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Schedule list result as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<Schedule> listSchedules(String projectName, String poolName, String filter, Integer top) {
        // Generated convenience method for listSchedules
        RequestOptions requestOptions = new RequestOptions();
        if (filter != null) {
            requestOptions.addQueryParam("filter", filter, false);
        }
        if (top != null) {
            requestOptions.addQueryParam("top", String.valueOf(top), false);
        }
        return serviceClient.listSchedules(projectName, poolName, requestOptions)
            .mapPage(bodyItemValue -> bodyItemValue.toObject(Schedule.class));
    }

    /**
     * Lists available schedules for a pool.
     * 
     * @param projectName The DevCenter Project upon which to execute operations.
     * @param poolName The name of a pool of Dev Boxes.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Schedule list result as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<Schedule> listSchedules(String projectName, String poolName) {
        // Generated convenience method for listSchedules
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.listSchedules(projectName, poolName, requestOptions)
            .mapPage(bodyItemValue -> bodyItemValue.toObject(Schedule.class));
    }

    /**
     * Gets a schedule.
     * 
     * @param projectName The DevCenter Project upon which to execute operations.
     * @param poolName The name of a pool of Dev Boxes.
     * @param scheduleName The name of a schedule.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a schedule.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Schedule getSchedule(String projectName, String poolName, String scheduleName) {
        // Generated convenience method for getScheduleWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getScheduleWithResponse(projectName, poolName, scheduleName, requestOptions).getValue()
            .toObject(Schedule.class);
    }

    /**
     * Lists Dev Boxes that the caller has access to in the DevCenter.
     * 
     * @param filter An OData filter clause to apply to the operation.
     * @param top The maximum number of resources to return from the operation. Example: 'top=10'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Dev Box list result as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DevBox> listAllDevBoxes(String filter, Integer top) {
        // Generated convenience method for listAllDevBoxes
        RequestOptions requestOptions = new RequestOptions();
        if (filter != null) {
            requestOptions.addQueryParam("filter", filter, false);
        }
        if (top != null) {
            requestOptions.addQueryParam("top", String.valueOf(top), false);
        }
        return serviceClient.listAllDevBoxes(requestOptions)
            .mapPage(bodyItemValue -> bodyItemValue.toObject(DevBox.class));
    }

    /**
     * Lists Dev Boxes that the caller has access to in the DevCenter.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Dev Box list result as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DevBox> listAllDevBoxes() {
        // Generated convenience method for listAllDevBoxes
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.listAllDevBoxes(requestOptions)
            .mapPage(bodyItemValue -> bodyItemValue.toObject(DevBox.class));
    }

    /**
     * Lists Dev Boxes in the Dev Center for a particular user.
     * 
     * @param userId The AAD object id of the user. If value is 'me', the identity is taken from the authentication
     * context.
     * @param filter An OData filter clause to apply to the operation.
     * @param top The maximum number of resources to return from the operation. Example: 'top=10'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Dev Box list result as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DevBox> listAllDevBoxesByUser(String userId, String filter, Integer top) {
        // Generated convenience method for listAllDevBoxesByUser
        RequestOptions requestOptions = new RequestOptions();
        if (filter != null) {
            requestOptions.addQueryParam("filter", filter, false);
        }
        if (top != null) {
            requestOptions.addQueryParam("top", String.valueOf(top), false);
        }
        return serviceClient.listAllDevBoxesByUser(userId, requestOptions)
            .mapPage(bodyItemValue -> bodyItemValue.toObject(DevBox.class));
    }

    /**
     * Lists Dev Boxes in the Dev Center for a particular user.
     * 
     * @param userId The AAD object id of the user. If value is 'me', the identity is taken from the authentication
     * context.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Dev Box list result as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DevBox> listAllDevBoxesByUser(String userId) {
        // Generated convenience method for listAllDevBoxesByUser
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.listAllDevBoxesByUser(userId, requestOptions)
            .mapPage(bodyItemValue -> bodyItemValue.toObject(DevBox.class));
    }

    /**
     * Lists Dev Boxes in the project for a particular user.
     * 
     * @param projectName The DevCenter Project upon which to execute operations.
     * @param userId The AAD object id of the user. If value is 'me', the identity is taken from the authentication
     * context.
     * @param filter An OData filter clause to apply to the operation.
     * @param top The maximum number of resources to return from the operation. Example: 'top=10'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Dev Box list result as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DevBox> listDevBoxes(String projectName, String userId, String filter, Integer top) {
        // Generated convenience method for listDevBoxes
        RequestOptions requestOptions = new RequestOptions();
        if (filter != null) {
            requestOptions.addQueryParam("filter", filter, false);
        }
        if (top != null) {
            requestOptions.addQueryParam("top", String.valueOf(top), false);
        }
        return serviceClient.listDevBoxes(projectName, userId, requestOptions)
            .mapPage(bodyItemValue -> bodyItemValue.toObject(DevBox.class));
    }

    /**
     * Lists Dev Boxes in the project for a particular user.
     * 
     * @param projectName The DevCenter Project upon which to execute operations.
     * @param userId The AAD object id of the user. If value is 'me', the identity is taken from the authentication
     * context.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Dev Box list result as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DevBox> listDevBoxes(String projectName, String userId) {
        // Generated convenience method for listDevBoxes
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.listDevBoxes(projectName, userId, requestOptions)
            .mapPage(bodyItemValue -> bodyItemValue.toObject(DevBox.class));
    }

    /**
     * Gets a Dev Box.
     * 
     * @param projectName The DevCenter Project upon which to execute operations.
     * @param userId The AAD object id of the user. If value is 'me', the identity is taken from the authentication
     * context.
     * @param devBoxName The name of a Dev Box.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Dev Box.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DevBox getDevBox(String projectName, String userId, String devBoxName) {
        // Generated convenience method for getDevBoxWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getDevBoxWithResponse(projectName, userId, devBoxName, requestOptions).getValue().toObject(DevBox.class);
    }

    /**
     * Creates or replaces a Dev Box.
     * 
     * @param projectName The DevCenter Project upon which to execute operations.
     * @param userId The AAD object id of the user. If value is 'me', the identity is taken from the authentication
     * context.
     * @param devBoxName The name of a Dev Box.
     * @param body Represents a environment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a Dev Box.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<OperationStatus, OperationStatus> beginCreateDevBox(String projectName, String userId,
        String devBoxName, DevBox body) {
        // Generated convenience method for beginCreateDevBoxWithModel
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.beginCreateDevBoxWithModel(projectName, userId, devBoxName, BinaryData.fromObject(body),
            requestOptions);
    }

    /**
     * Deletes a Dev Box.
     * 
     * @param projectName The DevCenter Project upon which to execute operations.
     * @param userId The AAD object id of the user. If value is 'me', the identity is taken from the authentication
     * context.
     * @param devBoxName The name of a Dev Box.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the current status of an async operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<OperationStatus, Void> beginDeleteDevBox(String projectName, String userId, String devBoxName) {
        // Generated convenience method for beginDeleteDevBoxWithModel
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.beginDeleteDevBoxWithModel(projectName, userId, devBoxName, requestOptions);
    }

    /**
     * Starts a Dev Box.
     * 
     * @param projectName The DevCenter Project upon which to execute operations.
     * @param userId The AAD object id of the user. If value is 'me', the identity is taken from the authentication
     * context.
     * @param devBoxName The name of a Dev Box.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the current status of an async operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<OperationStatus, OperationStatus> beginStartDevBox(String projectName, String userId,
        String devBoxName) {
        // Generated convenience method for beginStartDevBoxWithModel
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.beginStartDevBoxWithModel(projectName, userId, devBoxName, requestOptions);
    }

    /**
     * Stops a Dev Box.
     * 
     * @param projectName The DevCenter Project upon which to execute operations.
     * @param userId The AAD object id of the user. If value is 'me', the identity is taken from the authentication
     * context.
     * @param devBoxName The name of a Dev Box.
     * @param hibernate Optional parameter to hibernate the dev box.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the current status of an async operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<OperationStatus, OperationStatus> beginStopDevBox(String projectName, String userId,
        String devBoxName, Boolean hibernate) {
        // Generated convenience method for beginStopDevBoxWithModel
        RequestOptions requestOptions = new RequestOptions();
        if (hibernate != null) {
            requestOptions.addQueryParam("hibernate", String.valueOf(hibernate), false);
        }
        return serviceClient.beginStopDevBoxWithModel(projectName, userId, devBoxName, requestOptions);
    }

    /**
     * Stops a Dev Box.
     * 
     * @param projectName The DevCenter Project upon which to execute operations.
     * @param userId The AAD object id of the user. If value is 'me', the identity is taken from the authentication
     * context.
     * @param devBoxName The name of a Dev Box.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the current status of an async operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<OperationStatus, OperationStatus> beginStopDevBox(String projectName, String userId,
        String devBoxName) {
        // Generated convenience method for beginStopDevBoxWithModel
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.beginStopDevBoxWithModel(projectName, userId, devBoxName, requestOptions);
    }

    /**
     * Restarts a Dev Box.
     * 
     * @param projectName The DevCenter Project upon which to execute operations.
     * @param userId The AAD object id of the user. If value is 'me', the identity is taken from the authentication
     * context.
     * @param devBoxName The name of a Dev Box.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the current status of an async operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<OperationStatus, OperationStatus> beginRestartDevBox(String projectName, String userId,
        String devBoxName) {
        // Generated convenience method for beginRestartDevBoxWithModel
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.beginRestartDevBoxWithModel(projectName, userId, devBoxName, requestOptions);
    }

    /**
     * Gets RDP Connection info.
     * 
     * @param projectName The DevCenter Project upon which to execute operations.
     * @param userId The AAD object id of the user. If value is 'me', the identity is taken from the authentication
     * context.
     * @param devBoxName The name of a Dev Box.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return rDP Connection info.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RemoteConnection getRemoteConnection(String projectName, String userId, String devBoxName) {
        // Generated convenience method for getRemoteConnectionWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getRemoteConnectionWithResponse(projectName, userId, devBoxName, requestOptions).getValue()
            .toObject(RemoteConnection.class);
    }

    /**
     * Lists actions on a Dev Box.
     * 
     * @param projectName The DevCenter Project upon which to execute operations.
     * @param userId The AAD object id of the user. If value is 'me', the identity is taken from the authentication
     * context.
     * @param devBoxName The name of a Dev Box.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the actions list result as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DevBoxAction> listDevBoxActions(String projectName, String userId, String devBoxName) {
        // Generated convenience method for listDevBoxActions
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.listDevBoxActions(projectName, userId, devBoxName, requestOptions)
            .mapPage(bodyItemValue -> bodyItemValue.toObject(DevBoxAction.class));
    }

    /**
     * Gets an action.
     * 
     * @param projectName The DevCenter Project upon which to execute operations.
     * @param userId The AAD object id of the user. If value is 'me', the identity is taken from the authentication
     * context.
     * @param devBoxName The name of a Dev Box.
     * @param actionName The name of an action that will take place on a Dev Box.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an action.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DevBoxAction getDevBoxAction(String projectName, String userId, String devBoxName, String actionName) {
        // Generated convenience method for getDevBoxActionWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getDevBoxActionWithResponse(projectName, userId, devBoxName, actionName, requestOptions).getValue()
            .toObject(DevBoxAction.class);
    }

    /**
     * Skips an occurrence of an action.
     * 
     * @param projectName The DevCenter Project upon which to execute operations.
     * @param userId The AAD object id of the user. If value is 'me', the identity is taken from the authentication
     * context.
     * @param devBoxName The name of a Dev Box.
     * @param actionName The name of an action that will take place on a Dev Box.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void skipAction(String projectName, String userId, String devBoxName, String actionName) {
        // Generated convenience method for skipActionWithResponse
        RequestOptions requestOptions = new RequestOptions();
        skipActionWithResponse(projectName, userId, devBoxName, actionName, requestOptions).getValue();
    }

    /**
     * Delays the occurrence of an action.
     * 
     * @param projectName The DevCenter Project upon which to execute operations.
     * @param userId The AAD object id of the user. If value is 'me', the identity is taken from the authentication
     * context.
     * @param devBoxName The name of a Dev Box.
     * @param actionName The name of an action that will take place on a Dev Box.
     * @param delayUntil The time to delay the Dev Box action or actions until.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an action which will take place on a Dev Box.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DevBoxAction delayAction(String projectName, String userId, String devBoxName, String actionName,
        OffsetDateTime delayUntil) {
        // Generated convenience method for delayActionWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return delayActionWithResponse(projectName, userId, devBoxName, actionName, delayUntil, requestOptions)
            .getValue().toObject(DevBoxAction.class);
    }

    /**
     * Delays all actions.
     * 
     * @param projectName The DevCenter Project upon which to execute operations.
     * @param userId The AAD object id of the user. If value is 'me', the identity is taken from the authentication
     * context.
     * @param devBoxName The name of a Dev Box.
     * @param delayUntil The time to delay the Dev Box action or actions until.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the actions list result as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DevBoxActionDelayResult> delayAllActions(String projectName, String userId, String devBoxName,
        OffsetDateTime delayUntil) {
        // Generated convenience method for delayAllActions
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.delayAllActions(projectName, userId, devBoxName, delayUntil, requestOptions)
            .mapPage(bodyItemValue -> bodyItemValue.toObject(DevBoxActionDelayResult.class));
    }
}
