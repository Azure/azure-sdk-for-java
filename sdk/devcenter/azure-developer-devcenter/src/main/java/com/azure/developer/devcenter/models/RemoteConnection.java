// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.developer.devcenter.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Provides remote connection information for a Dev Box.
 */
@Immutable
public final class RemoteConnection implements JsonSerializable<RemoteConnection> {

    /*
     * URL to open a browser based RDP session.
     */
    @Generated
    private String webUrl;

    /*
     * Link to open a Remote Desktop session.
     */
    @Generated
    private String rdpConnectionUrl;

    /**
     * Creates an instance of RemoteConnection class.
     */
    @Generated
    private RemoteConnection() {
    }

    /**
     * Get the webUrl property: URL to open a browser based RDP session.
     *
     * @return the webUrl value.
     */
    @Generated
    public String getWebUrl() {
        return this.webUrl;
    }

    /**
     * Get the rdpConnectionUrl property: Link to open a Remote Desktop session.
     *
     * @return the rdpConnectionUrl value.
     */
    @Generated
    public String getRdpConnectionUrl() {
        return this.rdpConnectionUrl;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("webUrl", this.webUrl);
        jsonWriter.writeStringField("rdpConnectionUrl", this.rdpConnectionUrl);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RemoteConnection from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of RemoteConnection if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the RemoteConnection.
     */
    @Generated
    public static RemoteConnection fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RemoteConnection deserializedRemoteConnection = new RemoteConnection();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("webUrl".equals(fieldName)) {
                    deserializedRemoteConnection.webUrl = reader.getString();
                } else if ("rdpConnectionUrl".equals(fieldName)) {
                    deserializedRemoteConnection.rdpConnectionUrl = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedRemoteConnection;
        });
    }
}
