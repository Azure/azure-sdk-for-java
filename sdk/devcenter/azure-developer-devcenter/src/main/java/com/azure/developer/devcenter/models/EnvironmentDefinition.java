// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.developer.devcenter.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * An environment definition.
 */
@Immutable
public final class EnvironmentDefinition implements JsonSerializable<EnvironmentDefinition> {

    /*
     * The ID of the environment definition.
     */
    @Generated
    private final String id;

    /*
     * Name of the environment definition.
     */
    @Generated
    private String name;

    /*
     * Name of the catalog.
     */
    @Generated
    private final String catalogName;

    /*
     * A short description of the environment definition.
     */
    @Generated
    private String description;

    /*
     * Input parameters passed to an environment.
     */
    @Generated
    private List<EnvironmentDefinitionParameter> parameters;

    /*
     * JSON schema defining the parameters object passed to an environment.
     */
    @Generated
    private String parametersSchema;

    /*
     * Path to the Environment Definition entrypoint file.
     */
    @Generated
    private String templatePath;

    /**
     * Creates an instance of EnvironmentDefinition class.
     *
     * @param id the id value to set.
     * @param catalogName the catalogName value to set.
     */
    @Generated
    private EnvironmentDefinition(String id, String catalogName) {
        this.id = id;
        this.catalogName = catalogName;
    }

    /**
     * Get the id property: The ID of the environment definition.
     *
     * @return the id value.
     */
    @Generated
    public String getId() {
        return this.id;
    }

    /**
     * Get the name property: Name of the environment definition.
     *
     * @return the name value.
     */
    @Generated
    public String getName() {
        return this.name;
    }

    /**
     * Get the catalogName property: Name of the catalog.
     *
     * @return the catalogName value.
     */
    @Generated
    public String getCatalogName() {
        return this.catalogName;
    }

    /**
     * Get the description property: A short description of the environment definition.
     *
     * @return the description value.
     */
    @Generated
    public String getDescription() {
        return this.description;
    }

    /**
     * Get the parameters property: Input parameters passed to an environment.
     *
     * @return the parameters value.
     */
    @Generated
    public List<EnvironmentDefinitionParameter> getParameters() {
        return this.parameters;
    }

    /**
     * Get the parametersSchema property: JSON schema defining the parameters object passed to an environment.
     *
     * @return the parametersSchema value.
     */
    @Generated
    public String getParametersSchema() {
        return this.parametersSchema;
    }

    /**
     * Get the templatePath property: Path to the Environment Definition entrypoint file.
     *
     * @return the templatePath value.
     */
    @Generated
    public String getTemplatePath() {
        return this.templatePath;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeStringField("catalogName", this.catalogName);
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeArrayField("parameters", this.parameters, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("parametersSchema", this.parametersSchema);
        jsonWriter.writeStringField("templatePath", this.templatePath);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EnvironmentDefinition from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of EnvironmentDefinition if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the EnvironmentDefinition.
     */
    @Generated
    public static EnvironmentDefinition fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String id = null;
            String name = null;
            String catalogName = null;
            String description = null;
            List<EnvironmentDefinitionParameter> parameters = null;
            String parametersSchema = null;
            String templatePath = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("id".equals(fieldName)) {
                    id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    name = reader.getString();
                } else if ("catalogName".equals(fieldName)) {
                    catalogName = reader.getString();
                } else if ("description".equals(fieldName)) {
                    description = reader.getString();
                } else if ("parameters".equals(fieldName)) {
                    parameters = reader.readArray(reader1 -> EnvironmentDefinitionParameter.fromJson(reader1));
                } else if ("parametersSchema".equals(fieldName)) {
                    parametersSchema = reader.getString();
                } else if ("templatePath".equals(fieldName)) {
                    templatePath = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            EnvironmentDefinition deserializedEnvironmentDefinition = new EnvironmentDefinition(id, catalogName);
            deserializedEnvironmentDefinition.name = name;
            deserializedEnvironmentDefinition.description = description;
            deserializedEnvironmentDefinition.parameters = parameters;
            deserializedEnvironmentDefinition.parametersSchema = parametersSchema;
            deserializedEnvironmentDefinition.templatePath = templatePath;
            return deserializedEnvironmentDefinition;
        });
    }
}
