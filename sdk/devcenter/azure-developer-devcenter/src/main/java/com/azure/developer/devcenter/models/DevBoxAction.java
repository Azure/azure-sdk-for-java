// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.developer.devcenter.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * An action which will take place on a Dev Box.
 */
@Immutable
public final class DevBoxAction implements JsonSerializable<DevBoxAction> {

    /*
     * The name of the action.
     */
    @Generated
    private String name;

    /*
     * The action that will be taken.
     */
    @Generated
    private final DevBoxActionType actionType;

    /*
     * The id of the resource which triggered this action.
     */
    @Generated
    private final String sourceId;

    /*
     * The earliest time that the action could occur (UTC).
     */
    @Generated
    private OffsetDateTime suspendedUntil;

    /*
     * Details about the next run of this action.
     */
    @Generated
    private DevBoxNextAction nextAction;

    /**
     * Creates an instance of DevBoxAction class.
     *
     * @param actionType the actionType value to set.
     * @param sourceId the sourceId value to set.
     */
    @Generated
    private DevBoxAction(DevBoxActionType actionType, String sourceId) {
        this.actionType = actionType;
        this.sourceId = sourceId;
    }

    /**
     * Get the name property: The name of the action.
     *
     * @return the name value.
     */
    @Generated
    public String getName() {
        return this.name;
    }

    /**
     * Get the actionType property: The action that will be taken.
     *
     * @return the actionType value.
     */
    @Generated
    public DevBoxActionType getActionType() {
        return this.actionType;
    }

    /**
     * Get the sourceId property: The id of the resource which triggered this action.
     *
     * @return the sourceId value.
     */
    @Generated
    public String getSourceId() {
        return this.sourceId;
    }

    /**
     * Get the suspendedUntil property: The earliest time that the action could occur (UTC).
     *
     * @return the suspendedUntil value.
     */
    @Generated
    public OffsetDateTime getSuspendedUntil() {
        return this.suspendedUntil;
    }

    /**
     * Get the nextAction property: Details about the next run of this action.
     *
     * @return the nextAction value.
     */
    @Generated
    public DevBoxNextAction getNextAction() {
        return this.nextAction;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("actionType", this.actionType == null ? null : this.actionType.toString());
        jsonWriter.writeStringField("sourceId", this.sourceId);
        jsonWriter.writeStringField("suspendedUntil",
            this.suspendedUntil == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.suspendedUntil));
        jsonWriter.writeJsonField("next", this.nextAction);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DevBoxAction from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of DevBoxAction if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DevBoxAction.
     */
    @Generated
    public static DevBoxAction fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String name = null;
            DevBoxActionType actionType = null;
            String sourceId = null;
            OffsetDateTime suspendedUntil = null;
            DevBoxNextAction nextAction = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("name".equals(fieldName)) {
                    name = reader.getString();
                } else if ("actionType".equals(fieldName)) {
                    actionType = DevBoxActionType.fromString(reader.getString());
                } else if ("sourceId".equals(fieldName)) {
                    sourceId = reader.getString();
                } else if ("suspendedUntil".equals(fieldName)) {
                    suspendedUntil
                        = reader.getNullable(nonNullReader -> OffsetDateTime.parse(nonNullReader.getString()));
                } else if ("next".equals(fieldName)) {
                    nextAction = DevBoxNextAction.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            DevBoxAction deserializedDevBoxAction = new DevBoxAction(actionType, sourceId);
            deserializedDevBoxAction.name = name;
            deserializedDevBoxAction.suspendedUntil = suspendedUntil;
            deserializedDevBoxAction.nextAction = nextAction;
            return deserializedDevBoxAction;
        });
    }
}
