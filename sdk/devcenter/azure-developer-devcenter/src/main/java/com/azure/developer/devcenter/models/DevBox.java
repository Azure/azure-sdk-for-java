// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.developer.devcenter.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.core.models.ResponseError;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * A Dev Box.
 */
@Fluent
public final class DevBox implements JsonSerializable<DevBox> {

    /*
     * Display name for the Dev Box.
     */
    @Generated
    private String name;

    /*
     * Name of the project this Dev Box belongs to.
     */
    @Generated
    private String projectName;

    /*
     * The name of the Dev Box pool this machine belongs to.
     */
    @Generated
    private final String poolName;

    /*
     * Indicates whether hibernate is enabled/disabled or unknown.
     */
    @Generated
    private HibernateSupport hibernateSupport;

    /*
     * The current provisioning state of the Dev Box.
     */
    @Generated
    private DevBoxProvisioningState provisioningState;

    /*
     * The current action state of the Dev Box. This is state is based on previous
     * action performed by user.
     */
    @Generated
    private String actionState;

    /*
     * The current power state of the Dev Box.
     */
    @Generated
    private PowerState powerState;

    /*
     * A unique identifier for the Dev Box. This is a GUID-formatted string (e.g.
     * 00000000-0000-0000-0000-000000000000).
     */
    @Generated
    private String uniqueId;

    /*
     * Provisioning or action error details. Populated only for error states.
     */
    @Generated
    private ResponseError error;

    /*
     * Azure region where this Dev Box is located. This will be the same region as the
     * Virtual Network it is attached to.
     */
    @Generated
    private String location;

    /*
     * The operating system type of this Dev Box.
     */
    @Generated
    private DevBoxOsType osType;

    /*
     * The AAD object id of the user this Dev Box is assigned to.
     */
    @Generated
    private String userId;

    /*
     * Information about the Dev Box's hardware resources.
     */
    @Generated
    private DevBoxHardwareProfile hardwareProfile;

    /*
     * Storage settings for this Dev Box.
     */
    @Generated
    private DevBoxStorageProfile storageProfile;

    /*
     * Information about the image used for this Dev Box.
     */
    @Generated
    private DevBoxImageReference imageReference;

    /*
     * Creation time of this Dev Box.
     */
    @Generated
    private OffsetDateTime createdTime;

    /*
     * Indicates whether the owner of the Dev Box is a local administrator.
     */
    @Generated
    private LocalAdministratorStatus localAdministratorStatus;

    /**
     * Creates an instance of DevBox class.
     *
     * @param devBoxName the dev box name value to set.
     * @param poolName the pool name value to set.
     */
    public DevBox(String devBoxName, String poolName) {
        this.name = devBoxName;
        this.poolName = poolName;
    }

    /**
     * Get the name property: Display name for the Dev Box.
     *
     * @return the name value.
     */
    @Generated
    public String getName() {
        return this.name;
    }

    /**
     * Get the projectName property: Name of the project this Dev Box belongs to.
     *
     * @return the projectName value.
     */
    @Generated
    public String getProjectName() {
        return this.projectName;
    }

    /**
     * Get the poolName property: The name of the Dev Box pool this machine belongs to.
     *
     * @return the poolName value.
     */
    @Generated
    public String getPoolName() {
        return this.poolName;
    }

    /**
     * Get the hibernateSupport property: Indicates whether hibernate is enabled/disabled or unknown.
     *
     * @return the hibernateSupport value.
     */
    @Generated
    public HibernateSupport getHibernateSupport() {
        return this.hibernateSupport;
    }

    /**
     * Get the provisioningState property: The current provisioning state of the Dev Box.
     *
     * @return the provisioningState value.
     */
    @Generated
    public DevBoxProvisioningState getProvisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the actionState property: The current action state of the Dev Box. This is state is based on previous
     * action performed by user.
     *
     * @return the actionState value.
     */
    @Generated
    public String getActionState() {
        return this.actionState;
    }

    /**
     * Get the powerState property: The current power state of the Dev Box.
     *
     * @return the powerState value.
     */
    @Generated
    public PowerState getPowerState() {
        return this.powerState;
    }

    /**
     * Get the uniqueId property: A unique identifier for the Dev Box. This is a GUID-formatted string (e.g.
     * 00000000-0000-0000-0000-000000000000).
     *
     * @return the uniqueId value.
     */
    @Generated
    public String getUniqueId() {
        return this.uniqueId;
    }

    /**
     * Get the error property: Provisioning or action error details. Populated only for error states.
     *
     * @return the error value.
     */
    @Generated
    public ResponseError getError() {
        return this.error;
    }

    /**
     * Get the location property: Azure region where this Dev Box is located. This will be the same region as the
     * Virtual Network it is attached to.
     *
     * @return the location value.
     */
    @Generated
    public String getLocation() {
        return this.location;
    }

    /**
     * Get the osType property: The operating system type of this Dev Box.
     *
     * @return the osType value.
     */
    @Generated
    public DevBoxOsType getOsType() {
        return this.osType;
    }

    /**
     * Get the userId property: The AAD object id of the user this Dev Box is assigned to.
     *
     * @return the userId value.
     */
    @Generated
    public String getUserId() {
        return this.userId;
    }

    /**
     * Get the hardwareProfile property: Information about the Dev Box's hardware resources.
     *
     * @return the hardwareProfile value.
     */
    @Generated
    public DevBoxHardwareProfile getHardwareProfile() {
        return this.hardwareProfile;
    }

    /**
     * Get the storageProfile property: Storage settings for this Dev Box.
     *
     * @return the storageProfile value.
     */
    @Generated
    public DevBoxStorageProfile getStorageProfile() {
        return this.storageProfile;
    }

    /**
     * Get the imageReference property: Information about the image used for this Dev Box.
     *
     * @return the imageReference value.
     */
    @Generated
    public DevBoxImageReference getImageReference() {
        return this.imageReference;
    }

    /**
     * Get the createdTime property: Creation time of this Dev Box.
     *
     * @return the createdTime value.
     */
    @Generated
    public OffsetDateTime getCreatedTime() {
        return this.createdTime;
    }

    /**
     * Get the localAdministratorStatus property: Indicates whether the owner of the Dev Box is a local administrator.
     *
     * @return the localAdministratorStatus value.
     */
    @Generated
    public LocalAdministratorStatus getLocalAdministratorStatus() {
        return this.localAdministratorStatus;
    }

    /**
     * Set the localAdministratorStatus property: Indicates whether the owner of the Dev Box is a local administrator.
     *
     * @param localAdministratorStatus the localAdministratorStatus value to set.
     * @return the DevBox object itself.
     */
    @Generated
    public DevBox setLocalAdministratorStatus(LocalAdministratorStatus localAdministratorStatus) {
        this.localAdministratorStatus = localAdministratorStatus;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("poolName", this.poolName);
        jsonWriter.writeStringField("localAdministrator",
            this.localAdministratorStatus == null ? null : this.localAdministratorStatus.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DevBox from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of DevBox if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DevBox.
     */
    public static DevBox fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String name = null;
            String poolName = null;
            String projectName = null;
            HibernateSupport hibernateSupport = null;
            DevBoxProvisioningState provisioningState = null;
            String actionState = null;
            PowerState powerState = null;
            String uniqueId = null;
            ResponseError error = null;
            String location = null;
            DevBoxOsType osType = null;
            String userId = null;
            DevBoxHardwareProfile hardwareProfile = null;
            DevBoxStorageProfile storageProfile = null;
            DevBoxImageReference imageReference = null;
            OffsetDateTime createdTime = null;
            LocalAdministratorStatus localAdministratorStatus = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("name".equals(fieldName)) {
                    name = reader.getString();
                } else if ("poolName".equals(fieldName)) {
                    poolName = reader.getString();
                } else if ("projectName".equals(fieldName)) {
                    projectName = reader.getString();
                } else if ("hibernateSupport".equals(fieldName)) {
                    hibernateSupport = HibernateSupport.fromString(reader.getString());
                } else if ("provisioningState".equals(fieldName)) {
                    provisioningState = DevBoxProvisioningState.fromString(reader.getString());
                } else if ("actionState".equals(fieldName)) {
                    actionState = reader.getString();
                } else if ("powerState".equals(fieldName)) {
                    powerState = PowerState.fromString(reader.getString());
                } else if ("uniqueId".equals(fieldName)) {
                    uniqueId = reader.getString();
                } else if ("error".equals(fieldName)) {
                    error = ResponseError.fromJson(reader);
                } else if ("location".equals(fieldName)) {
                    location = reader.getString();
                } else if ("osType".equals(fieldName)) {
                    osType = DevBoxOsType.fromString(reader.getString());
                } else if ("user".equals(fieldName)) {
                    userId = reader.getString();
                } else if ("hardwareProfile".equals(fieldName)) {
                    hardwareProfile = DevBoxHardwareProfile.fromJson(reader);
                } else if ("storageProfile".equals(fieldName)) {
                    storageProfile = DevBoxStorageProfile.fromJson(reader);
                } else if ("imageReference".equals(fieldName)) {
                    imageReference = DevBoxImageReference.fromJson(reader);
                } else if ("createdTime".equals(fieldName)) {
                    createdTime = reader.getNullable(nonNullReader -> OffsetDateTime.parse(nonNullReader.getString()));
                } else if ("localAdministrator".equals(fieldName)) {
                    localAdministratorStatus = LocalAdministratorStatus.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            DevBox deserializedDevBox = new DevBox(name, poolName);
            deserializedDevBox.projectName = projectName;
            deserializedDevBox.hibernateSupport = hibernateSupport;
            deserializedDevBox.provisioningState = provisioningState;
            deserializedDevBox.actionState = actionState;
            deserializedDevBox.powerState = powerState;
            deserializedDevBox.uniqueId = uniqueId;
            deserializedDevBox.error = error;
            deserializedDevBox.location = location;
            deserializedDevBox.osType = osType;
            deserializedDevBox.userId = userId;
            deserializedDevBox.hardwareProfile = hardwareProfile;
            deserializedDevBox.storageProfile = storageProfile;
            deserializedDevBox.imageReference = imageReference;
            deserializedDevBox.createdTime = createdTime;
            deserializedDevBox.localAdministratorStatus = localAdministratorStatus;
            return deserializedDevBox;
        });
    }
}
