// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devcenter.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The Encryption model.
 */
@Fluent
public final class Encryption implements JsonSerializable<Encryption> {
    /*
     * All Customer-managed key encryption properties for the resource.
     */
    private CustomerManagedKeyEncryption customerManagedKeyEncryption;

    /**
     * Creates an instance of Encryption class.
     */
    public Encryption() {
    }

    /**
     * Get the customerManagedKeyEncryption property: All Customer-managed key encryption properties for the resource.
     * 
     * @return the customerManagedKeyEncryption value.
     */
    public CustomerManagedKeyEncryption customerManagedKeyEncryption() {
        return this.customerManagedKeyEncryption;
    }

    /**
     * Set the customerManagedKeyEncryption property: All Customer-managed key encryption properties for the resource.
     * 
     * @param customerManagedKeyEncryption the customerManagedKeyEncryption value to set.
     * @return the Encryption object itself.
     */
    public Encryption withCustomerManagedKeyEncryption(CustomerManagedKeyEncryption customerManagedKeyEncryption) {
        this.customerManagedKeyEncryption = customerManagedKeyEncryption;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (customerManagedKeyEncryption() != null) {
            customerManagedKeyEncryption().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("customerManagedKeyEncryption", this.customerManagedKeyEncryption);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Encryption from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Encryption if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the Encryption.
     */
    public static Encryption fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Encryption deserializedEncryption = new Encryption();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("customerManagedKeyEncryption".equals(fieldName)) {
                    deserializedEncryption.customerManagedKeyEncryption = CustomerManagedKeyEncryption.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedEncryption;
        });
    }
}
