// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devcenter.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Properties for a Git repository catalog. */
@Fluent
public final class GitCatalog {
    /*
     * Git URI.
     */
    @JsonProperty(value = "uri")
    private String uri;

    /*
     * Git branch.
     */
    @JsonProperty(value = "branch")
    private String branch;

    /*
     * A reference to the Key Vault secret containing a security token to authenticate to a Git repository.
     */
    @JsonProperty(value = "secretIdentifier")
    private String secretIdentifier;

    /*
     * The folder where the catalog items can be found inside the repository.
     */
    @JsonProperty(value = "path")
    private String path;

    /** Creates an instance of GitCatalog class. */
    public GitCatalog() {
    }

    /**
     * Get the uri property: Git URI.
     *
     * @return the uri value.
     */
    public String uri() {
        return this.uri;
    }

    /**
     * Set the uri property: Git URI.
     *
     * @param uri the uri value to set.
     * @return the GitCatalog object itself.
     */
    public GitCatalog withUri(String uri) {
        this.uri = uri;
        return this;
    }

    /**
     * Get the branch property: Git branch.
     *
     * @return the branch value.
     */
    public String branch() {
        return this.branch;
    }

    /**
     * Set the branch property: Git branch.
     *
     * @param branch the branch value to set.
     * @return the GitCatalog object itself.
     */
    public GitCatalog withBranch(String branch) {
        this.branch = branch;
        return this;
    }

    /**
     * Get the secretIdentifier property: A reference to the Key Vault secret containing a security token to
     * authenticate to a Git repository.
     *
     * @return the secretIdentifier value.
     */
    public String secretIdentifier() {
        return this.secretIdentifier;
    }

    /**
     * Set the secretIdentifier property: A reference to the Key Vault secret containing a security token to
     * authenticate to a Git repository.
     *
     * @param secretIdentifier the secretIdentifier value to set.
     * @return the GitCatalog object itself.
     */
    public GitCatalog withSecretIdentifier(String secretIdentifier) {
        this.secretIdentifier = secretIdentifier;
        return this;
    }

    /**
     * Get the path property: The folder where the catalog items can be found inside the repository.
     *
     * @return the path value.
     */
    public String path() {
        return this.path;
    }

    /**
     * Set the path property: The folder where the catalog items can be found inside the repository.
     *
     * @param path the path value to set.
     * @return the GitCatalog object itself.
     */
    public GitCatalog withPath(String path) {
        this.path = path;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
