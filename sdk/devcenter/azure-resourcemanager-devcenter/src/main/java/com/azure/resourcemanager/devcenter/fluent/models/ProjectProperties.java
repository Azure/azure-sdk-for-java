// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devcenter.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.devcenter.models.ProvisioningState;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Properties of a project. */
@Fluent
public final class ProjectProperties extends ProjectUpdateProperties {
    /*
     * The provisioning state of the resource.
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private ProvisioningState provisioningState;

    /*
     * The URI of the Dev Center resource this project is associated with.
     */
    @JsonProperty(value = "devCenterUri", access = JsonProperty.Access.WRITE_ONLY)
    private String devCenterUri;

    /** Creates an instance of ProjectProperties class. */
    public ProjectProperties() {
    }

    /**
     * Get the provisioningState property: The provisioning state of the resource.
     *
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the devCenterUri property: The URI of the Dev Center resource this project is associated with.
     *
     * @return the devCenterUri value.
     */
    public String devCenterUri() {
        return this.devCenterUri;
    }

    /** {@inheritDoc} */
    @Override
    public ProjectProperties withDevCenterId(String devCenterId) {
        super.withDevCenterId(devCenterId);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public ProjectProperties withDescription(String description) {
        super.withDescription(description);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public ProjectProperties withMaxDevBoxesPerUser(Integer maxDevBoxesPerUser) {
        super.withMaxDevBoxesPerUser(maxDevBoxesPerUser);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
    }
}
