// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devcenter.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.devcenter.fluent.models.CatalogUpdateProperties;
import java.io.IOException;
import java.util.Map;

/**
 * The catalog's properties for partial update. Properties not provided in the update request will not be changed.
 */
@Fluent
public final class CatalogUpdate implements JsonSerializable<CatalogUpdate> {
    /*
     * Catalog properties for update.
     */
    private CatalogUpdateProperties innerProperties;

    /**
     * Creates an instance of CatalogUpdate class.
     */
    public CatalogUpdate() {
    }

    /**
     * Get the innerProperties property: Catalog properties for update.
     * 
     * @return the innerProperties value.
     */
    private CatalogUpdateProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the gitHub property: Properties for a GitHub catalog type.
     * 
     * @return the gitHub value.
     */
    public GitCatalog gitHub() {
        return this.innerProperties() == null ? null : this.innerProperties().gitHub();
    }

    /**
     * Set the gitHub property: Properties for a GitHub catalog type.
     * 
     * @param gitHub the gitHub value to set.
     * @return the CatalogUpdate object itself.
     */
    public CatalogUpdate withGitHub(GitCatalog gitHub) {
        if (this.innerProperties() == null) {
            this.innerProperties = new CatalogUpdateProperties();
        }
        this.innerProperties().withGitHub(gitHub);
        return this;
    }

    /**
     * Get the adoGit property: Properties for an Azure DevOps catalog type.
     * 
     * @return the adoGit value.
     */
    public GitCatalog adoGit() {
        return this.innerProperties() == null ? null : this.innerProperties().adoGit();
    }

    /**
     * Set the adoGit property: Properties for an Azure DevOps catalog type.
     * 
     * @param adoGit the adoGit value to set.
     * @return the CatalogUpdate object itself.
     */
    public CatalogUpdate withAdoGit(GitCatalog adoGit) {
        if (this.innerProperties() == null) {
            this.innerProperties = new CatalogUpdateProperties();
        }
        this.innerProperties().withAdoGit(adoGit);
        return this;
    }

    /**
     * Get the syncType property: Indicates the type of sync that is configured for the catalog.
     * 
     * @return the syncType value.
     */
    public CatalogSyncType syncType() {
        return this.innerProperties() == null ? null : this.innerProperties().syncType();
    }

    /**
     * Set the syncType property: Indicates the type of sync that is configured for the catalog.
     * 
     * @param syncType the syncType value to set.
     * @return the CatalogUpdate object itself.
     */
    public CatalogUpdate withSyncType(CatalogSyncType syncType) {
        if (this.innerProperties() == null) {
            this.innerProperties = new CatalogUpdateProperties();
        }
        this.innerProperties().withSyncType(syncType);
        return this;
    }

    /**
     * Get the tags property: Resource tags.
     * 
     * @return the tags value.
     */
    public Map<String, String> tags() {
        return this.innerProperties() == null ? null : this.innerProperties().tags();
    }

    /**
     * Set the tags property: Resource tags.
     * 
     * @param tags the tags value to set.
     * @return the CatalogUpdate object itself.
     */
    public CatalogUpdate withTags(Map<String, String> tags) {
        if (this.innerProperties() == null) {
            this.innerProperties = new CatalogUpdateProperties();
        }
        this.innerProperties().withTags(tags);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CatalogUpdate from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CatalogUpdate if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the CatalogUpdate.
     */
    public static CatalogUpdate fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CatalogUpdate deserializedCatalogUpdate = new CatalogUpdate();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("properties".equals(fieldName)) {
                    deserializedCatalogUpdate.innerProperties = CatalogUpdateProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCatalogUpdate;
        });
    }
}
