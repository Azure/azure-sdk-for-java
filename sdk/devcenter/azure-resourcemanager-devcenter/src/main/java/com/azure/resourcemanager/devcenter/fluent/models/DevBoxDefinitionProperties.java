// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devcenter.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.devcenter.models.CatalogResourceValidationStatus;
import com.azure.resourcemanager.devcenter.models.HibernateSupport;
import com.azure.resourcemanager.devcenter.models.ImageReference;
import com.azure.resourcemanager.devcenter.models.ImageValidationErrorDetails;
import com.azure.resourcemanager.devcenter.models.ImageValidationStatus;
import com.azure.resourcemanager.devcenter.models.ProvisioningState;
import com.azure.resourcemanager.devcenter.models.Sku;
import java.io.IOException;

/**
 * Properties of a Dev Box definition.
 */
@Fluent
public final class DevBoxDefinitionProperties extends DevBoxDefinitionUpdateProperties {
    /*
     * The provisioning state of the resource.
     */
    private ProvisioningState provisioningState;

    /*
     * Validation status of the configured image.
     */
    private ImageValidationStatus imageValidationStatus;

    /*
     * Details for image validator error. Populated when the image validation is not successful.
     */
    private ImageValidationErrorDetails imageValidationErrorDetails;

    /*
     * Validation status for the Dev Box Definition.
     */
    private CatalogResourceValidationStatus validationStatus;

    /*
     * Image reference information for the currently active image (only populated during updates).
     */
    private ImageReference activeImageReference;

    /**
     * Creates an instance of DevBoxDefinitionProperties class.
     */
    public DevBoxDefinitionProperties() {
    }

    /**
     * Get the provisioningState property: The provisioning state of the resource.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the imageValidationStatus property: Validation status of the configured image.
     * 
     * @return the imageValidationStatus value.
     */
    public ImageValidationStatus imageValidationStatus() {
        return this.imageValidationStatus;
    }

    /**
     * Get the imageValidationErrorDetails property: Details for image validator error. Populated when the image
     * validation is not successful.
     * 
     * @return the imageValidationErrorDetails value.
     */
    public ImageValidationErrorDetails imageValidationErrorDetails() {
        return this.imageValidationErrorDetails;
    }

    /**
     * Get the validationStatus property: Validation status for the Dev Box Definition.
     * 
     * @return the validationStatus value.
     */
    public CatalogResourceValidationStatus validationStatus() {
        return this.validationStatus;
    }

    /**
     * Get the activeImageReference property: Image reference information for the currently active image (only populated
     * during updates).
     * 
     * @return the activeImageReference value.
     */
    public ImageReference activeImageReference() {
        return this.activeImageReference;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DevBoxDefinitionProperties withImageReference(ImageReference imageReference) {
        super.withImageReference(imageReference);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DevBoxDefinitionProperties withSku(Sku sku) {
        super.withSku(sku);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DevBoxDefinitionProperties withOsStorageType(String osStorageType) {
        super.withOsStorageType(osStorageType);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DevBoxDefinitionProperties withHibernateSupport(HibernateSupport hibernateSupport) {
        super.withHibernateSupport(hibernateSupport);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (imageValidationErrorDetails() != null) {
            imageValidationErrorDetails().validate();
        }
        if (activeImageReference() != null) {
            activeImageReference().validate();
        }
        if (imageReference() != null) {
            imageReference().validate();
        }
        if (sku() != null) {
            sku().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("imageReference", imageReference());
        jsonWriter.writeJsonField("sku", sku());
        jsonWriter.writeStringField("osStorageType", osStorageType());
        jsonWriter.writeStringField("hibernateSupport",
            hibernateSupport() == null ? null : hibernateSupport().toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DevBoxDefinitionProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DevBoxDefinitionProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DevBoxDefinitionProperties.
     */
    public static DevBoxDefinitionProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DevBoxDefinitionProperties deserializedDevBoxDefinitionProperties = new DevBoxDefinitionProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("imageReference".equals(fieldName)) {
                    deserializedDevBoxDefinitionProperties.withImageReference(ImageReference.fromJson(reader));
                } else if ("sku".equals(fieldName)) {
                    deserializedDevBoxDefinitionProperties.withSku(Sku.fromJson(reader));
                } else if ("osStorageType".equals(fieldName)) {
                    deserializedDevBoxDefinitionProperties.withOsStorageType(reader.getString());
                } else if ("hibernateSupport".equals(fieldName)) {
                    deserializedDevBoxDefinitionProperties
                        .withHibernateSupport(HibernateSupport.fromString(reader.getString()));
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedDevBoxDefinitionProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else if ("imageValidationStatus".equals(fieldName)) {
                    deserializedDevBoxDefinitionProperties.imageValidationStatus
                        = ImageValidationStatus.fromString(reader.getString());
                } else if ("imageValidationErrorDetails".equals(fieldName)) {
                    deserializedDevBoxDefinitionProperties.imageValidationErrorDetails
                        = ImageValidationErrorDetails.fromJson(reader);
                } else if ("validationStatus".equals(fieldName)) {
                    deserializedDevBoxDefinitionProperties.validationStatus
                        = CatalogResourceValidationStatus.fromString(reader.getString());
                } else if ("activeImageReference".equals(fieldName)) {
                    deserializedDevBoxDefinitionProperties.activeImageReference = ImageReference.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDevBoxDefinitionProperties;
        });
    }
}
