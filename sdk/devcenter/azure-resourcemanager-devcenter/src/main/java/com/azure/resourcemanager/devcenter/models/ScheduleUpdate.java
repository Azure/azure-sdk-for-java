// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devcenter.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.devcenter.fluent.models.ScheduleUpdateProperties;
import java.io.IOException;
import java.util.Map;

/**
 * The schedule properties for partial update. Properties not provided in the update request will not be changed.
 */
@Fluent
public final class ScheduleUpdate implements JsonSerializable<ScheduleUpdate> {
    /*
     * Properties of a schedule resource to be updated.
     */
    private ScheduleUpdateProperties innerProperties;

    /**
     * Creates an instance of ScheduleUpdate class.
     */
    public ScheduleUpdate() {
    }

    /**
     * Get the innerProperties property: Properties of a schedule resource to be updated.
     * 
     * @return the innerProperties value.
     */
    private ScheduleUpdateProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the type property: Supported type this scheduled task represents.
     * 
     * @return the type value.
     */
    public ScheduledType type() {
        return this.innerProperties() == null ? null : this.innerProperties().type();
    }

    /**
     * Set the type property: Supported type this scheduled task represents.
     * 
     * @param type the type value to set.
     * @return the ScheduleUpdate object itself.
     */
    public ScheduleUpdate withType(ScheduledType type) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ScheduleUpdateProperties();
        }
        this.innerProperties().withType(type);
        return this;
    }

    /**
     * Get the frequency property: The frequency of this scheduled task.
     * 
     * @return the frequency value.
     */
    public ScheduledFrequency frequency() {
        return this.innerProperties() == null ? null : this.innerProperties().frequency();
    }

    /**
     * Set the frequency property: The frequency of this scheduled task.
     * 
     * @param frequency the frequency value to set.
     * @return the ScheduleUpdate object itself.
     */
    public ScheduleUpdate withFrequency(ScheduledFrequency frequency) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ScheduleUpdateProperties();
        }
        this.innerProperties().withFrequency(frequency);
        return this;
    }

    /**
     * Get the time property: The target time to trigger the action. The format is HH:MM.
     * 
     * @return the time value.
     */
    public String time() {
        return this.innerProperties() == null ? null : this.innerProperties().time();
    }

    /**
     * Set the time property: The target time to trigger the action. The format is HH:MM.
     * 
     * @param time the time value to set.
     * @return the ScheduleUpdate object itself.
     */
    public ScheduleUpdate withTime(String time) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ScheduleUpdateProperties();
        }
        this.innerProperties().withTime(time);
        return this;
    }

    /**
     * Get the timeZone property: The IANA timezone id at which the schedule should execute.
     * 
     * @return the timeZone value.
     */
    public String timeZone() {
        return this.innerProperties() == null ? null : this.innerProperties().timeZone();
    }

    /**
     * Set the timeZone property: The IANA timezone id at which the schedule should execute.
     * 
     * @param timeZone the timeZone value to set.
     * @return the ScheduleUpdate object itself.
     */
    public ScheduleUpdate withTimeZone(String timeZone) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ScheduleUpdateProperties();
        }
        this.innerProperties().withTimeZone(timeZone);
        return this;
    }

    /**
     * Get the state property: Indicates whether or not this scheduled task is enabled.
     * 
     * @return the state value.
     */
    public ScheduleEnableStatus state() {
        return this.innerProperties() == null ? null : this.innerProperties().state();
    }

    /**
     * Set the state property: Indicates whether or not this scheduled task is enabled.
     * 
     * @param state the state value to set.
     * @return the ScheduleUpdate object itself.
     */
    public ScheduleUpdate withState(ScheduleEnableStatus state) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ScheduleUpdateProperties();
        }
        this.innerProperties().withState(state);
        return this;
    }

    /**
     * Get the tags property: Resource tags.
     * 
     * @return the tags value.
     */
    public Map<String, String> tags() {
        return this.innerProperties() == null ? null : this.innerProperties().tags();
    }

    /**
     * Set the tags property: Resource tags.
     * 
     * @param tags the tags value to set.
     * @return the ScheduleUpdate object itself.
     */
    public ScheduleUpdate withTags(Map<String, String> tags) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ScheduleUpdateProperties();
        }
        this.innerProperties().withTags(tags);
        return this;
    }

    /**
     * Get the location property: The geo-location where the resource lives.
     * 
     * @return the location value.
     */
    public String location() {
        return this.innerProperties() == null ? null : this.innerProperties().location();
    }

    /**
     * Set the location property: The geo-location where the resource lives.
     * 
     * @param location the location value to set.
     * @return the ScheduleUpdate object itself.
     */
    public ScheduleUpdate withLocation(String location) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ScheduleUpdateProperties();
        }
        this.innerProperties().withLocation(location);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ScheduleUpdate from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ScheduleUpdate if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ScheduleUpdate.
     */
    public static ScheduleUpdate fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ScheduleUpdate deserializedScheduleUpdate = new ScheduleUpdate();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("properties".equals(fieldName)) {
                    deserializedScheduleUpdate.innerProperties = ScheduleUpdateProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedScheduleUpdate;
        });
    }
}
