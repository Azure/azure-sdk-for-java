// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devcenter.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * The role definition assigned to the environment creator on backing resources.
 */
@Fluent
public final class ProjectEnvironmentTypeUpdatePropertiesCreatorRoleAssignment
    implements JsonSerializable<ProjectEnvironmentTypeUpdatePropertiesCreatorRoleAssignment> {
    /*
     * A map of roles to assign to the environment creator.
     */
    private Map<String, EnvironmentRole> roles;

    /**
     * Creates an instance of ProjectEnvironmentTypeUpdatePropertiesCreatorRoleAssignment class.
     */
    public ProjectEnvironmentTypeUpdatePropertiesCreatorRoleAssignment() {
    }

    /**
     * Get the roles property: A map of roles to assign to the environment creator.
     * 
     * @return the roles value.
     */
    public Map<String, EnvironmentRole> roles() {
        return this.roles;
    }

    /**
     * Set the roles property: A map of roles to assign to the environment creator.
     * 
     * @param roles the roles value to set.
     * @return the ProjectEnvironmentTypeUpdatePropertiesCreatorRoleAssignment object itself.
     */
    public ProjectEnvironmentTypeUpdatePropertiesCreatorRoleAssignment withRoles(Map<String, EnvironmentRole> roles) {
        this.roles = roles;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (roles() != null) {
            roles().values().forEach(e -> {
                if (e != null) {
                    e.validate();
                }
            });
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeMapField("roles", this.roles, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ProjectEnvironmentTypeUpdatePropertiesCreatorRoleAssignment from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ProjectEnvironmentTypeUpdatePropertiesCreatorRoleAssignment if the JsonReader was pointing
     * to an instance of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the
     * ProjectEnvironmentTypeUpdatePropertiesCreatorRoleAssignment.
     */
    public static ProjectEnvironmentTypeUpdatePropertiesCreatorRoleAssignment fromJson(JsonReader jsonReader)
        throws IOException {
        return jsonReader.readObject(reader -> {
            ProjectEnvironmentTypeUpdatePropertiesCreatorRoleAssignment deserializedProjectEnvironmentTypeUpdatePropertiesCreatorRoleAssignment
                = new ProjectEnvironmentTypeUpdatePropertiesCreatorRoleAssignment();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("roles".equals(fieldName)) {
                    Map<String, EnvironmentRole> roles = reader.readMap(reader1 -> EnvironmentRole.fromJson(reader1));
                    deserializedProjectEnvironmentTypeUpdatePropertiesCreatorRoleAssignment.roles = roles;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedProjectEnvironmentTypeUpdatePropertiesCreatorRoleAssignment;
        });
    }
}
