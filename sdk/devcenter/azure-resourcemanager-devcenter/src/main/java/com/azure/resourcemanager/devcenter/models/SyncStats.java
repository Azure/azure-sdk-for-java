// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devcenter.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/**
 * Stats of the synchronization.
 */
@Fluent
public final class SyncStats {
    /*
     * Count of catalog items added during synchronization.
     */
    @JsonProperty(value = "added", access = JsonProperty.Access.WRITE_ONLY)
    private Integer added;

    /*
     * Count of catalog items updated during synchronization.
     */
    @JsonProperty(value = "updated", access = JsonProperty.Access.WRITE_ONLY)
    private Integer updated;

    /*
     * Count of catalog items that were unchanged during synchronization.
     */
    @JsonProperty(value = "unchanged", access = JsonProperty.Access.WRITE_ONLY)
    private Integer unchanged;

    /*
     * Count of catalog items removed during synchronization.
     */
    @JsonProperty(value = "removed", access = JsonProperty.Access.WRITE_ONLY)
    private Integer removed;

    /*
     * Count of catalog items that had validation errors during synchronization.
     */
    @JsonProperty(value = "validationErrors", access = JsonProperty.Access.WRITE_ONLY)
    private Integer validationErrors;

    /*
     * Count of synchronization errors that occured during synchronization.
     */
    @JsonProperty(value = "synchronizationErrors", access = JsonProperty.Access.WRITE_ONLY)
    private Integer synchronizationErrors;

    /*
     * Indicates catalog item types that were synced.
     */
    @JsonProperty(value = "syncedCatalogItemTypes")
    private List<CatalogItemType> syncedCatalogItemTypes;

    /**
     * Creates an instance of SyncStats class.
     */
    public SyncStats() {
    }

    /**
     * Get the added property: Count of catalog items added during synchronization.
     * 
     * @return the added value.
     */
    public Integer added() {
        return this.added;
    }

    /**
     * Get the updated property: Count of catalog items updated during synchronization.
     * 
     * @return the updated value.
     */
    public Integer updated() {
        return this.updated;
    }

    /**
     * Get the unchanged property: Count of catalog items that were unchanged during synchronization.
     * 
     * @return the unchanged value.
     */
    public Integer unchanged() {
        return this.unchanged;
    }

    /**
     * Get the removed property: Count of catalog items removed during synchronization.
     * 
     * @return the removed value.
     */
    public Integer removed() {
        return this.removed;
    }

    /**
     * Get the validationErrors property: Count of catalog items that had validation errors during synchronization.
     * 
     * @return the validationErrors value.
     */
    public Integer validationErrors() {
        return this.validationErrors;
    }

    /**
     * Get the synchronizationErrors property: Count of synchronization errors that occured during synchronization.
     * 
     * @return the synchronizationErrors value.
     */
    public Integer synchronizationErrors() {
        return this.synchronizationErrors;
    }

    /**
     * Get the syncedCatalogItemTypes property: Indicates catalog item types that were synced.
     * 
     * @return the syncedCatalogItemTypes value.
     */
    public List<CatalogItemType> syncedCatalogItemTypes() {
        return this.syncedCatalogItemTypes;
    }

    /**
     * Set the syncedCatalogItemTypes property: Indicates catalog item types that were synced.
     * 
     * @param syncedCatalogItemTypes the syncedCatalogItemTypes value to set.
     * @return the SyncStats object itself.
     */
    public SyncStats withSyncedCatalogItemTypes(List<CatalogItemType> syncedCatalogItemTypes) {
        this.syncedCatalogItemTypes = syncedCatalogItemTypes;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
