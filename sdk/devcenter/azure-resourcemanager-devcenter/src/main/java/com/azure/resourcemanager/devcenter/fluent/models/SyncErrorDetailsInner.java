// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devcenter.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.resourcemanager.devcenter.models.CatalogConflictError;
import com.azure.resourcemanager.devcenter.models.CatalogErrorDetails;
import com.azure.resourcemanager.devcenter.models.CatalogSyncError;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/**
 * Synchronization error details.
 */
@Immutable
public final class SyncErrorDetailsInner {
    /*
     * Error information for the overall synchronization operation.
     */
    @JsonProperty(value = "operationError", access = JsonProperty.Access.WRITE_ONLY)
    private CatalogErrorDetails operationError;

    /*
     * Catalog items that have conflicting names.
     */
    @JsonProperty(value = "conflicts", access = JsonProperty.Access.WRITE_ONLY)
    private List<CatalogConflictError> conflicts;

    /*
     * Errors that occured during synchronization.
     */
    @JsonProperty(value = "errors", access = JsonProperty.Access.WRITE_ONLY)
    private List<CatalogSyncError> errors;

    /**
     * Creates an instance of SyncErrorDetailsInner class.
     */
    public SyncErrorDetailsInner() {
    }

    /**
     * Get the operationError property: Error information for the overall synchronization operation.
     * 
     * @return the operationError value.
     */
    public CatalogErrorDetails operationError() {
        return this.operationError;
    }

    /**
     * Get the conflicts property: Catalog items that have conflicting names.
     * 
     * @return the conflicts value.
     */
    public List<CatalogConflictError> conflicts() {
        return this.conflicts;
    }

    /**
     * Get the errors property: Errors that occured during synchronization.
     * 
     * @return the errors value.
     */
    public List<CatalogSyncError> errors() {
        return this.errors;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (operationError() != null) {
            operationError().validate();
        }
        if (conflicts() != null) {
            conflicts().forEach(e -> e.validate());
        }
        if (errors() != null) {
            errors().forEach(e -> e.validate());
        }
    }
}
