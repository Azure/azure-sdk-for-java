// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devcenter.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * An individual synchronization error.
 */
@Immutable
public final class CatalogSyncError implements JsonSerializable<CatalogSyncError> {
    /*
     * The path of the file the error is associated with.
     */
    private String path;

    /*
     * Errors associated with the file.
     */
    private List<CatalogErrorDetails> errorDetails;

    /**
     * Creates an instance of CatalogSyncError class.
     */
    public CatalogSyncError() {
    }

    /**
     * Get the path property: The path of the file the error is associated with.
     * 
     * @return the path value.
     */
    public String path() {
        return this.path;
    }

    /**
     * Get the errorDetails property: Errors associated with the file.
     * 
     * @return the errorDetails value.
     */
    public List<CatalogErrorDetails> errorDetails() {
        return this.errorDetails;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (errorDetails() != null) {
            errorDetails().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CatalogSyncError from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CatalogSyncError if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the CatalogSyncError.
     */
    public static CatalogSyncError fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CatalogSyncError deserializedCatalogSyncError = new CatalogSyncError();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("path".equals(fieldName)) {
                    deserializedCatalogSyncError.path = reader.getString();
                } else if ("errorDetails".equals(fieldName)) {
                    List<CatalogErrorDetails> errorDetails
                        = reader.readArray(reader1 -> CatalogErrorDetails.fromJson(reader1));
                    deserializedCatalogSyncError.errorDetails = errorDetails;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCatalogSyncError;
        });
    }
}
