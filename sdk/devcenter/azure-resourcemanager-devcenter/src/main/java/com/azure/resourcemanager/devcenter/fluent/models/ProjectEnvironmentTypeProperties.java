// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devcenter.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.devcenter.models.EnvironmentTypeEnableStatus;
import com.azure.resourcemanager.devcenter.models.ProjectEnvironmentTypeUpdatePropertiesCreatorRoleAssignment;
import com.azure.resourcemanager.devcenter.models.ProvisioningState;
import com.azure.resourcemanager.devcenter.models.UserRoleAssignmentValue;
import java.io.IOException;
import java.util.Map;

/**
 * Properties of a project environment type.
 */
@Fluent
public final class ProjectEnvironmentTypeProperties extends ProjectEnvironmentTypeUpdateProperties {
    /*
     * The provisioning state of the resource.
     */
    private ProvisioningState provisioningState;

    /*
     * The number of environments of this type.
     */
    private Integer environmentCount;

    /**
     * Creates an instance of ProjectEnvironmentTypeProperties class.
     */
    public ProjectEnvironmentTypeProperties() {
    }

    /**
     * Get the provisioningState property: The provisioning state of the resource.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the environmentCount property: The number of environments of this type.
     * 
     * @return the environmentCount value.
     */
    public Integer environmentCount() {
        return this.environmentCount;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProjectEnvironmentTypeProperties withDeploymentTargetId(String deploymentTargetId) {
        super.withDeploymentTargetId(deploymentTargetId);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProjectEnvironmentTypeProperties withDisplayName(String displayName) {
        super.withDisplayName(displayName);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProjectEnvironmentTypeProperties withStatus(EnvironmentTypeEnableStatus status) {
        super.withStatus(status);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProjectEnvironmentTypeProperties
        withCreatorRoleAssignment(ProjectEnvironmentTypeUpdatePropertiesCreatorRoleAssignment creatorRoleAssignment) {
        super.withCreatorRoleAssignment(creatorRoleAssignment);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProjectEnvironmentTypeProperties
        withUserRoleAssignments(Map<String, UserRoleAssignmentValue> userRoleAssignments) {
        super.withUserRoleAssignments(userRoleAssignments);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (creatorRoleAssignment() != null) {
            creatorRoleAssignment().validate();
        }
        if (userRoleAssignments() != null) {
            userRoleAssignments().values().forEach(e -> {
                if (e != null) {
                    e.validate();
                }
            });
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("deploymentTargetId", deploymentTargetId());
        jsonWriter.writeStringField("displayName", displayName());
        jsonWriter.writeStringField("status", status() == null ? null : status().toString());
        jsonWriter.writeJsonField("creatorRoleAssignment", creatorRoleAssignment());
        jsonWriter.writeMapField("userRoleAssignments", userRoleAssignments(),
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ProjectEnvironmentTypeProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ProjectEnvironmentTypeProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ProjectEnvironmentTypeProperties.
     */
    public static ProjectEnvironmentTypeProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ProjectEnvironmentTypeProperties deserializedProjectEnvironmentTypeProperties
                = new ProjectEnvironmentTypeProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("deploymentTargetId".equals(fieldName)) {
                    deserializedProjectEnvironmentTypeProperties.withDeploymentTargetId(reader.getString());
                } else if ("displayName".equals(fieldName)) {
                    deserializedProjectEnvironmentTypeProperties.withDisplayName(reader.getString());
                } else if ("status".equals(fieldName)) {
                    deserializedProjectEnvironmentTypeProperties
                        .withStatus(EnvironmentTypeEnableStatus.fromString(reader.getString()));
                } else if ("creatorRoleAssignment".equals(fieldName)) {
                    deserializedProjectEnvironmentTypeProperties.withCreatorRoleAssignment(
                        ProjectEnvironmentTypeUpdatePropertiesCreatorRoleAssignment.fromJson(reader));
                } else if ("userRoleAssignments".equals(fieldName)) {
                    Map<String, UserRoleAssignmentValue> userRoleAssignments
                        = reader.readMap(reader1 -> UserRoleAssignmentValue.fromJson(reader1));
                    deserializedProjectEnvironmentTypeProperties.withUserRoleAssignments(userRoleAssignments);
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedProjectEnvironmentTypeProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else if ("environmentCount".equals(fieldName)) {
                    deserializedProjectEnvironmentTypeProperties.environmentCount
                        = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedProjectEnvironmentTypeProperties;
        });
    }
}
