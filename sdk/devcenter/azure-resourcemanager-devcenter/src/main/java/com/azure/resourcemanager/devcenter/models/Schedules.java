// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devcenter.models;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;

/** Resource collection API of Schedules. */
public interface Schedules {
    /**
     * Lists schedules for a pool.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription.
     * @param projectName The name of the project.
     * @param poolName Name of the pool.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of the schedule list operation as paginated response with {@link PagedIterable}.
     */
    PagedIterable<Schedule> listByPool(String resourceGroupName, String projectName, String poolName);

    /**
     * Lists schedules for a pool.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription.
     * @param projectName The name of the project.
     * @param poolName Name of the pool.
     * @param top The maximum number of resources to return from the operation. Example: '$top=10'.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of the schedule list operation as paginated response with {@link PagedIterable}.
     */
    PagedIterable<Schedule> listByPool(
        String resourceGroupName, String projectName, String poolName, Integer top, Context context);

    /**
     * Gets a schedule resource.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription.
     * @param projectName The name of the project.
     * @param poolName Name of the pool.
     * @param scheduleName The name of the schedule that uniquely identifies it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a schedule resource.
     */
    Schedule get(String resourceGroupName, String projectName, String poolName, String scheduleName);

    /**
     * Gets a schedule resource.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription.
     * @param projectName The name of the project.
     * @param poolName Name of the pool.
     * @param scheduleName The name of the schedule that uniquely identifies it.
     * @param top The maximum number of resources to return from the operation. Example: '$top=10'.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a schedule resource along with {@link Response}.
     */
    Response<Schedule> getWithResponse(
        String resourceGroupName,
        String projectName,
        String poolName,
        String scheduleName,
        Integer top,
        Context context);

    /**
     * Partially updates a Scheduled.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription.
     * @param projectName The name of the project.
     * @param poolName Name of the pool.
     * @param scheduleName The name of the schedule that uniquely identifies it.
     * @param body Represents a scheduled task.
     * @param top The maximum number of resources to return from the operation. Example: '$top=10'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void update(
        String resourceGroupName,
        String projectName,
        String poolName,
        String scheduleName,
        ScheduleUpdate body,
        Integer top);

    /**
     * Partially updates a Scheduled.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription.
     * @param projectName The name of the project.
     * @param poolName Name of the pool.
     * @param scheduleName The name of the schedule that uniquely identifies it.
     * @param body Represents a scheduled task.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void update(
        String resourceGroupName, String projectName, String poolName, String scheduleName, ScheduleUpdate body);

    /**
     * Partially updates a Scheduled.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription.
     * @param projectName The name of the project.
     * @param poolName Name of the pool.
     * @param scheduleName The name of the schedule that uniquely identifies it.
     * @param body Represents a scheduled task.
     * @param top The maximum number of resources to return from the operation. Example: '$top=10'.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void update(
        String resourceGroupName,
        String projectName,
        String poolName,
        String scheduleName,
        ScheduleUpdate body,
        Integer top,
        Context context);

    /**
     * Deletes a Scheduled.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription.
     * @param projectName The name of the project.
     * @param poolName Name of the pool.
     * @param scheduleName The name of the schedule that uniquely identifies it.
     * @param top The maximum number of resources to return from the operation. Example: '$top=10'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void delete(String resourceGroupName, String projectName, String poolName, String scheduleName, Integer top);

    /**
     * Deletes a Scheduled.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription.
     * @param projectName The name of the project.
     * @param poolName Name of the pool.
     * @param scheduleName The name of the schedule that uniquely identifies it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void delete(String resourceGroupName, String projectName, String poolName, String scheduleName);

    /**
     * Deletes a Scheduled.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription.
     * @param projectName The name of the project.
     * @param poolName Name of the pool.
     * @param scheduleName The name of the schedule that uniquely identifies it.
     * @param top The maximum number of resources to return from the operation. Example: '$top=10'.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void delete(
        String resourceGroupName,
        String projectName,
        String poolName,
        String scheduleName,
        Integer top,
        Context context);

    /**
     * Gets a schedule resource.
     *
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a schedule resource along with {@link Response}.
     */
    Schedule getById(String id);

    /**
     * Gets a schedule resource.
     *
     * @param id the resource ID.
     * @param top The maximum number of resources to return from the operation. Example: '$top=10'.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a schedule resource along with {@link Response}.
     */
    Response<Schedule> getByIdWithResponse(String id, Integer top, Context context);

    /**
     * Deletes a Scheduled.
     *
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteById(String id);

    /**
     * Deletes a Scheduled.
     *
     * @param id the resource ID.
     * @param top The maximum number of resources to return from the operation. Example: '$top=10'.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteByIdWithResponse(String id, Integer top, Context context);

    /**
     * Begins definition for a new Schedule resource.
     *
     * @param name resource name.
     * @return the first stage of the new Schedule definition.
     */
    Schedule.DefinitionStages.Blank define(String name);
}
