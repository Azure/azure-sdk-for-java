// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devcenter.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.devcenter.fluent.models.CatalogInner;
import com.azure.resourcemanager.devcenter.models.Catalog;
import com.azure.resourcemanager.devcenter.models.CatalogConnectionState;
import com.azure.resourcemanager.devcenter.models.CatalogSyncState;
import com.azure.resourcemanager.devcenter.models.CatalogSyncType;
import com.azure.resourcemanager.devcenter.models.CatalogUpdate;
import com.azure.resourcemanager.devcenter.models.GitCatalog;
import com.azure.resourcemanager.devcenter.models.ProvisioningState;
import com.azure.resourcemanager.devcenter.models.SyncErrorDetails;
import com.azure.resourcemanager.devcenter.models.SyncStats;
import java.time.OffsetDateTime;
import java.util.Collections;
import java.util.Map;

public final class CatalogImpl implements Catalog, Catalog.Definition, Catalog.Update {
    private CatalogInner innerObject;

    private final com.azure.resourcemanager.devcenter.DevCenterManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public ProvisioningState provisioningState() {
        return this.innerModel().provisioningState();
    }

    public CatalogSyncState syncState() {
        return this.innerModel().syncState();
    }

    public SyncStats lastSyncStats() {
        return this.innerModel().lastSyncStats();
    }

    public CatalogConnectionState connectionState() {
        return this.innerModel().connectionState();
    }

    public OffsetDateTime lastConnectionTime() {
        return this.innerModel().lastConnectionTime();
    }

    public OffsetDateTime lastSyncTime() {
        return this.innerModel().lastSyncTime();
    }

    public GitCatalog gitHub() {
        return this.innerModel().gitHub();
    }

    public GitCatalog adoGit() {
        return this.innerModel().adoGit();
    }

    public CatalogSyncType syncType() {
        return this.innerModel().syncType();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public CatalogInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.devcenter.DevCenterManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String projectName;

    private String catalogName;

    private CatalogUpdate updateBody;

    public CatalogImpl withExistingProject(String resourceGroupName, String projectName) {
        this.resourceGroupName = resourceGroupName;
        this.projectName = projectName;
        return this;
    }

    public Catalog create() {
        this.innerObject = serviceManager.serviceClient()
            .getProjectCatalogs()
            .createOrUpdate(resourceGroupName, projectName, catalogName, this.innerModel(), Context.NONE);
        return this;
    }

    public Catalog create(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getProjectCatalogs()
            .createOrUpdate(resourceGroupName, projectName, catalogName, this.innerModel(), context);
        return this;
    }

    CatalogImpl(String name, com.azure.resourcemanager.devcenter.DevCenterManager serviceManager) {
        this.innerObject = new CatalogInner();
        this.serviceManager = serviceManager;
        this.catalogName = name;
    }

    public CatalogImpl update() {
        this.updateBody = new CatalogUpdate();
        return this;
    }

    public Catalog apply() {
        this.innerObject = serviceManager.serviceClient()
            .getProjectCatalogs()
            .patch(resourceGroupName, projectName, catalogName, updateBody, Context.NONE);
        return this;
    }

    public Catalog apply(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getProjectCatalogs()
            .patch(resourceGroupName, projectName, catalogName, updateBody, context);
        return this;
    }

    CatalogImpl(CatalogInner innerObject, com.azure.resourcemanager.devcenter.DevCenterManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.projectName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "projects");
        this.catalogName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "catalogs");
    }

    public Catalog refresh() {
        this.innerObject = serviceManager.serviceClient()
            .getProjectCatalogs()
            .getWithResponse(resourceGroupName, projectName, catalogName, Context.NONE)
            .getValue();
        return this;
    }

    public Catalog refresh(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getProjectCatalogs()
            .getWithResponse(resourceGroupName, projectName, catalogName, context)
            .getValue();
        return this;
    }

    public Response<SyncErrorDetails> getSyncErrorDetailsWithResponse(Context context) {
        return serviceManager.projectCatalogs()
            .getSyncErrorDetailsWithResponse(resourceGroupName, projectName, catalogName, context);
    }

    public SyncErrorDetails getSyncErrorDetails() {
        return serviceManager.projectCatalogs().getSyncErrorDetails(resourceGroupName, projectName, catalogName);
    }

    public void sync() {
        serviceManager.projectCatalogs().sync(resourceGroupName, projectName, catalogName);
    }

    public void sync(Context context) {
        serviceManager.projectCatalogs().sync(resourceGroupName, projectName, catalogName, context);
    }

    public void connect() {
        serviceManager.projectCatalogs().connect(resourceGroupName, projectName, catalogName);
    }

    public void connect(Context context) {
        serviceManager.projectCatalogs().connect(resourceGroupName, projectName, catalogName, context);
    }

    public CatalogImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateBody.withTags(tags);
            return this;
        }
    }

    public CatalogImpl withGitHub(GitCatalog gitHub) {
        if (isInCreateMode()) {
            this.innerModel().withGitHub(gitHub);
            return this;
        } else {
            this.updateBody.withGitHub(gitHub);
            return this;
        }
    }

    public CatalogImpl withAdoGit(GitCatalog adoGit) {
        if (isInCreateMode()) {
            this.innerModel().withAdoGit(adoGit);
            return this;
        } else {
            this.updateBody.withAdoGit(adoGit);
            return this;
        }
    }

    public CatalogImpl withSyncType(CatalogSyncType syncType) {
        if (isInCreateMode()) {
            this.innerModel().withSyncType(syncType);
            return this;
        } else {
            this.updateBody.withSyncType(syncType);
            return this;
        }
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
