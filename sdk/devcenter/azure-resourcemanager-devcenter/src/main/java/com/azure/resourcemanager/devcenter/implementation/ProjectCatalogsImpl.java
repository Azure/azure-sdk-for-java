// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devcenter.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.devcenter.fluent.ProjectCatalogsClient;
import com.azure.resourcemanager.devcenter.fluent.models.CatalogInner;
import com.azure.resourcemanager.devcenter.fluent.models.SyncErrorDetailsInner;
import com.azure.resourcemanager.devcenter.models.Catalog;
import com.azure.resourcemanager.devcenter.models.ProjectCatalogs;
import com.azure.resourcemanager.devcenter.models.SyncErrorDetails;

public final class ProjectCatalogsImpl implements ProjectCatalogs {
    private static final ClientLogger LOGGER = new ClientLogger(ProjectCatalogsImpl.class);

    private final ProjectCatalogsClient innerClient;

    private final com.azure.resourcemanager.devcenter.DevCenterManager serviceManager;

    public ProjectCatalogsImpl(ProjectCatalogsClient innerClient,
        com.azure.resourcemanager.devcenter.DevCenterManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<Catalog> list(String resourceGroupName, String projectName) {
        PagedIterable<CatalogInner> inner = this.serviceClient().list(resourceGroupName, projectName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new CatalogImpl(inner1, this.manager()));
    }

    public PagedIterable<Catalog> list(String resourceGroupName, String projectName, Integer top, Context context) {
        PagedIterable<CatalogInner> inner = this.serviceClient().list(resourceGroupName, projectName, top, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new CatalogImpl(inner1, this.manager()));
    }

    public Response<Catalog> getWithResponse(String resourceGroupName, String projectName, String catalogName,
        Context context) {
        Response<CatalogInner> inner
            = this.serviceClient().getWithResponse(resourceGroupName, projectName, catalogName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new CatalogImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public Catalog get(String resourceGroupName, String projectName, String catalogName) {
        CatalogInner inner = this.serviceClient().get(resourceGroupName, projectName, catalogName);
        if (inner != null) {
            return new CatalogImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String projectName, String catalogName) {
        this.serviceClient().delete(resourceGroupName, projectName, catalogName);
    }

    public void delete(String resourceGroupName, String projectName, String catalogName, Context context) {
        this.serviceClient().delete(resourceGroupName, projectName, catalogName, context);
    }

    public Response<SyncErrorDetails> getSyncErrorDetailsWithResponse(String resourceGroupName, String projectName,
        String catalogName, Context context) {
        Response<SyncErrorDetailsInner> inner = this.serviceClient()
            .getSyncErrorDetailsWithResponse(resourceGroupName, projectName, catalogName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new SyncErrorDetailsImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SyncErrorDetails getSyncErrorDetails(String resourceGroupName, String projectName, String catalogName) {
        SyncErrorDetailsInner inner
            = this.serviceClient().getSyncErrorDetails(resourceGroupName, projectName, catalogName);
        if (inner != null) {
            return new SyncErrorDetailsImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void sync(String resourceGroupName, String projectName, String catalogName) {
        this.serviceClient().sync(resourceGroupName, projectName, catalogName);
    }

    public void sync(String resourceGroupName, String projectName, String catalogName, Context context) {
        this.serviceClient().sync(resourceGroupName, projectName, catalogName, context);
    }

    public void connect(String resourceGroupName, String projectName, String catalogName) {
        this.serviceClient().connect(resourceGroupName, projectName, catalogName);
    }

    public void connect(String resourceGroupName, String projectName, String catalogName, Context context) {
        this.serviceClient().connect(resourceGroupName, projectName, catalogName, context);
    }

    public Catalog getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String projectName = ResourceManagerUtils.getValueFromIdByName(id, "projects");
        if (projectName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'projects'.", id)));
        }
        String catalogName = ResourceManagerUtils.getValueFromIdByName(id, "catalogs");
        if (catalogName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'catalogs'.", id)));
        }
        return this.getWithResponse(resourceGroupName, projectName, catalogName, Context.NONE).getValue();
    }

    public Response<Catalog> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String projectName = ResourceManagerUtils.getValueFromIdByName(id, "projects");
        if (projectName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'projects'.", id)));
        }
        String catalogName = ResourceManagerUtils.getValueFromIdByName(id, "catalogs");
        if (catalogName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'catalogs'.", id)));
        }
        return this.getWithResponse(resourceGroupName, projectName, catalogName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String projectName = ResourceManagerUtils.getValueFromIdByName(id, "projects");
        if (projectName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'projects'.", id)));
        }
        String catalogName = ResourceManagerUtils.getValueFromIdByName(id, "catalogs");
        if (catalogName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'catalogs'.", id)));
        }
        this.delete(resourceGroupName, projectName, catalogName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String projectName = ResourceManagerUtils.getValueFromIdByName(id, "projects");
        if (projectName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'projects'.", id)));
        }
        String catalogName = ResourceManagerUtils.getValueFromIdByName(id, "catalogs");
        if (catalogName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'catalogs'.", id)));
        }
        this.delete(resourceGroupName, projectName, catalogName, context);
    }

    private ProjectCatalogsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.devcenter.DevCenterManager manager() {
        return this.serviceManager;
    }

    public CatalogImpl define(String name) {
        return new CatalogImpl(name, this.manager());
    }
}
