// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devcenter.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.devcenter.fluent.models.DevCenterInner;
import com.azure.resourcemanager.devcenter.models.ManagedServiceIdentity;
import com.azure.resourcemanager.devcenter.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.devcenter.models.UserAssignedIdentity;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class DevCenterInnerTests {
    @Test
    public void testDeserialize() {
        DevCenterInner model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"provisioningState\":\"hxqh\"},\"identity\":{\"type\":\"SystemAssigned,"
                        + " UserAssigned\",\"userAssignedIdentities\":{\"czbysc\":{},\"x\":{},\"vyq\":{},\"b\":{}}},\"location\":\"rkxvdum\",\"tags\":{\"snhsjcnyejhkryh\":\"tfwvukxgaudc\"},\"id\":\"napczwlokjy\",\"name\":\"mkkvnip\",\"type\":\"oxzjnchgejspod\"}")
                .toObject(DevCenterInner.class);
        Assertions.assertEquals("rkxvdum", model.location());
        Assertions.assertEquals("tfwvukxgaudc", model.tags().get("snhsjcnyejhkryh"));
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED, model.identity().type());
    }

    @Test
    public void testSerialize() {
        DevCenterInner model =
            new DevCenterInner()
                .withLocation("rkxvdum")
                .withTags(mapOf("snhsjcnyejhkryh", "tfwvukxgaudc"))
                .withIdentity(
                    new ManagedServiceIdentity()
                        .withType(ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED)
                        .withUserAssignedIdentities(
                            mapOf(
                                "czbysc",
                                new UserAssignedIdentity(),
                                "x",
                                new UserAssignedIdentity(),
                                "vyq",
                                new UserAssignedIdentity(),
                                "b",
                                new UserAssignedIdentity())));
        model = BinaryData.fromObject(model).toObject(DevCenterInner.class);
        Assertions.assertEquals("rkxvdum", model.location());
        Assertions.assertEquals("tfwvukxgaudc", model.tags().get("snhsjcnyejhkryh"));
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED, model.identity().type());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
