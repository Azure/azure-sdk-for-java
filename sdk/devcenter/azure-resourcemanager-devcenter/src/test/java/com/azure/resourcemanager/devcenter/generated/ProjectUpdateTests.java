// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devcenter.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.devcenter.models.ProjectUpdate;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class ProjectUpdateTests {
    @Test
    public void testDeserialize() {
        ProjectUpdate model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"devCenterId\":\"atqxho\",\"description\":\"geablgphuticndvk\"},\"tags\":{\"k\":\"wyiftyhxhur\",\"kjfkg\":\"tyxolniwpwc\",\"plwckbas\":\"awxklr\"},\"location\":\"pnddhsgcbacphejk\"}")
                .toObject(ProjectUpdate.class);
        Assertions.assertEquals("wyiftyhxhur", model.tags().get("k"));
        Assertions.assertEquals("pnddhsgcbacphejk", model.location());
        Assertions.assertEquals("atqxho", model.devCenterId());
        Assertions.assertEquals("geablgphuticndvk", model.description());
    }

    @Test
    public void testSerialize() {
        ProjectUpdate model =
            new ProjectUpdate()
                .withTags(mapOf("k", "wyiftyhxhur", "kjfkg", "tyxolniwpwc", "plwckbas", "awxklr"))
                .withLocation("pnddhsgcbacphejk")
                .withDevCenterId("atqxho")
                .withDescription("geablgphuticndvk");
        model = BinaryData.fromObject(model).toObject(ProjectUpdate.class);
        Assertions.assertEquals("wyiftyhxhur", model.tags().get("k"));
        Assertions.assertEquals("pnddhsgcbacphejk", model.location());
        Assertions.assertEquals("atqxho", model.devCenterId());
        Assertions.assertEquals("geablgphuticndvk", model.description());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
