// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devcenter.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.devcenter.models.ProjectUpdate;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ProjectUpdateTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ProjectUpdate model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"devCenterId\":\"cdgea\",\"description\":\"gphuticndvka\",\"maxDevBoxesPerUser\":563001635,\"displayName\":\"i\"},\"tags\":{\"rokft\":\"hxh\",\"iawxklry\":\"xolniwpwcukjfk\"},\"location\":\"wckbasyypnd\"}")
                .toObject(ProjectUpdate.class);
        Assertions.assertEquals("hxh", model.tags().get("rokft"));
        Assertions.assertEquals("wckbasyypnd", model.location());
        Assertions.assertEquals("cdgea", model.devCenterId());
        Assertions.assertEquals("gphuticndvka", model.description());
        Assertions.assertEquals(563001635, model.maxDevBoxesPerUser());
        Assertions.assertEquals("i", model.displayName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ProjectUpdate model =
            new ProjectUpdate()
                .withTags(mapOf("rokft", "hxh", "iawxklry", "xolniwpwcukjfk"))
                .withLocation("wckbasyypnd")
                .withDevCenterId("cdgea")
                .withDescription("gphuticndvka")
                .withMaxDevBoxesPerUser(563001635)
                .withDisplayName("i");
        model = BinaryData.fromObject(model).toObject(ProjectUpdate.class);
        Assertions.assertEquals("hxh", model.tags().get("rokft"));
        Assertions.assertEquals("wckbasyypnd", model.location());
        Assertions.assertEquals("cdgea", model.devCenterId());
        Assertions.assertEquals("gphuticndvka", model.description());
        Assertions.assertEquals(563001635, model.maxDevBoxesPerUser());
        Assertions.assertEquals("i", model.displayName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
