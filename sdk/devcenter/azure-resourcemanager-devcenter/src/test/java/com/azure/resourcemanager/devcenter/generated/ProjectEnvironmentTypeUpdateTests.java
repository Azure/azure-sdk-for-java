// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devcenter.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.devcenter.models.EnvironmentRole;
import com.azure.resourcemanager.devcenter.models.EnvironmentTypeEnableStatus;
import com.azure.resourcemanager.devcenter.models.ManagedServiceIdentity;
import com.azure.resourcemanager.devcenter.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.devcenter.models.ProjectEnvironmentTypeUpdate;
import com.azure.resourcemanager.devcenter.models.ProjectEnvironmentTypeUpdatePropertiesCreatorRoleAssignment;
import com.azure.resourcemanager.devcenter.models.UserAssignedIdentity;
import com.azure.resourcemanager.devcenter.models.UserRoleAssignmentValue;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ProjectEnvironmentTypeUpdateTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ProjectEnvironmentTypeUpdate model = BinaryData.fromString(
            "{\"properties\":{\"deploymentTargetId\":\"kniod\",\"displayName\":\"oebwnujhemms\",\"status\":\"Enabled\",\"creatorRoleAssignment\":{\"roles\":{\"f\":{\"roleName\":\"dtjinfw\",\"description\":\"fltkacjv\"},\"blylsyxkqjnsj\":{\"roleName\":\"lfoakg\",\"description\":\"fpagaowpulp\"},\"kfzbeyvpnqicvi\":{\"roleName\":\"vti\",\"description\":\"xsdszuempsb\"},\"hmlwpaztzpo\":{\"roleName\":\"kjj\",\"description\":\"xrbuukzclew\"}}},\"userRoleAssignments\":{\"aznqntoru\":{\"roles\":{\"zfeqztppri\":{\"roleName\":\"yfzqwhxxbu\",\"description\":\"a\"},\"dpfuvg\":{\"roleName\":\"xorjaltolmncwsob\",\"description\":\"csdbnwdcfhuc\"},\"udutnco\":{\"roleName\":\"bjj\",\"description\":\"nvxbvt\"},\"bgdknnqv\":{\"roleName\":\"r\",\"description\":\"qtvcofudflvkgj\"}}},\"khazxkhnzbonlwn\":{\"roles\":{\"etaebu\":{\"roleName\":\"a\",\"description\":\"kycgrauwj\"},\"tpuqujmq\":{\"roleName\":\"vdmovsmzlxwabm\",\"description\":\"efkifr\"},\"ezkojvdcp\":{\"roleName\":\"kfbtndoaongbjc\",\"description\":\"ujitcjedftww\"},\"iqopidoamciod\":{\"roleName\":\"oqouicybxarzgszu\",\"description\":\"x\"}}},\"dcngqqmoakufgmj\":{\"roles\":{\"t\":{\"roleName\":\"okdwb\",\"description\":\"kszzcmrvexztv\"},\"aw\":{\"roleName\":\"sfraoyzko\",\"description\":\"tlmngu\"},\"r\":{\"roleName\":\"ldsyuuximerqfob\",\"description\":\"znkbykutwpfhpagm\"},\"twvogvbbe\":{\"roleName\":\"dsnfdsdoakgtdl\",\"description\":\"kzevdlhewpusds\"}}},\"l\":{\"roles\":{\"hziuiefozbhdms\":{\"roleName\":\"dgrtwaenuuzkopbm\",\"description\":\"rfdwoyu\"}}}}},\"tags\":{\"ae\":\"hoftr\",\"ah\":\"u\",\"piyylhalnswhccsp\":\"icslfaoq\",\"scywuggwoluhc\":\"kaivwit\"},\"identity\":{\"principalId\":\"1fad73c1-3e48-444e-bf96-ed6cb9902e70\",\"tenantId\":\"08e1b3ca-43be-4a43-b615-89d90a6668b1\",\"type\":\"SystemAssigned, UserAssigned\",\"userAssignedIdentities\":{\"sbrgz\":{\"principalId\":\"82f184bc-21d2-484a-b63d-132fe485be72\",\"clientId\":\"74b6a3ea-d9ef-48d8-8dd9-c5d104327ed4\"}}}}")
            .toObject(ProjectEnvironmentTypeUpdate.class);
        Assertions.assertEquals("hoftr", model.tags().get("ae"));
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED, model.identity().type());
        Assertions.assertEquals("kniod", model.deploymentTargetId());
        Assertions.assertEquals("oebwnujhemms", model.displayName());
        Assertions.assertEquals(EnvironmentTypeEnableStatus.ENABLED, model.status());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ProjectEnvironmentTypeUpdate model = new ProjectEnvironmentTypeUpdate()
            .withTags(mapOf("ae", "hoftr", "ah", "u", "piyylhalnswhccsp", "icslfaoq", "scywuggwoluhc", "kaivwit"))
            .withIdentity(
                new ManagedServiceIdentity().withType(ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED)
                    .withUserAssignedIdentities(mapOf("sbrgz", new UserAssignedIdentity())))
            .withDeploymentTargetId("kniod")
            .withDisplayName("oebwnujhemms")
            .withStatus(EnvironmentTypeEnableStatus.ENABLED)
            .withCreatorRoleAssignment(new ProjectEnvironmentTypeUpdatePropertiesCreatorRoleAssignment()
                .withRoles(mapOf("f", new EnvironmentRole(), "blylsyxkqjnsj", new EnvironmentRole(), "kfzbeyvpnqicvi",
                    new EnvironmentRole(), "hmlwpaztzpo", new EnvironmentRole())))
            .withUserRoleAssignments(mapOf("aznqntoru",
                new UserRoleAssignmentValue().withRoles(mapOf("zfeqztppri", new EnvironmentRole(), "dpfuvg",
                    new EnvironmentRole(), "udutnco", new EnvironmentRole(), "bgdknnqv", new EnvironmentRole())),
                "khazxkhnzbonlwn",
                new UserRoleAssignmentValue().withRoles(mapOf("etaebu", new EnvironmentRole(), "tpuqujmq",
                    new EnvironmentRole(), "ezkojvdcp", new EnvironmentRole(), "iqopidoamciod", new EnvironmentRole())),
                "dcngqqmoakufgmj",
                new UserRoleAssignmentValue().withRoles(mapOf("t", new EnvironmentRole(), "aw", new EnvironmentRole(),
                    "r", new EnvironmentRole(), "twvogvbbe", new EnvironmentRole())),
                "l", new UserRoleAssignmentValue().withRoles(mapOf("hziuiefozbhdms", new EnvironmentRole()))));
        model = BinaryData.fromObject(model).toObject(ProjectEnvironmentTypeUpdate.class);
        Assertions.assertEquals("hoftr", model.tags().get("ae"));
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED, model.identity().type());
        Assertions.assertEquals("kniod", model.deploymentTargetId());
        Assertions.assertEquals("oebwnujhemms", model.displayName());
        Assertions.assertEquals(EnvironmentTypeEnableStatus.ENABLED, model.status());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
