// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devcenter.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.devcenter.DevCenterManager;
import com.azure.resourcemanager.devcenter.models.EnvironmentRole;
import com.azure.resourcemanager.devcenter.models.EnvironmentTypeEnableStatus;
import com.azure.resourcemanager.devcenter.models.ManagedServiceIdentity;
import com.azure.resourcemanager.devcenter.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.devcenter.models.ProjectEnvironmentType;
import com.azure.resourcemanager.devcenter.models.ProjectEnvironmentTypeUpdatePropertiesCreatorRoleAssignment;
import com.azure.resourcemanager.devcenter.models.UserAssignedIdentity;
import com.azure.resourcemanager.devcenter.models.UserRoleAssignmentValue;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ProjectEnvironmentTypesCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Accepted\",\"environmentCount\":1601507048,\"deploymentTargetId\":\"k\",\"displayName\":\"aimmoiroqb\",\"status\":\"Disabled\",\"creatorRoleAssignment\":{\"roles\":{\"sjcaacfdmmcpugm\":{\"roleName\":\"apyyrmfsvbpavbo\",\"description\":\"ppdbwnupgahxkum\"}}},\"userRoleAssignments\":{\"chorimkrsr\":{\"roles\":{\"vufhbzehewhoq\":{},\"nlbqnbldxeaclg\":{}}},\"aabeolhbhlvbmxuq\":{\"roles\":{\"ucsofldpuviyf\":{}}},\"siowlkjxnqpv\":{\"roles\":{\"xtkcudfbsfar\":{}}}}},\"tags\":{\"saoafcluqvox\":\"stmhqykizmd\",\"gwe\":\"ycjimryvwgcwwpbm\",\"efoh\":\"ydsx\",\"mtkhlowkxxpvbr\":\"cbvopwndyqleallk\"},\"identity\":{\"principalId\":\"fbfd6108-9e0c-4b96-a04c-9e02ff2a73ba\",\"tenantId\":\"6d70021e-b46a-429d-b34f-947efba3234b\",\"type\":\"UserAssigned\",\"userAssignedIdentities\":{\"hotlhikcyychunsj\":{\"principalId\":\"e9d4400c-0d2d-46fa-a2bf-b3499c649c4d\",\"clientId\":\"59a2e49b-7c02-417a-92f8-05282ad28672\"},\"rtws\":{\"principalId\":\"1808689b-59ba-4a5a-8dac-d3c82f0633db\",\"clientId\":\"f9d62a64-a9d2-4613-b724-682a12f39afa\"},\"vuicp\":{\"principalId\":\"a784aa71-ac5b-4470-bf09-c3e3d93f45eb\",\"clientId\":\"91812808-dae6-4d9d-8427-6f9d0f224b5b\"}}},\"location\":\"trrmhwrb\",\"id\":\"pyf\",\"name\":\"ubhvj\",\"type\":\"lrocuyzlwh\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        DevCenterManager manager = DevCenterManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        ProjectEnvironmentType response = manager.projectEnvironmentTypes()
            .define("etndnbfqyggagf")
            .withExistingProject("uuuybnchrsziz", "yuel")
            .withRegion("yuicdhzbdy")
            .withTags(mapOf("nwvroevytlyokrr", "annovvoxczytpr", "uxvnsasbcrymodi", "o", "lmv", "rxklobdxnazpmk",
                "zxlioh", "vfxzopjh"))
            .withIdentity(new ManagedServiceIdentity().withType(ManagedServiceIdentityType.USER_ASSIGNED)
                .withUserAssignedIdentities(mapOf("ba", new UserAssignedIdentity(), "bbnz", new UserAssignedIdentity(),
                    "knapq", new UserAssignedIdentity())))
            .withDeploymentTargetId("wahzjmucftbyr")
            .withDisplayName("rohkpigqfusu")
            .withStatus(EnvironmentTypeEnableStatus.ENABLED)
            .withCreatorRoleAssignment(
                new ProjectEnvironmentTypeUpdatePropertiesCreatorRoleAssignment().withRoles(mapOf("ydyynfsvkh",
                    new EnvironmentRole(), "khnmgbrou", new EnvironmentRole(), "wjxhpdulon", new EnvironmentRole())))
            .withUserRoleAssignments(mapOf("kfuarenlv",
                new UserRoleAssignmentValue().withRoles(mapOf("qwtehtuevr", new EnvironmentRole(), "rljyoogwxhnsdu",
                    new EnvironmentRole(), "gwbsreurf", new EnvironmentRole())),
                "chaqdtvqec",
                new UserRoleAssignmentValue()
                    .withRoles(mapOf("klnvnafvvkyfede", new EnvironmentRole(), "jboslcqxypok", new EnvironmentRole(),
                        "hminqcymczngnbdx", new EnvironmentRole(), "ewuninvud", new EnvironmentRole())),
                "xzvtzna", new UserRoleAssignmentValue().withRoles(mapOf("tmxxdtddmflhuy", new EnvironmentRole()))))
            .create();

        Assertions.assertEquals("stmhqykizmd", response.tags().get("saoafcluqvox"));
        Assertions.assertEquals(ManagedServiceIdentityType.USER_ASSIGNED, response.identity().type());
        Assertions.assertEquals("trrmhwrb", response.location());
        Assertions.assertEquals("k", response.deploymentTargetId());
        Assertions.assertEquals("aimmoiroqb", response.displayName());
        Assertions.assertEquals(EnvironmentTypeEnableStatus.DISABLED, response.status());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
