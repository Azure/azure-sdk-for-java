// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devcenter.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.devcenter.DevCenterManager;
import com.azure.resourcemanager.devcenter.models.EnvironmentRole;
import com.azure.resourcemanager.devcenter.models.EnvironmentTypeEnableStatus;
import com.azure.resourcemanager.devcenter.models.ManagedServiceIdentity;
import com.azure.resourcemanager.devcenter.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.devcenter.models.ProjectEnvironmentType;
import com.azure.resourcemanager.devcenter.models.ProjectEnvironmentTypeUpdatePropertiesCreatorRoleAssignment;
import com.azure.resourcemanager.devcenter.models.UserAssignedIdentity;
import com.azure.resourcemanager.devcenter.models.UserRoleAssignmentValue;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ProjectEnvironmentTypesCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"TransientFailure\",\"environmentCount\":1455417694,\"deploymentTargetId\":\"rvkmjcwmjvlgfggc\",\"displayName\":\"yylizrz\",\"status\":\"Enabled\",\"creatorRoleAssignment\":{\"roles\":{\"w\":{\"roleName\":\"fuzt\",\"description\":\"tmvag\"},\"vlwyzg\":{\"roleName\":\"qlvh\",\"description\":\"oveofizrvjfnmj\"},\"oeo\":{\"roleName\":\"lkujrllfojui\",\"description\":\"puuyjucejik\"}}},\"userRoleAssignments\":{\"zvhqjwtrhtgvg\":{\"roles\":{\"je\":{},\"jklntikyj\":{},\"zkdbqzolx\":{}}},\"wro\":{\"roles\":{\"rrkolawjmjs\":{}}},\"zvlnsnnjz\":{\"roles\":{\"xfzzzwyjafitlhgu\":{},\"nuchlgmltxdwhmo\":{},\"us\":{}}}}},\"tags\":{\"p\":\"folpymwamxqzra\",\"ulajvlejchc\":\"dphtv\",\"mzlanru\":\"rlzk\",\"phcnzqtpj\":\"dwv\"},\"identity\":{\"principalId\":\"1d848ae1-146e-4973-8fb1-2f2d7a4717ca\",\"tenantId\":\"3f7b9049-8330-4984-94e4-655212977f50\",\"type\":\"SystemAssigned, UserAssigned\",\"userAssignedIdentities\":{\"aiwdcxsmlzzhz\":{\"principalId\":\"0de9bbbe-2d23-450c-bbe3-a607ba64c49e\",\"clientId\":\"45c67d4a-5191-4dd8-80f1-2ca1299d0a66\"},\"etlgydlhqvlnnpx\":{\"principalId\":\"d63e9e69-4471-4adb-9609-1f5cb878cd20\",\"clientId\":\"762fcff4-3a04-4651-9010-d691a7259f1a\"},\"fiqgeaar\":{\"principalId\":\"8d5039a4-cbe0-4e3c-8cb9-fd3d605c9401\",\"clientId\":\"986ed28d-fb79-4ce2-bae0-a64d9bf215b8\"}}},\"location\":\"jekglklbyuli\",\"id\":\"cwvmzegj\",\"name\":\"nfhjirwgdnqzbr\",\"type\":\"kspzhzmtksjcit\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        DevCenterManager manager = DevCenterManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        ProjectEnvironmentType response = manager.projectEnvironmentTypes()
            .define("xmycjimryvwgcw")
            .withExistingProject("kizmdksaoafclu", "v")
            .withRegion("fpubntnbatz")
            .withTags(mapOf("lpxuzzjgnrefq", "e", "oihiqak", "hqo", "brkwpzdqt", "diw"))
            .withIdentity(new ManagedServiceIdentity().withType(ManagedServiceIdentityType.SYSTEM_ASSIGNED)
                .withUserAssignedIdentities(
                    mapOf("axsipietgb", new UserAssignedIdentity(), "fulbmoichdl", new UserAssignedIdentity())))
            .withDeploymentTargetId("esyds")
            .withDisplayName("efoh")
            .withStatus(EnvironmentTypeEnableStatus.DISABLED)
            .withCreatorRoleAssignment(
                new ProjectEnvironmentTypeUpdatePropertiesCreatorRoleAssignment().withRoles(mapOf("vbrdfjmzsyzfho",
                    new EnvironmentRole(), "rtws", new EnvironmentRole(), "hvtrrmhwrbfdpyf", new EnvironmentRole())))
            .withUserRoleAssignments(mapOf("qmemc",
                new UserRoleAssignmentValue().withRoles(mapOf("jgl", new EnvironmentRole(), "ocu",
                    new EnvironmentRole(), "zlwhhmemhooclu", new EnvironmentRole(), "n", new EnvironmentRole())),
                "rfih",
                new UserRoleAssignmentValue().withRoles(mapOf("mmyky", new EnvironmentRole(), "jxsglhsr",
                    new EnvironmentRole(), "rye", new EnvironmentRole(), "ylmbkzudni", new EnvironmentRole()))))
            .create();

        Assertions.assertEquals("folpymwamxqzra", response.tags().get("p"));
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED, response.identity().type());
        Assertions.assertEquals("jekglklbyuli", response.location());
        Assertions.assertEquals("rvkmjcwmjvlgfggc", response.deploymentTargetId());
        Assertions.assertEquals("yylizrz", response.displayName());
        Assertions.assertEquals(EnvironmentTypeEnableStatus.ENABLED, response.status());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
