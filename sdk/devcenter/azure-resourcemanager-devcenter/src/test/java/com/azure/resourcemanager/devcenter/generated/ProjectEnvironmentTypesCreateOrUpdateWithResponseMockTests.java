// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devcenter.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.devcenter.DevCenterManager;
import com.azure.resourcemanager.devcenter.models.EnvironmentRole;
import com.azure.resourcemanager.devcenter.models.EnvironmentTypeEnableStatus;
import com.azure.resourcemanager.devcenter.models.ManagedServiceIdentity;
import com.azure.resourcemanager.devcenter.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.devcenter.models.ProjectEnvironmentType;
import com.azure.resourcemanager.devcenter.models.ProjectEnvironmentTypeUpdatePropertiesCreatorRoleAssignment;
import com.azure.resourcemanager.devcenter.models.UserAssignedIdentity;
import com.azure.resourcemanager.devcenter.models.UserRoleAssignmentValue;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class ProjectEnvironmentTypesCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"provisioningState\":\"TransientFailure\",\"displayName\":\"ryuzcbmqqv\",\"environmentCount\":538529132,\"deploymentTargetId\":\"fgtayxonsup\",\"status\":\"Enabled\",\"creatorRoleAssignment\":{\"roles\":{\"yqo\":{\"roleName\":\"hcvsqltnzoi\",\"description\":\"sxgnx\"},\"iqxeiiqbimht\":{\"roleName\":\"p\",\"description\":\"xwdofdb\"},\"embnkbw\":{\"roleName\":\"winhehfqpo\",\"description\":\"wbcb\"},\"izvcjfe\":{\"roleName\":\"vxkdivqihebwtswb\",\"description\":\"wfmdurage\"}}},\"userRoleAssignments\":{\"rylniofrzg\":{\"roles\":{\"ubggbqigkxkb\":{},\"azgakg\":{},\"cyrcmjdmspo\":{},\"apvu\":{}}},\"tkvnlvxbcuiiznkt\":{\"roles\":{\"edm\":{}}},\"z\":{\"roles\":{\"nsnvpd\":{},\"bmikost\":{}}},\"bcunezzceze\":{\"roles\":{\"wbuqn\":{},\"ophzfylsgcrp\":{}}}}},\"tags\":{\"psihcla\":\"yfwlwxjwet\"},\"identity\":{\"principalId\":\"75eb1b2d-5659-4b8c-9e54-337be480eee2\",\"tenantId\":\"8d016d1b-71c0-4aba-8f9d-168e68de158b\",\"type\":\"SystemAssigned,"
                + " UserAssigned\",\"userAssignedIdentities\":{\"sqqw\":{\"principalId\":\"27523d7a-4c5f-4372-9e8c-0d1cf9d99683\",\"clientId\":\"1c11940a-0bc7-4f24-a0e4-93d1e6c6d28b\"}}},\"location\":\"cmwqkchcxwa\",\"id\":\"ewzjkjexfd\",\"name\":\"qvhpsylkkshkbff\",\"type\":\"bmxzjrgywwpg\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        DevCenterManager manager =
            DevCenterManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        ProjectEnvironmentType response =
            manager
                .projectEnvironmentTypes()
                .define("igjkskyrio")
                .withExistingProject("hv", "slkvntjl")
                .withRegion("amwabzxrvxcushsp")
                .withTags(mapOf("pmxelnwcltyje", "p", "mlfmkqs", "ex"))
                .withIdentity(
                    new ManagedServiceIdentity()
                        .withType(ManagedServiceIdentityType.NONE)
                        .withUserAssignedIdentities(mapOf("x", new UserAssignedIdentity())))
                .withDisplayName("sxwaabzm")
                .withDeploymentTargetId("gznmmaxrizkzob")
                .withStatus(EnvironmentTypeEnableStatus.ENABLED)
                .withCreatorRoleAssignment(
                    new ProjectEnvironmentTypeUpdatePropertiesCreatorRoleAssignment()
                        .withRoles(mapOf("tifdwfmvi", new EnvironmentRole())))
                .withUserRoleAssignments(
                    mapOf(
                        "ujeickp",
                        new UserRoleAssignmentValue().withRoles(mapOf("bttzhraglkafhonq", new EnvironmentRole()))))
                .create();

        Assertions.assertEquals("yfwlwxjwet", response.tags().get("psihcla"));
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED, response.identity().type());
        Assertions.assertEquals("cmwqkchcxwa", response.location());
        Assertions.assertEquals("ryuzcbmqqv", response.displayName());
        Assertions.assertEquals("fgtayxonsup", response.deploymentTargetId());
        Assertions.assertEquals(EnvironmentTypeEnableStatus.ENABLED, response.status());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
