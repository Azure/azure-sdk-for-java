// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devcenter.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.devcenter.models.DevBoxDefinitionUpdate;
import com.azure.resourcemanager.devcenter.models.ImageReference;
import com.azure.resourcemanager.devcenter.models.Sku;
import com.azure.resourcemanager.devcenter.models.SkuTier;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class DevBoxDefinitionUpdateTests {
    @Test
    public void testDeserialize() {
        DevBoxDefinitionUpdate model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"imageReference\":{\"id\":\"unkbebx\",\"exactVersion\":\"byyntwlrbqt\",\"publisher\":\"ievseotgqrllt\",\"offer\":\"wlauwzizxbmpg\",\"sku\":\"efuzmuvpbttd\"},\"sku\":{\"name\":\"orppxebmnzbtb\",\"tier\":\"Basic\",\"size\":\"lkfg\",\"family\":\"dneu\",\"capacity\":2052379315},\"osStorageType\":\"hsd\"},\"tags\":{\"uvxzxclvi\":\"ozfikdowwq\"},\"location\":\"hqzonosggbhcoh\"}")
                .toObject(DevBoxDefinitionUpdate.class);
        Assertions.assertEquals("ozfikdowwq", model.tags().get("uvxzxclvi"));
        Assertions.assertEquals("hqzonosggbhcoh", model.location());
        Assertions.assertEquals("unkbebx", model.imageReference().id());
        Assertions.assertEquals("ievseotgqrllt", model.imageReference().publisher());
        Assertions.assertEquals("wlauwzizxbmpg", model.imageReference().offer());
        Assertions.assertEquals("efuzmuvpbttd", model.imageReference().sku());
        Assertions.assertEquals("orppxebmnzbtb", model.sku().name());
        Assertions.assertEquals(SkuTier.BASIC, model.sku().tier());
        Assertions.assertEquals("lkfg", model.sku().size());
        Assertions.assertEquals("dneu", model.sku().family());
        Assertions.assertEquals(2052379315, model.sku().capacity());
        Assertions.assertEquals("hsd", model.osStorageType());
    }

    @Test
    public void testSerialize() {
        DevBoxDefinitionUpdate model =
            new DevBoxDefinitionUpdate()
                .withTags(mapOf("uvxzxclvi", "ozfikdowwq"))
                .withLocation("hqzonosggbhcoh")
                .withImageReference(
                    new ImageReference()
                        .withId("unkbebx")
                        .withPublisher("ievseotgqrllt")
                        .withOffer("wlauwzizxbmpg")
                        .withSku("efuzmuvpbttd"))
                .withSku(
                    new Sku()
                        .withName("orppxebmnzbtb")
                        .withTier(SkuTier.BASIC)
                        .withSize("lkfg")
                        .withFamily("dneu")
                        .withCapacity(2052379315))
                .withOsStorageType("hsd");
        model = BinaryData.fromObject(model).toObject(DevBoxDefinitionUpdate.class);
        Assertions.assertEquals("ozfikdowwq", model.tags().get("uvxzxclvi"));
        Assertions.assertEquals("hqzonosggbhcoh", model.location());
        Assertions.assertEquals("unkbebx", model.imageReference().id());
        Assertions.assertEquals("ievseotgqrllt", model.imageReference().publisher());
        Assertions.assertEquals("wlauwzizxbmpg", model.imageReference().offer());
        Assertions.assertEquals("efuzmuvpbttd", model.imageReference().sku());
        Assertions.assertEquals("orppxebmnzbtb", model.sku().name());
        Assertions.assertEquals(SkuTier.BASIC, model.sku().tier());
        Assertions.assertEquals("lkfg", model.sku().size());
        Assertions.assertEquals("dneu", model.sku().family());
        Assertions.assertEquals(2052379315, model.sku().capacity());
        Assertions.assertEquals("hsd", model.osStorageType());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
