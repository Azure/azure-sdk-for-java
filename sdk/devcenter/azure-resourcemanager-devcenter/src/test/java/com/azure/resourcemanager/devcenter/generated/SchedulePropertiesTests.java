// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devcenter.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.devcenter.fluent.models.ScheduleProperties;
import com.azure.resourcemanager.devcenter.models.ScheduledFrequency;
import com.azure.resourcemanager.devcenter.models.ScheduledType;
import com.azure.resourcemanager.devcenter.models.ScheduleEnableStatus;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SchedulePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ScheduleProperties model = BinaryData.fromString(
            "{\"provisioningState\":\"Created\",\"type\":\"StopDevBox\",\"frequency\":\"Daily\",\"time\":\"gzuriglaecxndt\",\"timeZone\":\"okpvzm\",\"state\":\"Enabled\",\"tags\":{\"pkc\":\"dgxobfircl\"},\"location\":\"yzriykhy\"}")
            .toObject(ScheduleProperties.class);
        Assertions.assertEquals("dgxobfircl", model.tags().get("pkc"));
        Assertions.assertEquals("yzriykhy", model.location());
        Assertions.assertEquals(ScheduledType.STOP_DEV_BOX, model.type());
        Assertions.assertEquals(ScheduledFrequency.DAILY, model.frequency());
        Assertions.assertEquals("gzuriglaecxndt", model.time());
        Assertions.assertEquals("okpvzm", model.timeZone());
        Assertions.assertEquals(ScheduleEnableStatus.ENABLED, model.state());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ScheduleProperties model = new ScheduleProperties().withTags(mapOf("pkc", "dgxobfircl"))
            .withLocation("yzriykhy")
            .withType(ScheduledType.STOP_DEV_BOX)
            .withFrequency(ScheduledFrequency.DAILY)
            .withTime("gzuriglaecxndt")
            .withTimeZone("okpvzm")
            .withState(ScheduleEnableStatus.ENABLED);
        model = BinaryData.fromObject(model).toObject(ScheduleProperties.class);
        Assertions.assertEquals("dgxobfircl", model.tags().get("pkc"));
        Assertions.assertEquals("yzriykhy", model.location());
        Assertions.assertEquals(ScheduledType.STOP_DEV_BOX, model.type());
        Assertions.assertEquals(ScheduledFrequency.DAILY, model.frequency());
        Assertions.assertEquals("gzuriglaecxndt", model.time());
        Assertions.assertEquals("okpvzm", model.timeZone());
        Assertions.assertEquals(ScheduleEnableStatus.ENABLED, model.state());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
