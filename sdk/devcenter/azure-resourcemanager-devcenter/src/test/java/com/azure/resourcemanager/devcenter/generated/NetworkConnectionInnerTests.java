// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devcenter.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.devcenter.fluent.models.NetworkConnectionInner;
import com.azure.resourcemanager.devcenter.models.DomainJoinType;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class NetworkConnectionInnerTests {
    @Test
    public void testDeserialize() {
        NetworkConnectionInner model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"provisioningState\":\"f\",\"healthCheckStatus\":\"Warning\",\"networkingResourceGroupName\":\"bfvoowvrv\",\"domainJoinType\":\"HybridAzureADJoin\",\"subnetId\":\"jqppyostronzmy\",\"domainName\":\"fipns\",\"organizationUnit\":\"mcwaekrrjr\",\"domainUsername\":\"fxtsgum\",\"domainPassword\":\"glikkxwslolb\"},\"location\":\"vuzlm\",\"tags\":{\"noigbrnjwmwk\":\"lfktgplcrpwjxe\"},\"id\":\"nbsazejjoqkag\",\"name\":\"hsxttaugzxnf\",\"type\":\"azpxdtnkdmkqjjl\"}")
                .toObject(NetworkConnectionInner.class);
        Assertions.assertEquals("vuzlm", model.location());
        Assertions.assertEquals("lfktgplcrpwjxe", model.tags().get("noigbrnjwmwk"));
        Assertions.assertEquals("bfvoowvrv", model.networkingResourceGroupName());
        Assertions.assertEquals(DomainJoinType.HYBRID_AZURE_ADJOIN, model.domainJoinType());
        Assertions.assertEquals("jqppyostronzmy", model.subnetId());
        Assertions.assertEquals("fipns", model.domainName());
        Assertions.assertEquals("mcwaekrrjr", model.organizationUnit());
        Assertions.assertEquals("fxtsgum", model.domainUsername());
        Assertions.assertEquals("glikkxwslolb", model.domainPassword());
    }

    @Test
    public void testSerialize() {
        NetworkConnectionInner model =
            new NetworkConnectionInner()
                .withLocation("vuzlm")
                .withTags(mapOf("noigbrnjwmwk", "lfktgplcrpwjxe"))
                .withNetworkingResourceGroupName("bfvoowvrv")
                .withDomainJoinType(DomainJoinType.HYBRID_AZURE_ADJOIN)
                .withSubnetId("jqppyostronzmy")
                .withDomainName("fipns")
                .withOrganizationUnit("mcwaekrrjr")
                .withDomainUsername("fxtsgum")
                .withDomainPassword("glikkxwslolb");
        model = BinaryData.fromObject(model).toObject(NetworkConnectionInner.class);
        Assertions.assertEquals("vuzlm", model.location());
        Assertions.assertEquals("lfktgplcrpwjxe", model.tags().get("noigbrnjwmwk"));
        Assertions.assertEquals("bfvoowvrv", model.networkingResourceGroupName());
        Assertions.assertEquals(DomainJoinType.HYBRID_AZURE_ADJOIN, model.domainJoinType());
        Assertions.assertEquals("jqppyostronzmy", model.subnetId());
        Assertions.assertEquals("fipns", model.domainName());
        Assertions.assertEquals("mcwaekrrjr", model.organizationUnit());
        Assertions.assertEquals("fxtsgum", model.domainUsername());
        Assertions.assertEquals("glikkxwslolb", model.domainPassword());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
