// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devcenter.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.devcenter.fluent.models.ProjectEnvironmentTypeInner;
import com.azure.resourcemanager.devcenter.models.EnableStatus;
import com.azure.resourcemanager.devcenter.models.ManagedServiceIdentity;
import com.azure.resourcemanager.devcenter.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.devcenter.models.ProjectEnvironmentTypeUpdatePropertiesCreatorRoleAssignment;
import com.azure.resourcemanager.devcenter.models.UserAssignedIdentity;
import com.azure.resourcemanager.devcenter.models.UserRoleAssignmentValue;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class ProjectEnvironmentTypeInnerTests {
    @Test
    public void testDeserialize() {
        ProjectEnvironmentTypeInner model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"provisioningState\":\"ouwaboekqvkeln\",\"deploymentTargetId\":\"vbxwyjsflhh\",\"status\":\"Enabled\",\"creatorRoleAssignment\":{\"roles\":{}},\"userRoleAssignments\":{\"sxyawjoyaqcs\":{\"roles\":{}},\"jpkiidzyexznelix\":{\"roles\":{}},\"rzt\":{\"roles\":{}},\"lhbnxkna\":{\"roles\":{}}}},\"tags\":{\"ggdtpnapnyiro\":\"lp\",\"ylgqgitxmedjvcsl\":\"uhpigvp\",\"wwncwzzhxgk\":\"n\",\"t\":\"rmgucnap\"},\"identity\":{\"type\":\"SystemAssigned\",\"userAssignedIdentities\":{\"d\":{}}},\"location\":\"pfqbuaceopzf\",\"id\":\"hhuao\",\"name\":\"ppcqeqxolz\",\"type\":\"ahzxctobgbk\"}")
                .toObject(ProjectEnvironmentTypeInner.class);
        Assertions.assertEquals("lp", model.tags().get("ggdtpnapnyiro"));
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED, model.identity().type());
        Assertions.assertEquals("pfqbuaceopzf", model.location());
        Assertions.assertEquals("vbxwyjsflhh", model.deploymentTargetId());
        Assertions.assertEquals(EnableStatus.ENABLED, model.status());
    }

    @Test
    public void testSerialize() {
        ProjectEnvironmentTypeInner model =
            new ProjectEnvironmentTypeInner()
                .withTags(
                    mapOf("ggdtpnapnyiro", "lp", "ylgqgitxmedjvcsl", "uhpigvp", "wwncwzzhxgk", "n", "t", "rmgucnap"))
                .withIdentity(
                    new ManagedServiceIdentity()
                        .withType(ManagedServiceIdentityType.SYSTEM_ASSIGNED)
                        .withUserAssignedIdentities(mapOf("d", new UserAssignedIdentity())))
                .withLocation("pfqbuaceopzf")
                .withDeploymentTargetId("vbxwyjsflhh")
                .withStatus(EnableStatus.ENABLED)
                .withCreatorRoleAssignment(
                    new ProjectEnvironmentTypeUpdatePropertiesCreatorRoleAssignment().withRoles(mapOf()))
                .withUserRoleAssignments(
                    mapOf(
                        "sxyawjoyaqcs",
                        new UserRoleAssignmentValue().withRoles(mapOf()),
                        "jpkiidzyexznelix",
                        new UserRoleAssignmentValue().withRoles(mapOf()),
                        "rzt",
                        new UserRoleAssignmentValue().withRoles(mapOf()),
                        "lhbnxkna",
                        new UserRoleAssignmentValue().withRoles(mapOf())));
        model = BinaryData.fromObject(model).toObject(ProjectEnvironmentTypeInner.class);
        Assertions.assertEquals("lp", model.tags().get("ggdtpnapnyiro"));
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED, model.identity().type());
        Assertions.assertEquals("pfqbuaceopzf", model.location());
        Assertions.assertEquals("vbxwyjsflhh", model.deploymentTargetId());
        Assertions.assertEquals(EnableStatus.ENABLED, model.status());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
