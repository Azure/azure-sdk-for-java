// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devcenter.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.devcenter.DevCenterManager;
import com.azure.resourcemanager.devcenter.models.CatalogItemType;
import com.azure.resourcemanager.devcenter.models.ManagedServiceIdentity;
import com.azure.resourcemanager.devcenter.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.devcenter.models.Project;
import com.azure.resourcemanager.devcenter.models.ProjectCatalogSettings;
import com.azure.resourcemanager.devcenter.models.UserAssignedIdentity;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ProjectsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Succeeded\",\"devCenterUri\":\"zddrt\",\"devCenterId\":\"doj\",\"description\":\"xv\",\"maxDevBoxesPerUser\":1550017967,\"displayName\":\"fdeesvecuijpxtx\",\"catalogSettings\":{\"catalogItemSyncTypes\":[\"EnvironmentDefinition\",\"EnvironmentDefinition\",\"EnvironmentDefinition\"]}},\"identity\":{\"principalId\":\"d2522435-fc65-4115-b662-ffeae82b9030\",\"tenantId\":\"9204adbb-f6dc-4b05-b805-a6c490865c3f\",\"type\":\"UserAssigned\",\"userAssignedIdentities\":{\"ibabxvititvtzeex\":{\"principalId\":\"4dd6ba84-6db6-4a91-ae58-35dde20d7b20\",\"clientId\":\"1d51f9d9-c99f-495c-8793-57d4297642d4\"},\"xtfglecdmdqb\":{\"principalId\":\"b5c40601-95ff-4c08-8beb-4ceebb99416d\",\"clientId\":\"f7f319d8-3f60-4e4a-a39f-50869f5068b0\"}}},\"location\":\"ypq\",\"tags\":{\"vodhtn\":\"fjacbslhhxudb\"},\"id\":\"irudh\",\"name\":\"m\",\"type\":\"es\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        DevCenterManager manager = DevCenterManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        Project response = manager.projects()
            .define("hcans")
            .withRegion("bjjidjksyxky")
            .withExistingResourceGroup("zyqdrfegcealzx")
            .withTags(mapOf("nljlageuaulx", "evblbje", "svxeizzgwklnsr", "nsmjbnkppxynen"))
            .withIdentity(
                new ManagedServiceIdentity().withType(ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED)
                    .withUserAssignedIdentities(mapOf("gfmo", new UserAssignedIdentity(), "hpqgatjeaahhvj",
                        new UserAssignedIdentity(), "akz", new UserAssignedIdentity())))
            .withDevCenterId("fajuwas")
            .withDescription("daeyygux")
            .withMaxDevBoxesPerUser(346438296)
            .withDisplayName("qzhzbezkgimsi")
            .withCatalogSettings(new ProjectCatalogSettings().withCatalogItemSyncTypes(
                Arrays.asList(CatalogItemType.ENVIRONMENT_DEFINITION, CatalogItemType.ENVIRONMENT_DEFINITION)))
            .create();

        Assertions.assertEquals("ypq", response.location());
        Assertions.assertEquals("fjacbslhhxudb", response.tags().get("vodhtn"));
        Assertions.assertEquals(ManagedServiceIdentityType.USER_ASSIGNED, response.identity().type());
        Assertions.assertEquals("doj", response.devCenterId());
        Assertions.assertEquals("xv", response.description());
        Assertions.assertEquals(1550017967, response.maxDevBoxesPerUser());
        Assertions.assertEquals("fdeesvecuijpxtx", response.displayName());
        Assertions.assertEquals(CatalogItemType.ENVIRONMENT_DEFINITION,
            response.catalogSettings().catalogItemSyncTypes().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
