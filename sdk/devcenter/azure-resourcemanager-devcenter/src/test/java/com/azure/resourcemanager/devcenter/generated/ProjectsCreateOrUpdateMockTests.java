// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devcenter.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.devcenter.DevCenterManager;
import com.azure.resourcemanager.devcenter.models.CatalogItemType;
import com.azure.resourcemanager.devcenter.models.ManagedServiceIdentity;
import com.azure.resourcemanager.devcenter.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.devcenter.models.Project;
import com.azure.resourcemanager.devcenter.models.ProjectCatalogSettings;
import com.azure.resourcemanager.devcenter.models.UserAssignedIdentity;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ProjectsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Succeeded\",\"devCenterUri\":\"rkywuhpsvfuu\",\"devCenterId\":\"tlwexxwlalniexz\",\"description\":\"zpgepqty\",\"maxDevBoxesPerUser\":2090759507,\"displayName\":\"pgdakchzyvli\",\"catalogSettings\":{\"catalogItemSyncTypes\":[\"EnvironmentDefinition\",\"EnvironmentDefinition\"]}},\"identity\":{\"principalId\":\"51d380ec-d3ae-4969-9578-d2835649c5c8\",\"tenantId\":\"4c0ef78b-f19f-4773-8519-fcfa6980cda3\",\"type\":\"None\",\"userAssignedIdentities\":{\"ysux\":{\"principalId\":\"9625a88c-2fc6-4bc0-b589-5c39b878ad6a\",\"clientId\":\"e3fef2e7-6095-429d-a0b9-963a061aaf46\"}}},\"location\":\"qrntv\",\"tags\":{\"pwcyyufmhr\":\"jpsttexoq\",\"wmqs\":\"nc\"},\"id\":\"kcdqzhlct\",\"name\":\"dunqnd\",\"type\":\"fpch\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        DevCenterManager manager = DevCenterManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        Project response = manager.projects()
            .define("zonzlrpiqywnc")
            .withRegion("zhmkdasvflyh")
            .withExistingResourceGroup("gnl")
            .withTags(mapOf("wjlvizbfhfov", "udchxgsrboldforo"))
            .withIdentity(new ManagedServiceIdentity().withType(ManagedServiceIdentityType.NONE)
                .withUserAssignedIdentities(
                    mapOf("erbdk", new UserAssignedIdentity(), "idizozsdbccxjmo", new UserAssignedIdentity(),
                        "gnwncypuuwwlt", new UserAssignedIdentity(), "jctzenkei", new UserAssignedIdentity())))
            .withDevCenterId("e")
            .withDescription("dhgbjkvre")
            .withMaxDevBoxesPerUser(418560266)
            .withDisplayName("murvzm")
            .withCatalogSettings(new ProjectCatalogSettings()
                .withCatalogItemSyncTypes(Arrays.asList(CatalogItemType.ENVIRONMENT_DEFINITION,
                    CatalogItemType.ENVIRONMENT_DEFINITION, CatalogItemType.ENVIRONMENT_DEFINITION)))
            .create();

        Assertions.assertEquals("qrntv", response.location());
        Assertions.assertEquals("jpsttexoq", response.tags().get("pwcyyufmhr"));
        Assertions.assertEquals(ManagedServiceIdentityType.NONE, response.identity().type());
        Assertions.assertEquals("tlwexxwlalniexz", response.devCenterId());
        Assertions.assertEquals("zpgepqty", response.description());
        Assertions.assertEquals(2090759507, response.maxDevBoxesPerUser());
        Assertions.assertEquals("pgdakchzyvli", response.displayName());
        Assertions.assertEquals(CatalogItemType.ENVIRONMENT_DEFINITION,
            response.catalogSettings().catalogItemSyncTypes().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
