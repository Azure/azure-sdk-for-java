// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devcenter.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.util.Context;
import com.azure.resourcemanager.devcenter.DevCenterManager;
import com.azure.resourcemanager.devcenter.models.OperationStatus;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class OperationStatusesGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"resourceId\":\"ld\",\"properties\":\"datazuxylfsbtkadpyso\",\"id\":\"btgkbugrjqctoj\",\"name\":\"isofieypefojyqd\",\"status\":\"cuplcplcwkhih\",\"percentComplete\":54.289127,\"startTime\":\"2021-05-07T17:19:51Z\",\"endTime\":\"2020-12-21T12:31:23Z\",\"operations\":[{\"id\":\"bsrgnowc\",\"name\":\"fgmvecactxmwo\",\"status\":\"e\",\"percentComplete\":80.40437,\"startTime\":\"2021-04-20T13:37:10Z\",\"endTime\":\"2021-10-08T20:51:02Z\",\"operations\":[]},{\"id\":\"qvgqouw\",\"name\":\"zmpjwyiv\",\"status\":\"ikf\",\"percentComplete\":70.753624,\"startTime\":\"2021-06-21T15:40:21Z\",\"endTime\":\"2021-01-26T06:41:29Z\",\"operations\":[]},{\"id\":\"grttikteusqczk\",\"name\":\"klxubyja\",\"status\":\"fmmfblcqcu\",\"percentComplete\":81.51068,\"startTime\":\"2021-09-13T14:51:42Z\",\"endTime\":\"2021-03-05T16:25:57Z\",\"operations\":[]},{\"id\":\"etttwgdslqxihhr\",\"name\":\"oi\",\"status\":\"qseypxiutcxa\",\"percentComplete\":81.69838,\"startTime\":\"2021-04-18T15:14:52Z\",\"endTime\":\"2021-01-14T16:11:25Z\",\"operations\":[]}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        DevCenterManager manager =
            DevCenterManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        OperationStatus response =
            manager.operationStatuses().getWithResponse("giagtcojo", "qwogfnzjvus", Context.NONE).getValue();

        Assertions.assertEquals("btgkbugrjqctoj", response.id());
        Assertions.assertEquals("isofieypefojyqd", response.name());
        Assertions.assertEquals("cuplcplcwkhih", response.status());
        Assertions.assertEquals(54.289127F, response.percentComplete());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-07T17:19:51Z"), response.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2020-12-21T12:31:23Z"), response.endTime());
        Assertions.assertEquals("bsrgnowc", response.operations().get(0).id());
        Assertions.assertEquals("fgmvecactxmwo", response.operations().get(0).name());
        Assertions.assertEquals("e", response.operations().get(0).status());
        Assertions.assertEquals(80.40437F, response.operations().get(0).percentComplete());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-20T13:37:10Z"), response.operations().get(0).startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-08T20:51:02Z"), response.operations().get(0).endTime());
    }
}
