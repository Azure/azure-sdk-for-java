// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devcenter.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.devcenter.fluent.models.ProjectInner;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ProjectInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ProjectInner model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"provisioningState\":\"NotSpecified\",\"devCenterUri\":\"ciqihnhung\",\"devCenterId\":\"jzrnf\",\"description\":\"xgispemvtzfkufu\",\"maxDevBoxesPerUser\":1437097866,\"displayName\":\"fxqeof\"},\"location\":\"e\",\"tags\":{\"jqul\":\"qjbasvms\",\"clxxwrljdo\":\"gsntnbybkzgcwr\",\"wtnhxbnjbiksqr\":\"skcqvkocrcjd\"},\"id\":\"lssai\",\"name\":\"qpjwnzlljfm\",\"type\":\"pee\"}")
                .toObject(ProjectInner.class);
        Assertions.assertEquals("e", model.location());
        Assertions.assertEquals("qjbasvms", model.tags().get("jqul"));
        Assertions.assertEquals("jzrnf", model.devCenterId());
        Assertions.assertEquals("xgispemvtzfkufu", model.description());
        Assertions.assertEquals(1437097866, model.maxDevBoxesPerUser());
        Assertions.assertEquals("fxqeof", model.displayName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ProjectInner model =
            new ProjectInner()
                .withLocation("e")
                .withTags(mapOf("jqul", "qjbasvms", "clxxwrljdo", "gsntnbybkzgcwr", "wtnhxbnjbiksqr", "skcqvkocrcjd"))
                .withDevCenterId("jzrnf")
                .withDescription("xgispemvtzfkufu")
                .withMaxDevBoxesPerUser(1437097866)
                .withDisplayName("fxqeof");
        model = BinaryData.fromObject(model).toObject(ProjectInner.class);
        Assertions.assertEquals("e", model.location());
        Assertions.assertEquals("qjbasvms", model.tags().get("jqul"));
        Assertions.assertEquals("jzrnf", model.devCenterId());
        Assertions.assertEquals("xgispemvtzfkufu", model.description());
        Assertions.assertEquals(1437097866, model.maxDevBoxesPerUser());
        Assertions.assertEquals("fxqeof", model.displayName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
