// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devcenter.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.devcenter.fluent.models.ProjectInner;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class ProjectInnerTests {
    @Test
    public void testDeserialize() {
        ProjectInner model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"provisioningState\":\"qjbasvms\",\"devCenterId\":\"qulngsntnbybkzgc\",\"description\":\"wclxxwrl\"},\"location\":\"ouskcqvkocrc\",\"tags\":{\"lssai\":\"wtnhxbnjbiksqr\"},\"id\":\"qpjwnzlljfm\",\"name\":\"pee\",\"type\":\"vmgxsab\"}")
                .toObject(ProjectInner.class);
        Assertions.assertEquals("ouskcqvkocrc", model.location());
        Assertions.assertEquals("wtnhxbnjbiksqr", model.tags().get("lssai"));
        Assertions.assertEquals("qulngsntnbybkzgc", model.devCenterId());
        Assertions.assertEquals("wclxxwrl", model.description());
    }

    @Test
    public void testSerialize() {
        ProjectInner model =
            new ProjectInner()
                .withLocation("ouskcqvkocrc")
                .withTags(mapOf("lssai", "wtnhxbnjbiksqr"))
                .withDevCenterId("qulngsntnbybkzgc")
                .withDescription("wclxxwrl");
        model = BinaryData.fromObject(model).toObject(ProjectInner.class);
        Assertions.assertEquals("ouskcqvkocrc", model.location());
        Assertions.assertEquals("wtnhxbnjbiksqr", model.tags().get("lssai"));
        Assertions.assertEquals("qulngsntnbybkzgc", model.devCenterId());
        Assertions.assertEquals("wclxxwrl", model.description());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
