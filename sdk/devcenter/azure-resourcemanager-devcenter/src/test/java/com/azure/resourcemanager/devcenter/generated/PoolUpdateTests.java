// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devcenter.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.devcenter.models.LicenseType;
import com.azure.resourcemanager.devcenter.models.LocalAdminStatus;
import com.azure.resourcemanager.devcenter.models.PoolUpdate;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class PoolUpdateTests {
    @Test
    public void testDeserialize() {
        PoolUpdate model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"devBoxDefinitionName\":\"wtl\",\"networkConnectionName\":\"guxawqaldsyuuxi\",\"licenseType\":\"Windows_Client\",\"localAdministrator\":\"Disabled\"},\"tags\":{\"wpfhpagmhrskd\":\"wyznkbyku\"},\"location\":\"fdsd\"}")
                .toObject(PoolUpdate.class);
        Assertions.assertEquals("wyznkbyku", model.tags().get("wpfhpagmhrskd"));
        Assertions.assertEquals("fdsd", model.location());
        Assertions.assertEquals("wtl", model.devBoxDefinitionName());
        Assertions.assertEquals("guxawqaldsyuuxi", model.networkConnectionName());
        Assertions.assertEquals(LicenseType.WINDOWS_CLIENT, model.licenseType());
        Assertions.assertEquals(LocalAdminStatus.DISABLED, model.localAdministrator());
    }

    @Test
    public void testSerialize() {
        PoolUpdate model =
            new PoolUpdate()
                .withTags(mapOf("wpfhpagmhrskd", "wyznkbyku"))
                .withLocation("fdsd")
                .withDevBoxDefinitionName("wtl")
                .withNetworkConnectionName("guxawqaldsyuuxi")
                .withLicenseType(LicenseType.WINDOWS_CLIENT)
                .withLocalAdministrator(LocalAdminStatus.DISABLED);
        model = BinaryData.fromObject(model).toObject(PoolUpdate.class);
        Assertions.assertEquals("wyznkbyku", model.tags().get("wpfhpagmhrskd"));
        Assertions.assertEquals("fdsd", model.location());
        Assertions.assertEquals("wtl", model.devBoxDefinitionName());
        Assertions.assertEquals("guxawqaldsyuuxi", model.networkConnectionName());
        Assertions.assertEquals(LicenseType.WINDOWS_CLIENT, model.licenseType());
        Assertions.assertEquals(LocalAdminStatus.DISABLED, model.localAdministrator());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
