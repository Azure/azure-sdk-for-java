// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devcenter.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.devcenter.models.LicenseType;
import com.azure.resourcemanager.devcenter.models.LocalAdminStatus;
import com.azure.resourcemanager.devcenter.models.PoolUpdate;
import com.azure.resourcemanager.devcenter.models.SingleSignOnStatus;
import com.azure.resourcemanager.devcenter.models.StopOnDisconnectConfiguration;
import com.azure.resourcemanager.devcenter.models.StopOnDisconnectEnableStatus;
import com.azure.resourcemanager.devcenter.models.VirtualNetworkType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class PoolUpdateTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PoolUpdate model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"devBoxDefinitionName\":\"nvjsrtkfa\",\"networkConnectionName\":\"opqgikyzirtxdyux\",\"licenseType\":\"Windows_Client\",\"localAdministrator\":\"Disabled\",\"stopOnDisconnect\":{\"status\":\"Disabled\",\"gracePeriodMinutes\":1675293509},\"singleSignOnStatus\":\"Disabled\",\"displayName\":\"l\",\"virtualNetworkType\":\"Managed\",\"managedVirtualNetworkRegions\":[\"dxtqmieoxo\",\"ggufhyaomtb\"]},\"tags\":{\"pjbi\":\"avgrvkffovjz\",\"yo\":\"gjmfxumvfcl\"},\"location\":\"xnbkfezzxscyhwzd\"}")
                .toObject(PoolUpdate.class);
        Assertions.assertEquals("avgrvkffovjz", model.tags().get("pjbi"));
        Assertions.assertEquals("xnbkfezzxscyhwzd", model.location());
        Assertions.assertEquals("nvjsrtkfa", model.devBoxDefinitionName());
        Assertions.assertEquals("opqgikyzirtxdyux", model.networkConnectionName());
        Assertions.assertEquals(LicenseType.WINDOWS_CLIENT, model.licenseType());
        Assertions.assertEquals(LocalAdminStatus.DISABLED, model.localAdministrator());
        Assertions.assertEquals(StopOnDisconnectEnableStatus.DISABLED, model.stopOnDisconnect().status());
        Assertions.assertEquals(1675293509, model.stopOnDisconnect().gracePeriodMinutes());
        Assertions.assertEquals(SingleSignOnStatus.DISABLED, model.singleSignOnStatus());
        Assertions.assertEquals("l", model.displayName());
        Assertions.assertEquals(VirtualNetworkType.MANAGED, model.virtualNetworkType());
        Assertions.assertEquals("dxtqmieoxo", model.managedVirtualNetworkRegions().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PoolUpdate model =
            new PoolUpdate()
                .withTags(mapOf("pjbi", "avgrvkffovjz", "yo", "gjmfxumvfcl"))
                .withLocation("xnbkfezzxscyhwzd")
                .withDevBoxDefinitionName("nvjsrtkfa")
                .withNetworkConnectionName("opqgikyzirtxdyux")
                .withLicenseType(LicenseType.WINDOWS_CLIENT)
                .withLocalAdministrator(LocalAdminStatus.DISABLED)
                .withStopOnDisconnect(
                    new StopOnDisconnectConfiguration()
                        .withStatus(StopOnDisconnectEnableStatus.DISABLED)
                        .withGracePeriodMinutes(1675293509))
                .withSingleSignOnStatus(SingleSignOnStatus.DISABLED)
                .withDisplayName("l")
                .withVirtualNetworkType(VirtualNetworkType.MANAGED)
                .withManagedVirtualNetworkRegions(Arrays.asList("dxtqmieoxo", "ggufhyaomtb"));
        model = BinaryData.fromObject(model).toObject(PoolUpdate.class);
        Assertions.assertEquals("avgrvkffovjz", model.tags().get("pjbi"));
        Assertions.assertEquals("xnbkfezzxscyhwzd", model.location());
        Assertions.assertEquals("nvjsrtkfa", model.devBoxDefinitionName());
        Assertions.assertEquals("opqgikyzirtxdyux", model.networkConnectionName());
        Assertions.assertEquals(LicenseType.WINDOWS_CLIENT, model.licenseType());
        Assertions.assertEquals(LocalAdminStatus.DISABLED, model.localAdministrator());
        Assertions.assertEquals(StopOnDisconnectEnableStatus.DISABLED, model.stopOnDisconnect().status());
        Assertions.assertEquals(1675293509, model.stopOnDisconnect().gracePeriodMinutes());
        Assertions.assertEquals(SingleSignOnStatus.DISABLED, model.singleSignOnStatus());
        Assertions.assertEquals("l", model.displayName());
        Assertions.assertEquals(VirtualNetworkType.MANAGED, model.virtualNetworkType());
        Assertions.assertEquals("dxtqmieoxo", model.managedVirtualNetworkRegions().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
