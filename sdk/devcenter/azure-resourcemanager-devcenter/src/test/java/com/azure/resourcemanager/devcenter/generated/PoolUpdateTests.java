// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devcenter.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.devcenter.models.LicenseType;
import com.azure.resourcemanager.devcenter.models.LocalAdminStatus;
import com.azure.resourcemanager.devcenter.models.PoolUpdate;
import com.azure.resourcemanager.devcenter.models.SingleSignOnStatus;
import com.azure.resourcemanager.devcenter.models.StopOnDisconnectConfiguration;
import com.azure.resourcemanager.devcenter.models.StopOnDisconnectEnableStatus;
import com.azure.resourcemanager.devcenter.models.VirtualNetworkType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class PoolUpdateTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PoolUpdate model = BinaryData.fromString(
            "{\"properties\":{\"devBoxDefinitionName\":\"jmfxumvf\",\"networkConnectionName\":\"uyovw\",\"licenseType\":\"Windows_Client\",\"localAdministrator\":\"Enabled\",\"stopOnDisconnect\":{\"status\":\"Disabled\",\"gracePeriodMinutes\":1537243599},\"singleSignOnStatus\":\"Enabled\",\"displayName\":\"wzdgirujbzbo\",\"virtualNetworkType\":\"Unmanaged\",\"managedVirtualNetworkRegions\":[\"tdcqvpniyuj\",\"iylwdshfssnr\",\"gy\",\"frymsgaojfmwnc\"]},\"tags\":{\"rctym\":\"rfh\",\"xacpqjli\":\"xoftpipiwyczu\",\"skasdvlmfwdgzxu\":\"hyus\"},\"location\":\"cvpa\"}")
            .toObject(PoolUpdate.class);
        Assertions.assertEquals("rfh", model.tags().get("rctym"));
        Assertions.assertEquals("cvpa", model.location());
        Assertions.assertEquals("jmfxumvf", model.devBoxDefinitionName());
        Assertions.assertEquals("uyovw", model.networkConnectionName());
        Assertions.assertEquals(LicenseType.WINDOWS_CLIENT, model.licenseType());
        Assertions.assertEquals(LocalAdminStatus.ENABLED, model.localAdministrator());
        Assertions.assertEquals(StopOnDisconnectEnableStatus.DISABLED, model.stopOnDisconnect().status());
        Assertions.assertEquals(1537243599, model.stopOnDisconnect().gracePeriodMinutes());
        Assertions.assertEquals(SingleSignOnStatus.ENABLED, model.singleSignOnStatus());
        Assertions.assertEquals("wzdgirujbzbo", model.displayName());
        Assertions.assertEquals(VirtualNetworkType.UNMANAGED, model.virtualNetworkType());
        Assertions.assertEquals("tdcqvpniyuj", model.managedVirtualNetworkRegions().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PoolUpdate model = new PoolUpdate()
            .withTags(mapOf("rctym", "rfh", "xacpqjli", "xoftpipiwyczu", "skasdvlmfwdgzxu", "hyus"))
            .withLocation("cvpa")
            .withDevBoxDefinitionName("jmfxumvf")
            .withNetworkConnectionName("uyovw")
            .withLicenseType(LicenseType.WINDOWS_CLIENT)
            .withLocalAdministrator(LocalAdminStatus.ENABLED)
            .withStopOnDisconnect(new StopOnDisconnectConfiguration().withStatus(StopOnDisconnectEnableStatus.DISABLED)
                .withGracePeriodMinutes(1537243599))
            .withSingleSignOnStatus(SingleSignOnStatus.ENABLED)
            .withDisplayName("wzdgirujbzbo")
            .withVirtualNetworkType(VirtualNetworkType.UNMANAGED)
            .withManagedVirtualNetworkRegions(Arrays.asList("tdcqvpniyuj", "iylwdshfssnr", "gy", "frymsgaojfmwnc"));
        model = BinaryData.fromObject(model).toObject(PoolUpdate.class);
        Assertions.assertEquals("rfh", model.tags().get("rctym"));
        Assertions.assertEquals("cvpa", model.location());
        Assertions.assertEquals("jmfxumvf", model.devBoxDefinitionName());
        Assertions.assertEquals("uyovw", model.networkConnectionName());
        Assertions.assertEquals(LicenseType.WINDOWS_CLIENT, model.licenseType());
        Assertions.assertEquals(LocalAdminStatus.ENABLED, model.localAdministrator());
        Assertions.assertEquals(StopOnDisconnectEnableStatus.DISABLED, model.stopOnDisconnect().status());
        Assertions.assertEquals(1537243599, model.stopOnDisconnect().gracePeriodMinutes());
        Assertions.assertEquals(SingleSignOnStatus.ENABLED, model.singleSignOnStatus());
        Assertions.assertEquals("wzdgirujbzbo", model.displayName());
        Assertions.assertEquals(VirtualNetworkType.UNMANAGED, model.virtualNetworkType());
        Assertions.assertEquals("tdcqvpniyuj", model.managedVirtualNetworkRegions().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
