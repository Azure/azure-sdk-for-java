// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devcenter.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.devcenter.fluent.models.PoolInner;
import com.azure.resourcemanager.devcenter.models.LicenseType;
import com.azure.resourcemanager.devcenter.models.LocalAdminStatus;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class PoolInnerTests {
    @Test
    public void testDeserialize() {
        PoolInner model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"provisioningState\":\"ooaojkniodkooebw\",\"devBoxDefinitionName\":\"jhemms\",\"networkConnectionName\":\"dkcrodt\",\"licenseType\":\"Windows_Client\",\"localAdministrator\":\"Disabled\"},\"location\":\"lfltka\",\"tags\":{\"akggkfpag\":\"efkdlf\",\"lyls\":\"owpulpq\",\"agxsdszuemps\":\"xkqjnsjervt\",\"nqicvinvkjjxdxrb\":\"zkfzbeyv\"},\"id\":\"ukzclewyhmlwpaz\",\"name\":\"zpof\",\"type\":\"cckwyfzqwhxxbu\"}")
                .toObject(PoolInner.class);
        Assertions.assertEquals("lfltka", model.location());
        Assertions.assertEquals("efkdlf", model.tags().get("akggkfpag"));
        Assertions.assertEquals("jhemms", model.devBoxDefinitionName());
        Assertions.assertEquals("dkcrodt", model.networkConnectionName());
        Assertions.assertEquals(LicenseType.WINDOWS_CLIENT, model.licenseType());
        Assertions.assertEquals(LocalAdminStatus.DISABLED, model.localAdministrator());
    }

    @Test
    public void testSerialize() {
        PoolInner model =
            new PoolInner()
                .withLocation("lfltka")
                .withTags(
                    mapOf(
                        "akggkfpag",
                        "efkdlf",
                        "lyls",
                        "owpulpq",
                        "agxsdszuemps",
                        "xkqjnsjervt",
                        "nqicvinvkjjxdxrb",
                        "zkfzbeyv"))
                .withDevBoxDefinitionName("jhemms")
                .withNetworkConnectionName("dkcrodt")
                .withLicenseType(LicenseType.WINDOWS_CLIENT)
                .withLocalAdministrator(LocalAdminStatus.DISABLED);
        model = BinaryData.fromObject(model).toObject(PoolInner.class);
        Assertions.assertEquals("lfltka", model.location());
        Assertions.assertEquals("efkdlf", model.tags().get("akggkfpag"));
        Assertions.assertEquals("jhemms", model.devBoxDefinitionName());
        Assertions.assertEquals("dkcrodt", model.networkConnectionName());
        Assertions.assertEquals(LicenseType.WINDOWS_CLIENT, model.licenseType());
        Assertions.assertEquals(LocalAdminStatus.DISABLED, model.localAdministrator());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
