// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devcenter.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.devcenter.models.EnableStatus;
import com.azure.resourcemanager.devcenter.models.ScheduleUpdate;
import com.azure.resourcemanager.devcenter.models.ScheduledFrequency;
import com.azure.resourcemanager.devcenter.models.ScheduledType;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class ScheduleUpdateTests {
    @Test
    public void testDeserialize() {
        ScheduleUpdate model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"type\":\"StopDevBox\",\"frequency\":\"Daily\",\"time\":\"uzkopbminrfd\",\"timeZone\":\"yuhhziu\",\"state\":\"Disabled\"},\"tags\":{\"rmaequ\":\"bhdmsmlmzqhof\"},\"location\":\"hxicslfaoqz\"}")
                .toObject(ScheduleUpdate.class);
        Assertions.assertEquals("bhdmsmlmzqhof", model.tags().get("rmaequ"));
        Assertions.assertEquals("hxicslfaoqz", model.location());
        Assertions.assertEquals(ScheduledType.STOP_DEV_BOX, model.type());
        Assertions.assertEquals(ScheduledFrequency.DAILY, model.frequency());
        Assertions.assertEquals("uzkopbminrfd", model.time());
        Assertions.assertEquals("yuhhziu", model.timeZone());
        Assertions.assertEquals(EnableStatus.DISABLED, model.state());
    }

    @Test
    public void testSerialize() {
        ScheduleUpdate model =
            new ScheduleUpdate()
                .withTags(mapOf("rmaequ", "bhdmsmlmzqhof"))
                .withLocation("hxicslfaoqz")
                .withType(ScheduledType.STOP_DEV_BOX)
                .withFrequency(ScheduledFrequency.DAILY)
                .withTime("uzkopbminrfd")
                .withTimeZone("yuhhziu")
                .withState(EnableStatus.DISABLED);
        model = BinaryData.fromObject(model).toObject(ScheduleUpdate.class);
        Assertions.assertEquals("bhdmsmlmzqhof", model.tags().get("rmaequ"));
        Assertions.assertEquals("hxicslfaoqz", model.location());
        Assertions.assertEquals(ScheduledType.STOP_DEV_BOX, model.type());
        Assertions.assertEquals(ScheduledFrequency.DAILY, model.frequency());
        Assertions.assertEquals("uzkopbminrfd", model.time());
        Assertions.assertEquals("yuhhziu", model.timeZone());
        Assertions.assertEquals(EnableStatus.DISABLED, model.state());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
