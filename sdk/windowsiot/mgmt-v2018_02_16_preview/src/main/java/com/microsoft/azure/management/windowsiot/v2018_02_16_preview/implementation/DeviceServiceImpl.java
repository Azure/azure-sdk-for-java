/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.windowsiot.v2018_02_16_preview.implementation;

import com.microsoft.azure.arm.resources.models.implementation.GroupableResourceCoreImpl;
import com.microsoft.azure.management.windowsiot.v2018_02_16_preview.DeviceService;
import rx.Observable;
import org.joda.time.DateTime;

class DeviceServiceImpl extends GroupableResourceCoreImpl<DeviceService, DeviceServiceInner, DeviceServiceImpl, WindowsIoTManager> implements DeviceService, DeviceService.Definition, DeviceService.Update {
    private String cifMatch;
    private String uifMatch;
    DeviceServiceImpl(String name, DeviceServiceInner inner, WindowsIoTManager manager) {
        super(name, inner, manager);
    }

    @Override
    public Observable<DeviceService> createResourceAsync() {
        ServicesInner client = this.manager().inner().services();
        return client.createOrUpdateAsync(this.resourceGroupName(), this.name(), this.inner(), this.cifMatch)
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<DeviceService> updateResourceAsync() {
        ServicesInner client = this.manager().inner().services();
        return client.updateAsync(this.resourceGroupName(), this.name(), this.inner(), this.uifMatch)
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<DeviceServiceInner> getInnerAsync() {
        ServicesInner client = this.manager().inner().services();
        return client.getByResourceGroupAsync(this.resourceGroupName(), this.name());
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public String adminDomainName() {
        return this.inner().adminDomainName();
    }

    @Override
    public String billingDomainName() {
        return this.inner().billingDomainName();
    }

    @Override
    public String etag() {
        return this.inner().etag();
    }

    @Override
    public String notes() {
        return this.inner().notes();
    }

    @Override
    public Long quantity() {
        return this.inner().quantity();
    }

    @Override
    public DateTime startDate() {
        return this.inner().startDate();
    }

    @Override
    public DeviceServiceImpl withIfMatch(String ifMatch) {
        if (isInCreateMode()) {
            this.cifMatch = ifMatch;
        } else {
            this.uifMatch = ifMatch;
        }
        return this;
    }

    @Override
    public DeviceServiceImpl withAdminDomainName(String adminDomainName) {
        this.inner().withAdminDomainName(adminDomainName);
        return this;
    }

    @Override
    public DeviceServiceImpl withEtag(String etag) {
        this.inner().withEtag(etag);
        return this;
    }

    @Override
    public DeviceServiceImpl withNotes(String notes) {
        this.inner().withNotes(notes);
        return this;
    }

    @Override
    public DeviceServiceImpl withQuantity(Long quantity) {
        this.inner().withQuantity(quantity);
        return this;
    }

}
