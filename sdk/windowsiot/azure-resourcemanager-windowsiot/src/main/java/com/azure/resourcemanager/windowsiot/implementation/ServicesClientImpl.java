// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.windowsiot.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.windowsiot.fluent.ServicesClient;
import com.azure.resourcemanager.windowsiot.fluent.models.DeviceServiceInner;
import com.azure.resourcemanager.windowsiot.fluent.models.DeviceServiceNameAvailabilityInfoInner;
import com.azure.resourcemanager.windowsiot.models.DeviceServiceCheckNameAvailabilityParameters;
import com.azure.resourcemanager.windowsiot.models.DeviceServiceDescriptionListResult;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in ServicesClient. */
public final class ServicesClientImpl implements ServicesClient {
    private final ClientLogger logger = new ClientLogger(ServicesClientImpl.class);

    /** The proxy service used to perform REST calls. */
    private final ServicesService service;

    /** The service client containing this operation class. */
    private final DeviceServicesImpl client;

    /**
     * Initializes an instance of ServicesClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    ServicesClientImpl(DeviceServicesImpl client) {
        this.service = RestProxy.create(ServicesService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for DeviceServicesServices to be used by the proxy service to perform
     * REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "DeviceServicesServic")
    private interface ServicesService {
        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.WindowsIoT"
                + "/deviceServices/{deviceName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<DeviceServiceInner>> getByResourceGroup(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("deviceName") String deviceName,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Put(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.WindowsIoT"
                + "/deviceServices/{deviceName}")
        @ExpectedResponses({200, 201})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<DeviceServiceInner>> createOrUpdate(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("deviceName") String deviceName,
            @HeaderParam("If-Match") String ifMatch,
            @BodyParam("application/json") DeviceServiceInner deviceService,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Patch(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.WindowsIoT"
                + "/deviceServices/{deviceName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<DeviceServiceInner>> update(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("deviceName") String deviceName,
            @HeaderParam("If-Match") String ifMatch,
            @BodyParam("application/json") DeviceServiceInner deviceService,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Delete(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.WindowsIoT"
                + "/deviceServices/{deviceName}")
        @ExpectedResponses({200, 204})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<DeviceServiceInner>> delete(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("deviceName") String deviceName,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.WindowsIoT"
                + "/deviceServices")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<DeviceServiceDescriptionListResult>> listByResourceGroup(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("/subscriptions/{subscriptionId}/providers/Microsoft.WindowsIoT/deviceServices")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<DeviceServiceDescriptionListResult>> list(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post("/subscriptions/{subscriptionId}/providers/Microsoft.WindowsIoT/checkDeviceServiceNameAvailability")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<DeviceServiceNameAvailabilityInfoInner>> checkDeviceServiceNameAvailability(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @BodyParam("application/json")
                DeviceServiceCheckNameAvailabilityParameters deviceServiceCheckNameAvailabilityParameters,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<DeviceServiceDescriptionListResult>> listByResourceGroupNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<DeviceServiceDescriptionListResult>> listNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Get the non-security related metadata of a Windows IoT Device Service.
     *
     * @param resourceGroupName The name of the resource group that contains the Windows IoT Device Service.
     * @param deviceName The name of the Windows IoT Device Service.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the non-security related metadata of a Windows IoT Device Service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<DeviceServiceInner>> getByResourceGroupWithResponseAsync(
        String resourceGroupName, String deviceName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (deviceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter deviceName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getByResourceGroup(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            deviceName,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the non-security related metadata of a Windows IoT Device Service.
     *
     * @param resourceGroupName The name of the resource group that contains the Windows IoT Device Service.
     * @param deviceName The name of the Windows IoT Device Service.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the non-security related metadata of a Windows IoT Device Service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<DeviceServiceInner>> getByResourceGroupWithResponseAsync(
        String resourceGroupName, String deviceName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (deviceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter deviceName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .getByResourceGroup(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                deviceName,
                accept,
                context);
    }

    /**
     * Get the non-security related metadata of a Windows IoT Device Service.
     *
     * @param resourceGroupName The name of the resource group that contains the Windows IoT Device Service.
     * @param deviceName The name of the Windows IoT Device Service.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the non-security related metadata of a Windows IoT Device Service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<DeviceServiceInner> getByResourceGroupAsync(String resourceGroupName, String deviceName) {
        return getByResourceGroupWithResponseAsync(resourceGroupName, deviceName)
            .flatMap(
                (Response<DeviceServiceInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Get the non-security related metadata of a Windows IoT Device Service.
     *
     * @param resourceGroupName The name of the resource group that contains the Windows IoT Device Service.
     * @param deviceName The name of the Windows IoT Device Service.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the non-security related metadata of a Windows IoT Device Service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DeviceServiceInner getByResourceGroup(String resourceGroupName, String deviceName) {
        return getByResourceGroupAsync(resourceGroupName, deviceName).block();
    }

    /**
     * Get the non-security related metadata of a Windows IoT Device Service.
     *
     * @param resourceGroupName The name of the resource group that contains the Windows IoT Device Service.
     * @param deviceName The name of the Windows IoT Device Service.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the non-security related metadata of a Windows IoT Device Service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<DeviceServiceInner> getByResourceGroupWithResponse(
        String resourceGroupName, String deviceName, Context context) {
        return getByResourceGroupWithResponseAsync(resourceGroupName, deviceName, context).block();
    }

    /**
     * Create or update the metadata of a Windows IoT Device Service. The usual pattern to modify a property is to
     * retrieve the Windows IoT Device Service metadata and security metadata, and then combine them with the modified
     * values in a new body to update the Windows IoT Device Service.
     *
     * @param resourceGroupName The name of the resource group that contains the Windows IoT Device Service.
     * @param deviceName The name of the Windows IoT Device Service.
     * @param deviceService The Windows IoT Device Service metadata and security metadata.
     * @param ifMatch ETag of the Windows IoT Device Service. Do not specify for creating a new Windows IoT Device
     *     Service. Required to update an existing Windows IoT Device Service.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the description of the Windows IoT Device Service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<DeviceServiceInner>> createOrUpdateWithResponseAsync(
        String resourceGroupName, String deviceName, DeviceServiceInner deviceService, String ifMatch) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (deviceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter deviceName is required and cannot be null."));
        }
        if (deviceService == null) {
            return Mono.error(new IllegalArgumentException("Parameter deviceService is required and cannot be null."));
        } else {
            deviceService.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .createOrUpdate(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            deviceName,
                            ifMatch,
                            deviceService,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Create or update the metadata of a Windows IoT Device Service. The usual pattern to modify a property is to
     * retrieve the Windows IoT Device Service metadata and security metadata, and then combine them with the modified
     * values in a new body to update the Windows IoT Device Service.
     *
     * @param resourceGroupName The name of the resource group that contains the Windows IoT Device Service.
     * @param deviceName The name of the Windows IoT Device Service.
     * @param deviceService The Windows IoT Device Service metadata and security metadata.
     * @param ifMatch ETag of the Windows IoT Device Service. Do not specify for creating a new Windows IoT Device
     *     Service. Required to update an existing Windows IoT Device Service.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the description of the Windows IoT Device Service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<DeviceServiceInner>> createOrUpdateWithResponseAsync(
        String resourceGroupName,
        String deviceName,
        DeviceServiceInner deviceService,
        String ifMatch,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (deviceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter deviceName is required and cannot be null."));
        }
        if (deviceService == null) {
            return Mono.error(new IllegalArgumentException("Parameter deviceService is required and cannot be null."));
        } else {
            deviceService.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .createOrUpdate(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                deviceName,
                ifMatch,
                deviceService,
                accept,
                context);
    }

    /**
     * Create or update the metadata of a Windows IoT Device Service. The usual pattern to modify a property is to
     * retrieve the Windows IoT Device Service metadata and security metadata, and then combine them with the modified
     * values in a new body to update the Windows IoT Device Service.
     *
     * @param resourceGroupName The name of the resource group that contains the Windows IoT Device Service.
     * @param deviceName The name of the Windows IoT Device Service.
     * @param deviceService The Windows IoT Device Service metadata and security metadata.
     * @param ifMatch ETag of the Windows IoT Device Service. Do not specify for creating a new Windows IoT Device
     *     Service. Required to update an existing Windows IoT Device Service.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the description of the Windows IoT Device Service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<DeviceServiceInner> createOrUpdateAsync(
        String resourceGroupName, String deviceName, DeviceServiceInner deviceService, String ifMatch) {
        return createOrUpdateWithResponseAsync(resourceGroupName, deviceName, deviceService, ifMatch)
            .flatMap(
                (Response<DeviceServiceInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Create or update the metadata of a Windows IoT Device Service. The usual pattern to modify a property is to
     * retrieve the Windows IoT Device Service metadata and security metadata, and then combine them with the modified
     * values in a new body to update the Windows IoT Device Service.
     *
     * @param resourceGroupName The name of the resource group that contains the Windows IoT Device Service.
     * @param deviceName The name of the Windows IoT Device Service.
     * @param deviceService The Windows IoT Device Service metadata and security metadata.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the description of the Windows IoT Device Service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<DeviceServiceInner> createOrUpdateAsync(
        String resourceGroupName, String deviceName, DeviceServiceInner deviceService) {
        final String ifMatch = null;
        return createOrUpdateWithResponseAsync(resourceGroupName, deviceName, deviceService, ifMatch)
            .flatMap(
                (Response<DeviceServiceInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Create or update the metadata of a Windows IoT Device Service. The usual pattern to modify a property is to
     * retrieve the Windows IoT Device Service metadata and security metadata, and then combine them with the modified
     * values in a new body to update the Windows IoT Device Service.
     *
     * @param resourceGroupName The name of the resource group that contains the Windows IoT Device Service.
     * @param deviceName The name of the Windows IoT Device Service.
     * @param deviceService The Windows IoT Device Service metadata and security metadata.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the description of the Windows IoT Device Service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DeviceServiceInner createOrUpdate(
        String resourceGroupName, String deviceName, DeviceServiceInner deviceService) {
        final String ifMatch = null;
        return createOrUpdateAsync(resourceGroupName, deviceName, deviceService, ifMatch).block();
    }

    /**
     * Create or update the metadata of a Windows IoT Device Service. The usual pattern to modify a property is to
     * retrieve the Windows IoT Device Service metadata and security metadata, and then combine them with the modified
     * values in a new body to update the Windows IoT Device Service.
     *
     * @param resourceGroupName The name of the resource group that contains the Windows IoT Device Service.
     * @param deviceName The name of the Windows IoT Device Service.
     * @param deviceService The Windows IoT Device Service metadata and security metadata.
     * @param ifMatch ETag of the Windows IoT Device Service. Do not specify for creating a new Windows IoT Device
     *     Service. Required to update an existing Windows IoT Device Service.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the description of the Windows IoT Device Service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<DeviceServiceInner> createOrUpdateWithResponse(
        String resourceGroupName,
        String deviceName,
        DeviceServiceInner deviceService,
        String ifMatch,
        Context context) {
        return createOrUpdateWithResponseAsync(resourceGroupName, deviceName, deviceService, ifMatch, context).block();
    }

    /**
     * Updates the metadata of a Windows IoT Device Service. The usual pattern to modify a property is to retrieve the
     * Windows IoT Device Service metadata and security metadata, and then combine them with the modified values in a
     * new body to update the Windows IoT Device Service.
     *
     * @param resourceGroupName The name of the resource group that contains the Windows IoT Device Service.
     * @param deviceName The name of the Windows IoT Device Service.
     * @param deviceService The Windows IoT Device Service metadata and security metadata.
     * @param ifMatch ETag of the Windows IoT Device Service. Do not specify for creating a brand new Windows IoT Device
     *     Service. Required to update an existing Windows IoT Device Service.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the description of the Windows IoT Device Service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<DeviceServiceInner>> updateWithResponseAsync(
        String resourceGroupName, String deviceName, DeviceServiceInner deviceService, String ifMatch) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (deviceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter deviceName is required and cannot be null."));
        }
        if (deviceService == null) {
            return Mono.error(new IllegalArgumentException("Parameter deviceService is required and cannot be null."));
        } else {
            deviceService.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .update(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            deviceName,
                            ifMatch,
                            deviceService,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Updates the metadata of a Windows IoT Device Service. The usual pattern to modify a property is to retrieve the
     * Windows IoT Device Service metadata and security metadata, and then combine them with the modified values in a
     * new body to update the Windows IoT Device Service.
     *
     * @param resourceGroupName The name of the resource group that contains the Windows IoT Device Service.
     * @param deviceName The name of the Windows IoT Device Service.
     * @param deviceService The Windows IoT Device Service metadata and security metadata.
     * @param ifMatch ETag of the Windows IoT Device Service. Do not specify for creating a brand new Windows IoT Device
     *     Service. Required to update an existing Windows IoT Device Service.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the description of the Windows IoT Device Service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<DeviceServiceInner>> updateWithResponseAsync(
        String resourceGroupName,
        String deviceName,
        DeviceServiceInner deviceService,
        String ifMatch,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (deviceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter deviceName is required and cannot be null."));
        }
        if (deviceService == null) {
            return Mono.error(new IllegalArgumentException("Parameter deviceService is required and cannot be null."));
        } else {
            deviceService.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .update(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                deviceName,
                ifMatch,
                deviceService,
                accept,
                context);
    }

    /**
     * Updates the metadata of a Windows IoT Device Service. The usual pattern to modify a property is to retrieve the
     * Windows IoT Device Service metadata and security metadata, and then combine them with the modified values in a
     * new body to update the Windows IoT Device Service.
     *
     * @param resourceGroupName The name of the resource group that contains the Windows IoT Device Service.
     * @param deviceName The name of the Windows IoT Device Service.
     * @param deviceService The Windows IoT Device Service metadata and security metadata.
     * @param ifMatch ETag of the Windows IoT Device Service. Do not specify for creating a brand new Windows IoT Device
     *     Service. Required to update an existing Windows IoT Device Service.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the description of the Windows IoT Device Service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<DeviceServiceInner> updateAsync(
        String resourceGroupName, String deviceName, DeviceServiceInner deviceService, String ifMatch) {
        return updateWithResponseAsync(resourceGroupName, deviceName, deviceService, ifMatch)
            .flatMap(
                (Response<DeviceServiceInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Updates the metadata of a Windows IoT Device Service. The usual pattern to modify a property is to retrieve the
     * Windows IoT Device Service metadata and security metadata, and then combine them with the modified values in a
     * new body to update the Windows IoT Device Service.
     *
     * @param resourceGroupName The name of the resource group that contains the Windows IoT Device Service.
     * @param deviceName The name of the Windows IoT Device Service.
     * @param deviceService The Windows IoT Device Service metadata and security metadata.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the description of the Windows IoT Device Service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<DeviceServiceInner> updateAsync(
        String resourceGroupName, String deviceName, DeviceServiceInner deviceService) {
        final String ifMatch = null;
        return updateWithResponseAsync(resourceGroupName, deviceName, deviceService, ifMatch)
            .flatMap(
                (Response<DeviceServiceInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Updates the metadata of a Windows IoT Device Service. The usual pattern to modify a property is to retrieve the
     * Windows IoT Device Service metadata and security metadata, and then combine them with the modified values in a
     * new body to update the Windows IoT Device Service.
     *
     * @param resourceGroupName The name of the resource group that contains the Windows IoT Device Service.
     * @param deviceName The name of the Windows IoT Device Service.
     * @param deviceService The Windows IoT Device Service metadata and security metadata.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the description of the Windows IoT Device Service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DeviceServiceInner update(String resourceGroupName, String deviceName, DeviceServiceInner deviceService) {
        final String ifMatch = null;
        return updateAsync(resourceGroupName, deviceName, deviceService, ifMatch).block();
    }

    /**
     * Updates the metadata of a Windows IoT Device Service. The usual pattern to modify a property is to retrieve the
     * Windows IoT Device Service metadata and security metadata, and then combine them with the modified values in a
     * new body to update the Windows IoT Device Service.
     *
     * @param resourceGroupName The name of the resource group that contains the Windows IoT Device Service.
     * @param deviceName The name of the Windows IoT Device Service.
     * @param deviceService The Windows IoT Device Service metadata and security metadata.
     * @param ifMatch ETag of the Windows IoT Device Service. Do not specify for creating a brand new Windows IoT Device
     *     Service. Required to update an existing Windows IoT Device Service.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the description of the Windows IoT Device Service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<DeviceServiceInner> updateWithResponse(
        String resourceGroupName,
        String deviceName,
        DeviceServiceInner deviceService,
        String ifMatch,
        Context context) {
        return updateWithResponseAsync(resourceGroupName, deviceName, deviceService, ifMatch, context).block();
    }

    /**
     * Delete a Windows IoT Device Service.
     *
     * @param resourceGroupName The name of the resource group that contains the Windows IoT Device Service.
     * @param deviceName The name of the Windows IoT Device Service.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the description of the Windows IoT Device Service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<DeviceServiceInner>> deleteWithResponseAsync(String resourceGroupName, String deviceName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (deviceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter deviceName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .delete(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            deviceName,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Delete a Windows IoT Device Service.
     *
     * @param resourceGroupName The name of the resource group that contains the Windows IoT Device Service.
     * @param deviceName The name of the Windows IoT Device Service.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the description of the Windows IoT Device Service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<DeviceServiceInner>> deleteWithResponseAsync(
        String resourceGroupName, String deviceName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (deviceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter deviceName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .delete(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                deviceName,
                accept,
                context);
    }

    /**
     * Delete a Windows IoT Device Service.
     *
     * @param resourceGroupName The name of the resource group that contains the Windows IoT Device Service.
     * @param deviceName The name of the Windows IoT Device Service.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the description of the Windows IoT Device Service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<DeviceServiceInner> deleteAsync(String resourceGroupName, String deviceName) {
        return deleteWithResponseAsync(resourceGroupName, deviceName)
            .flatMap(
                (Response<DeviceServiceInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Delete a Windows IoT Device Service.
     *
     * @param resourceGroupName The name of the resource group that contains the Windows IoT Device Service.
     * @param deviceName The name of the Windows IoT Device Service.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the description of the Windows IoT Device Service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DeviceServiceInner delete(String resourceGroupName, String deviceName) {
        return deleteAsync(resourceGroupName, deviceName).block();
    }

    /**
     * Delete a Windows IoT Device Service.
     *
     * @param resourceGroupName The name of the resource group that contains the Windows IoT Device Service.
     * @param deviceName The name of the Windows IoT Device Service.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the description of the Windows IoT Device Service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<DeviceServiceInner> deleteWithResponse(
        String resourceGroupName, String deviceName, Context context) {
        return deleteWithResponseAsync(resourceGroupName, deviceName, context).block();
    }

    /**
     * Get all the IoT hubs in a resource group.
     *
     * @param resourceGroupName The name of the resource group that contains the Windows IoT Device Service.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all the IoT hubs in a resource group.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<DeviceServiceInner>> listByResourceGroupSinglePageAsync(String resourceGroupName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .listByResourceGroup(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            accept,
                            context))
            .<PagedResponse<DeviceServiceInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get all the IoT hubs in a resource group.
     *
     * @param resourceGroupName The name of the resource group that contains the Windows IoT Device Service.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all the IoT hubs in a resource group.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<DeviceServiceInner>> listByResourceGroupSinglePageAsync(
        String resourceGroupName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listByResourceGroup(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Get all the IoT hubs in a resource group.
     *
     * @param resourceGroupName The name of the resource group that contains the Windows IoT Device Service.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all the IoT hubs in a resource group.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<DeviceServiceInner> listByResourceGroupAsync(String resourceGroupName) {
        return new PagedFlux<>(
            () -> listByResourceGroupSinglePageAsync(resourceGroupName),
            nextLink -> listByResourceGroupNextSinglePageAsync(nextLink));
    }

    /**
     * Get all the IoT hubs in a resource group.
     *
     * @param resourceGroupName The name of the resource group that contains the Windows IoT Device Service.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all the IoT hubs in a resource group.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<DeviceServiceInner> listByResourceGroupAsync(String resourceGroupName, Context context) {
        return new PagedFlux<>(
            () -> listByResourceGroupSinglePageAsync(resourceGroupName, context),
            nextLink -> listByResourceGroupNextSinglePageAsync(nextLink, context));
    }

    /**
     * Get all the IoT hubs in a resource group.
     *
     * @param resourceGroupName The name of the resource group that contains the Windows IoT Device Service.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all the IoT hubs in a resource group.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DeviceServiceInner> listByResourceGroup(String resourceGroupName) {
        return new PagedIterable<>(listByResourceGroupAsync(resourceGroupName));
    }

    /**
     * Get all the IoT hubs in a resource group.
     *
     * @param resourceGroupName The name of the resource group that contains the Windows IoT Device Service.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all the IoT hubs in a resource group.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DeviceServiceInner> listByResourceGroup(String resourceGroupName, Context context) {
        return new PagedIterable<>(listByResourceGroupAsync(resourceGroupName, context));
    }

    /**
     * Get all the IoT hubs in a subscription.
     *
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all the IoT hubs in a subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<DeviceServiceInner>> listSinglePageAsync() {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .list(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            accept,
                            context))
            .<PagedResponse<DeviceServiceInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get all the IoT hubs in a subscription.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all the IoT hubs in a subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<DeviceServiceInner>> listSinglePageAsync(Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .list(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Get all the IoT hubs in a subscription.
     *
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all the IoT hubs in a subscription.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<DeviceServiceInner> listAsync() {
        return new PagedFlux<>(() -> listSinglePageAsync(), nextLink -> listNextSinglePageAsync(nextLink));
    }

    /**
     * Get all the IoT hubs in a subscription.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all the IoT hubs in a subscription.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<DeviceServiceInner> listAsync(Context context) {
        return new PagedFlux<>(
            () -> listSinglePageAsync(context), nextLink -> listNextSinglePageAsync(nextLink, context));
    }

    /**
     * Get all the IoT hubs in a subscription.
     *
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all the IoT hubs in a subscription.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DeviceServiceInner> list() {
        return new PagedIterable<>(listAsync());
    }

    /**
     * Get all the IoT hubs in a subscription.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all the IoT hubs in a subscription.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DeviceServiceInner> list(Context context) {
        return new PagedIterable<>(listAsync(context));
    }

    /**
     * Check if a Windows IoT Device Service name is available.
     *
     * @param deviceServiceCheckNameAvailabilityParameters Set the name parameter in the
     *     DeviceServiceCheckNameAvailabilityParameters structure to the name of the Windows IoT Device Service to
     *     check.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the properties indicating whether a given Windows IoT Device Service name is available.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<DeviceServiceNameAvailabilityInfoInner>> checkDeviceServiceNameAvailabilityWithResponseAsync(
        DeviceServiceCheckNameAvailabilityParameters deviceServiceCheckNameAvailabilityParameters) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (deviceServiceCheckNameAvailabilityParameters == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter deviceServiceCheckNameAvailabilityParameters is required and cannot be null."));
        } else {
            deviceServiceCheckNameAvailabilityParameters.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .checkDeviceServiceNameAvailability(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            deviceServiceCheckNameAvailabilityParameters,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Check if a Windows IoT Device Service name is available.
     *
     * @param deviceServiceCheckNameAvailabilityParameters Set the name parameter in the
     *     DeviceServiceCheckNameAvailabilityParameters structure to the name of the Windows IoT Device Service to
     *     check.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the properties indicating whether a given Windows IoT Device Service name is available.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<DeviceServiceNameAvailabilityInfoInner>> checkDeviceServiceNameAvailabilityWithResponseAsync(
        DeviceServiceCheckNameAvailabilityParameters deviceServiceCheckNameAvailabilityParameters, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (deviceServiceCheckNameAvailabilityParameters == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter deviceServiceCheckNameAvailabilityParameters is required and cannot be null."));
        } else {
            deviceServiceCheckNameAvailabilityParameters.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .checkDeviceServiceNameAvailability(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                deviceServiceCheckNameAvailabilityParameters,
                accept,
                context);
    }

    /**
     * Check if a Windows IoT Device Service name is available.
     *
     * @param deviceServiceCheckNameAvailabilityParameters Set the name parameter in the
     *     DeviceServiceCheckNameAvailabilityParameters structure to the name of the Windows IoT Device Service to
     *     check.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the properties indicating whether a given Windows IoT Device Service name is available.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<DeviceServiceNameAvailabilityInfoInner> checkDeviceServiceNameAvailabilityAsync(
        DeviceServiceCheckNameAvailabilityParameters deviceServiceCheckNameAvailabilityParameters) {
        return checkDeviceServiceNameAvailabilityWithResponseAsync(deviceServiceCheckNameAvailabilityParameters)
            .flatMap(
                (Response<DeviceServiceNameAvailabilityInfoInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Check if a Windows IoT Device Service name is available.
     *
     * @param deviceServiceCheckNameAvailabilityParameters Set the name parameter in the
     *     DeviceServiceCheckNameAvailabilityParameters structure to the name of the Windows IoT Device Service to
     *     check.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the properties indicating whether a given Windows IoT Device Service name is available.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DeviceServiceNameAvailabilityInfoInner checkDeviceServiceNameAvailability(
        DeviceServiceCheckNameAvailabilityParameters deviceServiceCheckNameAvailabilityParameters) {
        return checkDeviceServiceNameAvailabilityAsync(deviceServiceCheckNameAvailabilityParameters).block();
    }

    /**
     * Check if a Windows IoT Device Service name is available.
     *
     * @param deviceServiceCheckNameAvailabilityParameters Set the name parameter in the
     *     DeviceServiceCheckNameAvailabilityParameters structure to the name of the Windows IoT Device Service to
     *     check.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the properties indicating whether a given Windows IoT Device Service name is available.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<DeviceServiceNameAvailabilityInfoInner> checkDeviceServiceNameAvailabilityWithResponse(
        DeviceServiceCheckNameAvailabilityParameters deviceServiceCheckNameAvailabilityParameters, Context context) {
        return checkDeviceServiceNameAvailabilityWithResponseAsync(
                deviceServiceCheckNameAvailabilityParameters, context)
            .block();
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the JSON-serialized array of DeviceService objects with a next link.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<DeviceServiceInner>> listByResourceGroupNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.listByResourceGroupNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<DeviceServiceInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the JSON-serialized array of DeviceService objects with a next link.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<DeviceServiceInner>> listByResourceGroupNextSinglePageAsync(
        String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listByResourceGroupNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the JSON-serialized array of DeviceService objects with a next link.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<DeviceServiceInner>> listNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<DeviceServiceInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the JSON-serialized array of DeviceService objects with a next link.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<DeviceServiceInner>> listNextSinglePageAsync(String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }
}
