// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.windowsiot.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.windowsiot.WindowsiotManager;
import com.azure.resourcemanager.windowsiot.fluent.ServicesClient;
import com.azure.resourcemanager.windowsiot.fluent.models.DeviceServiceInner;
import com.azure.resourcemanager.windowsiot.fluent.models.DeviceServiceNameAvailabilityInfoInner;
import com.azure.resourcemanager.windowsiot.models.DeviceService;
import com.azure.resourcemanager.windowsiot.models.DeviceServiceCheckNameAvailabilityParameters;
import com.azure.resourcemanager.windowsiot.models.DeviceServiceNameAvailabilityInfo;
import com.azure.resourcemanager.windowsiot.models.Services;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class ServicesImpl implements Services {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(ServicesImpl.class);

    private final ServicesClient innerClient;

    private final WindowsiotManager serviceManager;

    public ServicesImpl(ServicesClient innerClient, WindowsiotManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public DeviceService getByResourceGroup(String resourceGroupName, String deviceName) {
        DeviceServiceInner inner = this.serviceClient().getByResourceGroup(resourceGroupName, deviceName);
        if (inner != null) {
            return new DeviceServiceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<DeviceService> getByResourceGroupWithResponse(
        String resourceGroupName, String deviceName, Context context) {
        Response<DeviceServiceInner> inner =
            this.serviceClient().getByResourceGroupWithResponse(resourceGroupName, deviceName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new DeviceServiceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public DeviceService deleteByResourceGroup(String resourceGroupName, String deviceName) {
        DeviceServiceInner inner = this.serviceClient().delete(resourceGroupName, deviceName);
        if (inner != null) {
            return new DeviceServiceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<DeviceService> deleteWithResponse(String resourceGroupName, String deviceName, Context context) {
        Response<DeviceServiceInner> inner =
            this.serviceClient().deleteWithResponse(resourceGroupName, deviceName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new DeviceServiceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PagedIterable<DeviceService> listByResourceGroup(String resourceGroupName) {
        PagedIterable<DeviceServiceInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName);
        return inner.mapPage(inner1 -> new DeviceServiceImpl(inner1, this.manager()));
    }

    public PagedIterable<DeviceService> listByResourceGroup(String resourceGroupName, Context context) {
        PagedIterable<DeviceServiceInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName, context);
        return inner.mapPage(inner1 -> new DeviceServiceImpl(inner1, this.manager()));
    }

    public PagedIterable<DeviceService> list() {
        PagedIterable<DeviceServiceInner> inner = this.serviceClient().list();
        return inner.mapPage(inner1 -> new DeviceServiceImpl(inner1, this.manager()));
    }

    public PagedIterable<DeviceService> list(Context context) {
        PagedIterable<DeviceServiceInner> inner = this.serviceClient().list(context);
        return inner.mapPage(inner1 -> new DeviceServiceImpl(inner1, this.manager()));
    }

    public DeviceServiceNameAvailabilityInfo checkDeviceServiceNameAvailability(
        DeviceServiceCheckNameAvailabilityParameters deviceServiceCheckNameAvailabilityParameters) {
        DeviceServiceNameAvailabilityInfoInner inner =
            this.serviceClient().checkDeviceServiceNameAvailability(deviceServiceCheckNameAvailabilityParameters);
        if (inner != null) {
            return new DeviceServiceNameAvailabilityInfoImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<DeviceServiceNameAvailabilityInfo> checkDeviceServiceNameAvailabilityWithResponse(
        DeviceServiceCheckNameAvailabilityParameters deviceServiceCheckNameAvailabilityParameters, Context context) {
        Response<DeviceServiceNameAvailabilityInfoInner> inner =
            this
                .serviceClient()
                .checkDeviceServiceNameAvailabilityWithResponse(deviceServiceCheckNameAvailabilityParameters, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new DeviceServiceNameAvailabilityInfoImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public DeviceService getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String deviceName = Utils.getValueFromIdByName(id, "deviceServices");
        if (deviceName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'deviceServices'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, deviceName, Context.NONE).getValue();
    }

    public Response<DeviceService> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String deviceName = Utils.getValueFromIdByName(id, "deviceServices");
        if (deviceName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'deviceServices'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, deviceName, context);
    }

    public DeviceService deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String deviceName = Utils.getValueFromIdByName(id, "deviceServices");
        if (deviceName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'deviceServices'.", id)));
        }
        return this.deleteWithResponse(resourceGroupName, deviceName, Context.NONE).getValue();
    }

    public Response<DeviceService> deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String deviceName = Utils.getValueFromIdByName(id, "deviceServices");
        if (deviceName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'deviceServices'.", id)));
        }
        return this.deleteWithResponse(resourceGroupName, deviceName, context);
    }

    private ServicesClient serviceClient() {
        return this.innerClient;
    }

    private WindowsiotManager manager() {
        return this.serviceManager;
    }

    public DeviceServiceImpl define(String name) {
        return new DeviceServiceImpl(name, this.manager());
    }
}
