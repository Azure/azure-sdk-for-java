// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.windowsiot.implementation;

import com.azure.core.management.Region;
import com.azure.core.util.Context;
import com.azure.resourcemanager.windowsiot.fluent.models.DeviceServiceInner;
import com.azure.resourcemanager.windowsiot.models.DeviceService;
import java.time.OffsetDateTime;
import java.util.Collections;
import java.util.Map;

public final class DeviceServiceImpl implements DeviceService, DeviceService.Definition, DeviceService.Update {
    private DeviceServiceInner innerObject;

    private final com.azure.resourcemanager.windowsiot.WindowsiotManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public String etag() {
        return this.innerModel().etag();
    }

    public String notes() {
        return this.innerModel().notes();
    }

    public OffsetDateTime startDate() {
        return this.innerModel().startDate();
    }

    public Long quantity() {
        return this.innerModel().quantity();
    }

    public String billingDomainName() {
        return this.innerModel().billingDomainName();
    }

    public String adminDomainName() {
        return this.innerModel().adminDomainName();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public DeviceServiceInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.windowsiot.WindowsiotManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String deviceName;

    private String createIfMatch;

    private String updateIfMatch;

    public DeviceServiceImpl withExistingResourceGroup(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public DeviceService create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getServices()
                .createOrUpdateWithResponse(
                    resourceGroupName, deviceName, this.innerModel(), createIfMatch, Context.NONE)
                .getValue();
        return this;
    }

    public DeviceService create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getServices()
                .createOrUpdateWithResponse(resourceGroupName, deviceName, this.innerModel(), createIfMatch, context)
                .getValue();
        return this;
    }

    DeviceServiceImpl(String name, com.azure.resourcemanager.windowsiot.WindowsiotManager serviceManager) {
        this.innerObject = new DeviceServiceInner();
        this.serviceManager = serviceManager;
        this.deviceName = name;
        this.createIfMatch = null;
    }

    public DeviceServiceImpl update() {
        this.updateIfMatch = null;
        return this;
    }

    public DeviceService apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getServices()
                .updateWithResponse(resourceGroupName, deviceName, this.innerModel(), updateIfMatch, Context.NONE)
                .getValue();
        return this;
    }

    public DeviceService apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getServices()
                .updateWithResponse(resourceGroupName, deviceName, this.innerModel(), updateIfMatch, context)
                .getValue();
        return this;
    }

    DeviceServiceImpl(
        DeviceServiceInner innerObject, com.azure.resourcemanager.windowsiot.WindowsiotManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.deviceName = Utils.getValueFromIdByName(innerObject.id(), "deviceServices");
    }

    public DeviceService refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getServices()
                .getByResourceGroupWithResponse(resourceGroupName, deviceName, Context.NONE)
                .getValue();
        return this;
    }

    public DeviceService refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getServices()
                .getByResourceGroupWithResponse(resourceGroupName, deviceName, context)
                .getValue();
        return this;
    }

    public DeviceServiceImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public DeviceServiceImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public DeviceServiceImpl withTags(Map<String, String> tags) {
        this.innerModel().withTags(tags);
        return this;
    }

    public DeviceServiceImpl withEtag(String etag) {
        this.innerModel().withEtag(etag);
        return this;
    }

    public DeviceServiceImpl withNotes(String notes) {
        this.innerModel().withNotes(notes);
        return this;
    }

    public DeviceServiceImpl withQuantity(Long quantity) {
        this.innerModel().withQuantity(quantity);
        return this;
    }

    public DeviceServiceImpl withBillingDomainName(String billingDomainName) {
        this.innerModel().withBillingDomainName(billingDomainName);
        return this;
    }

    public DeviceServiceImpl withAdminDomainName(String adminDomainName) {
        this.innerModel().withAdminDomainName(adminDomainName);
        return this;
    }

    public DeviceServiceImpl withIfMatch(String ifMatch) {
        if (isInCreateMode()) {
            this.createIfMatch = ifMatch;
            return this;
        } else {
            this.updateIfMatch = ifMatch;
            return this;
        }
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
