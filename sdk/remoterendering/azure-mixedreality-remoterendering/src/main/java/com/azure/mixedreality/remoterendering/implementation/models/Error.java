// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.mixedreality.remoterendering.implementation.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * The error object containing details of why the request failed.
 */
@Immutable
public final class Error implements JsonSerializable<Error> {
    /*
     * Error code.
     */
    private final String code;

    /*
     * A human-readable representation of the error.
     */
    private final String message;

    /*
     * An array of details about specific errors that led to this reported error.
     */
    private List<Error> details;

    /*
     * The target of the particular error (e.g., the name of the property in error).
     */
    private String target;

    /*
     * An object containing more specific information than the current object about the error.
     */
    private Error innerError;

    /**
     * Creates an instance of Error class.
     * 
     * @param code the code value to set.
     * @param message the message value to set.
     */
    public Error(String code, String message) {
        this.code = code;
        this.message = message;
    }

    /**
     * Get the code property: Error code.
     * 
     * @return the code value.
     */
    public String getCode() {
        return this.code;
    }

    /**
     * Get the message property: A human-readable representation of the error.
     * 
     * @return the message value.
     */
    public String getMessage() {
        return this.message;
    }

    /**
     * Get the details property: An array of details about specific errors that led to this reported error.
     * 
     * @return the details value.
     */
    public List<Error> getDetails() {
        return this.details;
    }

    /**
     * Get the target property: The target of the particular error (e.g., the name of the property in error).
     * 
     * @return the target value.
     */
    public String getTarget() {
        return this.target;
    }

    /**
     * Get the innerError property: An object containing more specific information than the current object about the
     * error.
     * 
     * @return the innerError value.
     */
    public Error getInnerError() {
        return this.innerError;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("code", this.code);
        jsonWriter.writeStringField("message", this.message);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Error from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Error if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the Error.
     */
    public static Error fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            boolean codeFound = false;
            String code = null;
            boolean messageFound = false;
            String message = null;
            List<Error> details = null;
            String target = null;
            Error innerError = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("code".equals(fieldName)) {
                    code = reader.getString();
                    codeFound = true;
                } else if ("message".equals(fieldName)) {
                    message = reader.getString();
                    messageFound = true;
                } else if ("details".equals(fieldName)) {
                    details = reader.readArray(reader1 -> Error.fromJson(reader1));
                } else if ("target".equals(fieldName)) {
                    target = reader.getString();
                } else if ("innerError".equals(fieldName)) {
                    innerError = Error.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            if (codeFound && messageFound) {
                Error deserializedError = new Error(code, message);
                deserializedError.details = details;
                deserializedError.target = target;
                deserializedError.innerError = innerError;

                return deserializedError;
            }
            List<String> missingProperties = new ArrayList<>();
            if (!codeFound) {
                missingProperties.add("code");
            }
            if (!messageFound) {
                missingProperties.add("message");
            }

            throw new IllegalStateException(
                "Missing required property/properties: " + String.join(", ", missingProperties));
        });
    }
}
