// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

package com.azure.resourcemanager.voiceservices;

import com.azure.core.credential.TokenCredential;
import com.azure.core.http.policy.HttpLogDetailLevel;
import com.azure.core.http.policy.HttpLogOptions;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.Region;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.TestBase;
import com.azure.core.test.annotation.DoNotRecord;
import com.azure.core.util.Configuration;
import com.azure.core.util.CoreUtils;
import com.azure.identity.DefaultAzureCredentialBuilder;
import com.azure.resourcemanager.resources.ResourceManager;
import com.azure.resourcemanager.voiceservices.models.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

import java.util.Arrays;
import java.util.Random;

public class VoiceServicesManagerTests extends TestBase {
    private static final Random RANDOM = new Random();
    private static final Region REGION = Region.US_EAST2;
    private String resourceGroupName = "rg" + randomPadding();
    private VoiceServicesManager voiceServicesManager;
    private ResourceManager resourceManager;
    private boolean testEnv;

    @Override
    public void beforeTest() {
        final TokenCredential credential = new DefaultAzureCredentialBuilder().build();
        final AzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);

        voiceServicesManager = VoiceServicesManager
            .configure()
            .withLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC))
            .authenticate(credential, profile);

        resourceManager = ResourceManager
            .configure()
            .withLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC))
            .authenticate(credential, profile)
            .withDefaultSubscription();

        // use AZURE_RESOURCE_GROUP_NAME if run in LIVE CI
        String testResourceGroup = Configuration.getGlobalConfiguration().get("AZURE_RESOURCE_GROUP_NAME");
        testEnv = !CoreUtils.isNullOrEmpty(testResourceGroup);
        if (testEnv) {
            resourceGroupName = testResourceGroup;
        } else {
            resourceManager.resourceGroups()
                .define(resourceGroupName)
                .withRegion(REGION)
                .create();
        }
    }

    @Override
    protected void afterTest() {
        if (!testEnv) {
            resourceManager.resourceGroups().beginDeleteByName(resourceGroupName);
        }
    }

    @Test
    @DoNotRecord(skipInPlayback = true)
    public void testCreateCommunicationsGateway() {
        CommunicationsGateway communicationsGateway = null;
        try {
            String gatewayName = "gate" + randomPadding();
            // @embedmeStart
            communicationsGateway = voiceServicesManager
                .communicationsGateways()
                .define(gatewayName)
                .withRegion(REGION)
                .withExistingResourceGroup(resourceGroupName)
                .withServiceLocations(
                    Arrays.asList(
                        new ServiceRegionProperties()
                            .withName(Region.US_WEST2.name())
                            .withPrimaryRegionProperties(
                                new PrimaryRegionProperties()
                                    .withOperatorAddresses(Arrays.asList("198.51.100.1"))
                                    .withAllowedSignalingSourceAddressPrefixes(Arrays.asList("10.1.1.0/24"))
                                    .withAllowedMediaSourceAddressPrefixes(Arrays.asList("10.1.2.0/24"))),
                        new ServiceRegionProperties()
                            .withName(Region.US_WEST3.name())
                            .withPrimaryRegionProperties(
                                new PrimaryRegionProperties()
                                    .withOperatorAddresses(Arrays.asList("198.51.100.2"))
                                    .withAllowedSignalingSourceAddressPrefixes(Arrays.asList("10.2.1.0/24"))
                                    .withAllowedMediaSourceAddressPrefixes(Arrays.asList("10.2.2.0/24")))))
                .withConnectivity(Connectivity.PUBLIC_ADDRESS)
                .withCodecs(Arrays.asList(TeamsCodecs.PCMA))
                .withPlatforms(Arrays.asList(CommunicationsPlatform.OPERATOR_CONNECT))
                .withAutoGeneratedDomainNameLabelScope(AutoGeneratedDomainNameLabelScope.NO_REUSE)
                .withE911Type(E911Type.STANDARD)
                .create();
            // @embedmeEnd
            communicationsGateway.refresh();
            Assertions.assertEquals(communicationsGateway.name(), gatewayName);
            Assertions.assertEquals(communicationsGateway.name(),
                voiceServicesManager.communicationsGateways().getById(communicationsGateway.id()).name());
            Assertions.assertTrue(voiceServicesManager.communicationsGateways().list().stream().count() > 0);
        } finally {
            if (communicationsGateway != null) {
                voiceServicesManager.communicationsGateways().deleteById(communicationsGateway.id());
            }
        }
    }

    private static String randomPadding() {
        return String.format("%05d", Math.abs(RANDOM.nextInt() % 100000));
    }
}
