// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.voiceservices.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.voiceservices.fluent.models.TestLineInner;
import com.azure.resourcemanager.voiceservices.models.TestLineListResult;
import com.azure.resourcemanager.voiceservices.models.TestLinePurpose;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class TestLineListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        TestLineListResult model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"provisioningState\":\"Failed\",\"phoneNumber\":\"smodmgloug\",\"purpose\":\"Manual\"},\"location\":\"wtmutduq\",\"tags\":{\"kdosvqw\":\"pspwgcuertu\"},\"id\":\"bmdg\",\"name\":\"bjf\",\"type\":\"dgmb\"},{\"properties\":{\"provisioningState\":\"Canceled\",\"phoneNumber\":\"ppbhtqqrolfp\",\"purpose\":\"Automated\"},\"location\":\"algbquxigjyjg\",\"tags\":{\"fhrtxilnerkujysv\":\"o\",\"fqawrlyxw\":\"eju\",\"xgjvtbv\":\"kcprbnw\",\"uouq\":\"ysszdnrujqguh\"},\"id\":\"prwzwbnguitnwui\",\"name\":\"gazxuf\",\"type\":\"zuckyfi\"}],\"nextLink\":\"fidfvzw\"}")
            .toObject(TestLineListResult.class);
        Assertions.assertEquals("wtmutduq", model.value().get(0).location());
        Assertions.assertEquals("pspwgcuertu", model.value().get(0).tags().get("kdosvqw"));
        Assertions.assertEquals("smodmgloug", model.value().get(0).phoneNumber());
        Assertions.assertEquals(TestLinePurpose.MANUAL, model.value().get(0).purpose());
        Assertions.assertEquals("fidfvzw", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        TestLineListResult model = new TestLineListResult().withValue(Arrays.asList(
            new TestLineInner().withLocation("wtmutduq")
                .withTags(mapOf("kdosvqw", "pspwgcuertu"))
                .withPhoneNumber("smodmgloug")
                .withPurpose(TestLinePurpose.MANUAL),
            new TestLineInner().withLocation("algbquxigjyjg")
                .withTags(
                    mapOf("fhrtxilnerkujysv", "o", "fqawrlyxw", "eju", "xgjvtbv", "kcprbnw", "uouq", "ysszdnrujqguh"))
                .withPhoneNumber("ppbhtqqrolfp")
                .withPurpose(TestLinePurpose.AUTOMATED)))
            .withNextLink("fidfvzw");
        model = BinaryData.fromObject(model).toObject(TestLineListResult.class);
        Assertions.assertEquals("wtmutduq", model.value().get(0).location());
        Assertions.assertEquals("pspwgcuertu", model.value().get(0).tags().get("kdosvqw"));
        Assertions.assertEquals("smodmgloug", model.value().get(0).phoneNumber());
        Assertions.assertEquals(TestLinePurpose.MANUAL, model.value().get(0).purpose());
        Assertions.assertEquals("fidfvzw", model.nextLink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
