// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.voiceservices.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.voiceservices.VoiceServicesManager;
import com.azure.resourcemanager.voiceservices.models.TestLine;
import com.azure.resourcemanager.voiceservices.models.TestLinePurpose;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class TestLinesCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Succeeded\",\"phoneNumber\":\"dbabp\",\"purpose\":\"Manual\"},\"location\":\"rqlfktsthsucocmn\",\"tags\":{\"bt\":\"zt\"},\"id\":\"wrqpue\",\"name\":\"ckzywbiexzfeyue\",\"type\":\"xibxujwbhqwalm\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        VoiceServicesManager manager = VoiceServicesManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        TestLine response = manager.testLines()
            .define("bfs")
            .withRegion("azzmhjrunmpxt")
            .withExistingCommunicationsGateway("rgvtqag", "buynhijggm")
            .withTags(mapOf("nbtkcxywnytnr", "hrbnlankxmyskpbh"))
            .withPhoneNumber("utrc")
            .withPurpose(TestLinePurpose.MANUAL)
            .create();

        Assertions.assertEquals("rqlfktsthsucocmn", response.location());
        Assertions.assertEquals("zt", response.tags().get("bt"));
        Assertions.assertEquals("dbabp", response.phoneNumber());
        Assertions.assertEquals(TestLinePurpose.MANUAL, response.purpose());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
