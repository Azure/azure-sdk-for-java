// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.voiceservices.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.voiceservices.models.ProvisioningState;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Details of the Contact resource. */
@Fluent
public final class ContactProperties {
    /*
     * Resource provisioning state.
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private ProvisioningState provisioningState;

    /*
     * Full name of contact
     */
    @JsonProperty(value = "contactName", required = true)
    private String contactName;

    /*
     * Telephone number of contact
     */
    @JsonProperty(value = "phoneNumber", required = true)
    private String phoneNumber;

    /*
     * Email address of contact
     */
    @JsonProperty(value = "email", required = true)
    private String email;

    /*
     * Job title of contact
     */
    @JsonProperty(value = "role", required = true)
    private String role;

    /** Creates an instance of ContactProperties class. */
    public ContactProperties() {
    }

    /**
     * Get the provisioningState property: Resource provisioning state.
     *
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the contactName property: Full name of contact.
     *
     * @return the contactName value.
     */
    public String contactName() {
        return this.contactName;
    }

    /**
     * Set the contactName property: Full name of contact.
     *
     * @param contactName the contactName value to set.
     * @return the ContactProperties object itself.
     */
    public ContactProperties withContactName(String contactName) {
        this.contactName = contactName;
        return this;
    }

    /**
     * Get the phoneNumber property: Telephone number of contact.
     *
     * @return the phoneNumber value.
     */
    public String phoneNumber() {
        return this.phoneNumber;
    }

    /**
     * Set the phoneNumber property: Telephone number of contact.
     *
     * @param phoneNumber the phoneNumber value to set.
     * @return the ContactProperties object itself.
     */
    public ContactProperties withPhoneNumber(String phoneNumber) {
        this.phoneNumber = phoneNumber;
        return this;
    }

    /**
     * Get the email property: Email address of contact.
     *
     * @return the email value.
     */
    public String email() {
        return this.email;
    }

    /**
     * Set the email property: Email address of contact.
     *
     * @param email the email value to set.
     * @return the ContactProperties object itself.
     */
    public ContactProperties withEmail(String email) {
        this.email = email;
        return this;
    }

    /**
     * Get the role property: Job title of contact.
     *
     * @return the role value.
     */
    public String role() {
        return this.role;
    }

    /**
     * Set the role property: Job title of contact.
     *
     * @param role the role value to set.
     * @return the ContactProperties object itself.
     */
    public ContactProperties withRole(String role) {
        this.role = role;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (contactName() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property contactName in model ContactProperties"));
        }
        if (phoneNumber() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property phoneNumber in model ContactProperties"));
        }
        if (email() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property email in model ContactProperties"));
        }
        if (role() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property role in model ContactProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ContactProperties.class);
}
