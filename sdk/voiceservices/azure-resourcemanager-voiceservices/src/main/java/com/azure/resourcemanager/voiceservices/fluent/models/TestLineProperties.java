// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.voiceservices.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.voiceservices.models.ProvisioningState;
import com.azure.resourcemanager.voiceservices.models.TestLinePurpose;
import java.io.IOException;

/**
 * Details of the TestLine resource.
 */
@Fluent
public final class TestLineProperties implements JsonSerializable<TestLineProperties> {
    /*
     * Resource provisioning state.
     */
    private ProvisioningState provisioningState;

    /*
     * The phone number
     */
    private String phoneNumber;

    /*
     * Purpose of this test line, e.g. automated or manual testing
     */
    private TestLinePurpose purpose;

    /**
     * Creates an instance of TestLineProperties class.
     */
    public TestLineProperties() {
    }

    /**
     * Get the provisioningState property: Resource provisioning state.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the phoneNumber property: The phone number.
     * 
     * @return the phoneNumber value.
     */
    public String phoneNumber() {
        return this.phoneNumber;
    }

    /**
     * Set the phoneNumber property: The phone number.
     * 
     * @param phoneNumber the phoneNumber value to set.
     * @return the TestLineProperties object itself.
     */
    public TestLineProperties withPhoneNumber(String phoneNumber) {
        this.phoneNumber = phoneNumber;
        return this;
    }

    /**
     * Get the purpose property: Purpose of this test line, e.g. automated or manual testing.
     * 
     * @return the purpose value.
     */
    public TestLinePurpose purpose() {
        return this.purpose;
    }

    /**
     * Set the purpose property: Purpose of this test line, e.g. automated or manual testing.
     * 
     * @param purpose the purpose value to set.
     * @return the TestLineProperties object itself.
     */
    public TestLineProperties withPurpose(TestLinePurpose purpose) {
        this.purpose = purpose;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (phoneNumber() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property phoneNumber in model TestLineProperties"));
        }
        if (purpose() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property purpose in model TestLineProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(TestLineProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("phoneNumber", this.phoneNumber);
        jsonWriter.writeStringField("purpose", this.purpose == null ? null : this.purpose.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TestLineProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TestLineProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the TestLineProperties.
     */
    public static TestLineProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TestLineProperties deserializedTestLineProperties = new TestLineProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("phoneNumber".equals(fieldName)) {
                    deserializedTestLineProperties.phoneNumber = reader.getString();
                } else if ("purpose".equals(fieldName)) {
                    deserializedTestLineProperties.purpose = TestLinePurpose.fromString(reader.getString());
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedTestLineProperties.provisioningState = ProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTestLineProperties;
        });
    }
}
