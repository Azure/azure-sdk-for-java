// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.voiceservices.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.Resource;
import com.azure.core.management.SystemData;
import com.azure.resourcemanager.voiceservices.models.ProvisioningState;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.Map;

/** A Contact resource. */
@Fluent
public final class ContactInner extends Resource {
    /*
     * The resource-specific properties for this resource.
     */
    @JsonProperty(value = "properties")
    private ContactProperties innerProperties;

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    @JsonProperty(value = "systemData", access = JsonProperty.Access.WRITE_ONLY)
    private SystemData systemData;

    /** Creates an instance of ContactInner class. */
    public ContactInner() {
    }

    /**
     * Get the innerProperties property: The resource-specific properties for this resource.
     *
     * @return the innerProperties value.
     */
    private ContactProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     *
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /** {@inheritDoc} */
    @Override
    public ContactInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public ContactInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Get the provisioningState property: Resource provisioning state.
     *
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Get the contactName property: Full name of contact.
     *
     * @return the contactName value.
     */
    public String contactName() {
        return this.innerProperties() == null ? null : this.innerProperties().contactName();
    }

    /**
     * Set the contactName property: Full name of contact.
     *
     * @param contactName the contactName value to set.
     * @return the ContactInner object itself.
     */
    public ContactInner withContactName(String contactName) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ContactProperties();
        }
        this.innerProperties().withContactName(contactName);
        return this;
    }

    /**
     * Get the phoneNumber property: Telephone number of contact.
     *
     * @return the phoneNumber value.
     */
    public String phoneNumber() {
        return this.innerProperties() == null ? null : this.innerProperties().phoneNumber();
    }

    /**
     * Set the phoneNumber property: Telephone number of contact.
     *
     * @param phoneNumber the phoneNumber value to set.
     * @return the ContactInner object itself.
     */
    public ContactInner withPhoneNumber(String phoneNumber) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ContactProperties();
        }
        this.innerProperties().withPhoneNumber(phoneNumber);
        return this;
    }

    /**
     * Get the email property: Email address of contact.
     *
     * @return the email value.
     */
    public String email() {
        return this.innerProperties() == null ? null : this.innerProperties().email();
    }

    /**
     * Set the email property: Email address of contact.
     *
     * @param email the email value to set.
     * @return the ContactInner object itself.
     */
    public ContactInner withEmail(String email) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ContactProperties();
        }
        this.innerProperties().withEmail(email);
        return this;
    }

    /**
     * Get the role property: Job title of contact.
     *
     * @return the role value.
     */
    public String role() {
        return this.innerProperties() == null ? null : this.innerProperties().role();
    }

    /**
     * Set the role property: Job title of contact.
     *
     * @param role the role value to set.
     * @return the ContactInner object itself.
     */
    public ContactInner withRole(String role) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ContactProperties();
        }
        this.innerProperties().withRole(role);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }
}
