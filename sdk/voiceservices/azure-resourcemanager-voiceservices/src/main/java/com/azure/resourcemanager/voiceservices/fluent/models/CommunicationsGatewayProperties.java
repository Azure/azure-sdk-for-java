// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.voiceservices.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.voiceservices.models.AutoGeneratedDomainNameLabelScope;
import com.azure.resourcemanager.voiceservices.models.CommunicationsPlatform;
import com.azure.resourcemanager.voiceservices.models.Connectivity;
import com.azure.resourcemanager.voiceservices.models.E911Type;
import com.azure.resourcemanager.voiceservices.models.ProvisioningState;
import com.azure.resourcemanager.voiceservices.models.ServiceRegionProperties;
import com.azure.resourcemanager.voiceservices.models.Status;
import com.azure.resourcemanager.voiceservices.models.TeamsCodecs;
import java.io.IOException;
import java.util.List;

/**
 * Details of the CommunicationsGateway resource.
 */
@Fluent
public final class CommunicationsGatewayProperties implements JsonSerializable<CommunicationsGatewayProperties> {
    /*
     * Resource provisioning state.
     */
    private ProvisioningState provisioningState;

    /*
     * The current status of the deployment.
     */
    private Status status;

    /*
     * The regions in which to deploy the resources needed for Teams Calling
     */
    private List<ServiceRegionProperties> serviceLocations;

    /*
     * How to connect back to the operator network, e.g. MAPS
     */
    private Connectivity connectivity;

    /*
     * Voice codecs to support
     */
    private List<TeamsCodecs> codecs;

    /*
     * How to handle 911 calls
     */
    private E911Type e911Type;

    /*
     * What platforms to support
     */
    private List<CommunicationsPlatform> platforms;

    /*
     * Details of API bridge functionality, if required
     */
    private Object apiBridge;

    /*
     * The scope at which the auto-generated domain name can be re-used
     */
    private AutoGeneratedDomainNameLabelScope autoGeneratedDomainNameLabelScope;

    /*
     * The autogenerated label used as part of the FQDNs for accessing the Communications Gateway
     */
    private String autoGeneratedDomainNameLabel;

    /*
     * This number is used in Teams Phone Mobile scenarios for access to the voicemail IVR from the native dialer.
     */
    private String teamsVoicemailPilotNumber;

    /*
     * Whether an on-premises Mobile Control Point is in use.
     */
    private Boolean onPremMcpEnabled;

    /*
     * A list of dial strings used for emergency calling.
     */
    private List<String> emergencyDialStrings;

    /**
     * Creates an instance of CommunicationsGatewayProperties class.
     */
    public CommunicationsGatewayProperties() {
    }

    /**
     * Get the provisioningState property: Resource provisioning state.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the status property: The current status of the deployment.
     * 
     * @return the status value.
     */
    public Status status() {
        return this.status;
    }

    /**
     * Get the serviceLocations property: The regions in which to deploy the resources needed for Teams Calling.
     * 
     * @return the serviceLocations value.
     */
    public List<ServiceRegionProperties> serviceLocations() {
        return this.serviceLocations;
    }

    /**
     * Set the serviceLocations property: The regions in which to deploy the resources needed for Teams Calling.
     * 
     * @param serviceLocations the serviceLocations value to set.
     * @return the CommunicationsGatewayProperties object itself.
     */
    public CommunicationsGatewayProperties withServiceLocations(List<ServiceRegionProperties> serviceLocations) {
        this.serviceLocations = serviceLocations;
        return this;
    }

    /**
     * Get the connectivity property: How to connect back to the operator network, e.g. MAPS.
     * 
     * @return the connectivity value.
     */
    public Connectivity connectivity() {
        return this.connectivity;
    }

    /**
     * Set the connectivity property: How to connect back to the operator network, e.g. MAPS.
     * 
     * @param connectivity the connectivity value to set.
     * @return the CommunicationsGatewayProperties object itself.
     */
    public CommunicationsGatewayProperties withConnectivity(Connectivity connectivity) {
        this.connectivity = connectivity;
        return this;
    }

    /**
     * Get the codecs property: Voice codecs to support.
     * 
     * @return the codecs value.
     */
    public List<TeamsCodecs> codecs() {
        return this.codecs;
    }

    /**
     * Set the codecs property: Voice codecs to support.
     * 
     * @param codecs the codecs value to set.
     * @return the CommunicationsGatewayProperties object itself.
     */
    public CommunicationsGatewayProperties withCodecs(List<TeamsCodecs> codecs) {
        this.codecs = codecs;
        return this;
    }

    /**
     * Get the e911Type property: How to handle 911 calls.
     * 
     * @return the e911Type value.
     */
    public E911Type e911Type() {
        return this.e911Type;
    }

    /**
     * Set the e911Type property: How to handle 911 calls.
     * 
     * @param e911Type the e911Type value to set.
     * @return the CommunicationsGatewayProperties object itself.
     */
    public CommunicationsGatewayProperties withE911Type(E911Type e911Type) {
        this.e911Type = e911Type;
        return this;
    }

    /**
     * Get the platforms property: What platforms to support.
     * 
     * @return the platforms value.
     */
    public List<CommunicationsPlatform> platforms() {
        return this.platforms;
    }

    /**
     * Set the platforms property: What platforms to support.
     * 
     * @param platforms the platforms value to set.
     * @return the CommunicationsGatewayProperties object itself.
     */
    public CommunicationsGatewayProperties withPlatforms(List<CommunicationsPlatform> platforms) {
        this.platforms = platforms;
        return this;
    }

    /**
     * Get the apiBridge property: Details of API bridge functionality, if required.
     * 
     * @return the apiBridge value.
     */
    public Object apiBridge() {
        return this.apiBridge;
    }

    /**
     * Set the apiBridge property: Details of API bridge functionality, if required.
     * 
     * @param apiBridge the apiBridge value to set.
     * @return the CommunicationsGatewayProperties object itself.
     */
    public CommunicationsGatewayProperties withApiBridge(Object apiBridge) {
        this.apiBridge = apiBridge;
        return this;
    }

    /**
     * Get the autoGeneratedDomainNameLabelScope property: The scope at which the auto-generated domain name can be
     * re-used.
     * 
     * @return the autoGeneratedDomainNameLabelScope value.
     */
    public AutoGeneratedDomainNameLabelScope autoGeneratedDomainNameLabelScope() {
        return this.autoGeneratedDomainNameLabelScope;
    }

    /**
     * Set the autoGeneratedDomainNameLabelScope property: The scope at which the auto-generated domain name can be
     * re-used.
     * 
     * @param autoGeneratedDomainNameLabelScope the autoGeneratedDomainNameLabelScope value to set.
     * @return the CommunicationsGatewayProperties object itself.
     */
    public CommunicationsGatewayProperties
        withAutoGeneratedDomainNameLabelScope(AutoGeneratedDomainNameLabelScope autoGeneratedDomainNameLabelScope) {
        this.autoGeneratedDomainNameLabelScope = autoGeneratedDomainNameLabelScope;
        return this;
    }

    /**
     * Get the autoGeneratedDomainNameLabel property: The autogenerated label used as part of the FQDNs for accessing
     * the Communications Gateway.
     * 
     * @return the autoGeneratedDomainNameLabel value.
     */
    public String autoGeneratedDomainNameLabel() {
        return this.autoGeneratedDomainNameLabel;
    }

    /**
     * Get the teamsVoicemailPilotNumber property: This number is used in Teams Phone Mobile scenarios for access to the
     * voicemail IVR from the native dialer.
     * 
     * @return the teamsVoicemailPilotNumber value.
     */
    public String teamsVoicemailPilotNumber() {
        return this.teamsVoicemailPilotNumber;
    }

    /**
     * Set the teamsVoicemailPilotNumber property: This number is used in Teams Phone Mobile scenarios for access to the
     * voicemail IVR from the native dialer.
     * 
     * @param teamsVoicemailPilotNumber the teamsVoicemailPilotNumber value to set.
     * @return the CommunicationsGatewayProperties object itself.
     */
    public CommunicationsGatewayProperties withTeamsVoicemailPilotNumber(String teamsVoicemailPilotNumber) {
        this.teamsVoicemailPilotNumber = teamsVoicemailPilotNumber;
        return this;
    }

    /**
     * Get the onPremMcpEnabled property: Whether an on-premises Mobile Control Point is in use.
     * 
     * @return the onPremMcpEnabled value.
     */
    public Boolean onPremMcpEnabled() {
        return this.onPremMcpEnabled;
    }

    /**
     * Set the onPremMcpEnabled property: Whether an on-premises Mobile Control Point is in use.
     * 
     * @param onPremMcpEnabled the onPremMcpEnabled value to set.
     * @return the CommunicationsGatewayProperties object itself.
     */
    public CommunicationsGatewayProperties withOnPremMcpEnabled(Boolean onPremMcpEnabled) {
        this.onPremMcpEnabled = onPremMcpEnabled;
        return this;
    }

    /**
     * Get the emergencyDialStrings property: A list of dial strings used for emergency calling.
     * 
     * @return the emergencyDialStrings value.
     */
    public List<String> emergencyDialStrings() {
        return this.emergencyDialStrings;
    }

    /**
     * Set the emergencyDialStrings property: A list of dial strings used for emergency calling.
     * 
     * @param emergencyDialStrings the emergencyDialStrings value to set.
     * @return the CommunicationsGatewayProperties object itself.
     */
    public CommunicationsGatewayProperties withEmergencyDialStrings(List<String> emergencyDialStrings) {
        this.emergencyDialStrings = emergencyDialStrings;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (serviceLocations() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property serviceLocations in model CommunicationsGatewayProperties"));
        } else {
            serviceLocations().forEach(e -> e.validate());
        }
        if (connectivity() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property connectivity in model CommunicationsGatewayProperties"));
        }
        if (codecs() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property codecs in model CommunicationsGatewayProperties"));
        }
        if (e911Type() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property e911Type in model CommunicationsGatewayProperties"));
        }
        if (platforms() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property platforms in model CommunicationsGatewayProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(CommunicationsGatewayProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("serviceLocations", this.serviceLocations,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("connectivity", this.connectivity == null ? null : this.connectivity.toString());
        jsonWriter.writeArrayField("codecs", this.codecs,
            (writer, element) -> writer.writeString(element == null ? null : element.toString()));
        jsonWriter.writeStringField("e911Type", this.e911Type == null ? null : this.e911Type.toString());
        jsonWriter.writeArrayField("platforms", this.platforms,
            (writer, element) -> writer.writeString(element == null ? null : element.toString()));
        jsonWriter.writeUntypedField("apiBridge", this.apiBridge);
        jsonWriter.writeStringField("autoGeneratedDomainNameLabelScope",
            this.autoGeneratedDomainNameLabelScope == null ? null : this.autoGeneratedDomainNameLabelScope.toString());
        jsonWriter.writeStringField("teamsVoicemailPilotNumber", this.teamsVoicemailPilotNumber);
        jsonWriter.writeBooleanField("onPremMcpEnabled", this.onPremMcpEnabled);
        jsonWriter.writeArrayField("emergencyDialStrings", this.emergencyDialStrings,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CommunicationsGatewayProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CommunicationsGatewayProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CommunicationsGatewayProperties.
     */
    public static CommunicationsGatewayProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CommunicationsGatewayProperties deserializedCommunicationsGatewayProperties
                = new CommunicationsGatewayProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("serviceLocations".equals(fieldName)) {
                    List<ServiceRegionProperties> serviceLocations
                        = reader.readArray(reader1 -> ServiceRegionProperties.fromJson(reader1));
                    deserializedCommunicationsGatewayProperties.serviceLocations = serviceLocations;
                } else if ("connectivity".equals(fieldName)) {
                    deserializedCommunicationsGatewayProperties.connectivity
                        = Connectivity.fromString(reader.getString());
                } else if ("codecs".equals(fieldName)) {
                    List<TeamsCodecs> codecs = reader.readArray(reader1 -> TeamsCodecs.fromString(reader1.getString()));
                    deserializedCommunicationsGatewayProperties.codecs = codecs;
                } else if ("e911Type".equals(fieldName)) {
                    deserializedCommunicationsGatewayProperties.e911Type = E911Type.fromString(reader.getString());
                } else if ("platforms".equals(fieldName)) {
                    List<CommunicationsPlatform> platforms
                        = reader.readArray(reader1 -> CommunicationsPlatform.fromString(reader1.getString()));
                    deserializedCommunicationsGatewayProperties.platforms = platforms;
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedCommunicationsGatewayProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else if ("status".equals(fieldName)) {
                    deserializedCommunicationsGatewayProperties.status = Status.fromString(reader.getString());
                } else if ("apiBridge".equals(fieldName)) {
                    deserializedCommunicationsGatewayProperties.apiBridge = reader.readUntyped();
                } else if ("autoGeneratedDomainNameLabelScope".equals(fieldName)) {
                    deserializedCommunicationsGatewayProperties.autoGeneratedDomainNameLabelScope
                        = AutoGeneratedDomainNameLabelScope.fromString(reader.getString());
                } else if ("autoGeneratedDomainNameLabel".equals(fieldName)) {
                    deserializedCommunicationsGatewayProperties.autoGeneratedDomainNameLabel = reader.getString();
                } else if ("teamsVoicemailPilotNumber".equals(fieldName)) {
                    deserializedCommunicationsGatewayProperties.teamsVoicemailPilotNumber = reader.getString();
                } else if ("onPremMcpEnabled".equals(fieldName)) {
                    deserializedCommunicationsGatewayProperties.onPremMcpEnabled
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("emergencyDialStrings".equals(fieldName)) {
                    List<String> emergencyDialStrings = reader.readArray(reader1 -> reader1.getString());
                    deserializedCommunicationsGatewayProperties.emergencyDialStrings = emergencyDialStrings;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCommunicationsGatewayProperties;
        });
    }
}
