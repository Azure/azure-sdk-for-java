// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurearcdata.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.azurearcdata.AzureArcDataManager;
import com.azure.resourcemanager.azurearcdata.models.ExecutionState;
import com.azure.resourcemanager.azurearcdata.models.JobStatus;
import com.azure.resourcemanager.azurearcdata.models.LastExecutionStatus;
import com.azure.resourcemanager.azurearcdata.models.Result;
import com.azure.resourcemanager.azurearcdata.models.SequencerState;
import com.azure.resourcemanager.azurearcdata.models.SqlServerInstanceRunMigrationAssessmentResponse;
import com.azure.resourcemanager.azurearcdata.models.State;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class SqlServerInstancesRunMigrationAssessmentWithResponseMockTests {
    @Test
    public void testRunMigrationAssessmentWithResponse() throws Exception {
        String responseStr
            = "{\"id\":\"lghieegjlgvvpase\",\"instanceName\":\"gbuxantuygdh\",\"jobStatus\":\"InProgress\",\"jobException\":\"pirpiwrqof\",\"backgroundJob\":{\"state\":\"Active\",\"executionState\":\"Waiting\",\"startTime\":\"2021-03-16T00:06:01Z\",\"endTime\":\"2021-03-01T02:59:16Z\",\"lastExecutionStatus\":\"Failed\",\"lastExecutionTime\":\"2021-02-26T20:18:54Z\"},\"sequencerActions\":[{\"actionId\":\"bke\",\"state\":\"NotStarted\",\"result\":\"Skipped\"},{\"actionId\":\"rctat\",\"state\":\"Completed\",\"result\":\"Failed\"},{\"actionId\":\"pbrlcyrduczkgofx\",\"state\":\"WaitingPredecessors\",\"result\":\"Skipped\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AzureArcDataManager manager = AzureArcDataManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        SqlServerInstanceRunMigrationAssessmentResponse response = manager.sqlServerInstances()
            .runMigrationAssessmentWithResponse("apucygvo", "vyuns", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("lghieegjlgvvpase", response.id());
        Assertions.assertEquals("gbuxantuygdh", response.instanceName());
        Assertions.assertEquals(JobStatus.IN_PROGRESS, response.jobStatus());
        Assertions.assertEquals("pirpiwrqof", response.jobException());
        Assertions.assertEquals(State.ACTIVE, response.backgroundJob().state());
        Assertions.assertEquals(ExecutionState.WAITING, response.backgroundJob().executionState());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-16T00:06:01Z"), response.backgroundJob().startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-01T02:59:16Z"), response.backgroundJob().endTime());
        Assertions.assertEquals(LastExecutionStatus.FAILED, response.backgroundJob().lastExecutionStatus());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-26T20:18:54Z"),
            response.backgroundJob().lastExecutionTime());
        Assertions.assertEquals("bke", response.sequencerActions().get(0).actionId());
        Assertions.assertEquals(SequencerState.NOT_STARTED, response.sequencerActions().get(0).state());
        Assertions.assertEquals(Result.SKIPPED, response.sequencerActions().get(0).result());
    }
}
