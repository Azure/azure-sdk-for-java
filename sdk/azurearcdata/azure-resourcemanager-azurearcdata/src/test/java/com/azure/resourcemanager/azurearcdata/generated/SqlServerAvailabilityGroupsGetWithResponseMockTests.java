// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurearcdata.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.azurearcdata.AzureArcDataManager;
import com.azure.resourcemanager.azurearcdata.models.SqlServerAvailabilityGroupResource;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class SqlServerAvailabilityGroupsGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"availabilityGroupId\":\"wxrzxmdewsrsxkrp\",\"serverName\":\"jazejwwviyoyp\",\"instanceName\":\"hbrnnhjx\",\"vmId\":\"wjh\",\"collectionTimestamp\":\"2021-12-10T08:24:32Z\",\"info\":{\"failureConditionLevel\":657233220,\"healthCheckTimeout\":722435599,\"automatedBackupPreferenceDescription\":\"zycyqiqyhg\",\"version\":1960734789,\"basicFeatures\":false,\"dtcSupport\":false,\"dbFailover\":true,\"isDistributed\":true,\"clusterTypeDescription\":\"e\",\"requiredSynchronizedSecondariesToCommit\":269107120,\"isContained\":false,\"primaryReplica\":\"ziu\",\"primaryRecoveryHealthDescription\":\"bzkkd\",\"secondaryRecoveryHealthDescription\":\"hqsycljselp\",\"synchronizationHealthDescription\":\"bafvafhlbylcc\",\"replicationPartnerType\":\"SQLServer\",\"listener\":{\"dnsName\":\"hyzdfwrs\",\"ipV4AddressesAndMasks\":[{}],\"ipV6Addresses\":[\"dbmairrhvhfnr\"],\"port\":1669403612}},\"replicas\":{\"value\":[{\"replicaId\":\"g\",\"replicaName\":\"ujwouhdawsi\",\"replicaResourceId\":\"bjb\",\"configure\":{},\"state\":{}},{\"replicaId\":\"bvitvqkjya\",\"replicaName\":\"umtggmuwdchozfn\",\"replicaResourceId\":\"exlvxnoakiz\",\"configure\":{},\"state\":{}},{\"replicaId\":\"knaqlnuwig\",\"replicaName\":\"xly\",\"replicaResourceId\":\"phvxz\",\"configure\":{},\"state\":{}},{\"replicaId\":\"mpe\",\"replicaName\":\"lkexaonwivkcqh\",\"replicaResourceId\":\"hxknlccrmmkyupi\",\"configure\":{},\"state\":{}}],\"nextLink\":\"qjfkakfqfrkemyi\"},\"databases\":{\"value\":[{\"databaseName\":\"jascowvfdjkpd\",\"replicaName\":\"hlkks\",\"isLocal\":false,\"isPrimaryReplica\":true,\"synchronizationStateDescription\":\"fijd\",\"isCommitParticipant\":true,\"synchronizationHealthDescription\":\"nwsithuqolyahluq\",\"databaseStateDescription\":\"ulsutrjbhxy\",\"isSuspended\":false,\"suspendReasonDescription\":\"qezv\"},{\"databaseName\":\"ugdrftbc\",\"replicaName\":\"xreuquowtlj\",\"isLocal\":true,\"isPrimaryReplica\":true,\"synchronizationStateDescription\":\"agk\",\"isCommitParticipant\":false,\"synchronizationHealthDescription\":\"rqtvbczsulmdgglm\",\"databaseStateDescription\":\"jpfseykg\",\"isSuspended\":true,\"suspendReasonDescription\":\"psznga\"},{\"databaseName\":\"g\",\"replicaName\":\"kvec\",\"isLocal\":true,\"isPrimaryReplica\":true,\"synchronizationStateDescription\":\"oady\",\"isCommitParticipant\":false,\"synchronizationHealthDescription\":\"rgjfoknubnoi\",\"databaseStateDescription\":\"kpztrgd\",\"isSuspended\":true,\"suspendReasonDescription\":\"oqraswugyxpqi\"}],\"nextLink\":\"eialwvskb\"},\"provisioningState\":\"z\"},\"location\":\"aq\",\"tags\":{\"cujp\":\"tco\",\"bizt\":\"sxzakuejkm\"},\"id\":\"ofqcvovjufycsjm\",\"name\":\"bemyeji\",\"type\":\"iuxegth\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AzureArcDataManager manager = AzureArcDataManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        SqlServerAvailabilityGroupResource response = manager.sqlServerAvailabilityGroups()
            .getWithResponse("upnqrmgjfb", "kuwxeoiojfizfavk", "zwfbcyaykmmfzs", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("aq", response.location());
        Assertions.assertEquals("tco", response.tags().get("cujp"));
        Assertions.assertEquals(657233220, response.properties().info().failureConditionLevel());
        Assertions.assertEquals(722435599, response.properties().info().healthCheckTimeout());
        Assertions.assertFalse(response.properties().info().basicFeatures());
        Assertions.assertFalse(response.properties().info().dtcSupport());
        Assertions.assertTrue(response.properties().info().dbFailover());
        Assertions.assertTrue(response.properties().info().isDistributed());
        Assertions.assertEquals(269107120, response.properties().info().requiredSynchronizedSecondariesToCommit());
        Assertions.assertFalse(response.properties().info().isContained());
        Assertions.assertEquals("hyzdfwrs", response.properties().info().listener().dnsName());
        Assertions.assertEquals("dbmairrhvhfnr", response.properties().info().listener().ipV6Addresses().get(0));
        Assertions.assertEquals(1669403612, response.properties().info().listener().port());
        Assertions.assertEquals("ujwouhdawsi", response.properties().replicas().value().get(0).replicaName());
        Assertions.assertEquals("bjb", response.properties().replicas().value().get(0).replicaResourceId());
        Assertions.assertEquals("jascowvfdjkpd", response.properties().databases().value().get(0).databaseName());
    }
}
