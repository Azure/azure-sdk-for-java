// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurearcdata.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.azurearcdata.AzureArcDataManager;
import com.azure.resourcemanager.azurearcdata.models.ArcSqlServerLicenseType;
import com.azure.resourcemanager.azurearcdata.models.ConnectionStatus;
import com.azure.resourcemanager.azurearcdata.models.DefenderStatus;
import com.azure.resourcemanager.azurearcdata.models.EditionType;
import com.azure.resourcemanager.azurearcdata.models.SqlServerInstance;
import com.azure.resourcemanager.azurearcdata.models.SqlVersion;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class SqlServerInstancesGetByResourceGroupWithResponseMockTests {
    @Test
    public void testGetByResourceGroupWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"version\":\"SQL Server 2016\",\"edition\":\"Standard\",\"containerResourceId\":\"n\",\"createTime\":\"ph\",\"vCore\":\"pxodlqiyntorzih\",\"status\":\"Connected\",\"patchLevel\":\"sjswsrms\",\"collation\":\"zrpzb\",\"currentVersion\":\"ckqqzqioxiysui\",\"instanceName\":\"ynkedyatrwyhqmib\",\"tcpDynamicPorts\":\"hwit\",\"tcpStaticPorts\":\"ypyynpcdpumnzg\",\"productId\":\"z\",\"licenseType\":\"Free\",\"azureDefenderStatusLastUpdated\":\"2020-12-29T02:38:39Z\",\"azureDefenderStatus\":\"Unprotected\",\"provisioningState\":\"orgjhxbldt\"},\"location\":\"wrlkdmtn\",\"tags\":{\"xdy\":\"kotl\"},\"id\":\"gsyocogj\",\"name\":\"tdtbnnhadooc\",\"type\":\"kvci\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AzureArcDataManager manager = AzureArcDataManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        SqlServerInstance response = manager.sqlServerInstances()
            .getByResourceGroupWithResponse("bwwift", "hqkvpuvksgplsak", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("wrlkdmtn", response.location());
        Assertions.assertEquals("kotl", response.tags().get("xdy"));
        Assertions.assertEquals(SqlVersion.SQL_SERVER_2016, response.properties().version());
        Assertions.assertEquals(EditionType.STANDARD, response.properties().edition());
        Assertions.assertEquals("n", response.properties().containerResourceId());
        Assertions.assertEquals("pxodlqiyntorzih", response.properties().vCore());
        Assertions.assertEquals(ConnectionStatus.CONNECTED, response.properties().status());
        Assertions.assertEquals("sjswsrms", response.properties().patchLevel());
        Assertions.assertEquals("zrpzb", response.properties().collation());
        Assertions.assertEquals("ckqqzqioxiysui", response.properties().currentVersion());
        Assertions.assertEquals("ynkedyatrwyhqmib", response.properties().instanceName());
        Assertions.assertEquals("hwit", response.properties().tcpDynamicPorts());
        Assertions.assertEquals("ypyynpcdpumnzg", response.properties().tcpStaticPorts());
        Assertions.assertEquals("z", response.properties().productId());
        Assertions.assertEquals(ArcSqlServerLicenseType.FREE, response.properties().licenseType());
        Assertions.assertEquals(OffsetDateTime.parse("2020-12-29T02:38:39Z"),
            response.properties().azureDefenderStatusLastUpdated());
        Assertions.assertEquals(DefenderStatus.UNPROTECTED, response.properties().azureDefenderStatus());
    }
}
