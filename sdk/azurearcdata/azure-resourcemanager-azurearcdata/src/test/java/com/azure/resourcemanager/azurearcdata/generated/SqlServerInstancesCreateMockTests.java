// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurearcdata.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.azurearcdata.AzureArcDataManager;
import com.azure.resourcemanager.azurearcdata.models.ArcSqlServerLicenseType;
import com.azure.resourcemanager.azurearcdata.models.ConnectionStatus;
import com.azure.resourcemanager.azurearcdata.models.DefenderStatus;
import com.azure.resourcemanager.azurearcdata.models.EditionType;
import com.azure.resourcemanager.azurearcdata.models.SqlServerInstance;
import com.azure.resourcemanager.azurearcdata.models.SqlServerInstanceProperties;
import com.azure.resourcemanager.azurearcdata.models.SqlVersion;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class SqlServerInstancesCreateMockTests {
    @Test
    public void testCreate() throws Exception {
        String responseStr
            = "{\"properties\":{\"version\":\"SQL Server 2019\",\"edition\":\"Express\",\"containerResourceId\":\"hdgqggeb\",\"createTime\":\"nyga\",\"vCore\":\"idb\",\"status\":\"Connected\",\"patchLevel\":\"t\",\"collation\":\"llrxcyjmoad\",\"currentVersion\":\"varmywdmj\",\"instanceName\":\"q\",\"tcpDynamicPorts\":\"hhyxxrw\",\"tcpStaticPorts\":\"co\",\"productId\":\"hp\",\"licenseType\":\"Undefined\",\"azureDefenderStatusLastUpdated\":\"2021-01-03T15:01:22Z\",\"azureDefenderStatus\":\"Unknown\",\"provisioningState\":\"Succeeded\"},\"location\":\"ddg\",\"tags\":{\"i\":\"fwqmzqalkrmn\"},\"id\":\"pxacqqudfn\",\"name\":\"yxbaaabjyvayf\",\"type\":\"imrzrtuzqog\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AzureArcDataManager manager = AzureArcDataManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        SqlServerInstance response = manager.sqlServerInstances()
            .define("kallatmel")
            .withRegion("jawneaiv")
            .withExistingResourceGroup("zikywgg")
            .withTags(mapOf("c", "zel", "lsfeaenwabfatkld", "r", "oulpjrv", "xbjhwuaanozjosph"))
            .withProperties(new SqlServerInstanceProperties().withVersion(SqlVersion.SQL_SERVER_2019)
                .withEdition(EditionType.STANDARD)
                .withContainerResourceId("cjzkzivgvvcna")
                .withVCore("dndrdvstkwqqtche")
                .withStatus(ConnectionStatus.UNKNOWN)
                .withPatchLevel("fmtdaaygdvwvgp")
                .withCollation("hgwxrtfudx")
                .withCurrentVersion("xg")
                .withInstanceName("agvrvmnpkuk")
                .withTcpDynamicPorts("i")
                .withTcpStaticPorts("blxgwimf")
                .withProductId("hfjx")
                .withLicenseType(ArcSqlServerLicenseType.HADR)
                .withAzureDefenderStatusLastUpdated(OffsetDateTime.parse("2021-10-16T12:46:55Z"))
                .withAzureDefenderStatus(DefenderStatus.UNPROTECTED))
            .create();

        Assertions.assertEquals("ddg", response.location());
        Assertions.assertEquals("fwqmzqalkrmn", response.tags().get("i"));
        Assertions.assertEquals(SqlVersion.SQL_SERVER_2019, response.properties().version());
        Assertions.assertEquals(EditionType.EXPRESS, response.properties().edition());
        Assertions.assertEquals("hdgqggeb", response.properties().containerResourceId());
        Assertions.assertEquals("idb", response.properties().vCore());
        Assertions.assertEquals(ConnectionStatus.CONNECTED, response.properties().status());
        Assertions.assertEquals("t", response.properties().patchLevel());
        Assertions.assertEquals("llrxcyjmoad", response.properties().collation());
        Assertions.assertEquals("varmywdmj", response.properties().currentVersion());
        Assertions.assertEquals("q", response.properties().instanceName());
        Assertions.assertEquals("hhyxxrw", response.properties().tcpDynamicPorts());
        Assertions.assertEquals("co", response.properties().tcpStaticPorts());
        Assertions.assertEquals("hp", response.properties().productId());
        Assertions.assertEquals(ArcSqlServerLicenseType.UNDEFINED, response.properties().licenseType());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-03T15:01:22Z"),
            response.properties().azureDefenderStatusLastUpdated());
        Assertions.assertEquals(DefenderStatus.UNKNOWN, response.properties().azureDefenderStatus());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
