// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurearcdata.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.azurearcdata.models.K8SScheduling;
import com.azure.resourcemanager.azurearcdata.models.SqlManagedInstanceK8SRaw;
import com.azure.resourcemanager.azurearcdata.models.SqlManagedInstanceK8SSpec;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SqlManagedInstanceK8SRawTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SqlManagedInstanceK8SRaw model =
            BinaryData
                .fromString(
                    "{\"spec\":{\"scheduling\":{\"\":{\"jtjaodxobnbdxkq\":\"dataerhhbcsglumm\",\"ajionpimexgstxg\":\"dataxo\",\"gmaajrm\":\"datapo\",\"clwhijcoejctbz\":\"datadjwzrlov\"}},\"replicas\":21849341,\"\":{\"bkbfkgukdkex\":\"datay\",\"ocjjxhvpmouexh\":\"datappofmxaxcfjpgdd\"}},\"\":{\"qeojnxqbzvddntw\":\"datai\",\"vuhrhcffcyddgl\":\"datadeicbtwnpzao\",\"xmqci\":\"datajthjqkwpyei\"}}")
                .toObject(SqlManagedInstanceK8SRaw.class);
        Assertions.assertEquals(21849341, model.spec().replicas());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SqlManagedInstanceK8SRaw model =
            new SqlManagedInstanceK8SRaw()
                .withSpec(
                    new SqlManagedInstanceK8SSpec()
                        .withScheduling(new K8SScheduling().withAdditionalProperties(mapOf()))
                        .withReplicas(21849341)
                        .withAdditionalProperties(mapOf()))
                .withAdditionalProperties(mapOf());
        model = BinaryData.fromObject(model).toObject(SqlManagedInstanceK8SRaw.class);
        Assertions.assertEquals(21849341, model.spec().replicas());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
