// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurearcdata.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.azurearcdata.models.K8SResourceRequirements;
import com.azure.resourcemanager.azurearcdata.models.K8SScheduling;
import com.azure.resourcemanager.azurearcdata.models.K8SSchedulingOptions;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class K8SSchedulingTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        K8SScheduling model = BinaryData.fromString(
            "{\"default\":{\"resources\":{\"requests\":{\"xzdmohctb\":\"avo\"},\"limits\":{\"w\":\"dwxdndnv\",\"lazjdyggdtjixhbk\":\"ujjugwdkcglh\",\"fwhybcibvy\":\"ofqweykhmenevfye\",\"ynnaam\":\"dcsi\"},\"\":{\"zrkgqhcjrefovg\":\"datatehfiqscjeypvh\",\"jpkcattpng\":\"datakqsleyyvxy\",\"czsqpjhvm\":\"datacr\"}},\"\":{\"ysou\":\"datav\",\"canoaeupf\":\"dataq\",\"tuo\":\"datayhltrpmopjmcm\"}},\"\":{\"uaodsfcpk\":\"datafu\",\"xbezyiuokktwh\":\"dataxodpuozmyzydagfu\",\"o\":\"datadxwzywqsmbsurexi\"}}")
            .toObject(K8SScheduling.class);
        Assertions.assertEquals("avo", model.defaultProperty().resources().requests().get("xzdmohctb"));
        Assertions.assertEquals("dwxdndnv", model.defaultProperty().resources().limits().get("w"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        K8SScheduling model = new K8SScheduling()
            .withDefaultProperty(new K8SSchedulingOptions()
                .withResources(new K8SResourceRequirements().withRequests(mapOf("xzdmohctb", "avo"))
                    .withLimits(mapOf("w", "dwxdndnv", "lazjdyggdtjixhbk", "ujjugwdkcglh", "fwhybcibvy",
                        "ofqweykhmenevfye", "ynnaam", "dcsi"))
                    .withAdditionalProperties(mapOf()))
                .withAdditionalProperties(mapOf()))
            .withAdditionalProperties(mapOf());
        model = BinaryData.fromObject(model).toObject(K8SScheduling.class);
        Assertions.assertEquals("avo", model.defaultProperty().resources().requests().get("xzdmohctb"));
        Assertions.assertEquals("dwxdndnv", model.defaultProperty().resources().limits().get("w"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
