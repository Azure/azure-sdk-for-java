// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurearcdata.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.azurearcdata.AzureArcDataManager;
import com.azure.resourcemanager.azurearcdata.models.SqlServerAvailabilityGroupResource;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class SqlServerAvailabilityGroupsFailoverWithResponseMockTests {
    @Test
    public void testFailoverWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"availabilityGroupId\":\"szlfyt\",\"serverName\":\"thgygvfltgvdi\",\"instanceName\":\"ynkrxwetw\",\"vmId\":\"rcyrucpcunnu\",\"collectionTimestamp\":\"2021-04-02T12:38:21Z\",\"info\":{\"failureConditionLevel\":622272508,\"healthCheckTimeout\":559723693,\"automatedBackupPreferenceDescription\":\"dnaienhqhskndnel\",\"version\":1060795028,\"basicFeatures\":true,\"dtcSupport\":true,\"dbFailover\":false,\"isDistributed\":true,\"clusterTypeDescription\":\"nniyopetxi\",\"requiredSynchronizedSecondariesToCommit\":1933668052,\"isContained\":true,\"primaryReplica\":\"xnucaephblkwqp\",\"primaryRecoveryHealthDescription\":\"vbqsdt\",\"secondaryRecoveryHealthDescription\":\"bctvivuzqym\",\"synchronizationHealthDescription\":\"owog\",\"replicationPartnerType\":\"SQLServer\",\"listener\":{\"dnsName\":\"qhzvb\",\"ipV4AddressesAndMasks\":[{}],\"ipV6Addresses\":[\"anfzndscxmxeatk\"],\"port\":1487638674}},\"replicas\":{\"value\":[{\"replicaId\":\"jyibqbna\",\"replicaName\":\"hjrmkuhmaxl\",\"replicaResourceId\":\"lfihcj\",\"configure\":{},\"state\":{}},{\"replicaId\":\"anc\",\"replicaName\":\"xxqcwgaxf\",\"replicaResourceId\":\"aknokzwjjzrl\",\"configure\":{},\"state\":{}}],\"nextLink\":\"dzyyfytpq\"},\"databases\":{\"value\":[{\"databaseName\":\"m\",\"replicaName\":\"jivyqlkjuv\",\"isLocal\":true,\"isPrimaryReplica\":false,\"synchronizationStateDescription\":\"zoyovwzdbpq\",\"isCommitParticipant\":false,\"synchronizationHealthDescription\":\"fgvmx\",\"databaseStateDescription\":\"kcvtl\",\"isSuspended\":true,\"suspendReasonDescription\":\"skvcuartrhunl\"},{\"databaseName\":\"rykycndzfqivjr\",\"replicaName\":\"ykbbmnwagltbxoe\",\"isLocal\":true,\"isPrimaryReplica\":false,\"synchronizationStateDescription\":\"fwmyymv\",\"isCommitParticipant\":true,\"synchronizationHealthDescription\":\"bhfckdvezcrcssb\",\"databaseStateDescription\":\"ddubbnqfblhkal\",\"isSuspended\":true,\"suspendReasonDescription\":\"vawu\"},{\"databaseName\":\"qjtiogqgdm\",\"replicaName\":\"i\",\"isLocal\":true,\"isPrimaryReplica\":false,\"synchronizationStateDescription\":\"ohiygspn\",\"isCommitParticipant\":false,\"synchronizationHealthDescription\":\"pczykmktpvwxqc\",\"databaseStateDescription\":\"hchkhufm\",\"isSuspended\":false,\"suspendReasonDescription\":\"q\"}],\"nextLink\":\"gy\"},\"provisioningState\":\"ulodsaeuzanhsfnh\"},\"location\":\"nwph\",\"tags\":{\"u\":\"ngqjclidf\"},\"id\":\"wjjufwbe\",\"name\":\"rkuorh\",\"type\":\"ssruqnmdvhazcvj\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AzureArcDataManager manager = AzureArcDataManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        SqlServerAvailabilityGroupResource response = manager.sqlServerAvailabilityGroups()
            .failoverWithResponse("ewxigpxvk", "maupxvpi", "dfaifyzyzeyuube", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("nwph", response.location());
        Assertions.assertEquals("ngqjclidf", response.tags().get("u"));
        Assertions.assertEquals(622272508, response.properties().info().failureConditionLevel());
        Assertions.assertEquals(559723693, response.properties().info().healthCheckTimeout());
        Assertions.assertTrue(response.properties().info().basicFeatures());
        Assertions.assertTrue(response.properties().info().dtcSupport());
        Assertions.assertFalse(response.properties().info().dbFailover());
        Assertions.assertTrue(response.properties().info().isDistributed());
        Assertions.assertEquals(1933668052, response.properties().info().requiredSynchronizedSecondariesToCommit());
        Assertions.assertTrue(response.properties().info().isContained());
        Assertions.assertEquals("qhzvb", response.properties().info().listener().dnsName());
        Assertions.assertEquals("anfzndscxmxeatk", response.properties().info().listener().ipV6Addresses().get(0));
        Assertions.assertEquals(1487638674, response.properties().info().listener().port());
        Assertions.assertEquals("hjrmkuhmaxl", response.properties().replicas().value().get(0).replicaName());
        Assertions.assertEquals("lfihcj", response.properties().replicas().value().get(0).replicaResourceId());
        Assertions.assertEquals("m", response.properties().databases().value().get(0).databaseName());
    }
}
