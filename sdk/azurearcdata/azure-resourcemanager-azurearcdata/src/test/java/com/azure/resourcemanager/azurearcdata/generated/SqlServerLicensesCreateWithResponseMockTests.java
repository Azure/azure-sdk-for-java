// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurearcdata.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.azurearcdata.AzureArcDataManager;
import com.azure.resourcemanager.azurearcdata.models.ActivationState;
import com.azure.resourcemanager.azurearcdata.models.BillingPlan;
import com.azure.resourcemanager.azurearcdata.models.LicenseCategory;
import com.azure.resourcemanager.azurearcdata.models.ScopeType;
import com.azure.resourcemanager.azurearcdata.models.SqlServerLicense;
import com.azure.resourcemanager.azurearcdata.models.SqlServerLicenseProperties;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class SqlServerLicensesCreateWithResponseMockTests {
    @Test
    public void testCreateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"billingPlan\":\"PAYG\",\"physicalCores\":2061658814,\"licenseCategory\":\"Core\",\"activationState\":\"Activated\",\"scopeType\":\"ResourceGroup\",\"lastActivatedAt\":\"2021-08-07T20:40:36Z\",\"lastDeactivatedAt\":\"2021-09-08T05:38:07Z\",\"tenantId\":\"qgyi\"},\"location\":\"mchgavsczuej\",\"tags\":{\"iuh\":\"ptlghwzhomewjjst\",\"ia\":\"awmo\",\"vodrrslblxydkxr\":\"cz\"},\"id\":\"vvbxiwkgfbqljnq\",\"name\":\"hychocokuleh\",\"type\":\"rqlrqffawe\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AzureArcDataManager manager = AzureArcDataManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        SqlServerLicense response = manager.sqlServerLicenses()
            .define("hmupgxyjtcdxabbu")
            .withRegion("a")
            .withExistingResourceGroup("utgqztwh")
            .withProperties(new SqlServerLicenseProperties().withBillingPlan(BillingPlan.PAID)
                .withPhysicalCores(2063766495)
                .withLicenseCategory(LicenseCategory.CORE)
                .withActivationState(ActivationState.ACTIVATED)
                .withScopeType(ScopeType.TENANT))
            .withTags(mapOf("gnhgook", "u"))
            .create();

        Assertions.assertEquals("mchgavsczuej", response.location());
        Assertions.assertEquals("ptlghwzhomewjjst", response.tags().get("iuh"));
        Assertions.assertEquals(BillingPlan.PAYG, response.properties().billingPlan());
        Assertions.assertEquals(2061658814, response.properties().physicalCores());
        Assertions.assertEquals(LicenseCategory.CORE, response.properties().licenseCategory());
        Assertions.assertEquals(ActivationState.ACTIVATED, response.properties().activationState());
        Assertions.assertEquals(ScopeType.RESOURCE_GROUP, response.properties().scopeType());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
