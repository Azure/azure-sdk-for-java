// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurearcdata.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.azurearcdata.AzureArcDataManager;
import com.azure.resourcemanager.azurearcdata.models.BillingPlan;
import com.azure.resourcemanager.azurearcdata.models.ScopeType;
import com.azure.resourcemanager.azurearcdata.models.SqlServerEsuLicense;
import com.azure.resourcemanager.azurearcdata.models.SqlServerEsuLicenseProperties;
import com.azure.resourcemanager.azurearcdata.models.State;
import com.azure.resourcemanager.azurearcdata.models.Version;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class SqlServerEsuLicensesCreateWithResponseMockTests {
    @Test
    public void testCreateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"billingPlan\":\"Paid\",\"version\":\"SQL Server 2012\",\"uniqueId\":\"iceevsaaxwspca\",\"physicalCores\":1239348887,\"activationState\":\"Active\",\"scopeType\":\"Subscription\",\"activatedAt\":\"2021-06-02T15:20:35Z\",\"terminatedAt\":\"2021-07-25T16:49:18Z\",\"tenantId\":\"glcxkxg\"},\"location\":\"romv\",\"tags\":{\"mesrfsvpi\":\"sem\",\"wxspvckojaz\":\"kzpatqtdi\",\"esubzpvpv\":\"bgspf\",\"j\":\"ylytcovqseusr\"},\"id\":\"d\",\"name\":\"zfxnxmlbmuos\",\"type\":\"kjmdihdcyy\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AzureArcDataManager manager = AzureArcDataManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        SqlServerEsuLicense response = manager.sqlServerEsuLicenses()
            .define("eyttlrcxiv")
            .withRegion("jckhmocgj")
            .withExistingResourceGroup("kd")
            .withProperties(new SqlServerEsuLicenseProperties().withBillingPlan(BillingPlan.PAYG)
                .withVersion(Version.SQL_SERVER_2012)
                .withPhysicalCores(1876436202)
                .withActivationState(State.DELETED)
                .withScopeType(ScopeType.TENANT))
            .withTags(mapOf("bsjrclrv", "ouarhwvixqqggljk", "nrbctbhpjhxpcvrd", "z", "it", "y"))
            .create();

        Assertions.assertEquals("romv", response.location());
        Assertions.assertEquals("sem", response.tags().get("mesrfsvpi"));
        Assertions.assertEquals(BillingPlan.PAID, response.properties().billingPlan());
        Assertions.assertEquals(Version.SQL_SERVER_2012, response.properties().version());
        Assertions.assertEquals(1239348887, response.properties().physicalCores());
        Assertions.assertEquals(State.ACTIVE, response.properties().activationState());
        Assertions.assertEquals(ScopeType.SUBSCRIPTION, response.properties().scopeType());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
