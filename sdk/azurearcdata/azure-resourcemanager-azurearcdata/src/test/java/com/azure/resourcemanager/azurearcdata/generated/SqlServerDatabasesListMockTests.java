// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurearcdata.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.azurearcdata.AzureArcDataManager;
import com.azure.resourcemanager.azurearcdata.models.DatabaseCreateMode;
import com.azure.resourcemanager.azurearcdata.models.DatabaseState;
import com.azure.resourcemanager.azurearcdata.models.DifferentialBackupHours;
import com.azure.resourcemanager.azurearcdata.models.RecoveryMode;
import com.azure.resourcemanager.azurearcdata.models.SqlServerDatabaseResource;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class SqlServerDatabasesListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"collationName\":\"j\",\"databaseCreationDate\":\"2021-05-30T12:59:50Z\",\"compatibilityLevel\":807073729,\"sizeMB\":32.26084,\"logFileSizeMB\":96.91735,\"dataFileSizeMB\":13.799393,\"spaceAvailableMB\":21.8301,\"state\":\"Recovering\",\"isReadOnly\":true,\"recoveryMode\":\"Full\",\"databaseOptions\":{\"isAutoCloseOn\":true,\"isAutoShrinkOn\":false,\"isAutoCreateStatsOn\":true,\"isAutoUpdateStatsOn\":false,\"isRemoteDataArchiveEnabled\":true,\"isMemoryOptimizationEnabled\":false,\"isEncrypted\":false,\"isTrustworthyOn\":true},\"backupInformation\":{\"lastFullBackup\":\"2021-10-17T17:57:58Z\",\"lastLogBackup\":\"2021-01-04T06:58:03Z\"},\"backupPolicy\":{\"retentionPeriodDays\":1432290410,\"fullBackupDays\":1834871097,\"differentialBackupHours\":12,\"transactionLogBackupMinutes\":409454657},\"earliestRestoreDate\":\"2021-01-27T09:17:43Z\",\"createMode\":\"PointInTimeRestore\",\"sourceDatabaseId\":\"agpokddxe\",\"vmId\":\"h\",\"restorePointInTime\":\"2021-03-09T11:02:29Z\",\"provisioningState\":\"avtptbkewkqynsp\",\"lastDatabaseUploadTime\":\"2021-09-12T17:17:13Z\",\"migration\":{\"assessment\":{\"assessmentUploadTime\":\"2021-08-12T04:27:13Z\",\"databaseAssessments\":[{},{}],\"targetReadiness\":{\"azureSqlDatabase\":{},\"azureSqlManagedInstance\":{},\"azureSqlVirtualMachine\":{}}}}},\"location\":\"exqokmy\",\"tags\":{\"cjtrpzu\":\"ialzbnobrqlp\",\"lwgdhuruz\":\"udivbxnhsqeaeonq\"},\"id\":\"tzarogatmoljiy\",\"name\":\"mpinmzvfkneerzzt\",\"type\":\"knsjulugd\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AzureArcDataManager manager = AzureArcDataManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PagedIterable<SqlServerDatabaseResource> response
            = manager.sqlServerDatabases().list("ekqhs", "htfpwpqb", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("exqokmy", response.iterator().next().location());
        Assertions.assertEquals("ialzbnobrqlp", response.iterator().next().tags().get("cjtrpzu"));
        Assertions.assertEquals("j", response.iterator().next().properties().collationName());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-30T12:59:50Z"),
            response.iterator().next().properties().databaseCreationDate());
        Assertions.assertEquals(807073729, response.iterator().next().properties().compatibilityLevel());
        Assertions.assertEquals(32.26084F, response.iterator().next().properties().sizeMB());
        Assertions.assertEquals(96.91735F, response.iterator().next().properties().logFileSizeMB());
        Assertions.assertEquals(13.799393F, response.iterator().next().properties().dataFileSizeMB());
        Assertions.assertEquals(21.8301F, response.iterator().next().properties().spaceAvailableMB());
        Assertions.assertEquals(DatabaseState.RECOVERING, response.iterator().next().properties().state());
        Assertions.assertTrue(response.iterator().next().properties().isReadOnly());
        Assertions.assertEquals(RecoveryMode.FULL, response.iterator().next().properties().recoveryMode());
        Assertions.assertTrue(response.iterator().next().properties().databaseOptions().isAutoCloseOn());
        Assertions.assertFalse(response.iterator().next().properties().databaseOptions().isAutoShrinkOn());
        Assertions.assertTrue(response.iterator().next().properties().databaseOptions().isAutoCreateStatsOn());
        Assertions.assertFalse(response.iterator().next().properties().databaseOptions().isAutoUpdateStatsOn());
        Assertions.assertTrue(response.iterator().next().properties().databaseOptions().isRemoteDataArchiveEnabled());
        Assertions.assertFalse(response.iterator().next().properties().databaseOptions().isMemoryOptimizationEnabled());
        Assertions.assertFalse(response.iterator().next().properties().databaseOptions().isEncrypted());
        Assertions.assertTrue(response.iterator().next().properties().databaseOptions().isTrustworthyOn());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-17T17:57:58Z"),
            response.iterator().next().properties().backupInformation().lastFullBackup());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-04T06:58:03Z"),
            response.iterator().next().properties().backupInformation().lastLogBackup());
        Assertions.assertEquals(1432290410,
            response.iterator().next().properties().backupPolicy().retentionPeriodDays());
        Assertions.assertEquals(1834871097, response.iterator().next().properties().backupPolicy().fullBackupDays());
        Assertions.assertEquals(DifferentialBackupHours.ONE_TWO,
            response.iterator().next().properties().backupPolicy().differentialBackupHours());
        Assertions.assertEquals(409454657,
            response.iterator().next().properties().backupPolicy().transactionLogBackupMinutes());
        Assertions.assertEquals(DatabaseCreateMode.POINT_IN_TIME_RESTORE,
            response.iterator().next().properties().createMode());
        Assertions.assertEquals("agpokddxe", response.iterator().next().properties().sourceDatabaseId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-09T11:02:29Z"),
            response.iterator().next().properties().restorePointInTime());
    }
}
