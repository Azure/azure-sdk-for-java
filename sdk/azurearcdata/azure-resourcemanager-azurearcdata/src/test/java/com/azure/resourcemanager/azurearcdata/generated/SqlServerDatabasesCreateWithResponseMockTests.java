// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurearcdata.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.azurearcdata.AzureArcDataManager;
import com.azure.resourcemanager.azurearcdata.models.BackupPolicy;
import com.azure.resourcemanager.azurearcdata.models.DataBaseMigration;
import com.azure.resourcemanager.azurearcdata.models.DataBaseMigrationAssessment;
import com.azure.resourcemanager.azurearcdata.models.DatabaseCreateMode;
import com.azure.resourcemanager.azurearcdata.models.DatabaseState;
import com.azure.resourcemanager.azurearcdata.models.DifferentialBackupHours;
import com.azure.resourcemanager.azurearcdata.models.RecoveryMode;
import com.azure.resourcemanager.azurearcdata.models.SqlServerDatabaseResource;
import com.azure.resourcemanager.azurearcdata.models.SqlServerDatabaseResourceProperties;
import com.azure.resourcemanager.azurearcdata.models.SqlServerDatabaseResourcePropertiesBackupInformation;
import com.azure.resourcemanager.azurearcdata.models.SqlServerDatabaseResourcePropertiesDatabaseOptions;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class SqlServerDatabasesCreateWithResponseMockTests {
    @Test
    public void testCreateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"collationName\":\"molpcqyde\",\"databaseCreationDate\":\"2021-07-31T12:16:52Z\",\"compatibilityLevel\":2043090852,\"sizeMB\":11.2455845,\"logFileSizeMB\":52.77306,\"dataFileSizeMB\":42.50353,\"spaceAvailableMB\":94.45192,\"state\":\"Online\",\"isReadOnly\":false,\"recoveryMode\":\"Simple\",\"databaseOptions\":{\"isAutoCloseOn\":true,\"isAutoShrinkOn\":false,\"isAutoCreateStatsOn\":true,\"isAutoUpdateStatsOn\":false,\"isRemoteDataArchiveEnabled\":false,\"isMemoryOptimizationEnabled\":true,\"isEncrypted\":true,\"isTrustworthyOn\":true},\"backupInformation\":{\"lastFullBackup\":\"2021-01-20T23:35:05Z\",\"lastLogBackup\":\"2021-01-10T22:48:54Z\"},\"backupPolicy\":{\"retentionPeriodDays\":1780476421,\"fullBackupDays\":673654940,\"differentialBackupHours\":12,\"transactionLogBackupMinutes\":1623355962},\"earliestRestoreDate\":\"2020-12-23T08:12:18Z\",\"createMode\":\"Default\",\"sourceDatabaseId\":\"vhhdaurgho\",\"vmId\":\"aexbkhxjxjo\",\"restorePointInTime\":\"2021-05-23T23:44:51Z\",\"provisioningState\":\"xrkdknkobektm\",\"lastDatabaseUploadTime\":\"2021-06-25T18:13:44Z\",\"migration\":{\"assessment\":{\"assessmentUploadTime\":\"2021-04-11T17:43:47Z\",\"databaseAssessments\":[{},{},{},{}],\"targetReadiness\":{\"azureSqlDatabase\":{},\"azureSqlManagedInstance\":{},\"azureSqlVirtualMachine\":{}}}}},\"location\":\"wcdgzsez\",\"tags\":{\"abmdlqj\":\"keuair\"},\"id\":\"edpf\",\"name\":\"xlhupmomihzbdnp\",\"type\":\"pkcdpreyxely\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AzureArcDataManager manager = AzureArcDataManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        SqlServerDatabaseResource response = manager.sqlServerDatabases()
            .define("caydbjzcqymlcfnz")
            .withRegion("jblcdrmyfcemftz")
            .withExistingSqlServerInstance("bnhrxlelfjhkeiz", "pihtdmiwjekpt")
            .withProperties(new SqlServerDatabaseResourceProperties().withCollationName("hsurlgw")
                .withDatabaseCreationDate(OffsetDateTime.parse("2021-01-05T21:40:50Z"))
                .withCompatibilityLevel(185321577)
                .withSizeMB(40.636528F)
                .withLogFileSizeMB(79.10955F)
                .withDataFileSizeMB(2.1918476F)
                .withSpaceAvailableMB(94.330505F)
                .withState(DatabaseState.RESTORING)
                .withIsReadOnly(true)
                .withRecoveryMode(RecoveryMode.SIMPLE)
                .withDatabaseOptions(new SqlServerDatabaseResourcePropertiesDatabaseOptions().withIsAutoCloseOn(true)
                    .withIsAutoShrinkOn(true)
                    .withIsAutoCreateStatsOn(false)
                    .withIsAutoUpdateStatsOn(true)
                    .withIsRemoteDataArchiveEnabled(true)
                    .withIsMemoryOptimizationEnabled(true)
                    .withIsEncrypted(true)
                    .withIsTrustworthyOn(true))
                .withBackupInformation(new SqlServerDatabaseResourcePropertiesBackupInformation()
                    .withLastFullBackup(OffsetDateTime.parse("2021-05-12T20:17:01Z"))
                    .withLastLogBackup(OffsetDateTime.parse("2021-01-09T02:27:22Z")))
                .withBackupPolicy(new BackupPolicy().withRetentionPeriodDays(741960981)
                    .withFullBackupDays(688757979)
                    .withDifferentialBackupHours(DifferentialBackupHours.ONE_TWO)
                    .withTransactionLogBackupMinutes(447595021))
                .withCreateMode(DatabaseCreateMode.DEFAULT)
                .withSourceDatabaseId("kzfzqxjosho")
                .withRestorePointInTime(OffsetDateTime.parse("2021-09-12T20:17:39Z"))
                .withMigration(new DataBaseMigration().withAssessment(new DataBaseMigrationAssessment())))
            .withTags(mapOf("ugekdfqn", "kya", "owrczfjjnnuxxr", "ttw", "frhjulrsulwzp", "kmhmnulwempdc"))
            .create();

        Assertions.assertEquals("wcdgzsez", response.location());
        Assertions.assertEquals("keuair", response.tags().get("abmdlqj"));
        Assertions.assertEquals("molpcqyde", response.properties().collationName());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-31T12:16:52Z"),
            response.properties().databaseCreationDate());
        Assertions.assertEquals(2043090852, response.properties().compatibilityLevel());
        Assertions.assertEquals(11.2455845F, response.properties().sizeMB());
        Assertions.assertEquals(52.77306F, response.properties().logFileSizeMB());
        Assertions.assertEquals(42.50353F, response.properties().dataFileSizeMB());
        Assertions.assertEquals(94.45192F, response.properties().spaceAvailableMB());
        Assertions.assertEquals(DatabaseState.ONLINE, response.properties().state());
        Assertions.assertFalse(response.properties().isReadOnly());
        Assertions.assertEquals(RecoveryMode.SIMPLE, response.properties().recoveryMode());
        Assertions.assertTrue(response.properties().databaseOptions().isAutoCloseOn());
        Assertions.assertFalse(response.properties().databaseOptions().isAutoShrinkOn());
        Assertions.assertTrue(response.properties().databaseOptions().isAutoCreateStatsOn());
        Assertions.assertFalse(response.properties().databaseOptions().isAutoUpdateStatsOn());
        Assertions.assertFalse(response.properties().databaseOptions().isRemoteDataArchiveEnabled());
        Assertions.assertTrue(response.properties().databaseOptions().isMemoryOptimizationEnabled());
        Assertions.assertTrue(response.properties().databaseOptions().isEncrypted());
        Assertions.assertTrue(response.properties().databaseOptions().isTrustworthyOn());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-20T23:35:05Z"),
            response.properties().backupInformation().lastFullBackup());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-10T22:48:54Z"),
            response.properties().backupInformation().lastLogBackup());
        Assertions.assertEquals(1780476421, response.properties().backupPolicy().retentionPeriodDays());
        Assertions.assertEquals(673654940, response.properties().backupPolicy().fullBackupDays());
        Assertions.assertEquals(DifferentialBackupHours.ONE_TWO,
            response.properties().backupPolicy().differentialBackupHours());
        Assertions.assertEquals(1623355962, response.properties().backupPolicy().transactionLogBackupMinutes());
        Assertions.assertEquals(DatabaseCreateMode.DEFAULT, response.properties().createMode());
        Assertions.assertEquals("vhhdaurgho", response.properties().sourceDatabaseId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-23T23:44:51Z"),
            response.properties().restorePointInTime());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
