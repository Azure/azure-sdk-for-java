// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurearcdata.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.azurearcdata.models.K8SResourceRequirements;
import com.azure.resourcemanager.azurearcdata.models.K8SSchedulingOptions;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class K8SSchedulingOptionsTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        K8SSchedulingOptions model = BinaryData.fromString(
            "{\"resources\":{\"requests\":{\"i\":\"fsfksymddyst\"},\"limits\":{\"vyifqrvkdvjsl\":\"hqyudxorrqnbpoc\",\"vdfwatkpn\":\"rm\",\"wiqzbqjvsovmyo\":\"ulexxbczwtr\",\"zdobpxjmflbvvnch\":\"acspkwl\"},\"\":{\"ajiwkuo\":\"dataciwwzjuqkhr\"}},\"\":{\"sauuimj\":\"datakg\",\"rfbyaosvexcso\":\"datavxieduugidyj\",\"vleggzfbuhfmvfax\":\"datapclhocohslk\"}}")
            .toObject(K8SSchedulingOptions.class);
        Assertions.assertEquals("fsfksymddyst", model.resources().requests().get("i"));
        Assertions.assertEquals("hqyudxorrqnbpoc", model.resources().limits().get("vyifqrvkdvjsl"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        K8SSchedulingOptions model = new K8SSchedulingOptions()
            .withResources(new K8SResourceRequirements().withRequests(mapOf("i", "fsfksymddyst"))
                .withLimits(mapOf("vyifqrvkdvjsl", "hqyudxorrqnbpoc", "vdfwatkpn", "rm", "wiqzbqjvsovmyo",
                    "ulexxbczwtr", "zdobpxjmflbvvnch", "acspkwl"))
                .withAdditionalProperties(mapOf()))
            .withAdditionalProperties(mapOf());
        model = BinaryData.fromObject(model).toObject(K8SSchedulingOptions.class);
        Assertions.assertEquals("fsfksymddyst", model.resources().requests().get("i"));
        Assertions.assertEquals("hqyudxorrqnbpoc", model.resources().limits().get("vyifqrvkdvjsl"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
