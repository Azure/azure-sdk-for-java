// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurearcdata.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.azurearcdata.AzureArcDataManager;
import com.azure.resourcemanager.azurearcdata.models.ArcSqlServerAvailabilityMode;
import com.azure.resourcemanager.azurearcdata.models.ArcSqlServerFailoverMode;
import com.azure.resourcemanager.azurearcdata.models.AutomatedBackupPreference;
import com.azure.resourcemanager.azurearcdata.models.AvailabilityGroupCreateUpdateConfiguration;
import com.azure.resourcemanager.azurearcdata.models.AvailabilityGroupCreateUpdateReplicaConfiguration;
import com.azure.resourcemanager.azurearcdata.models.ClusterType;
import com.azure.resourcemanager.azurearcdata.models.ConnectionAuth;
import com.azure.resourcemanager.azurearcdata.models.DbFailover;
import com.azure.resourcemanager.azurearcdata.models.DtcSupport;
import com.azure.resourcemanager.azurearcdata.models.FailureConditionLevel;
import com.azure.resourcemanager.azurearcdata.models.PrimaryAllowConnections;
import com.azure.resourcemanager.azurearcdata.models.SecondaryAllowConnections;
import com.azure.resourcemanager.azurearcdata.models.SeedingMode;
import com.azure.resourcemanager.azurearcdata.models.SqlAvailabilityGroupIpV4AddressesAndMasksPropertiesItem;
import com.azure.resourcemanager.azurearcdata.models.SqlAvailabilityGroupStaticIpListenerProperties;
import com.azure.resourcemanager.azurearcdata.models.SqlServerAvailabilityGroupResource;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class SqlServerAvailabilityGroupsCreateAvailabilityGroupMockTests {
    @Test
    public void testCreateAvailabilityGroup() throws Exception {
        String responseStr
            = "{\"properties\":{\"availabilityGroupId\":\"qfgqkayejsxtlg\",\"serverName\":\"wf\",\"instanceName\":\"ii\",\"vmId\":\"ijjcea\",\"collectionTimestamp\":\"2021-04-09T05:32:43Z\",\"info\":{\"failureConditionLevel\":1574074234,\"healthCheckTimeout\":604914191,\"automatedBackupPreferenceDescription\":\"am\",\"version\":664726585,\"basicFeatures\":true,\"dtcSupport\":false,\"dbFailover\":true,\"isDistributed\":true,\"clusterTypeDescription\":\"etyvkunmignohi\",\"requiredSynchronizedSecondariesToCommit\":1416701413,\"isContained\":true,\"primaryReplica\":\"jwpindedvabbxbh\",\"primaryRecoveryHealthDescription\":\"dei\",\"secondaryRecoveryHealthDescription\":\"jywfcfxzirzzih\",\"synchronizationHealthDescription\":\"ypusuvjslczwci\",\"replicationPartnerType\":\"AzureSQLManagedInstance\",\"listener\":{\"dnsName\":\"lfryvdmvxadqac\",\"ipV4AddressesAndMasks\":[{}],\"ipV6Addresses\":[\"wbabgfbktyjmf\"],\"port\":182959035}},\"replicas\":{\"value\":[{\"replicaId\":\"kfrbzgowoxqmjea\",\"replicaName\":\"xnyqgxhlusr\",\"replicaResourceId\":\"i\",\"configure\":{},\"state\":{}}],\"nextLink\":\"ceagbjqvlsumywz\"},\"databases\":{\"value\":[{\"databaseName\":\"onoyjf\",\"replicaName\":\"puby\",\"isLocal\":false,\"isPrimaryReplica\":false,\"synchronizationStateDescription\":\"ke\",\"isCommitParticipant\":false,\"synchronizationHealthDescription\":\"opemtu\",\"databaseStateDescription\":\"ujlyegq\",\"isSuspended\":true,\"suspendReasonDescription\":\"gflqqbtnyjp\"}],\"nextLink\":\"xdb\"},\"provisioningState\":\"Succeeded\"},\"location\":\"ot\",\"tags\":{\"zwjiqullq\":\"uhvajmailfemjjza\",\"yeofltfnnxrkad\":\"bdmvrscmqerndbr\"},\"id\":\"fynn\",\"name\":\"muii\",\"type\":\"ri\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AzureArcDataManager manager = AzureArcDataManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        SqlServerAvailabilityGroupResource response = manager.sqlServerAvailabilityGroups()
            .createAvailabilityGroup("xhmw", "dbckyo",
                new AvailabilityGroupCreateUpdateConfiguration().withAvailabilityGroupName("xkxhnegknjzrbhtm")
                    .withReplicas(Arrays.asList(
                        new AvailabilityGroupCreateUpdateReplicaConfiguration().withServerInstance("ukaobrlbpgsnbag")
                            .withEndpointName("hjhgem")
                            .withEndpointUrl("wakywalhjymxcgq")
                            .withEndpointAuthenticationMode(ConnectionAuth.CERTIFICATE_WINDOWS_KERBEROS)
                            .withCertificateName("rclsso")
                            .withEndpointConnectLogin("omevtfycn")
                            .withAvailabilityMode(ArcSqlServerAvailabilityMode.ASYNCHRONOUS_COMMIT)
                            .withFailoverMode(ArcSqlServerFailoverMode.NONE)
                            .withSeedingMode(SeedingMode.AUTOMATIC)
                            .withBackupPriority(498307791)
                            .withSecondaryRoleAllowConnections(SecondaryAllowConnections.READ_ONLY)
                            .withSecondaryRoleReadOnlyRoutingUrl("iiy")
                            .withPrimaryRoleAllowConnections(PrimaryAllowConnections.ALL)
                            .withPrimaryRoleReadOnlyRoutingList(Arrays.asList("izbcufqbvntnr"))
                            .withSessionTimeout(1101568024),
                        new AvailabilityGroupCreateUpdateReplicaConfiguration().withServerInstance("orhc")
                            .withEndpointName("xgnlykmx")
                            .withEndpointUrl("wzvmdoksqd")
                            .withEndpointAuthenticationMode(ConnectionAuth.WINDOWS_NEGOTIATE)
                            .withCertificateName("wxlboncqbazqicq")
                            .withEndpointConnectLogin("ygtvxbyjanepub")
                            .withAvailabilityMode(ArcSqlServerAvailabilityMode.ASYNCHRONOUS_COMMIT)
                            .withFailoverMode(ArcSqlServerFailoverMode.MANUAL)
                            .withSeedingMode(SeedingMode.MANUAL)
                            .withBackupPriority(1648733801)
                            .withSecondaryRoleAllowConnections(SecondaryAllowConnections.ALL)
                            .withSecondaryRoleReadOnlyRoutingUrl("detv")
                            .withPrimaryRoleAllowConnections(PrimaryAllowConnections.READ_WRITE)
                            .withPrimaryRoleReadOnlyRoutingList(Arrays.asList("xuwsai", "m", "wnosbzlehgcvkbck"))
                            .withSessionTimeout(682985543),
                        new AvailabilityGroupCreateUpdateReplicaConfiguration().withServerInstance("gjyy")
                            .withEndpointName("velsz")
                            .withEndpointUrl("qzevxoqeint")
                            .withEndpointAuthenticationMode(ConnectionAuth.CERTIFICATE_WINDOWS_KERBEROS)
                            .withCertificateName("jglzoblqwaafrq")
                            .withEndpointConnectLogin("hmzyqbhdvafjrqpj")
                            .withAvailabilityMode(ArcSqlServerAvailabilityMode.SYNCHRONOUS_COMMIT)
                            .withFailoverMode(ArcSqlServerFailoverMode.AUTOMATIC)
                            .withSeedingMode(SeedingMode.MANUAL)
                            .withBackupPriority(260737060)
                            .withSecondaryRoleAllowConnections(SecondaryAllowConnections.ALL)
                            .withSecondaryRoleReadOnlyRoutingUrl("z")
                            .withPrimaryRoleAllowConnections(PrimaryAllowConnections.ALL)
                            .withPrimaryRoleReadOnlyRoutingList(
                                Arrays.asList("nrzorpd", "tbqctqjfgx", "saetgzdgvpyig", "aqqilzdcduwjoed"))
                            .withSessionTimeout(1511576638)))
                    .withDatabases(Arrays.asList("aifpaurwwgil", "jqqacdmkx", "xdcvjwcy"))
                    .withAutomatedBackupPreference(AutomatedBackupPreference.SECONDARY)
                    .withFailureConditionLevel(FailureConditionLevel.TWO)
                    .withHealthCheckTimeout(919883073)
                    .withDbFailover(DbFailover.OFF)
                    .withDtcSupport(DtcSupport.PER_DB)
                    .withRequiredSynchronizedSecondariesToCommit(1522504135)
                    .withClusterType(ClusterType.WSFC)
                    .withListener(new SqlAvailabilityGroupStaticIpListenerProperties().withDnsName("siw")
                        .withIpV4AddressesAndMasks(Arrays
                            .asList(new SqlAvailabilityGroupIpV4AddressesAndMasksPropertiesItem().withIpAddress("p")
                                .withMask("zzwvywrgyng")))
                        .withIpV6Addresses(Arrays.asList("rpxncaki", "aondjrkclamgg", "vlmfej", "oqeykglt"))
                        .withPort(929221188)),
                com.azure.core.util.Context.NONE);

        Assertions.assertEquals("ot", response.location());
        Assertions.assertEquals("uhvajmailfemjjza", response.tags().get("zwjiqullq"));
        Assertions.assertEquals(1574074234, response.properties().info().failureConditionLevel());
        Assertions.assertEquals(604914191, response.properties().info().healthCheckTimeout());
        Assertions.assertTrue(response.properties().info().basicFeatures());
        Assertions.assertFalse(response.properties().info().dtcSupport());
        Assertions.assertTrue(response.properties().info().dbFailover());
        Assertions.assertTrue(response.properties().info().isDistributed());
        Assertions.assertEquals(1416701413, response.properties().info().requiredSynchronizedSecondariesToCommit());
        Assertions.assertTrue(response.properties().info().isContained());
        Assertions.assertEquals("lfryvdmvxadqac", response.properties().info().listener().dnsName());
        Assertions.assertEquals("wbabgfbktyjmf", response.properties().info().listener().ipV6Addresses().get(0));
        Assertions.assertEquals(182959035, response.properties().info().listener().port());
        Assertions.assertEquals("xnyqgxhlusr", response.properties().replicas().value().get(0).replicaName());
        Assertions.assertEquals("i", response.properties().replicas().value().get(0).replicaResourceId());
        Assertions.assertEquals("onoyjf", response.properties().databases().value().get(0).databaseName());
    }
}
