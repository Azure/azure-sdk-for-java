// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurearcdata.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.azurearcdata.AzureArcDataManager;
import com.azure.resourcemanager.azurearcdata.models.ExecutionState;
import com.azure.resourcemanager.azurearcdata.models.JobStatus;
import com.azure.resourcemanager.azurearcdata.models.LastExecutionStatus;
import com.azure.resourcemanager.azurearcdata.models.Result;
import com.azure.resourcemanager.azurearcdata.models.SequencerState;
import com.azure.resourcemanager.azurearcdata.models.SqlServerInstanceJobsStatusRequest;
import com.azure.resourcemanager.azurearcdata.models.SqlServerInstanceJobsStatusResponse;
import com.azure.resourcemanager.azurearcdata.models.State;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class SqlServerInstancesGetJobsStatusWithResponseMockTests {
    @Test
    public void testGetJobsStatusWithResponse() throws Exception {
        String responseStr
            = "{\"jobsStatus\":[{\"id\":\"ymzvla\",\"instanceName\":\"pbh\",\"jobStatus\":\"NotStarted\",\"jobException\":\"sgnyyuuzivensrp\",\"backgroundJob\":{\"state\":\"Enabled\",\"executionState\":\"Running\",\"startTime\":\"2021-01-20T21:25:18Z\",\"endTime\":\"2021-07-28T16:53:22Z\",\"lastExecutionStatus\":\"Completed\",\"lastExecutionTime\":\"2021-07-18T08:21:02Z\"},\"sequencerActions\":[{\"actionId\":\"sksrfhfvolmknbn\",\"state\":\"NotStarted\",\"result\":\"TimedOut\"}]},{\"id\":\"mp\",\"instanceName\":\"qa\",\"jobStatus\":\"InProgress\",\"jobException\":\"brttuiacl\",\"backgroundJob\":{\"state\":\"Deleted\",\"executionState\":\"Running\",\"startTime\":\"2021-04-18T23:10:57Z\",\"endTime\":\"2021-04-17T02:43:37Z\",\"lastExecutionStatus\":\"Rescheduled\",\"lastExecutionTime\":\"2021-04-24T08:05:28Z\"},\"sequencerActions\":[{\"actionId\":\"t\",\"state\":\"ExecutingAction\",\"result\":\"Succeeded\"},{\"actionId\":\"pvn\",\"state\":\"NotStarted\",\"result\":\"NotCompleted\"},{\"actionId\":\"k\",\"state\":\"Completed\",\"result\":\"Failed\"},{\"actionId\":\"zwxjlm\",\"state\":\"NotStarted\",\"result\":\"TimedOut\"}]}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AzureArcDataManager manager = AzureArcDataManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        SqlServerInstanceJobsStatusResponse response
            = manager.sqlServerInstances()
                .getJobsStatusWithResponse("cvcrrp", "jttbstv",
                    new SqlServerInstanceJobsStatusRequest().withFeatureName("aqnrmvvfkoxmlg")
                        .withJobType("tuidvrmazlpd"),
                    com.azure.core.util.Context.NONE)
                .getValue();

        Assertions.assertEquals("ymzvla", response.jobsStatus().get(0).id());
        Assertions.assertEquals("pbh", response.jobsStatus().get(0).instanceName());
        Assertions.assertEquals(JobStatus.NOT_STARTED, response.jobsStatus().get(0).jobStatus());
        Assertions.assertEquals("sgnyyuuzivensrp", response.jobsStatus().get(0).jobException());
        Assertions.assertEquals(State.ENABLED, response.jobsStatus().get(0).backgroundJob().state());
        Assertions.assertEquals(ExecutionState.RUNNING, response.jobsStatus().get(0).backgroundJob().executionState());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-20T21:25:18Z"),
            response.jobsStatus().get(0).backgroundJob().startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-28T16:53:22Z"),
            response.jobsStatus().get(0).backgroundJob().endTime());
        Assertions.assertEquals(LastExecutionStatus.COMPLETED,
            response.jobsStatus().get(0).backgroundJob().lastExecutionStatus());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-18T08:21:02Z"),
            response.jobsStatus().get(0).backgroundJob().lastExecutionTime());
        Assertions.assertEquals("sksrfhfvolmknbn", response.jobsStatus().get(0).sequencerActions().get(0).actionId());
        Assertions.assertEquals(SequencerState.NOT_STARTED,
            response.jobsStatus().get(0).sequencerActions().get(0).state());
        Assertions.assertEquals(Result.TIMED_OUT, response.jobsStatus().get(0).sequencerActions().get(0).result());
    }
}
