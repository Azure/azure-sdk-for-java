// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurearcdata.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.azurearcdata.AzureArcDataManager;
import com.azure.resourcemanager.azurearcdata.models.ArcSqlServerAvailabilityMode;
import com.azure.resourcemanager.azurearcdata.models.ArcSqlServerFailoverMode;
import com.azure.resourcemanager.azurearcdata.models.DistributedAvailabilityGroupCreateUpdateAvailabilityGroupCertificateConfiguration;
import com.azure.resourcemanager.azurearcdata.models.DistributedAvailabilityGroupCreateUpdateAvailabilityGroupConfiguration;
import com.azure.resourcemanager.azurearcdata.models.DistributedAvailabilityGroupCreateUpdateConfiguration;
import com.azure.resourcemanager.azurearcdata.models.SeedingMode;
import com.azure.resourcemanager.azurearcdata.models.SqlServerAvailabilityGroupResource;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class SqlServerAvailabilityGroupsCreateDistributedAvailabilityGroupMockTests {
    @Test
    public void testCreateDistributedAvailabilityGroup() throws Exception {
        String responseStr
            = "{\"properties\":{\"availabilityGroupId\":\"aswvppis\",\"serverName\":\"zlgcndhzxrrf\",\"instanceName\":\"srhkhgsnxuwwkpph\",\"vmId\":\"sbzxl\",\"collectionTimestamp\":\"2021-03-10T20:23:31Z\",\"info\":{\"failureConditionLevel\":95193957,\"healthCheckTimeout\":108090493,\"automatedBackupPreferenceDescription\":\"clwzacnmwpfsu\",\"version\":2080392562,\"basicFeatures\":true,\"dtcSupport\":true,\"dbFailover\":true,\"isDistributed\":false,\"clusterTypeDescription\":\"yfp\",\"requiredSynchronizedSecondariesToCommit\":495775469,\"isContained\":false,\"primaryReplica\":\"zxlhdjzqdcadwv\",\"primaryRecoveryHealthDescription\":\"ozjiihj\",\"secondaryRecoveryHealthDescription\":\"ybmrzoepnxwd\",\"synchronizationHealthDescription\":\"njkgvfnmx\",\"replicationPartnerType\":\"AzureSQLVM\",\"listener\":{\"dnsName\":\"ftibtyibuyvpirfq\",\"ipV4AddressesAndMasks\":[{}],\"ipV6Addresses\":[\"oowsbe\"],\"port\":335648233}},\"replicas\":{\"value\":[{\"replicaId\":\"xbhxvucnulgmnhj\",\"replicaName\":\"dyznfajsvks\",\"replicaResourceId\":\"qozzkivyhjrliizj\",\"configure\":{},\"state\":{}},{\"replicaId\":\"fhefk\",\"replicaName\":\"bsolronqqlmg\",\"replicaResourceId\":\"qxsjxte\",\"configure\":{},\"state\":{}}],\"nextLink\":\"vuqbozoo\"},\"databases\":{\"value\":[{\"databaseName\":\"arkuzl\",\"replicaName\":\"nndtsnxa\",\"isLocal\":true,\"isPrimaryReplica\":false,\"synchronizationStateDescription\":\"hd\",\"isCommitParticipant\":false,\"synchronizationHealthDescription\":\"ckze\",\"databaseStateDescription\":\"xak\",\"isSuspended\":true,\"suspendReasonDescription\":\"ymx\"},{\"databaseName\":\"abjkdtfohfao\",\"replicaName\":\"vkiwrsiwdyjqu\",\"isLocal\":false,\"isPrimaryReplica\":false,\"synchronizationStateDescription\":\"aueekcsueh\",\"isCommitParticipant\":true,\"synchronizationHealthDescription\":\"acbcb\",\"databaseStateDescription\":\"dlqidywmhmp\",\"isSuspended\":false,\"suspendReasonDescription\":\"lkfbnrqqxvztpb\"},{\"databaseName\":\"nqtxjtomalswbnf\",\"replicaName\":\"epl\",\"isLocal\":false,\"isPrimaryReplica\":false,\"synchronizationStateDescription\":\"f\",\"isCommitParticipant\":false,\"synchronizationHealthDescription\":\"eexahvmywhsbrc\",\"databaseStateDescription\":\"ycs\",\"isSuspended\":false,\"suspendReasonDescription\":\"voaqajuvehzptdmk\"},{\"databaseName\":\"bhmpfulubefgybp\",\"replicaName\":\"bfununmpzkrv\",\"isLocal\":true,\"isPrimaryReplica\":true,\"synchronizationStateDescription\":\"schlzvfictnkj\",\"isCommitParticipant\":false,\"synchronizationHealthDescription\":\"wnphbkgfyrto\",\"databaseStateDescription\":\"hmjpjscdfpdqwtyg\",\"isSuspended\":true,\"suspendReasonDescription\":\"mseharx\"}],\"nextLink\":\"vqnrxtmbpj\"},\"provisioningState\":\"Succeeded\"},\"location\":\"pakftngatwm\",\"tags\":{\"rymdwmf\":\"u\",\"ldrlefgnaavua\":\"hpycvjqdvdwkq\"},\"id\":\"n\",\"name\":\"etaoutnpdc\",\"type\":\"uhspfefyihduy\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AzureArcDataManager manager = AzureArcDataManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        SqlServerAvailabilityGroupResource response = manager.sqlServerAvailabilityGroups()
            .createDistributedAvailabilityGroup("fohyk", "kxbbcbrwjiutgnj",
                new DistributedAvailabilityGroupCreateUpdateConfiguration().withAvailabilityGroupName("beewoi")
                    .withPrimaryAvailabilityGroup(
                        new DistributedAvailabilityGroupCreateUpdateAvailabilityGroupConfiguration()
                            .withAvailabilityGroup("vzbjuyrsrzi")
                            .withListenerUrl("tixgbd")
                            .withAvailabilityMode(ArcSqlServerAvailabilityMode.SYNCHRONOUS_COMMIT)
                            .withFailoverMode(ArcSqlServerFailoverMode.EXTERNAL)
                            .withSeedingMode(SeedingMode.AUTOMATIC)
                            .withCertificateConfiguration(
                                new DistributedAvailabilityGroupCreateUpdateAvailabilityGroupCertificateConfiguration()
                                    .withCertificateName("apezkiswqjmdghs")))
                    .withSecondaryAvailabilityGroup(
                        new DistributedAvailabilityGroupCreateUpdateAvailabilityGroupConfiguration()
                            .withAvailabilityGroup("ry")
                            .withListenerUrl("ufptb")
                            .withAvailabilityMode(ArcSqlServerAvailabilityMode.SYNCHRONOUS_COMMIT)
                            .withFailoverMode(ArcSqlServerFailoverMode.NONE)
                            .withSeedingMode(SeedingMode.MANUAL)
                            .withCertificateConfiguration(
                                new DistributedAvailabilityGroupCreateUpdateAvailabilityGroupCertificateConfiguration()
                                    .withCertificateName("yqv"))),
                com.azure.core.util.Context.NONE);

        Assertions.assertEquals("pakftngatwm", response.location());
        Assertions.assertEquals("u", response.tags().get("rymdwmf"));
        Assertions.assertEquals(95193957, response.properties().info().failureConditionLevel());
        Assertions.assertEquals(108090493, response.properties().info().healthCheckTimeout());
        Assertions.assertTrue(response.properties().info().basicFeatures());
        Assertions.assertTrue(response.properties().info().dtcSupport());
        Assertions.assertTrue(response.properties().info().dbFailover());
        Assertions.assertFalse(response.properties().info().isDistributed());
        Assertions.assertEquals(495775469, response.properties().info().requiredSynchronizedSecondariesToCommit());
        Assertions.assertFalse(response.properties().info().isContained());
        Assertions.assertEquals("ftibtyibuyvpirfq", response.properties().info().listener().dnsName());
        Assertions.assertEquals("oowsbe", response.properties().info().listener().ipV6Addresses().get(0));
        Assertions.assertEquals(335648233, response.properties().info().listener().port());
        Assertions.assertEquals("dyznfajsvks", response.properties().replicas().value().get(0).replicaName());
        Assertions.assertEquals("qozzkivyhjrliizj",
            response.properties().replicas().value().get(0).replicaResourceId());
        Assertions.assertEquals("arkuzl", response.properties().databases().value().get(0).databaseName());
    }
}
