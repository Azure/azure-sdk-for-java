// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurearcdata.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.azurearcdata.AzureArcDataManager;
import com.azure.resourcemanager.azurearcdata.models.AvailabilityGroupConfigure;
import com.azure.resourcemanager.azurearcdata.models.AvailabilityGroupInfo;
import com.azure.resourcemanager.azurearcdata.models.AvailabilityGroupState;
import com.azure.resourcemanager.azurearcdata.models.SqlAvailabilityGroupDatabaseReplicaResourceProperties;
import com.azure.resourcemanager.azurearcdata.models.SqlAvailabilityGroupIpV4AddressesAndMasksPropertiesItem;
import com.azure.resourcemanager.azurearcdata.models.SqlAvailabilityGroupReplicaResourceProperties;
import com.azure.resourcemanager.azurearcdata.models.SqlAvailabilityGroupStaticIpListenerProperties;
import com.azure.resourcemanager.azurearcdata.models.SqlServerAvailabilityGroupResource;
import com.azure.resourcemanager.azurearcdata.models.SqlServerAvailabilityGroupResourceProperties;
import com.azure.resourcemanager.azurearcdata.models.SqlServerAvailabilityGroupResourcePropertiesDatabases;
import com.azure.resourcemanager.azurearcdata.models.SqlServerAvailabilityGroupResourcePropertiesReplicas;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class SqlServerAvailabilityGroupsCreateWithResponseMockTests {
    @Test
    public void testCreateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"availabilityGroupId\":\"hskxx\",\"serverName\":\"nsbvr\",\"instanceName\":\"qgvtojrulfu\",\"vmId\":\"ejrthcfjzhxlyub\",\"collectionTimestamp\":\"2021-01-15T11:35:19Z\",\"info\":{\"failureConditionLevel\":44304428,\"healthCheckTimeout\":1823043266,\"automatedBackupPreferenceDescription\":\"eqmtzzbeqrz\",\"version\":48093118,\"basicFeatures\":true,\"dtcSupport\":false,\"dbFailover\":true,\"isDistributed\":true,\"clusterTypeDescription\":\"rwrsnrhpqatiwk\",\"requiredSynchronizedSecondariesToCommit\":134052535,\"isContained\":true,\"primaryReplica\":\"kvvcsemsvuvdjkq\",\"primaryRecoveryHealthDescription\":\"tqmm\",\"secondaryRecoveryHealthDescription\":\"vrjjxnw\",\"synchronizationHealthDescription\":\"chp\",\"replicationPartnerType\":\"Unknown\",\"listener\":{\"dnsName\":\"hzlxpgfquw\",\"ipV4AddressesAndMasks\":[{}],\"ipV6Addresses\":[\"belwcer\",\"kwbpjxljtxbusq\",\"bxxn\"],\"port\":132768417}},\"replicas\":{\"value\":[{\"replicaId\":\"gbdgzp\",\"replicaName\":\"secnadbuwqrgxf\",\"replicaResourceId\":\"mqiyn\",\"configure\":{},\"state\":{}},{\"replicaId\":\"lln\",\"replicaName\":\"iiwv\",\"replicaResourceId\":\"umxpymdj\",\"configure\":{},\"state\":{}},{\"replicaId\":\"roqvqpilrgu\",\"replicaName\":\"anlduwzorxsb\",\"replicaResourceId\":\"aqklxy\",\"configure\":{},\"state\":{}},{\"replicaId\":\"vfqepd\",\"replicaName\":\"ltuubw\",\"replicaResourceId\":\"pjbowcpj\",\"configure\":{},\"state\":{}}],\"nextLink\":\"gixexkydfbwlj\"},\"databases\":{\"value\":[{\"databaseName\":\"rkjd\",\"replicaName\":\"r\",\"isLocal\":false,\"isPrimaryReplica\":true,\"synchronizationStateDescription\":\"tcvbiiftk\",\"isCommitParticipant\":false,\"synchronizationHealthDescription\":\"dnkefgm\",\"databaseStateDescription\":\"hcebuvczldbglzo\",\"isSuspended\":false,\"suspendReasonDescription\":\"aqgzekajclyzgs\"},{\"databaseName\":\"rbjgmn\",\"replicaName\":\"otvmrxk\",\"isLocal\":true,\"isPrimaryReplica\":true,\"synchronizationStateDescription\":\"jbhvhdiqayflu\",\"isCommitParticipant\":false,\"synchronizationHealthDescription\":\"snuudtelvhyibdr\",\"databaseStateDescription\":\"swhb\",\"isSuspended\":true,\"suspendReasonDescription\":\"y\"},{\"databaseName\":\"wtjoxz\",\"replicaName\":\"wfqchvcz\",\"isLocal\":false,\"isPrimaryReplica\":true,\"synchronizationStateDescription\":\"tagfyvrtpqp\",\"isCommitParticipant\":true,\"synchronizationHealthDescription\":\"cgkrepdqhqy\",\"databaseStateDescription\":\"qwemvxqabckmzeo\",\"isSuspended\":false,\"suspendReasonDescription\":\"greohtwhlpuzjp\"}],\"nextLink\":\"eznzangprbfaxyxz\"},\"provisioningState\":\"ciphmsexr\"},\"location\":\"rndktx\",\"tags\":{\"gpkrie\":\"nfee\",\"kyfwnwpiwxeiicr\":\"bgnixxoww\"},\"id\":\"p\",\"name\":\"pk\",\"type\":\"dm\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AzureArcDataManager manager = AzureArcDataManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        SqlServerAvailabilityGroupResource response = manager.sqlServerAvailabilityGroups()
            .define("nsyby")
            .withRegion("xpwwzt")
            .withExistingSqlServerInstance("zlpykcfazzwjcay", "rzrr")
            .withProperties(new SqlServerAvailabilityGroupResourceProperties()
                .withInfo(new AvailabilityGroupInfo().withFailureConditionLevel(2029772595)
                    .withHealthCheckTimeout(332324374)
                    .withBasicFeatures(false)
                    .withDtcSupport(false)
                    .withDbFailover(true)
                    .withIsDistributed(true)
                    .withRequiredSynchronizedSecondariesToCommit(1447146223)
                    .withIsContained(false)
                    .withListener(new SqlAvailabilityGroupStaticIpListenerProperties().withDnsName("pazwug")
                        .withIpV4AddressesAndMasks(
                            Arrays.asList(new SqlAvailabilityGroupIpV4AddressesAndMasksPropertiesItem()))
                        .withIpV6Addresses(Arrays.asList("jo", "felhldiuhzzgqlm", "aewzgiudjp"))
                        .withPort(863593075)))
                .withReplicas(new SqlServerAvailabilityGroupResourcePropertiesReplicas().withValue(
                    Arrays.asList(new SqlAvailabilityGroupReplicaResourceProperties().withReplicaName("qdgcrux")
                        .withReplicaResourceId("inymmqgwokmikp")
                        .withConfigure(new AvailabilityGroupConfigure())
                        .withState(new AvailabilityGroupState()))))
                .withDatabases(new SqlServerAvailabilityGroupResourcePropertiesDatabases().withValue(Arrays.asList(
                    new SqlAvailabilityGroupDatabaseReplicaResourceProperties().withDatabaseName("hpphthdklm")))))
            .withTags(mapOf("ccnaov", "kkhtgfredmlscgrl", "yotgkwsxnsrqorc", "owazhpabacom", "jxcxxq", "enmvcebxeetq"))
            .create();

        Assertions.assertEquals("rndktx", response.location());
        Assertions.assertEquals("nfee", response.tags().get("gpkrie"));
        Assertions.assertEquals(44304428, response.properties().info().failureConditionLevel());
        Assertions.assertEquals(1823043266, response.properties().info().healthCheckTimeout());
        Assertions.assertTrue(response.properties().info().basicFeatures());
        Assertions.assertFalse(response.properties().info().dtcSupport());
        Assertions.assertTrue(response.properties().info().dbFailover());
        Assertions.assertTrue(response.properties().info().isDistributed());
        Assertions.assertEquals(134052535, response.properties().info().requiredSynchronizedSecondariesToCommit());
        Assertions.assertTrue(response.properties().info().isContained());
        Assertions.assertEquals("hzlxpgfquw", response.properties().info().listener().dnsName());
        Assertions.assertEquals("belwcer", response.properties().info().listener().ipV6Addresses().get(0));
        Assertions.assertEquals(132768417, response.properties().info().listener().port());
        Assertions.assertEquals("secnadbuwqrgxf", response.properties().replicas().value().get(0).replicaName());
        Assertions.assertEquals("mqiyn", response.properties().replicas().value().get(0).replicaResourceId());
        Assertions.assertEquals("rkjd", response.properties().databases().value().get(0).databaseName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
