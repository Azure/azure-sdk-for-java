// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurearcdata.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.azurearcdata.AzureArcDataManager;
import com.azure.resourcemanager.azurearcdata.models.DatabaseCreateMode;
import com.azure.resourcemanager.azurearcdata.models.DatabaseState;
import com.azure.resourcemanager.azurearcdata.models.DifferentialBackupHours;
import com.azure.resourcemanager.azurearcdata.models.RecoveryMode;
import com.azure.resourcemanager.azurearcdata.models.SqlServerDatabaseResource;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class SqlServerDatabasesGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"collationName\":\"inwoqartwyxq\",\"databaseCreationDate\":\"2020-12-22T10:03:42Z\",\"compatibilityLevel\":290262937,\"sizeMB\":80.37092,\"logFileSizeMB\":63.352287,\"dataFileSizeMB\":78.51567,\"spaceAvailableMB\":9.985394,\"state\":\"OfflineSecondary\",\"isReadOnly\":true,\"recoveryMode\":\"Full\",\"databaseOptions\":{\"isAutoCloseOn\":false,\"isAutoShrinkOn\":true,\"isAutoCreateStatsOn\":true,\"isAutoUpdateStatsOn\":true,\"isRemoteDataArchiveEnabled\":true,\"isMemoryOptimizationEnabled\":false,\"isEncrypted\":true,\"isTrustworthyOn\":false},\"backupInformation\":{\"lastFullBackup\":\"2021-02-23T05:34:42Z\",\"lastLogBackup\":\"2021-12-04T14:15:44Z\"},\"backupPolicy\":{\"retentionPeriodDays\":1314253621,\"fullBackupDays\":207651145,\"differentialBackupHours\":24,\"transactionLogBackupMinutes\":77902205},\"earliestRestoreDate\":\"2021-07-04T18:00:44Z\",\"createMode\":\"PointInTimeRestore\",\"sourceDatabaseId\":\"clibbfqpsp\",\"vmId\":\"adydg\",\"restorePointInTime\":\"2021-08-08T13:27:57Z\",\"provisioningState\":\"twukex\",\"lastDatabaseUploadTime\":\"2021-07-11T10:40:26Z\",\"migration\":{\"assessment\":{\"assessmentUploadTime\":\"2021-01-15T16:43:14Z\",\"databaseAssessments\":[{},{},{},{}],\"targetReadiness\":{\"azureSqlDatabase\":{},\"azureSqlManagedInstance\":{},\"azureSqlVirtualMachine\":{}}}}},\"location\":\"wg\",\"tags\":{\"vstclg\":\"fqfp\",\"jj\":\"rvwerfwxbsmtb\"},\"id\":\"h\",\"name\":\"ci\",\"type\":\"kwdvbtb\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AzureArcDataManager manager = AzureArcDataManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        SqlServerDatabaseResource response = manager.sqlServerDatabases()
            .getWithResponse("xxij", "skwsdgkj", "yacwrasekwefc", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("wg", response.location());
        Assertions.assertEquals("fqfp", response.tags().get("vstclg"));
        Assertions.assertEquals("inwoqartwyxq", response.properties().collationName());
        Assertions.assertEquals(OffsetDateTime.parse("2020-12-22T10:03:42Z"),
            response.properties().databaseCreationDate());
        Assertions.assertEquals(290262937, response.properties().compatibilityLevel());
        Assertions.assertEquals(80.37092F, response.properties().sizeMB());
        Assertions.assertEquals(63.352287F, response.properties().logFileSizeMB());
        Assertions.assertEquals(78.51567F, response.properties().dataFileSizeMB());
        Assertions.assertEquals(9.985394F, response.properties().spaceAvailableMB());
        Assertions.assertEquals(DatabaseState.OFFLINE_SECONDARY, response.properties().state());
        Assertions.assertTrue(response.properties().isReadOnly());
        Assertions.assertEquals(RecoveryMode.FULL, response.properties().recoveryMode());
        Assertions.assertFalse(response.properties().databaseOptions().isAutoCloseOn());
        Assertions.assertTrue(response.properties().databaseOptions().isAutoShrinkOn());
        Assertions.assertTrue(response.properties().databaseOptions().isAutoCreateStatsOn());
        Assertions.assertTrue(response.properties().databaseOptions().isAutoUpdateStatsOn());
        Assertions.assertTrue(response.properties().databaseOptions().isRemoteDataArchiveEnabled());
        Assertions.assertFalse(response.properties().databaseOptions().isMemoryOptimizationEnabled());
        Assertions.assertTrue(response.properties().databaseOptions().isEncrypted());
        Assertions.assertFalse(response.properties().databaseOptions().isTrustworthyOn());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-23T05:34:42Z"),
            response.properties().backupInformation().lastFullBackup());
        Assertions.assertEquals(OffsetDateTime.parse("2021-12-04T14:15:44Z"),
            response.properties().backupInformation().lastLogBackup());
        Assertions.assertEquals(1314253621, response.properties().backupPolicy().retentionPeriodDays());
        Assertions.assertEquals(207651145, response.properties().backupPolicy().fullBackupDays());
        Assertions.assertEquals(DifferentialBackupHours.TWO_FOUR,
            response.properties().backupPolicy().differentialBackupHours());
        Assertions.assertEquals(77902205, response.properties().backupPolicy().transactionLogBackupMinutes());
        Assertions.assertEquals(DatabaseCreateMode.POINT_IN_TIME_RESTORE, response.properties().createMode());
        Assertions.assertEquals("clibbfqpsp", response.properties().sourceDatabaseId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-08T13:27:57Z"),
            response.properties().restorePointInTime());
    }
}
