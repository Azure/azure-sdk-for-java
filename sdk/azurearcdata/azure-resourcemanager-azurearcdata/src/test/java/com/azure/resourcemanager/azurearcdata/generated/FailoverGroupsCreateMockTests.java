// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurearcdata.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.azurearcdata.AzureArcDataManager;
import com.azure.resourcemanager.azurearcdata.models.FailoverGroupPartnerSyncMode;
import com.azure.resourcemanager.azurearcdata.models.FailoverGroupProperties;
import com.azure.resourcemanager.azurearcdata.models.FailoverGroupResource;
import com.azure.resourcemanager.azurearcdata.models.FailoverGroupSpec;
import com.azure.resourcemanager.azurearcdata.models.InstanceFailoverGroupRole;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class FailoverGroupsCreateMockTests {
    @Test
    public void testCreate() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Succeeded\",\"partnerManagedInstanceId\":\"rdcoxnbkkj\",\"spec\":{\"sharedName\":\"urnnqbnqbpiz\",\"sourceMI\":\"ltgrdogypxrxv\",\"partnerMI\":\"ihwuhvctafsrbxrb\",\"partnerMirroringURL\":\"li\",\"partnerMirroringCert\":\"xihspnxwq\",\"partnerSyncMode\":\"sync\",\"role\":\"force-secondary\",\"agwwrxaom\":\"datawaklsbsbqq\"},\"status\":\"datasgl\",\"oawjqoyueay\":\"datazezkhhltnjadh\",\"lbyrru\":\"databpcms\",\"igdhxiidlo\":\"dataqthwmgnmbscbb\"},\"id\":\"dbwdpyqyybxubmdn\",\"name\":\"fcbqwremjela\",\"type\":\"acigel\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AzureArcDataManager manager = AzureArcDataManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        FailoverGroupResource response = manager.failoverGroups()
            .define("sx")
            .withExistingSqlManagedInstance("rxwtoaukhfkvc", "sizmoae")
            .withProperties(new FailoverGroupProperties().withPartnerManagedInstanceId("ive")
                .withSpec(new FailoverGroupSpec().withSharedName("cgyee")
                    .withSourceMI("ei")
                    .withPartnerMI("psmgo")
                    .withPartnerMirroringUrl("u")
                    .withPartnerMirroringCert("ljdlrgmspl")
                    .withPartnerSyncMode(FailoverGroupPartnerSyncMode.ASYNC)
                    .withRole(InstanceFailoverGroupRole.FORCE_PRIMARY_ALLOW_DATA_LOSS)
                    .withAdditionalProperties(mapOf("yghs", "datawbtaoyp", "pqanxrjkix", "datashhvnewgnxky")))
                .withStatus("datacyl")
                .withAdditionalProperties(mapOf("wmkoisq", "datavxnqmhrpqpd", "provisioningState", "Accepted",
                    "ypobkdqzr", "datassffxuifmc", "jjkhvyomaclu", "datamnsghpxycphdr")))
            .create();

        Assertions.assertEquals("rdcoxnbkkj", response.properties().partnerManagedInstanceId());
        Assertions.assertEquals("urnnqbnqbpiz", response.properties().spec().sharedName());
        Assertions.assertEquals("ltgrdogypxrxv", response.properties().spec().sourceMI());
        Assertions.assertEquals("ihwuhvctafsrbxrb", response.properties().spec().partnerMI());
        Assertions.assertEquals("li", response.properties().spec().partnerMirroringUrl());
        Assertions.assertEquals("xihspnxwq", response.properties().spec().partnerMirroringCert());
        Assertions.assertEquals(FailoverGroupPartnerSyncMode.SYNC, response.properties().spec().partnerSyncMode());
        Assertions.assertEquals(InstanceFailoverGroupRole.FORCE_SECONDARY, response.properties().spec().role());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
