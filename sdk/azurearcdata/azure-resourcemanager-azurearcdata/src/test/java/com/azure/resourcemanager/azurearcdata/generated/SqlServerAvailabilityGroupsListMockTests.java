// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurearcdata.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.azurearcdata.AzureArcDataManager;
import com.azure.resourcemanager.azurearcdata.models.SqlServerAvailabilityGroupResource;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class SqlServerAvailabilityGroupsListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"availabilityGroupId\":\"k\",\"serverName\":\"qceazfpxgnmq\",\"instanceName\":\"vluyqqaios\",\"vmId\":\"cyvaifppuacvfy\",\"collectionTimestamp\":\"2021-09-15T10:21:10Z\",\"info\":{\"failureConditionLevel\":422013708,\"healthCheckTimeout\":1385356359,\"automatedBackupPreferenceDescription\":\"dhsoymhpv\",\"version\":1267233525,\"basicFeatures\":false,\"dtcSupport\":true,\"dbFailover\":false,\"isDistributed\":true,\"clusterTypeDescription\":\"ujstk\",\"requiredSynchronizedSecondariesToCommit\":1265123463,\"isContained\":true,\"primaryReplica\":\"xcdedsu\",\"primaryRecoveryHealthDescription\":\"ygnxcgjtfrnqukt\",\"secondaryRecoveryHealthDescription\":\"nslnlrxsmyltrwnt\",\"synchronizationHealthDescription\":\"tbgwjdxwnazkur\",\"replicationPartnerType\":\"AzureSQLVM\",\"listener\":{\"dnsName\":\"zjwhsetwwjwz\",\"ipV4AddressesAndMasks\":[{},{}],\"ipV6Addresses\":[\"zuukykcyqhyqq\"],\"port\":2045605742}},\"replicas\":{\"value\":[{\"replicaId\":\"ystewfopa\",\"replicaName\":\"azgbsqgpe\",\"replicaResourceId\":\"c\",\"configure\":{},\"state\":{}}],\"nextLink\":\"dpvozglqj\"},\"databases\":{\"value\":[{\"databaseName\":\"clctzey\",\"replicaName\":\"mndcov\",\"isLocal\":false,\"isPrimaryReplica\":false,\"synchronizationStateDescription\":\"xzanhmk\",\"isCommitParticipant\":false,\"synchronizationHealthDescription\":\"wkudrbcpf\",\"databaseStateDescription\":\"udqyemeb\",\"isSuspended\":true,\"suspendReasonDescription\":\"cmcir\"}],\"nextLink\":\"eemmjauwcgx\"},\"provisioningState\":\"noh\"},\"location\":\"tranizerwgu\",\"tags\":{\"hpriylfm\":\"mxubvfbngfcoce\",\"vhl\":\"ztraud\"},\"id\":\"dculregp\",\"name\":\"tmojhvrztnvgyshq\",\"type\":\"dgrtwmew\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AzureArcDataManager manager = AzureArcDataManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PagedIterable<SqlServerAvailabilityGroupResource> response = manager.sqlServerAvailabilityGroups()
            .list("pwolgisubxb", "eogfgfiijrykwl", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("tranizerwgu", response.iterator().next().location());
        Assertions.assertEquals("mxubvfbngfcoce", response.iterator().next().tags().get("hpriylfm"));
        Assertions.assertEquals(422013708, response.iterator().next().properties().info().failureConditionLevel());
        Assertions.assertEquals(1385356359, response.iterator().next().properties().info().healthCheckTimeout());
        Assertions.assertFalse(response.iterator().next().properties().info().basicFeatures());
        Assertions.assertTrue(response.iterator().next().properties().info().dtcSupport());
        Assertions.assertFalse(response.iterator().next().properties().info().dbFailover());
        Assertions.assertTrue(response.iterator().next().properties().info().isDistributed());
        Assertions.assertEquals(1265123463,
            response.iterator().next().properties().info().requiredSynchronizedSecondariesToCommit());
        Assertions.assertTrue(response.iterator().next().properties().info().isContained());
        Assertions.assertEquals("zjwhsetwwjwz", response.iterator().next().properties().info().listener().dnsName());
        Assertions.assertEquals("zuukykcyqhyqq",
            response.iterator().next().properties().info().listener().ipV6Addresses().get(0));
        Assertions.assertEquals(2045605742, response.iterator().next().properties().info().listener().port());
        Assertions.assertEquals("azgbsqgpe",
            response.iterator().next().properties().replicas().value().get(0).replicaName());
        Assertions.assertEquals("c",
            response.iterator().next().properties().replicas().value().get(0).replicaResourceId());
        Assertions.assertEquals("clctzey",
            response.iterator().next().properties().databases().value().get(0).databaseName());
    }
}
