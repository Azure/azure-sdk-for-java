// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurearcdata.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.azurearcdata.AzureArcDataManager;
import com.azure.resourcemanager.azurearcdata.models.ArcSqlServerLicenseType;
import com.azure.resourcemanager.azurearcdata.models.ConnectionStatus;
import com.azure.resourcemanager.azurearcdata.models.DefenderStatus;
import com.azure.resourcemanager.azurearcdata.models.EditionType;
import com.azure.resourcemanager.azurearcdata.models.SqlServerInstance;
import com.azure.resourcemanager.azurearcdata.models.SqlVersion;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class SqlServerInstancesListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"version\":\"SQL Server 2019\",\"edition\":\"Express\",\"containerResourceId\":\"pfuflrw\",\"createTime\":\"hdlxyjrxsagafcn\",\"vCore\":\"gwq\",\"status\":\"Unknown\",\"patchLevel\":\"edgfbcvkcvq\",\"collation\":\"keqdcvdrhvoods\",\"currentVersion\":\"bobzdopcjwvnhd\",\"instanceName\":\"wmgxcxrsl\",\"tcpDynamicPorts\":\"utwu\",\"tcpStaticPorts\":\"grpkhjwniyqs\",\"productId\":\"i\",\"licenseType\":\"Undefined\",\"azureDefenderStatusLastUpdated\":\"2021-10-15T20:11:18Z\",\"azureDefenderStatus\":\"Unknown\",\"provisioningState\":\"lvmbmpaxmodfvuef\"},\"location\":\"sbpfvmwyhr\",\"tags\":{\"yzvqt\":\"yftaakcpw\",\"zksmondj\":\"nubexk\"},\"id\":\"quxvypomgkop\",\"name\":\"whojvp\",\"type\":\"jqg\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AzureArcDataManager manager = AzureArcDataManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<SqlServerInstance> response = manager.sqlServerInstances().list(com.azure.core.util.Context.NONE);

        Assertions.assertEquals("sbpfvmwyhr", response.iterator().next().location());
        Assertions.assertEquals("yftaakcpw", response.iterator().next().tags().get("yzvqt"));
        Assertions.assertEquals(SqlVersion.SQL_SERVER_2019, response.iterator().next().properties().version());
        Assertions.assertEquals(EditionType.EXPRESS, response.iterator().next().properties().edition());
        Assertions.assertEquals("pfuflrw", response.iterator().next().properties().containerResourceId());
        Assertions.assertEquals("gwq", response.iterator().next().properties().vCore());
        Assertions.assertEquals(ConnectionStatus.UNKNOWN, response.iterator().next().properties().status());
        Assertions.assertEquals("edgfbcvkcvq", response.iterator().next().properties().patchLevel());
        Assertions.assertEquals("keqdcvdrhvoods", response.iterator().next().properties().collation());
        Assertions.assertEquals("bobzdopcjwvnhd", response.iterator().next().properties().currentVersion());
        Assertions.assertEquals("wmgxcxrsl", response.iterator().next().properties().instanceName());
        Assertions.assertEquals("utwu", response.iterator().next().properties().tcpDynamicPorts());
        Assertions.assertEquals("grpkhjwniyqs", response.iterator().next().properties().tcpStaticPorts());
        Assertions.assertEquals("i", response.iterator().next().properties().productId());
        Assertions.assertEquals(ArcSqlServerLicenseType.UNDEFINED,
            response.iterator().next().properties().licenseType());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-15T20:11:18Z"),
            response.iterator().next().properties().azureDefenderStatusLastUpdated());
        Assertions.assertEquals(DefenderStatus.UNKNOWN, response.iterator().next().properties().azureDefenderStatus());
    }
}
