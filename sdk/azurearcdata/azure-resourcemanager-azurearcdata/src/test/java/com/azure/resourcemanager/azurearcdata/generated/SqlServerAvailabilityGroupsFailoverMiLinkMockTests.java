// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurearcdata.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.azurearcdata.AzureArcDataManager;
import com.azure.resourcemanager.azurearcdata.models.FailoverMiLinkResourceId;
import com.azure.resourcemanager.azurearcdata.models.SqlServerAvailabilityGroupResource;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class SqlServerAvailabilityGroupsFailoverMiLinkMockTests {
    @Test
    public void testFailoverMiLink() throws Exception {
        String responseStr
            = "{\"properties\":{\"availabilityGroupId\":\"gczeuntgx\",\"serverName\":\"ca\",\"instanceName\":\"tiekoifuvnyttz\",\"vmId\":\"xgyrihlgmgbehlqt\",\"collectionTimestamp\":\"2021-11-06T16:43:25Z\",\"info\":{\"failureConditionLevel\":782156023,\"healthCheckTimeout\":1554991907,\"automatedBackupPreferenceDescription\":\"ndpgfjodhda\",\"version\":1134933517,\"basicFeatures\":false,\"dtcSupport\":true,\"dbFailover\":false,\"isDistributed\":true,\"clusterTypeDescription\":\"abvcipowzaf\",\"requiredSynchronizedSecondariesToCommit\":1429799047,\"isContained\":false,\"primaryReplica\":\"jcirvpefycdvei\",\"primaryRecoveryHealthDescription\":\"tjnsx\",\"secondaryRecoveryHealthDescription\":\"jlnsj\",\"synchronizationHealthDescription\":\"ju\",\"replicationPartnerType\":\"SQLServer\",\"listener\":{\"dnsName\":\"qvmvuaytuadxkxe\",\"ipV4AddressesAndMasks\":[{}],\"ipV6Addresses\":[\"tghyksarcdr\",\"xsl\",\"vlzladl\"],\"port\":1056086691}},\"replicas\":{\"value\":[{\"replicaId\":\"v\",\"replicaName\":\"qqjwkrh\",\"replicaResourceId\":\"dano\",\"configure\":{},\"state\":{}},{\"replicaId\":\"glmvoka\",\"replicaName\":\"ztjctibpvbkae\",\"replicaResourceId\":\"smz\",\"configure\":{},\"state\":{}}],\"nextLink\":\"wakwseivmakxhys\"},\"databases\":{\"value\":[{\"databaseName\":\"x\",\"replicaName\":\"bectvtfjmskdch\",\"isLocal\":true,\"isPrimaryReplica\":true,\"synchronizationStateDescription\":\"vlzw\",\"isCommitParticipant\":true,\"synchronizationHealthDescription\":\"falkzazm\",\"databaseStateDescription\":\"kedgj\",\"isSuspended\":false,\"suspendReasonDescription\":\"mk\"},{\"databaseName\":\"kz\",\"replicaName\":\"hqet\",\"isLocal\":true,\"isPrimaryReplica\":false,\"synchronizationStateDescription\":\"aoznq\",\"isCommitParticipant\":true,\"synchronizationHealthDescription\":\"ezeagmceituuge\",\"databaseStateDescription\":\"fpjstlzmb\",\"isSuspended\":true,\"suspendReasonDescription\":\"deolctaebfs\"},{\"databaseName\":\"ledjcustbvtqigd\",\"replicaName\":\"vsgeafgf\",\"isLocal\":true,\"isPrimaryReplica\":true,\"synchronizationStateDescription\":\"zsxezppkkwaae\",\"isCommitParticipant\":true,\"synchronizationHealthDescription\":\"jlpzeqtoyrp\",\"databaseStateDescription\":\"xlaj\",\"isSuspended\":true,\"suspendReasonDescription\":\"quevham\"},{\"databaseName\":\"wg\",\"replicaName\":\"tmk\",\"isLocal\":false,\"isPrimaryReplica\":true,\"synchronizationStateDescription\":\"waqxofqovc\",\"isCommitParticipant\":true,\"synchronizationHealthDescription\":\"p\",\"databaseStateDescription\":\"fidusztekxbyjgm\",\"isSuspended\":false,\"suspendReasonDescription\":\"x\"}],\"nextLink\":\"hpqadagrhrdicxdw\"},\"provisioningState\":\"Succeeded\"},\"location\":\"ukdveksbuhoduc\",\"tags\":{\"bfdyjduss\":\"scrdp\",\"ggkrehbf\":\"yszekbhwlka\",\"ybff\":\"n\",\"sqtaadusrexxfa\":\"jfiimreoa\"},\"id\":\"sqwudohzilfmnli\",\"name\":\"psimsf\",\"type\":\"ypofqpmbhyqgs\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AzureArcDataManager manager = AzureArcDataManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        SqlServerAvailabilityGroupResource response = manager.sqlServerAvailabilityGroups()
            .failoverMiLink("bjpjvlyw", "tmfwobbjwhl", "yj",
                new FailoverMiLinkResourceId().withManagedInstanceId("qzocr"), com.azure.core.util.Context.NONE);

        Assertions.assertEquals("ukdveksbuhoduc", response.location());
        Assertions.assertEquals("scrdp", response.tags().get("bfdyjduss"));
        Assertions.assertEquals(782156023, response.properties().info().failureConditionLevel());
        Assertions.assertEquals(1554991907, response.properties().info().healthCheckTimeout());
        Assertions.assertFalse(response.properties().info().basicFeatures());
        Assertions.assertTrue(response.properties().info().dtcSupport());
        Assertions.assertFalse(response.properties().info().dbFailover());
        Assertions.assertTrue(response.properties().info().isDistributed());
        Assertions.assertEquals(1429799047, response.properties().info().requiredSynchronizedSecondariesToCommit());
        Assertions.assertFalse(response.properties().info().isContained());
        Assertions.assertEquals("qvmvuaytuadxkxe", response.properties().info().listener().dnsName());
        Assertions.assertEquals("tghyksarcdr", response.properties().info().listener().ipV6Addresses().get(0));
        Assertions.assertEquals(1056086691, response.properties().info().listener().port());
        Assertions.assertEquals("qqjwkrh", response.properties().replicas().value().get(0).replicaName());
        Assertions.assertEquals("dano", response.properties().replicas().value().get(0).replicaResourceId());
        Assertions.assertEquals("x", response.properties().databases().value().get(0).databaseName());
    }
}
