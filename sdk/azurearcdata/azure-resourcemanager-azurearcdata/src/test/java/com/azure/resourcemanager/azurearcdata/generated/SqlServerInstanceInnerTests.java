// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurearcdata.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.azurearcdata.fluent.models.SqlServerInstanceInner;
import com.azure.resourcemanager.azurearcdata.models.ArcSqlServerLicenseType;
import com.azure.resourcemanager.azurearcdata.models.ConnectionStatus;
import com.azure.resourcemanager.azurearcdata.models.DefenderStatus;
import com.azure.resourcemanager.azurearcdata.models.EditionType;
import com.azure.resourcemanager.azurearcdata.models.SqlServerInstanceProperties;
import com.azure.resourcemanager.azurearcdata.models.SqlVersion;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SqlServerInstanceInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SqlServerInstanceInner model = BinaryData.fromString(
            "{\"properties\":{\"version\":\"SQL Server 2016\",\"edition\":\"Web\",\"containerResourceId\":\"phywpnvj\",\"createTime\":\"qnermclfplphoxu\",\"vCore\":\"rpabg\",\"status\":\"Connected\",\"patchLevel\":\"sbj\",\"collation\":\"zq\",\"currentVersion\":\"xywpmueefjzwfqkq\",\"instanceName\":\"ids\",\"tcpDynamicPorts\":\"onobglaocqx\",\"tcpStaticPorts\":\"cmgyud\",\"productId\":\"tlmoyrx\",\"licenseType\":\"Free\",\"azureDefenderStatusLastUpdated\":\"2021-07-05T08:36:14Z\",\"azureDefenderStatus\":\"Unprotected\",\"provisioningState\":\"ntxhdzhlrqjbhck\"},\"location\":\"lhrxsbkyvpyc\",\"tags\":{\"p\":\"z\",\"hhseyv\":\"kafkuwbcrnwbm\",\"tslhspkdeem\":\"us\"},\"id\":\"ofmxagkvtmelmqkr\",\"name\":\"ahvljuaha\",\"type\":\"uhcdhm\"}")
            .toObject(SqlServerInstanceInner.class);
        Assertions.assertEquals("lhrxsbkyvpyc", model.location());
        Assertions.assertEquals("z", model.tags().get("p"));
        Assertions.assertEquals(SqlVersion.SQL_SERVER_2016, model.properties().version());
        Assertions.assertEquals(EditionType.WEB, model.properties().edition());
        Assertions.assertEquals("phywpnvj", model.properties().containerResourceId());
        Assertions.assertEquals("rpabg", model.properties().vCore());
        Assertions.assertEquals(ConnectionStatus.CONNECTED, model.properties().status());
        Assertions.assertEquals("sbj", model.properties().patchLevel());
        Assertions.assertEquals("zq", model.properties().collation());
        Assertions.assertEquals("xywpmueefjzwfqkq", model.properties().currentVersion());
        Assertions.assertEquals("ids", model.properties().instanceName());
        Assertions.assertEquals("onobglaocqx", model.properties().tcpDynamicPorts());
        Assertions.assertEquals("cmgyud", model.properties().tcpStaticPorts());
        Assertions.assertEquals("tlmoyrx", model.properties().productId());
        Assertions.assertEquals(ArcSqlServerLicenseType.FREE, model.properties().licenseType());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-05T08:36:14Z"),
            model.properties().azureDefenderStatusLastUpdated());
        Assertions.assertEquals(DefenderStatus.UNPROTECTED, model.properties().azureDefenderStatus());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SqlServerInstanceInner model = new SqlServerInstanceInner().withLocation("lhrxsbkyvpyc")
            .withTags(mapOf("p", "z", "hhseyv", "kafkuwbcrnwbm", "tslhspkdeem", "us"))
            .withProperties(new SqlServerInstanceProperties().withVersion(SqlVersion.SQL_SERVER_2016)
                .withEdition(EditionType.WEB)
                .withContainerResourceId("phywpnvj")
                .withVCore("rpabg")
                .withStatus(ConnectionStatus.CONNECTED)
                .withPatchLevel("sbj")
                .withCollation("zq")
                .withCurrentVersion("xywpmueefjzwfqkq")
                .withInstanceName("ids")
                .withTcpDynamicPorts("onobglaocqx")
                .withTcpStaticPorts("cmgyud")
                .withProductId("tlmoyrx")
                .withLicenseType(ArcSqlServerLicenseType.FREE)
                .withAzureDefenderStatusLastUpdated(OffsetDateTime.parse("2021-07-05T08:36:14Z"))
                .withAzureDefenderStatus(DefenderStatus.UNPROTECTED));
        model = BinaryData.fromObject(model).toObject(SqlServerInstanceInner.class);
        Assertions.assertEquals("lhrxsbkyvpyc", model.location());
        Assertions.assertEquals("z", model.tags().get("p"));
        Assertions.assertEquals(SqlVersion.SQL_SERVER_2016, model.properties().version());
        Assertions.assertEquals(EditionType.WEB, model.properties().edition());
        Assertions.assertEquals("phywpnvj", model.properties().containerResourceId());
        Assertions.assertEquals("rpabg", model.properties().vCore());
        Assertions.assertEquals(ConnectionStatus.CONNECTED, model.properties().status());
        Assertions.assertEquals("sbj", model.properties().patchLevel());
        Assertions.assertEquals("zq", model.properties().collation());
        Assertions.assertEquals("xywpmueefjzwfqkq", model.properties().currentVersion());
        Assertions.assertEquals("ids", model.properties().instanceName());
        Assertions.assertEquals("onobglaocqx", model.properties().tcpDynamicPorts());
        Assertions.assertEquals("cmgyud", model.properties().tcpStaticPorts());
        Assertions.assertEquals("tlmoyrx", model.properties().productId());
        Assertions.assertEquals(ArcSqlServerLicenseType.FREE, model.properties().licenseType());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-05T08:36:14Z"),
            model.properties().azureDefenderStatusLastUpdated());
        Assertions.assertEquals(DefenderStatus.UNPROTECTED, model.properties().azureDefenderStatus());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
