// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurearcdata.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.azurearcdata.AzureArcDataManager;
import com.azure.resourcemanager.azurearcdata.models.Databases;
import com.azure.resourcemanager.azurearcdata.models.SqlServerAvailabilityGroupResource;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class SqlServerAvailabilityGroupsAddDatabasesWithResponseMockTests {
    @Test
    public void testAddDatabasesWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"availabilityGroupId\":\"yhlwcjsqg\",\"serverName\":\"hffbxrq\",\"instanceName\":\"ijpeuql\",\"vmId\":\"x\",\"collectionTimestamp\":\"2021-02-14T10:26:22Z\",\"info\":{\"failureConditionLevel\":219641959,\"healthCheckTimeout\":818856345,\"automatedBackupPreferenceDescription\":\"wmjswenaww\",\"version\":1832764493,\"basicFeatures\":true,\"dtcSupport\":true,\"dbFailover\":true,\"isDistributed\":false,\"clusterTypeDescription\":\"dhzyoe\",\"requiredSynchronizedSecondariesToCommit\":435347503,\"isContained\":true,\"primaryReplica\":\"lhsvidmytzlnglxp\",\"primaryRecoveryHealthDescription\":\"vyoanfbcswqagywv\",\"secondaryRecoveryHealthDescription\":\"igvjrktp\",\"synchronizationHealthDescription\":\"eukyaw\",\"replicationPartnerType\":\"AzureSQLVM\",\"listener\":{\"dnsName\":\"hqnucs\",\"ipV4AddressesAndMasks\":[{},{},{},{}],\"ipV6Addresses\":[\"dsjtdlpbni\"],\"port\":2100647659}},\"replicas\":{\"value\":[{\"replicaId\":\"vbzfcpuoee\",\"replicaName\":\"jcciklhsyek\",\"replicaResourceId\":\"renxolriyehqbe\",\"configure\":{},\"state\":{}},{\"replicaId\":\"hydwbdbfgrlp\",\"replicaName\":\"ytjlkesmmpath\",\"replicaResourceId\":\"ta\",\"configure\":{},\"state\":{}},{\"replicaId\":\"niiwllbvgwz\",\"replicaName\":\"ft\",\"replicaResourceId\":\"ousnktjt\",\"configure\":{},\"state\":{}},{\"replicaId\":\"aqo\",\"replicaName\":\"kbeba\",\"replicaResourceId\":\"lqbtxxwpfhnjzudr\",\"configure\":{},\"state\":{}}],\"nextLink\":\"gmeboywhczz\"},\"databases\":{\"value\":[{\"databaseName\":\"gqbedygi\",\"replicaName\":\"zwnykdidjchl\",\"isLocal\":false,\"isPrimaryReplica\":true,\"synchronizationStateDescription\":\"ofldseacdhz\",\"isCommitParticipant\":true,\"synchronizationHealthDescription\":\"rfgdrwj\",\"databaseStateDescription\":\"ewhfjsrwqrxetf\",\"isSuspended\":false,\"suspendReasonDescription\":\"rrmdqntycna\"},{\"databaseName\":\"hvmaxgnuyeamcmhu\",\"replicaName\":\"jecehokwc\",\"isLocal\":false,\"isPrimaryReplica\":true,\"synchronizationStateDescription\":\"esq\",\"isCommitParticipant\":false,\"synchronizationHealthDescription\":\"rbnyrukoilacidu\",\"databaseStateDescription\":\"leipjl\",\"isSuspended\":true,\"suspendReasonDescription\":\"p\"}],\"nextLink\":\"uzythqkkwhbgxv\"},\"provisioningState\":\"lvulnxdmnitmujdt\"},\"location\":\"clyymffhmjpddn\",\"tags\":{\"qrbrpvnmdyfoeboj\":\"zuvrzmzqmz\",\"laohoqkp\":\"jpp\"},\"id\":\"t\",\"name\":\"qjilaywkdcwmqsyr\",\"type\":\"lmhxdqaolfylnk\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AzureArcDataManager manager = AzureArcDataManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        SqlServerAvailabilityGroupResource response = manager.sqlServerAvailabilityGroups()
            .addDatabasesWithResponse("kc", "rgukxrztio", "hlutixmqrudjizc",
                new Databases().withValues(Arrays.asList("mcrunfhiucn", "fbcpaqktkrumzu", "dkyzbfvxov", "kxiuxqggvqr")),
                com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("clyymffhmjpddn", response.location());
        Assertions.assertEquals("zuvrzmzqmz", response.tags().get("qrbrpvnmdyfoeboj"));
        Assertions.assertEquals(219641959, response.properties().info().failureConditionLevel());
        Assertions.assertEquals(818856345, response.properties().info().healthCheckTimeout());
        Assertions.assertTrue(response.properties().info().basicFeatures());
        Assertions.assertTrue(response.properties().info().dtcSupport());
        Assertions.assertTrue(response.properties().info().dbFailover());
        Assertions.assertFalse(response.properties().info().isDistributed());
        Assertions.assertEquals(435347503, response.properties().info().requiredSynchronizedSecondariesToCommit());
        Assertions.assertTrue(response.properties().info().isContained());
        Assertions.assertEquals("hqnucs", response.properties().info().listener().dnsName());
        Assertions.assertEquals("dsjtdlpbni", response.properties().info().listener().ipV6Addresses().get(0));
        Assertions.assertEquals(2100647659, response.properties().info().listener().port());
        Assertions.assertEquals("jcciklhsyek", response.properties().replicas().value().get(0).replicaName());
        Assertions.assertEquals("renxolriyehqbe", response.properties().replicas().value().get(0).replicaResourceId());
        Assertions.assertEquals("gqbedygi", response.properties().databases().value().get(0).databaseName());
    }
}
