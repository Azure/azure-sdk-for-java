// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurearcdata.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.azurearcdata.AzureArcDataManager;
import com.azure.resourcemanager.azurearcdata.models.Databases;
import com.azure.resourcemanager.azurearcdata.models.SqlServerAvailabilityGroupResource;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class SqlServerAvailabilityGroupsRemoveDatabasesWithResponseMockTests {
    @Test
    public void testRemoveDatabasesWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"availabilityGroupId\":\"y\",\"serverName\":\"wmhkruwaedrympml\",\"instanceName\":\"in\",\"vmId\":\"duewihapfj\",\"collectionTimestamp\":\"2021-06-17T15:27:34Z\",\"info\":{\"failureConditionLevel\":1546166695,\"healthCheckTimeout\":1042499293,\"automatedBackupPreferenceDescription\":\"liejhpc\",\"version\":395787994,\"basicFeatures\":true,\"dtcSupport\":false,\"dbFailover\":false,\"isDistributed\":false,\"clusterTypeDescription\":\"vbvzipbwxgo\",\"requiredSynchronizedSecondariesToCommit\":124034225,\"isContained\":true,\"primaryReplica\":\"admskx\",\"primaryRecoveryHealthDescription\":\"pdgzigjsugswhg\",\"secondaryRecoveryHealthDescription\":\"odkwwnbafocto\",\"synchronizationHealthDescription\":\"haquvwsxbgnvk\",\"replicationPartnerType\":\"AzureSQLManagedInstance\",\"listener\":{\"dnsName\":\"hoadhrsxqvzv\",\"ipV4AddressesAndMasks\":[{},{}],\"ipV6Addresses\":[\"sr\",\"fajglzrsubklrxhj\"],\"port\":1857405495}},\"replicas\":{\"value\":[{\"replicaId\":\"dvqydie\",\"replicaName\":\"kw\",\"replicaResourceId\":\"uwdxvqzxoebwgj\",\"configure\":{},\"state\":{}},{\"replicaId\":\"an\",\"replicaName\":\"upwtz\",\"replicaResourceId\":\"aklozk\",\"configure\":{},\"state\":{}},{\"replicaId\":\"pejplssa\",\"replicaName\":\"tttk\",\"replicaResourceId\":\"uxunrswg\",\"configure\":{},\"state\":{}},{\"replicaId\":\"boy\",\"replicaName\":\"ebhuhkslgwlokhu\",\"replicaResourceId\":\"ijyzcqypzqzufgsy\",\"configure\":{},\"state\":{}}],\"nextLink\":\"vdwtfxptpqayamk\"},\"databases\":{\"value\":[{\"databaseName\":\"bmxsnxoc\",\"replicaName\":\"llojkpoyhgwwdj\",\"isLocal\":false,\"isPrimaryReplica\":true,\"synchronizationStateDescription\":\"jzgdyrc\",\"isCommitParticipant\":false,\"synchronizationHealthDescription\":\"sgzlrqhb\",\"databaseStateDescription\":\"qogdx\",\"isSuspended\":false,\"suspendReasonDescription\":\"p\"}],\"nextLink\":\"x\"},\"provisioningState\":\"lflec\"},\"location\":\"inxojjlux\",\"tags\":{\"dzzqjmu\":\"ilz\",\"ovribq\":\"za\",\"qww\":\"otokhtvwtaznk\"},\"id\":\"wjyofgwhnkbtl\",\"name\":\"ljssm\",\"type\":\"tsnld\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AzureArcDataManager manager = AzureArcDataManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        SqlServerAvailabilityGroupResource response = manager.sqlServerAvailabilityGroups()
            .removeDatabasesWithResponse("rmmttjxop", "gerhsmvg", "htwzmqilr",
                new Databases().withValues(Arrays.asList("sfnim")), com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("inxojjlux", response.location());
        Assertions.assertEquals("ilz", response.tags().get("dzzqjmu"));
        Assertions.assertEquals(1546166695, response.properties().info().failureConditionLevel());
        Assertions.assertEquals(1042499293, response.properties().info().healthCheckTimeout());
        Assertions.assertTrue(response.properties().info().basicFeatures());
        Assertions.assertFalse(response.properties().info().dtcSupport());
        Assertions.assertFalse(response.properties().info().dbFailover());
        Assertions.assertFalse(response.properties().info().isDistributed());
        Assertions.assertEquals(124034225, response.properties().info().requiredSynchronizedSecondariesToCommit());
        Assertions.assertTrue(response.properties().info().isContained());
        Assertions.assertEquals("hoadhrsxqvzv", response.properties().info().listener().dnsName());
        Assertions.assertEquals("sr", response.properties().info().listener().ipV6Addresses().get(0));
        Assertions.assertEquals(1857405495, response.properties().info().listener().port());
        Assertions.assertEquals("kw", response.properties().replicas().value().get(0).replicaName());
        Assertions.assertEquals("uwdxvqzxoebwgj", response.properties().replicas().value().get(0).replicaResourceId());
        Assertions.assertEquals("bmxsnxoc", response.properties().databases().value().get(0).databaseName());
    }
}
