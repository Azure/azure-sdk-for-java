// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurearcdata.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Properties on upload watermark. Mostly timestamp for each upload data type.
 */
@Fluent
public final class UploadWatermark implements JsonSerializable<UploadWatermark> {
    /*
     * Last uploaded date for metrics from kubernetes cluster. Defaults to current date time
     */
    private OffsetDateTime metrics;

    /*
     * Last uploaded date for logs from kubernetes cluster. Defaults to current date time
     */
    private OffsetDateTime logs;

    /*
     * Last uploaded date for usages from kubernetes cluster. Defaults to current date time
     */
    private OffsetDateTime usages;

    /**
     * Creates an instance of UploadWatermark class.
     */
    public UploadWatermark() {
    }

    /**
     * Get the metrics property: Last uploaded date for metrics from kubernetes cluster. Defaults to current date time.
     * 
     * @return the metrics value.
     */
    public OffsetDateTime metrics() {
        return this.metrics;
    }

    /**
     * Set the metrics property: Last uploaded date for metrics from kubernetes cluster. Defaults to current date time.
     * 
     * @param metrics the metrics value to set.
     * @return the UploadWatermark object itself.
     */
    public UploadWatermark withMetrics(OffsetDateTime metrics) {
        this.metrics = metrics;
        return this;
    }

    /**
     * Get the logs property: Last uploaded date for logs from kubernetes cluster. Defaults to current date time.
     * 
     * @return the logs value.
     */
    public OffsetDateTime logs() {
        return this.logs;
    }

    /**
     * Set the logs property: Last uploaded date for logs from kubernetes cluster. Defaults to current date time.
     * 
     * @param logs the logs value to set.
     * @return the UploadWatermark object itself.
     */
    public UploadWatermark withLogs(OffsetDateTime logs) {
        this.logs = logs;
        return this;
    }

    /**
     * Get the usages property: Last uploaded date for usages from kubernetes cluster. Defaults to current date time.
     * 
     * @return the usages value.
     */
    public OffsetDateTime usages() {
        return this.usages;
    }

    /**
     * Set the usages property: Last uploaded date for usages from kubernetes cluster. Defaults to current date time.
     * 
     * @param usages the usages value to set.
     * @return the UploadWatermark object itself.
     */
    public UploadWatermark withUsages(OffsetDateTime usages) {
        this.usages = usages;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("metrics",
            this.metrics == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.metrics));
        jsonWriter.writeStringField("logs",
            this.logs == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.logs));
        jsonWriter.writeStringField("usages",
            this.usages == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.usages));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of UploadWatermark from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of UploadWatermark if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the UploadWatermark.
     */
    public static UploadWatermark fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            UploadWatermark deserializedUploadWatermark = new UploadWatermark();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("metrics".equals(fieldName)) {
                    deserializedUploadWatermark.metrics = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("logs".equals(fieldName)) {
                    deserializedUploadWatermark.logs = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("usages".equals(fieldName)) {
                    deserializedUploadWatermark.usages = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedUploadWatermark;
        });
    }
}
