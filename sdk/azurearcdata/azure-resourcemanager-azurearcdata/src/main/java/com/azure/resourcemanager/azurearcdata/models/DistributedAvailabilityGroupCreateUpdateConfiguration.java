// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurearcdata.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Options used in creating a distributed availability group.
 */
@Fluent
public final class DistributedAvailabilityGroupCreateUpdateConfiguration
    implements JsonSerializable<DistributedAvailabilityGroupCreateUpdateConfiguration> {
    /*
     * Name of the availability group.
     */
    private String availabilityGroupName;

    /*
     * The initial primary availability group for the distributed availability group.
     */
    private DistributedAvailabilityGroupCreateUpdateAvailabilityGroupConfiguration primaryAvailabilityGroup;

    /*
     * The initial secondary availability group for the distributed availability group.
     */
    private DistributedAvailabilityGroupCreateUpdateAvailabilityGroupConfiguration secondaryAvailabilityGroup;

    /**
     * Creates an instance of DistributedAvailabilityGroupCreateUpdateConfiguration class.
     */
    public DistributedAvailabilityGroupCreateUpdateConfiguration() {
    }

    /**
     * Get the availabilityGroupName property: Name of the availability group.
     * 
     * @return the availabilityGroupName value.
     */
    public String availabilityGroupName() {
        return this.availabilityGroupName;
    }

    /**
     * Set the availabilityGroupName property: Name of the availability group.
     * 
     * @param availabilityGroupName the availabilityGroupName value to set.
     * @return the DistributedAvailabilityGroupCreateUpdateConfiguration object itself.
     */
    public DistributedAvailabilityGroupCreateUpdateConfiguration
        withAvailabilityGroupName(String availabilityGroupName) {
        this.availabilityGroupName = availabilityGroupName;
        return this;
    }

    /**
     * Get the primaryAvailabilityGroup property: The initial primary availability group for the distributed
     * availability group.
     * 
     * @return the primaryAvailabilityGroup value.
     */
    public DistributedAvailabilityGroupCreateUpdateAvailabilityGroupConfiguration primaryAvailabilityGroup() {
        return this.primaryAvailabilityGroup;
    }

    /**
     * Set the primaryAvailabilityGroup property: The initial primary availability group for the distributed
     * availability group.
     * 
     * @param primaryAvailabilityGroup the primaryAvailabilityGroup value to set.
     * @return the DistributedAvailabilityGroupCreateUpdateConfiguration object itself.
     */
    public DistributedAvailabilityGroupCreateUpdateConfiguration withPrimaryAvailabilityGroup(
        DistributedAvailabilityGroupCreateUpdateAvailabilityGroupConfiguration primaryAvailabilityGroup) {
        this.primaryAvailabilityGroup = primaryAvailabilityGroup;
        return this;
    }

    /**
     * Get the secondaryAvailabilityGroup property: The initial secondary availability group for the distributed
     * availability group.
     * 
     * @return the secondaryAvailabilityGroup value.
     */
    public DistributedAvailabilityGroupCreateUpdateAvailabilityGroupConfiguration secondaryAvailabilityGroup() {
        return this.secondaryAvailabilityGroup;
    }

    /**
     * Set the secondaryAvailabilityGroup property: The initial secondary availability group for the distributed
     * availability group.
     * 
     * @param secondaryAvailabilityGroup the secondaryAvailabilityGroup value to set.
     * @return the DistributedAvailabilityGroupCreateUpdateConfiguration object itself.
     */
    public DistributedAvailabilityGroupCreateUpdateConfiguration withSecondaryAvailabilityGroup(
        DistributedAvailabilityGroupCreateUpdateAvailabilityGroupConfiguration secondaryAvailabilityGroup) {
        this.secondaryAvailabilityGroup = secondaryAvailabilityGroup;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (primaryAvailabilityGroup() != null) {
            primaryAvailabilityGroup().validate();
        }
        if (secondaryAvailabilityGroup() != null) {
            secondaryAvailabilityGroup().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("availabilityGroupName", this.availabilityGroupName);
        jsonWriter.writeJsonField("primaryAvailabilityGroup", this.primaryAvailabilityGroup);
        jsonWriter.writeJsonField("secondaryAvailabilityGroup", this.secondaryAvailabilityGroup);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DistributedAvailabilityGroupCreateUpdateConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DistributedAvailabilityGroupCreateUpdateConfiguration if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DistributedAvailabilityGroupCreateUpdateConfiguration.
     */
    public static DistributedAvailabilityGroupCreateUpdateConfiguration fromJson(JsonReader jsonReader)
        throws IOException {
        return jsonReader.readObject(reader -> {
            DistributedAvailabilityGroupCreateUpdateConfiguration deserializedDistributedAvailabilityGroupCreateUpdateConfiguration
                = new DistributedAvailabilityGroupCreateUpdateConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("availabilityGroupName".equals(fieldName)) {
                    deserializedDistributedAvailabilityGroupCreateUpdateConfiguration.availabilityGroupName
                        = reader.getString();
                } else if ("primaryAvailabilityGroup".equals(fieldName)) {
                    deserializedDistributedAvailabilityGroupCreateUpdateConfiguration.primaryAvailabilityGroup
                        = DistributedAvailabilityGroupCreateUpdateAvailabilityGroupConfiguration.fromJson(reader);
                } else if ("secondaryAvailabilityGroup".equals(fieldName)) {
                    deserializedDistributedAvailabilityGroupCreateUpdateConfiguration.secondaryAvailabilityGroup
                        = DistributedAvailabilityGroupCreateUpdateAvailabilityGroupConfiguration.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDistributedAvailabilityGroupCreateUpdateConfiguration;
        });
    }
}
