// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurearcdata.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The MI Link specific configuration.
 */
@Fluent
public final class MiLinkCreateUpdateConfiguration implements JsonSerializable<MiLinkCreateUpdateConfiguration> {
    /*
     * The name of the availability group to be created on the Managed Instance.
     */
    private String instanceAvailabilityGroupName;

    /**
     * Creates an instance of MiLinkCreateUpdateConfiguration class.
     */
    public MiLinkCreateUpdateConfiguration() {
    }

    /**
     * Get the instanceAvailabilityGroupName property: The name of the availability group to be created on the Managed
     * Instance.
     * 
     * @return the instanceAvailabilityGroupName value.
     */
    public String instanceAvailabilityGroupName() {
        return this.instanceAvailabilityGroupName;
    }

    /**
     * Set the instanceAvailabilityGroupName property: The name of the availability group to be created on the Managed
     * Instance.
     * 
     * @param instanceAvailabilityGroupName the instanceAvailabilityGroupName value to set.
     * @return the MiLinkCreateUpdateConfiguration object itself.
     */
    public MiLinkCreateUpdateConfiguration withInstanceAvailabilityGroupName(String instanceAvailabilityGroupName) {
        this.instanceAvailabilityGroupName = instanceAvailabilityGroupName;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("instanceAvailabilityGroupName", this.instanceAvailabilityGroupName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MiLinkCreateUpdateConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MiLinkCreateUpdateConfiguration if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the MiLinkCreateUpdateConfiguration.
     */
    public static MiLinkCreateUpdateConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MiLinkCreateUpdateConfiguration deserializedMiLinkCreateUpdateConfiguration
                = new MiLinkCreateUpdateConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("instanceAvailabilityGroupName".equals(fieldName)) {
                    deserializedMiLinkCreateUpdateConfiguration.instanceAvailabilityGroupName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMiLinkCreateUpdateConfiguration;
        });
    }
}
