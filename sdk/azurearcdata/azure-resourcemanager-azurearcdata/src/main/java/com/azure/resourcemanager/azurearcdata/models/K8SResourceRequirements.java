// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurearcdata.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.LinkedHashMap;
import java.util.Map;

/**
 * The kubernetes resource limits and requests used to restrict or reserve resource usage.
 */
@Fluent
public final class K8SResourceRequirements implements JsonSerializable<K8SResourceRequirements> {
    /*
     * Requests for a kubernetes resource type (e.g 'cpu', 'memory'). The 'cpu' request must be less than or equal to
     * 'cpu' limit. Default 'cpu' is 2, minimum is 1. Default 'memory' is '4Gi', minimum is '2Gi. If sku.tier is
     * GeneralPurpose, maximum 'cpu' is 24 and maximum 'memory' is '128Gi'.
     */
    private Map<String, String> requests;

    /*
     * Limits for a kubernetes resource type (e.g 'cpu', 'memory'). The 'cpu' request must be less than or equal to
     * 'cpu' limit. Default 'cpu' is 2, minimum is 1. Default 'memory' is '4Gi', minimum is '2Gi. If sku.tier is
     * GeneralPurpose, maximum 'cpu' is 24 and maximum 'memory' is '128Gi'.
     */
    private Map<String, String> limits;

    /*
     * The kubernetes resource limits and requests used to restrict or reserve resource usage.
     */
    private Map<String, Object> additionalProperties;

    /**
     * Creates an instance of K8SResourceRequirements class.
     */
    public K8SResourceRequirements() {
    }

    /**
     * Get the requests property: Requests for a kubernetes resource type (e.g 'cpu', 'memory'). The 'cpu' request must
     * be less than or equal to 'cpu' limit. Default 'cpu' is 2, minimum is 1. Default 'memory' is '4Gi', minimum is
     * '2Gi. If sku.tier is GeneralPurpose, maximum 'cpu' is 24 and maximum 'memory' is '128Gi'.
     * 
     * @return the requests value.
     */
    public Map<String, String> requests() {
        return this.requests;
    }

    /**
     * Set the requests property: Requests for a kubernetes resource type (e.g 'cpu', 'memory'). The 'cpu' request must
     * be less than or equal to 'cpu' limit. Default 'cpu' is 2, minimum is 1. Default 'memory' is '4Gi', minimum is
     * '2Gi. If sku.tier is GeneralPurpose, maximum 'cpu' is 24 and maximum 'memory' is '128Gi'.
     * 
     * @param requests the requests value to set.
     * @return the K8SResourceRequirements object itself.
     */
    public K8SResourceRequirements withRequests(Map<String, String> requests) {
        this.requests = requests;
        return this;
    }

    /**
     * Get the limits property: Limits for a kubernetes resource type (e.g 'cpu', 'memory'). The 'cpu' request must be
     * less than or equal to 'cpu' limit. Default 'cpu' is 2, minimum is 1. Default 'memory' is '4Gi', minimum is '2Gi.
     * If sku.tier is GeneralPurpose, maximum 'cpu' is 24 and maximum 'memory' is '128Gi'.
     * 
     * @return the limits value.
     */
    public Map<String, String> limits() {
        return this.limits;
    }

    /**
     * Set the limits property: Limits for a kubernetes resource type (e.g 'cpu', 'memory'). The 'cpu' request must be
     * less than or equal to 'cpu' limit. Default 'cpu' is 2, minimum is 1. Default 'memory' is '4Gi', minimum is '2Gi.
     * If sku.tier is GeneralPurpose, maximum 'cpu' is 24 and maximum 'memory' is '128Gi'.
     * 
     * @param limits the limits value to set.
     * @return the K8SResourceRequirements object itself.
     */
    public K8SResourceRequirements withLimits(Map<String, String> limits) {
        this.limits = limits;
        return this;
    }

    /**
     * Get the additionalProperties property: The kubernetes resource limits and requests used to restrict or reserve
     * resource usage.
     * 
     * @return the additionalProperties value.
     */
    public Map<String, Object> additionalProperties() {
        return this.additionalProperties;
    }

    /**
     * Set the additionalProperties property: The kubernetes resource limits and requests used to restrict or reserve
     * resource usage.
     * 
     * @param additionalProperties the additionalProperties value to set.
     * @return the K8SResourceRequirements object itself.
     */
    public K8SResourceRequirements withAdditionalProperties(Map<String, Object> additionalProperties) {
        this.additionalProperties = additionalProperties;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeMapField("requests", this.requests, (writer, element) -> writer.writeString(element));
        jsonWriter.writeMapField("limits", this.limits, (writer, element) -> writer.writeString(element));
        if (additionalProperties != null) {
            for (Map.Entry<String, Object> additionalProperty : additionalProperties.entrySet()) {
                jsonWriter.writeUntypedField(additionalProperty.getKey(), additionalProperty.getValue());
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of K8SResourceRequirements from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of K8SResourceRequirements if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the K8SResourceRequirements.
     */
    public static K8SResourceRequirements fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            K8SResourceRequirements deserializedK8SResourceRequirements = new K8SResourceRequirements();
            Map<String, Object> additionalProperties = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("requests".equals(fieldName)) {
                    Map<String, String> requests = reader.readMap(reader1 -> reader1.getString());
                    deserializedK8SResourceRequirements.requests = requests;
                } else if ("limits".equals(fieldName)) {
                    Map<String, String> limits = reader.readMap(reader1 -> reader1.getString());
                    deserializedK8SResourceRequirements.limits = limits;
                } else {
                    if (additionalProperties == null) {
                        additionalProperties = new LinkedHashMap<>();
                    }

                    additionalProperties.put(fieldName, reader.readUntyped());
                }
            }
            deserializedK8SResourceRequirements.additionalProperties = additionalProperties;

            return deserializedK8SResourceRequirements;
        });
    }
}
