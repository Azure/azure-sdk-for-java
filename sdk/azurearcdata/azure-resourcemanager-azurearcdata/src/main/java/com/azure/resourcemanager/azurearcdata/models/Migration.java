// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurearcdata.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Migration related configuration.
 */
@Fluent
public final class Migration implements JsonSerializable<Migration> {
    /*
     * Migration assessments related configuration.
     */
    private MigrationAssessment assessment;

    /**
     * Creates an instance of Migration class.
     */
    public Migration() {
    }

    /**
     * Get the assessment property: Migration assessments related configuration.
     * 
     * @return the assessment value.
     */
    public MigrationAssessment assessment() {
        return this.assessment;
    }

    /**
     * Set the assessment property: Migration assessments related configuration.
     * 
     * @param assessment the assessment value to set.
     * @return the Migration object itself.
     */
    public Migration withAssessment(MigrationAssessment assessment) {
        this.assessment = assessment;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (assessment() != null) {
            assessment().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("assessment", this.assessment);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Migration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Migration if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the Migration.
     */
    public static Migration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Migration deserializedMigration = new Migration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("assessment".equals(fieldName)) {
                    deserializedMigration.assessment = MigrationAssessment.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMigration;
        });
    }
}
