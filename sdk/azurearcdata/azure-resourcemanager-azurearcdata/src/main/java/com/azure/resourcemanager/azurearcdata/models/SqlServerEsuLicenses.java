// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurearcdata.models;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;

/**
 * Resource collection API of SqlServerEsuLicenses.
 */
public interface SqlServerEsuLicenses {
    /**
     * List sqlServerEsuLicense resources in the subscription.
     * 
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of SQL Server ESU licenses as paginated response with {@link PagedIterable}.
     */
    PagedIterable<SqlServerEsuLicense> list();

    /**
     * List sqlServerEsuLicense resources in the subscription.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of SQL Server ESU licenses as paginated response with {@link PagedIterable}.
     */
    PagedIterable<SqlServerEsuLicense> list(Context context);

    /**
     * List sqlServerEsuLicense resources in the resource group
     * 
     * Gets all sqlServerEsuLicenses in a resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all sqlServerEsuLicenses in a resource group as paginated response with {@link PagedIterable}.
     */
    PagedIterable<SqlServerEsuLicense> listByResourceGroup(String resourceGroupName);

    /**
     * List sqlServerEsuLicense resources in the resource group
     * 
     * Gets all sqlServerEsuLicenses in a resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all sqlServerEsuLicenses in a resource group as paginated response with {@link PagedIterable}.
     */
    PagedIterable<SqlServerEsuLicense> listByResourceGroup(String resourceGroupName, Context context);

    /**
     * Retrieves a SQL Server ESU license resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sqlServerEsuLicenseName Name of SQL Server ESU License.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describe SQL Server ESU license resource along with {@link Response}.
     */
    Response<SqlServerEsuLicense> getByResourceGroupWithResponse(String resourceGroupName,
        String sqlServerEsuLicenseName, Context context);

    /**
     * Retrieves a SQL Server ESU license resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sqlServerEsuLicenseName Name of SQL Server ESU License.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describe SQL Server ESU license resource.
     */
    SqlServerEsuLicense getByResourceGroup(String resourceGroupName, String sqlServerEsuLicenseName);

    /**
     * Deletes a SQL Server ESU license resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sqlServerEsuLicenseName Name of SQL Server ESU License.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    Response<Void> deleteByResourceGroupWithResponse(String resourceGroupName, String sqlServerEsuLicenseName,
        Context context);

    /**
     * Deletes a SQL Server ESU license resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sqlServerEsuLicenseName Name of SQL Server ESU License.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteByResourceGroup(String resourceGroupName, String sqlServerEsuLicenseName);

    /**
     * Retrieves a SQL Server ESU license resource.
     * 
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describe SQL Server ESU license resource along with {@link Response}.
     */
    SqlServerEsuLicense getById(String id);

    /**
     * Retrieves a SQL Server ESU license resource.
     * 
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describe SQL Server ESU license resource along with {@link Response}.
     */
    Response<SqlServerEsuLicense> getByIdWithResponse(String id, Context context);

    /**
     * Deletes a SQL Server ESU license resource.
     * 
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteById(String id);

    /**
     * Deletes a SQL Server ESU license resource.
     * 
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    Response<Void> deleteByIdWithResponse(String id, Context context);

    /**
     * Begins definition for a new SqlServerEsuLicense resource.
     * 
     * @param name resource name.
     * @return the first stage of the new SqlServerEsuLicense definition.
     */
    SqlServerEsuLicense.DefinitionStages.Blank define(String name);
}
