// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurearcdata.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * The SqlServerDatabaseResourcePropertiesBackupInformation model.
 */
@Fluent
public final class SqlServerDatabaseResourcePropertiesBackupInformation
    implements JsonSerializable<SqlServerDatabaseResourcePropertiesBackupInformation> {
    /*
     * Date time of last full backup.
     */
    private OffsetDateTime lastFullBackup;

    /*
     * Date time of last log backup.
     */
    private OffsetDateTime lastLogBackup;

    /**
     * Creates an instance of SqlServerDatabaseResourcePropertiesBackupInformation class.
     */
    public SqlServerDatabaseResourcePropertiesBackupInformation() {
    }

    /**
     * Get the lastFullBackup property: Date time of last full backup.
     * 
     * @return the lastFullBackup value.
     */
    public OffsetDateTime lastFullBackup() {
        return this.lastFullBackup;
    }

    /**
     * Set the lastFullBackup property: Date time of last full backup.
     * 
     * @param lastFullBackup the lastFullBackup value to set.
     * @return the SqlServerDatabaseResourcePropertiesBackupInformation object itself.
     */
    public SqlServerDatabaseResourcePropertiesBackupInformation withLastFullBackup(OffsetDateTime lastFullBackup) {
        this.lastFullBackup = lastFullBackup;
        return this;
    }

    /**
     * Get the lastLogBackup property: Date time of last log backup.
     * 
     * @return the lastLogBackup value.
     */
    public OffsetDateTime lastLogBackup() {
        return this.lastLogBackup;
    }

    /**
     * Set the lastLogBackup property: Date time of last log backup.
     * 
     * @param lastLogBackup the lastLogBackup value to set.
     * @return the SqlServerDatabaseResourcePropertiesBackupInformation object itself.
     */
    public SqlServerDatabaseResourcePropertiesBackupInformation withLastLogBackup(OffsetDateTime lastLogBackup) {
        this.lastLogBackup = lastLogBackup;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("lastFullBackup",
            this.lastFullBackup == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.lastFullBackup));
        jsonWriter.writeStringField("lastLogBackup",
            this.lastLogBackup == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.lastLogBackup));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SqlServerDatabaseResourcePropertiesBackupInformation from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SqlServerDatabaseResourcePropertiesBackupInformation if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SqlServerDatabaseResourcePropertiesBackupInformation.
     */
    public static SqlServerDatabaseResourcePropertiesBackupInformation fromJson(JsonReader jsonReader)
        throws IOException {
        return jsonReader.readObject(reader -> {
            SqlServerDatabaseResourcePropertiesBackupInformation deserializedSqlServerDatabaseResourcePropertiesBackupInformation
                = new SqlServerDatabaseResourcePropertiesBackupInformation();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("lastFullBackup".equals(fieldName)) {
                    deserializedSqlServerDatabaseResourcePropertiesBackupInformation.lastFullBackup = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("lastLogBackup".equals(fieldName)) {
                    deserializedSqlServerDatabaseResourcePropertiesBackupInformation.lastLogBackup = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSqlServerDatabaseResourcePropertiesBackupInformation;
        });
    }
}
