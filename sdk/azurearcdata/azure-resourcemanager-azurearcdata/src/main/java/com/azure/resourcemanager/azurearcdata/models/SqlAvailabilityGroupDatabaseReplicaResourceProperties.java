// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurearcdata.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The properties of Arc Sql availability group database replica resource.
 */
@Fluent
public final class SqlAvailabilityGroupDatabaseReplicaResourceProperties
    implements JsonSerializable<SqlAvailabilityGroupDatabaseReplicaResourceProperties> {
    /*
     * the database name.
     */
    private String databaseName;

    /*
     * the database replica name.
     */
    private String replicaName;

    /*
     * Whether the availability database is local.
     */
    private Boolean isLocal;

    /*
     * Returns 1 if the replica is primary, or 0 if it is a secondary replica.
     */
    private Boolean isPrimaryReplica;

    /*
     * Description of the data-movement state.
     */
    private String synchronizationStateDescription;

    /*
     * Whether this replica is transaction committer.
     */
    private Boolean isCommitParticipant;

    /*
     * Description of the health of database.
     */
    private String synchronizationHealthDescription;

    /*
     * Description of the database state of the availability replica.
     */
    private String databaseStateDescription;

    /*
     * Whether this data movement is suspended.
     */
    private Boolean isSuspended;

    /*
     * Description of the database suspended state reason.
     */
    private String suspendReasonDescription;

    /**
     * Creates an instance of SqlAvailabilityGroupDatabaseReplicaResourceProperties class.
     */
    public SqlAvailabilityGroupDatabaseReplicaResourceProperties() {
    }

    /**
     * Get the databaseName property: the database name.
     * 
     * @return the databaseName value.
     */
    public String databaseName() {
        return this.databaseName;
    }

    /**
     * Set the databaseName property: the database name.
     * 
     * @param databaseName the databaseName value to set.
     * @return the SqlAvailabilityGroupDatabaseReplicaResourceProperties object itself.
     */
    public SqlAvailabilityGroupDatabaseReplicaResourceProperties withDatabaseName(String databaseName) {
        this.databaseName = databaseName;
        return this;
    }

    /**
     * Get the replicaName property: the database replica name.
     * 
     * @return the replicaName value.
     */
    public String replicaName() {
        return this.replicaName;
    }

    /**
     * Get the isLocal property: Whether the availability database is local.
     * 
     * @return the isLocal value.
     */
    public Boolean isLocal() {
        return this.isLocal;
    }

    /**
     * Get the isPrimaryReplica property: Returns 1 if the replica is primary, or 0 if it is a secondary replica.
     * 
     * @return the isPrimaryReplica value.
     */
    public Boolean isPrimaryReplica() {
        return this.isPrimaryReplica;
    }

    /**
     * Get the synchronizationStateDescription property: Description of the data-movement state.
     * 
     * @return the synchronizationStateDescription value.
     */
    public String synchronizationStateDescription() {
        return this.synchronizationStateDescription;
    }

    /**
     * Get the isCommitParticipant property: Whether this replica is transaction committer.
     * 
     * @return the isCommitParticipant value.
     */
    public Boolean isCommitParticipant() {
        return this.isCommitParticipant;
    }

    /**
     * Get the synchronizationHealthDescription property: Description of the health of database.
     * 
     * @return the synchronizationHealthDescription value.
     */
    public String synchronizationHealthDescription() {
        return this.synchronizationHealthDescription;
    }

    /**
     * Get the databaseStateDescription property: Description of the database state of the availability replica.
     * 
     * @return the databaseStateDescription value.
     */
    public String databaseStateDescription() {
        return this.databaseStateDescription;
    }

    /**
     * Get the isSuspended property: Whether this data movement is suspended.
     * 
     * @return the isSuspended value.
     */
    public Boolean isSuspended() {
        return this.isSuspended;
    }

    /**
     * Get the suspendReasonDescription property: Description of the database suspended state reason.
     * 
     * @return the suspendReasonDescription value.
     */
    public String suspendReasonDescription() {
        return this.suspendReasonDescription;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("databaseName", this.databaseName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SqlAvailabilityGroupDatabaseReplicaResourceProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SqlAvailabilityGroupDatabaseReplicaResourceProperties if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SqlAvailabilityGroupDatabaseReplicaResourceProperties.
     */
    public static SqlAvailabilityGroupDatabaseReplicaResourceProperties fromJson(JsonReader jsonReader)
        throws IOException {
        return jsonReader.readObject(reader -> {
            SqlAvailabilityGroupDatabaseReplicaResourceProperties deserializedSqlAvailabilityGroupDatabaseReplicaResourceProperties
                = new SqlAvailabilityGroupDatabaseReplicaResourceProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("databaseName".equals(fieldName)) {
                    deserializedSqlAvailabilityGroupDatabaseReplicaResourceProperties.databaseName = reader.getString();
                } else if ("replicaName".equals(fieldName)) {
                    deserializedSqlAvailabilityGroupDatabaseReplicaResourceProperties.replicaName = reader.getString();
                } else if ("isLocal".equals(fieldName)) {
                    deserializedSqlAvailabilityGroupDatabaseReplicaResourceProperties.isLocal
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("isPrimaryReplica".equals(fieldName)) {
                    deserializedSqlAvailabilityGroupDatabaseReplicaResourceProperties.isPrimaryReplica
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("synchronizationStateDescription".equals(fieldName)) {
                    deserializedSqlAvailabilityGroupDatabaseReplicaResourceProperties.synchronizationStateDescription
                        = reader.getString();
                } else if ("isCommitParticipant".equals(fieldName)) {
                    deserializedSqlAvailabilityGroupDatabaseReplicaResourceProperties.isCommitParticipant
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("synchronizationHealthDescription".equals(fieldName)) {
                    deserializedSqlAvailabilityGroupDatabaseReplicaResourceProperties.synchronizationHealthDescription
                        = reader.getString();
                } else if ("databaseStateDescription".equals(fieldName)) {
                    deserializedSqlAvailabilityGroupDatabaseReplicaResourceProperties.databaseStateDescription
                        = reader.getString();
                } else if ("isSuspended".equals(fieldName)) {
                    deserializedSqlAvailabilityGroupDatabaseReplicaResourceProperties.isSuspended
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("suspendReasonDescription".equals(fieldName)) {
                    deserializedSqlAvailabilityGroupDatabaseReplicaResourceProperties.suspendReasonDescription
                        = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSqlAvailabilityGroupDatabaseReplicaResourceProperties;
        });
    }
}
