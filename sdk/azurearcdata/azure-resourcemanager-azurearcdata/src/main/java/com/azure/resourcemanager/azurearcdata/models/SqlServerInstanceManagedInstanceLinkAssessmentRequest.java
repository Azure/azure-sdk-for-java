// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurearcdata.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The MI Link assessment request for the SQL Server instance.
 */
@Fluent
public final class SqlServerInstanceManagedInstanceLinkAssessmentRequest
    implements JsonSerializable<SqlServerInstanceManagedInstanceLinkAssessmentRequest> {
    /*
     * The Azure SQL Managed Instance resource ID to link with the SQL Server instance.
     */
    private String azureManagedInstanceResourceId;

    /*
     * The role of managed instance in a distributed availability group, can be Primary or Secondary.
     */
    private AzureManagedInstanceRole azureManagedInstanceRole;

    /*
     * The name of the database to be replicated to the Azure SQL Managed Instance.
     */
    private String databaseName;

    /*
     * The name of the availability group to be used for the database replication.
     */
    private String availabilityGroupName;

    /**
     * Creates an instance of SqlServerInstanceManagedInstanceLinkAssessmentRequest class.
     */
    public SqlServerInstanceManagedInstanceLinkAssessmentRequest() {
    }

    /**
     * Get the azureManagedInstanceResourceId property: The Azure SQL Managed Instance resource ID to link with the SQL
     * Server instance.
     * 
     * @return the azureManagedInstanceResourceId value.
     */
    public String azureManagedInstanceResourceId() {
        return this.azureManagedInstanceResourceId;
    }

    /**
     * Set the azureManagedInstanceResourceId property: The Azure SQL Managed Instance resource ID to link with the SQL
     * Server instance.
     * 
     * @param azureManagedInstanceResourceId the azureManagedInstanceResourceId value to set.
     * @return the SqlServerInstanceManagedInstanceLinkAssessmentRequest object itself.
     */
    public SqlServerInstanceManagedInstanceLinkAssessmentRequest
        withAzureManagedInstanceResourceId(String azureManagedInstanceResourceId) {
        this.azureManagedInstanceResourceId = azureManagedInstanceResourceId;
        return this;
    }

    /**
     * Get the azureManagedInstanceRole property: The role of managed instance in a distributed availability group, can
     * be Primary or Secondary.
     * 
     * @return the azureManagedInstanceRole value.
     */
    public AzureManagedInstanceRole azureManagedInstanceRole() {
        return this.azureManagedInstanceRole;
    }

    /**
     * Set the azureManagedInstanceRole property: The role of managed instance in a distributed availability group, can
     * be Primary or Secondary.
     * 
     * @param azureManagedInstanceRole the azureManagedInstanceRole value to set.
     * @return the SqlServerInstanceManagedInstanceLinkAssessmentRequest object itself.
     */
    public SqlServerInstanceManagedInstanceLinkAssessmentRequest
        withAzureManagedInstanceRole(AzureManagedInstanceRole azureManagedInstanceRole) {
        this.azureManagedInstanceRole = azureManagedInstanceRole;
        return this;
    }

    /**
     * Get the databaseName property: The name of the database to be replicated to the Azure SQL Managed Instance.
     * 
     * @return the databaseName value.
     */
    public String databaseName() {
        return this.databaseName;
    }

    /**
     * Set the databaseName property: The name of the database to be replicated to the Azure SQL Managed Instance.
     * 
     * @param databaseName the databaseName value to set.
     * @return the SqlServerInstanceManagedInstanceLinkAssessmentRequest object itself.
     */
    public SqlServerInstanceManagedInstanceLinkAssessmentRequest withDatabaseName(String databaseName) {
        this.databaseName = databaseName;
        return this;
    }

    /**
     * Get the availabilityGroupName property: The name of the availability group to be used for the database
     * replication.
     * 
     * @return the availabilityGroupName value.
     */
    public String availabilityGroupName() {
        return this.availabilityGroupName;
    }

    /**
     * Set the availabilityGroupName property: The name of the availability group to be used for the database
     * replication.
     * 
     * @param availabilityGroupName the availabilityGroupName value to set.
     * @return the SqlServerInstanceManagedInstanceLinkAssessmentRequest object itself.
     */
    public SqlServerInstanceManagedInstanceLinkAssessmentRequest
        withAvailabilityGroupName(String availabilityGroupName) {
        this.availabilityGroupName = availabilityGroupName;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (azureManagedInstanceResourceId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property azureManagedInstanceResourceId in model SqlServerInstanceManagedInstanceLinkAssessmentRequest"));
        }
        if (databaseName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property databaseName in model SqlServerInstanceManagedInstanceLinkAssessmentRequest"));
        }
        if (availabilityGroupName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property availabilityGroupName in model SqlServerInstanceManagedInstanceLinkAssessmentRequest"));
        }
    }

    private static final ClientLogger LOGGER
        = new ClientLogger(SqlServerInstanceManagedInstanceLinkAssessmentRequest.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("azureManagedInstanceResourceId", this.azureManagedInstanceResourceId);
        jsonWriter.writeStringField("databaseName", this.databaseName);
        jsonWriter.writeStringField("availabilityGroupName", this.availabilityGroupName);
        jsonWriter.writeStringField("azureManagedInstanceRole",
            this.azureManagedInstanceRole == null ? null : this.azureManagedInstanceRole.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SqlServerInstanceManagedInstanceLinkAssessmentRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SqlServerInstanceManagedInstanceLinkAssessmentRequest if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SqlServerInstanceManagedInstanceLinkAssessmentRequest.
     */
    public static SqlServerInstanceManagedInstanceLinkAssessmentRequest fromJson(JsonReader jsonReader)
        throws IOException {
        return jsonReader.readObject(reader -> {
            SqlServerInstanceManagedInstanceLinkAssessmentRequest deserializedSqlServerInstanceManagedInstanceLinkAssessmentRequest
                = new SqlServerInstanceManagedInstanceLinkAssessmentRequest();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("azureManagedInstanceResourceId".equals(fieldName)) {
                    deserializedSqlServerInstanceManagedInstanceLinkAssessmentRequest.azureManagedInstanceResourceId
                        = reader.getString();
                } else if ("databaseName".equals(fieldName)) {
                    deserializedSqlServerInstanceManagedInstanceLinkAssessmentRequest.databaseName = reader.getString();
                } else if ("availabilityGroupName".equals(fieldName)) {
                    deserializedSqlServerInstanceManagedInstanceLinkAssessmentRequest.availabilityGroupName
                        = reader.getString();
                } else if ("azureManagedInstanceRole".equals(fieldName)) {
                    deserializedSqlServerInstanceManagedInstanceLinkAssessmentRequest.azureManagedInstanceRole
                        = AzureManagedInstanceRole.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSqlServerInstanceManagedInstanceLinkAssessmentRequest;
        });
    }
}
