// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurearcdata.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The azure resource identifier for the Sql Managed Instance.
 */
@Fluent
public final class FailoverMiLinkResourceId implements JsonSerializable<FailoverMiLinkResourceId> {
    /*
     * Azure resource id for the sql managed instance.
     */
    private String managedInstanceId;

    /**
     * Creates an instance of FailoverMiLinkResourceId class.
     */
    public FailoverMiLinkResourceId() {
    }

    /**
     * Get the managedInstanceId property: Azure resource id for the sql managed instance.
     * 
     * @return the managedInstanceId value.
     */
    public String managedInstanceId() {
        return this.managedInstanceId;
    }

    /**
     * Set the managedInstanceId property: Azure resource id for the sql managed instance.
     * 
     * @param managedInstanceId the managedInstanceId value to set.
     * @return the FailoverMiLinkResourceId object itself.
     */
    public FailoverMiLinkResourceId withManagedInstanceId(String managedInstanceId) {
        this.managedInstanceId = managedInstanceId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("managedInstanceId", this.managedInstanceId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FailoverMiLinkResourceId from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FailoverMiLinkResourceId if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the FailoverMiLinkResourceId.
     */
    public static FailoverMiLinkResourceId fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FailoverMiLinkResourceId deserializedFailoverMiLinkResourceId = new FailoverMiLinkResourceId();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("managedInstanceId".equals(fieldName)) {
                    deserializedFailoverMiLinkResourceId.managedInstanceId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedFailoverMiLinkResourceId;
        });
    }
}
