// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurearcdata.implementation;

import com.azure.core.util.Context;
import com.azure.resourcemanager.azurearcdata.fluent.models.ActiveDirectoryConnectorResourceInner;
import com.azure.resourcemanager.azurearcdata.models.ActiveDirectoryConnectorProperties;
import com.azure.resourcemanager.azurearcdata.models.ActiveDirectoryConnectorResource;

public final class ActiveDirectoryConnectorResourceImpl
    implements ActiveDirectoryConnectorResource, ActiveDirectoryConnectorResource.Definition {
    private ActiveDirectoryConnectorResourceInner innerObject;

    private final com.azure.resourcemanager.azurearcdata.AzureArcDataManager serviceManager;

    ActiveDirectoryConnectorResourceImpl(
        ActiveDirectoryConnectorResourceInner innerObject,
        com.azure.resourcemanager.azurearcdata.AzureArcDataManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
    }

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public ActiveDirectoryConnectorProperties properties() {
        return this.innerModel().properties();
    }

    public ActiveDirectoryConnectorResourceInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.azurearcdata.AzureArcDataManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String dataControllerName;

    private String activeDirectoryConnectorName;

    public ActiveDirectoryConnectorResourceImpl withExistingDataController(
        String resourceGroupName, String dataControllerName) {
        this.resourceGroupName = resourceGroupName;
        this.dataControllerName = dataControllerName;
        return this;
    }

    public ActiveDirectoryConnectorResource create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getActiveDirectoryConnectors()
                .create(
                    resourceGroupName,
                    dataControllerName,
                    activeDirectoryConnectorName,
                    this.innerModel(),
                    Context.NONE);
        return this;
    }

    public ActiveDirectoryConnectorResource create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getActiveDirectoryConnectors()
                .create(
                    resourceGroupName, dataControllerName, activeDirectoryConnectorName, this.innerModel(), context);
        return this;
    }

    ActiveDirectoryConnectorResourceImpl(
        String name, com.azure.resourcemanager.azurearcdata.AzureArcDataManager serviceManager) {
        this.innerObject = new ActiveDirectoryConnectorResourceInner();
        this.serviceManager = serviceManager;
        this.activeDirectoryConnectorName = name;
    }

    public ActiveDirectoryConnectorResource refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getActiveDirectoryConnectors()
                .getWithResponse(resourceGroupName, dataControllerName, activeDirectoryConnectorName, Context.NONE)
                .getValue();
        return this;
    }

    public ActiveDirectoryConnectorResource refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getActiveDirectoryConnectors()
                .getWithResponse(resourceGroupName, dataControllerName, activeDirectoryConnectorName, context)
                .getValue();
        return this;
    }

    public ActiveDirectoryConnectorResourceImpl withProperties(ActiveDirectoryConnectorProperties properties) {
        this.innerModel().withProperties(properties);
        return this;
    }
}
