// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurearcdata.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.azurearcdata.fluent.SqlServerAvailabilityGroupsClient;
import com.azure.resourcemanager.azurearcdata.fluent.models.SqlServerAvailabilityGroupResourceInner;
import com.azure.resourcemanager.azurearcdata.models.ArcSqlServerAvailabilityGroupListResult;
import com.azure.resourcemanager.azurearcdata.models.AvailabilityGroupCreateUpdateConfiguration;
import com.azure.resourcemanager.azurearcdata.models.Databases;
import com.azure.resourcemanager.azurearcdata.models.DistributedAvailabilityGroupCreateUpdateConfiguration;
import com.azure.resourcemanager.azurearcdata.models.FailoverMiLinkResourceId;
import com.azure.resourcemanager.azurearcdata.models.ManagedInstanceLinkCreateUpdateConfiguration;
import com.azure.resourcemanager.azurearcdata.models.SqlServerAvailabilityGroupUpdate;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in SqlServerAvailabilityGroupsClient.
 */
public final class SqlServerAvailabilityGroupsClientImpl implements SqlServerAvailabilityGroupsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final SqlServerAvailabilityGroupsService service;

    /**
     * The service client containing this operation class.
     */
    private final AzureArcDataManagementClientImpl client;

    /**
     * Initializes an instance of SqlServerAvailabilityGroupsClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    SqlServerAvailabilityGroupsClientImpl(AzureArcDataManagementClientImpl client) {
        this.service = RestProxy.create(SqlServerAvailabilityGroupsService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for AzureArcDataManagementClientSqlServerAvailabilityGroups to be used by
     * the proxy service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "AzureArcDataManagementClientSqlServerAvailabilityGroups")
    public interface SqlServerAvailabilityGroupsService {
        @Headers({ "Content-Type: application/json" })
        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlServerInstances/{sqlServerInstanceName}/availabilityGroups/{availabilityGroupName}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SqlServerAvailabilityGroupResourceInner>> create(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("sqlServerInstanceName") String sqlServerInstanceName,
            @PathParam("availabilityGroupName") String availabilityGroupName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") SqlServerAvailabilityGroupResourceInner sqlServerAvailabilityGroupResource,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlServerInstances/{sqlServerInstanceName}/availabilityGroups/{availabilityGroupName}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<SqlServerAvailabilityGroupResourceInner> createSync(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("sqlServerInstanceName") String sqlServerInstanceName,
            @PathParam("availabilityGroupName") String availabilityGroupName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") SqlServerAvailabilityGroupResourceInner sqlServerAvailabilityGroupResource,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlServerInstances/{sqlServerInstanceName}/availabilityGroups/{availabilityGroupName}")
        @ExpectedResponses({ 202, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> delete(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("sqlServerInstanceName") String sqlServerInstanceName,
            @PathParam("availabilityGroupName") String availabilityGroupName,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlServerInstances/{sqlServerInstanceName}/availabilityGroups/{availabilityGroupName}")
        @ExpectedResponses({ 202, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> deleteSync(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("sqlServerInstanceName") String sqlServerInstanceName,
            @PathParam("availabilityGroupName") String availabilityGroupName,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlServerInstances/{sqlServerInstanceName}/availabilityGroups/{availabilityGroupName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SqlServerAvailabilityGroupResourceInner>> get(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("sqlServerInstanceName") String sqlServerInstanceName,
            @PathParam("availabilityGroupName") String availabilityGroupName,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlServerInstances/{sqlServerInstanceName}/availabilityGroups/{availabilityGroupName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<SqlServerAvailabilityGroupResourceInner> getSync(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("sqlServerInstanceName") String sqlServerInstanceName,
            @PathParam("availabilityGroupName") String availabilityGroupName,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Patch("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlServerInstances/{sqlServerInstanceName}/availabilityGroups/{availabilityGroupName}")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> update(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("sqlServerInstanceName") String sqlServerInstanceName,
            @PathParam("availabilityGroupName") String availabilityGroupName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") SqlServerAvailabilityGroupUpdate sqlServerAvailabilityGroupUpdate,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Patch("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlServerInstances/{sqlServerInstanceName}/availabilityGroups/{availabilityGroupName}")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> updateSync(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("sqlServerInstanceName") String sqlServerInstanceName,
            @PathParam("availabilityGroupName") String availabilityGroupName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") SqlServerAvailabilityGroupUpdate sqlServerAvailabilityGroupUpdate,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlServerInstances/{sqlServerInstanceName}/availabilityGroups/{availabilityGroupName}/getDetailView")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SqlServerAvailabilityGroupResourceInner>> detailView(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("sqlServerInstanceName") String sqlServerInstanceName,
            @PathParam("availabilityGroupName") String availabilityGroupName,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlServerInstances/{sqlServerInstanceName}/availabilityGroups/{availabilityGroupName}/getDetailView")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<SqlServerAvailabilityGroupResourceInner> detailViewSync(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("sqlServerInstanceName") String sqlServerInstanceName,
            @PathParam("availabilityGroupName") String availabilityGroupName,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlServerInstances/{sqlServerInstanceName}/availabilityGroups/{availabilityGroupName}/failover")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SqlServerAvailabilityGroupResourceInner>> failover(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("sqlServerInstanceName") String sqlServerInstanceName,
            @PathParam("availabilityGroupName") String availabilityGroupName,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlServerInstances/{sqlServerInstanceName}/availabilityGroups/{availabilityGroupName}/failover")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<SqlServerAvailabilityGroupResourceInner> failoverSync(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("sqlServerInstanceName") String sqlServerInstanceName,
            @PathParam("availabilityGroupName") String availabilityGroupName,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlServerInstances/{sqlServerInstanceName}/availabilityGroups/{availabilityGroupName}/forceFailoverAllowDataLoss")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SqlServerAvailabilityGroupResourceInner>> forceFailoverAllowDataLoss(
            @HostParam("$host") String endpoint, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("sqlServerInstanceName") String sqlServerInstanceName,
            @PathParam("availabilityGroupName") String availabilityGroupName,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlServerInstances/{sqlServerInstanceName}/availabilityGroups/{availabilityGroupName}/forceFailoverAllowDataLoss")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<SqlServerAvailabilityGroupResourceInner> forceFailoverAllowDataLossSync(
            @HostParam("$host") String endpoint, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("sqlServerInstanceName") String sqlServerInstanceName,
            @PathParam("availabilityGroupName") String availabilityGroupName,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlServerInstances/{sqlServerInstanceName}/createAvailabilityGroup")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> createAvailabilityGroup(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("sqlServerInstanceName") String sqlServerInstanceName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") AvailabilityGroupCreateUpdateConfiguration createAgConfiguration,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlServerInstances/{sqlServerInstanceName}/createAvailabilityGroup")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> createAvailabilityGroupSync(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("sqlServerInstanceName") String sqlServerInstanceName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") AvailabilityGroupCreateUpdateConfiguration createAgConfiguration,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlServerInstances/{sqlServerInstanceName}/createDistributedAvailabilityGroup")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> createDistributedAvailabilityGroup(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("sqlServerInstanceName") String sqlServerInstanceName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") DistributedAvailabilityGroupCreateUpdateConfiguration createDagConfiguration,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlServerInstances/{sqlServerInstanceName}/createDistributedAvailabilityGroup")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> createDistributedAvailabilityGroupSync(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("sqlServerInstanceName") String sqlServerInstanceName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") DistributedAvailabilityGroupCreateUpdateConfiguration createDagConfiguration,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlServerInstances/{sqlServerInstanceName}/createManagedInstanceLink")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> createManagedInstanceLink(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("sqlServerInstanceName") String sqlServerInstanceName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") ManagedInstanceLinkCreateUpdateConfiguration createManagedInstanceLinkConfiguration,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlServerInstances/{sqlServerInstanceName}/createManagedInstanceLink")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> createManagedInstanceLinkSync(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("sqlServerInstanceName") String sqlServerInstanceName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") ManagedInstanceLinkCreateUpdateConfiguration createManagedInstanceLinkConfiguration,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlServerInstances/{sqlServerInstanceName}/availabilityGroups/{availabilityGroupName}/addDatabases")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SqlServerAvailabilityGroupResourceInner>> addDatabases(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("sqlServerInstanceName") String sqlServerInstanceName,
            @PathParam("availabilityGroupName") String availabilityGroupName,
            @QueryParam("api-version") String apiVersion, @BodyParam("application/json") Databases databases,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlServerInstances/{sqlServerInstanceName}/availabilityGroups/{availabilityGroupName}/addDatabases")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<SqlServerAvailabilityGroupResourceInner> addDatabasesSync(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("sqlServerInstanceName") String sqlServerInstanceName,
            @PathParam("availabilityGroupName") String availabilityGroupName,
            @QueryParam("api-version") String apiVersion, @BodyParam("application/json") Databases databases,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlServerInstances/{sqlServerInstanceName}/availabilityGroups/{availabilityGroupName}/failoverMiLink")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> failoverMiLink(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("sqlServerInstanceName") String sqlServerInstanceName,
            @PathParam("availabilityGroupName") String availabilityGroupName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") FailoverMiLinkResourceId managedInstanceResourceId,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlServerInstances/{sqlServerInstanceName}/availabilityGroups/{availabilityGroupName}/failoverMiLink")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> failoverMiLinkSync(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("sqlServerInstanceName") String sqlServerInstanceName,
            @PathParam("availabilityGroupName") String availabilityGroupName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") FailoverMiLinkResourceId managedInstanceResourceId,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlServerInstances/{sqlServerInstanceName}/availabilityGroups/{availabilityGroupName}/removeDatabases")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SqlServerAvailabilityGroupResourceInner>> removeDatabases(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("sqlServerInstanceName") String sqlServerInstanceName,
            @PathParam("availabilityGroupName") String availabilityGroupName,
            @QueryParam("api-version") String apiVersion, @BodyParam("application/json") Databases databases,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlServerInstances/{sqlServerInstanceName}/availabilityGroups/{availabilityGroupName}/removeDatabases")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<SqlServerAvailabilityGroupResourceInner> removeDatabasesSync(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("sqlServerInstanceName") String sqlServerInstanceName,
            @PathParam("availabilityGroupName") String availabilityGroupName,
            @QueryParam("api-version") String apiVersion, @BodyParam("application/json") Databases databases,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlServerInstances/{sqlServerInstanceName}/availabilityGroups")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ArcSqlServerAvailabilityGroupListResult>> list(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("sqlServerInstanceName") String sqlServerInstanceName,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlServerInstances/{sqlServerInstanceName}/availabilityGroups")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<ArcSqlServerAvailabilityGroupListResult> listSync(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("sqlServerInstanceName") String sqlServerInstanceName,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ArcSqlServerAvailabilityGroupListResult>> listNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<ArcSqlServerAvailabilityGroupListResult> listNextSync(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Creates or replaces an Arc Sql Server Availability Group.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param availabilityGroupName Name of SQL Availability Group.
     * @param sqlServerAvailabilityGroupResource The request body for availability group resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return arc Sql Server Availability Group along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SqlServerAvailabilityGroupResourceInner>> createWithResponseAsync(String resourceGroupName,
        String sqlServerInstanceName, String availabilityGroupName,
        SqlServerAvailabilityGroupResourceInner sqlServerAvailabilityGroupResource) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sqlServerInstanceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter sqlServerInstanceName is required and cannot be null."));
        }
        if (availabilityGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter availabilityGroupName is required and cannot be null."));
        }
        if (sqlServerAvailabilityGroupResource == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter sqlServerAvailabilityGroupResource is required and cannot be null."));
        } else {
            sqlServerAvailabilityGroupResource.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.create(this.client.getEndpoint(), this.client.getSubscriptionId(),
                resourceGroupName, sqlServerInstanceName, availabilityGroupName, this.client.getApiVersion(),
                sqlServerAvailabilityGroupResource, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Creates or replaces an Arc Sql Server Availability Group.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param availabilityGroupName Name of SQL Availability Group.
     * @param sqlServerAvailabilityGroupResource The request body for availability group resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return arc Sql Server Availability Group on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SqlServerAvailabilityGroupResourceInner> createAsync(String resourceGroupName,
        String sqlServerInstanceName, String availabilityGroupName,
        SqlServerAvailabilityGroupResourceInner sqlServerAvailabilityGroupResource) {
        return createWithResponseAsync(resourceGroupName, sqlServerInstanceName, availabilityGroupName,
            sqlServerAvailabilityGroupResource).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Creates or replaces an Arc Sql Server Availability Group.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param availabilityGroupName Name of SQL Availability Group.
     * @param sqlServerAvailabilityGroupResource The request body for availability group resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return arc Sql Server Availability Group along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<SqlServerAvailabilityGroupResourceInner> createWithResponse(String resourceGroupName,
        String sqlServerInstanceName, String availabilityGroupName,
        SqlServerAvailabilityGroupResourceInner sqlServerAvailabilityGroupResource, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sqlServerInstanceName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter sqlServerInstanceName is required and cannot be null."));
        }
        if (availabilityGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter availabilityGroupName is required and cannot be null."));
        }
        if (sqlServerAvailabilityGroupResource == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter sqlServerAvailabilityGroupResource is required and cannot be null."));
        } else {
            sqlServerAvailabilityGroupResource.validate();
        }
        final String accept = "application/json";
        return service.createSync(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
            sqlServerInstanceName, availabilityGroupName, this.client.getApiVersion(),
            sqlServerAvailabilityGroupResource, accept, context);
    }

    /**
     * Creates or replaces an Arc Sql Server Availability Group.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param availabilityGroupName Name of SQL Availability Group.
     * @param sqlServerAvailabilityGroupResource The request body for availability group resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return arc Sql Server Availability Group.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SqlServerAvailabilityGroupResourceInner create(String resourceGroupName, String sqlServerInstanceName,
        String availabilityGroupName, SqlServerAvailabilityGroupResourceInner sqlServerAvailabilityGroupResource) {
        return createWithResponse(resourceGroupName, sqlServerInstanceName, availabilityGroupName,
            sqlServerAvailabilityGroupResource, Context.NONE).getValue();
    }

    /**
     * Deletes an Arc Sql Server availability group resource.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param availabilityGroupName Name of SQL Availability Group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(String resourceGroupName,
        String sqlServerInstanceName, String availabilityGroupName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sqlServerInstanceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter sqlServerInstanceName is required and cannot be null."));
        }
        if (availabilityGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter availabilityGroupName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.delete(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
                    sqlServerInstanceName, availabilityGroupName, this.client.getApiVersion(), accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Deletes an Arc Sql Server availability group resource.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param availabilityGroupName Name of SQL Availability Group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> deleteWithResponse(String resourceGroupName, String sqlServerInstanceName,
        String availabilityGroupName) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sqlServerInstanceName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter sqlServerInstanceName is required and cannot be null."));
        }
        if (availabilityGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter availabilityGroupName is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.deleteSync(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
            sqlServerInstanceName, availabilityGroupName, this.client.getApiVersion(), accept, Context.NONE);
    }

    /**
     * Deletes an Arc Sql Server availability group resource.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param availabilityGroupName Name of SQL Availability Group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> deleteWithResponse(String resourceGroupName, String sqlServerInstanceName,
        String availabilityGroupName, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sqlServerInstanceName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter sqlServerInstanceName is required and cannot be null."));
        }
        if (availabilityGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter availabilityGroupName is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.deleteSync(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
            sqlServerInstanceName, availabilityGroupName, this.client.getApiVersion(), accept, context);
    }

    /**
     * Deletes an Arc Sql Server availability group resource.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param availabilityGroupName Name of SQL Availability Group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(String resourceGroupName, String sqlServerInstanceName,
        String availabilityGroupName) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = deleteWithResponseAsync(resourceGroupName, sqlServerInstanceName, availabilityGroupName);
        return this.client.<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class,
            this.client.getContext());
    }

    /**
     * Deletes an Arc Sql Server availability group resource.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param availabilityGroupName Name of SQL Availability Group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String sqlServerInstanceName,
        String availabilityGroupName) {
        Response<BinaryData> response
            = deleteWithResponse(resourceGroupName, sqlServerInstanceName, availabilityGroupName);
        return this.client.<Void, Void>getLroResult(response, Void.class, Void.class, Context.NONE);
    }

    /**
     * Deletes an Arc Sql Server availability group resource.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param availabilityGroupName Name of SQL Availability Group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String sqlServerInstanceName,
        String availabilityGroupName, Context context) {
        Response<BinaryData> response
            = deleteWithResponse(resourceGroupName, sqlServerInstanceName, availabilityGroupName, context);
        return this.client.<Void, Void>getLroResult(response, Void.class, Void.class, context);
    }

    /**
     * Deletes an Arc Sql Server availability group resource.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param availabilityGroupName Name of SQL Availability Group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String sqlServerInstanceName,
        String availabilityGroupName) {
        return beginDeleteAsync(resourceGroupName, sqlServerInstanceName, availabilityGroupName).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Deletes an Arc Sql Server availability group resource.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param availabilityGroupName Name of SQL Availability Group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String sqlServerInstanceName, String availabilityGroupName) {
        beginDelete(resourceGroupName, sqlServerInstanceName, availabilityGroupName).getFinalResult();
    }

    /**
     * Deletes an Arc Sql Server availability group resource.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param availabilityGroupName Name of SQL Availability Group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String sqlServerInstanceName, String availabilityGroupName,
        Context context) {
        beginDelete(resourceGroupName, sqlServerInstanceName, availabilityGroupName, context).getFinalResult();
    }

    /**
     * Retrieves an Arc Sql Server availability group.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param availabilityGroupName Name of SQL Availability Group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return arc Sql Server Availability Group along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SqlServerAvailabilityGroupResourceInner>> getWithResponseAsync(String resourceGroupName,
        String sqlServerInstanceName, String availabilityGroupName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sqlServerInstanceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter sqlServerInstanceName is required and cannot be null."));
        }
        if (availabilityGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter availabilityGroupName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.get(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
                    sqlServerInstanceName, availabilityGroupName, this.client.getApiVersion(), accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Retrieves an Arc Sql Server availability group.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param availabilityGroupName Name of SQL Availability Group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return arc Sql Server Availability Group on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SqlServerAvailabilityGroupResourceInner> getAsync(String resourceGroupName,
        String sqlServerInstanceName, String availabilityGroupName) {
        return getWithResponseAsync(resourceGroupName, sqlServerInstanceName, availabilityGroupName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Retrieves an Arc Sql Server availability group.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param availabilityGroupName Name of SQL Availability Group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return arc Sql Server Availability Group along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<SqlServerAvailabilityGroupResourceInner> getWithResponse(String resourceGroupName,
        String sqlServerInstanceName, String availabilityGroupName, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sqlServerInstanceName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter sqlServerInstanceName is required and cannot be null."));
        }
        if (availabilityGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter availabilityGroupName is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.getSync(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
            sqlServerInstanceName, availabilityGroupName, this.client.getApiVersion(), accept, context);
    }

    /**
     * Retrieves an Arc Sql Server availability group.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param availabilityGroupName Name of SQL Availability Group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return arc Sql Server Availability Group.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SqlServerAvailabilityGroupResourceInner get(String resourceGroupName, String sqlServerInstanceName,
        String availabilityGroupName) {
        return getWithResponse(resourceGroupName, sqlServerInstanceName, availabilityGroupName, Context.NONE)
            .getValue();
    }

    /**
     * Updates an existing Availability Group.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param availabilityGroupName Name of SQL Availability Group.
     * @param sqlServerAvailabilityGroupUpdate The requested server availability group resource state.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return arc Sql Server Availability Group along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateWithResponseAsync(String resourceGroupName,
        String sqlServerInstanceName, String availabilityGroupName,
        SqlServerAvailabilityGroupUpdate sqlServerAvailabilityGroupUpdate) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sqlServerInstanceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter sqlServerInstanceName is required and cannot be null."));
        }
        if (availabilityGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter availabilityGroupName is required and cannot be null."));
        }
        if (sqlServerAvailabilityGroupUpdate == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter sqlServerAvailabilityGroupUpdate is required and cannot be null."));
        } else {
            sqlServerAvailabilityGroupUpdate.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.update(this.client.getEndpoint(), this.client.getSubscriptionId(),
                resourceGroupName, sqlServerInstanceName, availabilityGroupName, this.client.getApiVersion(),
                sqlServerAvailabilityGroupUpdate, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Updates an existing Availability Group.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param availabilityGroupName Name of SQL Availability Group.
     * @param sqlServerAvailabilityGroupUpdate The requested server availability group resource state.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return arc Sql Server Availability Group along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> updateWithResponse(String resourceGroupName, String sqlServerInstanceName,
        String availabilityGroupName, SqlServerAvailabilityGroupUpdate sqlServerAvailabilityGroupUpdate) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sqlServerInstanceName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter sqlServerInstanceName is required and cannot be null."));
        }
        if (availabilityGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter availabilityGroupName is required and cannot be null."));
        }
        if (sqlServerAvailabilityGroupUpdate == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter sqlServerAvailabilityGroupUpdate is required and cannot be null."));
        } else {
            sqlServerAvailabilityGroupUpdate.validate();
        }
        final String accept = "application/json";
        return service.updateSync(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
            sqlServerInstanceName, availabilityGroupName, this.client.getApiVersion(), sqlServerAvailabilityGroupUpdate,
            accept, Context.NONE);
    }

    /**
     * Updates an existing Availability Group.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param availabilityGroupName Name of SQL Availability Group.
     * @param sqlServerAvailabilityGroupUpdate The requested server availability group resource state.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return arc Sql Server Availability Group along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> updateWithResponse(String resourceGroupName, String sqlServerInstanceName,
        String availabilityGroupName, SqlServerAvailabilityGroupUpdate sqlServerAvailabilityGroupUpdate,
        Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sqlServerInstanceName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter sqlServerInstanceName is required and cannot be null."));
        }
        if (availabilityGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter availabilityGroupName is required and cannot be null."));
        }
        if (sqlServerAvailabilityGroupUpdate == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter sqlServerAvailabilityGroupUpdate is required and cannot be null."));
        } else {
            sqlServerAvailabilityGroupUpdate.validate();
        }
        final String accept = "application/json";
        return service.updateSync(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
            sqlServerInstanceName, availabilityGroupName, this.client.getApiVersion(), sqlServerAvailabilityGroupUpdate,
            accept, context);
    }

    /**
     * Updates an existing Availability Group.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param availabilityGroupName Name of SQL Availability Group.
     * @param sqlServerAvailabilityGroupUpdate The requested server availability group resource state.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of arc Sql Server Availability Group.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<SqlServerAvailabilityGroupResourceInner>, SqlServerAvailabilityGroupResourceInner>
        beginUpdateAsync(String resourceGroupName, String sqlServerInstanceName, String availabilityGroupName,
            SqlServerAvailabilityGroupUpdate sqlServerAvailabilityGroupUpdate) {
        Mono<Response<Flux<ByteBuffer>>> mono = updateWithResponseAsync(resourceGroupName, sqlServerInstanceName,
            availabilityGroupName, sqlServerAvailabilityGroupUpdate);
        return this.client
            .<SqlServerAvailabilityGroupResourceInner, SqlServerAvailabilityGroupResourceInner>getLroResult(mono,
                this.client.getHttpPipeline(), SqlServerAvailabilityGroupResourceInner.class,
                SqlServerAvailabilityGroupResourceInner.class, this.client.getContext());
    }

    /**
     * Updates an existing Availability Group.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param availabilityGroupName Name of SQL Availability Group.
     * @param sqlServerAvailabilityGroupUpdate The requested server availability group resource state.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of arc Sql Server Availability Group.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<SqlServerAvailabilityGroupResourceInner>, SqlServerAvailabilityGroupResourceInner>
        beginUpdate(String resourceGroupName, String sqlServerInstanceName, String availabilityGroupName,
            SqlServerAvailabilityGroupUpdate sqlServerAvailabilityGroupUpdate) {
        Response<BinaryData> response = updateWithResponse(resourceGroupName, sqlServerInstanceName,
            availabilityGroupName, sqlServerAvailabilityGroupUpdate);
        return this.client
            .<SqlServerAvailabilityGroupResourceInner, SqlServerAvailabilityGroupResourceInner>getLroResult(response,
                SqlServerAvailabilityGroupResourceInner.class, SqlServerAvailabilityGroupResourceInner.class,
                Context.NONE);
    }

    /**
     * Updates an existing Availability Group.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param availabilityGroupName Name of SQL Availability Group.
     * @param sqlServerAvailabilityGroupUpdate The requested server availability group resource state.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of arc Sql Server Availability Group.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<SqlServerAvailabilityGroupResourceInner>, SqlServerAvailabilityGroupResourceInner>
        beginUpdate(String resourceGroupName, String sqlServerInstanceName, String availabilityGroupName,
            SqlServerAvailabilityGroupUpdate sqlServerAvailabilityGroupUpdate, Context context) {
        Response<BinaryData> response = updateWithResponse(resourceGroupName, sqlServerInstanceName,
            availabilityGroupName, sqlServerAvailabilityGroupUpdate, context);
        return this.client
            .<SqlServerAvailabilityGroupResourceInner, SqlServerAvailabilityGroupResourceInner>getLroResult(response,
                SqlServerAvailabilityGroupResourceInner.class, SqlServerAvailabilityGroupResourceInner.class, context);
    }

    /**
     * Updates an existing Availability Group.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param availabilityGroupName Name of SQL Availability Group.
     * @param sqlServerAvailabilityGroupUpdate The requested server availability group resource state.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return arc Sql Server Availability Group on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SqlServerAvailabilityGroupResourceInner> updateAsync(String resourceGroupName,
        String sqlServerInstanceName, String availabilityGroupName,
        SqlServerAvailabilityGroupUpdate sqlServerAvailabilityGroupUpdate) {
        return beginUpdateAsync(resourceGroupName, sqlServerInstanceName, availabilityGroupName,
            sqlServerAvailabilityGroupUpdate).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Updates an existing Availability Group.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param availabilityGroupName Name of SQL Availability Group.
     * @param sqlServerAvailabilityGroupUpdate The requested server availability group resource state.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return arc Sql Server Availability Group.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SqlServerAvailabilityGroupResourceInner update(String resourceGroupName, String sqlServerInstanceName,
        String availabilityGroupName, SqlServerAvailabilityGroupUpdate sqlServerAvailabilityGroupUpdate) {
        return beginUpdate(resourceGroupName, sqlServerInstanceName, availabilityGroupName,
            sqlServerAvailabilityGroupUpdate).getFinalResult();
    }

    /**
     * Updates an existing Availability Group.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param availabilityGroupName Name of SQL Availability Group.
     * @param sqlServerAvailabilityGroupUpdate The requested server availability group resource state.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return arc Sql Server Availability Group.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SqlServerAvailabilityGroupResourceInner update(String resourceGroupName, String sqlServerInstanceName,
        String availabilityGroupName, SqlServerAvailabilityGroupUpdate sqlServerAvailabilityGroupUpdate,
        Context context) {
        return beginUpdate(resourceGroupName, sqlServerInstanceName, availabilityGroupName,
            sqlServerAvailabilityGroupUpdate, context).getFinalResult();
    }

    /**
     * Retrieves detailed properties of the Availability Group.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param availabilityGroupName Name of SQL Availability Group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return arc Sql Server Availability Group along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SqlServerAvailabilityGroupResourceInner>> detailViewWithResponseAsync(
        String resourceGroupName, String sqlServerInstanceName, String availabilityGroupName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sqlServerInstanceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter sqlServerInstanceName is required and cannot be null."));
        }
        if (availabilityGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter availabilityGroupName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.detailView(this.client.getEndpoint(), this.client.getSubscriptionId(),
                resourceGroupName, sqlServerInstanceName, availabilityGroupName, this.client.getApiVersion(), accept,
                context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Retrieves detailed properties of the Availability Group.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param availabilityGroupName Name of SQL Availability Group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return arc Sql Server Availability Group on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SqlServerAvailabilityGroupResourceInner> detailViewAsync(String resourceGroupName,
        String sqlServerInstanceName, String availabilityGroupName) {
        return detailViewWithResponseAsync(resourceGroupName, sqlServerInstanceName, availabilityGroupName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Retrieves detailed properties of the Availability Group.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param availabilityGroupName Name of SQL Availability Group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return arc Sql Server Availability Group along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<SqlServerAvailabilityGroupResourceInner> detailViewWithResponse(String resourceGroupName,
        String sqlServerInstanceName, String availabilityGroupName, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sqlServerInstanceName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter sqlServerInstanceName is required and cannot be null."));
        }
        if (availabilityGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter availabilityGroupName is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.detailViewSync(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
            sqlServerInstanceName, availabilityGroupName, this.client.getApiVersion(), accept, context);
    }

    /**
     * Retrieves detailed properties of the Availability Group.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param availabilityGroupName Name of SQL Availability Group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return arc Sql Server Availability Group.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SqlServerAvailabilityGroupResourceInner detailView(String resourceGroupName, String sqlServerInstanceName,
        String availabilityGroupName) {
        return detailViewWithResponse(resourceGroupName, sqlServerInstanceName, availabilityGroupName, Context.NONE)
            .getValue();
    }

    /**
     * Request manual failover of the availability group to this server.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param availabilityGroupName Name of SQL Availability Group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return arc Sql Server Availability Group along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SqlServerAvailabilityGroupResourceInner>> failoverWithResponseAsync(String resourceGroupName,
        String sqlServerInstanceName, String availabilityGroupName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sqlServerInstanceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter sqlServerInstanceName is required and cannot be null."));
        }
        if (availabilityGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter availabilityGroupName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.failover(this.client.getEndpoint(), this.client.getSubscriptionId(),
                resourceGroupName, sqlServerInstanceName, availabilityGroupName, this.client.getApiVersion(), accept,
                context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Request manual failover of the availability group to this server.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param availabilityGroupName Name of SQL Availability Group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return arc Sql Server Availability Group on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SqlServerAvailabilityGroupResourceInner> failoverAsync(String resourceGroupName,
        String sqlServerInstanceName, String availabilityGroupName) {
        return failoverWithResponseAsync(resourceGroupName, sqlServerInstanceName, availabilityGroupName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Request manual failover of the availability group to this server.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param availabilityGroupName Name of SQL Availability Group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return arc Sql Server Availability Group along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<SqlServerAvailabilityGroupResourceInner> failoverWithResponse(String resourceGroupName,
        String sqlServerInstanceName, String availabilityGroupName, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sqlServerInstanceName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter sqlServerInstanceName is required and cannot be null."));
        }
        if (availabilityGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter availabilityGroupName is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.failoverSync(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
            sqlServerInstanceName, availabilityGroupName, this.client.getApiVersion(), accept, context);
    }

    /**
     * Request manual failover of the availability group to this server.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param availabilityGroupName Name of SQL Availability Group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return arc Sql Server Availability Group.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SqlServerAvailabilityGroupResourceInner failover(String resourceGroupName, String sqlServerInstanceName,
        String availabilityGroupName) {
        return failoverWithResponse(resourceGroupName, sqlServerInstanceName, availabilityGroupName, Context.NONE)
            .getValue();
    }

    /**
     * Request forced failover of the availability group to this server.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param availabilityGroupName Name of SQL Availability Group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return arc Sql Server Availability Group along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SqlServerAvailabilityGroupResourceInner>> forceFailoverAllowDataLossWithResponseAsync(
        String resourceGroupName, String sqlServerInstanceName, String availabilityGroupName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sqlServerInstanceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter sqlServerInstanceName is required and cannot be null."));
        }
        if (availabilityGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter availabilityGroupName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.forceFailoverAllowDataLoss(this.client.getEndpoint(),
                this.client.getSubscriptionId(), resourceGroupName, sqlServerInstanceName, availabilityGroupName,
                this.client.getApiVersion(), accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Request forced failover of the availability group to this server.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param availabilityGroupName Name of SQL Availability Group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return arc Sql Server Availability Group on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SqlServerAvailabilityGroupResourceInner> forceFailoverAllowDataLossAsync(String resourceGroupName,
        String sqlServerInstanceName, String availabilityGroupName) {
        return forceFailoverAllowDataLossWithResponseAsync(resourceGroupName, sqlServerInstanceName,
            availabilityGroupName).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Request forced failover of the availability group to this server.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param availabilityGroupName Name of SQL Availability Group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return arc Sql Server Availability Group along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<SqlServerAvailabilityGroupResourceInner> forceFailoverAllowDataLossWithResponse(
        String resourceGroupName, String sqlServerInstanceName, String availabilityGroupName, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sqlServerInstanceName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter sqlServerInstanceName is required and cannot be null."));
        }
        if (availabilityGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter availabilityGroupName is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.forceFailoverAllowDataLossSync(this.client.getEndpoint(), this.client.getSubscriptionId(),
            resourceGroupName, sqlServerInstanceName, availabilityGroupName, this.client.getApiVersion(), accept,
            context);
    }

    /**
     * Request forced failover of the availability group to this server.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param availabilityGroupName Name of SQL Availability Group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return arc Sql Server Availability Group.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SqlServerAvailabilityGroupResourceInner forceFailoverAllowDataLoss(String resourceGroupName,
        String sqlServerInstanceName, String availabilityGroupName) {
        return forceFailoverAllowDataLossWithResponse(resourceGroupName, sqlServerInstanceName, availabilityGroupName,
            Context.NONE).getValue();
    }

    /**
     * Create a SQL Server availability group.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param createAgConfiguration The configuration for the new SQL Server availability group resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return arc Sql Server Availability Group along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createAvailabilityGroupWithResponseAsync(String resourceGroupName,
        String sqlServerInstanceName, AvailabilityGroupCreateUpdateConfiguration createAgConfiguration) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sqlServerInstanceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter sqlServerInstanceName is required and cannot be null."));
        }
        if (createAgConfiguration == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter createAgConfiguration is required and cannot be null."));
        } else {
            createAgConfiguration.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.createAvailabilityGroup(this.client.getEndpoint(),
                this.client.getSubscriptionId(), resourceGroupName, sqlServerInstanceName, this.client.getApiVersion(),
                createAgConfiguration, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Create a SQL Server availability group.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param createAgConfiguration The configuration for the new SQL Server availability group resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return arc Sql Server Availability Group along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> createAvailabilityGroupWithResponse(String resourceGroupName,
        String sqlServerInstanceName, AvailabilityGroupCreateUpdateConfiguration createAgConfiguration) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sqlServerInstanceName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter sqlServerInstanceName is required and cannot be null."));
        }
        if (createAgConfiguration == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter createAgConfiguration is required and cannot be null."));
        } else {
            createAgConfiguration.validate();
        }
        final String accept = "application/json";
        return service.createAvailabilityGroupSync(this.client.getEndpoint(), this.client.getSubscriptionId(),
            resourceGroupName, sqlServerInstanceName, this.client.getApiVersion(), createAgConfiguration, accept,
            Context.NONE);
    }

    /**
     * Create a SQL Server availability group.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param createAgConfiguration The configuration for the new SQL Server availability group resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return arc Sql Server Availability Group along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> createAvailabilityGroupWithResponse(String resourceGroupName,
        String sqlServerInstanceName, AvailabilityGroupCreateUpdateConfiguration createAgConfiguration,
        Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sqlServerInstanceName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter sqlServerInstanceName is required and cannot be null."));
        }
        if (createAgConfiguration == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter createAgConfiguration is required and cannot be null."));
        } else {
            createAgConfiguration.validate();
        }
        final String accept = "application/json";
        return service.createAvailabilityGroupSync(this.client.getEndpoint(), this.client.getSubscriptionId(),
            resourceGroupName, sqlServerInstanceName, this.client.getApiVersion(), createAgConfiguration, accept,
            context);
    }

    /**
     * Create a SQL Server availability group.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param createAgConfiguration The configuration for the new SQL Server availability group resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of arc Sql Server Availability Group.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<SqlServerAvailabilityGroupResourceInner>, SqlServerAvailabilityGroupResourceInner>
        beginCreateAvailabilityGroupAsync(String resourceGroupName, String sqlServerInstanceName,
            AvailabilityGroupCreateUpdateConfiguration createAgConfiguration) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = createAvailabilityGroupWithResponseAsync(resourceGroupName, sqlServerInstanceName, createAgConfiguration);
        return this.client
            .<SqlServerAvailabilityGroupResourceInner, SqlServerAvailabilityGroupResourceInner>getLroResult(mono,
                this.client.getHttpPipeline(), SqlServerAvailabilityGroupResourceInner.class,
                SqlServerAvailabilityGroupResourceInner.class, this.client.getContext());
    }

    /**
     * Create a SQL Server availability group.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param createAgConfiguration The configuration for the new SQL Server availability group resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of arc Sql Server Availability Group.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<SqlServerAvailabilityGroupResourceInner>, SqlServerAvailabilityGroupResourceInner>
        beginCreateAvailabilityGroup(String resourceGroupName, String sqlServerInstanceName,
            AvailabilityGroupCreateUpdateConfiguration createAgConfiguration) {
        Response<BinaryData> response
            = createAvailabilityGroupWithResponse(resourceGroupName, sqlServerInstanceName, createAgConfiguration);
        return this.client
            .<SqlServerAvailabilityGroupResourceInner, SqlServerAvailabilityGroupResourceInner>getLroResult(response,
                SqlServerAvailabilityGroupResourceInner.class, SqlServerAvailabilityGroupResourceInner.class,
                Context.NONE);
    }

    /**
     * Create a SQL Server availability group.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param createAgConfiguration The configuration for the new SQL Server availability group resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of arc Sql Server Availability Group.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<SqlServerAvailabilityGroupResourceInner>, SqlServerAvailabilityGroupResourceInner>
        beginCreateAvailabilityGroup(String resourceGroupName, String sqlServerInstanceName,
            AvailabilityGroupCreateUpdateConfiguration createAgConfiguration, Context context) {
        Response<BinaryData> response = createAvailabilityGroupWithResponse(resourceGroupName, sqlServerInstanceName,
            createAgConfiguration, context);
        return this.client
            .<SqlServerAvailabilityGroupResourceInner, SqlServerAvailabilityGroupResourceInner>getLroResult(response,
                SqlServerAvailabilityGroupResourceInner.class, SqlServerAvailabilityGroupResourceInner.class, context);
    }

    /**
     * Create a SQL Server availability group.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param createAgConfiguration The configuration for the new SQL Server availability group resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return arc Sql Server Availability Group on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SqlServerAvailabilityGroupResourceInner> createAvailabilityGroupAsync(String resourceGroupName,
        String sqlServerInstanceName, AvailabilityGroupCreateUpdateConfiguration createAgConfiguration) {
        return beginCreateAvailabilityGroupAsync(resourceGroupName, sqlServerInstanceName, createAgConfiguration).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create a SQL Server availability group.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param createAgConfiguration The configuration for the new SQL Server availability group resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return arc Sql Server Availability Group.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SqlServerAvailabilityGroupResourceInner createAvailabilityGroup(String resourceGroupName,
        String sqlServerInstanceName, AvailabilityGroupCreateUpdateConfiguration createAgConfiguration) {
        return beginCreateAvailabilityGroup(resourceGroupName, sqlServerInstanceName, createAgConfiguration)
            .getFinalResult();
    }

    /**
     * Create a SQL Server availability group.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param createAgConfiguration The configuration for the new SQL Server availability group resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return arc Sql Server Availability Group.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SqlServerAvailabilityGroupResourceInner createAvailabilityGroup(String resourceGroupName,
        String sqlServerInstanceName, AvailabilityGroupCreateUpdateConfiguration createAgConfiguration,
        Context context) {
        return beginCreateAvailabilityGroup(resourceGroupName, sqlServerInstanceName, createAgConfiguration, context)
            .getFinalResult();
    }

    /**
     * Create a SQL Server distributed availability group.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param createDagConfiguration The configuration for the new SQL Server availability group resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return arc Sql Server Availability Group along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createDistributedAvailabilityGroupWithResponseAsync(
        String resourceGroupName, String sqlServerInstanceName,
        DistributedAvailabilityGroupCreateUpdateConfiguration createDagConfiguration) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sqlServerInstanceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter sqlServerInstanceName is required and cannot be null."));
        }
        if (createDagConfiguration == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter createDagConfiguration is required and cannot be null."));
        } else {
            createDagConfiguration.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.createDistributedAvailabilityGroup(this.client.getEndpoint(),
                this.client.getSubscriptionId(), resourceGroupName, sqlServerInstanceName, this.client.getApiVersion(),
                createDagConfiguration, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Create a SQL Server distributed availability group.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param createDagConfiguration The configuration for the new SQL Server availability group resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return arc Sql Server Availability Group along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> createDistributedAvailabilityGroupWithResponse(String resourceGroupName,
        String sqlServerInstanceName, DistributedAvailabilityGroupCreateUpdateConfiguration createDagConfiguration) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sqlServerInstanceName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter sqlServerInstanceName is required and cannot be null."));
        }
        if (createDagConfiguration == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter createDagConfiguration is required and cannot be null."));
        } else {
            createDagConfiguration.validate();
        }
        final String accept = "application/json";
        return service.createDistributedAvailabilityGroupSync(this.client.getEndpoint(),
            this.client.getSubscriptionId(), resourceGroupName, sqlServerInstanceName, this.client.getApiVersion(),
            createDagConfiguration, accept, Context.NONE);
    }

    /**
     * Create a SQL Server distributed availability group.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param createDagConfiguration The configuration for the new SQL Server availability group resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return arc Sql Server Availability Group along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> createDistributedAvailabilityGroupWithResponse(String resourceGroupName,
        String sqlServerInstanceName, DistributedAvailabilityGroupCreateUpdateConfiguration createDagConfiguration,
        Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sqlServerInstanceName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter sqlServerInstanceName is required and cannot be null."));
        }
        if (createDagConfiguration == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter createDagConfiguration is required and cannot be null."));
        } else {
            createDagConfiguration.validate();
        }
        final String accept = "application/json";
        return service.createDistributedAvailabilityGroupSync(this.client.getEndpoint(),
            this.client.getSubscriptionId(), resourceGroupName, sqlServerInstanceName, this.client.getApiVersion(),
            createDagConfiguration, accept, context);
    }

    /**
     * Create a SQL Server distributed availability group.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param createDagConfiguration The configuration for the new SQL Server availability group resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of arc Sql Server Availability Group.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<SqlServerAvailabilityGroupResourceInner>, SqlServerAvailabilityGroupResourceInner>
        beginCreateDistributedAvailabilityGroupAsync(String resourceGroupName, String sqlServerInstanceName,
            DistributedAvailabilityGroupCreateUpdateConfiguration createDagConfiguration) {
        Mono<Response<Flux<ByteBuffer>>> mono = createDistributedAvailabilityGroupWithResponseAsync(resourceGroupName,
            sqlServerInstanceName, createDagConfiguration);
        return this.client
            .<SqlServerAvailabilityGroupResourceInner, SqlServerAvailabilityGroupResourceInner>getLroResult(mono,
                this.client.getHttpPipeline(), SqlServerAvailabilityGroupResourceInner.class,
                SqlServerAvailabilityGroupResourceInner.class, this.client.getContext());
    }

    /**
     * Create a SQL Server distributed availability group.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param createDagConfiguration The configuration for the new SQL Server availability group resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of arc Sql Server Availability Group.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<SqlServerAvailabilityGroupResourceInner>, SqlServerAvailabilityGroupResourceInner>
        beginCreateDistributedAvailabilityGroup(String resourceGroupName, String sqlServerInstanceName,
            DistributedAvailabilityGroupCreateUpdateConfiguration createDagConfiguration) {
        Response<BinaryData> response = createDistributedAvailabilityGroupWithResponse(resourceGroupName,
            sqlServerInstanceName, createDagConfiguration);
        return this.client
            .<SqlServerAvailabilityGroupResourceInner, SqlServerAvailabilityGroupResourceInner>getLroResult(response,
                SqlServerAvailabilityGroupResourceInner.class, SqlServerAvailabilityGroupResourceInner.class,
                Context.NONE);
    }

    /**
     * Create a SQL Server distributed availability group.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param createDagConfiguration The configuration for the new SQL Server availability group resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of arc Sql Server Availability Group.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<SqlServerAvailabilityGroupResourceInner>, SqlServerAvailabilityGroupResourceInner>
        beginCreateDistributedAvailabilityGroup(String resourceGroupName, String sqlServerInstanceName,
            DistributedAvailabilityGroupCreateUpdateConfiguration createDagConfiguration, Context context) {
        Response<BinaryData> response = createDistributedAvailabilityGroupWithResponse(resourceGroupName,
            sqlServerInstanceName, createDagConfiguration, context);
        return this.client
            .<SqlServerAvailabilityGroupResourceInner, SqlServerAvailabilityGroupResourceInner>getLroResult(response,
                SqlServerAvailabilityGroupResourceInner.class, SqlServerAvailabilityGroupResourceInner.class, context);
    }

    /**
     * Create a SQL Server distributed availability group.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param createDagConfiguration The configuration for the new SQL Server availability group resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return arc Sql Server Availability Group on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SqlServerAvailabilityGroupResourceInner> createDistributedAvailabilityGroupAsync(
        String resourceGroupName, String sqlServerInstanceName,
        DistributedAvailabilityGroupCreateUpdateConfiguration createDagConfiguration) {
        return beginCreateDistributedAvailabilityGroupAsync(resourceGroupName, sqlServerInstanceName,
            createDagConfiguration).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create a SQL Server distributed availability group.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param createDagConfiguration The configuration for the new SQL Server availability group resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return arc Sql Server Availability Group.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SqlServerAvailabilityGroupResourceInner createDistributedAvailabilityGroup(String resourceGroupName,
        String sqlServerInstanceName, DistributedAvailabilityGroupCreateUpdateConfiguration createDagConfiguration) {
        return beginCreateDistributedAvailabilityGroup(resourceGroupName, sqlServerInstanceName, createDagConfiguration)
            .getFinalResult();
    }

    /**
     * Create a SQL Server distributed availability group.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param createDagConfiguration The configuration for the new SQL Server availability group resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return arc Sql Server Availability Group.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SqlServerAvailabilityGroupResourceInner createDistributedAvailabilityGroup(String resourceGroupName,
        String sqlServerInstanceName, DistributedAvailabilityGroupCreateUpdateConfiguration createDagConfiguration,
        Context context) {
        return beginCreateDistributedAvailabilityGroup(resourceGroupName, sqlServerInstanceName, createDagConfiguration,
            context).getFinalResult();
    }

    /**
     * Create an Managed Instance Link.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param createManagedInstanceLinkConfiguration The configuration for the new Managed Instance Link resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return arc Sql Server Availability Group along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createManagedInstanceLinkWithResponseAsync(String resourceGroupName,
        String sqlServerInstanceName,
        ManagedInstanceLinkCreateUpdateConfiguration createManagedInstanceLinkConfiguration) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sqlServerInstanceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter sqlServerInstanceName is required and cannot be null."));
        }
        if (createManagedInstanceLinkConfiguration == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter createManagedInstanceLinkConfiguration is required and cannot be null."));
        } else {
            createManagedInstanceLinkConfiguration.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.createManagedInstanceLink(this.client.getEndpoint(),
                this.client.getSubscriptionId(), resourceGroupName, sqlServerInstanceName, this.client.getApiVersion(),
                createManagedInstanceLinkConfiguration, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Create an Managed Instance Link.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param createManagedInstanceLinkConfiguration The configuration for the new Managed Instance Link resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return arc Sql Server Availability Group along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> createManagedInstanceLinkWithResponse(String resourceGroupName,
        String sqlServerInstanceName,
        ManagedInstanceLinkCreateUpdateConfiguration createManagedInstanceLinkConfiguration) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sqlServerInstanceName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter sqlServerInstanceName is required and cannot be null."));
        }
        if (createManagedInstanceLinkConfiguration == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter createManagedInstanceLinkConfiguration is required and cannot be null."));
        } else {
            createManagedInstanceLinkConfiguration.validate();
        }
        final String accept = "application/json";
        return service.createManagedInstanceLinkSync(this.client.getEndpoint(), this.client.getSubscriptionId(),
            resourceGroupName, sqlServerInstanceName, this.client.getApiVersion(),
            createManagedInstanceLinkConfiguration, accept, Context.NONE);
    }

    /**
     * Create an Managed Instance Link.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param createManagedInstanceLinkConfiguration The configuration for the new Managed Instance Link resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return arc Sql Server Availability Group along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> createManagedInstanceLinkWithResponse(String resourceGroupName,
        String sqlServerInstanceName,
        ManagedInstanceLinkCreateUpdateConfiguration createManagedInstanceLinkConfiguration, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sqlServerInstanceName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter sqlServerInstanceName is required and cannot be null."));
        }
        if (createManagedInstanceLinkConfiguration == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter createManagedInstanceLinkConfiguration is required and cannot be null."));
        } else {
            createManagedInstanceLinkConfiguration.validate();
        }
        final String accept = "application/json";
        return service.createManagedInstanceLinkSync(this.client.getEndpoint(), this.client.getSubscriptionId(),
            resourceGroupName, sqlServerInstanceName, this.client.getApiVersion(),
            createManagedInstanceLinkConfiguration, accept, context);
    }

    /**
     * Create an Managed Instance Link.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param createManagedInstanceLinkConfiguration The configuration for the new Managed Instance Link resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of arc Sql Server Availability Group.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<SqlServerAvailabilityGroupResourceInner>, SqlServerAvailabilityGroupResourceInner>
        beginCreateManagedInstanceLinkAsync(String resourceGroupName, String sqlServerInstanceName,
            ManagedInstanceLinkCreateUpdateConfiguration createManagedInstanceLinkConfiguration) {
        Mono<Response<Flux<ByteBuffer>>> mono = createManagedInstanceLinkWithResponseAsync(resourceGroupName,
            sqlServerInstanceName, createManagedInstanceLinkConfiguration);
        return this.client
            .<SqlServerAvailabilityGroupResourceInner, SqlServerAvailabilityGroupResourceInner>getLroResult(mono,
                this.client.getHttpPipeline(), SqlServerAvailabilityGroupResourceInner.class,
                SqlServerAvailabilityGroupResourceInner.class, this.client.getContext());
    }

    /**
     * Create an Managed Instance Link.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param createManagedInstanceLinkConfiguration The configuration for the new Managed Instance Link resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of arc Sql Server Availability Group.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<SqlServerAvailabilityGroupResourceInner>, SqlServerAvailabilityGroupResourceInner>
        beginCreateManagedInstanceLink(String resourceGroupName, String sqlServerInstanceName,
            ManagedInstanceLinkCreateUpdateConfiguration createManagedInstanceLinkConfiguration) {
        Response<BinaryData> response = createManagedInstanceLinkWithResponse(resourceGroupName, sqlServerInstanceName,
            createManagedInstanceLinkConfiguration);
        return this.client
            .<SqlServerAvailabilityGroupResourceInner, SqlServerAvailabilityGroupResourceInner>getLroResult(response,
                SqlServerAvailabilityGroupResourceInner.class, SqlServerAvailabilityGroupResourceInner.class,
                Context.NONE);
    }

    /**
     * Create an Managed Instance Link.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param createManagedInstanceLinkConfiguration The configuration for the new Managed Instance Link resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of arc Sql Server Availability Group.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<SqlServerAvailabilityGroupResourceInner>, SqlServerAvailabilityGroupResourceInner>
        beginCreateManagedInstanceLink(String resourceGroupName, String sqlServerInstanceName,
            ManagedInstanceLinkCreateUpdateConfiguration createManagedInstanceLinkConfiguration, Context context) {
        Response<BinaryData> response = createManagedInstanceLinkWithResponse(resourceGroupName, sqlServerInstanceName,
            createManagedInstanceLinkConfiguration, context);
        return this.client
            .<SqlServerAvailabilityGroupResourceInner, SqlServerAvailabilityGroupResourceInner>getLroResult(response,
                SqlServerAvailabilityGroupResourceInner.class, SqlServerAvailabilityGroupResourceInner.class, context);
    }

    /**
     * Create an Managed Instance Link.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param createManagedInstanceLinkConfiguration The configuration for the new Managed Instance Link resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return arc Sql Server Availability Group on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SqlServerAvailabilityGroupResourceInner> createManagedInstanceLinkAsync(String resourceGroupName,
        String sqlServerInstanceName,
        ManagedInstanceLinkCreateUpdateConfiguration createManagedInstanceLinkConfiguration) {
        return beginCreateManagedInstanceLinkAsync(resourceGroupName, sqlServerInstanceName,
            createManagedInstanceLinkConfiguration).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create an Managed Instance Link.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param createManagedInstanceLinkConfiguration The configuration for the new Managed Instance Link resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return arc Sql Server Availability Group.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SqlServerAvailabilityGroupResourceInner createManagedInstanceLink(String resourceGroupName,
        String sqlServerInstanceName,
        ManagedInstanceLinkCreateUpdateConfiguration createManagedInstanceLinkConfiguration) {
        return beginCreateManagedInstanceLink(resourceGroupName, sqlServerInstanceName,
            createManagedInstanceLinkConfiguration).getFinalResult();
    }

    /**
     * Create an Managed Instance Link.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param createManagedInstanceLinkConfiguration The configuration for the new Managed Instance Link resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return arc Sql Server Availability Group.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SqlServerAvailabilityGroupResourceInner createManagedInstanceLink(String resourceGroupName,
        String sqlServerInstanceName,
        ManagedInstanceLinkCreateUpdateConfiguration createManagedInstanceLinkConfiguration, Context context) {
        return beginCreateManagedInstanceLink(resourceGroupName, sqlServerInstanceName,
            createManagedInstanceLinkConfiguration, context).getFinalResult();
    }

    /**
     * Request adding database(s) to an existing availability group.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param availabilityGroupName Name of SQL Availability Group.
     * @param databases The database names to add to the SQL Server availability group resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return arc Sql Server Availability Group along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SqlServerAvailabilityGroupResourceInner>> addDatabasesWithResponseAsync(
        String resourceGroupName, String sqlServerInstanceName, String availabilityGroupName, Databases databases) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sqlServerInstanceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter sqlServerInstanceName is required and cannot be null."));
        }
        if (availabilityGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter availabilityGroupName is required and cannot be null."));
        }
        if (databases == null) {
            return Mono.error(new IllegalArgumentException("Parameter databases is required and cannot be null."));
        } else {
            databases.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.addDatabases(this.client.getEndpoint(), this.client.getSubscriptionId(),
                resourceGroupName, sqlServerInstanceName, availabilityGroupName, this.client.getApiVersion(), databases,
                accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Request adding database(s) to an existing availability group.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param availabilityGroupName Name of SQL Availability Group.
     * @param databases The database names to add to the SQL Server availability group resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return arc Sql Server Availability Group on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SqlServerAvailabilityGroupResourceInner> addDatabasesAsync(String resourceGroupName,
        String sqlServerInstanceName, String availabilityGroupName, Databases databases) {
        return addDatabasesWithResponseAsync(resourceGroupName, sqlServerInstanceName, availabilityGroupName, databases)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Request adding database(s) to an existing availability group.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param availabilityGroupName Name of SQL Availability Group.
     * @param databases The database names to add to the SQL Server availability group resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return arc Sql Server Availability Group along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<SqlServerAvailabilityGroupResourceInner> addDatabasesWithResponse(String resourceGroupName,
        String sqlServerInstanceName, String availabilityGroupName, Databases databases, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sqlServerInstanceName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter sqlServerInstanceName is required and cannot be null."));
        }
        if (availabilityGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter availabilityGroupName is required and cannot be null."));
        }
        if (databases == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter databases is required and cannot be null."));
        } else {
            databases.validate();
        }
        final String accept = "application/json";
        return service.addDatabasesSync(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
            sqlServerInstanceName, availabilityGroupName, this.client.getApiVersion(), databases, accept, context);
    }

    /**
     * Request adding database(s) to an existing availability group.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param availabilityGroupName Name of SQL Availability Group.
     * @param databases The database names to add to the SQL Server availability group resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return arc Sql Server Availability Group.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SqlServerAvailabilityGroupResourceInner addDatabases(String resourceGroupName, String sqlServerInstanceName,
        String availabilityGroupName, Databases databases) {
        return addDatabasesWithResponse(resourceGroupName, sqlServerInstanceName, availabilityGroupName, databases,
            Context.NONE).getValue();
    }

    /**
     * Request failover of Arc Sql Server to Azure Managed Instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param availabilityGroupName Name of SQL Availability Group.
     * @param managedInstanceResourceId The azure resource identifier for the Sql Managed Instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return arc Sql Server Availability Group along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> failoverMiLinkWithResponseAsync(String resourceGroupName,
        String sqlServerInstanceName, String availabilityGroupName,
        FailoverMiLinkResourceId managedInstanceResourceId) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sqlServerInstanceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter sqlServerInstanceName is required and cannot be null."));
        }
        if (availabilityGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter availabilityGroupName is required and cannot be null."));
        }
        if (managedInstanceResourceId == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter managedInstanceResourceId is required and cannot be null."));
        } else {
            managedInstanceResourceId.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.failoverMiLink(this.client.getEndpoint(), this.client.getSubscriptionId(),
                resourceGroupName, sqlServerInstanceName, availabilityGroupName, this.client.getApiVersion(),
                managedInstanceResourceId, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Request failover of Arc Sql Server to Azure Managed Instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param availabilityGroupName Name of SQL Availability Group.
     * @param managedInstanceResourceId The azure resource identifier for the Sql Managed Instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return arc Sql Server Availability Group along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> failoverMiLinkWithResponse(String resourceGroupName, String sqlServerInstanceName,
        String availabilityGroupName, FailoverMiLinkResourceId managedInstanceResourceId) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sqlServerInstanceName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter sqlServerInstanceName is required and cannot be null."));
        }
        if (availabilityGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter availabilityGroupName is required and cannot be null."));
        }
        if (managedInstanceResourceId == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter managedInstanceResourceId is required and cannot be null."));
        } else {
            managedInstanceResourceId.validate();
        }
        final String accept = "application/json";
        return service.failoverMiLinkSync(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
            sqlServerInstanceName, availabilityGroupName, this.client.getApiVersion(), managedInstanceResourceId,
            accept, Context.NONE);
    }

    /**
     * Request failover of Arc Sql Server to Azure Managed Instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param availabilityGroupName Name of SQL Availability Group.
     * @param managedInstanceResourceId The azure resource identifier for the Sql Managed Instance.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return arc Sql Server Availability Group along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> failoverMiLinkWithResponse(String resourceGroupName, String sqlServerInstanceName,
        String availabilityGroupName, FailoverMiLinkResourceId managedInstanceResourceId, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sqlServerInstanceName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter sqlServerInstanceName is required and cannot be null."));
        }
        if (availabilityGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter availabilityGroupName is required and cannot be null."));
        }
        if (managedInstanceResourceId == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter managedInstanceResourceId is required and cannot be null."));
        } else {
            managedInstanceResourceId.validate();
        }
        final String accept = "application/json";
        return service.failoverMiLinkSync(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
            sqlServerInstanceName, availabilityGroupName, this.client.getApiVersion(), managedInstanceResourceId,
            accept, context);
    }

    /**
     * Request failover of Arc Sql Server to Azure Managed Instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param availabilityGroupName Name of SQL Availability Group.
     * @param managedInstanceResourceId The azure resource identifier for the Sql Managed Instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of arc Sql Server Availability Group.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<SqlServerAvailabilityGroupResourceInner>, SqlServerAvailabilityGroupResourceInner>
        beginFailoverMiLinkAsync(String resourceGroupName, String sqlServerInstanceName, String availabilityGroupName,
            FailoverMiLinkResourceId managedInstanceResourceId) {
        Mono<Response<Flux<ByteBuffer>>> mono = failoverMiLinkWithResponseAsync(resourceGroupName,
            sqlServerInstanceName, availabilityGroupName, managedInstanceResourceId);
        return this.client
            .<SqlServerAvailabilityGroupResourceInner, SqlServerAvailabilityGroupResourceInner>getLroResult(mono,
                this.client.getHttpPipeline(), SqlServerAvailabilityGroupResourceInner.class,
                SqlServerAvailabilityGroupResourceInner.class, this.client.getContext());
    }

    /**
     * Request failover of Arc Sql Server to Azure Managed Instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param availabilityGroupName Name of SQL Availability Group.
     * @param managedInstanceResourceId The azure resource identifier for the Sql Managed Instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of arc Sql Server Availability Group.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<SqlServerAvailabilityGroupResourceInner>, SqlServerAvailabilityGroupResourceInner>
        beginFailoverMiLink(String resourceGroupName, String sqlServerInstanceName, String availabilityGroupName,
            FailoverMiLinkResourceId managedInstanceResourceId) {
        Response<BinaryData> response = failoverMiLinkWithResponse(resourceGroupName, sqlServerInstanceName,
            availabilityGroupName, managedInstanceResourceId);
        return this.client
            .<SqlServerAvailabilityGroupResourceInner, SqlServerAvailabilityGroupResourceInner>getLroResult(response,
                SqlServerAvailabilityGroupResourceInner.class, SqlServerAvailabilityGroupResourceInner.class,
                Context.NONE);
    }

    /**
     * Request failover of Arc Sql Server to Azure Managed Instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param availabilityGroupName Name of SQL Availability Group.
     * @param managedInstanceResourceId The azure resource identifier for the Sql Managed Instance.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of arc Sql Server Availability Group.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<SqlServerAvailabilityGroupResourceInner>, SqlServerAvailabilityGroupResourceInner>
        beginFailoverMiLink(String resourceGroupName, String sqlServerInstanceName, String availabilityGroupName,
            FailoverMiLinkResourceId managedInstanceResourceId, Context context) {
        Response<BinaryData> response = failoverMiLinkWithResponse(resourceGroupName, sqlServerInstanceName,
            availabilityGroupName, managedInstanceResourceId, context);
        return this.client
            .<SqlServerAvailabilityGroupResourceInner, SqlServerAvailabilityGroupResourceInner>getLroResult(response,
                SqlServerAvailabilityGroupResourceInner.class, SqlServerAvailabilityGroupResourceInner.class, context);
    }

    /**
     * Request failover of Arc Sql Server to Azure Managed Instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param availabilityGroupName Name of SQL Availability Group.
     * @param managedInstanceResourceId The azure resource identifier for the Sql Managed Instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return arc Sql Server Availability Group on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SqlServerAvailabilityGroupResourceInner> failoverMiLinkAsync(String resourceGroupName,
        String sqlServerInstanceName, String availabilityGroupName,
        FailoverMiLinkResourceId managedInstanceResourceId) {
        return beginFailoverMiLinkAsync(resourceGroupName, sqlServerInstanceName, availabilityGroupName,
            managedInstanceResourceId).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Request failover of Arc Sql Server to Azure Managed Instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param availabilityGroupName Name of SQL Availability Group.
     * @param managedInstanceResourceId The azure resource identifier for the Sql Managed Instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return arc Sql Server Availability Group.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SqlServerAvailabilityGroupResourceInner failoverMiLink(String resourceGroupName,
        String sqlServerInstanceName, String availabilityGroupName,
        FailoverMiLinkResourceId managedInstanceResourceId) {
        return beginFailoverMiLink(resourceGroupName, sqlServerInstanceName, availabilityGroupName,
            managedInstanceResourceId).getFinalResult();
    }

    /**
     * Request failover of Arc Sql Server to Azure Managed Instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param availabilityGroupName Name of SQL Availability Group.
     * @param managedInstanceResourceId The azure resource identifier for the Sql Managed Instance.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return arc Sql Server Availability Group.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SqlServerAvailabilityGroupResourceInner failoverMiLink(String resourceGroupName,
        String sqlServerInstanceName, String availabilityGroupName, FailoverMiLinkResourceId managedInstanceResourceId,
        Context context) {
        return beginFailoverMiLink(resourceGroupName, sqlServerInstanceName, availabilityGroupName,
            managedInstanceResourceId, context).getFinalResult();
    }

    /**
     * Request removing database(s) from an existing availability group.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param availabilityGroupName Name of SQL Availability Group.
     * @param databases The database names to remove from the SQL Server availability group resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return arc Sql Server Availability Group along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SqlServerAvailabilityGroupResourceInner>> removeDatabasesWithResponseAsync(
        String resourceGroupName, String sqlServerInstanceName, String availabilityGroupName, Databases databases) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sqlServerInstanceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter sqlServerInstanceName is required and cannot be null."));
        }
        if (availabilityGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter availabilityGroupName is required and cannot be null."));
        }
        if (databases == null) {
            return Mono.error(new IllegalArgumentException("Parameter databases is required and cannot be null."));
        } else {
            databases.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.removeDatabases(this.client.getEndpoint(), this.client.getSubscriptionId(),
                resourceGroupName, sqlServerInstanceName, availabilityGroupName, this.client.getApiVersion(), databases,
                accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Request removing database(s) from an existing availability group.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param availabilityGroupName Name of SQL Availability Group.
     * @param databases The database names to remove from the SQL Server availability group resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return arc Sql Server Availability Group on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SqlServerAvailabilityGroupResourceInner> removeDatabasesAsync(String resourceGroupName,
        String sqlServerInstanceName, String availabilityGroupName, Databases databases) {
        return removeDatabasesWithResponseAsync(resourceGroupName, sqlServerInstanceName, availabilityGroupName,
            databases).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Request removing database(s) from an existing availability group.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param availabilityGroupName Name of SQL Availability Group.
     * @param databases The database names to remove from the SQL Server availability group resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return arc Sql Server Availability Group along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<SqlServerAvailabilityGroupResourceInner> removeDatabasesWithResponse(String resourceGroupName,
        String sqlServerInstanceName, String availabilityGroupName, Databases databases, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sqlServerInstanceName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter sqlServerInstanceName is required and cannot be null."));
        }
        if (availabilityGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter availabilityGroupName is required and cannot be null."));
        }
        if (databases == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter databases is required and cannot be null."));
        } else {
            databases.validate();
        }
        final String accept = "application/json";
        return service.removeDatabasesSync(this.client.getEndpoint(), this.client.getSubscriptionId(),
            resourceGroupName, sqlServerInstanceName, availabilityGroupName, this.client.getApiVersion(), databases,
            accept, context);
    }

    /**
     * Request removing database(s) from an existing availability group.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param availabilityGroupName Name of SQL Availability Group.
     * @param databases The database names to remove from the SQL Server availability group resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return arc Sql Server Availability Group.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SqlServerAvailabilityGroupResourceInner removeDatabases(String resourceGroupName,
        String sqlServerInstanceName, String availabilityGroupName, Databases databases) {
        return removeDatabasesWithResponse(resourceGroupName, sqlServerInstanceName, availabilityGroupName, databases,
            Context.NONE).getValue();
    }

    /**
     * List the availability group associated with the given Arc Sql Server.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of Arc Sql Server Availability Groups along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SqlServerAvailabilityGroupResourceInner>> listSinglePageAsync(String resourceGroupName,
        String sqlServerInstanceName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sqlServerInstanceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter sqlServerInstanceName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.list(this.client.getEndpoint(), this.client.getSubscriptionId(),
                resourceGroupName, sqlServerInstanceName, this.client.getApiVersion(), accept, context))
            .<PagedResponse<SqlServerAvailabilityGroupResourceInner>>map(
                res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                    res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * List the availability group associated with the given Arc Sql Server.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of Arc Sql Server Availability Groups as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<SqlServerAvailabilityGroupResourceInner> listAsync(String resourceGroupName,
        String sqlServerInstanceName) {
        return new PagedFlux<>(() -> listSinglePageAsync(resourceGroupName, sqlServerInstanceName),
            nextLink -> listNextSinglePageAsync(nextLink));
    }

    /**
     * List the availability group associated with the given Arc Sql Server.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of Arc Sql Server Availability Groups along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<SqlServerAvailabilityGroupResourceInner> listSinglePage(String resourceGroupName,
        String sqlServerInstanceName) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sqlServerInstanceName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter sqlServerInstanceName is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<ArcSqlServerAvailabilityGroupListResult> res
            = service.listSync(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
                sqlServerInstanceName, this.client.getApiVersion(), accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * List the availability group associated with the given Arc Sql Server.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of Arc Sql Server Availability Groups along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<SqlServerAvailabilityGroupResourceInner> listSinglePage(String resourceGroupName,
        String sqlServerInstanceName, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sqlServerInstanceName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter sqlServerInstanceName is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<ArcSqlServerAvailabilityGroupListResult> res
            = service.listSync(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
                sqlServerInstanceName, this.client.getApiVersion(), accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * List the availability group associated with the given Arc Sql Server.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of Arc Sql Server Availability Groups as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<SqlServerAvailabilityGroupResourceInner> list(String resourceGroupName,
        String sqlServerInstanceName) {
        return new PagedIterable<>(() -> listSinglePage(resourceGroupName, sqlServerInstanceName),
            nextLink -> listNextSinglePage(nextLink));
    }

    /**
     * List the availability group associated with the given Arc Sql Server.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of Arc Sql Server Availability Groups as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<SqlServerAvailabilityGroupResourceInner> list(String resourceGroupName,
        String sqlServerInstanceName, Context context) {
        return new PagedIterable<>(() -> listSinglePage(resourceGroupName, sqlServerInstanceName, context),
            nextLink -> listNextSinglePage(nextLink, context));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of Arc Sql Server Availability Groups along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SqlServerAvailabilityGroupResourceInner>> listNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.listNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<SqlServerAvailabilityGroupResourceInner>>map(
                res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                    res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of Arc Sql Server Availability Groups along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<SqlServerAvailabilityGroupResourceInner> listNextSinglePage(String nextLink) {
        if (nextLink == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<ArcSqlServerAvailabilityGroupListResult> res
            = service.listNextSync(nextLink, this.client.getEndpoint(), accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of Arc Sql Server Availability Groups along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<SqlServerAvailabilityGroupResourceInner> listNextSinglePage(String nextLink,
        Context context) {
        if (nextLink == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<ArcSqlServerAvailabilityGroupListResult> res
            = service.listNextSync(nextLink, this.client.getEndpoint(), accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    private static final ClientLogger LOGGER = new ClientLogger(SqlServerAvailabilityGroupsClientImpl.class);
}
