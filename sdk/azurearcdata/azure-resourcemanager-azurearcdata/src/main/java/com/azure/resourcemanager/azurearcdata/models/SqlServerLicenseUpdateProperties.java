// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurearcdata.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * Properties of update SqlServerLicense.
 */
@Fluent
public final class SqlServerLicenseUpdateProperties implements JsonSerializable<SqlServerLicenseUpdateProperties> {
    /*
     * SQL Server license type.
     */
    private BillingPlan billingPlan;

    /*
     * The number of total cores of the license covers.
     */
    private Integer physicalCores;

    /*
     * This property represents the choice between SQL Server Core and ESU licenses.
     */
    private LicenseCategory licenseCategory;

    /*
     * The activation state of the license.
     */
    private ActivationState activationState;

    /*
     * The Azure scope to which the license will apply.
     */
    private ScopeType scopeType;

    /*
     * The timestamp of the most recent activation of the SqlServerLicense.
     */
    private OffsetDateTime lastActivatedAt;

    /*
     * The timestamp of the most recent deactivation of the SqlServerLicense.
     */
    private OffsetDateTime lastDeactivatedAt;

    /*
     * The tenantId the SQL Server license resource subscription resides in.
     */
    private String tenantId;

    /**
     * Creates an instance of SqlServerLicenseUpdateProperties class.
     */
    public SqlServerLicenseUpdateProperties() {
    }

    /**
     * Get the billingPlan property: SQL Server license type.
     * 
     * @return the billingPlan value.
     */
    public BillingPlan billingPlan() {
        return this.billingPlan;
    }

    /**
     * Set the billingPlan property: SQL Server license type.
     * 
     * @param billingPlan the billingPlan value to set.
     * @return the SqlServerLicenseUpdateProperties object itself.
     */
    public SqlServerLicenseUpdateProperties withBillingPlan(BillingPlan billingPlan) {
        this.billingPlan = billingPlan;
        return this;
    }

    /**
     * Get the physicalCores property: The number of total cores of the license covers.
     * 
     * @return the physicalCores value.
     */
    public Integer physicalCores() {
        return this.physicalCores;
    }

    /**
     * Set the physicalCores property: The number of total cores of the license covers.
     * 
     * @param physicalCores the physicalCores value to set.
     * @return the SqlServerLicenseUpdateProperties object itself.
     */
    public SqlServerLicenseUpdateProperties withPhysicalCores(Integer physicalCores) {
        this.physicalCores = physicalCores;
        return this;
    }

    /**
     * Get the licenseCategory property: This property represents the choice between SQL Server Core and ESU licenses.
     * 
     * @return the licenseCategory value.
     */
    public LicenseCategory licenseCategory() {
        return this.licenseCategory;
    }

    /**
     * Set the licenseCategory property: This property represents the choice between SQL Server Core and ESU licenses.
     * 
     * @param licenseCategory the licenseCategory value to set.
     * @return the SqlServerLicenseUpdateProperties object itself.
     */
    public SqlServerLicenseUpdateProperties withLicenseCategory(LicenseCategory licenseCategory) {
        this.licenseCategory = licenseCategory;
        return this;
    }

    /**
     * Get the activationState property: The activation state of the license.
     * 
     * @return the activationState value.
     */
    public ActivationState activationState() {
        return this.activationState;
    }

    /**
     * Set the activationState property: The activation state of the license.
     * 
     * @param activationState the activationState value to set.
     * @return the SqlServerLicenseUpdateProperties object itself.
     */
    public SqlServerLicenseUpdateProperties withActivationState(ActivationState activationState) {
        this.activationState = activationState;
        return this;
    }

    /**
     * Get the scopeType property: The Azure scope to which the license will apply.
     * 
     * @return the scopeType value.
     */
    public ScopeType scopeType() {
        return this.scopeType;
    }

    /**
     * Set the scopeType property: The Azure scope to which the license will apply.
     * 
     * @param scopeType the scopeType value to set.
     * @return the SqlServerLicenseUpdateProperties object itself.
     */
    public SqlServerLicenseUpdateProperties withScopeType(ScopeType scopeType) {
        this.scopeType = scopeType;
        return this;
    }

    /**
     * Get the lastActivatedAt property: The timestamp of the most recent activation of the SqlServerLicense.
     * 
     * @return the lastActivatedAt value.
     */
    public OffsetDateTime lastActivatedAt() {
        return this.lastActivatedAt;
    }

    /**
     * Get the lastDeactivatedAt property: The timestamp of the most recent deactivation of the SqlServerLicense.
     * 
     * @return the lastDeactivatedAt value.
     */
    public OffsetDateTime lastDeactivatedAt() {
        return this.lastDeactivatedAt;
    }

    /**
     * Get the tenantId property: The tenantId the SQL Server license resource subscription resides in.
     * 
     * @return the tenantId value.
     */
    public String tenantId() {
        return this.tenantId;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("billingPlan", this.billingPlan == null ? null : this.billingPlan.toString());
        jsonWriter.writeNumberField("physicalCores", this.physicalCores);
        jsonWriter.writeStringField("licenseCategory",
            this.licenseCategory == null ? null : this.licenseCategory.toString());
        jsonWriter.writeStringField("activationState",
            this.activationState == null ? null : this.activationState.toString());
        jsonWriter.writeStringField("scopeType", this.scopeType == null ? null : this.scopeType.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SqlServerLicenseUpdateProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SqlServerLicenseUpdateProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SqlServerLicenseUpdateProperties.
     */
    public static SqlServerLicenseUpdateProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SqlServerLicenseUpdateProperties deserializedSqlServerLicenseUpdateProperties
                = new SqlServerLicenseUpdateProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("billingPlan".equals(fieldName)) {
                    deserializedSqlServerLicenseUpdateProperties.billingPlan
                        = BillingPlan.fromString(reader.getString());
                } else if ("physicalCores".equals(fieldName)) {
                    deserializedSqlServerLicenseUpdateProperties.physicalCores = reader.getNullable(JsonReader::getInt);
                } else if ("licenseCategory".equals(fieldName)) {
                    deserializedSqlServerLicenseUpdateProperties.licenseCategory
                        = LicenseCategory.fromString(reader.getString());
                } else if ("activationState".equals(fieldName)) {
                    deserializedSqlServerLicenseUpdateProperties.activationState
                        = ActivationState.fromString(reader.getString());
                } else if ("scopeType".equals(fieldName)) {
                    deserializedSqlServerLicenseUpdateProperties.scopeType = ScopeType.fromString(reader.getString());
                } else if ("lastActivatedAt".equals(fieldName)) {
                    deserializedSqlServerLicenseUpdateProperties.lastActivatedAt = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("lastDeactivatedAt".equals(fieldName)) {
                    deserializedSqlServerLicenseUpdateProperties.lastDeactivatedAt = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("tenantId".equals(fieldName)) {
                    deserializedSqlServerLicenseUpdateProperties.tenantId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSqlServerLicenseUpdateProperties;
        });
    }
}
