// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurearcdata.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The resource model definition representing SKU for ARM resources.
 */
@Fluent
public class CommonSku implements JsonSerializable<CommonSku> {
    /*
     * The name of the SKU. It is typically a letter+number code
     */
    private String name;

    /*
     * Whether dev/test is enabled. When the dev field is set to true, the resource is used for dev/test purpose.
     */
    private Boolean dev;

    /*
     * The SKU size. When the name field is the combination of tier and some other value, this would be the standalone
     * code.
     */
    private String size;

    /*
     * If the service has different generations of hardware, for the same SKU, then that can be captured here.
     */
    private String family;

    /*
     * If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible
     * for the resource this may be omitted.
     */
    private Integer capacity;

    /**
     * Creates an instance of CommonSku class.
     */
    public CommonSku() {
    }

    /**
     * Get the name property: The name of the SKU. It is typically a letter+number code.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: The name of the SKU. It is typically a letter+number code.
     * 
     * @param name the name value to set.
     * @return the CommonSku object itself.
     */
    public CommonSku withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the dev property: Whether dev/test is enabled. When the dev field is set to true, the resource is used for
     * dev/test purpose.
     * 
     * @return the dev value.
     */
    public Boolean dev() {
        return this.dev;
    }

    /**
     * Set the dev property: Whether dev/test is enabled. When the dev field is set to true, the resource is used for
     * dev/test purpose.
     * 
     * @param dev the dev value to set.
     * @return the CommonSku object itself.
     */
    public CommonSku withDev(Boolean dev) {
        this.dev = dev;
        return this;
    }

    /**
     * Get the size property: The SKU size. When the name field is the combination of tier and some other value, this
     * would be the standalone code.
     * 
     * @return the size value.
     */
    public String size() {
        return this.size;
    }

    /**
     * Set the size property: The SKU size. When the name field is the combination of tier and some other value, this
     * would be the standalone code.
     * 
     * @param size the size value to set.
     * @return the CommonSku object itself.
     */
    public CommonSku withSize(String size) {
        this.size = size;
        return this;
    }

    /**
     * Get the family property: If the service has different generations of hardware, for the same SKU, then that can be
     * captured here.
     * 
     * @return the family value.
     */
    public String family() {
        return this.family;
    }

    /**
     * Set the family property: If the service has different generations of hardware, for the same SKU, then that can be
     * captured here.
     * 
     * @param family the family value to set.
     * @return the CommonSku object itself.
     */
    public CommonSku withFamily(String family) {
        this.family = family;
        return this;
    }

    /**
     * Get the capacity property: If the SKU supports scale out/in then the capacity integer should be included. If
     * scale out/in is not possible for the resource this may be omitted.
     * 
     * @return the capacity value.
     */
    public Integer capacity() {
        return this.capacity;
    }

    /**
     * Set the capacity property: If the SKU supports scale out/in then the capacity integer should be included. If
     * scale out/in is not possible for the resource this may be omitted.
     * 
     * @param capacity the capacity value to set.
     * @return the CommonSku object itself.
     */
    public CommonSku withCapacity(Integer capacity) {
        this.capacity = capacity;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (name() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property name in model CommonSku"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(CommonSku.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeBooleanField("dev", this.dev);
        jsonWriter.writeStringField("size", this.size);
        jsonWriter.writeStringField("family", this.family);
        jsonWriter.writeNumberField("capacity", this.capacity);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CommonSku from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CommonSku if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CommonSku.
     */
    public static CommonSku fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CommonSku deserializedCommonSku = new CommonSku();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedCommonSku.name = reader.getString();
                } else if ("dev".equals(fieldName)) {
                    deserializedCommonSku.dev = reader.getNullable(JsonReader::getBoolean);
                } else if ("size".equals(fieldName)) {
                    deserializedCommonSku.size = reader.getString();
                } else if ("family".equals(fieldName)) {
                    deserializedCommonSku.family = reader.getString();
                } else if ("capacity".equals(fieldName)) {
                    deserializedCommonSku.capacity = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCommonSku;
        });
    }
}
