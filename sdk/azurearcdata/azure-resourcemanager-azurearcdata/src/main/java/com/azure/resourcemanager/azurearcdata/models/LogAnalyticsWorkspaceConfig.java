// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurearcdata.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.UUID;

/** Log analytics workspace id and primary key. */
@Fluent
public final class LogAnalyticsWorkspaceConfig {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(LogAnalyticsWorkspaceConfig.class);

    /*
     * Azure Log Analytics workspace ID
     */
    @JsonProperty(value = "workspaceId")
    private UUID workspaceId;

    /*
     * Primary key of the workspace
     */
    @JsonProperty(value = "primaryKey")
    private String primaryKey;

    /**
     * Get the workspaceId property: Azure Log Analytics workspace ID.
     *
     * @return the workspaceId value.
     */
    public UUID workspaceId() {
        return this.workspaceId;
    }

    /**
     * Set the workspaceId property: Azure Log Analytics workspace ID.
     *
     * @param workspaceId the workspaceId value to set.
     * @return the LogAnalyticsWorkspaceConfig object itself.
     */
    public LogAnalyticsWorkspaceConfig withWorkspaceId(UUID workspaceId) {
        this.workspaceId = workspaceId;
        return this;
    }

    /**
     * Get the primaryKey property: Primary key of the workspace.
     *
     * @return the primaryKey value.
     */
    public String primaryKey() {
        return this.primaryKey;
    }

    /**
     * Set the primaryKey property: Primary key of the workspace.
     *
     * @param primaryKey the primaryKey value to set.
     * @return the LogAnalyticsWorkspaceConfig object itself.
     */
    public LogAnalyticsWorkspaceConfig withPrimaryKey(String primaryKey) {
        this.primaryKey = primaryKey;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
