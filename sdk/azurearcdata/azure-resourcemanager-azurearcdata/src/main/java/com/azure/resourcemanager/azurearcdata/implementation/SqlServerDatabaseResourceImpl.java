// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurearcdata.implementation;

import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.azurearcdata.fluent.models.SqlServerDatabaseResourceInner;
import com.azure.resourcemanager.azurearcdata.models.SqlServerDatabaseResource;
import com.azure.resourcemanager.azurearcdata.models.SqlServerDatabaseResourceProperties;
import com.azure.resourcemanager.azurearcdata.models.SqlServerDatabaseUpdate;
import java.util.Collections;
import java.util.Map;

public final class SqlServerDatabaseResourceImpl
    implements SqlServerDatabaseResource, SqlServerDatabaseResource.Definition, SqlServerDatabaseResource.Update {
    private SqlServerDatabaseResourceInner innerObject;

    private final com.azure.resourcemanager.azurearcdata.AzureArcDataManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public SqlServerDatabaseResourceProperties properties() {
        return this.innerModel().properties();
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public SqlServerDatabaseResourceInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.azurearcdata.AzureArcDataManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String sqlServerInstanceName;

    private String databaseName;

    private SqlServerDatabaseUpdate updateSqlServerDatabaseUpdate;

    public SqlServerDatabaseResourceImpl withExistingSqlServerInstance(String resourceGroupName,
        String sqlServerInstanceName) {
        this.resourceGroupName = resourceGroupName;
        this.sqlServerInstanceName = sqlServerInstanceName;
        return this;
    }

    public SqlServerDatabaseResource create() {
        this.innerObject = serviceManager.serviceClient()
            .getSqlServerDatabases()
            .createWithResponse(resourceGroupName, sqlServerInstanceName, databaseName, this.innerModel(), Context.NONE)
            .getValue();
        return this;
    }

    public SqlServerDatabaseResource create(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getSqlServerDatabases()
            .createWithResponse(resourceGroupName, sqlServerInstanceName, databaseName, this.innerModel(), context)
            .getValue();
        return this;
    }

    SqlServerDatabaseResourceImpl(String name,
        com.azure.resourcemanager.azurearcdata.AzureArcDataManager serviceManager) {
        this.innerObject = new SqlServerDatabaseResourceInner();
        this.serviceManager = serviceManager;
        this.databaseName = name;
    }

    public SqlServerDatabaseResourceImpl update() {
        this.updateSqlServerDatabaseUpdate = new SqlServerDatabaseUpdate();
        return this;
    }

    public SqlServerDatabaseResource apply() {
        this.innerObject = serviceManager.serviceClient()
            .getSqlServerDatabases()
            .update(resourceGroupName, sqlServerInstanceName, databaseName, updateSqlServerDatabaseUpdate,
                Context.NONE);
        return this;
    }

    public SqlServerDatabaseResource apply(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getSqlServerDatabases()
            .update(resourceGroupName, sqlServerInstanceName, databaseName, updateSqlServerDatabaseUpdate, context);
        return this;
    }

    SqlServerDatabaseResourceImpl(SqlServerDatabaseResourceInner innerObject,
        com.azure.resourcemanager.azurearcdata.AzureArcDataManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.sqlServerInstanceName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "sqlServerInstances");
        this.databaseName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "databases");
    }

    public SqlServerDatabaseResource refresh() {
        this.innerObject = serviceManager.serviceClient()
            .getSqlServerDatabases()
            .getWithResponse(resourceGroupName, sqlServerInstanceName, databaseName, Context.NONE)
            .getValue();
        return this;
    }

    public SqlServerDatabaseResource refresh(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getSqlServerDatabases()
            .getWithResponse(resourceGroupName, sqlServerInstanceName, databaseName, context)
            .getValue();
        return this;
    }

    public SqlServerDatabaseResourceImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public SqlServerDatabaseResourceImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public SqlServerDatabaseResourceImpl withProperties(SqlServerDatabaseResourceProperties properties) {
        if (isInCreateMode()) {
            this.innerModel().withProperties(properties);
            return this;
        } else {
            this.updateSqlServerDatabaseUpdate.withProperties(properties);
            return this;
        }
    }

    public SqlServerDatabaseResourceImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateSqlServerDatabaseUpdate.withTags(tags);
            return this;
        }
    }

    private boolean isInCreateMode() {
        return this.innerModel() == null || this.innerModel().id() == null;
    }
}
