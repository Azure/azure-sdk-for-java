// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurearcdata.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.azurearcdata.fluent.SqlServerLicensesClient;
import com.azure.resourcemanager.azurearcdata.fluent.models.SqlServerLicenseInner;
import com.azure.resourcemanager.azurearcdata.models.SqlServerLicense;
import com.azure.resourcemanager.azurearcdata.models.SqlServerLicenses;

public final class SqlServerLicensesImpl implements SqlServerLicenses {
    private static final ClientLogger LOGGER = new ClientLogger(SqlServerLicensesImpl.class);

    private final SqlServerLicensesClient innerClient;

    private final com.azure.resourcemanager.azurearcdata.AzureArcDataManager serviceManager;

    public SqlServerLicensesImpl(SqlServerLicensesClient innerClient,
        com.azure.resourcemanager.azurearcdata.AzureArcDataManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<SqlServerLicense> list() {
        PagedIterable<SqlServerLicenseInner> inner = this.serviceClient().list();
        return ResourceManagerUtils.mapPage(inner, inner1 -> new SqlServerLicenseImpl(inner1, this.manager()));
    }

    public PagedIterable<SqlServerLicense> list(Context context) {
        PagedIterable<SqlServerLicenseInner> inner = this.serviceClient().list(context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new SqlServerLicenseImpl(inner1, this.manager()));
    }

    public PagedIterable<SqlServerLicense> listByResourceGroup(String resourceGroupName) {
        PagedIterable<SqlServerLicenseInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new SqlServerLicenseImpl(inner1, this.manager()));
    }

    public PagedIterable<SqlServerLicense> listByResourceGroup(String resourceGroupName, Context context) {
        PagedIterable<SqlServerLicenseInner> inner
            = this.serviceClient().listByResourceGroup(resourceGroupName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new SqlServerLicenseImpl(inner1, this.manager()));
    }

    public Response<SqlServerLicense> getByResourceGroupWithResponse(String resourceGroupName,
        String sqlServerLicenseName, Context context) {
        Response<SqlServerLicenseInner> inner
            = this.serviceClient().getByResourceGroupWithResponse(resourceGroupName, sqlServerLicenseName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new SqlServerLicenseImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SqlServerLicense getByResourceGroup(String resourceGroupName, String sqlServerLicenseName) {
        SqlServerLicenseInner inner = this.serviceClient().getByResourceGroup(resourceGroupName, sqlServerLicenseName);
        if (inner != null) {
            return new SqlServerLicenseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Void> deleteByResourceGroupWithResponse(String resourceGroupName, String sqlServerLicenseName,
        Context context) {
        return this.serviceClient().deleteWithResponse(resourceGroupName, sqlServerLicenseName, context);
    }

    public void deleteByResourceGroup(String resourceGroupName, String sqlServerLicenseName) {
        this.serviceClient().delete(resourceGroupName, sqlServerLicenseName);
    }

    public SqlServerLicense getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String sqlServerLicenseName = ResourceManagerUtils.getValueFromIdByName(id, "sqlServerLicenses");
        if (sqlServerLicenseName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'sqlServerLicenses'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, sqlServerLicenseName, Context.NONE).getValue();
    }

    public Response<SqlServerLicense> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String sqlServerLicenseName = ResourceManagerUtils.getValueFromIdByName(id, "sqlServerLicenses");
        if (sqlServerLicenseName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'sqlServerLicenses'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, sqlServerLicenseName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String sqlServerLicenseName = ResourceManagerUtils.getValueFromIdByName(id, "sqlServerLicenses");
        if (sqlServerLicenseName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'sqlServerLicenses'.", id)));
        }
        this.deleteByResourceGroupWithResponse(resourceGroupName, sqlServerLicenseName, Context.NONE);
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String sqlServerLicenseName = ResourceManagerUtils.getValueFromIdByName(id, "sqlServerLicenses");
        if (sqlServerLicenseName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'sqlServerLicenses'.", id)));
        }
        return this.deleteByResourceGroupWithResponse(resourceGroupName, sqlServerLicenseName, context);
    }

    private SqlServerLicensesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.azurearcdata.AzureArcDataManager manager() {
        return this.serviceManager;
    }

    public SqlServerLicenseImpl define(String name) {
        return new SqlServerLicenseImpl(name, this.manager());
    }
}
