// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurearcdata.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.azurearcdata.fluent.models.SqlServerAvailabilityGroupResourceInner;
import com.azure.resourcemanager.azurearcdata.models.Databases;
import com.azure.resourcemanager.azurearcdata.models.FailoverMiLinkResourceId;
import com.azure.resourcemanager.azurearcdata.models.SqlServerAvailabilityGroupResource;
import com.azure.resourcemanager.azurearcdata.models.SqlServerAvailabilityGroupResourceProperties;
import com.azure.resourcemanager.azurearcdata.models.SqlServerAvailabilityGroupUpdate;
import java.util.Collections;
import java.util.Map;

public final class SqlServerAvailabilityGroupResourceImpl implements SqlServerAvailabilityGroupResource,
    SqlServerAvailabilityGroupResource.Definition, SqlServerAvailabilityGroupResource.Update {
    private SqlServerAvailabilityGroupResourceInner innerObject;

    private final com.azure.resourcemanager.azurearcdata.AzureArcDataManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public SqlServerAvailabilityGroupResourceProperties properties() {
        return this.innerModel().properties();
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public SqlServerAvailabilityGroupResourceInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.azurearcdata.AzureArcDataManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String sqlServerInstanceName;

    private String availabilityGroupName;

    private SqlServerAvailabilityGroupUpdate updateSqlServerAvailabilityGroupUpdate;

    public SqlServerAvailabilityGroupResourceImpl withExistingSqlServerInstance(String resourceGroupName,
        String sqlServerInstanceName) {
        this.resourceGroupName = resourceGroupName;
        this.sqlServerInstanceName = sqlServerInstanceName;
        return this;
    }

    public SqlServerAvailabilityGroupResource create() {
        this.innerObject = serviceManager.serviceClient()
            .getSqlServerAvailabilityGroups()
            .createWithResponse(resourceGroupName, sqlServerInstanceName, availabilityGroupName, this.innerModel(),
                Context.NONE)
            .getValue();
        return this;
    }

    public SqlServerAvailabilityGroupResource create(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getSqlServerAvailabilityGroups()
            .createWithResponse(resourceGroupName, sqlServerInstanceName, availabilityGroupName, this.innerModel(),
                context)
            .getValue();
        return this;
    }

    SqlServerAvailabilityGroupResourceImpl(String name,
        com.azure.resourcemanager.azurearcdata.AzureArcDataManager serviceManager) {
        this.innerObject = new SqlServerAvailabilityGroupResourceInner();
        this.serviceManager = serviceManager;
        this.availabilityGroupName = name;
    }

    public SqlServerAvailabilityGroupResourceImpl update() {
        this.updateSqlServerAvailabilityGroupUpdate = new SqlServerAvailabilityGroupUpdate();
        return this;
    }

    public SqlServerAvailabilityGroupResource apply() {
        this.innerObject = serviceManager.serviceClient()
            .getSqlServerAvailabilityGroups()
            .update(resourceGroupName, sqlServerInstanceName, availabilityGroupName,
                updateSqlServerAvailabilityGroupUpdate, Context.NONE);
        return this;
    }

    public SqlServerAvailabilityGroupResource apply(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getSqlServerAvailabilityGroups()
            .update(resourceGroupName, sqlServerInstanceName, availabilityGroupName,
                updateSqlServerAvailabilityGroupUpdate, context);
        return this;
    }

    SqlServerAvailabilityGroupResourceImpl(SqlServerAvailabilityGroupResourceInner innerObject,
        com.azure.resourcemanager.azurearcdata.AzureArcDataManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.sqlServerInstanceName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "sqlServerInstances");
        this.availabilityGroupName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "availabilityGroups");
    }

    public SqlServerAvailabilityGroupResource refresh() {
        this.innerObject = serviceManager.serviceClient()
            .getSqlServerAvailabilityGroups()
            .getWithResponse(resourceGroupName, sqlServerInstanceName, availabilityGroupName, Context.NONE)
            .getValue();
        return this;
    }

    public SqlServerAvailabilityGroupResource refresh(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getSqlServerAvailabilityGroups()
            .getWithResponse(resourceGroupName, sqlServerInstanceName, availabilityGroupName, context)
            .getValue();
        return this;
    }

    public Response<SqlServerAvailabilityGroupResource> detailViewWithResponse(Context context) {
        return serviceManager.sqlServerAvailabilityGroups()
            .detailViewWithResponse(resourceGroupName, sqlServerInstanceName, availabilityGroupName, context);
    }

    public SqlServerAvailabilityGroupResource detailView() {
        return serviceManager.sqlServerAvailabilityGroups()
            .detailView(resourceGroupName, sqlServerInstanceName, availabilityGroupName);
    }

    public Response<SqlServerAvailabilityGroupResource> failoverWithResponse(Context context) {
        return serviceManager.sqlServerAvailabilityGroups()
            .failoverWithResponse(resourceGroupName, sqlServerInstanceName, availabilityGroupName, context);
    }

    public SqlServerAvailabilityGroupResource failover() {
        return serviceManager.sqlServerAvailabilityGroups()
            .failover(resourceGroupName, sqlServerInstanceName, availabilityGroupName);
    }

    public Response<SqlServerAvailabilityGroupResource> forceFailoverAllowDataLossWithResponse(Context context) {
        return serviceManager.sqlServerAvailabilityGroups()
            .forceFailoverAllowDataLossWithResponse(resourceGroupName, sqlServerInstanceName, availabilityGroupName,
                context);
    }

    public SqlServerAvailabilityGroupResource forceFailoverAllowDataLoss() {
        return serviceManager.sqlServerAvailabilityGroups()
            .forceFailoverAllowDataLoss(resourceGroupName, sqlServerInstanceName, availabilityGroupName);
    }

    public Response<SqlServerAvailabilityGroupResource> addDatabasesWithResponse(Databases databases, Context context) {
        return serviceManager.sqlServerAvailabilityGroups()
            .addDatabasesWithResponse(resourceGroupName, sqlServerInstanceName, availabilityGroupName, databases,
                context);
    }

    public SqlServerAvailabilityGroupResource addDatabases(Databases databases) {
        return serviceManager.sqlServerAvailabilityGroups()
            .addDatabases(resourceGroupName, sqlServerInstanceName, availabilityGroupName, databases);
    }

    public SqlServerAvailabilityGroupResource failoverMiLink(FailoverMiLinkResourceId managedInstanceResourceId) {
        return serviceManager.sqlServerAvailabilityGroups()
            .failoverMiLink(resourceGroupName, sqlServerInstanceName, availabilityGroupName, managedInstanceResourceId);
    }

    public SqlServerAvailabilityGroupResource failoverMiLink(FailoverMiLinkResourceId managedInstanceResourceId,
        Context context) {
        return serviceManager.sqlServerAvailabilityGroups()
            .failoverMiLink(resourceGroupName, sqlServerInstanceName, availabilityGroupName, managedInstanceResourceId,
                context);
    }

    public Response<SqlServerAvailabilityGroupResource> removeDatabasesWithResponse(Databases databases,
        Context context) {
        return serviceManager.sqlServerAvailabilityGroups()
            .removeDatabasesWithResponse(resourceGroupName, sqlServerInstanceName, availabilityGroupName, databases,
                context);
    }

    public SqlServerAvailabilityGroupResource removeDatabases(Databases databases) {
        return serviceManager.sqlServerAvailabilityGroups()
            .removeDatabases(resourceGroupName, sqlServerInstanceName, availabilityGroupName, databases);
    }

    public SqlServerAvailabilityGroupResourceImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public SqlServerAvailabilityGroupResourceImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public SqlServerAvailabilityGroupResourceImpl
        withProperties(SqlServerAvailabilityGroupResourceProperties properties) {
        if (isInCreateMode()) {
            this.innerModel().withProperties(properties);
            return this;
        } else {
            this.updateSqlServerAvailabilityGroupUpdate.withProperties(properties);
            return this;
        }
    }

    public SqlServerAvailabilityGroupResourceImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateSqlServerAvailabilityGroupUpdate.withTags(tags);
            return this;
        }
    }

    private boolean isInCreateMode() {
        return this.innerModel() == null || this.innerModel().id() == null;
    }
}
