// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurearcdata.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Objects;
import java.util.UUID;

/**
 * Properties from the Kubernetes data controller.
 */
@Fluent
public final class OnPremiseProperty implements JsonSerializable<OnPremiseProperty> {
    /*
     * A globally unique ID identifying the associated Kubernetes cluster
     */
    private UUID id;

    /*
     * Certificate that contains the Kubernetes cluster public key used to verify signing
     */
    private String publicSigningKey;

    /*
     * Unique thumbprint returned to customer to verify the certificate being uploaded
     */
    private String signingCertificateThumbprint;

    /**
     * Creates an instance of OnPremiseProperty class.
     */
    public OnPremiseProperty() {
    }

    /**
     * Get the id property: A globally unique ID identifying the associated Kubernetes cluster.
     * 
     * @return the id value.
     */
    public UUID id() {
        return this.id;
    }

    /**
     * Set the id property: A globally unique ID identifying the associated Kubernetes cluster.
     * 
     * @param id the id value to set.
     * @return the OnPremiseProperty object itself.
     */
    public OnPremiseProperty withId(UUID id) {
        this.id = id;
        return this;
    }

    /**
     * Get the publicSigningKey property: Certificate that contains the Kubernetes cluster public key used to verify
     * signing.
     * 
     * @return the publicSigningKey value.
     */
    public String publicSigningKey() {
        return this.publicSigningKey;
    }

    /**
     * Set the publicSigningKey property: Certificate that contains the Kubernetes cluster public key used to verify
     * signing.
     * 
     * @param publicSigningKey the publicSigningKey value to set.
     * @return the OnPremiseProperty object itself.
     */
    public OnPremiseProperty withPublicSigningKey(String publicSigningKey) {
        this.publicSigningKey = publicSigningKey;
        return this;
    }

    /**
     * Get the signingCertificateThumbprint property: Unique thumbprint returned to customer to verify the certificate
     * being uploaded.
     * 
     * @return the signingCertificateThumbprint value.
     */
    public String signingCertificateThumbprint() {
        return this.signingCertificateThumbprint;
    }

    /**
     * Set the signingCertificateThumbprint property: Unique thumbprint returned to customer to verify the certificate
     * being uploaded.
     * 
     * @param signingCertificateThumbprint the signingCertificateThumbprint value to set.
     * @return the OnPremiseProperty object itself.
     */
    public OnPremiseProperty withSigningCertificateThumbprint(String signingCertificateThumbprint) {
        this.signingCertificateThumbprint = signingCertificateThumbprint;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (id() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property id in model OnPremiseProperty"));
        }
        if (publicSigningKey() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property publicSigningKey in model OnPremiseProperty"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(OnPremiseProperty.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("id", Objects.toString(this.id, null));
        jsonWriter.writeStringField("publicSigningKey", this.publicSigningKey);
        jsonWriter.writeStringField("signingCertificateThumbprint", this.signingCertificateThumbprint);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of OnPremiseProperty from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of OnPremiseProperty if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the OnPremiseProperty.
     */
    public static OnPremiseProperty fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            OnPremiseProperty deserializedOnPremiseProperty = new OnPremiseProperty();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedOnPremiseProperty.id
                        = reader.getNullable(nonNullReader -> UUID.fromString(nonNullReader.getString()));
                } else if ("publicSigningKey".equals(fieldName)) {
                    deserializedOnPremiseProperty.publicSigningKey = reader.getString();
                } else if ("signingCertificateThumbprint".equals(fieldName)) {
                    deserializedOnPremiseProperty.signingCertificateThumbprint = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedOnPremiseProperty;
        });
    }
}
