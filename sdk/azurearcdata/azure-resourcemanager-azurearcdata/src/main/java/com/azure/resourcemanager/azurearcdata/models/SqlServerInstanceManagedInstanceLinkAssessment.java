// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurearcdata.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The status of an individual requirement for MI Link.
 */
@Fluent
public final class SqlServerInstanceManagedInstanceLinkAssessment
    implements JsonSerializable<SqlServerInstanceManagedInstanceLinkAssessment> {
    /*
     * The name of the requirement.
     */
    private String name;

    /*
     * The category of the requirement.
     */
    private AssessmentCategory category;

    /*
     * The status of the requirement.
     */
    private AssessmentStatus status;

    /*
     * The information text about requirement.
     */
    private String information;

    /*
     * Additional details about the check, including any recommended actions.
     */
    private String additionalInformation;

    /**
     * Creates an instance of SqlServerInstanceManagedInstanceLinkAssessment class.
     */
    public SqlServerInstanceManagedInstanceLinkAssessment() {
    }

    /**
     * Get the name property: The name of the requirement.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: The name of the requirement.
     * 
     * @param name the name value to set.
     * @return the SqlServerInstanceManagedInstanceLinkAssessment object itself.
     */
    public SqlServerInstanceManagedInstanceLinkAssessment withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the category property: The category of the requirement.
     * 
     * @return the category value.
     */
    public AssessmentCategory category() {
        return this.category;
    }

    /**
     * Set the category property: The category of the requirement.
     * 
     * @param category the category value to set.
     * @return the SqlServerInstanceManagedInstanceLinkAssessment object itself.
     */
    public SqlServerInstanceManagedInstanceLinkAssessment withCategory(AssessmentCategory category) {
        this.category = category;
        return this;
    }

    /**
     * Get the status property: The status of the requirement.
     * 
     * @return the status value.
     */
    public AssessmentStatus status() {
        return this.status;
    }

    /**
     * Set the status property: The status of the requirement.
     * 
     * @param status the status value to set.
     * @return the SqlServerInstanceManagedInstanceLinkAssessment object itself.
     */
    public SqlServerInstanceManagedInstanceLinkAssessment withStatus(AssessmentStatus status) {
        this.status = status;
        return this;
    }

    /**
     * Get the information property: The information text about requirement.
     * 
     * @return the information value.
     */
    public String information() {
        return this.information;
    }

    /**
     * Set the information property: The information text about requirement.
     * 
     * @param information the information value to set.
     * @return the SqlServerInstanceManagedInstanceLinkAssessment object itself.
     */
    public SqlServerInstanceManagedInstanceLinkAssessment withInformation(String information) {
        this.information = information;
        return this;
    }

    /**
     * Get the additionalInformation property: Additional details about the check, including any recommended actions.
     * 
     * @return the additionalInformation value.
     */
    public String additionalInformation() {
        return this.additionalInformation;
    }

    /**
     * Set the additionalInformation property: Additional details about the check, including any recommended actions.
     * 
     * @param additionalInformation the additionalInformation value to set.
     * @return the SqlServerInstanceManagedInstanceLinkAssessment object itself.
     */
    public SqlServerInstanceManagedInstanceLinkAssessment withAdditionalInformation(String additionalInformation) {
        this.additionalInformation = additionalInformation;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("category", this.category == null ? null : this.category.toString());
        jsonWriter.writeStringField("status", this.status == null ? null : this.status.toString());
        jsonWriter.writeStringField("information", this.information);
        jsonWriter.writeStringField("additionalInformation", this.additionalInformation);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SqlServerInstanceManagedInstanceLinkAssessment from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SqlServerInstanceManagedInstanceLinkAssessment if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SqlServerInstanceManagedInstanceLinkAssessment.
     */
    public static SqlServerInstanceManagedInstanceLinkAssessment fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SqlServerInstanceManagedInstanceLinkAssessment deserializedSqlServerInstanceManagedInstanceLinkAssessment
                = new SqlServerInstanceManagedInstanceLinkAssessment();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedSqlServerInstanceManagedInstanceLinkAssessment.name = reader.getString();
                } else if ("category".equals(fieldName)) {
                    deserializedSqlServerInstanceManagedInstanceLinkAssessment.category
                        = AssessmentCategory.fromString(reader.getString());
                } else if ("status".equals(fieldName)) {
                    deserializedSqlServerInstanceManagedInstanceLinkAssessment.status
                        = AssessmentStatus.fromString(reader.getString());
                } else if ("information".equals(fieldName)) {
                    deserializedSqlServerInstanceManagedInstanceLinkAssessment.information = reader.getString();
                } else if ("additionalInformation".equals(fieldName)) {
                    deserializedSqlServerInstanceManagedInstanceLinkAssessment.additionalInformation
                        = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSqlServerInstanceManagedInstanceLinkAssessment;
        });
    }
}
