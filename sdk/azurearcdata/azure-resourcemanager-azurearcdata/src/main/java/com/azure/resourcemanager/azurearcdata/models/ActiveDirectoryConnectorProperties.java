// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurearcdata.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The properties of an Active Directory connector resource.
 */
@Fluent
public final class ActiveDirectoryConnectorProperties implements JsonSerializable<ActiveDirectoryConnectorProperties> {
    /*
     * Username and password for domain service account authentication.
     */
    private BasicLoginInformation domainServiceAccountLoginInformation;

    /*
     * The provisioning state of the Active Directory connector resource.
     */
    private String provisioningState;

    /*
     * null
     */
    private ActiveDirectoryConnectorSpec spec;

    /*
     * null
     */
    private ActiveDirectoryConnectorStatus status;

    /**
     * Creates an instance of ActiveDirectoryConnectorProperties class.
     */
    public ActiveDirectoryConnectorProperties() {
    }

    /**
     * Get the domainServiceAccountLoginInformation property: Username and password for domain service account
     * authentication.
     * 
     * @return the domainServiceAccountLoginInformation value.
     */
    public BasicLoginInformation domainServiceAccountLoginInformation() {
        return this.domainServiceAccountLoginInformation;
    }

    /**
     * Set the domainServiceAccountLoginInformation property: Username and password for domain service account
     * authentication.
     * 
     * @param domainServiceAccountLoginInformation the domainServiceAccountLoginInformation value to set.
     * @return the ActiveDirectoryConnectorProperties object itself.
     */
    public ActiveDirectoryConnectorProperties
        withDomainServiceAccountLoginInformation(BasicLoginInformation domainServiceAccountLoginInformation) {
        this.domainServiceAccountLoginInformation = domainServiceAccountLoginInformation;
        return this;
    }

    /**
     * Get the provisioningState property: The provisioning state of the Active Directory connector resource.
     * 
     * @return the provisioningState value.
     */
    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the spec property: null.
     * 
     * @return the spec value.
     */
    public ActiveDirectoryConnectorSpec spec() {
        return this.spec;
    }

    /**
     * Set the spec property: null.
     * 
     * @param spec the spec value to set.
     * @return the ActiveDirectoryConnectorProperties object itself.
     */
    public ActiveDirectoryConnectorProperties withSpec(ActiveDirectoryConnectorSpec spec) {
        this.spec = spec;
        return this;
    }

    /**
     * Get the status property: null.
     * 
     * @return the status value.
     */
    public ActiveDirectoryConnectorStatus status() {
        return this.status;
    }

    /**
     * Set the status property: null.
     * 
     * @param status the status value to set.
     * @return the ActiveDirectoryConnectorProperties object itself.
     */
    public ActiveDirectoryConnectorProperties withStatus(ActiveDirectoryConnectorStatus status) {
        this.status = status;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (domainServiceAccountLoginInformation() != null) {
            domainServiceAccountLoginInformation().validate();
        }
        if (spec() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property spec in model ActiveDirectoryConnectorProperties"));
        } else {
            spec().validate();
        }
        if (status() != null) {
            status().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ActiveDirectoryConnectorProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("spec", this.spec);
        jsonWriter.writeJsonField("domainServiceAccountLoginInformation", this.domainServiceAccountLoginInformation);
        jsonWriter.writeJsonField("status", this.status);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ActiveDirectoryConnectorProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ActiveDirectoryConnectorProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ActiveDirectoryConnectorProperties.
     */
    public static ActiveDirectoryConnectorProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ActiveDirectoryConnectorProperties deserializedActiveDirectoryConnectorProperties
                = new ActiveDirectoryConnectorProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("spec".equals(fieldName)) {
                    deserializedActiveDirectoryConnectorProperties.spec = ActiveDirectoryConnectorSpec.fromJson(reader);
                } else if ("domainServiceAccountLoginInformation".equals(fieldName)) {
                    deserializedActiveDirectoryConnectorProperties.domainServiceAccountLoginInformation
                        = BasicLoginInformation.fromJson(reader);
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedActiveDirectoryConnectorProperties.provisioningState = reader.getString();
                } else if ("status".equals(fieldName)) {
                    deserializedActiveDirectoryConnectorProperties.status
                        = ActiveDirectoryConnectorStatus.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedActiveDirectoryConnectorProperties;
        });
    }
}
