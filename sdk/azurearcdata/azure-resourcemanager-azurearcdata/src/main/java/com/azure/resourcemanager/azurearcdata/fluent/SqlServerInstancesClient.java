// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurearcdata.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.azurearcdata.fluent.models.SqlServerInstanceInner;
import com.azure.resourcemanager.azurearcdata.fluent.models.SqlServerInstanceJobsStatusResponseInner;
import com.azure.resourcemanager.azurearcdata.fluent.models.SqlServerInstanceManagedInstanceLinkAssessmentResponseInner;
import com.azure.resourcemanager.azurearcdata.fluent.models.SqlServerInstanceRunMigrationAssessmentResponseInner;
import com.azure.resourcemanager.azurearcdata.models.SqlServerInstanceJobsStatusRequest;
import com.azure.resourcemanager.azurearcdata.models.SqlServerInstanceManagedInstanceLinkAssessmentRequest;
import com.azure.resourcemanager.azurearcdata.models.SqlServerInstanceTelemetryRequest;
import com.azure.resourcemanager.azurearcdata.models.SqlServerInstanceUpdate;
import java.util.List;

/**
 * An instance of this class provides access to all the operations defined in SqlServerInstancesClient.
 */
public interface SqlServerInstancesClient {
    /**
     * List sqlServerInstance resources in the subscription.
     * 
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of SqlServerInstance as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<SqlServerInstanceInner> list();

    /**
     * List sqlServerInstance resources in the subscription.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of SqlServerInstance as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<SqlServerInstanceInner> list(Context context);

    /**
     * List sqlServerInstance resources in the resource group
     * 
     * Gets all sqlServerInstances in a resource group.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all sqlServerInstances in a resource group as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<SqlServerInstanceInner> listByResourceGroup(String resourceGroupName);

    /**
     * List sqlServerInstance resources in the resource group
     * 
     * Gets all sqlServerInstances in a resource group.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all sqlServerInstances in a resource group as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<SqlServerInstanceInner> listByResourceGroup(String resourceGroupName, Context context);

    /**
     * Retrieves a SQL Server Instance resource.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a SqlServerInstance along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<SqlServerInstanceInner> getByResourceGroupWithResponse(String resourceGroupName,
        String sqlServerInstanceName, Context context);

    /**
     * Retrieves a SQL Server Instance resource.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a SqlServerInstance.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SqlServerInstanceInner getByResourceGroup(String resourceGroupName, String sqlServerInstanceName);

    /**
     * Creates or replaces a SQL Server Instance resource.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param sqlServerInstance The SQL Server Instance to be created or updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a SqlServerInstance.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<SqlServerInstanceInner>, SqlServerInstanceInner> beginCreate(String resourceGroupName,
        String sqlServerInstanceName, SqlServerInstanceInner sqlServerInstance);

    /**
     * Creates or replaces a SQL Server Instance resource.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param sqlServerInstance The SQL Server Instance to be created or updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a SqlServerInstance.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<SqlServerInstanceInner>, SqlServerInstanceInner> beginCreate(String resourceGroupName,
        String sqlServerInstanceName, SqlServerInstanceInner sqlServerInstance, Context context);

    /**
     * Creates or replaces a SQL Server Instance resource.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param sqlServerInstance The SQL Server Instance to be created or updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a SqlServerInstance.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SqlServerInstanceInner create(String resourceGroupName, String sqlServerInstanceName,
        SqlServerInstanceInner sqlServerInstance);

    /**
     * Creates or replaces a SQL Server Instance resource.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param sqlServerInstance The SQL Server Instance to be created or updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a SqlServerInstance.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SqlServerInstanceInner create(String resourceGroupName, String sqlServerInstanceName,
        SqlServerInstanceInner sqlServerInstance, Context context);

    /**
     * Deletes a SQL Server Instance resource.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String sqlServerInstanceName);

    /**
     * Deletes a SQL Server Instance resource.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String sqlServerInstanceName,
        Context context);

    /**
     * Deletes a SQL Server Instance resource.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String sqlServerInstanceName);

    /**
     * Deletes a SQL Server Instance resource.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String sqlServerInstanceName, Context context);

    /**
     * Updates a SQL Server Instance resource.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param parameters The SQL Server Instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a SqlServerInstance.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<SqlServerInstanceInner>, SqlServerInstanceInner> beginUpdate(String resourceGroupName,
        String sqlServerInstanceName, SqlServerInstanceUpdate parameters);

    /**
     * Updates a SQL Server Instance resource.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param parameters The SQL Server Instance.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a SqlServerInstance.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<SqlServerInstanceInner>, SqlServerInstanceInner> beginUpdate(String resourceGroupName,
        String sqlServerInstanceName, SqlServerInstanceUpdate parameters, Context context);

    /**
     * Updates a SQL Server Instance resource.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param parameters The SQL Server Instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a SqlServerInstance.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SqlServerInstanceInner update(String resourceGroupName, String sqlServerInstanceName,
        SqlServerInstanceUpdate parameters);

    /**
     * Updates a SQL Server Instance resource.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param parameters The SQL Server Instance.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a SqlServerInstance.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SqlServerInstanceInner update(String resourceGroupName, String sqlServerInstanceName,
        SqlServerInstanceUpdate parameters, Context context);

    /**
     * Retrieves SQL Server instance telemetry.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param sqlServerInstanceTelemetryRequest Contains the parameters to get SQL Server instance telemetry.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a section of the telemetry response for the SQL Server instance as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<List<String>> getTelemetry(String resourceGroupName, String sqlServerInstanceName,
        SqlServerInstanceTelemetryRequest sqlServerInstanceTelemetryRequest);

    /**
     * Retrieves SQL Server instance telemetry.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param sqlServerInstanceTelemetryRequest Contains the parameters to get SQL Server instance telemetry.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a section of the telemetry response for the SQL Server instance as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<List<String>> getTelemetry(String resourceGroupName, String sqlServerInstanceName,
        SqlServerInstanceTelemetryRequest sqlServerInstanceTelemetryRequest, Context context);

    /**
     * Runs migration assessment for SQL Server instance.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response for running migration assessment on the SQL Server instance along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<SqlServerInstanceRunMigrationAssessmentResponseInner>
        runMigrationAssessmentWithResponse(String resourceGroupName, String sqlServerInstanceName, Context context);

    /**
     * Runs migration assessment for SQL Server instance.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response for running migration assessment on the SQL Server instance.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SqlServerInstanceRunMigrationAssessmentResponseInner runMigrationAssessment(String resourceGroupName,
        String sqlServerInstanceName);

    /**
     * Gets jobs status details for sql arc resource.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param sqlServerInstanceJobsStatusRequest Contains the parameters to get SQL Server instance agent jobs status.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return jobs status details for sql arc resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<SqlServerInstanceJobsStatusResponseInner> getJobsStatusWithResponse(String resourceGroupName,
        String sqlServerInstanceName, SqlServerInstanceJobsStatusRequest sqlServerInstanceJobsStatusRequest,
        Context context);

    /**
     * Gets jobs status details for sql arc resource.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return jobs status details for sql arc resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SqlServerInstanceJobsStatusResponseInner getJobsStatus(String resourceGroupName, String sqlServerInstanceName);

    /**
     * Request Upgrade Permission before upgrading.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a SqlServerInstance along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<SqlServerInstanceInner> preUpgradeWithResponse(String resourceGroupName, String sqlServerInstanceName,
        Context context);

    /**
     * Request Upgrade Permission before upgrading.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a SqlServerInstance.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SqlServerInstanceInner preUpgrade(String resourceGroupName, String sqlServerInstanceName);

    /**
     * Clean up after upgrading.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a SqlServerInstance along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<SqlServerInstanceInner> postUpgradeWithResponse(String resourceGroupName, String sqlServerInstanceName,
        Context context);

    /**
     * Clean up after upgrading.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a SqlServerInstance.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SqlServerInstanceInner postUpgrade(String resourceGroupName, String sqlServerInstanceName);

    /**
     * Runs Managed Instance Link assessment for SQL Server instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param sqlServerInstanceManagedInstanceLinkAssessmentRequest Contains the parameters to run SQL Server instance
     * MI link assessment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the response containing the results of the MI Link assessment.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<SqlServerInstanceManagedInstanceLinkAssessmentResponseInner>, SqlServerInstanceManagedInstanceLinkAssessmentResponseInner>
        beginRunManagedInstanceLinkAssessment(String resourceGroupName, String sqlServerInstanceName,
            SqlServerInstanceManagedInstanceLinkAssessmentRequest sqlServerInstanceManagedInstanceLinkAssessmentRequest);

    /**
     * Runs Managed Instance Link assessment for SQL Server instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param sqlServerInstanceManagedInstanceLinkAssessmentRequest Contains the parameters to run SQL Server instance
     * MI link assessment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the response containing the results of the MI Link assessment.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<SqlServerInstanceManagedInstanceLinkAssessmentResponseInner>, SqlServerInstanceManagedInstanceLinkAssessmentResponseInner>
        beginRunManagedInstanceLinkAssessment(String resourceGroupName, String sqlServerInstanceName,
            SqlServerInstanceManagedInstanceLinkAssessmentRequest sqlServerInstanceManagedInstanceLinkAssessmentRequest,
            Context context);

    /**
     * Runs Managed Instance Link assessment for SQL Server instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param sqlServerInstanceManagedInstanceLinkAssessmentRequest Contains the parameters to run SQL Server instance
     * MI link assessment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response containing the results of the MI Link assessment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SqlServerInstanceManagedInstanceLinkAssessmentResponseInner runManagedInstanceLinkAssessment(
        String resourceGroupName, String sqlServerInstanceName,
        SqlServerInstanceManagedInstanceLinkAssessmentRequest sqlServerInstanceManagedInstanceLinkAssessmentRequest);

    /**
     * Runs Managed Instance Link assessment for SQL Server instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param sqlServerInstanceManagedInstanceLinkAssessmentRequest Contains the parameters to run SQL Server instance
     * MI link assessment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response containing the results of the MI Link assessment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SqlServerInstanceManagedInstanceLinkAssessmentResponseInner runManagedInstanceLinkAssessment(
        String resourceGroupName, String sqlServerInstanceName,
        SqlServerInstanceManagedInstanceLinkAssessmentRequest sqlServerInstanceManagedInstanceLinkAssessmentRequest,
        Context context);
}
