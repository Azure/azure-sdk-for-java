// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurearcdata.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Failover Cluster Instance properties.
 */
@Immutable
public final class FailoverCluster implements JsonSerializable<FailoverCluster> {
    /*
     * The GUID of the SQL Server's underlying Failover Cluster.
     */
    private String id;

    /*
     * The network name to connect to the SQL FCI.
     */
    private String networkName;

    /*
     * The ARM IDs of the Arc SQL Server resources, belonging to the current server's Failover cluster.
     */
    private List<String> sqlInstanceIds;

    /*
     * The host names which are part of the SQL FCI resource group.
     */
    private List<String> hostNames;

    /*
     * The IP addresses and subnet masks associated with the SQL Failover Cluster Instance on this host.
     */
    private List<HostIpAddressInformation> hostIpAddresses;

    /**
     * Creates an instance of FailoverCluster class.
     */
    public FailoverCluster() {
    }

    /**
     * Get the id property: The GUID of the SQL Server's underlying Failover Cluster.
     * 
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Get the networkName property: The network name to connect to the SQL FCI.
     * 
     * @return the networkName value.
     */
    public String networkName() {
        return this.networkName;
    }

    /**
     * Get the sqlInstanceIds property: The ARM IDs of the Arc SQL Server resources, belonging to the current server's
     * Failover cluster.
     * 
     * @return the sqlInstanceIds value.
     */
    public List<String> sqlInstanceIds() {
        return this.sqlInstanceIds;
    }

    /**
     * Get the hostNames property: The host names which are part of the SQL FCI resource group.
     * 
     * @return the hostNames value.
     */
    public List<String> hostNames() {
        return this.hostNames;
    }

    /**
     * Get the hostIpAddresses property: The IP addresses and subnet masks associated with the SQL Failover Cluster
     * Instance on this host.
     * 
     * @return the hostIpAddresses value.
     */
    public List<HostIpAddressInformation> hostIpAddresses() {
        return this.hostIpAddresses;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (hostIpAddresses() != null) {
            hostIpAddresses().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FailoverCluster from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FailoverCluster if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the FailoverCluster.
     */
    public static FailoverCluster fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FailoverCluster deserializedFailoverCluster = new FailoverCluster();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedFailoverCluster.id = reader.getString();
                } else if ("networkName".equals(fieldName)) {
                    deserializedFailoverCluster.networkName = reader.getString();
                } else if ("sqlInstanceIds".equals(fieldName)) {
                    List<String> sqlInstanceIds = reader.readArray(reader1 -> reader1.getString());
                    deserializedFailoverCluster.sqlInstanceIds = sqlInstanceIds;
                } else if ("hostNames".equals(fieldName)) {
                    List<String> hostNames = reader.readArray(reader1 -> reader1.getString());
                    deserializedFailoverCluster.hostNames = hostNames;
                } else if ("hostIPAddresses".equals(fieldName)) {
                    List<HostIpAddressInformation> hostIpAddresses
                        = reader.readArray(reader1 -> HostIpAddressInformation.fromJson(reader1));
                    deserializedFailoverCluster.hostIpAddresses = hostIpAddresses;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedFailoverCluster;
        });
    }
}
