// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurearcdata.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.Duration;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

/**
 * The Arc SQL Server instance telemetry retrieval request.
 */
@Fluent
public final class SqlServerInstanceTelemetryRequest implements JsonSerializable<SqlServerInstanceTelemetryRequest> {
    /*
     * The name of the telemetry dataset to retrieve.
     */
    private String datasetName;

    /*
     * The start time for the time range to fetch telemetry for. If not specified, the current time minus 1 hour is
     * used.
     */
    private OffsetDateTime startTime;

    /*
     * The end time for the time range to fetch telemetry for. If not specified, the current time is used.
     */
    private OffsetDateTime endTime;

    /*
     * The time granularity to fetch telemetry for. This is an ISO8601 duration. Examples: PT15M, PT1H, P1D
     */
    private Duration interval;

    /*
     * The aggregation type to use for the numerical columns in the dataset.
     */
    private AggregationType aggregationType;

    /*
     * The list of database names to return telemetry for. If not specified, telemetry for all databases will be
     * aggregated and returned.
     */
    private List<String> databaseNames;

    /**
     * Creates an instance of SqlServerInstanceTelemetryRequest class.
     */
    public SqlServerInstanceTelemetryRequest() {
    }

    /**
     * Get the datasetName property: The name of the telemetry dataset to retrieve.
     * 
     * @return the datasetName value.
     */
    public String datasetName() {
        return this.datasetName;
    }

    /**
     * Set the datasetName property: The name of the telemetry dataset to retrieve.
     * 
     * @param datasetName the datasetName value to set.
     * @return the SqlServerInstanceTelemetryRequest object itself.
     */
    public SqlServerInstanceTelemetryRequest withDatasetName(String datasetName) {
        this.datasetName = datasetName;
        return this;
    }

    /**
     * Get the startTime property: The start time for the time range to fetch telemetry for. If not specified, the
     * current time minus 1 hour is used.
     * 
     * @return the startTime value.
     */
    public OffsetDateTime startTime() {
        return this.startTime;
    }

    /**
     * Set the startTime property: The start time for the time range to fetch telemetry for. If not specified, the
     * current time minus 1 hour is used.
     * 
     * @param startTime the startTime value to set.
     * @return the SqlServerInstanceTelemetryRequest object itself.
     */
    public SqlServerInstanceTelemetryRequest withStartTime(OffsetDateTime startTime) {
        this.startTime = startTime;
        return this;
    }

    /**
     * Get the endTime property: The end time for the time range to fetch telemetry for. If not specified, the current
     * time is used.
     * 
     * @return the endTime value.
     */
    public OffsetDateTime endTime() {
        return this.endTime;
    }

    /**
     * Set the endTime property: The end time for the time range to fetch telemetry for. If not specified, the current
     * time is used.
     * 
     * @param endTime the endTime value to set.
     * @return the SqlServerInstanceTelemetryRequest object itself.
     */
    public SqlServerInstanceTelemetryRequest withEndTime(OffsetDateTime endTime) {
        this.endTime = endTime;
        return this;
    }

    /**
     * Get the interval property: The time granularity to fetch telemetry for. This is an ISO8601 duration. Examples:
     * PT15M, PT1H, P1D.
     * 
     * @return the interval value.
     */
    public Duration interval() {
        return this.interval;
    }

    /**
     * Set the interval property: The time granularity to fetch telemetry for. This is an ISO8601 duration. Examples:
     * PT15M, PT1H, P1D.
     * 
     * @param interval the interval value to set.
     * @return the SqlServerInstanceTelemetryRequest object itself.
     */
    public SqlServerInstanceTelemetryRequest withInterval(Duration interval) {
        this.interval = interval;
        return this;
    }

    /**
     * Get the aggregationType property: The aggregation type to use for the numerical columns in the dataset.
     * 
     * @return the aggregationType value.
     */
    public AggregationType aggregationType() {
        return this.aggregationType;
    }

    /**
     * Set the aggregationType property: The aggregation type to use for the numerical columns in the dataset.
     * 
     * @param aggregationType the aggregationType value to set.
     * @return the SqlServerInstanceTelemetryRequest object itself.
     */
    public SqlServerInstanceTelemetryRequest withAggregationType(AggregationType aggregationType) {
        this.aggregationType = aggregationType;
        return this;
    }

    /**
     * Get the databaseNames property: The list of database names to return telemetry for. If not specified, telemetry
     * for all databases will be aggregated and returned.
     * 
     * @return the databaseNames value.
     */
    public List<String> databaseNames() {
        return this.databaseNames;
    }

    /**
     * Set the databaseNames property: The list of database names to return telemetry for. If not specified, telemetry
     * for all databases will be aggregated and returned.
     * 
     * @param databaseNames the databaseNames value to set.
     * @return the SqlServerInstanceTelemetryRequest object itself.
     */
    public SqlServerInstanceTelemetryRequest withDatabaseNames(List<String> databaseNames) {
        this.databaseNames = databaseNames;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (datasetName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property datasetName in model SqlServerInstanceTelemetryRequest"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(SqlServerInstanceTelemetryRequest.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("datasetName", this.datasetName);
        jsonWriter.writeStringField("startTime",
            this.startTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.startTime));
        jsonWriter.writeStringField("endTime",
            this.endTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.endTime));
        jsonWriter.writeStringField("interval", CoreUtils.durationToStringWithDays(this.interval));
        jsonWriter.writeStringField("aggregationType",
            this.aggregationType == null ? null : this.aggregationType.toString());
        jsonWriter.writeArrayField("databaseNames", this.databaseNames,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SqlServerInstanceTelemetryRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SqlServerInstanceTelemetryRequest if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SqlServerInstanceTelemetryRequest.
     */
    public static SqlServerInstanceTelemetryRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SqlServerInstanceTelemetryRequest deserializedSqlServerInstanceTelemetryRequest
                = new SqlServerInstanceTelemetryRequest();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("datasetName".equals(fieldName)) {
                    deserializedSqlServerInstanceTelemetryRequest.datasetName = reader.getString();
                } else if ("startTime".equals(fieldName)) {
                    deserializedSqlServerInstanceTelemetryRequest.startTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("endTime".equals(fieldName)) {
                    deserializedSqlServerInstanceTelemetryRequest.endTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("interval".equals(fieldName)) {
                    deserializedSqlServerInstanceTelemetryRequest.interval
                        = reader.getNullable(nonNullReader -> Duration.parse(nonNullReader.getString()));
                } else if ("aggregationType".equals(fieldName)) {
                    deserializedSqlServerInstanceTelemetryRequest.aggregationType
                        = AggregationType.fromString(reader.getString());
                } else if ("databaseNames".equals(fieldName)) {
                    List<String> databaseNames = reader.readArray(reader1 -> reader1.getString());
                    deserializedSqlServerInstanceTelemetryRequest.databaseNames = databaseNames;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSqlServerInstanceTelemetryRequest;
        });
    }
}
