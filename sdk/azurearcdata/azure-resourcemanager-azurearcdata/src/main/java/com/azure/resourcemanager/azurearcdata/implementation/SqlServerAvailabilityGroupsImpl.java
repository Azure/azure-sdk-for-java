// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurearcdata.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.azurearcdata.fluent.SqlServerAvailabilityGroupsClient;
import com.azure.resourcemanager.azurearcdata.fluent.models.SqlServerAvailabilityGroupResourceInner;
import com.azure.resourcemanager.azurearcdata.models.AvailabilityGroupCreateUpdateConfiguration;
import com.azure.resourcemanager.azurearcdata.models.Databases;
import com.azure.resourcemanager.azurearcdata.models.DistributedAvailabilityGroupCreateUpdateConfiguration;
import com.azure.resourcemanager.azurearcdata.models.FailoverMiLinkResourceId;
import com.azure.resourcemanager.azurearcdata.models.ManagedInstanceLinkCreateUpdateConfiguration;
import com.azure.resourcemanager.azurearcdata.models.SqlServerAvailabilityGroupResource;
import com.azure.resourcemanager.azurearcdata.models.SqlServerAvailabilityGroups;

public final class SqlServerAvailabilityGroupsImpl implements SqlServerAvailabilityGroups {
    private static final ClientLogger LOGGER = new ClientLogger(SqlServerAvailabilityGroupsImpl.class);

    private final SqlServerAvailabilityGroupsClient innerClient;

    private final com.azure.resourcemanager.azurearcdata.AzureArcDataManager serviceManager;

    public SqlServerAvailabilityGroupsImpl(SqlServerAvailabilityGroupsClient innerClient,
        com.azure.resourcemanager.azurearcdata.AzureArcDataManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public void delete(String resourceGroupName, String sqlServerInstanceName, String availabilityGroupName) {
        this.serviceClient().delete(resourceGroupName, sqlServerInstanceName, availabilityGroupName);
    }

    public void delete(String resourceGroupName, String sqlServerInstanceName, String availabilityGroupName,
        Context context) {
        this.serviceClient().delete(resourceGroupName, sqlServerInstanceName, availabilityGroupName, context);
    }

    public Response<SqlServerAvailabilityGroupResource> getWithResponse(String resourceGroupName,
        String sqlServerInstanceName, String availabilityGroupName, Context context) {
        Response<SqlServerAvailabilityGroupResourceInner> inner = this.serviceClient()
            .getWithResponse(resourceGroupName, sqlServerInstanceName, availabilityGroupName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new SqlServerAvailabilityGroupResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SqlServerAvailabilityGroupResource get(String resourceGroupName, String sqlServerInstanceName,
        String availabilityGroupName) {
        SqlServerAvailabilityGroupResourceInner inner
            = this.serviceClient().get(resourceGroupName, sqlServerInstanceName, availabilityGroupName);
        if (inner != null) {
            return new SqlServerAvailabilityGroupResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<SqlServerAvailabilityGroupResource> detailViewWithResponse(String resourceGroupName,
        String sqlServerInstanceName, String availabilityGroupName, Context context) {
        Response<SqlServerAvailabilityGroupResourceInner> inner = this.serviceClient()
            .detailViewWithResponse(resourceGroupName, sqlServerInstanceName, availabilityGroupName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new SqlServerAvailabilityGroupResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SqlServerAvailabilityGroupResource detailView(String resourceGroupName, String sqlServerInstanceName,
        String availabilityGroupName) {
        SqlServerAvailabilityGroupResourceInner inner
            = this.serviceClient().detailView(resourceGroupName, sqlServerInstanceName, availabilityGroupName);
        if (inner != null) {
            return new SqlServerAvailabilityGroupResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<SqlServerAvailabilityGroupResource> failoverWithResponse(String resourceGroupName,
        String sqlServerInstanceName, String availabilityGroupName, Context context) {
        Response<SqlServerAvailabilityGroupResourceInner> inner = this.serviceClient()
            .failoverWithResponse(resourceGroupName, sqlServerInstanceName, availabilityGroupName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new SqlServerAvailabilityGroupResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SqlServerAvailabilityGroupResource failover(String resourceGroupName, String sqlServerInstanceName,
        String availabilityGroupName) {
        SqlServerAvailabilityGroupResourceInner inner
            = this.serviceClient().failover(resourceGroupName, sqlServerInstanceName, availabilityGroupName);
        if (inner != null) {
            return new SqlServerAvailabilityGroupResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<SqlServerAvailabilityGroupResource> forceFailoverAllowDataLossWithResponse(String resourceGroupName,
        String sqlServerInstanceName, String availabilityGroupName, Context context) {
        Response<SqlServerAvailabilityGroupResourceInner> inner = this.serviceClient()
            .forceFailoverAllowDataLossWithResponse(resourceGroupName, sqlServerInstanceName, availabilityGroupName,
                context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new SqlServerAvailabilityGroupResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SqlServerAvailabilityGroupResource forceFailoverAllowDataLoss(String resourceGroupName,
        String sqlServerInstanceName, String availabilityGroupName) {
        SqlServerAvailabilityGroupResourceInner inner = this.serviceClient()
            .forceFailoverAllowDataLoss(resourceGroupName, sqlServerInstanceName, availabilityGroupName);
        if (inner != null) {
            return new SqlServerAvailabilityGroupResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public SqlServerAvailabilityGroupResource createAvailabilityGroup(String resourceGroupName,
        String sqlServerInstanceName, AvailabilityGroupCreateUpdateConfiguration createAgConfiguration) {
        SqlServerAvailabilityGroupResourceInner inner = this.serviceClient()
            .createAvailabilityGroup(resourceGroupName, sqlServerInstanceName, createAgConfiguration);
        if (inner != null) {
            return new SqlServerAvailabilityGroupResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public SqlServerAvailabilityGroupResource createAvailabilityGroup(String resourceGroupName,
        String sqlServerInstanceName, AvailabilityGroupCreateUpdateConfiguration createAgConfiguration,
        Context context) {
        SqlServerAvailabilityGroupResourceInner inner = this.serviceClient()
            .createAvailabilityGroup(resourceGroupName, sqlServerInstanceName, createAgConfiguration, context);
        if (inner != null) {
            return new SqlServerAvailabilityGroupResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public SqlServerAvailabilityGroupResource createDistributedAvailabilityGroup(String resourceGroupName,
        String sqlServerInstanceName, DistributedAvailabilityGroupCreateUpdateConfiguration createDagConfiguration) {
        SqlServerAvailabilityGroupResourceInner inner = this.serviceClient()
            .createDistributedAvailabilityGroup(resourceGroupName, sqlServerInstanceName, createDagConfiguration);
        if (inner != null) {
            return new SqlServerAvailabilityGroupResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public SqlServerAvailabilityGroupResource createDistributedAvailabilityGroup(String resourceGroupName,
        String sqlServerInstanceName, DistributedAvailabilityGroupCreateUpdateConfiguration createDagConfiguration,
        Context context) {
        SqlServerAvailabilityGroupResourceInner inner = this.serviceClient()
            .createDistributedAvailabilityGroup(resourceGroupName, sqlServerInstanceName, createDagConfiguration,
                context);
        if (inner != null) {
            return new SqlServerAvailabilityGroupResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public SqlServerAvailabilityGroupResource createManagedInstanceLink(String resourceGroupName,
        String sqlServerInstanceName,
        ManagedInstanceLinkCreateUpdateConfiguration createManagedInstanceLinkConfiguration) {
        SqlServerAvailabilityGroupResourceInner inner = this.serviceClient()
            .createManagedInstanceLink(resourceGroupName, sqlServerInstanceName,
                createManagedInstanceLinkConfiguration);
        if (inner != null) {
            return new SqlServerAvailabilityGroupResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public SqlServerAvailabilityGroupResource createManagedInstanceLink(String resourceGroupName,
        String sqlServerInstanceName,
        ManagedInstanceLinkCreateUpdateConfiguration createManagedInstanceLinkConfiguration, Context context) {
        SqlServerAvailabilityGroupResourceInner inner = this.serviceClient()
            .createManagedInstanceLink(resourceGroupName, sqlServerInstanceName, createManagedInstanceLinkConfiguration,
                context);
        if (inner != null) {
            return new SqlServerAvailabilityGroupResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<SqlServerAvailabilityGroupResource> addDatabasesWithResponse(String resourceGroupName,
        String sqlServerInstanceName, String availabilityGroupName, Databases databases, Context context) {
        Response<SqlServerAvailabilityGroupResourceInner> inner = this.serviceClient()
            .addDatabasesWithResponse(resourceGroupName, sqlServerInstanceName, availabilityGroupName, databases,
                context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new SqlServerAvailabilityGroupResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SqlServerAvailabilityGroupResource addDatabases(String resourceGroupName, String sqlServerInstanceName,
        String availabilityGroupName, Databases databases) {
        SqlServerAvailabilityGroupResourceInner inner = this.serviceClient()
            .addDatabases(resourceGroupName, sqlServerInstanceName, availabilityGroupName, databases);
        if (inner != null) {
            return new SqlServerAvailabilityGroupResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public SqlServerAvailabilityGroupResource failoverMiLink(String resourceGroupName, String sqlServerInstanceName,
        String availabilityGroupName, FailoverMiLinkResourceId managedInstanceResourceId) {
        SqlServerAvailabilityGroupResourceInner inner = this.serviceClient()
            .failoverMiLink(resourceGroupName, sqlServerInstanceName, availabilityGroupName, managedInstanceResourceId);
        if (inner != null) {
            return new SqlServerAvailabilityGroupResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public SqlServerAvailabilityGroupResource failoverMiLink(String resourceGroupName, String sqlServerInstanceName,
        String availabilityGroupName, FailoverMiLinkResourceId managedInstanceResourceId, Context context) {
        SqlServerAvailabilityGroupResourceInner inner = this.serviceClient()
            .failoverMiLink(resourceGroupName, sqlServerInstanceName, availabilityGroupName, managedInstanceResourceId,
                context);
        if (inner != null) {
            return new SqlServerAvailabilityGroupResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<SqlServerAvailabilityGroupResource> removeDatabasesWithResponse(String resourceGroupName,
        String sqlServerInstanceName, String availabilityGroupName, Databases databases, Context context) {
        Response<SqlServerAvailabilityGroupResourceInner> inner = this.serviceClient()
            .removeDatabasesWithResponse(resourceGroupName, sqlServerInstanceName, availabilityGroupName, databases,
                context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new SqlServerAvailabilityGroupResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SqlServerAvailabilityGroupResource removeDatabases(String resourceGroupName, String sqlServerInstanceName,
        String availabilityGroupName, Databases databases) {
        SqlServerAvailabilityGroupResourceInner inner = this.serviceClient()
            .removeDatabases(resourceGroupName, sqlServerInstanceName, availabilityGroupName, databases);
        if (inner != null) {
            return new SqlServerAvailabilityGroupResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public PagedIterable<SqlServerAvailabilityGroupResource> list(String resourceGroupName,
        String sqlServerInstanceName) {
        PagedIterable<SqlServerAvailabilityGroupResourceInner> inner
            = this.serviceClient().list(resourceGroupName, sqlServerInstanceName);
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new SqlServerAvailabilityGroupResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<SqlServerAvailabilityGroupResource> list(String resourceGroupName,
        String sqlServerInstanceName, Context context) {
        PagedIterable<SqlServerAvailabilityGroupResourceInner> inner
            = this.serviceClient().list(resourceGroupName, sqlServerInstanceName, context);
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new SqlServerAvailabilityGroupResourceImpl(inner1, this.manager()));
    }

    public SqlServerAvailabilityGroupResource getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String sqlServerInstanceName = ResourceManagerUtils.getValueFromIdByName(id, "sqlServerInstances");
        if (sqlServerInstanceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'sqlServerInstances'.", id)));
        }
        String availabilityGroupName = ResourceManagerUtils.getValueFromIdByName(id, "availabilityGroups");
        if (availabilityGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'availabilityGroups'.", id)));
        }
        return this.getWithResponse(resourceGroupName, sqlServerInstanceName, availabilityGroupName, Context.NONE)
            .getValue();
    }

    public Response<SqlServerAvailabilityGroupResource> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String sqlServerInstanceName = ResourceManagerUtils.getValueFromIdByName(id, "sqlServerInstances");
        if (sqlServerInstanceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'sqlServerInstances'.", id)));
        }
        String availabilityGroupName = ResourceManagerUtils.getValueFromIdByName(id, "availabilityGroups");
        if (availabilityGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'availabilityGroups'.", id)));
        }
        return this.getWithResponse(resourceGroupName, sqlServerInstanceName, availabilityGroupName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String sqlServerInstanceName = ResourceManagerUtils.getValueFromIdByName(id, "sqlServerInstances");
        if (sqlServerInstanceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'sqlServerInstances'.", id)));
        }
        String availabilityGroupName = ResourceManagerUtils.getValueFromIdByName(id, "availabilityGroups");
        if (availabilityGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'availabilityGroups'.", id)));
        }
        this.delete(resourceGroupName, sqlServerInstanceName, availabilityGroupName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String sqlServerInstanceName = ResourceManagerUtils.getValueFromIdByName(id, "sqlServerInstances");
        if (sqlServerInstanceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'sqlServerInstances'.", id)));
        }
        String availabilityGroupName = ResourceManagerUtils.getValueFromIdByName(id, "availabilityGroups");
        if (availabilityGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'availabilityGroups'.", id)));
        }
        this.delete(resourceGroupName, sqlServerInstanceName, availabilityGroupName, context);
    }

    private SqlServerAvailabilityGroupsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.azurearcdata.AzureArcDataManager manager() {
        return this.serviceManager;
    }

    public SqlServerAvailabilityGroupResourceImpl define(String name) {
        return new SqlServerAvailabilityGroupResourceImpl(name, this.manager());
    }
}
