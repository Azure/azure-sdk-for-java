// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurearcdata.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * A section of the telemetry response for the SQL Server instance.
 */
@Fluent
public final class SqlServerInstanceTelemetryResponse implements JsonSerializable<SqlServerInstanceTelemetryResponse> {
    /*
     * The columns of the result telemetry table for the SQL Server instance.
     */
    private List<SqlServerInstanceTelemetryColumn> columns;

    /*
     * A list of rows from the result telemetry table for the SQL Server instance.
     */
    private List<List<String>> rows;

    /*
     * The link to the next section of rows of the telemetry response for the SQL Server instance. Null if no more
     * sections are available.
     */
    private String nextLink;

    /**
     * Creates an instance of SqlServerInstanceTelemetryResponse class.
     */
    public SqlServerInstanceTelemetryResponse() {
    }

    /**
     * Get the columns property: The columns of the result telemetry table for the SQL Server instance.
     * 
     * @return the columns value.
     */
    public List<SqlServerInstanceTelemetryColumn> columns() {
        return this.columns;
    }

    /**
     * Set the columns property: The columns of the result telemetry table for the SQL Server instance.
     * 
     * @param columns the columns value to set.
     * @return the SqlServerInstanceTelemetryResponse object itself.
     */
    public SqlServerInstanceTelemetryResponse withColumns(List<SqlServerInstanceTelemetryColumn> columns) {
        this.columns = columns;
        return this;
    }

    /**
     * Get the rows property: A list of rows from the result telemetry table for the SQL Server instance.
     * 
     * @return the rows value.
     */
    public List<List<String>> rows() {
        return this.rows;
    }

    /**
     * Set the rows property: A list of rows from the result telemetry table for the SQL Server instance.
     * 
     * @param rows the rows value to set.
     * @return the SqlServerInstanceTelemetryResponse object itself.
     */
    public SqlServerInstanceTelemetryResponse withRows(List<List<String>> rows) {
        this.rows = rows;
        return this;
    }

    /**
     * Get the nextLink property: The link to the next section of rows of the telemetry response for the SQL Server
     * instance. Null if no more sections are available.
     * 
     * @return the nextLink value.
     */
    public String nextLink() {
        return this.nextLink;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (columns() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property columns in model SqlServerInstanceTelemetryResponse"));
        } else {
            columns().forEach(e -> e.validate());
        }
        if (rows() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property rows in model SqlServerInstanceTelemetryResponse"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(SqlServerInstanceTelemetryResponse.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("columns", this.columns, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("rows", this.rows,
            (writer, element) -> writer.writeArray(element, (writer1, element1) -> writer1.writeString(element1)));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SqlServerInstanceTelemetryResponse from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SqlServerInstanceTelemetryResponse if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SqlServerInstanceTelemetryResponse.
     */
    public static SqlServerInstanceTelemetryResponse fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SqlServerInstanceTelemetryResponse deserializedSqlServerInstanceTelemetryResponse
                = new SqlServerInstanceTelemetryResponse();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("columns".equals(fieldName)) {
                    List<SqlServerInstanceTelemetryColumn> columns
                        = reader.readArray(reader1 -> SqlServerInstanceTelemetryColumn.fromJson(reader1));
                    deserializedSqlServerInstanceTelemetryResponse.columns = columns;
                } else if ("rows".equals(fieldName)) {
                    List<List<String>> rows
                        = reader.readArray(reader1 -> reader1.readArray(reader2 -> reader2.getString()));
                    deserializedSqlServerInstanceTelemetryResponse.rows = rows;
                } else if ("nextLink".equals(fieldName)) {
                    deserializedSqlServerInstanceTelemetryResponse.nextLink = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSqlServerInstanceTelemetryResponse;
        });
    }
}
