// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurearcdata.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * The properties of Arc Sql Server availability group resource.
 */
@Fluent
public final class SqlServerAvailabilityGroupResourceProperties
    implements JsonSerializable<SqlServerAvailabilityGroupResourceProperties> {
    /*
     * ID GUID of the availability group.
     */
    private String availabilityGroupId;

    /*
     * the SQL server name.
     */
    private String serverName;

    /*
     * the SQL Server Instance name.
     */
    private String instanceName;

    /*
     * The unique ID of the hybrid machine that this resource belongs to.
     */
    private String vmId;

    /*
     * Timestamp for when the data was collected from the client machine.
     */
    private OffsetDateTime collectionTimestamp;

    /*
     * Availability Group Info
     */
    private AvailabilityGroupInfo info;

    /*
     * A list of Availability Group Replicas.
     */
    private SqlServerAvailabilityGroupResourcePropertiesReplicas replicas;

    /*
     * A list of Availability Group Database Replicas.
     */
    private SqlServerAvailabilityGroupResourcePropertiesDatabases databases;

    /*
     * The provisioning state of the Arc-enabled SQL Server availability group resource.
     */
    private String provisioningState;

    /**
     * Creates an instance of SqlServerAvailabilityGroupResourceProperties class.
     */
    public SqlServerAvailabilityGroupResourceProperties() {
    }

    /**
     * Get the availabilityGroupId property: ID GUID of the availability group.
     * 
     * @return the availabilityGroupId value.
     */
    public String availabilityGroupId() {
        return this.availabilityGroupId;
    }

    /**
     * Get the serverName property: the SQL server name.
     * 
     * @return the serverName value.
     */
    public String serverName() {
        return this.serverName;
    }

    /**
     * Get the instanceName property: the SQL Server Instance name.
     * 
     * @return the instanceName value.
     */
    public String instanceName() {
        return this.instanceName;
    }

    /**
     * Get the vmId property: The unique ID of the hybrid machine that this resource belongs to.
     * 
     * @return the vmId value.
     */
    public String vmId() {
        return this.vmId;
    }

    /**
     * Get the collectionTimestamp property: Timestamp for when the data was collected from the client machine.
     * 
     * @return the collectionTimestamp value.
     */
    public OffsetDateTime collectionTimestamp() {
        return this.collectionTimestamp;
    }

    /**
     * Get the info property: Availability Group Info.
     * 
     * @return the info value.
     */
    public AvailabilityGroupInfo info() {
        return this.info;
    }

    /**
     * Set the info property: Availability Group Info.
     * 
     * @param info the info value to set.
     * @return the SqlServerAvailabilityGroupResourceProperties object itself.
     */
    public SqlServerAvailabilityGroupResourceProperties withInfo(AvailabilityGroupInfo info) {
        this.info = info;
        return this;
    }

    /**
     * Get the replicas property: A list of Availability Group Replicas.
     * 
     * @return the replicas value.
     */
    public SqlServerAvailabilityGroupResourcePropertiesReplicas replicas() {
        return this.replicas;
    }

    /**
     * Set the replicas property: A list of Availability Group Replicas.
     * 
     * @param replicas the replicas value to set.
     * @return the SqlServerAvailabilityGroupResourceProperties object itself.
     */
    public SqlServerAvailabilityGroupResourceProperties
        withReplicas(SqlServerAvailabilityGroupResourcePropertiesReplicas replicas) {
        this.replicas = replicas;
        return this;
    }

    /**
     * Get the databases property: A list of Availability Group Database Replicas.
     * 
     * @return the databases value.
     */
    public SqlServerAvailabilityGroupResourcePropertiesDatabases databases() {
        return this.databases;
    }

    /**
     * Set the databases property: A list of Availability Group Database Replicas.
     * 
     * @param databases the databases value to set.
     * @return the SqlServerAvailabilityGroupResourceProperties object itself.
     */
    public SqlServerAvailabilityGroupResourceProperties
        withDatabases(SqlServerAvailabilityGroupResourcePropertiesDatabases databases) {
        this.databases = databases;
        return this;
    }

    /**
     * Get the provisioningState property: The provisioning state of the Arc-enabled SQL Server availability group
     * resource.
     * 
     * @return the provisioningState value.
     */
    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (info() != null) {
            info().validate();
        }
        if (replicas() != null) {
            replicas().validate();
        }
        if (databases() != null) {
            databases().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("info", this.info);
        jsonWriter.writeJsonField("replicas", this.replicas);
        jsonWriter.writeJsonField("databases", this.databases);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SqlServerAvailabilityGroupResourceProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SqlServerAvailabilityGroupResourceProperties if the JsonReader was pointing to an instance
     * of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SqlServerAvailabilityGroupResourceProperties.
     */
    public static SqlServerAvailabilityGroupResourceProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SqlServerAvailabilityGroupResourceProperties deserializedSqlServerAvailabilityGroupResourceProperties
                = new SqlServerAvailabilityGroupResourceProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("availabilityGroupId".equals(fieldName)) {
                    deserializedSqlServerAvailabilityGroupResourceProperties.availabilityGroupId = reader.getString();
                } else if ("serverName".equals(fieldName)) {
                    deserializedSqlServerAvailabilityGroupResourceProperties.serverName = reader.getString();
                } else if ("instanceName".equals(fieldName)) {
                    deserializedSqlServerAvailabilityGroupResourceProperties.instanceName = reader.getString();
                } else if ("vmId".equals(fieldName)) {
                    deserializedSqlServerAvailabilityGroupResourceProperties.vmId = reader.getString();
                } else if ("collectionTimestamp".equals(fieldName)) {
                    deserializedSqlServerAvailabilityGroupResourceProperties.collectionTimestamp = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("info".equals(fieldName)) {
                    deserializedSqlServerAvailabilityGroupResourceProperties.info
                        = AvailabilityGroupInfo.fromJson(reader);
                } else if ("replicas".equals(fieldName)) {
                    deserializedSqlServerAvailabilityGroupResourceProperties.replicas
                        = SqlServerAvailabilityGroupResourcePropertiesReplicas.fromJson(reader);
                } else if ("databases".equals(fieldName)) {
                    deserializedSqlServerAvailabilityGroupResourceProperties.databases
                        = SqlServerAvailabilityGroupResourcePropertiesDatabases.fromJson(reader);
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedSqlServerAvailabilityGroupResourceProperties.provisioningState = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSqlServerAvailabilityGroupResourceProperties;
        });
    }
}
