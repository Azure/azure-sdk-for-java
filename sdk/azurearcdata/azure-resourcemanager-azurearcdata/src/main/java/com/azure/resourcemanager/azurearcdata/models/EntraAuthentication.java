// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurearcdata.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Entra Authentication configuration.
 */
@Fluent
public final class EntraAuthentication implements JsonSerializable<EntraAuthentication> {
    /*
     * The method used for Entra authentication
     */
    private IdentityType identityType;

    /*
     * The client Id of the Managed Identity to query Microsoft Graph API. An empty string must be used for the system
     * assigned Managed Identity.
     */
    private String clientId;

    /**
     * Creates an instance of EntraAuthentication class.
     */
    public EntraAuthentication() {
    }

    /**
     * Get the identityType property: The method used for Entra authentication.
     * 
     * @return the identityType value.
     */
    public IdentityType identityType() {
        return this.identityType;
    }

    /**
     * Set the identityType property: The method used for Entra authentication.
     * 
     * @param identityType the identityType value to set.
     * @return the EntraAuthentication object itself.
     */
    public EntraAuthentication withIdentityType(IdentityType identityType) {
        this.identityType = identityType;
        return this;
    }

    /**
     * Get the clientId property: The client Id of the Managed Identity to query Microsoft Graph API. An empty string
     * must be used for the system assigned Managed Identity.
     * 
     * @return the clientId value.
     */
    public String clientId() {
        return this.clientId;
    }

    /**
     * Set the clientId property: The client Id of the Managed Identity to query Microsoft Graph API. An empty string
     * must be used for the system assigned Managed Identity.
     * 
     * @param clientId the clientId value to set.
     * @return the EntraAuthentication object itself.
     */
    public EntraAuthentication withClientId(String clientId) {
        this.clientId = clientId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("identityType", this.identityType == null ? null : this.identityType.toString());
        jsonWriter.writeStringField("clientId", this.clientId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EntraAuthentication from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of EntraAuthentication if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the EntraAuthentication.
     */
    public static EntraAuthentication fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            EntraAuthentication deserializedEntraAuthentication = new EntraAuthentication();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("identityType".equals(fieldName)) {
                    deserializedEntraAuthentication.identityType = IdentityType.fromString(reader.getString());
                } else if ("clientId".equals(fieldName)) {
                    deserializedEntraAuthentication.clientId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedEntraAuthentication;
        });
    }
}
