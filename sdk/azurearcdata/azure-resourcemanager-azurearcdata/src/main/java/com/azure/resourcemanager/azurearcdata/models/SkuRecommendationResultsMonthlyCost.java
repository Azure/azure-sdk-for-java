// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurearcdata.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The Monthly cost of the particular SKU.
 */
@Fluent
public final class SkuRecommendationResultsMonthlyCost
    implements JsonSerializable<SkuRecommendationResultsMonthlyCost> {
    /*
     * Represents the Cost of Compute.
     */
    private Float computeCost;

    /*
     * Represents the Cost of Storage.
     */
    private Float storageCost;

    /*
     * Represents the Total Cost.
     */
    private Float totalCost;

    /**
     * Creates an instance of SkuRecommendationResultsMonthlyCost class.
     */
    public SkuRecommendationResultsMonthlyCost() {
    }

    /**
     * Get the computeCost property: Represents the Cost of Compute.
     * 
     * @return the computeCost value.
     */
    public Float computeCost() {
        return this.computeCost;
    }

    /**
     * Set the computeCost property: Represents the Cost of Compute.
     * 
     * @param computeCost the computeCost value to set.
     * @return the SkuRecommendationResultsMonthlyCost object itself.
     */
    public SkuRecommendationResultsMonthlyCost withComputeCost(Float computeCost) {
        this.computeCost = computeCost;
        return this;
    }

    /**
     * Get the storageCost property: Represents the Cost of Storage.
     * 
     * @return the storageCost value.
     */
    public Float storageCost() {
        return this.storageCost;
    }

    /**
     * Set the storageCost property: Represents the Cost of Storage.
     * 
     * @param storageCost the storageCost value to set.
     * @return the SkuRecommendationResultsMonthlyCost object itself.
     */
    public SkuRecommendationResultsMonthlyCost withStorageCost(Float storageCost) {
        this.storageCost = storageCost;
        return this;
    }

    /**
     * Get the totalCost property: Represents the Total Cost.
     * 
     * @return the totalCost value.
     */
    public Float totalCost() {
        return this.totalCost;
    }

    /**
     * Set the totalCost property: Represents the Total Cost.
     * 
     * @param totalCost the totalCost value to set.
     * @return the SkuRecommendationResultsMonthlyCost object itself.
     */
    public SkuRecommendationResultsMonthlyCost withTotalCost(Float totalCost) {
        this.totalCost = totalCost;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("computeCost", this.computeCost);
        jsonWriter.writeNumberField("storageCost", this.storageCost);
        jsonWriter.writeNumberField("totalCost", this.totalCost);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SkuRecommendationResultsMonthlyCost from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SkuRecommendationResultsMonthlyCost if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SkuRecommendationResultsMonthlyCost.
     */
    public static SkuRecommendationResultsMonthlyCost fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SkuRecommendationResultsMonthlyCost deserializedSkuRecommendationResultsMonthlyCost
                = new SkuRecommendationResultsMonthlyCost();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("computeCost".equals(fieldName)) {
                    deserializedSkuRecommendationResultsMonthlyCost.computeCost
                        = reader.getNullable(JsonReader::getFloat);
                } else if ("storageCost".equals(fieldName)) {
                    deserializedSkuRecommendationResultsMonthlyCost.storageCost
                        = reader.getNullable(JsonReader::getFloat);
                } else if ("totalCost".equals(fieldName)) {
                    deserializedSkuRecommendationResultsMonthlyCost.totalCost
                        = reader.getNullable(JsonReader::getFloat);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSkuRecommendationResultsMonthlyCost;
        });
    }
}
