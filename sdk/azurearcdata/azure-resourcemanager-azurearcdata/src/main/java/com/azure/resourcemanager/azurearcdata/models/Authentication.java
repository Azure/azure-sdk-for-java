// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurearcdata.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Authentication related configuration for the SQL Server Instance.
 */
@Fluent
public final class Authentication implements JsonSerializable<Authentication> {
    /*
     * Mode of authentication in SqlServer.
     */
    private Mode mode;

    /*
     * Entra Authentication configuration for the SQL Server Instance.
     */
    private List<EntraAuthentication> sqlServerEntraIdentity;

    /**
     * Creates an instance of Authentication class.
     */
    public Authentication() {
    }

    /**
     * Get the mode property: Mode of authentication in SqlServer.
     * 
     * @return the mode value.
     */
    public Mode mode() {
        return this.mode;
    }

    /**
     * Set the mode property: Mode of authentication in SqlServer.
     * 
     * @param mode the mode value to set.
     * @return the Authentication object itself.
     */
    public Authentication withMode(Mode mode) {
        this.mode = mode;
        return this;
    }

    /**
     * Get the sqlServerEntraIdentity property: Entra Authentication configuration for the SQL Server Instance.
     * 
     * @return the sqlServerEntraIdentity value.
     */
    public List<EntraAuthentication> sqlServerEntraIdentity() {
        return this.sqlServerEntraIdentity;
    }

    /**
     * Set the sqlServerEntraIdentity property: Entra Authentication configuration for the SQL Server Instance.
     * 
     * @param sqlServerEntraIdentity the sqlServerEntraIdentity value to set.
     * @return the Authentication object itself.
     */
    public Authentication withSqlServerEntraIdentity(List<EntraAuthentication> sqlServerEntraIdentity) {
        this.sqlServerEntraIdentity = sqlServerEntraIdentity;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (sqlServerEntraIdentity() != null) {
            sqlServerEntraIdentity().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("mode", this.mode == null ? null : this.mode.toString());
        jsonWriter.writeArrayField("sqlServerEntraIdentity", this.sqlServerEntraIdentity,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Authentication from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Authentication if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the Authentication.
     */
    public static Authentication fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Authentication deserializedAuthentication = new Authentication();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("mode".equals(fieldName)) {
                    deserializedAuthentication.mode = Mode.fromString(reader.getString());
                } else if ("sqlServerEntraIdentity".equals(fieldName)) {
                    List<EntraAuthentication> sqlServerEntraIdentity
                        = reader.readArray(reader1 -> EntraAuthentication.fromJson(reader1));
                    deserializedAuthentication.sqlServerEntraIdentity = sqlServerEntraIdentity;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAuthentication;
        });
    }
}
