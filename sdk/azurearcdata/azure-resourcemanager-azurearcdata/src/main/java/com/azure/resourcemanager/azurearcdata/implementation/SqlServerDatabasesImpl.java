// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurearcdata.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.azurearcdata.fluent.SqlServerDatabasesClient;
import com.azure.resourcemanager.azurearcdata.fluent.models.SqlServerDatabaseResourceInner;
import com.azure.resourcemanager.azurearcdata.models.SqlServerDatabaseResource;
import com.azure.resourcemanager.azurearcdata.models.SqlServerDatabases;

public final class SqlServerDatabasesImpl implements SqlServerDatabases {
    private static final ClientLogger LOGGER = new ClientLogger(SqlServerDatabasesImpl.class);

    private final SqlServerDatabasesClient innerClient;

    private final com.azure.resourcemanager.azurearcdata.AzureArcDataManager serviceManager;

    public SqlServerDatabasesImpl(SqlServerDatabasesClient innerClient,
        com.azure.resourcemanager.azurearcdata.AzureArcDataManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public void delete(String resourceGroupName, String sqlServerInstanceName, String databaseName) {
        this.serviceClient().delete(resourceGroupName, sqlServerInstanceName, databaseName);
    }

    public void delete(String resourceGroupName, String sqlServerInstanceName, String databaseName, Context context) {
        this.serviceClient().delete(resourceGroupName, sqlServerInstanceName, databaseName, context);
    }

    public Response<SqlServerDatabaseResource> getWithResponse(String resourceGroupName, String sqlServerInstanceName,
        String databaseName, Context context) {
        Response<SqlServerDatabaseResourceInner> inner
            = this.serviceClient().getWithResponse(resourceGroupName, sqlServerInstanceName, databaseName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new SqlServerDatabaseResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SqlServerDatabaseResource get(String resourceGroupName, String sqlServerInstanceName, String databaseName) {
        SqlServerDatabaseResourceInner inner
            = this.serviceClient().get(resourceGroupName, sqlServerInstanceName, databaseName);
        if (inner != null) {
            return new SqlServerDatabaseResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public PagedIterable<SqlServerDatabaseResource> list(String resourceGroupName, String sqlServerInstanceName) {
        PagedIterable<SqlServerDatabaseResourceInner> inner
            = this.serviceClient().list(resourceGroupName, sqlServerInstanceName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new SqlServerDatabaseResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<SqlServerDatabaseResource> list(String resourceGroupName, String sqlServerInstanceName,
        Context context) {
        PagedIterable<SqlServerDatabaseResourceInner> inner
            = this.serviceClient().list(resourceGroupName, sqlServerInstanceName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new SqlServerDatabaseResourceImpl(inner1, this.manager()));
    }

    public SqlServerDatabaseResource getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String sqlServerInstanceName = ResourceManagerUtils.getValueFromIdByName(id, "sqlServerInstances");
        if (sqlServerInstanceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'sqlServerInstances'.", id)));
        }
        String databaseName = ResourceManagerUtils.getValueFromIdByName(id, "databases");
        if (databaseName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'databases'.", id)));
        }
        return this.getWithResponse(resourceGroupName, sqlServerInstanceName, databaseName, Context.NONE).getValue();
    }

    public Response<SqlServerDatabaseResource> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String sqlServerInstanceName = ResourceManagerUtils.getValueFromIdByName(id, "sqlServerInstances");
        if (sqlServerInstanceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'sqlServerInstances'.", id)));
        }
        String databaseName = ResourceManagerUtils.getValueFromIdByName(id, "databases");
        if (databaseName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'databases'.", id)));
        }
        return this.getWithResponse(resourceGroupName, sqlServerInstanceName, databaseName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String sqlServerInstanceName = ResourceManagerUtils.getValueFromIdByName(id, "sqlServerInstances");
        if (sqlServerInstanceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'sqlServerInstances'.", id)));
        }
        String databaseName = ResourceManagerUtils.getValueFromIdByName(id, "databases");
        if (databaseName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'databases'.", id)));
        }
        this.delete(resourceGroupName, sqlServerInstanceName, databaseName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String sqlServerInstanceName = ResourceManagerUtils.getValueFromIdByName(id, "sqlServerInstances");
        if (sqlServerInstanceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'sqlServerInstances'.", id)));
        }
        String databaseName = ResourceManagerUtils.getValueFromIdByName(id, "databases");
        if (databaseName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'databases'.", id)));
        }
        this.delete(resourceGroupName, sqlServerInstanceName, databaseName, context);
    }

    private SqlServerDatabasesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.azurearcdata.AzureArcDataManager manager() {
        return this.serviceManager;
    }

    public SqlServerDatabaseResourceImpl define(String name) {
        return new SqlServerDatabaseResourceImpl(name, this.manager());
    }
}
