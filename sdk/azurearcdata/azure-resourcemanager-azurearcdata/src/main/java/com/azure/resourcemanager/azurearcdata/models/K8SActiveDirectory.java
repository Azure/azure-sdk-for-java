// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurearcdata.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The kubernetes active directory information.
 */
@Fluent
public final class K8SActiveDirectory implements JsonSerializable<K8SActiveDirectory> {
    /*
     * The connector property.
     */
    private K8SActiveDirectoryConnector connector;

    /*
     * Account name for AAD
     */
    private String accountName;

    /*
     * Keytab secret used to authenticate with Active Directory.
     */
    private String keytabSecret;

    /*
     * An array of encryption types
     */
    private List<String> encryptionTypes;

    /**
     * Creates an instance of K8SActiveDirectory class.
     */
    public K8SActiveDirectory() {
    }

    /**
     * Get the connector property: The connector property.
     * 
     * @return the connector value.
     */
    public K8SActiveDirectoryConnector connector() {
        return this.connector;
    }

    /**
     * Set the connector property: The connector property.
     * 
     * @param connector the connector value to set.
     * @return the K8SActiveDirectory object itself.
     */
    public K8SActiveDirectory withConnector(K8SActiveDirectoryConnector connector) {
        this.connector = connector;
        return this;
    }

    /**
     * Get the accountName property: Account name for AAD.
     * 
     * @return the accountName value.
     */
    public String accountName() {
        return this.accountName;
    }

    /**
     * Set the accountName property: Account name for AAD.
     * 
     * @param accountName the accountName value to set.
     * @return the K8SActiveDirectory object itself.
     */
    public K8SActiveDirectory withAccountName(String accountName) {
        this.accountName = accountName;
        return this;
    }

    /**
     * Get the keytabSecret property: Keytab secret used to authenticate with Active Directory.
     * 
     * @return the keytabSecret value.
     */
    public String keytabSecret() {
        return this.keytabSecret;
    }

    /**
     * Set the keytabSecret property: Keytab secret used to authenticate with Active Directory.
     * 
     * @param keytabSecret the keytabSecret value to set.
     * @return the K8SActiveDirectory object itself.
     */
    public K8SActiveDirectory withKeytabSecret(String keytabSecret) {
        this.keytabSecret = keytabSecret;
        return this;
    }

    /**
     * Get the encryptionTypes property: An array of encryption types.
     * 
     * @return the encryptionTypes value.
     */
    public List<String> encryptionTypes() {
        return this.encryptionTypes;
    }

    /**
     * Set the encryptionTypes property: An array of encryption types.
     * 
     * @param encryptionTypes the encryptionTypes value to set.
     * @return the K8SActiveDirectory object itself.
     */
    public K8SActiveDirectory withEncryptionTypes(List<String> encryptionTypes) {
        this.encryptionTypes = encryptionTypes;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (connector() != null) {
            connector().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("connector", this.connector);
        jsonWriter.writeStringField("accountName", this.accountName);
        jsonWriter.writeStringField("keytabSecret", this.keytabSecret);
        jsonWriter.writeArrayField("encryptionTypes", this.encryptionTypes,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of K8SActiveDirectory from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of K8SActiveDirectory if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the K8SActiveDirectory.
     */
    public static K8SActiveDirectory fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            K8SActiveDirectory deserializedK8SActiveDirectory = new K8SActiveDirectory();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("connector".equals(fieldName)) {
                    deserializedK8SActiveDirectory.connector = K8SActiveDirectoryConnector.fromJson(reader);
                } else if ("accountName".equals(fieldName)) {
                    deserializedK8SActiveDirectory.accountName = reader.getString();
                } else if ("keytabSecret".equals(fieldName)) {
                    deserializedK8SActiveDirectory.keytabSecret = reader.getString();
                } else if ("encryptionTypes".equals(fieldName)) {
                    List<String> encryptionTypes = reader.readArray(reader1 -> reader1.getString());
                    deserializedK8SActiveDirectory.encryptionTypes = encryptionTypes;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedK8SActiveDirectory;
        });
    }
}
