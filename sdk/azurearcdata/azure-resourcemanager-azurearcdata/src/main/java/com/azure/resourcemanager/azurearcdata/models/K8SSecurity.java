// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurearcdata.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.LinkedHashMap;
import java.util.Map;

/**
 * The kubernetes security information.
 */
@Fluent
public final class K8SSecurity implements JsonSerializable<K8SSecurity> {
    /*
     * Admin login secret key
     */
    private String adminLoginSecret;

    /*
     * Service certificate secret used
     */
    private String serviceCertificateSecret;

    /*
     * The kubernetes active directory information.
     */
    private K8SActiveDirectory activeDirectory;

    /*
     * Transparent data encryption information.
     */
    private K8StransparentDataEncryption transparentDataEncryption;

    /*
     * The kubernetes security information.
     */
    private Map<String, Object> additionalProperties;

    /**
     * Creates an instance of K8SSecurity class.
     */
    public K8SSecurity() {
    }

    /**
     * Get the adminLoginSecret property: Admin login secret key.
     * 
     * @return the adminLoginSecret value.
     */
    public String adminLoginSecret() {
        return this.adminLoginSecret;
    }

    /**
     * Set the adminLoginSecret property: Admin login secret key.
     * 
     * @param adminLoginSecret the adminLoginSecret value to set.
     * @return the K8SSecurity object itself.
     */
    public K8SSecurity withAdminLoginSecret(String adminLoginSecret) {
        this.adminLoginSecret = adminLoginSecret;
        return this;
    }

    /**
     * Get the serviceCertificateSecret property: Service certificate secret used.
     * 
     * @return the serviceCertificateSecret value.
     */
    public String serviceCertificateSecret() {
        return this.serviceCertificateSecret;
    }

    /**
     * Set the serviceCertificateSecret property: Service certificate secret used.
     * 
     * @param serviceCertificateSecret the serviceCertificateSecret value to set.
     * @return the K8SSecurity object itself.
     */
    public K8SSecurity withServiceCertificateSecret(String serviceCertificateSecret) {
        this.serviceCertificateSecret = serviceCertificateSecret;
        return this;
    }

    /**
     * Get the activeDirectory property: The kubernetes active directory information.
     * 
     * @return the activeDirectory value.
     */
    public K8SActiveDirectory activeDirectory() {
        return this.activeDirectory;
    }

    /**
     * Set the activeDirectory property: The kubernetes active directory information.
     * 
     * @param activeDirectory the activeDirectory value to set.
     * @return the K8SSecurity object itself.
     */
    public K8SSecurity withActiveDirectory(K8SActiveDirectory activeDirectory) {
        this.activeDirectory = activeDirectory;
        return this;
    }

    /**
     * Get the transparentDataEncryption property: Transparent data encryption information.
     * 
     * @return the transparentDataEncryption value.
     */
    public K8StransparentDataEncryption transparentDataEncryption() {
        return this.transparentDataEncryption;
    }

    /**
     * Set the transparentDataEncryption property: Transparent data encryption information.
     * 
     * @param transparentDataEncryption the transparentDataEncryption value to set.
     * @return the K8SSecurity object itself.
     */
    public K8SSecurity withTransparentDataEncryption(K8StransparentDataEncryption transparentDataEncryption) {
        this.transparentDataEncryption = transparentDataEncryption;
        return this;
    }

    /**
     * Get the additionalProperties property: The kubernetes security information.
     * 
     * @return the additionalProperties value.
     */
    public Map<String, Object> additionalProperties() {
        return this.additionalProperties;
    }

    /**
     * Set the additionalProperties property: The kubernetes security information.
     * 
     * @param additionalProperties the additionalProperties value to set.
     * @return the K8SSecurity object itself.
     */
    public K8SSecurity withAdditionalProperties(Map<String, Object> additionalProperties) {
        this.additionalProperties = additionalProperties;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (activeDirectory() != null) {
            activeDirectory().validate();
        }
        if (transparentDataEncryption() != null) {
            transparentDataEncryption().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("adminLoginSecret", this.adminLoginSecret);
        jsonWriter.writeStringField("serviceCertificateSecret", this.serviceCertificateSecret);
        jsonWriter.writeJsonField("activeDirectory", this.activeDirectory);
        jsonWriter.writeJsonField("transparentDataEncryption", this.transparentDataEncryption);
        if (additionalProperties != null) {
            for (Map.Entry<String, Object> additionalProperty : additionalProperties.entrySet()) {
                jsonWriter.writeUntypedField(additionalProperty.getKey(), additionalProperty.getValue());
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of K8SSecurity from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of K8SSecurity if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the K8SSecurity.
     */
    public static K8SSecurity fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            K8SSecurity deserializedK8SSecurity = new K8SSecurity();
            Map<String, Object> additionalProperties = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("adminLoginSecret".equals(fieldName)) {
                    deserializedK8SSecurity.adminLoginSecret = reader.getString();
                } else if ("serviceCertificateSecret".equals(fieldName)) {
                    deserializedK8SSecurity.serviceCertificateSecret = reader.getString();
                } else if ("activeDirectory".equals(fieldName)) {
                    deserializedK8SSecurity.activeDirectory = K8SActiveDirectory.fromJson(reader);
                } else if ("transparentDataEncryption".equals(fieldName)) {
                    deserializedK8SSecurity.transparentDataEncryption = K8StransparentDataEncryption.fromJson(reader);
                } else {
                    if (additionalProperties == null) {
                        additionalProperties = new LinkedHashMap<>();
                    }

                    additionalProperties.put(fieldName, reader.readUntyped());
                }
            }
            deserializedK8SSecurity.additionalProperties = additionalProperties;

            return deserializedK8SSecurity;
        });
    }
}
