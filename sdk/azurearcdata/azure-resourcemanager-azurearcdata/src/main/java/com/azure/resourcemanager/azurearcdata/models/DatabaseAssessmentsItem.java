// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurearcdata.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The DatabaseAssessmentsItem model.
 */
@Fluent
public final class DatabaseAssessmentsItem implements JsonSerializable<DatabaseAssessmentsItem> {
    /*
     * The appliesToMigrationTargetPlatform property.
     */
    private String appliesToMigrationTargetPlatform;

    /*
     * The featureId property.
     */
    private String featureId;

    /*
     * The issueCategory property.
     */
    private String issueCategory;

    /*
     * The moreInformation property.
     */
    private String moreInformation;

    /**
     * Creates an instance of DatabaseAssessmentsItem class.
     */
    public DatabaseAssessmentsItem() {
    }

    /**
     * Get the appliesToMigrationTargetPlatform property: The appliesToMigrationTargetPlatform property.
     * 
     * @return the appliesToMigrationTargetPlatform value.
     */
    public String appliesToMigrationTargetPlatform() {
        return this.appliesToMigrationTargetPlatform;
    }

    /**
     * Set the appliesToMigrationTargetPlatform property: The appliesToMigrationTargetPlatform property.
     * 
     * @param appliesToMigrationTargetPlatform the appliesToMigrationTargetPlatform value to set.
     * @return the DatabaseAssessmentsItem object itself.
     */
    public DatabaseAssessmentsItem withAppliesToMigrationTargetPlatform(String appliesToMigrationTargetPlatform) {
        this.appliesToMigrationTargetPlatform = appliesToMigrationTargetPlatform;
        return this;
    }

    /**
     * Get the featureId property: The featureId property.
     * 
     * @return the featureId value.
     */
    public String featureId() {
        return this.featureId;
    }

    /**
     * Set the featureId property: The featureId property.
     * 
     * @param featureId the featureId value to set.
     * @return the DatabaseAssessmentsItem object itself.
     */
    public DatabaseAssessmentsItem withFeatureId(String featureId) {
        this.featureId = featureId;
        return this;
    }

    /**
     * Get the issueCategory property: The issueCategory property.
     * 
     * @return the issueCategory value.
     */
    public String issueCategory() {
        return this.issueCategory;
    }

    /**
     * Set the issueCategory property: The issueCategory property.
     * 
     * @param issueCategory the issueCategory value to set.
     * @return the DatabaseAssessmentsItem object itself.
     */
    public DatabaseAssessmentsItem withIssueCategory(String issueCategory) {
        this.issueCategory = issueCategory;
        return this;
    }

    /**
     * Get the moreInformation property: The moreInformation property.
     * 
     * @return the moreInformation value.
     */
    public String moreInformation() {
        return this.moreInformation;
    }

    /**
     * Set the moreInformation property: The moreInformation property.
     * 
     * @param moreInformation the moreInformation value to set.
     * @return the DatabaseAssessmentsItem object itself.
     */
    public DatabaseAssessmentsItem withMoreInformation(String moreInformation) {
        this.moreInformation = moreInformation;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("appliesToMigrationTargetPlatform", this.appliesToMigrationTargetPlatform);
        jsonWriter.writeStringField("featureId", this.featureId);
        jsonWriter.writeStringField("issueCategory", this.issueCategory);
        jsonWriter.writeStringField("moreInformation", this.moreInformation);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DatabaseAssessmentsItem from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DatabaseAssessmentsItem if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DatabaseAssessmentsItem.
     */
    public static DatabaseAssessmentsItem fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DatabaseAssessmentsItem deserializedDatabaseAssessmentsItem = new DatabaseAssessmentsItem();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("appliesToMigrationTargetPlatform".equals(fieldName)) {
                    deserializedDatabaseAssessmentsItem.appliesToMigrationTargetPlatform = reader.getString();
                } else if ("featureId".equals(fieldName)) {
                    deserializedDatabaseAssessmentsItem.featureId = reader.getString();
                } else if ("issueCategory".equals(fieldName)) {
                    deserializedDatabaseAssessmentsItem.issueCategory = reader.getString();
                } else if ("moreInformation".equals(fieldName)) {
                    deserializedDatabaseAssessmentsItem.moreInformation = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDatabaseAssessmentsItem;
        });
    }
}
