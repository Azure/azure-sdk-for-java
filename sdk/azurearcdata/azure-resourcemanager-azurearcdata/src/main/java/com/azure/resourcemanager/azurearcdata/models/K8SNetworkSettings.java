// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurearcdata.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The kubernetes network settings information.
 */
@Fluent
public final class K8SNetworkSettings implements JsonSerializable<K8SNetworkSettings> {
    /*
     * If 1, then SQL Server forces all connections to be encrypted. By default, this option is 0
     */
    private Integer forceencryption;

    /*
     * Specifies which ciphers are allowed by SQL Server for TLS
     */
    private String tlsciphers;

    /*
     * A comma-separated list of which TLS protocols are allowed by SQL Server
     */
    private String tlsprotocols;

    /**
     * Creates an instance of K8SNetworkSettings class.
     */
    public K8SNetworkSettings() {
    }

    /**
     * Get the forceencryption property: If 1, then SQL Server forces all connections to be encrypted. By default, this
     * option is 0.
     * 
     * @return the forceencryption value.
     */
    public Integer forceencryption() {
        return this.forceencryption;
    }

    /**
     * Set the forceencryption property: If 1, then SQL Server forces all connections to be encrypted. By default, this
     * option is 0.
     * 
     * @param forceencryption the forceencryption value to set.
     * @return the K8SNetworkSettings object itself.
     */
    public K8SNetworkSettings withForceencryption(Integer forceencryption) {
        this.forceencryption = forceencryption;
        return this;
    }

    /**
     * Get the tlsciphers property: Specifies which ciphers are allowed by SQL Server for TLS.
     * 
     * @return the tlsciphers value.
     */
    public String tlsciphers() {
        return this.tlsciphers;
    }

    /**
     * Set the tlsciphers property: Specifies which ciphers are allowed by SQL Server for TLS.
     * 
     * @param tlsciphers the tlsciphers value to set.
     * @return the K8SNetworkSettings object itself.
     */
    public K8SNetworkSettings withTlsciphers(String tlsciphers) {
        this.tlsciphers = tlsciphers;
        return this;
    }

    /**
     * Get the tlsprotocols property: A comma-separated list of which TLS protocols are allowed by SQL Server.
     * 
     * @return the tlsprotocols value.
     */
    public String tlsprotocols() {
        return this.tlsprotocols;
    }

    /**
     * Set the tlsprotocols property: A comma-separated list of which TLS protocols are allowed by SQL Server.
     * 
     * @param tlsprotocols the tlsprotocols value to set.
     * @return the K8SNetworkSettings object itself.
     */
    public K8SNetworkSettings withTlsprotocols(String tlsprotocols) {
        this.tlsprotocols = tlsprotocols;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("forceencryption", this.forceencryption);
        jsonWriter.writeStringField("tlsciphers", this.tlsciphers);
        jsonWriter.writeStringField("tlsprotocols", this.tlsprotocols);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of K8SNetworkSettings from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of K8SNetworkSettings if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the K8SNetworkSettings.
     */
    public static K8SNetworkSettings fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            K8SNetworkSettings deserializedK8SNetworkSettings = new K8SNetworkSettings();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("forceencryption".equals(fieldName)) {
                    deserializedK8SNetworkSettings.forceencryption = reader.getNullable(JsonReader::getInt);
                } else if ("tlsciphers".equals(fieldName)) {
                    deserializedK8SNetworkSettings.tlsciphers = reader.getString();
                } else if ("tlsprotocols".equals(fieldName)) {
                    deserializedK8SNetworkSettings.tlsprotocols = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedK8SNetworkSettings;
        });
    }
}
