// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurearcdata.implementation;

import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.azurearcdata.fluent.models.SqlManagedInstanceInner;
import com.azure.resourcemanager.azurearcdata.models.ExtendedLocation;
import com.azure.resourcemanager.azurearcdata.models.SqlManagedInstance;
import com.azure.resourcemanager.azurearcdata.models.SqlManagedInstanceProperties;
import com.azure.resourcemanager.azurearcdata.models.SqlManagedInstanceSku;
import com.azure.resourcemanager.azurearcdata.models.SqlManagedInstanceUpdate;
import java.util.Collections;
import java.util.Map;

public final class SqlManagedInstanceImpl
    implements SqlManagedInstance, SqlManagedInstance.Definition, SqlManagedInstance.Update {
    private SqlManagedInstanceInner innerObject;

    private final com.azure.resourcemanager.azurearcdata.AzureArcDataManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public SqlManagedInstanceProperties properties() {
        return this.innerModel().properties();
    }

    public ExtendedLocation extendedLocation() {
        return this.innerModel().extendedLocation();
    }

    public SqlManagedInstanceSku sku() {
        return this.innerModel().sku();
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public SqlManagedInstanceInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.azurearcdata.AzureArcDataManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String sqlManagedInstanceName;

    private SqlManagedInstanceUpdate updateParameters;

    public SqlManagedInstanceImpl withExistingResourceGroup(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public SqlManagedInstance create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getSqlManagedInstances()
                .create(resourceGroupName, sqlManagedInstanceName, this.innerModel(), Context.NONE);
        return this;
    }

    public SqlManagedInstance create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getSqlManagedInstances()
                .create(resourceGroupName, sqlManagedInstanceName, this.innerModel(), context);
        return this;
    }

    SqlManagedInstanceImpl(String name, com.azure.resourcemanager.azurearcdata.AzureArcDataManager serviceManager) {
        this.innerObject = new SqlManagedInstanceInner();
        this.serviceManager = serviceManager;
        this.sqlManagedInstanceName = name;
    }

    public SqlManagedInstanceImpl update() {
        this.updateParameters = new SqlManagedInstanceUpdate();
        return this;
    }

    public SqlManagedInstance apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getSqlManagedInstances()
                .updateWithResponse(resourceGroupName, sqlManagedInstanceName, updateParameters, Context.NONE)
                .getValue();
        return this;
    }

    public SqlManagedInstance apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getSqlManagedInstances()
                .updateWithResponse(resourceGroupName, sqlManagedInstanceName, updateParameters, context)
                .getValue();
        return this;
    }

    SqlManagedInstanceImpl(
        SqlManagedInstanceInner innerObject,
        com.azure.resourcemanager.azurearcdata.AzureArcDataManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.sqlManagedInstanceName = Utils.getValueFromIdByName(innerObject.id(), "sqlManagedInstances");
    }

    public SqlManagedInstance refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getSqlManagedInstances()
                .getByResourceGroupWithResponse(resourceGroupName, sqlManagedInstanceName, Context.NONE)
                .getValue();
        return this;
    }

    public SqlManagedInstance refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getSqlManagedInstances()
                .getByResourceGroupWithResponse(resourceGroupName, sqlManagedInstanceName, context)
                .getValue();
        return this;
    }

    public SqlManagedInstanceImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public SqlManagedInstanceImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public SqlManagedInstanceImpl withProperties(SqlManagedInstanceProperties properties) {
        this.innerModel().withProperties(properties);
        return this;
    }

    public SqlManagedInstanceImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateParameters.withTags(tags);
            return this;
        }
    }

    public SqlManagedInstanceImpl withExtendedLocation(ExtendedLocation extendedLocation) {
        this.innerModel().withExtendedLocation(extendedLocation);
        return this;
    }

    public SqlManagedInstanceImpl withSku(SqlManagedInstanceSku sku) {
        this.innerModel().withSku(sku);
        return this;
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
