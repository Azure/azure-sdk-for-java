// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurearcdata.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Postgres Instance properties.
 */
@Fluent
public final class PostgresInstanceProperties implements JsonSerializable<PostgresInstanceProperties> {
    /*
     * The data controller id
     */
    private String dataControllerId;

    /*
     * The instance admin
     */
    private String admin;

    /*
     * Username and password for basic authentication.
     */
    private BasicLoginInformation basicLoginInformation;

    /*
     * The raw kubernetes information
     */
    private Object k8SRaw;

    /*
     * Last uploaded date from Kubernetes cluster. Defaults to current date time
     */
    private OffsetDateTime lastUploadedDate;

    /*
     * The provisioning state of the Azure Arc-enabled PostgreSQL instance.
     */
    private String provisioningState;

    /**
     * Creates an instance of PostgresInstanceProperties class.
     */
    public PostgresInstanceProperties() {
    }

    /**
     * Get the dataControllerId property: The data controller id.
     * 
     * @return the dataControllerId value.
     */
    public String dataControllerId() {
        return this.dataControllerId;
    }

    /**
     * Set the dataControllerId property: The data controller id.
     * 
     * @param dataControllerId the dataControllerId value to set.
     * @return the PostgresInstanceProperties object itself.
     */
    public PostgresInstanceProperties withDataControllerId(String dataControllerId) {
        this.dataControllerId = dataControllerId;
        return this;
    }

    /**
     * Get the admin property: The instance admin.
     * 
     * @return the admin value.
     */
    public String admin() {
        return this.admin;
    }

    /**
     * Set the admin property: The instance admin.
     * 
     * @param admin the admin value to set.
     * @return the PostgresInstanceProperties object itself.
     */
    public PostgresInstanceProperties withAdmin(String admin) {
        this.admin = admin;
        return this;
    }

    /**
     * Get the basicLoginInformation property: Username and password for basic authentication.
     * 
     * @return the basicLoginInformation value.
     */
    public BasicLoginInformation basicLoginInformation() {
        return this.basicLoginInformation;
    }

    /**
     * Set the basicLoginInformation property: Username and password for basic authentication.
     * 
     * @param basicLoginInformation the basicLoginInformation value to set.
     * @return the PostgresInstanceProperties object itself.
     */
    public PostgresInstanceProperties withBasicLoginInformation(BasicLoginInformation basicLoginInformation) {
        this.basicLoginInformation = basicLoginInformation;
        return this;
    }

    /**
     * Get the k8SRaw property: The raw kubernetes information.
     * 
     * @return the k8SRaw value.
     */
    public Object k8SRaw() {
        return this.k8SRaw;
    }

    /**
     * Set the k8SRaw property: The raw kubernetes information.
     * 
     * @param k8SRaw the k8SRaw value to set.
     * @return the PostgresInstanceProperties object itself.
     */
    public PostgresInstanceProperties withK8SRaw(Object k8SRaw) {
        this.k8SRaw = k8SRaw;
        return this;
    }

    /**
     * Get the lastUploadedDate property: Last uploaded date from Kubernetes cluster. Defaults to current date time.
     * 
     * @return the lastUploadedDate value.
     */
    public OffsetDateTime lastUploadedDate() {
        return this.lastUploadedDate;
    }

    /**
     * Set the lastUploadedDate property: Last uploaded date from Kubernetes cluster. Defaults to current date time.
     * 
     * @param lastUploadedDate the lastUploadedDate value to set.
     * @return the PostgresInstanceProperties object itself.
     */
    public PostgresInstanceProperties withLastUploadedDate(OffsetDateTime lastUploadedDate) {
        this.lastUploadedDate = lastUploadedDate;
        return this;
    }

    /**
     * Get the provisioningState property: The provisioning state of the Azure Arc-enabled PostgreSQL instance.
     * 
     * @return the provisioningState value.
     */
    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (basicLoginInformation() != null) {
            basicLoginInformation().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("dataControllerId", this.dataControllerId);
        jsonWriter.writeStringField("admin", this.admin);
        jsonWriter.writeJsonField("basicLoginInformation", this.basicLoginInformation);
        if (this.k8SRaw != null) {
            jsonWriter.writeUntypedField("k8sRaw", this.k8SRaw);
        }
        jsonWriter.writeStringField("lastUploadedDate",
            this.lastUploadedDate == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.lastUploadedDate));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PostgresInstanceProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PostgresInstanceProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the PostgresInstanceProperties.
     */
    public static PostgresInstanceProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PostgresInstanceProperties deserializedPostgresInstanceProperties = new PostgresInstanceProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("dataControllerId".equals(fieldName)) {
                    deserializedPostgresInstanceProperties.dataControllerId = reader.getString();
                } else if ("admin".equals(fieldName)) {
                    deserializedPostgresInstanceProperties.admin = reader.getString();
                } else if ("basicLoginInformation".equals(fieldName)) {
                    deserializedPostgresInstanceProperties.basicLoginInformation
                        = BasicLoginInformation.fromJson(reader);
                } else if ("k8sRaw".equals(fieldName)) {
                    deserializedPostgresInstanceProperties.k8SRaw = reader.readUntyped();
                } else if ("lastUploadedDate".equals(fieldName)) {
                    deserializedPostgresInstanceProperties.lastUploadedDate = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedPostgresInstanceProperties.provisioningState = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPostgresInstanceProperties;
        });
    }
}
