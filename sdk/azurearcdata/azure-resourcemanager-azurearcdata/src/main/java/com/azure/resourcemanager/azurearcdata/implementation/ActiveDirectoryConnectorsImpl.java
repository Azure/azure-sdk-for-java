// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurearcdata.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.azurearcdata.fluent.ActiveDirectoryConnectorsClient;
import com.azure.resourcemanager.azurearcdata.fluent.models.ActiveDirectoryConnectorResourceInner;
import com.azure.resourcemanager.azurearcdata.models.ActiveDirectoryConnectorResource;
import com.azure.resourcemanager.azurearcdata.models.ActiveDirectoryConnectors;

public final class ActiveDirectoryConnectorsImpl implements ActiveDirectoryConnectors {
    private static final ClientLogger LOGGER = new ClientLogger(ActiveDirectoryConnectorsImpl.class);

    private final ActiveDirectoryConnectorsClient innerClient;

    private final com.azure.resourcemanager.azurearcdata.AzureArcDataManager serviceManager;

    public ActiveDirectoryConnectorsImpl(
        ActiveDirectoryConnectorsClient innerClient,
        com.azure.resourcemanager.azurearcdata.AzureArcDataManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<ActiveDirectoryConnectorResource> list(String resourceGroupName, String dataControllerName) {
        PagedIterable<ActiveDirectoryConnectorResourceInner> inner =
            this.serviceClient().list(resourceGroupName, dataControllerName);
        return Utils.mapPage(inner, inner1 -> new ActiveDirectoryConnectorResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<ActiveDirectoryConnectorResource> list(
        String resourceGroupName, String dataControllerName, Context context) {
        PagedIterable<ActiveDirectoryConnectorResourceInner> inner =
            this.serviceClient().list(resourceGroupName, dataControllerName, context);
        return Utils.mapPage(inner, inner1 -> new ActiveDirectoryConnectorResourceImpl(inner1, this.manager()));
    }

    public void delete(String resourceGroupName, String dataControllerName, String activeDirectoryConnectorName) {
        this.serviceClient().delete(resourceGroupName, dataControllerName, activeDirectoryConnectorName);
    }

    public void delete(
        String resourceGroupName, String dataControllerName, String activeDirectoryConnectorName, Context context) {
        this.serviceClient().delete(resourceGroupName, dataControllerName, activeDirectoryConnectorName, context);
    }

    public ActiveDirectoryConnectorResource get(
        String resourceGroupName, String dataControllerName, String activeDirectoryConnectorName) {
        ActiveDirectoryConnectorResourceInner inner =
            this.serviceClient().get(resourceGroupName, dataControllerName, activeDirectoryConnectorName);
        if (inner != null) {
            return new ActiveDirectoryConnectorResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ActiveDirectoryConnectorResource> getWithResponse(
        String resourceGroupName, String dataControllerName, String activeDirectoryConnectorName, Context context) {
        Response<ActiveDirectoryConnectorResourceInner> inner =
            this
                .serviceClient()
                .getWithResponse(resourceGroupName, dataControllerName, activeDirectoryConnectorName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ActiveDirectoryConnectorResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ActiveDirectoryConnectorResource getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String dataControllerName = Utils.getValueFromIdByName(id, "dataControllers");
        if (dataControllerName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'dataControllers'.", id)));
        }
        String activeDirectoryConnectorName = Utils.getValueFromIdByName(id, "activeDirectoryConnectors");
        if (activeDirectoryConnectorName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'activeDirectoryConnectors'.",
                                id)));
        }
        return this
            .getWithResponse(resourceGroupName, dataControllerName, activeDirectoryConnectorName, Context.NONE)
            .getValue();
    }

    public Response<ActiveDirectoryConnectorResource> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String dataControllerName = Utils.getValueFromIdByName(id, "dataControllers");
        if (dataControllerName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'dataControllers'.", id)));
        }
        String activeDirectoryConnectorName = Utils.getValueFromIdByName(id, "activeDirectoryConnectors");
        if (activeDirectoryConnectorName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'activeDirectoryConnectors'.",
                                id)));
        }
        return this.getWithResponse(resourceGroupName, dataControllerName, activeDirectoryConnectorName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String dataControllerName = Utils.getValueFromIdByName(id, "dataControllers");
        if (dataControllerName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'dataControllers'.", id)));
        }
        String activeDirectoryConnectorName = Utils.getValueFromIdByName(id, "activeDirectoryConnectors");
        if (activeDirectoryConnectorName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'activeDirectoryConnectors'.",
                                id)));
        }
        this.delete(resourceGroupName, dataControllerName, activeDirectoryConnectorName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String dataControllerName = Utils.getValueFromIdByName(id, "dataControllers");
        if (dataControllerName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'dataControllers'.", id)));
        }
        String activeDirectoryConnectorName = Utils.getValueFromIdByName(id, "activeDirectoryConnectors");
        if (activeDirectoryConnectorName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'activeDirectoryConnectors'.",
                                id)));
        }
        this.delete(resourceGroupName, dataControllerName, activeDirectoryConnectorName, context);
    }

    private ActiveDirectoryConnectorsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.azurearcdata.AzureArcDataManager manager() {
        return this.serviceManager;
    }

    public ActiveDirectoryConnectorResourceImpl define(String name) {
        return new ActiveDirectoryConnectorResourceImpl(name, this.manager());
    }
}
