// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurearcdata.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.List;

/**
 * The migration assessment related configuration.
 */
@Fluent
public final class MigrationAssessment implements JsonSerializable<MigrationAssessment> {
    /*
     * Indicates if migration assessment is enabled for this SQL Server instance.
     */
    private Boolean enabled;

    /*
     * The time when Migration Assessment Report upload was last performed.
     */
    private OffsetDateTime assessmentUploadTime;

    /*
     * Issues and warnings impacting the migration of SQL Server instance to particular Azure Migration Target.
     */
    private List<ServerAssessmentsItem> serverAssessments;

    /*
     * SKU Recommendation results for Azure migration targets for SQL Server.
     */
    private SkuRecommendationResults skuRecommendationResults;

    /**
     * Creates an instance of MigrationAssessment class.
     */
    public MigrationAssessment() {
    }

    /**
     * Get the enabled property: Indicates if migration assessment is enabled for this SQL Server instance.
     * 
     * @return the enabled value.
     */
    public Boolean enabled() {
        return this.enabled;
    }

    /**
     * Set the enabled property: Indicates if migration assessment is enabled for this SQL Server instance.
     * 
     * @param enabled the enabled value to set.
     * @return the MigrationAssessment object itself.
     */
    public MigrationAssessment withEnabled(Boolean enabled) {
        this.enabled = enabled;
        return this;
    }

    /**
     * Get the assessmentUploadTime property: The time when Migration Assessment Report upload was last performed.
     * 
     * @return the assessmentUploadTime value.
     */
    public OffsetDateTime assessmentUploadTime() {
        return this.assessmentUploadTime;
    }

    /**
     * Get the serverAssessments property: Issues and warnings impacting the migration of SQL Server instance to
     * particular Azure Migration Target.
     * 
     * @return the serverAssessments value.
     */
    public List<ServerAssessmentsItem> serverAssessments() {
        return this.serverAssessments;
    }

    /**
     * Get the skuRecommendationResults property: SKU Recommendation results for Azure migration targets for SQL Server.
     * 
     * @return the skuRecommendationResults value.
     */
    public SkuRecommendationResults skuRecommendationResults() {
        return this.skuRecommendationResults;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (serverAssessments() != null) {
            serverAssessments().forEach(e -> e.validate());
        }
        if (skuRecommendationResults() != null) {
            skuRecommendationResults().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("enabled", this.enabled);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MigrationAssessment from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MigrationAssessment if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the MigrationAssessment.
     */
    public static MigrationAssessment fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MigrationAssessment deserializedMigrationAssessment = new MigrationAssessment();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("enabled".equals(fieldName)) {
                    deserializedMigrationAssessment.enabled = reader.getNullable(JsonReader::getBoolean);
                } else if ("assessmentUploadTime".equals(fieldName)) {
                    deserializedMigrationAssessment.assessmentUploadTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("serverAssessments".equals(fieldName)) {
                    List<ServerAssessmentsItem> serverAssessments
                        = reader.readArray(reader1 -> ServerAssessmentsItem.fromJson(reader1));
                    deserializedMigrationAssessment.serverAssessments = serverAssessments;
                } else if ("skuRecommendationResults".equals(fieldName)) {
                    deserializedMigrationAssessment.skuRecommendationResults
                        = SkuRecommendationResults.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMigrationAssessment;
        });
    }
}
