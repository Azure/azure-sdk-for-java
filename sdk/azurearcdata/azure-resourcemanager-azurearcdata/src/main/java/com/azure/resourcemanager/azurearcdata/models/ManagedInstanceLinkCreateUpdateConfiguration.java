// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurearcdata.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The configuration for the new Managed Instance Link resource.
 */
@Fluent
public final class ManagedInstanceLinkCreateUpdateConfiguration
    implements JsonSerializable<ManagedInstanceLinkCreateUpdateConfiguration> {
    /*
     * The configuration for the SQL Server availability group resource.
     */
    private AvailabilityGroupCreateUpdateConfiguration availabilityGroup;

    /*
     * The distributed availability group configuration for the MI link.
     */
    private DistributedAvailabilityGroupCreateUpdateConfiguration distributedAvailabilityGroup;

    /*
     * The MI Link specific distributed availability group configuration.
     */
    private MiLinkCreateUpdateConfiguration miLinkConfiguration;

    /**
     * Creates an instance of ManagedInstanceLinkCreateUpdateConfiguration class.
     */
    public ManagedInstanceLinkCreateUpdateConfiguration() {
    }

    /**
     * Get the availabilityGroup property: The configuration for the SQL Server availability group resource.
     * 
     * @return the availabilityGroup value.
     */
    public AvailabilityGroupCreateUpdateConfiguration availabilityGroup() {
        return this.availabilityGroup;
    }

    /**
     * Set the availabilityGroup property: The configuration for the SQL Server availability group resource.
     * 
     * @param availabilityGroup the availabilityGroup value to set.
     * @return the ManagedInstanceLinkCreateUpdateConfiguration object itself.
     */
    public ManagedInstanceLinkCreateUpdateConfiguration
        withAvailabilityGroup(AvailabilityGroupCreateUpdateConfiguration availabilityGroup) {
        this.availabilityGroup = availabilityGroup;
        return this;
    }

    /**
     * Get the distributedAvailabilityGroup property: The distributed availability group configuration for the MI link.
     * 
     * @return the distributedAvailabilityGroup value.
     */
    public DistributedAvailabilityGroupCreateUpdateConfiguration distributedAvailabilityGroup() {
        return this.distributedAvailabilityGroup;
    }

    /**
     * Set the distributedAvailabilityGroup property: The distributed availability group configuration for the MI link.
     * 
     * @param distributedAvailabilityGroup the distributedAvailabilityGroup value to set.
     * @return the ManagedInstanceLinkCreateUpdateConfiguration object itself.
     */
    public ManagedInstanceLinkCreateUpdateConfiguration withDistributedAvailabilityGroup(
        DistributedAvailabilityGroupCreateUpdateConfiguration distributedAvailabilityGroup) {
        this.distributedAvailabilityGroup = distributedAvailabilityGroup;
        return this;
    }

    /**
     * Get the miLinkConfiguration property: The MI Link specific distributed availability group configuration.
     * 
     * @return the miLinkConfiguration value.
     */
    public MiLinkCreateUpdateConfiguration miLinkConfiguration() {
        return this.miLinkConfiguration;
    }

    /**
     * Set the miLinkConfiguration property: The MI Link specific distributed availability group configuration.
     * 
     * @param miLinkConfiguration the miLinkConfiguration value to set.
     * @return the ManagedInstanceLinkCreateUpdateConfiguration object itself.
     */
    public ManagedInstanceLinkCreateUpdateConfiguration
        withMiLinkConfiguration(MiLinkCreateUpdateConfiguration miLinkConfiguration) {
        this.miLinkConfiguration = miLinkConfiguration;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (availabilityGroup() != null) {
            availabilityGroup().validate();
        }
        if (distributedAvailabilityGroup() != null) {
            distributedAvailabilityGroup().validate();
        }
        if (miLinkConfiguration() != null) {
            miLinkConfiguration().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("availabilityGroup", this.availabilityGroup);
        jsonWriter.writeJsonField("distributedAvailabilityGroup", this.distributedAvailabilityGroup);
        jsonWriter.writeJsonField("miLinkConfiguration", this.miLinkConfiguration);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ManagedInstanceLinkCreateUpdateConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ManagedInstanceLinkCreateUpdateConfiguration if the JsonReader was pointing to an instance
     * of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ManagedInstanceLinkCreateUpdateConfiguration.
     */
    public static ManagedInstanceLinkCreateUpdateConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ManagedInstanceLinkCreateUpdateConfiguration deserializedManagedInstanceLinkCreateUpdateConfiguration
                = new ManagedInstanceLinkCreateUpdateConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("availabilityGroup".equals(fieldName)) {
                    deserializedManagedInstanceLinkCreateUpdateConfiguration.availabilityGroup
                        = AvailabilityGroupCreateUpdateConfiguration.fromJson(reader);
                } else if ("distributedAvailabilityGroup".equals(fieldName)) {
                    deserializedManagedInstanceLinkCreateUpdateConfiguration.distributedAvailabilityGroup
                        = DistributedAvailabilityGroupCreateUpdateConfiguration.fromJson(reader);
                } else if ("miLinkConfiguration".equals(fieldName)) {
                    deserializedManagedInstanceLinkCreateUpdateConfiguration.miLinkConfiguration
                        = MiLinkCreateUpdateConfiguration.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedManagedInstanceLinkCreateUpdateConfiguration;
        });
    }
}
