// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurearcdata.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Properties of SqlServerInstance.
 */
@Fluent
public final class SqlServerInstanceProperties implements JsonSerializable<SqlServerInstanceProperties> {
    /*
     * SQL Server version.
     */
    private SqlVersion version;

    /*
     * SQL Server edition.
     */
    private EditionType edition;

    /*
     * ARM Resource id of the container resource (Azure Arc for Servers).
     */
    private String containerResourceId;

    /*
     * The time when the resource was created.
     */
    private String createTime;

    /*
     * The number of logical processors used by the SQL Server instance.
     */
    private String vCore;

    /*
     * The cloud connectivity status.
     */
    private ConnectionStatus status;

    /*
     * SQL Server update level.
     */
    private String patchLevel;

    /*
     * SQL Server collation.
     */
    private String collation;

    /*
     * SQL Server current version.
     */
    private String currentVersion;

    /*
     * SQL Server instance name.
     */
    private String instanceName;

    /*
     * Dynamic TCP ports used by SQL Server.
     */
    private String tcpDynamicPorts;

    /*
     * Static TCP ports used by SQL Server.
     */
    private String tcpStaticPorts;

    /*
     * SQL Server product ID.
     */
    private String productId;

    /*
     * SQL Server license type.
     */
    private ArcSqlServerLicenseType licenseType;

    /*
     * Timestamp of last Azure Defender status update.
     */
    private OffsetDateTime azureDefenderStatusLastUpdated;

    /*
     * Status of Azure Defender.
     */
    private DefenderStatus azureDefenderStatus;

    /*
     * The provisioningState property.
     */
    private String provisioningState;

    /**
     * Creates an instance of SqlServerInstanceProperties class.
     */
    public SqlServerInstanceProperties() {
    }

    /**
     * Get the version property: SQL Server version.
     * 
     * @return the version value.
     */
    public SqlVersion version() {
        return this.version;
    }

    /**
     * Set the version property: SQL Server version.
     * 
     * @param version the version value to set.
     * @return the SqlServerInstanceProperties object itself.
     */
    public SqlServerInstanceProperties withVersion(SqlVersion version) {
        this.version = version;
        return this;
    }

    /**
     * Get the edition property: SQL Server edition.
     * 
     * @return the edition value.
     */
    public EditionType edition() {
        return this.edition;
    }

    /**
     * Set the edition property: SQL Server edition.
     * 
     * @param edition the edition value to set.
     * @return the SqlServerInstanceProperties object itself.
     */
    public SqlServerInstanceProperties withEdition(EditionType edition) {
        this.edition = edition;
        return this;
    }

    /**
     * Get the containerResourceId property: ARM Resource id of the container resource (Azure Arc for Servers).
     * 
     * @return the containerResourceId value.
     */
    public String containerResourceId() {
        return this.containerResourceId;
    }

    /**
     * Set the containerResourceId property: ARM Resource id of the container resource (Azure Arc for Servers).
     * 
     * @param containerResourceId the containerResourceId value to set.
     * @return the SqlServerInstanceProperties object itself.
     */
    public SqlServerInstanceProperties withContainerResourceId(String containerResourceId) {
        this.containerResourceId = containerResourceId;
        return this;
    }

    /**
     * Get the createTime property: The time when the resource was created.
     * 
     * @return the createTime value.
     */
    public String createTime() {
        return this.createTime;
    }

    /**
     * Get the vCore property: The number of logical processors used by the SQL Server instance.
     * 
     * @return the vCore value.
     */
    public String vCore() {
        return this.vCore;
    }

    /**
     * Set the vCore property: The number of logical processors used by the SQL Server instance.
     * 
     * @param vCore the vCore value to set.
     * @return the SqlServerInstanceProperties object itself.
     */
    public SqlServerInstanceProperties withVCore(String vCore) {
        this.vCore = vCore;
        return this;
    }

    /**
     * Get the status property: The cloud connectivity status.
     * 
     * @return the status value.
     */
    public ConnectionStatus status() {
        return this.status;
    }

    /**
     * Set the status property: The cloud connectivity status.
     * 
     * @param status the status value to set.
     * @return the SqlServerInstanceProperties object itself.
     */
    public SqlServerInstanceProperties withStatus(ConnectionStatus status) {
        this.status = status;
        return this;
    }

    /**
     * Get the patchLevel property: SQL Server update level.
     * 
     * @return the patchLevel value.
     */
    public String patchLevel() {
        return this.patchLevel;
    }

    /**
     * Set the patchLevel property: SQL Server update level.
     * 
     * @param patchLevel the patchLevel value to set.
     * @return the SqlServerInstanceProperties object itself.
     */
    public SqlServerInstanceProperties withPatchLevel(String patchLevel) {
        this.patchLevel = patchLevel;
        return this;
    }

    /**
     * Get the collation property: SQL Server collation.
     * 
     * @return the collation value.
     */
    public String collation() {
        return this.collation;
    }

    /**
     * Set the collation property: SQL Server collation.
     * 
     * @param collation the collation value to set.
     * @return the SqlServerInstanceProperties object itself.
     */
    public SqlServerInstanceProperties withCollation(String collation) {
        this.collation = collation;
        return this;
    }

    /**
     * Get the currentVersion property: SQL Server current version.
     * 
     * @return the currentVersion value.
     */
    public String currentVersion() {
        return this.currentVersion;
    }

    /**
     * Set the currentVersion property: SQL Server current version.
     * 
     * @param currentVersion the currentVersion value to set.
     * @return the SqlServerInstanceProperties object itself.
     */
    public SqlServerInstanceProperties withCurrentVersion(String currentVersion) {
        this.currentVersion = currentVersion;
        return this;
    }

    /**
     * Get the instanceName property: SQL Server instance name.
     * 
     * @return the instanceName value.
     */
    public String instanceName() {
        return this.instanceName;
    }

    /**
     * Set the instanceName property: SQL Server instance name.
     * 
     * @param instanceName the instanceName value to set.
     * @return the SqlServerInstanceProperties object itself.
     */
    public SqlServerInstanceProperties withInstanceName(String instanceName) {
        this.instanceName = instanceName;
        return this;
    }

    /**
     * Get the tcpDynamicPorts property: Dynamic TCP ports used by SQL Server.
     * 
     * @return the tcpDynamicPorts value.
     */
    public String tcpDynamicPorts() {
        return this.tcpDynamicPorts;
    }

    /**
     * Set the tcpDynamicPorts property: Dynamic TCP ports used by SQL Server.
     * 
     * @param tcpDynamicPorts the tcpDynamicPorts value to set.
     * @return the SqlServerInstanceProperties object itself.
     */
    public SqlServerInstanceProperties withTcpDynamicPorts(String tcpDynamicPorts) {
        this.tcpDynamicPorts = tcpDynamicPorts;
        return this;
    }

    /**
     * Get the tcpStaticPorts property: Static TCP ports used by SQL Server.
     * 
     * @return the tcpStaticPorts value.
     */
    public String tcpStaticPorts() {
        return this.tcpStaticPorts;
    }

    /**
     * Set the tcpStaticPorts property: Static TCP ports used by SQL Server.
     * 
     * @param tcpStaticPorts the tcpStaticPorts value to set.
     * @return the SqlServerInstanceProperties object itself.
     */
    public SqlServerInstanceProperties withTcpStaticPorts(String tcpStaticPorts) {
        this.tcpStaticPorts = tcpStaticPorts;
        return this;
    }

    /**
     * Get the productId property: SQL Server product ID.
     * 
     * @return the productId value.
     */
    public String productId() {
        return this.productId;
    }

    /**
     * Set the productId property: SQL Server product ID.
     * 
     * @param productId the productId value to set.
     * @return the SqlServerInstanceProperties object itself.
     */
    public SqlServerInstanceProperties withProductId(String productId) {
        this.productId = productId;
        return this;
    }

    /**
     * Get the licenseType property: SQL Server license type.
     * 
     * @return the licenseType value.
     */
    public ArcSqlServerLicenseType licenseType() {
        return this.licenseType;
    }

    /**
     * Set the licenseType property: SQL Server license type.
     * 
     * @param licenseType the licenseType value to set.
     * @return the SqlServerInstanceProperties object itself.
     */
    public SqlServerInstanceProperties withLicenseType(ArcSqlServerLicenseType licenseType) {
        this.licenseType = licenseType;
        return this;
    }

    /**
     * Get the azureDefenderStatusLastUpdated property: Timestamp of last Azure Defender status update.
     * 
     * @return the azureDefenderStatusLastUpdated value.
     */
    public OffsetDateTime azureDefenderStatusLastUpdated() {
        return this.azureDefenderStatusLastUpdated;
    }

    /**
     * Set the azureDefenderStatusLastUpdated property: Timestamp of last Azure Defender status update.
     * 
     * @param azureDefenderStatusLastUpdated the azureDefenderStatusLastUpdated value to set.
     * @return the SqlServerInstanceProperties object itself.
     */
    public SqlServerInstanceProperties
        withAzureDefenderStatusLastUpdated(OffsetDateTime azureDefenderStatusLastUpdated) {
        this.azureDefenderStatusLastUpdated = azureDefenderStatusLastUpdated;
        return this;
    }

    /**
     * Get the azureDefenderStatus property: Status of Azure Defender.
     * 
     * @return the azureDefenderStatus value.
     */
    public DefenderStatus azureDefenderStatus() {
        return this.azureDefenderStatus;
    }

    /**
     * Set the azureDefenderStatus property: Status of Azure Defender.
     * 
     * @param azureDefenderStatus the azureDefenderStatus value to set.
     * @return the SqlServerInstanceProperties object itself.
     */
    public SqlServerInstanceProperties withAzureDefenderStatus(DefenderStatus azureDefenderStatus) {
        this.azureDefenderStatus = azureDefenderStatus;
        return this;
    }

    /**
     * Get the provisioningState property: The provisioningState property.
     * 
     * @return the provisioningState value.
     */
    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (containerResourceId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property containerResourceId in model SqlServerInstanceProperties"));
        }
        if (status() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property status in model SqlServerInstanceProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(SqlServerInstanceProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("containerResourceId", this.containerResourceId);
        jsonWriter.writeStringField("status", this.status == null ? null : this.status.toString());
        jsonWriter.writeStringField("version", this.version == null ? null : this.version.toString());
        jsonWriter.writeStringField("edition", this.edition == null ? null : this.edition.toString());
        jsonWriter.writeStringField("vCore", this.vCore);
        jsonWriter.writeStringField("patchLevel", this.patchLevel);
        jsonWriter.writeStringField("collation", this.collation);
        jsonWriter.writeStringField("currentVersion", this.currentVersion);
        jsonWriter.writeStringField("instanceName", this.instanceName);
        jsonWriter.writeStringField("tcpDynamicPorts", this.tcpDynamicPorts);
        jsonWriter.writeStringField("tcpStaticPorts", this.tcpStaticPorts);
        jsonWriter.writeStringField("productId", this.productId);
        jsonWriter.writeStringField("licenseType", this.licenseType == null ? null : this.licenseType.toString());
        jsonWriter.writeStringField("azureDefenderStatusLastUpdated",
            this.azureDefenderStatusLastUpdated == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.azureDefenderStatusLastUpdated));
        jsonWriter.writeStringField("azureDefenderStatus",
            this.azureDefenderStatus == null ? null : this.azureDefenderStatus.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SqlServerInstanceProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SqlServerInstanceProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SqlServerInstanceProperties.
     */
    public static SqlServerInstanceProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SqlServerInstanceProperties deserializedSqlServerInstanceProperties = new SqlServerInstanceProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("containerResourceId".equals(fieldName)) {
                    deserializedSqlServerInstanceProperties.containerResourceId = reader.getString();
                } else if ("status".equals(fieldName)) {
                    deserializedSqlServerInstanceProperties.status = ConnectionStatus.fromString(reader.getString());
                } else if ("version".equals(fieldName)) {
                    deserializedSqlServerInstanceProperties.version = SqlVersion.fromString(reader.getString());
                } else if ("edition".equals(fieldName)) {
                    deserializedSqlServerInstanceProperties.edition = EditionType.fromString(reader.getString());
                } else if ("createTime".equals(fieldName)) {
                    deserializedSqlServerInstanceProperties.createTime = reader.getString();
                } else if ("vCore".equals(fieldName)) {
                    deserializedSqlServerInstanceProperties.vCore = reader.getString();
                } else if ("patchLevel".equals(fieldName)) {
                    deserializedSqlServerInstanceProperties.patchLevel = reader.getString();
                } else if ("collation".equals(fieldName)) {
                    deserializedSqlServerInstanceProperties.collation = reader.getString();
                } else if ("currentVersion".equals(fieldName)) {
                    deserializedSqlServerInstanceProperties.currentVersion = reader.getString();
                } else if ("instanceName".equals(fieldName)) {
                    deserializedSqlServerInstanceProperties.instanceName = reader.getString();
                } else if ("tcpDynamicPorts".equals(fieldName)) {
                    deserializedSqlServerInstanceProperties.tcpDynamicPorts = reader.getString();
                } else if ("tcpStaticPorts".equals(fieldName)) {
                    deserializedSqlServerInstanceProperties.tcpStaticPorts = reader.getString();
                } else if ("productId".equals(fieldName)) {
                    deserializedSqlServerInstanceProperties.productId = reader.getString();
                } else if ("licenseType".equals(fieldName)) {
                    deserializedSqlServerInstanceProperties.licenseType
                        = ArcSqlServerLicenseType.fromString(reader.getString());
                } else if ("azureDefenderStatusLastUpdated".equals(fieldName)) {
                    deserializedSqlServerInstanceProperties.azureDefenderStatusLastUpdated = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("azureDefenderStatus".equals(fieldName)) {
                    deserializedSqlServerInstanceProperties.azureDefenderStatus
                        = DefenderStatus.fromString(reader.getString());
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedSqlServerInstanceProperties.provisioningState = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSqlServerInstanceProperties;
        });
    }
}
