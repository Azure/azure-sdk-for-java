// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurearcdata.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Database mirroring endpoint related properties.
 */
@Immutable
public final class DbmEndpoint implements JsonSerializable<DbmEndpoint> {
    /*
     * Name of the database mirroring endpoint.
     */
    private String endpointName;

    /*
     * Mirroring Role
     */
    private Role role;

    /*
     * Is Encryption enabled
     */
    private Boolean isEncryptionEnabled;

    /*
     * Encryption Algorithm
     */
    private EncryptionAlgorithm encryptionAlgorithm;

    /*
     * The type of connection authentication required for connections to this endpoint
     */
    private ConnectionAuth connectionAuth;

    /*
     * The port number that the endpoint is listening on.
     */
    private Integer port;

    /*
     * Is the port number dynamically assigned.
     */
    private Boolean isDynamicPort;

    /*
     * Listener IP address.
     */
    private String ipAddress;

    /*
     * Name of the certificate.
     */
    private String certificateName;

    /**
     * Creates an instance of DbmEndpoint class.
     */
    public DbmEndpoint() {
    }

    /**
     * Get the endpointName property: Name of the database mirroring endpoint.
     * 
     * @return the endpointName value.
     */
    public String endpointName() {
        return this.endpointName;
    }

    /**
     * Get the role property: Mirroring Role.
     * 
     * @return the role value.
     */
    public Role role() {
        return this.role;
    }

    /**
     * Get the isEncryptionEnabled property: Is Encryption enabled.
     * 
     * @return the isEncryptionEnabled value.
     */
    public Boolean isEncryptionEnabled() {
        return this.isEncryptionEnabled;
    }

    /**
     * Get the encryptionAlgorithm property: Encryption Algorithm.
     * 
     * @return the encryptionAlgorithm value.
     */
    public EncryptionAlgorithm encryptionAlgorithm() {
        return this.encryptionAlgorithm;
    }

    /**
     * Get the connectionAuth property: The type of connection authentication required for connections to this endpoint.
     * 
     * @return the connectionAuth value.
     */
    public ConnectionAuth connectionAuth() {
        return this.connectionAuth;
    }

    /**
     * Get the port property: The port number that the endpoint is listening on.
     * 
     * @return the port value.
     */
    public Integer port() {
        return this.port;
    }

    /**
     * Get the isDynamicPort property: Is the port number dynamically assigned.
     * 
     * @return the isDynamicPort value.
     */
    public Boolean isDynamicPort() {
        return this.isDynamicPort;
    }

    /**
     * Get the ipAddress property: Listener IP address.
     * 
     * @return the ipAddress value.
     */
    public String ipAddress() {
        return this.ipAddress;
    }

    /**
     * Get the certificateName property: Name of the certificate.
     * 
     * @return the certificateName value.
     */
    public String certificateName() {
        return this.certificateName;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DbmEndpoint from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DbmEndpoint if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the DbmEndpoint.
     */
    public static DbmEndpoint fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DbmEndpoint deserializedDbmEndpoint = new DbmEndpoint();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("endpointName".equals(fieldName)) {
                    deserializedDbmEndpoint.endpointName = reader.getString();
                } else if ("role".equals(fieldName)) {
                    deserializedDbmEndpoint.role = Role.fromString(reader.getString());
                } else if ("isEncryptionEnabled".equals(fieldName)) {
                    deserializedDbmEndpoint.isEncryptionEnabled = reader.getNullable(JsonReader::getBoolean);
                } else if ("encryptionAlgorithm".equals(fieldName)) {
                    deserializedDbmEndpoint.encryptionAlgorithm = EncryptionAlgorithm.fromString(reader.getString());
                } else if ("connectionAuth".equals(fieldName)) {
                    deserializedDbmEndpoint.connectionAuth = ConnectionAuth.fromString(reader.getString());
                } else if ("port".equals(fieldName)) {
                    deserializedDbmEndpoint.port = reader.getNullable(JsonReader::getInt);
                } else if ("isDynamicPort".equals(fieldName)) {
                    deserializedDbmEndpoint.isDynamicPort = reader.getNullable(JsonReader::getBoolean);
                } else if ("ipAddress".equals(fieldName)) {
                    deserializedDbmEndpoint.ipAddress = reader.getString();
                } else if ("certificateName".equals(fieldName)) {
                    deserializedDbmEndpoint.certificateName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDbmEndpoint;
        });
    }
}
