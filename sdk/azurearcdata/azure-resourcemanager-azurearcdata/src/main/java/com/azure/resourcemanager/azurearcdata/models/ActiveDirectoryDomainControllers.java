// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurearcdata.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Details about the Active Directory domain controllers associated with this AD connector instance.
 */
@Fluent
public final class ActiveDirectoryDomainControllers implements JsonSerializable<ActiveDirectoryDomainControllers> {
    /*
     * Information about the Primary Domain Controller (PDC) in the AD domain.
     */
    private ActiveDirectoryDomainController primaryDomainController;

    /*
     * null
     */
    private List<ActiveDirectoryDomainController> secondaryDomainControllers;

    /**
     * Creates an instance of ActiveDirectoryDomainControllers class.
     */
    public ActiveDirectoryDomainControllers() {
    }

    /**
     * Get the primaryDomainController property: Information about the Primary Domain Controller (PDC) in the AD domain.
     * 
     * @return the primaryDomainController value.
     */
    public ActiveDirectoryDomainController primaryDomainController() {
        return this.primaryDomainController;
    }

    /**
     * Set the primaryDomainController property: Information about the Primary Domain Controller (PDC) in the AD domain.
     * 
     * @param primaryDomainController the primaryDomainController value to set.
     * @return the ActiveDirectoryDomainControllers object itself.
     */
    public ActiveDirectoryDomainControllers
        withPrimaryDomainController(ActiveDirectoryDomainController primaryDomainController) {
        this.primaryDomainController = primaryDomainController;
        return this;
    }

    /**
     * Get the secondaryDomainControllers property: null.
     * 
     * @return the secondaryDomainControllers value.
     */
    public List<ActiveDirectoryDomainController> secondaryDomainControllers() {
        return this.secondaryDomainControllers;
    }

    /**
     * Set the secondaryDomainControllers property: null.
     * 
     * @param secondaryDomainControllers the secondaryDomainControllers value to set.
     * @return the ActiveDirectoryDomainControllers object itself.
     */
    public ActiveDirectoryDomainControllers
        withSecondaryDomainControllers(List<ActiveDirectoryDomainController> secondaryDomainControllers) {
        this.secondaryDomainControllers = secondaryDomainControllers;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (primaryDomainController() != null) {
            primaryDomainController().validate();
        }
        if (secondaryDomainControllers() != null) {
            secondaryDomainControllers().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("primaryDomainController", this.primaryDomainController);
        jsonWriter.writeArrayField("secondaryDomainControllers", this.secondaryDomainControllers,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ActiveDirectoryDomainControllers from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ActiveDirectoryDomainControllers if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ActiveDirectoryDomainControllers.
     */
    public static ActiveDirectoryDomainControllers fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ActiveDirectoryDomainControllers deserializedActiveDirectoryDomainControllers
                = new ActiveDirectoryDomainControllers();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("primaryDomainController".equals(fieldName)) {
                    deserializedActiveDirectoryDomainControllers.primaryDomainController
                        = ActiveDirectoryDomainController.fromJson(reader);
                } else if ("secondaryDomainControllers".equals(fieldName)) {
                    List<ActiveDirectoryDomainController> secondaryDomainControllers
                        = reader.readArray(reader1 -> ActiveDirectoryDomainController.fromJson(reader1));
                    deserializedActiveDirectoryDomainControllers.secondaryDomainControllers
                        = secondaryDomainControllers;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedActiveDirectoryDomainControllers;
        });
    }
}
