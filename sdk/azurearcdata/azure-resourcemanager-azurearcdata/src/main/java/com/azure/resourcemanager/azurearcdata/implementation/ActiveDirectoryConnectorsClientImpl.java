// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurearcdata.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.azurearcdata.fluent.ActiveDirectoryConnectorsClient;
import com.azure.resourcemanager.azurearcdata.fluent.models.ActiveDirectoryConnectorResourceInner;
import com.azure.resourcemanager.azurearcdata.models.ActiveDirectoryConnectorListResult;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in ActiveDirectoryConnectorsClient.
 */
public final class ActiveDirectoryConnectorsClientImpl implements ActiveDirectoryConnectorsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final ActiveDirectoryConnectorsService service;

    /**
     * The service client containing this operation class.
     */
    private final AzureArcDataManagementClientImpl client;

    /**
     * Initializes an instance of ActiveDirectoryConnectorsClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    ActiveDirectoryConnectorsClientImpl(AzureArcDataManagementClientImpl client) {
        this.service = RestProxy.create(ActiveDirectoryConnectorsService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for AzureArcDataManagementClientActiveDirectoryConnectors to be used by
     * the proxy service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "AzureArcDataManagementClientActiveDirectoryConnectors")
    public interface ActiveDirectoryConnectorsService {
        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/dataControllers/{dataControllerName}/activeDirectoryConnectors")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ActiveDirectoryConnectorListResult>> list(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("dataControllerName") String dataControllerName, @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/dataControllers/{dataControllerName}/activeDirectoryConnectors")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<ActiveDirectoryConnectorListResult> listSync(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("dataControllerName") String dataControllerName, @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/dataControllers/{dataControllerName}/activeDirectoryConnectors/{activeDirectoryConnectorName}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> create(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("dataControllerName") String dataControllerName,
            @PathParam("activeDirectoryConnectorName") String activeDirectoryConnectorName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") ActiveDirectoryConnectorResourceInner activeDirectoryConnectorResource,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/dataControllers/{dataControllerName}/activeDirectoryConnectors/{activeDirectoryConnectorName}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> createSync(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("dataControllerName") String dataControllerName,
            @PathParam("activeDirectoryConnectorName") String activeDirectoryConnectorName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") ActiveDirectoryConnectorResourceInner activeDirectoryConnectorResource,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/dataControllers/{dataControllerName}/activeDirectoryConnectors/{activeDirectoryConnectorName}")
        @ExpectedResponses({ 200, 202, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> delete(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("dataControllerName") String dataControllerName,
            @PathParam("activeDirectoryConnectorName") String activeDirectoryConnectorName,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/dataControllers/{dataControllerName}/activeDirectoryConnectors/{activeDirectoryConnectorName}")
        @ExpectedResponses({ 200, 202, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> deleteSync(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("dataControllerName") String dataControllerName,
            @PathParam("activeDirectoryConnectorName") String activeDirectoryConnectorName,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/dataControllers/{dataControllerName}/activeDirectoryConnectors/{activeDirectoryConnectorName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ActiveDirectoryConnectorResourceInner>> get(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("dataControllerName") String dataControllerName,
            @PathParam("activeDirectoryConnectorName") String activeDirectoryConnectorName,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/dataControllers/{dataControllerName}/activeDirectoryConnectors/{activeDirectoryConnectorName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<ActiveDirectoryConnectorResourceInner> getSync(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("dataControllerName") String dataControllerName,
            @PathParam("activeDirectoryConnectorName") String activeDirectoryConnectorName,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ActiveDirectoryConnectorListResult>> listNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<ActiveDirectoryConnectorListResult> listNextSync(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * List the active directory connectors associated with the given data controller.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param dataControllerName The name of the data controller.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of active directory connectors along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ActiveDirectoryConnectorResourceInner>> listSinglePageAsync(String resourceGroupName,
        String dataControllerName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (dataControllerName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter dataControllerName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.list(this.client.getEndpoint(), this.client.getSubscriptionId(),
                resourceGroupName, dataControllerName, this.client.getApiVersion(), accept, context))
            .<PagedResponse<ActiveDirectoryConnectorResourceInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * List the active directory connectors associated with the given data controller.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param dataControllerName The name of the data controller.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of active directory connectors as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<ActiveDirectoryConnectorResourceInner> listAsync(String resourceGroupName,
        String dataControllerName) {
        return new PagedFlux<>(() -> listSinglePageAsync(resourceGroupName, dataControllerName),
            nextLink -> listNextSinglePageAsync(nextLink));
    }

    /**
     * List the active directory connectors associated with the given data controller.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param dataControllerName The name of the data controller.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of active directory connectors along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<ActiveDirectoryConnectorResourceInner> listSinglePage(String resourceGroupName,
        String dataControllerName) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (dataControllerName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter dataControllerName is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<ActiveDirectoryConnectorListResult> res
            = service.listSync(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
                dataControllerName, this.client.getApiVersion(), accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * List the active directory connectors associated with the given data controller.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param dataControllerName The name of the data controller.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of active directory connectors along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<ActiveDirectoryConnectorResourceInner> listSinglePage(String resourceGroupName,
        String dataControllerName, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (dataControllerName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter dataControllerName is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<ActiveDirectoryConnectorListResult> res
            = service.listSync(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
                dataControllerName, this.client.getApiVersion(), accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * List the active directory connectors associated with the given data controller.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param dataControllerName The name of the data controller.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of active directory connectors as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ActiveDirectoryConnectorResourceInner> list(String resourceGroupName,
        String dataControllerName) {
        return new PagedIterable<>(() -> listSinglePage(resourceGroupName, dataControllerName),
            nextLink -> listNextSinglePage(nextLink));
    }

    /**
     * List the active directory connectors associated with the given data controller.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param dataControllerName The name of the data controller.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of active directory connectors as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ActiveDirectoryConnectorResourceInner> list(String resourceGroupName,
        String dataControllerName, Context context) {
        return new PagedIterable<>(() -> listSinglePage(resourceGroupName, dataControllerName, context),
            nextLink -> listNextSinglePage(nextLink, context));
    }

    /**
     * Creates or replaces an Active Directory connector resource.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param dataControllerName The name of the data controller.
     * @param activeDirectoryConnectorName The name of the Active Directory connector instance.
     * @param activeDirectoryConnectorResource desc.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return active directory connector resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createWithResponseAsync(String resourceGroupName,
        String dataControllerName, String activeDirectoryConnectorName,
        ActiveDirectoryConnectorResourceInner activeDirectoryConnectorResource) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (dataControllerName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter dataControllerName is required and cannot be null."));
        }
        if (activeDirectoryConnectorName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter activeDirectoryConnectorName is required and cannot be null."));
        }
        if (activeDirectoryConnectorResource == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter activeDirectoryConnectorResource is required and cannot be null."));
        } else {
            activeDirectoryConnectorResource.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.create(this.client.getEndpoint(), this.client.getSubscriptionId(),
                resourceGroupName, dataControllerName, activeDirectoryConnectorName, this.client.getApiVersion(),
                activeDirectoryConnectorResource, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Creates or replaces an Active Directory connector resource.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param dataControllerName The name of the data controller.
     * @param activeDirectoryConnectorName The name of the Active Directory connector instance.
     * @param activeDirectoryConnectorResource desc.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return active directory connector resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> createWithResponse(String resourceGroupName, String dataControllerName,
        String activeDirectoryConnectorName, ActiveDirectoryConnectorResourceInner activeDirectoryConnectorResource) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (dataControllerName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter dataControllerName is required and cannot be null."));
        }
        if (activeDirectoryConnectorName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter activeDirectoryConnectorName is required and cannot be null."));
        }
        if (activeDirectoryConnectorResource == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter activeDirectoryConnectorResource is required and cannot be null."));
        } else {
            activeDirectoryConnectorResource.validate();
        }
        final String accept = "application/json";
        return service.createSync(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
            dataControllerName, activeDirectoryConnectorName, this.client.getApiVersion(),
            activeDirectoryConnectorResource, accept, Context.NONE);
    }

    /**
     * Creates or replaces an Active Directory connector resource.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param dataControllerName The name of the data controller.
     * @param activeDirectoryConnectorName The name of the Active Directory connector instance.
     * @param activeDirectoryConnectorResource desc.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return active directory connector resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> createWithResponse(String resourceGroupName, String dataControllerName,
        String activeDirectoryConnectorName, ActiveDirectoryConnectorResourceInner activeDirectoryConnectorResource,
        Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (dataControllerName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter dataControllerName is required and cannot be null."));
        }
        if (activeDirectoryConnectorName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter activeDirectoryConnectorName is required and cannot be null."));
        }
        if (activeDirectoryConnectorResource == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter activeDirectoryConnectorResource is required and cannot be null."));
        } else {
            activeDirectoryConnectorResource.validate();
        }
        final String accept = "application/json";
        return service.createSync(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
            dataControllerName, activeDirectoryConnectorName, this.client.getApiVersion(),
            activeDirectoryConnectorResource, accept, context);
    }

    /**
     * Creates or replaces an Active Directory connector resource.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param dataControllerName The name of the data controller.
     * @param activeDirectoryConnectorName The name of the Active Directory connector instance.
     * @param activeDirectoryConnectorResource desc.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of active directory connector resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<ActiveDirectoryConnectorResourceInner>, ActiveDirectoryConnectorResourceInner>
        beginCreateAsync(String resourceGroupName, String dataControllerName, String activeDirectoryConnectorName,
            ActiveDirectoryConnectorResourceInner activeDirectoryConnectorResource) {
        Mono<Response<Flux<ByteBuffer>>> mono = createWithResponseAsync(resourceGroupName, dataControllerName,
            activeDirectoryConnectorName, activeDirectoryConnectorResource);
        return this.client.<ActiveDirectoryConnectorResourceInner, ActiveDirectoryConnectorResourceInner>getLroResult(
            mono, this.client.getHttpPipeline(), ActiveDirectoryConnectorResourceInner.class,
            ActiveDirectoryConnectorResourceInner.class, this.client.getContext());
    }

    /**
     * Creates or replaces an Active Directory connector resource.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param dataControllerName The name of the data controller.
     * @param activeDirectoryConnectorName The name of the Active Directory connector instance.
     * @param activeDirectoryConnectorResource desc.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of active directory connector resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<ActiveDirectoryConnectorResourceInner>, ActiveDirectoryConnectorResourceInner>
        beginCreate(String resourceGroupName, String dataControllerName, String activeDirectoryConnectorName,
            ActiveDirectoryConnectorResourceInner activeDirectoryConnectorResource) {
        Response<BinaryData> response = createWithResponse(resourceGroupName, dataControllerName,
            activeDirectoryConnectorName, activeDirectoryConnectorResource);
        return this.client.<ActiveDirectoryConnectorResourceInner, ActiveDirectoryConnectorResourceInner>getLroResult(
            response, ActiveDirectoryConnectorResourceInner.class, ActiveDirectoryConnectorResourceInner.class,
            Context.NONE);
    }

    /**
     * Creates or replaces an Active Directory connector resource.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param dataControllerName The name of the data controller.
     * @param activeDirectoryConnectorName The name of the Active Directory connector instance.
     * @param activeDirectoryConnectorResource desc.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of active directory connector resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<ActiveDirectoryConnectorResourceInner>, ActiveDirectoryConnectorResourceInner>
        beginCreate(String resourceGroupName, String dataControllerName, String activeDirectoryConnectorName,
            ActiveDirectoryConnectorResourceInner activeDirectoryConnectorResource, Context context) {
        Response<BinaryData> response = createWithResponse(resourceGroupName, dataControllerName,
            activeDirectoryConnectorName, activeDirectoryConnectorResource, context);
        return this.client.<ActiveDirectoryConnectorResourceInner, ActiveDirectoryConnectorResourceInner>getLroResult(
            response, ActiveDirectoryConnectorResourceInner.class, ActiveDirectoryConnectorResourceInner.class,
            context);
    }

    /**
     * Creates or replaces an Active Directory connector resource.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param dataControllerName The name of the data controller.
     * @param activeDirectoryConnectorName The name of the Active Directory connector instance.
     * @param activeDirectoryConnectorResource desc.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return active directory connector resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ActiveDirectoryConnectorResourceInner> createAsync(String resourceGroupName, String dataControllerName,
        String activeDirectoryConnectorName, ActiveDirectoryConnectorResourceInner activeDirectoryConnectorResource) {
        return beginCreateAsync(resourceGroupName, dataControllerName, activeDirectoryConnectorName,
            activeDirectoryConnectorResource).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Creates or replaces an Active Directory connector resource.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param dataControllerName The name of the data controller.
     * @param activeDirectoryConnectorName The name of the Active Directory connector instance.
     * @param activeDirectoryConnectorResource desc.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return active directory connector resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ActiveDirectoryConnectorResourceInner create(String resourceGroupName, String dataControllerName,
        String activeDirectoryConnectorName, ActiveDirectoryConnectorResourceInner activeDirectoryConnectorResource) {
        return beginCreate(resourceGroupName, dataControllerName, activeDirectoryConnectorName,
            activeDirectoryConnectorResource).getFinalResult();
    }

    /**
     * Creates or replaces an Active Directory connector resource.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param dataControllerName The name of the data controller.
     * @param activeDirectoryConnectorName The name of the Active Directory connector instance.
     * @param activeDirectoryConnectorResource desc.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return active directory connector resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ActiveDirectoryConnectorResourceInner create(String resourceGroupName, String dataControllerName,
        String activeDirectoryConnectorName, ActiveDirectoryConnectorResourceInner activeDirectoryConnectorResource,
        Context context) {
        return beginCreate(resourceGroupName, dataControllerName, activeDirectoryConnectorName,
            activeDirectoryConnectorResource, context).getFinalResult();
    }

    /**
     * Deletes an Active Directory connector resource.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param dataControllerName The name of the data controller.
     * @param activeDirectoryConnectorName The name of the Active Directory connector instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(String resourceGroupName,
        String dataControllerName, String activeDirectoryConnectorName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (dataControllerName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter dataControllerName is required and cannot be null."));
        }
        if (activeDirectoryConnectorName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter activeDirectoryConnectorName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.delete(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
                    dataControllerName, activeDirectoryConnectorName, this.client.getApiVersion(), accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Deletes an Active Directory connector resource.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param dataControllerName The name of the data controller.
     * @param activeDirectoryConnectorName The name of the Active Directory connector instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> deleteWithResponse(String resourceGroupName, String dataControllerName,
        String activeDirectoryConnectorName) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (dataControllerName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter dataControllerName is required and cannot be null."));
        }
        if (activeDirectoryConnectorName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter activeDirectoryConnectorName is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.deleteSync(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
            dataControllerName, activeDirectoryConnectorName, this.client.getApiVersion(), accept, Context.NONE);
    }

    /**
     * Deletes an Active Directory connector resource.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param dataControllerName The name of the data controller.
     * @param activeDirectoryConnectorName The name of the Active Directory connector instance.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> deleteWithResponse(String resourceGroupName, String dataControllerName,
        String activeDirectoryConnectorName, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (dataControllerName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter dataControllerName is required and cannot be null."));
        }
        if (activeDirectoryConnectorName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter activeDirectoryConnectorName is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.deleteSync(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
            dataControllerName, activeDirectoryConnectorName, this.client.getApiVersion(), accept, context);
    }

    /**
     * Deletes an Active Directory connector resource.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param dataControllerName The name of the data controller.
     * @param activeDirectoryConnectorName The name of the Active Directory connector instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(String resourceGroupName, String dataControllerName,
        String activeDirectoryConnectorName) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = deleteWithResponseAsync(resourceGroupName, dataControllerName, activeDirectoryConnectorName);
        return this.client.<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class,
            this.client.getContext());
    }

    /**
     * Deletes an Active Directory connector resource.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param dataControllerName The name of the data controller.
     * @param activeDirectoryConnectorName The name of the Active Directory connector instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String dataControllerName,
        String activeDirectoryConnectorName) {
        Response<BinaryData> response
            = deleteWithResponse(resourceGroupName, dataControllerName, activeDirectoryConnectorName);
        return this.client.<Void, Void>getLroResult(response, Void.class, Void.class, Context.NONE);
    }

    /**
     * Deletes an Active Directory connector resource.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param dataControllerName The name of the data controller.
     * @param activeDirectoryConnectorName The name of the Active Directory connector instance.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String dataControllerName,
        String activeDirectoryConnectorName, Context context) {
        Response<BinaryData> response
            = deleteWithResponse(resourceGroupName, dataControllerName, activeDirectoryConnectorName, context);
        return this.client.<Void, Void>getLroResult(response, Void.class, Void.class, context);
    }

    /**
     * Deletes an Active Directory connector resource.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param dataControllerName The name of the data controller.
     * @param activeDirectoryConnectorName The name of the Active Directory connector instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String dataControllerName,
        String activeDirectoryConnectorName) {
        return beginDeleteAsync(resourceGroupName, dataControllerName, activeDirectoryConnectorName).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Deletes an Active Directory connector resource.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param dataControllerName The name of the data controller.
     * @param activeDirectoryConnectorName The name of the Active Directory connector instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String dataControllerName, String activeDirectoryConnectorName) {
        beginDelete(resourceGroupName, dataControllerName, activeDirectoryConnectorName).getFinalResult();
    }

    /**
     * Deletes an Active Directory connector resource.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param dataControllerName The name of the data controller.
     * @param activeDirectoryConnectorName The name of the Active Directory connector instance.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String dataControllerName, String activeDirectoryConnectorName,
        Context context) {
        beginDelete(resourceGroupName, dataControllerName, activeDirectoryConnectorName, context).getFinalResult();
    }

    /**
     * Retrieves an Active Directory connector resource.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param dataControllerName The name of the data controller.
     * @param activeDirectoryConnectorName The name of the Active Directory connector instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return active directory connector resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ActiveDirectoryConnectorResourceInner>> getWithResponseAsync(String resourceGroupName,
        String dataControllerName, String activeDirectoryConnectorName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (dataControllerName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter dataControllerName is required and cannot be null."));
        }
        if (activeDirectoryConnectorName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter activeDirectoryConnectorName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.get(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
                    dataControllerName, activeDirectoryConnectorName, this.client.getApiVersion(), accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Retrieves an Active Directory connector resource.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param dataControllerName The name of the data controller.
     * @param activeDirectoryConnectorName The name of the Active Directory connector instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return active directory connector resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ActiveDirectoryConnectorResourceInner> getAsync(String resourceGroupName, String dataControllerName,
        String activeDirectoryConnectorName) {
        return getWithResponseAsync(resourceGroupName, dataControllerName, activeDirectoryConnectorName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Retrieves an Active Directory connector resource.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param dataControllerName The name of the data controller.
     * @param activeDirectoryConnectorName The name of the Active Directory connector instance.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return active directory connector resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ActiveDirectoryConnectorResourceInner> getWithResponse(String resourceGroupName,
        String dataControllerName, String activeDirectoryConnectorName, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (dataControllerName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter dataControllerName is required and cannot be null."));
        }
        if (activeDirectoryConnectorName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter activeDirectoryConnectorName is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.getSync(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
            dataControllerName, activeDirectoryConnectorName, this.client.getApiVersion(), accept, context);
    }

    /**
     * Retrieves an Active Directory connector resource.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param dataControllerName The name of the data controller.
     * @param activeDirectoryConnectorName The name of the Active Directory connector instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return active directory connector resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ActiveDirectoryConnectorResourceInner get(String resourceGroupName, String dataControllerName,
        String activeDirectoryConnectorName) {
        return getWithResponse(resourceGroupName, dataControllerName, activeDirectoryConnectorName, Context.NONE)
            .getValue();
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of active directory connectors along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ActiveDirectoryConnectorResourceInner>> listNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.listNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<ActiveDirectoryConnectorResourceInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of active directory connectors along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<ActiveDirectoryConnectorResourceInner> listNextSinglePage(String nextLink) {
        if (nextLink == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<ActiveDirectoryConnectorListResult> res
            = service.listNextSync(nextLink, this.client.getEndpoint(), accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of active directory connectors along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<ActiveDirectoryConnectorResourceInner> listNextSinglePage(String nextLink, Context context) {
        if (nextLink == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<ActiveDirectoryConnectorListResult> res
            = service.listNextSync(nextLink, this.client.getEndpoint(), accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    private static final ClientLogger LOGGER = new ClientLogger(ActiveDirectoryConnectorsClientImpl.class);
}
