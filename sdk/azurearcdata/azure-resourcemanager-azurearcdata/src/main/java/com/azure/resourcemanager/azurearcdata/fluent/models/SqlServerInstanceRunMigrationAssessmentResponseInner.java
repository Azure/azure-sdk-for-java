// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurearcdata.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.azurearcdata.models.BackgroundJob;
import com.azure.resourcemanager.azurearcdata.models.JobStatus;
import com.azure.resourcemanager.azurearcdata.models.SequencerAction;
import java.io.IOException;
import java.util.List;

/**
 * The response for running migration assessment on the SQL Server instance.
 */
@Fluent
public final class SqlServerInstanceRunMigrationAssessmentResponseInner
    implements JsonSerializable<SqlServerInstanceRunMigrationAssessmentResponseInner> {
    /*
     * The unique identifier of the job.
     */
    private String id;

    /*
     * The name of the SQL Server instance.
     */
    private String instanceName;

    /*
     * The status of the job.
     */
    private JobStatus jobStatus;

    /*
     * The exception message if the job failed.
     */
    private String jobException;

    /*
     * The background job details.
     */
    private BackgroundJob backgroundJob;

    /*
     * The list of sequencer actions.
     */
    private List<SequencerAction> sequencerActions;

    /**
     * Creates an instance of SqlServerInstanceRunMigrationAssessmentResponseInner class.
     */
    public SqlServerInstanceRunMigrationAssessmentResponseInner() {
    }

    /**
     * Get the id property: The unique identifier of the job.
     * 
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Set the id property: The unique identifier of the job.
     * 
     * @param id the id value to set.
     * @return the SqlServerInstanceRunMigrationAssessmentResponseInner object itself.
     */
    public SqlServerInstanceRunMigrationAssessmentResponseInner withId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get the instanceName property: The name of the SQL Server instance.
     * 
     * @return the instanceName value.
     */
    public String instanceName() {
        return this.instanceName;
    }

    /**
     * Set the instanceName property: The name of the SQL Server instance.
     * 
     * @param instanceName the instanceName value to set.
     * @return the SqlServerInstanceRunMigrationAssessmentResponseInner object itself.
     */
    public SqlServerInstanceRunMigrationAssessmentResponseInner withInstanceName(String instanceName) {
        this.instanceName = instanceName;
        return this;
    }

    /**
     * Get the jobStatus property: The status of the job.
     * 
     * @return the jobStatus value.
     */
    public JobStatus jobStatus() {
        return this.jobStatus;
    }

    /**
     * Set the jobStatus property: The status of the job.
     * 
     * @param jobStatus the jobStatus value to set.
     * @return the SqlServerInstanceRunMigrationAssessmentResponseInner object itself.
     */
    public SqlServerInstanceRunMigrationAssessmentResponseInner withJobStatus(JobStatus jobStatus) {
        this.jobStatus = jobStatus;
        return this;
    }

    /**
     * Get the jobException property: The exception message if the job failed.
     * 
     * @return the jobException value.
     */
    public String jobException() {
        return this.jobException;
    }

    /**
     * Set the jobException property: The exception message if the job failed.
     * 
     * @param jobException the jobException value to set.
     * @return the SqlServerInstanceRunMigrationAssessmentResponseInner object itself.
     */
    public SqlServerInstanceRunMigrationAssessmentResponseInner withJobException(String jobException) {
        this.jobException = jobException;
        return this;
    }

    /**
     * Get the backgroundJob property: The background job details.
     * 
     * @return the backgroundJob value.
     */
    public BackgroundJob backgroundJob() {
        return this.backgroundJob;
    }

    /**
     * Set the backgroundJob property: The background job details.
     * 
     * @param backgroundJob the backgroundJob value to set.
     * @return the SqlServerInstanceRunMigrationAssessmentResponseInner object itself.
     */
    public SqlServerInstanceRunMigrationAssessmentResponseInner withBackgroundJob(BackgroundJob backgroundJob) {
        this.backgroundJob = backgroundJob;
        return this;
    }

    /**
     * Get the sequencerActions property: The list of sequencer actions.
     * 
     * @return the sequencerActions value.
     */
    public List<SequencerAction> sequencerActions() {
        return this.sequencerActions;
    }

    /**
     * Set the sequencerActions property: The list of sequencer actions.
     * 
     * @param sequencerActions the sequencerActions value to set.
     * @return the SqlServerInstanceRunMigrationAssessmentResponseInner object itself.
     */
    public SqlServerInstanceRunMigrationAssessmentResponseInner
        withSequencerActions(List<SequencerAction> sequencerActions) {
        this.sequencerActions = sequencerActions;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (backgroundJob() != null) {
            backgroundJob().validate();
        }
        if (sequencerActions() != null) {
            sequencerActions().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeStringField("instanceName", this.instanceName);
        jsonWriter.writeStringField("jobStatus", this.jobStatus == null ? null : this.jobStatus.toString());
        jsonWriter.writeStringField("jobException", this.jobException);
        jsonWriter.writeJsonField("backgroundJob", this.backgroundJob);
        jsonWriter.writeArrayField("sequencerActions", this.sequencerActions,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SqlServerInstanceRunMigrationAssessmentResponseInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SqlServerInstanceRunMigrationAssessmentResponseInner if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SqlServerInstanceRunMigrationAssessmentResponseInner.
     */
    public static SqlServerInstanceRunMigrationAssessmentResponseInner fromJson(JsonReader jsonReader)
        throws IOException {
        return jsonReader.readObject(reader -> {
            SqlServerInstanceRunMigrationAssessmentResponseInner deserializedSqlServerInstanceRunMigrationAssessmentResponseInner
                = new SqlServerInstanceRunMigrationAssessmentResponseInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedSqlServerInstanceRunMigrationAssessmentResponseInner.id = reader.getString();
                } else if ("instanceName".equals(fieldName)) {
                    deserializedSqlServerInstanceRunMigrationAssessmentResponseInner.instanceName = reader.getString();
                } else if ("jobStatus".equals(fieldName)) {
                    deserializedSqlServerInstanceRunMigrationAssessmentResponseInner.jobStatus
                        = JobStatus.fromString(reader.getString());
                } else if ("jobException".equals(fieldName)) {
                    deserializedSqlServerInstanceRunMigrationAssessmentResponseInner.jobException = reader.getString();
                } else if ("backgroundJob".equals(fieldName)) {
                    deserializedSqlServerInstanceRunMigrationAssessmentResponseInner.backgroundJob
                        = BackgroundJob.fromJson(reader);
                } else if ("sequencerActions".equals(fieldName)) {
                    List<SequencerAction> sequencerActions
                        = reader.readArray(reader1 -> SequencerAction.fromJson(reader1));
                    deserializedSqlServerInstanceRunMigrationAssessmentResponseInner.sequencerActions
                        = sequencerActions;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSqlServerInstanceRunMigrationAssessmentResponseInner;
        });
    }
}
