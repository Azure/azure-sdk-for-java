// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurearcdata.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * DNS server details.
 */
@Fluent
public final class ActiveDirectoryConnectorDnsDetails implements JsonSerializable<ActiveDirectoryConnectorDnsDetails> {
    /*
     * DNS domain name for which DNS lookups should be forwarded to the Active Directory DNS servers.
     */
    private String domainName;

    /*
     * List of Active Directory DNS server IP addresses.
     */
    private List<String> nameserverIpAddresses;

    /*
     * Replica count for DNS proxy service. Default value is 1.
     */
    private Long replicas;

    /*
     * Flag indicating whether to prefer Kubernetes DNS server response over AD DNS server response for IP address
     * lookups.
     */
    private Boolean preferK8SDnsForPtrLookups;

    /**
     * Creates an instance of ActiveDirectoryConnectorDnsDetails class.
     */
    public ActiveDirectoryConnectorDnsDetails() {
    }

    /**
     * Get the domainName property: DNS domain name for which DNS lookups should be forwarded to the Active Directory
     * DNS servers.
     * 
     * @return the domainName value.
     */
    public String domainName() {
        return this.domainName;
    }

    /**
     * Set the domainName property: DNS domain name for which DNS lookups should be forwarded to the Active Directory
     * DNS servers.
     * 
     * @param domainName the domainName value to set.
     * @return the ActiveDirectoryConnectorDnsDetails object itself.
     */
    public ActiveDirectoryConnectorDnsDetails withDomainName(String domainName) {
        this.domainName = domainName;
        return this;
    }

    /**
     * Get the nameserverIpAddresses property: List of Active Directory DNS server IP addresses.
     * 
     * @return the nameserverIpAddresses value.
     */
    public List<String> nameserverIpAddresses() {
        return this.nameserverIpAddresses;
    }

    /**
     * Set the nameserverIpAddresses property: List of Active Directory DNS server IP addresses.
     * 
     * @param nameserverIpAddresses the nameserverIpAddresses value to set.
     * @return the ActiveDirectoryConnectorDnsDetails object itself.
     */
    public ActiveDirectoryConnectorDnsDetails withNameserverIpAddresses(List<String> nameserverIpAddresses) {
        this.nameserverIpAddresses = nameserverIpAddresses;
        return this;
    }

    /**
     * Get the replicas property: Replica count for DNS proxy service. Default value is 1.
     * 
     * @return the replicas value.
     */
    public Long replicas() {
        return this.replicas;
    }

    /**
     * Set the replicas property: Replica count for DNS proxy service. Default value is 1.
     * 
     * @param replicas the replicas value to set.
     * @return the ActiveDirectoryConnectorDnsDetails object itself.
     */
    public ActiveDirectoryConnectorDnsDetails withReplicas(Long replicas) {
        this.replicas = replicas;
        return this;
    }

    /**
     * Get the preferK8SDnsForPtrLookups property: Flag indicating whether to prefer Kubernetes DNS server response over
     * AD DNS server response for IP address lookups.
     * 
     * @return the preferK8SDnsForPtrLookups value.
     */
    public Boolean preferK8SDnsForPtrLookups() {
        return this.preferK8SDnsForPtrLookups;
    }

    /**
     * Set the preferK8SDnsForPtrLookups property: Flag indicating whether to prefer Kubernetes DNS server response over
     * AD DNS server response for IP address lookups.
     * 
     * @param preferK8SDnsForPtrLookups the preferK8SDnsForPtrLookups value to set.
     * @return the ActiveDirectoryConnectorDnsDetails object itself.
     */
    public ActiveDirectoryConnectorDnsDetails withPreferK8SDnsForPtrLookups(Boolean preferK8SDnsForPtrLookups) {
        this.preferK8SDnsForPtrLookups = preferK8SDnsForPtrLookups;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (nameserverIpAddresses() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property nameserverIpAddresses in model ActiveDirectoryConnectorDnsDetails"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ActiveDirectoryConnectorDnsDetails.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("nameserverIPAddresses", this.nameserverIpAddresses,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("domainName", this.domainName);
        jsonWriter.writeNumberField("replicas", this.replicas);
        jsonWriter.writeBooleanField("preferK8sDnsForPtrLookups", this.preferK8SDnsForPtrLookups);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ActiveDirectoryConnectorDnsDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ActiveDirectoryConnectorDnsDetails if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ActiveDirectoryConnectorDnsDetails.
     */
    public static ActiveDirectoryConnectorDnsDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ActiveDirectoryConnectorDnsDetails deserializedActiveDirectoryConnectorDnsDetails
                = new ActiveDirectoryConnectorDnsDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("nameserverIPAddresses".equals(fieldName)) {
                    List<String> nameserverIpAddresses = reader.readArray(reader1 -> reader1.getString());
                    deserializedActiveDirectoryConnectorDnsDetails.nameserverIpAddresses = nameserverIpAddresses;
                } else if ("domainName".equals(fieldName)) {
                    deserializedActiveDirectoryConnectorDnsDetails.domainName = reader.getString();
                } else if ("replicas".equals(fieldName)) {
                    deserializedActiveDirectoryConnectorDnsDetails.replicas = reader.getNullable(JsonReader::getLong);
                } else if ("preferK8sDnsForPtrLookups".equals(fieldName)) {
                    deserializedActiveDirectoryConnectorDnsDetails.preferK8SDnsForPtrLookups
                        = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedActiveDirectoryConnectorDnsDetails;
        });
    }
}
