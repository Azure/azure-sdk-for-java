// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurearcdata.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** DNS server details. */
@Fluent
public final class ActiveDirectoryConnectorDnsDetails {
    /*
     * DNS domain name for which DNS lookups should be forwarded to the Active
     * Directory DNS servers.
     */
    @JsonProperty(value = "domainName")
    private String domainName;

    /*
     * List of Active Directory DNS server IP addresses.
     */
    @JsonProperty(value = "nameserverIPAddresses", required = true)
    private List<String> nameserverIpAddresses;

    /*
     * Replica count for DNS proxy service. Default value is 1.
     */
    @JsonProperty(value = "replicas")
    private Long replicas;

    /*
     * Flag indicating whether to prefer Kubernetes DNS server response over AD
     * DNS server response for IP address lookups.
     */
    @JsonProperty(value = "preferK8sDnsForPtrLookups")
    private Boolean preferK8SDnsForPtrLookups;

    /**
     * Get the domainName property: DNS domain name for which DNS lookups should be forwarded to the Active Directory
     * DNS servers.
     *
     * @return the domainName value.
     */
    public String domainName() {
        return this.domainName;
    }

    /**
     * Set the domainName property: DNS domain name for which DNS lookups should be forwarded to the Active Directory
     * DNS servers.
     *
     * @param domainName the domainName value to set.
     * @return the ActiveDirectoryConnectorDnsDetails object itself.
     */
    public ActiveDirectoryConnectorDnsDetails withDomainName(String domainName) {
        this.domainName = domainName;
        return this;
    }

    /**
     * Get the nameserverIpAddresses property: List of Active Directory DNS server IP addresses.
     *
     * @return the nameserverIpAddresses value.
     */
    public List<String> nameserverIpAddresses() {
        return this.nameserverIpAddresses;
    }

    /**
     * Set the nameserverIpAddresses property: List of Active Directory DNS server IP addresses.
     *
     * @param nameserverIpAddresses the nameserverIpAddresses value to set.
     * @return the ActiveDirectoryConnectorDnsDetails object itself.
     */
    public ActiveDirectoryConnectorDnsDetails withNameserverIpAddresses(List<String> nameserverIpAddresses) {
        this.nameserverIpAddresses = nameserverIpAddresses;
        return this;
    }

    /**
     * Get the replicas property: Replica count for DNS proxy service. Default value is 1.
     *
     * @return the replicas value.
     */
    public Long replicas() {
        return this.replicas;
    }

    /**
     * Set the replicas property: Replica count for DNS proxy service. Default value is 1.
     *
     * @param replicas the replicas value to set.
     * @return the ActiveDirectoryConnectorDnsDetails object itself.
     */
    public ActiveDirectoryConnectorDnsDetails withReplicas(Long replicas) {
        this.replicas = replicas;
        return this;
    }

    /**
     * Get the preferK8SDnsForPtrLookups property: Flag indicating whether to prefer Kubernetes DNS server response over
     * AD DNS server response for IP address lookups.
     *
     * @return the preferK8SDnsForPtrLookups value.
     */
    public Boolean preferK8SDnsForPtrLookups() {
        return this.preferK8SDnsForPtrLookups;
    }

    /**
     * Set the preferK8SDnsForPtrLookups property: Flag indicating whether to prefer Kubernetes DNS server response over
     * AD DNS server response for IP address lookups.
     *
     * @param preferK8SDnsForPtrLookups the preferK8SDnsForPtrLookups value to set.
     * @return the ActiveDirectoryConnectorDnsDetails object itself.
     */
    public ActiveDirectoryConnectorDnsDetails withPreferK8SDnsForPtrLookups(Boolean preferK8SDnsForPtrLookups) {
        this.preferK8SDnsForPtrLookups = preferK8SDnsForPtrLookups;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (nameserverIpAddresses() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property nameserverIpAddresses in model ActiveDirectoryConnectorDnsDetails"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ActiveDirectoryConnectorDnsDetails.class);
}
