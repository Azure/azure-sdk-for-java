// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurearcdata.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.List;

/**
 * The migration assessment related configuration.
 */
@Immutable
public final class DataBaseMigrationAssessment implements JsonSerializable<DataBaseMigrationAssessment> {
    /*
     * The time when Migration Assessment Report upload was last performed.
     */
    private OffsetDateTime assessmentUploadTime;

    /*
     * Issues and warnings impacting the migration of Database to particular Azure Migration Target.
     */
    private List<DatabaseAssessmentsItem> databaseAssessments;

    /*
     * The target readiness for migration for this database.
     */
    private TargetReadiness targetReadiness;

    /**
     * Creates an instance of DataBaseMigrationAssessment class.
     */
    public DataBaseMigrationAssessment() {
    }

    /**
     * Get the assessmentUploadTime property: The time when Migration Assessment Report upload was last performed.
     * 
     * @return the assessmentUploadTime value.
     */
    public OffsetDateTime assessmentUploadTime() {
        return this.assessmentUploadTime;
    }

    /**
     * Get the databaseAssessments property: Issues and warnings impacting the migration of Database to particular Azure
     * Migration Target.
     * 
     * @return the databaseAssessments value.
     */
    public List<DatabaseAssessmentsItem> databaseAssessments() {
        return this.databaseAssessments;
    }

    /**
     * Get the targetReadiness property: The target readiness for migration for this database.
     * 
     * @return the targetReadiness value.
     */
    public TargetReadiness targetReadiness() {
        return this.targetReadiness;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (databaseAssessments() != null) {
            databaseAssessments().forEach(e -> e.validate());
        }
        if (targetReadiness() != null) {
            targetReadiness().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DataBaseMigrationAssessment from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DataBaseMigrationAssessment if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DataBaseMigrationAssessment.
     */
    public static DataBaseMigrationAssessment fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DataBaseMigrationAssessment deserializedDataBaseMigrationAssessment = new DataBaseMigrationAssessment();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("assessmentUploadTime".equals(fieldName)) {
                    deserializedDataBaseMigrationAssessment.assessmentUploadTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("databaseAssessments".equals(fieldName)) {
                    List<DatabaseAssessmentsItem> databaseAssessments
                        = reader.readArray(reader1 -> DatabaseAssessmentsItem.fromJson(reader1));
                    deserializedDataBaseMigrationAssessment.databaseAssessments = databaseAssessments;
                } else if ("targetReadiness".equals(fieldName)) {
                    deserializedDataBaseMigrationAssessment.targetReadiness = TargetReadiness.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDataBaseMigrationAssessment;
        });
    }
}
