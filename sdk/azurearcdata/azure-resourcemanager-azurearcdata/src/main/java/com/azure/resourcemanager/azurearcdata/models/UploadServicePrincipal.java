// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurearcdata.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Objects;
import java.util.UUID;

/**
 * Service principal for uploading billing, metrics and logs.
 */
@Fluent
public final class UploadServicePrincipal implements JsonSerializable<UploadServicePrincipal> {
    /*
     * Client ID of the service principal for uploading data.
     */
    private UUID clientId;

    /*
     * Tenant ID of the service principal.
     */
    private UUID tenantId;

    /*
     * Authority for the service principal. Example: https://login.microsoftonline.com/
     */
    private String authority;

    /*
     * Secret of the service principal
     */
    private String clientSecret;

    /**
     * Creates an instance of UploadServicePrincipal class.
     */
    public UploadServicePrincipal() {
    }

    /**
     * Get the clientId property: Client ID of the service principal for uploading data.
     * 
     * @return the clientId value.
     */
    public UUID clientId() {
        return this.clientId;
    }

    /**
     * Set the clientId property: Client ID of the service principal for uploading data.
     * 
     * @param clientId the clientId value to set.
     * @return the UploadServicePrincipal object itself.
     */
    public UploadServicePrincipal withClientId(UUID clientId) {
        this.clientId = clientId;
        return this;
    }

    /**
     * Get the tenantId property: Tenant ID of the service principal.
     * 
     * @return the tenantId value.
     */
    public UUID tenantId() {
        return this.tenantId;
    }

    /**
     * Set the tenantId property: Tenant ID of the service principal.
     * 
     * @param tenantId the tenantId value to set.
     * @return the UploadServicePrincipal object itself.
     */
    public UploadServicePrincipal withTenantId(UUID tenantId) {
        this.tenantId = tenantId;
        return this;
    }

    /**
     * Get the authority property: Authority for the service principal. Example: https://login.microsoftonline.com/.
     * 
     * @return the authority value.
     */
    public String authority() {
        return this.authority;
    }

    /**
     * Set the authority property: Authority for the service principal. Example: https://login.microsoftonline.com/.
     * 
     * @param authority the authority value to set.
     * @return the UploadServicePrincipal object itself.
     */
    public UploadServicePrincipal withAuthority(String authority) {
        this.authority = authority;
        return this;
    }

    /**
     * Get the clientSecret property: Secret of the service principal.
     * 
     * @return the clientSecret value.
     */
    public String clientSecret() {
        return this.clientSecret;
    }

    /**
     * Set the clientSecret property: Secret of the service principal.
     * 
     * @param clientSecret the clientSecret value to set.
     * @return the UploadServicePrincipal object itself.
     */
    public UploadServicePrincipal withClientSecret(String clientSecret) {
        this.clientSecret = clientSecret;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("clientId", Objects.toString(this.clientId, null));
        jsonWriter.writeStringField("tenantId", Objects.toString(this.tenantId, null));
        jsonWriter.writeStringField("authority", this.authority);
        jsonWriter.writeStringField("clientSecret", this.clientSecret);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of UploadServicePrincipal from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of UploadServicePrincipal if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the UploadServicePrincipal.
     */
    public static UploadServicePrincipal fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            UploadServicePrincipal deserializedUploadServicePrincipal = new UploadServicePrincipal();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("clientId".equals(fieldName)) {
                    deserializedUploadServicePrincipal.clientId
                        = reader.getNullable(nonNullReader -> UUID.fromString(nonNullReader.getString()));
                } else if ("tenantId".equals(fieldName)) {
                    deserializedUploadServicePrincipal.tenantId
                        = reader.getNullable(nonNullReader -> UUID.fromString(nonNullReader.getString()));
                } else if ("authority".equals(fieldName)) {
                    deserializedUploadServicePrincipal.authority = reader.getString();
                } else if ("clientSecret".equals(fieldName)) {
                    deserializedUploadServicePrincipal.clientSecret = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedUploadServicePrincipal;
        });
    }
}
