// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurearcdata.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.azurearcdata.fluent.models.SqlServerAvailabilityGroupResourceInner;
import com.azure.resourcemanager.azurearcdata.models.AvailabilityGroupCreateUpdateConfiguration;
import com.azure.resourcemanager.azurearcdata.models.Databases;
import com.azure.resourcemanager.azurearcdata.models.DistributedAvailabilityGroupCreateUpdateConfiguration;
import com.azure.resourcemanager.azurearcdata.models.FailoverMiLinkResourceId;
import com.azure.resourcemanager.azurearcdata.models.ManagedInstanceLinkCreateUpdateConfiguration;
import com.azure.resourcemanager.azurearcdata.models.SqlServerAvailabilityGroupUpdate;

/**
 * An instance of this class provides access to all the operations defined in SqlServerAvailabilityGroupsClient.
 */
public interface SqlServerAvailabilityGroupsClient {
    /**
     * Creates or replaces an Arc Sql Server Availability Group.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param availabilityGroupName Name of SQL Availability Group.
     * @param sqlServerAvailabilityGroupResource The request body for availability group resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return arc Sql Server Availability Group along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<SqlServerAvailabilityGroupResourceInner> createWithResponse(String resourceGroupName,
        String sqlServerInstanceName, String availabilityGroupName,
        SqlServerAvailabilityGroupResourceInner sqlServerAvailabilityGroupResource, Context context);

    /**
     * Creates or replaces an Arc Sql Server Availability Group.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param availabilityGroupName Name of SQL Availability Group.
     * @param sqlServerAvailabilityGroupResource The request body for availability group resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return arc Sql Server Availability Group.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SqlServerAvailabilityGroupResourceInner create(String resourceGroupName, String sqlServerInstanceName,
        String availabilityGroupName, SqlServerAvailabilityGroupResourceInner sqlServerAvailabilityGroupResource);

    /**
     * Deletes an Arc Sql Server availability group resource.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param availabilityGroupName Name of SQL Availability Group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String sqlServerInstanceName,
        String availabilityGroupName);

    /**
     * Deletes an Arc Sql Server availability group resource.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param availabilityGroupName Name of SQL Availability Group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String sqlServerInstanceName,
        String availabilityGroupName, Context context);

    /**
     * Deletes an Arc Sql Server availability group resource.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param availabilityGroupName Name of SQL Availability Group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String sqlServerInstanceName, String availabilityGroupName);

    /**
     * Deletes an Arc Sql Server availability group resource.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param availabilityGroupName Name of SQL Availability Group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String sqlServerInstanceName, String availabilityGroupName, Context context);

    /**
     * Retrieves an Arc Sql Server availability group.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param availabilityGroupName Name of SQL Availability Group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return arc Sql Server Availability Group along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<SqlServerAvailabilityGroupResourceInner> getWithResponse(String resourceGroupName,
        String sqlServerInstanceName, String availabilityGroupName, Context context);

    /**
     * Retrieves an Arc Sql Server availability group.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param availabilityGroupName Name of SQL Availability Group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return arc Sql Server Availability Group.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SqlServerAvailabilityGroupResourceInner get(String resourceGroupName, String sqlServerInstanceName,
        String availabilityGroupName);

    /**
     * Updates an existing Availability Group.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param availabilityGroupName Name of SQL Availability Group.
     * @param sqlServerAvailabilityGroupUpdate The requested server availability group resource state.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of arc Sql Server Availability Group.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<SqlServerAvailabilityGroupResourceInner>, SqlServerAvailabilityGroupResourceInner>
        beginUpdate(String resourceGroupName, String sqlServerInstanceName, String availabilityGroupName,
            SqlServerAvailabilityGroupUpdate sqlServerAvailabilityGroupUpdate);

    /**
     * Updates an existing Availability Group.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param availabilityGroupName Name of SQL Availability Group.
     * @param sqlServerAvailabilityGroupUpdate The requested server availability group resource state.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of arc Sql Server Availability Group.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<SqlServerAvailabilityGroupResourceInner>, SqlServerAvailabilityGroupResourceInner>
        beginUpdate(String resourceGroupName, String sqlServerInstanceName, String availabilityGroupName,
            SqlServerAvailabilityGroupUpdate sqlServerAvailabilityGroupUpdate, Context context);

    /**
     * Updates an existing Availability Group.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param availabilityGroupName Name of SQL Availability Group.
     * @param sqlServerAvailabilityGroupUpdate The requested server availability group resource state.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return arc Sql Server Availability Group.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SqlServerAvailabilityGroupResourceInner update(String resourceGroupName, String sqlServerInstanceName,
        String availabilityGroupName, SqlServerAvailabilityGroupUpdate sqlServerAvailabilityGroupUpdate);

    /**
     * Updates an existing Availability Group.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param availabilityGroupName Name of SQL Availability Group.
     * @param sqlServerAvailabilityGroupUpdate The requested server availability group resource state.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return arc Sql Server Availability Group.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SqlServerAvailabilityGroupResourceInner update(String resourceGroupName, String sqlServerInstanceName,
        String availabilityGroupName, SqlServerAvailabilityGroupUpdate sqlServerAvailabilityGroupUpdate,
        Context context);

    /**
     * Retrieves detailed properties of the Availability Group.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param availabilityGroupName Name of SQL Availability Group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return arc Sql Server Availability Group along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<SqlServerAvailabilityGroupResourceInner> detailViewWithResponse(String resourceGroupName,
        String sqlServerInstanceName, String availabilityGroupName, Context context);

    /**
     * Retrieves detailed properties of the Availability Group.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param availabilityGroupName Name of SQL Availability Group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return arc Sql Server Availability Group.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SqlServerAvailabilityGroupResourceInner detailView(String resourceGroupName, String sqlServerInstanceName,
        String availabilityGroupName);

    /**
     * Request manual failover of the availability group to this server.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param availabilityGroupName Name of SQL Availability Group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return arc Sql Server Availability Group along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<SqlServerAvailabilityGroupResourceInner> failoverWithResponse(String resourceGroupName,
        String sqlServerInstanceName, String availabilityGroupName, Context context);

    /**
     * Request manual failover of the availability group to this server.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param availabilityGroupName Name of SQL Availability Group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return arc Sql Server Availability Group.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SqlServerAvailabilityGroupResourceInner failover(String resourceGroupName, String sqlServerInstanceName,
        String availabilityGroupName);

    /**
     * Request forced failover of the availability group to this server.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param availabilityGroupName Name of SQL Availability Group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return arc Sql Server Availability Group along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<SqlServerAvailabilityGroupResourceInner> forceFailoverAllowDataLossWithResponse(String resourceGroupName,
        String sqlServerInstanceName, String availabilityGroupName, Context context);

    /**
     * Request forced failover of the availability group to this server.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param availabilityGroupName Name of SQL Availability Group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return arc Sql Server Availability Group.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SqlServerAvailabilityGroupResourceInner forceFailoverAllowDataLoss(String resourceGroupName,
        String sqlServerInstanceName, String availabilityGroupName);

    /**
     * Create a SQL Server availability group.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param createAgConfiguration The configuration for the new SQL Server availability group resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of arc Sql Server Availability Group.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<SqlServerAvailabilityGroupResourceInner>, SqlServerAvailabilityGroupResourceInner>
        beginCreateAvailabilityGroup(String resourceGroupName, String sqlServerInstanceName,
            AvailabilityGroupCreateUpdateConfiguration createAgConfiguration);

    /**
     * Create a SQL Server availability group.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param createAgConfiguration The configuration for the new SQL Server availability group resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of arc Sql Server Availability Group.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<SqlServerAvailabilityGroupResourceInner>, SqlServerAvailabilityGroupResourceInner>
        beginCreateAvailabilityGroup(String resourceGroupName, String sqlServerInstanceName,
            AvailabilityGroupCreateUpdateConfiguration createAgConfiguration, Context context);

    /**
     * Create a SQL Server availability group.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param createAgConfiguration The configuration for the new SQL Server availability group resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return arc Sql Server Availability Group.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SqlServerAvailabilityGroupResourceInner createAvailabilityGroup(String resourceGroupName,
        String sqlServerInstanceName, AvailabilityGroupCreateUpdateConfiguration createAgConfiguration);

    /**
     * Create a SQL Server availability group.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param createAgConfiguration The configuration for the new SQL Server availability group resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return arc Sql Server Availability Group.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SqlServerAvailabilityGroupResourceInner createAvailabilityGroup(String resourceGroupName,
        String sqlServerInstanceName, AvailabilityGroupCreateUpdateConfiguration createAgConfiguration,
        Context context);

    /**
     * Create a SQL Server distributed availability group.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param createDagConfiguration The configuration for the new SQL Server availability group resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of arc Sql Server Availability Group.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<SqlServerAvailabilityGroupResourceInner>, SqlServerAvailabilityGroupResourceInner>
        beginCreateDistributedAvailabilityGroup(String resourceGroupName, String sqlServerInstanceName,
            DistributedAvailabilityGroupCreateUpdateConfiguration createDagConfiguration);

    /**
     * Create a SQL Server distributed availability group.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param createDagConfiguration The configuration for the new SQL Server availability group resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of arc Sql Server Availability Group.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<SqlServerAvailabilityGroupResourceInner>, SqlServerAvailabilityGroupResourceInner>
        beginCreateDistributedAvailabilityGroup(String resourceGroupName, String sqlServerInstanceName,
            DistributedAvailabilityGroupCreateUpdateConfiguration createDagConfiguration, Context context);

    /**
     * Create a SQL Server distributed availability group.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param createDagConfiguration The configuration for the new SQL Server availability group resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return arc Sql Server Availability Group.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SqlServerAvailabilityGroupResourceInner createDistributedAvailabilityGroup(String resourceGroupName,
        String sqlServerInstanceName, DistributedAvailabilityGroupCreateUpdateConfiguration createDagConfiguration);

    /**
     * Create a SQL Server distributed availability group.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param createDagConfiguration The configuration for the new SQL Server availability group resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return arc Sql Server Availability Group.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SqlServerAvailabilityGroupResourceInner createDistributedAvailabilityGroup(String resourceGroupName,
        String sqlServerInstanceName, DistributedAvailabilityGroupCreateUpdateConfiguration createDagConfiguration,
        Context context);

    /**
     * Create an Managed Instance Link.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param createManagedInstanceLinkConfiguration The configuration for the new Managed Instance Link resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of arc Sql Server Availability Group.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<SqlServerAvailabilityGroupResourceInner>, SqlServerAvailabilityGroupResourceInner>
        beginCreateManagedInstanceLink(String resourceGroupName, String sqlServerInstanceName,
            ManagedInstanceLinkCreateUpdateConfiguration createManagedInstanceLinkConfiguration);

    /**
     * Create an Managed Instance Link.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param createManagedInstanceLinkConfiguration The configuration for the new Managed Instance Link resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of arc Sql Server Availability Group.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<SqlServerAvailabilityGroupResourceInner>, SqlServerAvailabilityGroupResourceInner>
        beginCreateManagedInstanceLink(String resourceGroupName, String sqlServerInstanceName,
            ManagedInstanceLinkCreateUpdateConfiguration createManagedInstanceLinkConfiguration, Context context);

    /**
     * Create an Managed Instance Link.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param createManagedInstanceLinkConfiguration The configuration for the new Managed Instance Link resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return arc Sql Server Availability Group.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SqlServerAvailabilityGroupResourceInner createManagedInstanceLink(String resourceGroupName,
        String sqlServerInstanceName,
        ManagedInstanceLinkCreateUpdateConfiguration createManagedInstanceLinkConfiguration);

    /**
     * Create an Managed Instance Link.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param createManagedInstanceLinkConfiguration The configuration for the new Managed Instance Link resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return arc Sql Server Availability Group.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SqlServerAvailabilityGroupResourceInner createManagedInstanceLink(String resourceGroupName,
        String sqlServerInstanceName,
        ManagedInstanceLinkCreateUpdateConfiguration createManagedInstanceLinkConfiguration, Context context);

    /**
     * Request adding database(s) to an existing availability group.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param availabilityGroupName Name of SQL Availability Group.
     * @param databases The database names to add to the SQL Server availability group resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return arc Sql Server Availability Group along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<SqlServerAvailabilityGroupResourceInner> addDatabasesWithResponse(String resourceGroupName,
        String sqlServerInstanceName, String availabilityGroupName, Databases databases, Context context);

    /**
     * Request adding database(s) to an existing availability group.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param availabilityGroupName Name of SQL Availability Group.
     * @param databases The database names to add to the SQL Server availability group resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return arc Sql Server Availability Group.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SqlServerAvailabilityGroupResourceInner addDatabases(String resourceGroupName, String sqlServerInstanceName,
        String availabilityGroupName, Databases databases);

    /**
     * Request failover of Arc Sql Server to Azure Managed Instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param availabilityGroupName Name of SQL Availability Group.
     * @param managedInstanceResourceId The azure resource identifier for the Sql Managed Instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of arc Sql Server Availability Group.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<SqlServerAvailabilityGroupResourceInner>, SqlServerAvailabilityGroupResourceInner>
        beginFailoverMiLink(String resourceGroupName, String sqlServerInstanceName, String availabilityGroupName,
            FailoverMiLinkResourceId managedInstanceResourceId);

    /**
     * Request failover of Arc Sql Server to Azure Managed Instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param availabilityGroupName Name of SQL Availability Group.
     * @param managedInstanceResourceId The azure resource identifier for the Sql Managed Instance.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of arc Sql Server Availability Group.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<SqlServerAvailabilityGroupResourceInner>, SqlServerAvailabilityGroupResourceInner>
        beginFailoverMiLink(String resourceGroupName, String sqlServerInstanceName, String availabilityGroupName,
            FailoverMiLinkResourceId managedInstanceResourceId, Context context);

    /**
     * Request failover of Arc Sql Server to Azure Managed Instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param availabilityGroupName Name of SQL Availability Group.
     * @param managedInstanceResourceId The azure resource identifier for the Sql Managed Instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return arc Sql Server Availability Group.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SqlServerAvailabilityGroupResourceInner failoverMiLink(String resourceGroupName, String sqlServerInstanceName,
        String availabilityGroupName, FailoverMiLinkResourceId managedInstanceResourceId);

    /**
     * Request failover of Arc Sql Server to Azure Managed Instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param availabilityGroupName Name of SQL Availability Group.
     * @param managedInstanceResourceId The azure resource identifier for the Sql Managed Instance.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return arc Sql Server Availability Group.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SqlServerAvailabilityGroupResourceInner failoverMiLink(String resourceGroupName, String sqlServerInstanceName,
        String availabilityGroupName, FailoverMiLinkResourceId managedInstanceResourceId, Context context);

    /**
     * Request removing database(s) from an existing availability group.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param availabilityGroupName Name of SQL Availability Group.
     * @param databases The database names to remove from the SQL Server availability group resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return arc Sql Server Availability Group along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<SqlServerAvailabilityGroupResourceInner> removeDatabasesWithResponse(String resourceGroupName,
        String sqlServerInstanceName, String availabilityGroupName, Databases databases, Context context);

    /**
     * Request removing database(s) from an existing availability group.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param availabilityGroupName Name of SQL Availability Group.
     * @param databases The database names to remove from the SQL Server availability group resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return arc Sql Server Availability Group.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SqlServerAvailabilityGroupResourceInner removeDatabases(String resourceGroupName, String sqlServerInstanceName,
        String availabilityGroupName, Databases databases);

    /**
     * List the availability group associated with the given Arc Sql Server.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of Arc Sql Server Availability Groups as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<SqlServerAvailabilityGroupResourceInner> list(String resourceGroupName, String sqlServerInstanceName);

    /**
     * List the availability group associated with the given Arc Sql Server.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of Arc Sql Server Availability Groups as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<SqlServerAvailabilityGroupResourceInner> list(String resourceGroupName, String sqlServerInstanceName,
        Context context);
}
