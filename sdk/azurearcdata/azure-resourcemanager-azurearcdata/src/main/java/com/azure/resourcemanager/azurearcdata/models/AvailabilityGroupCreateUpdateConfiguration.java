// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurearcdata.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Options used in creating an availability group.
 */
@Fluent
public final class AvailabilityGroupCreateUpdateConfiguration
    implements JsonSerializable<AvailabilityGroupCreateUpdateConfiguration> {
    /*
     * Name of the availability group.
     */
    private String availabilityGroupName;

    /*
     * List of availability group replicas.
     */
    private List<AvailabilityGroupCreateUpdateReplicaConfiguration> replicas;

    /*
     * List of databases to include in the availability group.
     */
    private List<String> databases;

    /*
     * Preferred replica for running automated backups.
     */
    private AutomatedBackupPreference automatedBackupPreference;

    /*
     * User-defined failure condition level under which an automatic failover must be triggered.
     */
    private FailureConditionLevel failureConditionLevel;

    /*
     * Wait time (in milliseconds) for the sp_server_diagnostics system stored procedure to return server-health
     * information, before the server instance is assumed to be slow or not responding.
     */
    private Integer healthCheckTimeout;

    /*
     * Specifies whether the availability group supports failover for database health conditions.
     */
    private DbFailover dbFailover;

    /*
     * Specifies whether DTC support has been enabled for this availability group.
     */
    private DtcSupport dtcSupport;

    /*
     * The number of secondary replicas that must be in a synchronized state for a commit to complete.
     */
    private Integer requiredSynchronizedSecondariesToCommit;

    /*
     * Set to WSFC when availability group is on a failover cluster instance on a Windows Server failover cluster. Set
     * to NONE when availability group not using WSFC for cluster coordination.
     */
    private ClusterType clusterType;

    /*
     * The listener for the sql server availability group
     */
    private SqlAvailabilityGroupStaticIpListenerProperties listener;

    /**
     * Creates an instance of AvailabilityGroupCreateUpdateConfiguration class.
     */
    public AvailabilityGroupCreateUpdateConfiguration() {
    }

    /**
     * Get the availabilityGroupName property: Name of the availability group.
     * 
     * @return the availabilityGroupName value.
     */
    public String availabilityGroupName() {
        return this.availabilityGroupName;
    }

    /**
     * Set the availabilityGroupName property: Name of the availability group.
     * 
     * @param availabilityGroupName the availabilityGroupName value to set.
     * @return the AvailabilityGroupCreateUpdateConfiguration object itself.
     */
    public AvailabilityGroupCreateUpdateConfiguration withAvailabilityGroupName(String availabilityGroupName) {
        this.availabilityGroupName = availabilityGroupName;
        return this;
    }

    /**
     * Get the replicas property: List of availability group replicas.
     * 
     * @return the replicas value.
     */
    public List<AvailabilityGroupCreateUpdateReplicaConfiguration> replicas() {
        return this.replicas;
    }

    /**
     * Set the replicas property: List of availability group replicas.
     * 
     * @param replicas the replicas value to set.
     * @return the AvailabilityGroupCreateUpdateConfiguration object itself.
     */
    public AvailabilityGroupCreateUpdateConfiguration
        withReplicas(List<AvailabilityGroupCreateUpdateReplicaConfiguration> replicas) {
        this.replicas = replicas;
        return this;
    }

    /**
     * Get the databases property: List of databases to include in the availability group.
     * 
     * @return the databases value.
     */
    public List<String> databases() {
        return this.databases;
    }

    /**
     * Set the databases property: List of databases to include in the availability group.
     * 
     * @param databases the databases value to set.
     * @return the AvailabilityGroupCreateUpdateConfiguration object itself.
     */
    public AvailabilityGroupCreateUpdateConfiguration withDatabases(List<String> databases) {
        this.databases = databases;
        return this;
    }

    /**
     * Get the automatedBackupPreference property: Preferred replica for running automated backups.
     * 
     * @return the automatedBackupPreference value.
     */
    public AutomatedBackupPreference automatedBackupPreference() {
        return this.automatedBackupPreference;
    }

    /**
     * Set the automatedBackupPreference property: Preferred replica for running automated backups.
     * 
     * @param automatedBackupPreference the automatedBackupPreference value to set.
     * @return the AvailabilityGroupCreateUpdateConfiguration object itself.
     */
    public AvailabilityGroupCreateUpdateConfiguration
        withAutomatedBackupPreference(AutomatedBackupPreference automatedBackupPreference) {
        this.automatedBackupPreference = automatedBackupPreference;
        return this;
    }

    /**
     * Get the failureConditionLevel property: User-defined failure condition level under which an automatic failover
     * must be triggered.
     * 
     * @return the failureConditionLevel value.
     */
    public FailureConditionLevel failureConditionLevel() {
        return this.failureConditionLevel;
    }

    /**
     * Set the failureConditionLevel property: User-defined failure condition level under which an automatic failover
     * must be triggered.
     * 
     * @param failureConditionLevel the failureConditionLevel value to set.
     * @return the AvailabilityGroupCreateUpdateConfiguration object itself.
     */
    public AvailabilityGroupCreateUpdateConfiguration
        withFailureConditionLevel(FailureConditionLevel failureConditionLevel) {
        this.failureConditionLevel = failureConditionLevel;
        return this;
    }

    /**
     * Get the healthCheckTimeout property: Wait time (in milliseconds) for the sp_server_diagnostics system stored
     * procedure to return server-health information, before the server instance is assumed to be slow or not
     * responding.
     * 
     * @return the healthCheckTimeout value.
     */
    public Integer healthCheckTimeout() {
        return this.healthCheckTimeout;
    }

    /**
     * Set the healthCheckTimeout property: Wait time (in milliseconds) for the sp_server_diagnostics system stored
     * procedure to return server-health information, before the server instance is assumed to be slow or not
     * responding.
     * 
     * @param healthCheckTimeout the healthCheckTimeout value to set.
     * @return the AvailabilityGroupCreateUpdateConfiguration object itself.
     */
    public AvailabilityGroupCreateUpdateConfiguration withHealthCheckTimeout(Integer healthCheckTimeout) {
        this.healthCheckTimeout = healthCheckTimeout;
        return this;
    }

    /**
     * Get the dbFailover property: Specifies whether the availability group supports failover for database health
     * conditions.
     * 
     * @return the dbFailover value.
     */
    public DbFailover dbFailover() {
        return this.dbFailover;
    }

    /**
     * Set the dbFailover property: Specifies whether the availability group supports failover for database health
     * conditions.
     * 
     * @param dbFailover the dbFailover value to set.
     * @return the AvailabilityGroupCreateUpdateConfiguration object itself.
     */
    public AvailabilityGroupCreateUpdateConfiguration withDbFailover(DbFailover dbFailover) {
        this.dbFailover = dbFailover;
        return this;
    }

    /**
     * Get the dtcSupport property: Specifies whether DTC support has been enabled for this availability group.
     * 
     * @return the dtcSupport value.
     */
    public DtcSupport dtcSupport() {
        return this.dtcSupport;
    }

    /**
     * Set the dtcSupport property: Specifies whether DTC support has been enabled for this availability group.
     * 
     * @param dtcSupport the dtcSupport value to set.
     * @return the AvailabilityGroupCreateUpdateConfiguration object itself.
     */
    public AvailabilityGroupCreateUpdateConfiguration withDtcSupport(DtcSupport dtcSupport) {
        this.dtcSupport = dtcSupport;
        return this;
    }

    /**
     * Get the requiredSynchronizedSecondariesToCommit property: The number of secondary replicas that must be in a
     * synchronized state for a commit to complete.
     * 
     * @return the requiredSynchronizedSecondariesToCommit value.
     */
    public Integer requiredSynchronizedSecondariesToCommit() {
        return this.requiredSynchronizedSecondariesToCommit;
    }

    /**
     * Set the requiredSynchronizedSecondariesToCommit property: The number of secondary replicas that must be in a
     * synchronized state for a commit to complete.
     * 
     * @param requiredSynchronizedSecondariesToCommit the requiredSynchronizedSecondariesToCommit value to set.
     * @return the AvailabilityGroupCreateUpdateConfiguration object itself.
     */
    public AvailabilityGroupCreateUpdateConfiguration
        withRequiredSynchronizedSecondariesToCommit(Integer requiredSynchronizedSecondariesToCommit) {
        this.requiredSynchronizedSecondariesToCommit = requiredSynchronizedSecondariesToCommit;
        return this;
    }

    /**
     * Get the clusterType property: Set to WSFC when availability group is on a failover cluster instance on a Windows
     * Server failover cluster. Set to NONE when availability group not using WSFC for cluster coordination.
     * 
     * @return the clusterType value.
     */
    public ClusterType clusterType() {
        return this.clusterType;
    }

    /**
     * Set the clusterType property: Set to WSFC when availability group is on a failover cluster instance on a Windows
     * Server failover cluster. Set to NONE when availability group not using WSFC for cluster coordination.
     * 
     * @param clusterType the clusterType value to set.
     * @return the AvailabilityGroupCreateUpdateConfiguration object itself.
     */
    public AvailabilityGroupCreateUpdateConfiguration withClusterType(ClusterType clusterType) {
        this.clusterType = clusterType;
        return this;
    }

    /**
     * Get the listener property: The listener for the sql server availability group.
     * 
     * @return the listener value.
     */
    public SqlAvailabilityGroupStaticIpListenerProperties listener() {
        return this.listener;
    }

    /**
     * Set the listener property: The listener for the sql server availability group.
     * 
     * @param listener the listener value to set.
     * @return the AvailabilityGroupCreateUpdateConfiguration object itself.
     */
    public AvailabilityGroupCreateUpdateConfiguration
        withListener(SqlAvailabilityGroupStaticIpListenerProperties listener) {
        this.listener = listener;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (replicas() != null) {
            replicas().forEach(e -> e.validate());
        }
        if (listener() != null) {
            listener().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("availabilityGroupName", this.availabilityGroupName);
        jsonWriter.writeArrayField("replicas", this.replicas, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("databases", this.databases, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("automatedBackupPreference",
            this.automatedBackupPreference == null ? null : this.automatedBackupPreference.toString());
        jsonWriter.writeNumberField("failureConditionLevel",
            this.failureConditionLevel == null ? null : this.failureConditionLevel.toInt());
        jsonWriter.writeNumberField("healthCheckTimeout", this.healthCheckTimeout);
        jsonWriter.writeStringField("dbFailover", this.dbFailover == null ? null : this.dbFailover.toString());
        jsonWriter.writeStringField("dtcSupport", this.dtcSupport == null ? null : this.dtcSupport.toString());
        jsonWriter.writeNumberField("requiredSynchronizedSecondariesToCommit",
            this.requiredSynchronizedSecondariesToCommit);
        jsonWriter.writeStringField("clusterType", this.clusterType == null ? null : this.clusterType.toString());
        jsonWriter.writeJsonField("listener", this.listener);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AvailabilityGroupCreateUpdateConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AvailabilityGroupCreateUpdateConfiguration if the JsonReader was pointing to an instance
     * of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AvailabilityGroupCreateUpdateConfiguration.
     */
    public static AvailabilityGroupCreateUpdateConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AvailabilityGroupCreateUpdateConfiguration deserializedAvailabilityGroupCreateUpdateConfiguration
                = new AvailabilityGroupCreateUpdateConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("availabilityGroupName".equals(fieldName)) {
                    deserializedAvailabilityGroupCreateUpdateConfiguration.availabilityGroupName = reader.getString();
                } else if ("replicas".equals(fieldName)) {
                    List<AvailabilityGroupCreateUpdateReplicaConfiguration> replicas = reader
                        .readArray(reader1 -> AvailabilityGroupCreateUpdateReplicaConfiguration.fromJson(reader1));
                    deserializedAvailabilityGroupCreateUpdateConfiguration.replicas = replicas;
                } else if ("databases".equals(fieldName)) {
                    List<String> databases = reader.readArray(reader1 -> reader1.getString());
                    deserializedAvailabilityGroupCreateUpdateConfiguration.databases = databases;
                } else if ("automatedBackupPreference".equals(fieldName)) {
                    deserializedAvailabilityGroupCreateUpdateConfiguration.automatedBackupPreference
                        = AutomatedBackupPreference.fromString(reader.getString());
                } else if ("failureConditionLevel".equals(fieldName)) {
                    deserializedAvailabilityGroupCreateUpdateConfiguration.failureConditionLevel
                        = FailureConditionLevel.fromInt(reader.getInt());
                } else if ("healthCheckTimeout".equals(fieldName)) {
                    deserializedAvailabilityGroupCreateUpdateConfiguration.healthCheckTimeout
                        = reader.getNullable(JsonReader::getInt);
                } else if ("dbFailover".equals(fieldName)) {
                    deserializedAvailabilityGroupCreateUpdateConfiguration.dbFailover
                        = DbFailover.fromString(reader.getString());
                } else if ("dtcSupport".equals(fieldName)) {
                    deserializedAvailabilityGroupCreateUpdateConfiguration.dtcSupport
                        = DtcSupport.fromString(reader.getString());
                } else if ("requiredSynchronizedSecondariesToCommit".equals(fieldName)) {
                    deserializedAvailabilityGroupCreateUpdateConfiguration.requiredSynchronizedSecondariesToCommit
                        = reader.getNullable(JsonReader::getInt);
                } else if ("clusterType".equals(fieldName)) {
                    deserializedAvailabilityGroupCreateUpdateConfiguration.clusterType
                        = ClusterType.fromString(reader.getString());
                } else if ("listener".equals(fieldName)) {
                    deserializedAvailabilityGroupCreateUpdateConfiguration.listener
                        = SqlAvailabilityGroupStaticIpListenerProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAvailabilityGroupCreateUpdateConfiguration;
        });
    }
}
