// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurearcdata.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * The background job details.
 */
@Fluent
public final class BackgroundJob implements JsonSerializable<BackgroundJob> {
    /*
     * The state of the background job.
     */
    private State state;

    /*
     * The execution state of the background job.
     */
    private ExecutionState executionState;

    /*
     * The start time of the background job.
     */
    private OffsetDateTime startTime;

    /*
     * The end time of the background job.
     */
    private OffsetDateTime endTime;

    /*
     * The last execution status of the background job.
     */
    private LastExecutionStatus lastExecutionStatus;

    /*
     * The last execution time of the background job.
     */
    private OffsetDateTime lastExecutionTime;

    /**
     * Creates an instance of BackgroundJob class.
     */
    public BackgroundJob() {
    }

    /**
     * Get the state property: The state of the background job.
     * 
     * @return the state value.
     */
    public State state() {
        return this.state;
    }

    /**
     * Set the state property: The state of the background job.
     * 
     * @param state the state value to set.
     * @return the BackgroundJob object itself.
     */
    public BackgroundJob withState(State state) {
        this.state = state;
        return this;
    }

    /**
     * Get the executionState property: The execution state of the background job.
     * 
     * @return the executionState value.
     */
    public ExecutionState executionState() {
        return this.executionState;
    }

    /**
     * Set the executionState property: The execution state of the background job.
     * 
     * @param executionState the executionState value to set.
     * @return the BackgroundJob object itself.
     */
    public BackgroundJob withExecutionState(ExecutionState executionState) {
        this.executionState = executionState;
        return this;
    }

    /**
     * Get the startTime property: The start time of the background job.
     * 
     * @return the startTime value.
     */
    public OffsetDateTime startTime() {
        return this.startTime;
    }

    /**
     * Set the startTime property: The start time of the background job.
     * 
     * @param startTime the startTime value to set.
     * @return the BackgroundJob object itself.
     */
    public BackgroundJob withStartTime(OffsetDateTime startTime) {
        this.startTime = startTime;
        return this;
    }

    /**
     * Get the endTime property: The end time of the background job.
     * 
     * @return the endTime value.
     */
    public OffsetDateTime endTime() {
        return this.endTime;
    }

    /**
     * Set the endTime property: The end time of the background job.
     * 
     * @param endTime the endTime value to set.
     * @return the BackgroundJob object itself.
     */
    public BackgroundJob withEndTime(OffsetDateTime endTime) {
        this.endTime = endTime;
        return this;
    }

    /**
     * Get the lastExecutionStatus property: The last execution status of the background job.
     * 
     * @return the lastExecutionStatus value.
     */
    public LastExecutionStatus lastExecutionStatus() {
        return this.lastExecutionStatus;
    }

    /**
     * Set the lastExecutionStatus property: The last execution status of the background job.
     * 
     * @param lastExecutionStatus the lastExecutionStatus value to set.
     * @return the BackgroundJob object itself.
     */
    public BackgroundJob withLastExecutionStatus(LastExecutionStatus lastExecutionStatus) {
        this.lastExecutionStatus = lastExecutionStatus;
        return this;
    }

    /**
     * Get the lastExecutionTime property: The last execution time of the background job.
     * 
     * @return the lastExecutionTime value.
     */
    public OffsetDateTime lastExecutionTime() {
        return this.lastExecutionTime;
    }

    /**
     * Set the lastExecutionTime property: The last execution time of the background job.
     * 
     * @param lastExecutionTime the lastExecutionTime value to set.
     * @return the BackgroundJob object itself.
     */
    public BackgroundJob withLastExecutionTime(OffsetDateTime lastExecutionTime) {
        this.lastExecutionTime = lastExecutionTime;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("state", this.state == null ? null : this.state.toString());
        jsonWriter.writeStringField("executionState",
            this.executionState == null ? null : this.executionState.toString());
        jsonWriter.writeStringField("startTime",
            this.startTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.startTime));
        jsonWriter.writeStringField("endTime",
            this.endTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.endTime));
        jsonWriter.writeStringField("lastExecutionStatus",
            this.lastExecutionStatus == null ? null : this.lastExecutionStatus.toString());
        jsonWriter.writeStringField("lastExecutionTime",
            this.lastExecutionTime == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.lastExecutionTime));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BackgroundJob from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of BackgroundJob if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the BackgroundJob.
     */
    public static BackgroundJob fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BackgroundJob deserializedBackgroundJob = new BackgroundJob();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("state".equals(fieldName)) {
                    deserializedBackgroundJob.state = State.fromString(reader.getString());
                } else if ("executionState".equals(fieldName)) {
                    deserializedBackgroundJob.executionState = ExecutionState.fromString(reader.getString());
                } else if ("startTime".equals(fieldName)) {
                    deserializedBackgroundJob.startTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("endTime".equals(fieldName)) {
                    deserializedBackgroundJob.endTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("lastExecutionStatus".equals(fieldName)) {
                    deserializedBackgroundJob.lastExecutionStatus = LastExecutionStatus.fromString(reader.getString());
                } else if ("lastExecutionTime".equals(fieldName)) {
                    deserializedBackgroundJob.lastExecutionTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedBackgroundJob;
        });
    }
}
