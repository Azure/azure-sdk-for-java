// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurearcdata.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The specifications of the availability group state.
 */
@Fluent
public final class AvailabilityGroupInfo implements JsonSerializable<AvailabilityGroupInfo> {
    /*
     * User-defined failure condition level under which an automatic failover must be triggered.
     */
    private Integer failureConditionLevel;

    /*
     * Wait time (in milliseconds) for the sp_server_diagnostics system stored procedure to return server-health
     * information, before the server instance is assumed to be slow or not responding.
     */
    private Integer healthCheckTimeout;

    /*
     * Preferred location for performing backups on the availability databases in this availability group.
     */
    private String automatedBackupPreferenceDescription;

    /*
     * SQL Server availability group current version.
     */
    private Integer version;

    /*
     * Specifies whether this is a basic availability group.
     */
    private Boolean basicFeatures;

    /*
     * Specifies whether DTC support has been enabled for this availability group.
     */
    private Boolean dtcSupport;

    /*
     * Specifies whether the availability group supports failover for database health conditions.
     */
    private Boolean dbFailover;

    /*
     * Specifies whether this is a distributed availability group.
     */
    private Boolean isDistributed;

    /*
     * SQL Server availability group cluster type description
     */
    private String clusterTypeDescription;

    /*
     * The number of secondary replicas that must be in a synchronized state for a commit to complete.
     */
    private Integer requiredSynchronizedSecondariesToCommit;

    /*
     * SQL Server availability group contained system databases.
     */
    private Boolean isContained;

    /*
     * Name of the server instance that is hosting the current primary replica.
     */
    private String primaryReplica;

    /*
     * Indicates the recovery health of the primary replica.
     */
    private String primaryRecoveryHealthDescription;

    /*
     * Indicates the recovery health of a secondary replica.
     */
    private String secondaryRecoveryHealthDescription;

    /*
     * Reflects a roll-up of the synchronization health of all availability replicas in the availability group.
     */
    private String synchronizationHealthDescription;

    /*
     * The replicationPartnerType property.
     */
    private ReplicationPartnerType replicationPartnerType;

    /*
     * The listener for the sql server availability group
     */
    private SqlAvailabilityGroupStaticIpListenerProperties listener;

    /**
     * Creates an instance of AvailabilityGroupInfo class.
     */
    public AvailabilityGroupInfo() {
    }

    /**
     * Get the failureConditionLevel property: User-defined failure condition level under which an automatic failover
     * must be triggered.
     * 
     * @return the failureConditionLevel value.
     */
    public Integer failureConditionLevel() {
        return this.failureConditionLevel;
    }

    /**
     * Set the failureConditionLevel property: User-defined failure condition level under which an automatic failover
     * must be triggered.
     * 
     * @param failureConditionLevel the failureConditionLevel value to set.
     * @return the AvailabilityGroupInfo object itself.
     */
    public AvailabilityGroupInfo withFailureConditionLevel(Integer failureConditionLevel) {
        this.failureConditionLevel = failureConditionLevel;
        return this;
    }

    /**
     * Get the healthCheckTimeout property: Wait time (in milliseconds) for the sp_server_diagnostics system stored
     * procedure to return server-health information, before the server instance is assumed to be slow or not
     * responding.
     * 
     * @return the healthCheckTimeout value.
     */
    public Integer healthCheckTimeout() {
        return this.healthCheckTimeout;
    }

    /**
     * Set the healthCheckTimeout property: Wait time (in milliseconds) for the sp_server_diagnostics system stored
     * procedure to return server-health information, before the server instance is assumed to be slow or not
     * responding.
     * 
     * @param healthCheckTimeout the healthCheckTimeout value to set.
     * @return the AvailabilityGroupInfo object itself.
     */
    public AvailabilityGroupInfo withHealthCheckTimeout(Integer healthCheckTimeout) {
        this.healthCheckTimeout = healthCheckTimeout;
        return this;
    }

    /**
     * Get the automatedBackupPreferenceDescription property: Preferred location for performing backups on the
     * availability databases in this availability group.
     * 
     * @return the automatedBackupPreferenceDescription value.
     */
    public String automatedBackupPreferenceDescription() {
        return this.automatedBackupPreferenceDescription;
    }

    /**
     * Get the version property: SQL Server availability group current version.
     * 
     * @return the version value.
     */
    public Integer version() {
        return this.version;
    }

    /**
     * Get the basicFeatures property: Specifies whether this is a basic availability group.
     * 
     * @return the basicFeatures value.
     */
    public Boolean basicFeatures() {
        return this.basicFeatures;
    }

    /**
     * Set the basicFeatures property: Specifies whether this is a basic availability group.
     * 
     * @param basicFeatures the basicFeatures value to set.
     * @return the AvailabilityGroupInfo object itself.
     */
    public AvailabilityGroupInfo withBasicFeatures(Boolean basicFeatures) {
        this.basicFeatures = basicFeatures;
        return this;
    }

    /**
     * Get the dtcSupport property: Specifies whether DTC support has been enabled for this availability group.
     * 
     * @return the dtcSupport value.
     */
    public Boolean dtcSupport() {
        return this.dtcSupport;
    }

    /**
     * Set the dtcSupport property: Specifies whether DTC support has been enabled for this availability group.
     * 
     * @param dtcSupport the dtcSupport value to set.
     * @return the AvailabilityGroupInfo object itself.
     */
    public AvailabilityGroupInfo withDtcSupport(Boolean dtcSupport) {
        this.dtcSupport = dtcSupport;
        return this;
    }

    /**
     * Get the dbFailover property: Specifies whether the availability group supports failover for database health
     * conditions.
     * 
     * @return the dbFailover value.
     */
    public Boolean dbFailover() {
        return this.dbFailover;
    }

    /**
     * Set the dbFailover property: Specifies whether the availability group supports failover for database health
     * conditions.
     * 
     * @param dbFailover the dbFailover value to set.
     * @return the AvailabilityGroupInfo object itself.
     */
    public AvailabilityGroupInfo withDbFailover(Boolean dbFailover) {
        this.dbFailover = dbFailover;
        return this;
    }

    /**
     * Get the isDistributed property: Specifies whether this is a distributed availability group.
     * 
     * @return the isDistributed value.
     */
    public Boolean isDistributed() {
        return this.isDistributed;
    }

    /**
     * Set the isDistributed property: Specifies whether this is a distributed availability group.
     * 
     * @param isDistributed the isDistributed value to set.
     * @return the AvailabilityGroupInfo object itself.
     */
    public AvailabilityGroupInfo withIsDistributed(Boolean isDistributed) {
        this.isDistributed = isDistributed;
        return this;
    }

    /**
     * Get the clusterTypeDescription property: SQL Server availability group cluster type description.
     * 
     * @return the clusterTypeDescription value.
     */
    public String clusterTypeDescription() {
        return this.clusterTypeDescription;
    }

    /**
     * Get the requiredSynchronizedSecondariesToCommit property: The number of secondary replicas that must be in a
     * synchronized state for a commit to complete.
     * 
     * @return the requiredSynchronizedSecondariesToCommit value.
     */
    public Integer requiredSynchronizedSecondariesToCommit() {
        return this.requiredSynchronizedSecondariesToCommit;
    }

    /**
     * Set the requiredSynchronizedSecondariesToCommit property: The number of secondary replicas that must be in a
     * synchronized state for a commit to complete.
     * 
     * @param requiredSynchronizedSecondariesToCommit the requiredSynchronizedSecondariesToCommit value to set.
     * @return the AvailabilityGroupInfo object itself.
     */
    public AvailabilityGroupInfo
        withRequiredSynchronizedSecondariesToCommit(Integer requiredSynchronizedSecondariesToCommit) {
        this.requiredSynchronizedSecondariesToCommit = requiredSynchronizedSecondariesToCommit;
        return this;
    }

    /**
     * Get the isContained property: SQL Server availability group contained system databases.
     * 
     * @return the isContained value.
     */
    public Boolean isContained() {
        return this.isContained;
    }

    /**
     * Set the isContained property: SQL Server availability group contained system databases.
     * 
     * @param isContained the isContained value to set.
     * @return the AvailabilityGroupInfo object itself.
     */
    public AvailabilityGroupInfo withIsContained(Boolean isContained) {
        this.isContained = isContained;
        return this;
    }

    /**
     * Get the primaryReplica property: Name of the server instance that is hosting the current primary replica.
     * 
     * @return the primaryReplica value.
     */
    public String primaryReplica() {
        return this.primaryReplica;
    }

    /**
     * Get the primaryRecoveryHealthDescription property: Indicates the recovery health of the primary replica.
     * 
     * @return the primaryRecoveryHealthDescription value.
     */
    public String primaryRecoveryHealthDescription() {
        return this.primaryRecoveryHealthDescription;
    }

    /**
     * Get the secondaryRecoveryHealthDescription property: Indicates the recovery health of a secondary replica.
     * 
     * @return the secondaryRecoveryHealthDescription value.
     */
    public String secondaryRecoveryHealthDescription() {
        return this.secondaryRecoveryHealthDescription;
    }

    /**
     * Get the synchronizationHealthDescription property: Reflects a roll-up of the synchronization health of all
     * availability replicas in the availability group.
     * 
     * @return the synchronizationHealthDescription value.
     */
    public String synchronizationHealthDescription() {
        return this.synchronizationHealthDescription;
    }

    /**
     * Get the replicationPartnerType property: The replicationPartnerType property.
     * 
     * @return the replicationPartnerType value.
     */
    public ReplicationPartnerType replicationPartnerType() {
        return this.replicationPartnerType;
    }

    /**
     * Get the listener property: The listener for the sql server availability group.
     * 
     * @return the listener value.
     */
    public SqlAvailabilityGroupStaticIpListenerProperties listener() {
        return this.listener;
    }

    /**
     * Set the listener property: The listener for the sql server availability group.
     * 
     * @param listener the listener value to set.
     * @return the AvailabilityGroupInfo object itself.
     */
    public AvailabilityGroupInfo withListener(SqlAvailabilityGroupStaticIpListenerProperties listener) {
        this.listener = listener;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (listener() != null) {
            listener().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("failureConditionLevel", this.failureConditionLevel);
        jsonWriter.writeNumberField("healthCheckTimeout", this.healthCheckTimeout);
        jsonWriter.writeBooleanField("basicFeatures", this.basicFeatures);
        jsonWriter.writeBooleanField("dtcSupport", this.dtcSupport);
        jsonWriter.writeBooleanField("dbFailover", this.dbFailover);
        jsonWriter.writeBooleanField("isDistributed", this.isDistributed);
        jsonWriter.writeNumberField("requiredSynchronizedSecondariesToCommit",
            this.requiredSynchronizedSecondariesToCommit);
        jsonWriter.writeBooleanField("isContained", this.isContained);
        jsonWriter.writeJsonField("listener", this.listener);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AvailabilityGroupInfo from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AvailabilityGroupInfo if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AvailabilityGroupInfo.
     */
    public static AvailabilityGroupInfo fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AvailabilityGroupInfo deserializedAvailabilityGroupInfo = new AvailabilityGroupInfo();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("failureConditionLevel".equals(fieldName)) {
                    deserializedAvailabilityGroupInfo.failureConditionLevel = reader.getNullable(JsonReader::getInt);
                } else if ("healthCheckTimeout".equals(fieldName)) {
                    deserializedAvailabilityGroupInfo.healthCheckTimeout = reader.getNullable(JsonReader::getInt);
                } else if ("automatedBackupPreferenceDescription".equals(fieldName)) {
                    deserializedAvailabilityGroupInfo.automatedBackupPreferenceDescription = reader.getString();
                } else if ("version".equals(fieldName)) {
                    deserializedAvailabilityGroupInfo.version = reader.getNullable(JsonReader::getInt);
                } else if ("basicFeatures".equals(fieldName)) {
                    deserializedAvailabilityGroupInfo.basicFeatures = reader.getNullable(JsonReader::getBoolean);
                } else if ("dtcSupport".equals(fieldName)) {
                    deserializedAvailabilityGroupInfo.dtcSupport = reader.getNullable(JsonReader::getBoolean);
                } else if ("dbFailover".equals(fieldName)) {
                    deserializedAvailabilityGroupInfo.dbFailover = reader.getNullable(JsonReader::getBoolean);
                } else if ("isDistributed".equals(fieldName)) {
                    deserializedAvailabilityGroupInfo.isDistributed = reader.getNullable(JsonReader::getBoolean);
                } else if ("clusterTypeDescription".equals(fieldName)) {
                    deserializedAvailabilityGroupInfo.clusterTypeDescription = reader.getString();
                } else if ("requiredSynchronizedSecondariesToCommit".equals(fieldName)) {
                    deserializedAvailabilityGroupInfo.requiredSynchronizedSecondariesToCommit
                        = reader.getNullable(JsonReader::getInt);
                } else if ("isContained".equals(fieldName)) {
                    deserializedAvailabilityGroupInfo.isContained = reader.getNullable(JsonReader::getBoolean);
                } else if ("primaryReplica".equals(fieldName)) {
                    deserializedAvailabilityGroupInfo.primaryReplica = reader.getString();
                } else if ("primaryRecoveryHealthDescription".equals(fieldName)) {
                    deserializedAvailabilityGroupInfo.primaryRecoveryHealthDescription = reader.getString();
                } else if ("secondaryRecoveryHealthDescription".equals(fieldName)) {
                    deserializedAvailabilityGroupInfo.secondaryRecoveryHealthDescription = reader.getString();
                } else if ("synchronizationHealthDescription".equals(fieldName)) {
                    deserializedAvailabilityGroupInfo.synchronizationHealthDescription = reader.getString();
                } else if ("replicationPartnerType".equals(fieldName)) {
                    deserializedAvailabilityGroupInfo.replicationPartnerType
                        = ReplicationPartnerType.fromString(reader.getString());
                } else if ("listener".equals(fieldName)) {
                    deserializedAvailabilityGroupInfo.listener
                        = SqlAvailabilityGroupStaticIpListenerProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAvailabilityGroupInfo;
        });
    }
}
