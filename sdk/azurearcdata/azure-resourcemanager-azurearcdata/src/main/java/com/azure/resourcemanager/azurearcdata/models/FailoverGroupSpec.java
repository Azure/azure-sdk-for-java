// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurearcdata.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.LinkedHashMap;
import java.util.Map;

/**
 * The specifications of the failover group resource.
 */
@Fluent
public final class FailoverGroupSpec implements JsonSerializable<FailoverGroupSpec> {
    /*
     * The shared name of the failover group for this SQL managed instance. Both SQL managed instance and its partner
     * have to use the same shared name.
     */
    private String sharedName;

    /*
     * The name of the SQL managed instance with this failover group role.
     */
    private String sourceMI;

    /*
     * The name of the partner SQL managed instance.
     */
    private String partnerMI;

    /*
     * The mirroring endpoint URL of the partner SQL managed instance.
     */
    private String partnerMirroringUrl;

    /*
     * The mirroring endpoint public certificate for the partner SQL managed instance. Only PEM format is supported.
     */
    private String partnerMirroringCert;

    /*
     * The partner sync mode of the SQL managed instance.
     */
    private FailoverGroupPartnerSyncMode partnerSyncMode;

    /*
     * The role of the SQL managed instance in this failover group.
     */
    private InstanceFailoverGroupRole role;

    /*
     * The specifications of the failover group resource.
     */
    private Map<String, Object> additionalProperties;

    /**
     * Creates an instance of FailoverGroupSpec class.
     */
    public FailoverGroupSpec() {
    }

    /**
     * Get the sharedName property: The shared name of the failover group for this SQL managed instance. Both SQL
     * managed instance and its partner have to use the same shared name.
     * 
     * @return the sharedName value.
     */
    public String sharedName() {
        return this.sharedName;
    }

    /**
     * Set the sharedName property: The shared name of the failover group for this SQL managed instance. Both SQL
     * managed instance and its partner have to use the same shared name.
     * 
     * @param sharedName the sharedName value to set.
     * @return the FailoverGroupSpec object itself.
     */
    public FailoverGroupSpec withSharedName(String sharedName) {
        this.sharedName = sharedName;
        return this;
    }

    /**
     * Get the sourceMI property: The name of the SQL managed instance with this failover group role.
     * 
     * @return the sourceMI value.
     */
    public String sourceMI() {
        return this.sourceMI;
    }

    /**
     * Set the sourceMI property: The name of the SQL managed instance with this failover group role.
     * 
     * @param sourceMI the sourceMI value to set.
     * @return the FailoverGroupSpec object itself.
     */
    public FailoverGroupSpec withSourceMI(String sourceMI) {
        this.sourceMI = sourceMI;
        return this;
    }

    /**
     * Get the partnerMI property: The name of the partner SQL managed instance.
     * 
     * @return the partnerMI value.
     */
    public String partnerMI() {
        return this.partnerMI;
    }

    /**
     * Set the partnerMI property: The name of the partner SQL managed instance.
     * 
     * @param partnerMI the partnerMI value to set.
     * @return the FailoverGroupSpec object itself.
     */
    public FailoverGroupSpec withPartnerMI(String partnerMI) {
        this.partnerMI = partnerMI;
        return this;
    }

    /**
     * Get the partnerMirroringUrl property: The mirroring endpoint URL of the partner SQL managed instance.
     * 
     * @return the partnerMirroringUrl value.
     */
    public String partnerMirroringUrl() {
        return this.partnerMirroringUrl;
    }

    /**
     * Set the partnerMirroringUrl property: The mirroring endpoint URL of the partner SQL managed instance.
     * 
     * @param partnerMirroringUrl the partnerMirroringUrl value to set.
     * @return the FailoverGroupSpec object itself.
     */
    public FailoverGroupSpec withPartnerMirroringUrl(String partnerMirroringUrl) {
        this.partnerMirroringUrl = partnerMirroringUrl;
        return this;
    }

    /**
     * Get the partnerMirroringCert property: The mirroring endpoint public certificate for the partner SQL managed
     * instance. Only PEM format is supported.
     * 
     * @return the partnerMirroringCert value.
     */
    public String partnerMirroringCert() {
        return this.partnerMirroringCert;
    }

    /**
     * Set the partnerMirroringCert property: The mirroring endpoint public certificate for the partner SQL managed
     * instance. Only PEM format is supported.
     * 
     * @param partnerMirroringCert the partnerMirroringCert value to set.
     * @return the FailoverGroupSpec object itself.
     */
    public FailoverGroupSpec withPartnerMirroringCert(String partnerMirroringCert) {
        this.partnerMirroringCert = partnerMirroringCert;
        return this;
    }

    /**
     * Get the partnerSyncMode property: The partner sync mode of the SQL managed instance.
     * 
     * @return the partnerSyncMode value.
     */
    public FailoverGroupPartnerSyncMode partnerSyncMode() {
        return this.partnerSyncMode;
    }

    /**
     * Set the partnerSyncMode property: The partner sync mode of the SQL managed instance.
     * 
     * @param partnerSyncMode the partnerSyncMode value to set.
     * @return the FailoverGroupSpec object itself.
     */
    public FailoverGroupSpec withPartnerSyncMode(FailoverGroupPartnerSyncMode partnerSyncMode) {
        this.partnerSyncMode = partnerSyncMode;
        return this;
    }

    /**
     * Get the role property: The role of the SQL managed instance in this failover group.
     * 
     * @return the role value.
     */
    public InstanceFailoverGroupRole role() {
        return this.role;
    }

    /**
     * Set the role property: The role of the SQL managed instance in this failover group.
     * 
     * @param role the role value to set.
     * @return the FailoverGroupSpec object itself.
     */
    public FailoverGroupSpec withRole(InstanceFailoverGroupRole role) {
        this.role = role;
        return this;
    }

    /**
     * Get the additionalProperties property: The specifications of the failover group resource.
     * 
     * @return the additionalProperties value.
     */
    public Map<String, Object> additionalProperties() {
        return this.additionalProperties;
    }

    /**
     * Set the additionalProperties property: The specifications of the failover group resource.
     * 
     * @param additionalProperties the additionalProperties value to set.
     * @return the FailoverGroupSpec object itself.
     */
    public FailoverGroupSpec withAdditionalProperties(Map<String, Object> additionalProperties) {
        this.additionalProperties = additionalProperties;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (role() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property role in model FailoverGroupSpec"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(FailoverGroupSpec.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("role", this.role == null ? null : this.role.toString());
        jsonWriter.writeStringField("sharedName", this.sharedName);
        jsonWriter.writeStringField("sourceMI", this.sourceMI);
        jsonWriter.writeStringField("partnerMI", this.partnerMI);
        jsonWriter.writeStringField("partnerMirroringURL", this.partnerMirroringUrl);
        jsonWriter.writeStringField("partnerMirroringCert", this.partnerMirroringCert);
        jsonWriter.writeStringField("partnerSyncMode",
            this.partnerSyncMode == null ? null : this.partnerSyncMode.toString());
        if (additionalProperties != null) {
            for (Map.Entry<String, Object> additionalProperty : additionalProperties.entrySet()) {
                jsonWriter.writeUntypedField(additionalProperty.getKey(), additionalProperty.getValue());
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FailoverGroupSpec from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FailoverGroupSpec if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the FailoverGroupSpec.
     */
    public static FailoverGroupSpec fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FailoverGroupSpec deserializedFailoverGroupSpec = new FailoverGroupSpec();
            Map<String, Object> additionalProperties = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("role".equals(fieldName)) {
                    deserializedFailoverGroupSpec.role = InstanceFailoverGroupRole.fromString(reader.getString());
                } else if ("sharedName".equals(fieldName)) {
                    deserializedFailoverGroupSpec.sharedName = reader.getString();
                } else if ("sourceMI".equals(fieldName)) {
                    deserializedFailoverGroupSpec.sourceMI = reader.getString();
                } else if ("partnerMI".equals(fieldName)) {
                    deserializedFailoverGroupSpec.partnerMI = reader.getString();
                } else if ("partnerMirroringURL".equals(fieldName)) {
                    deserializedFailoverGroupSpec.partnerMirroringUrl = reader.getString();
                } else if ("partnerMirroringCert".equals(fieldName)) {
                    deserializedFailoverGroupSpec.partnerMirroringCert = reader.getString();
                } else if ("partnerSyncMode".equals(fieldName)) {
                    deserializedFailoverGroupSpec.partnerSyncMode
                        = FailoverGroupPartnerSyncMode.fromString(reader.getString());
                } else {
                    if (additionalProperties == null) {
                        additionalProperties = new LinkedHashMap<>();
                    }

                    additionalProperties.put(fieldName, reader.readUntyped());
                }
            }
            deserializedFailoverGroupSpec.additionalProperties = additionalProperties;

            return deserializedFailoverGroupSpec;
        });
    }
}
