// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurearcdata.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.azurearcdata.fluent.FailoverGroupsClient;
import com.azure.resourcemanager.azurearcdata.fluent.models.FailoverGroupResourceInner;
import com.azure.resourcemanager.azurearcdata.models.FailoverGroupResource;
import com.azure.resourcemanager.azurearcdata.models.FailoverGroups;

public final class FailoverGroupsImpl implements FailoverGroups {
    private static final ClientLogger LOGGER = new ClientLogger(FailoverGroupsImpl.class);

    private final FailoverGroupsClient innerClient;

    private final com.azure.resourcemanager.azurearcdata.AzureArcDataManager serviceManager;

    public FailoverGroupsImpl(FailoverGroupsClient innerClient,
        com.azure.resourcemanager.azurearcdata.AzureArcDataManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<FailoverGroupResource> list(String resourceGroupName, String sqlManagedInstanceName) {
        PagedIterable<FailoverGroupResourceInner> inner
            = this.serviceClient().list(resourceGroupName, sqlManagedInstanceName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new FailoverGroupResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<FailoverGroupResource> list(String resourceGroupName, String sqlManagedInstanceName,
        Context context) {
        PagedIterable<FailoverGroupResourceInner> inner
            = this.serviceClient().list(resourceGroupName, sqlManagedInstanceName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new FailoverGroupResourceImpl(inner1, this.manager()));
    }

    public void delete(String resourceGroupName, String sqlManagedInstanceName, String failoverGroupName) {
        this.serviceClient().delete(resourceGroupName, sqlManagedInstanceName, failoverGroupName);
    }

    public void delete(String resourceGroupName, String sqlManagedInstanceName, String failoverGroupName,
        Context context) {
        this.serviceClient().delete(resourceGroupName, sqlManagedInstanceName, failoverGroupName, context);
    }

    public Response<FailoverGroupResource> getWithResponse(String resourceGroupName, String sqlManagedInstanceName,
        String failoverGroupName, Context context) {
        Response<FailoverGroupResourceInner> inner = this.serviceClient()
            .getWithResponse(resourceGroupName, sqlManagedInstanceName, failoverGroupName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new FailoverGroupResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public FailoverGroupResource get(String resourceGroupName, String sqlManagedInstanceName,
        String failoverGroupName) {
        FailoverGroupResourceInner inner
            = this.serviceClient().get(resourceGroupName, sqlManagedInstanceName, failoverGroupName);
        if (inner != null) {
            return new FailoverGroupResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public FailoverGroupResource getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String sqlManagedInstanceName = ResourceManagerUtils.getValueFromIdByName(id, "sqlManagedInstances");
        if (sqlManagedInstanceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'sqlManagedInstances'.", id)));
        }
        String failoverGroupName = ResourceManagerUtils.getValueFromIdByName(id, "failoverGroups");
        if (failoverGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'failoverGroups'.", id)));
        }
        return this.getWithResponse(resourceGroupName, sqlManagedInstanceName, failoverGroupName, Context.NONE)
            .getValue();
    }

    public Response<FailoverGroupResource> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String sqlManagedInstanceName = ResourceManagerUtils.getValueFromIdByName(id, "sqlManagedInstances");
        if (sqlManagedInstanceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'sqlManagedInstances'.", id)));
        }
        String failoverGroupName = ResourceManagerUtils.getValueFromIdByName(id, "failoverGroups");
        if (failoverGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'failoverGroups'.", id)));
        }
        return this.getWithResponse(resourceGroupName, sqlManagedInstanceName, failoverGroupName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String sqlManagedInstanceName = ResourceManagerUtils.getValueFromIdByName(id, "sqlManagedInstances");
        if (sqlManagedInstanceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'sqlManagedInstances'.", id)));
        }
        String failoverGroupName = ResourceManagerUtils.getValueFromIdByName(id, "failoverGroups");
        if (failoverGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'failoverGroups'.", id)));
        }
        this.delete(resourceGroupName, sqlManagedInstanceName, failoverGroupName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String sqlManagedInstanceName = ResourceManagerUtils.getValueFromIdByName(id, "sqlManagedInstances");
        if (sqlManagedInstanceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'sqlManagedInstances'.", id)));
        }
        String failoverGroupName = ResourceManagerUtils.getValueFromIdByName(id, "failoverGroups");
        if (failoverGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'failoverGroups'.", id)));
        }
        this.delete(resourceGroupName, sqlManagedInstanceName, failoverGroupName, context);
    }

    private FailoverGroupsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.azurearcdata.AzureArcDataManager manager() {
        return this.serviceManager;
    }

    public FailoverGroupResourceImpl define(String name) {
        return new FailoverGroupResourceImpl(name, this.manager());
    }
}
