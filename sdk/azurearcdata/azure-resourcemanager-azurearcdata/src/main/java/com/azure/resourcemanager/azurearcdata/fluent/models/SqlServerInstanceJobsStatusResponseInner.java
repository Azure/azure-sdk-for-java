// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurearcdata.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.azurearcdata.models.SqlServerInstanceJobStatus;
import java.io.IOException;
import java.util.List;

/**
 * The response for the status of the jobs running on the SQL Server instance.
 */
@Fluent
public final class SqlServerInstanceJobsStatusResponseInner
    implements JsonSerializable<SqlServerInstanceJobsStatusResponseInner> {
    /*
     * The list of jobs status running on the SQL Server instance.
     */
    private List<SqlServerInstanceJobStatus> jobsStatus;

    /**
     * Creates an instance of SqlServerInstanceJobsStatusResponseInner class.
     */
    public SqlServerInstanceJobsStatusResponseInner() {
    }

    /**
     * Get the jobsStatus property: The list of jobs status running on the SQL Server instance.
     * 
     * @return the jobsStatus value.
     */
    public List<SqlServerInstanceJobStatus> jobsStatus() {
        return this.jobsStatus;
    }

    /**
     * Set the jobsStatus property: The list of jobs status running on the SQL Server instance.
     * 
     * @param jobsStatus the jobsStatus value to set.
     * @return the SqlServerInstanceJobsStatusResponseInner object itself.
     */
    public SqlServerInstanceJobsStatusResponseInner withJobsStatus(List<SqlServerInstanceJobStatus> jobsStatus) {
        this.jobsStatus = jobsStatus;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (jobsStatus() != null) {
            jobsStatus().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("jobsStatus", this.jobsStatus, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SqlServerInstanceJobsStatusResponseInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SqlServerInstanceJobsStatusResponseInner if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SqlServerInstanceJobsStatusResponseInner.
     */
    public static SqlServerInstanceJobsStatusResponseInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SqlServerInstanceJobsStatusResponseInner deserializedSqlServerInstanceJobsStatusResponseInner
                = new SqlServerInstanceJobsStatusResponseInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("jobsStatus".equals(fieldName)) {
                    List<SqlServerInstanceJobStatus> jobsStatus
                        = reader.readArray(reader1 -> SqlServerInstanceJobStatus.fromJson(reader1));
                    deserializedSqlServerInstanceJobsStatusResponseInner.jobsStatus = jobsStatus;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSqlServerInstanceJobsStatusResponseInner;
        });
    }
}
