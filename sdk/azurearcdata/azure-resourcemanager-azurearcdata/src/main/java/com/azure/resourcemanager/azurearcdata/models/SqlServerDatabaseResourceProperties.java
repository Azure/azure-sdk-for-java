// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurearcdata.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * The properties of Arc Sql Server database resource.
 */
@Fluent
public final class SqlServerDatabaseResourceProperties
    implements JsonSerializable<SqlServerDatabaseResourceProperties> {
    /*
     * Collation of the database.
     */
    private String collationName;

    /*
     * Creation date of the database.
     */
    private OffsetDateTime databaseCreationDate;

    /*
     * Compatibility level of the database
     */
    private Integer compatibilityLevel;

    /*
     * Size of the database.
     */
    private Float sizeMB;

    /*
     * Total size in MB for the log (ldf) files for this database.
     */
    private Float logFileSizeMB;

    /*
     * Total size in MB for the data (mdf and ndf) files for this database.
     */
    private Float dataFileSizeMB;

    /*
     * Space left of the database.
     */
    private Float spaceAvailableMB;

    /*
     * State of the database.
     */
    private DatabaseState state;

    /*
     * Whether the database is read only or not.
     */
    private Boolean isReadOnly;

    /*
     * Status of the database.
     */
    private RecoveryMode recoveryMode;

    /*
     * List of features that are enabled for the database
     */
    private SqlServerDatabaseResourcePropertiesDatabaseOptions databaseOptions;

    /*
     * The backupInformation property.
     */
    private SqlServerDatabaseResourcePropertiesBackupInformation backupInformation;

    /*
     * The backup profile for the SQL server.
     */
    private BackupPolicy backupPolicy;

    /*
     * This records the earliest start date and time that restore is available for this database (ISO8601 format).
     */
    private OffsetDateTime earliestRestoreDate;

    /*
     * Database create mode. PointInTimeRestore: Create a database by restoring a point in time backup of an existing
     * database. sourceDatabaseId and restorePointInTime must be specified.
     */
    private DatabaseCreateMode createMode;

    /*
     * The name of the source database associated with create operation of this database.
     */
    private String sourceDatabaseId;

    /*
     * The unique ID of the hybrid machine that this resource belongs to.
     */
    private String vmId;

    /*
     * Conditional. If createMode is PointInTimeRestore, this value is required. Specifies the point in time (ISO8601
     * format) of the source database that will be restored to create the new database.
     */
    private OffsetDateTime restorePointInTime;

    /*
     * The provisioning state of the Arc-enabled SQL Server database resource.
     */
    private String provisioningState;

    /*
     * The time when last successful database upload was performed.
     */
    private OffsetDateTime lastDatabaseUploadTime;

    /*
     * Migration related configuration.
     */
    private DataBaseMigration migration;

    /**
     * Creates an instance of SqlServerDatabaseResourceProperties class.
     */
    public SqlServerDatabaseResourceProperties() {
    }

    /**
     * Get the collationName property: Collation of the database.
     * 
     * @return the collationName value.
     */
    public String collationName() {
        return this.collationName;
    }

    /**
     * Set the collationName property: Collation of the database.
     * 
     * @param collationName the collationName value to set.
     * @return the SqlServerDatabaseResourceProperties object itself.
     */
    public SqlServerDatabaseResourceProperties withCollationName(String collationName) {
        this.collationName = collationName;
        return this;
    }

    /**
     * Get the databaseCreationDate property: Creation date of the database.
     * 
     * @return the databaseCreationDate value.
     */
    public OffsetDateTime databaseCreationDate() {
        return this.databaseCreationDate;
    }

    /**
     * Set the databaseCreationDate property: Creation date of the database.
     * 
     * @param databaseCreationDate the databaseCreationDate value to set.
     * @return the SqlServerDatabaseResourceProperties object itself.
     */
    public SqlServerDatabaseResourceProperties withDatabaseCreationDate(OffsetDateTime databaseCreationDate) {
        this.databaseCreationDate = databaseCreationDate;
        return this;
    }

    /**
     * Get the compatibilityLevel property: Compatibility level of the database.
     * 
     * @return the compatibilityLevel value.
     */
    public Integer compatibilityLevel() {
        return this.compatibilityLevel;
    }

    /**
     * Set the compatibilityLevel property: Compatibility level of the database.
     * 
     * @param compatibilityLevel the compatibilityLevel value to set.
     * @return the SqlServerDatabaseResourceProperties object itself.
     */
    public SqlServerDatabaseResourceProperties withCompatibilityLevel(Integer compatibilityLevel) {
        this.compatibilityLevel = compatibilityLevel;
        return this;
    }

    /**
     * Get the sizeMB property: Size of the database.
     * 
     * @return the sizeMB value.
     */
    public Float sizeMB() {
        return this.sizeMB;
    }

    /**
     * Set the sizeMB property: Size of the database.
     * 
     * @param sizeMB the sizeMB value to set.
     * @return the SqlServerDatabaseResourceProperties object itself.
     */
    public SqlServerDatabaseResourceProperties withSizeMB(Float sizeMB) {
        this.sizeMB = sizeMB;
        return this;
    }

    /**
     * Get the logFileSizeMB property: Total size in MB for the log (ldf) files for this database.
     * 
     * @return the logFileSizeMB value.
     */
    public Float logFileSizeMB() {
        return this.logFileSizeMB;
    }

    /**
     * Set the logFileSizeMB property: Total size in MB for the log (ldf) files for this database.
     * 
     * @param logFileSizeMB the logFileSizeMB value to set.
     * @return the SqlServerDatabaseResourceProperties object itself.
     */
    public SqlServerDatabaseResourceProperties withLogFileSizeMB(Float logFileSizeMB) {
        this.logFileSizeMB = logFileSizeMB;
        return this;
    }

    /**
     * Get the dataFileSizeMB property: Total size in MB for the data (mdf and ndf) files for this database.
     * 
     * @return the dataFileSizeMB value.
     */
    public Float dataFileSizeMB() {
        return this.dataFileSizeMB;
    }

    /**
     * Set the dataFileSizeMB property: Total size in MB for the data (mdf and ndf) files for this database.
     * 
     * @param dataFileSizeMB the dataFileSizeMB value to set.
     * @return the SqlServerDatabaseResourceProperties object itself.
     */
    public SqlServerDatabaseResourceProperties withDataFileSizeMB(Float dataFileSizeMB) {
        this.dataFileSizeMB = dataFileSizeMB;
        return this;
    }

    /**
     * Get the spaceAvailableMB property: Space left of the database.
     * 
     * @return the spaceAvailableMB value.
     */
    public Float spaceAvailableMB() {
        return this.spaceAvailableMB;
    }

    /**
     * Set the spaceAvailableMB property: Space left of the database.
     * 
     * @param spaceAvailableMB the spaceAvailableMB value to set.
     * @return the SqlServerDatabaseResourceProperties object itself.
     */
    public SqlServerDatabaseResourceProperties withSpaceAvailableMB(Float spaceAvailableMB) {
        this.spaceAvailableMB = spaceAvailableMB;
        return this;
    }

    /**
     * Get the state property: State of the database.
     * 
     * @return the state value.
     */
    public DatabaseState state() {
        return this.state;
    }

    /**
     * Set the state property: State of the database.
     * 
     * @param state the state value to set.
     * @return the SqlServerDatabaseResourceProperties object itself.
     */
    public SqlServerDatabaseResourceProperties withState(DatabaseState state) {
        this.state = state;
        return this;
    }

    /**
     * Get the isReadOnly property: Whether the database is read only or not.
     * 
     * @return the isReadOnly value.
     */
    public Boolean isReadOnly() {
        return this.isReadOnly;
    }

    /**
     * Set the isReadOnly property: Whether the database is read only or not.
     * 
     * @param isReadOnly the isReadOnly value to set.
     * @return the SqlServerDatabaseResourceProperties object itself.
     */
    public SqlServerDatabaseResourceProperties withIsReadOnly(Boolean isReadOnly) {
        this.isReadOnly = isReadOnly;
        return this;
    }

    /**
     * Get the recoveryMode property: Status of the database.
     * 
     * @return the recoveryMode value.
     */
    public RecoveryMode recoveryMode() {
        return this.recoveryMode;
    }

    /**
     * Set the recoveryMode property: Status of the database.
     * 
     * @param recoveryMode the recoveryMode value to set.
     * @return the SqlServerDatabaseResourceProperties object itself.
     */
    public SqlServerDatabaseResourceProperties withRecoveryMode(RecoveryMode recoveryMode) {
        this.recoveryMode = recoveryMode;
        return this;
    }

    /**
     * Get the databaseOptions property: List of features that are enabled for the database.
     * 
     * @return the databaseOptions value.
     */
    public SqlServerDatabaseResourcePropertiesDatabaseOptions databaseOptions() {
        return this.databaseOptions;
    }

    /**
     * Set the databaseOptions property: List of features that are enabled for the database.
     * 
     * @param databaseOptions the databaseOptions value to set.
     * @return the SqlServerDatabaseResourceProperties object itself.
     */
    public SqlServerDatabaseResourceProperties
        withDatabaseOptions(SqlServerDatabaseResourcePropertiesDatabaseOptions databaseOptions) {
        this.databaseOptions = databaseOptions;
        return this;
    }

    /**
     * Get the backupInformation property: The backupInformation property.
     * 
     * @return the backupInformation value.
     */
    public SqlServerDatabaseResourcePropertiesBackupInformation backupInformation() {
        return this.backupInformation;
    }

    /**
     * Set the backupInformation property: The backupInformation property.
     * 
     * @param backupInformation the backupInformation value to set.
     * @return the SqlServerDatabaseResourceProperties object itself.
     */
    public SqlServerDatabaseResourceProperties
        withBackupInformation(SqlServerDatabaseResourcePropertiesBackupInformation backupInformation) {
        this.backupInformation = backupInformation;
        return this;
    }

    /**
     * Get the backupPolicy property: The backup profile for the SQL server.
     * 
     * @return the backupPolicy value.
     */
    public BackupPolicy backupPolicy() {
        return this.backupPolicy;
    }

    /**
     * Set the backupPolicy property: The backup profile for the SQL server.
     * 
     * @param backupPolicy the backupPolicy value to set.
     * @return the SqlServerDatabaseResourceProperties object itself.
     */
    public SqlServerDatabaseResourceProperties withBackupPolicy(BackupPolicy backupPolicy) {
        this.backupPolicy = backupPolicy;
        return this;
    }

    /**
     * Get the earliestRestoreDate property: This records the earliest start date and time that restore is available for
     * this database (ISO8601 format).
     * 
     * @return the earliestRestoreDate value.
     */
    public OffsetDateTime earliestRestoreDate() {
        return this.earliestRestoreDate;
    }

    /**
     * Get the createMode property: Database create mode. PointInTimeRestore: Create a database by restoring a point in
     * time backup of an existing database. sourceDatabaseId and restorePointInTime must be specified.
     * 
     * @return the createMode value.
     */
    public DatabaseCreateMode createMode() {
        return this.createMode;
    }

    /**
     * Set the createMode property: Database create mode. PointInTimeRestore: Create a database by restoring a point in
     * time backup of an existing database. sourceDatabaseId and restorePointInTime must be specified.
     * 
     * @param createMode the createMode value to set.
     * @return the SqlServerDatabaseResourceProperties object itself.
     */
    public SqlServerDatabaseResourceProperties withCreateMode(DatabaseCreateMode createMode) {
        this.createMode = createMode;
        return this;
    }

    /**
     * Get the sourceDatabaseId property: The name of the source database associated with create operation of this
     * database.
     * 
     * @return the sourceDatabaseId value.
     */
    public String sourceDatabaseId() {
        return this.sourceDatabaseId;
    }

    /**
     * Set the sourceDatabaseId property: The name of the source database associated with create operation of this
     * database.
     * 
     * @param sourceDatabaseId the sourceDatabaseId value to set.
     * @return the SqlServerDatabaseResourceProperties object itself.
     */
    public SqlServerDatabaseResourceProperties withSourceDatabaseId(String sourceDatabaseId) {
        this.sourceDatabaseId = sourceDatabaseId;
        return this;
    }

    /**
     * Get the vmId property: The unique ID of the hybrid machine that this resource belongs to.
     * 
     * @return the vmId value.
     */
    public String vmId() {
        return this.vmId;
    }

    /**
     * Get the restorePointInTime property: Conditional. If createMode is PointInTimeRestore, this value is required.
     * Specifies the point in time (ISO8601 format) of the source database that will be restored to create the new
     * database.
     * 
     * @return the restorePointInTime value.
     */
    public OffsetDateTime restorePointInTime() {
        return this.restorePointInTime;
    }

    /**
     * Set the restorePointInTime property: Conditional. If createMode is PointInTimeRestore, this value is required.
     * Specifies the point in time (ISO8601 format) of the source database that will be restored to create the new
     * database.
     * 
     * @param restorePointInTime the restorePointInTime value to set.
     * @return the SqlServerDatabaseResourceProperties object itself.
     */
    public SqlServerDatabaseResourceProperties withRestorePointInTime(OffsetDateTime restorePointInTime) {
        this.restorePointInTime = restorePointInTime;
        return this;
    }

    /**
     * Get the provisioningState property: The provisioning state of the Arc-enabled SQL Server database resource.
     * 
     * @return the provisioningState value.
     */
    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the lastDatabaseUploadTime property: The time when last successful database upload was performed.
     * 
     * @return the lastDatabaseUploadTime value.
     */
    public OffsetDateTime lastDatabaseUploadTime() {
        return this.lastDatabaseUploadTime;
    }

    /**
     * Get the migration property: Migration related configuration.
     * 
     * @return the migration value.
     */
    public DataBaseMigration migration() {
        return this.migration;
    }

    /**
     * Set the migration property: Migration related configuration.
     * 
     * @param migration the migration value to set.
     * @return the SqlServerDatabaseResourceProperties object itself.
     */
    public SqlServerDatabaseResourceProperties withMigration(DataBaseMigration migration) {
        this.migration = migration;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (databaseOptions() != null) {
            databaseOptions().validate();
        }
        if (backupInformation() != null) {
            backupInformation().validate();
        }
        if (backupPolicy() != null) {
            backupPolicy().validate();
        }
        if (migration() != null) {
            migration().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("collationName", this.collationName);
        jsonWriter.writeStringField("databaseCreationDate",
            this.databaseCreationDate == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.databaseCreationDate));
        jsonWriter.writeNumberField("compatibilityLevel", this.compatibilityLevel);
        jsonWriter.writeNumberField("sizeMB", this.sizeMB);
        jsonWriter.writeNumberField("logFileSizeMB", this.logFileSizeMB);
        jsonWriter.writeNumberField("dataFileSizeMB", this.dataFileSizeMB);
        jsonWriter.writeNumberField("spaceAvailableMB", this.spaceAvailableMB);
        jsonWriter.writeStringField("state", this.state == null ? null : this.state.toString());
        jsonWriter.writeBooleanField("isReadOnly", this.isReadOnly);
        jsonWriter.writeStringField("recoveryMode", this.recoveryMode == null ? null : this.recoveryMode.toString());
        jsonWriter.writeJsonField("databaseOptions", this.databaseOptions);
        jsonWriter.writeJsonField("backupInformation", this.backupInformation);
        jsonWriter.writeJsonField("backupPolicy", this.backupPolicy);
        jsonWriter.writeStringField("createMode", this.createMode == null ? null : this.createMode.toString());
        jsonWriter.writeStringField("sourceDatabaseId", this.sourceDatabaseId);
        jsonWriter.writeStringField("restorePointInTime",
            this.restorePointInTime == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.restorePointInTime));
        jsonWriter.writeJsonField("migration", this.migration);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SqlServerDatabaseResourceProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SqlServerDatabaseResourceProperties if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SqlServerDatabaseResourceProperties.
     */
    public static SqlServerDatabaseResourceProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SqlServerDatabaseResourceProperties deserializedSqlServerDatabaseResourceProperties
                = new SqlServerDatabaseResourceProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("collationName".equals(fieldName)) {
                    deserializedSqlServerDatabaseResourceProperties.collationName = reader.getString();
                } else if ("databaseCreationDate".equals(fieldName)) {
                    deserializedSqlServerDatabaseResourceProperties.databaseCreationDate = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("compatibilityLevel".equals(fieldName)) {
                    deserializedSqlServerDatabaseResourceProperties.compatibilityLevel
                        = reader.getNullable(JsonReader::getInt);
                } else if ("sizeMB".equals(fieldName)) {
                    deserializedSqlServerDatabaseResourceProperties.sizeMB = reader.getNullable(JsonReader::getFloat);
                } else if ("logFileSizeMB".equals(fieldName)) {
                    deserializedSqlServerDatabaseResourceProperties.logFileSizeMB
                        = reader.getNullable(JsonReader::getFloat);
                } else if ("dataFileSizeMB".equals(fieldName)) {
                    deserializedSqlServerDatabaseResourceProperties.dataFileSizeMB
                        = reader.getNullable(JsonReader::getFloat);
                } else if ("spaceAvailableMB".equals(fieldName)) {
                    deserializedSqlServerDatabaseResourceProperties.spaceAvailableMB
                        = reader.getNullable(JsonReader::getFloat);
                } else if ("state".equals(fieldName)) {
                    deserializedSqlServerDatabaseResourceProperties.state
                        = DatabaseState.fromString(reader.getString());
                } else if ("isReadOnly".equals(fieldName)) {
                    deserializedSqlServerDatabaseResourceProperties.isReadOnly
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("recoveryMode".equals(fieldName)) {
                    deserializedSqlServerDatabaseResourceProperties.recoveryMode
                        = RecoveryMode.fromString(reader.getString());
                } else if ("databaseOptions".equals(fieldName)) {
                    deserializedSqlServerDatabaseResourceProperties.databaseOptions
                        = SqlServerDatabaseResourcePropertiesDatabaseOptions.fromJson(reader);
                } else if ("backupInformation".equals(fieldName)) {
                    deserializedSqlServerDatabaseResourceProperties.backupInformation
                        = SqlServerDatabaseResourcePropertiesBackupInformation.fromJson(reader);
                } else if ("backupPolicy".equals(fieldName)) {
                    deserializedSqlServerDatabaseResourceProperties.backupPolicy = BackupPolicy.fromJson(reader);
                } else if ("earliestRestoreDate".equals(fieldName)) {
                    deserializedSqlServerDatabaseResourceProperties.earliestRestoreDate = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("createMode".equals(fieldName)) {
                    deserializedSqlServerDatabaseResourceProperties.createMode
                        = DatabaseCreateMode.fromString(reader.getString());
                } else if ("sourceDatabaseId".equals(fieldName)) {
                    deserializedSqlServerDatabaseResourceProperties.sourceDatabaseId = reader.getString();
                } else if ("vmId".equals(fieldName)) {
                    deserializedSqlServerDatabaseResourceProperties.vmId = reader.getString();
                } else if ("restorePointInTime".equals(fieldName)) {
                    deserializedSqlServerDatabaseResourceProperties.restorePointInTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedSqlServerDatabaseResourceProperties.provisioningState = reader.getString();
                } else if ("lastDatabaseUploadTime".equals(fieldName)) {
                    deserializedSqlServerDatabaseResourceProperties.lastDatabaseUploadTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("migration".equals(fieldName)) {
                    deserializedSqlServerDatabaseResourceProperties.migration = DataBaseMigration.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSqlServerDatabaseResourceProperties;
        });
    }
}
