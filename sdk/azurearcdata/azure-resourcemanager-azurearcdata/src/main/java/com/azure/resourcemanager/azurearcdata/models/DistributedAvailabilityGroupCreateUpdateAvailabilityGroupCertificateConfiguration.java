// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurearcdata.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The availability group certificate configuration.
 */
@Fluent
public final class DistributedAvailabilityGroupCreateUpdateAvailabilityGroupCertificateConfiguration
    implements JsonSerializable<DistributedAvailabilityGroupCreateUpdateAvailabilityGroupCertificateConfiguration> {
    /*
     * Name of the certificate.
     */
    private String certificateName;

    /**
     * Creates an instance of DistributedAvailabilityGroupCreateUpdateAvailabilityGroupCertificateConfiguration class.
     */
    public DistributedAvailabilityGroupCreateUpdateAvailabilityGroupCertificateConfiguration() {
    }

    /**
     * Get the certificateName property: Name of the certificate.
     * 
     * @return the certificateName value.
     */
    public String certificateName() {
        return this.certificateName;
    }

    /**
     * Set the certificateName property: Name of the certificate.
     * 
     * @param certificateName the certificateName value to set.
     * @return the DistributedAvailabilityGroupCreateUpdateAvailabilityGroupCertificateConfiguration object itself.
     */
    public DistributedAvailabilityGroupCreateUpdateAvailabilityGroupCertificateConfiguration
        withCertificateName(String certificateName) {
        this.certificateName = certificateName;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("certificateName", this.certificateName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DistributedAvailabilityGroupCreateUpdateAvailabilityGroupCertificateConfiguration from the
     * JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DistributedAvailabilityGroupCreateUpdateAvailabilityGroupCertificateConfiguration if the
     * JsonReader was pointing to an instance of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the
     * DistributedAvailabilityGroupCreateUpdateAvailabilityGroupCertificateConfiguration.
     */
    public static DistributedAvailabilityGroupCreateUpdateAvailabilityGroupCertificateConfiguration
        fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DistributedAvailabilityGroupCreateUpdateAvailabilityGroupCertificateConfiguration deserializedDistributedAvailabilityGroupCreateUpdateAvailabilityGroupCertificateConfiguration
                = new DistributedAvailabilityGroupCreateUpdateAvailabilityGroupCertificateConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("certificateName".equals(fieldName)) {
                    deserializedDistributedAvailabilityGroupCreateUpdateAvailabilityGroupCertificateConfiguration.certificateName
                        = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDistributedAvailabilityGroupCreateUpdateAvailabilityGroupCertificateConfiguration;
        });
    }
}
