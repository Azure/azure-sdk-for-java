// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurearcdata.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The properties of Arc Sql availability group replica resource.
 */
@Fluent
public final class SqlAvailabilityGroupReplicaResourceProperties
    implements JsonSerializable<SqlAvailabilityGroupReplicaResourceProperties> {
    /*
     * ID GUID of the availability group.
     */
    private String replicaId;

    /*
     * The replica name.
     */
    private String replicaName;

    /*
     * Resource id of this replica. This is required for a distributed availability group, in which case it describes
     * the location of the availability group that hosts one replica in the DAG. In a non-distributed availability group
     * this field is optional but can be used to store the Azure resource id for AG.
     */
    private String replicaResourceId;

    /*
     * null
     */
    private AvailabilityGroupConfigure configure;

    /*
     * null
     */
    private AvailabilityGroupState state;

    /**
     * Creates an instance of SqlAvailabilityGroupReplicaResourceProperties class.
     */
    public SqlAvailabilityGroupReplicaResourceProperties() {
    }

    /**
     * Get the replicaId property: ID GUID of the availability group.
     * 
     * @return the replicaId value.
     */
    public String replicaId() {
        return this.replicaId;
    }

    /**
     * Get the replicaName property: The replica name.
     * 
     * @return the replicaName value.
     */
    public String replicaName() {
        return this.replicaName;
    }

    /**
     * Set the replicaName property: The replica name.
     * 
     * @param replicaName the replicaName value to set.
     * @return the SqlAvailabilityGroupReplicaResourceProperties object itself.
     */
    public SqlAvailabilityGroupReplicaResourceProperties withReplicaName(String replicaName) {
        this.replicaName = replicaName;
        return this;
    }

    /**
     * Get the replicaResourceId property: Resource id of this replica. This is required for a distributed availability
     * group, in which case it describes the location of the availability group that hosts one replica in the DAG. In a
     * non-distributed availability group this field is optional but can be used to store the Azure resource id for AG.
     * 
     * @return the replicaResourceId value.
     */
    public String replicaResourceId() {
        return this.replicaResourceId;
    }

    /**
     * Set the replicaResourceId property: Resource id of this replica. This is required for a distributed availability
     * group, in which case it describes the location of the availability group that hosts one replica in the DAG. In a
     * non-distributed availability group this field is optional but can be used to store the Azure resource id for AG.
     * 
     * @param replicaResourceId the replicaResourceId value to set.
     * @return the SqlAvailabilityGroupReplicaResourceProperties object itself.
     */
    public SqlAvailabilityGroupReplicaResourceProperties withReplicaResourceId(String replicaResourceId) {
        this.replicaResourceId = replicaResourceId;
        return this;
    }

    /**
     * Get the configure property: null.
     * 
     * @return the configure value.
     */
    public AvailabilityGroupConfigure configure() {
        return this.configure;
    }

    /**
     * Set the configure property: null.
     * 
     * @param configure the configure value to set.
     * @return the SqlAvailabilityGroupReplicaResourceProperties object itself.
     */
    public SqlAvailabilityGroupReplicaResourceProperties withConfigure(AvailabilityGroupConfigure configure) {
        this.configure = configure;
        return this;
    }

    /**
     * Get the state property: null.
     * 
     * @return the state value.
     */
    public AvailabilityGroupState state() {
        return this.state;
    }

    /**
     * Set the state property: null.
     * 
     * @param state the state value to set.
     * @return the SqlAvailabilityGroupReplicaResourceProperties object itself.
     */
    public SqlAvailabilityGroupReplicaResourceProperties withState(AvailabilityGroupState state) {
        this.state = state;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (configure() != null) {
            configure().validate();
        }
        if (state() != null) {
            state().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("replicaName", this.replicaName);
        jsonWriter.writeStringField("replicaResourceId", this.replicaResourceId);
        jsonWriter.writeJsonField("configure", this.configure);
        jsonWriter.writeJsonField("state", this.state);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SqlAvailabilityGroupReplicaResourceProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SqlAvailabilityGroupReplicaResourceProperties if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SqlAvailabilityGroupReplicaResourceProperties.
     */
    public static SqlAvailabilityGroupReplicaResourceProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SqlAvailabilityGroupReplicaResourceProperties deserializedSqlAvailabilityGroupReplicaResourceProperties
                = new SqlAvailabilityGroupReplicaResourceProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("replicaId".equals(fieldName)) {
                    deserializedSqlAvailabilityGroupReplicaResourceProperties.replicaId = reader.getString();
                } else if ("replicaName".equals(fieldName)) {
                    deserializedSqlAvailabilityGroupReplicaResourceProperties.replicaName = reader.getString();
                } else if ("replicaResourceId".equals(fieldName)) {
                    deserializedSqlAvailabilityGroupReplicaResourceProperties.replicaResourceId = reader.getString();
                } else if ("configure".equals(fieldName)) {
                    deserializedSqlAvailabilityGroupReplicaResourceProperties.configure
                        = AvailabilityGroupConfigure.fromJson(reader);
                } else if ("state".equals(fieldName)) {
                    deserializedSqlAvailabilityGroupReplicaResourceProperties.state
                        = AvailabilityGroupState.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSqlAvailabilityGroupReplicaResourceProperties;
        });
    }
}
