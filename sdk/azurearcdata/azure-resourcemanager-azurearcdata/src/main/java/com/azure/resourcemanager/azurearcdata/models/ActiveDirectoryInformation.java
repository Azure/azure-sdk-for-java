// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurearcdata.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Active Directory information that related to the resource.
 */
@Fluent
public final class ActiveDirectoryInformation implements JsonSerializable<ActiveDirectoryInformation> {
    /*
     * Keytab information that is used for the Sql Managed Instance when Active Directory authentication is used.
     */
    private KeytabInformation keytabInformation;

    /**
     * Creates an instance of ActiveDirectoryInformation class.
     */
    public ActiveDirectoryInformation() {
    }

    /**
     * Get the keytabInformation property: Keytab information that is used for the Sql Managed Instance when Active
     * Directory authentication is used.
     * 
     * @return the keytabInformation value.
     */
    public KeytabInformation keytabInformation() {
        return this.keytabInformation;
    }

    /**
     * Set the keytabInformation property: Keytab information that is used for the Sql Managed Instance when Active
     * Directory authentication is used.
     * 
     * @param keytabInformation the keytabInformation value to set.
     * @return the ActiveDirectoryInformation object itself.
     */
    public ActiveDirectoryInformation withKeytabInformation(KeytabInformation keytabInformation) {
        this.keytabInformation = keytabInformation;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (keytabInformation() != null) {
            keytabInformation().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("keytabInformation", this.keytabInformation);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ActiveDirectoryInformation from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ActiveDirectoryInformation if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ActiveDirectoryInformation.
     */
    public static ActiveDirectoryInformation fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ActiveDirectoryInformation deserializedActiveDirectoryInformation = new ActiveDirectoryInformation();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("keytabInformation".equals(fieldName)) {
                    deserializedActiveDirectoryInformation.keytabInformation = KeytabInformation.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedActiveDirectoryInformation;
        });
    }
}
