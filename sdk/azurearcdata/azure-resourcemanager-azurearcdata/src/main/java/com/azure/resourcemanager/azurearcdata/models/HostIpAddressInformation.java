// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurearcdata.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * IP address and subnet mask.
 */
@Immutable
public final class HostIpAddressInformation implements JsonSerializable<HostIpAddressInformation> {
    /*
     * IP address
     */
    private String ipAddress;

    /*
     * Subnet mask
     */
    private String subnetMask;

    /**
     * Creates an instance of HostIpAddressInformation class.
     */
    public HostIpAddressInformation() {
    }

    /**
     * Get the ipAddress property: IP address.
     * 
     * @return the ipAddress value.
     */
    public String ipAddress() {
        return this.ipAddress;
    }

    /**
     * Get the subnetMask property: Subnet mask.
     * 
     * @return the subnetMask value.
     */
    public String subnetMask() {
        return this.subnetMask;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of HostIpAddressInformation from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of HostIpAddressInformation if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the HostIpAddressInformation.
     */
    public static HostIpAddressInformation fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            HostIpAddressInformation deserializedHostIpAddressInformation = new HostIpAddressInformation();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("ipAddress".equals(fieldName)) {
                    deserializedHostIpAddressInformation.ipAddress = reader.getString();
                } else if ("subnetMask".equals(fieldName)) {
                    deserializedHostIpAddressInformation.subnetMask = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedHostIpAddressInformation;
        });
    }
}
