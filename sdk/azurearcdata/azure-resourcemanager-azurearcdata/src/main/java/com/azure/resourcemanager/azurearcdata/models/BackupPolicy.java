// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurearcdata.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The backup profile for the SQL server.
 */
@Fluent
public final class BackupPolicy implements JsonSerializable<BackupPolicy> {
    /*
     * The retention period for all the databases in this managed instance.
     */
    private Integer retentionPeriodDays;

    /*
     * The value indicating days between full backups.
     */
    private Integer fullBackupDays;

    /*
     * The differential backup interval in hours.
     */
    private DifferentialBackupHours differentialBackupHours;

    /*
     * The value indicating minutes between transaction log backups.
     */
    private Integer transactionLogBackupMinutes;

    /**
     * Creates an instance of BackupPolicy class.
     */
    public BackupPolicy() {
    }

    /**
     * Get the retentionPeriodDays property: The retention period for all the databases in this managed instance.
     * 
     * @return the retentionPeriodDays value.
     */
    public Integer retentionPeriodDays() {
        return this.retentionPeriodDays;
    }

    /**
     * Set the retentionPeriodDays property: The retention period for all the databases in this managed instance.
     * 
     * @param retentionPeriodDays the retentionPeriodDays value to set.
     * @return the BackupPolicy object itself.
     */
    public BackupPolicy withRetentionPeriodDays(Integer retentionPeriodDays) {
        this.retentionPeriodDays = retentionPeriodDays;
        return this;
    }

    /**
     * Get the fullBackupDays property: The value indicating days between full backups.
     * 
     * @return the fullBackupDays value.
     */
    public Integer fullBackupDays() {
        return this.fullBackupDays;
    }

    /**
     * Set the fullBackupDays property: The value indicating days between full backups.
     * 
     * @param fullBackupDays the fullBackupDays value to set.
     * @return the BackupPolicy object itself.
     */
    public BackupPolicy withFullBackupDays(Integer fullBackupDays) {
        this.fullBackupDays = fullBackupDays;
        return this;
    }

    /**
     * Get the differentialBackupHours property: The differential backup interval in hours.
     * 
     * @return the differentialBackupHours value.
     */
    public DifferentialBackupHours differentialBackupHours() {
        return this.differentialBackupHours;
    }

    /**
     * Set the differentialBackupHours property: The differential backup interval in hours.
     * 
     * @param differentialBackupHours the differentialBackupHours value to set.
     * @return the BackupPolicy object itself.
     */
    public BackupPolicy withDifferentialBackupHours(DifferentialBackupHours differentialBackupHours) {
        this.differentialBackupHours = differentialBackupHours;
        return this;
    }

    /**
     * Get the transactionLogBackupMinutes property: The value indicating minutes between transaction log backups.
     * 
     * @return the transactionLogBackupMinutes value.
     */
    public Integer transactionLogBackupMinutes() {
        return this.transactionLogBackupMinutes;
    }

    /**
     * Set the transactionLogBackupMinutes property: The value indicating minutes between transaction log backups.
     * 
     * @param transactionLogBackupMinutes the transactionLogBackupMinutes value to set.
     * @return the BackupPolicy object itself.
     */
    public BackupPolicy withTransactionLogBackupMinutes(Integer transactionLogBackupMinutes) {
        this.transactionLogBackupMinutes = transactionLogBackupMinutes;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("retentionPeriodDays", this.retentionPeriodDays);
        jsonWriter.writeNumberField("fullBackupDays", this.fullBackupDays);
        jsonWriter.writeNumberField("differentialBackupHours",
            this.differentialBackupHours == null ? null : this.differentialBackupHours.toInt());
        jsonWriter.writeNumberField("transactionLogBackupMinutes", this.transactionLogBackupMinutes);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BackupPolicy from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of BackupPolicy if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the BackupPolicy.
     */
    public static BackupPolicy fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BackupPolicy deserializedBackupPolicy = new BackupPolicy();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("retentionPeriodDays".equals(fieldName)) {
                    deserializedBackupPolicy.retentionPeriodDays = reader.getNullable(JsonReader::getInt);
                } else if ("fullBackupDays".equals(fieldName)) {
                    deserializedBackupPolicy.fullBackupDays = reader.getNullable(JsonReader::getInt);
                } else if ("differentialBackupHours".equals(fieldName)) {
                    deserializedBackupPolicy.differentialBackupHours = DifferentialBackupHours.fromInt(reader.getInt());
                } else if ("transactionLogBackupMinutes".equals(fieldName)) {
                    deserializedBackupPolicy.transactionLogBackupMinutes = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedBackupPolicy;
        });
    }
}
