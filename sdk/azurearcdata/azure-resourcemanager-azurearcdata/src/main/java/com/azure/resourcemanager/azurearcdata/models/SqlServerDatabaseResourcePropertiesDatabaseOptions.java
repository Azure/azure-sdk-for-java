// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurearcdata.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * List of features that are enabled for the database.
 */
@Fluent
public final class SqlServerDatabaseResourcePropertiesDatabaseOptions
    implements JsonSerializable<SqlServerDatabaseResourcePropertiesDatabaseOptions> {
    /*
     * The isAutoCloseOn property.
     */
    private Boolean isAutoCloseOn;

    /*
     * The isAutoShrinkOn property.
     */
    private Boolean isAutoShrinkOn;

    /*
     * The isAutoCreateStatsOn property.
     */
    private Boolean isAutoCreateStatsOn;

    /*
     * The isAutoUpdateStatsOn property.
     */
    private Boolean isAutoUpdateStatsOn;

    /*
     * The isRemoteDataArchiveEnabled property.
     */
    private Boolean isRemoteDataArchiveEnabled;

    /*
     * The isMemoryOptimizationEnabled property.
     */
    private Boolean isMemoryOptimizationEnabled;

    /*
     * The isEncrypted property.
     */
    private Boolean isEncrypted;

    /*
     * The isTrustworthyOn property.
     */
    private Boolean isTrustworthyOn;

    /**
     * Creates an instance of SqlServerDatabaseResourcePropertiesDatabaseOptions class.
     */
    public SqlServerDatabaseResourcePropertiesDatabaseOptions() {
    }

    /**
     * Get the isAutoCloseOn property: The isAutoCloseOn property.
     * 
     * @return the isAutoCloseOn value.
     */
    public Boolean isAutoCloseOn() {
        return this.isAutoCloseOn;
    }

    /**
     * Set the isAutoCloseOn property: The isAutoCloseOn property.
     * 
     * @param isAutoCloseOn the isAutoCloseOn value to set.
     * @return the SqlServerDatabaseResourcePropertiesDatabaseOptions object itself.
     */
    public SqlServerDatabaseResourcePropertiesDatabaseOptions withIsAutoCloseOn(Boolean isAutoCloseOn) {
        this.isAutoCloseOn = isAutoCloseOn;
        return this;
    }

    /**
     * Get the isAutoShrinkOn property: The isAutoShrinkOn property.
     * 
     * @return the isAutoShrinkOn value.
     */
    public Boolean isAutoShrinkOn() {
        return this.isAutoShrinkOn;
    }

    /**
     * Set the isAutoShrinkOn property: The isAutoShrinkOn property.
     * 
     * @param isAutoShrinkOn the isAutoShrinkOn value to set.
     * @return the SqlServerDatabaseResourcePropertiesDatabaseOptions object itself.
     */
    public SqlServerDatabaseResourcePropertiesDatabaseOptions withIsAutoShrinkOn(Boolean isAutoShrinkOn) {
        this.isAutoShrinkOn = isAutoShrinkOn;
        return this;
    }

    /**
     * Get the isAutoCreateStatsOn property: The isAutoCreateStatsOn property.
     * 
     * @return the isAutoCreateStatsOn value.
     */
    public Boolean isAutoCreateStatsOn() {
        return this.isAutoCreateStatsOn;
    }

    /**
     * Set the isAutoCreateStatsOn property: The isAutoCreateStatsOn property.
     * 
     * @param isAutoCreateStatsOn the isAutoCreateStatsOn value to set.
     * @return the SqlServerDatabaseResourcePropertiesDatabaseOptions object itself.
     */
    public SqlServerDatabaseResourcePropertiesDatabaseOptions withIsAutoCreateStatsOn(Boolean isAutoCreateStatsOn) {
        this.isAutoCreateStatsOn = isAutoCreateStatsOn;
        return this;
    }

    /**
     * Get the isAutoUpdateStatsOn property: The isAutoUpdateStatsOn property.
     * 
     * @return the isAutoUpdateStatsOn value.
     */
    public Boolean isAutoUpdateStatsOn() {
        return this.isAutoUpdateStatsOn;
    }

    /**
     * Set the isAutoUpdateStatsOn property: The isAutoUpdateStatsOn property.
     * 
     * @param isAutoUpdateStatsOn the isAutoUpdateStatsOn value to set.
     * @return the SqlServerDatabaseResourcePropertiesDatabaseOptions object itself.
     */
    public SqlServerDatabaseResourcePropertiesDatabaseOptions withIsAutoUpdateStatsOn(Boolean isAutoUpdateStatsOn) {
        this.isAutoUpdateStatsOn = isAutoUpdateStatsOn;
        return this;
    }

    /**
     * Get the isRemoteDataArchiveEnabled property: The isRemoteDataArchiveEnabled property.
     * 
     * @return the isRemoteDataArchiveEnabled value.
     */
    public Boolean isRemoteDataArchiveEnabled() {
        return this.isRemoteDataArchiveEnabled;
    }

    /**
     * Set the isRemoteDataArchiveEnabled property: The isRemoteDataArchiveEnabled property.
     * 
     * @param isRemoteDataArchiveEnabled the isRemoteDataArchiveEnabled value to set.
     * @return the SqlServerDatabaseResourcePropertiesDatabaseOptions object itself.
     */
    public SqlServerDatabaseResourcePropertiesDatabaseOptions
        withIsRemoteDataArchiveEnabled(Boolean isRemoteDataArchiveEnabled) {
        this.isRemoteDataArchiveEnabled = isRemoteDataArchiveEnabled;
        return this;
    }

    /**
     * Get the isMemoryOptimizationEnabled property: The isMemoryOptimizationEnabled property.
     * 
     * @return the isMemoryOptimizationEnabled value.
     */
    public Boolean isMemoryOptimizationEnabled() {
        return this.isMemoryOptimizationEnabled;
    }

    /**
     * Set the isMemoryOptimizationEnabled property: The isMemoryOptimizationEnabled property.
     * 
     * @param isMemoryOptimizationEnabled the isMemoryOptimizationEnabled value to set.
     * @return the SqlServerDatabaseResourcePropertiesDatabaseOptions object itself.
     */
    public SqlServerDatabaseResourcePropertiesDatabaseOptions
        withIsMemoryOptimizationEnabled(Boolean isMemoryOptimizationEnabled) {
        this.isMemoryOptimizationEnabled = isMemoryOptimizationEnabled;
        return this;
    }

    /**
     * Get the isEncrypted property: The isEncrypted property.
     * 
     * @return the isEncrypted value.
     */
    public Boolean isEncrypted() {
        return this.isEncrypted;
    }

    /**
     * Set the isEncrypted property: The isEncrypted property.
     * 
     * @param isEncrypted the isEncrypted value to set.
     * @return the SqlServerDatabaseResourcePropertiesDatabaseOptions object itself.
     */
    public SqlServerDatabaseResourcePropertiesDatabaseOptions withIsEncrypted(Boolean isEncrypted) {
        this.isEncrypted = isEncrypted;
        return this;
    }

    /**
     * Get the isTrustworthyOn property: The isTrustworthyOn property.
     * 
     * @return the isTrustworthyOn value.
     */
    public Boolean isTrustworthyOn() {
        return this.isTrustworthyOn;
    }

    /**
     * Set the isTrustworthyOn property: The isTrustworthyOn property.
     * 
     * @param isTrustworthyOn the isTrustworthyOn value to set.
     * @return the SqlServerDatabaseResourcePropertiesDatabaseOptions object itself.
     */
    public SqlServerDatabaseResourcePropertiesDatabaseOptions withIsTrustworthyOn(Boolean isTrustworthyOn) {
        this.isTrustworthyOn = isTrustworthyOn;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("isAutoCloseOn", this.isAutoCloseOn);
        jsonWriter.writeBooleanField("isAutoShrinkOn", this.isAutoShrinkOn);
        jsonWriter.writeBooleanField("isAutoCreateStatsOn", this.isAutoCreateStatsOn);
        jsonWriter.writeBooleanField("isAutoUpdateStatsOn", this.isAutoUpdateStatsOn);
        jsonWriter.writeBooleanField("isRemoteDataArchiveEnabled", this.isRemoteDataArchiveEnabled);
        jsonWriter.writeBooleanField("isMemoryOptimizationEnabled", this.isMemoryOptimizationEnabled);
        jsonWriter.writeBooleanField("isEncrypted", this.isEncrypted);
        jsonWriter.writeBooleanField("isTrustworthyOn", this.isTrustworthyOn);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SqlServerDatabaseResourcePropertiesDatabaseOptions from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SqlServerDatabaseResourcePropertiesDatabaseOptions if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SqlServerDatabaseResourcePropertiesDatabaseOptions.
     */
    public static SqlServerDatabaseResourcePropertiesDatabaseOptions fromJson(JsonReader jsonReader)
        throws IOException {
        return jsonReader.readObject(reader -> {
            SqlServerDatabaseResourcePropertiesDatabaseOptions deserializedSqlServerDatabaseResourcePropertiesDatabaseOptions
                = new SqlServerDatabaseResourcePropertiesDatabaseOptions();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("isAutoCloseOn".equals(fieldName)) {
                    deserializedSqlServerDatabaseResourcePropertiesDatabaseOptions.isAutoCloseOn
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("isAutoShrinkOn".equals(fieldName)) {
                    deserializedSqlServerDatabaseResourcePropertiesDatabaseOptions.isAutoShrinkOn
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("isAutoCreateStatsOn".equals(fieldName)) {
                    deserializedSqlServerDatabaseResourcePropertiesDatabaseOptions.isAutoCreateStatsOn
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("isAutoUpdateStatsOn".equals(fieldName)) {
                    deserializedSqlServerDatabaseResourcePropertiesDatabaseOptions.isAutoUpdateStatsOn
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("isRemoteDataArchiveEnabled".equals(fieldName)) {
                    deserializedSqlServerDatabaseResourcePropertiesDatabaseOptions.isRemoteDataArchiveEnabled
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("isMemoryOptimizationEnabled".equals(fieldName)) {
                    deserializedSqlServerDatabaseResourcePropertiesDatabaseOptions.isMemoryOptimizationEnabled
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("isEncrypted".equals(fieldName)) {
                    deserializedSqlServerDatabaseResourcePropertiesDatabaseOptions.isEncrypted
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("isTrustworthyOn".equals(fieldName)) {
                    deserializedSqlServerDatabaseResourcePropertiesDatabaseOptions.isTrustworthyOn
                        = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSqlServerDatabaseResourcePropertiesDatabaseOptions;
        });
    }
}
