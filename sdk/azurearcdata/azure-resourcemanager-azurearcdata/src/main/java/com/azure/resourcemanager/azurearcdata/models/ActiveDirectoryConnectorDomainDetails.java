// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurearcdata.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Active Directory domain details.
 */
@Fluent
public final class ActiveDirectoryConnectorDomainDetails
    implements JsonSerializable<ActiveDirectoryConnectorDomainDetails> {
    /*
     * Name (uppercase) of the Active Directory domain that this AD connector will be associated with.
     */
    private String realm;

    /*
     * NETBIOS name of the Active Directory domain.
     */
    private String netbiosDomainName;

    /*
     * The service account provisioning mode for this Active Directory connector.
     */
    private AccountProvisioningMode serviceAccountProvisioning;

    /*
     * The distinguished name of the Active Directory Organizational Unit.
     */
    private String ouDistinguishedName;

    /*
     * null
     */
    private ActiveDirectoryDomainControllers domainControllers;

    /**
     * Creates an instance of ActiveDirectoryConnectorDomainDetails class.
     */
    public ActiveDirectoryConnectorDomainDetails() {
    }

    /**
     * Get the realm property: Name (uppercase) of the Active Directory domain that this AD connector will be associated
     * with.
     * 
     * @return the realm value.
     */
    public String realm() {
        return this.realm;
    }

    /**
     * Set the realm property: Name (uppercase) of the Active Directory domain that this AD connector will be associated
     * with.
     * 
     * @param realm the realm value to set.
     * @return the ActiveDirectoryConnectorDomainDetails object itself.
     */
    public ActiveDirectoryConnectorDomainDetails withRealm(String realm) {
        this.realm = realm;
        return this;
    }

    /**
     * Get the netbiosDomainName property: NETBIOS name of the Active Directory domain.
     * 
     * @return the netbiosDomainName value.
     */
    public String netbiosDomainName() {
        return this.netbiosDomainName;
    }

    /**
     * Set the netbiosDomainName property: NETBIOS name of the Active Directory domain.
     * 
     * @param netbiosDomainName the netbiosDomainName value to set.
     * @return the ActiveDirectoryConnectorDomainDetails object itself.
     */
    public ActiveDirectoryConnectorDomainDetails withNetbiosDomainName(String netbiosDomainName) {
        this.netbiosDomainName = netbiosDomainName;
        return this;
    }

    /**
     * Get the serviceAccountProvisioning property: The service account provisioning mode for this Active Directory
     * connector.
     * 
     * @return the serviceAccountProvisioning value.
     */
    public AccountProvisioningMode serviceAccountProvisioning() {
        return this.serviceAccountProvisioning;
    }

    /**
     * Set the serviceAccountProvisioning property: The service account provisioning mode for this Active Directory
     * connector.
     * 
     * @param serviceAccountProvisioning the serviceAccountProvisioning value to set.
     * @return the ActiveDirectoryConnectorDomainDetails object itself.
     */
    public ActiveDirectoryConnectorDomainDetails
        withServiceAccountProvisioning(AccountProvisioningMode serviceAccountProvisioning) {
        this.serviceAccountProvisioning = serviceAccountProvisioning;
        return this;
    }

    /**
     * Get the ouDistinguishedName property: The distinguished name of the Active Directory Organizational Unit.
     * 
     * @return the ouDistinguishedName value.
     */
    public String ouDistinguishedName() {
        return this.ouDistinguishedName;
    }

    /**
     * Set the ouDistinguishedName property: The distinguished name of the Active Directory Organizational Unit.
     * 
     * @param ouDistinguishedName the ouDistinguishedName value to set.
     * @return the ActiveDirectoryConnectorDomainDetails object itself.
     */
    public ActiveDirectoryConnectorDomainDetails withOuDistinguishedName(String ouDistinguishedName) {
        this.ouDistinguishedName = ouDistinguishedName;
        return this;
    }

    /**
     * Get the domainControllers property: null.
     * 
     * @return the domainControllers value.
     */
    public ActiveDirectoryDomainControllers domainControllers() {
        return this.domainControllers;
    }

    /**
     * Set the domainControllers property: null.
     * 
     * @param domainControllers the domainControllers value to set.
     * @return the ActiveDirectoryConnectorDomainDetails object itself.
     */
    public ActiveDirectoryConnectorDomainDetails
        withDomainControllers(ActiveDirectoryDomainControllers domainControllers) {
        this.domainControllers = domainControllers;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (realm() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property realm in model ActiveDirectoryConnectorDomainDetails"));
        }
        if (domainControllers() != null) {
            domainControllers().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ActiveDirectoryConnectorDomainDetails.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("realm", this.realm);
        jsonWriter.writeStringField("netbiosDomainName", this.netbiosDomainName);
        jsonWriter.writeStringField("serviceAccountProvisioning",
            this.serviceAccountProvisioning == null ? null : this.serviceAccountProvisioning.toString());
        jsonWriter.writeStringField("ouDistinguishedName", this.ouDistinguishedName);
        jsonWriter.writeJsonField("domainControllers", this.domainControllers);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ActiveDirectoryConnectorDomainDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ActiveDirectoryConnectorDomainDetails if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ActiveDirectoryConnectorDomainDetails.
     */
    public static ActiveDirectoryConnectorDomainDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ActiveDirectoryConnectorDomainDetails deserializedActiveDirectoryConnectorDomainDetails
                = new ActiveDirectoryConnectorDomainDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("realm".equals(fieldName)) {
                    deserializedActiveDirectoryConnectorDomainDetails.realm = reader.getString();
                } else if ("netbiosDomainName".equals(fieldName)) {
                    deserializedActiveDirectoryConnectorDomainDetails.netbiosDomainName = reader.getString();
                } else if ("serviceAccountProvisioning".equals(fieldName)) {
                    deserializedActiveDirectoryConnectorDomainDetails.serviceAccountProvisioning
                        = AccountProvisioningMode.fromString(reader.getString());
                } else if ("ouDistinguishedName".equals(fieldName)) {
                    deserializedActiveDirectoryConnectorDomainDetails.ouDistinguishedName = reader.getString();
                } else if ("domainControllers".equals(fieldName)) {
                    deserializedActiveDirectoryConnectorDomainDetails.domainControllers
                        = ActiveDirectoryDomainControllers.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedActiveDirectoryConnectorDomainDetails;
        });
    }
}
