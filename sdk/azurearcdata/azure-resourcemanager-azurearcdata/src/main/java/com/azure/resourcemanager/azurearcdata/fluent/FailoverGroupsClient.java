// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurearcdata.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.azurearcdata.fluent.models.FailoverGroupResourceInner;

/**
 * An instance of this class provides access to all the operations defined in FailoverGroupsClient.
 */
public interface FailoverGroupsClient {
    /**
     * List the failover groups associated with the given sql managed instance.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlManagedInstanceName Name of SQL Managed Instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of failover groups as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<FailoverGroupResourceInner> list(String resourceGroupName, String sqlManagedInstanceName);

    /**
     * List the failover groups associated with the given sql managed instance.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlManagedInstanceName Name of SQL Managed Instance.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of failover groups as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<FailoverGroupResourceInner> list(String resourceGroupName, String sqlManagedInstanceName,
        Context context);

    /**
     * Creates or replaces a failover group resource.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlManagedInstanceName Name of SQL Managed Instance.
     * @param failoverGroupName The name of the Failover Group.
     * @param failoverGroupResource desc.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a failover group resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<FailoverGroupResourceInner>, FailoverGroupResourceInner> beginCreate(String resourceGroupName,
        String sqlManagedInstanceName, String failoverGroupName, FailoverGroupResourceInner failoverGroupResource);

    /**
     * Creates or replaces a failover group resource.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlManagedInstanceName Name of SQL Managed Instance.
     * @param failoverGroupName The name of the Failover Group.
     * @param failoverGroupResource desc.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a failover group resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<FailoverGroupResourceInner>, FailoverGroupResourceInner> beginCreate(String resourceGroupName,
        String sqlManagedInstanceName, String failoverGroupName, FailoverGroupResourceInner failoverGroupResource,
        Context context);

    /**
     * Creates or replaces a failover group resource.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlManagedInstanceName Name of SQL Managed Instance.
     * @param failoverGroupName The name of the Failover Group.
     * @param failoverGroupResource desc.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a failover group resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    FailoverGroupResourceInner create(String resourceGroupName, String sqlManagedInstanceName, String failoverGroupName,
        FailoverGroupResourceInner failoverGroupResource);

    /**
     * Creates or replaces a failover group resource.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlManagedInstanceName Name of SQL Managed Instance.
     * @param failoverGroupName The name of the Failover Group.
     * @param failoverGroupResource desc.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a failover group resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    FailoverGroupResourceInner create(String resourceGroupName, String sqlManagedInstanceName, String failoverGroupName,
        FailoverGroupResourceInner failoverGroupResource, Context context);

    /**
     * Deletes a failover group resource.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlManagedInstanceName Name of SQL Managed Instance.
     * @param failoverGroupName The name of the Failover Group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String sqlManagedInstanceName,
        String failoverGroupName);

    /**
     * Deletes a failover group resource.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlManagedInstanceName Name of SQL Managed Instance.
     * @param failoverGroupName The name of the Failover Group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String sqlManagedInstanceName,
        String failoverGroupName, Context context);

    /**
     * Deletes a failover group resource.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlManagedInstanceName Name of SQL Managed Instance.
     * @param failoverGroupName The name of the Failover Group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String sqlManagedInstanceName, String failoverGroupName);

    /**
     * Deletes a failover group resource.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlManagedInstanceName Name of SQL Managed Instance.
     * @param failoverGroupName The name of the Failover Group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String sqlManagedInstanceName, String failoverGroupName, Context context);

    /**
     * Retrieves a failover group resource.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlManagedInstanceName Name of SQL Managed Instance.
     * @param failoverGroupName The name of the Failover Group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a failover group resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<FailoverGroupResourceInner> getWithResponse(String resourceGroupName, String sqlManagedInstanceName,
        String failoverGroupName, Context context);

    /**
     * Retrieves a failover group resource.
     * 
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlManagedInstanceName Name of SQL Managed Instance.
     * @param failoverGroupName The name of the Failover Group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a failover group resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    FailoverGroupResourceInner get(String resourceGroupName, String sqlManagedInstanceName, String failoverGroupName);
}
