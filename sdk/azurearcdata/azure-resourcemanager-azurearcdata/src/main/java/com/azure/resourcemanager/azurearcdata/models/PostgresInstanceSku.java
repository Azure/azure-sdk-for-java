// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurearcdata.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The resource model definition representing SKU for Azure Database for PostgresSQL - Azure Arc.
 */
@Fluent
public final class PostgresInstanceSku extends CommonSku {
    /*
     * This field is required to be implemented by the Resource Provider if the service has more than one tier.
     */
    private PostgresInstanceSkuTier tier;

    /**
     * Creates an instance of PostgresInstanceSku class.
     */
    public PostgresInstanceSku() {
    }

    /**
     * Get the tier property: This field is required to be implemented by the Resource Provider if the service has more
     * than one tier.
     * 
     * @return the tier value.
     */
    public PostgresInstanceSkuTier tier() {
        return this.tier;
    }

    /**
     * Set the tier property: This field is required to be implemented by the Resource Provider if the service has more
     * than one tier.
     * 
     * @param tier the tier value to set.
     * @return the PostgresInstanceSku object itself.
     */
    public PostgresInstanceSku withTier(PostgresInstanceSkuTier tier) {
        this.tier = tier;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PostgresInstanceSku withName(String name) {
        super.withName(name);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PostgresInstanceSku withDev(Boolean dev) {
        super.withDev(dev);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PostgresInstanceSku withSize(String size) {
        super.withSize(size);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PostgresInstanceSku withFamily(String family) {
        super.withFamily(family);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PostgresInstanceSku withCapacity(Integer capacity) {
        super.withCapacity(capacity);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (name() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property name in model PostgresInstanceSku"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(PostgresInstanceSku.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", name());
        jsonWriter.writeBooleanField("dev", dev());
        jsonWriter.writeStringField("size", size());
        jsonWriter.writeStringField("family", family());
        jsonWriter.writeNumberField("capacity", capacity());
        jsonWriter.writeStringField("tier", this.tier == null ? null : this.tier.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PostgresInstanceSku from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PostgresInstanceSku if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the PostgresInstanceSku.
     */
    public static PostgresInstanceSku fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PostgresInstanceSku deserializedPostgresInstanceSku = new PostgresInstanceSku();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedPostgresInstanceSku.withName(reader.getString());
                } else if ("dev".equals(fieldName)) {
                    deserializedPostgresInstanceSku.withDev(reader.getNullable(JsonReader::getBoolean));
                } else if ("size".equals(fieldName)) {
                    deserializedPostgresInstanceSku.withSize(reader.getString());
                } else if ("family".equals(fieldName)) {
                    deserializedPostgresInstanceSku.withFamily(reader.getString());
                } else if ("capacity".equals(fieldName)) {
                    deserializedPostgresInstanceSku.withCapacity(reader.getNullable(JsonReader::getInt));
                } else if ("tier".equals(fieldName)) {
                    deserializedPostgresInstanceSku.tier = PostgresInstanceSkuTier.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPostgresInstanceSku;
        });
    }
}
