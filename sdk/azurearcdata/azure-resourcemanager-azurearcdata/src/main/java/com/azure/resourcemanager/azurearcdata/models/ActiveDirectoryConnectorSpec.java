// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurearcdata.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The specifications of the AD Kubernetes resource.
 */
@Fluent
public final class ActiveDirectoryConnectorSpec implements JsonSerializable<ActiveDirectoryConnectorSpec> {
    /*
     * null
     */
    private ActiveDirectoryConnectorDomainDetails activeDirectory;

    /*
     * null
     */
    private ActiveDirectoryConnectorDnsDetails dns;

    /**
     * Creates an instance of ActiveDirectoryConnectorSpec class.
     */
    public ActiveDirectoryConnectorSpec() {
    }

    /**
     * Get the activeDirectory property: null.
     * 
     * @return the activeDirectory value.
     */
    public ActiveDirectoryConnectorDomainDetails activeDirectory() {
        return this.activeDirectory;
    }

    /**
     * Set the activeDirectory property: null.
     * 
     * @param activeDirectory the activeDirectory value to set.
     * @return the ActiveDirectoryConnectorSpec object itself.
     */
    public ActiveDirectoryConnectorSpec withActiveDirectory(ActiveDirectoryConnectorDomainDetails activeDirectory) {
        this.activeDirectory = activeDirectory;
        return this;
    }

    /**
     * Get the dns property: null.
     * 
     * @return the dns value.
     */
    public ActiveDirectoryConnectorDnsDetails dns() {
        return this.dns;
    }

    /**
     * Set the dns property: null.
     * 
     * @param dns the dns value to set.
     * @return the ActiveDirectoryConnectorSpec object itself.
     */
    public ActiveDirectoryConnectorSpec withDns(ActiveDirectoryConnectorDnsDetails dns) {
        this.dns = dns;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (activeDirectory() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property activeDirectory in model ActiveDirectoryConnectorSpec"));
        } else {
            activeDirectory().validate();
        }
        if (dns() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property dns in model ActiveDirectoryConnectorSpec"));
        } else {
            dns().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ActiveDirectoryConnectorSpec.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("activeDirectory", this.activeDirectory);
        jsonWriter.writeJsonField("dns", this.dns);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ActiveDirectoryConnectorSpec from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ActiveDirectoryConnectorSpec if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ActiveDirectoryConnectorSpec.
     */
    public static ActiveDirectoryConnectorSpec fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ActiveDirectoryConnectorSpec deserializedActiveDirectoryConnectorSpec = new ActiveDirectoryConnectorSpec();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("activeDirectory".equals(fieldName)) {
                    deserializedActiveDirectoryConnectorSpec.activeDirectory
                        = ActiveDirectoryConnectorDomainDetails.fromJson(reader);
                } else if ("dns".equals(fieldName)) {
                    deserializedActiveDirectoryConnectorSpec.dns = ActiveDirectoryConnectorDnsDetails.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedActiveDirectoryConnectorSpec;
        });
    }
}
