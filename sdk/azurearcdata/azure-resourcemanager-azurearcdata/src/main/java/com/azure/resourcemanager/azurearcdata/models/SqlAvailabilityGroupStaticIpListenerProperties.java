// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurearcdata.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The properties of a static IP Arc Sql availability group listener.
 */
@Fluent
public final class SqlAvailabilityGroupStaticIpListenerProperties
    implements JsonSerializable<SqlAvailabilityGroupStaticIpListenerProperties> {
    /*
     * the DNS name for the listener.
     */
    private String dnsName;

    /*
     * IP V4 Addresses and masks for the listener.
     */
    private List<SqlAvailabilityGroupIpV4AddressesAndMasksPropertiesItem> ipV4AddressesAndMasks;

    /*
     * IP V6 Addresses for the listener
     */
    private List<String> ipV6Addresses;

    /*
     * Network port for the listener. Default is 1433.
     */
    private Integer port;

    /**
     * Creates an instance of SqlAvailabilityGroupStaticIpListenerProperties class.
     */
    public SqlAvailabilityGroupStaticIpListenerProperties() {
    }

    /**
     * Get the dnsName property: the DNS name for the listener.
     * 
     * @return the dnsName value.
     */
    public String dnsName() {
        return this.dnsName;
    }

    /**
     * Set the dnsName property: the DNS name for the listener.
     * 
     * @param dnsName the dnsName value to set.
     * @return the SqlAvailabilityGroupStaticIpListenerProperties object itself.
     */
    public SqlAvailabilityGroupStaticIpListenerProperties withDnsName(String dnsName) {
        this.dnsName = dnsName;
        return this;
    }

    /**
     * Get the ipV4AddressesAndMasks property: IP V4 Addresses and masks for the listener.
     * 
     * @return the ipV4AddressesAndMasks value.
     */
    public List<SqlAvailabilityGroupIpV4AddressesAndMasksPropertiesItem> ipV4AddressesAndMasks() {
        return this.ipV4AddressesAndMasks;
    }

    /**
     * Set the ipV4AddressesAndMasks property: IP V4 Addresses and masks for the listener.
     * 
     * @param ipV4AddressesAndMasks the ipV4AddressesAndMasks value to set.
     * @return the SqlAvailabilityGroupStaticIpListenerProperties object itself.
     */
    public SqlAvailabilityGroupStaticIpListenerProperties
        withIpV4AddressesAndMasks(List<SqlAvailabilityGroupIpV4AddressesAndMasksPropertiesItem> ipV4AddressesAndMasks) {
        this.ipV4AddressesAndMasks = ipV4AddressesAndMasks;
        return this;
    }

    /**
     * Get the ipV6Addresses property: IP V6 Addresses for the listener.
     * 
     * @return the ipV6Addresses value.
     */
    public List<String> ipV6Addresses() {
        return this.ipV6Addresses;
    }

    /**
     * Set the ipV6Addresses property: IP V6 Addresses for the listener.
     * 
     * @param ipV6Addresses the ipV6Addresses value to set.
     * @return the SqlAvailabilityGroupStaticIpListenerProperties object itself.
     */
    public SqlAvailabilityGroupStaticIpListenerProperties withIpV6Addresses(List<String> ipV6Addresses) {
        this.ipV6Addresses = ipV6Addresses;
        return this;
    }

    /**
     * Get the port property: Network port for the listener. Default is 1433.
     * 
     * @return the port value.
     */
    public Integer port() {
        return this.port;
    }

    /**
     * Set the port property: Network port for the listener. Default is 1433.
     * 
     * @param port the port value to set.
     * @return the SqlAvailabilityGroupStaticIpListenerProperties object itself.
     */
    public SqlAvailabilityGroupStaticIpListenerProperties withPort(Integer port) {
        this.port = port;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (ipV4AddressesAndMasks() != null) {
            ipV4AddressesAndMasks().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("dnsName", this.dnsName);
        jsonWriter.writeArrayField("ipV4AddressesAndMasks", this.ipV4AddressesAndMasks,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("ipV6Addresses", this.ipV6Addresses,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeNumberField("port", this.port);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SqlAvailabilityGroupStaticIpListenerProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SqlAvailabilityGroupStaticIpListenerProperties if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SqlAvailabilityGroupStaticIpListenerProperties.
     */
    public static SqlAvailabilityGroupStaticIpListenerProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SqlAvailabilityGroupStaticIpListenerProperties deserializedSqlAvailabilityGroupStaticIpListenerProperties
                = new SqlAvailabilityGroupStaticIpListenerProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("dnsName".equals(fieldName)) {
                    deserializedSqlAvailabilityGroupStaticIpListenerProperties.dnsName = reader.getString();
                } else if ("ipV4AddressesAndMasks".equals(fieldName)) {
                    List<SqlAvailabilityGroupIpV4AddressesAndMasksPropertiesItem> ipV4AddressesAndMasks
                        = reader.readArray(
                            reader1 -> SqlAvailabilityGroupIpV4AddressesAndMasksPropertiesItem.fromJson(reader1));
                    deserializedSqlAvailabilityGroupStaticIpListenerProperties.ipV4AddressesAndMasks
                        = ipV4AddressesAndMasks;
                } else if ("ipV6Addresses".equals(fieldName)) {
                    List<String> ipV6Addresses = reader.readArray(reader1 -> reader1.getString());
                    deserializedSqlAvailabilityGroupStaticIpListenerProperties.ipV6Addresses = ipV6Addresses;
                } else if ("port".equals(fieldName)) {
                    deserializedSqlAvailabilityGroupStaticIpListenerProperties.port
                        = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSqlAvailabilityGroupStaticIpListenerProperties;
        });
    }
}
