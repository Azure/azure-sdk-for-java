// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurearcdata.implementation;

import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.azurearcdata.fluent.models.SqlServerEsuLicenseInner;
import com.azure.resourcemanager.azurearcdata.models.SqlServerEsuLicense;
import com.azure.resourcemanager.azurearcdata.models.SqlServerEsuLicenseProperties;
import com.azure.resourcemanager.azurearcdata.models.SqlServerEsuLicenseUpdate;
import com.azure.resourcemanager.azurearcdata.models.SqlServerEsuLicenseUpdateProperties;
import java.util.Collections;
import java.util.Map;

public final class SqlServerEsuLicenseImpl
    implements SqlServerEsuLicense, SqlServerEsuLicense.Definition, SqlServerEsuLicense.Update {
    private SqlServerEsuLicenseInner innerObject;

    private final com.azure.resourcemanager.azurearcdata.AzureArcDataManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public SqlServerEsuLicenseProperties properties() {
        return this.innerModel().properties();
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public SqlServerEsuLicenseInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.azurearcdata.AzureArcDataManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String sqlServerEsuLicenseName;

    private SqlServerEsuLicenseUpdate updateParameters;

    public SqlServerEsuLicenseImpl withExistingResourceGroup(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public SqlServerEsuLicense create() {
        this.innerObject = serviceManager.serviceClient()
            .getSqlServerEsuLicenses()
            .createWithResponse(resourceGroupName, sqlServerEsuLicenseName, this.innerModel(), Context.NONE)
            .getValue();
        return this;
    }

    public SqlServerEsuLicense create(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getSqlServerEsuLicenses()
            .createWithResponse(resourceGroupName, sqlServerEsuLicenseName, this.innerModel(), context)
            .getValue();
        return this;
    }

    SqlServerEsuLicenseImpl(String name, com.azure.resourcemanager.azurearcdata.AzureArcDataManager serviceManager) {
        this.innerObject = new SqlServerEsuLicenseInner();
        this.serviceManager = serviceManager;
        this.sqlServerEsuLicenseName = name;
    }

    public SqlServerEsuLicenseImpl update() {
        this.updateParameters = new SqlServerEsuLicenseUpdate();
        return this;
    }

    public SqlServerEsuLicense apply() {
        this.innerObject = serviceManager.serviceClient()
            .getSqlServerEsuLicenses()
            .updateWithResponse(resourceGroupName, sqlServerEsuLicenseName, updateParameters, Context.NONE)
            .getValue();
        return this;
    }

    public SqlServerEsuLicense apply(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getSqlServerEsuLicenses()
            .updateWithResponse(resourceGroupName, sqlServerEsuLicenseName, updateParameters, context)
            .getValue();
        return this;
    }

    SqlServerEsuLicenseImpl(SqlServerEsuLicenseInner innerObject,
        com.azure.resourcemanager.azurearcdata.AzureArcDataManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.sqlServerEsuLicenseName
            = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "sqlServerEsuLicenses");
    }

    public SqlServerEsuLicense refresh() {
        this.innerObject = serviceManager.serviceClient()
            .getSqlServerEsuLicenses()
            .getByResourceGroupWithResponse(resourceGroupName, sqlServerEsuLicenseName, Context.NONE)
            .getValue();
        return this;
    }

    public SqlServerEsuLicense refresh(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getSqlServerEsuLicenses()
            .getByResourceGroupWithResponse(resourceGroupName, sqlServerEsuLicenseName, context)
            .getValue();
        return this;
    }

    public SqlServerEsuLicenseImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public SqlServerEsuLicenseImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public SqlServerEsuLicenseImpl withProperties(SqlServerEsuLicenseProperties properties) {
        this.innerModel().withProperties(properties);
        return this;
    }

    public SqlServerEsuLicenseImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateParameters.withTags(tags);
            return this;
        }
    }

    public SqlServerEsuLicenseImpl withProperties(SqlServerEsuLicenseUpdateProperties properties) {
        this.updateParameters.withProperties(properties);
        return this;
    }

    private boolean isInCreateMode() {
        return this.innerModel() == null || this.innerModel().id() == null;
    }
}
