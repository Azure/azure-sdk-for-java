// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurearcdata.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * Properties of update SqlServerEsuLicense.
 */
@Fluent
public final class SqlServerEsuLicenseUpdateProperties
    implements JsonSerializable<SqlServerEsuLicenseUpdateProperties> {
    /*
     * SQL Server ESU license type.
     */
    private BillingPlan billingPlan;

    /*
     * The SQL Server version the license covers.
     */
    private Version version;

    /*
     * The unique ID of this license. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     */
    private String uniqueId;

    /*
     * The number of total cores of the license covers.
     */
    private Integer physicalCores;

    /*
     * The activation state of the license.
     */
    private State activationState;

    /*
     * The Azure scope to which the license will apply.
     */
    private ScopeType scopeType;

    /*
     * The timestamp of the activation of the SqlServerEsuLicense in ISO 8601 date-time format.
     */
    private OffsetDateTime activatedAt;

    /*
     * The timestamp of the termination of the SqlServerEsuLicense in ISO 8601 date-time format.
     */
    private OffsetDateTime terminatedAt;

    /*
     * The tenantId the SQL Server ESU license resource subscription resides in.
     */
    private String tenantId;

    /**
     * Creates an instance of SqlServerEsuLicenseUpdateProperties class.
     */
    public SqlServerEsuLicenseUpdateProperties() {
    }

    /**
     * Get the billingPlan property: SQL Server ESU license type.
     * 
     * @return the billingPlan value.
     */
    public BillingPlan billingPlan() {
        return this.billingPlan;
    }

    /**
     * Set the billingPlan property: SQL Server ESU license type.
     * 
     * @param billingPlan the billingPlan value to set.
     * @return the SqlServerEsuLicenseUpdateProperties object itself.
     */
    public SqlServerEsuLicenseUpdateProperties withBillingPlan(BillingPlan billingPlan) {
        this.billingPlan = billingPlan;
        return this;
    }

    /**
     * Get the version property: The SQL Server version the license covers.
     * 
     * @return the version value.
     */
    public Version version() {
        return this.version;
    }

    /**
     * Set the version property: The SQL Server version the license covers.
     * 
     * @param version the version value to set.
     * @return the SqlServerEsuLicenseUpdateProperties object itself.
     */
    public SqlServerEsuLicenseUpdateProperties withVersion(Version version) {
        this.version = version;
        return this;
    }

    /**
     * Get the uniqueId property: The unique ID of this license. This is a GUID-formatted string (e.g.
     * 00000000-0000-0000-0000-000000000000).
     * 
     * @return the uniqueId value.
     */
    public String uniqueId() {
        return this.uniqueId;
    }

    /**
     * Get the physicalCores property: The number of total cores of the license covers.
     * 
     * @return the physicalCores value.
     */
    public Integer physicalCores() {
        return this.physicalCores;
    }

    /**
     * Set the physicalCores property: The number of total cores of the license covers.
     * 
     * @param physicalCores the physicalCores value to set.
     * @return the SqlServerEsuLicenseUpdateProperties object itself.
     */
    public SqlServerEsuLicenseUpdateProperties withPhysicalCores(Integer physicalCores) {
        this.physicalCores = physicalCores;
        return this;
    }

    /**
     * Get the activationState property: The activation state of the license.
     * 
     * @return the activationState value.
     */
    public State activationState() {
        return this.activationState;
    }

    /**
     * Set the activationState property: The activation state of the license.
     * 
     * @param activationState the activationState value to set.
     * @return the SqlServerEsuLicenseUpdateProperties object itself.
     */
    public SqlServerEsuLicenseUpdateProperties withActivationState(State activationState) {
        this.activationState = activationState;
        return this;
    }

    /**
     * Get the scopeType property: The Azure scope to which the license will apply.
     * 
     * @return the scopeType value.
     */
    public ScopeType scopeType() {
        return this.scopeType;
    }

    /**
     * Set the scopeType property: The Azure scope to which the license will apply.
     * 
     * @param scopeType the scopeType value to set.
     * @return the SqlServerEsuLicenseUpdateProperties object itself.
     */
    public SqlServerEsuLicenseUpdateProperties withScopeType(ScopeType scopeType) {
        this.scopeType = scopeType;
        return this;
    }

    /**
     * Get the activatedAt property: The timestamp of the activation of the SqlServerEsuLicense in ISO 8601 date-time
     * format.
     * 
     * @return the activatedAt value.
     */
    public OffsetDateTime activatedAt() {
        return this.activatedAt;
    }

    /**
     * Get the terminatedAt property: The timestamp of the termination of the SqlServerEsuLicense in ISO 8601 date-time
     * format.
     * 
     * @return the terminatedAt value.
     */
    public OffsetDateTime terminatedAt() {
        return this.terminatedAt;
    }

    /**
     * Get the tenantId property: The tenantId the SQL Server ESU license resource subscription resides in.
     * 
     * @return the tenantId value.
     */
    public String tenantId() {
        return this.tenantId;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("billingPlan", this.billingPlan == null ? null : this.billingPlan.toString());
        jsonWriter.writeStringField("version", this.version == null ? null : this.version.toString());
        jsonWriter.writeNumberField("physicalCores", this.physicalCores);
        jsonWriter.writeStringField("activationState",
            this.activationState == null ? null : this.activationState.toString());
        jsonWriter.writeStringField("scopeType", this.scopeType == null ? null : this.scopeType.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SqlServerEsuLicenseUpdateProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SqlServerEsuLicenseUpdateProperties if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SqlServerEsuLicenseUpdateProperties.
     */
    public static SqlServerEsuLicenseUpdateProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SqlServerEsuLicenseUpdateProperties deserializedSqlServerEsuLicenseUpdateProperties
                = new SqlServerEsuLicenseUpdateProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("billingPlan".equals(fieldName)) {
                    deserializedSqlServerEsuLicenseUpdateProperties.billingPlan
                        = BillingPlan.fromString(reader.getString());
                } else if ("version".equals(fieldName)) {
                    deserializedSqlServerEsuLicenseUpdateProperties.version = Version.fromString(reader.getString());
                } else if ("uniqueId".equals(fieldName)) {
                    deserializedSqlServerEsuLicenseUpdateProperties.uniqueId = reader.getString();
                } else if ("physicalCores".equals(fieldName)) {
                    deserializedSqlServerEsuLicenseUpdateProperties.physicalCores
                        = reader.getNullable(JsonReader::getInt);
                } else if ("activationState".equals(fieldName)) {
                    deserializedSqlServerEsuLicenseUpdateProperties.activationState
                        = State.fromString(reader.getString());
                } else if ("scopeType".equals(fieldName)) {
                    deserializedSqlServerEsuLicenseUpdateProperties.scopeType
                        = ScopeType.fromString(reader.getString());
                } else if ("activatedAt".equals(fieldName)) {
                    deserializedSqlServerEsuLicenseUpdateProperties.activatedAt = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("terminatedAt".equals(fieldName)) {
                    deserializedSqlServerEsuLicenseUpdateProperties.terminatedAt = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("tenantId".equals(fieldName)) {
                    deserializedSqlServerEsuLicenseUpdateProperties.tenantId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSqlServerEsuLicenseUpdateProperties;
        });
    }
}
