// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurearcdata.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * The specifications of the availability group state.
 */
@Immutable
public final class AvailabilityGroupState implements JsonSerializable<AvailabilityGroupState> {
    /*
     * Current Always On availability groups role of the availability group replica.
     */
    private String availabilityGroupReplicaRole;

    /*
     * Current operational state of the availability group replica
     */
    private String operationalStateDescription;

    /*
     * Recovery health of the availability group replica.
     */
    private String recoveryHealthDescription;

    /*
     * Reflects a rollup of the database synchronization state (synchronization_state) of all joined availability
     * databases (also known as replicas) and the availability mode of the replica (synchronous-commit or
     * asynchronous-commit mode). The rollup will reflect the least healthy accumulated state the databases on the
     * replica.
     */
    private String synchronizationHealthDescription;

    /*
     * Whether a secondary replica is currently connected to the primary replica.
     */
    private String connectedStateDescription;

    /*
     * Text description of the last connection error of the availability group replica.
     */
    private String lastConnectErrorDescription;

    /*
     * Date and time timestamp indicating when the last connect error occurred.
     */
    private OffsetDateTime lastConnectErrorTimestamp;

    /**
     * Creates an instance of AvailabilityGroupState class.
     */
    public AvailabilityGroupState() {
    }

    /**
     * Get the availabilityGroupReplicaRole property: Current Always On availability groups role of the availability
     * group replica.
     * 
     * @return the availabilityGroupReplicaRole value.
     */
    public String availabilityGroupReplicaRole() {
        return this.availabilityGroupReplicaRole;
    }

    /**
     * Get the operationalStateDescription property: Current operational state of the availability group replica.
     * 
     * @return the operationalStateDescription value.
     */
    public String operationalStateDescription() {
        return this.operationalStateDescription;
    }

    /**
     * Get the recoveryHealthDescription property: Recovery health of the availability group replica.
     * 
     * @return the recoveryHealthDescription value.
     */
    public String recoveryHealthDescription() {
        return this.recoveryHealthDescription;
    }

    /**
     * Get the synchronizationHealthDescription property: Reflects a rollup of the database synchronization state
     * (synchronization_state) of all joined availability databases (also known as replicas) and the availability mode
     * of the replica (synchronous-commit or asynchronous-commit mode). The rollup will reflect the least healthy
     * accumulated state the databases on the replica.
     * 
     * @return the synchronizationHealthDescription value.
     */
    public String synchronizationHealthDescription() {
        return this.synchronizationHealthDescription;
    }

    /**
     * Get the connectedStateDescription property: Whether a secondary replica is currently connected to the primary
     * replica.
     * 
     * @return the connectedStateDescription value.
     */
    public String connectedStateDescription() {
        return this.connectedStateDescription;
    }

    /**
     * Get the lastConnectErrorDescription property: Text description of the last connection error of the availability
     * group replica.
     * 
     * @return the lastConnectErrorDescription value.
     */
    public String lastConnectErrorDescription() {
        return this.lastConnectErrorDescription;
    }

    /**
     * Get the lastConnectErrorTimestamp property: Date and time timestamp indicating when the last connect error
     * occurred.
     * 
     * @return the lastConnectErrorTimestamp value.
     */
    public OffsetDateTime lastConnectErrorTimestamp() {
        return this.lastConnectErrorTimestamp;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AvailabilityGroupState from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AvailabilityGroupState if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AvailabilityGroupState.
     */
    public static AvailabilityGroupState fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AvailabilityGroupState deserializedAvailabilityGroupState = new AvailabilityGroupState();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("availabilityGroupReplicaRole".equals(fieldName)) {
                    deserializedAvailabilityGroupState.availabilityGroupReplicaRole = reader.getString();
                } else if ("operationalStateDescription".equals(fieldName)) {
                    deserializedAvailabilityGroupState.operationalStateDescription = reader.getString();
                } else if ("recoveryHealthDescription".equals(fieldName)) {
                    deserializedAvailabilityGroupState.recoveryHealthDescription = reader.getString();
                } else if ("synchronizationHealthDescription".equals(fieldName)) {
                    deserializedAvailabilityGroupState.synchronizationHealthDescription = reader.getString();
                } else if ("connectedStateDescription".equals(fieldName)) {
                    deserializedAvailabilityGroupState.connectedStateDescription = reader.getString();
                } else if ("lastConnectErrorDescription".equals(fieldName)) {
                    deserializedAvailabilityGroupState.lastConnectErrorDescription = reader.getString();
                } else if ("lastConnectErrorTimestamp".equals(fieldName)) {
                    deserializedAvailabilityGroupState.lastConnectErrorTimestamp = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAvailabilityGroupState;
        });
    }
}
