// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurearcdata.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Transparent data encryption information.
 */
@Fluent
public final class K8StransparentDataEncryption implements JsonSerializable<K8StransparentDataEncryption> {
    /*
     * Transparent data encryption mode. Can be Service Managed, Customer managed or disabled
     */
    private String mode;

    /*
     * Protector secret for customer managed Transparent data encryption mode
     */
    private String protectorSecret;

    /**
     * Creates an instance of K8StransparentDataEncryption class.
     */
    public K8StransparentDataEncryption() {
    }

    /**
     * Get the mode property: Transparent data encryption mode. Can be Service Managed, Customer managed or disabled.
     * 
     * @return the mode value.
     */
    public String mode() {
        return this.mode;
    }

    /**
     * Set the mode property: Transparent data encryption mode. Can be Service Managed, Customer managed or disabled.
     * 
     * @param mode the mode value to set.
     * @return the K8StransparentDataEncryption object itself.
     */
    public K8StransparentDataEncryption withMode(String mode) {
        this.mode = mode;
        return this;
    }

    /**
     * Get the protectorSecret property: Protector secret for customer managed Transparent data encryption mode.
     * 
     * @return the protectorSecret value.
     */
    public String protectorSecret() {
        return this.protectorSecret;
    }

    /**
     * Set the protectorSecret property: Protector secret for customer managed Transparent data encryption mode.
     * 
     * @param protectorSecret the protectorSecret value to set.
     * @return the K8StransparentDataEncryption object itself.
     */
    public K8StransparentDataEncryption withProtectorSecret(String protectorSecret) {
        this.protectorSecret = protectorSecret;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("mode", this.mode);
        jsonWriter.writeStringField("protectorSecret", this.protectorSecret);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of K8StransparentDataEncryption from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of K8StransparentDataEncryption if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the K8StransparentDataEncryption.
     */
    public static K8StransparentDataEncryption fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            K8StransparentDataEncryption deserializedK8StransparentDataEncryption = new K8StransparentDataEncryption();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("mode".equals(fieldName)) {
                    deserializedK8StransparentDataEncryption.mode = reader.getString();
                } else if ("protectorSecret".equals(fieldName)) {
                    deserializedK8StransparentDataEncryption.protectorSecret = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedK8StransparentDataEncryption;
        });
    }
}
