// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurearcdata.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;
import com.azure.resourcemanager.azurearcdata.fluent.models.SqlServerEsuLicenseInner;
import com.azure.resourcemanager.azurearcdata.models.SqlServerEsuLicenseUpdate;

/**
 * An instance of this class provides access to all the operations defined in SqlServerEsuLicensesClient.
 */
public interface SqlServerEsuLicensesClient {
    /**
     * List sqlServerEsuLicense resources in the subscription.
     * 
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of SQL Server ESU licenses as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<SqlServerEsuLicenseInner> list();

    /**
     * List sqlServerEsuLicense resources in the subscription.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of SQL Server ESU licenses as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<SqlServerEsuLicenseInner> list(Context context);

    /**
     * List sqlServerEsuLicense resources in the resource group
     * 
     * Gets all sqlServerEsuLicenses in a resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all sqlServerEsuLicenses in a resource group as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<SqlServerEsuLicenseInner> listByResourceGroup(String resourceGroupName);

    /**
     * List sqlServerEsuLicense resources in the resource group
     * 
     * Gets all sqlServerEsuLicenses in a resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all sqlServerEsuLicenses in a resource group as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<SqlServerEsuLicenseInner> listByResourceGroup(String resourceGroupName, Context context);

    /**
     * Retrieves a SQL Server ESU license resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sqlServerEsuLicenseName Name of SQL Server ESU License.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describe SQL Server ESU license resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<SqlServerEsuLicenseInner> getByResourceGroupWithResponse(String resourceGroupName,
        String sqlServerEsuLicenseName, Context context);

    /**
     * Retrieves a SQL Server ESU license resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sqlServerEsuLicenseName Name of SQL Server ESU License.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describe SQL Server ESU license resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SqlServerEsuLicenseInner getByResourceGroup(String resourceGroupName, String sqlServerEsuLicenseName);

    /**
     * Creates or replaces a SQL Server ESU license resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sqlServerEsuLicenseName Name of SQL Server ESU License.
     * @param sqlServerEsuLicense The SQL Server ESU license to be created or updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describe SQL Server ESU license resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<SqlServerEsuLicenseInner> createWithResponse(String resourceGroupName, String sqlServerEsuLicenseName,
        SqlServerEsuLicenseInner sqlServerEsuLicense, Context context);

    /**
     * Creates or replaces a SQL Server ESU license resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sqlServerEsuLicenseName Name of SQL Server ESU License.
     * @param sqlServerEsuLicense The SQL Server ESU license to be created or updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describe SQL Server ESU license resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SqlServerEsuLicenseInner create(String resourceGroupName, String sqlServerEsuLicenseName,
        SqlServerEsuLicenseInner sqlServerEsuLicense);

    /**
     * Deletes a SQL Server ESU license resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sqlServerEsuLicenseName Name of SQL Server ESU License.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<Void> deleteWithResponse(String resourceGroupName, String sqlServerEsuLicenseName, Context context);

    /**
     * Deletes a SQL Server ESU license resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sqlServerEsuLicenseName Name of SQL Server ESU License.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String sqlServerEsuLicenseName);

    /**
     * Updates a SQL Server ESU license resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sqlServerEsuLicenseName Name of SQL Server ESU License.
     * @param parameters The SQL Server ESU license.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describe SQL Server ESU license resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<SqlServerEsuLicenseInner> updateWithResponse(String resourceGroupName, String sqlServerEsuLicenseName,
        SqlServerEsuLicenseUpdate parameters, Context context);

    /**
     * Updates a SQL Server ESU license resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sqlServerEsuLicenseName Name of SQL Server ESU License.
     * @param parameters The SQL Server ESU license.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describe SQL Server ESU license resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SqlServerEsuLicenseInner update(String resourceGroupName, String sqlServerEsuLicenseName,
        SqlServerEsuLicenseUpdate parameters);
}
