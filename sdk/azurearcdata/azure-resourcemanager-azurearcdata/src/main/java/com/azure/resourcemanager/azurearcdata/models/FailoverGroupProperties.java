// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurearcdata.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.LinkedHashMap;
import java.util.Map;

/**
 * The properties of a failover group resource.
 */
@Fluent
public final class FailoverGroupProperties implements JsonSerializable<FailoverGroupProperties> {
    /*
     * The provisioning state of the failover group resource.
     */
    private ProvisioningState provisioningState;

    /*
     * The resource ID of the partner SQL managed instance.
     */
    private String partnerManagedInstanceId;

    /*
     * The specifications of the failover group resource.
     */
    private FailoverGroupSpec spec;

    /*
     * The status of the failover group custom resource.
     */
    private Object status;

    /*
     * The properties of a failover group resource.
     */
    private Map<String, Object> additionalProperties;

    /**
     * Creates an instance of FailoverGroupProperties class.
     */
    public FailoverGroupProperties() {
    }

    /**
     * Get the provisioningState property: The provisioning state of the failover group resource.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the partnerManagedInstanceId property: The resource ID of the partner SQL managed instance.
     * 
     * @return the partnerManagedInstanceId value.
     */
    public String partnerManagedInstanceId() {
        return this.partnerManagedInstanceId;
    }

    /**
     * Set the partnerManagedInstanceId property: The resource ID of the partner SQL managed instance.
     * 
     * @param partnerManagedInstanceId the partnerManagedInstanceId value to set.
     * @return the FailoverGroupProperties object itself.
     */
    public FailoverGroupProperties withPartnerManagedInstanceId(String partnerManagedInstanceId) {
        this.partnerManagedInstanceId = partnerManagedInstanceId;
        return this;
    }

    /**
     * Get the spec property: The specifications of the failover group resource.
     * 
     * @return the spec value.
     */
    public FailoverGroupSpec spec() {
        return this.spec;
    }

    /**
     * Set the spec property: The specifications of the failover group resource.
     * 
     * @param spec the spec value to set.
     * @return the FailoverGroupProperties object itself.
     */
    public FailoverGroupProperties withSpec(FailoverGroupSpec spec) {
        this.spec = spec;
        return this;
    }

    /**
     * Get the status property: The status of the failover group custom resource.
     * 
     * @return the status value.
     */
    public Object status() {
        return this.status;
    }

    /**
     * Set the status property: The status of the failover group custom resource.
     * 
     * @param status the status value to set.
     * @return the FailoverGroupProperties object itself.
     */
    public FailoverGroupProperties withStatus(Object status) {
        this.status = status;
        return this;
    }

    /**
     * Get the additionalProperties property: The properties of a failover group resource.
     * 
     * @return the additionalProperties value.
     */
    public Map<String, Object> additionalProperties() {
        return this.additionalProperties;
    }

    /**
     * Set the additionalProperties property: The properties of a failover group resource.
     * 
     * @param additionalProperties the additionalProperties value to set.
     * @return the FailoverGroupProperties object itself.
     */
    public FailoverGroupProperties withAdditionalProperties(Map<String, Object> additionalProperties) {
        this.additionalProperties = additionalProperties;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (partnerManagedInstanceId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property partnerManagedInstanceId in model FailoverGroupProperties"));
        }
        if (spec() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property spec in model FailoverGroupProperties"));
        } else {
            spec().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(FailoverGroupProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("partnerManagedInstanceId", this.partnerManagedInstanceId);
        jsonWriter.writeJsonField("spec", this.spec);
        if (this.status != null) {
            jsonWriter.writeUntypedField("status", this.status);
        }
        if (additionalProperties != null) {
            for (Map.Entry<String, Object> additionalProperty : additionalProperties.entrySet()) {
                jsonWriter.writeUntypedField(additionalProperty.getKey(), additionalProperty.getValue());
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FailoverGroupProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FailoverGroupProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the FailoverGroupProperties.
     */
    public static FailoverGroupProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FailoverGroupProperties deserializedFailoverGroupProperties = new FailoverGroupProperties();
            Map<String, Object> additionalProperties = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("partnerManagedInstanceId".equals(fieldName)) {
                    deserializedFailoverGroupProperties.partnerManagedInstanceId = reader.getString();
                } else if ("spec".equals(fieldName)) {
                    deserializedFailoverGroupProperties.spec = FailoverGroupSpec.fromJson(reader);
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedFailoverGroupProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else if ("status".equals(fieldName)) {
                    deserializedFailoverGroupProperties.status = reader.readUntyped();
                } else {
                    if (additionalProperties == null) {
                        additionalProperties = new LinkedHashMap<>();
                    }

                    additionalProperties.put(fieldName, reader.readUntyped());
                }
            }
            deserializedFailoverGroupProperties.additionalProperties = additionalProperties;

            return deserializedFailoverGroupProperties;
        });
    }
}
