// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurearcdata.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The sequencer action details.
 */
@Fluent
public final class SequencerAction implements JsonSerializable<SequencerAction> {
    /*
     * The unique identifier of the sequencer action.
     */
    private String actionId;

    /*
     * The state of the sequencer action.
     */
    private SequencerState state;

    /*
     * The result of the sequencer action.
     */
    private Result result;

    /**
     * Creates an instance of SequencerAction class.
     */
    public SequencerAction() {
    }

    /**
     * Get the actionId property: The unique identifier of the sequencer action.
     * 
     * @return the actionId value.
     */
    public String actionId() {
        return this.actionId;
    }

    /**
     * Set the actionId property: The unique identifier of the sequencer action.
     * 
     * @param actionId the actionId value to set.
     * @return the SequencerAction object itself.
     */
    public SequencerAction withActionId(String actionId) {
        this.actionId = actionId;
        return this;
    }

    /**
     * Get the state property: The state of the sequencer action.
     * 
     * @return the state value.
     */
    public SequencerState state() {
        return this.state;
    }

    /**
     * Set the state property: The state of the sequencer action.
     * 
     * @param state the state value to set.
     * @return the SequencerAction object itself.
     */
    public SequencerAction withState(SequencerState state) {
        this.state = state;
        return this;
    }

    /**
     * Get the result property: The result of the sequencer action.
     * 
     * @return the result value.
     */
    public Result result() {
        return this.result;
    }

    /**
     * Set the result property: The result of the sequencer action.
     * 
     * @param result the result value to set.
     * @return the SequencerAction object itself.
     */
    public SequencerAction withResult(Result result) {
        this.result = result;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("actionId", this.actionId);
        jsonWriter.writeStringField("state", this.state == null ? null : this.state.toString());
        jsonWriter.writeStringField("result", this.result == null ? null : this.result.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SequencerAction from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SequencerAction if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the SequencerAction.
     */
    public static SequencerAction fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SequencerAction deserializedSequencerAction = new SequencerAction();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("actionId".equals(fieldName)) {
                    deserializedSequencerAction.actionId = reader.getString();
                } else if ("state".equals(fieldName)) {
                    deserializedSequencerAction.state = SequencerState.fromString(reader.getString());
                } else if ("result".equals(fieldName)) {
                    deserializedSequencerAction.result = Result.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSequencerAction;
        });
    }
}
