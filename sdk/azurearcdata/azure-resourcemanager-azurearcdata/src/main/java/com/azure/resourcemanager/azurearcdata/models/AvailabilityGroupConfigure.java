// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurearcdata.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * The specifications of the availability group replica configuration.
 */
@Fluent
public final class AvailabilityGroupConfigure implements JsonSerializable<AvailabilityGroupConfigure> {
    /*
     * Name of the mirroring endpoint URL
     */
    private String endpointName;

    /*
     * Mirroring endpoint URL of availability group replica
     */
    private String endpointUrl;

    /*
     * Permitted authentication modes for the mirroring endpoint.
     */
    private ConnectionAuth endpointAuthenticationMode;

    /*
     * Name of certificate to use for authentication. Required if any CERTIFICATE authentication modes are specified.
     */
    private String certificateName;

    /*
     * The login which will connect to the mirroring endpoint.
     */
    private String endpointConnectLogin;

    /*
     * Property that determines whether a given availability replica can run in synchronous-commit mode
     */
    private ArcSqlServerAvailabilityMode availabilityMode;

    /*
     * The Availability Synchronization mode of the availability group replica.
     */
    private String availabilityModeDescription;

    /*
     * Property to set the failover mode of the availability group replica
     */
    private ArcSqlServerFailoverMode failoverMode;

    /*
     * The failover mode of the availability group replica.
     */
    private String failoverModeDescription;

    /*
     * The time-out period of availability group session replica, in seconds.
     */
    private Integer sessionTimeout;

    /*
     * Whether the primary replica should allow all connections or only READ_WRITE connections (disallowing ReadOnly
     * connections)
     */
    private PrimaryAllowConnections primaryAllowConnections;

    /*
     * Whether the availability allows all connections or only read-write connections.
     */
    private String primaryRoleAllowConnectionsDescription;

    /*
     * Whether the secondary replica should allow all connections, no connections, or only ReadOnly connections.
     */
    private SecondaryAllowConnections secondaryAllowConnections;

    /*
     * Whether an availability replica that is performing the secondary role (that is, a secondary replica) can accept
     * connections from clients.
     */
    private String secondaryRoleAllowConnectionsDescription;

    /*
     * Date that the replica was created.
     */
    private OffsetDateTime replicaCreateDate;

    /*
     * Date that the replica was modified.
     */
    private OffsetDateTime replicaModifyDate;

    /*
     * Represents the user-specified priority for performing backups on this replica relative to the other replicas in
     * the same availability group.
     */
    private Integer backupPriority;

    /*
     * Connectivity endpoint (URL) of the read only availability replica.
     */
    private String readOnlyRoutingUrl;

    /*
     * Connectivity endpoint (URL) of the read write availability replica.
     */
    private String readWriteRoutingUrl;

    /*
     * Specifies how the secondary replica will be initially seeded. AUTOMATIC enables direct seeding. This method will
     * seed the secondary replica over the network. This method does not require you to backup and restore a copy of the
     * primary database on the replica. MANUAL specifies manual seeding (default). This method requires you to create a
     * backup of the database on the primary replica and manually restore that backup on the secondary replica.
     */
    private SeedingMode seedingMode;

    /*
     * Describes seeding mode.
     */
    private String seedingModeDescription;

    /**
     * Creates an instance of AvailabilityGroupConfigure class.
     */
    public AvailabilityGroupConfigure() {
    }

    /**
     * Get the endpointName property: Name of the mirroring endpoint URL.
     * 
     * @return the endpointName value.
     */
    public String endpointName() {
        return this.endpointName;
    }

    /**
     * Set the endpointName property: Name of the mirroring endpoint URL.
     * 
     * @param endpointName the endpointName value to set.
     * @return the AvailabilityGroupConfigure object itself.
     */
    public AvailabilityGroupConfigure withEndpointName(String endpointName) {
        this.endpointName = endpointName;
        return this;
    }

    /**
     * Get the endpointUrl property: Mirroring endpoint URL of availability group replica.
     * 
     * @return the endpointUrl value.
     */
    public String endpointUrl() {
        return this.endpointUrl;
    }

    /**
     * Set the endpointUrl property: Mirroring endpoint URL of availability group replica.
     * 
     * @param endpointUrl the endpointUrl value to set.
     * @return the AvailabilityGroupConfigure object itself.
     */
    public AvailabilityGroupConfigure withEndpointUrl(String endpointUrl) {
        this.endpointUrl = endpointUrl;
        return this;
    }

    /**
     * Get the endpointAuthenticationMode property: Permitted authentication modes for the mirroring endpoint.
     * 
     * @return the endpointAuthenticationMode value.
     */
    public ConnectionAuth endpointAuthenticationMode() {
        return this.endpointAuthenticationMode;
    }

    /**
     * Set the endpointAuthenticationMode property: Permitted authentication modes for the mirroring endpoint.
     * 
     * @param endpointAuthenticationMode the endpointAuthenticationMode value to set.
     * @return the AvailabilityGroupConfigure object itself.
     */
    public AvailabilityGroupConfigure withEndpointAuthenticationMode(ConnectionAuth endpointAuthenticationMode) {
        this.endpointAuthenticationMode = endpointAuthenticationMode;
        return this;
    }

    /**
     * Get the certificateName property: Name of certificate to use for authentication. Required if any CERTIFICATE
     * authentication modes are specified.
     * 
     * @return the certificateName value.
     */
    public String certificateName() {
        return this.certificateName;
    }

    /**
     * Set the certificateName property: Name of certificate to use for authentication. Required if any CERTIFICATE
     * authentication modes are specified.
     * 
     * @param certificateName the certificateName value to set.
     * @return the AvailabilityGroupConfigure object itself.
     */
    public AvailabilityGroupConfigure withCertificateName(String certificateName) {
        this.certificateName = certificateName;
        return this;
    }

    /**
     * Get the endpointConnectLogin property: The login which will connect to the mirroring endpoint.
     * 
     * @return the endpointConnectLogin value.
     */
    public String endpointConnectLogin() {
        return this.endpointConnectLogin;
    }

    /**
     * Set the endpointConnectLogin property: The login which will connect to the mirroring endpoint.
     * 
     * @param endpointConnectLogin the endpointConnectLogin value to set.
     * @return the AvailabilityGroupConfigure object itself.
     */
    public AvailabilityGroupConfigure withEndpointConnectLogin(String endpointConnectLogin) {
        this.endpointConnectLogin = endpointConnectLogin;
        return this;
    }

    /**
     * Get the availabilityMode property: Property that determines whether a given availability replica can run in
     * synchronous-commit mode.
     * 
     * @return the availabilityMode value.
     */
    public ArcSqlServerAvailabilityMode availabilityMode() {
        return this.availabilityMode;
    }

    /**
     * Set the availabilityMode property: Property that determines whether a given availability replica can run in
     * synchronous-commit mode.
     * 
     * @param availabilityMode the availabilityMode value to set.
     * @return the AvailabilityGroupConfigure object itself.
     */
    public AvailabilityGroupConfigure withAvailabilityMode(ArcSqlServerAvailabilityMode availabilityMode) {
        this.availabilityMode = availabilityMode;
        return this;
    }

    /**
     * Get the availabilityModeDescription property: The Availability Synchronization mode of the availability group
     * replica.
     * 
     * @return the availabilityModeDescription value.
     */
    public String availabilityModeDescription() {
        return this.availabilityModeDescription;
    }

    /**
     * Get the failoverMode property: Property to set the failover mode of the availability group replica.
     * 
     * @return the failoverMode value.
     */
    public ArcSqlServerFailoverMode failoverMode() {
        return this.failoverMode;
    }

    /**
     * Set the failoverMode property: Property to set the failover mode of the availability group replica.
     * 
     * @param failoverMode the failoverMode value to set.
     * @return the AvailabilityGroupConfigure object itself.
     */
    public AvailabilityGroupConfigure withFailoverMode(ArcSqlServerFailoverMode failoverMode) {
        this.failoverMode = failoverMode;
        return this;
    }

    /**
     * Get the failoverModeDescription property: The failover mode of the availability group replica.
     * 
     * @return the failoverModeDescription value.
     */
    public String failoverModeDescription() {
        return this.failoverModeDescription;
    }

    /**
     * Get the sessionTimeout property: The time-out period of availability group session replica, in seconds.
     * 
     * @return the sessionTimeout value.
     */
    public Integer sessionTimeout() {
        return this.sessionTimeout;
    }

    /**
     * Set the sessionTimeout property: The time-out period of availability group session replica, in seconds.
     * 
     * @param sessionTimeout the sessionTimeout value to set.
     * @return the AvailabilityGroupConfigure object itself.
     */
    public AvailabilityGroupConfigure withSessionTimeout(Integer sessionTimeout) {
        this.sessionTimeout = sessionTimeout;
        return this;
    }

    /**
     * Get the primaryAllowConnections property: Whether the primary replica should allow all connections or only
     * READ_WRITE connections (disallowing ReadOnly connections).
     * 
     * @return the primaryAllowConnections value.
     */
    public PrimaryAllowConnections primaryAllowConnections() {
        return this.primaryAllowConnections;
    }

    /**
     * Set the primaryAllowConnections property: Whether the primary replica should allow all connections or only
     * READ_WRITE connections (disallowing ReadOnly connections).
     * 
     * @param primaryAllowConnections the primaryAllowConnections value to set.
     * @return the AvailabilityGroupConfigure object itself.
     */
    public AvailabilityGroupConfigure withPrimaryAllowConnections(PrimaryAllowConnections primaryAllowConnections) {
        this.primaryAllowConnections = primaryAllowConnections;
        return this;
    }

    /**
     * Get the primaryRoleAllowConnectionsDescription property: Whether the availability allows all connections or only
     * read-write connections.
     * 
     * @return the primaryRoleAllowConnectionsDescription value.
     */
    public String primaryRoleAllowConnectionsDescription() {
        return this.primaryRoleAllowConnectionsDescription;
    }

    /**
     * Get the secondaryAllowConnections property: Whether the secondary replica should allow all connections, no
     * connections, or only ReadOnly connections.
     * 
     * @return the secondaryAllowConnections value.
     */
    public SecondaryAllowConnections secondaryAllowConnections() {
        return this.secondaryAllowConnections;
    }

    /**
     * Set the secondaryAllowConnections property: Whether the secondary replica should allow all connections, no
     * connections, or only ReadOnly connections.
     * 
     * @param secondaryAllowConnections the secondaryAllowConnections value to set.
     * @return the AvailabilityGroupConfigure object itself.
     */
    public AvailabilityGroupConfigure
        withSecondaryAllowConnections(SecondaryAllowConnections secondaryAllowConnections) {
        this.secondaryAllowConnections = secondaryAllowConnections;
        return this;
    }

    /**
     * Get the secondaryRoleAllowConnectionsDescription property: Whether an availability replica that is performing the
     * secondary role (that is, a secondary replica) can accept connections from clients.
     * 
     * @return the secondaryRoleAllowConnectionsDescription value.
     */
    public String secondaryRoleAllowConnectionsDescription() {
        return this.secondaryRoleAllowConnectionsDescription;
    }

    /**
     * Get the replicaCreateDate property: Date that the replica was created.
     * 
     * @return the replicaCreateDate value.
     */
    public OffsetDateTime replicaCreateDate() {
        return this.replicaCreateDate;
    }

    /**
     * Get the replicaModifyDate property: Date that the replica was modified.
     * 
     * @return the replicaModifyDate value.
     */
    public OffsetDateTime replicaModifyDate() {
        return this.replicaModifyDate;
    }

    /**
     * Get the backupPriority property: Represents the user-specified priority for performing backups on this replica
     * relative to the other replicas in the same availability group.
     * 
     * @return the backupPriority value.
     */
    public Integer backupPriority() {
        return this.backupPriority;
    }

    /**
     * Set the backupPriority property: Represents the user-specified priority for performing backups on this replica
     * relative to the other replicas in the same availability group.
     * 
     * @param backupPriority the backupPriority value to set.
     * @return the AvailabilityGroupConfigure object itself.
     */
    public AvailabilityGroupConfigure withBackupPriority(Integer backupPriority) {
        this.backupPriority = backupPriority;
        return this;
    }

    /**
     * Get the readOnlyRoutingUrl property: Connectivity endpoint (URL) of the read only availability replica.
     * 
     * @return the readOnlyRoutingUrl value.
     */
    public String readOnlyRoutingUrl() {
        return this.readOnlyRoutingUrl;
    }

    /**
     * Set the readOnlyRoutingUrl property: Connectivity endpoint (URL) of the read only availability replica.
     * 
     * @param readOnlyRoutingUrl the readOnlyRoutingUrl value to set.
     * @return the AvailabilityGroupConfigure object itself.
     */
    public AvailabilityGroupConfigure withReadOnlyRoutingUrl(String readOnlyRoutingUrl) {
        this.readOnlyRoutingUrl = readOnlyRoutingUrl;
        return this;
    }

    /**
     * Get the readWriteRoutingUrl property: Connectivity endpoint (URL) of the read write availability replica.
     * 
     * @return the readWriteRoutingUrl value.
     */
    public String readWriteRoutingUrl() {
        return this.readWriteRoutingUrl;
    }

    /**
     * Set the readWriteRoutingUrl property: Connectivity endpoint (URL) of the read write availability replica.
     * 
     * @param readWriteRoutingUrl the readWriteRoutingUrl value to set.
     * @return the AvailabilityGroupConfigure object itself.
     */
    public AvailabilityGroupConfigure withReadWriteRoutingUrl(String readWriteRoutingUrl) {
        this.readWriteRoutingUrl = readWriteRoutingUrl;
        return this;
    }

    /**
     * Get the seedingMode property: Specifies how the secondary replica will be initially seeded. AUTOMATIC enables
     * direct seeding. This method will seed the secondary replica over the network. This method does not require you to
     * backup and restore a copy of the primary database on the replica. MANUAL specifies manual seeding (default). This
     * method requires you to create a backup of the database on the primary replica and manually restore that backup on
     * the secondary replica.
     * 
     * @return the seedingMode value.
     */
    public SeedingMode seedingMode() {
        return this.seedingMode;
    }

    /**
     * Set the seedingMode property: Specifies how the secondary replica will be initially seeded. AUTOMATIC enables
     * direct seeding. This method will seed the secondary replica over the network. This method does not require you to
     * backup and restore a copy of the primary database on the replica. MANUAL specifies manual seeding (default). This
     * method requires you to create a backup of the database on the primary replica and manually restore that backup on
     * the secondary replica.
     * 
     * @param seedingMode the seedingMode value to set.
     * @return the AvailabilityGroupConfigure object itself.
     */
    public AvailabilityGroupConfigure withSeedingMode(SeedingMode seedingMode) {
        this.seedingMode = seedingMode;
        return this;
    }

    /**
     * Get the seedingModeDescription property: Describes seeding mode.
     * 
     * @return the seedingModeDescription value.
     */
    public String seedingModeDescription() {
        return this.seedingModeDescription;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("endpointName", this.endpointName);
        jsonWriter.writeStringField("endpointUrl", this.endpointUrl);
        jsonWriter.writeStringField("endpointAuthenticationMode",
            this.endpointAuthenticationMode == null ? null : this.endpointAuthenticationMode.toString());
        jsonWriter.writeStringField("certificateName", this.certificateName);
        jsonWriter.writeStringField("endpointConnectLogin", this.endpointConnectLogin);
        jsonWriter.writeStringField("availabilityMode",
            this.availabilityMode == null ? null : this.availabilityMode.toString());
        jsonWriter.writeStringField("failoverMode", this.failoverMode == null ? null : this.failoverMode.toString());
        jsonWriter.writeNumberField("sessionTimeout", this.sessionTimeout);
        jsonWriter.writeStringField("primaryAllowConnections",
            this.primaryAllowConnections == null ? null : this.primaryAllowConnections.toString());
        jsonWriter.writeStringField("secondaryAllowConnections",
            this.secondaryAllowConnections == null ? null : this.secondaryAllowConnections.toString());
        jsonWriter.writeNumberField("backupPriority", this.backupPriority);
        jsonWriter.writeStringField("readOnlyRoutingUrl", this.readOnlyRoutingUrl);
        jsonWriter.writeStringField("readWriteRoutingUrl", this.readWriteRoutingUrl);
        jsonWriter.writeStringField("seedingMode", this.seedingMode == null ? null : this.seedingMode.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AvailabilityGroupConfigure from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AvailabilityGroupConfigure if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AvailabilityGroupConfigure.
     */
    public static AvailabilityGroupConfigure fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AvailabilityGroupConfigure deserializedAvailabilityGroupConfigure = new AvailabilityGroupConfigure();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("endpointName".equals(fieldName)) {
                    deserializedAvailabilityGroupConfigure.endpointName = reader.getString();
                } else if ("endpointUrl".equals(fieldName)) {
                    deserializedAvailabilityGroupConfigure.endpointUrl = reader.getString();
                } else if ("endpointAuthenticationMode".equals(fieldName)) {
                    deserializedAvailabilityGroupConfigure.endpointAuthenticationMode
                        = ConnectionAuth.fromString(reader.getString());
                } else if ("certificateName".equals(fieldName)) {
                    deserializedAvailabilityGroupConfigure.certificateName = reader.getString();
                } else if ("endpointConnectLogin".equals(fieldName)) {
                    deserializedAvailabilityGroupConfigure.endpointConnectLogin = reader.getString();
                } else if ("availabilityMode".equals(fieldName)) {
                    deserializedAvailabilityGroupConfigure.availabilityMode
                        = ArcSqlServerAvailabilityMode.fromString(reader.getString());
                } else if ("availabilityModeDescription".equals(fieldName)) {
                    deserializedAvailabilityGroupConfigure.availabilityModeDescription = reader.getString();
                } else if ("failoverMode".equals(fieldName)) {
                    deserializedAvailabilityGroupConfigure.failoverMode
                        = ArcSqlServerFailoverMode.fromString(reader.getString());
                } else if ("failoverModeDescription".equals(fieldName)) {
                    deserializedAvailabilityGroupConfigure.failoverModeDescription = reader.getString();
                } else if ("sessionTimeout".equals(fieldName)) {
                    deserializedAvailabilityGroupConfigure.sessionTimeout = reader.getNullable(JsonReader::getInt);
                } else if ("primaryAllowConnections".equals(fieldName)) {
                    deserializedAvailabilityGroupConfigure.primaryAllowConnections
                        = PrimaryAllowConnections.fromString(reader.getString());
                } else if ("primaryRoleAllowConnectionsDescription".equals(fieldName)) {
                    deserializedAvailabilityGroupConfigure.primaryRoleAllowConnectionsDescription = reader.getString();
                } else if ("secondaryAllowConnections".equals(fieldName)) {
                    deserializedAvailabilityGroupConfigure.secondaryAllowConnections
                        = SecondaryAllowConnections.fromString(reader.getString());
                } else if ("secondaryRoleAllowConnectionsDescription".equals(fieldName)) {
                    deserializedAvailabilityGroupConfigure.secondaryRoleAllowConnectionsDescription
                        = reader.getString();
                } else if ("replicaCreateDate".equals(fieldName)) {
                    deserializedAvailabilityGroupConfigure.replicaCreateDate = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("replicaModifyDate".equals(fieldName)) {
                    deserializedAvailabilityGroupConfigure.replicaModifyDate = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("backupPriority".equals(fieldName)) {
                    deserializedAvailabilityGroupConfigure.backupPriority = reader.getNullable(JsonReader::getInt);
                } else if ("readOnlyRoutingUrl".equals(fieldName)) {
                    deserializedAvailabilityGroupConfigure.readOnlyRoutingUrl = reader.getString();
                } else if ("readWriteRoutingUrl".equals(fieldName)) {
                    deserializedAvailabilityGroupConfigure.readWriteRoutingUrl = reader.getString();
                } else if ("seedingMode".equals(fieldName)) {
                    deserializedAvailabilityGroupConfigure.seedingMode = SeedingMode.fromString(reader.getString());
                } else if ("seedingModeDescription".equals(fieldName)) {
                    deserializedAvailabilityGroupConfigure.seedingModeDescription = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAvailabilityGroupConfigure;
        });
    }
}
