// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurearcdata.models;

import com.azure.core.util.ExpandableStringEnum;
import java.util.Collection;

/**
 * The encryption algorithm(s) used by the endpoint.
 */
public final class EncryptionAlgorithm extends ExpandableStringEnum<EncryptionAlgorithm> {
    /**
     * Static value NONE for EncryptionAlgorithm.
     */
    public static final EncryptionAlgorithm NONE = fromString("NONE");

    /**
     * Static value RC4 for EncryptionAlgorithm.
     */
    public static final EncryptionAlgorithm RC4 = fromString("RC4");

    /**
     * Static value AES for EncryptionAlgorithm.
     */
    public static final EncryptionAlgorithm AES = fromString("AES");

    /**
     * Static value NONE, RC4 for EncryptionAlgorithm.
     */
    public static final EncryptionAlgorithm NONE_RC4 = fromString("NONE, RC4");

    /**
     * Static value NONE, AES for EncryptionAlgorithm.
     */
    public static final EncryptionAlgorithm NONE_AES = fromString("NONE, AES");

    /**
     * Static value RC4, AES for EncryptionAlgorithm.
     */
    public static final EncryptionAlgorithm RC4_AES = fromString("RC4, AES");

    /**
     * Static value AES, RC4 for EncryptionAlgorithm.
     */
    public static final EncryptionAlgorithm AES_RC4 = fromString("AES, RC4");

    /**
     * Static value NONE, RC4, AES for EncryptionAlgorithm.
     */
    public static final EncryptionAlgorithm NONE_RC4_AES = fromString("NONE, RC4, AES");

    /**
     * Static value NONE, AES, RC4 for EncryptionAlgorithm.
     */
    public static final EncryptionAlgorithm NONE_AES_RC4 = fromString("NONE, AES, RC4");

    /**
     * Creates a new instance of EncryptionAlgorithm value.
     * 
     * @deprecated Use the {@link #fromString(String)} factory method.
     */
    @Deprecated
    public EncryptionAlgorithm() {
    }

    /**
     * Creates or finds a EncryptionAlgorithm from its string representation.
     * 
     * @param name a name to look for.
     * @return the corresponding EncryptionAlgorithm.
     */
    public static EncryptionAlgorithm fromString(String name) {
        return fromString(name, EncryptionAlgorithm.class);
    }

    /**
     * Gets known EncryptionAlgorithm values.
     * 
     * @return known EncryptionAlgorithm values.
     */
    public static Collection<EncryptionAlgorithm> values() {
        return values(EncryptionAlgorithm.class);
    }
}
