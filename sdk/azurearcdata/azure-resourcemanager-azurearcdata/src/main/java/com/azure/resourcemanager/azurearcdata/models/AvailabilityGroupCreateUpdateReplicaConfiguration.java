// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurearcdata.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The specifications of the availability group replica configuration.
 */
@Fluent
public final class AvailabilityGroupCreateUpdateReplicaConfiguration
    implements JsonSerializable<AvailabilityGroupCreateUpdateReplicaConfiguration> {
    /*
     * the server instance hosting the replica.
     */
    private String serverInstance;

    /*
     * Name of the database mirroring endpoint URL for the availability group replica
     */
    private String endpointName;

    /*
     * Database mirroring endpoint URL of availability group replica
     */
    private String endpointUrl;

    /*
     * Permitted authentication modes for the mirroring endpoint.
     */
    private ConnectionAuth endpointAuthenticationMode;

    /*
     * Name of certificate to use for authentication. Required if any CERTIFICATE authentication modes are specified.
     */
    private String certificateName;

    /*
     * The login which will connect to the mirroring endpoint
     */
    private String endpointConnectLogin;

    /*
     * Property that determines whether a given availability replica can run in synchronous-commit mode
     */
    private ArcSqlServerAvailabilityMode availabilityMode;

    /*
     * Property to set the failover mode of the availability group replica
     */
    private ArcSqlServerFailoverMode failoverMode;

    /*
     * Specifies how the secondary replica will be initially seeded. AUTOMATIC enables direct seeding. This method will
     * seed the secondary replica over the network. This method does not require you to backup and restore a copy of the
     * primary database on the replica. MANUAL specifies manual seeding (default). This method requires you to create a
     * backup of the database on the primary replica and manually restore that backup on the secondary replica.
     */
    private SeedingMode seedingMode;

    /*
     * Represents the user-specified priority for performing backups on this replica relative to the other replicas in
     * the same availability group.
     */
    private Integer backupPriority;

    /*
     * Whether the secondary replica should allow all connections, no connections, or only ReadOnly connections.
     */
    private SecondaryAllowConnections secondaryRoleAllowConnections;

    /*
     * Connectivity endpoint (URL) of the read only availability replica.
     */
    private String secondaryRoleReadOnlyRoutingUrl;

    /*
     * Whether the primary replica should allow all connections or only READ_WRITE connections (disallowing ReadOnly
     * connections)
     */
    private PrimaryAllowConnections primaryRoleAllowConnections;

    /*
     * List of read only routing URLs.
     */
    private List<String> primaryRoleReadOnlyRoutingList;

    /*
     * The time-out period of availability group session replica, in seconds.
     */
    private Integer sessionTimeout;

    /**
     * Creates an instance of AvailabilityGroupCreateUpdateReplicaConfiguration class.
     */
    public AvailabilityGroupCreateUpdateReplicaConfiguration() {
    }

    /**
     * Get the serverInstance property: the server instance hosting the replica.
     * 
     * @return the serverInstance value.
     */
    public String serverInstance() {
        return this.serverInstance;
    }

    /**
     * Set the serverInstance property: the server instance hosting the replica.
     * 
     * @param serverInstance the serverInstance value to set.
     * @return the AvailabilityGroupCreateUpdateReplicaConfiguration object itself.
     */
    public AvailabilityGroupCreateUpdateReplicaConfiguration withServerInstance(String serverInstance) {
        this.serverInstance = serverInstance;
        return this;
    }

    /**
     * Get the endpointName property: Name of the database mirroring endpoint URL for the availability group replica.
     * 
     * @return the endpointName value.
     */
    public String endpointName() {
        return this.endpointName;
    }

    /**
     * Set the endpointName property: Name of the database mirroring endpoint URL for the availability group replica.
     * 
     * @param endpointName the endpointName value to set.
     * @return the AvailabilityGroupCreateUpdateReplicaConfiguration object itself.
     */
    public AvailabilityGroupCreateUpdateReplicaConfiguration withEndpointName(String endpointName) {
        this.endpointName = endpointName;
        return this;
    }

    /**
     * Get the endpointUrl property: Database mirroring endpoint URL of availability group replica.
     * 
     * @return the endpointUrl value.
     */
    public String endpointUrl() {
        return this.endpointUrl;
    }

    /**
     * Set the endpointUrl property: Database mirroring endpoint URL of availability group replica.
     * 
     * @param endpointUrl the endpointUrl value to set.
     * @return the AvailabilityGroupCreateUpdateReplicaConfiguration object itself.
     */
    public AvailabilityGroupCreateUpdateReplicaConfiguration withEndpointUrl(String endpointUrl) {
        this.endpointUrl = endpointUrl;
        return this;
    }

    /**
     * Get the endpointAuthenticationMode property: Permitted authentication modes for the mirroring endpoint.
     * 
     * @return the endpointAuthenticationMode value.
     */
    public ConnectionAuth endpointAuthenticationMode() {
        return this.endpointAuthenticationMode;
    }

    /**
     * Set the endpointAuthenticationMode property: Permitted authentication modes for the mirroring endpoint.
     * 
     * @param endpointAuthenticationMode the endpointAuthenticationMode value to set.
     * @return the AvailabilityGroupCreateUpdateReplicaConfiguration object itself.
     */
    public AvailabilityGroupCreateUpdateReplicaConfiguration
        withEndpointAuthenticationMode(ConnectionAuth endpointAuthenticationMode) {
        this.endpointAuthenticationMode = endpointAuthenticationMode;
        return this;
    }

    /**
     * Get the certificateName property: Name of certificate to use for authentication. Required if any CERTIFICATE
     * authentication modes are specified.
     * 
     * @return the certificateName value.
     */
    public String certificateName() {
        return this.certificateName;
    }

    /**
     * Set the certificateName property: Name of certificate to use for authentication. Required if any CERTIFICATE
     * authentication modes are specified.
     * 
     * @param certificateName the certificateName value to set.
     * @return the AvailabilityGroupCreateUpdateReplicaConfiguration object itself.
     */
    public AvailabilityGroupCreateUpdateReplicaConfiguration withCertificateName(String certificateName) {
        this.certificateName = certificateName;
        return this;
    }

    /**
     * Get the endpointConnectLogin property: The login which will connect to the mirroring endpoint.
     * 
     * @return the endpointConnectLogin value.
     */
    public String endpointConnectLogin() {
        return this.endpointConnectLogin;
    }

    /**
     * Set the endpointConnectLogin property: The login which will connect to the mirroring endpoint.
     * 
     * @param endpointConnectLogin the endpointConnectLogin value to set.
     * @return the AvailabilityGroupCreateUpdateReplicaConfiguration object itself.
     */
    public AvailabilityGroupCreateUpdateReplicaConfiguration withEndpointConnectLogin(String endpointConnectLogin) {
        this.endpointConnectLogin = endpointConnectLogin;
        return this;
    }

    /**
     * Get the availabilityMode property: Property that determines whether a given availability replica can run in
     * synchronous-commit mode.
     * 
     * @return the availabilityMode value.
     */
    public ArcSqlServerAvailabilityMode availabilityMode() {
        return this.availabilityMode;
    }

    /**
     * Set the availabilityMode property: Property that determines whether a given availability replica can run in
     * synchronous-commit mode.
     * 
     * @param availabilityMode the availabilityMode value to set.
     * @return the AvailabilityGroupCreateUpdateReplicaConfiguration object itself.
     */
    public AvailabilityGroupCreateUpdateReplicaConfiguration
        withAvailabilityMode(ArcSqlServerAvailabilityMode availabilityMode) {
        this.availabilityMode = availabilityMode;
        return this;
    }

    /**
     * Get the failoverMode property: Property to set the failover mode of the availability group replica.
     * 
     * @return the failoverMode value.
     */
    public ArcSqlServerFailoverMode failoverMode() {
        return this.failoverMode;
    }

    /**
     * Set the failoverMode property: Property to set the failover mode of the availability group replica.
     * 
     * @param failoverMode the failoverMode value to set.
     * @return the AvailabilityGroupCreateUpdateReplicaConfiguration object itself.
     */
    public AvailabilityGroupCreateUpdateReplicaConfiguration withFailoverMode(ArcSqlServerFailoverMode failoverMode) {
        this.failoverMode = failoverMode;
        return this;
    }

    /**
     * Get the seedingMode property: Specifies how the secondary replica will be initially seeded. AUTOMATIC enables
     * direct seeding. This method will seed the secondary replica over the network. This method does not require you to
     * backup and restore a copy of the primary database on the replica. MANUAL specifies manual seeding (default). This
     * method requires you to create a backup of the database on the primary replica and manually restore that backup on
     * the secondary replica.
     * 
     * @return the seedingMode value.
     */
    public SeedingMode seedingMode() {
        return this.seedingMode;
    }

    /**
     * Set the seedingMode property: Specifies how the secondary replica will be initially seeded. AUTOMATIC enables
     * direct seeding. This method will seed the secondary replica over the network. This method does not require you to
     * backup and restore a copy of the primary database on the replica. MANUAL specifies manual seeding (default). This
     * method requires you to create a backup of the database on the primary replica and manually restore that backup on
     * the secondary replica.
     * 
     * @param seedingMode the seedingMode value to set.
     * @return the AvailabilityGroupCreateUpdateReplicaConfiguration object itself.
     */
    public AvailabilityGroupCreateUpdateReplicaConfiguration withSeedingMode(SeedingMode seedingMode) {
        this.seedingMode = seedingMode;
        return this;
    }

    /**
     * Get the backupPriority property: Represents the user-specified priority for performing backups on this replica
     * relative to the other replicas in the same availability group.
     * 
     * @return the backupPriority value.
     */
    public Integer backupPriority() {
        return this.backupPriority;
    }

    /**
     * Set the backupPriority property: Represents the user-specified priority for performing backups on this replica
     * relative to the other replicas in the same availability group.
     * 
     * @param backupPriority the backupPriority value to set.
     * @return the AvailabilityGroupCreateUpdateReplicaConfiguration object itself.
     */
    public AvailabilityGroupCreateUpdateReplicaConfiguration withBackupPriority(Integer backupPriority) {
        this.backupPriority = backupPriority;
        return this;
    }

    /**
     * Get the secondaryRoleAllowConnections property: Whether the secondary replica should allow all connections, no
     * connections, or only ReadOnly connections.
     * 
     * @return the secondaryRoleAllowConnections value.
     */
    public SecondaryAllowConnections secondaryRoleAllowConnections() {
        return this.secondaryRoleAllowConnections;
    }

    /**
     * Set the secondaryRoleAllowConnections property: Whether the secondary replica should allow all connections, no
     * connections, or only ReadOnly connections.
     * 
     * @param secondaryRoleAllowConnections the secondaryRoleAllowConnections value to set.
     * @return the AvailabilityGroupCreateUpdateReplicaConfiguration object itself.
     */
    public AvailabilityGroupCreateUpdateReplicaConfiguration
        withSecondaryRoleAllowConnections(SecondaryAllowConnections secondaryRoleAllowConnections) {
        this.secondaryRoleAllowConnections = secondaryRoleAllowConnections;
        return this;
    }

    /**
     * Get the secondaryRoleReadOnlyRoutingUrl property: Connectivity endpoint (URL) of the read only availability
     * replica.
     * 
     * @return the secondaryRoleReadOnlyRoutingUrl value.
     */
    public String secondaryRoleReadOnlyRoutingUrl() {
        return this.secondaryRoleReadOnlyRoutingUrl;
    }

    /**
     * Set the secondaryRoleReadOnlyRoutingUrl property: Connectivity endpoint (URL) of the read only availability
     * replica.
     * 
     * @param secondaryRoleReadOnlyRoutingUrl the secondaryRoleReadOnlyRoutingUrl value to set.
     * @return the AvailabilityGroupCreateUpdateReplicaConfiguration object itself.
     */
    public AvailabilityGroupCreateUpdateReplicaConfiguration
        withSecondaryRoleReadOnlyRoutingUrl(String secondaryRoleReadOnlyRoutingUrl) {
        this.secondaryRoleReadOnlyRoutingUrl = secondaryRoleReadOnlyRoutingUrl;
        return this;
    }

    /**
     * Get the primaryRoleAllowConnections property: Whether the primary replica should allow all connections or only
     * READ_WRITE connections (disallowing ReadOnly connections).
     * 
     * @return the primaryRoleAllowConnections value.
     */
    public PrimaryAllowConnections primaryRoleAllowConnections() {
        return this.primaryRoleAllowConnections;
    }

    /**
     * Set the primaryRoleAllowConnections property: Whether the primary replica should allow all connections or only
     * READ_WRITE connections (disallowing ReadOnly connections).
     * 
     * @param primaryRoleAllowConnections the primaryRoleAllowConnections value to set.
     * @return the AvailabilityGroupCreateUpdateReplicaConfiguration object itself.
     */
    public AvailabilityGroupCreateUpdateReplicaConfiguration
        withPrimaryRoleAllowConnections(PrimaryAllowConnections primaryRoleAllowConnections) {
        this.primaryRoleAllowConnections = primaryRoleAllowConnections;
        return this;
    }

    /**
     * Get the primaryRoleReadOnlyRoutingList property: List of read only routing URLs.
     * 
     * @return the primaryRoleReadOnlyRoutingList value.
     */
    public List<String> primaryRoleReadOnlyRoutingList() {
        return this.primaryRoleReadOnlyRoutingList;
    }

    /**
     * Set the primaryRoleReadOnlyRoutingList property: List of read only routing URLs.
     * 
     * @param primaryRoleReadOnlyRoutingList the primaryRoleReadOnlyRoutingList value to set.
     * @return the AvailabilityGroupCreateUpdateReplicaConfiguration object itself.
     */
    public AvailabilityGroupCreateUpdateReplicaConfiguration
        withPrimaryRoleReadOnlyRoutingList(List<String> primaryRoleReadOnlyRoutingList) {
        this.primaryRoleReadOnlyRoutingList = primaryRoleReadOnlyRoutingList;
        return this;
    }

    /**
     * Get the sessionTimeout property: The time-out period of availability group session replica, in seconds.
     * 
     * @return the sessionTimeout value.
     */
    public Integer sessionTimeout() {
        return this.sessionTimeout;
    }

    /**
     * Set the sessionTimeout property: The time-out period of availability group session replica, in seconds.
     * 
     * @param sessionTimeout the sessionTimeout value to set.
     * @return the AvailabilityGroupCreateUpdateReplicaConfiguration object itself.
     */
    public AvailabilityGroupCreateUpdateReplicaConfiguration withSessionTimeout(Integer sessionTimeout) {
        this.sessionTimeout = sessionTimeout;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("serverInstance", this.serverInstance);
        jsonWriter.writeStringField("endpointName", this.endpointName);
        jsonWriter.writeStringField("endpointUrl", this.endpointUrl);
        jsonWriter.writeStringField("endpointAuthenticationMode",
            this.endpointAuthenticationMode == null ? null : this.endpointAuthenticationMode.toString());
        jsonWriter.writeStringField("certificateName", this.certificateName);
        jsonWriter.writeStringField("endpointConnectLogin", this.endpointConnectLogin);
        jsonWriter.writeStringField("availabilityMode",
            this.availabilityMode == null ? null : this.availabilityMode.toString());
        jsonWriter.writeStringField("failoverMode", this.failoverMode == null ? null : this.failoverMode.toString());
        jsonWriter.writeStringField("seedingMode", this.seedingMode == null ? null : this.seedingMode.toString());
        jsonWriter.writeNumberField("backupPriority", this.backupPriority);
        jsonWriter.writeStringField("secondaryRoleAllowConnections",
            this.secondaryRoleAllowConnections == null ? null : this.secondaryRoleAllowConnections.toString());
        jsonWriter.writeStringField("secondaryRoleReadOnlyRoutingUrl", this.secondaryRoleReadOnlyRoutingUrl);
        jsonWriter.writeStringField("primaryRoleAllowConnections",
            this.primaryRoleAllowConnections == null ? null : this.primaryRoleAllowConnections.toString());
        jsonWriter.writeArrayField("primaryRoleReadOnlyRoutingList", this.primaryRoleReadOnlyRoutingList,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeNumberField("sessionTimeout", this.sessionTimeout);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AvailabilityGroupCreateUpdateReplicaConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AvailabilityGroupCreateUpdateReplicaConfiguration if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AvailabilityGroupCreateUpdateReplicaConfiguration.
     */
    public static AvailabilityGroupCreateUpdateReplicaConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AvailabilityGroupCreateUpdateReplicaConfiguration deserializedAvailabilityGroupCreateUpdateReplicaConfiguration
                = new AvailabilityGroupCreateUpdateReplicaConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("serverInstance".equals(fieldName)) {
                    deserializedAvailabilityGroupCreateUpdateReplicaConfiguration.serverInstance = reader.getString();
                } else if ("endpointName".equals(fieldName)) {
                    deserializedAvailabilityGroupCreateUpdateReplicaConfiguration.endpointName = reader.getString();
                } else if ("endpointUrl".equals(fieldName)) {
                    deserializedAvailabilityGroupCreateUpdateReplicaConfiguration.endpointUrl = reader.getString();
                } else if ("endpointAuthenticationMode".equals(fieldName)) {
                    deserializedAvailabilityGroupCreateUpdateReplicaConfiguration.endpointAuthenticationMode
                        = ConnectionAuth.fromString(reader.getString());
                } else if ("certificateName".equals(fieldName)) {
                    deserializedAvailabilityGroupCreateUpdateReplicaConfiguration.certificateName = reader.getString();
                } else if ("endpointConnectLogin".equals(fieldName)) {
                    deserializedAvailabilityGroupCreateUpdateReplicaConfiguration.endpointConnectLogin
                        = reader.getString();
                } else if ("availabilityMode".equals(fieldName)) {
                    deserializedAvailabilityGroupCreateUpdateReplicaConfiguration.availabilityMode
                        = ArcSqlServerAvailabilityMode.fromString(reader.getString());
                } else if ("failoverMode".equals(fieldName)) {
                    deserializedAvailabilityGroupCreateUpdateReplicaConfiguration.failoverMode
                        = ArcSqlServerFailoverMode.fromString(reader.getString());
                } else if ("seedingMode".equals(fieldName)) {
                    deserializedAvailabilityGroupCreateUpdateReplicaConfiguration.seedingMode
                        = SeedingMode.fromString(reader.getString());
                } else if ("backupPriority".equals(fieldName)) {
                    deserializedAvailabilityGroupCreateUpdateReplicaConfiguration.backupPriority
                        = reader.getNullable(JsonReader::getInt);
                } else if ("secondaryRoleAllowConnections".equals(fieldName)) {
                    deserializedAvailabilityGroupCreateUpdateReplicaConfiguration.secondaryRoleAllowConnections
                        = SecondaryAllowConnections.fromString(reader.getString());
                } else if ("secondaryRoleReadOnlyRoutingUrl".equals(fieldName)) {
                    deserializedAvailabilityGroupCreateUpdateReplicaConfiguration.secondaryRoleReadOnlyRoutingUrl
                        = reader.getString();
                } else if ("primaryRoleAllowConnections".equals(fieldName)) {
                    deserializedAvailabilityGroupCreateUpdateReplicaConfiguration.primaryRoleAllowConnections
                        = PrimaryAllowConnections.fromString(reader.getString());
                } else if ("primaryRoleReadOnlyRoutingList".equals(fieldName)) {
                    List<String> primaryRoleReadOnlyRoutingList = reader.readArray(reader1 -> reader1.getString());
                    deserializedAvailabilityGroupCreateUpdateReplicaConfiguration.primaryRoleReadOnlyRoutingList
                        = primaryRoleReadOnlyRoutingList;
                } else if ("sessionTimeout".equals(fieldName)) {
                    deserializedAvailabilityGroupCreateUpdateReplicaConfiguration.sessionTimeout
                        = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAvailabilityGroupCreateUpdateReplicaConfiguration;
        });
    }
}
