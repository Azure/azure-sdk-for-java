// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurearcdata.generated;

import com.azure.resourcemanager.azurearcdata.models.AvailabilityGroupConfigure;
import com.azure.resourcemanager.azurearcdata.models.AvailabilityGroupInfo;
import com.azure.resourcemanager.azurearcdata.models.SqlAvailabilityGroupDatabaseReplicaResourceProperties;
import com.azure.resourcemanager.azurearcdata.models.SqlAvailabilityGroupReplicaResourceProperties;
import com.azure.resourcemanager.azurearcdata.models.SqlServerAvailabilityGroupResourceProperties;
import com.azure.resourcemanager.azurearcdata.models.SqlServerAvailabilityGroupResourcePropertiesDatabases;
import com.azure.resourcemanager.azurearcdata.models.SqlServerAvailabilityGroupResourcePropertiesReplicas;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for SqlServerAvailabilityGroups Create.
 */
public final class SqlServerAvailabilityGroupsCreateSamples {
    /*
     * x-ms-original-file:
     * specification/azurearcdata/resource-manager/Microsoft.AzureArcData/preview/2025-03-01-preview/examples/
     * CreateOrUpdateArcSqlServerAvailabilityGroup.json
     */
    /**
     * Sample code: Create a Arc Sql Server availability group.
     * 
     * @param manager Entry point to AzureArcDataManager.
     */
    public static void
        createAArcSqlServerAvailabilityGroup(com.azure.resourcemanager.azurearcdata.AzureArcDataManager manager) {
        manager.sqlServerAvailabilityGroups()
            .define("testAG")
            .withRegion("southeastasia")
            .withExistingSqlServerInstance("testrg", "testSqlServer_INST1")
            .withProperties(
                new SqlServerAvailabilityGroupResourceProperties()
                    .withInfo(new AvailabilityGroupInfo().withFailureConditionLevel(3)
                        .withHealthCheckTimeout(30000)
                        .withBasicFeatures(false)
                        .withDtcSupport(false)
                        .withDbFailover(true)
                        .withIsDistributed(false)
                        .withRequiredSynchronizedSecondariesToCommit(0)
                        .withIsContained(false))
                    .withReplicas(
                        new SqlServerAvailabilityGroupResourcePropertiesReplicas().withValue(Arrays.asList(
                            new SqlAvailabilityGroupReplicaResourceProperties().withReplicaName("testSqlServer\\INST1")
                                .withConfigure(new AvailabilityGroupConfigure()
                                    .withEndpointUrl("TCP://mytest60-0.mytest60-svc:5022")
                                    .withSessionTimeout(10)
                                    .withBackupPriority(50)))))
                    .withDatabases(new SqlServerAvailabilityGroupResourcePropertiesDatabases().withValue(Arrays.asList(
                        new SqlAvailabilityGroupDatabaseReplicaResourceProperties().withDatabaseName("db1"),
                        new SqlAvailabilityGroupDatabaseReplicaResourceProperties().withDatabaseName("db2")))))
            .withTags(mapOf("mytag", "myval"))
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
