// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurearcdata.generated;

import com.azure.resourcemanager.azurearcdata.models.ActiveDirectoryInformation;
import com.azure.resourcemanager.azurearcdata.models.ArcSqlManagedInstanceLicenseType;
import com.azure.resourcemanager.azurearcdata.models.BasicLoginInformation;
import com.azure.resourcemanager.azurearcdata.models.ExtendedLocation;
import com.azure.resourcemanager.azurearcdata.models.ExtendedLocationTypes;
import com.azure.resourcemanager.azurearcdata.models.K8SActiveDirectory;
import com.azure.resourcemanager.azurearcdata.models.K8SActiveDirectoryConnector;
import com.azure.resourcemanager.azurearcdata.models.K8SNetworkSettings;
import com.azure.resourcemanager.azurearcdata.models.K8SResourceRequirements;
import com.azure.resourcemanager.azurearcdata.models.K8SScheduling;
import com.azure.resourcemanager.azurearcdata.models.K8SSchedulingOptions;
import com.azure.resourcemanager.azurearcdata.models.K8SSecurity;
import com.azure.resourcemanager.azurearcdata.models.K8SSettings;
import com.azure.resourcemanager.azurearcdata.models.K8StransparentDataEncryption;
import com.azure.resourcemanager.azurearcdata.models.KeytabInformation;
import com.azure.resourcemanager.azurearcdata.models.SqlManagedInstanceK8SRaw;
import com.azure.resourcemanager.azurearcdata.models.SqlManagedInstanceK8SSpec;
import com.azure.resourcemanager.azurearcdata.models.SqlManagedInstanceProperties;
import com.azure.resourcemanager.azurearcdata.models.SqlManagedInstanceSku;
import com.azure.resourcemanager.azurearcdata.models.SqlManagedInstanceSkuTier;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for SqlManagedInstances Create.
 */
public final class SqlManagedInstancesCreateSamples {
    /*
     * x-ms-original-file:
     * specification/azurearcdata/resource-manager/Microsoft.AzureArcData/preview/2025-03-01-preview/examples/
     * CreateOrUpdateSqlManagedInstance.json
     */
    /**
     * Sample code: Create or update a SQL Managed Instance.
     * 
     * @param manager Entry point to AzureArcDataManager.
     */
    public static void
        createOrUpdateASQLManagedInstance(com.azure.resourcemanager.azurearcdata.AzureArcDataManager manager) {
        manager.sqlManagedInstances()
            .define("testsqlManagedInstance")
            .withRegion("northeurope")
            .withExistingResourceGroup("testrg")
            .withProperties(
                new SqlManagedInstanceProperties().withAdmin("Admin user")
                    .withStartTime("Instance start time")
                    .withEndTime("Instance end time")
                    .withK8SRaw(
                        new SqlManagedInstanceK8SRaw()
                            .withSpec(new SqlManagedInstanceK8SSpec()
                                .withScheduling(
                                    new K8SScheduling()
                                        .withDefaultProperty(
                                            new K8SSchedulingOptions()
                                                .withResources(new K8SResourceRequirements()
                                                    .withRequests(mapOf("additionalProperty", "additionalValue", "cpu",
                                                        "1", "memory", "8Gi"))
                                                    .withLimits(mapOf("additionalProperty", "additionalValue", "cpu",
                                                        "1", "memory", "8Gi"))
                                                    .withAdditionalProperties(mapOf()))
                                                .withAdditionalProperties(mapOf()))
                                        .withAdditionalProperties(mapOf()))
                                .withReplicas(1)
                                .withSecurity(new K8SSecurity()
                                    .withAdminLoginSecret("fakeTokenPlaceholder")
                                    .withServiceCertificateSecret("fakeTokenPlaceholder")
                                    .withActiveDirectory(new K8SActiveDirectory()
                                        .withConnector(new K8SActiveDirectoryConnector().withName("Name of connector")
                                            .withNamespace("Namespace of connector"))
                                        .withAccountName("Account name")
                                        .withKeytabSecret("fakeTokenPlaceholder")
                                        .withEncryptionTypes(
                                            Arrays.asList("Encryption type item1, Encryption type item2,...")))
                                    .withTransparentDataEncryption(
                                        new K8StransparentDataEncryption().withMode("SystemManaged"))
                                    .withAdditionalProperties(mapOf()))
                                .withSettings(
                                    new K8SSettings().withNetwork(new K8SNetworkSettings().withForceencryption(0)
                                        .withTlsciphers(
                                            "ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384")
                                        .withTlsprotocols("1.2")).withAdditionalProperties(mapOf()))
                                .withAdditionalProperties(mapOf()))
                            .withAdditionalProperties(mapOf("additionalProperty", 1234)))
                    .withBasicLoginInformation(
                        new BasicLoginInformation().withUsername("username").withPassword("fakeTokenPlaceholder"))
                    .withActiveDirectoryInformation(new ActiveDirectoryInformation()
                        .withKeytabInformation(new KeytabInformation().withKeytab("fakeTokenPlaceholder")))
                    .withLicenseType(ArcSqlManagedInstanceLicenseType.LICENSE_INCLUDED)
                    .withClusterId(
                        "/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.Kubernetes/connectedClusters/connectedk8s")
                    .withExtensionId(
                        "/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.Kubernetes/connectedClusters/connectedk8s/providers/Microsoft.KubernetesConfiguration/extensions/extension"))
            .withTags(mapOf("mytag", "myval"))
            .withExtendedLocation(new ExtendedLocation().withName(
                "/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.ExtendedLocation/customLocations/arclocation")
                .withType(ExtendedLocationTypes.CUSTOM_LOCATION))
            .withSku(new SqlManagedInstanceSku().withTier(SqlManagedInstanceSkuTier.GENERAL_PURPOSE).withDev(true))
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
