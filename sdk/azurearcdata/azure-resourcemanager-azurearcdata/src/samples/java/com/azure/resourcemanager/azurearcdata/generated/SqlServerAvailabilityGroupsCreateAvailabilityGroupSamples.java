// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurearcdata.generated;

import com.azure.resourcemanager.azurearcdata.models.ArcSqlServerAvailabilityMode;
import com.azure.resourcemanager.azurearcdata.models.ArcSqlServerFailoverMode;
import com.azure.resourcemanager.azurearcdata.models.AutomatedBackupPreference;
import com.azure.resourcemanager.azurearcdata.models.AvailabilityGroupCreateUpdateConfiguration;
import com.azure.resourcemanager.azurearcdata.models.AvailabilityGroupCreateUpdateReplicaConfiguration;
import com.azure.resourcemanager.azurearcdata.models.ClusterType;
import com.azure.resourcemanager.azurearcdata.models.DbFailover;
import com.azure.resourcemanager.azurearcdata.models.DtcSupport;
import com.azure.resourcemanager.azurearcdata.models.FailureConditionLevel;
import com.azure.resourcemanager.azurearcdata.models.PrimaryAllowConnections;
import com.azure.resourcemanager.azurearcdata.models.SecondaryAllowConnections;
import com.azure.resourcemanager.azurearcdata.models.SeedingMode;
import com.azure.resourcemanager.azurearcdata.models.SqlAvailabilityGroupIpV4AddressesAndMasksPropertiesItem;
import com.azure.resourcemanager.azurearcdata.models.SqlAvailabilityGroupStaticIpListenerProperties;
import java.util.Arrays;

/**
 * Samples for SqlServerAvailabilityGroups CreateAvailabilityGroup.
 */
public final class SqlServerAvailabilityGroupsCreateAvailabilityGroupSamples {
    /*
     * x-ms-original-file:
     * specification/azurearcdata/resource-manager/Microsoft.AzureArcData/preview/2025-03-01-preview/examples/
     * CreateSqlServerAvailabilityGroup.json
     */
    /**
     * Sample code: Create an availability group using this server for the primary replica.
     * 
     * @param manager Entry point to AzureArcDataManager.
     */
    public static void createAnAvailabilityGroupUsingThisServerForThePrimaryReplica(
        com.azure.resourcemanager.azurearcdata.AzureArcDataManager manager) {
        manager.sqlServerAvailabilityGroups()
            .createAvailabilityGroup("testrg", "testSqlServer_INST1", new AvailabilityGroupCreateUpdateConfiguration()
                .withAvailabilityGroupName("myNewAg")
                .withReplicas(Arrays.asList(new AvailabilityGroupCreateUpdateReplicaConfiguration().withServerInstance(
                    "/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.AzureArcData/sqlServerInstances/testSqlServer_INST1/")
                    .withEndpointName("inst1DBMEndpoint")
                    .withEndpointUrl("TCP://testSqlServer_INST1.testSqlserverDomain:5022")
                    .withEndpointConnectLogin("NT Server\\MSSSQLSERVER")
                    .withAvailabilityMode(ArcSqlServerAvailabilityMode.SYNCHRONOUS_COMMIT)
                    .withFailoverMode(ArcSqlServerFailoverMode.AUTOMATIC)
                    .withSeedingMode(SeedingMode.AUTOMATIC)
                    .withBackupPriority(50)
                    .withSecondaryRoleAllowConnections(SecondaryAllowConnections.ALL)
                    .withPrimaryRoleAllowConnections(PrimaryAllowConnections.ALL)
                    .withSessionTimeout(10),
                    new AvailabilityGroupCreateUpdateReplicaConfiguration().withServerInstance(
                        "/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.AzureArcData/sqlServerInstances/testSqlServer_INST2/")
                        .withEndpointName("inst2DBMEndpoint")
                        .withEndpointUrl("TCP://testSqlServer_INST2.testSqlserverDomain:5022")
                        .withEndpointConnectLogin("NT Server\\MSSSQLSERVER")
                        .withAvailabilityMode(ArcSqlServerAvailabilityMode.SYNCHRONOUS_COMMIT)
                        .withFailoverMode(ArcSqlServerFailoverMode.AUTOMATIC)
                        .withSeedingMode(SeedingMode.AUTOMATIC)
                        .withBackupPriority(50)
                        .withSecondaryRoleAllowConnections(SecondaryAllowConnections.ALL)
                        .withPrimaryRoleAllowConnections(PrimaryAllowConnections.ALL)
                        .withSessionTimeout(10)))
                .withDatabases(Arrays.asList("database1", "database2"))
                .withAutomatedBackupPreference(AutomatedBackupPreference.SECONDARY)
                .withFailureConditionLevel(FailureConditionLevel.THREE)
                .withHealthCheckTimeout(30000)
                .withDbFailover(DbFailover.ON)
                .withDtcSupport(DtcSupport.NONE)
                .withRequiredSynchronizedSecondariesToCommit(0)
                .withClusterType(ClusterType.WSFC)
                .withListener(new SqlAvailabilityGroupStaticIpListenerProperties().withDnsName("myNewAgListener")
                    .withIpV4AddressesAndMasks(Arrays.asList(
                        new SqlAvailabilityGroupIpV4AddressesAndMasksPropertiesItem().withIpAddress("192.1.168.5")
                            .withMask("255.255.255.0"),
                        new SqlAvailabilityGroupIpV4AddressesAndMasksPropertiesItem().withIpAddress("10.1.168.5")
                            .withMask("255.255.255.0")))
                    .withPort(1433)),
                com.azure.core.util.Context.NONE);
    }
}
