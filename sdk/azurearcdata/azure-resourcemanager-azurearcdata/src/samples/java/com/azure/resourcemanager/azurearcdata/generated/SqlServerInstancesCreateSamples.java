// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurearcdata.generated;

import com.azure.resourcemanager.azurearcdata.models.Authentication;
import com.azure.resourcemanager.azurearcdata.models.BackupPolicy;
import com.azure.resourcemanager.azurearcdata.models.ClientConnection;
import com.azure.resourcemanager.azurearcdata.models.DifferentialBackupHours;
import com.azure.resourcemanager.azurearcdata.models.EditionType;
import com.azure.resourcemanager.azurearcdata.models.EntraAuthentication;
import com.azure.resourcemanager.azurearcdata.models.HostType;
import com.azure.resourcemanager.azurearcdata.models.IdentityType;
import com.azure.resourcemanager.azurearcdata.models.Migration;
import com.azure.resourcemanager.azurearcdata.models.MigrationAssessment;
import com.azure.resourcemanager.azurearcdata.models.Mode;
import com.azure.resourcemanager.azurearcdata.models.Monitoring;
import com.azure.resourcemanager.azurearcdata.models.ServiceType;
import com.azure.resourcemanager.azurearcdata.models.SqlServerInstanceProperties;
import com.azure.resourcemanager.azurearcdata.models.SqlVersion;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for SqlServerInstances Create.
 */
public final class SqlServerInstancesCreateSamples {
    /*
     * x-ms-original-file:
     * specification/azurearcdata/resource-manager/Microsoft.AzureArcData/preview/2025-03-01-preview/examples/
     * CreateOrUpdateSqlServerInstance.json
     */
    /**
     * Sample code: Updates a SQL Server Instance tags.
     * 
     * @param manager Entry point to AzureArcDataManager.
     */
    public static void
        updatesASQLServerInstanceTags(com.azure.resourcemanager.azurearcdata.AzureArcDataManager manager) {
        manager.sqlServerInstances()
            .define("testsqlServerInstance")
            .withRegion("northeurope")
            .withExistingResourceGroup("testrg")
            .withTags(mapOf("mytag", "myval"))
            .withProperties(new SqlServerInstanceProperties().withVersion(SqlVersion.SQL_SERVER_2012)
                .withEdition(EditionType.DEVELOPER)
                .withCores("4")
                .withInstanceName("name of instance")
                .withHostType(HostType.PHYSICAL_SERVER)
                .withBackupPolicy(new BackupPolicy().withRetentionPeriodDays(1)
                    .withFullBackupDays(1)
                    .withDifferentialBackupHours(DifferentialBackupHours.ONE_TWO)
                    .withTransactionLogBackupMinutes(30))
                .withMonitoring(new Monitoring().withEnabled(false))
                .withMigration(new Migration().withAssessment(new MigrationAssessment().withEnabled(false)))
                .withClientConnection(new ClientConnection().withEnabled(false))
                .withServiceType(ServiceType.ENGINE)
                .withAuthentication(new Authentication().withMode(Mode.WINDOWS)
                    .withSqlServerEntraIdentity(Arrays.asList(
                        new EntraAuthentication().withIdentityType(IdentityType.USER_ASSIGNED_MANAGED_IDENTITY)
                            .withClientId("00000000-1111-2222-3333-444444444444"),
                        new EntraAuthentication().withIdentityType(IdentityType.SYSTEM_ASSIGNED_MANAGED_IDENTITY)
                            .withClientId("")))))
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
