// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurearcdata.generated;

import com.azure.resourcemanager.azurearcdata.models.BillingPlan;
import com.azure.resourcemanager.azurearcdata.models.ScopeType;
import com.azure.resourcemanager.azurearcdata.models.SqlServerEsuLicenseProperties;
import com.azure.resourcemanager.azurearcdata.models.State;
import com.azure.resourcemanager.azurearcdata.models.Version;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for SqlServerEsuLicenses Create.
 */
public final class SqlServerEsuLicensesCreateSamples {
    /*
     * x-ms-original-file:
     * specification/azurearcdata/resource-manager/Microsoft.AzureArcData/preview/2025-03-01-preview/examples/
     * CreateOrUpdateSqlServerEsuLicense.json
     */
    /**
     * Sample code: Updates a SQL Server ESU license.
     * 
     * @param manager Entry point to AzureArcDataManager.
     */
    public static void updatesASQLServerESULicense(com.azure.resourcemanager.azurearcdata.AzureArcDataManager manager) {
        manager.sqlServerEsuLicenses()
            .define("testsqlServerEsuLicense")
            .withRegion("northeurope")
            .withExistingResourceGroup("testrg")
            .withProperties(new SqlServerEsuLicenseProperties().withBillingPlan(BillingPlan.PAYG)
                .withVersion(Version.SQL_SERVER_2012)
                .withPhysicalCores(24)
                .withActivationState(State.INACTIVE)
                .withScopeType(ScopeType.SUBSCRIPTION))
            .withTags(mapOf("mytag", "myval"))
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
