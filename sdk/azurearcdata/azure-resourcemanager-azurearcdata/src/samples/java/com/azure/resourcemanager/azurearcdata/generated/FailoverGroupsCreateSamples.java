// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurearcdata.generated;

import com.azure.resourcemanager.azurearcdata.models.FailoverGroupPartnerSyncMode;
import com.azure.resourcemanager.azurearcdata.models.FailoverGroupProperties;
import com.azure.resourcemanager.azurearcdata.models.FailoverGroupSpec;
import com.azure.resourcemanager.azurearcdata.models.InstanceFailoverGroupRole;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for FailoverGroups Create.
 */
public final class FailoverGroupsCreateSamples {
    /*
     * x-ms-original-file:
     * specification/azurearcdata/resource-manager/Microsoft.AzureArcData/preview/2025-03-01-preview/examples/
     * CreateOrUpdateFailoverGroup.json
     */
    /**
     * Sample code: Create or update a failover group instance.
     * 
     * @param manager Entry point to AzureArcDataManager.
     */
    public static void
        createOrUpdateAFailoverGroupInstance(com.azure.resourcemanager.azurearcdata.AzureArcDataManager manager) {
        manager.failoverGroups()
            .define("testFailoverGroupName")
            .withExistingSqlManagedInstance("testrg", "testSqlManagedInstance")
            .withProperties(new FailoverGroupProperties().withPartnerManagedInstanceId(
                "/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.AzureArcData/sqlManagedInstances/partnerMI")
                .withSpec(new FailoverGroupSpec().withPartnerSyncMode(FailoverGroupPartnerSyncMode.ASYNC)
                    .withRole(InstanceFailoverGroupRole.PRIMARY)
                    .withAdditionalProperties(mapOf()))
                .withAdditionalProperties(mapOf()))
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
