// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurearcdata.generated;

import com.azure.resourcemanager.azurearcdata.models.BackupPolicy;
import com.azure.resourcemanager.azurearcdata.models.DatabaseCreateMode;
import com.azure.resourcemanager.azurearcdata.models.DatabaseState;
import com.azure.resourcemanager.azurearcdata.models.DifferentialBackupHours;
import com.azure.resourcemanager.azurearcdata.models.RecoveryMode;
import com.azure.resourcemanager.azurearcdata.models.SqlServerDatabaseResourceProperties;
import com.azure.resourcemanager.azurearcdata.models.SqlServerDatabaseResourcePropertiesBackupInformation;
import com.azure.resourcemanager.azurearcdata.models.SqlServerDatabaseResourcePropertiesDatabaseOptions;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for SqlServerDatabases Create.
 */
public final class SqlServerDatabasesCreateSamples {
    /*
     * x-ms-original-file:
     * specification/azurearcdata/resource-manager/Microsoft.AzureArcData/preview/2025-03-01-preview/examples/
     * CreateOrUpdateArcSqlServerDatabase.json
     */
    /**
     * Sample code: Create a Arc Sql Server database.
     * 
     * @param manager Entry point to AzureArcDataManager.
     */
    public static void createAArcSqlServerDatabase(com.azure.resourcemanager.azurearcdata.AzureArcDataManager manager) {
        manager.sqlServerDatabases()
            .define("testdb")
            .withRegion("southeastasia")
            .withExistingSqlServerInstance("testrg", "testSqlServerInstance")
            .withProperties(new SqlServerDatabaseResourceProperties().withCollationName("SQL_Latin1_General_CP1_CI_AS")
                .withDatabaseCreationDate(OffsetDateTime.parse("2022-04-05T16:26:33.883Z"))
                .withCompatibilityLevel(150)
                .withSizeMB(150.0F)
                .withLogFileSizeMB(70.0F)
                .withDataFileSizeMB(80.0F)
                .withSpaceAvailableMB(100.0F)
                .withState(DatabaseState.ONLINE)
                .withIsReadOnly(true)
                .withRecoveryMode(RecoveryMode.FULL)
                .withDatabaseOptions(new SqlServerDatabaseResourcePropertiesDatabaseOptions().withIsAutoCloseOn(true)
                    .withIsAutoShrinkOn(true)
                    .withIsAutoCreateStatsOn(true)
                    .withIsAutoUpdateStatsOn(true)
                    .withIsRemoteDataArchiveEnabled(true)
                    .withIsMemoryOptimizationEnabled(true)
                    .withIsEncrypted(true)
                    .withIsTrustworthyOn(true))
                .withBackupInformation(new SqlServerDatabaseResourcePropertiesBackupInformation()
                    .withLastFullBackup(OffsetDateTime.parse("2022-05-05T16:26:33.883Z"))
                    .withLastLogBackup(OffsetDateTime.parse("2022-05-10T16:26:33.883Z")))
                .withBackupPolicy(new BackupPolicy().withRetentionPeriodDays(1)
                    .withFullBackupDays(1)
                    .withDifferentialBackupHours(DifferentialBackupHours.ONE_TWO)
                    .withTransactionLogBackupMinutes(30))
                .withCreateMode(DatabaseCreateMode.POINT_IN_TIME_RESTORE)
                .withSourceDatabaseId(
                    "/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.AzureArcData/testSqlServerInstance/testsqlManagedInstance/databases/MyDatabase")
                .withRestorePointInTime(OffsetDateTime.parse("2022-05-05T16:26:33.883Z")))
            .withTags(mapOf("mytag", "myval"))
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
