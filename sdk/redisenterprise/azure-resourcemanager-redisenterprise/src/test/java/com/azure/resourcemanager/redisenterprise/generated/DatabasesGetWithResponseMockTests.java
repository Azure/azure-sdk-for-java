// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.redisenterprise.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.redisenterprise.RedisEnterpriseManager;
import com.azure.resourcemanager.redisenterprise.models.AofFrequency;
import com.azure.resourcemanager.redisenterprise.models.ClusteringPolicy;
import com.azure.resourcemanager.redisenterprise.models.Database;
import com.azure.resourcemanager.redisenterprise.models.DeferUpgradeSetting;
import com.azure.resourcemanager.redisenterprise.models.EvictionPolicy;
import com.azure.resourcemanager.redisenterprise.models.Protocol;
import com.azure.resourcemanager.redisenterprise.models.RdbFrequency;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class DatabasesGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"clientProtocol\":\"Plaintext\",\"port\":1543115619,\"provisioningState\":\"Updating\",\"resourceState\":\"Scaling\",\"clusteringPolicy\":\"EnterpriseCluster\",\"evictionPolicy\":\"AllKeysLRU\",\"persistence\":{\"aofEnabled\":true,\"rdbEnabled\":true,\"aofFrequency\":\"1s\",\"rdbFrequency\":\"12h\"},\"modules\":[{\"name\":\"kyzxuutk\",\"args\":\"ws\",\"version\":\"svlxotogtwrup\"}],\"geoReplication\":{\"groupNickname\":\"vnm\",\"linkedDatabases\":[{\"id\":\"vce\",\"state\":\"Unlinking\"},{\"id\":\"lo\",\"state\":\"Unlinking\"},{\"id\":\"yfjfcnjbkcn\",\"state\":\"Linking\"}]},\"redisVersion\":\"ttkphywpnvjtoqne\",\"deferUpgrade\":\"Deferred\"},\"id\":\"lfplp\",\"name\":\"oxuscrpabgyepsbj\",\"type\":\"azqugxywpmueefj\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        RedisEnterpriseManager manager = RedisEnterpriseManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        Database response = manager.databases()
            .getWithResponse("upedeojnabckhs", "txp", "ie", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals(Protocol.PLAINTEXT, response.clientProtocol());
        Assertions.assertEquals(1543115619, response.port());
        Assertions.assertEquals(ClusteringPolicy.ENTERPRISE_CLUSTER, response.clusteringPolicy());
        Assertions.assertEquals(EvictionPolicy.ALL_KEYS_LRU, response.evictionPolicy());
        Assertions.assertEquals(true, response.persistence().aofEnabled());
        Assertions.assertEquals(true, response.persistence().rdbEnabled());
        Assertions.assertEquals(AofFrequency.ONES, response.persistence().aofFrequency());
        Assertions.assertEquals(RdbFrequency.ONE_TWOH, response.persistence().rdbFrequency());
        Assertions.assertEquals("kyzxuutk", response.modules().get(0).name());
        Assertions.assertEquals("ws", response.modules().get(0).args());
        Assertions.assertEquals("vnm", response.geoReplication().groupNickname());
        Assertions.assertEquals("vce", response.geoReplication().linkedDatabases().get(0).id());
        Assertions.assertEquals(DeferUpgradeSetting.DEFERRED, response.deferUpgrade());
    }
}
