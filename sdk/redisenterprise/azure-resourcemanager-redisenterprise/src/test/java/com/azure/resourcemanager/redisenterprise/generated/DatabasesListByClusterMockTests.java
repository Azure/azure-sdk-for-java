// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.redisenterprise.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.redisenterprise.RedisEnterpriseManager;
import com.azure.resourcemanager.redisenterprise.models.AofFrequency;
import com.azure.resourcemanager.redisenterprise.models.ClusteringPolicy;
import com.azure.resourcemanager.redisenterprise.models.Database;
import com.azure.resourcemanager.redisenterprise.models.EvictionPolicy;
import com.azure.resourcemanager.redisenterprise.models.Protocol;
import com.azure.resourcemanager.redisenterprise.models.RdbFrequency;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class DatabasesListByClusterMockTests {
    @Test
    public void testListByCluster() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr
            = "{\"value\":[{\"properties\":{\"clientProtocol\":\"Plaintext\",\"port\":718463085,\"provisioningState\":\"Creating\",\"resourceState\":\"Scaling\",\"clusteringPolicy\":\"OSSCluster\",\"evictionPolicy\":\"VolatileTTL\",\"persistence\":{\"aofEnabled\":true,\"rdbEnabled\":false,\"aofFrequency\":\"1s\",\"rdbFrequency\":\"12h\"},\"modules\":[{\"name\":\"khsmtxpsiebt\",\"args\":\"vpesapskrdqmhjjd\",\"version\":\"ldwkyzxuutkn\"},{\"name\":\"ws\",\"args\":\"svlxotogtwrup\",\"version\":\"xvnmicykvceov\"},{\"name\":\"ilovnot\",\"args\":\"jfcn\",\"version\":\"k\"}],\"geoReplication\":{\"groupNickname\":\"dhbt\",\"linkedDatabases\":[{\"id\":\"ywpnvjt\",\"state\":\"LinkFailed\"},{\"id\":\"rmclfplphoxu\",\"state\":\"LinkFailed\"}]}},\"id\":\"pabgyeps\",\"name\":\"jta\",\"type\":\"qugxywpmueefjzwf\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito.when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito.when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito.when(httpClient.send(httpRequest.capture(), Mockito.any())).thenReturn(Mono.defer(() -> {
            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
            return Mono.just(httpResponse);
        }));

        RedisEnterpriseManager manager = RedisEnterpriseManager.configure().withHttpClient(httpClient).authenticate(
            tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
            new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<Database> response
            = manager.databases().listByCluster("sxnkjzkdeslpvlo", "wiyighxpkdw", com.azure.core.util.Context.NONE);

        Assertions.assertEquals(Protocol.PLAINTEXT, response.iterator().next().clientProtocol());
        Assertions.assertEquals(718463085, response.iterator().next().port());
        Assertions.assertEquals(ClusteringPolicy.OSSCLUSTER, response.iterator().next().clusteringPolicy());
        Assertions.assertEquals(EvictionPolicy.VOLATILE_TTL, response.iterator().next().evictionPolicy());
        Assertions.assertEquals(true, response.iterator().next().persistence().aofEnabled());
        Assertions.assertEquals(false, response.iterator().next().persistence().rdbEnabled());
        Assertions.assertEquals(AofFrequency.ONES, response.iterator().next().persistence().aofFrequency());
        Assertions.assertEquals(RdbFrequency.ONE_TWOH, response.iterator().next().persistence().rdbFrequency());
        Assertions.assertEquals("khsmtxpsiebt", response.iterator().next().modules().get(0).name());
        Assertions.assertEquals("vpesapskrdqmhjjd", response.iterator().next().modules().get(0).args());
        Assertions.assertEquals("dhbt", response.iterator().next().geoReplication().groupNickname());
        Assertions.assertEquals("ywpnvjt", response.iterator().next().geoReplication().linkedDatabases().get(0).id());
    }
}
