// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.redisenterprise.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.redisenterprise.fluent.models.DatabaseInner;
import com.azure.resourcemanager.redisenterprise.models.AofFrequency;
import com.azure.resourcemanager.redisenterprise.models.ClusteringPolicy;
import com.azure.resourcemanager.redisenterprise.models.DatabaseList;
import com.azure.resourcemanager.redisenterprise.models.DatabasePropertiesGeoReplication;
import com.azure.resourcemanager.redisenterprise.models.DeferUpgradeSetting;
import com.azure.resourcemanager.redisenterprise.models.EvictionPolicy;
import com.azure.resourcemanager.redisenterprise.models.LinkedDatabase;
import com.azure.resourcemanager.redisenterprise.models.Module;
import com.azure.resourcemanager.redisenterprise.models.Persistence;
import com.azure.resourcemanager.redisenterprise.models.Protocol;
import com.azure.resourcemanager.redisenterprise.models.RdbFrequency;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class DatabaseListTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DatabaseList model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"clientProtocol\":\"Encrypted\",\"port\":1018660183,\"provisioningState\":\"Canceled\",\"resourceState\":\"Disabling\",\"clusteringPolicy\":\"EnterpriseCluster\",\"evictionPolicy\":\"NoEviction\",\"persistence\":{\"aofEnabled\":true,\"rdbEnabled\":false,\"aofFrequency\":\"1s\",\"rdbFrequency\":\"1h\"},\"modules\":[{\"name\":\"qulngsntnbybkzgc\",\"args\":\"wclxxwrl\",\"version\":\"ouskcqvkocrc\"}],\"geoReplication\":{\"groupNickname\":\"wtnhxbnjbiksqr\",\"linkedDatabases\":[{},{},{},{}]},\"redisVersion\":\"ainqpjwnzlljfm\",\"deferUpgrade\":\"NotDeferred\"},\"id\":\"ebvmgxsabkyqd\",\"name\":\"ujitcjcz\",\"type\":\"zevndhkrwpdappds\"},{\"properties\":{\"clientProtocol\":\"Encrypted\",\"port\":1278778169,\"provisioningState\":\"Canceled\",\"resourceState\":\"Deleting\",\"clusteringPolicy\":\"EnterpriseCluster\",\"evictionPolicy\":\"AllKeysRandom\",\"persistence\":{\"aofEnabled\":false,\"rdbEnabled\":false,\"aofFrequency\":\"1s\",\"rdbFrequency\":\"12h\"},\"modules\":[{\"name\":\"ugjzzdatqxhocdge\",\"args\":\"lgphu\",\"version\":\"cndvkaozwyiftyhx\"},{\"name\":\"urokft\",\"args\":\"olniwpwcukjf\",\"version\":\"iawxklry\"},{\"name\":\"lwckbasyypnddhs\",\"args\":\"bacphejko\",\"version\":\"nqgoulzndli\"},{\"name\":\"wyqkgfgibm\",\"args\":\"gakeqsr\",\"version\":\"bzqqedqytbciq\"}],\"geoReplication\":{\"groupNickname\":\"flmmnk\",\"linkedDatabases\":[{},{},{}]},\"redisVersion\":\"dmgloug\",\"deferUpgrade\":\"NotDeferred\"},\"id\":\"wtmutduq\",\"name\":\"ta\",\"type\":\"spwgcuertumkdosv\"},{\"properties\":{\"clientProtocol\":\"Encrypted\",\"port\":813702940,\"provisioningState\":\"Succeeded\",\"resourceState\":\"Disabled\",\"clusteringPolicy\":\"EnterpriseCluster\",\"evictionPolicy\":\"VolatileTTL\",\"persistence\":{\"aofEnabled\":false,\"rdbEnabled\":false,\"aofFrequency\":\"always\",\"rdbFrequency\":\"6h\"},\"modules\":[{\"name\":\"q\",\"args\":\"ol\",\"version\":\"fpsalgbqu\"}],\"geoReplication\":{\"groupNickname\":\"jyj\",\"linkedDatabases\":[{},{},{}]},\"redisVersion\":\"o\",\"deferUpgrade\":\"Deferred\"},\"id\":\"rtxilner\",\"name\":\"ujysvle\",\"type\":\"uvfqawrlyxwj\"},{\"properties\":{\"clientProtocol\":\"Plaintext\",\"port\":1705333634,\"provisioningState\":\"Canceled\",\"resourceState\":\"Disabled\",\"clusteringPolicy\":\"EnterpriseCluster\",\"evictionPolicy\":\"AllKeysRandom\",\"persistence\":{\"aofEnabled\":true,\"rdbEnabled\":false,\"aofFrequency\":\"always\",\"rdbFrequency\":\"6h\"},\"modules\":[{\"name\":\"qguhmuo\",\"args\":\"f\",\"version\":\"wzwbnguitn\"}],\"geoReplication\":{\"groupNickname\":\"zga\",\"linkedDatabases\":[{},{},{}]},\"redisVersion\":\"izuckyfihrfidfvz\",\"deferUpgrade\":\"NotDeferred\"},\"id\":\"uht\",\"name\":\"mwisdkfthwxmnt\",\"type\":\"i\"}],\"nextLink\":\"opvkmijcm\"}")
            .toObject(DatabaseList.class);
        Assertions.assertEquals(Protocol.ENCRYPTED, model.value().get(0).clientProtocol());
        Assertions.assertEquals(1018660183, model.value().get(0).port());
        Assertions.assertEquals(ClusteringPolicy.ENTERPRISE_CLUSTER, model.value().get(0).clusteringPolicy());
        Assertions.assertEquals(EvictionPolicy.NO_EVICTION, model.value().get(0).evictionPolicy());
        Assertions.assertEquals(true, model.value().get(0).persistence().aofEnabled());
        Assertions.assertEquals(false, model.value().get(0).persistence().rdbEnabled());
        Assertions.assertEquals(AofFrequency.ONES, model.value().get(0).persistence().aofFrequency());
        Assertions.assertEquals(RdbFrequency.ONEH, model.value().get(0).persistence().rdbFrequency());
        Assertions.assertEquals("qulngsntnbybkzgc", model.value().get(0).modules().get(0).name());
        Assertions.assertEquals("wclxxwrl", model.value().get(0).modules().get(0).args());
        Assertions.assertEquals("wtnhxbnjbiksqr", model.value().get(0).geoReplication().groupNickname());
        Assertions.assertEquals(DeferUpgradeSetting.NOT_DEFERRED, model.value().get(0).deferUpgrade());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DatabaseList model = new DatabaseList().withValue(Arrays.asList(
            new DatabaseInner().withClientProtocol(Protocol.ENCRYPTED)
                .withPort(1018660183)
                .withClusteringPolicy(ClusteringPolicy.ENTERPRISE_CLUSTER)
                .withEvictionPolicy(EvictionPolicy.NO_EVICTION)
                .withPersistence(new Persistence().withAofEnabled(true)
                    .withRdbEnabled(false)
                    .withAofFrequency(AofFrequency.ONES)
                    .withRdbFrequency(RdbFrequency.ONEH))
                .withModules(Arrays.asList(new Module().withName("qulngsntnbybkzgc").withArgs("wclxxwrl")))
                .withGeoReplication(new DatabasePropertiesGeoReplication().withGroupNickname("wtnhxbnjbiksqr")
                    .withLinkedDatabases(Arrays.asList(new LinkedDatabase(), new LinkedDatabase(), new LinkedDatabase(),
                        new LinkedDatabase())))
                .withDeferUpgrade(DeferUpgradeSetting.NOT_DEFERRED),
            new DatabaseInner().withClientProtocol(Protocol.ENCRYPTED)
                .withPort(1278778169)
                .withClusteringPolicy(ClusteringPolicy.ENTERPRISE_CLUSTER)
                .withEvictionPolicy(EvictionPolicy.ALL_KEYS_RANDOM)
                .withPersistence(new Persistence().withAofEnabled(false)
                    .withRdbEnabled(false)
                    .withAofFrequency(AofFrequency.ONES)
                    .withRdbFrequency(RdbFrequency.ONE_TWOH))
                .withModules(Arrays.asList(new Module().withName("ugjzzdatqxhocdge").withArgs("lgphu"),
                    new Module().withName("urokft").withArgs("olniwpwcukjf"),
                    new Module().withName("lwckbasyypnddhs").withArgs("bacphejko"),
                    new Module().withName("wyqkgfgibm").withArgs("gakeqsr")))
                .withGeoReplication(new DatabasePropertiesGeoReplication().withGroupNickname("flmmnk")
                    .withLinkedDatabases(
                        Arrays.asList(new LinkedDatabase(), new LinkedDatabase(), new LinkedDatabase())))
                .withDeferUpgrade(DeferUpgradeSetting.NOT_DEFERRED),
            new DatabaseInner().withClientProtocol(Protocol.ENCRYPTED)
                .withPort(813702940)
                .withClusteringPolicy(ClusteringPolicy.ENTERPRISE_CLUSTER)
                .withEvictionPolicy(EvictionPolicy.VOLATILE_TTL)
                .withPersistence(new Persistence().withAofEnabled(false)
                    .withRdbEnabled(false)
                    .withAofFrequency(AofFrequency.ALWAYS)
                    .withRdbFrequency(RdbFrequency.SIXH))
                .withModules(Arrays.asList(new Module().withName("q").withArgs("ol")))
                .withGeoReplication(new DatabasePropertiesGeoReplication().withGroupNickname("jyj")
                    .withLinkedDatabases(
                        Arrays.asList(new LinkedDatabase(), new LinkedDatabase(), new LinkedDatabase())))
                .withDeferUpgrade(DeferUpgradeSetting.DEFERRED),
            new DatabaseInner().withClientProtocol(Protocol.PLAINTEXT)
                .withPort(1705333634)
                .withClusteringPolicy(ClusteringPolicy.ENTERPRISE_CLUSTER)
                .withEvictionPolicy(EvictionPolicy.ALL_KEYS_RANDOM)
                .withPersistence(new Persistence().withAofEnabled(true)
                    .withRdbEnabled(false)
                    .withAofFrequency(AofFrequency.ALWAYS)
                    .withRdbFrequency(RdbFrequency.SIXH))
                .withModules(Arrays.asList(new Module().withName("qguhmuo").withArgs("f")))
                .withGeoReplication(new DatabasePropertiesGeoReplication().withGroupNickname("zga")
                    .withLinkedDatabases(
                        Arrays.asList(new LinkedDatabase(), new LinkedDatabase(), new LinkedDatabase())))
                .withDeferUpgrade(DeferUpgradeSetting.NOT_DEFERRED)));
        model = BinaryData.fromObject(model).toObject(DatabaseList.class);
        Assertions.assertEquals(Protocol.ENCRYPTED, model.value().get(0).clientProtocol());
        Assertions.assertEquals(1018660183, model.value().get(0).port());
        Assertions.assertEquals(ClusteringPolicy.ENTERPRISE_CLUSTER, model.value().get(0).clusteringPolicy());
        Assertions.assertEquals(EvictionPolicy.NO_EVICTION, model.value().get(0).evictionPolicy());
        Assertions.assertEquals(true, model.value().get(0).persistence().aofEnabled());
        Assertions.assertEquals(false, model.value().get(0).persistence().rdbEnabled());
        Assertions.assertEquals(AofFrequency.ONES, model.value().get(0).persistence().aofFrequency());
        Assertions.assertEquals(RdbFrequency.ONEH, model.value().get(0).persistence().rdbFrequency());
        Assertions.assertEquals("qulngsntnbybkzgc", model.value().get(0).modules().get(0).name());
        Assertions.assertEquals("wclxxwrl", model.value().get(0).modules().get(0).args());
        Assertions.assertEquals("wtnhxbnjbiksqr", model.value().get(0).geoReplication().groupNickname());
        Assertions.assertEquals(DeferUpgradeSetting.NOT_DEFERRED, model.value().get(0).deferUpgrade());
    }
}
