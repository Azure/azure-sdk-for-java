// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.redisenterprise.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The user associated with the access policy.
 */
@Fluent
public final class AccessPolicyAssignmentPropertiesUser
    implements JsonSerializable<AccessPolicyAssignmentPropertiesUser> {
    /*
     * The object ID of the user.
     */
    private String objectId;

    /**
     * Creates an instance of AccessPolicyAssignmentPropertiesUser class.
     */
    public AccessPolicyAssignmentPropertiesUser() {
    }

    /**
     * Get the objectId property: The object ID of the user.
     * 
     * @return the objectId value.
     */
    public String objectId() {
        return this.objectId;
    }

    /**
     * Set the objectId property: The object ID of the user.
     * 
     * @param objectId the objectId value to set.
     * @return the AccessPolicyAssignmentPropertiesUser object itself.
     */
    public AccessPolicyAssignmentPropertiesUser withObjectId(String objectId) {
        this.objectId = objectId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("objectId", this.objectId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AccessPolicyAssignmentPropertiesUser from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AccessPolicyAssignmentPropertiesUser if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AccessPolicyAssignmentPropertiesUser.
     */
    public static AccessPolicyAssignmentPropertiesUser fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AccessPolicyAssignmentPropertiesUser deserializedAccessPolicyAssignmentPropertiesUser
                = new AccessPolicyAssignmentPropertiesUser();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("objectId".equals(fieldName)) {
                    deserializedAccessPolicyAssignmentPropertiesUser.objectId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAccessPolicyAssignmentPropertiesUser;
        });
    }
}
