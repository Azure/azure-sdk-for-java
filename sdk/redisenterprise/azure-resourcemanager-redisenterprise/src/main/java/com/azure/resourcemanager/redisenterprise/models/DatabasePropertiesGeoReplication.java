// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.redisenterprise.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Optional set of properties to configure geo replication for this database.
 */
@Fluent
public final class DatabasePropertiesGeoReplication implements JsonSerializable<DatabasePropertiesGeoReplication> {
    /*
     * Name for the group of linked database resources
     */
    private String groupNickname;

    /*
     * List of database resources to link with this database
     */
    private List<LinkedDatabase> linkedDatabases;

    /**
     * Creates an instance of DatabasePropertiesGeoReplication class.
     */
    public DatabasePropertiesGeoReplication() {
    }

    /**
     * Get the groupNickname property: Name for the group of linked database resources.
     * 
     * @return the groupNickname value.
     */
    public String groupNickname() {
        return this.groupNickname;
    }

    /**
     * Set the groupNickname property: Name for the group of linked database resources.
     * 
     * @param groupNickname the groupNickname value to set.
     * @return the DatabasePropertiesGeoReplication object itself.
     */
    public DatabasePropertiesGeoReplication withGroupNickname(String groupNickname) {
        this.groupNickname = groupNickname;
        return this;
    }

    /**
     * Get the linkedDatabases property: List of database resources to link with this database.
     * 
     * @return the linkedDatabases value.
     */
    public List<LinkedDatabase> linkedDatabases() {
        return this.linkedDatabases;
    }

    /**
     * Set the linkedDatabases property: List of database resources to link with this database.
     * 
     * @param linkedDatabases the linkedDatabases value to set.
     * @return the DatabasePropertiesGeoReplication object itself.
     */
    public DatabasePropertiesGeoReplication withLinkedDatabases(List<LinkedDatabase> linkedDatabases) {
        this.linkedDatabases = linkedDatabases;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (linkedDatabases() != null) {
            linkedDatabases().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("groupNickname", this.groupNickname);
        jsonWriter.writeArrayField("linkedDatabases", this.linkedDatabases,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DatabasePropertiesGeoReplication from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DatabasePropertiesGeoReplication if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DatabasePropertiesGeoReplication.
     */
    public static DatabasePropertiesGeoReplication fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DatabasePropertiesGeoReplication deserializedDatabasePropertiesGeoReplication
                = new DatabasePropertiesGeoReplication();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("groupNickname".equals(fieldName)) {
                    deserializedDatabasePropertiesGeoReplication.groupNickname = reader.getString();
                } else if ("linkedDatabases".equals(fieldName)) {
                    List<LinkedDatabase> linkedDatabases
                        = reader.readArray(reader1 -> LinkedDatabase.fromJson(reader1));
                    deserializedDatabasePropertiesGeoReplication.linkedDatabases = linkedDatabases;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDatabasePropertiesGeoReplication;
        });
    }
}
