// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.redisenterprise.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.redisenterprise.models.ClusterCommonProperties;
import com.azure.resourcemanager.redisenterprise.models.ClusterCommonPropertiesEncryption;
import com.azure.resourcemanager.redisenterprise.models.HighAvailability;
import com.azure.resourcemanager.redisenterprise.models.ProvisioningState;
import com.azure.resourcemanager.redisenterprise.models.PublicNetworkAccess;
import com.azure.resourcemanager.redisenterprise.models.RedundancyMode;
import com.azure.resourcemanager.redisenterprise.models.ResourceState;
import com.azure.resourcemanager.redisenterprise.models.TlsVersion;
import java.io.IOException;
import java.util.List;

/**
 * Redis Enterprise cluster properties for update operations
 * 
 * Properties of Redis Enterprise clusters for update operations.
 */
@Fluent
public final class ClusterUpdateProperties extends ClusterCommonProperties {
    /*
     * Whether or not public network traffic can access the Redis cluster. Only 'Enabled' or 'Disabled' can be set. null
     * is returned only for clusters created using an old API version which do not have this property and cannot be set.
     */
    private PublicNetworkAccess publicNetworkAccess;

    /*
     * List of private endpoint connections associated with the specified Redis Enterprise cluster
     */
    private List<PrivateEndpointConnectionInner> privateEndpointConnections;

    /*
     * Version of redis the cluster supports, e.g. '6'
     */
    private String redisVersion;

    /*
     * Current resource status of the cluster
     */
    private ResourceState resourceState;

    /*
     * Explains the current redundancy strategy of the cluster, which affects the expected SLA.
     */
    private RedundancyMode redundancyMode;

    /*
     * Current provisioning status of the cluster
     */
    private ProvisioningState provisioningState;

    /*
     * DNS name of the cluster endpoint
     */
    private String hostname;

    /**
     * Creates an instance of ClusterUpdateProperties class.
     */
    public ClusterUpdateProperties() {
    }

    /**
     * Get the publicNetworkAccess property: Whether or not public network traffic can access the Redis cluster. Only
     * 'Enabled' or 'Disabled' can be set. null is returned only for clusters created using an old API version which do
     * not have this property and cannot be set.
     * 
     * @return the publicNetworkAccess value.
     */
    public PublicNetworkAccess publicNetworkAccess() {
        return this.publicNetworkAccess;
    }

    /**
     * Set the publicNetworkAccess property: Whether or not public network traffic can access the Redis cluster. Only
     * 'Enabled' or 'Disabled' can be set. null is returned only for clusters created using an old API version which do
     * not have this property and cannot be set.
     * 
     * @param publicNetworkAccess the publicNetworkAccess value to set.
     * @return the ClusterUpdateProperties object itself.
     */
    public ClusterUpdateProperties withPublicNetworkAccess(PublicNetworkAccess publicNetworkAccess) {
        this.publicNetworkAccess = publicNetworkAccess;
        return this;
    }

    /**
     * Get the privateEndpointConnections property: List of private endpoint connections associated with the specified
     * Redis Enterprise cluster.
     * 
     * @return the privateEndpointConnections value.
     */
    @Override
    public List<PrivateEndpointConnectionInner> privateEndpointConnections() {
        return this.privateEndpointConnections;
    }

    /**
     * Get the redisVersion property: Version of redis the cluster supports, e.g. '6'.
     * 
     * @return the redisVersion value.
     */
    @Override
    public String redisVersion() {
        return this.redisVersion;
    }

    /**
     * Get the resourceState property: Current resource status of the cluster.
     * 
     * @return the resourceState value.
     */
    @Override
    public ResourceState resourceState() {
        return this.resourceState;
    }

    /**
     * Get the redundancyMode property: Explains the current redundancy strategy of the cluster, which affects the
     * expected SLA.
     * 
     * @return the redundancyMode value.
     */
    @Override
    public RedundancyMode redundancyMode() {
        return this.redundancyMode;
    }

    /**
     * Get the provisioningState property: Current provisioning status of the cluster.
     * 
     * @return the provisioningState value.
     */
    @Override
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the hostname property: DNS name of the cluster endpoint.
     * 
     * @return the hostname value.
     */
    @Override
    public String hostname() {
        return this.hostname;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ClusterUpdateProperties withHighAvailability(HighAvailability highAvailability) {
        super.withHighAvailability(highAvailability);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ClusterUpdateProperties withMinimumTlsVersion(TlsVersion minimumTlsVersion) {
        super.withMinimumTlsVersion(minimumTlsVersion);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ClusterUpdateProperties withEncryption(ClusterCommonPropertiesEncryption encryption) {
        super.withEncryption(encryption);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (encryption() != null) {
            encryption().validate();
        }
        if (privateEndpointConnections() != null) {
            privateEndpointConnections().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("highAvailability",
            highAvailability() == null ? null : highAvailability().toString());
        jsonWriter.writeStringField("minimumTlsVersion",
            minimumTlsVersion() == null ? null : minimumTlsVersion().toString());
        jsonWriter.writeJsonField("encryption", encryption());
        jsonWriter.writeStringField("publicNetworkAccess",
            this.publicNetworkAccess == null ? null : this.publicNetworkAccess.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ClusterUpdateProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ClusterUpdateProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ClusterUpdateProperties.
     */
    public static ClusterUpdateProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ClusterUpdateProperties deserializedClusterUpdateProperties = new ClusterUpdateProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("highAvailability".equals(fieldName)) {
                    deserializedClusterUpdateProperties
                        .withHighAvailability(HighAvailability.fromString(reader.getString()));
                } else if ("minimumTlsVersion".equals(fieldName)) {
                    deserializedClusterUpdateProperties
                        .withMinimumTlsVersion(TlsVersion.fromString(reader.getString()));
                } else if ("encryption".equals(fieldName)) {
                    deserializedClusterUpdateProperties
                        .withEncryption(ClusterCommonPropertiesEncryption.fromJson(reader));
                } else if ("hostName".equals(fieldName)) {
                    deserializedClusterUpdateProperties.hostname = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedClusterUpdateProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else if ("redundancyMode".equals(fieldName)) {
                    deserializedClusterUpdateProperties.redundancyMode = RedundancyMode.fromString(reader.getString());
                } else if ("resourceState".equals(fieldName)) {
                    deserializedClusterUpdateProperties.resourceState = ResourceState.fromString(reader.getString());
                } else if ("redisVersion".equals(fieldName)) {
                    deserializedClusterUpdateProperties.redisVersion = reader.getString();
                } else if ("privateEndpointConnections".equals(fieldName)) {
                    List<PrivateEndpointConnectionInner> privateEndpointConnections
                        = reader.readArray(reader1 -> PrivateEndpointConnectionInner.fromJson(reader1));
                    deserializedClusterUpdateProperties.privateEndpointConnections = privateEndpointConnections;
                } else if ("publicNetworkAccess".equals(fieldName)) {
                    deserializedClusterUpdateProperties.publicNetworkAccess
                        = PublicNetworkAccess.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedClusterUpdateProperties;
        });
    }
}
