// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.redisenterprise.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Import RDB files into a target database
 * 
 * Parameters for a Redis Enterprise import operation.
 */
@Fluent
public final class ImportClusterParameters implements JsonSerializable<ImportClusterParameters> {
    /*
     * SAS URIs for the target blobs to import from
     */
    private List<String> sasUris;

    /**
     * Creates an instance of ImportClusterParameters class.
     */
    public ImportClusterParameters() {
    }

    /**
     * Get the sasUris property: SAS URIs for the target blobs to import from.
     * 
     * @return the sasUris value.
     */
    public List<String> sasUris() {
        return this.sasUris;
    }

    /**
     * Set the sasUris property: SAS URIs for the target blobs to import from.
     * 
     * @param sasUris the sasUris value to set.
     * @return the ImportClusterParameters object itself.
     */
    public ImportClusterParameters withSasUris(List<String> sasUris) {
        this.sasUris = sasUris;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (sasUris() == null) {
            throw LOGGER.atError()
                .log(
                    new IllegalArgumentException("Missing required property sasUris in model ImportClusterParameters"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ImportClusterParameters.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("sasUris", this.sasUris, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ImportClusterParameters from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ImportClusterParameters if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ImportClusterParameters.
     */
    public static ImportClusterParameters fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ImportClusterParameters deserializedImportClusterParameters = new ImportClusterParameters();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("sasUris".equals(fieldName)) {
                    List<String> sasUris = reader.readArray(reader1 -> reader1.getString());
                    deserializedImportClusterParameters.sasUris = sasUris;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedImportClusterParameters;
        });
    }
}
