// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.redisenterprise.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.redisenterprise.models.AccessKeysAuthentication;
import com.azure.resourcemanager.redisenterprise.models.ClusteringPolicy;
import com.azure.resourcemanager.redisenterprise.models.DatabaseCommonProperties;
import com.azure.resourcemanager.redisenterprise.models.DatabasePropertiesGeoReplication;
import com.azure.resourcemanager.redisenterprise.models.DeferUpgradeSetting;
import com.azure.resourcemanager.redisenterprise.models.EvictionPolicy;
import com.azure.resourcemanager.redisenterprise.models.Module;
import com.azure.resourcemanager.redisenterprise.models.Persistence;
import com.azure.resourcemanager.redisenterprise.models.Protocol;
import com.azure.resourcemanager.redisenterprise.models.ProvisioningState;
import com.azure.resourcemanager.redisenterprise.models.ResourceState;
import java.io.IOException;
import java.util.List;

/**
 * Redis Enterprise database update properties
 * 
 * Properties for updating Redis Enterprise databases.
 */
@Fluent
public final class DatabaseUpdateProperties extends DatabaseCommonProperties {
    /*
     * Version of Redis the database is running on, e.g. '6.0'
     */
    private String redisVersion;

    /*
     * Current resource status of the database
     */
    private ResourceState resourceState;

    /*
     * Current provisioning status of the database
     */
    private ProvisioningState provisioningState;

    /**
     * Creates an instance of DatabaseUpdateProperties class.
     */
    public DatabaseUpdateProperties() {
    }

    /**
     * Get the redisVersion property: Version of Redis the database is running on, e.g. '6.0'.
     * 
     * @return the redisVersion value.
     */
    @Override
    public String redisVersion() {
        return this.redisVersion;
    }

    /**
     * Get the resourceState property: Current resource status of the database.
     * 
     * @return the resourceState value.
     */
    @Override
    public ResourceState resourceState() {
        return this.resourceState;
    }

    /**
     * Get the provisioningState property: Current provisioning status of the database.
     * 
     * @return the provisioningState value.
     */
    @Override
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DatabaseUpdateProperties withClientProtocol(Protocol clientProtocol) {
        super.withClientProtocol(clientProtocol);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DatabaseUpdateProperties withPort(Integer port) {
        super.withPort(port);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DatabaseUpdateProperties withClusteringPolicy(ClusteringPolicy clusteringPolicy) {
        super.withClusteringPolicy(clusteringPolicy);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DatabaseUpdateProperties withEvictionPolicy(EvictionPolicy evictionPolicy) {
        super.withEvictionPolicy(evictionPolicy);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DatabaseUpdateProperties withPersistence(Persistence persistence) {
        super.withPersistence(persistence);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DatabaseUpdateProperties withModules(List<Module> modules) {
        super.withModules(modules);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DatabaseUpdateProperties withGeoReplication(DatabasePropertiesGeoReplication geoReplication) {
        super.withGeoReplication(geoReplication);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DatabaseUpdateProperties withDeferUpgrade(DeferUpgradeSetting deferUpgrade) {
        super.withDeferUpgrade(deferUpgrade);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DatabaseUpdateProperties withAccessKeysAuthentication(AccessKeysAuthentication accessKeysAuthentication) {
        super.withAccessKeysAuthentication(accessKeysAuthentication);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (persistence() != null) {
            persistence().validate();
        }
        if (modules() != null) {
            modules().forEach(e -> e.validate());
        }
        if (geoReplication() != null) {
            geoReplication().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("clientProtocol", clientProtocol() == null ? null : clientProtocol().toString());
        jsonWriter.writeNumberField("port", port());
        jsonWriter.writeStringField("clusteringPolicy",
            clusteringPolicy() == null ? null : clusteringPolicy().toString());
        jsonWriter.writeStringField("evictionPolicy", evictionPolicy() == null ? null : evictionPolicy().toString());
        jsonWriter.writeJsonField("persistence", persistence());
        jsonWriter.writeArrayField("modules", modules(), (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("geoReplication", geoReplication());
        jsonWriter.writeStringField("deferUpgrade", deferUpgrade() == null ? null : deferUpgrade().toString());
        jsonWriter.writeStringField("accessKeysAuthentication",
            accessKeysAuthentication() == null ? null : accessKeysAuthentication().toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DatabaseUpdateProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DatabaseUpdateProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DatabaseUpdateProperties.
     */
    public static DatabaseUpdateProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DatabaseUpdateProperties deserializedDatabaseUpdateProperties = new DatabaseUpdateProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("clientProtocol".equals(fieldName)) {
                    deserializedDatabaseUpdateProperties.withClientProtocol(Protocol.fromString(reader.getString()));
                } else if ("port".equals(fieldName)) {
                    deserializedDatabaseUpdateProperties.withPort(reader.getNullable(JsonReader::getInt));
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedDatabaseUpdateProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else if ("resourceState".equals(fieldName)) {
                    deserializedDatabaseUpdateProperties.resourceState = ResourceState.fromString(reader.getString());
                } else if ("clusteringPolicy".equals(fieldName)) {
                    deserializedDatabaseUpdateProperties
                        .withClusteringPolicy(ClusteringPolicy.fromString(reader.getString()));
                } else if ("evictionPolicy".equals(fieldName)) {
                    deserializedDatabaseUpdateProperties
                        .withEvictionPolicy(EvictionPolicy.fromString(reader.getString()));
                } else if ("persistence".equals(fieldName)) {
                    deserializedDatabaseUpdateProperties.withPersistence(Persistence.fromJson(reader));
                } else if ("modules".equals(fieldName)) {
                    List<Module> modules = reader.readArray(reader1 -> Module.fromJson(reader1));
                    deserializedDatabaseUpdateProperties.withModules(modules);
                } else if ("geoReplication".equals(fieldName)) {
                    deserializedDatabaseUpdateProperties
                        .withGeoReplication(DatabasePropertiesGeoReplication.fromJson(reader));
                } else if ("redisVersion".equals(fieldName)) {
                    deserializedDatabaseUpdateProperties.redisVersion = reader.getString();
                } else if ("deferUpgrade".equals(fieldName)) {
                    deserializedDatabaseUpdateProperties
                        .withDeferUpgrade(DeferUpgradeSetting.fromString(reader.getString()));
                } else if ("accessKeysAuthentication".equals(fieldName)) {
                    deserializedDatabaseUpdateProperties
                        .withAccessKeysAuthentication(AccessKeysAuthentication.fromString(reader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDatabaseUpdateProperties;
        });
    }
}
