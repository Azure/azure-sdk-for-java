// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.redisenterprise.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.redisenterprise.fluent.AccessPolicyAssignmentsClient;
import com.azure.resourcemanager.redisenterprise.fluent.models.AccessPolicyAssignmentInner;
import com.azure.resourcemanager.redisenterprise.models.AccessPolicyAssignmentList;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in AccessPolicyAssignmentsClient.
 */
public final class AccessPolicyAssignmentsClientImpl implements AccessPolicyAssignmentsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final AccessPolicyAssignmentsService service;

    /**
     * The service client containing this operation class.
     */
    private final RedisEnterpriseManagementClientImpl client;

    /**
     * Initializes an instance of AccessPolicyAssignmentsClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    AccessPolicyAssignmentsClientImpl(RedisEnterpriseManagementClientImpl client) {
        this.service = RestProxy.create(AccessPolicyAssignmentsService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for RedisEnterpriseManagementClientAccessPolicyAssignments to be used by
     * the proxy service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "RedisEnterpriseManag")
    public interface AccessPolicyAssignmentsService {
        @Headers({ "Content-Type: application/json" })
        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/redisEnterprise/{clusterName}/databases/{databaseName}/accessPolicyAssignments/{accessPolicyAssignmentName}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> createUpdate(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("clusterName") String clusterName,
            @PathParam("databaseName") String databaseName,
            @PathParam("accessPolicyAssignmentName") String accessPolicyAssignmentName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") AccessPolicyAssignmentInner parameters, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/redisEnterprise/{clusterName}/databases/{databaseName}/accessPolicyAssignments/{accessPolicyAssignmentName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<AccessPolicyAssignmentInner>> get(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("clusterName") String clusterName,
            @PathParam("databaseName") String databaseName,
            @PathParam("accessPolicyAssignmentName") String accessPolicyAssignmentName,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/redisEnterprise/{clusterName}/databases/{databaseName}/accessPolicyAssignments/{accessPolicyAssignmentName}")
        @ExpectedResponses({ 202, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> delete(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("clusterName") String clusterName,
            @PathParam("databaseName") String databaseName,
            @PathParam("accessPolicyAssignmentName") String accessPolicyAssignmentName,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/redisEnterprise/{clusterName}/databases/{databaseName}/accessPolicyAssignments")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<AccessPolicyAssignmentList>> list(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("clusterName") String clusterName,
            @PathParam("databaseName") String databaseName, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<AccessPolicyAssignmentList>> listNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Creates/Updates a particular access policy assignment for a database.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Redis Enterprise cluster.
     * @param databaseName The name of the Redis Enterprise database.
     * @param accessPolicyAssignmentName The name of the Redis Enterprise database access policy assignment.
     * @param parameters Parameters supplied to the create access policy assignment for database.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes the access policy assignment of Redis Enterprise database along with {@link Response} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createUpdateWithResponseAsync(String resourceGroupName, String clusterName,
        String databaseName, String accessPolicyAssignmentName, AccessPolicyAssignmentInner parameters) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (clusterName == null) {
            return Mono.error(new IllegalArgumentException("Parameter clusterName is required and cannot be null."));
        }
        if (databaseName == null) {
            return Mono.error(new IllegalArgumentException("Parameter databaseName is required and cannot be null."));
        }
        if (accessPolicyAssignmentName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter accessPolicyAssignmentName is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.createUpdate(this.client.getEndpoint(), this.client.getSubscriptionId(),
                resourceGroupName, clusterName, databaseName, accessPolicyAssignmentName, this.client.getApiVersion(),
                parameters, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Creates/Updates a particular access policy assignment for a database.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Redis Enterprise cluster.
     * @param databaseName The name of the Redis Enterprise database.
     * @param accessPolicyAssignmentName The name of the Redis Enterprise database access policy assignment.
     * @param parameters Parameters supplied to the create access policy assignment for database.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes the access policy assignment of Redis Enterprise database along with {@link Response} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createUpdateWithResponseAsync(String resourceGroupName, String clusterName,
        String databaseName, String accessPolicyAssignmentName, AccessPolicyAssignmentInner parameters,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (clusterName == null) {
            return Mono.error(new IllegalArgumentException("Parameter clusterName is required and cannot be null."));
        }
        if (databaseName == null) {
            return Mono.error(new IllegalArgumentException("Parameter databaseName is required and cannot be null."));
        }
        if (accessPolicyAssignmentName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter accessPolicyAssignmentName is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.createUpdate(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
            clusterName, databaseName, accessPolicyAssignmentName, this.client.getApiVersion(), parameters, accept,
            context);
    }

    /**
     * Creates/Updates a particular access policy assignment for a database.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Redis Enterprise cluster.
     * @param databaseName The name of the Redis Enterprise database.
     * @param accessPolicyAssignmentName The name of the Redis Enterprise database access policy assignment.
     * @param parameters Parameters supplied to the create access policy assignment for database.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of describes the access policy assignment of Redis Enterprise
     * database.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<AccessPolicyAssignmentInner>, AccessPolicyAssignmentInner> beginCreateUpdateAsync(
        String resourceGroupName, String clusterName, String databaseName, String accessPolicyAssignmentName,
        AccessPolicyAssignmentInner parameters) {
        Mono<Response<Flux<ByteBuffer>>> mono = createUpdateWithResponseAsync(resourceGroupName, clusterName,
            databaseName, accessPolicyAssignmentName, parameters);
        return this.client.<AccessPolicyAssignmentInner, AccessPolicyAssignmentInner>getLroResult(mono,
            this.client.getHttpPipeline(), AccessPolicyAssignmentInner.class, AccessPolicyAssignmentInner.class,
            this.client.getContext());
    }

    /**
     * Creates/Updates a particular access policy assignment for a database.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Redis Enterprise cluster.
     * @param databaseName The name of the Redis Enterprise database.
     * @param accessPolicyAssignmentName The name of the Redis Enterprise database access policy assignment.
     * @param parameters Parameters supplied to the create access policy assignment for database.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of describes the access policy assignment of Redis Enterprise
     * database.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<AccessPolicyAssignmentInner>, AccessPolicyAssignmentInner> beginCreateUpdateAsync(
        String resourceGroupName, String clusterName, String databaseName, String accessPolicyAssignmentName,
        AccessPolicyAssignmentInner parameters, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono = createUpdateWithResponseAsync(resourceGroupName, clusterName,
            databaseName, accessPolicyAssignmentName, parameters, context);
        return this.client.<AccessPolicyAssignmentInner, AccessPolicyAssignmentInner>getLroResult(mono,
            this.client.getHttpPipeline(), AccessPolicyAssignmentInner.class, AccessPolicyAssignmentInner.class,
            context);
    }

    /**
     * Creates/Updates a particular access policy assignment for a database.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Redis Enterprise cluster.
     * @param databaseName The name of the Redis Enterprise database.
     * @param accessPolicyAssignmentName The name of the Redis Enterprise database access policy assignment.
     * @param parameters Parameters supplied to the create access policy assignment for database.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of describes the access policy assignment of Redis Enterprise
     * database.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<AccessPolicyAssignmentInner>, AccessPolicyAssignmentInner> beginCreateUpdate(
        String resourceGroupName, String clusterName, String databaseName, String accessPolicyAssignmentName,
        AccessPolicyAssignmentInner parameters) {
        return this
            .beginCreateUpdateAsync(resourceGroupName, clusterName, databaseName, accessPolicyAssignmentName,
                parameters)
            .getSyncPoller();
    }

    /**
     * Creates/Updates a particular access policy assignment for a database.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Redis Enterprise cluster.
     * @param databaseName The name of the Redis Enterprise database.
     * @param accessPolicyAssignmentName The name of the Redis Enterprise database access policy assignment.
     * @param parameters Parameters supplied to the create access policy assignment for database.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of describes the access policy assignment of Redis Enterprise
     * database.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<AccessPolicyAssignmentInner>, AccessPolicyAssignmentInner> beginCreateUpdate(
        String resourceGroupName, String clusterName, String databaseName, String accessPolicyAssignmentName,
        AccessPolicyAssignmentInner parameters, Context context) {
        return this
            .beginCreateUpdateAsync(resourceGroupName, clusterName, databaseName, accessPolicyAssignmentName,
                parameters, context)
            .getSyncPoller();
    }

    /**
     * Creates/Updates a particular access policy assignment for a database.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Redis Enterprise cluster.
     * @param databaseName The name of the Redis Enterprise database.
     * @param accessPolicyAssignmentName The name of the Redis Enterprise database access policy assignment.
     * @param parameters Parameters supplied to the create access policy assignment for database.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes the access policy assignment of Redis Enterprise database on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<AccessPolicyAssignmentInner> createUpdateAsync(String resourceGroupName, String clusterName,
        String databaseName, String accessPolicyAssignmentName, AccessPolicyAssignmentInner parameters) {
        return beginCreateUpdateAsync(resourceGroupName, clusterName, databaseName, accessPolicyAssignmentName,
            parameters).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Creates/Updates a particular access policy assignment for a database.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Redis Enterprise cluster.
     * @param databaseName The name of the Redis Enterprise database.
     * @param accessPolicyAssignmentName The name of the Redis Enterprise database access policy assignment.
     * @param parameters Parameters supplied to the create access policy assignment for database.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes the access policy assignment of Redis Enterprise database on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<AccessPolicyAssignmentInner> createUpdateAsync(String resourceGroupName, String clusterName,
        String databaseName, String accessPolicyAssignmentName, AccessPolicyAssignmentInner parameters,
        Context context) {
        return beginCreateUpdateAsync(resourceGroupName, clusterName, databaseName, accessPolicyAssignmentName,
            parameters, context).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Creates/Updates a particular access policy assignment for a database.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Redis Enterprise cluster.
     * @param databaseName The name of the Redis Enterprise database.
     * @param accessPolicyAssignmentName The name of the Redis Enterprise database access policy assignment.
     * @param parameters Parameters supplied to the create access policy assignment for database.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes the access policy assignment of Redis Enterprise database.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AccessPolicyAssignmentInner createUpdate(String resourceGroupName, String clusterName, String databaseName,
        String accessPolicyAssignmentName, AccessPolicyAssignmentInner parameters) {
        return createUpdateAsync(resourceGroupName, clusterName, databaseName, accessPolicyAssignmentName, parameters)
            .block();
    }

    /**
     * Creates/Updates a particular access policy assignment for a database.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Redis Enterprise cluster.
     * @param databaseName The name of the Redis Enterprise database.
     * @param accessPolicyAssignmentName The name of the Redis Enterprise database access policy assignment.
     * @param parameters Parameters supplied to the create access policy assignment for database.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes the access policy assignment of Redis Enterprise database.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AccessPolicyAssignmentInner createUpdate(String resourceGroupName, String clusterName, String databaseName,
        String accessPolicyAssignmentName, AccessPolicyAssignmentInner parameters, Context context) {
        return createUpdateAsync(resourceGroupName, clusterName, databaseName, accessPolicyAssignmentName, parameters,
            context).block();
    }

    /**
     * Gets information about access policy assignment for database.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Redis Enterprise cluster.
     * @param databaseName The name of the Redis Enterprise database.
     * @param accessPolicyAssignmentName The name of the Redis Enterprise database access policy assignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about access policy assignment for database along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<AccessPolicyAssignmentInner>> getWithResponseAsync(String resourceGroupName,
        String clusterName, String databaseName, String accessPolicyAssignmentName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (clusterName == null) {
            return Mono.error(new IllegalArgumentException("Parameter clusterName is required and cannot be null."));
        }
        if (databaseName == null) {
            return Mono.error(new IllegalArgumentException("Parameter databaseName is required and cannot be null."));
        }
        if (accessPolicyAssignmentName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter accessPolicyAssignmentName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.get(this.client.getEndpoint(), this.client.getSubscriptionId(),
                resourceGroupName, clusterName, databaseName, accessPolicyAssignmentName, this.client.getApiVersion(),
                accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets information about access policy assignment for database.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Redis Enterprise cluster.
     * @param databaseName The name of the Redis Enterprise database.
     * @param accessPolicyAssignmentName The name of the Redis Enterprise database access policy assignment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about access policy assignment for database along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<AccessPolicyAssignmentInner>> getWithResponseAsync(String resourceGroupName,
        String clusterName, String databaseName, String accessPolicyAssignmentName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (clusterName == null) {
            return Mono.error(new IllegalArgumentException("Parameter clusterName is required and cannot be null."));
        }
        if (databaseName == null) {
            return Mono.error(new IllegalArgumentException("Parameter databaseName is required and cannot be null."));
        }
        if (accessPolicyAssignmentName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter accessPolicyAssignmentName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.get(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName, clusterName,
            databaseName, accessPolicyAssignmentName, this.client.getApiVersion(), accept, context);
    }

    /**
     * Gets information about access policy assignment for database.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Redis Enterprise cluster.
     * @param databaseName The name of the Redis Enterprise database.
     * @param accessPolicyAssignmentName The name of the Redis Enterprise database access policy assignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about access policy assignment for database on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<AccessPolicyAssignmentInner> getAsync(String resourceGroupName, String clusterName,
        String databaseName, String accessPolicyAssignmentName) {
        return getWithResponseAsync(resourceGroupName, clusterName, databaseName, accessPolicyAssignmentName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets information about access policy assignment for database.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Redis Enterprise cluster.
     * @param databaseName The name of the Redis Enterprise database.
     * @param accessPolicyAssignmentName The name of the Redis Enterprise database access policy assignment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about access policy assignment for database along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<AccessPolicyAssignmentInner> getWithResponse(String resourceGroupName, String clusterName,
        String databaseName, String accessPolicyAssignmentName, Context context) {
        return getWithResponseAsync(resourceGroupName, clusterName, databaseName, accessPolicyAssignmentName, context)
            .block();
    }

    /**
     * Gets information about access policy assignment for database.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Redis Enterprise cluster.
     * @param databaseName The name of the Redis Enterprise database.
     * @param accessPolicyAssignmentName The name of the Redis Enterprise database access policy assignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about access policy assignment for database.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AccessPolicyAssignmentInner get(String resourceGroupName, String clusterName, String databaseName,
        String accessPolicyAssignmentName) {
        return getWithResponse(resourceGroupName, clusterName, databaseName, accessPolicyAssignmentName, Context.NONE)
            .getValue();
    }

    /**
     * Deletes a single access policy assignment.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Redis Enterprise cluster.
     * @param databaseName The name of the Redis Enterprise database.
     * @param accessPolicyAssignmentName The name of the Redis Enterprise database access policy assignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(String resourceGroupName, String clusterName,
        String databaseName, String accessPolicyAssignmentName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (clusterName == null) {
            return Mono.error(new IllegalArgumentException("Parameter clusterName is required and cannot be null."));
        }
        if (databaseName == null) {
            return Mono.error(new IllegalArgumentException("Parameter databaseName is required and cannot be null."));
        }
        if (accessPolicyAssignmentName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter accessPolicyAssignmentName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.delete(this.client.getEndpoint(), this.client.getSubscriptionId(),
                resourceGroupName, clusterName, databaseName, accessPolicyAssignmentName, this.client.getApiVersion(),
                accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Deletes a single access policy assignment.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Redis Enterprise cluster.
     * @param databaseName The name of the Redis Enterprise database.
     * @param accessPolicyAssignmentName The name of the Redis Enterprise database access policy assignment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(String resourceGroupName, String clusterName,
        String databaseName, String accessPolicyAssignmentName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (clusterName == null) {
            return Mono.error(new IllegalArgumentException("Parameter clusterName is required and cannot be null."));
        }
        if (databaseName == null) {
            return Mono.error(new IllegalArgumentException("Parameter databaseName is required and cannot be null."));
        }
        if (accessPolicyAssignmentName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter accessPolicyAssignmentName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.delete(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
            clusterName, databaseName, accessPolicyAssignmentName, this.client.getApiVersion(), accept, context);
    }

    /**
     * Deletes a single access policy assignment.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Redis Enterprise cluster.
     * @param databaseName The name of the Redis Enterprise database.
     * @param accessPolicyAssignmentName The name of the Redis Enterprise database access policy assignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(String resourceGroupName, String clusterName,
        String databaseName, String accessPolicyAssignmentName) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = deleteWithResponseAsync(resourceGroupName, clusterName, databaseName, accessPolicyAssignmentName);
        return this.client.<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class,
            this.client.getContext());
    }

    /**
     * Deletes a single access policy assignment.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Redis Enterprise cluster.
     * @param databaseName The name of the Redis Enterprise database.
     * @param accessPolicyAssignmentName The name of the Redis Enterprise database access policy assignment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(String resourceGroupName, String clusterName,
        String databaseName, String accessPolicyAssignmentName, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono = deleteWithResponseAsync(resourceGroupName, clusterName, databaseName,
            accessPolicyAssignmentName, context);
        return this.client.<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class,
            context);
    }

    /**
     * Deletes a single access policy assignment.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Redis Enterprise cluster.
     * @param databaseName The name of the Redis Enterprise database.
     * @param accessPolicyAssignmentName The name of the Redis Enterprise database access policy assignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String clusterName,
        String databaseName, String accessPolicyAssignmentName) {
        return this.beginDeleteAsync(resourceGroupName, clusterName, databaseName, accessPolicyAssignmentName)
            .getSyncPoller();
    }

    /**
     * Deletes a single access policy assignment.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Redis Enterprise cluster.
     * @param databaseName The name of the Redis Enterprise database.
     * @param accessPolicyAssignmentName The name of the Redis Enterprise database access policy assignment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String clusterName,
        String databaseName, String accessPolicyAssignmentName, Context context) {
        return this.beginDeleteAsync(resourceGroupName, clusterName, databaseName, accessPolicyAssignmentName, context)
            .getSyncPoller();
    }

    /**
     * Deletes a single access policy assignment.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Redis Enterprise cluster.
     * @param databaseName The name of the Redis Enterprise database.
     * @param accessPolicyAssignmentName The name of the Redis Enterprise database access policy assignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String clusterName, String databaseName,
        String accessPolicyAssignmentName) {
        return beginDeleteAsync(resourceGroupName, clusterName, databaseName, accessPolicyAssignmentName).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Deletes a single access policy assignment.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Redis Enterprise cluster.
     * @param databaseName The name of the Redis Enterprise database.
     * @param accessPolicyAssignmentName The name of the Redis Enterprise database access policy assignment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String clusterName, String databaseName,
        String accessPolicyAssignmentName, Context context) {
        return beginDeleteAsync(resourceGroupName, clusterName, databaseName, accessPolicyAssignmentName, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Deletes a single access policy assignment.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Redis Enterprise cluster.
     * @param databaseName The name of the Redis Enterprise database.
     * @param accessPolicyAssignmentName The name of the Redis Enterprise database access policy assignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String clusterName, String databaseName,
        String accessPolicyAssignmentName) {
        deleteAsync(resourceGroupName, clusterName, databaseName, accessPolicyAssignmentName).block();
    }

    /**
     * Deletes a single access policy assignment.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Redis Enterprise cluster.
     * @param databaseName The name of the Redis Enterprise database.
     * @param accessPolicyAssignmentName The name of the Redis Enterprise database access policy assignment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String clusterName, String databaseName,
        String accessPolicyAssignmentName, Context context) {
        deleteAsync(resourceGroupName, clusterName, databaseName, accessPolicyAssignmentName, context).block();
    }

    /**
     * Gets all access policy assignments..
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Redis Enterprise cluster.
     * @param databaseName The name of the Redis Enterprise database.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all access policy assignments. along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<AccessPolicyAssignmentInner>> listSinglePageAsync(String resourceGroupName,
        String clusterName, String databaseName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (clusterName == null) {
            return Mono.error(new IllegalArgumentException("Parameter clusterName is required and cannot be null."));
        }
        if (databaseName == null) {
            return Mono.error(new IllegalArgumentException("Parameter databaseName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.list(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, clusterName, databaseName, accept, context))
            .<PagedResponse<AccessPolicyAssignmentInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets all access policy assignments..
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Redis Enterprise cluster.
     * @param databaseName The name of the Redis Enterprise database.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all access policy assignments. along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<AccessPolicyAssignmentInner>> listSinglePageAsync(String resourceGroupName,
        String clusterName, String databaseName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (clusterName == null) {
            return Mono.error(new IllegalArgumentException("Parameter clusterName is required and cannot be null."));
        }
        if (databaseName == null) {
            return Mono.error(new IllegalArgumentException("Parameter databaseName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .list(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
                resourceGroupName, clusterName, databaseName, accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }

    /**
     * Gets all access policy assignments..
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Redis Enterprise cluster.
     * @param databaseName The name of the Redis Enterprise database.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all access policy assignments. as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<AccessPolicyAssignmentInner> listAsync(String resourceGroupName, String clusterName,
        String databaseName) {
        return new PagedFlux<>(() -> listSinglePageAsync(resourceGroupName, clusterName, databaseName),
            nextLink -> listNextSinglePageAsync(nextLink));
    }

    /**
     * Gets all access policy assignments..
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Redis Enterprise cluster.
     * @param databaseName The name of the Redis Enterprise database.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all access policy assignments. as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<AccessPolicyAssignmentInner> listAsync(String resourceGroupName, String clusterName,
        String databaseName, Context context) {
        return new PagedFlux<>(() -> listSinglePageAsync(resourceGroupName, clusterName, databaseName, context),
            nextLink -> listNextSinglePageAsync(nextLink, context));
    }

    /**
     * Gets all access policy assignments..
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Redis Enterprise cluster.
     * @param databaseName The name of the Redis Enterprise database.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all access policy assignments. as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<AccessPolicyAssignmentInner> list(String resourceGroupName, String clusterName,
        String databaseName) {
        return new PagedIterable<>(listAsync(resourceGroupName, clusterName, databaseName));
    }

    /**
     * Gets all access policy assignments..
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Redis Enterprise cluster.
     * @param databaseName The name of the Redis Enterprise database.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all access policy assignments. as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<AccessPolicyAssignmentInner> list(String resourceGroupName, String clusterName,
        String databaseName, Context context) {
        return new PagedIterable<>(listAsync(resourceGroupName, clusterName, databaseName, context));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a list-all operation along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<AccessPolicyAssignmentInner>> listNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.listNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<AccessPolicyAssignmentInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a list-all operation along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<AccessPolicyAssignmentInner>> listNextSinglePageAsync(String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.listNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }
}
