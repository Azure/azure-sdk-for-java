// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.redisenterprise.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Module settings
 * 
 * Specifies configuration of a redis module.
 */
@Fluent
public final class Module implements JsonSerializable<Module> {
    /*
     * The name of the module, e.g. 'RedisBloom', 'RediSearch', 'RedisTimeSeries'
     */
    private String name;

    /*
     * Configuration options for the module, e.g. 'ERROR_RATE 0.01 INITIAL_SIZE 400'.
     */
    private String args;

    /*
     * The version of the module, e.g. '1.0'.
     */
    private String version;

    /**
     * Creates an instance of Module class.
     */
    public Module() {
    }

    /**
     * Get the name property: The name of the module, e.g. 'RedisBloom', 'RediSearch', 'RedisTimeSeries'.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: The name of the module, e.g. 'RedisBloom', 'RediSearch', 'RedisTimeSeries'.
     * 
     * @param name the name value to set.
     * @return the Module object itself.
     */
    public Module withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the args property: Configuration options for the module, e.g. 'ERROR_RATE 0.01 INITIAL_SIZE 400'.
     * 
     * @return the args value.
     */
    public String args() {
        return this.args;
    }

    /**
     * Set the args property: Configuration options for the module, e.g. 'ERROR_RATE 0.01 INITIAL_SIZE 400'.
     * 
     * @param args the args value to set.
     * @return the Module object itself.
     */
    public Module withArgs(String args) {
        this.args = args;
        return this;
    }

    /**
     * Get the version property: The version of the module, e.g. '1.0'.
     * 
     * @return the version value.
     */
    public String version() {
        return this.version;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (name() == null) {
            throw LOGGER.atError().log(new IllegalArgumentException("Missing required property name in model Module"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(Module.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("args", this.args);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Module from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Module if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the Module.
     */
    public static Module fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Module deserializedModule = new Module();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedModule.name = reader.getString();
                } else if ("args".equals(fieldName)) {
                    deserializedModule.args = reader.getString();
                } else if ("version".equals(fieldName)) {
                    deserializedModule.version = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedModule;
        });
    }
}
