// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.redisenterprise.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Persistence settings
 * 
 * Persistence-related configuration for the Redis Enterprise database.
 */
@Fluent
public final class Persistence implements JsonSerializable<Persistence> {
    /*
     * Sets whether AOF is enabled. Note that at most one of AOF or RDB persistence may be enabled.
     */
    private Boolean aofEnabled;

    /*
     * Sets whether RDB is enabled. Note that at most one of AOF or RDB persistence may be enabled.
     */
    private Boolean rdbEnabled;

    /*
     * Sets the frequency at which data is written to disk. Defaults to '1s', meaning 'every second'. Note that the
     * 'always' setting is deprecated, because of its performance impact.
     */
    private AofFrequency aofFrequency;

    /*
     * Sets the frequency at which a snapshot of the database is created.
     */
    private RdbFrequency rdbFrequency;

    /**
     * Creates an instance of Persistence class.
     */
    public Persistence() {
    }

    /**
     * Get the aofEnabled property: Sets whether AOF is enabled. Note that at most one of AOF or RDB persistence may be
     * enabled.
     * 
     * @return the aofEnabled value.
     */
    public Boolean aofEnabled() {
        return this.aofEnabled;
    }

    /**
     * Set the aofEnabled property: Sets whether AOF is enabled. Note that at most one of AOF or RDB persistence may be
     * enabled.
     * 
     * @param aofEnabled the aofEnabled value to set.
     * @return the Persistence object itself.
     */
    public Persistence withAofEnabled(Boolean aofEnabled) {
        this.aofEnabled = aofEnabled;
        return this;
    }

    /**
     * Get the rdbEnabled property: Sets whether RDB is enabled. Note that at most one of AOF or RDB persistence may be
     * enabled.
     * 
     * @return the rdbEnabled value.
     */
    public Boolean rdbEnabled() {
        return this.rdbEnabled;
    }

    /**
     * Set the rdbEnabled property: Sets whether RDB is enabled. Note that at most one of AOF or RDB persistence may be
     * enabled.
     * 
     * @param rdbEnabled the rdbEnabled value to set.
     * @return the Persistence object itself.
     */
    public Persistence withRdbEnabled(Boolean rdbEnabled) {
        this.rdbEnabled = rdbEnabled;
        return this;
    }

    /**
     * Get the aofFrequency property: Sets the frequency at which data is written to disk. Defaults to '1s', meaning
     * 'every second'. Note that the 'always' setting is deprecated, because of its performance impact.
     * 
     * @return the aofFrequency value.
     */
    public AofFrequency aofFrequency() {
        return this.aofFrequency;
    }

    /**
     * Set the aofFrequency property: Sets the frequency at which data is written to disk. Defaults to '1s', meaning
     * 'every second'. Note that the 'always' setting is deprecated, because of its performance impact.
     * 
     * @param aofFrequency the aofFrequency value to set.
     * @return the Persistence object itself.
     */
    public Persistence withAofFrequency(AofFrequency aofFrequency) {
        this.aofFrequency = aofFrequency;
        return this;
    }

    /**
     * Get the rdbFrequency property: Sets the frequency at which a snapshot of the database is created.
     * 
     * @return the rdbFrequency value.
     */
    public RdbFrequency rdbFrequency() {
        return this.rdbFrequency;
    }

    /**
     * Set the rdbFrequency property: Sets the frequency at which a snapshot of the database is created.
     * 
     * @param rdbFrequency the rdbFrequency value to set.
     * @return the Persistence object itself.
     */
    public Persistence withRdbFrequency(RdbFrequency rdbFrequency) {
        this.rdbFrequency = rdbFrequency;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("aofEnabled", this.aofEnabled);
        jsonWriter.writeBooleanField("rdbEnabled", this.rdbEnabled);
        jsonWriter.writeStringField("aofFrequency", this.aofFrequency == null ? null : this.aofFrequency.toString());
        jsonWriter.writeStringField("rdbFrequency", this.rdbFrequency == null ? null : this.rdbFrequency.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Persistence from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Persistence if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the Persistence.
     */
    public static Persistence fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Persistence deserializedPersistence = new Persistence();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("aofEnabled".equals(fieldName)) {
                    deserializedPersistence.aofEnabled = reader.getNullable(JsonReader::getBoolean);
                } else if ("rdbEnabled".equals(fieldName)) {
                    deserializedPersistence.rdbEnabled = reader.getNullable(JsonReader::getBoolean);
                } else if ("aofFrequency".equals(fieldName)) {
                    deserializedPersistence.aofFrequency = AofFrequency.fromString(reader.getString());
                } else if ("rdbFrequency".equals(fieldName)) {
                    deserializedPersistence.rdbFrequency = RdbFrequency.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPersistence;
        });
    }
}
