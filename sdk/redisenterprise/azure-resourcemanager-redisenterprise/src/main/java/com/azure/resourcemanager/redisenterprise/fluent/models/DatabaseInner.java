// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.redisenterprise.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.JsonFlatten;
import com.azure.core.management.ProxyResource;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.redisenterprise.models.ClusteringPolicy;
import com.azure.resourcemanager.redisenterprise.models.EvictionPolicy;
import com.azure.resourcemanager.redisenterprise.models.Module;
import com.azure.resourcemanager.redisenterprise.models.Persistence;
import com.azure.resourcemanager.redisenterprise.models.Protocol;
import com.azure.resourcemanager.redisenterprise.models.ProvisioningState;
import com.azure.resourcemanager.redisenterprise.models.ResourceState;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** Describes a database on the RedisEnterprise cluster. */
@JsonFlatten
@Fluent
public class DatabaseInner extends ProxyResource {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(DatabaseInner.class);

    /*
     * Specifies whether redis clients can connect using TLS-encrypted or
     * plaintext redis protocols. Default is TLS-encrypted.
     */
    @JsonProperty(value = "properties.clientProtocol")
    private Protocol clientProtocol;

    /*
     * TCP port of the database endpoint. Specified at create time. Defaults to
     * an available port.
     */
    @JsonProperty(value = "properties.port")
    private Integer port;

    /*
     * Current provisioning status of the database
     */
    @JsonProperty(value = "properties.provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private ProvisioningState provisioningState;

    /*
     * Current resource status of the database
     */
    @JsonProperty(value = "properties.resourceState", access = JsonProperty.Access.WRITE_ONLY)
    private ResourceState resourceState;

    /*
     * Clustering policy - default is OSSCluster. Specified at create time.
     */
    @JsonProperty(value = "properties.clusteringPolicy")
    private ClusteringPolicy clusteringPolicy;

    /*
     * Redis eviction policy - default is VolatileLRU
     */
    @JsonProperty(value = "properties.evictionPolicy")
    private EvictionPolicy evictionPolicy;

    /*
     * Persistence settings
     */
    @JsonProperty(value = "properties.persistence")
    private Persistence persistence;

    /*
     * Optional set of redis modules to enable in this database - modules can
     * only be added at creation time.
     */
    @JsonProperty(value = "properties.modules")
    private List<Module> modules;

    /**
     * Get the clientProtocol property: Specifies whether redis clients can connect using TLS-encrypted or plaintext
     * redis protocols. Default is TLS-encrypted.
     *
     * @return the clientProtocol value.
     */
    public Protocol clientProtocol() {
        return this.clientProtocol;
    }

    /**
     * Set the clientProtocol property: Specifies whether redis clients can connect using TLS-encrypted or plaintext
     * redis protocols. Default is TLS-encrypted.
     *
     * @param clientProtocol the clientProtocol value to set.
     * @return the DatabaseInner object itself.
     */
    public DatabaseInner withClientProtocol(Protocol clientProtocol) {
        this.clientProtocol = clientProtocol;
        return this;
    }

    /**
     * Get the port property: TCP port of the database endpoint. Specified at create time. Defaults to an available
     * port.
     *
     * @return the port value.
     */
    public Integer port() {
        return this.port;
    }

    /**
     * Set the port property: TCP port of the database endpoint. Specified at create time. Defaults to an available
     * port.
     *
     * @param port the port value to set.
     * @return the DatabaseInner object itself.
     */
    public DatabaseInner withPort(Integer port) {
        this.port = port;
        return this;
    }

    /**
     * Get the provisioningState property: Current provisioning status of the database.
     *
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the resourceState property: Current resource status of the database.
     *
     * @return the resourceState value.
     */
    public ResourceState resourceState() {
        return this.resourceState;
    }

    /**
     * Get the clusteringPolicy property: Clustering policy - default is OSSCluster. Specified at create time.
     *
     * @return the clusteringPolicy value.
     */
    public ClusteringPolicy clusteringPolicy() {
        return this.clusteringPolicy;
    }

    /**
     * Set the clusteringPolicy property: Clustering policy - default is OSSCluster. Specified at create time.
     *
     * @param clusteringPolicy the clusteringPolicy value to set.
     * @return the DatabaseInner object itself.
     */
    public DatabaseInner withClusteringPolicy(ClusteringPolicy clusteringPolicy) {
        this.clusteringPolicy = clusteringPolicy;
        return this;
    }

    /**
     * Get the evictionPolicy property: Redis eviction policy - default is VolatileLRU.
     *
     * @return the evictionPolicy value.
     */
    public EvictionPolicy evictionPolicy() {
        return this.evictionPolicy;
    }

    /**
     * Set the evictionPolicy property: Redis eviction policy - default is VolatileLRU.
     *
     * @param evictionPolicy the evictionPolicy value to set.
     * @return the DatabaseInner object itself.
     */
    public DatabaseInner withEvictionPolicy(EvictionPolicy evictionPolicy) {
        this.evictionPolicy = evictionPolicy;
        return this;
    }

    /**
     * Get the persistence property: Persistence settings.
     *
     * @return the persistence value.
     */
    public Persistence persistence() {
        return this.persistence;
    }

    /**
     * Set the persistence property: Persistence settings.
     *
     * @param persistence the persistence value to set.
     * @return the DatabaseInner object itself.
     */
    public DatabaseInner withPersistence(Persistence persistence) {
        this.persistence = persistence;
        return this;
    }

    /**
     * Get the modules property: Optional set of redis modules to enable in this database - modules can only be added at
     * creation time.
     *
     * @return the modules value.
     */
    public List<Module> modules() {
        return this.modules;
    }

    /**
     * Set the modules property: Optional set of redis modules to enable in this database - modules can only be added at
     * creation time.
     *
     * @param modules the modules value to set.
     * @return the DatabaseInner object itself.
     */
    public DatabaseInner withModules(List<Module> modules) {
        this.modules = modules;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (persistence() != null) {
            persistence().validate();
        }
        if (modules() != null) {
            modules().forEach(e -> e.validate());
        }
    }
}
