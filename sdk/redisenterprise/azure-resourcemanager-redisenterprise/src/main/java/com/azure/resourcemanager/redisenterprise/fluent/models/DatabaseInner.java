// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.redisenterprise.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.ProxyResource;
import com.azure.core.management.SystemData;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.redisenterprise.models.AccessKeysAuthentication;
import com.azure.resourcemanager.redisenterprise.models.ClusteringPolicy;
import com.azure.resourcemanager.redisenterprise.models.DatabasePropertiesGeoReplication;
import com.azure.resourcemanager.redisenterprise.models.DeferUpgradeSetting;
import com.azure.resourcemanager.redisenterprise.models.EvictionPolicy;
import com.azure.resourcemanager.redisenterprise.models.Module;
import com.azure.resourcemanager.redisenterprise.models.Persistence;
import com.azure.resourcemanager.redisenterprise.models.Protocol;
import com.azure.resourcemanager.redisenterprise.models.ProvisioningState;
import com.azure.resourcemanager.redisenterprise.models.ResourceState;
import java.io.IOException;
import java.util.List;

/**
 * Describes a database on the Redis Enterprise cluster.
 */
@Fluent
public final class DatabaseInner extends ProxyResource {
    /*
     * Other properties of the database.
     */
    private DatabaseProperties innerProperties;

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    private SystemData systemData;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of DatabaseInner class.
     */
    public DatabaseInner() {
    }

    /**
     * Get the innerProperties property: Other properties of the database.
     * 
     * @return the innerProperties value.
     */
    private DatabaseProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * Get the clientProtocol property: Specifies whether redis clients can connect using TLS-encrypted or plaintext
     * redis protocols. Default is TLS-encrypted.
     * 
     * @return the clientProtocol value.
     */
    public Protocol clientProtocol() {
        return this.innerProperties() == null ? null : this.innerProperties().clientProtocol();
    }

    /**
     * Set the clientProtocol property: Specifies whether redis clients can connect using TLS-encrypted or plaintext
     * redis protocols. Default is TLS-encrypted.
     * 
     * @param clientProtocol the clientProtocol value to set.
     * @return the DatabaseInner object itself.
     */
    public DatabaseInner withClientProtocol(Protocol clientProtocol) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DatabaseProperties();
        }
        this.innerProperties().withClientProtocol(clientProtocol);
        return this;
    }

    /**
     * Get the port property: TCP port of the database endpoint. Specified at create time. Defaults to an available
     * port.
     * 
     * @return the port value.
     */
    public Integer port() {
        return this.innerProperties() == null ? null : this.innerProperties().port();
    }

    /**
     * Set the port property: TCP port of the database endpoint. Specified at create time. Defaults to an available
     * port.
     * 
     * @param port the port value to set.
     * @return the DatabaseInner object itself.
     */
    public DatabaseInner withPort(Integer port) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DatabaseProperties();
        }
        this.innerProperties().withPort(port);
        return this;
    }

    /**
     * Get the provisioningState property: Current provisioning status of the database.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Get the resourceState property: Current resource status of the database.
     * 
     * @return the resourceState value.
     */
    public ResourceState resourceState() {
        return this.innerProperties() == null ? null : this.innerProperties().resourceState();
    }

    /**
     * Get the clusteringPolicy property: Clustering policy - default is OSSCluster. This property must be chosen at
     * create time, and cannot be changed without deleting the database.
     * 
     * @return the clusteringPolicy value.
     */
    public ClusteringPolicy clusteringPolicy() {
        return this.innerProperties() == null ? null : this.innerProperties().clusteringPolicy();
    }

    /**
     * Set the clusteringPolicy property: Clustering policy - default is OSSCluster. This property must be chosen at
     * create time, and cannot be changed without deleting the database.
     * 
     * @param clusteringPolicy the clusteringPolicy value to set.
     * @return the DatabaseInner object itself.
     */
    public DatabaseInner withClusteringPolicy(ClusteringPolicy clusteringPolicy) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DatabaseProperties();
        }
        this.innerProperties().withClusteringPolicy(clusteringPolicy);
        return this;
    }

    /**
     * Get the evictionPolicy property: Redis eviction policy - default is VolatileLRU.
     * 
     * @return the evictionPolicy value.
     */
    public EvictionPolicy evictionPolicy() {
        return this.innerProperties() == null ? null : this.innerProperties().evictionPolicy();
    }

    /**
     * Set the evictionPolicy property: Redis eviction policy - default is VolatileLRU.
     * 
     * @param evictionPolicy the evictionPolicy value to set.
     * @return the DatabaseInner object itself.
     */
    public DatabaseInner withEvictionPolicy(EvictionPolicy evictionPolicy) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DatabaseProperties();
        }
        this.innerProperties().withEvictionPolicy(evictionPolicy);
        return this;
    }

    /**
     * Get the persistence property: Persistence settings.
     * 
     * @return the persistence value.
     */
    public Persistence persistence() {
        return this.innerProperties() == null ? null : this.innerProperties().persistence();
    }

    /**
     * Set the persistence property: Persistence settings.
     * 
     * @param persistence the persistence value to set.
     * @return the DatabaseInner object itself.
     */
    public DatabaseInner withPersistence(Persistence persistence) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DatabaseProperties();
        }
        this.innerProperties().withPersistence(persistence);
        return this;
    }

    /**
     * Get the modules property: Optional set of redis modules to enable in this database - modules can only be added at
     * creation time.
     * 
     * @return the modules value.
     */
    public List<Module> modules() {
        return this.innerProperties() == null ? null : this.innerProperties().modules();
    }

    /**
     * Set the modules property: Optional set of redis modules to enable in this database - modules can only be added at
     * creation time.
     * 
     * @param modules the modules value to set.
     * @return the DatabaseInner object itself.
     */
    public DatabaseInner withModules(List<Module> modules) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DatabaseProperties();
        }
        this.innerProperties().withModules(modules);
        return this;
    }

    /**
     * Get the geoReplication property: Optional set of properties to configure geo replication for this database.
     * 
     * @return the geoReplication value.
     */
    public DatabasePropertiesGeoReplication geoReplication() {
        return this.innerProperties() == null ? null : this.innerProperties().geoReplication();
    }

    /**
     * Set the geoReplication property: Optional set of properties to configure geo replication for this database.
     * 
     * @param geoReplication the geoReplication value to set.
     * @return the DatabaseInner object itself.
     */
    public DatabaseInner withGeoReplication(DatabasePropertiesGeoReplication geoReplication) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DatabaseProperties();
        }
        this.innerProperties().withGeoReplication(geoReplication);
        return this;
    }

    /**
     * Get the redisVersion property: Version of Redis the database is running on, e.g. '6.0'.
     * 
     * @return the redisVersion value.
     */
    public String redisVersion() {
        return this.innerProperties() == null ? null : this.innerProperties().redisVersion();
    }

    /**
     * Get the deferUpgrade property: Option to defer upgrade when newest version is released - default is NotDeferred.
     * Learn more: https://aka.ms/redisversionupgrade.
     * 
     * @return the deferUpgrade value.
     */
    public DeferUpgradeSetting deferUpgrade() {
        return this.innerProperties() == null ? null : this.innerProperties().deferUpgrade();
    }

    /**
     * Set the deferUpgrade property: Option to defer upgrade when newest version is released - default is NotDeferred.
     * Learn more: https://aka.ms/redisversionupgrade.
     * 
     * @param deferUpgrade the deferUpgrade value to set.
     * @return the DatabaseInner object itself.
     */
    public DatabaseInner withDeferUpgrade(DeferUpgradeSetting deferUpgrade) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DatabaseProperties();
        }
        this.innerProperties().withDeferUpgrade(deferUpgrade);
        return this;
    }

    /**
     * Get the accessKeysAuthentication property: This property can be Enabled/Disabled to allow or deny access with the
     * current access keys. Can be updated even after database is created.
     * 
     * @return the accessKeysAuthentication value.
     */
    public AccessKeysAuthentication accessKeysAuthentication() {
        return this.innerProperties() == null ? null : this.innerProperties().accessKeysAuthentication();
    }

    /**
     * Set the accessKeysAuthentication property: This property can be Enabled/Disabled to allow or deny access with the
     * current access keys. Can be updated even after database is created.
     * 
     * @param accessKeysAuthentication the accessKeysAuthentication value to set.
     * @return the DatabaseInner object itself.
     */
    public DatabaseInner withAccessKeysAuthentication(AccessKeysAuthentication accessKeysAuthentication) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DatabaseProperties();
        }
        this.innerProperties().withAccessKeysAuthentication(accessKeysAuthentication);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DatabaseInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DatabaseInner if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DatabaseInner.
     */
    public static DatabaseInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DatabaseInner deserializedDatabaseInner = new DatabaseInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedDatabaseInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedDatabaseInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedDatabaseInner.type = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    deserializedDatabaseInner.innerProperties = DatabaseProperties.fromJson(reader);
                } else if ("systemData".equals(fieldName)) {
                    deserializedDatabaseInner.systemData = SystemData.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDatabaseInner;
        });
    }
}
