// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.graphservices.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.graphservices.GraphServicesManager;
import com.azure.resourcemanager.graphservices.models.AccountResource;
import com.azure.resourcemanager.graphservices.models.AccountResourceProperties;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class AccountsCreateAndUpdateMockTests {
    @Test
    public void testCreateAndUpdate() throws Exception {
        String responseStr
            = "{\"systemData\":{\"createdByType\":\"ManagedIdentity\",\"createdAt\":\"2021-07-31T08:54:57Z\",\"lastModifiedByType\":\"User\",\"lastModifiedAt\":\"2021-02-05T00:34:52Z\"},\"properties\":{\"provisioningState\":\"Succeeded\",\"appId\":\"pteehzzv\",\"billingPlanId\":\"yqrimzin\"},\"location\":\"vswjdk\",\"tags\":{\"ohjtckw\":\"oodqxhcrm\",\"sqwpgrjb\":\"dsoifiyipj\",\"mocpc\":\"norcjxvsnbyxqab\",\"c\":\"shurzafbljjgpbto\"},\"id\":\"mkljavb\",\"name\":\"idtqajzyu\",\"type\":\"pku\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        GraphServicesManager manager = GraphServicesManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        AccountResource response = manager.accounts()
            .define("prwzwbnguitnwui")
            .withRegion("idf")
            .withExistingResourceGroup("uouq")
            .withProperties(new AccountResourceProperties().withAppId("y"))
            .withTags(mapOf("dkfthwxmnt", "dzuhtymwi", "aop", "i", "jcmmxdcufufsrp", "km"))
            .create();

        Assertions.assertEquals("vswjdk", response.location());
        Assertions.assertEquals("oodqxhcrm", response.tags().get("ohjtckw"));
        Assertions.assertEquals("pteehzzv", response.properties().appId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
