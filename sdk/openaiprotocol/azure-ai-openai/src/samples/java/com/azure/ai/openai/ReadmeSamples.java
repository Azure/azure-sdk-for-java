// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.openai;

import com.azure.ai.openai.models.AudioTranscription;
import com.azure.ai.openai.models.AudioTranscriptionOptions;
import com.azure.ai.openai.models.AudioTranslation;
import com.azure.ai.openai.models.AudioTranslationFormat;
import com.azure.ai.openai.models.AudioTranslationOptions;
import com.azure.ai.openai.models.ChatCompletion;
import com.azure.ai.openai.models.ChatCompletionCollection;
import com.azure.ai.openai.models.ChatCompletionOptions;
import com.azure.ai.openai.models.ChatRequestMessage;
import com.azure.ai.openai.models.ChatRequestSystemMessage;
import com.azure.ai.openai.models.ChatRequestUserMessage;
import com.azure.ai.openai.models.ChatUpdate;
import com.azure.ai.openai.models.Embedding;
import com.azure.ai.openai.models.GenerateImageResult;
import com.azure.ai.openai.models.GenerateImageResultCollection;
import com.azure.ai.openai.models.GenerateImagesOptions;
import com.azure.ai.openai.models.ImageGenerationQuality;
import com.azure.ai.openai.models.ImageGenerationStyle;
import com.azure.ai.openai.models.ImageSize;
import com.azure.core.credential.KeyCredential;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.core.util.IterableStream;
import com.azure.core.util.serializer.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.StandardCopyOption;
import java.util.Arrays;
import java.util.List;
import java.util.Map;

public final class ReadmeSamples {
    public void readmeSamples() throws IOException {

        // Create a synchronous image client
        ImageClient imageClient = new ImageClientBuilder()
            .endpoint("<endpoint>")
            .model("dall-e-3")
            .credential(new KeyCredential("api-key"))
            .buildClient();

        // In this sample, we want to build an app to help interior designers prototype new ideas based on the latest design trends.
        // As part of the creative process, an interior designer can use this app to generate artistic concepts for inspiration simply
        // by describing the scene in their head as a prompt. As expected, high-quality, strikingly dramatic images with finer details
        // deliver the best results for this use case.
        String prompt = "The concept for a living room that pulls from mid-century design elements while bringing in softer, current shapes for a"
            + " stylish juxtaposition. It's a unique, personalized space with a touch of nostalgia. Using autumnal hues, including colors like copper,"
            + " burnt orange, terracotta, and amber, that bring a sense of humility. Featuring expressive marble with deep veining in a variety of"
            + " colors to add character and depth. Stone and rock in light and dark variations adding texture, bringing a touch of nature to a space."
            + " They can serve as bold wall accents, drawing attention to specific elements.";

        GenerateImagesOptions options = new GenerateImagesOptions()
            .setQuality(ImageGenerationQuality.HD)
            .setSize(ImageSize.SIZE1792X1024)
            .setStyle(ImageGenerationStyle.VIVID);

        GenerateImageResultCollection generateImageResultCollection = imageClient.generateImages(prompt, options);
        GenerateImageResult generateImageResult = generateImageResultCollection.getResults().get(0);
        BinaryData imageBytes = generateImageResult.getImageBytes();

        // Save the image to a file
        Files.copy(imageBytes.toStream(), new File("output.png").toPath(), StandardCopyOption.REPLACE_EXISTING);


        EmbeddingClient embeddingClient = new EmbeddingClientBuilder()
            .endpoint("<endpoint>")
            .model("text-embedding-ada-002")
            .credential(new KeyCredential("api-key"))
            .buildClient();

        Embedding embedding = embeddingClient.generateEmbedding("this is my awesome text I want indexed somewhere");
        List<Double> embeddingValue = embedding.getEmbedding();
        // use the represented array for a search index, etc.


        AudioClient audioClient = new AudioClientBuilder()
            .endpoint("<endpoint>")
            .model("whisper-1")
            .credential(new KeyCredential("api-key"))
            .buildClient();

        // transcribe an audio file
        AudioTranscription audioTranscription = audioClient.transcribeAudio(BinaryData.fromFile(new File("audio.wav").toPath()));
        // write the transcribed text to console
        System.out.println(audioTranscription.getText());

        // translate an audio file
        AudioTranslationOptions audioTranslationOptions = new AudioTranslationOptions()
            .setTranslationFormat(AudioTranslationFormat.TEXT);

        Response<AudioTranslation> audioTranslationResponse = audioClient
            .translateAudioWithResponse(BinaryData.fromFile(new File("audio.wav").toPath()),
                audioTranslationOptions, new RequestOptions());

        // write the translated text to console
        System.out.println(audioTranslationResponse.getValue().getText());
        LegacyCompletionClient legacyCompletionClient = new LegacyCompletionClientBuilder()
            .endpoint("<endpoint>")
            .model("gpt-3.5-turbo-instruct")
            .credential(new KeyCredential("api-key"))
            .buildClient();

        Object completionRequestBody = new Object() {
            final String model = "gpt-3.5-turbo-instruct";
            final String prompt = "write a haiku about bananas";
            final int maxTokens = 256;
        };
        Response<BinaryData> binaryDataResponse = legacyCompletionClient.completeTextWithResponse(BinaryData.fromObject(completionRequestBody), new RequestOptions());
        TypeReference<Map<String, Object>> mapTypeReference = new TypeReference<Map<String, Object>>() {
        };
        Map<String, Object> objectMap = binaryDataResponse.getValue().toObject(mapTypeReference);

        System.out.println(objectMap.get("choices"));


        ChatClient chatClient = new ChatClientBuilder()
            .endpoint("<endpoint>")
            .model("gpt-3.5-turbo")
            .credential(new KeyCredential("api-key"))
            .buildClient();

        ChatCompletion chatCompletion = chatClient.completeChat("Why is the sky blue?");
        System.out.println(chatCompletion.getChatRole() + ": " + chatCompletion.getContent());


    }

    public static void simpleChatCompletionSample() {
        ChatClient chatClient = new ChatClientBuilder()
            .endpoint("<endpoint>")
            .model("gpt-3.5-turbo")
            .credential(new KeyCredential("api-key"))
            .buildClient();

        ChatCompletion chatCompletion = chatClient.completeChat("Why is the sky blue?");
        System.out.println(chatCompletion.getChatRole() + ": " + chatCompletion.getContent());
    }

    public static void multipleMessagesWithSingleCompletion() {
        ChatClient chatClient = new ChatClientBuilder()
            .endpoint("<endpoint>")
            .model("gpt-3.5-turbo")
            .credential(new KeyCredential("api-key"))
            .buildClient();

        List<ChatRequestMessage> messages = Arrays.asList(
            new ChatRequestSystemMessage("You are a helpful assistant. You always talk like a pirate"),
            new ChatRequestUserMessage(BinaryData.fromString("Ahoy, assistant! How can I train my parrot"))
            );

        ChatCompletion chatCompletion = chatClient.completeChat(messages, new ChatCompletionOptions().setTemperature(0.7));
        System.out.println(chatCompletion.getChatRole() + ": " + chatCompletion.getContent());
    }

    public static void multipleMessagesWithMultipleChoices() {
        ChatClient chatClient = new ChatClientBuilder()
            .endpoint("<endpoint>")
            .model("gpt-3.5-turbo")
            .credential(new KeyCredential("api-key"))
            .buildClient();

        List<ChatRequestMessage> messages = Arrays.asList(
            new ChatRequestSystemMessage("You are a helpful assistant. You always talk like a pirate"),
            new ChatRequestUserMessage(BinaryData.fromString("Ahoy, assistant! How can I train my parrot"))
            );

        ChatCompletionCollection chatCompletionCollection = chatClient.completeChat(messages, 3, new ChatCompletionOptions().setTemperature(0.7));
        chatCompletionCollection.getChatCompletions()
                .forEach(chatCompletion -> System.out.println(chatCompletion.getChatRole() + ": " + chatCompletion.getContent()));
    }

    public static void streamingChat() {
        ChatClient chatClient = new ChatClientBuilder()
            .endpoint("<endpoint>")
            .model("gpt-3.5-turbo")
            .credential(new KeyCredential("api-key"))
            .buildClient();

        List<ChatRequestMessage> messages = Arrays.asList(
            new ChatRequestSystemMessage("You are a helpful assistant. You always talk like a pirate"),
            new ChatRequestUserMessage(BinaryData.fromString("Ahoy, assistant! How can I train my parrot"))
        );

        IterableStream<ChatUpdate> chatUpdates = chatClient.completeChatStream(messages, new ChatCompletionOptions().setTemperature(0.7));

        chatUpdates.forEach(chatUpdate -> {
            if (chatUpdate.getRole() != null) {
                System.out.print(chatUpdate.getRole() + ": ");
            }
            System.out.println(chatUpdate.getContentUpdate());
        });

    }
}
