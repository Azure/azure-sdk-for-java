/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.recoveryservices.siterecovery.v2018_01_10.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.CloudException;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in MigrationRecoveryPoints.
 */
public class MigrationRecoveryPointsInner {
    /** The Retrofit service to perform REST calls. */
    private MigrationRecoveryPointsService service;
    /** The service client containing this operation class. */
    private SiteRecoveryManagementClientImpl client;

    /**
     * Initializes an instance of MigrationRecoveryPointsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public MigrationRecoveryPointsInner(Retrofit retrofit, SiteRecoveryManagementClientImpl client) {
        this.service = retrofit.create(MigrationRecoveryPointsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for MigrationRecoveryPoints to be
     * used by Retrofit to perform actually REST calls.
     */
    interface MigrationRecoveryPointsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2018_01_10.MigrationRecoveryPoints listByReplicationMigrationItems" })
        @GET("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationMigrationItems/{migrationItemName}/migrationRecoveryPoints")
        Observable<Response<ResponseBody>> listByReplicationMigrationItems(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("fabricName") String fabricName, @Path("protectionContainerName") String protectionContainerName, @Path("migrationItemName") String migrationItemName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2018_01_10.MigrationRecoveryPoints get" })
        @GET("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationMigrationItems/{migrationItemName}/migrationRecoveryPoints/{migrationRecoveryPointName}")
        Observable<Response<ResponseBody>> get(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("fabricName") String fabricName, @Path("protectionContainerName") String protectionContainerName, @Path("migrationItemName") String migrationItemName, @Path("migrationRecoveryPointName") String migrationRecoveryPointName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2018_01_10.MigrationRecoveryPoints listByReplicationMigrationItemsNext" })
        @GET
        Observable<Response<ResponseBody>> listByReplicationMigrationItemsNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Gets the recovery points for a migration item.
     *
     * @param fabricName Fabric unique name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;MigrationRecoveryPointInner&gt; object if successful.
     */
    public PagedList<MigrationRecoveryPointInner> listByReplicationMigrationItems(final String fabricName, final String protectionContainerName, final String migrationItemName) {
        ServiceResponse<Page<MigrationRecoveryPointInner>> response = listByReplicationMigrationItemsSinglePageAsync(fabricName, protectionContainerName, migrationItemName).toBlocking().single();
        return new PagedList<MigrationRecoveryPointInner>(response.body()) {
            @Override
            public Page<MigrationRecoveryPointInner> nextPage(String nextPageLink) {
                return listByReplicationMigrationItemsNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets the recovery points for a migration item.
     *
     * @param fabricName Fabric unique name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<MigrationRecoveryPointInner>> listByReplicationMigrationItemsAsync(final String fabricName, final String protectionContainerName, final String migrationItemName, final ListOperationCallback<MigrationRecoveryPointInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByReplicationMigrationItemsSinglePageAsync(fabricName, protectionContainerName, migrationItemName),
            new Func1<String, Observable<ServiceResponse<Page<MigrationRecoveryPointInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<MigrationRecoveryPointInner>>> call(String nextPageLink) {
                    return listByReplicationMigrationItemsNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets the recovery points for a migration item.
     *
     * @param fabricName Fabric unique name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;MigrationRecoveryPointInner&gt; object
     */
    public Observable<Page<MigrationRecoveryPointInner>> listByReplicationMigrationItemsAsync(final String fabricName, final String protectionContainerName, final String migrationItemName) {
        return listByReplicationMigrationItemsWithServiceResponseAsync(fabricName, protectionContainerName, migrationItemName)
            .map(new Func1<ServiceResponse<Page<MigrationRecoveryPointInner>>, Page<MigrationRecoveryPointInner>>() {
                @Override
                public Page<MigrationRecoveryPointInner> call(ServiceResponse<Page<MigrationRecoveryPointInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets the recovery points for a migration item.
     *
     * @param fabricName Fabric unique name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;MigrationRecoveryPointInner&gt; object
     */
    public Observable<ServiceResponse<Page<MigrationRecoveryPointInner>>> listByReplicationMigrationItemsWithServiceResponseAsync(final String fabricName, final String protectionContainerName, final String migrationItemName) {
        return listByReplicationMigrationItemsSinglePageAsync(fabricName, protectionContainerName, migrationItemName)
            .concatMap(new Func1<ServiceResponse<Page<MigrationRecoveryPointInner>>, Observable<ServiceResponse<Page<MigrationRecoveryPointInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<MigrationRecoveryPointInner>>> call(ServiceResponse<Page<MigrationRecoveryPointInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByReplicationMigrationItemsNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets the recovery points for a migration item.
     *
    ServiceResponse<PageImpl<MigrationRecoveryPointInner>> * @param fabricName Fabric unique name.
    ServiceResponse<PageImpl<MigrationRecoveryPointInner>> * @param protectionContainerName Protection container name.
    ServiceResponse<PageImpl<MigrationRecoveryPointInner>> * @param migrationItemName Migration item name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;MigrationRecoveryPointInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<MigrationRecoveryPointInner>>> listByReplicationMigrationItemsSinglePageAsync(final String fabricName, final String protectionContainerName, final String migrationItemName) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (protectionContainerName == null) {
            throw new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null.");
        }
        if (migrationItemName == null) {
            throw new IllegalArgumentException("Parameter migrationItemName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByReplicationMigrationItems(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, protectionContainerName, migrationItemName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<MigrationRecoveryPointInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<MigrationRecoveryPointInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<MigrationRecoveryPointInner>> result = listByReplicationMigrationItemsDelegate(response);
                        return Observable.just(new ServiceResponse<Page<MigrationRecoveryPointInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<MigrationRecoveryPointInner>> listByReplicationMigrationItemsDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<MigrationRecoveryPointInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<MigrationRecoveryPointInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets a recovery point for a migration item.
     *
     * @param fabricName Fabric unique name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param migrationRecoveryPointName The migration recovery point name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the MigrationRecoveryPointInner object if successful.
     */
    public MigrationRecoveryPointInner get(String fabricName, String protectionContainerName, String migrationItemName, String migrationRecoveryPointName) {
        return getWithServiceResponseAsync(fabricName, protectionContainerName, migrationItemName, migrationRecoveryPointName).toBlocking().single().body();
    }

    /**
     * Gets a recovery point for a migration item.
     *
     * @param fabricName Fabric unique name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param migrationRecoveryPointName The migration recovery point name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<MigrationRecoveryPointInner> getAsync(String fabricName, String protectionContainerName, String migrationItemName, String migrationRecoveryPointName, final ServiceCallback<MigrationRecoveryPointInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(fabricName, protectionContainerName, migrationItemName, migrationRecoveryPointName), serviceCallback);
    }

    /**
     * Gets a recovery point for a migration item.
     *
     * @param fabricName Fabric unique name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param migrationRecoveryPointName The migration recovery point name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the MigrationRecoveryPointInner object
     */
    public Observable<MigrationRecoveryPointInner> getAsync(String fabricName, String protectionContainerName, String migrationItemName, String migrationRecoveryPointName) {
        return getWithServiceResponseAsync(fabricName, protectionContainerName, migrationItemName, migrationRecoveryPointName).map(new Func1<ServiceResponse<MigrationRecoveryPointInner>, MigrationRecoveryPointInner>() {
            @Override
            public MigrationRecoveryPointInner call(ServiceResponse<MigrationRecoveryPointInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets a recovery point for a migration item.
     *
     * @param fabricName Fabric unique name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param migrationRecoveryPointName The migration recovery point name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the MigrationRecoveryPointInner object
     */
    public Observable<ServiceResponse<MigrationRecoveryPointInner>> getWithServiceResponseAsync(String fabricName, String protectionContainerName, String migrationItemName, String migrationRecoveryPointName) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (protectionContainerName == null) {
            throw new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null.");
        }
        if (migrationItemName == null) {
            throw new IllegalArgumentException("Parameter migrationItemName is required and cannot be null.");
        }
        if (migrationRecoveryPointName == null) {
            throw new IllegalArgumentException("Parameter migrationRecoveryPointName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.get(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, protectionContainerName, migrationItemName, migrationRecoveryPointName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<MigrationRecoveryPointInner>>>() {
                @Override
                public Observable<ServiceResponse<MigrationRecoveryPointInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<MigrationRecoveryPointInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<MigrationRecoveryPointInner> getDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<MigrationRecoveryPointInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<MigrationRecoveryPointInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets the recovery points for a migration item.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;MigrationRecoveryPointInner&gt; object if successful.
     */
    public PagedList<MigrationRecoveryPointInner> listByReplicationMigrationItemsNext(final String nextPageLink) {
        ServiceResponse<Page<MigrationRecoveryPointInner>> response = listByReplicationMigrationItemsNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<MigrationRecoveryPointInner>(response.body()) {
            @Override
            public Page<MigrationRecoveryPointInner> nextPage(String nextPageLink) {
                return listByReplicationMigrationItemsNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets the recovery points for a migration item.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<MigrationRecoveryPointInner>> listByReplicationMigrationItemsNextAsync(final String nextPageLink, final ServiceFuture<List<MigrationRecoveryPointInner>> serviceFuture, final ListOperationCallback<MigrationRecoveryPointInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByReplicationMigrationItemsNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<MigrationRecoveryPointInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<MigrationRecoveryPointInner>>> call(String nextPageLink) {
                    return listByReplicationMigrationItemsNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets the recovery points for a migration item.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;MigrationRecoveryPointInner&gt; object
     */
    public Observable<Page<MigrationRecoveryPointInner>> listByReplicationMigrationItemsNextAsync(final String nextPageLink) {
        return listByReplicationMigrationItemsNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<MigrationRecoveryPointInner>>, Page<MigrationRecoveryPointInner>>() {
                @Override
                public Page<MigrationRecoveryPointInner> call(ServiceResponse<Page<MigrationRecoveryPointInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets the recovery points for a migration item.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;MigrationRecoveryPointInner&gt; object
     */
    public Observable<ServiceResponse<Page<MigrationRecoveryPointInner>>> listByReplicationMigrationItemsNextWithServiceResponseAsync(final String nextPageLink) {
        return listByReplicationMigrationItemsNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<MigrationRecoveryPointInner>>, Observable<ServiceResponse<Page<MigrationRecoveryPointInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<MigrationRecoveryPointInner>>> call(ServiceResponse<Page<MigrationRecoveryPointInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByReplicationMigrationItemsNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets the recovery points for a migration item.
     *
    ServiceResponse<PageImpl<MigrationRecoveryPointInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;MigrationRecoveryPointInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<MigrationRecoveryPointInner>>> listByReplicationMigrationItemsNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByReplicationMigrationItemsNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<MigrationRecoveryPointInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<MigrationRecoveryPointInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<MigrationRecoveryPointInner>> result = listByReplicationMigrationItemsNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<MigrationRecoveryPointInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<MigrationRecoveryPointInner>> listByReplicationMigrationItemsNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<MigrationRecoveryPointInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<MigrationRecoveryPointInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
