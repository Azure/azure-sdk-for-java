/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.recoveryservices.siterecovery.v2018_01_10.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.recoveryservices.siterecovery.v2018_01_10.ReplicationProtectedItems;
import rx.Completable;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.recoveryservices.siterecovery.v2018_01_10.ReplicationProtectedItem;
import com.microsoft.azure.management.recoveryservices.siterecovery.v2018_01_10.TestFailoverCleanupInputProperties;

class ReplicationProtectedItemsImpl extends WrapperImpl<ReplicationProtectedItemsInner> implements ReplicationProtectedItems {
    private final RecoveryServicesManager manager;

    ReplicationProtectedItemsImpl(RecoveryServicesManager manager) {
        super(manager.inner().replicationProtectedItems());
        this.manager = manager;
    }

    public RecoveryServicesManager manager() {
        return this.manager;
    }

    @Override
    public ReplicationProtectedItemImpl define(String name) {
        return wrapModel(name);
    }

    private ReplicationProtectedItemImpl wrapModel(ReplicationProtectedItemInner inner) {
        return  new ReplicationProtectedItemImpl(inner, manager());
    }

    private ReplicationProtectedItemImpl wrapModel(String name) {
        return new ReplicationProtectedItemImpl(name, this.manager());
    }

    @Override
    public Observable<ReplicationProtectedItem> applyRecoveryPointAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName) {
        ReplicationProtectedItemsInner client = this.inner();
        return client.applyRecoveryPointAsync(fabricName, protectionContainerName, replicatedProtectedItemName)
        .map(new Func1<ReplicationProtectedItemInner, ReplicationProtectedItem>() {
            @Override
            public ReplicationProtectedItem call(ReplicationProtectedItemInner inner) {
                return new ReplicationProtectedItemImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<ReplicationProtectedItem> failoverCommitAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName) {
        ReplicationProtectedItemsInner client = this.inner();
        return client.failoverCommitAsync(fabricName, protectionContainerName, replicatedProtectedItemName)
        .map(new Func1<ReplicationProtectedItemInner, ReplicationProtectedItem>() {
            @Override
            public ReplicationProtectedItem call(ReplicationProtectedItemInner inner) {
                return new ReplicationProtectedItemImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<ReplicationProtectedItem> plannedFailoverAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName) {
        ReplicationProtectedItemsInner client = this.inner();
        return client.plannedFailoverAsync(fabricName, protectionContainerName, replicatedProtectedItemName)
        .map(new Func1<ReplicationProtectedItemInner, ReplicationProtectedItem>() {
            @Override
            public ReplicationProtectedItem call(ReplicationProtectedItemInner inner) {
                return new ReplicationProtectedItemImpl(inner, manager());
            }
        });
    }

    @Override
    public Completable deleteAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName) {
        ReplicationProtectedItemsInner client = this.inner();
        return client.deleteAsync(fabricName, protectionContainerName, replicatedProtectedItemName).toCompletable();
    }

    @Override
    public Observable<ReplicationProtectedItem> repairReplicationAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName) {
        ReplicationProtectedItemsInner client = this.inner();
        return client.repairReplicationAsync(fabricName, protectionContainerName, replicatedProtectedItemName)
        .map(new Func1<ReplicationProtectedItemInner, ReplicationProtectedItem>() {
            @Override
            public ReplicationProtectedItem call(ReplicationProtectedItemInner inner) {
                return new ReplicationProtectedItemImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<ReplicationProtectedItem> reprotectAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName) {
        ReplicationProtectedItemsInner client = this.inner();
        return client.reprotectAsync(fabricName, protectionContainerName, replicatedProtectedItemName)
        .map(new Func1<ReplicationProtectedItemInner, ReplicationProtectedItem>() {
            @Override
            public ReplicationProtectedItem call(ReplicationProtectedItemInner inner) {
                return new ReplicationProtectedItemImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<ReplicationProtectedItem> testFailoverAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName) {
        ReplicationProtectedItemsInner client = this.inner();
        return client.testFailoverAsync(fabricName, protectionContainerName, replicatedProtectedItemName)
        .map(new Func1<ReplicationProtectedItemInner, ReplicationProtectedItem>() {
            @Override
            public ReplicationProtectedItem call(ReplicationProtectedItemInner inner) {
                return new ReplicationProtectedItemImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<ReplicationProtectedItem> testFailoverCleanupAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName, TestFailoverCleanupInputProperties properties) {
        ReplicationProtectedItemsInner client = this.inner();
        return client.testFailoverCleanupAsync(fabricName, protectionContainerName, replicatedProtectedItemName, properties)
        .map(new Func1<ReplicationProtectedItemInner, ReplicationProtectedItem>() {
            @Override
            public ReplicationProtectedItem call(ReplicationProtectedItemInner inner) {
                return new ReplicationProtectedItemImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<ReplicationProtectedItem> unplannedFailoverAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName) {
        ReplicationProtectedItemsInner client = this.inner();
        return client.unplannedFailoverAsync(fabricName, protectionContainerName, replicatedProtectedItemName)
        .map(new Func1<ReplicationProtectedItemInner, ReplicationProtectedItem>() {
            @Override
            public ReplicationProtectedItem call(ReplicationProtectedItemInner inner) {
                return new ReplicationProtectedItemImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<ReplicationProtectedItem> updateMobilityServiceAsync(String fabricName, String protectionContainerName, String replicationProtectedItemName) {
        ReplicationProtectedItemsInner client = this.inner();
        return client.updateMobilityServiceAsync(fabricName, protectionContainerName, replicationProtectedItemName)
        .map(new Func1<ReplicationProtectedItemInner, ReplicationProtectedItem>() {
            @Override
            public ReplicationProtectedItem call(ReplicationProtectedItemInner inner) {
                return new ReplicationProtectedItemImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<ReplicationProtectedItem> listAsync() {
        ReplicationProtectedItemsInner client = this.inner();
        return client.listAsync()
        .flatMapIterable(new Func1<Page<ReplicationProtectedItemInner>, Iterable<ReplicationProtectedItemInner>>() {
            @Override
            public Iterable<ReplicationProtectedItemInner> call(Page<ReplicationProtectedItemInner> page) {
                return page.items();
            }
        })
        .map(new Func1<ReplicationProtectedItemInner, ReplicationProtectedItem>() {
            @Override
            public ReplicationProtectedItem call(ReplicationProtectedItemInner inner) {
                return new ReplicationProtectedItemImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<ReplicationProtectedItem> listByReplicationProtectionContainersAsync(final String fabricName, final String protectionContainerName) {
        ReplicationProtectedItemsInner client = this.inner();
        return client.listByReplicationProtectionContainersAsync(fabricName, protectionContainerName)
        .flatMapIterable(new Func1<Page<ReplicationProtectedItemInner>, Iterable<ReplicationProtectedItemInner>>() {
            @Override
            public Iterable<ReplicationProtectedItemInner> call(Page<ReplicationProtectedItemInner> page) {
                return page.items();
            }
        })
        .map(new Func1<ReplicationProtectedItemInner, ReplicationProtectedItem>() {
            @Override
            public ReplicationProtectedItem call(ReplicationProtectedItemInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public Observable<ReplicationProtectedItem> getAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName) {
        ReplicationProtectedItemsInner client = this.inner();
        return client.getAsync(fabricName, protectionContainerName, replicatedProtectedItemName)
        .flatMap(new Func1<ReplicationProtectedItemInner, Observable<ReplicationProtectedItem>>() {
            @Override
            public Observable<ReplicationProtectedItem> call(ReplicationProtectedItemInner inner) {
                if (inner == null) {
                    return Observable.empty();
                } else {
                    return Observable.just((ReplicationProtectedItem)wrapModel(inner));
                }
            }
       });
    }

    @Override
    public Completable purgeAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName) {
        ReplicationProtectedItemsInner client = this.inner();
        return client.purgeAsync(fabricName, protectionContainerName, replicatedProtectedItemName).toCompletable();
    }

}
