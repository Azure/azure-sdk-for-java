/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.recoveryservices.siterecovery.v2018_01_10.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.recoveryservices.siterecovery.v2018_01_10.ReplicationvCenters;
import rx.Completable;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.recoveryservices.siterecovery.v2018_01_10.VCenter;

class ReplicationvCentersImpl extends WrapperImpl<ReplicationvCentersInner> implements ReplicationvCenters {
    private final RecoveryServicesManager manager;

    ReplicationvCentersImpl(RecoveryServicesManager manager) {
        super(manager.inner().replicationvCenters());
        this.manager = manager;
    }

    public RecoveryServicesManager manager() {
        return this.manager;
    }

    @Override
    public VCenterImpl define(String name) {
        return wrapModel(name);
    }

    private VCenterImpl wrapModel(VCenterInner inner) {
        return  new VCenterImpl(inner, manager());
    }

    private VCenterImpl wrapModel(String name) {
        return new VCenterImpl(name, this.manager());
    }

    @Override
    public Observable<VCenter> listAsync() {
        ReplicationvCentersInner client = this.inner();
        return client.listAsync()
        .flatMapIterable(new Func1<Page<VCenterInner>, Iterable<VCenterInner>>() {
            @Override
            public Iterable<VCenterInner> call(Page<VCenterInner> page) {
                return page.items();
            }
        })
        .map(new Func1<VCenterInner, VCenter>() {
            @Override
            public VCenter call(VCenterInner inner) {
                return new VCenterImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<VCenter> listByReplicationFabricsAsync(final String fabricName) {
        ReplicationvCentersInner client = this.inner();
        return client.listByReplicationFabricsAsync(fabricName)
        .flatMapIterable(new Func1<Page<VCenterInner>, Iterable<VCenterInner>>() {
            @Override
            public Iterable<VCenterInner> call(Page<VCenterInner> page) {
                return page.items();
            }
        })
        .map(new Func1<VCenterInner, VCenter>() {
            @Override
            public VCenter call(VCenterInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public Observable<VCenter> getAsync(String fabricName, String vCenterName) {
        ReplicationvCentersInner client = this.inner();
        return client.getAsync(fabricName, vCenterName)
        .flatMap(new Func1<VCenterInner, Observable<VCenter>>() {
            @Override
            public Observable<VCenter> call(VCenterInner inner) {
                if (inner == null) {
                    return Observable.empty();
                } else {
                    return Observable.just((VCenter)wrapModel(inner));
                }
            }
       });
    }

    @Override
    public Completable deleteAsync(String fabricName, String vCenterName) {
        ReplicationvCentersInner client = this.inner();
        return client.deleteAsync(fabricName, vCenterName).toCompletable();
    }

}
