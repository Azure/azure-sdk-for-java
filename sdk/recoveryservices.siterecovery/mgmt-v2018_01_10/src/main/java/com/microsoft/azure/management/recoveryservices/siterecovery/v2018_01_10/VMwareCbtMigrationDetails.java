/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.recoveryservices.siterecovery.v2018_01_10;

import java.util.List;
import org.joda.time.DateTime;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * VMwareCbt provider specific settings.
 */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "instanceType", defaultImpl = VMwareCbtMigrationDetails.class)
@JsonTypeName("VMwareCbt")
public class VMwareCbtMigrationDetails extends MigrationProviderSpecificSettings {
    /**
     * The ARM Id of the VM discovered in VMware.
     */
    @JsonProperty(value = "vmwareMachineId", access = JsonProperty.Access.WRITE_ONLY)
    private String vmwareMachineId;

    /**
     * The type of the OS on the VM.
     */
    @JsonProperty(value = "osType", access = JsonProperty.Access.WRITE_ONLY)
    private String osType;

    /**
     * The firmware type.
     */
    @JsonProperty(value = "firmwareType", access = JsonProperty.Access.WRITE_ONLY)
    private String firmwareType;

    /**
     * The target generation.
     */
    @JsonProperty(value = "targetGeneration", access = JsonProperty.Access.WRITE_ONLY)
    private String targetGeneration;

    /**
     * License Type of the VM to be used.
     */
    @JsonProperty(value = "licenseType")
    private String licenseType;

    /**
     * The data mover RunAs account Id.
     */
    @JsonProperty(value = "dataMoverRunAsAccountId", access = JsonProperty.Access.WRITE_ONLY)
    private String dataMoverRunAsAccountId;

    /**
     * The snapshot RunAs account Id.
     */
    @JsonProperty(value = "snapshotRunAsAccountId", access = JsonProperty.Access.WRITE_ONLY)
    private String snapshotRunAsAccountId;

    /**
     * Target VM name.
     */
    @JsonProperty(value = "targetVmName")
    private String targetVmName;

    /**
     * The target VM size.
     */
    @JsonProperty(value = "targetVmSize")
    private String targetVmSize;

    /**
     * The target location.
     */
    @JsonProperty(value = "targetLocation", access = JsonProperty.Access.WRITE_ONLY)
    private String targetLocation;

    /**
     * The target resource group Id.
     */
    @JsonProperty(value = "targetResourceGroupId")
    private String targetResourceGroupId;

    /**
     * The target availability set Id.
     */
    @JsonProperty(value = "targetAvailabilitySetId")
    private String targetAvailabilitySetId;

    /**
     * The target availability zone.
     */
    @JsonProperty(value = "targetAvailabilityZone")
    private String targetAvailabilityZone;

    /**
     * The target boot diagnostics storage account ARM Id.
     */
    @JsonProperty(value = "targetBootDiagnosticsStorageAccountId")
    private String targetBootDiagnosticsStorageAccountId;

    /**
     * The list of protected disks.
     */
    @JsonProperty(value = "protectedDisks")
    private List<VMwareCbtProtectedDiskDetails> protectedDisks;

    /**
     * The target network Id.
     */
    @JsonProperty(value = "targetNetworkId")
    private String targetNetworkId;

    /**
     * The network details.
     */
    @JsonProperty(value = "vmNics")
    private List<VMwareCbtNicDetails> vmNics;

    /**
     * The recovery point Id to which the VM was migrated.
     */
    @JsonProperty(value = "migrationRecoveryPointId", access = JsonProperty.Access.WRITE_ONLY)
    private String migrationRecoveryPointId;

    /**
     * The last recovery point received time.
     */
    @JsonProperty(value = "lastRecoveryPointReceived", access = JsonProperty.Access.WRITE_ONLY)
    private DateTime lastRecoveryPointReceived;

    /**
     * The last recovery point Id.
     */
    @JsonProperty(value = "lastRecoveryPointId", access = JsonProperty.Access.WRITE_ONLY)
    private String lastRecoveryPointId;

    /**
     * The initial seeding progress percentage.
     */
    @JsonProperty(value = "initialSeedingProgressPercentage", access = JsonProperty.Access.WRITE_ONLY)
    private Integer initialSeedingProgressPercentage;

    /**
     * The migration progress percentage.
     */
    @JsonProperty(value = "migrationProgressPercentage", access = JsonProperty.Access.WRITE_ONLY)
    private Integer migrationProgressPercentage;

    /**
     * The resync progress percentage.
     */
    @JsonProperty(value = "resyncProgressPercentage", access = JsonProperty.Access.WRITE_ONLY)
    private Integer resyncProgressPercentage;

    /**
     * A value indicating whether resync is required.
     */
    @JsonProperty(value = "resyncRequired", access = JsonProperty.Access.WRITE_ONLY)
    private String resyncRequired;

    /**
     * The resync state. Possible values include: 'None',
     * 'PreparedForResynchronization', 'StartedResynchronization'.
     */
    @JsonProperty(value = "resyncState", access = JsonProperty.Access.WRITE_ONLY)
    private ResyncState resyncState;

    /**
     * A value indicating whether auto resync is to be done.
     */
    @JsonProperty(value = "performAutoResync")
    private String performAutoResync;

    /**
     * Get the ARM Id of the VM discovered in VMware.
     *
     * @return the vmwareMachineId value
     */
    public String vmwareMachineId() {
        return this.vmwareMachineId;
    }

    /**
     * Get the type of the OS on the VM.
     *
     * @return the osType value
     */
    public String osType() {
        return this.osType;
    }

    /**
     * Get the firmware type.
     *
     * @return the firmwareType value
     */
    public String firmwareType() {
        return this.firmwareType;
    }

    /**
     * Get the target generation.
     *
     * @return the targetGeneration value
     */
    public String targetGeneration() {
        return this.targetGeneration;
    }

    /**
     * Get license Type of the VM to be used.
     *
     * @return the licenseType value
     */
    public String licenseType() {
        return this.licenseType;
    }

    /**
     * Set license Type of the VM to be used.
     *
     * @param licenseType the licenseType value to set
     * @return the VMwareCbtMigrationDetails object itself.
     */
    public VMwareCbtMigrationDetails withLicenseType(String licenseType) {
        this.licenseType = licenseType;
        return this;
    }

    /**
     * Get the data mover RunAs account Id.
     *
     * @return the dataMoverRunAsAccountId value
     */
    public String dataMoverRunAsAccountId() {
        return this.dataMoverRunAsAccountId;
    }

    /**
     * Get the snapshot RunAs account Id.
     *
     * @return the snapshotRunAsAccountId value
     */
    public String snapshotRunAsAccountId() {
        return this.snapshotRunAsAccountId;
    }

    /**
     * Get target VM name.
     *
     * @return the targetVmName value
     */
    public String targetVmName() {
        return this.targetVmName;
    }

    /**
     * Set target VM name.
     *
     * @param targetVmName the targetVmName value to set
     * @return the VMwareCbtMigrationDetails object itself.
     */
    public VMwareCbtMigrationDetails withTargetVmName(String targetVmName) {
        this.targetVmName = targetVmName;
        return this;
    }

    /**
     * Get the target VM size.
     *
     * @return the targetVmSize value
     */
    public String targetVmSize() {
        return this.targetVmSize;
    }

    /**
     * Set the target VM size.
     *
     * @param targetVmSize the targetVmSize value to set
     * @return the VMwareCbtMigrationDetails object itself.
     */
    public VMwareCbtMigrationDetails withTargetVmSize(String targetVmSize) {
        this.targetVmSize = targetVmSize;
        return this;
    }

    /**
     * Get the target location.
     *
     * @return the targetLocation value
     */
    public String targetLocation() {
        return this.targetLocation;
    }

    /**
     * Get the target resource group Id.
     *
     * @return the targetResourceGroupId value
     */
    public String targetResourceGroupId() {
        return this.targetResourceGroupId;
    }

    /**
     * Set the target resource group Id.
     *
     * @param targetResourceGroupId the targetResourceGroupId value to set
     * @return the VMwareCbtMigrationDetails object itself.
     */
    public VMwareCbtMigrationDetails withTargetResourceGroupId(String targetResourceGroupId) {
        this.targetResourceGroupId = targetResourceGroupId;
        return this;
    }

    /**
     * Get the target availability set Id.
     *
     * @return the targetAvailabilitySetId value
     */
    public String targetAvailabilitySetId() {
        return this.targetAvailabilitySetId;
    }

    /**
     * Set the target availability set Id.
     *
     * @param targetAvailabilitySetId the targetAvailabilitySetId value to set
     * @return the VMwareCbtMigrationDetails object itself.
     */
    public VMwareCbtMigrationDetails withTargetAvailabilitySetId(String targetAvailabilitySetId) {
        this.targetAvailabilitySetId = targetAvailabilitySetId;
        return this;
    }

    /**
     * Get the target availability zone.
     *
     * @return the targetAvailabilityZone value
     */
    public String targetAvailabilityZone() {
        return this.targetAvailabilityZone;
    }

    /**
     * Set the target availability zone.
     *
     * @param targetAvailabilityZone the targetAvailabilityZone value to set
     * @return the VMwareCbtMigrationDetails object itself.
     */
    public VMwareCbtMigrationDetails withTargetAvailabilityZone(String targetAvailabilityZone) {
        this.targetAvailabilityZone = targetAvailabilityZone;
        return this;
    }

    /**
     * Get the target boot diagnostics storage account ARM Id.
     *
     * @return the targetBootDiagnosticsStorageAccountId value
     */
    public String targetBootDiagnosticsStorageAccountId() {
        return this.targetBootDiagnosticsStorageAccountId;
    }

    /**
     * Set the target boot diagnostics storage account ARM Id.
     *
     * @param targetBootDiagnosticsStorageAccountId the targetBootDiagnosticsStorageAccountId value to set
     * @return the VMwareCbtMigrationDetails object itself.
     */
    public VMwareCbtMigrationDetails withTargetBootDiagnosticsStorageAccountId(String targetBootDiagnosticsStorageAccountId) {
        this.targetBootDiagnosticsStorageAccountId = targetBootDiagnosticsStorageAccountId;
        return this;
    }

    /**
     * Get the list of protected disks.
     *
     * @return the protectedDisks value
     */
    public List<VMwareCbtProtectedDiskDetails> protectedDisks() {
        return this.protectedDisks;
    }

    /**
     * Set the list of protected disks.
     *
     * @param protectedDisks the protectedDisks value to set
     * @return the VMwareCbtMigrationDetails object itself.
     */
    public VMwareCbtMigrationDetails withProtectedDisks(List<VMwareCbtProtectedDiskDetails> protectedDisks) {
        this.protectedDisks = protectedDisks;
        return this;
    }

    /**
     * Get the target network Id.
     *
     * @return the targetNetworkId value
     */
    public String targetNetworkId() {
        return this.targetNetworkId;
    }

    /**
     * Set the target network Id.
     *
     * @param targetNetworkId the targetNetworkId value to set
     * @return the VMwareCbtMigrationDetails object itself.
     */
    public VMwareCbtMigrationDetails withTargetNetworkId(String targetNetworkId) {
        this.targetNetworkId = targetNetworkId;
        return this;
    }

    /**
     * Get the network details.
     *
     * @return the vmNics value
     */
    public List<VMwareCbtNicDetails> vmNics() {
        return this.vmNics;
    }

    /**
     * Set the network details.
     *
     * @param vmNics the vmNics value to set
     * @return the VMwareCbtMigrationDetails object itself.
     */
    public VMwareCbtMigrationDetails withVmNics(List<VMwareCbtNicDetails> vmNics) {
        this.vmNics = vmNics;
        return this;
    }

    /**
     * Get the recovery point Id to which the VM was migrated.
     *
     * @return the migrationRecoveryPointId value
     */
    public String migrationRecoveryPointId() {
        return this.migrationRecoveryPointId;
    }

    /**
     * Get the last recovery point received time.
     *
     * @return the lastRecoveryPointReceived value
     */
    public DateTime lastRecoveryPointReceived() {
        return this.lastRecoveryPointReceived;
    }

    /**
     * Get the last recovery point Id.
     *
     * @return the lastRecoveryPointId value
     */
    public String lastRecoveryPointId() {
        return this.lastRecoveryPointId;
    }

    /**
     * Get the initial seeding progress percentage.
     *
     * @return the initialSeedingProgressPercentage value
     */
    public Integer initialSeedingProgressPercentage() {
        return this.initialSeedingProgressPercentage;
    }

    /**
     * Get the migration progress percentage.
     *
     * @return the migrationProgressPercentage value
     */
    public Integer migrationProgressPercentage() {
        return this.migrationProgressPercentage;
    }

    /**
     * Get the resync progress percentage.
     *
     * @return the resyncProgressPercentage value
     */
    public Integer resyncProgressPercentage() {
        return this.resyncProgressPercentage;
    }

    /**
     * Get a value indicating whether resync is required.
     *
     * @return the resyncRequired value
     */
    public String resyncRequired() {
        return this.resyncRequired;
    }

    /**
     * Get the resync state. Possible values include: 'None', 'PreparedForResynchronization', 'StartedResynchronization'.
     *
     * @return the resyncState value
     */
    public ResyncState resyncState() {
        return this.resyncState;
    }

    /**
     * Get a value indicating whether auto resync is to be done.
     *
     * @return the performAutoResync value
     */
    public String performAutoResync() {
        return this.performAutoResync;
    }

    /**
     * Set a value indicating whether auto resync is to be done.
     *
     * @param performAutoResync the performAutoResync value to set
     * @return the VMwareCbtMigrationDetails object itself.
     */
    public VMwareCbtMigrationDetails withPerformAutoResync(String performAutoResync) {
        this.performAutoResync = performAutoResync;
        return this;
    }

}
