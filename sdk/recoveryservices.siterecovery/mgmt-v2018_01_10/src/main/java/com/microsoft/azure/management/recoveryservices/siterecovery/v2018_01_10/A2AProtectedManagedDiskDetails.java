/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.recoveryservices.siterecovery.v2018_01_10;

import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * A2A protected managed disk details.
 */
public class A2AProtectedManagedDiskDetails {
    /**
     * The managed disk Arm id.
     */
    @JsonProperty(value = "diskId")
    private String diskId;

    /**
     * The recovery disk resource group Arm Id.
     */
    @JsonProperty(value = "recoveryResourceGroupId")
    private String recoveryResourceGroupId;

    /**
     * Recovery target disk Arm Id.
     */
    @JsonProperty(value = "recoveryTargetDiskId")
    private String recoveryTargetDiskId;

    /**
     * Recovery replica disk Arm Id.
     */
    @JsonProperty(value = "recoveryReplicaDiskId")
    private String recoveryReplicaDiskId;

    /**
     * The replica disk type. Its an optional value and will be same as source
     * disk type if not user provided.
     */
    @JsonProperty(value = "recoveryReplicaDiskAccountType")
    private String recoveryReplicaDiskAccountType;

    /**
     * The target disk type after failover. Its an optional value and will be
     * same as source disk type if not user provided.
     */
    @JsonProperty(value = "recoveryTargetDiskAccountType")
    private String recoveryTargetDiskAccountType;

    /**
     * The disk name.
     */
    @JsonProperty(value = "diskName")
    private String diskName;

    /**
     * The disk capacity in bytes.
     */
    @JsonProperty(value = "diskCapacityInBytes")
    private Long diskCapacityInBytes;

    /**
     * The primary staging storage account.
     */
    @JsonProperty(value = "primaryStagingAzureStorageAccountId")
    private String primaryStagingAzureStorageAccountId;

    /**
     * The type of disk.
     */
    @JsonProperty(value = "diskType")
    private String diskType;

    /**
     * A value indicating whether resync is required for this disk.
     */
    @JsonProperty(value = "resyncRequired")
    private Boolean resyncRequired;

    /**
     * The percentage of the monitoring job. The type of the monitoring job is
     * defined by MonitoringJobType property.
     */
    @JsonProperty(value = "monitoringPercentageCompletion")
    private Integer monitoringPercentageCompletion;

    /**
     * The type of the monitoring job. The progress is contained in
     * MonitoringPercentageCompletion property.
     */
    @JsonProperty(value = "monitoringJobType")
    private String monitoringJobType;

    /**
     * The data pending for replication in MB at staging account.
     */
    @JsonProperty(value = "dataPendingInStagingStorageAccountInMB")
    private Double dataPendingInStagingStorageAccountInMB;

    /**
     * The data pending at source virtual machine in MB.
     */
    @JsonProperty(value = "dataPendingAtSourceAgentInMB")
    private Double dataPendingAtSourceAgentInMB;

    /**
     * A value indicating whether vm has encrypted os disk or not.
     */
    @JsonProperty(value = "isDiskEncrypted")
    private Boolean isDiskEncrypted;

    /**
     * The secret URL / identifier (BEK).
     */
    @JsonProperty(value = "secretIdentifier")
    private String secretIdentifier;

    /**
     * The KeyVault resource id for secret (BEK).
     */
    @JsonProperty(value = "dekKeyVaultArmId")
    private String dekKeyVaultArmId;

    /**
     * A value indicating whether disk key got encrypted or not.
     */
    @JsonProperty(value = "isDiskKeyEncrypted")
    private Boolean isDiskKeyEncrypted;

    /**
     * The key URL / identifier (KEK).
     */
    @JsonProperty(value = "keyIdentifier")
    private String keyIdentifier;

    /**
     * The KeyVault resource id for key (KEK).
     */
    @JsonProperty(value = "kekKeyVaultArmId")
    private String kekKeyVaultArmId;

    /**
     * Get the managed disk Arm id.
     *
     * @return the diskId value
     */
    public String diskId() {
        return this.diskId;
    }

    /**
     * Set the managed disk Arm id.
     *
     * @param diskId the diskId value to set
     * @return the A2AProtectedManagedDiskDetails object itself.
     */
    public A2AProtectedManagedDiskDetails withDiskId(String diskId) {
        this.diskId = diskId;
        return this;
    }

    /**
     * Get the recovery disk resource group Arm Id.
     *
     * @return the recoveryResourceGroupId value
     */
    public String recoveryResourceGroupId() {
        return this.recoveryResourceGroupId;
    }

    /**
     * Set the recovery disk resource group Arm Id.
     *
     * @param recoveryResourceGroupId the recoveryResourceGroupId value to set
     * @return the A2AProtectedManagedDiskDetails object itself.
     */
    public A2AProtectedManagedDiskDetails withRecoveryResourceGroupId(String recoveryResourceGroupId) {
        this.recoveryResourceGroupId = recoveryResourceGroupId;
        return this;
    }

    /**
     * Get recovery target disk Arm Id.
     *
     * @return the recoveryTargetDiskId value
     */
    public String recoveryTargetDiskId() {
        return this.recoveryTargetDiskId;
    }

    /**
     * Set recovery target disk Arm Id.
     *
     * @param recoveryTargetDiskId the recoveryTargetDiskId value to set
     * @return the A2AProtectedManagedDiskDetails object itself.
     */
    public A2AProtectedManagedDiskDetails withRecoveryTargetDiskId(String recoveryTargetDiskId) {
        this.recoveryTargetDiskId = recoveryTargetDiskId;
        return this;
    }

    /**
     * Get recovery replica disk Arm Id.
     *
     * @return the recoveryReplicaDiskId value
     */
    public String recoveryReplicaDiskId() {
        return this.recoveryReplicaDiskId;
    }

    /**
     * Set recovery replica disk Arm Id.
     *
     * @param recoveryReplicaDiskId the recoveryReplicaDiskId value to set
     * @return the A2AProtectedManagedDiskDetails object itself.
     */
    public A2AProtectedManagedDiskDetails withRecoveryReplicaDiskId(String recoveryReplicaDiskId) {
        this.recoveryReplicaDiskId = recoveryReplicaDiskId;
        return this;
    }

    /**
     * Get the replica disk type. Its an optional value and will be same as source disk type if not user provided.
     *
     * @return the recoveryReplicaDiskAccountType value
     */
    public String recoveryReplicaDiskAccountType() {
        return this.recoveryReplicaDiskAccountType;
    }

    /**
     * Set the replica disk type. Its an optional value and will be same as source disk type if not user provided.
     *
     * @param recoveryReplicaDiskAccountType the recoveryReplicaDiskAccountType value to set
     * @return the A2AProtectedManagedDiskDetails object itself.
     */
    public A2AProtectedManagedDiskDetails withRecoveryReplicaDiskAccountType(String recoveryReplicaDiskAccountType) {
        this.recoveryReplicaDiskAccountType = recoveryReplicaDiskAccountType;
        return this;
    }

    /**
     * Get the target disk type after failover. Its an optional value and will be same as source disk type if not user provided.
     *
     * @return the recoveryTargetDiskAccountType value
     */
    public String recoveryTargetDiskAccountType() {
        return this.recoveryTargetDiskAccountType;
    }

    /**
     * Set the target disk type after failover. Its an optional value and will be same as source disk type if not user provided.
     *
     * @param recoveryTargetDiskAccountType the recoveryTargetDiskAccountType value to set
     * @return the A2AProtectedManagedDiskDetails object itself.
     */
    public A2AProtectedManagedDiskDetails withRecoveryTargetDiskAccountType(String recoveryTargetDiskAccountType) {
        this.recoveryTargetDiskAccountType = recoveryTargetDiskAccountType;
        return this;
    }

    /**
     * Get the disk name.
     *
     * @return the diskName value
     */
    public String diskName() {
        return this.diskName;
    }

    /**
     * Set the disk name.
     *
     * @param diskName the diskName value to set
     * @return the A2AProtectedManagedDiskDetails object itself.
     */
    public A2AProtectedManagedDiskDetails withDiskName(String diskName) {
        this.diskName = diskName;
        return this;
    }

    /**
     * Get the disk capacity in bytes.
     *
     * @return the diskCapacityInBytes value
     */
    public Long diskCapacityInBytes() {
        return this.diskCapacityInBytes;
    }

    /**
     * Set the disk capacity in bytes.
     *
     * @param diskCapacityInBytes the diskCapacityInBytes value to set
     * @return the A2AProtectedManagedDiskDetails object itself.
     */
    public A2AProtectedManagedDiskDetails withDiskCapacityInBytes(Long diskCapacityInBytes) {
        this.diskCapacityInBytes = diskCapacityInBytes;
        return this;
    }

    /**
     * Get the primary staging storage account.
     *
     * @return the primaryStagingAzureStorageAccountId value
     */
    public String primaryStagingAzureStorageAccountId() {
        return this.primaryStagingAzureStorageAccountId;
    }

    /**
     * Set the primary staging storage account.
     *
     * @param primaryStagingAzureStorageAccountId the primaryStagingAzureStorageAccountId value to set
     * @return the A2AProtectedManagedDiskDetails object itself.
     */
    public A2AProtectedManagedDiskDetails withPrimaryStagingAzureStorageAccountId(String primaryStagingAzureStorageAccountId) {
        this.primaryStagingAzureStorageAccountId = primaryStagingAzureStorageAccountId;
        return this;
    }

    /**
     * Get the type of disk.
     *
     * @return the diskType value
     */
    public String diskType() {
        return this.diskType;
    }

    /**
     * Set the type of disk.
     *
     * @param diskType the diskType value to set
     * @return the A2AProtectedManagedDiskDetails object itself.
     */
    public A2AProtectedManagedDiskDetails withDiskType(String diskType) {
        this.diskType = diskType;
        return this;
    }

    /**
     * Get a value indicating whether resync is required for this disk.
     *
     * @return the resyncRequired value
     */
    public Boolean resyncRequired() {
        return this.resyncRequired;
    }

    /**
     * Set a value indicating whether resync is required for this disk.
     *
     * @param resyncRequired the resyncRequired value to set
     * @return the A2AProtectedManagedDiskDetails object itself.
     */
    public A2AProtectedManagedDiskDetails withResyncRequired(Boolean resyncRequired) {
        this.resyncRequired = resyncRequired;
        return this;
    }

    /**
     * Get the percentage of the monitoring job. The type of the monitoring job is defined by MonitoringJobType property.
     *
     * @return the monitoringPercentageCompletion value
     */
    public Integer monitoringPercentageCompletion() {
        return this.monitoringPercentageCompletion;
    }

    /**
     * Set the percentage of the monitoring job. The type of the monitoring job is defined by MonitoringJobType property.
     *
     * @param monitoringPercentageCompletion the monitoringPercentageCompletion value to set
     * @return the A2AProtectedManagedDiskDetails object itself.
     */
    public A2AProtectedManagedDiskDetails withMonitoringPercentageCompletion(Integer monitoringPercentageCompletion) {
        this.monitoringPercentageCompletion = monitoringPercentageCompletion;
        return this;
    }

    /**
     * Get the type of the monitoring job. The progress is contained in MonitoringPercentageCompletion property.
     *
     * @return the monitoringJobType value
     */
    public String monitoringJobType() {
        return this.monitoringJobType;
    }

    /**
     * Set the type of the monitoring job. The progress is contained in MonitoringPercentageCompletion property.
     *
     * @param monitoringJobType the monitoringJobType value to set
     * @return the A2AProtectedManagedDiskDetails object itself.
     */
    public A2AProtectedManagedDiskDetails withMonitoringJobType(String monitoringJobType) {
        this.monitoringJobType = monitoringJobType;
        return this;
    }

    /**
     * Get the data pending for replication in MB at staging account.
     *
     * @return the dataPendingInStagingStorageAccountInMB value
     */
    public Double dataPendingInStagingStorageAccountInMB() {
        return this.dataPendingInStagingStorageAccountInMB;
    }

    /**
     * Set the data pending for replication in MB at staging account.
     *
     * @param dataPendingInStagingStorageAccountInMB the dataPendingInStagingStorageAccountInMB value to set
     * @return the A2AProtectedManagedDiskDetails object itself.
     */
    public A2AProtectedManagedDiskDetails withDataPendingInStagingStorageAccountInMB(Double dataPendingInStagingStorageAccountInMB) {
        this.dataPendingInStagingStorageAccountInMB = dataPendingInStagingStorageAccountInMB;
        return this;
    }

    /**
     * Get the data pending at source virtual machine in MB.
     *
     * @return the dataPendingAtSourceAgentInMB value
     */
    public Double dataPendingAtSourceAgentInMB() {
        return this.dataPendingAtSourceAgentInMB;
    }

    /**
     * Set the data pending at source virtual machine in MB.
     *
     * @param dataPendingAtSourceAgentInMB the dataPendingAtSourceAgentInMB value to set
     * @return the A2AProtectedManagedDiskDetails object itself.
     */
    public A2AProtectedManagedDiskDetails withDataPendingAtSourceAgentInMB(Double dataPendingAtSourceAgentInMB) {
        this.dataPendingAtSourceAgentInMB = dataPendingAtSourceAgentInMB;
        return this;
    }

    /**
     * Get a value indicating whether vm has encrypted os disk or not.
     *
     * @return the isDiskEncrypted value
     */
    public Boolean isDiskEncrypted() {
        return this.isDiskEncrypted;
    }

    /**
     * Set a value indicating whether vm has encrypted os disk or not.
     *
     * @param isDiskEncrypted the isDiskEncrypted value to set
     * @return the A2AProtectedManagedDiskDetails object itself.
     */
    public A2AProtectedManagedDiskDetails withIsDiskEncrypted(Boolean isDiskEncrypted) {
        this.isDiskEncrypted = isDiskEncrypted;
        return this;
    }

    /**
     * Get the secret URL / identifier (BEK).
     *
     * @return the secretIdentifier value
     */
    public String secretIdentifier() {
        return this.secretIdentifier;
    }

    /**
     * Set the secret URL / identifier (BEK).
     *
     * @param secretIdentifier the secretIdentifier value to set
     * @return the A2AProtectedManagedDiskDetails object itself.
     */
    public A2AProtectedManagedDiskDetails withSecretIdentifier(String secretIdentifier) {
        this.secretIdentifier = secretIdentifier;
        return this;
    }

    /**
     * Get the KeyVault resource id for secret (BEK).
     *
     * @return the dekKeyVaultArmId value
     */
    public String dekKeyVaultArmId() {
        return this.dekKeyVaultArmId;
    }

    /**
     * Set the KeyVault resource id for secret (BEK).
     *
     * @param dekKeyVaultArmId the dekKeyVaultArmId value to set
     * @return the A2AProtectedManagedDiskDetails object itself.
     */
    public A2AProtectedManagedDiskDetails withDekKeyVaultArmId(String dekKeyVaultArmId) {
        this.dekKeyVaultArmId = dekKeyVaultArmId;
        return this;
    }

    /**
     * Get a value indicating whether disk key got encrypted or not.
     *
     * @return the isDiskKeyEncrypted value
     */
    public Boolean isDiskKeyEncrypted() {
        return this.isDiskKeyEncrypted;
    }

    /**
     * Set a value indicating whether disk key got encrypted or not.
     *
     * @param isDiskKeyEncrypted the isDiskKeyEncrypted value to set
     * @return the A2AProtectedManagedDiskDetails object itself.
     */
    public A2AProtectedManagedDiskDetails withIsDiskKeyEncrypted(Boolean isDiskKeyEncrypted) {
        this.isDiskKeyEncrypted = isDiskKeyEncrypted;
        return this;
    }

    /**
     * Get the key URL / identifier (KEK).
     *
     * @return the keyIdentifier value
     */
    public String keyIdentifier() {
        return this.keyIdentifier;
    }

    /**
     * Set the key URL / identifier (KEK).
     *
     * @param keyIdentifier the keyIdentifier value to set
     * @return the A2AProtectedManagedDiskDetails object itself.
     */
    public A2AProtectedManagedDiskDetails withKeyIdentifier(String keyIdentifier) {
        this.keyIdentifier = keyIdentifier;
        return this;
    }

    /**
     * Get the KeyVault resource id for key (KEK).
     *
     * @return the kekKeyVaultArmId value
     */
    public String kekKeyVaultArmId() {
        return this.kekKeyVaultArmId;
    }

    /**
     * Set the KeyVault resource id for key (KEK).
     *
     * @param kekKeyVaultArmId the kekKeyVaultArmId value to set
     * @return the A2AProtectedManagedDiskDetails object itself.
     */
    public A2AProtectedManagedDiskDetails withKekKeyVaultArmId(String kekKeyVaultArmId) {
        this.kekKeyVaultArmId = kekKeyVaultArmId;
        return this;
    }

}
