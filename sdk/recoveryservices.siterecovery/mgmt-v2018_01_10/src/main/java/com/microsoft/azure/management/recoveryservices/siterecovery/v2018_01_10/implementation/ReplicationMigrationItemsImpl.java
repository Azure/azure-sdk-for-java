/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.recoveryservices.siterecovery.v2018_01_10.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.recoveryservices.siterecovery.v2018_01_10.ReplicationMigrationItems;
import rx.Completable;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.recoveryservices.siterecovery.v2018_01_10.MigrationItem;
import com.microsoft.azure.management.recoveryservices.siterecovery.v2018_01_10.MigrateInputProperties;
import com.microsoft.azure.management.recoveryservices.siterecovery.v2018_01_10.ResyncInputProperties;
import com.microsoft.azure.management.recoveryservices.siterecovery.v2018_01_10.TestMigrateInputProperties;
import com.microsoft.azure.management.recoveryservices.siterecovery.v2018_01_10.TestMigrateCleanupInputProperties;

class ReplicationMigrationItemsImpl extends WrapperImpl<ReplicationMigrationItemsInner> implements ReplicationMigrationItems {
    private final RecoveryServicesManager manager;

    ReplicationMigrationItemsImpl(RecoveryServicesManager manager) {
        super(manager.inner().replicationMigrationItems());
        this.manager = manager;
    }

    public RecoveryServicesManager manager() {
        return this.manager;
    }

    @Override
    public MigrationItemImpl define(String name) {
        return wrapModel(name);
    }

    private MigrationItemImpl wrapModel(MigrationItemInner inner) {
        return  new MigrationItemImpl(inner, manager());
    }

    private MigrationItemImpl wrapModel(String name) {
        return new MigrationItemImpl(name, this.manager());
    }

    @Override
    public Observable<MigrationItem> migrateAsync(String fabricName, String protectionContainerName, String migrationItemName, MigrateInputProperties properties) {
        ReplicationMigrationItemsInner client = this.inner();
        return client.migrateAsync(fabricName, protectionContainerName, migrationItemName, properties)
        .map(new Func1<MigrationItemInner, MigrationItem>() {
            @Override
            public MigrationItem call(MigrationItemInner inner) {
                return new MigrationItemImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<MigrationItem> resyncAsync(String fabricName, String protectionContainerName, String migrationItemName, ResyncInputProperties properties) {
        ReplicationMigrationItemsInner client = this.inner();
        return client.resyncAsync(fabricName, protectionContainerName, migrationItemName, properties)
        .map(new Func1<MigrationItemInner, MigrationItem>() {
            @Override
            public MigrationItem call(MigrationItemInner inner) {
                return new MigrationItemImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<MigrationItem> testMigrateAsync(String fabricName, String protectionContainerName, String migrationItemName, TestMigrateInputProperties properties) {
        ReplicationMigrationItemsInner client = this.inner();
        return client.testMigrateAsync(fabricName, protectionContainerName, migrationItemName, properties)
        .map(new Func1<MigrationItemInner, MigrationItem>() {
            @Override
            public MigrationItem call(MigrationItemInner inner) {
                return new MigrationItemImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<MigrationItem> testMigrateCleanupAsync(String fabricName, String protectionContainerName, String migrationItemName, TestMigrateCleanupInputProperties properties) {
        ReplicationMigrationItemsInner client = this.inner();
        return client.testMigrateCleanupAsync(fabricName, protectionContainerName, migrationItemName, properties)
        .map(new Func1<MigrationItemInner, MigrationItem>() {
            @Override
            public MigrationItem call(MigrationItemInner inner) {
                return new MigrationItemImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<MigrationItem> listAsync() {
        ReplicationMigrationItemsInner client = this.inner();
        return client.listAsync()
        .flatMapIterable(new Func1<Page<MigrationItemInner>, Iterable<MigrationItemInner>>() {
            @Override
            public Iterable<MigrationItemInner> call(Page<MigrationItemInner> page) {
                return page.items();
            }
        })
        .map(new Func1<MigrationItemInner, MigrationItem>() {
            @Override
            public MigrationItem call(MigrationItemInner inner) {
                return new MigrationItemImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<MigrationItem> listByReplicationProtectionContainersAsync(final String fabricName, final String protectionContainerName) {
        ReplicationMigrationItemsInner client = this.inner();
        return client.listByReplicationProtectionContainersAsync(fabricName, protectionContainerName)
        .flatMapIterable(new Func1<Page<MigrationItemInner>, Iterable<MigrationItemInner>>() {
            @Override
            public Iterable<MigrationItemInner> call(Page<MigrationItemInner> page) {
                return page.items();
            }
        })
        .map(new Func1<MigrationItemInner, MigrationItem>() {
            @Override
            public MigrationItem call(MigrationItemInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public Observable<MigrationItem> getAsync(String fabricName, String protectionContainerName, String migrationItemName) {
        ReplicationMigrationItemsInner client = this.inner();
        return client.getAsync(fabricName, protectionContainerName, migrationItemName)
        .flatMap(new Func1<MigrationItemInner, Observable<MigrationItem>>() {
            @Override
            public Observable<MigrationItem> call(MigrationItemInner inner) {
                if (inner == null) {
                    return Observable.empty();
                } else {
                    return Observable.just((MigrationItem)wrapModel(inner));
                }
            }
       });
    }

    @Override
    public Completable deleteAsync(String fabricName, String protectionContainerName, String migrationItemName) {
        ReplicationMigrationItemsInner client = this.inner();
        return client.deleteAsync(fabricName, protectionContainerName, migrationItemName).toCompletable();
    }

}
