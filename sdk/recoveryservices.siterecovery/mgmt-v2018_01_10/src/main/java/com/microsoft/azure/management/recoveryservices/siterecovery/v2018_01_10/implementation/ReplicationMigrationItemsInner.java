/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.recoveryservices.siterecovery.v2018_01_10.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.CloudException;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.recoveryservices.siterecovery.v2018_01_10.EnableMigrationInput;
import com.microsoft.azure.management.recoveryservices.siterecovery.v2018_01_10.EnableMigrationInputProperties;
import com.microsoft.azure.management.recoveryservices.siterecovery.v2018_01_10.MigrateInput;
import com.microsoft.azure.management.recoveryservices.siterecovery.v2018_01_10.MigrateInputProperties;
import com.microsoft.azure.management.recoveryservices.siterecovery.v2018_01_10.ResyncInput;
import com.microsoft.azure.management.recoveryservices.siterecovery.v2018_01_10.ResyncInputProperties;
import com.microsoft.azure.management.recoveryservices.siterecovery.v2018_01_10.TestMigrateCleanupInput;
import com.microsoft.azure.management.recoveryservices.siterecovery.v2018_01_10.TestMigrateCleanupInputProperties;
import com.microsoft.azure.management.recoveryservices.siterecovery.v2018_01_10.TestMigrateInput;
import com.microsoft.azure.management.recoveryservices.siterecovery.v2018_01_10.TestMigrateInputProperties;
import com.microsoft.azure.management.recoveryservices.siterecovery.v2018_01_10.UpdateMigrationItemInput;
import com.microsoft.azure.management.recoveryservices.siterecovery.v2018_01_10.UpdateMigrationItemInputProperties;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.PATCH;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in ReplicationMigrationItems.
 */
public class ReplicationMigrationItemsInner {
    /** The Retrofit service to perform REST calls. */
    private ReplicationMigrationItemsService service;
    /** The service client containing this operation class. */
    private SiteRecoveryManagementClientImpl client;

    /**
     * Initializes an instance of ReplicationMigrationItemsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public ReplicationMigrationItemsInner(Retrofit retrofit, SiteRecoveryManagementClientImpl client) {
        this.service = retrofit.create(ReplicationMigrationItemsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for ReplicationMigrationItems to be
     * used by Retrofit to perform actually REST calls.
     */
    interface ReplicationMigrationItemsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2018_01_10.ReplicationMigrationItems listByReplicationProtectionContainers" })
        @GET("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationMigrationItems")
        Observable<Response<ResponseBody>> listByReplicationProtectionContainers(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("fabricName") String fabricName, @Path("protectionContainerName") String protectionContainerName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2018_01_10.ReplicationMigrationItems get" })
        @GET("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationMigrationItems/{migrationItemName}")
        Observable<Response<ResponseBody>> get(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("fabricName") String fabricName, @Path("protectionContainerName") String protectionContainerName, @Path("migrationItemName") String migrationItemName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2018_01_10.ReplicationMigrationItems create" })
        @PUT("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationMigrationItems/{migrationItemName}")
        Observable<Response<ResponseBody>> create(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("fabricName") String fabricName, @Path("protectionContainerName") String protectionContainerName, @Path("migrationItemName") String migrationItemName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body EnableMigrationInput input, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2018_01_10.ReplicationMigrationItems beginCreate" })
        @PUT("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationMigrationItems/{migrationItemName}")
        Observable<Response<ResponseBody>> beginCreate(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("fabricName") String fabricName, @Path("protectionContainerName") String protectionContainerName, @Path("migrationItemName") String migrationItemName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body EnableMigrationInput input, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2018_01_10.ReplicationMigrationItems delete" })
        @HTTP(path = "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationMigrationItems/{migrationItemName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("fabricName") String fabricName, @Path("protectionContainerName") String protectionContainerName, @Path("migrationItemName") String migrationItemName, @Query("api-version") String apiVersion, @Query("deleteOption") String deleteOption, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2018_01_10.ReplicationMigrationItems beginDelete" })
        @HTTP(path = "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationMigrationItems/{migrationItemName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> beginDelete(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("fabricName") String fabricName, @Path("protectionContainerName") String protectionContainerName, @Path("migrationItemName") String migrationItemName, @Query("api-version") String apiVersion, @Query("deleteOption") String deleteOption, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2018_01_10.ReplicationMigrationItems update" })
        @PATCH("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationMigrationItems/{migrationItemName}")
        Observable<Response<ResponseBody>> update(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("fabricName") String fabricName, @Path("protectionContainerName") String protectionContainerName, @Path("migrationItemName") String migrationItemName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body UpdateMigrationItemInput input, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2018_01_10.ReplicationMigrationItems beginUpdate" })
        @PATCH("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationMigrationItems/{migrationItemName}")
        Observable<Response<ResponseBody>> beginUpdate(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("fabricName") String fabricName, @Path("protectionContainerName") String protectionContainerName, @Path("migrationItemName") String migrationItemName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body UpdateMigrationItemInput input, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2018_01_10.ReplicationMigrationItems migrate" })
        @POST("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationMigrationItems/{migrationItemName}/migrate")
        Observable<Response<ResponseBody>> migrate(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("fabricName") String fabricName, @Path("protectionContainerName") String protectionContainerName, @Path("migrationItemName") String migrationItemName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body MigrateInput migrateInput, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2018_01_10.ReplicationMigrationItems beginMigrate" })
        @POST("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationMigrationItems/{migrationItemName}/migrate")
        Observable<Response<ResponseBody>> beginMigrate(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("fabricName") String fabricName, @Path("protectionContainerName") String protectionContainerName, @Path("migrationItemName") String migrationItemName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body MigrateInput migrateInput, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2018_01_10.ReplicationMigrationItems resync" })
        @POST("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationMigrationItems/{migrationItemName}/resync")
        Observable<Response<ResponseBody>> resync(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("fabricName") String fabricName, @Path("protectionContainerName") String protectionContainerName, @Path("migrationItemName") String migrationItemName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body ResyncInput input, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2018_01_10.ReplicationMigrationItems beginResync" })
        @POST("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationMigrationItems/{migrationItemName}/resync")
        Observable<Response<ResponseBody>> beginResync(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("fabricName") String fabricName, @Path("protectionContainerName") String protectionContainerName, @Path("migrationItemName") String migrationItemName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body ResyncInput input, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2018_01_10.ReplicationMigrationItems testMigrate" })
        @POST("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationMigrationItems/{migrationItemName}/testMigrate")
        Observable<Response<ResponseBody>> testMigrate(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("fabricName") String fabricName, @Path("protectionContainerName") String protectionContainerName, @Path("migrationItemName") String migrationItemName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body TestMigrateInput testMigrateInput, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2018_01_10.ReplicationMigrationItems beginTestMigrate" })
        @POST("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationMigrationItems/{migrationItemName}/testMigrate")
        Observable<Response<ResponseBody>> beginTestMigrate(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("fabricName") String fabricName, @Path("protectionContainerName") String protectionContainerName, @Path("migrationItemName") String migrationItemName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body TestMigrateInput testMigrateInput, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2018_01_10.ReplicationMigrationItems testMigrateCleanup" })
        @POST("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationMigrationItems/{migrationItemName}/testMigrateCleanup")
        Observable<Response<ResponseBody>> testMigrateCleanup(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("fabricName") String fabricName, @Path("protectionContainerName") String protectionContainerName, @Path("migrationItemName") String migrationItemName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body TestMigrateCleanupInput testMigrateCleanupInput, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2018_01_10.ReplicationMigrationItems beginTestMigrateCleanup" })
        @POST("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationMigrationItems/{migrationItemName}/testMigrateCleanup")
        Observable<Response<ResponseBody>> beginTestMigrateCleanup(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("fabricName") String fabricName, @Path("protectionContainerName") String protectionContainerName, @Path("migrationItemName") String migrationItemName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body TestMigrateCleanupInput testMigrateCleanupInput, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2018_01_10.ReplicationMigrationItems list" })
        @GET("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationMigrationItems")
        Observable<Response<ResponseBody>> list(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Query("skipToken") String skipToken, @Query("$filter") String filter, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2018_01_10.ReplicationMigrationItems listByReplicationProtectionContainersNext" })
        @GET
        Observable<Response<ResponseBody>> listByReplicationProtectionContainersNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2018_01_10.ReplicationMigrationItems listNext" })
        @GET
        Observable<Response<ResponseBody>> listNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Gets the list of migration items in the protection container.
     * Gets the list of ASR migration items in the protection container.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;MigrationItemInner&gt; object if successful.
     */
    public PagedList<MigrationItemInner> listByReplicationProtectionContainers(final String fabricName, final String protectionContainerName) {
        ServiceResponse<Page<MigrationItemInner>> response = listByReplicationProtectionContainersSinglePageAsync(fabricName, protectionContainerName).toBlocking().single();
        return new PagedList<MigrationItemInner>(response.body()) {
            @Override
            public Page<MigrationItemInner> nextPage(String nextPageLink) {
                return listByReplicationProtectionContainersNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets the list of migration items in the protection container.
     * Gets the list of ASR migration items in the protection container.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<MigrationItemInner>> listByReplicationProtectionContainersAsync(final String fabricName, final String protectionContainerName, final ListOperationCallback<MigrationItemInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByReplicationProtectionContainersSinglePageAsync(fabricName, protectionContainerName),
            new Func1<String, Observable<ServiceResponse<Page<MigrationItemInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<MigrationItemInner>>> call(String nextPageLink) {
                    return listByReplicationProtectionContainersNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets the list of migration items in the protection container.
     * Gets the list of ASR migration items in the protection container.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;MigrationItemInner&gt; object
     */
    public Observable<Page<MigrationItemInner>> listByReplicationProtectionContainersAsync(final String fabricName, final String protectionContainerName) {
        return listByReplicationProtectionContainersWithServiceResponseAsync(fabricName, protectionContainerName)
            .map(new Func1<ServiceResponse<Page<MigrationItemInner>>, Page<MigrationItemInner>>() {
                @Override
                public Page<MigrationItemInner> call(ServiceResponse<Page<MigrationItemInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets the list of migration items in the protection container.
     * Gets the list of ASR migration items in the protection container.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;MigrationItemInner&gt; object
     */
    public Observable<ServiceResponse<Page<MigrationItemInner>>> listByReplicationProtectionContainersWithServiceResponseAsync(final String fabricName, final String protectionContainerName) {
        return listByReplicationProtectionContainersSinglePageAsync(fabricName, protectionContainerName)
            .concatMap(new Func1<ServiceResponse<Page<MigrationItemInner>>, Observable<ServiceResponse<Page<MigrationItemInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<MigrationItemInner>>> call(ServiceResponse<Page<MigrationItemInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByReplicationProtectionContainersNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets the list of migration items in the protection container.
     * Gets the list of ASR migration items in the protection container.
     *
    ServiceResponse<PageImpl<MigrationItemInner>> * @param fabricName Fabric name.
    ServiceResponse<PageImpl<MigrationItemInner>> * @param protectionContainerName Protection container name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;MigrationItemInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<MigrationItemInner>>> listByReplicationProtectionContainersSinglePageAsync(final String fabricName, final String protectionContainerName) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (protectionContainerName == null) {
            throw new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByReplicationProtectionContainers(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, protectionContainerName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<MigrationItemInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<MigrationItemInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<MigrationItemInner>> result = listByReplicationProtectionContainersDelegate(response);
                        return Observable.just(new ServiceResponse<Page<MigrationItemInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<MigrationItemInner>> listByReplicationProtectionContainersDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<MigrationItemInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<MigrationItemInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets the details of a migration item.
     *
     * @param fabricName Fabric unique name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the MigrationItemInner object if successful.
     */
    public MigrationItemInner get(String fabricName, String protectionContainerName, String migrationItemName) {
        return getWithServiceResponseAsync(fabricName, protectionContainerName, migrationItemName).toBlocking().single().body();
    }

    /**
     * Gets the details of a migration item.
     *
     * @param fabricName Fabric unique name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<MigrationItemInner> getAsync(String fabricName, String protectionContainerName, String migrationItemName, final ServiceCallback<MigrationItemInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(fabricName, protectionContainerName, migrationItemName), serviceCallback);
    }

    /**
     * Gets the details of a migration item.
     *
     * @param fabricName Fabric unique name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the MigrationItemInner object
     */
    public Observable<MigrationItemInner> getAsync(String fabricName, String protectionContainerName, String migrationItemName) {
        return getWithServiceResponseAsync(fabricName, protectionContainerName, migrationItemName).map(new Func1<ServiceResponse<MigrationItemInner>, MigrationItemInner>() {
            @Override
            public MigrationItemInner call(ServiceResponse<MigrationItemInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets the details of a migration item.
     *
     * @param fabricName Fabric unique name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the MigrationItemInner object
     */
    public Observable<ServiceResponse<MigrationItemInner>> getWithServiceResponseAsync(String fabricName, String protectionContainerName, String migrationItemName) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (protectionContainerName == null) {
            throw new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null.");
        }
        if (migrationItemName == null) {
            throw new IllegalArgumentException("Parameter migrationItemName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.get(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, protectionContainerName, migrationItemName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<MigrationItemInner>>>() {
                @Override
                public Observable<ServiceResponse<MigrationItemInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<MigrationItemInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<MigrationItemInner> getDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<MigrationItemInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<MigrationItemInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Enables migration.
     * The operation to create an ASR migration item (enable migration).
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param properties Enable migration input properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the MigrationItemInner object if successful.
     */
    public MigrationItemInner create(String fabricName, String protectionContainerName, String migrationItemName, EnableMigrationInputProperties properties) {
        return createWithServiceResponseAsync(fabricName, protectionContainerName, migrationItemName, properties).toBlocking().last().body();
    }

    /**
     * Enables migration.
     * The operation to create an ASR migration item (enable migration).
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param properties Enable migration input properties.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<MigrationItemInner> createAsync(String fabricName, String protectionContainerName, String migrationItemName, EnableMigrationInputProperties properties, final ServiceCallback<MigrationItemInner> serviceCallback) {
        return ServiceFuture.fromResponse(createWithServiceResponseAsync(fabricName, protectionContainerName, migrationItemName, properties), serviceCallback);
    }

    /**
     * Enables migration.
     * The operation to create an ASR migration item (enable migration).
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param properties Enable migration input properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<MigrationItemInner> createAsync(String fabricName, String protectionContainerName, String migrationItemName, EnableMigrationInputProperties properties) {
        return createWithServiceResponseAsync(fabricName, protectionContainerName, migrationItemName, properties).map(new Func1<ServiceResponse<MigrationItemInner>, MigrationItemInner>() {
            @Override
            public MigrationItemInner call(ServiceResponse<MigrationItemInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Enables migration.
     * The operation to create an ASR migration item (enable migration).
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param properties Enable migration input properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<MigrationItemInner>> createWithServiceResponseAsync(String fabricName, String protectionContainerName, String migrationItemName, EnableMigrationInputProperties properties) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (protectionContainerName == null) {
            throw new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null.");
        }
        if (migrationItemName == null) {
            throw new IllegalArgumentException("Parameter migrationItemName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (properties == null) {
            throw new IllegalArgumentException("Parameter properties is required and cannot be null.");
        }
        Validator.validate(properties);
        EnableMigrationInput input = new EnableMigrationInput();
        input.withProperties(properties);
        Observable<Response<ResponseBody>> observable = service.create(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, protectionContainerName, migrationItemName, this.client.apiVersion(), this.client.acceptLanguage(), input, this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<MigrationItemInner>() { }.getType());
    }

    /**
     * Enables migration.
     * The operation to create an ASR migration item (enable migration).
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param properties Enable migration input properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the MigrationItemInner object if successful.
     */
    public MigrationItemInner beginCreate(String fabricName, String protectionContainerName, String migrationItemName, EnableMigrationInputProperties properties) {
        return beginCreateWithServiceResponseAsync(fabricName, protectionContainerName, migrationItemName, properties).toBlocking().single().body();
    }

    /**
     * Enables migration.
     * The operation to create an ASR migration item (enable migration).
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param properties Enable migration input properties.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<MigrationItemInner> beginCreateAsync(String fabricName, String protectionContainerName, String migrationItemName, EnableMigrationInputProperties properties, final ServiceCallback<MigrationItemInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginCreateWithServiceResponseAsync(fabricName, protectionContainerName, migrationItemName, properties), serviceCallback);
    }

    /**
     * Enables migration.
     * The operation to create an ASR migration item (enable migration).
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param properties Enable migration input properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the MigrationItemInner object
     */
    public Observable<MigrationItemInner> beginCreateAsync(String fabricName, String protectionContainerName, String migrationItemName, EnableMigrationInputProperties properties) {
        return beginCreateWithServiceResponseAsync(fabricName, protectionContainerName, migrationItemName, properties).map(new Func1<ServiceResponse<MigrationItemInner>, MigrationItemInner>() {
            @Override
            public MigrationItemInner call(ServiceResponse<MigrationItemInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Enables migration.
     * The operation to create an ASR migration item (enable migration).
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param properties Enable migration input properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the MigrationItemInner object
     */
    public Observable<ServiceResponse<MigrationItemInner>> beginCreateWithServiceResponseAsync(String fabricName, String protectionContainerName, String migrationItemName, EnableMigrationInputProperties properties) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (protectionContainerName == null) {
            throw new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null.");
        }
        if (migrationItemName == null) {
            throw new IllegalArgumentException("Parameter migrationItemName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (properties == null) {
            throw new IllegalArgumentException("Parameter properties is required and cannot be null.");
        }
        Validator.validate(properties);
        EnableMigrationInput input = new EnableMigrationInput();
        input.withProperties(properties);
        return service.beginCreate(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, protectionContainerName, migrationItemName, this.client.apiVersion(), this.client.acceptLanguage(), input, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<MigrationItemInner>>>() {
                @Override
                public Observable<ServiceResponse<MigrationItemInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<MigrationItemInner> clientResponse = beginCreateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<MigrationItemInner> beginCreateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<MigrationItemInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<MigrationItemInner>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Delete the migration item.
     * The operation to delete an ASR migration item.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String fabricName, String protectionContainerName, String migrationItemName) {
        deleteWithServiceResponseAsync(fabricName, protectionContainerName, migrationItemName).toBlocking().last().body();
    }

    /**
     * Delete the migration item.
     * The operation to delete an ASR migration item.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String fabricName, String protectionContainerName, String migrationItemName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(fabricName, protectionContainerName, migrationItemName), serviceCallback);
    }

    /**
     * Delete the migration item.
     * The operation to delete an ASR migration item.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Void> deleteAsync(String fabricName, String protectionContainerName, String migrationItemName) {
        return deleteWithServiceResponseAsync(fabricName, protectionContainerName, migrationItemName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Delete the migration item.
     * The operation to delete an ASR migration item.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String fabricName, String protectionContainerName, String migrationItemName) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (protectionContainerName == null) {
            throw new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null.");
        }
        if (migrationItemName == null) {
            throw new IllegalArgumentException("Parameter migrationItemName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String deleteOption = null;
        Observable<Response<ResponseBody>> observable = service.delete(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, protectionContainerName, migrationItemName, this.client.apiVersion(), deleteOption, this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<Void>() { }.getType());
    }
    /**
     * Delete the migration item.
     * The operation to delete an ASR migration item.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param deleteOption The delete option.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String fabricName, String protectionContainerName, String migrationItemName, String deleteOption) {
        deleteWithServiceResponseAsync(fabricName, protectionContainerName, migrationItemName, deleteOption).toBlocking().last().body();
    }

    /**
     * Delete the migration item.
     * The operation to delete an ASR migration item.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param deleteOption The delete option.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String fabricName, String protectionContainerName, String migrationItemName, String deleteOption, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(fabricName, protectionContainerName, migrationItemName, deleteOption), serviceCallback);
    }

    /**
     * Delete the migration item.
     * The operation to delete an ASR migration item.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param deleteOption The delete option.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Void> deleteAsync(String fabricName, String protectionContainerName, String migrationItemName, String deleteOption) {
        return deleteWithServiceResponseAsync(fabricName, protectionContainerName, migrationItemName, deleteOption).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Delete the migration item.
     * The operation to delete an ASR migration item.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param deleteOption The delete option.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String fabricName, String protectionContainerName, String migrationItemName, String deleteOption) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (protectionContainerName == null) {
            throw new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null.");
        }
        if (migrationItemName == null) {
            throw new IllegalArgumentException("Parameter migrationItemName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Observable<Response<ResponseBody>> observable = service.delete(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, protectionContainerName, migrationItemName, this.client.apiVersion(), deleteOption, this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<Void>() { }.getType());
    }

    /**
     * Delete the migration item.
     * The operation to delete an ASR migration item.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void beginDelete(String fabricName, String protectionContainerName, String migrationItemName) {
        beginDeleteWithServiceResponseAsync(fabricName, protectionContainerName, migrationItemName).toBlocking().single().body();
    }

    /**
     * Delete the migration item.
     * The operation to delete an ASR migration item.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> beginDeleteAsync(String fabricName, String protectionContainerName, String migrationItemName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(beginDeleteWithServiceResponseAsync(fabricName, protectionContainerName, migrationItemName), serviceCallback);
    }

    /**
     * Delete the migration item.
     * The operation to delete an ASR migration item.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> beginDeleteAsync(String fabricName, String protectionContainerName, String migrationItemName) {
        return beginDeleteWithServiceResponseAsync(fabricName, protectionContainerName, migrationItemName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Delete the migration item.
     * The operation to delete an ASR migration item.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> beginDeleteWithServiceResponseAsync(String fabricName, String protectionContainerName, String migrationItemName) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (protectionContainerName == null) {
            throw new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null.");
        }
        if (migrationItemName == null) {
            throw new IllegalArgumentException("Parameter migrationItemName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String deleteOption = null;
        return service.beginDelete(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, protectionContainerName, migrationItemName, this.client.apiVersion(), deleteOption, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = beginDeleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Delete the migration item.
     * The operation to delete an ASR migration item.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param deleteOption The delete option.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void beginDelete(String fabricName, String protectionContainerName, String migrationItemName, String deleteOption) {
        beginDeleteWithServiceResponseAsync(fabricName, protectionContainerName, migrationItemName, deleteOption).toBlocking().single().body();
    }

    /**
     * Delete the migration item.
     * The operation to delete an ASR migration item.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param deleteOption The delete option.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> beginDeleteAsync(String fabricName, String protectionContainerName, String migrationItemName, String deleteOption, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(beginDeleteWithServiceResponseAsync(fabricName, protectionContainerName, migrationItemName, deleteOption), serviceCallback);
    }

    /**
     * Delete the migration item.
     * The operation to delete an ASR migration item.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param deleteOption The delete option.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> beginDeleteAsync(String fabricName, String protectionContainerName, String migrationItemName, String deleteOption) {
        return beginDeleteWithServiceResponseAsync(fabricName, protectionContainerName, migrationItemName, deleteOption).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Delete the migration item.
     * The operation to delete an ASR migration item.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param deleteOption The delete option.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> beginDeleteWithServiceResponseAsync(String fabricName, String protectionContainerName, String migrationItemName, String deleteOption) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (protectionContainerName == null) {
            throw new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null.");
        }
        if (migrationItemName == null) {
            throw new IllegalArgumentException("Parameter migrationItemName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.beginDelete(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, protectionContainerName, migrationItemName, this.client.apiVersion(), deleteOption, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = beginDeleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> beginDeleteDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CloudException>newInstance(this.client.serializerAdapter())
                .register(202, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Updates migration item.
     * The operation to update the recovery settings of an ASR migration item.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the MigrationItemInner object if successful.
     */
    public MigrationItemInner update(String fabricName, String protectionContainerName, String migrationItemName) {
        return updateWithServiceResponseAsync(fabricName, protectionContainerName, migrationItemName).toBlocking().last().body();
    }

    /**
     * Updates migration item.
     * The operation to update the recovery settings of an ASR migration item.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<MigrationItemInner> updateAsync(String fabricName, String protectionContainerName, String migrationItemName, final ServiceCallback<MigrationItemInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(fabricName, protectionContainerName, migrationItemName), serviceCallback);
    }

    /**
     * Updates migration item.
     * The operation to update the recovery settings of an ASR migration item.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<MigrationItemInner> updateAsync(String fabricName, String protectionContainerName, String migrationItemName) {
        return updateWithServiceResponseAsync(fabricName, protectionContainerName, migrationItemName).map(new Func1<ServiceResponse<MigrationItemInner>, MigrationItemInner>() {
            @Override
            public MigrationItemInner call(ServiceResponse<MigrationItemInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Updates migration item.
     * The operation to update the recovery settings of an ASR migration item.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<MigrationItemInner>> updateWithServiceResponseAsync(String fabricName, String protectionContainerName, String migrationItemName) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (protectionContainerName == null) {
            throw new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null.");
        }
        if (migrationItemName == null) {
            throw new IllegalArgumentException("Parameter migrationItemName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final UpdateMigrationItemInputProperties properties = null;
        UpdateMigrationItemInput input = new UpdateMigrationItemInput();
        input.withProperties(null);
        Observable<Response<ResponseBody>> observable = service.update(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, protectionContainerName, migrationItemName, this.client.apiVersion(), this.client.acceptLanguage(), input, this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<MigrationItemInner>() { }.getType());
    }
    /**
     * Updates migration item.
     * The operation to update the recovery settings of an ASR migration item.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param properties Update migration item input properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the MigrationItemInner object if successful.
     */
    public MigrationItemInner update(String fabricName, String protectionContainerName, String migrationItemName, UpdateMigrationItemInputProperties properties) {
        return updateWithServiceResponseAsync(fabricName, protectionContainerName, migrationItemName, properties).toBlocking().last().body();
    }

    /**
     * Updates migration item.
     * The operation to update the recovery settings of an ASR migration item.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param properties Update migration item input properties.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<MigrationItemInner> updateAsync(String fabricName, String protectionContainerName, String migrationItemName, UpdateMigrationItemInputProperties properties, final ServiceCallback<MigrationItemInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(fabricName, protectionContainerName, migrationItemName, properties), serviceCallback);
    }

    /**
     * Updates migration item.
     * The operation to update the recovery settings of an ASR migration item.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param properties Update migration item input properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<MigrationItemInner> updateAsync(String fabricName, String protectionContainerName, String migrationItemName, UpdateMigrationItemInputProperties properties) {
        return updateWithServiceResponseAsync(fabricName, protectionContainerName, migrationItemName, properties).map(new Func1<ServiceResponse<MigrationItemInner>, MigrationItemInner>() {
            @Override
            public MigrationItemInner call(ServiceResponse<MigrationItemInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Updates migration item.
     * The operation to update the recovery settings of an ASR migration item.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param properties Update migration item input properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<MigrationItemInner>> updateWithServiceResponseAsync(String fabricName, String protectionContainerName, String migrationItemName, UpdateMigrationItemInputProperties properties) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (protectionContainerName == null) {
            throw new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null.");
        }
        if (migrationItemName == null) {
            throw new IllegalArgumentException("Parameter migrationItemName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(properties);
        UpdateMigrationItemInput input = new UpdateMigrationItemInput();
        input.withProperties(properties);
        Observable<Response<ResponseBody>> observable = service.update(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, protectionContainerName, migrationItemName, this.client.apiVersion(), this.client.acceptLanguage(), input, this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<MigrationItemInner>() { }.getType());
    }

    /**
     * Updates migration item.
     * The operation to update the recovery settings of an ASR migration item.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the MigrationItemInner object if successful.
     */
    public MigrationItemInner beginUpdate(String fabricName, String protectionContainerName, String migrationItemName) {
        return beginUpdateWithServiceResponseAsync(fabricName, protectionContainerName, migrationItemName).toBlocking().single().body();
    }

    /**
     * Updates migration item.
     * The operation to update the recovery settings of an ASR migration item.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<MigrationItemInner> beginUpdateAsync(String fabricName, String protectionContainerName, String migrationItemName, final ServiceCallback<MigrationItemInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginUpdateWithServiceResponseAsync(fabricName, protectionContainerName, migrationItemName), serviceCallback);
    }

    /**
     * Updates migration item.
     * The operation to update the recovery settings of an ASR migration item.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the MigrationItemInner object
     */
    public Observable<MigrationItemInner> beginUpdateAsync(String fabricName, String protectionContainerName, String migrationItemName) {
        return beginUpdateWithServiceResponseAsync(fabricName, protectionContainerName, migrationItemName).map(new Func1<ServiceResponse<MigrationItemInner>, MigrationItemInner>() {
            @Override
            public MigrationItemInner call(ServiceResponse<MigrationItemInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Updates migration item.
     * The operation to update the recovery settings of an ASR migration item.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the MigrationItemInner object
     */
    public Observable<ServiceResponse<MigrationItemInner>> beginUpdateWithServiceResponseAsync(String fabricName, String protectionContainerName, String migrationItemName) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (protectionContainerName == null) {
            throw new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null.");
        }
        if (migrationItemName == null) {
            throw new IllegalArgumentException("Parameter migrationItemName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final UpdateMigrationItemInputProperties properties = null;
        UpdateMigrationItemInput input = new UpdateMigrationItemInput();
        input.withProperties(null);
        return service.beginUpdate(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, protectionContainerName, migrationItemName, this.client.apiVersion(), this.client.acceptLanguage(), input, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<MigrationItemInner>>>() {
                @Override
                public Observable<ServiceResponse<MigrationItemInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<MigrationItemInner> clientResponse = beginUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Updates migration item.
     * The operation to update the recovery settings of an ASR migration item.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param properties Update migration item input properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the MigrationItemInner object if successful.
     */
    public MigrationItemInner beginUpdate(String fabricName, String protectionContainerName, String migrationItemName, UpdateMigrationItemInputProperties properties) {
        return beginUpdateWithServiceResponseAsync(fabricName, protectionContainerName, migrationItemName, properties).toBlocking().single().body();
    }

    /**
     * Updates migration item.
     * The operation to update the recovery settings of an ASR migration item.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param properties Update migration item input properties.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<MigrationItemInner> beginUpdateAsync(String fabricName, String protectionContainerName, String migrationItemName, UpdateMigrationItemInputProperties properties, final ServiceCallback<MigrationItemInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginUpdateWithServiceResponseAsync(fabricName, protectionContainerName, migrationItemName, properties), serviceCallback);
    }

    /**
     * Updates migration item.
     * The operation to update the recovery settings of an ASR migration item.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param properties Update migration item input properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the MigrationItemInner object
     */
    public Observable<MigrationItemInner> beginUpdateAsync(String fabricName, String protectionContainerName, String migrationItemName, UpdateMigrationItemInputProperties properties) {
        return beginUpdateWithServiceResponseAsync(fabricName, protectionContainerName, migrationItemName, properties).map(new Func1<ServiceResponse<MigrationItemInner>, MigrationItemInner>() {
            @Override
            public MigrationItemInner call(ServiceResponse<MigrationItemInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Updates migration item.
     * The operation to update the recovery settings of an ASR migration item.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param properties Update migration item input properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the MigrationItemInner object
     */
    public Observable<ServiceResponse<MigrationItemInner>> beginUpdateWithServiceResponseAsync(String fabricName, String protectionContainerName, String migrationItemName, UpdateMigrationItemInputProperties properties) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (protectionContainerName == null) {
            throw new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null.");
        }
        if (migrationItemName == null) {
            throw new IllegalArgumentException("Parameter migrationItemName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(properties);
        UpdateMigrationItemInput input = new UpdateMigrationItemInput();
        input.withProperties(properties);
        return service.beginUpdate(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, protectionContainerName, migrationItemName, this.client.apiVersion(), this.client.acceptLanguage(), input, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<MigrationItemInner>>>() {
                @Override
                public Observable<ServiceResponse<MigrationItemInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<MigrationItemInner> clientResponse = beginUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<MigrationItemInner> beginUpdateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<MigrationItemInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<MigrationItemInner>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Migrate item.
     * The operation to initiate migration of the item.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param properties Migrate input properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the MigrationItemInner object if successful.
     */
    public MigrationItemInner migrate(String fabricName, String protectionContainerName, String migrationItemName, MigrateInputProperties properties) {
        return migrateWithServiceResponseAsync(fabricName, protectionContainerName, migrationItemName, properties).toBlocking().last().body();
    }

    /**
     * Migrate item.
     * The operation to initiate migration of the item.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param properties Migrate input properties.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<MigrationItemInner> migrateAsync(String fabricName, String protectionContainerName, String migrationItemName, MigrateInputProperties properties, final ServiceCallback<MigrationItemInner> serviceCallback) {
        return ServiceFuture.fromResponse(migrateWithServiceResponseAsync(fabricName, protectionContainerName, migrationItemName, properties), serviceCallback);
    }

    /**
     * Migrate item.
     * The operation to initiate migration of the item.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param properties Migrate input properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<MigrationItemInner> migrateAsync(String fabricName, String protectionContainerName, String migrationItemName, MigrateInputProperties properties) {
        return migrateWithServiceResponseAsync(fabricName, protectionContainerName, migrationItemName, properties).map(new Func1<ServiceResponse<MigrationItemInner>, MigrationItemInner>() {
            @Override
            public MigrationItemInner call(ServiceResponse<MigrationItemInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Migrate item.
     * The operation to initiate migration of the item.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param properties Migrate input properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<MigrationItemInner>> migrateWithServiceResponseAsync(String fabricName, String protectionContainerName, String migrationItemName, MigrateInputProperties properties) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (protectionContainerName == null) {
            throw new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null.");
        }
        if (migrationItemName == null) {
            throw new IllegalArgumentException("Parameter migrationItemName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (properties == null) {
            throw new IllegalArgumentException("Parameter properties is required and cannot be null.");
        }
        Validator.validate(properties);
        MigrateInput migrateInput = new MigrateInput();
        migrateInput.withProperties(properties);
        Observable<Response<ResponseBody>> observable = service.migrate(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, protectionContainerName, migrationItemName, this.client.apiVersion(), this.client.acceptLanguage(), migrateInput, this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<MigrationItemInner>() { }.getType());
    }

    /**
     * Migrate item.
     * The operation to initiate migration of the item.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param properties Migrate input properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the MigrationItemInner object if successful.
     */
    public MigrationItemInner beginMigrate(String fabricName, String protectionContainerName, String migrationItemName, MigrateInputProperties properties) {
        return beginMigrateWithServiceResponseAsync(fabricName, protectionContainerName, migrationItemName, properties).toBlocking().single().body();
    }

    /**
     * Migrate item.
     * The operation to initiate migration of the item.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param properties Migrate input properties.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<MigrationItemInner> beginMigrateAsync(String fabricName, String protectionContainerName, String migrationItemName, MigrateInputProperties properties, final ServiceCallback<MigrationItemInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginMigrateWithServiceResponseAsync(fabricName, protectionContainerName, migrationItemName, properties), serviceCallback);
    }

    /**
     * Migrate item.
     * The operation to initiate migration of the item.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param properties Migrate input properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the MigrationItemInner object
     */
    public Observable<MigrationItemInner> beginMigrateAsync(String fabricName, String protectionContainerName, String migrationItemName, MigrateInputProperties properties) {
        return beginMigrateWithServiceResponseAsync(fabricName, protectionContainerName, migrationItemName, properties).map(new Func1<ServiceResponse<MigrationItemInner>, MigrationItemInner>() {
            @Override
            public MigrationItemInner call(ServiceResponse<MigrationItemInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Migrate item.
     * The operation to initiate migration of the item.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param properties Migrate input properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the MigrationItemInner object
     */
    public Observable<ServiceResponse<MigrationItemInner>> beginMigrateWithServiceResponseAsync(String fabricName, String protectionContainerName, String migrationItemName, MigrateInputProperties properties) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (protectionContainerName == null) {
            throw new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null.");
        }
        if (migrationItemName == null) {
            throw new IllegalArgumentException("Parameter migrationItemName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (properties == null) {
            throw new IllegalArgumentException("Parameter properties is required and cannot be null.");
        }
        Validator.validate(properties);
        MigrateInput migrateInput = new MigrateInput();
        migrateInput.withProperties(properties);
        return service.beginMigrate(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, protectionContainerName, migrationItemName, this.client.apiVersion(), this.client.acceptLanguage(), migrateInput, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<MigrationItemInner>>>() {
                @Override
                public Observable<ServiceResponse<MigrationItemInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<MigrationItemInner> clientResponse = beginMigrateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<MigrationItemInner> beginMigrateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<MigrationItemInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<MigrationItemInner>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Resynchronizes replication.
     * The operation to resynchronize replication of an ASR migration item.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param properties Resync input properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the MigrationItemInner object if successful.
     */
    public MigrationItemInner resync(String fabricName, String protectionContainerName, String migrationItemName, ResyncInputProperties properties) {
        return resyncWithServiceResponseAsync(fabricName, protectionContainerName, migrationItemName, properties).toBlocking().last().body();
    }

    /**
     * Resynchronizes replication.
     * The operation to resynchronize replication of an ASR migration item.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param properties Resync input properties.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<MigrationItemInner> resyncAsync(String fabricName, String protectionContainerName, String migrationItemName, ResyncInputProperties properties, final ServiceCallback<MigrationItemInner> serviceCallback) {
        return ServiceFuture.fromResponse(resyncWithServiceResponseAsync(fabricName, protectionContainerName, migrationItemName, properties), serviceCallback);
    }

    /**
     * Resynchronizes replication.
     * The operation to resynchronize replication of an ASR migration item.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param properties Resync input properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<MigrationItemInner> resyncAsync(String fabricName, String protectionContainerName, String migrationItemName, ResyncInputProperties properties) {
        return resyncWithServiceResponseAsync(fabricName, protectionContainerName, migrationItemName, properties).map(new Func1<ServiceResponse<MigrationItemInner>, MigrationItemInner>() {
            @Override
            public MigrationItemInner call(ServiceResponse<MigrationItemInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Resynchronizes replication.
     * The operation to resynchronize replication of an ASR migration item.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param properties Resync input properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<MigrationItemInner>> resyncWithServiceResponseAsync(String fabricName, String protectionContainerName, String migrationItemName, ResyncInputProperties properties) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (protectionContainerName == null) {
            throw new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null.");
        }
        if (migrationItemName == null) {
            throw new IllegalArgumentException("Parameter migrationItemName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (properties == null) {
            throw new IllegalArgumentException("Parameter properties is required and cannot be null.");
        }
        Validator.validate(properties);
        ResyncInput input = new ResyncInput();
        input.withProperties(properties);
        Observable<Response<ResponseBody>> observable = service.resync(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, protectionContainerName, migrationItemName, this.client.apiVersion(), this.client.acceptLanguage(), input, this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<MigrationItemInner>() { }.getType());
    }

    /**
     * Resynchronizes replication.
     * The operation to resynchronize replication of an ASR migration item.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param properties Resync input properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the MigrationItemInner object if successful.
     */
    public MigrationItemInner beginResync(String fabricName, String protectionContainerName, String migrationItemName, ResyncInputProperties properties) {
        return beginResyncWithServiceResponseAsync(fabricName, protectionContainerName, migrationItemName, properties).toBlocking().single().body();
    }

    /**
     * Resynchronizes replication.
     * The operation to resynchronize replication of an ASR migration item.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param properties Resync input properties.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<MigrationItemInner> beginResyncAsync(String fabricName, String protectionContainerName, String migrationItemName, ResyncInputProperties properties, final ServiceCallback<MigrationItemInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginResyncWithServiceResponseAsync(fabricName, protectionContainerName, migrationItemName, properties), serviceCallback);
    }

    /**
     * Resynchronizes replication.
     * The operation to resynchronize replication of an ASR migration item.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param properties Resync input properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the MigrationItemInner object
     */
    public Observable<MigrationItemInner> beginResyncAsync(String fabricName, String protectionContainerName, String migrationItemName, ResyncInputProperties properties) {
        return beginResyncWithServiceResponseAsync(fabricName, protectionContainerName, migrationItemName, properties).map(new Func1<ServiceResponse<MigrationItemInner>, MigrationItemInner>() {
            @Override
            public MigrationItemInner call(ServiceResponse<MigrationItemInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Resynchronizes replication.
     * The operation to resynchronize replication of an ASR migration item.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param properties Resync input properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the MigrationItemInner object
     */
    public Observable<ServiceResponse<MigrationItemInner>> beginResyncWithServiceResponseAsync(String fabricName, String protectionContainerName, String migrationItemName, ResyncInputProperties properties) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (protectionContainerName == null) {
            throw new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null.");
        }
        if (migrationItemName == null) {
            throw new IllegalArgumentException("Parameter migrationItemName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (properties == null) {
            throw new IllegalArgumentException("Parameter properties is required and cannot be null.");
        }
        Validator.validate(properties);
        ResyncInput input = new ResyncInput();
        input.withProperties(properties);
        return service.beginResync(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, protectionContainerName, migrationItemName, this.client.apiVersion(), this.client.acceptLanguage(), input, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<MigrationItemInner>>>() {
                @Override
                public Observable<ServiceResponse<MigrationItemInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<MigrationItemInner> clientResponse = beginResyncDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<MigrationItemInner> beginResyncDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<MigrationItemInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<MigrationItemInner>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Test migrate item.
     * The operation to initiate test migration of the item.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param properties Test migrate input properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the MigrationItemInner object if successful.
     */
    public MigrationItemInner testMigrate(String fabricName, String protectionContainerName, String migrationItemName, TestMigrateInputProperties properties) {
        return testMigrateWithServiceResponseAsync(fabricName, protectionContainerName, migrationItemName, properties).toBlocking().last().body();
    }

    /**
     * Test migrate item.
     * The operation to initiate test migration of the item.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param properties Test migrate input properties.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<MigrationItemInner> testMigrateAsync(String fabricName, String protectionContainerName, String migrationItemName, TestMigrateInputProperties properties, final ServiceCallback<MigrationItemInner> serviceCallback) {
        return ServiceFuture.fromResponse(testMigrateWithServiceResponseAsync(fabricName, protectionContainerName, migrationItemName, properties), serviceCallback);
    }

    /**
     * Test migrate item.
     * The operation to initiate test migration of the item.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param properties Test migrate input properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<MigrationItemInner> testMigrateAsync(String fabricName, String protectionContainerName, String migrationItemName, TestMigrateInputProperties properties) {
        return testMigrateWithServiceResponseAsync(fabricName, protectionContainerName, migrationItemName, properties).map(new Func1<ServiceResponse<MigrationItemInner>, MigrationItemInner>() {
            @Override
            public MigrationItemInner call(ServiceResponse<MigrationItemInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Test migrate item.
     * The operation to initiate test migration of the item.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param properties Test migrate input properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<MigrationItemInner>> testMigrateWithServiceResponseAsync(String fabricName, String protectionContainerName, String migrationItemName, TestMigrateInputProperties properties) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (protectionContainerName == null) {
            throw new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null.");
        }
        if (migrationItemName == null) {
            throw new IllegalArgumentException("Parameter migrationItemName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (properties == null) {
            throw new IllegalArgumentException("Parameter properties is required and cannot be null.");
        }
        Validator.validate(properties);
        TestMigrateInput testMigrateInput = new TestMigrateInput();
        testMigrateInput.withProperties(properties);
        Observable<Response<ResponseBody>> observable = service.testMigrate(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, protectionContainerName, migrationItemName, this.client.apiVersion(), this.client.acceptLanguage(), testMigrateInput, this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<MigrationItemInner>() { }.getType());
    }

    /**
     * Test migrate item.
     * The operation to initiate test migration of the item.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param properties Test migrate input properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the MigrationItemInner object if successful.
     */
    public MigrationItemInner beginTestMigrate(String fabricName, String protectionContainerName, String migrationItemName, TestMigrateInputProperties properties) {
        return beginTestMigrateWithServiceResponseAsync(fabricName, protectionContainerName, migrationItemName, properties).toBlocking().single().body();
    }

    /**
     * Test migrate item.
     * The operation to initiate test migration of the item.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param properties Test migrate input properties.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<MigrationItemInner> beginTestMigrateAsync(String fabricName, String protectionContainerName, String migrationItemName, TestMigrateInputProperties properties, final ServiceCallback<MigrationItemInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginTestMigrateWithServiceResponseAsync(fabricName, protectionContainerName, migrationItemName, properties), serviceCallback);
    }

    /**
     * Test migrate item.
     * The operation to initiate test migration of the item.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param properties Test migrate input properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the MigrationItemInner object
     */
    public Observable<MigrationItemInner> beginTestMigrateAsync(String fabricName, String protectionContainerName, String migrationItemName, TestMigrateInputProperties properties) {
        return beginTestMigrateWithServiceResponseAsync(fabricName, protectionContainerName, migrationItemName, properties).map(new Func1<ServiceResponse<MigrationItemInner>, MigrationItemInner>() {
            @Override
            public MigrationItemInner call(ServiceResponse<MigrationItemInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Test migrate item.
     * The operation to initiate test migration of the item.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param properties Test migrate input properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the MigrationItemInner object
     */
    public Observable<ServiceResponse<MigrationItemInner>> beginTestMigrateWithServiceResponseAsync(String fabricName, String protectionContainerName, String migrationItemName, TestMigrateInputProperties properties) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (protectionContainerName == null) {
            throw new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null.");
        }
        if (migrationItemName == null) {
            throw new IllegalArgumentException("Parameter migrationItemName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (properties == null) {
            throw new IllegalArgumentException("Parameter properties is required and cannot be null.");
        }
        Validator.validate(properties);
        TestMigrateInput testMigrateInput = new TestMigrateInput();
        testMigrateInput.withProperties(properties);
        return service.beginTestMigrate(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, protectionContainerName, migrationItemName, this.client.apiVersion(), this.client.acceptLanguage(), testMigrateInput, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<MigrationItemInner>>>() {
                @Override
                public Observable<ServiceResponse<MigrationItemInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<MigrationItemInner> clientResponse = beginTestMigrateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<MigrationItemInner> beginTestMigrateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<MigrationItemInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<MigrationItemInner>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Test migrate cleanup.
     * The operation to initiate test migrate cleanup.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param properties Test migrate cleanup input properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the MigrationItemInner object if successful.
     */
    public MigrationItemInner testMigrateCleanup(String fabricName, String protectionContainerName, String migrationItemName, TestMigrateCleanupInputProperties properties) {
        return testMigrateCleanupWithServiceResponseAsync(fabricName, protectionContainerName, migrationItemName, properties).toBlocking().last().body();
    }

    /**
     * Test migrate cleanup.
     * The operation to initiate test migrate cleanup.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param properties Test migrate cleanup input properties.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<MigrationItemInner> testMigrateCleanupAsync(String fabricName, String protectionContainerName, String migrationItemName, TestMigrateCleanupInputProperties properties, final ServiceCallback<MigrationItemInner> serviceCallback) {
        return ServiceFuture.fromResponse(testMigrateCleanupWithServiceResponseAsync(fabricName, protectionContainerName, migrationItemName, properties), serviceCallback);
    }

    /**
     * Test migrate cleanup.
     * The operation to initiate test migrate cleanup.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param properties Test migrate cleanup input properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<MigrationItemInner> testMigrateCleanupAsync(String fabricName, String protectionContainerName, String migrationItemName, TestMigrateCleanupInputProperties properties) {
        return testMigrateCleanupWithServiceResponseAsync(fabricName, protectionContainerName, migrationItemName, properties).map(new Func1<ServiceResponse<MigrationItemInner>, MigrationItemInner>() {
            @Override
            public MigrationItemInner call(ServiceResponse<MigrationItemInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Test migrate cleanup.
     * The operation to initiate test migrate cleanup.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param properties Test migrate cleanup input properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<MigrationItemInner>> testMigrateCleanupWithServiceResponseAsync(String fabricName, String protectionContainerName, String migrationItemName, TestMigrateCleanupInputProperties properties) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (protectionContainerName == null) {
            throw new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null.");
        }
        if (migrationItemName == null) {
            throw new IllegalArgumentException("Parameter migrationItemName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (properties == null) {
            throw new IllegalArgumentException("Parameter properties is required and cannot be null.");
        }
        Validator.validate(properties);
        TestMigrateCleanupInput testMigrateCleanupInput = new TestMigrateCleanupInput();
        testMigrateCleanupInput.withProperties(properties);
        Observable<Response<ResponseBody>> observable = service.testMigrateCleanup(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, protectionContainerName, migrationItemName, this.client.apiVersion(), this.client.acceptLanguage(), testMigrateCleanupInput, this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<MigrationItemInner>() { }.getType());
    }

    /**
     * Test migrate cleanup.
     * The operation to initiate test migrate cleanup.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param properties Test migrate cleanup input properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the MigrationItemInner object if successful.
     */
    public MigrationItemInner beginTestMigrateCleanup(String fabricName, String protectionContainerName, String migrationItemName, TestMigrateCleanupInputProperties properties) {
        return beginTestMigrateCleanupWithServiceResponseAsync(fabricName, protectionContainerName, migrationItemName, properties).toBlocking().single().body();
    }

    /**
     * Test migrate cleanup.
     * The operation to initiate test migrate cleanup.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param properties Test migrate cleanup input properties.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<MigrationItemInner> beginTestMigrateCleanupAsync(String fabricName, String protectionContainerName, String migrationItemName, TestMigrateCleanupInputProperties properties, final ServiceCallback<MigrationItemInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginTestMigrateCleanupWithServiceResponseAsync(fabricName, protectionContainerName, migrationItemName, properties), serviceCallback);
    }

    /**
     * Test migrate cleanup.
     * The operation to initiate test migrate cleanup.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param properties Test migrate cleanup input properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the MigrationItemInner object
     */
    public Observable<MigrationItemInner> beginTestMigrateCleanupAsync(String fabricName, String protectionContainerName, String migrationItemName, TestMigrateCleanupInputProperties properties) {
        return beginTestMigrateCleanupWithServiceResponseAsync(fabricName, protectionContainerName, migrationItemName, properties).map(new Func1<ServiceResponse<MigrationItemInner>, MigrationItemInner>() {
            @Override
            public MigrationItemInner call(ServiceResponse<MigrationItemInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Test migrate cleanup.
     * The operation to initiate test migrate cleanup.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param properties Test migrate cleanup input properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the MigrationItemInner object
     */
    public Observable<ServiceResponse<MigrationItemInner>> beginTestMigrateCleanupWithServiceResponseAsync(String fabricName, String protectionContainerName, String migrationItemName, TestMigrateCleanupInputProperties properties) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (protectionContainerName == null) {
            throw new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null.");
        }
        if (migrationItemName == null) {
            throw new IllegalArgumentException("Parameter migrationItemName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (properties == null) {
            throw new IllegalArgumentException("Parameter properties is required and cannot be null.");
        }
        Validator.validate(properties);
        TestMigrateCleanupInput testMigrateCleanupInput = new TestMigrateCleanupInput();
        testMigrateCleanupInput.withProperties(properties);
        return service.beginTestMigrateCleanup(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, protectionContainerName, migrationItemName, this.client.apiVersion(), this.client.acceptLanguage(), testMigrateCleanupInput, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<MigrationItemInner>>>() {
                @Override
                public Observable<ServiceResponse<MigrationItemInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<MigrationItemInner> clientResponse = beginTestMigrateCleanupDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<MigrationItemInner> beginTestMigrateCleanupDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<MigrationItemInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<MigrationItemInner>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets the list of migration items in the vault.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;MigrationItemInner&gt; object if successful.
     */
    public PagedList<MigrationItemInner> list() {
        ServiceResponse<Page<MigrationItemInner>> response = listSinglePageAsync().toBlocking().single();
        return new PagedList<MigrationItemInner>(response.body()) {
            @Override
            public Page<MigrationItemInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets the list of migration items in the vault.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<MigrationItemInner>> listAsync(final ListOperationCallback<MigrationItemInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSinglePageAsync(),
            new Func1<String, Observable<ServiceResponse<Page<MigrationItemInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<MigrationItemInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets the list of migration items in the vault.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;MigrationItemInner&gt; object
     */
    public Observable<Page<MigrationItemInner>> listAsync() {
        return listWithServiceResponseAsync()
            .map(new Func1<ServiceResponse<Page<MigrationItemInner>>, Page<MigrationItemInner>>() {
                @Override
                public Page<MigrationItemInner> call(ServiceResponse<Page<MigrationItemInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets the list of migration items in the vault.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;MigrationItemInner&gt; object
     */
    public Observable<ServiceResponse<Page<MigrationItemInner>>> listWithServiceResponseAsync() {
        return listSinglePageAsync()
            .concatMap(new Func1<ServiceResponse<Page<MigrationItemInner>>, Observable<ServiceResponse<Page<MigrationItemInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<MigrationItemInner>>> call(ServiceResponse<Page<MigrationItemInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets the list of migration items in the vault.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;MigrationItemInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<MigrationItemInner>>> listSinglePageAsync() {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String skipToken = null;
        final String filter = null;
        return service.list(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), this.client.apiVersion(), skipToken, filter, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<MigrationItemInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<MigrationItemInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<MigrationItemInner>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<MigrationItemInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Gets the list of migration items in the vault.
     *
     * @param skipToken The pagination token.
     * @param filter OData filter options.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;MigrationItemInner&gt; object if successful.
     */
    public PagedList<MigrationItemInner> list(final String skipToken, final String filter) {
        ServiceResponse<Page<MigrationItemInner>> response = listSinglePageAsync(skipToken, filter).toBlocking().single();
        return new PagedList<MigrationItemInner>(response.body()) {
            @Override
            public Page<MigrationItemInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets the list of migration items in the vault.
     *
     * @param skipToken The pagination token.
     * @param filter OData filter options.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<MigrationItemInner>> listAsync(final String skipToken, final String filter, final ListOperationCallback<MigrationItemInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSinglePageAsync(skipToken, filter),
            new Func1<String, Observable<ServiceResponse<Page<MigrationItemInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<MigrationItemInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets the list of migration items in the vault.
     *
     * @param skipToken The pagination token.
     * @param filter OData filter options.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;MigrationItemInner&gt; object
     */
    public Observable<Page<MigrationItemInner>> listAsync(final String skipToken, final String filter) {
        return listWithServiceResponseAsync(skipToken, filter)
            .map(new Func1<ServiceResponse<Page<MigrationItemInner>>, Page<MigrationItemInner>>() {
                @Override
                public Page<MigrationItemInner> call(ServiceResponse<Page<MigrationItemInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets the list of migration items in the vault.
     *
     * @param skipToken The pagination token.
     * @param filter OData filter options.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;MigrationItemInner&gt; object
     */
    public Observable<ServiceResponse<Page<MigrationItemInner>>> listWithServiceResponseAsync(final String skipToken, final String filter) {
        return listSinglePageAsync(skipToken, filter)
            .concatMap(new Func1<ServiceResponse<Page<MigrationItemInner>>, Observable<ServiceResponse<Page<MigrationItemInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<MigrationItemInner>>> call(ServiceResponse<Page<MigrationItemInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets the list of migration items in the vault.
     *
    ServiceResponse<PageImpl<MigrationItemInner>> * @param skipToken The pagination token.
    ServiceResponse<PageImpl<MigrationItemInner>> * @param filter OData filter options.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;MigrationItemInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<MigrationItemInner>>> listSinglePageAsync(final String skipToken, final String filter) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.list(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), this.client.apiVersion(), skipToken, filter, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<MigrationItemInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<MigrationItemInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<MigrationItemInner>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<MigrationItemInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<MigrationItemInner>> listDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<MigrationItemInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<MigrationItemInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets the list of migration items in the protection container.
     * Gets the list of ASR migration items in the protection container.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;MigrationItemInner&gt; object if successful.
     */
    public PagedList<MigrationItemInner> listByReplicationProtectionContainersNext(final String nextPageLink) {
        ServiceResponse<Page<MigrationItemInner>> response = listByReplicationProtectionContainersNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<MigrationItemInner>(response.body()) {
            @Override
            public Page<MigrationItemInner> nextPage(String nextPageLink) {
                return listByReplicationProtectionContainersNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets the list of migration items in the protection container.
     * Gets the list of ASR migration items in the protection container.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<MigrationItemInner>> listByReplicationProtectionContainersNextAsync(final String nextPageLink, final ServiceFuture<List<MigrationItemInner>> serviceFuture, final ListOperationCallback<MigrationItemInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByReplicationProtectionContainersNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<MigrationItemInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<MigrationItemInner>>> call(String nextPageLink) {
                    return listByReplicationProtectionContainersNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets the list of migration items in the protection container.
     * Gets the list of ASR migration items in the protection container.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;MigrationItemInner&gt; object
     */
    public Observable<Page<MigrationItemInner>> listByReplicationProtectionContainersNextAsync(final String nextPageLink) {
        return listByReplicationProtectionContainersNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<MigrationItemInner>>, Page<MigrationItemInner>>() {
                @Override
                public Page<MigrationItemInner> call(ServiceResponse<Page<MigrationItemInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets the list of migration items in the protection container.
     * Gets the list of ASR migration items in the protection container.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;MigrationItemInner&gt; object
     */
    public Observable<ServiceResponse<Page<MigrationItemInner>>> listByReplicationProtectionContainersNextWithServiceResponseAsync(final String nextPageLink) {
        return listByReplicationProtectionContainersNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<MigrationItemInner>>, Observable<ServiceResponse<Page<MigrationItemInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<MigrationItemInner>>> call(ServiceResponse<Page<MigrationItemInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByReplicationProtectionContainersNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets the list of migration items in the protection container.
     * Gets the list of ASR migration items in the protection container.
     *
    ServiceResponse<PageImpl<MigrationItemInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;MigrationItemInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<MigrationItemInner>>> listByReplicationProtectionContainersNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByReplicationProtectionContainersNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<MigrationItemInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<MigrationItemInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<MigrationItemInner>> result = listByReplicationProtectionContainersNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<MigrationItemInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<MigrationItemInner>> listByReplicationProtectionContainersNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<MigrationItemInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<MigrationItemInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets the list of migration items in the vault.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;MigrationItemInner&gt; object if successful.
     */
    public PagedList<MigrationItemInner> listNext(final String nextPageLink) {
        ServiceResponse<Page<MigrationItemInner>> response = listNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<MigrationItemInner>(response.body()) {
            @Override
            public Page<MigrationItemInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets the list of migration items in the vault.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<MigrationItemInner>> listNextAsync(final String nextPageLink, final ServiceFuture<List<MigrationItemInner>> serviceFuture, final ListOperationCallback<MigrationItemInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<MigrationItemInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<MigrationItemInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets the list of migration items in the vault.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;MigrationItemInner&gt; object
     */
    public Observable<Page<MigrationItemInner>> listNextAsync(final String nextPageLink) {
        return listNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<MigrationItemInner>>, Page<MigrationItemInner>>() {
                @Override
                public Page<MigrationItemInner> call(ServiceResponse<Page<MigrationItemInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets the list of migration items in the vault.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;MigrationItemInner&gt; object
     */
    public Observable<ServiceResponse<Page<MigrationItemInner>>> listNextWithServiceResponseAsync(final String nextPageLink) {
        return listNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<MigrationItemInner>>, Observable<ServiceResponse<Page<MigrationItemInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<MigrationItemInner>>> call(ServiceResponse<Page<MigrationItemInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets the list of migration items in the vault.
     *
    ServiceResponse<PageImpl<MigrationItemInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;MigrationItemInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<MigrationItemInner>>> listNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<MigrationItemInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<MigrationItemInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<MigrationItemInner>> result = listNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<MigrationItemInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<MigrationItemInner>> listNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<MigrationItemInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<MigrationItemInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
