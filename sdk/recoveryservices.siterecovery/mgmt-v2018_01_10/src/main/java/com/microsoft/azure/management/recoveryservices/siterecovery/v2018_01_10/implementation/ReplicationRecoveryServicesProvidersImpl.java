/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.recoveryservices.siterecovery.v2018_01_10.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.recoveryservices.siterecovery.v2018_01_10.ReplicationRecoveryServicesProviders;
import rx.Completable;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.recoveryservices.siterecovery.v2018_01_10.RecoveryServicesProvider;

class ReplicationRecoveryServicesProvidersImpl extends WrapperImpl<ReplicationRecoveryServicesProvidersInner> implements ReplicationRecoveryServicesProviders {
    private final RecoveryServicesManager manager;

    ReplicationRecoveryServicesProvidersImpl(RecoveryServicesManager manager) {
        super(manager.inner().replicationRecoveryServicesProviders());
        this.manager = manager;
    }

    public RecoveryServicesManager manager() {
        return this.manager;
    }

    @Override
    public RecoveryServicesProviderImpl define(String name) {
        return wrapModel(name);
    }

    private RecoveryServicesProviderImpl wrapModel(RecoveryServicesProviderInner inner) {
        return  new RecoveryServicesProviderImpl(inner, manager());
    }

    private RecoveryServicesProviderImpl wrapModel(String name) {
        return new RecoveryServicesProviderImpl(name, this.manager());
    }

    @Override
    public Observable<RecoveryServicesProvider> refreshProviderAsync(String fabricName, String providerName) {
        ReplicationRecoveryServicesProvidersInner client = this.inner();
        return client.refreshProviderAsync(fabricName, providerName)
        .map(new Func1<RecoveryServicesProviderInner, RecoveryServicesProvider>() {
            @Override
            public RecoveryServicesProvider call(RecoveryServicesProviderInner inner) {
                return new RecoveryServicesProviderImpl(inner, manager());
            }
        });
    }

    @Override
    public Completable deleteAsync(String fabricName, String providerName) {
        ReplicationRecoveryServicesProvidersInner client = this.inner();
        return client.deleteAsync(fabricName, providerName).toCompletable();
    }

    @Override
    public Observable<RecoveryServicesProvider> listAsync() {
        ReplicationRecoveryServicesProvidersInner client = this.inner();
        return client.listAsync()
        .flatMapIterable(new Func1<Page<RecoveryServicesProviderInner>, Iterable<RecoveryServicesProviderInner>>() {
            @Override
            public Iterable<RecoveryServicesProviderInner> call(Page<RecoveryServicesProviderInner> page) {
                return page.items();
            }
        })
        .map(new Func1<RecoveryServicesProviderInner, RecoveryServicesProvider>() {
            @Override
            public RecoveryServicesProvider call(RecoveryServicesProviderInner inner) {
                return new RecoveryServicesProviderImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<RecoveryServicesProvider> listByReplicationFabricsAsync(final String fabricName) {
        ReplicationRecoveryServicesProvidersInner client = this.inner();
        return client.listByReplicationFabricsAsync(fabricName)
        .flatMapIterable(new Func1<Page<RecoveryServicesProviderInner>, Iterable<RecoveryServicesProviderInner>>() {
            @Override
            public Iterable<RecoveryServicesProviderInner> call(Page<RecoveryServicesProviderInner> page) {
                return page.items();
            }
        })
        .map(new Func1<RecoveryServicesProviderInner, RecoveryServicesProvider>() {
            @Override
            public RecoveryServicesProvider call(RecoveryServicesProviderInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public Observable<RecoveryServicesProvider> getAsync(String fabricName, String providerName) {
        ReplicationRecoveryServicesProvidersInner client = this.inner();
        return client.getAsync(fabricName, providerName)
        .flatMap(new Func1<RecoveryServicesProviderInner, Observable<RecoveryServicesProvider>>() {
            @Override
            public Observable<RecoveryServicesProvider> call(RecoveryServicesProviderInner inner) {
                if (inner == null) {
                    return Observable.empty();
                } else {
                    return Observable.just((RecoveryServicesProvider)wrapModel(inner));
                }
            }
       });
    }

    @Override
    public Completable purgeAsync(String fabricName, String providerName) {
        ReplicationRecoveryServicesProvidersInner client = this.inner();
        return client.purgeAsync(fabricName, providerName).toCompletable();
    }

}
