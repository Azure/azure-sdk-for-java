/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.CloudException;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.CreatePolicyInput;
import com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.CreatePolicyInputProperties;
import com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.UpdatePolicyInput;
import com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.UpdatePolicyInputProperties;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.PATCH;
import retrofit2.http.Path;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in ReplicationPolicies.
 */
public class ReplicationPoliciesInner {
    /** The Retrofit service to perform REST calls. */
    private ReplicationPoliciesService service;
    /** The service client containing this operation class. */
    private SiteRecoveryManagementClientImpl client;

    /**
     * Initializes an instance of ReplicationPoliciesInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public ReplicationPoliciesInner(Retrofit retrofit, SiteRecoveryManagementClientImpl client) {
        this.service = retrofit.create(ReplicationPoliciesService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for ReplicationPolicies to be
     * used by Retrofit to perform actually REST calls.
     */
    interface ReplicationPoliciesService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationPolicies get" })
        @GET("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationPolicies/{policyName}")
        Observable<Response<ResponseBody>> get(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("policyName") String policyName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationPolicies create" })
        @PUT("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationPolicies/{policyName}")
        Observable<Response<ResponseBody>> create(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("policyName") String policyName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body CreatePolicyInput input, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationPolicies beginCreate" })
        @PUT("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationPolicies/{policyName}")
        Observable<Response<ResponseBody>> beginCreate(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("policyName") String policyName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body CreatePolicyInput input, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationPolicies delete" })
        @HTTP(path = "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationPolicies/{policyName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("policyName") String policyName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationPolicies beginDelete" })
        @HTTP(path = "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationPolicies/{policyName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> beginDelete(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("policyName") String policyName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationPolicies update" })
        @PATCH("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationPolicies/{policyName}")
        Observable<Response<ResponseBody>> update(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("policyName") String policyName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body UpdatePolicyInput input, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationPolicies beginUpdate" })
        @PATCH("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationPolicies/{policyName}")
        Observable<Response<ResponseBody>> beginUpdate(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("policyName") String policyName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body UpdatePolicyInput input, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationPolicies list" })
        @GET("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationPolicies")
        Observable<Response<ResponseBody>> list(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationPolicies listNext" })
        @GET
        Observable<Response<ResponseBody>> listNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Gets the requested policy.
     * Gets the details of a replication policy.
     *
     * @param policyName Replication policy name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PolicyInner object if successful.
     */
    public PolicyInner get(String policyName) {
        return getWithServiceResponseAsync(policyName).toBlocking().single().body();
    }

    /**
     * Gets the requested policy.
     * Gets the details of a replication policy.
     *
     * @param policyName Replication policy name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<PolicyInner> getAsync(String policyName, final ServiceCallback<PolicyInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(policyName), serviceCallback);
    }

    /**
     * Gets the requested policy.
     * Gets the details of a replication policy.
     *
     * @param policyName Replication policy name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PolicyInner object
     */
    public Observable<PolicyInner> getAsync(String policyName) {
        return getWithServiceResponseAsync(policyName).map(new Func1<ServiceResponse<PolicyInner>, PolicyInner>() {
            @Override
            public PolicyInner call(ServiceResponse<PolicyInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets the requested policy.
     * Gets the details of a replication policy.
     *
     * @param policyName Replication policy name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PolicyInner object
     */
    public Observable<ServiceResponse<PolicyInner>> getWithServiceResponseAsync(String policyName) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (policyName == null) {
            throw new IllegalArgumentException("Parameter policyName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.get(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), policyName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<PolicyInner>>>() {
                @Override
                public Observable<ServiceResponse<PolicyInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PolicyInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PolicyInner> getDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PolicyInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PolicyInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Creates the policy.
     * The operation to create a replication policy.
     *
     * @param policyName Replication policy name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PolicyInner object if successful.
     */
    public PolicyInner create(String policyName) {
        return createWithServiceResponseAsync(policyName).toBlocking().last().body();
    }

    /**
     * Creates the policy.
     * The operation to create a replication policy.
     *
     * @param policyName Replication policy name
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<PolicyInner> createAsync(String policyName, final ServiceCallback<PolicyInner> serviceCallback) {
        return ServiceFuture.fromResponse(createWithServiceResponseAsync(policyName), serviceCallback);
    }

    /**
     * Creates the policy.
     * The operation to create a replication policy.
     *
     * @param policyName Replication policy name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<PolicyInner> createAsync(String policyName) {
        return createWithServiceResponseAsync(policyName).map(new Func1<ServiceResponse<PolicyInner>, PolicyInner>() {
            @Override
            public PolicyInner call(ServiceResponse<PolicyInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates the policy.
     * The operation to create a replication policy.
     *
     * @param policyName Replication policy name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<PolicyInner>> createWithServiceResponseAsync(String policyName) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (policyName == null) {
            throw new IllegalArgumentException("Parameter policyName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final CreatePolicyInputProperties properties = null;
        CreatePolicyInput input = new CreatePolicyInput();
        input.withProperties(null);
        Observable<Response<ResponseBody>> observable = service.create(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), policyName, this.client.apiVersion(), this.client.acceptLanguage(), input, this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<PolicyInner>() { }.getType());
    }
    /**
     * Creates the policy.
     * The operation to create a replication policy.
     *
     * @param policyName Replication policy name
     * @param properties Policy creation properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PolicyInner object if successful.
     */
    public PolicyInner create(String policyName, CreatePolicyInputProperties properties) {
        return createWithServiceResponseAsync(policyName, properties).toBlocking().last().body();
    }

    /**
     * Creates the policy.
     * The operation to create a replication policy.
     *
     * @param policyName Replication policy name
     * @param properties Policy creation properties.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<PolicyInner> createAsync(String policyName, CreatePolicyInputProperties properties, final ServiceCallback<PolicyInner> serviceCallback) {
        return ServiceFuture.fromResponse(createWithServiceResponseAsync(policyName, properties), serviceCallback);
    }

    /**
     * Creates the policy.
     * The operation to create a replication policy.
     *
     * @param policyName Replication policy name
     * @param properties Policy creation properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<PolicyInner> createAsync(String policyName, CreatePolicyInputProperties properties) {
        return createWithServiceResponseAsync(policyName, properties).map(new Func1<ServiceResponse<PolicyInner>, PolicyInner>() {
            @Override
            public PolicyInner call(ServiceResponse<PolicyInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates the policy.
     * The operation to create a replication policy.
     *
     * @param policyName Replication policy name
     * @param properties Policy creation properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<PolicyInner>> createWithServiceResponseAsync(String policyName, CreatePolicyInputProperties properties) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (policyName == null) {
            throw new IllegalArgumentException("Parameter policyName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(properties);
        CreatePolicyInput input = new CreatePolicyInput();
        input.withProperties(properties);
        Observable<Response<ResponseBody>> observable = service.create(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), policyName, this.client.apiVersion(), this.client.acceptLanguage(), input, this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<PolicyInner>() { }.getType());
    }

    /**
     * Creates the policy.
     * The operation to create a replication policy.
     *
     * @param policyName Replication policy name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PolicyInner object if successful.
     */
    public PolicyInner beginCreate(String policyName) {
        return beginCreateWithServiceResponseAsync(policyName).toBlocking().single().body();
    }

    /**
     * Creates the policy.
     * The operation to create a replication policy.
     *
     * @param policyName Replication policy name
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<PolicyInner> beginCreateAsync(String policyName, final ServiceCallback<PolicyInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginCreateWithServiceResponseAsync(policyName), serviceCallback);
    }

    /**
     * Creates the policy.
     * The operation to create a replication policy.
     *
     * @param policyName Replication policy name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PolicyInner object
     */
    public Observable<PolicyInner> beginCreateAsync(String policyName) {
        return beginCreateWithServiceResponseAsync(policyName).map(new Func1<ServiceResponse<PolicyInner>, PolicyInner>() {
            @Override
            public PolicyInner call(ServiceResponse<PolicyInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates the policy.
     * The operation to create a replication policy.
     *
     * @param policyName Replication policy name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PolicyInner object
     */
    public Observable<ServiceResponse<PolicyInner>> beginCreateWithServiceResponseAsync(String policyName) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (policyName == null) {
            throw new IllegalArgumentException("Parameter policyName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final CreatePolicyInputProperties properties = null;
        CreatePolicyInput input = new CreatePolicyInput();
        input.withProperties(null);
        return service.beginCreate(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), policyName, this.client.apiVersion(), this.client.acceptLanguage(), input, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<PolicyInner>>>() {
                @Override
                public Observable<ServiceResponse<PolicyInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PolicyInner> clientResponse = beginCreateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Creates the policy.
     * The operation to create a replication policy.
     *
     * @param policyName Replication policy name
     * @param properties Policy creation properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PolicyInner object if successful.
     */
    public PolicyInner beginCreate(String policyName, CreatePolicyInputProperties properties) {
        return beginCreateWithServiceResponseAsync(policyName, properties).toBlocking().single().body();
    }

    /**
     * Creates the policy.
     * The operation to create a replication policy.
     *
     * @param policyName Replication policy name
     * @param properties Policy creation properties.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<PolicyInner> beginCreateAsync(String policyName, CreatePolicyInputProperties properties, final ServiceCallback<PolicyInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginCreateWithServiceResponseAsync(policyName, properties), serviceCallback);
    }

    /**
     * Creates the policy.
     * The operation to create a replication policy.
     *
     * @param policyName Replication policy name
     * @param properties Policy creation properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PolicyInner object
     */
    public Observable<PolicyInner> beginCreateAsync(String policyName, CreatePolicyInputProperties properties) {
        return beginCreateWithServiceResponseAsync(policyName, properties).map(new Func1<ServiceResponse<PolicyInner>, PolicyInner>() {
            @Override
            public PolicyInner call(ServiceResponse<PolicyInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates the policy.
     * The operation to create a replication policy.
     *
     * @param policyName Replication policy name
     * @param properties Policy creation properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PolicyInner object
     */
    public Observable<ServiceResponse<PolicyInner>> beginCreateWithServiceResponseAsync(String policyName, CreatePolicyInputProperties properties) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (policyName == null) {
            throw new IllegalArgumentException("Parameter policyName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(properties);
        CreatePolicyInput input = new CreatePolicyInput();
        input.withProperties(properties);
        return service.beginCreate(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), policyName, this.client.apiVersion(), this.client.acceptLanguage(), input, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<PolicyInner>>>() {
                @Override
                public Observable<ServiceResponse<PolicyInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PolicyInner> clientResponse = beginCreateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PolicyInner> beginCreateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PolicyInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PolicyInner>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Delete the policy.
     * The operation to delete a replication policy.
     *
     * @param policyName Replication policy name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String policyName) {
        deleteWithServiceResponseAsync(policyName).toBlocking().last().body();
    }

    /**
     * Delete the policy.
     * The operation to delete a replication policy.
     *
     * @param policyName Replication policy name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String policyName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(policyName), serviceCallback);
    }

    /**
     * Delete the policy.
     * The operation to delete a replication policy.
     *
     * @param policyName Replication policy name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Void> deleteAsync(String policyName) {
        return deleteWithServiceResponseAsync(policyName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Delete the policy.
     * The operation to delete a replication policy.
     *
     * @param policyName Replication policy name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String policyName) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (policyName == null) {
            throw new IllegalArgumentException("Parameter policyName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Observable<Response<ResponseBody>> observable = service.delete(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), policyName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<Void>() { }.getType());
    }

    /**
     * Delete the policy.
     * The operation to delete a replication policy.
     *
     * @param policyName Replication policy name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void beginDelete(String policyName) {
        beginDeleteWithServiceResponseAsync(policyName).toBlocking().single().body();
    }

    /**
     * Delete the policy.
     * The operation to delete a replication policy.
     *
     * @param policyName Replication policy name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> beginDeleteAsync(String policyName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(beginDeleteWithServiceResponseAsync(policyName), serviceCallback);
    }

    /**
     * Delete the policy.
     * The operation to delete a replication policy.
     *
     * @param policyName Replication policy name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> beginDeleteAsync(String policyName) {
        return beginDeleteWithServiceResponseAsync(policyName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Delete the policy.
     * The operation to delete a replication policy.
     *
     * @param policyName Replication policy name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> beginDeleteWithServiceResponseAsync(String policyName) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (policyName == null) {
            throw new IllegalArgumentException("Parameter policyName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.beginDelete(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), policyName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = beginDeleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> beginDeleteDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CloudException>newInstance(this.client.serializerAdapter())
                .register(202, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Updates the protection profile.
     * The operation to update a replication policy.
     *
     * @param policyName Protection profile Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PolicyInner object if successful.
     */
    public PolicyInner update(String policyName) {
        return updateWithServiceResponseAsync(policyName).toBlocking().last().body();
    }

    /**
     * Updates the protection profile.
     * The operation to update a replication policy.
     *
     * @param policyName Protection profile Id.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<PolicyInner> updateAsync(String policyName, final ServiceCallback<PolicyInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(policyName), serviceCallback);
    }

    /**
     * Updates the protection profile.
     * The operation to update a replication policy.
     *
     * @param policyName Protection profile Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<PolicyInner> updateAsync(String policyName) {
        return updateWithServiceResponseAsync(policyName).map(new Func1<ServiceResponse<PolicyInner>, PolicyInner>() {
            @Override
            public PolicyInner call(ServiceResponse<PolicyInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Updates the protection profile.
     * The operation to update a replication policy.
     *
     * @param policyName Protection profile Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<PolicyInner>> updateWithServiceResponseAsync(String policyName) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (policyName == null) {
            throw new IllegalArgumentException("Parameter policyName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final UpdatePolicyInputProperties properties = null;
        UpdatePolicyInput input = new UpdatePolicyInput();
        input.withProperties(null);
        Observable<Response<ResponseBody>> observable = service.update(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), policyName, this.client.apiVersion(), this.client.acceptLanguage(), input, this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<PolicyInner>() { }.getType());
    }
    /**
     * Updates the protection profile.
     * The operation to update a replication policy.
     *
     * @param policyName Protection profile Id.
     * @param properties The ReplicationProviderSettings.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PolicyInner object if successful.
     */
    public PolicyInner update(String policyName, UpdatePolicyInputProperties properties) {
        return updateWithServiceResponseAsync(policyName, properties).toBlocking().last().body();
    }

    /**
     * Updates the protection profile.
     * The operation to update a replication policy.
     *
     * @param policyName Protection profile Id.
     * @param properties The ReplicationProviderSettings.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<PolicyInner> updateAsync(String policyName, UpdatePolicyInputProperties properties, final ServiceCallback<PolicyInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(policyName, properties), serviceCallback);
    }

    /**
     * Updates the protection profile.
     * The operation to update a replication policy.
     *
     * @param policyName Protection profile Id.
     * @param properties The ReplicationProviderSettings.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<PolicyInner> updateAsync(String policyName, UpdatePolicyInputProperties properties) {
        return updateWithServiceResponseAsync(policyName, properties).map(new Func1<ServiceResponse<PolicyInner>, PolicyInner>() {
            @Override
            public PolicyInner call(ServiceResponse<PolicyInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Updates the protection profile.
     * The operation to update a replication policy.
     *
     * @param policyName Protection profile Id.
     * @param properties The ReplicationProviderSettings.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<PolicyInner>> updateWithServiceResponseAsync(String policyName, UpdatePolicyInputProperties properties) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (policyName == null) {
            throw new IllegalArgumentException("Parameter policyName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(properties);
        UpdatePolicyInput input = new UpdatePolicyInput();
        input.withProperties(properties);
        Observable<Response<ResponseBody>> observable = service.update(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), policyName, this.client.apiVersion(), this.client.acceptLanguage(), input, this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<PolicyInner>() { }.getType());
    }

    /**
     * Updates the protection profile.
     * The operation to update a replication policy.
     *
     * @param policyName Protection profile Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PolicyInner object if successful.
     */
    public PolicyInner beginUpdate(String policyName) {
        return beginUpdateWithServiceResponseAsync(policyName).toBlocking().single().body();
    }

    /**
     * Updates the protection profile.
     * The operation to update a replication policy.
     *
     * @param policyName Protection profile Id.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<PolicyInner> beginUpdateAsync(String policyName, final ServiceCallback<PolicyInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginUpdateWithServiceResponseAsync(policyName), serviceCallback);
    }

    /**
     * Updates the protection profile.
     * The operation to update a replication policy.
     *
     * @param policyName Protection profile Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PolicyInner object
     */
    public Observable<PolicyInner> beginUpdateAsync(String policyName) {
        return beginUpdateWithServiceResponseAsync(policyName).map(new Func1<ServiceResponse<PolicyInner>, PolicyInner>() {
            @Override
            public PolicyInner call(ServiceResponse<PolicyInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Updates the protection profile.
     * The operation to update a replication policy.
     *
     * @param policyName Protection profile Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PolicyInner object
     */
    public Observable<ServiceResponse<PolicyInner>> beginUpdateWithServiceResponseAsync(String policyName) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (policyName == null) {
            throw new IllegalArgumentException("Parameter policyName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final UpdatePolicyInputProperties properties = null;
        UpdatePolicyInput input = new UpdatePolicyInput();
        input.withProperties(null);
        return service.beginUpdate(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), policyName, this.client.apiVersion(), this.client.acceptLanguage(), input, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<PolicyInner>>>() {
                @Override
                public Observable<ServiceResponse<PolicyInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PolicyInner> clientResponse = beginUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Updates the protection profile.
     * The operation to update a replication policy.
     *
     * @param policyName Protection profile Id.
     * @param properties The ReplicationProviderSettings.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PolicyInner object if successful.
     */
    public PolicyInner beginUpdate(String policyName, UpdatePolicyInputProperties properties) {
        return beginUpdateWithServiceResponseAsync(policyName, properties).toBlocking().single().body();
    }

    /**
     * Updates the protection profile.
     * The operation to update a replication policy.
     *
     * @param policyName Protection profile Id.
     * @param properties The ReplicationProviderSettings.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<PolicyInner> beginUpdateAsync(String policyName, UpdatePolicyInputProperties properties, final ServiceCallback<PolicyInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginUpdateWithServiceResponseAsync(policyName, properties), serviceCallback);
    }

    /**
     * Updates the protection profile.
     * The operation to update a replication policy.
     *
     * @param policyName Protection profile Id.
     * @param properties The ReplicationProviderSettings.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PolicyInner object
     */
    public Observable<PolicyInner> beginUpdateAsync(String policyName, UpdatePolicyInputProperties properties) {
        return beginUpdateWithServiceResponseAsync(policyName, properties).map(new Func1<ServiceResponse<PolicyInner>, PolicyInner>() {
            @Override
            public PolicyInner call(ServiceResponse<PolicyInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Updates the protection profile.
     * The operation to update a replication policy.
     *
     * @param policyName Protection profile Id.
     * @param properties The ReplicationProviderSettings.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PolicyInner object
     */
    public Observable<ServiceResponse<PolicyInner>> beginUpdateWithServiceResponseAsync(String policyName, UpdatePolicyInputProperties properties) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (policyName == null) {
            throw new IllegalArgumentException("Parameter policyName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(properties);
        UpdatePolicyInput input = new UpdatePolicyInput();
        input.withProperties(properties);
        return service.beginUpdate(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), policyName, this.client.apiVersion(), this.client.acceptLanguage(), input, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<PolicyInner>>>() {
                @Override
                public Observable<ServiceResponse<PolicyInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PolicyInner> clientResponse = beginUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PolicyInner> beginUpdateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PolicyInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PolicyInner>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets the list of replication policies.
     * Lists the replication policies for a vault.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;PolicyInner&gt; object if successful.
     */
    public PagedList<PolicyInner> list() {
        ServiceResponse<Page<PolicyInner>> response = listSinglePageAsync().toBlocking().single();
        return new PagedList<PolicyInner>(response.body()) {
            @Override
            public Page<PolicyInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets the list of replication policies.
     * Lists the replication policies for a vault.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<PolicyInner>> listAsync(final ListOperationCallback<PolicyInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSinglePageAsync(),
            new Func1<String, Observable<ServiceResponse<Page<PolicyInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets the list of replication policies.
     * Lists the replication policies for a vault.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PolicyInner&gt; object
     */
    public Observable<Page<PolicyInner>> listAsync() {
        return listWithServiceResponseAsync()
            .map(new Func1<ServiceResponse<Page<PolicyInner>>, Page<PolicyInner>>() {
                @Override
                public Page<PolicyInner> call(ServiceResponse<Page<PolicyInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets the list of replication policies.
     * Lists the replication policies for a vault.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PolicyInner&gt; object
     */
    public Observable<ServiceResponse<Page<PolicyInner>>> listWithServiceResponseAsync() {
        return listSinglePageAsync()
            .concatMap(new Func1<ServiceResponse<Page<PolicyInner>>, Observable<ServiceResponse<Page<PolicyInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyInner>>> call(ServiceResponse<Page<PolicyInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets the list of replication policies.
     * Lists the replication policies for a vault.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;PolicyInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<PolicyInner>>> listSinglePageAsync() {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.list(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<PolicyInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<PolicyInner>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<PolicyInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<PolicyInner>> listDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<PolicyInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<PolicyInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets the list of replication policies.
     * Lists the replication policies for a vault.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;PolicyInner&gt; object if successful.
     */
    public PagedList<PolicyInner> listNext(final String nextPageLink) {
        ServiceResponse<Page<PolicyInner>> response = listNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<PolicyInner>(response.body()) {
            @Override
            public Page<PolicyInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets the list of replication policies.
     * Lists the replication policies for a vault.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<PolicyInner>> listNextAsync(final String nextPageLink, final ServiceFuture<List<PolicyInner>> serviceFuture, final ListOperationCallback<PolicyInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<PolicyInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets the list of replication policies.
     * Lists the replication policies for a vault.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PolicyInner&gt; object
     */
    public Observable<Page<PolicyInner>> listNextAsync(final String nextPageLink) {
        return listNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<PolicyInner>>, Page<PolicyInner>>() {
                @Override
                public Page<PolicyInner> call(ServiceResponse<Page<PolicyInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets the list of replication policies.
     * Lists the replication policies for a vault.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PolicyInner&gt; object
     */
    public Observable<ServiceResponse<Page<PolicyInner>>> listNextWithServiceResponseAsync(final String nextPageLink) {
        return listNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<PolicyInner>>, Observable<ServiceResponse<Page<PolicyInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyInner>>> call(ServiceResponse<Page<PolicyInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets the list of replication policies.
     * Lists the replication policies for a vault.
     *
    ServiceResponse<PageImpl<PolicyInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;PolicyInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<PolicyInner>>> listNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<PolicyInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<PolicyInner>> result = listNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<PolicyInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<PolicyInner>> listNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<PolicyInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<PolicyInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
