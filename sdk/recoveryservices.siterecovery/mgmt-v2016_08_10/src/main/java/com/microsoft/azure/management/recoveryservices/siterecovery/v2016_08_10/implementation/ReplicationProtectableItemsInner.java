/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.CloudException;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in ReplicationProtectableItems.
 */
public class ReplicationProtectableItemsInner {
    /** The Retrofit service to perform REST calls. */
    private ReplicationProtectableItemsService service;
    /** The service client containing this operation class. */
    private SiteRecoveryManagementClientImpl client;

    /**
     * Initializes an instance of ReplicationProtectableItemsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public ReplicationProtectableItemsInner(Retrofit retrofit, SiteRecoveryManagementClientImpl client) {
        this.service = retrofit.create(ReplicationProtectableItemsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for ReplicationProtectableItems to be
     * used by Retrofit to perform actually REST calls.
     */
    interface ReplicationProtectableItemsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationProtectableItems get" })
        @GET("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectableItems/{protectableItemName}")
        Observable<Response<ResponseBody>> get(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("fabricName") String fabricName, @Path("protectionContainerName") String protectionContainerName, @Path("protectableItemName") String protectableItemName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationProtectableItems listByReplicationProtectionContainers" })
        @GET("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectableItems")
        Observable<Response<ResponseBody>> listByReplicationProtectionContainers(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("fabricName") String fabricName, @Path("protectionContainerName") String protectionContainerName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationProtectableItems listByReplicationProtectionContainersNext" })
        @GET
        Observable<Response<ResponseBody>> listByReplicationProtectionContainersNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Gets the details of a protectable item.
     * The operation to get the details of a protectable item.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param protectableItemName Protectable item name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ProtectableItemInner object if successful.
     */
    public ProtectableItemInner get(String fabricName, String protectionContainerName, String protectableItemName) {
        return getWithServiceResponseAsync(fabricName, protectionContainerName, protectableItemName).toBlocking().single().body();
    }

    /**
     * Gets the details of a protectable item.
     * The operation to get the details of a protectable item.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param protectableItemName Protectable item name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ProtectableItemInner> getAsync(String fabricName, String protectionContainerName, String protectableItemName, final ServiceCallback<ProtectableItemInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(fabricName, protectionContainerName, protectableItemName), serviceCallback);
    }

    /**
     * Gets the details of a protectable item.
     * The operation to get the details of a protectable item.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param protectableItemName Protectable item name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ProtectableItemInner object
     */
    public Observable<ProtectableItemInner> getAsync(String fabricName, String protectionContainerName, String protectableItemName) {
        return getWithServiceResponseAsync(fabricName, protectionContainerName, protectableItemName).map(new Func1<ServiceResponse<ProtectableItemInner>, ProtectableItemInner>() {
            @Override
            public ProtectableItemInner call(ServiceResponse<ProtectableItemInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets the details of a protectable item.
     * The operation to get the details of a protectable item.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param protectableItemName Protectable item name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ProtectableItemInner object
     */
    public Observable<ServiceResponse<ProtectableItemInner>> getWithServiceResponseAsync(String fabricName, String protectionContainerName, String protectableItemName) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (protectionContainerName == null) {
            throw new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null.");
        }
        if (protectableItemName == null) {
            throw new IllegalArgumentException("Parameter protectableItemName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.get(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, protectionContainerName, protectableItemName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ProtectableItemInner>>>() {
                @Override
                public Observable<ServiceResponse<ProtectableItemInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ProtectableItemInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ProtectableItemInner> getDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ProtectableItemInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ProtectableItemInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets the list of protectable items.
     * Lists the protectable items in a protection container.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ProtectableItemInner&gt; object if successful.
     */
    public PagedList<ProtectableItemInner> listByReplicationProtectionContainers(final String fabricName, final String protectionContainerName) {
        ServiceResponse<Page<ProtectableItemInner>> response = listByReplicationProtectionContainersSinglePageAsync(fabricName, protectionContainerName).toBlocking().single();
        return new PagedList<ProtectableItemInner>(response.body()) {
            @Override
            public Page<ProtectableItemInner> nextPage(String nextPageLink) {
                return listByReplicationProtectionContainersNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets the list of protectable items.
     * Lists the protectable items in a protection container.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ProtectableItemInner>> listByReplicationProtectionContainersAsync(final String fabricName, final String protectionContainerName, final ListOperationCallback<ProtectableItemInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByReplicationProtectionContainersSinglePageAsync(fabricName, protectionContainerName),
            new Func1<String, Observable<ServiceResponse<Page<ProtectableItemInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ProtectableItemInner>>> call(String nextPageLink) {
                    return listByReplicationProtectionContainersNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets the list of protectable items.
     * Lists the protectable items in a protection container.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ProtectableItemInner&gt; object
     */
    public Observable<Page<ProtectableItemInner>> listByReplicationProtectionContainersAsync(final String fabricName, final String protectionContainerName) {
        return listByReplicationProtectionContainersWithServiceResponseAsync(fabricName, protectionContainerName)
            .map(new Func1<ServiceResponse<Page<ProtectableItemInner>>, Page<ProtectableItemInner>>() {
                @Override
                public Page<ProtectableItemInner> call(ServiceResponse<Page<ProtectableItemInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets the list of protectable items.
     * Lists the protectable items in a protection container.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ProtectableItemInner&gt; object
     */
    public Observable<ServiceResponse<Page<ProtectableItemInner>>> listByReplicationProtectionContainersWithServiceResponseAsync(final String fabricName, final String protectionContainerName) {
        return listByReplicationProtectionContainersSinglePageAsync(fabricName, protectionContainerName)
            .concatMap(new Func1<ServiceResponse<Page<ProtectableItemInner>>, Observable<ServiceResponse<Page<ProtectableItemInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ProtectableItemInner>>> call(ServiceResponse<Page<ProtectableItemInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByReplicationProtectionContainersNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets the list of protectable items.
     * Lists the protectable items in a protection container.
     *
    ServiceResponse<PageImpl<ProtectableItemInner>> * @param fabricName Fabric name.
    ServiceResponse<PageImpl<ProtectableItemInner>> * @param protectionContainerName Protection container name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ProtectableItemInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ProtectableItemInner>>> listByReplicationProtectionContainersSinglePageAsync(final String fabricName, final String protectionContainerName) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (protectionContainerName == null) {
            throw new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByReplicationProtectionContainers(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, protectionContainerName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ProtectableItemInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ProtectableItemInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ProtectableItemInner>> result = listByReplicationProtectionContainersDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ProtectableItemInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<ProtectableItemInner>> listByReplicationProtectionContainersDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<ProtectableItemInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<ProtectableItemInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets the list of protectable items.
     * Lists the protectable items in a protection container.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ProtectableItemInner&gt; object if successful.
     */
    public PagedList<ProtectableItemInner> listByReplicationProtectionContainersNext(final String nextPageLink) {
        ServiceResponse<Page<ProtectableItemInner>> response = listByReplicationProtectionContainersNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<ProtectableItemInner>(response.body()) {
            @Override
            public Page<ProtectableItemInner> nextPage(String nextPageLink) {
                return listByReplicationProtectionContainersNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets the list of protectable items.
     * Lists the protectable items in a protection container.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ProtectableItemInner>> listByReplicationProtectionContainersNextAsync(final String nextPageLink, final ServiceFuture<List<ProtectableItemInner>> serviceFuture, final ListOperationCallback<ProtectableItemInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByReplicationProtectionContainersNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<ProtectableItemInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ProtectableItemInner>>> call(String nextPageLink) {
                    return listByReplicationProtectionContainersNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets the list of protectable items.
     * Lists the protectable items in a protection container.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ProtectableItemInner&gt; object
     */
    public Observable<Page<ProtectableItemInner>> listByReplicationProtectionContainersNextAsync(final String nextPageLink) {
        return listByReplicationProtectionContainersNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<ProtectableItemInner>>, Page<ProtectableItemInner>>() {
                @Override
                public Page<ProtectableItemInner> call(ServiceResponse<Page<ProtectableItemInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets the list of protectable items.
     * Lists the protectable items in a protection container.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ProtectableItemInner&gt; object
     */
    public Observable<ServiceResponse<Page<ProtectableItemInner>>> listByReplicationProtectionContainersNextWithServiceResponseAsync(final String nextPageLink) {
        return listByReplicationProtectionContainersNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<ProtectableItemInner>>, Observable<ServiceResponse<Page<ProtectableItemInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ProtectableItemInner>>> call(ServiceResponse<Page<ProtectableItemInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByReplicationProtectionContainersNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets the list of protectable items.
     * Lists the protectable items in a protection container.
     *
    ServiceResponse<PageImpl<ProtectableItemInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ProtectableItemInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ProtectableItemInner>>> listByReplicationProtectionContainersNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByReplicationProtectionContainersNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ProtectableItemInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ProtectableItemInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ProtectableItemInner>> result = listByReplicationProtectionContainersNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ProtectableItemInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<ProtectableItemInner>> listByReplicationProtectionContainersNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<ProtectableItemInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<ProtectableItemInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
