/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.implementation;

import com.microsoft.azure.arm.collection.InnerSupportsDelete;
import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.CloudException;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.CreateProtectionContainerInput;
import com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.CreateProtectionContainerInputProperties;
import com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.DiscoverProtectableItemRequest;
import com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.DiscoverProtectableItemRequestProperties;
import com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.SwitchProtectionInput;
import com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.SwitchProtectionInputProperties;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in ReplicationProtectionContainers.
 */
public class ReplicationProtectionContainersInner implements InnerSupportsDelete<Void> {
    /** The Retrofit service to perform REST calls. */
    private ReplicationProtectionContainersService service;
    /** The service client containing this operation class. */
    private SiteRecoveryManagementClientImpl client;

    /**
     * Initializes an instance of ReplicationProtectionContainersInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public ReplicationProtectionContainersInner(Retrofit retrofit, SiteRecoveryManagementClientImpl client) {
        this.service = retrofit.create(ReplicationProtectionContainersService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for ReplicationProtectionContainers to be
     * used by Retrofit to perform actually REST calls.
     */
    interface ReplicationProtectionContainersService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationProtectionContainers switchProtection" })
        @POST("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/switchprotection")
        Observable<Response<ResponseBody>> switchProtection(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("fabricName") String fabricName, @Path("protectionContainerName") String protectionContainerName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body SwitchProtectionInput switchInput, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationProtectionContainers beginSwitchProtection" })
        @POST("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/switchprotection")
        Observable<Response<ResponseBody>> beginSwitchProtection(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("fabricName") String fabricName, @Path("protectionContainerName") String protectionContainerName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body SwitchProtectionInput switchInput, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationProtectionContainers delete" })
        @POST("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/remove")
        Observable<Response<ResponseBody>> delete(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("fabricName") String fabricName, @Path("protectionContainerName") String protectionContainerName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationProtectionContainers beginDelete" })
        @POST("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/remove")
        Observable<Response<ResponseBody>> beginDelete(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("fabricName") String fabricName, @Path("protectionContainerName") String protectionContainerName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationProtectionContainers discoverProtectableItem" })
        @POST("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/discoverProtectableItem")
        Observable<Response<ResponseBody>> discoverProtectableItem(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("fabricName") String fabricName, @Path("protectionContainerName") String protectionContainerName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body DiscoverProtectableItemRequest discoverProtectableItemRequest, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationProtectionContainers beginDiscoverProtectableItem" })
        @POST("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/discoverProtectableItem")
        Observable<Response<ResponseBody>> beginDiscoverProtectableItem(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("fabricName") String fabricName, @Path("protectionContainerName") String protectionContainerName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body DiscoverProtectableItemRequest discoverProtectableItemRequest, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationProtectionContainers get" })
        @GET("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}")
        Observable<Response<ResponseBody>> get(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("fabricName") String fabricName, @Path("protectionContainerName") String protectionContainerName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationProtectionContainers create" })
        @PUT("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}")
        Observable<Response<ResponseBody>> create(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("fabricName") String fabricName, @Path("protectionContainerName") String protectionContainerName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body CreateProtectionContainerInput creationInput, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationProtectionContainers beginCreate" })
        @PUT("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}")
        Observable<Response<ResponseBody>> beginCreate(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("fabricName") String fabricName, @Path("protectionContainerName") String protectionContainerName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body CreateProtectionContainerInput creationInput, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationProtectionContainers listByReplicationFabrics" })
        @GET("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers")
        Observable<Response<ResponseBody>> listByReplicationFabrics(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("fabricName") String fabricName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationProtectionContainers list" })
        @GET("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationProtectionContainers")
        Observable<Response<ResponseBody>> list(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationProtectionContainers listByReplicationFabricsNext" })
        @GET
        Observable<Response<ResponseBody>> listByReplicationFabricsNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationProtectionContainers listNext" })
        @GET
        Observable<Response<ResponseBody>> listNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Switches protection from one container to another or one replication provider to another.
     * Operation to switch protection from one container to another or one replication provider to another.
     *
     * @param fabricName Unique fabric name.
     * @param protectionContainerName Protection container name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ProtectionContainerInner object if successful.
     */
    public ProtectionContainerInner switchProtection(String fabricName, String protectionContainerName) {
        return switchProtectionWithServiceResponseAsync(fabricName, protectionContainerName).toBlocking().last().body();
    }

    /**
     * Switches protection from one container to another or one replication provider to another.
     * Operation to switch protection from one container to another or one replication provider to another.
     *
     * @param fabricName Unique fabric name.
     * @param protectionContainerName Protection container name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ProtectionContainerInner> switchProtectionAsync(String fabricName, String protectionContainerName, final ServiceCallback<ProtectionContainerInner> serviceCallback) {
        return ServiceFuture.fromResponse(switchProtectionWithServiceResponseAsync(fabricName, protectionContainerName), serviceCallback);
    }

    /**
     * Switches protection from one container to another or one replication provider to another.
     * Operation to switch protection from one container to another or one replication provider to another.
     *
     * @param fabricName Unique fabric name.
     * @param protectionContainerName Protection container name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ProtectionContainerInner> switchProtectionAsync(String fabricName, String protectionContainerName) {
        return switchProtectionWithServiceResponseAsync(fabricName, protectionContainerName).map(new Func1<ServiceResponse<ProtectionContainerInner>, ProtectionContainerInner>() {
            @Override
            public ProtectionContainerInner call(ServiceResponse<ProtectionContainerInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Switches protection from one container to another or one replication provider to another.
     * Operation to switch protection from one container to another or one replication provider to another.
     *
     * @param fabricName Unique fabric name.
     * @param protectionContainerName Protection container name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<ProtectionContainerInner>> switchProtectionWithServiceResponseAsync(String fabricName, String protectionContainerName) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (protectionContainerName == null) {
            throw new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final SwitchProtectionInputProperties properties = null;
        SwitchProtectionInput switchInput = new SwitchProtectionInput();
        switchInput.withProperties(null);
        Observable<Response<ResponseBody>> observable = service.switchProtection(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, protectionContainerName, this.client.apiVersion(), this.client.acceptLanguage(), switchInput, this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<ProtectionContainerInner>() { }.getType());
    }
    /**
     * Switches protection from one container to another or one replication provider to another.
     * Operation to switch protection from one container to another or one replication provider to another.
     *
     * @param fabricName Unique fabric name.
     * @param protectionContainerName Protection container name.
     * @param properties Switch protection properties
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ProtectionContainerInner object if successful.
     */
    public ProtectionContainerInner switchProtection(String fabricName, String protectionContainerName, SwitchProtectionInputProperties properties) {
        return switchProtectionWithServiceResponseAsync(fabricName, protectionContainerName, properties).toBlocking().last().body();
    }

    /**
     * Switches protection from one container to another or one replication provider to another.
     * Operation to switch protection from one container to another or one replication provider to another.
     *
     * @param fabricName Unique fabric name.
     * @param protectionContainerName Protection container name.
     * @param properties Switch protection properties
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ProtectionContainerInner> switchProtectionAsync(String fabricName, String protectionContainerName, SwitchProtectionInputProperties properties, final ServiceCallback<ProtectionContainerInner> serviceCallback) {
        return ServiceFuture.fromResponse(switchProtectionWithServiceResponseAsync(fabricName, protectionContainerName, properties), serviceCallback);
    }

    /**
     * Switches protection from one container to another or one replication provider to another.
     * Operation to switch protection from one container to another or one replication provider to another.
     *
     * @param fabricName Unique fabric name.
     * @param protectionContainerName Protection container name.
     * @param properties Switch protection properties
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ProtectionContainerInner> switchProtectionAsync(String fabricName, String protectionContainerName, SwitchProtectionInputProperties properties) {
        return switchProtectionWithServiceResponseAsync(fabricName, protectionContainerName, properties).map(new Func1<ServiceResponse<ProtectionContainerInner>, ProtectionContainerInner>() {
            @Override
            public ProtectionContainerInner call(ServiceResponse<ProtectionContainerInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Switches protection from one container to another or one replication provider to another.
     * Operation to switch protection from one container to another or one replication provider to another.
     *
     * @param fabricName Unique fabric name.
     * @param protectionContainerName Protection container name.
     * @param properties Switch protection properties
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<ProtectionContainerInner>> switchProtectionWithServiceResponseAsync(String fabricName, String protectionContainerName, SwitchProtectionInputProperties properties) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (protectionContainerName == null) {
            throw new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(properties);
        SwitchProtectionInput switchInput = new SwitchProtectionInput();
        switchInput.withProperties(properties);
        Observable<Response<ResponseBody>> observable = service.switchProtection(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, protectionContainerName, this.client.apiVersion(), this.client.acceptLanguage(), switchInput, this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<ProtectionContainerInner>() { }.getType());
    }

    /**
     * Switches protection from one container to another or one replication provider to another.
     * Operation to switch protection from one container to another or one replication provider to another.
     *
     * @param fabricName Unique fabric name.
     * @param protectionContainerName Protection container name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ProtectionContainerInner object if successful.
     */
    public ProtectionContainerInner beginSwitchProtection(String fabricName, String protectionContainerName) {
        return beginSwitchProtectionWithServiceResponseAsync(fabricName, protectionContainerName).toBlocking().single().body();
    }

    /**
     * Switches protection from one container to another or one replication provider to another.
     * Operation to switch protection from one container to another or one replication provider to another.
     *
     * @param fabricName Unique fabric name.
     * @param protectionContainerName Protection container name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ProtectionContainerInner> beginSwitchProtectionAsync(String fabricName, String protectionContainerName, final ServiceCallback<ProtectionContainerInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginSwitchProtectionWithServiceResponseAsync(fabricName, protectionContainerName), serviceCallback);
    }

    /**
     * Switches protection from one container to another or one replication provider to another.
     * Operation to switch protection from one container to another or one replication provider to another.
     *
     * @param fabricName Unique fabric name.
     * @param protectionContainerName Protection container name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ProtectionContainerInner object
     */
    public Observable<ProtectionContainerInner> beginSwitchProtectionAsync(String fabricName, String protectionContainerName) {
        return beginSwitchProtectionWithServiceResponseAsync(fabricName, protectionContainerName).map(new Func1<ServiceResponse<ProtectionContainerInner>, ProtectionContainerInner>() {
            @Override
            public ProtectionContainerInner call(ServiceResponse<ProtectionContainerInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Switches protection from one container to another or one replication provider to another.
     * Operation to switch protection from one container to another or one replication provider to another.
     *
     * @param fabricName Unique fabric name.
     * @param protectionContainerName Protection container name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ProtectionContainerInner object
     */
    public Observable<ServiceResponse<ProtectionContainerInner>> beginSwitchProtectionWithServiceResponseAsync(String fabricName, String protectionContainerName) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (protectionContainerName == null) {
            throw new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final SwitchProtectionInputProperties properties = null;
        SwitchProtectionInput switchInput = new SwitchProtectionInput();
        switchInput.withProperties(null);
        return service.beginSwitchProtection(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, protectionContainerName, this.client.apiVersion(), this.client.acceptLanguage(), switchInput, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ProtectionContainerInner>>>() {
                @Override
                public Observable<ServiceResponse<ProtectionContainerInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ProtectionContainerInner> clientResponse = beginSwitchProtectionDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Switches protection from one container to another or one replication provider to another.
     * Operation to switch protection from one container to another or one replication provider to another.
     *
     * @param fabricName Unique fabric name.
     * @param protectionContainerName Protection container name.
     * @param properties Switch protection properties
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ProtectionContainerInner object if successful.
     */
    public ProtectionContainerInner beginSwitchProtection(String fabricName, String protectionContainerName, SwitchProtectionInputProperties properties) {
        return beginSwitchProtectionWithServiceResponseAsync(fabricName, protectionContainerName, properties).toBlocking().single().body();
    }

    /**
     * Switches protection from one container to another or one replication provider to another.
     * Operation to switch protection from one container to another or one replication provider to another.
     *
     * @param fabricName Unique fabric name.
     * @param protectionContainerName Protection container name.
     * @param properties Switch protection properties
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ProtectionContainerInner> beginSwitchProtectionAsync(String fabricName, String protectionContainerName, SwitchProtectionInputProperties properties, final ServiceCallback<ProtectionContainerInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginSwitchProtectionWithServiceResponseAsync(fabricName, protectionContainerName, properties), serviceCallback);
    }

    /**
     * Switches protection from one container to another or one replication provider to another.
     * Operation to switch protection from one container to another or one replication provider to another.
     *
     * @param fabricName Unique fabric name.
     * @param protectionContainerName Protection container name.
     * @param properties Switch protection properties
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ProtectionContainerInner object
     */
    public Observable<ProtectionContainerInner> beginSwitchProtectionAsync(String fabricName, String protectionContainerName, SwitchProtectionInputProperties properties) {
        return beginSwitchProtectionWithServiceResponseAsync(fabricName, protectionContainerName, properties).map(new Func1<ServiceResponse<ProtectionContainerInner>, ProtectionContainerInner>() {
            @Override
            public ProtectionContainerInner call(ServiceResponse<ProtectionContainerInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Switches protection from one container to another or one replication provider to another.
     * Operation to switch protection from one container to another or one replication provider to another.
     *
     * @param fabricName Unique fabric name.
     * @param protectionContainerName Protection container name.
     * @param properties Switch protection properties
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ProtectionContainerInner object
     */
    public Observable<ServiceResponse<ProtectionContainerInner>> beginSwitchProtectionWithServiceResponseAsync(String fabricName, String protectionContainerName, SwitchProtectionInputProperties properties) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (protectionContainerName == null) {
            throw new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(properties);
        SwitchProtectionInput switchInput = new SwitchProtectionInput();
        switchInput.withProperties(properties);
        return service.beginSwitchProtection(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, protectionContainerName, this.client.apiVersion(), this.client.acceptLanguage(), switchInput, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ProtectionContainerInner>>>() {
                @Override
                public Observable<ServiceResponse<ProtectionContainerInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ProtectionContainerInner> clientResponse = beginSwitchProtectionDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ProtectionContainerInner> beginSwitchProtectionDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ProtectionContainerInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ProtectionContainerInner>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Removes a protection container.
     * Operation to remove a protection container.
     *
     * @param fabricName Unique fabric ARM name.
     * @param protectionContainerName Unique protection container ARM name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String fabricName, String protectionContainerName) {
        deleteWithServiceResponseAsync(fabricName, protectionContainerName).toBlocking().last().body();
    }

    /**
     * Removes a protection container.
     * Operation to remove a protection container.
     *
     * @param fabricName Unique fabric ARM name.
     * @param protectionContainerName Unique protection container ARM name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String fabricName, String protectionContainerName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(fabricName, protectionContainerName), serviceCallback);
    }

    /**
     * Removes a protection container.
     * Operation to remove a protection container.
     *
     * @param fabricName Unique fabric ARM name.
     * @param protectionContainerName Unique protection container ARM name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Void> deleteAsync(String fabricName, String protectionContainerName) {
        return deleteWithServiceResponseAsync(fabricName, protectionContainerName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Removes a protection container.
     * Operation to remove a protection container.
     *
     * @param fabricName Unique fabric ARM name.
     * @param protectionContainerName Unique protection container ARM name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String fabricName, String protectionContainerName) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (protectionContainerName == null) {
            throw new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Observable<Response<ResponseBody>> observable = service.delete(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, protectionContainerName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<Void>() { }.getType());
    }

    /**
     * Removes a protection container.
     * Operation to remove a protection container.
     *
     * @param fabricName Unique fabric ARM name.
     * @param protectionContainerName Unique protection container ARM name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void beginDelete(String fabricName, String protectionContainerName) {
        beginDeleteWithServiceResponseAsync(fabricName, protectionContainerName).toBlocking().single().body();
    }

    /**
     * Removes a protection container.
     * Operation to remove a protection container.
     *
     * @param fabricName Unique fabric ARM name.
     * @param protectionContainerName Unique protection container ARM name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> beginDeleteAsync(String fabricName, String protectionContainerName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(beginDeleteWithServiceResponseAsync(fabricName, protectionContainerName), serviceCallback);
    }

    /**
     * Removes a protection container.
     * Operation to remove a protection container.
     *
     * @param fabricName Unique fabric ARM name.
     * @param protectionContainerName Unique protection container ARM name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> beginDeleteAsync(String fabricName, String protectionContainerName) {
        return beginDeleteWithServiceResponseAsync(fabricName, protectionContainerName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Removes a protection container.
     * Operation to remove a protection container.
     *
     * @param fabricName Unique fabric ARM name.
     * @param protectionContainerName Unique protection container ARM name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> beginDeleteWithServiceResponseAsync(String fabricName, String protectionContainerName) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (protectionContainerName == null) {
            throw new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.beginDelete(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, protectionContainerName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = beginDeleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> beginDeleteDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CloudException>newInstance(this.client.serializerAdapter())
                .register(202, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Adds a protectable item to the replication protection container.
     * The operation to a add a protectable item to a protection container(Add physical server.).
     *
     * @param fabricName The name of the fabric.
     * @param protectionContainerName The name of the protection container.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ProtectionContainerInner object if successful.
     */
    public ProtectionContainerInner discoverProtectableItem(String fabricName, String protectionContainerName) {
        return discoverProtectableItemWithServiceResponseAsync(fabricName, protectionContainerName).toBlocking().last().body();
    }

    /**
     * Adds a protectable item to the replication protection container.
     * The operation to a add a protectable item to a protection container(Add physical server.).
     *
     * @param fabricName The name of the fabric.
     * @param protectionContainerName The name of the protection container.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ProtectionContainerInner> discoverProtectableItemAsync(String fabricName, String protectionContainerName, final ServiceCallback<ProtectionContainerInner> serviceCallback) {
        return ServiceFuture.fromResponse(discoverProtectableItemWithServiceResponseAsync(fabricName, protectionContainerName), serviceCallback);
    }

    /**
     * Adds a protectable item to the replication protection container.
     * The operation to a add a protectable item to a protection container(Add physical server.).
     *
     * @param fabricName The name of the fabric.
     * @param protectionContainerName The name of the protection container.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ProtectionContainerInner> discoverProtectableItemAsync(String fabricName, String protectionContainerName) {
        return discoverProtectableItemWithServiceResponseAsync(fabricName, protectionContainerName).map(new Func1<ServiceResponse<ProtectionContainerInner>, ProtectionContainerInner>() {
            @Override
            public ProtectionContainerInner call(ServiceResponse<ProtectionContainerInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Adds a protectable item to the replication protection container.
     * The operation to a add a protectable item to a protection container(Add physical server.).
     *
     * @param fabricName The name of the fabric.
     * @param protectionContainerName The name of the protection container.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<ProtectionContainerInner>> discoverProtectableItemWithServiceResponseAsync(String fabricName, String protectionContainerName) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (protectionContainerName == null) {
            throw new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final DiscoverProtectableItemRequestProperties properties = null;
        DiscoverProtectableItemRequest discoverProtectableItemRequest = new DiscoverProtectableItemRequest();
        discoverProtectableItemRequest.withProperties(null);
        Observable<Response<ResponseBody>> observable = service.discoverProtectableItem(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, protectionContainerName, this.client.apiVersion(), this.client.acceptLanguage(), discoverProtectableItemRequest, this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<ProtectionContainerInner>() { }.getType());
    }
    /**
     * Adds a protectable item to the replication protection container.
     * The operation to a add a protectable item to a protection container(Add physical server.).
     *
     * @param fabricName The name of the fabric.
     * @param protectionContainerName The name of the protection container.
     * @param properties The properties of a discover protectable item request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ProtectionContainerInner object if successful.
     */
    public ProtectionContainerInner discoverProtectableItem(String fabricName, String protectionContainerName, DiscoverProtectableItemRequestProperties properties) {
        return discoverProtectableItemWithServiceResponseAsync(fabricName, protectionContainerName, properties).toBlocking().last().body();
    }

    /**
     * Adds a protectable item to the replication protection container.
     * The operation to a add a protectable item to a protection container(Add physical server.).
     *
     * @param fabricName The name of the fabric.
     * @param protectionContainerName The name of the protection container.
     * @param properties The properties of a discover protectable item request.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ProtectionContainerInner> discoverProtectableItemAsync(String fabricName, String protectionContainerName, DiscoverProtectableItemRequestProperties properties, final ServiceCallback<ProtectionContainerInner> serviceCallback) {
        return ServiceFuture.fromResponse(discoverProtectableItemWithServiceResponseAsync(fabricName, protectionContainerName, properties), serviceCallback);
    }

    /**
     * Adds a protectable item to the replication protection container.
     * The operation to a add a protectable item to a protection container(Add physical server.).
     *
     * @param fabricName The name of the fabric.
     * @param protectionContainerName The name of the protection container.
     * @param properties The properties of a discover protectable item request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ProtectionContainerInner> discoverProtectableItemAsync(String fabricName, String protectionContainerName, DiscoverProtectableItemRequestProperties properties) {
        return discoverProtectableItemWithServiceResponseAsync(fabricName, protectionContainerName, properties).map(new Func1<ServiceResponse<ProtectionContainerInner>, ProtectionContainerInner>() {
            @Override
            public ProtectionContainerInner call(ServiceResponse<ProtectionContainerInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Adds a protectable item to the replication protection container.
     * The operation to a add a protectable item to a protection container(Add physical server.).
     *
     * @param fabricName The name of the fabric.
     * @param protectionContainerName The name of the protection container.
     * @param properties The properties of a discover protectable item request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<ProtectionContainerInner>> discoverProtectableItemWithServiceResponseAsync(String fabricName, String protectionContainerName, DiscoverProtectableItemRequestProperties properties) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (protectionContainerName == null) {
            throw new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(properties);
        DiscoverProtectableItemRequest discoverProtectableItemRequest = new DiscoverProtectableItemRequest();
        discoverProtectableItemRequest.withProperties(properties);
        Observable<Response<ResponseBody>> observable = service.discoverProtectableItem(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, protectionContainerName, this.client.apiVersion(), this.client.acceptLanguage(), discoverProtectableItemRequest, this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<ProtectionContainerInner>() { }.getType());
    }

    /**
     * Adds a protectable item to the replication protection container.
     * The operation to a add a protectable item to a protection container(Add physical server.).
     *
     * @param fabricName The name of the fabric.
     * @param protectionContainerName The name of the protection container.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ProtectionContainerInner object if successful.
     */
    public ProtectionContainerInner beginDiscoverProtectableItem(String fabricName, String protectionContainerName) {
        return beginDiscoverProtectableItemWithServiceResponseAsync(fabricName, protectionContainerName).toBlocking().single().body();
    }

    /**
     * Adds a protectable item to the replication protection container.
     * The operation to a add a protectable item to a protection container(Add physical server.).
     *
     * @param fabricName The name of the fabric.
     * @param protectionContainerName The name of the protection container.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ProtectionContainerInner> beginDiscoverProtectableItemAsync(String fabricName, String protectionContainerName, final ServiceCallback<ProtectionContainerInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginDiscoverProtectableItemWithServiceResponseAsync(fabricName, protectionContainerName), serviceCallback);
    }

    /**
     * Adds a protectable item to the replication protection container.
     * The operation to a add a protectable item to a protection container(Add physical server.).
     *
     * @param fabricName The name of the fabric.
     * @param protectionContainerName The name of the protection container.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ProtectionContainerInner object
     */
    public Observable<ProtectionContainerInner> beginDiscoverProtectableItemAsync(String fabricName, String protectionContainerName) {
        return beginDiscoverProtectableItemWithServiceResponseAsync(fabricName, protectionContainerName).map(new Func1<ServiceResponse<ProtectionContainerInner>, ProtectionContainerInner>() {
            @Override
            public ProtectionContainerInner call(ServiceResponse<ProtectionContainerInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Adds a protectable item to the replication protection container.
     * The operation to a add a protectable item to a protection container(Add physical server.).
     *
     * @param fabricName The name of the fabric.
     * @param protectionContainerName The name of the protection container.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ProtectionContainerInner object
     */
    public Observable<ServiceResponse<ProtectionContainerInner>> beginDiscoverProtectableItemWithServiceResponseAsync(String fabricName, String protectionContainerName) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (protectionContainerName == null) {
            throw new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final DiscoverProtectableItemRequestProperties properties = null;
        DiscoverProtectableItemRequest discoverProtectableItemRequest = new DiscoverProtectableItemRequest();
        discoverProtectableItemRequest.withProperties(null);
        return service.beginDiscoverProtectableItem(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, protectionContainerName, this.client.apiVersion(), this.client.acceptLanguage(), discoverProtectableItemRequest, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ProtectionContainerInner>>>() {
                @Override
                public Observable<ServiceResponse<ProtectionContainerInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ProtectionContainerInner> clientResponse = beginDiscoverProtectableItemDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Adds a protectable item to the replication protection container.
     * The operation to a add a protectable item to a protection container(Add physical server.).
     *
     * @param fabricName The name of the fabric.
     * @param protectionContainerName The name of the protection container.
     * @param properties The properties of a discover protectable item request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ProtectionContainerInner object if successful.
     */
    public ProtectionContainerInner beginDiscoverProtectableItem(String fabricName, String protectionContainerName, DiscoverProtectableItemRequestProperties properties) {
        return beginDiscoverProtectableItemWithServiceResponseAsync(fabricName, protectionContainerName, properties).toBlocking().single().body();
    }

    /**
     * Adds a protectable item to the replication protection container.
     * The operation to a add a protectable item to a protection container(Add physical server.).
     *
     * @param fabricName The name of the fabric.
     * @param protectionContainerName The name of the protection container.
     * @param properties The properties of a discover protectable item request.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ProtectionContainerInner> beginDiscoverProtectableItemAsync(String fabricName, String protectionContainerName, DiscoverProtectableItemRequestProperties properties, final ServiceCallback<ProtectionContainerInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginDiscoverProtectableItemWithServiceResponseAsync(fabricName, protectionContainerName, properties), serviceCallback);
    }

    /**
     * Adds a protectable item to the replication protection container.
     * The operation to a add a protectable item to a protection container(Add physical server.).
     *
     * @param fabricName The name of the fabric.
     * @param protectionContainerName The name of the protection container.
     * @param properties The properties of a discover protectable item request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ProtectionContainerInner object
     */
    public Observable<ProtectionContainerInner> beginDiscoverProtectableItemAsync(String fabricName, String protectionContainerName, DiscoverProtectableItemRequestProperties properties) {
        return beginDiscoverProtectableItemWithServiceResponseAsync(fabricName, protectionContainerName, properties).map(new Func1<ServiceResponse<ProtectionContainerInner>, ProtectionContainerInner>() {
            @Override
            public ProtectionContainerInner call(ServiceResponse<ProtectionContainerInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Adds a protectable item to the replication protection container.
     * The operation to a add a protectable item to a protection container(Add physical server.).
     *
     * @param fabricName The name of the fabric.
     * @param protectionContainerName The name of the protection container.
     * @param properties The properties of a discover protectable item request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ProtectionContainerInner object
     */
    public Observable<ServiceResponse<ProtectionContainerInner>> beginDiscoverProtectableItemWithServiceResponseAsync(String fabricName, String protectionContainerName, DiscoverProtectableItemRequestProperties properties) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (protectionContainerName == null) {
            throw new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(properties);
        DiscoverProtectableItemRequest discoverProtectableItemRequest = new DiscoverProtectableItemRequest();
        discoverProtectableItemRequest.withProperties(properties);
        return service.beginDiscoverProtectableItem(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, protectionContainerName, this.client.apiVersion(), this.client.acceptLanguage(), discoverProtectableItemRequest, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ProtectionContainerInner>>>() {
                @Override
                public Observable<ServiceResponse<ProtectionContainerInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ProtectionContainerInner> clientResponse = beginDiscoverProtectableItemDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ProtectionContainerInner> beginDiscoverProtectableItemDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ProtectionContainerInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ProtectionContainerInner>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets the protection container details.
     * Gets the details of a protection container.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ProtectionContainerInner object if successful.
     */
    public ProtectionContainerInner get(String fabricName, String protectionContainerName) {
        return getWithServiceResponseAsync(fabricName, protectionContainerName).toBlocking().single().body();
    }

    /**
     * Gets the protection container details.
     * Gets the details of a protection container.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ProtectionContainerInner> getAsync(String fabricName, String protectionContainerName, final ServiceCallback<ProtectionContainerInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(fabricName, protectionContainerName), serviceCallback);
    }

    /**
     * Gets the protection container details.
     * Gets the details of a protection container.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ProtectionContainerInner object
     */
    public Observable<ProtectionContainerInner> getAsync(String fabricName, String protectionContainerName) {
        return getWithServiceResponseAsync(fabricName, protectionContainerName).map(new Func1<ServiceResponse<ProtectionContainerInner>, ProtectionContainerInner>() {
            @Override
            public ProtectionContainerInner call(ServiceResponse<ProtectionContainerInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets the protection container details.
     * Gets the details of a protection container.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ProtectionContainerInner object
     */
    public Observable<ServiceResponse<ProtectionContainerInner>> getWithServiceResponseAsync(String fabricName, String protectionContainerName) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (protectionContainerName == null) {
            throw new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.get(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, protectionContainerName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ProtectionContainerInner>>>() {
                @Override
                public Observable<ServiceResponse<ProtectionContainerInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ProtectionContainerInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ProtectionContainerInner> getDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ProtectionContainerInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ProtectionContainerInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Create a protection container.
     * Operation to create a protection container.
     *
     * @param fabricName Unique fabric ARM name.
     * @param protectionContainerName Unique protection container ARM name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ProtectionContainerInner object if successful.
     */
    public ProtectionContainerInner create(String fabricName, String protectionContainerName) {
        return createWithServiceResponseAsync(fabricName, protectionContainerName).toBlocking().last().body();
    }

    /**
     * Create a protection container.
     * Operation to create a protection container.
     *
     * @param fabricName Unique fabric ARM name.
     * @param protectionContainerName Unique protection container ARM name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ProtectionContainerInner> createAsync(String fabricName, String protectionContainerName, final ServiceCallback<ProtectionContainerInner> serviceCallback) {
        return ServiceFuture.fromResponse(createWithServiceResponseAsync(fabricName, protectionContainerName), serviceCallback);
    }

    /**
     * Create a protection container.
     * Operation to create a protection container.
     *
     * @param fabricName Unique fabric ARM name.
     * @param protectionContainerName Unique protection container ARM name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ProtectionContainerInner> createAsync(String fabricName, String protectionContainerName) {
        return createWithServiceResponseAsync(fabricName, protectionContainerName).map(new Func1<ServiceResponse<ProtectionContainerInner>, ProtectionContainerInner>() {
            @Override
            public ProtectionContainerInner call(ServiceResponse<ProtectionContainerInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create a protection container.
     * Operation to create a protection container.
     *
     * @param fabricName Unique fabric ARM name.
     * @param protectionContainerName Unique protection container ARM name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<ProtectionContainerInner>> createWithServiceResponseAsync(String fabricName, String protectionContainerName) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (protectionContainerName == null) {
            throw new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final CreateProtectionContainerInputProperties properties = null;
        CreateProtectionContainerInput creationInput = new CreateProtectionContainerInput();
        creationInput.withProperties(null);
        Observable<Response<ResponseBody>> observable = service.create(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, protectionContainerName, this.client.apiVersion(), this.client.acceptLanguage(), creationInput, this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<ProtectionContainerInner>() { }.getType());
    }
    /**
     * Create a protection container.
     * Operation to create a protection container.
     *
     * @param fabricName Unique fabric ARM name.
     * @param protectionContainerName Unique protection container ARM name.
     * @param properties Create protection container input properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ProtectionContainerInner object if successful.
     */
    public ProtectionContainerInner create(String fabricName, String protectionContainerName, CreateProtectionContainerInputProperties properties) {
        return createWithServiceResponseAsync(fabricName, protectionContainerName, properties).toBlocking().last().body();
    }

    /**
     * Create a protection container.
     * Operation to create a protection container.
     *
     * @param fabricName Unique fabric ARM name.
     * @param protectionContainerName Unique protection container ARM name.
     * @param properties Create protection container input properties.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ProtectionContainerInner> createAsync(String fabricName, String protectionContainerName, CreateProtectionContainerInputProperties properties, final ServiceCallback<ProtectionContainerInner> serviceCallback) {
        return ServiceFuture.fromResponse(createWithServiceResponseAsync(fabricName, protectionContainerName, properties), serviceCallback);
    }

    /**
     * Create a protection container.
     * Operation to create a protection container.
     *
     * @param fabricName Unique fabric ARM name.
     * @param protectionContainerName Unique protection container ARM name.
     * @param properties Create protection container input properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ProtectionContainerInner> createAsync(String fabricName, String protectionContainerName, CreateProtectionContainerInputProperties properties) {
        return createWithServiceResponseAsync(fabricName, protectionContainerName, properties).map(new Func1<ServiceResponse<ProtectionContainerInner>, ProtectionContainerInner>() {
            @Override
            public ProtectionContainerInner call(ServiceResponse<ProtectionContainerInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create a protection container.
     * Operation to create a protection container.
     *
     * @param fabricName Unique fabric ARM name.
     * @param protectionContainerName Unique protection container ARM name.
     * @param properties Create protection container input properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<ProtectionContainerInner>> createWithServiceResponseAsync(String fabricName, String protectionContainerName, CreateProtectionContainerInputProperties properties) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (protectionContainerName == null) {
            throw new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(properties);
        CreateProtectionContainerInput creationInput = new CreateProtectionContainerInput();
        creationInput.withProperties(properties);
        Observable<Response<ResponseBody>> observable = service.create(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, protectionContainerName, this.client.apiVersion(), this.client.acceptLanguage(), creationInput, this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<ProtectionContainerInner>() { }.getType());
    }

    /**
     * Create a protection container.
     * Operation to create a protection container.
     *
     * @param fabricName Unique fabric ARM name.
     * @param protectionContainerName Unique protection container ARM name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ProtectionContainerInner object if successful.
     */
    public ProtectionContainerInner beginCreate(String fabricName, String protectionContainerName) {
        return beginCreateWithServiceResponseAsync(fabricName, protectionContainerName).toBlocking().single().body();
    }

    /**
     * Create a protection container.
     * Operation to create a protection container.
     *
     * @param fabricName Unique fabric ARM name.
     * @param protectionContainerName Unique protection container ARM name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ProtectionContainerInner> beginCreateAsync(String fabricName, String protectionContainerName, final ServiceCallback<ProtectionContainerInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginCreateWithServiceResponseAsync(fabricName, protectionContainerName), serviceCallback);
    }

    /**
     * Create a protection container.
     * Operation to create a protection container.
     *
     * @param fabricName Unique fabric ARM name.
     * @param protectionContainerName Unique protection container ARM name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ProtectionContainerInner object
     */
    public Observable<ProtectionContainerInner> beginCreateAsync(String fabricName, String protectionContainerName) {
        return beginCreateWithServiceResponseAsync(fabricName, protectionContainerName).map(new Func1<ServiceResponse<ProtectionContainerInner>, ProtectionContainerInner>() {
            @Override
            public ProtectionContainerInner call(ServiceResponse<ProtectionContainerInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create a protection container.
     * Operation to create a protection container.
     *
     * @param fabricName Unique fabric ARM name.
     * @param protectionContainerName Unique protection container ARM name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ProtectionContainerInner object
     */
    public Observable<ServiceResponse<ProtectionContainerInner>> beginCreateWithServiceResponseAsync(String fabricName, String protectionContainerName) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (protectionContainerName == null) {
            throw new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final CreateProtectionContainerInputProperties properties = null;
        CreateProtectionContainerInput creationInput = new CreateProtectionContainerInput();
        creationInput.withProperties(null);
        return service.beginCreate(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, protectionContainerName, this.client.apiVersion(), this.client.acceptLanguage(), creationInput, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ProtectionContainerInner>>>() {
                @Override
                public Observable<ServiceResponse<ProtectionContainerInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ProtectionContainerInner> clientResponse = beginCreateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Create a protection container.
     * Operation to create a protection container.
     *
     * @param fabricName Unique fabric ARM name.
     * @param protectionContainerName Unique protection container ARM name.
     * @param properties Create protection container input properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ProtectionContainerInner object if successful.
     */
    public ProtectionContainerInner beginCreate(String fabricName, String protectionContainerName, CreateProtectionContainerInputProperties properties) {
        return beginCreateWithServiceResponseAsync(fabricName, protectionContainerName, properties).toBlocking().single().body();
    }

    /**
     * Create a protection container.
     * Operation to create a protection container.
     *
     * @param fabricName Unique fabric ARM name.
     * @param protectionContainerName Unique protection container ARM name.
     * @param properties Create protection container input properties.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ProtectionContainerInner> beginCreateAsync(String fabricName, String protectionContainerName, CreateProtectionContainerInputProperties properties, final ServiceCallback<ProtectionContainerInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginCreateWithServiceResponseAsync(fabricName, protectionContainerName, properties), serviceCallback);
    }

    /**
     * Create a protection container.
     * Operation to create a protection container.
     *
     * @param fabricName Unique fabric ARM name.
     * @param protectionContainerName Unique protection container ARM name.
     * @param properties Create protection container input properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ProtectionContainerInner object
     */
    public Observable<ProtectionContainerInner> beginCreateAsync(String fabricName, String protectionContainerName, CreateProtectionContainerInputProperties properties) {
        return beginCreateWithServiceResponseAsync(fabricName, protectionContainerName, properties).map(new Func1<ServiceResponse<ProtectionContainerInner>, ProtectionContainerInner>() {
            @Override
            public ProtectionContainerInner call(ServiceResponse<ProtectionContainerInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create a protection container.
     * Operation to create a protection container.
     *
     * @param fabricName Unique fabric ARM name.
     * @param protectionContainerName Unique protection container ARM name.
     * @param properties Create protection container input properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ProtectionContainerInner object
     */
    public Observable<ServiceResponse<ProtectionContainerInner>> beginCreateWithServiceResponseAsync(String fabricName, String protectionContainerName, CreateProtectionContainerInputProperties properties) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (protectionContainerName == null) {
            throw new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(properties);
        CreateProtectionContainerInput creationInput = new CreateProtectionContainerInput();
        creationInput.withProperties(properties);
        return service.beginCreate(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, protectionContainerName, this.client.apiVersion(), this.client.acceptLanguage(), creationInput, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ProtectionContainerInner>>>() {
                @Override
                public Observable<ServiceResponse<ProtectionContainerInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ProtectionContainerInner> clientResponse = beginCreateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ProtectionContainerInner> beginCreateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ProtectionContainerInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ProtectionContainerInner>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets the list of protection container for a fabric.
     * Lists the protection containers in the specified fabric.
     *
     * @param fabricName Fabric name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ProtectionContainerInner&gt; object if successful.
     */
    public PagedList<ProtectionContainerInner> listByReplicationFabrics(final String fabricName) {
        ServiceResponse<Page<ProtectionContainerInner>> response = listByReplicationFabricsSinglePageAsync(fabricName).toBlocking().single();
        return new PagedList<ProtectionContainerInner>(response.body()) {
            @Override
            public Page<ProtectionContainerInner> nextPage(String nextPageLink) {
                return listByReplicationFabricsNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets the list of protection container for a fabric.
     * Lists the protection containers in the specified fabric.
     *
     * @param fabricName Fabric name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ProtectionContainerInner>> listByReplicationFabricsAsync(final String fabricName, final ListOperationCallback<ProtectionContainerInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByReplicationFabricsSinglePageAsync(fabricName),
            new Func1<String, Observable<ServiceResponse<Page<ProtectionContainerInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ProtectionContainerInner>>> call(String nextPageLink) {
                    return listByReplicationFabricsNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets the list of protection container for a fabric.
     * Lists the protection containers in the specified fabric.
     *
     * @param fabricName Fabric name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ProtectionContainerInner&gt; object
     */
    public Observable<Page<ProtectionContainerInner>> listByReplicationFabricsAsync(final String fabricName) {
        return listByReplicationFabricsWithServiceResponseAsync(fabricName)
            .map(new Func1<ServiceResponse<Page<ProtectionContainerInner>>, Page<ProtectionContainerInner>>() {
                @Override
                public Page<ProtectionContainerInner> call(ServiceResponse<Page<ProtectionContainerInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets the list of protection container for a fabric.
     * Lists the protection containers in the specified fabric.
     *
     * @param fabricName Fabric name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ProtectionContainerInner&gt; object
     */
    public Observable<ServiceResponse<Page<ProtectionContainerInner>>> listByReplicationFabricsWithServiceResponseAsync(final String fabricName) {
        return listByReplicationFabricsSinglePageAsync(fabricName)
            .concatMap(new Func1<ServiceResponse<Page<ProtectionContainerInner>>, Observable<ServiceResponse<Page<ProtectionContainerInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ProtectionContainerInner>>> call(ServiceResponse<Page<ProtectionContainerInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByReplicationFabricsNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets the list of protection container for a fabric.
     * Lists the protection containers in the specified fabric.
     *
    ServiceResponse<PageImpl<ProtectionContainerInner>> * @param fabricName Fabric name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ProtectionContainerInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ProtectionContainerInner>>> listByReplicationFabricsSinglePageAsync(final String fabricName) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByReplicationFabrics(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ProtectionContainerInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ProtectionContainerInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ProtectionContainerInner>> result = listByReplicationFabricsDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ProtectionContainerInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<ProtectionContainerInner>> listByReplicationFabricsDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<ProtectionContainerInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<ProtectionContainerInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets the list of all protection containers in a vault.
     * Lists the protection containers in a vault.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ProtectionContainerInner&gt; object if successful.
     */
    public PagedList<ProtectionContainerInner> list() {
        ServiceResponse<Page<ProtectionContainerInner>> response = listSinglePageAsync().toBlocking().single();
        return new PagedList<ProtectionContainerInner>(response.body()) {
            @Override
            public Page<ProtectionContainerInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets the list of all protection containers in a vault.
     * Lists the protection containers in a vault.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ProtectionContainerInner>> listAsync(final ListOperationCallback<ProtectionContainerInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSinglePageAsync(),
            new Func1<String, Observable<ServiceResponse<Page<ProtectionContainerInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ProtectionContainerInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets the list of all protection containers in a vault.
     * Lists the protection containers in a vault.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ProtectionContainerInner&gt; object
     */
    public Observable<Page<ProtectionContainerInner>> listAsync() {
        return listWithServiceResponseAsync()
            .map(new Func1<ServiceResponse<Page<ProtectionContainerInner>>, Page<ProtectionContainerInner>>() {
                @Override
                public Page<ProtectionContainerInner> call(ServiceResponse<Page<ProtectionContainerInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets the list of all protection containers in a vault.
     * Lists the protection containers in a vault.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ProtectionContainerInner&gt; object
     */
    public Observable<ServiceResponse<Page<ProtectionContainerInner>>> listWithServiceResponseAsync() {
        return listSinglePageAsync()
            .concatMap(new Func1<ServiceResponse<Page<ProtectionContainerInner>>, Observable<ServiceResponse<Page<ProtectionContainerInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ProtectionContainerInner>>> call(ServiceResponse<Page<ProtectionContainerInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets the list of all protection containers in a vault.
     * Lists the protection containers in a vault.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ProtectionContainerInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ProtectionContainerInner>>> listSinglePageAsync() {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.list(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ProtectionContainerInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ProtectionContainerInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ProtectionContainerInner>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ProtectionContainerInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<ProtectionContainerInner>> listDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<ProtectionContainerInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<ProtectionContainerInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets the list of protection container for a fabric.
     * Lists the protection containers in the specified fabric.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ProtectionContainerInner&gt; object if successful.
     */
    public PagedList<ProtectionContainerInner> listByReplicationFabricsNext(final String nextPageLink) {
        ServiceResponse<Page<ProtectionContainerInner>> response = listByReplicationFabricsNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<ProtectionContainerInner>(response.body()) {
            @Override
            public Page<ProtectionContainerInner> nextPage(String nextPageLink) {
                return listByReplicationFabricsNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets the list of protection container for a fabric.
     * Lists the protection containers in the specified fabric.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ProtectionContainerInner>> listByReplicationFabricsNextAsync(final String nextPageLink, final ServiceFuture<List<ProtectionContainerInner>> serviceFuture, final ListOperationCallback<ProtectionContainerInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByReplicationFabricsNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<ProtectionContainerInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ProtectionContainerInner>>> call(String nextPageLink) {
                    return listByReplicationFabricsNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets the list of protection container for a fabric.
     * Lists the protection containers in the specified fabric.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ProtectionContainerInner&gt; object
     */
    public Observable<Page<ProtectionContainerInner>> listByReplicationFabricsNextAsync(final String nextPageLink) {
        return listByReplicationFabricsNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<ProtectionContainerInner>>, Page<ProtectionContainerInner>>() {
                @Override
                public Page<ProtectionContainerInner> call(ServiceResponse<Page<ProtectionContainerInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets the list of protection container for a fabric.
     * Lists the protection containers in the specified fabric.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ProtectionContainerInner&gt; object
     */
    public Observable<ServiceResponse<Page<ProtectionContainerInner>>> listByReplicationFabricsNextWithServiceResponseAsync(final String nextPageLink) {
        return listByReplicationFabricsNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<ProtectionContainerInner>>, Observable<ServiceResponse<Page<ProtectionContainerInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ProtectionContainerInner>>> call(ServiceResponse<Page<ProtectionContainerInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByReplicationFabricsNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets the list of protection container for a fabric.
     * Lists the protection containers in the specified fabric.
     *
    ServiceResponse<PageImpl<ProtectionContainerInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ProtectionContainerInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ProtectionContainerInner>>> listByReplicationFabricsNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByReplicationFabricsNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ProtectionContainerInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ProtectionContainerInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ProtectionContainerInner>> result = listByReplicationFabricsNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ProtectionContainerInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<ProtectionContainerInner>> listByReplicationFabricsNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<ProtectionContainerInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<ProtectionContainerInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets the list of all protection containers in a vault.
     * Lists the protection containers in a vault.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ProtectionContainerInner&gt; object if successful.
     */
    public PagedList<ProtectionContainerInner> listNext(final String nextPageLink) {
        ServiceResponse<Page<ProtectionContainerInner>> response = listNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<ProtectionContainerInner>(response.body()) {
            @Override
            public Page<ProtectionContainerInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets the list of all protection containers in a vault.
     * Lists the protection containers in a vault.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ProtectionContainerInner>> listNextAsync(final String nextPageLink, final ServiceFuture<List<ProtectionContainerInner>> serviceFuture, final ListOperationCallback<ProtectionContainerInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<ProtectionContainerInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ProtectionContainerInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets the list of all protection containers in a vault.
     * Lists the protection containers in a vault.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ProtectionContainerInner&gt; object
     */
    public Observable<Page<ProtectionContainerInner>> listNextAsync(final String nextPageLink) {
        return listNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<ProtectionContainerInner>>, Page<ProtectionContainerInner>>() {
                @Override
                public Page<ProtectionContainerInner> call(ServiceResponse<Page<ProtectionContainerInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets the list of all protection containers in a vault.
     * Lists the protection containers in a vault.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ProtectionContainerInner&gt; object
     */
    public Observable<ServiceResponse<Page<ProtectionContainerInner>>> listNextWithServiceResponseAsync(final String nextPageLink) {
        return listNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<ProtectionContainerInner>>, Observable<ServiceResponse<Page<ProtectionContainerInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ProtectionContainerInner>>> call(ServiceResponse<Page<ProtectionContainerInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets the list of all protection containers in a vault.
     * Lists the protection containers in a vault.
     *
    ServiceResponse<PageImpl<ProtectionContainerInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ProtectionContainerInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ProtectionContainerInner>>> listNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ProtectionContainerInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ProtectionContainerInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ProtectionContainerInner>> result = listNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ProtectionContainerInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<ProtectionContainerInner>> listNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<ProtectionContainerInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<ProtectionContainerInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
