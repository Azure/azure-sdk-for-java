/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.CloudException;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.CreateNetworkMappingInput;
import com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.CreateNetworkMappingInputProperties;
import com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.UpdateNetworkMappingInput;
import com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.UpdateNetworkMappingInputProperties;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.PATCH;
import retrofit2.http.Path;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in ReplicationNetworkMappings.
 */
public class ReplicationNetworkMappingsInner {
    /** The Retrofit service to perform REST calls. */
    private ReplicationNetworkMappingsService service;
    /** The service client containing this operation class. */
    private SiteRecoveryManagementClientImpl client;

    /**
     * Initializes an instance of ReplicationNetworkMappingsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public ReplicationNetworkMappingsInner(Retrofit retrofit, SiteRecoveryManagementClientImpl client) {
        this.service = retrofit.create(ReplicationNetworkMappingsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for ReplicationNetworkMappings to be
     * used by Retrofit to perform actually REST calls.
     */
    interface ReplicationNetworkMappingsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationNetworkMappings list" })
        @GET("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationNetworkMappings")
        Observable<Response<ResponseBody>> list(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationNetworkMappings listByReplicationNetworks" })
        @GET("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationNetworks/{networkName}/replicationNetworkMappings")
        Observable<Response<ResponseBody>> listByReplicationNetworks(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("fabricName") String fabricName, @Path("networkName") String networkName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationNetworkMappings get" })
        @GET("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationNetworks/{networkName}/replicationNetworkMappings/{networkMappingName}")
        Observable<Response<ResponseBody>> get(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("fabricName") String fabricName, @Path("networkName") String networkName, @Path("networkMappingName") String networkMappingName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationNetworkMappings create" })
        @PUT("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationNetworks/{networkName}/replicationNetworkMappings/{networkMappingName}")
        Observable<Response<ResponseBody>> create(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("fabricName") String fabricName, @Path("networkName") String networkName, @Path("networkMappingName") String networkMappingName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body CreateNetworkMappingInput input, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationNetworkMappings beginCreate" })
        @PUT("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationNetworks/{networkName}/replicationNetworkMappings/{networkMappingName}")
        Observable<Response<ResponseBody>> beginCreate(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("fabricName") String fabricName, @Path("networkName") String networkName, @Path("networkMappingName") String networkMappingName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body CreateNetworkMappingInput input, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationNetworkMappings delete" })
        @HTTP(path = "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationNetworks/{networkName}/replicationNetworkMappings/{networkMappingName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("fabricName") String fabricName, @Path("networkName") String networkName, @Path("networkMappingName") String networkMappingName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationNetworkMappings beginDelete" })
        @HTTP(path = "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationNetworks/{networkName}/replicationNetworkMappings/{networkMappingName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> beginDelete(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("fabricName") String fabricName, @Path("networkName") String networkName, @Path("networkMappingName") String networkMappingName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationNetworkMappings update" })
        @PATCH("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationNetworks/{networkName}/replicationNetworkMappings/{networkMappingName}")
        Observable<Response<ResponseBody>> update(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("fabricName") String fabricName, @Path("networkName") String networkName, @Path("networkMappingName") String networkMappingName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body UpdateNetworkMappingInput input, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationNetworkMappings beginUpdate" })
        @PATCH("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationNetworks/{networkName}/replicationNetworkMappings/{networkMappingName}")
        Observable<Response<ResponseBody>> beginUpdate(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("fabricName") String fabricName, @Path("networkName") String networkName, @Path("networkMappingName") String networkMappingName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body UpdateNetworkMappingInput input, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationNetworkMappings listNext" })
        @GET
        Observable<Response<ResponseBody>> listNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationNetworkMappings listByReplicationNetworksNext" })
        @GET
        Observable<Response<ResponseBody>> listByReplicationNetworksNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Gets all the network mappings under a vault.
     * Lists all ASR network mappings in the vault.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;NetworkMappingInner&gt; object if successful.
     */
    public PagedList<NetworkMappingInner> list() {
        ServiceResponse<Page<NetworkMappingInner>> response = listSinglePageAsync().toBlocking().single();
        return new PagedList<NetworkMappingInner>(response.body()) {
            @Override
            public Page<NetworkMappingInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets all the network mappings under a vault.
     * Lists all ASR network mappings in the vault.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<NetworkMappingInner>> listAsync(final ListOperationCallback<NetworkMappingInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSinglePageAsync(),
            new Func1<String, Observable<ServiceResponse<Page<NetworkMappingInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<NetworkMappingInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets all the network mappings under a vault.
     * Lists all ASR network mappings in the vault.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;NetworkMappingInner&gt; object
     */
    public Observable<Page<NetworkMappingInner>> listAsync() {
        return listWithServiceResponseAsync()
            .map(new Func1<ServiceResponse<Page<NetworkMappingInner>>, Page<NetworkMappingInner>>() {
                @Override
                public Page<NetworkMappingInner> call(ServiceResponse<Page<NetworkMappingInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets all the network mappings under a vault.
     * Lists all ASR network mappings in the vault.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;NetworkMappingInner&gt; object
     */
    public Observable<ServiceResponse<Page<NetworkMappingInner>>> listWithServiceResponseAsync() {
        return listSinglePageAsync()
            .concatMap(new Func1<ServiceResponse<Page<NetworkMappingInner>>, Observable<ServiceResponse<Page<NetworkMappingInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<NetworkMappingInner>>> call(ServiceResponse<Page<NetworkMappingInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets all the network mappings under a vault.
     * Lists all ASR network mappings in the vault.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;NetworkMappingInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<NetworkMappingInner>>> listSinglePageAsync() {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.list(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<NetworkMappingInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<NetworkMappingInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<NetworkMappingInner>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<NetworkMappingInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<NetworkMappingInner>> listDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<NetworkMappingInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<NetworkMappingInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets all the network mappings under a network.
     * Lists all ASR network mappings for the specified network.
     *
     * @param fabricName Primary fabric name.
     * @param networkName Primary network name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;NetworkMappingInner&gt; object if successful.
     */
    public PagedList<NetworkMappingInner> listByReplicationNetworks(final String fabricName, final String networkName) {
        ServiceResponse<Page<NetworkMappingInner>> response = listByReplicationNetworksSinglePageAsync(fabricName, networkName).toBlocking().single();
        return new PagedList<NetworkMappingInner>(response.body()) {
            @Override
            public Page<NetworkMappingInner> nextPage(String nextPageLink) {
                return listByReplicationNetworksNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets all the network mappings under a network.
     * Lists all ASR network mappings for the specified network.
     *
     * @param fabricName Primary fabric name.
     * @param networkName Primary network name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<NetworkMappingInner>> listByReplicationNetworksAsync(final String fabricName, final String networkName, final ListOperationCallback<NetworkMappingInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByReplicationNetworksSinglePageAsync(fabricName, networkName),
            new Func1<String, Observable<ServiceResponse<Page<NetworkMappingInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<NetworkMappingInner>>> call(String nextPageLink) {
                    return listByReplicationNetworksNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets all the network mappings under a network.
     * Lists all ASR network mappings for the specified network.
     *
     * @param fabricName Primary fabric name.
     * @param networkName Primary network name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;NetworkMappingInner&gt; object
     */
    public Observable<Page<NetworkMappingInner>> listByReplicationNetworksAsync(final String fabricName, final String networkName) {
        return listByReplicationNetworksWithServiceResponseAsync(fabricName, networkName)
            .map(new Func1<ServiceResponse<Page<NetworkMappingInner>>, Page<NetworkMappingInner>>() {
                @Override
                public Page<NetworkMappingInner> call(ServiceResponse<Page<NetworkMappingInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets all the network mappings under a network.
     * Lists all ASR network mappings for the specified network.
     *
     * @param fabricName Primary fabric name.
     * @param networkName Primary network name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;NetworkMappingInner&gt; object
     */
    public Observable<ServiceResponse<Page<NetworkMappingInner>>> listByReplicationNetworksWithServiceResponseAsync(final String fabricName, final String networkName) {
        return listByReplicationNetworksSinglePageAsync(fabricName, networkName)
            .concatMap(new Func1<ServiceResponse<Page<NetworkMappingInner>>, Observable<ServiceResponse<Page<NetworkMappingInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<NetworkMappingInner>>> call(ServiceResponse<Page<NetworkMappingInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByReplicationNetworksNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets all the network mappings under a network.
     * Lists all ASR network mappings for the specified network.
     *
    ServiceResponse<PageImpl<NetworkMappingInner>> * @param fabricName Primary fabric name.
    ServiceResponse<PageImpl<NetworkMappingInner>> * @param networkName Primary network name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;NetworkMappingInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<NetworkMappingInner>>> listByReplicationNetworksSinglePageAsync(final String fabricName, final String networkName) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (networkName == null) {
            throw new IllegalArgumentException("Parameter networkName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByReplicationNetworks(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, networkName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<NetworkMappingInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<NetworkMappingInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<NetworkMappingInner>> result = listByReplicationNetworksDelegate(response);
                        return Observable.just(new ServiceResponse<Page<NetworkMappingInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<NetworkMappingInner>> listByReplicationNetworksDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<NetworkMappingInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<NetworkMappingInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets network mapping by name.
     * Gets the details of an ASR network mapping.
     *
     * @param fabricName Primary fabric name.
     * @param networkName Primary network name.
     * @param networkMappingName Network mapping name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the NetworkMappingInner object if successful.
     */
    public NetworkMappingInner get(String fabricName, String networkName, String networkMappingName) {
        return getWithServiceResponseAsync(fabricName, networkName, networkMappingName).toBlocking().single().body();
    }

    /**
     * Gets network mapping by name.
     * Gets the details of an ASR network mapping.
     *
     * @param fabricName Primary fabric name.
     * @param networkName Primary network name.
     * @param networkMappingName Network mapping name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<NetworkMappingInner> getAsync(String fabricName, String networkName, String networkMappingName, final ServiceCallback<NetworkMappingInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(fabricName, networkName, networkMappingName), serviceCallback);
    }

    /**
     * Gets network mapping by name.
     * Gets the details of an ASR network mapping.
     *
     * @param fabricName Primary fabric name.
     * @param networkName Primary network name.
     * @param networkMappingName Network mapping name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the NetworkMappingInner object
     */
    public Observable<NetworkMappingInner> getAsync(String fabricName, String networkName, String networkMappingName) {
        return getWithServiceResponseAsync(fabricName, networkName, networkMappingName).map(new Func1<ServiceResponse<NetworkMappingInner>, NetworkMappingInner>() {
            @Override
            public NetworkMappingInner call(ServiceResponse<NetworkMappingInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets network mapping by name.
     * Gets the details of an ASR network mapping.
     *
     * @param fabricName Primary fabric name.
     * @param networkName Primary network name.
     * @param networkMappingName Network mapping name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the NetworkMappingInner object
     */
    public Observable<ServiceResponse<NetworkMappingInner>> getWithServiceResponseAsync(String fabricName, String networkName, String networkMappingName) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (networkName == null) {
            throw new IllegalArgumentException("Parameter networkName is required and cannot be null.");
        }
        if (networkMappingName == null) {
            throw new IllegalArgumentException("Parameter networkMappingName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.get(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, networkName, networkMappingName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<NetworkMappingInner>>>() {
                @Override
                public Observable<ServiceResponse<NetworkMappingInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<NetworkMappingInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<NetworkMappingInner> getDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<NetworkMappingInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<NetworkMappingInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Creates network mapping.
     * The operation to create an ASR network mapping.
     *
     * @param fabricName Primary fabric name.
     * @param networkName Primary network name.
     * @param networkMappingName Network mapping name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the NetworkMappingInner object if successful.
     */
    public NetworkMappingInner create(String fabricName, String networkName, String networkMappingName) {
        return createWithServiceResponseAsync(fabricName, networkName, networkMappingName).toBlocking().last().body();
    }

    /**
     * Creates network mapping.
     * The operation to create an ASR network mapping.
     *
     * @param fabricName Primary fabric name.
     * @param networkName Primary network name.
     * @param networkMappingName Network mapping name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<NetworkMappingInner> createAsync(String fabricName, String networkName, String networkMappingName, final ServiceCallback<NetworkMappingInner> serviceCallback) {
        return ServiceFuture.fromResponse(createWithServiceResponseAsync(fabricName, networkName, networkMappingName), serviceCallback);
    }

    /**
     * Creates network mapping.
     * The operation to create an ASR network mapping.
     *
     * @param fabricName Primary fabric name.
     * @param networkName Primary network name.
     * @param networkMappingName Network mapping name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<NetworkMappingInner> createAsync(String fabricName, String networkName, String networkMappingName) {
        return createWithServiceResponseAsync(fabricName, networkName, networkMappingName).map(new Func1<ServiceResponse<NetworkMappingInner>, NetworkMappingInner>() {
            @Override
            public NetworkMappingInner call(ServiceResponse<NetworkMappingInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates network mapping.
     * The operation to create an ASR network mapping.
     *
     * @param fabricName Primary fabric name.
     * @param networkName Primary network name.
     * @param networkMappingName Network mapping name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<NetworkMappingInner>> createWithServiceResponseAsync(String fabricName, String networkName, String networkMappingName) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (networkName == null) {
            throw new IllegalArgumentException("Parameter networkName is required and cannot be null.");
        }
        if (networkMappingName == null) {
            throw new IllegalArgumentException("Parameter networkMappingName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final CreateNetworkMappingInputProperties properties = null;
        CreateNetworkMappingInput input = new CreateNetworkMappingInput();
        input.withProperties(null);
        Observable<Response<ResponseBody>> observable = service.create(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, networkName, networkMappingName, this.client.apiVersion(), this.client.acceptLanguage(), input, this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<NetworkMappingInner>() { }.getType());
    }
    /**
     * Creates network mapping.
     * The operation to create an ASR network mapping.
     *
     * @param fabricName Primary fabric name.
     * @param networkName Primary network name.
     * @param networkMappingName Network mapping name.
     * @param properties Input properties for creating network mapping.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the NetworkMappingInner object if successful.
     */
    public NetworkMappingInner create(String fabricName, String networkName, String networkMappingName, CreateNetworkMappingInputProperties properties) {
        return createWithServiceResponseAsync(fabricName, networkName, networkMappingName, properties).toBlocking().last().body();
    }

    /**
     * Creates network mapping.
     * The operation to create an ASR network mapping.
     *
     * @param fabricName Primary fabric name.
     * @param networkName Primary network name.
     * @param networkMappingName Network mapping name.
     * @param properties Input properties for creating network mapping.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<NetworkMappingInner> createAsync(String fabricName, String networkName, String networkMappingName, CreateNetworkMappingInputProperties properties, final ServiceCallback<NetworkMappingInner> serviceCallback) {
        return ServiceFuture.fromResponse(createWithServiceResponseAsync(fabricName, networkName, networkMappingName, properties), serviceCallback);
    }

    /**
     * Creates network mapping.
     * The operation to create an ASR network mapping.
     *
     * @param fabricName Primary fabric name.
     * @param networkName Primary network name.
     * @param networkMappingName Network mapping name.
     * @param properties Input properties for creating network mapping.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<NetworkMappingInner> createAsync(String fabricName, String networkName, String networkMappingName, CreateNetworkMappingInputProperties properties) {
        return createWithServiceResponseAsync(fabricName, networkName, networkMappingName, properties).map(new Func1<ServiceResponse<NetworkMappingInner>, NetworkMappingInner>() {
            @Override
            public NetworkMappingInner call(ServiceResponse<NetworkMappingInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates network mapping.
     * The operation to create an ASR network mapping.
     *
     * @param fabricName Primary fabric name.
     * @param networkName Primary network name.
     * @param networkMappingName Network mapping name.
     * @param properties Input properties for creating network mapping.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<NetworkMappingInner>> createWithServiceResponseAsync(String fabricName, String networkName, String networkMappingName, CreateNetworkMappingInputProperties properties) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (networkName == null) {
            throw new IllegalArgumentException("Parameter networkName is required and cannot be null.");
        }
        if (networkMappingName == null) {
            throw new IllegalArgumentException("Parameter networkMappingName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(properties);
        CreateNetworkMappingInput input = new CreateNetworkMappingInput();
        input.withProperties(properties);
        Observable<Response<ResponseBody>> observable = service.create(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, networkName, networkMappingName, this.client.apiVersion(), this.client.acceptLanguage(), input, this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<NetworkMappingInner>() { }.getType());
    }

    /**
     * Creates network mapping.
     * The operation to create an ASR network mapping.
     *
     * @param fabricName Primary fabric name.
     * @param networkName Primary network name.
     * @param networkMappingName Network mapping name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the NetworkMappingInner object if successful.
     */
    public NetworkMappingInner beginCreate(String fabricName, String networkName, String networkMappingName) {
        return beginCreateWithServiceResponseAsync(fabricName, networkName, networkMappingName).toBlocking().single().body();
    }

    /**
     * Creates network mapping.
     * The operation to create an ASR network mapping.
     *
     * @param fabricName Primary fabric name.
     * @param networkName Primary network name.
     * @param networkMappingName Network mapping name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<NetworkMappingInner> beginCreateAsync(String fabricName, String networkName, String networkMappingName, final ServiceCallback<NetworkMappingInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginCreateWithServiceResponseAsync(fabricName, networkName, networkMappingName), serviceCallback);
    }

    /**
     * Creates network mapping.
     * The operation to create an ASR network mapping.
     *
     * @param fabricName Primary fabric name.
     * @param networkName Primary network name.
     * @param networkMappingName Network mapping name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the NetworkMappingInner object
     */
    public Observable<NetworkMappingInner> beginCreateAsync(String fabricName, String networkName, String networkMappingName) {
        return beginCreateWithServiceResponseAsync(fabricName, networkName, networkMappingName).map(new Func1<ServiceResponse<NetworkMappingInner>, NetworkMappingInner>() {
            @Override
            public NetworkMappingInner call(ServiceResponse<NetworkMappingInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates network mapping.
     * The operation to create an ASR network mapping.
     *
     * @param fabricName Primary fabric name.
     * @param networkName Primary network name.
     * @param networkMappingName Network mapping name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the NetworkMappingInner object
     */
    public Observable<ServiceResponse<NetworkMappingInner>> beginCreateWithServiceResponseAsync(String fabricName, String networkName, String networkMappingName) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (networkName == null) {
            throw new IllegalArgumentException("Parameter networkName is required and cannot be null.");
        }
        if (networkMappingName == null) {
            throw new IllegalArgumentException("Parameter networkMappingName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final CreateNetworkMappingInputProperties properties = null;
        CreateNetworkMappingInput input = new CreateNetworkMappingInput();
        input.withProperties(null);
        return service.beginCreate(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, networkName, networkMappingName, this.client.apiVersion(), this.client.acceptLanguage(), input, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<NetworkMappingInner>>>() {
                @Override
                public Observable<ServiceResponse<NetworkMappingInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<NetworkMappingInner> clientResponse = beginCreateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Creates network mapping.
     * The operation to create an ASR network mapping.
     *
     * @param fabricName Primary fabric name.
     * @param networkName Primary network name.
     * @param networkMappingName Network mapping name.
     * @param properties Input properties for creating network mapping.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the NetworkMappingInner object if successful.
     */
    public NetworkMappingInner beginCreate(String fabricName, String networkName, String networkMappingName, CreateNetworkMappingInputProperties properties) {
        return beginCreateWithServiceResponseAsync(fabricName, networkName, networkMappingName, properties).toBlocking().single().body();
    }

    /**
     * Creates network mapping.
     * The operation to create an ASR network mapping.
     *
     * @param fabricName Primary fabric name.
     * @param networkName Primary network name.
     * @param networkMappingName Network mapping name.
     * @param properties Input properties for creating network mapping.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<NetworkMappingInner> beginCreateAsync(String fabricName, String networkName, String networkMappingName, CreateNetworkMappingInputProperties properties, final ServiceCallback<NetworkMappingInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginCreateWithServiceResponseAsync(fabricName, networkName, networkMappingName, properties), serviceCallback);
    }

    /**
     * Creates network mapping.
     * The operation to create an ASR network mapping.
     *
     * @param fabricName Primary fabric name.
     * @param networkName Primary network name.
     * @param networkMappingName Network mapping name.
     * @param properties Input properties for creating network mapping.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the NetworkMappingInner object
     */
    public Observable<NetworkMappingInner> beginCreateAsync(String fabricName, String networkName, String networkMappingName, CreateNetworkMappingInputProperties properties) {
        return beginCreateWithServiceResponseAsync(fabricName, networkName, networkMappingName, properties).map(new Func1<ServiceResponse<NetworkMappingInner>, NetworkMappingInner>() {
            @Override
            public NetworkMappingInner call(ServiceResponse<NetworkMappingInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates network mapping.
     * The operation to create an ASR network mapping.
     *
     * @param fabricName Primary fabric name.
     * @param networkName Primary network name.
     * @param networkMappingName Network mapping name.
     * @param properties Input properties for creating network mapping.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the NetworkMappingInner object
     */
    public Observable<ServiceResponse<NetworkMappingInner>> beginCreateWithServiceResponseAsync(String fabricName, String networkName, String networkMappingName, CreateNetworkMappingInputProperties properties) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (networkName == null) {
            throw new IllegalArgumentException("Parameter networkName is required and cannot be null.");
        }
        if (networkMappingName == null) {
            throw new IllegalArgumentException("Parameter networkMappingName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(properties);
        CreateNetworkMappingInput input = new CreateNetworkMappingInput();
        input.withProperties(properties);
        return service.beginCreate(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, networkName, networkMappingName, this.client.apiVersion(), this.client.acceptLanguage(), input, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<NetworkMappingInner>>>() {
                @Override
                public Observable<ServiceResponse<NetworkMappingInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<NetworkMappingInner> clientResponse = beginCreateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<NetworkMappingInner> beginCreateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<NetworkMappingInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<NetworkMappingInner>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Delete network mapping.
     * The operation to delete a network mapping.
     *
     * @param fabricName Primary fabric name.
     * @param networkName Primary network name.
     * @param networkMappingName ARM Resource Name for network mapping.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String fabricName, String networkName, String networkMappingName) {
        deleteWithServiceResponseAsync(fabricName, networkName, networkMappingName).toBlocking().last().body();
    }

    /**
     * Delete network mapping.
     * The operation to delete a network mapping.
     *
     * @param fabricName Primary fabric name.
     * @param networkName Primary network name.
     * @param networkMappingName ARM Resource Name for network mapping.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String fabricName, String networkName, String networkMappingName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(fabricName, networkName, networkMappingName), serviceCallback);
    }

    /**
     * Delete network mapping.
     * The operation to delete a network mapping.
     *
     * @param fabricName Primary fabric name.
     * @param networkName Primary network name.
     * @param networkMappingName ARM Resource Name for network mapping.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Void> deleteAsync(String fabricName, String networkName, String networkMappingName) {
        return deleteWithServiceResponseAsync(fabricName, networkName, networkMappingName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Delete network mapping.
     * The operation to delete a network mapping.
     *
     * @param fabricName Primary fabric name.
     * @param networkName Primary network name.
     * @param networkMappingName ARM Resource Name for network mapping.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String fabricName, String networkName, String networkMappingName) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (networkName == null) {
            throw new IllegalArgumentException("Parameter networkName is required and cannot be null.");
        }
        if (networkMappingName == null) {
            throw new IllegalArgumentException("Parameter networkMappingName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Observable<Response<ResponseBody>> observable = service.delete(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, networkName, networkMappingName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<Void>() { }.getType());
    }

    /**
     * Delete network mapping.
     * The operation to delete a network mapping.
     *
     * @param fabricName Primary fabric name.
     * @param networkName Primary network name.
     * @param networkMappingName ARM Resource Name for network mapping.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void beginDelete(String fabricName, String networkName, String networkMappingName) {
        beginDeleteWithServiceResponseAsync(fabricName, networkName, networkMappingName).toBlocking().single().body();
    }

    /**
     * Delete network mapping.
     * The operation to delete a network mapping.
     *
     * @param fabricName Primary fabric name.
     * @param networkName Primary network name.
     * @param networkMappingName ARM Resource Name for network mapping.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> beginDeleteAsync(String fabricName, String networkName, String networkMappingName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(beginDeleteWithServiceResponseAsync(fabricName, networkName, networkMappingName), serviceCallback);
    }

    /**
     * Delete network mapping.
     * The operation to delete a network mapping.
     *
     * @param fabricName Primary fabric name.
     * @param networkName Primary network name.
     * @param networkMappingName ARM Resource Name for network mapping.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> beginDeleteAsync(String fabricName, String networkName, String networkMappingName) {
        return beginDeleteWithServiceResponseAsync(fabricName, networkName, networkMappingName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Delete network mapping.
     * The operation to delete a network mapping.
     *
     * @param fabricName Primary fabric name.
     * @param networkName Primary network name.
     * @param networkMappingName ARM Resource Name for network mapping.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> beginDeleteWithServiceResponseAsync(String fabricName, String networkName, String networkMappingName) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (networkName == null) {
            throw new IllegalArgumentException("Parameter networkName is required and cannot be null.");
        }
        if (networkMappingName == null) {
            throw new IllegalArgumentException("Parameter networkMappingName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.beginDelete(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, networkName, networkMappingName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = beginDeleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> beginDeleteDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CloudException>newInstance(this.client.serializerAdapter())
                .register(202, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Updates network mapping.
     * The operation to update an ASR network mapping.
     *
     * @param fabricName Primary fabric name.
     * @param networkName Primary network name.
     * @param networkMappingName Network mapping name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the NetworkMappingInner object if successful.
     */
    public NetworkMappingInner update(String fabricName, String networkName, String networkMappingName) {
        return updateWithServiceResponseAsync(fabricName, networkName, networkMappingName).toBlocking().last().body();
    }

    /**
     * Updates network mapping.
     * The operation to update an ASR network mapping.
     *
     * @param fabricName Primary fabric name.
     * @param networkName Primary network name.
     * @param networkMappingName Network mapping name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<NetworkMappingInner> updateAsync(String fabricName, String networkName, String networkMappingName, final ServiceCallback<NetworkMappingInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(fabricName, networkName, networkMappingName), serviceCallback);
    }

    /**
     * Updates network mapping.
     * The operation to update an ASR network mapping.
     *
     * @param fabricName Primary fabric name.
     * @param networkName Primary network name.
     * @param networkMappingName Network mapping name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<NetworkMappingInner> updateAsync(String fabricName, String networkName, String networkMappingName) {
        return updateWithServiceResponseAsync(fabricName, networkName, networkMappingName).map(new Func1<ServiceResponse<NetworkMappingInner>, NetworkMappingInner>() {
            @Override
            public NetworkMappingInner call(ServiceResponse<NetworkMappingInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Updates network mapping.
     * The operation to update an ASR network mapping.
     *
     * @param fabricName Primary fabric name.
     * @param networkName Primary network name.
     * @param networkMappingName Network mapping name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<NetworkMappingInner>> updateWithServiceResponseAsync(String fabricName, String networkName, String networkMappingName) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (networkName == null) {
            throw new IllegalArgumentException("Parameter networkName is required and cannot be null.");
        }
        if (networkMappingName == null) {
            throw new IllegalArgumentException("Parameter networkMappingName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final UpdateNetworkMappingInputProperties properties = null;
        UpdateNetworkMappingInput input = new UpdateNetworkMappingInput();
        input.withProperties(null);
        Observable<Response<ResponseBody>> observable = service.update(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, networkName, networkMappingName, this.client.apiVersion(), this.client.acceptLanguage(), input, this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<NetworkMappingInner>() { }.getType());
    }
    /**
     * Updates network mapping.
     * The operation to update an ASR network mapping.
     *
     * @param fabricName Primary fabric name.
     * @param networkName Primary network name.
     * @param networkMappingName Network mapping name.
     * @param properties The input properties needed to update network mapping.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the NetworkMappingInner object if successful.
     */
    public NetworkMappingInner update(String fabricName, String networkName, String networkMappingName, UpdateNetworkMappingInputProperties properties) {
        return updateWithServiceResponseAsync(fabricName, networkName, networkMappingName, properties).toBlocking().last().body();
    }

    /**
     * Updates network mapping.
     * The operation to update an ASR network mapping.
     *
     * @param fabricName Primary fabric name.
     * @param networkName Primary network name.
     * @param networkMappingName Network mapping name.
     * @param properties The input properties needed to update network mapping.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<NetworkMappingInner> updateAsync(String fabricName, String networkName, String networkMappingName, UpdateNetworkMappingInputProperties properties, final ServiceCallback<NetworkMappingInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(fabricName, networkName, networkMappingName, properties), serviceCallback);
    }

    /**
     * Updates network mapping.
     * The operation to update an ASR network mapping.
     *
     * @param fabricName Primary fabric name.
     * @param networkName Primary network name.
     * @param networkMappingName Network mapping name.
     * @param properties The input properties needed to update network mapping.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<NetworkMappingInner> updateAsync(String fabricName, String networkName, String networkMappingName, UpdateNetworkMappingInputProperties properties) {
        return updateWithServiceResponseAsync(fabricName, networkName, networkMappingName, properties).map(new Func1<ServiceResponse<NetworkMappingInner>, NetworkMappingInner>() {
            @Override
            public NetworkMappingInner call(ServiceResponse<NetworkMappingInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Updates network mapping.
     * The operation to update an ASR network mapping.
     *
     * @param fabricName Primary fabric name.
     * @param networkName Primary network name.
     * @param networkMappingName Network mapping name.
     * @param properties The input properties needed to update network mapping.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<NetworkMappingInner>> updateWithServiceResponseAsync(String fabricName, String networkName, String networkMappingName, UpdateNetworkMappingInputProperties properties) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (networkName == null) {
            throw new IllegalArgumentException("Parameter networkName is required and cannot be null.");
        }
        if (networkMappingName == null) {
            throw new IllegalArgumentException("Parameter networkMappingName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(properties);
        UpdateNetworkMappingInput input = new UpdateNetworkMappingInput();
        input.withProperties(properties);
        Observable<Response<ResponseBody>> observable = service.update(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, networkName, networkMappingName, this.client.apiVersion(), this.client.acceptLanguage(), input, this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<NetworkMappingInner>() { }.getType());
    }

    /**
     * Updates network mapping.
     * The operation to update an ASR network mapping.
     *
     * @param fabricName Primary fabric name.
     * @param networkName Primary network name.
     * @param networkMappingName Network mapping name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the NetworkMappingInner object if successful.
     */
    public NetworkMappingInner beginUpdate(String fabricName, String networkName, String networkMappingName) {
        return beginUpdateWithServiceResponseAsync(fabricName, networkName, networkMappingName).toBlocking().single().body();
    }

    /**
     * Updates network mapping.
     * The operation to update an ASR network mapping.
     *
     * @param fabricName Primary fabric name.
     * @param networkName Primary network name.
     * @param networkMappingName Network mapping name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<NetworkMappingInner> beginUpdateAsync(String fabricName, String networkName, String networkMappingName, final ServiceCallback<NetworkMappingInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginUpdateWithServiceResponseAsync(fabricName, networkName, networkMappingName), serviceCallback);
    }

    /**
     * Updates network mapping.
     * The operation to update an ASR network mapping.
     *
     * @param fabricName Primary fabric name.
     * @param networkName Primary network name.
     * @param networkMappingName Network mapping name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the NetworkMappingInner object
     */
    public Observable<NetworkMappingInner> beginUpdateAsync(String fabricName, String networkName, String networkMappingName) {
        return beginUpdateWithServiceResponseAsync(fabricName, networkName, networkMappingName).map(new Func1<ServiceResponse<NetworkMappingInner>, NetworkMappingInner>() {
            @Override
            public NetworkMappingInner call(ServiceResponse<NetworkMappingInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Updates network mapping.
     * The operation to update an ASR network mapping.
     *
     * @param fabricName Primary fabric name.
     * @param networkName Primary network name.
     * @param networkMappingName Network mapping name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the NetworkMappingInner object
     */
    public Observable<ServiceResponse<NetworkMappingInner>> beginUpdateWithServiceResponseAsync(String fabricName, String networkName, String networkMappingName) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (networkName == null) {
            throw new IllegalArgumentException("Parameter networkName is required and cannot be null.");
        }
        if (networkMappingName == null) {
            throw new IllegalArgumentException("Parameter networkMappingName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final UpdateNetworkMappingInputProperties properties = null;
        UpdateNetworkMappingInput input = new UpdateNetworkMappingInput();
        input.withProperties(null);
        return service.beginUpdate(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, networkName, networkMappingName, this.client.apiVersion(), this.client.acceptLanguage(), input, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<NetworkMappingInner>>>() {
                @Override
                public Observable<ServiceResponse<NetworkMappingInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<NetworkMappingInner> clientResponse = beginUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Updates network mapping.
     * The operation to update an ASR network mapping.
     *
     * @param fabricName Primary fabric name.
     * @param networkName Primary network name.
     * @param networkMappingName Network mapping name.
     * @param properties The input properties needed to update network mapping.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the NetworkMappingInner object if successful.
     */
    public NetworkMappingInner beginUpdate(String fabricName, String networkName, String networkMappingName, UpdateNetworkMappingInputProperties properties) {
        return beginUpdateWithServiceResponseAsync(fabricName, networkName, networkMappingName, properties).toBlocking().single().body();
    }

    /**
     * Updates network mapping.
     * The operation to update an ASR network mapping.
     *
     * @param fabricName Primary fabric name.
     * @param networkName Primary network name.
     * @param networkMappingName Network mapping name.
     * @param properties The input properties needed to update network mapping.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<NetworkMappingInner> beginUpdateAsync(String fabricName, String networkName, String networkMappingName, UpdateNetworkMappingInputProperties properties, final ServiceCallback<NetworkMappingInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginUpdateWithServiceResponseAsync(fabricName, networkName, networkMappingName, properties), serviceCallback);
    }

    /**
     * Updates network mapping.
     * The operation to update an ASR network mapping.
     *
     * @param fabricName Primary fabric name.
     * @param networkName Primary network name.
     * @param networkMappingName Network mapping name.
     * @param properties The input properties needed to update network mapping.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the NetworkMappingInner object
     */
    public Observable<NetworkMappingInner> beginUpdateAsync(String fabricName, String networkName, String networkMappingName, UpdateNetworkMappingInputProperties properties) {
        return beginUpdateWithServiceResponseAsync(fabricName, networkName, networkMappingName, properties).map(new Func1<ServiceResponse<NetworkMappingInner>, NetworkMappingInner>() {
            @Override
            public NetworkMappingInner call(ServiceResponse<NetworkMappingInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Updates network mapping.
     * The operation to update an ASR network mapping.
     *
     * @param fabricName Primary fabric name.
     * @param networkName Primary network name.
     * @param networkMappingName Network mapping name.
     * @param properties The input properties needed to update network mapping.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the NetworkMappingInner object
     */
    public Observable<ServiceResponse<NetworkMappingInner>> beginUpdateWithServiceResponseAsync(String fabricName, String networkName, String networkMappingName, UpdateNetworkMappingInputProperties properties) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (networkName == null) {
            throw new IllegalArgumentException("Parameter networkName is required and cannot be null.");
        }
        if (networkMappingName == null) {
            throw new IllegalArgumentException("Parameter networkMappingName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(properties);
        UpdateNetworkMappingInput input = new UpdateNetworkMappingInput();
        input.withProperties(properties);
        return service.beginUpdate(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, networkName, networkMappingName, this.client.apiVersion(), this.client.acceptLanguage(), input, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<NetworkMappingInner>>>() {
                @Override
                public Observable<ServiceResponse<NetworkMappingInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<NetworkMappingInner> clientResponse = beginUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<NetworkMappingInner> beginUpdateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<NetworkMappingInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<NetworkMappingInner>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets all the network mappings under a vault.
     * Lists all ASR network mappings in the vault.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;NetworkMappingInner&gt; object if successful.
     */
    public PagedList<NetworkMappingInner> listNext(final String nextPageLink) {
        ServiceResponse<Page<NetworkMappingInner>> response = listNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<NetworkMappingInner>(response.body()) {
            @Override
            public Page<NetworkMappingInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets all the network mappings under a vault.
     * Lists all ASR network mappings in the vault.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<NetworkMappingInner>> listNextAsync(final String nextPageLink, final ServiceFuture<List<NetworkMappingInner>> serviceFuture, final ListOperationCallback<NetworkMappingInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<NetworkMappingInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<NetworkMappingInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets all the network mappings under a vault.
     * Lists all ASR network mappings in the vault.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;NetworkMappingInner&gt; object
     */
    public Observable<Page<NetworkMappingInner>> listNextAsync(final String nextPageLink) {
        return listNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<NetworkMappingInner>>, Page<NetworkMappingInner>>() {
                @Override
                public Page<NetworkMappingInner> call(ServiceResponse<Page<NetworkMappingInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets all the network mappings under a vault.
     * Lists all ASR network mappings in the vault.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;NetworkMappingInner&gt; object
     */
    public Observable<ServiceResponse<Page<NetworkMappingInner>>> listNextWithServiceResponseAsync(final String nextPageLink) {
        return listNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<NetworkMappingInner>>, Observable<ServiceResponse<Page<NetworkMappingInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<NetworkMappingInner>>> call(ServiceResponse<Page<NetworkMappingInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets all the network mappings under a vault.
     * Lists all ASR network mappings in the vault.
     *
    ServiceResponse<PageImpl<NetworkMappingInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;NetworkMappingInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<NetworkMappingInner>>> listNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<NetworkMappingInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<NetworkMappingInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<NetworkMappingInner>> result = listNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<NetworkMappingInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<NetworkMappingInner>> listNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<NetworkMappingInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<NetworkMappingInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets all the network mappings under a network.
     * Lists all ASR network mappings for the specified network.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;NetworkMappingInner&gt; object if successful.
     */
    public PagedList<NetworkMappingInner> listByReplicationNetworksNext(final String nextPageLink) {
        ServiceResponse<Page<NetworkMappingInner>> response = listByReplicationNetworksNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<NetworkMappingInner>(response.body()) {
            @Override
            public Page<NetworkMappingInner> nextPage(String nextPageLink) {
                return listByReplicationNetworksNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets all the network mappings under a network.
     * Lists all ASR network mappings for the specified network.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<NetworkMappingInner>> listByReplicationNetworksNextAsync(final String nextPageLink, final ServiceFuture<List<NetworkMappingInner>> serviceFuture, final ListOperationCallback<NetworkMappingInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByReplicationNetworksNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<NetworkMappingInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<NetworkMappingInner>>> call(String nextPageLink) {
                    return listByReplicationNetworksNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets all the network mappings under a network.
     * Lists all ASR network mappings for the specified network.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;NetworkMappingInner&gt; object
     */
    public Observable<Page<NetworkMappingInner>> listByReplicationNetworksNextAsync(final String nextPageLink) {
        return listByReplicationNetworksNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<NetworkMappingInner>>, Page<NetworkMappingInner>>() {
                @Override
                public Page<NetworkMappingInner> call(ServiceResponse<Page<NetworkMappingInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets all the network mappings under a network.
     * Lists all ASR network mappings for the specified network.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;NetworkMappingInner&gt; object
     */
    public Observable<ServiceResponse<Page<NetworkMappingInner>>> listByReplicationNetworksNextWithServiceResponseAsync(final String nextPageLink) {
        return listByReplicationNetworksNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<NetworkMappingInner>>, Observable<ServiceResponse<Page<NetworkMappingInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<NetworkMappingInner>>> call(ServiceResponse<Page<NetworkMappingInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByReplicationNetworksNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets all the network mappings under a network.
     * Lists all ASR network mappings for the specified network.
     *
    ServiceResponse<PageImpl<NetworkMappingInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;NetworkMappingInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<NetworkMappingInner>>> listByReplicationNetworksNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByReplicationNetworksNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<NetworkMappingInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<NetworkMappingInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<NetworkMappingInner>> result = listByReplicationNetworksNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<NetworkMappingInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<NetworkMappingInner>> listByReplicationNetworksNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<NetworkMappingInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<NetworkMappingInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
