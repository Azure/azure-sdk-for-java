/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.implementation;

import com.microsoft.azure.arm.collection.InnerSupportsDelete;
import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.CloudException;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.AddVCenterRequest;
import com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.AddVCenterRequestProperties;
import com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.UpdateVCenterRequest;
import com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.UpdateVCenterRequestProperties;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.PATCH;
import retrofit2.http.Path;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in ReplicationvCenters.
 */
public class ReplicationvCentersInner implements InnerSupportsDelete<Void> {
    /** The Retrofit service to perform REST calls. */
    private ReplicationvCentersService service;
    /** The service client containing this operation class. */
    private SiteRecoveryManagementClientImpl client;

    /**
     * Initializes an instance of ReplicationvCentersInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public ReplicationvCentersInner(Retrofit retrofit, SiteRecoveryManagementClientImpl client) {
        this.service = retrofit.create(ReplicationvCentersService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for ReplicationvCenters to be
     * used by Retrofit to perform actually REST calls.
     */
    interface ReplicationvCentersService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationvCenters get" })
        @GET("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationvCenters/{vCenterName}")
        Observable<Response<ResponseBody>> get(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("fabricName") String fabricName, @Path("vCenterName") String vCenterName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationvCenters create" })
        @PUT("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationvCenters/{vCenterName}")
        Observable<Response<ResponseBody>> create(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("fabricName") String fabricName, @Path("vCenterName") String vCenterName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body AddVCenterRequest addVCenterRequest, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationvCenters beginCreate" })
        @PUT("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationvCenters/{vCenterName}")
        Observable<Response<ResponseBody>> beginCreate(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("fabricName") String fabricName, @Path("vCenterName") String vCenterName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body AddVCenterRequest addVCenterRequest, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationvCenters delete" })
        @HTTP(path = "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationvCenters/{vCenterName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("fabricName") String fabricName, @Path("vCenterName") String vCenterName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationvCenters beginDelete" })
        @HTTP(path = "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationvCenters/{vCenterName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> beginDelete(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("fabricName") String fabricName, @Path("vCenterName") String vCenterName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationvCenters update" })
        @PATCH("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationvCenters/{vCenterName}")
        Observable<Response<ResponseBody>> update(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("fabricName") String fabricName, @Path("vCenterName") String vCenterName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body UpdateVCenterRequest updateVCenterRequest, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationvCenters beginUpdate" })
        @PATCH("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationvCenters/{vCenterName}")
        Observable<Response<ResponseBody>> beginUpdate(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("fabricName") String fabricName, @Path("vCenterName") String vCenterName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body UpdateVCenterRequest updateVCenterRequest, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationvCenters listByReplicationFabrics" })
        @GET("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationvCenters")
        Observable<Response<ResponseBody>> listByReplicationFabrics(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("fabricName") String fabricName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationvCenters list" })
        @GET("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationvCenters")
        Observable<Response<ResponseBody>> list(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationvCenters listByReplicationFabricsNext" })
        @GET
        Observable<Response<ResponseBody>> listByReplicationFabricsNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationvCenters listNext" })
        @GET
        Observable<Response<ResponseBody>> listNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Gets the details of a vCenter.
     * Gets the details of a registered vCenter server(Add vCenter server.).
     *
     * @param fabricName Fabric name.
     * @param vCenterName vCenter name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the VCenterInner object if successful.
     */
    public VCenterInner get(String fabricName, String vCenterName) {
        return getWithServiceResponseAsync(fabricName, vCenterName).toBlocking().single().body();
    }

    /**
     * Gets the details of a vCenter.
     * Gets the details of a registered vCenter server(Add vCenter server.).
     *
     * @param fabricName Fabric name.
     * @param vCenterName vCenter name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<VCenterInner> getAsync(String fabricName, String vCenterName, final ServiceCallback<VCenterInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(fabricName, vCenterName), serviceCallback);
    }

    /**
     * Gets the details of a vCenter.
     * Gets the details of a registered vCenter server(Add vCenter server.).
     *
     * @param fabricName Fabric name.
     * @param vCenterName vCenter name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the VCenterInner object
     */
    public Observable<VCenterInner> getAsync(String fabricName, String vCenterName) {
        return getWithServiceResponseAsync(fabricName, vCenterName).map(new Func1<ServiceResponse<VCenterInner>, VCenterInner>() {
            @Override
            public VCenterInner call(ServiceResponse<VCenterInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets the details of a vCenter.
     * Gets the details of a registered vCenter server(Add vCenter server.).
     *
     * @param fabricName Fabric name.
     * @param vCenterName vCenter name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the VCenterInner object
     */
    public Observable<ServiceResponse<VCenterInner>> getWithServiceResponseAsync(String fabricName, String vCenterName) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (vCenterName == null) {
            throw new IllegalArgumentException("Parameter vCenterName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.get(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, vCenterName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<VCenterInner>>>() {
                @Override
                public Observable<ServiceResponse<VCenterInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<VCenterInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<VCenterInner> getDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<VCenterInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<VCenterInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Add vCenter.
     * The operation to create a vCenter object..
     *
     * @param fabricName Fabric name.
     * @param vCenterName vCenter name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the VCenterInner object if successful.
     */
    public VCenterInner create(String fabricName, String vCenterName) {
        return createWithServiceResponseAsync(fabricName, vCenterName).toBlocking().last().body();
    }

    /**
     * Add vCenter.
     * The operation to create a vCenter object..
     *
     * @param fabricName Fabric name.
     * @param vCenterName vCenter name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<VCenterInner> createAsync(String fabricName, String vCenterName, final ServiceCallback<VCenterInner> serviceCallback) {
        return ServiceFuture.fromResponse(createWithServiceResponseAsync(fabricName, vCenterName), serviceCallback);
    }

    /**
     * Add vCenter.
     * The operation to create a vCenter object..
     *
     * @param fabricName Fabric name.
     * @param vCenterName vCenter name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<VCenterInner> createAsync(String fabricName, String vCenterName) {
        return createWithServiceResponseAsync(fabricName, vCenterName).map(new Func1<ServiceResponse<VCenterInner>, VCenterInner>() {
            @Override
            public VCenterInner call(ServiceResponse<VCenterInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Add vCenter.
     * The operation to create a vCenter object..
     *
     * @param fabricName Fabric name.
     * @param vCenterName vCenter name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<VCenterInner>> createWithServiceResponseAsync(String fabricName, String vCenterName) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (vCenterName == null) {
            throw new IllegalArgumentException("Parameter vCenterName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final AddVCenterRequestProperties properties = null;
        AddVCenterRequest addVCenterRequest = new AddVCenterRequest();
        addVCenterRequest.withProperties(null);
        Observable<Response<ResponseBody>> observable = service.create(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, vCenterName, this.client.apiVersion(), this.client.acceptLanguage(), addVCenterRequest, this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<VCenterInner>() { }.getType());
    }
    /**
     * Add vCenter.
     * The operation to create a vCenter object..
     *
     * @param fabricName Fabric name.
     * @param vCenterName vCenter name.
     * @param properties The properties of an add vCenter request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the VCenterInner object if successful.
     */
    public VCenterInner create(String fabricName, String vCenterName, AddVCenterRequestProperties properties) {
        return createWithServiceResponseAsync(fabricName, vCenterName, properties).toBlocking().last().body();
    }

    /**
     * Add vCenter.
     * The operation to create a vCenter object..
     *
     * @param fabricName Fabric name.
     * @param vCenterName vCenter name.
     * @param properties The properties of an add vCenter request.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<VCenterInner> createAsync(String fabricName, String vCenterName, AddVCenterRequestProperties properties, final ServiceCallback<VCenterInner> serviceCallback) {
        return ServiceFuture.fromResponse(createWithServiceResponseAsync(fabricName, vCenterName, properties), serviceCallback);
    }

    /**
     * Add vCenter.
     * The operation to create a vCenter object..
     *
     * @param fabricName Fabric name.
     * @param vCenterName vCenter name.
     * @param properties The properties of an add vCenter request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<VCenterInner> createAsync(String fabricName, String vCenterName, AddVCenterRequestProperties properties) {
        return createWithServiceResponseAsync(fabricName, vCenterName, properties).map(new Func1<ServiceResponse<VCenterInner>, VCenterInner>() {
            @Override
            public VCenterInner call(ServiceResponse<VCenterInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Add vCenter.
     * The operation to create a vCenter object..
     *
     * @param fabricName Fabric name.
     * @param vCenterName vCenter name.
     * @param properties The properties of an add vCenter request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<VCenterInner>> createWithServiceResponseAsync(String fabricName, String vCenterName, AddVCenterRequestProperties properties) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (vCenterName == null) {
            throw new IllegalArgumentException("Parameter vCenterName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(properties);
        AddVCenterRequest addVCenterRequest = new AddVCenterRequest();
        addVCenterRequest.withProperties(properties);
        Observable<Response<ResponseBody>> observable = service.create(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, vCenterName, this.client.apiVersion(), this.client.acceptLanguage(), addVCenterRequest, this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<VCenterInner>() { }.getType());
    }

    /**
     * Add vCenter.
     * The operation to create a vCenter object..
     *
     * @param fabricName Fabric name.
     * @param vCenterName vCenter name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the VCenterInner object if successful.
     */
    public VCenterInner beginCreate(String fabricName, String vCenterName) {
        return beginCreateWithServiceResponseAsync(fabricName, vCenterName).toBlocking().single().body();
    }

    /**
     * Add vCenter.
     * The operation to create a vCenter object..
     *
     * @param fabricName Fabric name.
     * @param vCenterName vCenter name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<VCenterInner> beginCreateAsync(String fabricName, String vCenterName, final ServiceCallback<VCenterInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginCreateWithServiceResponseAsync(fabricName, vCenterName), serviceCallback);
    }

    /**
     * Add vCenter.
     * The operation to create a vCenter object..
     *
     * @param fabricName Fabric name.
     * @param vCenterName vCenter name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the VCenterInner object
     */
    public Observable<VCenterInner> beginCreateAsync(String fabricName, String vCenterName) {
        return beginCreateWithServiceResponseAsync(fabricName, vCenterName).map(new Func1<ServiceResponse<VCenterInner>, VCenterInner>() {
            @Override
            public VCenterInner call(ServiceResponse<VCenterInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Add vCenter.
     * The operation to create a vCenter object..
     *
     * @param fabricName Fabric name.
     * @param vCenterName vCenter name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the VCenterInner object
     */
    public Observable<ServiceResponse<VCenterInner>> beginCreateWithServiceResponseAsync(String fabricName, String vCenterName) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (vCenterName == null) {
            throw new IllegalArgumentException("Parameter vCenterName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final AddVCenterRequestProperties properties = null;
        AddVCenterRequest addVCenterRequest = new AddVCenterRequest();
        addVCenterRequest.withProperties(null);
        return service.beginCreate(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, vCenterName, this.client.apiVersion(), this.client.acceptLanguage(), addVCenterRequest, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<VCenterInner>>>() {
                @Override
                public Observable<ServiceResponse<VCenterInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<VCenterInner> clientResponse = beginCreateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Add vCenter.
     * The operation to create a vCenter object..
     *
     * @param fabricName Fabric name.
     * @param vCenterName vCenter name.
     * @param properties The properties of an add vCenter request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the VCenterInner object if successful.
     */
    public VCenterInner beginCreate(String fabricName, String vCenterName, AddVCenterRequestProperties properties) {
        return beginCreateWithServiceResponseAsync(fabricName, vCenterName, properties).toBlocking().single().body();
    }

    /**
     * Add vCenter.
     * The operation to create a vCenter object..
     *
     * @param fabricName Fabric name.
     * @param vCenterName vCenter name.
     * @param properties The properties of an add vCenter request.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<VCenterInner> beginCreateAsync(String fabricName, String vCenterName, AddVCenterRequestProperties properties, final ServiceCallback<VCenterInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginCreateWithServiceResponseAsync(fabricName, vCenterName, properties), serviceCallback);
    }

    /**
     * Add vCenter.
     * The operation to create a vCenter object..
     *
     * @param fabricName Fabric name.
     * @param vCenterName vCenter name.
     * @param properties The properties of an add vCenter request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the VCenterInner object
     */
    public Observable<VCenterInner> beginCreateAsync(String fabricName, String vCenterName, AddVCenterRequestProperties properties) {
        return beginCreateWithServiceResponseAsync(fabricName, vCenterName, properties).map(new Func1<ServiceResponse<VCenterInner>, VCenterInner>() {
            @Override
            public VCenterInner call(ServiceResponse<VCenterInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Add vCenter.
     * The operation to create a vCenter object..
     *
     * @param fabricName Fabric name.
     * @param vCenterName vCenter name.
     * @param properties The properties of an add vCenter request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the VCenterInner object
     */
    public Observable<ServiceResponse<VCenterInner>> beginCreateWithServiceResponseAsync(String fabricName, String vCenterName, AddVCenterRequestProperties properties) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (vCenterName == null) {
            throw new IllegalArgumentException("Parameter vCenterName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(properties);
        AddVCenterRequest addVCenterRequest = new AddVCenterRequest();
        addVCenterRequest.withProperties(properties);
        return service.beginCreate(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, vCenterName, this.client.apiVersion(), this.client.acceptLanguage(), addVCenterRequest, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<VCenterInner>>>() {
                @Override
                public Observable<ServiceResponse<VCenterInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<VCenterInner> clientResponse = beginCreateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<VCenterInner> beginCreateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<VCenterInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<VCenterInner>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Remove vCenter operation.
     * The operation to remove(unregister) a registered vCenter server from the vault.
     *
     * @param fabricName Fabric name.
     * @param vCenterName vCenter name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String fabricName, String vCenterName) {
        deleteWithServiceResponseAsync(fabricName, vCenterName).toBlocking().last().body();
    }

    /**
     * Remove vCenter operation.
     * The operation to remove(unregister) a registered vCenter server from the vault.
     *
     * @param fabricName Fabric name.
     * @param vCenterName vCenter name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String fabricName, String vCenterName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(fabricName, vCenterName), serviceCallback);
    }

    /**
     * Remove vCenter operation.
     * The operation to remove(unregister) a registered vCenter server from the vault.
     *
     * @param fabricName Fabric name.
     * @param vCenterName vCenter name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Void> deleteAsync(String fabricName, String vCenterName) {
        return deleteWithServiceResponseAsync(fabricName, vCenterName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Remove vCenter operation.
     * The operation to remove(unregister) a registered vCenter server from the vault.
     *
     * @param fabricName Fabric name.
     * @param vCenterName vCenter name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String fabricName, String vCenterName) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (vCenterName == null) {
            throw new IllegalArgumentException("Parameter vCenterName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Observable<Response<ResponseBody>> observable = service.delete(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, vCenterName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<Void>() { }.getType());
    }

    /**
     * Remove vCenter operation.
     * The operation to remove(unregister) a registered vCenter server from the vault.
     *
     * @param fabricName Fabric name.
     * @param vCenterName vCenter name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void beginDelete(String fabricName, String vCenterName) {
        beginDeleteWithServiceResponseAsync(fabricName, vCenterName).toBlocking().single().body();
    }

    /**
     * Remove vCenter operation.
     * The operation to remove(unregister) a registered vCenter server from the vault.
     *
     * @param fabricName Fabric name.
     * @param vCenterName vCenter name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> beginDeleteAsync(String fabricName, String vCenterName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(beginDeleteWithServiceResponseAsync(fabricName, vCenterName), serviceCallback);
    }

    /**
     * Remove vCenter operation.
     * The operation to remove(unregister) a registered vCenter server from the vault.
     *
     * @param fabricName Fabric name.
     * @param vCenterName vCenter name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> beginDeleteAsync(String fabricName, String vCenterName) {
        return beginDeleteWithServiceResponseAsync(fabricName, vCenterName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Remove vCenter operation.
     * The operation to remove(unregister) a registered vCenter server from the vault.
     *
     * @param fabricName Fabric name.
     * @param vCenterName vCenter name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> beginDeleteWithServiceResponseAsync(String fabricName, String vCenterName) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (vCenterName == null) {
            throw new IllegalArgumentException("Parameter vCenterName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.beginDelete(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, vCenterName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = beginDeleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> beginDeleteDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CloudException>newInstance(this.client.serializerAdapter())
                .register(202, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Update vCenter operation.
     * The operation to update a registered vCenter.
     *
     * @param fabricName Fabric name.
     * @param vCenterName vCenter name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the VCenterInner object if successful.
     */
    public VCenterInner update(String fabricName, String vCenterName) {
        return updateWithServiceResponseAsync(fabricName, vCenterName).toBlocking().last().body();
    }

    /**
     * Update vCenter operation.
     * The operation to update a registered vCenter.
     *
     * @param fabricName Fabric name.
     * @param vCenterName vCenter name
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<VCenterInner> updateAsync(String fabricName, String vCenterName, final ServiceCallback<VCenterInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(fabricName, vCenterName), serviceCallback);
    }

    /**
     * Update vCenter operation.
     * The operation to update a registered vCenter.
     *
     * @param fabricName Fabric name.
     * @param vCenterName vCenter name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<VCenterInner> updateAsync(String fabricName, String vCenterName) {
        return updateWithServiceResponseAsync(fabricName, vCenterName).map(new Func1<ServiceResponse<VCenterInner>, VCenterInner>() {
            @Override
            public VCenterInner call(ServiceResponse<VCenterInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Update vCenter operation.
     * The operation to update a registered vCenter.
     *
     * @param fabricName Fabric name.
     * @param vCenterName vCenter name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<VCenterInner>> updateWithServiceResponseAsync(String fabricName, String vCenterName) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (vCenterName == null) {
            throw new IllegalArgumentException("Parameter vCenterName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final UpdateVCenterRequestProperties properties = null;
        UpdateVCenterRequest updateVCenterRequest = new UpdateVCenterRequest();
        updateVCenterRequest.withProperties(null);
        Observable<Response<ResponseBody>> observable = service.update(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, vCenterName, this.client.apiVersion(), this.client.acceptLanguage(), updateVCenterRequest, this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<VCenterInner>() { }.getType());
    }
    /**
     * Update vCenter operation.
     * The operation to update a registered vCenter.
     *
     * @param fabricName Fabric name.
     * @param vCenterName vCenter name
     * @param properties The update VCenter Request Properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the VCenterInner object if successful.
     */
    public VCenterInner update(String fabricName, String vCenterName, UpdateVCenterRequestProperties properties) {
        return updateWithServiceResponseAsync(fabricName, vCenterName, properties).toBlocking().last().body();
    }

    /**
     * Update vCenter operation.
     * The operation to update a registered vCenter.
     *
     * @param fabricName Fabric name.
     * @param vCenterName vCenter name
     * @param properties The update VCenter Request Properties.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<VCenterInner> updateAsync(String fabricName, String vCenterName, UpdateVCenterRequestProperties properties, final ServiceCallback<VCenterInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(fabricName, vCenterName, properties), serviceCallback);
    }

    /**
     * Update vCenter operation.
     * The operation to update a registered vCenter.
     *
     * @param fabricName Fabric name.
     * @param vCenterName vCenter name
     * @param properties The update VCenter Request Properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<VCenterInner> updateAsync(String fabricName, String vCenterName, UpdateVCenterRequestProperties properties) {
        return updateWithServiceResponseAsync(fabricName, vCenterName, properties).map(new Func1<ServiceResponse<VCenterInner>, VCenterInner>() {
            @Override
            public VCenterInner call(ServiceResponse<VCenterInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Update vCenter operation.
     * The operation to update a registered vCenter.
     *
     * @param fabricName Fabric name.
     * @param vCenterName vCenter name
     * @param properties The update VCenter Request Properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<VCenterInner>> updateWithServiceResponseAsync(String fabricName, String vCenterName, UpdateVCenterRequestProperties properties) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (vCenterName == null) {
            throw new IllegalArgumentException("Parameter vCenterName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(properties);
        UpdateVCenterRequest updateVCenterRequest = new UpdateVCenterRequest();
        updateVCenterRequest.withProperties(properties);
        Observable<Response<ResponseBody>> observable = service.update(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, vCenterName, this.client.apiVersion(), this.client.acceptLanguage(), updateVCenterRequest, this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<VCenterInner>() { }.getType());
    }

    /**
     * Update vCenter operation.
     * The operation to update a registered vCenter.
     *
     * @param fabricName Fabric name.
     * @param vCenterName vCenter name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the VCenterInner object if successful.
     */
    public VCenterInner beginUpdate(String fabricName, String vCenterName) {
        return beginUpdateWithServiceResponseAsync(fabricName, vCenterName).toBlocking().single().body();
    }

    /**
     * Update vCenter operation.
     * The operation to update a registered vCenter.
     *
     * @param fabricName Fabric name.
     * @param vCenterName vCenter name
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<VCenterInner> beginUpdateAsync(String fabricName, String vCenterName, final ServiceCallback<VCenterInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginUpdateWithServiceResponseAsync(fabricName, vCenterName), serviceCallback);
    }

    /**
     * Update vCenter operation.
     * The operation to update a registered vCenter.
     *
     * @param fabricName Fabric name.
     * @param vCenterName vCenter name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the VCenterInner object
     */
    public Observable<VCenterInner> beginUpdateAsync(String fabricName, String vCenterName) {
        return beginUpdateWithServiceResponseAsync(fabricName, vCenterName).map(new Func1<ServiceResponse<VCenterInner>, VCenterInner>() {
            @Override
            public VCenterInner call(ServiceResponse<VCenterInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Update vCenter operation.
     * The operation to update a registered vCenter.
     *
     * @param fabricName Fabric name.
     * @param vCenterName vCenter name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the VCenterInner object
     */
    public Observable<ServiceResponse<VCenterInner>> beginUpdateWithServiceResponseAsync(String fabricName, String vCenterName) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (vCenterName == null) {
            throw new IllegalArgumentException("Parameter vCenterName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final UpdateVCenterRequestProperties properties = null;
        UpdateVCenterRequest updateVCenterRequest = new UpdateVCenterRequest();
        updateVCenterRequest.withProperties(null);
        return service.beginUpdate(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, vCenterName, this.client.apiVersion(), this.client.acceptLanguage(), updateVCenterRequest, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<VCenterInner>>>() {
                @Override
                public Observable<ServiceResponse<VCenterInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<VCenterInner> clientResponse = beginUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Update vCenter operation.
     * The operation to update a registered vCenter.
     *
     * @param fabricName Fabric name.
     * @param vCenterName vCenter name
     * @param properties The update VCenter Request Properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the VCenterInner object if successful.
     */
    public VCenterInner beginUpdate(String fabricName, String vCenterName, UpdateVCenterRequestProperties properties) {
        return beginUpdateWithServiceResponseAsync(fabricName, vCenterName, properties).toBlocking().single().body();
    }

    /**
     * Update vCenter operation.
     * The operation to update a registered vCenter.
     *
     * @param fabricName Fabric name.
     * @param vCenterName vCenter name
     * @param properties The update VCenter Request Properties.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<VCenterInner> beginUpdateAsync(String fabricName, String vCenterName, UpdateVCenterRequestProperties properties, final ServiceCallback<VCenterInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginUpdateWithServiceResponseAsync(fabricName, vCenterName, properties), serviceCallback);
    }

    /**
     * Update vCenter operation.
     * The operation to update a registered vCenter.
     *
     * @param fabricName Fabric name.
     * @param vCenterName vCenter name
     * @param properties The update VCenter Request Properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the VCenterInner object
     */
    public Observable<VCenterInner> beginUpdateAsync(String fabricName, String vCenterName, UpdateVCenterRequestProperties properties) {
        return beginUpdateWithServiceResponseAsync(fabricName, vCenterName, properties).map(new Func1<ServiceResponse<VCenterInner>, VCenterInner>() {
            @Override
            public VCenterInner call(ServiceResponse<VCenterInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Update vCenter operation.
     * The operation to update a registered vCenter.
     *
     * @param fabricName Fabric name.
     * @param vCenterName vCenter name
     * @param properties The update VCenter Request Properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the VCenterInner object
     */
    public Observable<ServiceResponse<VCenterInner>> beginUpdateWithServiceResponseAsync(String fabricName, String vCenterName, UpdateVCenterRequestProperties properties) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (vCenterName == null) {
            throw new IllegalArgumentException("Parameter vCenterName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(properties);
        UpdateVCenterRequest updateVCenterRequest = new UpdateVCenterRequest();
        updateVCenterRequest.withProperties(properties);
        return service.beginUpdate(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, vCenterName, this.client.apiVersion(), this.client.acceptLanguage(), updateVCenterRequest, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<VCenterInner>>>() {
                @Override
                public Observable<ServiceResponse<VCenterInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<VCenterInner> clientResponse = beginUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<VCenterInner> beginUpdateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<VCenterInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<VCenterInner>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets the list of vCenter registered under a fabric.
     * Lists the vCenter servers registered in a fabric.
     *
     * @param fabricName Fabric name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;VCenterInner&gt; object if successful.
     */
    public PagedList<VCenterInner> listByReplicationFabrics(final String fabricName) {
        ServiceResponse<Page<VCenterInner>> response = listByReplicationFabricsSinglePageAsync(fabricName).toBlocking().single();
        return new PagedList<VCenterInner>(response.body()) {
            @Override
            public Page<VCenterInner> nextPage(String nextPageLink) {
                return listByReplicationFabricsNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets the list of vCenter registered under a fabric.
     * Lists the vCenter servers registered in a fabric.
     *
     * @param fabricName Fabric name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<VCenterInner>> listByReplicationFabricsAsync(final String fabricName, final ListOperationCallback<VCenterInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByReplicationFabricsSinglePageAsync(fabricName),
            new Func1<String, Observable<ServiceResponse<Page<VCenterInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<VCenterInner>>> call(String nextPageLink) {
                    return listByReplicationFabricsNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets the list of vCenter registered under a fabric.
     * Lists the vCenter servers registered in a fabric.
     *
     * @param fabricName Fabric name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;VCenterInner&gt; object
     */
    public Observable<Page<VCenterInner>> listByReplicationFabricsAsync(final String fabricName) {
        return listByReplicationFabricsWithServiceResponseAsync(fabricName)
            .map(new Func1<ServiceResponse<Page<VCenterInner>>, Page<VCenterInner>>() {
                @Override
                public Page<VCenterInner> call(ServiceResponse<Page<VCenterInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets the list of vCenter registered under a fabric.
     * Lists the vCenter servers registered in a fabric.
     *
     * @param fabricName Fabric name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;VCenterInner&gt; object
     */
    public Observable<ServiceResponse<Page<VCenterInner>>> listByReplicationFabricsWithServiceResponseAsync(final String fabricName) {
        return listByReplicationFabricsSinglePageAsync(fabricName)
            .concatMap(new Func1<ServiceResponse<Page<VCenterInner>>, Observable<ServiceResponse<Page<VCenterInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<VCenterInner>>> call(ServiceResponse<Page<VCenterInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByReplicationFabricsNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets the list of vCenter registered under a fabric.
     * Lists the vCenter servers registered in a fabric.
     *
    ServiceResponse<PageImpl<VCenterInner>> * @param fabricName Fabric name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;VCenterInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<VCenterInner>>> listByReplicationFabricsSinglePageAsync(final String fabricName) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByReplicationFabrics(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<VCenterInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<VCenterInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<VCenterInner>> result = listByReplicationFabricsDelegate(response);
                        return Observable.just(new ServiceResponse<Page<VCenterInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<VCenterInner>> listByReplicationFabricsDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<VCenterInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<VCenterInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets the list of vCenter registered under the vault.
     * Lists the vCenter servers registered in the vault.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;VCenterInner&gt; object if successful.
     */
    public PagedList<VCenterInner> list() {
        ServiceResponse<Page<VCenterInner>> response = listSinglePageAsync().toBlocking().single();
        return new PagedList<VCenterInner>(response.body()) {
            @Override
            public Page<VCenterInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets the list of vCenter registered under the vault.
     * Lists the vCenter servers registered in the vault.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<VCenterInner>> listAsync(final ListOperationCallback<VCenterInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSinglePageAsync(),
            new Func1<String, Observable<ServiceResponse<Page<VCenterInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<VCenterInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets the list of vCenter registered under the vault.
     * Lists the vCenter servers registered in the vault.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;VCenterInner&gt; object
     */
    public Observable<Page<VCenterInner>> listAsync() {
        return listWithServiceResponseAsync()
            .map(new Func1<ServiceResponse<Page<VCenterInner>>, Page<VCenterInner>>() {
                @Override
                public Page<VCenterInner> call(ServiceResponse<Page<VCenterInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets the list of vCenter registered under the vault.
     * Lists the vCenter servers registered in the vault.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;VCenterInner&gt; object
     */
    public Observable<ServiceResponse<Page<VCenterInner>>> listWithServiceResponseAsync() {
        return listSinglePageAsync()
            .concatMap(new Func1<ServiceResponse<Page<VCenterInner>>, Observable<ServiceResponse<Page<VCenterInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<VCenterInner>>> call(ServiceResponse<Page<VCenterInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets the list of vCenter registered under the vault.
     * Lists the vCenter servers registered in the vault.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;VCenterInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<VCenterInner>>> listSinglePageAsync() {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.list(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<VCenterInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<VCenterInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<VCenterInner>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<VCenterInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<VCenterInner>> listDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<VCenterInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<VCenterInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets the list of vCenter registered under a fabric.
     * Lists the vCenter servers registered in a fabric.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;VCenterInner&gt; object if successful.
     */
    public PagedList<VCenterInner> listByReplicationFabricsNext(final String nextPageLink) {
        ServiceResponse<Page<VCenterInner>> response = listByReplicationFabricsNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<VCenterInner>(response.body()) {
            @Override
            public Page<VCenterInner> nextPage(String nextPageLink) {
                return listByReplicationFabricsNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets the list of vCenter registered under a fabric.
     * Lists the vCenter servers registered in a fabric.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<VCenterInner>> listByReplicationFabricsNextAsync(final String nextPageLink, final ServiceFuture<List<VCenterInner>> serviceFuture, final ListOperationCallback<VCenterInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByReplicationFabricsNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<VCenterInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<VCenterInner>>> call(String nextPageLink) {
                    return listByReplicationFabricsNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets the list of vCenter registered under a fabric.
     * Lists the vCenter servers registered in a fabric.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;VCenterInner&gt; object
     */
    public Observable<Page<VCenterInner>> listByReplicationFabricsNextAsync(final String nextPageLink) {
        return listByReplicationFabricsNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<VCenterInner>>, Page<VCenterInner>>() {
                @Override
                public Page<VCenterInner> call(ServiceResponse<Page<VCenterInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets the list of vCenter registered under a fabric.
     * Lists the vCenter servers registered in a fabric.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;VCenterInner&gt; object
     */
    public Observable<ServiceResponse<Page<VCenterInner>>> listByReplicationFabricsNextWithServiceResponseAsync(final String nextPageLink) {
        return listByReplicationFabricsNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<VCenterInner>>, Observable<ServiceResponse<Page<VCenterInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<VCenterInner>>> call(ServiceResponse<Page<VCenterInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByReplicationFabricsNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets the list of vCenter registered under a fabric.
     * Lists the vCenter servers registered in a fabric.
     *
    ServiceResponse<PageImpl<VCenterInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;VCenterInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<VCenterInner>>> listByReplicationFabricsNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByReplicationFabricsNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<VCenterInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<VCenterInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<VCenterInner>> result = listByReplicationFabricsNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<VCenterInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<VCenterInner>> listByReplicationFabricsNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<VCenterInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<VCenterInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets the list of vCenter registered under the vault.
     * Lists the vCenter servers registered in the vault.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;VCenterInner&gt; object if successful.
     */
    public PagedList<VCenterInner> listNext(final String nextPageLink) {
        ServiceResponse<Page<VCenterInner>> response = listNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<VCenterInner>(response.body()) {
            @Override
            public Page<VCenterInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets the list of vCenter registered under the vault.
     * Lists the vCenter servers registered in the vault.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<VCenterInner>> listNextAsync(final String nextPageLink, final ServiceFuture<List<VCenterInner>> serviceFuture, final ListOperationCallback<VCenterInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<VCenterInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<VCenterInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets the list of vCenter registered under the vault.
     * Lists the vCenter servers registered in the vault.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;VCenterInner&gt; object
     */
    public Observable<Page<VCenterInner>> listNextAsync(final String nextPageLink) {
        return listNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<VCenterInner>>, Page<VCenterInner>>() {
                @Override
                public Page<VCenterInner> call(ServiceResponse<Page<VCenterInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets the list of vCenter registered under the vault.
     * Lists the vCenter servers registered in the vault.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;VCenterInner&gt; object
     */
    public Observable<ServiceResponse<Page<VCenterInner>>> listNextWithServiceResponseAsync(final String nextPageLink) {
        return listNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<VCenterInner>>, Observable<ServiceResponse<Page<VCenterInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<VCenterInner>>> call(ServiceResponse<Page<VCenterInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets the list of vCenter registered under the vault.
     * Lists the vCenter servers registered in the vault.
     *
    ServiceResponse<PageImpl<VCenterInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;VCenterInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<VCenterInner>>> listNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<VCenterInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<VCenterInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<VCenterInner>> result = listNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<VCenterInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<VCenterInner>> listNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<VCenterInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<VCenterInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
