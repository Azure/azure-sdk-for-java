/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.CloudException;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in RecoveryPoints.
 */
public class RecoveryPointsInner {
    /** The Retrofit service to perform REST calls. */
    private RecoveryPointsService service;
    /** The service client containing this operation class. */
    private SiteRecoveryManagementClientImpl client;

    /**
     * Initializes an instance of RecoveryPointsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public RecoveryPointsInner(Retrofit retrofit, SiteRecoveryManagementClientImpl client) {
        this.service = retrofit.create(RecoveryPointsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for RecoveryPoints to be
     * used by Retrofit to perform actually REST calls.
     */
    interface RecoveryPointsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.RecoveryPoints get" })
        @GET("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicatedProtectedItemName}/recoveryPoints/{recoveryPointName}")
        Observable<Response<ResponseBody>> get(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("fabricName") String fabricName, @Path("protectionContainerName") String protectionContainerName, @Path("replicatedProtectedItemName") String replicatedProtectedItemName, @Path("recoveryPointName") String recoveryPointName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.RecoveryPoints listByReplicationProtectedItems" })
        @GET("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicatedProtectedItemName}/recoveryPoints")
        Observable<Response<ResponseBody>> listByReplicationProtectedItems(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("fabricName") String fabricName, @Path("protectionContainerName") String protectionContainerName, @Path("replicatedProtectedItemName") String replicatedProtectedItemName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.RecoveryPoints listByReplicationProtectedItemsNext" })
        @GET
        Observable<Response<ResponseBody>> listByReplicationProtectedItemsNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Get a recovery point.
     * Get the details of specified recovery point.
     *
     * @param fabricName The fabric name.
     * @param protectionContainerName The protection container name.
     * @param replicatedProtectedItemName The replication protected item's name.
     * @param recoveryPointName The recovery point name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the RecoveryPointInner object if successful.
     */
    public RecoveryPointInner get(String fabricName, String protectionContainerName, String replicatedProtectedItemName, String recoveryPointName) {
        return getWithServiceResponseAsync(fabricName, protectionContainerName, replicatedProtectedItemName, recoveryPointName).toBlocking().single().body();
    }

    /**
     * Get a recovery point.
     * Get the details of specified recovery point.
     *
     * @param fabricName The fabric name.
     * @param protectionContainerName The protection container name.
     * @param replicatedProtectedItemName The replication protected item's name.
     * @param recoveryPointName The recovery point name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<RecoveryPointInner> getAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName, String recoveryPointName, final ServiceCallback<RecoveryPointInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(fabricName, protectionContainerName, replicatedProtectedItemName, recoveryPointName), serviceCallback);
    }

    /**
     * Get a recovery point.
     * Get the details of specified recovery point.
     *
     * @param fabricName The fabric name.
     * @param protectionContainerName The protection container name.
     * @param replicatedProtectedItemName The replication protected item's name.
     * @param recoveryPointName The recovery point name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RecoveryPointInner object
     */
    public Observable<RecoveryPointInner> getAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName, String recoveryPointName) {
        return getWithServiceResponseAsync(fabricName, protectionContainerName, replicatedProtectedItemName, recoveryPointName).map(new Func1<ServiceResponse<RecoveryPointInner>, RecoveryPointInner>() {
            @Override
            public RecoveryPointInner call(ServiceResponse<RecoveryPointInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Get a recovery point.
     * Get the details of specified recovery point.
     *
     * @param fabricName The fabric name.
     * @param protectionContainerName The protection container name.
     * @param replicatedProtectedItemName The replication protected item's name.
     * @param recoveryPointName The recovery point name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RecoveryPointInner object
     */
    public Observable<ServiceResponse<RecoveryPointInner>> getWithServiceResponseAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName, String recoveryPointName) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (protectionContainerName == null) {
            throw new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null.");
        }
        if (replicatedProtectedItemName == null) {
            throw new IllegalArgumentException("Parameter replicatedProtectedItemName is required and cannot be null.");
        }
        if (recoveryPointName == null) {
            throw new IllegalArgumentException("Parameter recoveryPointName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.get(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, protectionContainerName, replicatedProtectedItemName, recoveryPointName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<RecoveryPointInner>>>() {
                @Override
                public Observable<ServiceResponse<RecoveryPointInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<RecoveryPointInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<RecoveryPointInner> getDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<RecoveryPointInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<RecoveryPointInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Get recovery points for a replication protected item.
     * Lists the available recovery points for a replication protected item.
     *
     * @param fabricName The fabric name.
     * @param protectionContainerName The protection container name.
     * @param replicatedProtectedItemName The replication protected item's name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;RecoveryPointInner&gt; object if successful.
     */
    public PagedList<RecoveryPointInner> listByReplicationProtectedItems(final String fabricName, final String protectionContainerName, final String replicatedProtectedItemName) {
        ServiceResponse<Page<RecoveryPointInner>> response = listByReplicationProtectedItemsSinglePageAsync(fabricName, protectionContainerName, replicatedProtectedItemName).toBlocking().single();
        return new PagedList<RecoveryPointInner>(response.body()) {
            @Override
            public Page<RecoveryPointInner> nextPage(String nextPageLink) {
                return listByReplicationProtectedItemsNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Get recovery points for a replication protected item.
     * Lists the available recovery points for a replication protected item.
     *
     * @param fabricName The fabric name.
     * @param protectionContainerName The protection container name.
     * @param replicatedProtectedItemName The replication protected item's name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<RecoveryPointInner>> listByReplicationProtectedItemsAsync(final String fabricName, final String protectionContainerName, final String replicatedProtectedItemName, final ListOperationCallback<RecoveryPointInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByReplicationProtectedItemsSinglePageAsync(fabricName, protectionContainerName, replicatedProtectedItemName),
            new Func1<String, Observable<ServiceResponse<Page<RecoveryPointInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RecoveryPointInner>>> call(String nextPageLink) {
                    return listByReplicationProtectedItemsNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Get recovery points for a replication protected item.
     * Lists the available recovery points for a replication protected item.
     *
     * @param fabricName The fabric name.
     * @param protectionContainerName The protection container name.
     * @param replicatedProtectedItemName The replication protected item's name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;RecoveryPointInner&gt; object
     */
    public Observable<Page<RecoveryPointInner>> listByReplicationProtectedItemsAsync(final String fabricName, final String protectionContainerName, final String replicatedProtectedItemName) {
        return listByReplicationProtectedItemsWithServiceResponseAsync(fabricName, protectionContainerName, replicatedProtectedItemName)
            .map(new Func1<ServiceResponse<Page<RecoveryPointInner>>, Page<RecoveryPointInner>>() {
                @Override
                public Page<RecoveryPointInner> call(ServiceResponse<Page<RecoveryPointInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Get recovery points for a replication protected item.
     * Lists the available recovery points for a replication protected item.
     *
     * @param fabricName The fabric name.
     * @param protectionContainerName The protection container name.
     * @param replicatedProtectedItemName The replication protected item's name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;RecoveryPointInner&gt; object
     */
    public Observable<ServiceResponse<Page<RecoveryPointInner>>> listByReplicationProtectedItemsWithServiceResponseAsync(final String fabricName, final String protectionContainerName, final String replicatedProtectedItemName) {
        return listByReplicationProtectedItemsSinglePageAsync(fabricName, protectionContainerName, replicatedProtectedItemName)
            .concatMap(new Func1<ServiceResponse<Page<RecoveryPointInner>>, Observable<ServiceResponse<Page<RecoveryPointInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RecoveryPointInner>>> call(ServiceResponse<Page<RecoveryPointInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByReplicationProtectedItemsNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Get recovery points for a replication protected item.
     * Lists the available recovery points for a replication protected item.
     *
    ServiceResponse<PageImpl<RecoveryPointInner>> * @param fabricName The fabric name.
    ServiceResponse<PageImpl<RecoveryPointInner>> * @param protectionContainerName The protection container name.
    ServiceResponse<PageImpl<RecoveryPointInner>> * @param replicatedProtectedItemName The replication protected item's name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;RecoveryPointInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<RecoveryPointInner>>> listByReplicationProtectedItemsSinglePageAsync(final String fabricName, final String protectionContainerName, final String replicatedProtectedItemName) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (protectionContainerName == null) {
            throw new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null.");
        }
        if (replicatedProtectedItemName == null) {
            throw new IllegalArgumentException("Parameter replicatedProtectedItemName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByReplicationProtectedItems(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, protectionContainerName, replicatedProtectedItemName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<RecoveryPointInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RecoveryPointInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<RecoveryPointInner>> result = listByReplicationProtectedItemsDelegate(response);
                        return Observable.just(new ServiceResponse<Page<RecoveryPointInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<RecoveryPointInner>> listByReplicationProtectedItemsDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<RecoveryPointInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<RecoveryPointInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Get recovery points for a replication protected item.
     * Lists the available recovery points for a replication protected item.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;RecoveryPointInner&gt; object if successful.
     */
    public PagedList<RecoveryPointInner> listByReplicationProtectedItemsNext(final String nextPageLink) {
        ServiceResponse<Page<RecoveryPointInner>> response = listByReplicationProtectedItemsNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<RecoveryPointInner>(response.body()) {
            @Override
            public Page<RecoveryPointInner> nextPage(String nextPageLink) {
                return listByReplicationProtectedItemsNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Get recovery points for a replication protected item.
     * Lists the available recovery points for a replication protected item.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<RecoveryPointInner>> listByReplicationProtectedItemsNextAsync(final String nextPageLink, final ServiceFuture<List<RecoveryPointInner>> serviceFuture, final ListOperationCallback<RecoveryPointInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByReplicationProtectedItemsNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<RecoveryPointInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RecoveryPointInner>>> call(String nextPageLink) {
                    return listByReplicationProtectedItemsNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Get recovery points for a replication protected item.
     * Lists the available recovery points for a replication protected item.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;RecoveryPointInner&gt; object
     */
    public Observable<Page<RecoveryPointInner>> listByReplicationProtectedItemsNextAsync(final String nextPageLink) {
        return listByReplicationProtectedItemsNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<RecoveryPointInner>>, Page<RecoveryPointInner>>() {
                @Override
                public Page<RecoveryPointInner> call(ServiceResponse<Page<RecoveryPointInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Get recovery points for a replication protected item.
     * Lists the available recovery points for a replication protected item.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;RecoveryPointInner&gt; object
     */
    public Observable<ServiceResponse<Page<RecoveryPointInner>>> listByReplicationProtectedItemsNextWithServiceResponseAsync(final String nextPageLink) {
        return listByReplicationProtectedItemsNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<RecoveryPointInner>>, Observable<ServiceResponse<Page<RecoveryPointInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RecoveryPointInner>>> call(ServiceResponse<Page<RecoveryPointInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByReplicationProtectedItemsNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Get recovery points for a replication protected item.
     * Lists the available recovery points for a replication protected item.
     *
    ServiceResponse<PageImpl<RecoveryPointInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;RecoveryPointInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<RecoveryPointInner>>> listByReplicationProtectedItemsNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByReplicationProtectedItemsNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<RecoveryPointInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RecoveryPointInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<RecoveryPointInner>> result = listByReplicationProtectedItemsNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<RecoveryPointInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<RecoveryPointInner>> listByReplicationProtectedItemsNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<RecoveryPointInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<RecoveryPointInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
