/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.CloudException;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.CreateProtectionContainerMappingInput;
import com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.CreateProtectionContainerMappingInputProperties;
import com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.RemoveProtectionContainerMappingInput;
import com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.RemoveProtectionContainerMappingInputProperties;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in ReplicationProtectionContainerMappings.
 */
public class ReplicationProtectionContainerMappingsInner {
    /** The Retrofit service to perform REST calls. */
    private ReplicationProtectionContainerMappingsService service;
    /** The service client containing this operation class. */
    private SiteRecoveryManagementClientImpl client;

    /**
     * Initializes an instance of ReplicationProtectionContainerMappingsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public ReplicationProtectionContainerMappingsInner(Retrofit retrofit, SiteRecoveryManagementClientImpl client) {
        this.service = retrofit.create(ReplicationProtectionContainerMappingsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for ReplicationProtectionContainerMappings to be
     * used by Retrofit to perform actually REST calls.
     */
    interface ReplicationProtectionContainerMappingsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationProtectionContainerMappings delete" })
        @POST("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectionContainerMappings/{mappingName}/remove")
        Observable<Response<ResponseBody>> delete(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("fabricName") String fabricName, @Path("protectionContainerName") String protectionContainerName, @Path("mappingName") String mappingName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body RemoveProtectionContainerMappingInput removalInput, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationProtectionContainerMappings beginDelete" })
        @POST("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectionContainerMappings/{mappingName}/remove")
        Observable<Response<ResponseBody>> beginDelete(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("fabricName") String fabricName, @Path("protectionContainerName") String protectionContainerName, @Path("mappingName") String mappingName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body RemoveProtectionContainerMappingInput removalInput, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationProtectionContainerMappings get" })
        @GET("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectionContainerMappings/{mappingName}")
        Observable<Response<ResponseBody>> get(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("fabricName") String fabricName, @Path("protectionContainerName") String protectionContainerName, @Path("mappingName") String mappingName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationProtectionContainerMappings create" })
        @PUT("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectionContainerMappings/{mappingName}")
        Observable<Response<ResponseBody>> create(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("fabricName") String fabricName, @Path("protectionContainerName") String protectionContainerName, @Path("mappingName") String mappingName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body CreateProtectionContainerMappingInput creationInput, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationProtectionContainerMappings beginCreate" })
        @PUT("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectionContainerMappings/{mappingName}")
        Observable<Response<ResponseBody>> beginCreate(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("fabricName") String fabricName, @Path("protectionContainerName") String protectionContainerName, @Path("mappingName") String mappingName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body CreateProtectionContainerMappingInput creationInput, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationProtectionContainerMappings purge" })
        @HTTP(path = "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectionContainerMappings/{mappingName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> purge(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("fabricName") String fabricName, @Path("protectionContainerName") String protectionContainerName, @Path("mappingName") String mappingName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationProtectionContainerMappings beginPurge" })
        @HTTP(path = "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectionContainerMappings/{mappingName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> beginPurge(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("fabricName") String fabricName, @Path("protectionContainerName") String protectionContainerName, @Path("mappingName") String mappingName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationProtectionContainerMappings listByReplicationProtectionContainers" })
        @GET("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectionContainerMappings")
        Observable<Response<ResponseBody>> listByReplicationProtectionContainers(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("fabricName") String fabricName, @Path("protectionContainerName") String protectionContainerName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationProtectionContainerMappings list" })
        @GET("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationProtectionContainerMappings")
        Observable<Response<ResponseBody>> list(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationProtectionContainerMappings listByReplicationProtectionContainersNext" })
        @GET
        Observable<Response<ResponseBody>> listByReplicationProtectionContainersNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationProtectionContainerMappings listNext" })
        @GET
        Observable<Response<ResponseBody>> listNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Remove protection container mapping.
     * The operation to delete or remove a protection container mapping.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param mappingName Protection container mapping name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String fabricName, String protectionContainerName, String mappingName) {
        deleteWithServiceResponseAsync(fabricName, protectionContainerName, mappingName).toBlocking().last().body();
    }

    /**
     * Remove protection container mapping.
     * The operation to delete or remove a protection container mapping.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param mappingName Protection container mapping name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String fabricName, String protectionContainerName, String mappingName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(fabricName, protectionContainerName, mappingName), serviceCallback);
    }

    /**
     * Remove protection container mapping.
     * The operation to delete or remove a protection container mapping.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param mappingName Protection container mapping name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Void> deleteAsync(String fabricName, String protectionContainerName, String mappingName) {
        return deleteWithServiceResponseAsync(fabricName, protectionContainerName, mappingName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Remove protection container mapping.
     * The operation to delete or remove a protection container mapping.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param mappingName Protection container mapping name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String fabricName, String protectionContainerName, String mappingName) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (protectionContainerName == null) {
            throw new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null.");
        }
        if (mappingName == null) {
            throw new IllegalArgumentException("Parameter mappingName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final RemoveProtectionContainerMappingInputProperties properties = null;
        RemoveProtectionContainerMappingInput removalInput = new RemoveProtectionContainerMappingInput();
        removalInput.withProperties(null);
        Observable<Response<ResponseBody>> observable = service.delete(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, protectionContainerName, mappingName, this.client.apiVersion(), this.client.acceptLanguage(), removalInput, this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<Void>() { }.getType());
    }
    /**
     * Remove protection container mapping.
     * The operation to delete or remove a protection container mapping.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param mappingName Protection container mapping name.
     * @param properties Configure protection input properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String fabricName, String protectionContainerName, String mappingName, RemoveProtectionContainerMappingInputProperties properties) {
        deleteWithServiceResponseAsync(fabricName, protectionContainerName, mappingName, properties).toBlocking().last().body();
    }

    /**
     * Remove protection container mapping.
     * The operation to delete or remove a protection container mapping.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param mappingName Protection container mapping name.
     * @param properties Configure protection input properties.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String fabricName, String protectionContainerName, String mappingName, RemoveProtectionContainerMappingInputProperties properties, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(fabricName, protectionContainerName, mappingName, properties), serviceCallback);
    }

    /**
     * Remove protection container mapping.
     * The operation to delete or remove a protection container mapping.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param mappingName Protection container mapping name.
     * @param properties Configure protection input properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Void> deleteAsync(String fabricName, String protectionContainerName, String mappingName, RemoveProtectionContainerMappingInputProperties properties) {
        return deleteWithServiceResponseAsync(fabricName, protectionContainerName, mappingName, properties).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Remove protection container mapping.
     * The operation to delete or remove a protection container mapping.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param mappingName Protection container mapping name.
     * @param properties Configure protection input properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String fabricName, String protectionContainerName, String mappingName, RemoveProtectionContainerMappingInputProperties properties) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (protectionContainerName == null) {
            throw new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null.");
        }
        if (mappingName == null) {
            throw new IllegalArgumentException("Parameter mappingName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(properties);
        RemoveProtectionContainerMappingInput removalInput = new RemoveProtectionContainerMappingInput();
        removalInput.withProperties(properties);
        Observable<Response<ResponseBody>> observable = service.delete(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, protectionContainerName, mappingName, this.client.apiVersion(), this.client.acceptLanguage(), removalInput, this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<Void>() { }.getType());
    }

    /**
     * Remove protection container mapping.
     * The operation to delete or remove a protection container mapping.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param mappingName Protection container mapping name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void beginDelete(String fabricName, String protectionContainerName, String mappingName) {
        beginDeleteWithServiceResponseAsync(fabricName, protectionContainerName, mappingName).toBlocking().single().body();
    }

    /**
     * Remove protection container mapping.
     * The operation to delete or remove a protection container mapping.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param mappingName Protection container mapping name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> beginDeleteAsync(String fabricName, String protectionContainerName, String mappingName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(beginDeleteWithServiceResponseAsync(fabricName, protectionContainerName, mappingName), serviceCallback);
    }

    /**
     * Remove protection container mapping.
     * The operation to delete or remove a protection container mapping.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param mappingName Protection container mapping name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> beginDeleteAsync(String fabricName, String protectionContainerName, String mappingName) {
        return beginDeleteWithServiceResponseAsync(fabricName, protectionContainerName, mappingName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Remove protection container mapping.
     * The operation to delete or remove a protection container mapping.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param mappingName Protection container mapping name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> beginDeleteWithServiceResponseAsync(String fabricName, String protectionContainerName, String mappingName) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (protectionContainerName == null) {
            throw new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null.");
        }
        if (mappingName == null) {
            throw new IllegalArgumentException("Parameter mappingName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final RemoveProtectionContainerMappingInputProperties properties = null;
        RemoveProtectionContainerMappingInput removalInput = new RemoveProtectionContainerMappingInput();
        removalInput.withProperties(null);
        return service.beginDelete(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, protectionContainerName, mappingName, this.client.apiVersion(), this.client.acceptLanguage(), removalInput, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = beginDeleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Remove protection container mapping.
     * The operation to delete or remove a protection container mapping.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param mappingName Protection container mapping name.
     * @param properties Configure protection input properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void beginDelete(String fabricName, String protectionContainerName, String mappingName, RemoveProtectionContainerMappingInputProperties properties) {
        beginDeleteWithServiceResponseAsync(fabricName, protectionContainerName, mappingName, properties).toBlocking().single().body();
    }

    /**
     * Remove protection container mapping.
     * The operation to delete or remove a protection container mapping.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param mappingName Protection container mapping name.
     * @param properties Configure protection input properties.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> beginDeleteAsync(String fabricName, String protectionContainerName, String mappingName, RemoveProtectionContainerMappingInputProperties properties, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(beginDeleteWithServiceResponseAsync(fabricName, protectionContainerName, mappingName, properties), serviceCallback);
    }

    /**
     * Remove protection container mapping.
     * The operation to delete or remove a protection container mapping.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param mappingName Protection container mapping name.
     * @param properties Configure protection input properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> beginDeleteAsync(String fabricName, String protectionContainerName, String mappingName, RemoveProtectionContainerMappingInputProperties properties) {
        return beginDeleteWithServiceResponseAsync(fabricName, protectionContainerName, mappingName, properties).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Remove protection container mapping.
     * The operation to delete or remove a protection container mapping.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param mappingName Protection container mapping name.
     * @param properties Configure protection input properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> beginDeleteWithServiceResponseAsync(String fabricName, String protectionContainerName, String mappingName, RemoveProtectionContainerMappingInputProperties properties) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (protectionContainerName == null) {
            throw new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null.");
        }
        if (mappingName == null) {
            throw new IllegalArgumentException("Parameter mappingName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(properties);
        RemoveProtectionContainerMappingInput removalInput = new RemoveProtectionContainerMappingInput();
        removalInput.withProperties(properties);
        return service.beginDelete(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, protectionContainerName, mappingName, this.client.apiVersion(), this.client.acceptLanguage(), removalInput, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = beginDeleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> beginDeleteDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CloudException>newInstance(this.client.serializerAdapter())
                .register(202, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets a protection container mapping/.
     * Gets the details of a protection container mapping.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param mappingName Protection Container mapping name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ProtectionContainerMappingInner object if successful.
     */
    public ProtectionContainerMappingInner get(String fabricName, String protectionContainerName, String mappingName) {
        return getWithServiceResponseAsync(fabricName, protectionContainerName, mappingName).toBlocking().single().body();
    }

    /**
     * Gets a protection container mapping/.
     * Gets the details of a protection container mapping.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param mappingName Protection Container mapping name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ProtectionContainerMappingInner> getAsync(String fabricName, String protectionContainerName, String mappingName, final ServiceCallback<ProtectionContainerMappingInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(fabricName, protectionContainerName, mappingName), serviceCallback);
    }

    /**
     * Gets a protection container mapping/.
     * Gets the details of a protection container mapping.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param mappingName Protection Container mapping name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ProtectionContainerMappingInner object
     */
    public Observable<ProtectionContainerMappingInner> getAsync(String fabricName, String protectionContainerName, String mappingName) {
        return getWithServiceResponseAsync(fabricName, protectionContainerName, mappingName).map(new Func1<ServiceResponse<ProtectionContainerMappingInner>, ProtectionContainerMappingInner>() {
            @Override
            public ProtectionContainerMappingInner call(ServiceResponse<ProtectionContainerMappingInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets a protection container mapping/.
     * Gets the details of a protection container mapping.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param mappingName Protection Container mapping name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ProtectionContainerMappingInner object
     */
    public Observable<ServiceResponse<ProtectionContainerMappingInner>> getWithServiceResponseAsync(String fabricName, String protectionContainerName, String mappingName) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (protectionContainerName == null) {
            throw new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null.");
        }
        if (mappingName == null) {
            throw new IllegalArgumentException("Parameter mappingName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.get(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, protectionContainerName, mappingName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ProtectionContainerMappingInner>>>() {
                @Override
                public Observable<ServiceResponse<ProtectionContainerMappingInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ProtectionContainerMappingInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ProtectionContainerMappingInner> getDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ProtectionContainerMappingInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ProtectionContainerMappingInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Create protection container mapping.
     * The operation to create a protection container mapping.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param mappingName Protection container mapping name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ProtectionContainerMappingInner object if successful.
     */
    public ProtectionContainerMappingInner create(String fabricName, String protectionContainerName, String mappingName) {
        return createWithServiceResponseAsync(fabricName, protectionContainerName, mappingName).toBlocking().last().body();
    }

    /**
     * Create protection container mapping.
     * The operation to create a protection container mapping.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param mappingName Protection container mapping name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ProtectionContainerMappingInner> createAsync(String fabricName, String protectionContainerName, String mappingName, final ServiceCallback<ProtectionContainerMappingInner> serviceCallback) {
        return ServiceFuture.fromResponse(createWithServiceResponseAsync(fabricName, protectionContainerName, mappingName), serviceCallback);
    }

    /**
     * Create protection container mapping.
     * The operation to create a protection container mapping.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param mappingName Protection container mapping name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ProtectionContainerMappingInner> createAsync(String fabricName, String protectionContainerName, String mappingName) {
        return createWithServiceResponseAsync(fabricName, protectionContainerName, mappingName).map(new Func1<ServiceResponse<ProtectionContainerMappingInner>, ProtectionContainerMappingInner>() {
            @Override
            public ProtectionContainerMappingInner call(ServiceResponse<ProtectionContainerMappingInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create protection container mapping.
     * The operation to create a protection container mapping.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param mappingName Protection container mapping name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<ProtectionContainerMappingInner>> createWithServiceResponseAsync(String fabricName, String protectionContainerName, String mappingName) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (protectionContainerName == null) {
            throw new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null.");
        }
        if (mappingName == null) {
            throw new IllegalArgumentException("Parameter mappingName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final CreateProtectionContainerMappingInputProperties properties = null;
        CreateProtectionContainerMappingInput creationInput = new CreateProtectionContainerMappingInput();
        creationInput.withProperties(null);
        Observable<Response<ResponseBody>> observable = service.create(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, protectionContainerName, mappingName, this.client.apiVersion(), this.client.acceptLanguage(), creationInput, this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<ProtectionContainerMappingInner>() { }.getType());
    }
    /**
     * Create protection container mapping.
     * The operation to create a protection container mapping.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param mappingName Protection container mapping name.
     * @param properties Configure protection input properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ProtectionContainerMappingInner object if successful.
     */
    public ProtectionContainerMappingInner create(String fabricName, String protectionContainerName, String mappingName, CreateProtectionContainerMappingInputProperties properties) {
        return createWithServiceResponseAsync(fabricName, protectionContainerName, mappingName, properties).toBlocking().last().body();
    }

    /**
     * Create protection container mapping.
     * The operation to create a protection container mapping.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param mappingName Protection container mapping name.
     * @param properties Configure protection input properties.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ProtectionContainerMappingInner> createAsync(String fabricName, String protectionContainerName, String mappingName, CreateProtectionContainerMappingInputProperties properties, final ServiceCallback<ProtectionContainerMappingInner> serviceCallback) {
        return ServiceFuture.fromResponse(createWithServiceResponseAsync(fabricName, protectionContainerName, mappingName, properties), serviceCallback);
    }

    /**
     * Create protection container mapping.
     * The operation to create a protection container mapping.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param mappingName Protection container mapping name.
     * @param properties Configure protection input properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ProtectionContainerMappingInner> createAsync(String fabricName, String protectionContainerName, String mappingName, CreateProtectionContainerMappingInputProperties properties) {
        return createWithServiceResponseAsync(fabricName, protectionContainerName, mappingName, properties).map(new Func1<ServiceResponse<ProtectionContainerMappingInner>, ProtectionContainerMappingInner>() {
            @Override
            public ProtectionContainerMappingInner call(ServiceResponse<ProtectionContainerMappingInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create protection container mapping.
     * The operation to create a protection container mapping.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param mappingName Protection container mapping name.
     * @param properties Configure protection input properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<ProtectionContainerMappingInner>> createWithServiceResponseAsync(String fabricName, String protectionContainerName, String mappingName, CreateProtectionContainerMappingInputProperties properties) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (protectionContainerName == null) {
            throw new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null.");
        }
        if (mappingName == null) {
            throw new IllegalArgumentException("Parameter mappingName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(properties);
        CreateProtectionContainerMappingInput creationInput = new CreateProtectionContainerMappingInput();
        creationInput.withProperties(properties);
        Observable<Response<ResponseBody>> observable = service.create(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, protectionContainerName, mappingName, this.client.apiVersion(), this.client.acceptLanguage(), creationInput, this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<ProtectionContainerMappingInner>() { }.getType());
    }

    /**
     * Create protection container mapping.
     * The operation to create a protection container mapping.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param mappingName Protection container mapping name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ProtectionContainerMappingInner object if successful.
     */
    public ProtectionContainerMappingInner beginCreate(String fabricName, String protectionContainerName, String mappingName) {
        return beginCreateWithServiceResponseAsync(fabricName, protectionContainerName, mappingName).toBlocking().single().body();
    }

    /**
     * Create protection container mapping.
     * The operation to create a protection container mapping.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param mappingName Protection container mapping name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ProtectionContainerMappingInner> beginCreateAsync(String fabricName, String protectionContainerName, String mappingName, final ServiceCallback<ProtectionContainerMappingInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginCreateWithServiceResponseAsync(fabricName, protectionContainerName, mappingName), serviceCallback);
    }

    /**
     * Create protection container mapping.
     * The operation to create a protection container mapping.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param mappingName Protection container mapping name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ProtectionContainerMappingInner object
     */
    public Observable<ProtectionContainerMappingInner> beginCreateAsync(String fabricName, String protectionContainerName, String mappingName) {
        return beginCreateWithServiceResponseAsync(fabricName, protectionContainerName, mappingName).map(new Func1<ServiceResponse<ProtectionContainerMappingInner>, ProtectionContainerMappingInner>() {
            @Override
            public ProtectionContainerMappingInner call(ServiceResponse<ProtectionContainerMappingInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create protection container mapping.
     * The operation to create a protection container mapping.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param mappingName Protection container mapping name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ProtectionContainerMappingInner object
     */
    public Observable<ServiceResponse<ProtectionContainerMappingInner>> beginCreateWithServiceResponseAsync(String fabricName, String protectionContainerName, String mappingName) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (protectionContainerName == null) {
            throw new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null.");
        }
        if (mappingName == null) {
            throw new IllegalArgumentException("Parameter mappingName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final CreateProtectionContainerMappingInputProperties properties = null;
        CreateProtectionContainerMappingInput creationInput = new CreateProtectionContainerMappingInput();
        creationInput.withProperties(null);
        return service.beginCreate(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, protectionContainerName, mappingName, this.client.apiVersion(), this.client.acceptLanguage(), creationInput, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ProtectionContainerMappingInner>>>() {
                @Override
                public Observable<ServiceResponse<ProtectionContainerMappingInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ProtectionContainerMappingInner> clientResponse = beginCreateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Create protection container mapping.
     * The operation to create a protection container mapping.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param mappingName Protection container mapping name.
     * @param properties Configure protection input properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ProtectionContainerMappingInner object if successful.
     */
    public ProtectionContainerMappingInner beginCreate(String fabricName, String protectionContainerName, String mappingName, CreateProtectionContainerMappingInputProperties properties) {
        return beginCreateWithServiceResponseAsync(fabricName, protectionContainerName, mappingName, properties).toBlocking().single().body();
    }

    /**
     * Create protection container mapping.
     * The operation to create a protection container mapping.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param mappingName Protection container mapping name.
     * @param properties Configure protection input properties.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ProtectionContainerMappingInner> beginCreateAsync(String fabricName, String protectionContainerName, String mappingName, CreateProtectionContainerMappingInputProperties properties, final ServiceCallback<ProtectionContainerMappingInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginCreateWithServiceResponseAsync(fabricName, protectionContainerName, mappingName, properties), serviceCallback);
    }

    /**
     * Create protection container mapping.
     * The operation to create a protection container mapping.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param mappingName Protection container mapping name.
     * @param properties Configure protection input properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ProtectionContainerMappingInner object
     */
    public Observable<ProtectionContainerMappingInner> beginCreateAsync(String fabricName, String protectionContainerName, String mappingName, CreateProtectionContainerMappingInputProperties properties) {
        return beginCreateWithServiceResponseAsync(fabricName, protectionContainerName, mappingName, properties).map(new Func1<ServiceResponse<ProtectionContainerMappingInner>, ProtectionContainerMappingInner>() {
            @Override
            public ProtectionContainerMappingInner call(ServiceResponse<ProtectionContainerMappingInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create protection container mapping.
     * The operation to create a protection container mapping.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param mappingName Protection container mapping name.
     * @param properties Configure protection input properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ProtectionContainerMappingInner object
     */
    public Observable<ServiceResponse<ProtectionContainerMappingInner>> beginCreateWithServiceResponseAsync(String fabricName, String protectionContainerName, String mappingName, CreateProtectionContainerMappingInputProperties properties) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (protectionContainerName == null) {
            throw new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null.");
        }
        if (mappingName == null) {
            throw new IllegalArgumentException("Parameter mappingName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(properties);
        CreateProtectionContainerMappingInput creationInput = new CreateProtectionContainerMappingInput();
        creationInput.withProperties(properties);
        return service.beginCreate(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, protectionContainerName, mappingName, this.client.apiVersion(), this.client.acceptLanguage(), creationInput, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ProtectionContainerMappingInner>>>() {
                @Override
                public Observable<ServiceResponse<ProtectionContainerMappingInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ProtectionContainerMappingInner> clientResponse = beginCreateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ProtectionContainerMappingInner> beginCreateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ProtectionContainerMappingInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ProtectionContainerMappingInner>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Purge protection container mapping.
     * The operation to purge(force delete) a protection container mapping.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param mappingName Protection container mapping name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void purge(String fabricName, String protectionContainerName, String mappingName) {
        purgeWithServiceResponseAsync(fabricName, protectionContainerName, mappingName).toBlocking().last().body();
    }

    /**
     * Purge protection container mapping.
     * The operation to purge(force delete) a protection container mapping.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param mappingName Protection container mapping name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> purgeAsync(String fabricName, String protectionContainerName, String mappingName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(purgeWithServiceResponseAsync(fabricName, protectionContainerName, mappingName), serviceCallback);
    }

    /**
     * Purge protection container mapping.
     * The operation to purge(force delete) a protection container mapping.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param mappingName Protection container mapping name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Void> purgeAsync(String fabricName, String protectionContainerName, String mappingName) {
        return purgeWithServiceResponseAsync(fabricName, protectionContainerName, mappingName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Purge protection container mapping.
     * The operation to purge(force delete) a protection container mapping.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param mappingName Protection container mapping name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<Void>> purgeWithServiceResponseAsync(String fabricName, String protectionContainerName, String mappingName) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (protectionContainerName == null) {
            throw new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null.");
        }
        if (mappingName == null) {
            throw new IllegalArgumentException("Parameter mappingName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Observable<Response<ResponseBody>> observable = service.purge(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, protectionContainerName, mappingName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<Void>() { }.getType());
    }

    /**
     * Purge protection container mapping.
     * The operation to purge(force delete) a protection container mapping.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param mappingName Protection container mapping name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void beginPurge(String fabricName, String protectionContainerName, String mappingName) {
        beginPurgeWithServiceResponseAsync(fabricName, protectionContainerName, mappingName).toBlocking().single().body();
    }

    /**
     * Purge protection container mapping.
     * The operation to purge(force delete) a protection container mapping.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param mappingName Protection container mapping name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> beginPurgeAsync(String fabricName, String protectionContainerName, String mappingName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(beginPurgeWithServiceResponseAsync(fabricName, protectionContainerName, mappingName), serviceCallback);
    }

    /**
     * Purge protection container mapping.
     * The operation to purge(force delete) a protection container mapping.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param mappingName Protection container mapping name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> beginPurgeAsync(String fabricName, String protectionContainerName, String mappingName) {
        return beginPurgeWithServiceResponseAsync(fabricName, protectionContainerName, mappingName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Purge protection container mapping.
     * The operation to purge(force delete) a protection container mapping.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param mappingName Protection container mapping name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> beginPurgeWithServiceResponseAsync(String fabricName, String protectionContainerName, String mappingName) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (protectionContainerName == null) {
            throw new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null.");
        }
        if (mappingName == null) {
            throw new IllegalArgumentException("Parameter mappingName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.beginPurge(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, protectionContainerName, mappingName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = beginPurgeDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> beginPurgeDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CloudException>newInstance(this.client.serializerAdapter())
                .register(202, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets the list of protection container mappings for a protection container.
     * Lists the protection container mappings for a protection container.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ProtectionContainerMappingInner&gt; object if successful.
     */
    public PagedList<ProtectionContainerMappingInner> listByReplicationProtectionContainers(final String fabricName, final String protectionContainerName) {
        ServiceResponse<Page<ProtectionContainerMappingInner>> response = listByReplicationProtectionContainersSinglePageAsync(fabricName, protectionContainerName).toBlocking().single();
        return new PagedList<ProtectionContainerMappingInner>(response.body()) {
            @Override
            public Page<ProtectionContainerMappingInner> nextPage(String nextPageLink) {
                return listByReplicationProtectionContainersNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets the list of protection container mappings for a protection container.
     * Lists the protection container mappings for a protection container.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ProtectionContainerMappingInner>> listByReplicationProtectionContainersAsync(final String fabricName, final String protectionContainerName, final ListOperationCallback<ProtectionContainerMappingInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByReplicationProtectionContainersSinglePageAsync(fabricName, protectionContainerName),
            new Func1<String, Observable<ServiceResponse<Page<ProtectionContainerMappingInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ProtectionContainerMappingInner>>> call(String nextPageLink) {
                    return listByReplicationProtectionContainersNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets the list of protection container mappings for a protection container.
     * Lists the protection container mappings for a protection container.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ProtectionContainerMappingInner&gt; object
     */
    public Observable<Page<ProtectionContainerMappingInner>> listByReplicationProtectionContainersAsync(final String fabricName, final String protectionContainerName) {
        return listByReplicationProtectionContainersWithServiceResponseAsync(fabricName, protectionContainerName)
            .map(new Func1<ServiceResponse<Page<ProtectionContainerMappingInner>>, Page<ProtectionContainerMappingInner>>() {
                @Override
                public Page<ProtectionContainerMappingInner> call(ServiceResponse<Page<ProtectionContainerMappingInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets the list of protection container mappings for a protection container.
     * Lists the protection container mappings for a protection container.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ProtectionContainerMappingInner&gt; object
     */
    public Observable<ServiceResponse<Page<ProtectionContainerMappingInner>>> listByReplicationProtectionContainersWithServiceResponseAsync(final String fabricName, final String protectionContainerName) {
        return listByReplicationProtectionContainersSinglePageAsync(fabricName, protectionContainerName)
            .concatMap(new Func1<ServiceResponse<Page<ProtectionContainerMappingInner>>, Observable<ServiceResponse<Page<ProtectionContainerMappingInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ProtectionContainerMappingInner>>> call(ServiceResponse<Page<ProtectionContainerMappingInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByReplicationProtectionContainersNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets the list of protection container mappings for a protection container.
     * Lists the protection container mappings for a protection container.
     *
    ServiceResponse<PageImpl<ProtectionContainerMappingInner>> * @param fabricName Fabric name.
    ServiceResponse<PageImpl<ProtectionContainerMappingInner>> * @param protectionContainerName Protection container name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ProtectionContainerMappingInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ProtectionContainerMappingInner>>> listByReplicationProtectionContainersSinglePageAsync(final String fabricName, final String protectionContainerName) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (protectionContainerName == null) {
            throw new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByReplicationProtectionContainers(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, protectionContainerName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ProtectionContainerMappingInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ProtectionContainerMappingInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ProtectionContainerMappingInner>> result = listByReplicationProtectionContainersDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ProtectionContainerMappingInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<ProtectionContainerMappingInner>> listByReplicationProtectionContainersDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<ProtectionContainerMappingInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<ProtectionContainerMappingInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets the list of all protection container mappings in a vault.
     * Lists the protection container mappings in the vault.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ProtectionContainerMappingInner&gt; object if successful.
     */
    public PagedList<ProtectionContainerMappingInner> list() {
        ServiceResponse<Page<ProtectionContainerMappingInner>> response = listSinglePageAsync().toBlocking().single();
        return new PagedList<ProtectionContainerMappingInner>(response.body()) {
            @Override
            public Page<ProtectionContainerMappingInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets the list of all protection container mappings in a vault.
     * Lists the protection container mappings in the vault.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ProtectionContainerMappingInner>> listAsync(final ListOperationCallback<ProtectionContainerMappingInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSinglePageAsync(),
            new Func1<String, Observable<ServiceResponse<Page<ProtectionContainerMappingInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ProtectionContainerMappingInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets the list of all protection container mappings in a vault.
     * Lists the protection container mappings in the vault.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ProtectionContainerMappingInner&gt; object
     */
    public Observable<Page<ProtectionContainerMappingInner>> listAsync() {
        return listWithServiceResponseAsync()
            .map(new Func1<ServiceResponse<Page<ProtectionContainerMappingInner>>, Page<ProtectionContainerMappingInner>>() {
                @Override
                public Page<ProtectionContainerMappingInner> call(ServiceResponse<Page<ProtectionContainerMappingInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets the list of all protection container mappings in a vault.
     * Lists the protection container mappings in the vault.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ProtectionContainerMappingInner&gt; object
     */
    public Observable<ServiceResponse<Page<ProtectionContainerMappingInner>>> listWithServiceResponseAsync() {
        return listSinglePageAsync()
            .concatMap(new Func1<ServiceResponse<Page<ProtectionContainerMappingInner>>, Observable<ServiceResponse<Page<ProtectionContainerMappingInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ProtectionContainerMappingInner>>> call(ServiceResponse<Page<ProtectionContainerMappingInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets the list of all protection container mappings in a vault.
     * Lists the protection container mappings in the vault.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ProtectionContainerMappingInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ProtectionContainerMappingInner>>> listSinglePageAsync() {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.list(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ProtectionContainerMappingInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ProtectionContainerMappingInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ProtectionContainerMappingInner>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ProtectionContainerMappingInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<ProtectionContainerMappingInner>> listDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<ProtectionContainerMappingInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<ProtectionContainerMappingInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets the list of protection container mappings for a protection container.
     * Lists the protection container mappings for a protection container.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ProtectionContainerMappingInner&gt; object if successful.
     */
    public PagedList<ProtectionContainerMappingInner> listByReplicationProtectionContainersNext(final String nextPageLink) {
        ServiceResponse<Page<ProtectionContainerMappingInner>> response = listByReplicationProtectionContainersNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<ProtectionContainerMappingInner>(response.body()) {
            @Override
            public Page<ProtectionContainerMappingInner> nextPage(String nextPageLink) {
                return listByReplicationProtectionContainersNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets the list of protection container mappings for a protection container.
     * Lists the protection container mappings for a protection container.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ProtectionContainerMappingInner>> listByReplicationProtectionContainersNextAsync(final String nextPageLink, final ServiceFuture<List<ProtectionContainerMappingInner>> serviceFuture, final ListOperationCallback<ProtectionContainerMappingInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByReplicationProtectionContainersNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<ProtectionContainerMappingInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ProtectionContainerMappingInner>>> call(String nextPageLink) {
                    return listByReplicationProtectionContainersNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets the list of protection container mappings for a protection container.
     * Lists the protection container mappings for a protection container.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ProtectionContainerMappingInner&gt; object
     */
    public Observable<Page<ProtectionContainerMappingInner>> listByReplicationProtectionContainersNextAsync(final String nextPageLink) {
        return listByReplicationProtectionContainersNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<ProtectionContainerMappingInner>>, Page<ProtectionContainerMappingInner>>() {
                @Override
                public Page<ProtectionContainerMappingInner> call(ServiceResponse<Page<ProtectionContainerMappingInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets the list of protection container mappings for a protection container.
     * Lists the protection container mappings for a protection container.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ProtectionContainerMappingInner&gt; object
     */
    public Observable<ServiceResponse<Page<ProtectionContainerMappingInner>>> listByReplicationProtectionContainersNextWithServiceResponseAsync(final String nextPageLink) {
        return listByReplicationProtectionContainersNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<ProtectionContainerMappingInner>>, Observable<ServiceResponse<Page<ProtectionContainerMappingInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ProtectionContainerMappingInner>>> call(ServiceResponse<Page<ProtectionContainerMappingInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByReplicationProtectionContainersNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets the list of protection container mappings for a protection container.
     * Lists the protection container mappings for a protection container.
     *
    ServiceResponse<PageImpl<ProtectionContainerMappingInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ProtectionContainerMappingInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ProtectionContainerMappingInner>>> listByReplicationProtectionContainersNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByReplicationProtectionContainersNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ProtectionContainerMappingInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ProtectionContainerMappingInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ProtectionContainerMappingInner>> result = listByReplicationProtectionContainersNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ProtectionContainerMappingInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<ProtectionContainerMappingInner>> listByReplicationProtectionContainersNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<ProtectionContainerMappingInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<ProtectionContainerMappingInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets the list of all protection container mappings in a vault.
     * Lists the protection container mappings in the vault.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ProtectionContainerMappingInner&gt; object if successful.
     */
    public PagedList<ProtectionContainerMappingInner> listNext(final String nextPageLink) {
        ServiceResponse<Page<ProtectionContainerMappingInner>> response = listNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<ProtectionContainerMappingInner>(response.body()) {
            @Override
            public Page<ProtectionContainerMappingInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets the list of all protection container mappings in a vault.
     * Lists the protection container mappings in the vault.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ProtectionContainerMappingInner>> listNextAsync(final String nextPageLink, final ServiceFuture<List<ProtectionContainerMappingInner>> serviceFuture, final ListOperationCallback<ProtectionContainerMappingInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<ProtectionContainerMappingInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ProtectionContainerMappingInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets the list of all protection container mappings in a vault.
     * Lists the protection container mappings in the vault.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ProtectionContainerMappingInner&gt; object
     */
    public Observable<Page<ProtectionContainerMappingInner>> listNextAsync(final String nextPageLink) {
        return listNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<ProtectionContainerMappingInner>>, Page<ProtectionContainerMappingInner>>() {
                @Override
                public Page<ProtectionContainerMappingInner> call(ServiceResponse<Page<ProtectionContainerMappingInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets the list of all protection container mappings in a vault.
     * Lists the protection container mappings in the vault.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ProtectionContainerMappingInner&gt; object
     */
    public Observable<ServiceResponse<Page<ProtectionContainerMappingInner>>> listNextWithServiceResponseAsync(final String nextPageLink) {
        return listNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<ProtectionContainerMappingInner>>, Observable<ServiceResponse<Page<ProtectionContainerMappingInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ProtectionContainerMappingInner>>> call(ServiceResponse<Page<ProtectionContainerMappingInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets the list of all protection container mappings in a vault.
     * Lists the protection container mappings in the vault.
     *
    ServiceResponse<PageImpl<ProtectionContainerMappingInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ProtectionContainerMappingInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ProtectionContainerMappingInner>>> listNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ProtectionContainerMappingInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ProtectionContainerMappingInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ProtectionContainerMappingInner>> result = listNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ProtectionContainerMappingInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<ProtectionContainerMappingInner>> listNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<ProtectionContainerMappingInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<ProtectionContainerMappingInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
