/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.CloudException;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ApplyRecoveryPointInput;
import com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ApplyRecoveryPointInputProperties;
import com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.DisableProtectionInput;
import com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.DisableProtectionInputProperties;
import com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.EnableProtectionInput;
import com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.EnableProtectionInputProperties;
import com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.PlannedFailoverInput;
import com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.PlannedFailoverInputProperties;
import com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReverseReplicationInput;
import com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReverseReplicationInputProperties;
import com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.TestFailoverCleanupInput;
import com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.TestFailoverCleanupInputProperties;
import com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.TestFailoverInput;
import com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.TestFailoverInputProperties;
import com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.UnplannedFailoverInput;
import com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.UnplannedFailoverInputProperties;
import com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.UpdateMobilityServiceRequest;
import com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.UpdateMobilityServiceRequestProperties;
import com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.UpdateReplicationProtectedItemInput;
import com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.UpdateReplicationProtectedItemInputProperties;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.PATCH;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in ReplicationProtectedItems.
 */
public class ReplicationProtectedItemsInner {
    /** The Retrofit service to perform REST calls. */
    private ReplicationProtectedItemsService service;
    /** The service client containing this operation class. */
    private SiteRecoveryManagementClientImpl client;

    /**
     * Initializes an instance of ReplicationProtectedItemsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public ReplicationProtectedItemsInner(Retrofit retrofit, SiteRecoveryManagementClientImpl client) {
        this.service = retrofit.create(ReplicationProtectedItemsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for ReplicationProtectedItems to be
     * used by Retrofit to perform actually REST calls.
     */
    interface ReplicationProtectedItemsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationProtectedItems listByReplicationProtectionContainers" })
        @GET("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems")
        Observable<Response<ResponseBody>> listByReplicationProtectionContainers(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("fabricName") String fabricName, @Path("protectionContainerName") String protectionContainerName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationProtectedItems list" })
        @GET("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationProtectedItems")
        Observable<Response<ResponseBody>> list(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Query("skipToken") String skipToken, @Query("$filter") String filter, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationProtectedItems applyRecoveryPoint" })
        @POST("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicatedProtectedItemName}/applyRecoveryPoint")
        Observable<Response<ResponseBody>> applyRecoveryPoint(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("fabricName") String fabricName, @Path("protectionContainerName") String protectionContainerName, @Path("replicatedProtectedItemName") String replicatedProtectedItemName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body ApplyRecoveryPointInput applyRecoveryPointInput, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationProtectedItems beginApplyRecoveryPoint" })
        @POST("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicatedProtectedItemName}/applyRecoveryPoint")
        Observable<Response<ResponseBody>> beginApplyRecoveryPoint(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("fabricName") String fabricName, @Path("protectionContainerName") String protectionContainerName, @Path("replicatedProtectedItemName") String replicatedProtectedItemName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body ApplyRecoveryPointInput applyRecoveryPointInput, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationProtectedItems repairReplication" })
        @POST("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicatedProtectedItemName}/repairReplication")
        Observable<Response<ResponseBody>> repairReplication(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("fabricName") String fabricName, @Path("protectionContainerName") String protectionContainerName, @Path("replicatedProtectedItemName") String replicatedProtectedItemName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationProtectedItems beginRepairReplication" })
        @POST("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicatedProtectedItemName}/repairReplication")
        Observable<Response<ResponseBody>> beginRepairReplication(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("fabricName") String fabricName, @Path("protectionContainerName") String protectionContainerName, @Path("replicatedProtectedItemName") String replicatedProtectedItemName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationProtectedItems updateMobilityService" })
        @POST("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicationProtectedItemName}/updateMobilityService")
        Observable<Response<ResponseBody>> updateMobilityService(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("fabricName") String fabricName, @Path("protectionContainerName") String protectionContainerName, @Path("replicationProtectedItemName") String replicationProtectedItemName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body UpdateMobilityServiceRequest updateMobilityServiceRequest, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationProtectedItems beginUpdateMobilityService" })
        @POST("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicationProtectedItemName}/updateMobilityService")
        Observable<Response<ResponseBody>> beginUpdateMobilityService(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("fabricName") String fabricName, @Path("protectionContainerName") String protectionContainerName, @Path("replicationProtectedItemName") String replicationProtectedItemName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body UpdateMobilityServiceRequest updateMobilityServiceRequest, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationProtectedItems reprotect" })
        @POST("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicatedProtectedItemName}/reProtect")
        Observable<Response<ResponseBody>> reprotect(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("fabricName") String fabricName, @Path("protectionContainerName") String protectionContainerName, @Path("replicatedProtectedItemName") String replicatedProtectedItemName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body ReverseReplicationInput rrInput, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationProtectedItems beginReprotect" })
        @POST("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicatedProtectedItemName}/reProtect")
        Observable<Response<ResponseBody>> beginReprotect(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("fabricName") String fabricName, @Path("protectionContainerName") String protectionContainerName, @Path("replicatedProtectedItemName") String replicatedProtectedItemName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body ReverseReplicationInput rrInput, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationProtectedItems failoverCommit" })
        @POST("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicatedProtectedItemName}/failoverCommit")
        Observable<Response<ResponseBody>> failoverCommit(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("fabricName") String fabricName, @Path("protectionContainerName") String protectionContainerName, @Path("replicatedProtectedItemName") String replicatedProtectedItemName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationProtectedItems beginFailoverCommit" })
        @POST("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicatedProtectedItemName}/failoverCommit")
        Observable<Response<ResponseBody>> beginFailoverCommit(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("fabricName") String fabricName, @Path("protectionContainerName") String protectionContainerName, @Path("replicatedProtectedItemName") String replicatedProtectedItemName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationProtectedItems testFailoverCleanup" })
        @POST("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicatedProtectedItemName}/testFailoverCleanup")
        Observable<Response<ResponseBody>> testFailoverCleanup(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("fabricName") String fabricName, @Path("protectionContainerName") String protectionContainerName, @Path("replicatedProtectedItemName") String replicatedProtectedItemName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body TestFailoverCleanupInput cleanupInput, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationProtectedItems beginTestFailoverCleanup" })
        @POST("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicatedProtectedItemName}/testFailoverCleanup")
        Observable<Response<ResponseBody>> beginTestFailoverCleanup(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("fabricName") String fabricName, @Path("protectionContainerName") String protectionContainerName, @Path("replicatedProtectedItemName") String replicatedProtectedItemName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body TestFailoverCleanupInput cleanupInput, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationProtectedItems testFailover" })
        @POST("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicatedProtectedItemName}/testFailover")
        Observable<Response<ResponseBody>> testFailover(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("fabricName") String fabricName, @Path("protectionContainerName") String protectionContainerName, @Path("replicatedProtectedItemName") String replicatedProtectedItemName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body TestFailoverInput failoverInput, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationProtectedItems beginTestFailover" })
        @POST("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicatedProtectedItemName}/testFailover")
        Observable<Response<ResponseBody>> beginTestFailover(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("fabricName") String fabricName, @Path("protectionContainerName") String protectionContainerName, @Path("replicatedProtectedItemName") String replicatedProtectedItemName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body TestFailoverInput failoverInput, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationProtectedItems unplannedFailover" })
        @POST("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicatedProtectedItemName}/unplannedFailover")
        Observable<Response<ResponseBody>> unplannedFailover(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("fabricName") String fabricName, @Path("protectionContainerName") String protectionContainerName, @Path("replicatedProtectedItemName") String replicatedProtectedItemName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body UnplannedFailoverInput failoverInput, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationProtectedItems beginUnplannedFailover" })
        @POST("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicatedProtectedItemName}/unplannedFailover")
        Observable<Response<ResponseBody>> beginUnplannedFailover(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("fabricName") String fabricName, @Path("protectionContainerName") String protectionContainerName, @Path("replicatedProtectedItemName") String replicatedProtectedItemName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body UnplannedFailoverInput failoverInput, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationProtectedItems plannedFailover" })
        @POST("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicatedProtectedItemName}/plannedFailover")
        Observable<Response<ResponseBody>> plannedFailover(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("fabricName") String fabricName, @Path("protectionContainerName") String protectionContainerName, @Path("replicatedProtectedItemName") String replicatedProtectedItemName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body PlannedFailoverInput failoverInput, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationProtectedItems beginPlannedFailover" })
        @POST("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicatedProtectedItemName}/plannedFailover")
        Observable<Response<ResponseBody>> beginPlannedFailover(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("fabricName") String fabricName, @Path("protectionContainerName") String protectionContainerName, @Path("replicatedProtectedItemName") String replicatedProtectedItemName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body PlannedFailoverInput failoverInput, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationProtectedItems delete" })
        @POST("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicatedProtectedItemName}/remove")
        Observable<Response<ResponseBody>> delete(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("fabricName") String fabricName, @Path("protectionContainerName") String protectionContainerName, @Path("replicatedProtectedItemName") String replicatedProtectedItemName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body DisableProtectionInput disableProtectionInput, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationProtectedItems beginDelete" })
        @POST("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicatedProtectedItemName}/remove")
        Observable<Response<ResponseBody>> beginDelete(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("fabricName") String fabricName, @Path("protectionContainerName") String protectionContainerName, @Path("replicatedProtectedItemName") String replicatedProtectedItemName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body DisableProtectionInput disableProtectionInput, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationProtectedItems get" })
        @GET("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicatedProtectedItemName}")
        Observable<Response<ResponseBody>> get(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("fabricName") String fabricName, @Path("protectionContainerName") String protectionContainerName, @Path("replicatedProtectedItemName") String replicatedProtectedItemName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationProtectedItems create" })
        @PUT("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicatedProtectedItemName}")
        Observable<Response<ResponseBody>> create(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("fabricName") String fabricName, @Path("protectionContainerName") String protectionContainerName, @Path("replicatedProtectedItemName") String replicatedProtectedItemName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body EnableProtectionInput input, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationProtectedItems beginCreate" })
        @PUT("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicatedProtectedItemName}")
        Observable<Response<ResponseBody>> beginCreate(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("fabricName") String fabricName, @Path("protectionContainerName") String protectionContainerName, @Path("replicatedProtectedItemName") String replicatedProtectedItemName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body EnableProtectionInput input, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationProtectedItems purge" })
        @HTTP(path = "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicatedProtectedItemName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> purge(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("fabricName") String fabricName, @Path("protectionContainerName") String protectionContainerName, @Path("replicatedProtectedItemName") String replicatedProtectedItemName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationProtectedItems beginPurge" })
        @HTTP(path = "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicatedProtectedItemName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> beginPurge(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("fabricName") String fabricName, @Path("protectionContainerName") String protectionContainerName, @Path("replicatedProtectedItemName") String replicatedProtectedItemName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationProtectedItems update" })
        @PATCH("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicatedProtectedItemName}")
        Observable<Response<ResponseBody>> update(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("fabricName") String fabricName, @Path("protectionContainerName") String protectionContainerName, @Path("replicatedProtectedItemName") String replicatedProtectedItemName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body UpdateReplicationProtectedItemInput updateProtectionInput, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationProtectedItems beginUpdate" })
        @PATCH("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicatedProtectedItemName}")
        Observable<Response<ResponseBody>> beginUpdate(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("fabricName") String fabricName, @Path("protectionContainerName") String protectionContainerName, @Path("replicatedProtectedItemName") String replicatedProtectedItemName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body UpdateReplicationProtectedItemInput updateProtectionInput, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationProtectedItems listByReplicationProtectionContainersNext" })
        @GET
        Observable<Response<ResponseBody>> listByReplicationProtectionContainersNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationProtectedItems listNext" })
        @GET
        Observable<Response<ResponseBody>> listNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Gets the list of Replication protected items.
     * Gets the list of ASR replication protected items in the protection container.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ReplicationProtectedItemInner&gt; object if successful.
     */
    public PagedList<ReplicationProtectedItemInner> listByReplicationProtectionContainers(final String fabricName, final String protectionContainerName) {
        ServiceResponse<Page<ReplicationProtectedItemInner>> response = listByReplicationProtectionContainersSinglePageAsync(fabricName, protectionContainerName).toBlocking().single();
        return new PagedList<ReplicationProtectedItemInner>(response.body()) {
            @Override
            public Page<ReplicationProtectedItemInner> nextPage(String nextPageLink) {
                return listByReplicationProtectionContainersNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets the list of Replication protected items.
     * Gets the list of ASR replication protected items in the protection container.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ReplicationProtectedItemInner>> listByReplicationProtectionContainersAsync(final String fabricName, final String protectionContainerName, final ListOperationCallback<ReplicationProtectedItemInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByReplicationProtectionContainersSinglePageAsync(fabricName, protectionContainerName),
            new Func1<String, Observable<ServiceResponse<Page<ReplicationProtectedItemInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ReplicationProtectedItemInner>>> call(String nextPageLink) {
                    return listByReplicationProtectionContainersNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets the list of Replication protected items.
     * Gets the list of ASR replication protected items in the protection container.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ReplicationProtectedItemInner&gt; object
     */
    public Observable<Page<ReplicationProtectedItemInner>> listByReplicationProtectionContainersAsync(final String fabricName, final String protectionContainerName) {
        return listByReplicationProtectionContainersWithServiceResponseAsync(fabricName, protectionContainerName)
            .map(new Func1<ServiceResponse<Page<ReplicationProtectedItemInner>>, Page<ReplicationProtectedItemInner>>() {
                @Override
                public Page<ReplicationProtectedItemInner> call(ServiceResponse<Page<ReplicationProtectedItemInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets the list of Replication protected items.
     * Gets the list of ASR replication protected items in the protection container.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ReplicationProtectedItemInner&gt; object
     */
    public Observable<ServiceResponse<Page<ReplicationProtectedItemInner>>> listByReplicationProtectionContainersWithServiceResponseAsync(final String fabricName, final String protectionContainerName) {
        return listByReplicationProtectionContainersSinglePageAsync(fabricName, protectionContainerName)
            .concatMap(new Func1<ServiceResponse<Page<ReplicationProtectedItemInner>>, Observable<ServiceResponse<Page<ReplicationProtectedItemInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ReplicationProtectedItemInner>>> call(ServiceResponse<Page<ReplicationProtectedItemInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByReplicationProtectionContainersNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets the list of Replication protected items.
     * Gets the list of ASR replication protected items in the protection container.
     *
    ServiceResponse<PageImpl<ReplicationProtectedItemInner>> * @param fabricName Fabric name.
    ServiceResponse<PageImpl<ReplicationProtectedItemInner>> * @param protectionContainerName Protection container name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ReplicationProtectedItemInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ReplicationProtectedItemInner>>> listByReplicationProtectionContainersSinglePageAsync(final String fabricName, final String protectionContainerName) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (protectionContainerName == null) {
            throw new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByReplicationProtectionContainers(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, protectionContainerName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ReplicationProtectedItemInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ReplicationProtectedItemInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ReplicationProtectedItemInner>> result = listByReplicationProtectionContainersDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ReplicationProtectedItemInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<ReplicationProtectedItemInner>> listByReplicationProtectionContainersDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<ReplicationProtectedItemInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<ReplicationProtectedItemInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets the list of replication protected items.
     * Gets the list of ASR replication protected items in the vault.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ReplicationProtectedItemInner&gt; object if successful.
     */
    public PagedList<ReplicationProtectedItemInner> list() {
        ServiceResponse<Page<ReplicationProtectedItemInner>> response = listSinglePageAsync().toBlocking().single();
        return new PagedList<ReplicationProtectedItemInner>(response.body()) {
            @Override
            public Page<ReplicationProtectedItemInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets the list of replication protected items.
     * Gets the list of ASR replication protected items in the vault.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ReplicationProtectedItemInner>> listAsync(final ListOperationCallback<ReplicationProtectedItemInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSinglePageAsync(),
            new Func1<String, Observable<ServiceResponse<Page<ReplicationProtectedItemInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ReplicationProtectedItemInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets the list of replication protected items.
     * Gets the list of ASR replication protected items in the vault.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ReplicationProtectedItemInner&gt; object
     */
    public Observable<Page<ReplicationProtectedItemInner>> listAsync() {
        return listWithServiceResponseAsync()
            .map(new Func1<ServiceResponse<Page<ReplicationProtectedItemInner>>, Page<ReplicationProtectedItemInner>>() {
                @Override
                public Page<ReplicationProtectedItemInner> call(ServiceResponse<Page<ReplicationProtectedItemInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets the list of replication protected items.
     * Gets the list of ASR replication protected items in the vault.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ReplicationProtectedItemInner&gt; object
     */
    public Observable<ServiceResponse<Page<ReplicationProtectedItemInner>>> listWithServiceResponseAsync() {
        return listSinglePageAsync()
            .concatMap(new Func1<ServiceResponse<Page<ReplicationProtectedItemInner>>, Observable<ServiceResponse<Page<ReplicationProtectedItemInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ReplicationProtectedItemInner>>> call(ServiceResponse<Page<ReplicationProtectedItemInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets the list of replication protected items.
     * Gets the list of ASR replication protected items in the vault.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ReplicationProtectedItemInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ReplicationProtectedItemInner>>> listSinglePageAsync() {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String skipToken = null;
        final String filter = null;
        return service.list(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), this.client.apiVersion(), skipToken, filter, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ReplicationProtectedItemInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ReplicationProtectedItemInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ReplicationProtectedItemInner>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ReplicationProtectedItemInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Gets the list of replication protected items.
     * Gets the list of ASR replication protected items in the vault.
     *
     * @param skipToken The pagination token. Possible values: "FabricId" or "FabricId_CloudId" or null
     * @param filter OData filter options.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ReplicationProtectedItemInner&gt; object if successful.
     */
    public PagedList<ReplicationProtectedItemInner> list(final String skipToken, final String filter) {
        ServiceResponse<Page<ReplicationProtectedItemInner>> response = listSinglePageAsync(skipToken, filter).toBlocking().single();
        return new PagedList<ReplicationProtectedItemInner>(response.body()) {
            @Override
            public Page<ReplicationProtectedItemInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets the list of replication protected items.
     * Gets the list of ASR replication protected items in the vault.
     *
     * @param skipToken The pagination token. Possible values: "FabricId" or "FabricId_CloudId" or null
     * @param filter OData filter options.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ReplicationProtectedItemInner>> listAsync(final String skipToken, final String filter, final ListOperationCallback<ReplicationProtectedItemInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSinglePageAsync(skipToken, filter),
            new Func1<String, Observable<ServiceResponse<Page<ReplicationProtectedItemInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ReplicationProtectedItemInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets the list of replication protected items.
     * Gets the list of ASR replication protected items in the vault.
     *
     * @param skipToken The pagination token. Possible values: "FabricId" or "FabricId_CloudId" or null
     * @param filter OData filter options.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ReplicationProtectedItemInner&gt; object
     */
    public Observable<Page<ReplicationProtectedItemInner>> listAsync(final String skipToken, final String filter) {
        return listWithServiceResponseAsync(skipToken, filter)
            .map(new Func1<ServiceResponse<Page<ReplicationProtectedItemInner>>, Page<ReplicationProtectedItemInner>>() {
                @Override
                public Page<ReplicationProtectedItemInner> call(ServiceResponse<Page<ReplicationProtectedItemInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets the list of replication protected items.
     * Gets the list of ASR replication protected items in the vault.
     *
     * @param skipToken The pagination token. Possible values: "FabricId" or "FabricId_CloudId" or null
     * @param filter OData filter options.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ReplicationProtectedItemInner&gt; object
     */
    public Observable<ServiceResponse<Page<ReplicationProtectedItemInner>>> listWithServiceResponseAsync(final String skipToken, final String filter) {
        return listSinglePageAsync(skipToken, filter)
            .concatMap(new Func1<ServiceResponse<Page<ReplicationProtectedItemInner>>, Observable<ServiceResponse<Page<ReplicationProtectedItemInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ReplicationProtectedItemInner>>> call(ServiceResponse<Page<ReplicationProtectedItemInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets the list of replication protected items.
     * Gets the list of ASR replication protected items in the vault.
     *
    ServiceResponse<PageImpl<ReplicationProtectedItemInner>> * @param skipToken The pagination token. Possible values: "FabricId" or "FabricId_CloudId" or null
    ServiceResponse<PageImpl<ReplicationProtectedItemInner>> * @param filter OData filter options.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ReplicationProtectedItemInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ReplicationProtectedItemInner>>> listSinglePageAsync(final String skipToken, final String filter) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.list(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), this.client.apiVersion(), skipToken, filter, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ReplicationProtectedItemInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ReplicationProtectedItemInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ReplicationProtectedItemInner>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ReplicationProtectedItemInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<ReplicationProtectedItemInner>> listDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<ReplicationProtectedItemInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<ReplicationProtectedItemInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Change or apply recovery point.
     * The operation to change the recovery point of a failed over replication protected item.
     *
     * @param fabricName The ARM fabric name.
     * @param protectionContainerName The protection container name.
     * @param replicatedProtectedItemName The replicated protected item's name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ReplicationProtectedItemInner object if successful.
     */
    public ReplicationProtectedItemInner applyRecoveryPoint(String fabricName, String protectionContainerName, String replicatedProtectedItemName) {
        return applyRecoveryPointWithServiceResponseAsync(fabricName, protectionContainerName, replicatedProtectedItemName).toBlocking().last().body();
    }

    /**
     * Change or apply recovery point.
     * The operation to change the recovery point of a failed over replication protected item.
     *
     * @param fabricName The ARM fabric name.
     * @param protectionContainerName The protection container name.
     * @param replicatedProtectedItemName The replicated protected item's name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ReplicationProtectedItemInner> applyRecoveryPointAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName, final ServiceCallback<ReplicationProtectedItemInner> serviceCallback) {
        return ServiceFuture.fromResponse(applyRecoveryPointWithServiceResponseAsync(fabricName, protectionContainerName, replicatedProtectedItemName), serviceCallback);
    }

    /**
     * Change or apply recovery point.
     * The operation to change the recovery point of a failed over replication protected item.
     *
     * @param fabricName The ARM fabric name.
     * @param protectionContainerName The protection container name.
     * @param replicatedProtectedItemName The replicated protected item's name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ReplicationProtectedItemInner> applyRecoveryPointAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName) {
        return applyRecoveryPointWithServiceResponseAsync(fabricName, protectionContainerName, replicatedProtectedItemName).map(new Func1<ServiceResponse<ReplicationProtectedItemInner>, ReplicationProtectedItemInner>() {
            @Override
            public ReplicationProtectedItemInner call(ServiceResponse<ReplicationProtectedItemInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Change or apply recovery point.
     * The operation to change the recovery point of a failed over replication protected item.
     *
     * @param fabricName The ARM fabric name.
     * @param protectionContainerName The protection container name.
     * @param replicatedProtectedItemName The replicated protected item's name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<ReplicationProtectedItemInner>> applyRecoveryPointWithServiceResponseAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (protectionContainerName == null) {
            throw new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null.");
        }
        if (replicatedProtectedItemName == null) {
            throw new IllegalArgumentException("Parameter replicatedProtectedItemName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final ApplyRecoveryPointInputProperties properties = null;
        ApplyRecoveryPointInput applyRecoveryPointInput = new ApplyRecoveryPointInput();
        applyRecoveryPointInput.withProperties(null);
        Observable<Response<ResponseBody>> observable = service.applyRecoveryPoint(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, protectionContainerName, replicatedProtectedItemName, this.client.apiVersion(), this.client.acceptLanguage(), applyRecoveryPointInput, this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<ReplicationProtectedItemInner>() { }.getType());
    }
    /**
     * Change or apply recovery point.
     * The operation to change the recovery point of a failed over replication protected item.
     *
     * @param fabricName The ARM fabric name.
     * @param protectionContainerName The protection container name.
     * @param replicatedProtectedItemName The replicated protected item's name.
     * @param properties The input properties to apply recovery point.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ReplicationProtectedItemInner object if successful.
     */
    public ReplicationProtectedItemInner applyRecoveryPoint(String fabricName, String protectionContainerName, String replicatedProtectedItemName, ApplyRecoveryPointInputProperties properties) {
        return applyRecoveryPointWithServiceResponseAsync(fabricName, protectionContainerName, replicatedProtectedItemName, properties).toBlocking().last().body();
    }

    /**
     * Change or apply recovery point.
     * The operation to change the recovery point of a failed over replication protected item.
     *
     * @param fabricName The ARM fabric name.
     * @param protectionContainerName The protection container name.
     * @param replicatedProtectedItemName The replicated protected item's name.
     * @param properties The input properties to apply recovery point.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ReplicationProtectedItemInner> applyRecoveryPointAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName, ApplyRecoveryPointInputProperties properties, final ServiceCallback<ReplicationProtectedItemInner> serviceCallback) {
        return ServiceFuture.fromResponse(applyRecoveryPointWithServiceResponseAsync(fabricName, protectionContainerName, replicatedProtectedItemName, properties), serviceCallback);
    }

    /**
     * Change or apply recovery point.
     * The operation to change the recovery point of a failed over replication protected item.
     *
     * @param fabricName The ARM fabric name.
     * @param protectionContainerName The protection container name.
     * @param replicatedProtectedItemName The replicated protected item's name.
     * @param properties The input properties to apply recovery point.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ReplicationProtectedItemInner> applyRecoveryPointAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName, ApplyRecoveryPointInputProperties properties) {
        return applyRecoveryPointWithServiceResponseAsync(fabricName, protectionContainerName, replicatedProtectedItemName, properties).map(new Func1<ServiceResponse<ReplicationProtectedItemInner>, ReplicationProtectedItemInner>() {
            @Override
            public ReplicationProtectedItemInner call(ServiceResponse<ReplicationProtectedItemInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Change or apply recovery point.
     * The operation to change the recovery point of a failed over replication protected item.
     *
     * @param fabricName The ARM fabric name.
     * @param protectionContainerName The protection container name.
     * @param replicatedProtectedItemName The replicated protected item's name.
     * @param properties The input properties to apply recovery point.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<ReplicationProtectedItemInner>> applyRecoveryPointWithServiceResponseAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName, ApplyRecoveryPointInputProperties properties) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (protectionContainerName == null) {
            throw new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null.");
        }
        if (replicatedProtectedItemName == null) {
            throw new IllegalArgumentException("Parameter replicatedProtectedItemName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(properties);
        ApplyRecoveryPointInput applyRecoveryPointInput = new ApplyRecoveryPointInput();
        applyRecoveryPointInput.withProperties(properties);
        Observable<Response<ResponseBody>> observable = service.applyRecoveryPoint(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, protectionContainerName, replicatedProtectedItemName, this.client.apiVersion(), this.client.acceptLanguage(), applyRecoveryPointInput, this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<ReplicationProtectedItemInner>() { }.getType());
    }

    /**
     * Change or apply recovery point.
     * The operation to change the recovery point of a failed over replication protected item.
     *
     * @param fabricName The ARM fabric name.
     * @param protectionContainerName The protection container name.
     * @param replicatedProtectedItemName The replicated protected item's name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ReplicationProtectedItemInner object if successful.
     */
    public ReplicationProtectedItemInner beginApplyRecoveryPoint(String fabricName, String protectionContainerName, String replicatedProtectedItemName) {
        return beginApplyRecoveryPointWithServiceResponseAsync(fabricName, protectionContainerName, replicatedProtectedItemName).toBlocking().single().body();
    }

    /**
     * Change or apply recovery point.
     * The operation to change the recovery point of a failed over replication protected item.
     *
     * @param fabricName The ARM fabric name.
     * @param protectionContainerName The protection container name.
     * @param replicatedProtectedItemName The replicated protected item's name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ReplicationProtectedItemInner> beginApplyRecoveryPointAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName, final ServiceCallback<ReplicationProtectedItemInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginApplyRecoveryPointWithServiceResponseAsync(fabricName, protectionContainerName, replicatedProtectedItemName), serviceCallback);
    }

    /**
     * Change or apply recovery point.
     * The operation to change the recovery point of a failed over replication protected item.
     *
     * @param fabricName The ARM fabric name.
     * @param protectionContainerName The protection container name.
     * @param replicatedProtectedItemName The replicated protected item's name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ReplicationProtectedItemInner object
     */
    public Observable<ReplicationProtectedItemInner> beginApplyRecoveryPointAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName) {
        return beginApplyRecoveryPointWithServiceResponseAsync(fabricName, protectionContainerName, replicatedProtectedItemName).map(new Func1<ServiceResponse<ReplicationProtectedItemInner>, ReplicationProtectedItemInner>() {
            @Override
            public ReplicationProtectedItemInner call(ServiceResponse<ReplicationProtectedItemInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Change or apply recovery point.
     * The operation to change the recovery point of a failed over replication protected item.
     *
     * @param fabricName The ARM fabric name.
     * @param protectionContainerName The protection container name.
     * @param replicatedProtectedItemName The replicated protected item's name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ReplicationProtectedItemInner object
     */
    public Observable<ServiceResponse<ReplicationProtectedItemInner>> beginApplyRecoveryPointWithServiceResponseAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (protectionContainerName == null) {
            throw new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null.");
        }
        if (replicatedProtectedItemName == null) {
            throw new IllegalArgumentException("Parameter replicatedProtectedItemName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final ApplyRecoveryPointInputProperties properties = null;
        ApplyRecoveryPointInput applyRecoveryPointInput = new ApplyRecoveryPointInput();
        applyRecoveryPointInput.withProperties(null);
        return service.beginApplyRecoveryPoint(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, protectionContainerName, replicatedProtectedItemName, this.client.apiVersion(), this.client.acceptLanguage(), applyRecoveryPointInput, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ReplicationProtectedItemInner>>>() {
                @Override
                public Observable<ServiceResponse<ReplicationProtectedItemInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ReplicationProtectedItemInner> clientResponse = beginApplyRecoveryPointDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Change or apply recovery point.
     * The operation to change the recovery point of a failed over replication protected item.
     *
     * @param fabricName The ARM fabric name.
     * @param protectionContainerName The protection container name.
     * @param replicatedProtectedItemName The replicated protected item's name.
     * @param properties The input properties to apply recovery point.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ReplicationProtectedItemInner object if successful.
     */
    public ReplicationProtectedItemInner beginApplyRecoveryPoint(String fabricName, String protectionContainerName, String replicatedProtectedItemName, ApplyRecoveryPointInputProperties properties) {
        return beginApplyRecoveryPointWithServiceResponseAsync(fabricName, protectionContainerName, replicatedProtectedItemName, properties).toBlocking().single().body();
    }

    /**
     * Change or apply recovery point.
     * The operation to change the recovery point of a failed over replication protected item.
     *
     * @param fabricName The ARM fabric name.
     * @param protectionContainerName The protection container name.
     * @param replicatedProtectedItemName The replicated protected item's name.
     * @param properties The input properties to apply recovery point.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ReplicationProtectedItemInner> beginApplyRecoveryPointAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName, ApplyRecoveryPointInputProperties properties, final ServiceCallback<ReplicationProtectedItemInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginApplyRecoveryPointWithServiceResponseAsync(fabricName, protectionContainerName, replicatedProtectedItemName, properties), serviceCallback);
    }

    /**
     * Change or apply recovery point.
     * The operation to change the recovery point of a failed over replication protected item.
     *
     * @param fabricName The ARM fabric name.
     * @param protectionContainerName The protection container name.
     * @param replicatedProtectedItemName The replicated protected item's name.
     * @param properties The input properties to apply recovery point.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ReplicationProtectedItemInner object
     */
    public Observable<ReplicationProtectedItemInner> beginApplyRecoveryPointAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName, ApplyRecoveryPointInputProperties properties) {
        return beginApplyRecoveryPointWithServiceResponseAsync(fabricName, protectionContainerName, replicatedProtectedItemName, properties).map(new Func1<ServiceResponse<ReplicationProtectedItemInner>, ReplicationProtectedItemInner>() {
            @Override
            public ReplicationProtectedItemInner call(ServiceResponse<ReplicationProtectedItemInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Change or apply recovery point.
     * The operation to change the recovery point of a failed over replication protected item.
     *
     * @param fabricName The ARM fabric name.
     * @param protectionContainerName The protection container name.
     * @param replicatedProtectedItemName The replicated protected item's name.
     * @param properties The input properties to apply recovery point.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ReplicationProtectedItemInner object
     */
    public Observable<ServiceResponse<ReplicationProtectedItemInner>> beginApplyRecoveryPointWithServiceResponseAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName, ApplyRecoveryPointInputProperties properties) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (protectionContainerName == null) {
            throw new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null.");
        }
        if (replicatedProtectedItemName == null) {
            throw new IllegalArgumentException("Parameter replicatedProtectedItemName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(properties);
        ApplyRecoveryPointInput applyRecoveryPointInput = new ApplyRecoveryPointInput();
        applyRecoveryPointInput.withProperties(properties);
        return service.beginApplyRecoveryPoint(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, protectionContainerName, replicatedProtectedItemName, this.client.apiVersion(), this.client.acceptLanguage(), applyRecoveryPointInput, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ReplicationProtectedItemInner>>>() {
                @Override
                public Observable<ServiceResponse<ReplicationProtectedItemInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ReplicationProtectedItemInner> clientResponse = beginApplyRecoveryPointDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ReplicationProtectedItemInner> beginApplyRecoveryPointDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ReplicationProtectedItemInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ReplicationProtectedItemInner>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Resynchronize or repair replication.
     * The operation to start resynchronize/repair replication for a replication protected item requiring resynchronization.
     *
     * @param fabricName The name of the fabric.
     * @param protectionContainerName The name of the container.
     * @param replicatedProtectedItemName The name of the replication protected item.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ReplicationProtectedItemInner object if successful.
     */
    public ReplicationProtectedItemInner repairReplication(String fabricName, String protectionContainerName, String replicatedProtectedItemName) {
        return repairReplicationWithServiceResponseAsync(fabricName, protectionContainerName, replicatedProtectedItemName).toBlocking().last().body();
    }

    /**
     * Resynchronize or repair replication.
     * The operation to start resynchronize/repair replication for a replication protected item requiring resynchronization.
     *
     * @param fabricName The name of the fabric.
     * @param protectionContainerName The name of the container.
     * @param replicatedProtectedItemName The name of the replication protected item.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ReplicationProtectedItemInner> repairReplicationAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName, final ServiceCallback<ReplicationProtectedItemInner> serviceCallback) {
        return ServiceFuture.fromResponse(repairReplicationWithServiceResponseAsync(fabricName, protectionContainerName, replicatedProtectedItemName), serviceCallback);
    }

    /**
     * Resynchronize or repair replication.
     * The operation to start resynchronize/repair replication for a replication protected item requiring resynchronization.
     *
     * @param fabricName The name of the fabric.
     * @param protectionContainerName The name of the container.
     * @param replicatedProtectedItemName The name of the replication protected item.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ReplicationProtectedItemInner> repairReplicationAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName) {
        return repairReplicationWithServiceResponseAsync(fabricName, protectionContainerName, replicatedProtectedItemName).map(new Func1<ServiceResponse<ReplicationProtectedItemInner>, ReplicationProtectedItemInner>() {
            @Override
            public ReplicationProtectedItemInner call(ServiceResponse<ReplicationProtectedItemInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Resynchronize or repair replication.
     * The operation to start resynchronize/repair replication for a replication protected item requiring resynchronization.
     *
     * @param fabricName The name of the fabric.
     * @param protectionContainerName The name of the container.
     * @param replicatedProtectedItemName The name of the replication protected item.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<ReplicationProtectedItemInner>> repairReplicationWithServiceResponseAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (protectionContainerName == null) {
            throw new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null.");
        }
        if (replicatedProtectedItemName == null) {
            throw new IllegalArgumentException("Parameter replicatedProtectedItemName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Observable<Response<ResponseBody>> observable = service.repairReplication(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, protectionContainerName, replicatedProtectedItemName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<ReplicationProtectedItemInner>() { }.getType());
    }

    /**
     * Resynchronize or repair replication.
     * The operation to start resynchronize/repair replication for a replication protected item requiring resynchronization.
     *
     * @param fabricName The name of the fabric.
     * @param protectionContainerName The name of the container.
     * @param replicatedProtectedItemName The name of the replication protected item.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ReplicationProtectedItemInner object if successful.
     */
    public ReplicationProtectedItemInner beginRepairReplication(String fabricName, String protectionContainerName, String replicatedProtectedItemName) {
        return beginRepairReplicationWithServiceResponseAsync(fabricName, protectionContainerName, replicatedProtectedItemName).toBlocking().single().body();
    }

    /**
     * Resynchronize or repair replication.
     * The operation to start resynchronize/repair replication for a replication protected item requiring resynchronization.
     *
     * @param fabricName The name of the fabric.
     * @param protectionContainerName The name of the container.
     * @param replicatedProtectedItemName The name of the replication protected item.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ReplicationProtectedItemInner> beginRepairReplicationAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName, final ServiceCallback<ReplicationProtectedItemInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginRepairReplicationWithServiceResponseAsync(fabricName, protectionContainerName, replicatedProtectedItemName), serviceCallback);
    }

    /**
     * Resynchronize or repair replication.
     * The operation to start resynchronize/repair replication for a replication protected item requiring resynchronization.
     *
     * @param fabricName The name of the fabric.
     * @param protectionContainerName The name of the container.
     * @param replicatedProtectedItemName The name of the replication protected item.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ReplicationProtectedItemInner object
     */
    public Observable<ReplicationProtectedItemInner> beginRepairReplicationAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName) {
        return beginRepairReplicationWithServiceResponseAsync(fabricName, protectionContainerName, replicatedProtectedItemName).map(new Func1<ServiceResponse<ReplicationProtectedItemInner>, ReplicationProtectedItemInner>() {
            @Override
            public ReplicationProtectedItemInner call(ServiceResponse<ReplicationProtectedItemInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Resynchronize or repair replication.
     * The operation to start resynchronize/repair replication for a replication protected item requiring resynchronization.
     *
     * @param fabricName The name of the fabric.
     * @param protectionContainerName The name of the container.
     * @param replicatedProtectedItemName The name of the replication protected item.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ReplicationProtectedItemInner object
     */
    public Observable<ServiceResponse<ReplicationProtectedItemInner>> beginRepairReplicationWithServiceResponseAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (protectionContainerName == null) {
            throw new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null.");
        }
        if (replicatedProtectedItemName == null) {
            throw new IllegalArgumentException("Parameter replicatedProtectedItemName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.beginRepairReplication(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, protectionContainerName, replicatedProtectedItemName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ReplicationProtectedItemInner>>>() {
                @Override
                public Observable<ServiceResponse<ReplicationProtectedItemInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ReplicationProtectedItemInner> clientResponse = beginRepairReplicationDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ReplicationProtectedItemInner> beginRepairReplicationDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ReplicationProtectedItemInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ReplicationProtectedItemInner>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Update the mobility service on a protected item.
     * The operation to update(push update) the installed mobility service software on a replication protected item to the latest available version.
     *
     * @param fabricName The name of the fabric containing the protected item.
     * @param protectionContainerName The name of the container containing the protected item.
     * @param replicationProtectedItemName The name of the protected item on which the agent is to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ReplicationProtectedItemInner object if successful.
     */
    public ReplicationProtectedItemInner updateMobilityService(String fabricName, String protectionContainerName, String replicationProtectedItemName) {
        return updateMobilityServiceWithServiceResponseAsync(fabricName, protectionContainerName, replicationProtectedItemName).toBlocking().last().body();
    }

    /**
     * Update the mobility service on a protected item.
     * The operation to update(push update) the installed mobility service software on a replication protected item to the latest available version.
     *
     * @param fabricName The name of the fabric containing the protected item.
     * @param protectionContainerName The name of the container containing the protected item.
     * @param replicationProtectedItemName The name of the protected item on which the agent is to be updated.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ReplicationProtectedItemInner> updateMobilityServiceAsync(String fabricName, String protectionContainerName, String replicationProtectedItemName, final ServiceCallback<ReplicationProtectedItemInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateMobilityServiceWithServiceResponseAsync(fabricName, protectionContainerName, replicationProtectedItemName), serviceCallback);
    }

    /**
     * Update the mobility service on a protected item.
     * The operation to update(push update) the installed mobility service software on a replication protected item to the latest available version.
     *
     * @param fabricName The name of the fabric containing the protected item.
     * @param protectionContainerName The name of the container containing the protected item.
     * @param replicationProtectedItemName The name of the protected item on which the agent is to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ReplicationProtectedItemInner> updateMobilityServiceAsync(String fabricName, String protectionContainerName, String replicationProtectedItemName) {
        return updateMobilityServiceWithServiceResponseAsync(fabricName, protectionContainerName, replicationProtectedItemName).map(new Func1<ServiceResponse<ReplicationProtectedItemInner>, ReplicationProtectedItemInner>() {
            @Override
            public ReplicationProtectedItemInner call(ServiceResponse<ReplicationProtectedItemInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Update the mobility service on a protected item.
     * The operation to update(push update) the installed mobility service software on a replication protected item to the latest available version.
     *
     * @param fabricName The name of the fabric containing the protected item.
     * @param protectionContainerName The name of the container containing the protected item.
     * @param replicationProtectedItemName The name of the protected item on which the agent is to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<ReplicationProtectedItemInner>> updateMobilityServiceWithServiceResponseAsync(String fabricName, String protectionContainerName, String replicationProtectedItemName) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (protectionContainerName == null) {
            throw new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null.");
        }
        if (replicationProtectedItemName == null) {
            throw new IllegalArgumentException("Parameter replicationProtectedItemName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final UpdateMobilityServiceRequestProperties properties = null;
        UpdateMobilityServiceRequest updateMobilityServiceRequest = new UpdateMobilityServiceRequest();
        updateMobilityServiceRequest.withProperties(null);
        Observable<Response<ResponseBody>> observable = service.updateMobilityService(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, protectionContainerName, replicationProtectedItemName, this.client.apiVersion(), this.client.acceptLanguage(), updateMobilityServiceRequest, this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<ReplicationProtectedItemInner>() { }.getType());
    }
    /**
     * Update the mobility service on a protected item.
     * The operation to update(push update) the installed mobility service software on a replication protected item to the latest available version.
     *
     * @param fabricName The name of the fabric containing the protected item.
     * @param protectionContainerName The name of the container containing the protected item.
     * @param replicationProtectedItemName The name of the protected item on which the agent is to be updated.
     * @param properties The properties of the update mobility service request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ReplicationProtectedItemInner object if successful.
     */
    public ReplicationProtectedItemInner updateMobilityService(String fabricName, String protectionContainerName, String replicationProtectedItemName, UpdateMobilityServiceRequestProperties properties) {
        return updateMobilityServiceWithServiceResponseAsync(fabricName, protectionContainerName, replicationProtectedItemName, properties).toBlocking().last().body();
    }

    /**
     * Update the mobility service on a protected item.
     * The operation to update(push update) the installed mobility service software on a replication protected item to the latest available version.
     *
     * @param fabricName The name of the fabric containing the protected item.
     * @param protectionContainerName The name of the container containing the protected item.
     * @param replicationProtectedItemName The name of the protected item on which the agent is to be updated.
     * @param properties The properties of the update mobility service request.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ReplicationProtectedItemInner> updateMobilityServiceAsync(String fabricName, String protectionContainerName, String replicationProtectedItemName, UpdateMobilityServiceRequestProperties properties, final ServiceCallback<ReplicationProtectedItemInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateMobilityServiceWithServiceResponseAsync(fabricName, protectionContainerName, replicationProtectedItemName, properties), serviceCallback);
    }

    /**
     * Update the mobility service on a protected item.
     * The operation to update(push update) the installed mobility service software on a replication protected item to the latest available version.
     *
     * @param fabricName The name of the fabric containing the protected item.
     * @param protectionContainerName The name of the container containing the protected item.
     * @param replicationProtectedItemName The name of the protected item on which the agent is to be updated.
     * @param properties The properties of the update mobility service request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ReplicationProtectedItemInner> updateMobilityServiceAsync(String fabricName, String protectionContainerName, String replicationProtectedItemName, UpdateMobilityServiceRequestProperties properties) {
        return updateMobilityServiceWithServiceResponseAsync(fabricName, protectionContainerName, replicationProtectedItemName, properties).map(new Func1<ServiceResponse<ReplicationProtectedItemInner>, ReplicationProtectedItemInner>() {
            @Override
            public ReplicationProtectedItemInner call(ServiceResponse<ReplicationProtectedItemInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Update the mobility service on a protected item.
     * The operation to update(push update) the installed mobility service software on a replication protected item to the latest available version.
     *
     * @param fabricName The name of the fabric containing the protected item.
     * @param protectionContainerName The name of the container containing the protected item.
     * @param replicationProtectedItemName The name of the protected item on which the agent is to be updated.
     * @param properties The properties of the update mobility service request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<ReplicationProtectedItemInner>> updateMobilityServiceWithServiceResponseAsync(String fabricName, String protectionContainerName, String replicationProtectedItemName, UpdateMobilityServiceRequestProperties properties) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (protectionContainerName == null) {
            throw new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null.");
        }
        if (replicationProtectedItemName == null) {
            throw new IllegalArgumentException("Parameter replicationProtectedItemName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(properties);
        UpdateMobilityServiceRequest updateMobilityServiceRequest = new UpdateMobilityServiceRequest();
        updateMobilityServiceRequest.withProperties(properties);
        Observable<Response<ResponseBody>> observable = service.updateMobilityService(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, protectionContainerName, replicationProtectedItemName, this.client.apiVersion(), this.client.acceptLanguage(), updateMobilityServiceRequest, this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<ReplicationProtectedItemInner>() { }.getType());
    }

    /**
     * Update the mobility service on a protected item.
     * The operation to update(push update) the installed mobility service software on a replication protected item to the latest available version.
     *
     * @param fabricName The name of the fabric containing the protected item.
     * @param protectionContainerName The name of the container containing the protected item.
     * @param replicationProtectedItemName The name of the protected item on which the agent is to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ReplicationProtectedItemInner object if successful.
     */
    public ReplicationProtectedItemInner beginUpdateMobilityService(String fabricName, String protectionContainerName, String replicationProtectedItemName) {
        return beginUpdateMobilityServiceWithServiceResponseAsync(fabricName, protectionContainerName, replicationProtectedItemName).toBlocking().single().body();
    }

    /**
     * Update the mobility service on a protected item.
     * The operation to update(push update) the installed mobility service software on a replication protected item to the latest available version.
     *
     * @param fabricName The name of the fabric containing the protected item.
     * @param protectionContainerName The name of the container containing the protected item.
     * @param replicationProtectedItemName The name of the protected item on which the agent is to be updated.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ReplicationProtectedItemInner> beginUpdateMobilityServiceAsync(String fabricName, String protectionContainerName, String replicationProtectedItemName, final ServiceCallback<ReplicationProtectedItemInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginUpdateMobilityServiceWithServiceResponseAsync(fabricName, protectionContainerName, replicationProtectedItemName), serviceCallback);
    }

    /**
     * Update the mobility service on a protected item.
     * The operation to update(push update) the installed mobility service software on a replication protected item to the latest available version.
     *
     * @param fabricName The name of the fabric containing the protected item.
     * @param protectionContainerName The name of the container containing the protected item.
     * @param replicationProtectedItemName The name of the protected item on which the agent is to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ReplicationProtectedItemInner object
     */
    public Observable<ReplicationProtectedItemInner> beginUpdateMobilityServiceAsync(String fabricName, String protectionContainerName, String replicationProtectedItemName) {
        return beginUpdateMobilityServiceWithServiceResponseAsync(fabricName, protectionContainerName, replicationProtectedItemName).map(new Func1<ServiceResponse<ReplicationProtectedItemInner>, ReplicationProtectedItemInner>() {
            @Override
            public ReplicationProtectedItemInner call(ServiceResponse<ReplicationProtectedItemInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Update the mobility service on a protected item.
     * The operation to update(push update) the installed mobility service software on a replication protected item to the latest available version.
     *
     * @param fabricName The name of the fabric containing the protected item.
     * @param protectionContainerName The name of the container containing the protected item.
     * @param replicationProtectedItemName The name of the protected item on which the agent is to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ReplicationProtectedItemInner object
     */
    public Observable<ServiceResponse<ReplicationProtectedItemInner>> beginUpdateMobilityServiceWithServiceResponseAsync(String fabricName, String protectionContainerName, String replicationProtectedItemName) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (protectionContainerName == null) {
            throw new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null.");
        }
        if (replicationProtectedItemName == null) {
            throw new IllegalArgumentException("Parameter replicationProtectedItemName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final UpdateMobilityServiceRequestProperties properties = null;
        UpdateMobilityServiceRequest updateMobilityServiceRequest = new UpdateMobilityServiceRequest();
        updateMobilityServiceRequest.withProperties(null);
        return service.beginUpdateMobilityService(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, protectionContainerName, replicationProtectedItemName, this.client.apiVersion(), this.client.acceptLanguage(), updateMobilityServiceRequest, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ReplicationProtectedItemInner>>>() {
                @Override
                public Observable<ServiceResponse<ReplicationProtectedItemInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ReplicationProtectedItemInner> clientResponse = beginUpdateMobilityServiceDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Update the mobility service on a protected item.
     * The operation to update(push update) the installed mobility service software on a replication protected item to the latest available version.
     *
     * @param fabricName The name of the fabric containing the protected item.
     * @param protectionContainerName The name of the container containing the protected item.
     * @param replicationProtectedItemName The name of the protected item on which the agent is to be updated.
     * @param properties The properties of the update mobility service request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ReplicationProtectedItemInner object if successful.
     */
    public ReplicationProtectedItemInner beginUpdateMobilityService(String fabricName, String protectionContainerName, String replicationProtectedItemName, UpdateMobilityServiceRequestProperties properties) {
        return beginUpdateMobilityServiceWithServiceResponseAsync(fabricName, protectionContainerName, replicationProtectedItemName, properties).toBlocking().single().body();
    }

    /**
     * Update the mobility service on a protected item.
     * The operation to update(push update) the installed mobility service software on a replication protected item to the latest available version.
     *
     * @param fabricName The name of the fabric containing the protected item.
     * @param protectionContainerName The name of the container containing the protected item.
     * @param replicationProtectedItemName The name of the protected item on which the agent is to be updated.
     * @param properties The properties of the update mobility service request.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ReplicationProtectedItemInner> beginUpdateMobilityServiceAsync(String fabricName, String protectionContainerName, String replicationProtectedItemName, UpdateMobilityServiceRequestProperties properties, final ServiceCallback<ReplicationProtectedItemInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginUpdateMobilityServiceWithServiceResponseAsync(fabricName, protectionContainerName, replicationProtectedItemName, properties), serviceCallback);
    }

    /**
     * Update the mobility service on a protected item.
     * The operation to update(push update) the installed mobility service software on a replication protected item to the latest available version.
     *
     * @param fabricName The name of the fabric containing the protected item.
     * @param protectionContainerName The name of the container containing the protected item.
     * @param replicationProtectedItemName The name of the protected item on which the agent is to be updated.
     * @param properties The properties of the update mobility service request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ReplicationProtectedItemInner object
     */
    public Observable<ReplicationProtectedItemInner> beginUpdateMobilityServiceAsync(String fabricName, String protectionContainerName, String replicationProtectedItemName, UpdateMobilityServiceRequestProperties properties) {
        return beginUpdateMobilityServiceWithServiceResponseAsync(fabricName, protectionContainerName, replicationProtectedItemName, properties).map(new Func1<ServiceResponse<ReplicationProtectedItemInner>, ReplicationProtectedItemInner>() {
            @Override
            public ReplicationProtectedItemInner call(ServiceResponse<ReplicationProtectedItemInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Update the mobility service on a protected item.
     * The operation to update(push update) the installed mobility service software on a replication protected item to the latest available version.
     *
     * @param fabricName The name of the fabric containing the protected item.
     * @param protectionContainerName The name of the container containing the protected item.
     * @param replicationProtectedItemName The name of the protected item on which the agent is to be updated.
     * @param properties The properties of the update mobility service request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ReplicationProtectedItemInner object
     */
    public Observable<ServiceResponse<ReplicationProtectedItemInner>> beginUpdateMobilityServiceWithServiceResponseAsync(String fabricName, String protectionContainerName, String replicationProtectedItemName, UpdateMobilityServiceRequestProperties properties) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (protectionContainerName == null) {
            throw new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null.");
        }
        if (replicationProtectedItemName == null) {
            throw new IllegalArgumentException("Parameter replicationProtectedItemName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(properties);
        UpdateMobilityServiceRequest updateMobilityServiceRequest = new UpdateMobilityServiceRequest();
        updateMobilityServiceRequest.withProperties(properties);
        return service.beginUpdateMobilityService(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, protectionContainerName, replicationProtectedItemName, this.client.apiVersion(), this.client.acceptLanguage(), updateMobilityServiceRequest, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ReplicationProtectedItemInner>>>() {
                @Override
                public Observable<ServiceResponse<ReplicationProtectedItemInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ReplicationProtectedItemInner> clientResponse = beginUpdateMobilityServiceDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ReplicationProtectedItemInner> beginUpdateMobilityServiceDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ReplicationProtectedItemInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ReplicationProtectedItemInner>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Execute Reverse Replication\Reprotect.
     * Operation to reprotect or reverse replicate a failed over replication protected item.
     *
     * @param fabricName Unique fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ReplicationProtectedItemInner object if successful.
     */
    public ReplicationProtectedItemInner reprotect(String fabricName, String protectionContainerName, String replicatedProtectedItemName) {
        return reprotectWithServiceResponseAsync(fabricName, protectionContainerName, replicatedProtectedItemName).toBlocking().last().body();
    }

    /**
     * Execute Reverse Replication\Reprotect.
     * Operation to reprotect or reverse replicate a failed over replication protected item.
     *
     * @param fabricName Unique fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ReplicationProtectedItemInner> reprotectAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName, final ServiceCallback<ReplicationProtectedItemInner> serviceCallback) {
        return ServiceFuture.fromResponse(reprotectWithServiceResponseAsync(fabricName, protectionContainerName, replicatedProtectedItemName), serviceCallback);
    }

    /**
     * Execute Reverse Replication\Reprotect.
     * Operation to reprotect or reverse replicate a failed over replication protected item.
     *
     * @param fabricName Unique fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ReplicationProtectedItemInner> reprotectAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName) {
        return reprotectWithServiceResponseAsync(fabricName, protectionContainerName, replicatedProtectedItemName).map(new Func1<ServiceResponse<ReplicationProtectedItemInner>, ReplicationProtectedItemInner>() {
            @Override
            public ReplicationProtectedItemInner call(ServiceResponse<ReplicationProtectedItemInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Execute Reverse Replication\Reprotect.
     * Operation to reprotect or reverse replicate a failed over replication protected item.
     *
     * @param fabricName Unique fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<ReplicationProtectedItemInner>> reprotectWithServiceResponseAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (protectionContainerName == null) {
            throw new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null.");
        }
        if (replicatedProtectedItemName == null) {
            throw new IllegalArgumentException("Parameter replicatedProtectedItemName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final ReverseReplicationInputProperties properties = null;
        ReverseReplicationInput rrInput = new ReverseReplicationInput();
        rrInput.withProperties(null);
        Observable<Response<ResponseBody>> observable = service.reprotect(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, protectionContainerName, replicatedProtectedItemName, this.client.apiVersion(), this.client.acceptLanguage(), rrInput, this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<ReplicationProtectedItemInner>() { }.getType());
    }
    /**
     * Execute Reverse Replication\Reprotect.
     * Operation to reprotect or reverse replicate a failed over replication protected item.
     *
     * @param fabricName Unique fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @param properties Reverse replication properties
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ReplicationProtectedItemInner object if successful.
     */
    public ReplicationProtectedItemInner reprotect(String fabricName, String protectionContainerName, String replicatedProtectedItemName, ReverseReplicationInputProperties properties) {
        return reprotectWithServiceResponseAsync(fabricName, protectionContainerName, replicatedProtectedItemName, properties).toBlocking().last().body();
    }

    /**
     * Execute Reverse Replication\Reprotect.
     * Operation to reprotect or reverse replicate a failed over replication protected item.
     *
     * @param fabricName Unique fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @param properties Reverse replication properties
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ReplicationProtectedItemInner> reprotectAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName, ReverseReplicationInputProperties properties, final ServiceCallback<ReplicationProtectedItemInner> serviceCallback) {
        return ServiceFuture.fromResponse(reprotectWithServiceResponseAsync(fabricName, protectionContainerName, replicatedProtectedItemName, properties), serviceCallback);
    }

    /**
     * Execute Reverse Replication\Reprotect.
     * Operation to reprotect or reverse replicate a failed over replication protected item.
     *
     * @param fabricName Unique fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @param properties Reverse replication properties
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ReplicationProtectedItemInner> reprotectAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName, ReverseReplicationInputProperties properties) {
        return reprotectWithServiceResponseAsync(fabricName, protectionContainerName, replicatedProtectedItemName, properties).map(new Func1<ServiceResponse<ReplicationProtectedItemInner>, ReplicationProtectedItemInner>() {
            @Override
            public ReplicationProtectedItemInner call(ServiceResponse<ReplicationProtectedItemInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Execute Reverse Replication\Reprotect.
     * Operation to reprotect or reverse replicate a failed over replication protected item.
     *
     * @param fabricName Unique fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @param properties Reverse replication properties
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<ReplicationProtectedItemInner>> reprotectWithServiceResponseAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName, ReverseReplicationInputProperties properties) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (protectionContainerName == null) {
            throw new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null.");
        }
        if (replicatedProtectedItemName == null) {
            throw new IllegalArgumentException("Parameter replicatedProtectedItemName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(properties);
        ReverseReplicationInput rrInput = new ReverseReplicationInput();
        rrInput.withProperties(properties);
        Observable<Response<ResponseBody>> observable = service.reprotect(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, protectionContainerName, replicatedProtectedItemName, this.client.apiVersion(), this.client.acceptLanguage(), rrInput, this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<ReplicationProtectedItemInner>() { }.getType());
    }

    /**
     * Execute Reverse Replication\Reprotect.
     * Operation to reprotect or reverse replicate a failed over replication protected item.
     *
     * @param fabricName Unique fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ReplicationProtectedItemInner object if successful.
     */
    public ReplicationProtectedItemInner beginReprotect(String fabricName, String protectionContainerName, String replicatedProtectedItemName) {
        return beginReprotectWithServiceResponseAsync(fabricName, protectionContainerName, replicatedProtectedItemName).toBlocking().single().body();
    }

    /**
     * Execute Reverse Replication\Reprotect.
     * Operation to reprotect or reverse replicate a failed over replication protected item.
     *
     * @param fabricName Unique fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ReplicationProtectedItemInner> beginReprotectAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName, final ServiceCallback<ReplicationProtectedItemInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginReprotectWithServiceResponseAsync(fabricName, protectionContainerName, replicatedProtectedItemName), serviceCallback);
    }

    /**
     * Execute Reverse Replication\Reprotect.
     * Operation to reprotect or reverse replicate a failed over replication protected item.
     *
     * @param fabricName Unique fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ReplicationProtectedItemInner object
     */
    public Observable<ReplicationProtectedItemInner> beginReprotectAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName) {
        return beginReprotectWithServiceResponseAsync(fabricName, protectionContainerName, replicatedProtectedItemName).map(new Func1<ServiceResponse<ReplicationProtectedItemInner>, ReplicationProtectedItemInner>() {
            @Override
            public ReplicationProtectedItemInner call(ServiceResponse<ReplicationProtectedItemInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Execute Reverse Replication\Reprotect.
     * Operation to reprotect or reverse replicate a failed over replication protected item.
     *
     * @param fabricName Unique fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ReplicationProtectedItemInner object
     */
    public Observable<ServiceResponse<ReplicationProtectedItemInner>> beginReprotectWithServiceResponseAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (protectionContainerName == null) {
            throw new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null.");
        }
        if (replicatedProtectedItemName == null) {
            throw new IllegalArgumentException("Parameter replicatedProtectedItemName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final ReverseReplicationInputProperties properties = null;
        ReverseReplicationInput rrInput = new ReverseReplicationInput();
        rrInput.withProperties(null);
        return service.beginReprotect(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, protectionContainerName, replicatedProtectedItemName, this.client.apiVersion(), this.client.acceptLanguage(), rrInput, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ReplicationProtectedItemInner>>>() {
                @Override
                public Observable<ServiceResponse<ReplicationProtectedItemInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ReplicationProtectedItemInner> clientResponse = beginReprotectDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Execute Reverse Replication\Reprotect.
     * Operation to reprotect or reverse replicate a failed over replication protected item.
     *
     * @param fabricName Unique fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @param properties Reverse replication properties
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ReplicationProtectedItemInner object if successful.
     */
    public ReplicationProtectedItemInner beginReprotect(String fabricName, String protectionContainerName, String replicatedProtectedItemName, ReverseReplicationInputProperties properties) {
        return beginReprotectWithServiceResponseAsync(fabricName, protectionContainerName, replicatedProtectedItemName, properties).toBlocking().single().body();
    }

    /**
     * Execute Reverse Replication\Reprotect.
     * Operation to reprotect or reverse replicate a failed over replication protected item.
     *
     * @param fabricName Unique fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @param properties Reverse replication properties
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ReplicationProtectedItemInner> beginReprotectAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName, ReverseReplicationInputProperties properties, final ServiceCallback<ReplicationProtectedItemInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginReprotectWithServiceResponseAsync(fabricName, protectionContainerName, replicatedProtectedItemName, properties), serviceCallback);
    }

    /**
     * Execute Reverse Replication\Reprotect.
     * Operation to reprotect or reverse replicate a failed over replication protected item.
     *
     * @param fabricName Unique fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @param properties Reverse replication properties
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ReplicationProtectedItemInner object
     */
    public Observable<ReplicationProtectedItemInner> beginReprotectAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName, ReverseReplicationInputProperties properties) {
        return beginReprotectWithServiceResponseAsync(fabricName, protectionContainerName, replicatedProtectedItemName, properties).map(new Func1<ServiceResponse<ReplicationProtectedItemInner>, ReplicationProtectedItemInner>() {
            @Override
            public ReplicationProtectedItemInner call(ServiceResponse<ReplicationProtectedItemInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Execute Reverse Replication\Reprotect.
     * Operation to reprotect or reverse replicate a failed over replication protected item.
     *
     * @param fabricName Unique fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @param properties Reverse replication properties
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ReplicationProtectedItemInner object
     */
    public Observable<ServiceResponse<ReplicationProtectedItemInner>> beginReprotectWithServiceResponseAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName, ReverseReplicationInputProperties properties) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (protectionContainerName == null) {
            throw new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null.");
        }
        if (replicatedProtectedItemName == null) {
            throw new IllegalArgumentException("Parameter replicatedProtectedItemName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(properties);
        ReverseReplicationInput rrInput = new ReverseReplicationInput();
        rrInput.withProperties(properties);
        return service.beginReprotect(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, protectionContainerName, replicatedProtectedItemName, this.client.apiVersion(), this.client.acceptLanguage(), rrInput, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ReplicationProtectedItemInner>>>() {
                @Override
                public Observable<ServiceResponse<ReplicationProtectedItemInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ReplicationProtectedItemInner> clientResponse = beginReprotectDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ReplicationProtectedItemInner> beginReprotectDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ReplicationProtectedItemInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ReplicationProtectedItemInner>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Execute commit failover.
     * Operation to commit the failover of the replication protected item.
     *
     * @param fabricName Unique fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ReplicationProtectedItemInner object if successful.
     */
    public ReplicationProtectedItemInner failoverCommit(String fabricName, String protectionContainerName, String replicatedProtectedItemName) {
        return failoverCommitWithServiceResponseAsync(fabricName, protectionContainerName, replicatedProtectedItemName).toBlocking().last().body();
    }

    /**
     * Execute commit failover.
     * Operation to commit the failover of the replication protected item.
     *
     * @param fabricName Unique fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ReplicationProtectedItemInner> failoverCommitAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName, final ServiceCallback<ReplicationProtectedItemInner> serviceCallback) {
        return ServiceFuture.fromResponse(failoverCommitWithServiceResponseAsync(fabricName, protectionContainerName, replicatedProtectedItemName), serviceCallback);
    }

    /**
     * Execute commit failover.
     * Operation to commit the failover of the replication protected item.
     *
     * @param fabricName Unique fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ReplicationProtectedItemInner> failoverCommitAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName) {
        return failoverCommitWithServiceResponseAsync(fabricName, protectionContainerName, replicatedProtectedItemName).map(new Func1<ServiceResponse<ReplicationProtectedItemInner>, ReplicationProtectedItemInner>() {
            @Override
            public ReplicationProtectedItemInner call(ServiceResponse<ReplicationProtectedItemInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Execute commit failover.
     * Operation to commit the failover of the replication protected item.
     *
     * @param fabricName Unique fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<ReplicationProtectedItemInner>> failoverCommitWithServiceResponseAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (protectionContainerName == null) {
            throw new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null.");
        }
        if (replicatedProtectedItemName == null) {
            throw new IllegalArgumentException("Parameter replicatedProtectedItemName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Observable<Response<ResponseBody>> observable = service.failoverCommit(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, protectionContainerName, replicatedProtectedItemName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<ReplicationProtectedItemInner>() { }.getType());
    }

    /**
     * Execute commit failover.
     * Operation to commit the failover of the replication protected item.
     *
     * @param fabricName Unique fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ReplicationProtectedItemInner object if successful.
     */
    public ReplicationProtectedItemInner beginFailoverCommit(String fabricName, String protectionContainerName, String replicatedProtectedItemName) {
        return beginFailoverCommitWithServiceResponseAsync(fabricName, protectionContainerName, replicatedProtectedItemName).toBlocking().single().body();
    }

    /**
     * Execute commit failover.
     * Operation to commit the failover of the replication protected item.
     *
     * @param fabricName Unique fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ReplicationProtectedItemInner> beginFailoverCommitAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName, final ServiceCallback<ReplicationProtectedItemInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginFailoverCommitWithServiceResponseAsync(fabricName, protectionContainerName, replicatedProtectedItemName), serviceCallback);
    }

    /**
     * Execute commit failover.
     * Operation to commit the failover of the replication protected item.
     *
     * @param fabricName Unique fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ReplicationProtectedItemInner object
     */
    public Observable<ReplicationProtectedItemInner> beginFailoverCommitAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName) {
        return beginFailoverCommitWithServiceResponseAsync(fabricName, protectionContainerName, replicatedProtectedItemName).map(new Func1<ServiceResponse<ReplicationProtectedItemInner>, ReplicationProtectedItemInner>() {
            @Override
            public ReplicationProtectedItemInner call(ServiceResponse<ReplicationProtectedItemInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Execute commit failover.
     * Operation to commit the failover of the replication protected item.
     *
     * @param fabricName Unique fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ReplicationProtectedItemInner object
     */
    public Observable<ServiceResponse<ReplicationProtectedItemInner>> beginFailoverCommitWithServiceResponseAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (protectionContainerName == null) {
            throw new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null.");
        }
        if (replicatedProtectedItemName == null) {
            throw new IllegalArgumentException("Parameter replicatedProtectedItemName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.beginFailoverCommit(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, protectionContainerName, replicatedProtectedItemName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ReplicationProtectedItemInner>>>() {
                @Override
                public Observable<ServiceResponse<ReplicationProtectedItemInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ReplicationProtectedItemInner> clientResponse = beginFailoverCommitDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ReplicationProtectedItemInner> beginFailoverCommitDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ReplicationProtectedItemInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ReplicationProtectedItemInner>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Execute test failover cleanup.
     * Operation to clean up the test failover of a replication protected item.
     *
     * @param fabricName Unique fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @param properties Test failover cleanup input properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ReplicationProtectedItemInner object if successful.
     */
    public ReplicationProtectedItemInner testFailoverCleanup(String fabricName, String protectionContainerName, String replicatedProtectedItemName, TestFailoverCleanupInputProperties properties) {
        return testFailoverCleanupWithServiceResponseAsync(fabricName, protectionContainerName, replicatedProtectedItemName, properties).toBlocking().last().body();
    }

    /**
     * Execute test failover cleanup.
     * Operation to clean up the test failover of a replication protected item.
     *
     * @param fabricName Unique fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @param properties Test failover cleanup input properties.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ReplicationProtectedItemInner> testFailoverCleanupAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName, TestFailoverCleanupInputProperties properties, final ServiceCallback<ReplicationProtectedItemInner> serviceCallback) {
        return ServiceFuture.fromResponse(testFailoverCleanupWithServiceResponseAsync(fabricName, protectionContainerName, replicatedProtectedItemName, properties), serviceCallback);
    }

    /**
     * Execute test failover cleanup.
     * Operation to clean up the test failover of a replication protected item.
     *
     * @param fabricName Unique fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @param properties Test failover cleanup input properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ReplicationProtectedItemInner> testFailoverCleanupAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName, TestFailoverCleanupInputProperties properties) {
        return testFailoverCleanupWithServiceResponseAsync(fabricName, protectionContainerName, replicatedProtectedItemName, properties).map(new Func1<ServiceResponse<ReplicationProtectedItemInner>, ReplicationProtectedItemInner>() {
            @Override
            public ReplicationProtectedItemInner call(ServiceResponse<ReplicationProtectedItemInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Execute test failover cleanup.
     * Operation to clean up the test failover of a replication protected item.
     *
     * @param fabricName Unique fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @param properties Test failover cleanup input properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<ReplicationProtectedItemInner>> testFailoverCleanupWithServiceResponseAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName, TestFailoverCleanupInputProperties properties) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (protectionContainerName == null) {
            throw new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null.");
        }
        if (replicatedProtectedItemName == null) {
            throw new IllegalArgumentException("Parameter replicatedProtectedItemName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (properties == null) {
            throw new IllegalArgumentException("Parameter properties is required and cannot be null.");
        }
        Validator.validate(properties);
        TestFailoverCleanupInput cleanupInput = new TestFailoverCleanupInput();
        cleanupInput.withProperties(properties);
        Observable<Response<ResponseBody>> observable = service.testFailoverCleanup(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, protectionContainerName, replicatedProtectedItemName, this.client.apiVersion(), this.client.acceptLanguage(), cleanupInput, this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<ReplicationProtectedItemInner>() { }.getType());
    }

    /**
     * Execute test failover cleanup.
     * Operation to clean up the test failover of a replication protected item.
     *
     * @param fabricName Unique fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @param properties Test failover cleanup input properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ReplicationProtectedItemInner object if successful.
     */
    public ReplicationProtectedItemInner beginTestFailoverCleanup(String fabricName, String protectionContainerName, String replicatedProtectedItemName, TestFailoverCleanupInputProperties properties) {
        return beginTestFailoverCleanupWithServiceResponseAsync(fabricName, protectionContainerName, replicatedProtectedItemName, properties).toBlocking().single().body();
    }

    /**
     * Execute test failover cleanup.
     * Operation to clean up the test failover of a replication protected item.
     *
     * @param fabricName Unique fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @param properties Test failover cleanup input properties.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ReplicationProtectedItemInner> beginTestFailoverCleanupAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName, TestFailoverCleanupInputProperties properties, final ServiceCallback<ReplicationProtectedItemInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginTestFailoverCleanupWithServiceResponseAsync(fabricName, protectionContainerName, replicatedProtectedItemName, properties), serviceCallback);
    }

    /**
     * Execute test failover cleanup.
     * Operation to clean up the test failover of a replication protected item.
     *
     * @param fabricName Unique fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @param properties Test failover cleanup input properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ReplicationProtectedItemInner object
     */
    public Observable<ReplicationProtectedItemInner> beginTestFailoverCleanupAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName, TestFailoverCleanupInputProperties properties) {
        return beginTestFailoverCleanupWithServiceResponseAsync(fabricName, protectionContainerName, replicatedProtectedItemName, properties).map(new Func1<ServiceResponse<ReplicationProtectedItemInner>, ReplicationProtectedItemInner>() {
            @Override
            public ReplicationProtectedItemInner call(ServiceResponse<ReplicationProtectedItemInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Execute test failover cleanup.
     * Operation to clean up the test failover of a replication protected item.
     *
     * @param fabricName Unique fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @param properties Test failover cleanup input properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ReplicationProtectedItemInner object
     */
    public Observable<ServiceResponse<ReplicationProtectedItemInner>> beginTestFailoverCleanupWithServiceResponseAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName, TestFailoverCleanupInputProperties properties) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (protectionContainerName == null) {
            throw new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null.");
        }
        if (replicatedProtectedItemName == null) {
            throw new IllegalArgumentException("Parameter replicatedProtectedItemName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (properties == null) {
            throw new IllegalArgumentException("Parameter properties is required and cannot be null.");
        }
        Validator.validate(properties);
        TestFailoverCleanupInput cleanupInput = new TestFailoverCleanupInput();
        cleanupInput.withProperties(properties);
        return service.beginTestFailoverCleanup(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, protectionContainerName, replicatedProtectedItemName, this.client.apiVersion(), this.client.acceptLanguage(), cleanupInput, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ReplicationProtectedItemInner>>>() {
                @Override
                public Observable<ServiceResponse<ReplicationProtectedItemInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ReplicationProtectedItemInner> clientResponse = beginTestFailoverCleanupDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ReplicationProtectedItemInner> beginTestFailoverCleanupDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ReplicationProtectedItemInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ReplicationProtectedItemInner>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Execute test failover.
     * Operation to perform a test failover of the replication protected item.
     *
     * @param fabricName Unique fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ReplicationProtectedItemInner object if successful.
     */
    public ReplicationProtectedItemInner testFailover(String fabricName, String protectionContainerName, String replicatedProtectedItemName) {
        return testFailoverWithServiceResponseAsync(fabricName, protectionContainerName, replicatedProtectedItemName).toBlocking().last().body();
    }

    /**
     * Execute test failover.
     * Operation to perform a test failover of the replication protected item.
     *
     * @param fabricName Unique fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ReplicationProtectedItemInner> testFailoverAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName, final ServiceCallback<ReplicationProtectedItemInner> serviceCallback) {
        return ServiceFuture.fromResponse(testFailoverWithServiceResponseAsync(fabricName, protectionContainerName, replicatedProtectedItemName), serviceCallback);
    }

    /**
     * Execute test failover.
     * Operation to perform a test failover of the replication protected item.
     *
     * @param fabricName Unique fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ReplicationProtectedItemInner> testFailoverAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName) {
        return testFailoverWithServiceResponseAsync(fabricName, protectionContainerName, replicatedProtectedItemName).map(new Func1<ServiceResponse<ReplicationProtectedItemInner>, ReplicationProtectedItemInner>() {
            @Override
            public ReplicationProtectedItemInner call(ServiceResponse<ReplicationProtectedItemInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Execute test failover.
     * Operation to perform a test failover of the replication protected item.
     *
     * @param fabricName Unique fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<ReplicationProtectedItemInner>> testFailoverWithServiceResponseAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (protectionContainerName == null) {
            throw new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null.");
        }
        if (replicatedProtectedItemName == null) {
            throw new IllegalArgumentException("Parameter replicatedProtectedItemName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final TestFailoverInputProperties properties = null;
        TestFailoverInput failoverInput = new TestFailoverInput();
        failoverInput.withProperties(null);
        Observable<Response<ResponseBody>> observable = service.testFailover(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, protectionContainerName, replicatedProtectedItemName, this.client.apiVersion(), this.client.acceptLanguage(), failoverInput, this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<ReplicationProtectedItemInner>() { }.getType());
    }
    /**
     * Execute test failover.
     * Operation to perform a test failover of the replication protected item.
     *
     * @param fabricName Unique fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @param properties Planned failover input properties
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ReplicationProtectedItemInner object if successful.
     */
    public ReplicationProtectedItemInner testFailover(String fabricName, String protectionContainerName, String replicatedProtectedItemName, TestFailoverInputProperties properties) {
        return testFailoverWithServiceResponseAsync(fabricName, protectionContainerName, replicatedProtectedItemName, properties).toBlocking().last().body();
    }

    /**
     * Execute test failover.
     * Operation to perform a test failover of the replication protected item.
     *
     * @param fabricName Unique fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @param properties Planned failover input properties
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ReplicationProtectedItemInner> testFailoverAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName, TestFailoverInputProperties properties, final ServiceCallback<ReplicationProtectedItemInner> serviceCallback) {
        return ServiceFuture.fromResponse(testFailoverWithServiceResponseAsync(fabricName, protectionContainerName, replicatedProtectedItemName, properties), serviceCallback);
    }

    /**
     * Execute test failover.
     * Operation to perform a test failover of the replication protected item.
     *
     * @param fabricName Unique fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @param properties Planned failover input properties
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ReplicationProtectedItemInner> testFailoverAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName, TestFailoverInputProperties properties) {
        return testFailoverWithServiceResponseAsync(fabricName, protectionContainerName, replicatedProtectedItemName, properties).map(new Func1<ServiceResponse<ReplicationProtectedItemInner>, ReplicationProtectedItemInner>() {
            @Override
            public ReplicationProtectedItemInner call(ServiceResponse<ReplicationProtectedItemInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Execute test failover.
     * Operation to perform a test failover of the replication protected item.
     *
     * @param fabricName Unique fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @param properties Planned failover input properties
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<ReplicationProtectedItemInner>> testFailoverWithServiceResponseAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName, TestFailoverInputProperties properties) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (protectionContainerName == null) {
            throw new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null.");
        }
        if (replicatedProtectedItemName == null) {
            throw new IllegalArgumentException("Parameter replicatedProtectedItemName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(properties);
        TestFailoverInput failoverInput = new TestFailoverInput();
        failoverInput.withProperties(properties);
        Observable<Response<ResponseBody>> observable = service.testFailover(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, protectionContainerName, replicatedProtectedItemName, this.client.apiVersion(), this.client.acceptLanguage(), failoverInput, this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<ReplicationProtectedItemInner>() { }.getType());
    }

    /**
     * Execute test failover.
     * Operation to perform a test failover of the replication protected item.
     *
     * @param fabricName Unique fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ReplicationProtectedItemInner object if successful.
     */
    public ReplicationProtectedItemInner beginTestFailover(String fabricName, String protectionContainerName, String replicatedProtectedItemName) {
        return beginTestFailoverWithServiceResponseAsync(fabricName, protectionContainerName, replicatedProtectedItemName).toBlocking().single().body();
    }

    /**
     * Execute test failover.
     * Operation to perform a test failover of the replication protected item.
     *
     * @param fabricName Unique fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ReplicationProtectedItemInner> beginTestFailoverAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName, final ServiceCallback<ReplicationProtectedItemInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginTestFailoverWithServiceResponseAsync(fabricName, protectionContainerName, replicatedProtectedItemName), serviceCallback);
    }

    /**
     * Execute test failover.
     * Operation to perform a test failover of the replication protected item.
     *
     * @param fabricName Unique fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ReplicationProtectedItemInner object
     */
    public Observable<ReplicationProtectedItemInner> beginTestFailoverAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName) {
        return beginTestFailoverWithServiceResponseAsync(fabricName, protectionContainerName, replicatedProtectedItemName).map(new Func1<ServiceResponse<ReplicationProtectedItemInner>, ReplicationProtectedItemInner>() {
            @Override
            public ReplicationProtectedItemInner call(ServiceResponse<ReplicationProtectedItemInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Execute test failover.
     * Operation to perform a test failover of the replication protected item.
     *
     * @param fabricName Unique fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ReplicationProtectedItemInner object
     */
    public Observable<ServiceResponse<ReplicationProtectedItemInner>> beginTestFailoverWithServiceResponseAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (protectionContainerName == null) {
            throw new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null.");
        }
        if (replicatedProtectedItemName == null) {
            throw new IllegalArgumentException("Parameter replicatedProtectedItemName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final TestFailoverInputProperties properties = null;
        TestFailoverInput failoverInput = new TestFailoverInput();
        failoverInput.withProperties(null);
        return service.beginTestFailover(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, protectionContainerName, replicatedProtectedItemName, this.client.apiVersion(), this.client.acceptLanguage(), failoverInput, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ReplicationProtectedItemInner>>>() {
                @Override
                public Observable<ServiceResponse<ReplicationProtectedItemInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ReplicationProtectedItemInner> clientResponse = beginTestFailoverDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Execute test failover.
     * Operation to perform a test failover of the replication protected item.
     *
     * @param fabricName Unique fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @param properties Planned failover input properties
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ReplicationProtectedItemInner object if successful.
     */
    public ReplicationProtectedItemInner beginTestFailover(String fabricName, String protectionContainerName, String replicatedProtectedItemName, TestFailoverInputProperties properties) {
        return beginTestFailoverWithServiceResponseAsync(fabricName, protectionContainerName, replicatedProtectedItemName, properties).toBlocking().single().body();
    }

    /**
     * Execute test failover.
     * Operation to perform a test failover of the replication protected item.
     *
     * @param fabricName Unique fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @param properties Planned failover input properties
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ReplicationProtectedItemInner> beginTestFailoverAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName, TestFailoverInputProperties properties, final ServiceCallback<ReplicationProtectedItemInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginTestFailoverWithServiceResponseAsync(fabricName, protectionContainerName, replicatedProtectedItemName, properties), serviceCallback);
    }

    /**
     * Execute test failover.
     * Operation to perform a test failover of the replication protected item.
     *
     * @param fabricName Unique fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @param properties Planned failover input properties
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ReplicationProtectedItemInner object
     */
    public Observable<ReplicationProtectedItemInner> beginTestFailoverAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName, TestFailoverInputProperties properties) {
        return beginTestFailoverWithServiceResponseAsync(fabricName, protectionContainerName, replicatedProtectedItemName, properties).map(new Func1<ServiceResponse<ReplicationProtectedItemInner>, ReplicationProtectedItemInner>() {
            @Override
            public ReplicationProtectedItemInner call(ServiceResponse<ReplicationProtectedItemInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Execute test failover.
     * Operation to perform a test failover of the replication protected item.
     *
     * @param fabricName Unique fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @param properties Planned failover input properties
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ReplicationProtectedItemInner object
     */
    public Observable<ServiceResponse<ReplicationProtectedItemInner>> beginTestFailoverWithServiceResponseAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName, TestFailoverInputProperties properties) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (protectionContainerName == null) {
            throw new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null.");
        }
        if (replicatedProtectedItemName == null) {
            throw new IllegalArgumentException("Parameter replicatedProtectedItemName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(properties);
        TestFailoverInput failoverInput = new TestFailoverInput();
        failoverInput.withProperties(properties);
        return service.beginTestFailover(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, protectionContainerName, replicatedProtectedItemName, this.client.apiVersion(), this.client.acceptLanguage(), failoverInput, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ReplicationProtectedItemInner>>>() {
                @Override
                public Observable<ServiceResponse<ReplicationProtectedItemInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ReplicationProtectedItemInner> clientResponse = beginTestFailoverDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ReplicationProtectedItemInner> beginTestFailoverDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ReplicationProtectedItemInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ReplicationProtectedItemInner>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Execute unplanned failover.
     * Operation to initiate a failover of the replication protected item.
     *
     * @param fabricName Unique fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ReplicationProtectedItemInner object if successful.
     */
    public ReplicationProtectedItemInner unplannedFailover(String fabricName, String protectionContainerName, String replicatedProtectedItemName) {
        return unplannedFailoverWithServiceResponseAsync(fabricName, protectionContainerName, replicatedProtectedItemName).toBlocking().last().body();
    }

    /**
     * Execute unplanned failover.
     * Operation to initiate a failover of the replication protected item.
     *
     * @param fabricName Unique fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ReplicationProtectedItemInner> unplannedFailoverAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName, final ServiceCallback<ReplicationProtectedItemInner> serviceCallback) {
        return ServiceFuture.fromResponse(unplannedFailoverWithServiceResponseAsync(fabricName, protectionContainerName, replicatedProtectedItemName), serviceCallback);
    }

    /**
     * Execute unplanned failover.
     * Operation to initiate a failover of the replication protected item.
     *
     * @param fabricName Unique fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ReplicationProtectedItemInner> unplannedFailoverAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName) {
        return unplannedFailoverWithServiceResponseAsync(fabricName, protectionContainerName, replicatedProtectedItemName).map(new Func1<ServiceResponse<ReplicationProtectedItemInner>, ReplicationProtectedItemInner>() {
            @Override
            public ReplicationProtectedItemInner call(ServiceResponse<ReplicationProtectedItemInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Execute unplanned failover.
     * Operation to initiate a failover of the replication protected item.
     *
     * @param fabricName Unique fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<ReplicationProtectedItemInner>> unplannedFailoverWithServiceResponseAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (protectionContainerName == null) {
            throw new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null.");
        }
        if (replicatedProtectedItemName == null) {
            throw new IllegalArgumentException("Parameter replicatedProtectedItemName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final UnplannedFailoverInputProperties properties = null;
        UnplannedFailoverInput failoverInput = new UnplannedFailoverInput();
        failoverInput.withProperties(null);
        Observable<Response<ResponseBody>> observable = service.unplannedFailover(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, protectionContainerName, replicatedProtectedItemName, this.client.apiVersion(), this.client.acceptLanguage(), failoverInput, this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<ReplicationProtectedItemInner>() { }.getType());
    }
    /**
     * Execute unplanned failover.
     * Operation to initiate a failover of the replication protected item.
     *
     * @param fabricName Unique fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @param properties Planned failover input properties
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ReplicationProtectedItemInner object if successful.
     */
    public ReplicationProtectedItemInner unplannedFailover(String fabricName, String protectionContainerName, String replicatedProtectedItemName, UnplannedFailoverInputProperties properties) {
        return unplannedFailoverWithServiceResponseAsync(fabricName, protectionContainerName, replicatedProtectedItemName, properties).toBlocking().last().body();
    }

    /**
     * Execute unplanned failover.
     * Operation to initiate a failover of the replication protected item.
     *
     * @param fabricName Unique fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @param properties Planned failover input properties
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ReplicationProtectedItemInner> unplannedFailoverAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName, UnplannedFailoverInputProperties properties, final ServiceCallback<ReplicationProtectedItemInner> serviceCallback) {
        return ServiceFuture.fromResponse(unplannedFailoverWithServiceResponseAsync(fabricName, protectionContainerName, replicatedProtectedItemName, properties), serviceCallback);
    }

    /**
     * Execute unplanned failover.
     * Operation to initiate a failover of the replication protected item.
     *
     * @param fabricName Unique fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @param properties Planned failover input properties
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ReplicationProtectedItemInner> unplannedFailoverAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName, UnplannedFailoverInputProperties properties) {
        return unplannedFailoverWithServiceResponseAsync(fabricName, protectionContainerName, replicatedProtectedItemName, properties).map(new Func1<ServiceResponse<ReplicationProtectedItemInner>, ReplicationProtectedItemInner>() {
            @Override
            public ReplicationProtectedItemInner call(ServiceResponse<ReplicationProtectedItemInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Execute unplanned failover.
     * Operation to initiate a failover of the replication protected item.
     *
     * @param fabricName Unique fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @param properties Planned failover input properties
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<ReplicationProtectedItemInner>> unplannedFailoverWithServiceResponseAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName, UnplannedFailoverInputProperties properties) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (protectionContainerName == null) {
            throw new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null.");
        }
        if (replicatedProtectedItemName == null) {
            throw new IllegalArgumentException("Parameter replicatedProtectedItemName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(properties);
        UnplannedFailoverInput failoverInput = new UnplannedFailoverInput();
        failoverInput.withProperties(properties);
        Observable<Response<ResponseBody>> observable = service.unplannedFailover(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, protectionContainerName, replicatedProtectedItemName, this.client.apiVersion(), this.client.acceptLanguage(), failoverInput, this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<ReplicationProtectedItemInner>() { }.getType());
    }

    /**
     * Execute unplanned failover.
     * Operation to initiate a failover of the replication protected item.
     *
     * @param fabricName Unique fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ReplicationProtectedItemInner object if successful.
     */
    public ReplicationProtectedItemInner beginUnplannedFailover(String fabricName, String protectionContainerName, String replicatedProtectedItemName) {
        return beginUnplannedFailoverWithServiceResponseAsync(fabricName, protectionContainerName, replicatedProtectedItemName).toBlocking().single().body();
    }

    /**
     * Execute unplanned failover.
     * Operation to initiate a failover of the replication protected item.
     *
     * @param fabricName Unique fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ReplicationProtectedItemInner> beginUnplannedFailoverAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName, final ServiceCallback<ReplicationProtectedItemInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginUnplannedFailoverWithServiceResponseAsync(fabricName, protectionContainerName, replicatedProtectedItemName), serviceCallback);
    }

    /**
     * Execute unplanned failover.
     * Operation to initiate a failover of the replication protected item.
     *
     * @param fabricName Unique fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ReplicationProtectedItemInner object
     */
    public Observable<ReplicationProtectedItemInner> beginUnplannedFailoverAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName) {
        return beginUnplannedFailoverWithServiceResponseAsync(fabricName, protectionContainerName, replicatedProtectedItemName).map(new Func1<ServiceResponse<ReplicationProtectedItemInner>, ReplicationProtectedItemInner>() {
            @Override
            public ReplicationProtectedItemInner call(ServiceResponse<ReplicationProtectedItemInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Execute unplanned failover.
     * Operation to initiate a failover of the replication protected item.
     *
     * @param fabricName Unique fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ReplicationProtectedItemInner object
     */
    public Observable<ServiceResponse<ReplicationProtectedItemInner>> beginUnplannedFailoverWithServiceResponseAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (protectionContainerName == null) {
            throw new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null.");
        }
        if (replicatedProtectedItemName == null) {
            throw new IllegalArgumentException("Parameter replicatedProtectedItemName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final UnplannedFailoverInputProperties properties = null;
        UnplannedFailoverInput failoverInput = new UnplannedFailoverInput();
        failoverInput.withProperties(null);
        return service.beginUnplannedFailover(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, protectionContainerName, replicatedProtectedItemName, this.client.apiVersion(), this.client.acceptLanguage(), failoverInput, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ReplicationProtectedItemInner>>>() {
                @Override
                public Observable<ServiceResponse<ReplicationProtectedItemInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ReplicationProtectedItemInner> clientResponse = beginUnplannedFailoverDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Execute unplanned failover.
     * Operation to initiate a failover of the replication protected item.
     *
     * @param fabricName Unique fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @param properties Planned failover input properties
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ReplicationProtectedItemInner object if successful.
     */
    public ReplicationProtectedItemInner beginUnplannedFailover(String fabricName, String protectionContainerName, String replicatedProtectedItemName, UnplannedFailoverInputProperties properties) {
        return beginUnplannedFailoverWithServiceResponseAsync(fabricName, protectionContainerName, replicatedProtectedItemName, properties).toBlocking().single().body();
    }

    /**
     * Execute unplanned failover.
     * Operation to initiate a failover of the replication protected item.
     *
     * @param fabricName Unique fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @param properties Planned failover input properties
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ReplicationProtectedItemInner> beginUnplannedFailoverAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName, UnplannedFailoverInputProperties properties, final ServiceCallback<ReplicationProtectedItemInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginUnplannedFailoverWithServiceResponseAsync(fabricName, protectionContainerName, replicatedProtectedItemName, properties), serviceCallback);
    }

    /**
     * Execute unplanned failover.
     * Operation to initiate a failover of the replication protected item.
     *
     * @param fabricName Unique fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @param properties Planned failover input properties
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ReplicationProtectedItemInner object
     */
    public Observable<ReplicationProtectedItemInner> beginUnplannedFailoverAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName, UnplannedFailoverInputProperties properties) {
        return beginUnplannedFailoverWithServiceResponseAsync(fabricName, protectionContainerName, replicatedProtectedItemName, properties).map(new Func1<ServiceResponse<ReplicationProtectedItemInner>, ReplicationProtectedItemInner>() {
            @Override
            public ReplicationProtectedItemInner call(ServiceResponse<ReplicationProtectedItemInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Execute unplanned failover.
     * Operation to initiate a failover of the replication protected item.
     *
     * @param fabricName Unique fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @param properties Planned failover input properties
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ReplicationProtectedItemInner object
     */
    public Observable<ServiceResponse<ReplicationProtectedItemInner>> beginUnplannedFailoverWithServiceResponseAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName, UnplannedFailoverInputProperties properties) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (protectionContainerName == null) {
            throw new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null.");
        }
        if (replicatedProtectedItemName == null) {
            throw new IllegalArgumentException("Parameter replicatedProtectedItemName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(properties);
        UnplannedFailoverInput failoverInput = new UnplannedFailoverInput();
        failoverInput.withProperties(properties);
        return service.beginUnplannedFailover(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, protectionContainerName, replicatedProtectedItemName, this.client.apiVersion(), this.client.acceptLanguage(), failoverInput, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ReplicationProtectedItemInner>>>() {
                @Override
                public Observable<ServiceResponse<ReplicationProtectedItemInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ReplicationProtectedItemInner> clientResponse = beginUnplannedFailoverDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ReplicationProtectedItemInner> beginUnplannedFailoverDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ReplicationProtectedItemInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ReplicationProtectedItemInner>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Execute planned failover.
     * Operation to initiate a planned failover of the replication protected item.
     *
     * @param fabricName Unique fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ReplicationProtectedItemInner object if successful.
     */
    public ReplicationProtectedItemInner plannedFailover(String fabricName, String protectionContainerName, String replicatedProtectedItemName) {
        return plannedFailoverWithServiceResponseAsync(fabricName, protectionContainerName, replicatedProtectedItemName).toBlocking().last().body();
    }

    /**
     * Execute planned failover.
     * Operation to initiate a planned failover of the replication protected item.
     *
     * @param fabricName Unique fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ReplicationProtectedItemInner> plannedFailoverAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName, final ServiceCallback<ReplicationProtectedItemInner> serviceCallback) {
        return ServiceFuture.fromResponse(plannedFailoverWithServiceResponseAsync(fabricName, protectionContainerName, replicatedProtectedItemName), serviceCallback);
    }

    /**
     * Execute planned failover.
     * Operation to initiate a planned failover of the replication protected item.
     *
     * @param fabricName Unique fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ReplicationProtectedItemInner> plannedFailoverAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName) {
        return plannedFailoverWithServiceResponseAsync(fabricName, protectionContainerName, replicatedProtectedItemName).map(new Func1<ServiceResponse<ReplicationProtectedItemInner>, ReplicationProtectedItemInner>() {
            @Override
            public ReplicationProtectedItemInner call(ServiceResponse<ReplicationProtectedItemInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Execute planned failover.
     * Operation to initiate a planned failover of the replication protected item.
     *
     * @param fabricName Unique fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<ReplicationProtectedItemInner>> plannedFailoverWithServiceResponseAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (protectionContainerName == null) {
            throw new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null.");
        }
        if (replicatedProtectedItemName == null) {
            throw new IllegalArgumentException("Parameter replicatedProtectedItemName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final PlannedFailoverInputProperties properties = null;
        PlannedFailoverInput failoverInput = new PlannedFailoverInput();
        failoverInput.withProperties(null);
        Observable<Response<ResponseBody>> observable = service.plannedFailover(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, protectionContainerName, replicatedProtectedItemName, this.client.apiVersion(), this.client.acceptLanguage(), failoverInput, this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<ReplicationProtectedItemInner>() { }.getType());
    }
    /**
     * Execute planned failover.
     * Operation to initiate a planned failover of the replication protected item.
     *
     * @param fabricName Unique fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @param properties Planned failover input properties
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ReplicationProtectedItemInner object if successful.
     */
    public ReplicationProtectedItemInner plannedFailover(String fabricName, String protectionContainerName, String replicatedProtectedItemName, PlannedFailoverInputProperties properties) {
        return plannedFailoverWithServiceResponseAsync(fabricName, protectionContainerName, replicatedProtectedItemName, properties).toBlocking().last().body();
    }

    /**
     * Execute planned failover.
     * Operation to initiate a planned failover of the replication protected item.
     *
     * @param fabricName Unique fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @param properties Planned failover input properties
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ReplicationProtectedItemInner> plannedFailoverAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName, PlannedFailoverInputProperties properties, final ServiceCallback<ReplicationProtectedItemInner> serviceCallback) {
        return ServiceFuture.fromResponse(plannedFailoverWithServiceResponseAsync(fabricName, protectionContainerName, replicatedProtectedItemName, properties), serviceCallback);
    }

    /**
     * Execute planned failover.
     * Operation to initiate a planned failover of the replication protected item.
     *
     * @param fabricName Unique fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @param properties Planned failover input properties
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ReplicationProtectedItemInner> plannedFailoverAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName, PlannedFailoverInputProperties properties) {
        return plannedFailoverWithServiceResponseAsync(fabricName, protectionContainerName, replicatedProtectedItemName, properties).map(new Func1<ServiceResponse<ReplicationProtectedItemInner>, ReplicationProtectedItemInner>() {
            @Override
            public ReplicationProtectedItemInner call(ServiceResponse<ReplicationProtectedItemInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Execute planned failover.
     * Operation to initiate a planned failover of the replication protected item.
     *
     * @param fabricName Unique fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @param properties Planned failover input properties
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<ReplicationProtectedItemInner>> plannedFailoverWithServiceResponseAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName, PlannedFailoverInputProperties properties) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (protectionContainerName == null) {
            throw new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null.");
        }
        if (replicatedProtectedItemName == null) {
            throw new IllegalArgumentException("Parameter replicatedProtectedItemName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(properties);
        PlannedFailoverInput failoverInput = new PlannedFailoverInput();
        failoverInput.withProperties(properties);
        Observable<Response<ResponseBody>> observable = service.plannedFailover(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, protectionContainerName, replicatedProtectedItemName, this.client.apiVersion(), this.client.acceptLanguage(), failoverInput, this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<ReplicationProtectedItemInner>() { }.getType());
    }

    /**
     * Execute planned failover.
     * Operation to initiate a planned failover of the replication protected item.
     *
     * @param fabricName Unique fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ReplicationProtectedItemInner object if successful.
     */
    public ReplicationProtectedItemInner beginPlannedFailover(String fabricName, String protectionContainerName, String replicatedProtectedItemName) {
        return beginPlannedFailoverWithServiceResponseAsync(fabricName, protectionContainerName, replicatedProtectedItemName).toBlocking().single().body();
    }

    /**
     * Execute planned failover.
     * Operation to initiate a planned failover of the replication protected item.
     *
     * @param fabricName Unique fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ReplicationProtectedItemInner> beginPlannedFailoverAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName, final ServiceCallback<ReplicationProtectedItemInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginPlannedFailoverWithServiceResponseAsync(fabricName, protectionContainerName, replicatedProtectedItemName), serviceCallback);
    }

    /**
     * Execute planned failover.
     * Operation to initiate a planned failover of the replication protected item.
     *
     * @param fabricName Unique fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ReplicationProtectedItemInner object
     */
    public Observable<ReplicationProtectedItemInner> beginPlannedFailoverAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName) {
        return beginPlannedFailoverWithServiceResponseAsync(fabricName, protectionContainerName, replicatedProtectedItemName).map(new Func1<ServiceResponse<ReplicationProtectedItemInner>, ReplicationProtectedItemInner>() {
            @Override
            public ReplicationProtectedItemInner call(ServiceResponse<ReplicationProtectedItemInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Execute planned failover.
     * Operation to initiate a planned failover of the replication protected item.
     *
     * @param fabricName Unique fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ReplicationProtectedItemInner object
     */
    public Observable<ServiceResponse<ReplicationProtectedItemInner>> beginPlannedFailoverWithServiceResponseAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (protectionContainerName == null) {
            throw new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null.");
        }
        if (replicatedProtectedItemName == null) {
            throw new IllegalArgumentException("Parameter replicatedProtectedItemName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final PlannedFailoverInputProperties properties = null;
        PlannedFailoverInput failoverInput = new PlannedFailoverInput();
        failoverInput.withProperties(null);
        return service.beginPlannedFailover(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, protectionContainerName, replicatedProtectedItemName, this.client.apiVersion(), this.client.acceptLanguage(), failoverInput, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ReplicationProtectedItemInner>>>() {
                @Override
                public Observable<ServiceResponse<ReplicationProtectedItemInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ReplicationProtectedItemInner> clientResponse = beginPlannedFailoverDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Execute planned failover.
     * Operation to initiate a planned failover of the replication protected item.
     *
     * @param fabricName Unique fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @param properties Planned failover input properties
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ReplicationProtectedItemInner object if successful.
     */
    public ReplicationProtectedItemInner beginPlannedFailover(String fabricName, String protectionContainerName, String replicatedProtectedItemName, PlannedFailoverInputProperties properties) {
        return beginPlannedFailoverWithServiceResponseAsync(fabricName, protectionContainerName, replicatedProtectedItemName, properties).toBlocking().single().body();
    }

    /**
     * Execute planned failover.
     * Operation to initiate a planned failover of the replication protected item.
     *
     * @param fabricName Unique fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @param properties Planned failover input properties
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ReplicationProtectedItemInner> beginPlannedFailoverAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName, PlannedFailoverInputProperties properties, final ServiceCallback<ReplicationProtectedItemInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginPlannedFailoverWithServiceResponseAsync(fabricName, protectionContainerName, replicatedProtectedItemName, properties), serviceCallback);
    }

    /**
     * Execute planned failover.
     * Operation to initiate a planned failover of the replication protected item.
     *
     * @param fabricName Unique fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @param properties Planned failover input properties
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ReplicationProtectedItemInner object
     */
    public Observable<ReplicationProtectedItemInner> beginPlannedFailoverAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName, PlannedFailoverInputProperties properties) {
        return beginPlannedFailoverWithServiceResponseAsync(fabricName, protectionContainerName, replicatedProtectedItemName, properties).map(new Func1<ServiceResponse<ReplicationProtectedItemInner>, ReplicationProtectedItemInner>() {
            @Override
            public ReplicationProtectedItemInner call(ServiceResponse<ReplicationProtectedItemInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Execute planned failover.
     * Operation to initiate a planned failover of the replication protected item.
     *
     * @param fabricName Unique fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @param properties Planned failover input properties
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ReplicationProtectedItemInner object
     */
    public Observable<ServiceResponse<ReplicationProtectedItemInner>> beginPlannedFailoverWithServiceResponseAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName, PlannedFailoverInputProperties properties) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (protectionContainerName == null) {
            throw new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null.");
        }
        if (replicatedProtectedItemName == null) {
            throw new IllegalArgumentException("Parameter replicatedProtectedItemName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(properties);
        PlannedFailoverInput failoverInput = new PlannedFailoverInput();
        failoverInput.withProperties(properties);
        return service.beginPlannedFailover(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, protectionContainerName, replicatedProtectedItemName, this.client.apiVersion(), this.client.acceptLanguage(), failoverInput, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ReplicationProtectedItemInner>>>() {
                @Override
                public Observable<ServiceResponse<ReplicationProtectedItemInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ReplicationProtectedItemInner> clientResponse = beginPlannedFailoverDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ReplicationProtectedItemInner> beginPlannedFailoverDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ReplicationProtectedItemInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ReplicationProtectedItemInner>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Disables protection.
     * The operation to disable replication on a replication protected item. This will also remove the item.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String fabricName, String protectionContainerName, String replicatedProtectedItemName) {
        deleteWithServiceResponseAsync(fabricName, protectionContainerName, replicatedProtectedItemName).toBlocking().last().body();
    }

    /**
     * Disables protection.
     * The operation to disable replication on a replication protected item. This will also remove the item.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(fabricName, protectionContainerName, replicatedProtectedItemName), serviceCallback);
    }

    /**
     * Disables protection.
     * The operation to disable replication on a replication protected item. This will also remove the item.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Void> deleteAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName) {
        return deleteWithServiceResponseAsync(fabricName, protectionContainerName, replicatedProtectedItemName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Disables protection.
     * The operation to disable replication on a replication protected item. This will also remove the item.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (protectionContainerName == null) {
            throw new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null.");
        }
        if (replicatedProtectedItemName == null) {
            throw new IllegalArgumentException("Parameter replicatedProtectedItemName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final DisableProtectionInputProperties properties = null;
        DisableProtectionInput disableProtectionInput = new DisableProtectionInput();
        disableProtectionInput.withProperties(null);
        Observable<Response<ResponseBody>> observable = service.delete(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, protectionContainerName, replicatedProtectedItemName, this.client.apiVersion(), this.client.acceptLanguage(), disableProtectionInput, this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<Void>() { }.getType());
    }
    /**
     * Disables protection.
     * The operation to disable replication on a replication protected item. This will also remove the item.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @param properties Disable protection input properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String fabricName, String protectionContainerName, String replicatedProtectedItemName, DisableProtectionInputProperties properties) {
        deleteWithServiceResponseAsync(fabricName, protectionContainerName, replicatedProtectedItemName, properties).toBlocking().last().body();
    }

    /**
     * Disables protection.
     * The operation to disable replication on a replication protected item. This will also remove the item.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @param properties Disable protection input properties.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName, DisableProtectionInputProperties properties, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(fabricName, protectionContainerName, replicatedProtectedItemName, properties), serviceCallback);
    }

    /**
     * Disables protection.
     * The operation to disable replication on a replication protected item. This will also remove the item.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @param properties Disable protection input properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Void> deleteAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName, DisableProtectionInputProperties properties) {
        return deleteWithServiceResponseAsync(fabricName, protectionContainerName, replicatedProtectedItemName, properties).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Disables protection.
     * The operation to disable replication on a replication protected item. This will also remove the item.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @param properties Disable protection input properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName, DisableProtectionInputProperties properties) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (protectionContainerName == null) {
            throw new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null.");
        }
        if (replicatedProtectedItemName == null) {
            throw new IllegalArgumentException("Parameter replicatedProtectedItemName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(properties);
        DisableProtectionInput disableProtectionInput = new DisableProtectionInput();
        disableProtectionInput.withProperties(properties);
        Observable<Response<ResponseBody>> observable = service.delete(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, protectionContainerName, replicatedProtectedItemName, this.client.apiVersion(), this.client.acceptLanguage(), disableProtectionInput, this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<Void>() { }.getType());
    }

    /**
     * Disables protection.
     * The operation to disable replication on a replication protected item. This will also remove the item.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void beginDelete(String fabricName, String protectionContainerName, String replicatedProtectedItemName) {
        beginDeleteWithServiceResponseAsync(fabricName, protectionContainerName, replicatedProtectedItemName).toBlocking().single().body();
    }

    /**
     * Disables protection.
     * The operation to disable replication on a replication protected item. This will also remove the item.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> beginDeleteAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(beginDeleteWithServiceResponseAsync(fabricName, protectionContainerName, replicatedProtectedItemName), serviceCallback);
    }

    /**
     * Disables protection.
     * The operation to disable replication on a replication protected item. This will also remove the item.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> beginDeleteAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName) {
        return beginDeleteWithServiceResponseAsync(fabricName, protectionContainerName, replicatedProtectedItemName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Disables protection.
     * The operation to disable replication on a replication protected item. This will also remove the item.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> beginDeleteWithServiceResponseAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (protectionContainerName == null) {
            throw new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null.");
        }
        if (replicatedProtectedItemName == null) {
            throw new IllegalArgumentException("Parameter replicatedProtectedItemName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final DisableProtectionInputProperties properties = null;
        DisableProtectionInput disableProtectionInput = new DisableProtectionInput();
        disableProtectionInput.withProperties(null);
        return service.beginDelete(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, protectionContainerName, replicatedProtectedItemName, this.client.apiVersion(), this.client.acceptLanguage(), disableProtectionInput, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = beginDeleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Disables protection.
     * The operation to disable replication on a replication protected item. This will also remove the item.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @param properties Disable protection input properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void beginDelete(String fabricName, String protectionContainerName, String replicatedProtectedItemName, DisableProtectionInputProperties properties) {
        beginDeleteWithServiceResponseAsync(fabricName, protectionContainerName, replicatedProtectedItemName, properties).toBlocking().single().body();
    }

    /**
     * Disables protection.
     * The operation to disable replication on a replication protected item. This will also remove the item.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @param properties Disable protection input properties.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> beginDeleteAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName, DisableProtectionInputProperties properties, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(beginDeleteWithServiceResponseAsync(fabricName, protectionContainerName, replicatedProtectedItemName, properties), serviceCallback);
    }

    /**
     * Disables protection.
     * The operation to disable replication on a replication protected item. This will also remove the item.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @param properties Disable protection input properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> beginDeleteAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName, DisableProtectionInputProperties properties) {
        return beginDeleteWithServiceResponseAsync(fabricName, protectionContainerName, replicatedProtectedItemName, properties).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Disables protection.
     * The operation to disable replication on a replication protected item. This will also remove the item.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @param properties Disable protection input properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> beginDeleteWithServiceResponseAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName, DisableProtectionInputProperties properties) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (protectionContainerName == null) {
            throw new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null.");
        }
        if (replicatedProtectedItemName == null) {
            throw new IllegalArgumentException("Parameter replicatedProtectedItemName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(properties);
        DisableProtectionInput disableProtectionInput = new DisableProtectionInput();
        disableProtectionInput.withProperties(properties);
        return service.beginDelete(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, protectionContainerName, replicatedProtectedItemName, this.client.apiVersion(), this.client.acceptLanguage(), disableProtectionInput, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = beginDeleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> beginDeleteDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CloudException>newInstance(this.client.serializerAdapter())
                .register(202, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets the details of a Replication protected item.
     * Gets the details of an ASR replication protected item.
     *
     * @param fabricName Fabric unique name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ReplicationProtectedItemInner object if successful.
     */
    public ReplicationProtectedItemInner get(String fabricName, String protectionContainerName, String replicatedProtectedItemName) {
        return getWithServiceResponseAsync(fabricName, protectionContainerName, replicatedProtectedItemName).toBlocking().single().body();
    }

    /**
     * Gets the details of a Replication protected item.
     * Gets the details of an ASR replication protected item.
     *
     * @param fabricName Fabric unique name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ReplicationProtectedItemInner> getAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName, final ServiceCallback<ReplicationProtectedItemInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(fabricName, protectionContainerName, replicatedProtectedItemName), serviceCallback);
    }

    /**
     * Gets the details of a Replication protected item.
     * Gets the details of an ASR replication protected item.
     *
     * @param fabricName Fabric unique name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ReplicationProtectedItemInner object
     */
    public Observable<ReplicationProtectedItemInner> getAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName) {
        return getWithServiceResponseAsync(fabricName, protectionContainerName, replicatedProtectedItemName).map(new Func1<ServiceResponse<ReplicationProtectedItemInner>, ReplicationProtectedItemInner>() {
            @Override
            public ReplicationProtectedItemInner call(ServiceResponse<ReplicationProtectedItemInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets the details of a Replication protected item.
     * Gets the details of an ASR replication protected item.
     *
     * @param fabricName Fabric unique name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ReplicationProtectedItemInner object
     */
    public Observable<ServiceResponse<ReplicationProtectedItemInner>> getWithServiceResponseAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (protectionContainerName == null) {
            throw new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null.");
        }
        if (replicatedProtectedItemName == null) {
            throw new IllegalArgumentException("Parameter replicatedProtectedItemName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.get(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, protectionContainerName, replicatedProtectedItemName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ReplicationProtectedItemInner>>>() {
                @Override
                public Observable<ServiceResponse<ReplicationProtectedItemInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ReplicationProtectedItemInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ReplicationProtectedItemInner> getDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ReplicationProtectedItemInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ReplicationProtectedItemInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Enables protection.
     * The operation to create an ASR replication protected item (Enable replication).
     *
     * @param fabricName Name of the fabric.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName A name for the replication protected item.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ReplicationProtectedItemInner object if successful.
     */
    public ReplicationProtectedItemInner create(String fabricName, String protectionContainerName, String replicatedProtectedItemName) {
        return createWithServiceResponseAsync(fabricName, protectionContainerName, replicatedProtectedItemName).toBlocking().last().body();
    }

    /**
     * Enables protection.
     * The operation to create an ASR replication protected item (Enable replication).
     *
     * @param fabricName Name of the fabric.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName A name for the replication protected item.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ReplicationProtectedItemInner> createAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName, final ServiceCallback<ReplicationProtectedItemInner> serviceCallback) {
        return ServiceFuture.fromResponse(createWithServiceResponseAsync(fabricName, protectionContainerName, replicatedProtectedItemName), serviceCallback);
    }

    /**
     * Enables protection.
     * The operation to create an ASR replication protected item (Enable replication).
     *
     * @param fabricName Name of the fabric.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName A name for the replication protected item.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ReplicationProtectedItemInner> createAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName) {
        return createWithServiceResponseAsync(fabricName, protectionContainerName, replicatedProtectedItemName).map(new Func1<ServiceResponse<ReplicationProtectedItemInner>, ReplicationProtectedItemInner>() {
            @Override
            public ReplicationProtectedItemInner call(ServiceResponse<ReplicationProtectedItemInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Enables protection.
     * The operation to create an ASR replication protected item (Enable replication).
     *
     * @param fabricName Name of the fabric.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName A name for the replication protected item.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<ReplicationProtectedItemInner>> createWithServiceResponseAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (protectionContainerName == null) {
            throw new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null.");
        }
        if (replicatedProtectedItemName == null) {
            throw new IllegalArgumentException("Parameter replicatedProtectedItemName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final EnableProtectionInputProperties properties = null;
        EnableProtectionInput input = new EnableProtectionInput();
        input.withProperties(null);
        Observable<Response<ResponseBody>> observable = service.create(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, protectionContainerName, replicatedProtectedItemName, this.client.apiVersion(), this.client.acceptLanguage(), input, this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<ReplicationProtectedItemInner>() { }.getType());
    }
    /**
     * Enables protection.
     * The operation to create an ASR replication protected item (Enable replication).
     *
     * @param fabricName Name of the fabric.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName A name for the replication protected item.
     * @param properties Enable protection input properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ReplicationProtectedItemInner object if successful.
     */
    public ReplicationProtectedItemInner create(String fabricName, String protectionContainerName, String replicatedProtectedItemName, EnableProtectionInputProperties properties) {
        return createWithServiceResponseAsync(fabricName, protectionContainerName, replicatedProtectedItemName, properties).toBlocking().last().body();
    }

    /**
     * Enables protection.
     * The operation to create an ASR replication protected item (Enable replication).
     *
     * @param fabricName Name of the fabric.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName A name for the replication protected item.
     * @param properties Enable protection input properties.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ReplicationProtectedItemInner> createAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName, EnableProtectionInputProperties properties, final ServiceCallback<ReplicationProtectedItemInner> serviceCallback) {
        return ServiceFuture.fromResponse(createWithServiceResponseAsync(fabricName, protectionContainerName, replicatedProtectedItemName, properties), serviceCallback);
    }

    /**
     * Enables protection.
     * The operation to create an ASR replication protected item (Enable replication).
     *
     * @param fabricName Name of the fabric.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName A name for the replication protected item.
     * @param properties Enable protection input properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ReplicationProtectedItemInner> createAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName, EnableProtectionInputProperties properties) {
        return createWithServiceResponseAsync(fabricName, protectionContainerName, replicatedProtectedItemName, properties).map(new Func1<ServiceResponse<ReplicationProtectedItemInner>, ReplicationProtectedItemInner>() {
            @Override
            public ReplicationProtectedItemInner call(ServiceResponse<ReplicationProtectedItemInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Enables protection.
     * The operation to create an ASR replication protected item (Enable replication).
     *
     * @param fabricName Name of the fabric.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName A name for the replication protected item.
     * @param properties Enable protection input properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<ReplicationProtectedItemInner>> createWithServiceResponseAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName, EnableProtectionInputProperties properties) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (protectionContainerName == null) {
            throw new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null.");
        }
        if (replicatedProtectedItemName == null) {
            throw new IllegalArgumentException("Parameter replicatedProtectedItemName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(properties);
        EnableProtectionInput input = new EnableProtectionInput();
        input.withProperties(properties);
        Observable<Response<ResponseBody>> observable = service.create(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, protectionContainerName, replicatedProtectedItemName, this.client.apiVersion(), this.client.acceptLanguage(), input, this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<ReplicationProtectedItemInner>() { }.getType());
    }

    /**
     * Enables protection.
     * The operation to create an ASR replication protected item (Enable replication).
     *
     * @param fabricName Name of the fabric.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName A name for the replication protected item.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ReplicationProtectedItemInner object if successful.
     */
    public ReplicationProtectedItemInner beginCreate(String fabricName, String protectionContainerName, String replicatedProtectedItemName) {
        return beginCreateWithServiceResponseAsync(fabricName, protectionContainerName, replicatedProtectedItemName).toBlocking().single().body();
    }

    /**
     * Enables protection.
     * The operation to create an ASR replication protected item (Enable replication).
     *
     * @param fabricName Name of the fabric.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName A name for the replication protected item.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ReplicationProtectedItemInner> beginCreateAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName, final ServiceCallback<ReplicationProtectedItemInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginCreateWithServiceResponseAsync(fabricName, protectionContainerName, replicatedProtectedItemName), serviceCallback);
    }

    /**
     * Enables protection.
     * The operation to create an ASR replication protected item (Enable replication).
     *
     * @param fabricName Name of the fabric.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName A name for the replication protected item.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ReplicationProtectedItemInner object
     */
    public Observable<ReplicationProtectedItemInner> beginCreateAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName) {
        return beginCreateWithServiceResponseAsync(fabricName, protectionContainerName, replicatedProtectedItemName).map(new Func1<ServiceResponse<ReplicationProtectedItemInner>, ReplicationProtectedItemInner>() {
            @Override
            public ReplicationProtectedItemInner call(ServiceResponse<ReplicationProtectedItemInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Enables protection.
     * The operation to create an ASR replication protected item (Enable replication).
     *
     * @param fabricName Name of the fabric.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName A name for the replication protected item.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ReplicationProtectedItemInner object
     */
    public Observable<ServiceResponse<ReplicationProtectedItemInner>> beginCreateWithServiceResponseAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (protectionContainerName == null) {
            throw new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null.");
        }
        if (replicatedProtectedItemName == null) {
            throw new IllegalArgumentException("Parameter replicatedProtectedItemName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final EnableProtectionInputProperties properties = null;
        EnableProtectionInput input = new EnableProtectionInput();
        input.withProperties(null);
        return service.beginCreate(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, protectionContainerName, replicatedProtectedItemName, this.client.apiVersion(), this.client.acceptLanguage(), input, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ReplicationProtectedItemInner>>>() {
                @Override
                public Observable<ServiceResponse<ReplicationProtectedItemInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ReplicationProtectedItemInner> clientResponse = beginCreateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Enables protection.
     * The operation to create an ASR replication protected item (Enable replication).
     *
     * @param fabricName Name of the fabric.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName A name for the replication protected item.
     * @param properties Enable protection input properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ReplicationProtectedItemInner object if successful.
     */
    public ReplicationProtectedItemInner beginCreate(String fabricName, String protectionContainerName, String replicatedProtectedItemName, EnableProtectionInputProperties properties) {
        return beginCreateWithServiceResponseAsync(fabricName, protectionContainerName, replicatedProtectedItemName, properties).toBlocking().single().body();
    }

    /**
     * Enables protection.
     * The operation to create an ASR replication protected item (Enable replication).
     *
     * @param fabricName Name of the fabric.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName A name for the replication protected item.
     * @param properties Enable protection input properties.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ReplicationProtectedItemInner> beginCreateAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName, EnableProtectionInputProperties properties, final ServiceCallback<ReplicationProtectedItemInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginCreateWithServiceResponseAsync(fabricName, protectionContainerName, replicatedProtectedItemName, properties), serviceCallback);
    }

    /**
     * Enables protection.
     * The operation to create an ASR replication protected item (Enable replication).
     *
     * @param fabricName Name of the fabric.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName A name for the replication protected item.
     * @param properties Enable protection input properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ReplicationProtectedItemInner object
     */
    public Observable<ReplicationProtectedItemInner> beginCreateAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName, EnableProtectionInputProperties properties) {
        return beginCreateWithServiceResponseAsync(fabricName, protectionContainerName, replicatedProtectedItemName, properties).map(new Func1<ServiceResponse<ReplicationProtectedItemInner>, ReplicationProtectedItemInner>() {
            @Override
            public ReplicationProtectedItemInner call(ServiceResponse<ReplicationProtectedItemInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Enables protection.
     * The operation to create an ASR replication protected item (Enable replication).
     *
     * @param fabricName Name of the fabric.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName A name for the replication protected item.
     * @param properties Enable protection input properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ReplicationProtectedItemInner object
     */
    public Observable<ServiceResponse<ReplicationProtectedItemInner>> beginCreateWithServiceResponseAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName, EnableProtectionInputProperties properties) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (protectionContainerName == null) {
            throw new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null.");
        }
        if (replicatedProtectedItemName == null) {
            throw new IllegalArgumentException("Parameter replicatedProtectedItemName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(properties);
        EnableProtectionInput input = new EnableProtectionInput();
        input.withProperties(properties);
        return service.beginCreate(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, protectionContainerName, replicatedProtectedItemName, this.client.apiVersion(), this.client.acceptLanguage(), input, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ReplicationProtectedItemInner>>>() {
                @Override
                public Observable<ServiceResponse<ReplicationProtectedItemInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ReplicationProtectedItemInner> clientResponse = beginCreateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ReplicationProtectedItemInner> beginCreateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ReplicationProtectedItemInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ReplicationProtectedItemInner>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Purges protection.
     * The operation to delete or purge a replication protected item. This operation will force delete the replication protected item. Use the remove operation on replication protected item to perform a clean disable replication for the item.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void purge(String fabricName, String protectionContainerName, String replicatedProtectedItemName) {
        purgeWithServiceResponseAsync(fabricName, protectionContainerName, replicatedProtectedItemName).toBlocking().last().body();
    }

    /**
     * Purges protection.
     * The operation to delete or purge a replication protected item. This operation will force delete the replication protected item. Use the remove operation on replication protected item to perform a clean disable replication for the item.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> purgeAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(purgeWithServiceResponseAsync(fabricName, protectionContainerName, replicatedProtectedItemName), serviceCallback);
    }

    /**
     * Purges protection.
     * The operation to delete or purge a replication protected item. This operation will force delete the replication protected item. Use the remove operation on replication protected item to perform a clean disable replication for the item.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Void> purgeAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName) {
        return purgeWithServiceResponseAsync(fabricName, protectionContainerName, replicatedProtectedItemName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Purges protection.
     * The operation to delete or purge a replication protected item. This operation will force delete the replication protected item. Use the remove operation on replication protected item to perform a clean disable replication for the item.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<Void>> purgeWithServiceResponseAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (protectionContainerName == null) {
            throw new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null.");
        }
        if (replicatedProtectedItemName == null) {
            throw new IllegalArgumentException("Parameter replicatedProtectedItemName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Observable<Response<ResponseBody>> observable = service.purge(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, protectionContainerName, replicatedProtectedItemName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<Void>() { }.getType());
    }

    /**
     * Purges protection.
     * The operation to delete or purge a replication protected item. This operation will force delete the replication protected item. Use the remove operation on replication protected item to perform a clean disable replication for the item.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void beginPurge(String fabricName, String protectionContainerName, String replicatedProtectedItemName) {
        beginPurgeWithServiceResponseAsync(fabricName, protectionContainerName, replicatedProtectedItemName).toBlocking().single().body();
    }

    /**
     * Purges protection.
     * The operation to delete or purge a replication protected item. This operation will force delete the replication protected item. Use the remove operation on replication protected item to perform a clean disable replication for the item.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> beginPurgeAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(beginPurgeWithServiceResponseAsync(fabricName, protectionContainerName, replicatedProtectedItemName), serviceCallback);
    }

    /**
     * Purges protection.
     * The operation to delete or purge a replication protected item. This operation will force delete the replication protected item. Use the remove operation on replication protected item to perform a clean disable replication for the item.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> beginPurgeAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName) {
        return beginPurgeWithServiceResponseAsync(fabricName, protectionContainerName, replicatedProtectedItemName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Purges protection.
     * The operation to delete or purge a replication protected item. This operation will force delete the replication protected item. Use the remove operation on replication protected item to perform a clean disable replication for the item.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> beginPurgeWithServiceResponseAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (protectionContainerName == null) {
            throw new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null.");
        }
        if (replicatedProtectedItemName == null) {
            throw new IllegalArgumentException("Parameter replicatedProtectedItemName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.beginPurge(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, protectionContainerName, replicatedProtectedItemName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = beginPurgeDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> beginPurgeDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CloudException>newInstance(this.client.serializerAdapter())
                .register(202, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Updates protection.
     * The operation to update the recovery settings of an ASR replication protected item.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ReplicationProtectedItemInner object if successful.
     */
    public ReplicationProtectedItemInner update(String fabricName, String protectionContainerName, String replicatedProtectedItemName) {
        return updateWithServiceResponseAsync(fabricName, protectionContainerName, replicatedProtectedItemName).toBlocking().last().body();
    }

    /**
     * Updates protection.
     * The operation to update the recovery settings of an ASR replication protected item.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ReplicationProtectedItemInner> updateAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName, final ServiceCallback<ReplicationProtectedItemInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(fabricName, protectionContainerName, replicatedProtectedItemName), serviceCallback);
    }

    /**
     * Updates protection.
     * The operation to update the recovery settings of an ASR replication protected item.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ReplicationProtectedItemInner> updateAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName) {
        return updateWithServiceResponseAsync(fabricName, protectionContainerName, replicatedProtectedItemName).map(new Func1<ServiceResponse<ReplicationProtectedItemInner>, ReplicationProtectedItemInner>() {
            @Override
            public ReplicationProtectedItemInner call(ServiceResponse<ReplicationProtectedItemInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Updates protection.
     * The operation to update the recovery settings of an ASR replication protected item.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<ReplicationProtectedItemInner>> updateWithServiceResponseAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (protectionContainerName == null) {
            throw new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null.");
        }
        if (replicatedProtectedItemName == null) {
            throw new IllegalArgumentException("Parameter replicatedProtectedItemName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final UpdateReplicationProtectedItemInputProperties properties = null;
        UpdateReplicationProtectedItemInput updateProtectionInput = new UpdateReplicationProtectedItemInput();
        updateProtectionInput.withProperties(null);
        Observable<Response<ResponseBody>> observable = service.update(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, protectionContainerName, replicatedProtectedItemName, this.client.apiVersion(), this.client.acceptLanguage(), updateProtectionInput, this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<ReplicationProtectedItemInner>() { }.getType());
    }
    /**
     * Updates protection.
     * The operation to update the recovery settings of an ASR replication protected item.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @param properties Update replication protected item properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ReplicationProtectedItemInner object if successful.
     */
    public ReplicationProtectedItemInner update(String fabricName, String protectionContainerName, String replicatedProtectedItemName, UpdateReplicationProtectedItemInputProperties properties) {
        return updateWithServiceResponseAsync(fabricName, protectionContainerName, replicatedProtectedItemName, properties).toBlocking().last().body();
    }

    /**
     * Updates protection.
     * The operation to update the recovery settings of an ASR replication protected item.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @param properties Update replication protected item properties.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ReplicationProtectedItemInner> updateAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName, UpdateReplicationProtectedItemInputProperties properties, final ServiceCallback<ReplicationProtectedItemInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(fabricName, protectionContainerName, replicatedProtectedItemName, properties), serviceCallback);
    }

    /**
     * Updates protection.
     * The operation to update the recovery settings of an ASR replication protected item.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @param properties Update replication protected item properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ReplicationProtectedItemInner> updateAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName, UpdateReplicationProtectedItemInputProperties properties) {
        return updateWithServiceResponseAsync(fabricName, protectionContainerName, replicatedProtectedItemName, properties).map(new Func1<ServiceResponse<ReplicationProtectedItemInner>, ReplicationProtectedItemInner>() {
            @Override
            public ReplicationProtectedItemInner call(ServiceResponse<ReplicationProtectedItemInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Updates protection.
     * The operation to update the recovery settings of an ASR replication protected item.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @param properties Update replication protected item properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<ReplicationProtectedItemInner>> updateWithServiceResponseAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName, UpdateReplicationProtectedItemInputProperties properties) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (protectionContainerName == null) {
            throw new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null.");
        }
        if (replicatedProtectedItemName == null) {
            throw new IllegalArgumentException("Parameter replicatedProtectedItemName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(properties);
        UpdateReplicationProtectedItemInput updateProtectionInput = new UpdateReplicationProtectedItemInput();
        updateProtectionInput.withProperties(properties);
        Observable<Response<ResponseBody>> observable = service.update(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, protectionContainerName, replicatedProtectedItemName, this.client.apiVersion(), this.client.acceptLanguage(), updateProtectionInput, this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<ReplicationProtectedItemInner>() { }.getType());
    }

    /**
     * Updates protection.
     * The operation to update the recovery settings of an ASR replication protected item.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ReplicationProtectedItemInner object if successful.
     */
    public ReplicationProtectedItemInner beginUpdate(String fabricName, String protectionContainerName, String replicatedProtectedItemName) {
        return beginUpdateWithServiceResponseAsync(fabricName, protectionContainerName, replicatedProtectedItemName).toBlocking().single().body();
    }

    /**
     * Updates protection.
     * The operation to update the recovery settings of an ASR replication protected item.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ReplicationProtectedItemInner> beginUpdateAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName, final ServiceCallback<ReplicationProtectedItemInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginUpdateWithServiceResponseAsync(fabricName, protectionContainerName, replicatedProtectedItemName), serviceCallback);
    }

    /**
     * Updates protection.
     * The operation to update the recovery settings of an ASR replication protected item.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ReplicationProtectedItemInner object
     */
    public Observable<ReplicationProtectedItemInner> beginUpdateAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName) {
        return beginUpdateWithServiceResponseAsync(fabricName, protectionContainerName, replicatedProtectedItemName).map(new Func1<ServiceResponse<ReplicationProtectedItemInner>, ReplicationProtectedItemInner>() {
            @Override
            public ReplicationProtectedItemInner call(ServiceResponse<ReplicationProtectedItemInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Updates protection.
     * The operation to update the recovery settings of an ASR replication protected item.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ReplicationProtectedItemInner object
     */
    public Observable<ServiceResponse<ReplicationProtectedItemInner>> beginUpdateWithServiceResponseAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (protectionContainerName == null) {
            throw new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null.");
        }
        if (replicatedProtectedItemName == null) {
            throw new IllegalArgumentException("Parameter replicatedProtectedItemName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final UpdateReplicationProtectedItemInputProperties properties = null;
        UpdateReplicationProtectedItemInput updateProtectionInput = new UpdateReplicationProtectedItemInput();
        updateProtectionInput.withProperties(null);
        return service.beginUpdate(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, protectionContainerName, replicatedProtectedItemName, this.client.apiVersion(), this.client.acceptLanguage(), updateProtectionInput, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ReplicationProtectedItemInner>>>() {
                @Override
                public Observable<ServiceResponse<ReplicationProtectedItemInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ReplicationProtectedItemInner> clientResponse = beginUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Updates protection.
     * The operation to update the recovery settings of an ASR replication protected item.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @param properties Update replication protected item properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ReplicationProtectedItemInner object if successful.
     */
    public ReplicationProtectedItemInner beginUpdate(String fabricName, String protectionContainerName, String replicatedProtectedItemName, UpdateReplicationProtectedItemInputProperties properties) {
        return beginUpdateWithServiceResponseAsync(fabricName, protectionContainerName, replicatedProtectedItemName, properties).toBlocking().single().body();
    }

    /**
     * Updates protection.
     * The operation to update the recovery settings of an ASR replication protected item.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @param properties Update replication protected item properties.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ReplicationProtectedItemInner> beginUpdateAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName, UpdateReplicationProtectedItemInputProperties properties, final ServiceCallback<ReplicationProtectedItemInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginUpdateWithServiceResponseAsync(fabricName, protectionContainerName, replicatedProtectedItemName, properties), serviceCallback);
    }

    /**
     * Updates protection.
     * The operation to update the recovery settings of an ASR replication protected item.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @param properties Update replication protected item properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ReplicationProtectedItemInner object
     */
    public Observable<ReplicationProtectedItemInner> beginUpdateAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName, UpdateReplicationProtectedItemInputProperties properties) {
        return beginUpdateWithServiceResponseAsync(fabricName, protectionContainerName, replicatedProtectedItemName, properties).map(new Func1<ServiceResponse<ReplicationProtectedItemInner>, ReplicationProtectedItemInner>() {
            @Override
            public ReplicationProtectedItemInner call(ServiceResponse<ReplicationProtectedItemInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Updates protection.
     * The operation to update the recovery settings of an ASR replication protected item.
     *
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @param properties Update replication protected item properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ReplicationProtectedItemInner object
     */
    public Observable<ServiceResponse<ReplicationProtectedItemInner>> beginUpdateWithServiceResponseAsync(String fabricName, String protectionContainerName, String replicatedProtectedItemName, UpdateReplicationProtectedItemInputProperties properties) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (protectionContainerName == null) {
            throw new IllegalArgumentException("Parameter protectionContainerName is required and cannot be null.");
        }
        if (replicatedProtectedItemName == null) {
            throw new IllegalArgumentException("Parameter replicatedProtectedItemName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(properties);
        UpdateReplicationProtectedItemInput updateProtectionInput = new UpdateReplicationProtectedItemInput();
        updateProtectionInput.withProperties(properties);
        return service.beginUpdate(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, protectionContainerName, replicatedProtectedItemName, this.client.apiVersion(), this.client.acceptLanguage(), updateProtectionInput, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ReplicationProtectedItemInner>>>() {
                @Override
                public Observable<ServiceResponse<ReplicationProtectedItemInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ReplicationProtectedItemInner> clientResponse = beginUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ReplicationProtectedItemInner> beginUpdateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ReplicationProtectedItemInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ReplicationProtectedItemInner>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets the list of Replication protected items.
     * Gets the list of ASR replication protected items in the protection container.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ReplicationProtectedItemInner&gt; object if successful.
     */
    public PagedList<ReplicationProtectedItemInner> listByReplicationProtectionContainersNext(final String nextPageLink) {
        ServiceResponse<Page<ReplicationProtectedItemInner>> response = listByReplicationProtectionContainersNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<ReplicationProtectedItemInner>(response.body()) {
            @Override
            public Page<ReplicationProtectedItemInner> nextPage(String nextPageLink) {
                return listByReplicationProtectionContainersNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets the list of Replication protected items.
     * Gets the list of ASR replication protected items in the protection container.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ReplicationProtectedItemInner>> listByReplicationProtectionContainersNextAsync(final String nextPageLink, final ServiceFuture<List<ReplicationProtectedItemInner>> serviceFuture, final ListOperationCallback<ReplicationProtectedItemInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByReplicationProtectionContainersNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<ReplicationProtectedItemInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ReplicationProtectedItemInner>>> call(String nextPageLink) {
                    return listByReplicationProtectionContainersNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets the list of Replication protected items.
     * Gets the list of ASR replication protected items in the protection container.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ReplicationProtectedItemInner&gt; object
     */
    public Observable<Page<ReplicationProtectedItemInner>> listByReplicationProtectionContainersNextAsync(final String nextPageLink) {
        return listByReplicationProtectionContainersNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<ReplicationProtectedItemInner>>, Page<ReplicationProtectedItemInner>>() {
                @Override
                public Page<ReplicationProtectedItemInner> call(ServiceResponse<Page<ReplicationProtectedItemInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets the list of Replication protected items.
     * Gets the list of ASR replication protected items in the protection container.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ReplicationProtectedItemInner&gt; object
     */
    public Observable<ServiceResponse<Page<ReplicationProtectedItemInner>>> listByReplicationProtectionContainersNextWithServiceResponseAsync(final String nextPageLink) {
        return listByReplicationProtectionContainersNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<ReplicationProtectedItemInner>>, Observable<ServiceResponse<Page<ReplicationProtectedItemInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ReplicationProtectedItemInner>>> call(ServiceResponse<Page<ReplicationProtectedItemInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByReplicationProtectionContainersNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets the list of Replication protected items.
     * Gets the list of ASR replication protected items in the protection container.
     *
    ServiceResponse<PageImpl<ReplicationProtectedItemInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ReplicationProtectedItemInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ReplicationProtectedItemInner>>> listByReplicationProtectionContainersNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByReplicationProtectionContainersNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ReplicationProtectedItemInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ReplicationProtectedItemInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ReplicationProtectedItemInner>> result = listByReplicationProtectionContainersNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ReplicationProtectedItemInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<ReplicationProtectedItemInner>> listByReplicationProtectionContainersNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<ReplicationProtectedItemInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<ReplicationProtectedItemInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets the list of replication protected items.
     * Gets the list of ASR replication protected items in the vault.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ReplicationProtectedItemInner&gt; object if successful.
     */
    public PagedList<ReplicationProtectedItemInner> listNext(final String nextPageLink) {
        ServiceResponse<Page<ReplicationProtectedItemInner>> response = listNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<ReplicationProtectedItemInner>(response.body()) {
            @Override
            public Page<ReplicationProtectedItemInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets the list of replication protected items.
     * Gets the list of ASR replication protected items in the vault.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ReplicationProtectedItemInner>> listNextAsync(final String nextPageLink, final ServiceFuture<List<ReplicationProtectedItemInner>> serviceFuture, final ListOperationCallback<ReplicationProtectedItemInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<ReplicationProtectedItemInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ReplicationProtectedItemInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets the list of replication protected items.
     * Gets the list of ASR replication protected items in the vault.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ReplicationProtectedItemInner&gt; object
     */
    public Observable<Page<ReplicationProtectedItemInner>> listNextAsync(final String nextPageLink) {
        return listNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<ReplicationProtectedItemInner>>, Page<ReplicationProtectedItemInner>>() {
                @Override
                public Page<ReplicationProtectedItemInner> call(ServiceResponse<Page<ReplicationProtectedItemInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets the list of replication protected items.
     * Gets the list of ASR replication protected items in the vault.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ReplicationProtectedItemInner&gt; object
     */
    public Observable<ServiceResponse<Page<ReplicationProtectedItemInner>>> listNextWithServiceResponseAsync(final String nextPageLink) {
        return listNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<ReplicationProtectedItemInner>>, Observable<ServiceResponse<Page<ReplicationProtectedItemInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ReplicationProtectedItemInner>>> call(ServiceResponse<Page<ReplicationProtectedItemInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets the list of replication protected items.
     * Gets the list of ASR replication protected items in the vault.
     *
    ServiceResponse<PageImpl<ReplicationProtectedItemInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ReplicationProtectedItemInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ReplicationProtectedItemInner>>> listNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ReplicationProtectedItemInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ReplicationProtectedItemInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ReplicationProtectedItemInner>> result = listNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ReplicationProtectedItemInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<ReplicationProtectedItemInner>> listNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<ReplicationProtectedItemInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<ReplicationProtectedItemInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
