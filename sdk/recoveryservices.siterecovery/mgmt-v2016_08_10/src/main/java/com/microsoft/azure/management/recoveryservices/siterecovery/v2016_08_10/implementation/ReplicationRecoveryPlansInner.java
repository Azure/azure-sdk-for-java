/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.CloudException;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.CreateRecoveryPlanInput;
import com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.CreateRecoveryPlanInputProperties;
import com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.RecoveryPlanPlannedFailoverInput;
import com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.RecoveryPlanPlannedFailoverInputProperties;
import com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.RecoveryPlanTestFailoverCleanupInput;
import com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.RecoveryPlanTestFailoverCleanupInputProperties;
import com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.RecoveryPlanTestFailoverInput;
import com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.RecoveryPlanTestFailoverInputProperties;
import com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.RecoveryPlanUnplannedFailoverInput;
import com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.RecoveryPlanUnplannedFailoverInputProperties;
import com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.UpdateRecoveryPlanInput;
import com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.UpdateRecoveryPlanInputProperties;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.PATCH;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in ReplicationRecoveryPlans.
 */
public class ReplicationRecoveryPlansInner {
    /** The Retrofit service to perform REST calls. */
    private ReplicationRecoveryPlansService service;
    /** The service client containing this operation class. */
    private SiteRecoveryManagementClientImpl client;

    /**
     * Initializes an instance of ReplicationRecoveryPlansInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public ReplicationRecoveryPlansInner(Retrofit retrofit, SiteRecoveryManagementClientImpl client) {
        this.service = retrofit.create(ReplicationRecoveryPlansService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for ReplicationRecoveryPlans to be
     * used by Retrofit to perform actually REST calls.
     */
    interface ReplicationRecoveryPlansService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationRecoveryPlans reprotect" })
        @POST("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationRecoveryPlans/{recoveryPlanName}/reProtect")
        Observable<Response<ResponseBody>> reprotect(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("recoveryPlanName") String recoveryPlanName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationRecoveryPlans beginReprotect" })
        @POST("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationRecoveryPlans/{recoveryPlanName}/reProtect")
        Observable<Response<ResponseBody>> beginReprotect(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("recoveryPlanName") String recoveryPlanName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationRecoveryPlans failoverCommit" })
        @POST("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationRecoveryPlans/{recoveryPlanName}/failoverCommit")
        Observable<Response<ResponseBody>> failoverCommit(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("recoveryPlanName") String recoveryPlanName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationRecoveryPlans beginFailoverCommit" })
        @POST("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationRecoveryPlans/{recoveryPlanName}/failoverCommit")
        Observable<Response<ResponseBody>> beginFailoverCommit(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("recoveryPlanName") String recoveryPlanName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationRecoveryPlans testFailoverCleanup" })
        @POST("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationRecoveryPlans/{recoveryPlanName}/testFailoverCleanup")
        Observable<Response<ResponseBody>> testFailoverCleanup(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("recoveryPlanName") String recoveryPlanName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body RecoveryPlanTestFailoverCleanupInput input, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationRecoveryPlans beginTestFailoverCleanup" })
        @POST("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationRecoveryPlans/{recoveryPlanName}/testFailoverCleanup")
        Observable<Response<ResponseBody>> beginTestFailoverCleanup(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("recoveryPlanName") String recoveryPlanName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body RecoveryPlanTestFailoverCleanupInput input, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationRecoveryPlans testFailover" })
        @POST("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationRecoveryPlans/{recoveryPlanName}/testFailover")
        Observable<Response<ResponseBody>> testFailover(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("recoveryPlanName") String recoveryPlanName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body RecoveryPlanTestFailoverInput input, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationRecoveryPlans beginTestFailover" })
        @POST("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationRecoveryPlans/{recoveryPlanName}/testFailover")
        Observable<Response<ResponseBody>> beginTestFailover(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("recoveryPlanName") String recoveryPlanName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body RecoveryPlanTestFailoverInput input, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationRecoveryPlans unplannedFailover" })
        @POST("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationRecoveryPlans/{recoveryPlanName}/unplannedFailover")
        Observable<Response<ResponseBody>> unplannedFailover(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("recoveryPlanName") String recoveryPlanName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body RecoveryPlanUnplannedFailoverInput input, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationRecoveryPlans beginUnplannedFailover" })
        @POST("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationRecoveryPlans/{recoveryPlanName}/unplannedFailover")
        Observable<Response<ResponseBody>> beginUnplannedFailover(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("recoveryPlanName") String recoveryPlanName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body RecoveryPlanUnplannedFailoverInput input, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationRecoveryPlans plannedFailover" })
        @POST("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationRecoveryPlans/{recoveryPlanName}/plannedFailover")
        Observable<Response<ResponseBody>> plannedFailover(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("recoveryPlanName") String recoveryPlanName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body RecoveryPlanPlannedFailoverInput input, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationRecoveryPlans beginPlannedFailover" })
        @POST("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationRecoveryPlans/{recoveryPlanName}/plannedFailover")
        Observable<Response<ResponseBody>> beginPlannedFailover(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("recoveryPlanName") String recoveryPlanName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body RecoveryPlanPlannedFailoverInput input, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationRecoveryPlans get" })
        @GET("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationRecoveryPlans/{recoveryPlanName}")
        Observable<Response<ResponseBody>> get(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("recoveryPlanName") String recoveryPlanName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationRecoveryPlans create" })
        @PUT("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationRecoveryPlans/{recoveryPlanName}")
        Observable<Response<ResponseBody>> create(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("recoveryPlanName") String recoveryPlanName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body CreateRecoveryPlanInput input, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationRecoveryPlans beginCreate" })
        @PUT("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationRecoveryPlans/{recoveryPlanName}")
        Observable<Response<ResponseBody>> beginCreate(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("recoveryPlanName") String recoveryPlanName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body CreateRecoveryPlanInput input, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationRecoveryPlans delete" })
        @HTTP(path = "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationRecoveryPlans/{recoveryPlanName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("recoveryPlanName") String recoveryPlanName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationRecoveryPlans beginDelete" })
        @HTTP(path = "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationRecoveryPlans/{recoveryPlanName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> beginDelete(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("recoveryPlanName") String recoveryPlanName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationRecoveryPlans update" })
        @PATCH("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationRecoveryPlans/{recoveryPlanName}")
        Observable<Response<ResponseBody>> update(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("recoveryPlanName") String recoveryPlanName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body UpdateRecoveryPlanInput input, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationRecoveryPlans beginUpdate" })
        @PATCH("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationRecoveryPlans/{recoveryPlanName}")
        Observable<Response<ResponseBody>> beginUpdate(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("recoveryPlanName") String recoveryPlanName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body UpdateRecoveryPlanInput input, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationRecoveryPlans list" })
        @GET("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationRecoveryPlans")
        Observable<Response<ResponseBody>> list(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationRecoveryPlans listNext" })
        @GET
        Observable<Response<ResponseBody>> listNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Execute reprotect of the recovery plan.
     * The operation to reprotect(reverse replicate) a recovery plan.
     *
     * @param recoveryPlanName Recovery plan name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the RecoveryPlanInner object if successful.
     */
    public RecoveryPlanInner reprotect(String recoveryPlanName) {
        return reprotectWithServiceResponseAsync(recoveryPlanName).toBlocking().last().body();
    }

    /**
     * Execute reprotect of the recovery plan.
     * The operation to reprotect(reverse replicate) a recovery plan.
     *
     * @param recoveryPlanName Recovery plan name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<RecoveryPlanInner> reprotectAsync(String recoveryPlanName, final ServiceCallback<RecoveryPlanInner> serviceCallback) {
        return ServiceFuture.fromResponse(reprotectWithServiceResponseAsync(recoveryPlanName), serviceCallback);
    }

    /**
     * Execute reprotect of the recovery plan.
     * The operation to reprotect(reverse replicate) a recovery plan.
     *
     * @param recoveryPlanName Recovery plan name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<RecoveryPlanInner> reprotectAsync(String recoveryPlanName) {
        return reprotectWithServiceResponseAsync(recoveryPlanName).map(new Func1<ServiceResponse<RecoveryPlanInner>, RecoveryPlanInner>() {
            @Override
            public RecoveryPlanInner call(ServiceResponse<RecoveryPlanInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Execute reprotect of the recovery plan.
     * The operation to reprotect(reverse replicate) a recovery plan.
     *
     * @param recoveryPlanName Recovery plan name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<RecoveryPlanInner>> reprotectWithServiceResponseAsync(String recoveryPlanName) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (recoveryPlanName == null) {
            throw new IllegalArgumentException("Parameter recoveryPlanName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Observable<Response<ResponseBody>> observable = service.reprotect(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), recoveryPlanName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<RecoveryPlanInner>() { }.getType());
    }

    /**
     * Execute reprotect of the recovery plan.
     * The operation to reprotect(reverse replicate) a recovery plan.
     *
     * @param recoveryPlanName Recovery plan name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the RecoveryPlanInner object if successful.
     */
    public RecoveryPlanInner beginReprotect(String recoveryPlanName) {
        return beginReprotectWithServiceResponseAsync(recoveryPlanName).toBlocking().single().body();
    }

    /**
     * Execute reprotect of the recovery plan.
     * The operation to reprotect(reverse replicate) a recovery plan.
     *
     * @param recoveryPlanName Recovery plan name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<RecoveryPlanInner> beginReprotectAsync(String recoveryPlanName, final ServiceCallback<RecoveryPlanInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginReprotectWithServiceResponseAsync(recoveryPlanName), serviceCallback);
    }

    /**
     * Execute reprotect of the recovery plan.
     * The operation to reprotect(reverse replicate) a recovery plan.
     *
     * @param recoveryPlanName Recovery plan name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RecoveryPlanInner object
     */
    public Observable<RecoveryPlanInner> beginReprotectAsync(String recoveryPlanName) {
        return beginReprotectWithServiceResponseAsync(recoveryPlanName).map(new Func1<ServiceResponse<RecoveryPlanInner>, RecoveryPlanInner>() {
            @Override
            public RecoveryPlanInner call(ServiceResponse<RecoveryPlanInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Execute reprotect of the recovery plan.
     * The operation to reprotect(reverse replicate) a recovery plan.
     *
     * @param recoveryPlanName Recovery plan name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RecoveryPlanInner object
     */
    public Observable<ServiceResponse<RecoveryPlanInner>> beginReprotectWithServiceResponseAsync(String recoveryPlanName) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (recoveryPlanName == null) {
            throw new IllegalArgumentException("Parameter recoveryPlanName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.beginReprotect(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), recoveryPlanName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<RecoveryPlanInner>>>() {
                @Override
                public Observable<ServiceResponse<RecoveryPlanInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<RecoveryPlanInner> clientResponse = beginReprotectDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<RecoveryPlanInner> beginReprotectDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<RecoveryPlanInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<RecoveryPlanInner>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Execute commit failover of the recovery plan.
     * The operation to commit the fail over of a recovery plan.
     *
     * @param recoveryPlanName Recovery plan name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the RecoveryPlanInner object if successful.
     */
    public RecoveryPlanInner failoverCommit(String recoveryPlanName) {
        return failoverCommitWithServiceResponseAsync(recoveryPlanName).toBlocking().last().body();
    }

    /**
     * Execute commit failover of the recovery plan.
     * The operation to commit the fail over of a recovery plan.
     *
     * @param recoveryPlanName Recovery plan name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<RecoveryPlanInner> failoverCommitAsync(String recoveryPlanName, final ServiceCallback<RecoveryPlanInner> serviceCallback) {
        return ServiceFuture.fromResponse(failoverCommitWithServiceResponseAsync(recoveryPlanName), serviceCallback);
    }

    /**
     * Execute commit failover of the recovery plan.
     * The operation to commit the fail over of a recovery plan.
     *
     * @param recoveryPlanName Recovery plan name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<RecoveryPlanInner> failoverCommitAsync(String recoveryPlanName) {
        return failoverCommitWithServiceResponseAsync(recoveryPlanName).map(new Func1<ServiceResponse<RecoveryPlanInner>, RecoveryPlanInner>() {
            @Override
            public RecoveryPlanInner call(ServiceResponse<RecoveryPlanInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Execute commit failover of the recovery plan.
     * The operation to commit the fail over of a recovery plan.
     *
     * @param recoveryPlanName Recovery plan name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<RecoveryPlanInner>> failoverCommitWithServiceResponseAsync(String recoveryPlanName) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (recoveryPlanName == null) {
            throw new IllegalArgumentException("Parameter recoveryPlanName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Observable<Response<ResponseBody>> observable = service.failoverCommit(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), recoveryPlanName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<RecoveryPlanInner>() { }.getType());
    }

    /**
     * Execute commit failover of the recovery plan.
     * The operation to commit the fail over of a recovery plan.
     *
     * @param recoveryPlanName Recovery plan name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the RecoveryPlanInner object if successful.
     */
    public RecoveryPlanInner beginFailoverCommit(String recoveryPlanName) {
        return beginFailoverCommitWithServiceResponseAsync(recoveryPlanName).toBlocking().single().body();
    }

    /**
     * Execute commit failover of the recovery plan.
     * The operation to commit the fail over of a recovery plan.
     *
     * @param recoveryPlanName Recovery plan name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<RecoveryPlanInner> beginFailoverCommitAsync(String recoveryPlanName, final ServiceCallback<RecoveryPlanInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginFailoverCommitWithServiceResponseAsync(recoveryPlanName), serviceCallback);
    }

    /**
     * Execute commit failover of the recovery plan.
     * The operation to commit the fail over of a recovery plan.
     *
     * @param recoveryPlanName Recovery plan name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RecoveryPlanInner object
     */
    public Observable<RecoveryPlanInner> beginFailoverCommitAsync(String recoveryPlanName) {
        return beginFailoverCommitWithServiceResponseAsync(recoveryPlanName).map(new Func1<ServiceResponse<RecoveryPlanInner>, RecoveryPlanInner>() {
            @Override
            public RecoveryPlanInner call(ServiceResponse<RecoveryPlanInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Execute commit failover of the recovery plan.
     * The operation to commit the fail over of a recovery plan.
     *
     * @param recoveryPlanName Recovery plan name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RecoveryPlanInner object
     */
    public Observable<ServiceResponse<RecoveryPlanInner>> beginFailoverCommitWithServiceResponseAsync(String recoveryPlanName) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (recoveryPlanName == null) {
            throw new IllegalArgumentException("Parameter recoveryPlanName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.beginFailoverCommit(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), recoveryPlanName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<RecoveryPlanInner>>>() {
                @Override
                public Observable<ServiceResponse<RecoveryPlanInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<RecoveryPlanInner> clientResponse = beginFailoverCommitDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<RecoveryPlanInner> beginFailoverCommitDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<RecoveryPlanInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<RecoveryPlanInner>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Execute test failover cleanup of the recovery plan.
     * The operation to cleanup test failover of a recovery plan.
     *
     * @param recoveryPlanName Recovery plan name.
     * @param properties The recovery plan test failover cleanup input properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the RecoveryPlanInner object if successful.
     */
    public RecoveryPlanInner testFailoverCleanup(String recoveryPlanName, RecoveryPlanTestFailoverCleanupInputProperties properties) {
        return testFailoverCleanupWithServiceResponseAsync(recoveryPlanName, properties).toBlocking().last().body();
    }

    /**
     * Execute test failover cleanup of the recovery plan.
     * The operation to cleanup test failover of a recovery plan.
     *
     * @param recoveryPlanName Recovery plan name.
     * @param properties The recovery plan test failover cleanup input properties.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<RecoveryPlanInner> testFailoverCleanupAsync(String recoveryPlanName, RecoveryPlanTestFailoverCleanupInputProperties properties, final ServiceCallback<RecoveryPlanInner> serviceCallback) {
        return ServiceFuture.fromResponse(testFailoverCleanupWithServiceResponseAsync(recoveryPlanName, properties), serviceCallback);
    }

    /**
     * Execute test failover cleanup of the recovery plan.
     * The operation to cleanup test failover of a recovery plan.
     *
     * @param recoveryPlanName Recovery plan name.
     * @param properties The recovery plan test failover cleanup input properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<RecoveryPlanInner> testFailoverCleanupAsync(String recoveryPlanName, RecoveryPlanTestFailoverCleanupInputProperties properties) {
        return testFailoverCleanupWithServiceResponseAsync(recoveryPlanName, properties).map(new Func1<ServiceResponse<RecoveryPlanInner>, RecoveryPlanInner>() {
            @Override
            public RecoveryPlanInner call(ServiceResponse<RecoveryPlanInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Execute test failover cleanup of the recovery plan.
     * The operation to cleanup test failover of a recovery plan.
     *
     * @param recoveryPlanName Recovery plan name.
     * @param properties The recovery plan test failover cleanup input properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<RecoveryPlanInner>> testFailoverCleanupWithServiceResponseAsync(String recoveryPlanName, RecoveryPlanTestFailoverCleanupInputProperties properties) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (recoveryPlanName == null) {
            throw new IllegalArgumentException("Parameter recoveryPlanName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (properties == null) {
            throw new IllegalArgumentException("Parameter properties is required and cannot be null.");
        }
        Validator.validate(properties);
        RecoveryPlanTestFailoverCleanupInput input = new RecoveryPlanTestFailoverCleanupInput();
        input.withProperties(properties);
        Observable<Response<ResponseBody>> observable = service.testFailoverCleanup(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), recoveryPlanName, this.client.apiVersion(), this.client.acceptLanguage(), input, this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<RecoveryPlanInner>() { }.getType());
    }

    /**
     * Execute test failover cleanup of the recovery plan.
     * The operation to cleanup test failover of a recovery plan.
     *
     * @param recoveryPlanName Recovery plan name.
     * @param properties The recovery plan test failover cleanup input properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the RecoveryPlanInner object if successful.
     */
    public RecoveryPlanInner beginTestFailoverCleanup(String recoveryPlanName, RecoveryPlanTestFailoverCleanupInputProperties properties) {
        return beginTestFailoverCleanupWithServiceResponseAsync(recoveryPlanName, properties).toBlocking().single().body();
    }

    /**
     * Execute test failover cleanup of the recovery plan.
     * The operation to cleanup test failover of a recovery plan.
     *
     * @param recoveryPlanName Recovery plan name.
     * @param properties The recovery plan test failover cleanup input properties.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<RecoveryPlanInner> beginTestFailoverCleanupAsync(String recoveryPlanName, RecoveryPlanTestFailoverCleanupInputProperties properties, final ServiceCallback<RecoveryPlanInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginTestFailoverCleanupWithServiceResponseAsync(recoveryPlanName, properties), serviceCallback);
    }

    /**
     * Execute test failover cleanup of the recovery plan.
     * The operation to cleanup test failover of a recovery plan.
     *
     * @param recoveryPlanName Recovery plan name.
     * @param properties The recovery plan test failover cleanup input properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RecoveryPlanInner object
     */
    public Observable<RecoveryPlanInner> beginTestFailoverCleanupAsync(String recoveryPlanName, RecoveryPlanTestFailoverCleanupInputProperties properties) {
        return beginTestFailoverCleanupWithServiceResponseAsync(recoveryPlanName, properties).map(new Func1<ServiceResponse<RecoveryPlanInner>, RecoveryPlanInner>() {
            @Override
            public RecoveryPlanInner call(ServiceResponse<RecoveryPlanInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Execute test failover cleanup of the recovery plan.
     * The operation to cleanup test failover of a recovery plan.
     *
     * @param recoveryPlanName Recovery plan name.
     * @param properties The recovery plan test failover cleanup input properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RecoveryPlanInner object
     */
    public Observable<ServiceResponse<RecoveryPlanInner>> beginTestFailoverCleanupWithServiceResponseAsync(String recoveryPlanName, RecoveryPlanTestFailoverCleanupInputProperties properties) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (recoveryPlanName == null) {
            throw new IllegalArgumentException("Parameter recoveryPlanName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (properties == null) {
            throw new IllegalArgumentException("Parameter properties is required and cannot be null.");
        }
        Validator.validate(properties);
        RecoveryPlanTestFailoverCleanupInput input = new RecoveryPlanTestFailoverCleanupInput();
        input.withProperties(properties);
        return service.beginTestFailoverCleanup(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), recoveryPlanName, this.client.apiVersion(), this.client.acceptLanguage(), input, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<RecoveryPlanInner>>>() {
                @Override
                public Observable<ServiceResponse<RecoveryPlanInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<RecoveryPlanInner> clientResponse = beginTestFailoverCleanupDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<RecoveryPlanInner> beginTestFailoverCleanupDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<RecoveryPlanInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<RecoveryPlanInner>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Execute test failover of the recovery plan.
     * The operation to start the test failover of a recovery plan.
     *
     * @param recoveryPlanName Recovery plan name.
     * @param properties The recovery plan test failover input properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the RecoveryPlanInner object if successful.
     */
    public RecoveryPlanInner testFailover(String recoveryPlanName, RecoveryPlanTestFailoverInputProperties properties) {
        return testFailoverWithServiceResponseAsync(recoveryPlanName, properties).toBlocking().last().body();
    }

    /**
     * Execute test failover of the recovery plan.
     * The operation to start the test failover of a recovery plan.
     *
     * @param recoveryPlanName Recovery plan name.
     * @param properties The recovery plan test failover input properties.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<RecoveryPlanInner> testFailoverAsync(String recoveryPlanName, RecoveryPlanTestFailoverInputProperties properties, final ServiceCallback<RecoveryPlanInner> serviceCallback) {
        return ServiceFuture.fromResponse(testFailoverWithServiceResponseAsync(recoveryPlanName, properties), serviceCallback);
    }

    /**
     * Execute test failover of the recovery plan.
     * The operation to start the test failover of a recovery plan.
     *
     * @param recoveryPlanName Recovery plan name.
     * @param properties The recovery plan test failover input properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<RecoveryPlanInner> testFailoverAsync(String recoveryPlanName, RecoveryPlanTestFailoverInputProperties properties) {
        return testFailoverWithServiceResponseAsync(recoveryPlanName, properties).map(new Func1<ServiceResponse<RecoveryPlanInner>, RecoveryPlanInner>() {
            @Override
            public RecoveryPlanInner call(ServiceResponse<RecoveryPlanInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Execute test failover of the recovery plan.
     * The operation to start the test failover of a recovery plan.
     *
     * @param recoveryPlanName Recovery plan name.
     * @param properties The recovery plan test failover input properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<RecoveryPlanInner>> testFailoverWithServiceResponseAsync(String recoveryPlanName, RecoveryPlanTestFailoverInputProperties properties) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (recoveryPlanName == null) {
            throw new IllegalArgumentException("Parameter recoveryPlanName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (properties == null) {
            throw new IllegalArgumentException("Parameter properties is required and cannot be null.");
        }
        Validator.validate(properties);
        RecoveryPlanTestFailoverInput input = new RecoveryPlanTestFailoverInput();
        input.withProperties(properties);
        Observable<Response<ResponseBody>> observable = service.testFailover(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), recoveryPlanName, this.client.apiVersion(), this.client.acceptLanguage(), input, this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<RecoveryPlanInner>() { }.getType());
    }

    /**
     * Execute test failover of the recovery plan.
     * The operation to start the test failover of a recovery plan.
     *
     * @param recoveryPlanName Recovery plan name.
     * @param properties The recovery plan test failover input properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the RecoveryPlanInner object if successful.
     */
    public RecoveryPlanInner beginTestFailover(String recoveryPlanName, RecoveryPlanTestFailoverInputProperties properties) {
        return beginTestFailoverWithServiceResponseAsync(recoveryPlanName, properties).toBlocking().single().body();
    }

    /**
     * Execute test failover of the recovery plan.
     * The operation to start the test failover of a recovery plan.
     *
     * @param recoveryPlanName Recovery plan name.
     * @param properties The recovery plan test failover input properties.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<RecoveryPlanInner> beginTestFailoverAsync(String recoveryPlanName, RecoveryPlanTestFailoverInputProperties properties, final ServiceCallback<RecoveryPlanInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginTestFailoverWithServiceResponseAsync(recoveryPlanName, properties), serviceCallback);
    }

    /**
     * Execute test failover of the recovery plan.
     * The operation to start the test failover of a recovery plan.
     *
     * @param recoveryPlanName Recovery plan name.
     * @param properties The recovery plan test failover input properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RecoveryPlanInner object
     */
    public Observable<RecoveryPlanInner> beginTestFailoverAsync(String recoveryPlanName, RecoveryPlanTestFailoverInputProperties properties) {
        return beginTestFailoverWithServiceResponseAsync(recoveryPlanName, properties).map(new Func1<ServiceResponse<RecoveryPlanInner>, RecoveryPlanInner>() {
            @Override
            public RecoveryPlanInner call(ServiceResponse<RecoveryPlanInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Execute test failover of the recovery plan.
     * The operation to start the test failover of a recovery plan.
     *
     * @param recoveryPlanName Recovery plan name.
     * @param properties The recovery plan test failover input properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RecoveryPlanInner object
     */
    public Observable<ServiceResponse<RecoveryPlanInner>> beginTestFailoverWithServiceResponseAsync(String recoveryPlanName, RecoveryPlanTestFailoverInputProperties properties) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (recoveryPlanName == null) {
            throw new IllegalArgumentException("Parameter recoveryPlanName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (properties == null) {
            throw new IllegalArgumentException("Parameter properties is required and cannot be null.");
        }
        Validator.validate(properties);
        RecoveryPlanTestFailoverInput input = new RecoveryPlanTestFailoverInput();
        input.withProperties(properties);
        return service.beginTestFailover(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), recoveryPlanName, this.client.apiVersion(), this.client.acceptLanguage(), input, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<RecoveryPlanInner>>>() {
                @Override
                public Observable<ServiceResponse<RecoveryPlanInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<RecoveryPlanInner> clientResponse = beginTestFailoverDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<RecoveryPlanInner> beginTestFailoverDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<RecoveryPlanInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<RecoveryPlanInner>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Execute unplanned failover of the recovery plan.
     * The operation to start the failover of a recovery plan.
     *
     * @param recoveryPlanName Recovery plan name.
     * @param properties The recovery plan unplanned failover input properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the RecoveryPlanInner object if successful.
     */
    public RecoveryPlanInner unplannedFailover(String recoveryPlanName, RecoveryPlanUnplannedFailoverInputProperties properties) {
        return unplannedFailoverWithServiceResponseAsync(recoveryPlanName, properties).toBlocking().last().body();
    }

    /**
     * Execute unplanned failover of the recovery plan.
     * The operation to start the failover of a recovery plan.
     *
     * @param recoveryPlanName Recovery plan name.
     * @param properties The recovery plan unplanned failover input properties.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<RecoveryPlanInner> unplannedFailoverAsync(String recoveryPlanName, RecoveryPlanUnplannedFailoverInputProperties properties, final ServiceCallback<RecoveryPlanInner> serviceCallback) {
        return ServiceFuture.fromResponse(unplannedFailoverWithServiceResponseAsync(recoveryPlanName, properties), serviceCallback);
    }

    /**
     * Execute unplanned failover of the recovery plan.
     * The operation to start the failover of a recovery plan.
     *
     * @param recoveryPlanName Recovery plan name.
     * @param properties The recovery plan unplanned failover input properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<RecoveryPlanInner> unplannedFailoverAsync(String recoveryPlanName, RecoveryPlanUnplannedFailoverInputProperties properties) {
        return unplannedFailoverWithServiceResponseAsync(recoveryPlanName, properties).map(new Func1<ServiceResponse<RecoveryPlanInner>, RecoveryPlanInner>() {
            @Override
            public RecoveryPlanInner call(ServiceResponse<RecoveryPlanInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Execute unplanned failover of the recovery plan.
     * The operation to start the failover of a recovery plan.
     *
     * @param recoveryPlanName Recovery plan name.
     * @param properties The recovery plan unplanned failover input properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<RecoveryPlanInner>> unplannedFailoverWithServiceResponseAsync(String recoveryPlanName, RecoveryPlanUnplannedFailoverInputProperties properties) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (recoveryPlanName == null) {
            throw new IllegalArgumentException("Parameter recoveryPlanName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (properties == null) {
            throw new IllegalArgumentException("Parameter properties is required and cannot be null.");
        }
        Validator.validate(properties);
        RecoveryPlanUnplannedFailoverInput input = new RecoveryPlanUnplannedFailoverInput();
        input.withProperties(properties);
        Observable<Response<ResponseBody>> observable = service.unplannedFailover(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), recoveryPlanName, this.client.apiVersion(), this.client.acceptLanguage(), input, this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<RecoveryPlanInner>() { }.getType());
    }

    /**
     * Execute unplanned failover of the recovery plan.
     * The operation to start the failover of a recovery plan.
     *
     * @param recoveryPlanName Recovery plan name.
     * @param properties The recovery plan unplanned failover input properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the RecoveryPlanInner object if successful.
     */
    public RecoveryPlanInner beginUnplannedFailover(String recoveryPlanName, RecoveryPlanUnplannedFailoverInputProperties properties) {
        return beginUnplannedFailoverWithServiceResponseAsync(recoveryPlanName, properties).toBlocking().single().body();
    }

    /**
     * Execute unplanned failover of the recovery plan.
     * The operation to start the failover of a recovery plan.
     *
     * @param recoveryPlanName Recovery plan name.
     * @param properties The recovery plan unplanned failover input properties.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<RecoveryPlanInner> beginUnplannedFailoverAsync(String recoveryPlanName, RecoveryPlanUnplannedFailoverInputProperties properties, final ServiceCallback<RecoveryPlanInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginUnplannedFailoverWithServiceResponseAsync(recoveryPlanName, properties), serviceCallback);
    }

    /**
     * Execute unplanned failover of the recovery plan.
     * The operation to start the failover of a recovery plan.
     *
     * @param recoveryPlanName Recovery plan name.
     * @param properties The recovery plan unplanned failover input properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RecoveryPlanInner object
     */
    public Observable<RecoveryPlanInner> beginUnplannedFailoverAsync(String recoveryPlanName, RecoveryPlanUnplannedFailoverInputProperties properties) {
        return beginUnplannedFailoverWithServiceResponseAsync(recoveryPlanName, properties).map(new Func1<ServiceResponse<RecoveryPlanInner>, RecoveryPlanInner>() {
            @Override
            public RecoveryPlanInner call(ServiceResponse<RecoveryPlanInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Execute unplanned failover of the recovery plan.
     * The operation to start the failover of a recovery plan.
     *
     * @param recoveryPlanName Recovery plan name.
     * @param properties The recovery plan unplanned failover input properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RecoveryPlanInner object
     */
    public Observable<ServiceResponse<RecoveryPlanInner>> beginUnplannedFailoverWithServiceResponseAsync(String recoveryPlanName, RecoveryPlanUnplannedFailoverInputProperties properties) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (recoveryPlanName == null) {
            throw new IllegalArgumentException("Parameter recoveryPlanName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (properties == null) {
            throw new IllegalArgumentException("Parameter properties is required and cannot be null.");
        }
        Validator.validate(properties);
        RecoveryPlanUnplannedFailoverInput input = new RecoveryPlanUnplannedFailoverInput();
        input.withProperties(properties);
        return service.beginUnplannedFailover(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), recoveryPlanName, this.client.apiVersion(), this.client.acceptLanguage(), input, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<RecoveryPlanInner>>>() {
                @Override
                public Observable<ServiceResponse<RecoveryPlanInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<RecoveryPlanInner> clientResponse = beginUnplannedFailoverDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<RecoveryPlanInner> beginUnplannedFailoverDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<RecoveryPlanInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<RecoveryPlanInner>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Execute planned failover of the recovery plan.
     * The operation to start the planned failover of a recovery plan.
     *
     * @param recoveryPlanName Recovery plan name.
     * @param properties The recovery plan planned failover input properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the RecoveryPlanInner object if successful.
     */
    public RecoveryPlanInner plannedFailover(String recoveryPlanName, RecoveryPlanPlannedFailoverInputProperties properties) {
        return plannedFailoverWithServiceResponseAsync(recoveryPlanName, properties).toBlocking().last().body();
    }

    /**
     * Execute planned failover of the recovery plan.
     * The operation to start the planned failover of a recovery plan.
     *
     * @param recoveryPlanName Recovery plan name.
     * @param properties The recovery plan planned failover input properties.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<RecoveryPlanInner> plannedFailoverAsync(String recoveryPlanName, RecoveryPlanPlannedFailoverInputProperties properties, final ServiceCallback<RecoveryPlanInner> serviceCallback) {
        return ServiceFuture.fromResponse(plannedFailoverWithServiceResponseAsync(recoveryPlanName, properties), serviceCallback);
    }

    /**
     * Execute planned failover of the recovery plan.
     * The operation to start the planned failover of a recovery plan.
     *
     * @param recoveryPlanName Recovery plan name.
     * @param properties The recovery plan planned failover input properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<RecoveryPlanInner> plannedFailoverAsync(String recoveryPlanName, RecoveryPlanPlannedFailoverInputProperties properties) {
        return plannedFailoverWithServiceResponseAsync(recoveryPlanName, properties).map(new Func1<ServiceResponse<RecoveryPlanInner>, RecoveryPlanInner>() {
            @Override
            public RecoveryPlanInner call(ServiceResponse<RecoveryPlanInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Execute planned failover of the recovery plan.
     * The operation to start the planned failover of a recovery plan.
     *
     * @param recoveryPlanName Recovery plan name.
     * @param properties The recovery plan planned failover input properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<RecoveryPlanInner>> plannedFailoverWithServiceResponseAsync(String recoveryPlanName, RecoveryPlanPlannedFailoverInputProperties properties) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (recoveryPlanName == null) {
            throw new IllegalArgumentException("Parameter recoveryPlanName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (properties == null) {
            throw new IllegalArgumentException("Parameter properties is required and cannot be null.");
        }
        Validator.validate(properties);
        RecoveryPlanPlannedFailoverInput input = new RecoveryPlanPlannedFailoverInput();
        input.withProperties(properties);
        Observable<Response<ResponseBody>> observable = service.plannedFailover(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), recoveryPlanName, this.client.apiVersion(), this.client.acceptLanguage(), input, this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<RecoveryPlanInner>() { }.getType());
    }

    /**
     * Execute planned failover of the recovery plan.
     * The operation to start the planned failover of a recovery plan.
     *
     * @param recoveryPlanName Recovery plan name.
     * @param properties The recovery plan planned failover input properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the RecoveryPlanInner object if successful.
     */
    public RecoveryPlanInner beginPlannedFailover(String recoveryPlanName, RecoveryPlanPlannedFailoverInputProperties properties) {
        return beginPlannedFailoverWithServiceResponseAsync(recoveryPlanName, properties).toBlocking().single().body();
    }

    /**
     * Execute planned failover of the recovery plan.
     * The operation to start the planned failover of a recovery plan.
     *
     * @param recoveryPlanName Recovery plan name.
     * @param properties The recovery plan planned failover input properties.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<RecoveryPlanInner> beginPlannedFailoverAsync(String recoveryPlanName, RecoveryPlanPlannedFailoverInputProperties properties, final ServiceCallback<RecoveryPlanInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginPlannedFailoverWithServiceResponseAsync(recoveryPlanName, properties), serviceCallback);
    }

    /**
     * Execute planned failover of the recovery plan.
     * The operation to start the planned failover of a recovery plan.
     *
     * @param recoveryPlanName Recovery plan name.
     * @param properties The recovery plan planned failover input properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RecoveryPlanInner object
     */
    public Observable<RecoveryPlanInner> beginPlannedFailoverAsync(String recoveryPlanName, RecoveryPlanPlannedFailoverInputProperties properties) {
        return beginPlannedFailoverWithServiceResponseAsync(recoveryPlanName, properties).map(new Func1<ServiceResponse<RecoveryPlanInner>, RecoveryPlanInner>() {
            @Override
            public RecoveryPlanInner call(ServiceResponse<RecoveryPlanInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Execute planned failover of the recovery plan.
     * The operation to start the planned failover of a recovery plan.
     *
     * @param recoveryPlanName Recovery plan name.
     * @param properties The recovery plan planned failover input properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RecoveryPlanInner object
     */
    public Observable<ServiceResponse<RecoveryPlanInner>> beginPlannedFailoverWithServiceResponseAsync(String recoveryPlanName, RecoveryPlanPlannedFailoverInputProperties properties) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (recoveryPlanName == null) {
            throw new IllegalArgumentException("Parameter recoveryPlanName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (properties == null) {
            throw new IllegalArgumentException("Parameter properties is required and cannot be null.");
        }
        Validator.validate(properties);
        RecoveryPlanPlannedFailoverInput input = new RecoveryPlanPlannedFailoverInput();
        input.withProperties(properties);
        return service.beginPlannedFailover(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), recoveryPlanName, this.client.apiVersion(), this.client.acceptLanguage(), input, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<RecoveryPlanInner>>>() {
                @Override
                public Observable<ServiceResponse<RecoveryPlanInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<RecoveryPlanInner> clientResponse = beginPlannedFailoverDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<RecoveryPlanInner> beginPlannedFailoverDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<RecoveryPlanInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<RecoveryPlanInner>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets the requested recovery plan.
     * Gets the details of the recovery plan.
     *
     * @param recoveryPlanName Name of the recovery plan.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the RecoveryPlanInner object if successful.
     */
    public RecoveryPlanInner get(String recoveryPlanName) {
        return getWithServiceResponseAsync(recoveryPlanName).toBlocking().single().body();
    }

    /**
     * Gets the requested recovery plan.
     * Gets the details of the recovery plan.
     *
     * @param recoveryPlanName Name of the recovery plan.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<RecoveryPlanInner> getAsync(String recoveryPlanName, final ServiceCallback<RecoveryPlanInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(recoveryPlanName), serviceCallback);
    }

    /**
     * Gets the requested recovery plan.
     * Gets the details of the recovery plan.
     *
     * @param recoveryPlanName Name of the recovery plan.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RecoveryPlanInner object
     */
    public Observable<RecoveryPlanInner> getAsync(String recoveryPlanName) {
        return getWithServiceResponseAsync(recoveryPlanName).map(new Func1<ServiceResponse<RecoveryPlanInner>, RecoveryPlanInner>() {
            @Override
            public RecoveryPlanInner call(ServiceResponse<RecoveryPlanInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets the requested recovery plan.
     * Gets the details of the recovery plan.
     *
     * @param recoveryPlanName Name of the recovery plan.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RecoveryPlanInner object
     */
    public Observable<ServiceResponse<RecoveryPlanInner>> getWithServiceResponseAsync(String recoveryPlanName) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (recoveryPlanName == null) {
            throw new IllegalArgumentException("Parameter recoveryPlanName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.get(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), recoveryPlanName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<RecoveryPlanInner>>>() {
                @Override
                public Observable<ServiceResponse<RecoveryPlanInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<RecoveryPlanInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<RecoveryPlanInner> getDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<RecoveryPlanInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<RecoveryPlanInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Creates a recovery plan with the given details.
     * The operation to create a recovery plan.
     *
     * @param recoveryPlanName Recovery plan name.
     * @param properties Recovery plan creation properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the RecoveryPlanInner object if successful.
     */
    public RecoveryPlanInner create(String recoveryPlanName, CreateRecoveryPlanInputProperties properties) {
        return createWithServiceResponseAsync(recoveryPlanName, properties).toBlocking().last().body();
    }

    /**
     * Creates a recovery plan with the given details.
     * The operation to create a recovery plan.
     *
     * @param recoveryPlanName Recovery plan name.
     * @param properties Recovery plan creation properties.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<RecoveryPlanInner> createAsync(String recoveryPlanName, CreateRecoveryPlanInputProperties properties, final ServiceCallback<RecoveryPlanInner> serviceCallback) {
        return ServiceFuture.fromResponse(createWithServiceResponseAsync(recoveryPlanName, properties), serviceCallback);
    }

    /**
     * Creates a recovery plan with the given details.
     * The operation to create a recovery plan.
     *
     * @param recoveryPlanName Recovery plan name.
     * @param properties Recovery plan creation properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<RecoveryPlanInner> createAsync(String recoveryPlanName, CreateRecoveryPlanInputProperties properties) {
        return createWithServiceResponseAsync(recoveryPlanName, properties).map(new Func1<ServiceResponse<RecoveryPlanInner>, RecoveryPlanInner>() {
            @Override
            public RecoveryPlanInner call(ServiceResponse<RecoveryPlanInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates a recovery plan with the given details.
     * The operation to create a recovery plan.
     *
     * @param recoveryPlanName Recovery plan name.
     * @param properties Recovery plan creation properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<RecoveryPlanInner>> createWithServiceResponseAsync(String recoveryPlanName, CreateRecoveryPlanInputProperties properties) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (recoveryPlanName == null) {
            throw new IllegalArgumentException("Parameter recoveryPlanName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (properties == null) {
            throw new IllegalArgumentException("Parameter properties is required and cannot be null.");
        }
        Validator.validate(properties);
        CreateRecoveryPlanInput input = new CreateRecoveryPlanInput();
        input.withProperties(properties);
        Observable<Response<ResponseBody>> observable = service.create(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), recoveryPlanName, this.client.apiVersion(), this.client.acceptLanguage(), input, this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<RecoveryPlanInner>() { }.getType());
    }

    /**
     * Creates a recovery plan with the given details.
     * The operation to create a recovery plan.
     *
     * @param recoveryPlanName Recovery plan name.
     * @param properties Recovery plan creation properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the RecoveryPlanInner object if successful.
     */
    public RecoveryPlanInner beginCreate(String recoveryPlanName, CreateRecoveryPlanInputProperties properties) {
        return beginCreateWithServiceResponseAsync(recoveryPlanName, properties).toBlocking().single().body();
    }

    /**
     * Creates a recovery plan with the given details.
     * The operation to create a recovery plan.
     *
     * @param recoveryPlanName Recovery plan name.
     * @param properties Recovery plan creation properties.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<RecoveryPlanInner> beginCreateAsync(String recoveryPlanName, CreateRecoveryPlanInputProperties properties, final ServiceCallback<RecoveryPlanInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginCreateWithServiceResponseAsync(recoveryPlanName, properties), serviceCallback);
    }

    /**
     * Creates a recovery plan with the given details.
     * The operation to create a recovery plan.
     *
     * @param recoveryPlanName Recovery plan name.
     * @param properties Recovery plan creation properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RecoveryPlanInner object
     */
    public Observable<RecoveryPlanInner> beginCreateAsync(String recoveryPlanName, CreateRecoveryPlanInputProperties properties) {
        return beginCreateWithServiceResponseAsync(recoveryPlanName, properties).map(new Func1<ServiceResponse<RecoveryPlanInner>, RecoveryPlanInner>() {
            @Override
            public RecoveryPlanInner call(ServiceResponse<RecoveryPlanInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates a recovery plan with the given details.
     * The operation to create a recovery plan.
     *
     * @param recoveryPlanName Recovery plan name.
     * @param properties Recovery plan creation properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RecoveryPlanInner object
     */
    public Observable<ServiceResponse<RecoveryPlanInner>> beginCreateWithServiceResponseAsync(String recoveryPlanName, CreateRecoveryPlanInputProperties properties) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (recoveryPlanName == null) {
            throw new IllegalArgumentException("Parameter recoveryPlanName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (properties == null) {
            throw new IllegalArgumentException("Parameter properties is required and cannot be null.");
        }
        Validator.validate(properties);
        CreateRecoveryPlanInput input = new CreateRecoveryPlanInput();
        input.withProperties(properties);
        return service.beginCreate(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), recoveryPlanName, this.client.apiVersion(), this.client.acceptLanguage(), input, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<RecoveryPlanInner>>>() {
                @Override
                public Observable<ServiceResponse<RecoveryPlanInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<RecoveryPlanInner> clientResponse = beginCreateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<RecoveryPlanInner> beginCreateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<RecoveryPlanInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<RecoveryPlanInner>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Deletes the specified recovery plan.
     * Delete a recovery plan.
     *
     * @param recoveryPlanName Recovery plan name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String recoveryPlanName) {
        deleteWithServiceResponseAsync(recoveryPlanName).toBlocking().last().body();
    }

    /**
     * Deletes the specified recovery plan.
     * Delete a recovery plan.
     *
     * @param recoveryPlanName Recovery plan name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String recoveryPlanName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(recoveryPlanName), serviceCallback);
    }

    /**
     * Deletes the specified recovery plan.
     * Delete a recovery plan.
     *
     * @param recoveryPlanName Recovery plan name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Void> deleteAsync(String recoveryPlanName) {
        return deleteWithServiceResponseAsync(recoveryPlanName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes the specified recovery plan.
     * Delete a recovery plan.
     *
     * @param recoveryPlanName Recovery plan name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String recoveryPlanName) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (recoveryPlanName == null) {
            throw new IllegalArgumentException("Parameter recoveryPlanName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Observable<Response<ResponseBody>> observable = service.delete(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), recoveryPlanName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<Void>() { }.getType());
    }

    /**
     * Deletes the specified recovery plan.
     * Delete a recovery plan.
     *
     * @param recoveryPlanName Recovery plan name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void beginDelete(String recoveryPlanName) {
        beginDeleteWithServiceResponseAsync(recoveryPlanName).toBlocking().single().body();
    }

    /**
     * Deletes the specified recovery plan.
     * Delete a recovery plan.
     *
     * @param recoveryPlanName Recovery plan name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> beginDeleteAsync(String recoveryPlanName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(beginDeleteWithServiceResponseAsync(recoveryPlanName), serviceCallback);
    }

    /**
     * Deletes the specified recovery plan.
     * Delete a recovery plan.
     *
     * @param recoveryPlanName Recovery plan name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> beginDeleteAsync(String recoveryPlanName) {
        return beginDeleteWithServiceResponseAsync(recoveryPlanName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes the specified recovery plan.
     * Delete a recovery plan.
     *
     * @param recoveryPlanName Recovery plan name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> beginDeleteWithServiceResponseAsync(String recoveryPlanName) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (recoveryPlanName == null) {
            throw new IllegalArgumentException("Parameter recoveryPlanName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.beginDelete(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), recoveryPlanName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = beginDeleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> beginDeleteDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CloudException>newInstance(this.client.serializerAdapter())
                .register(202, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Updates the given recovery plan.
     * The operation to update a recovery plan.
     *
     * @param recoveryPlanName Recovery plan name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the RecoveryPlanInner object if successful.
     */
    public RecoveryPlanInner update(String recoveryPlanName) {
        return updateWithServiceResponseAsync(recoveryPlanName).toBlocking().last().body();
    }

    /**
     * Updates the given recovery plan.
     * The operation to update a recovery plan.
     *
     * @param recoveryPlanName Recovery plan name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<RecoveryPlanInner> updateAsync(String recoveryPlanName, final ServiceCallback<RecoveryPlanInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(recoveryPlanName), serviceCallback);
    }

    /**
     * Updates the given recovery plan.
     * The operation to update a recovery plan.
     *
     * @param recoveryPlanName Recovery plan name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<RecoveryPlanInner> updateAsync(String recoveryPlanName) {
        return updateWithServiceResponseAsync(recoveryPlanName).map(new Func1<ServiceResponse<RecoveryPlanInner>, RecoveryPlanInner>() {
            @Override
            public RecoveryPlanInner call(ServiceResponse<RecoveryPlanInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Updates the given recovery plan.
     * The operation to update a recovery plan.
     *
     * @param recoveryPlanName Recovery plan name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<RecoveryPlanInner>> updateWithServiceResponseAsync(String recoveryPlanName) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (recoveryPlanName == null) {
            throw new IllegalArgumentException("Parameter recoveryPlanName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final UpdateRecoveryPlanInputProperties properties = null;
        UpdateRecoveryPlanInput input = new UpdateRecoveryPlanInput();
        input.withProperties(null);
        Observable<Response<ResponseBody>> observable = service.update(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), recoveryPlanName, this.client.apiVersion(), this.client.acceptLanguage(), input, this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<RecoveryPlanInner>() { }.getType());
    }
    /**
     * Updates the given recovery plan.
     * The operation to update a recovery plan.
     *
     * @param recoveryPlanName Recovery plan name.
     * @param properties Recovery plan update properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the RecoveryPlanInner object if successful.
     */
    public RecoveryPlanInner update(String recoveryPlanName, UpdateRecoveryPlanInputProperties properties) {
        return updateWithServiceResponseAsync(recoveryPlanName, properties).toBlocking().last().body();
    }

    /**
     * Updates the given recovery plan.
     * The operation to update a recovery plan.
     *
     * @param recoveryPlanName Recovery plan name.
     * @param properties Recovery plan update properties.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<RecoveryPlanInner> updateAsync(String recoveryPlanName, UpdateRecoveryPlanInputProperties properties, final ServiceCallback<RecoveryPlanInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(recoveryPlanName, properties), serviceCallback);
    }

    /**
     * Updates the given recovery plan.
     * The operation to update a recovery plan.
     *
     * @param recoveryPlanName Recovery plan name.
     * @param properties Recovery plan update properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<RecoveryPlanInner> updateAsync(String recoveryPlanName, UpdateRecoveryPlanInputProperties properties) {
        return updateWithServiceResponseAsync(recoveryPlanName, properties).map(new Func1<ServiceResponse<RecoveryPlanInner>, RecoveryPlanInner>() {
            @Override
            public RecoveryPlanInner call(ServiceResponse<RecoveryPlanInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Updates the given recovery plan.
     * The operation to update a recovery plan.
     *
     * @param recoveryPlanName Recovery plan name.
     * @param properties Recovery plan update properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<RecoveryPlanInner>> updateWithServiceResponseAsync(String recoveryPlanName, UpdateRecoveryPlanInputProperties properties) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (recoveryPlanName == null) {
            throw new IllegalArgumentException("Parameter recoveryPlanName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(properties);
        UpdateRecoveryPlanInput input = new UpdateRecoveryPlanInput();
        input.withProperties(properties);
        Observable<Response<ResponseBody>> observable = service.update(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), recoveryPlanName, this.client.apiVersion(), this.client.acceptLanguage(), input, this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<RecoveryPlanInner>() { }.getType());
    }

    /**
     * Updates the given recovery plan.
     * The operation to update a recovery plan.
     *
     * @param recoveryPlanName Recovery plan name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the RecoveryPlanInner object if successful.
     */
    public RecoveryPlanInner beginUpdate(String recoveryPlanName) {
        return beginUpdateWithServiceResponseAsync(recoveryPlanName).toBlocking().single().body();
    }

    /**
     * Updates the given recovery plan.
     * The operation to update a recovery plan.
     *
     * @param recoveryPlanName Recovery plan name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<RecoveryPlanInner> beginUpdateAsync(String recoveryPlanName, final ServiceCallback<RecoveryPlanInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginUpdateWithServiceResponseAsync(recoveryPlanName), serviceCallback);
    }

    /**
     * Updates the given recovery plan.
     * The operation to update a recovery plan.
     *
     * @param recoveryPlanName Recovery plan name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RecoveryPlanInner object
     */
    public Observable<RecoveryPlanInner> beginUpdateAsync(String recoveryPlanName) {
        return beginUpdateWithServiceResponseAsync(recoveryPlanName).map(new Func1<ServiceResponse<RecoveryPlanInner>, RecoveryPlanInner>() {
            @Override
            public RecoveryPlanInner call(ServiceResponse<RecoveryPlanInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Updates the given recovery plan.
     * The operation to update a recovery plan.
     *
     * @param recoveryPlanName Recovery plan name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RecoveryPlanInner object
     */
    public Observable<ServiceResponse<RecoveryPlanInner>> beginUpdateWithServiceResponseAsync(String recoveryPlanName) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (recoveryPlanName == null) {
            throw new IllegalArgumentException("Parameter recoveryPlanName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final UpdateRecoveryPlanInputProperties properties = null;
        UpdateRecoveryPlanInput input = new UpdateRecoveryPlanInput();
        input.withProperties(null);
        return service.beginUpdate(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), recoveryPlanName, this.client.apiVersion(), this.client.acceptLanguage(), input, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<RecoveryPlanInner>>>() {
                @Override
                public Observable<ServiceResponse<RecoveryPlanInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<RecoveryPlanInner> clientResponse = beginUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Updates the given recovery plan.
     * The operation to update a recovery plan.
     *
     * @param recoveryPlanName Recovery plan name.
     * @param properties Recovery plan update properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the RecoveryPlanInner object if successful.
     */
    public RecoveryPlanInner beginUpdate(String recoveryPlanName, UpdateRecoveryPlanInputProperties properties) {
        return beginUpdateWithServiceResponseAsync(recoveryPlanName, properties).toBlocking().single().body();
    }

    /**
     * Updates the given recovery plan.
     * The operation to update a recovery plan.
     *
     * @param recoveryPlanName Recovery plan name.
     * @param properties Recovery plan update properties.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<RecoveryPlanInner> beginUpdateAsync(String recoveryPlanName, UpdateRecoveryPlanInputProperties properties, final ServiceCallback<RecoveryPlanInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginUpdateWithServiceResponseAsync(recoveryPlanName, properties), serviceCallback);
    }

    /**
     * Updates the given recovery plan.
     * The operation to update a recovery plan.
     *
     * @param recoveryPlanName Recovery plan name.
     * @param properties Recovery plan update properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RecoveryPlanInner object
     */
    public Observable<RecoveryPlanInner> beginUpdateAsync(String recoveryPlanName, UpdateRecoveryPlanInputProperties properties) {
        return beginUpdateWithServiceResponseAsync(recoveryPlanName, properties).map(new Func1<ServiceResponse<RecoveryPlanInner>, RecoveryPlanInner>() {
            @Override
            public RecoveryPlanInner call(ServiceResponse<RecoveryPlanInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Updates the given recovery plan.
     * The operation to update a recovery plan.
     *
     * @param recoveryPlanName Recovery plan name.
     * @param properties Recovery plan update properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RecoveryPlanInner object
     */
    public Observable<ServiceResponse<RecoveryPlanInner>> beginUpdateWithServiceResponseAsync(String recoveryPlanName, UpdateRecoveryPlanInputProperties properties) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (recoveryPlanName == null) {
            throw new IllegalArgumentException("Parameter recoveryPlanName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(properties);
        UpdateRecoveryPlanInput input = new UpdateRecoveryPlanInput();
        input.withProperties(properties);
        return service.beginUpdate(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), recoveryPlanName, this.client.apiVersion(), this.client.acceptLanguage(), input, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<RecoveryPlanInner>>>() {
                @Override
                public Observable<ServiceResponse<RecoveryPlanInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<RecoveryPlanInner> clientResponse = beginUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<RecoveryPlanInner> beginUpdateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<RecoveryPlanInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<RecoveryPlanInner>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets the list of recovery plans.
     * Lists the recovery plans in the vault.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;RecoveryPlanInner&gt; object if successful.
     */
    public PagedList<RecoveryPlanInner> list() {
        ServiceResponse<Page<RecoveryPlanInner>> response = listSinglePageAsync().toBlocking().single();
        return new PagedList<RecoveryPlanInner>(response.body()) {
            @Override
            public Page<RecoveryPlanInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets the list of recovery plans.
     * Lists the recovery plans in the vault.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<RecoveryPlanInner>> listAsync(final ListOperationCallback<RecoveryPlanInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSinglePageAsync(),
            new Func1<String, Observable<ServiceResponse<Page<RecoveryPlanInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RecoveryPlanInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets the list of recovery plans.
     * Lists the recovery plans in the vault.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;RecoveryPlanInner&gt; object
     */
    public Observable<Page<RecoveryPlanInner>> listAsync() {
        return listWithServiceResponseAsync()
            .map(new Func1<ServiceResponse<Page<RecoveryPlanInner>>, Page<RecoveryPlanInner>>() {
                @Override
                public Page<RecoveryPlanInner> call(ServiceResponse<Page<RecoveryPlanInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets the list of recovery plans.
     * Lists the recovery plans in the vault.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;RecoveryPlanInner&gt; object
     */
    public Observable<ServiceResponse<Page<RecoveryPlanInner>>> listWithServiceResponseAsync() {
        return listSinglePageAsync()
            .concatMap(new Func1<ServiceResponse<Page<RecoveryPlanInner>>, Observable<ServiceResponse<Page<RecoveryPlanInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RecoveryPlanInner>>> call(ServiceResponse<Page<RecoveryPlanInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets the list of recovery plans.
     * Lists the recovery plans in the vault.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;RecoveryPlanInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<RecoveryPlanInner>>> listSinglePageAsync() {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.list(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<RecoveryPlanInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RecoveryPlanInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<RecoveryPlanInner>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<RecoveryPlanInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<RecoveryPlanInner>> listDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<RecoveryPlanInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<RecoveryPlanInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets the list of recovery plans.
     * Lists the recovery plans in the vault.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;RecoveryPlanInner&gt; object if successful.
     */
    public PagedList<RecoveryPlanInner> listNext(final String nextPageLink) {
        ServiceResponse<Page<RecoveryPlanInner>> response = listNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<RecoveryPlanInner>(response.body()) {
            @Override
            public Page<RecoveryPlanInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets the list of recovery plans.
     * Lists the recovery plans in the vault.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<RecoveryPlanInner>> listNextAsync(final String nextPageLink, final ServiceFuture<List<RecoveryPlanInner>> serviceFuture, final ListOperationCallback<RecoveryPlanInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<RecoveryPlanInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RecoveryPlanInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets the list of recovery plans.
     * Lists the recovery plans in the vault.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;RecoveryPlanInner&gt; object
     */
    public Observable<Page<RecoveryPlanInner>> listNextAsync(final String nextPageLink) {
        return listNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<RecoveryPlanInner>>, Page<RecoveryPlanInner>>() {
                @Override
                public Page<RecoveryPlanInner> call(ServiceResponse<Page<RecoveryPlanInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets the list of recovery plans.
     * Lists the recovery plans in the vault.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;RecoveryPlanInner&gt; object
     */
    public Observable<ServiceResponse<Page<RecoveryPlanInner>>> listNextWithServiceResponseAsync(final String nextPageLink) {
        return listNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<RecoveryPlanInner>>, Observable<ServiceResponse<Page<RecoveryPlanInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RecoveryPlanInner>>> call(ServiceResponse<Page<RecoveryPlanInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets the list of recovery plans.
     * Lists the recovery plans in the vault.
     *
    ServiceResponse<PageImpl<RecoveryPlanInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;RecoveryPlanInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<RecoveryPlanInner>>> listNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<RecoveryPlanInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RecoveryPlanInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<RecoveryPlanInner>> result = listNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<RecoveryPlanInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<RecoveryPlanInner>> listNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<RecoveryPlanInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<RecoveryPlanInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
