/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * jkl
 */

package com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.Operations;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.PagedList;
import com.microsoft.azure.Page;
import com.microsoft.azure.arm.utils.PagedListConverter;
import com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.OperationsDiscovery;

class OperationsImpl extends WrapperImpl<OperationsInner> implements Operations {
    private PagedListConverter<OperationsDiscoveryInner, OperationsDiscovery> converter;
    private final RecoveryServicesManager manager;

    OperationsImpl(RecoveryServicesManager manager) {
        super(manager.inner().operations());
        this.manager = manager;
        this.converter = new PagedListConverter<OperationsDiscoveryInner, OperationsDiscovery>() {
            @Override
            public Observable<OperationsDiscovery> typeConvertAsync(OperationsDiscoveryInner inner) {
                return Observable.just((OperationsDiscovery) wrapModel(inner));
            }
        };
    }

    public RecoveryServicesManager manager() {
        return this.manager;
    }

    private OperationsDiscoveryImpl wrapModel(OperationsDiscoveryInner inner) {
        return  new OperationsDiscoveryImpl(inner, manager());
    }

    @Override
    public PagedList<OperationsDiscovery> list() {
        OperationsInner client = this.inner();
        return converter.convert(client.listByResourceGroup());
    }

    @Override
    public Observable<OperationsDiscovery> listAsync() {
        OperationsInner client = this.inner();
        return client.listByResourceGroupAsync()
        .flatMapIterable(new Func1<Page<OperationsDiscoveryInner>, Iterable<OperationsDiscoveryInner>>() {
            @Override
            public Iterable<OperationsDiscoveryInner> call(Page<OperationsDiscoveryInner> page) {
                return page.items();
            }
        })
        .map(new Func1<OperationsDiscoveryInner, OperationsDiscovery>() {
            @Override
            public OperationsDiscovery call(OperationsDiscoveryInner inner) {
                return wrapModel(inner);
            }
        });
    }

}
