/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.CloudException;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.FabricCreationInput;
import com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.FabricCreationInputProperties;
import com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.FailoverProcessServerRequest;
import com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.FailoverProcessServerRequestProperties;
import com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.RenewCertificateInput;
import com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.RenewCertificateInputProperties;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in ReplicationFabrics.
 */
public class ReplicationFabricsInner {
    /** The Retrofit service to perform REST calls. */
    private ReplicationFabricsService service;
    /** The service client containing this operation class. */
    private SiteRecoveryManagementClientImpl client;

    /**
     * Initializes an instance of ReplicationFabricsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public ReplicationFabricsInner(Retrofit retrofit, SiteRecoveryManagementClientImpl client) {
        this.service = retrofit.create(ReplicationFabricsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for ReplicationFabrics to be
     * used by Retrofit to perform actually REST calls.
     */
    interface ReplicationFabricsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationFabrics migrateToAad" })
        @POST("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/migratetoaad")
        Observable<Response<ResponseBody>> migrateToAad(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("fabricName") String fabricName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationFabrics beginMigrateToAad" })
        @POST("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/migratetoaad")
        Observable<Response<ResponseBody>> beginMigrateToAad(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("fabricName") String fabricName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationFabrics renewCertificate" })
        @POST("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/renewCertificate")
        Observable<Response<ResponseBody>> renewCertificate(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("fabricName") String fabricName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body RenewCertificateInput renewCertificate, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationFabrics beginRenewCertificate" })
        @POST("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/renewCertificate")
        Observable<Response<ResponseBody>> beginRenewCertificate(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("fabricName") String fabricName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body RenewCertificateInput renewCertificate, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationFabrics reassociateGateway" })
        @POST("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/reassociateGateway")
        Observable<Response<ResponseBody>> reassociateGateway(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("fabricName") String fabricName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body FailoverProcessServerRequest failoverProcessServerRequest, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationFabrics beginReassociateGateway" })
        @POST("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/reassociateGateway")
        Observable<Response<ResponseBody>> beginReassociateGateway(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("fabricName") String fabricName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body FailoverProcessServerRequest failoverProcessServerRequest, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationFabrics checkConsistency" })
        @POST("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/checkConsistency")
        Observable<Response<ResponseBody>> checkConsistency(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("fabricName") String fabricName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationFabrics beginCheckConsistency" })
        @POST("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/checkConsistency")
        Observable<Response<ResponseBody>> beginCheckConsistency(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("fabricName") String fabricName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationFabrics delete" })
        @POST("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/remove")
        Observable<Response<ResponseBody>> delete(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("fabricName") String fabricName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationFabrics beginDelete" })
        @POST("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/remove")
        Observable<Response<ResponseBody>> beginDelete(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("fabricName") String fabricName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationFabrics get" })
        @GET("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}")
        Observable<Response<ResponseBody>> get(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("fabricName") String fabricName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationFabrics create" })
        @PUT("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}")
        Observable<Response<ResponseBody>> create(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("fabricName") String fabricName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body FabricCreationInput input, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationFabrics beginCreate" })
        @PUT("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}")
        Observable<Response<ResponseBody>> beginCreate(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("fabricName") String fabricName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body FabricCreationInput input, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationFabrics purge" })
        @HTTP(path = "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> purge(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("fabricName") String fabricName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationFabrics beginPurge" })
        @HTTP(path = "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> beginPurge(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("fabricName") String fabricName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationFabrics list" })
        @GET("Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics")
        Observable<Response<ResponseBody>> list(@Path("resourceName") String resourceName, @Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.recoveryservices.siterecovery.v2016_08_10.ReplicationFabrics listNext" })
        @GET
        Observable<Response<ResponseBody>> listNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Migrates the site to AAD.
     * The operation to migrate an Azure Site Recovery fabric to AAD.
     *
     * @param fabricName ASR fabric to migrate.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void migrateToAad(String fabricName) {
        migrateToAadWithServiceResponseAsync(fabricName).toBlocking().last().body();
    }

    /**
     * Migrates the site to AAD.
     * The operation to migrate an Azure Site Recovery fabric to AAD.
     *
     * @param fabricName ASR fabric to migrate.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> migrateToAadAsync(String fabricName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(migrateToAadWithServiceResponseAsync(fabricName), serviceCallback);
    }

    /**
     * Migrates the site to AAD.
     * The operation to migrate an Azure Site Recovery fabric to AAD.
     *
     * @param fabricName ASR fabric to migrate.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Void> migrateToAadAsync(String fabricName) {
        return migrateToAadWithServiceResponseAsync(fabricName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Migrates the site to AAD.
     * The operation to migrate an Azure Site Recovery fabric to AAD.
     *
     * @param fabricName ASR fabric to migrate.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<Void>> migrateToAadWithServiceResponseAsync(String fabricName) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Observable<Response<ResponseBody>> observable = service.migrateToAad(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<Void>() { }.getType());
    }

    /**
     * Migrates the site to AAD.
     * The operation to migrate an Azure Site Recovery fabric to AAD.
     *
     * @param fabricName ASR fabric to migrate.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void beginMigrateToAad(String fabricName) {
        beginMigrateToAadWithServiceResponseAsync(fabricName).toBlocking().single().body();
    }

    /**
     * Migrates the site to AAD.
     * The operation to migrate an Azure Site Recovery fabric to AAD.
     *
     * @param fabricName ASR fabric to migrate.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> beginMigrateToAadAsync(String fabricName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(beginMigrateToAadWithServiceResponseAsync(fabricName), serviceCallback);
    }

    /**
     * Migrates the site to AAD.
     * The operation to migrate an Azure Site Recovery fabric to AAD.
     *
     * @param fabricName ASR fabric to migrate.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> beginMigrateToAadAsync(String fabricName) {
        return beginMigrateToAadWithServiceResponseAsync(fabricName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Migrates the site to AAD.
     * The operation to migrate an Azure Site Recovery fabric to AAD.
     *
     * @param fabricName ASR fabric to migrate.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> beginMigrateToAadWithServiceResponseAsync(String fabricName) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.beginMigrateToAad(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = beginMigrateToAadDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> beginMigrateToAadDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CloudException>newInstance(this.client.serializerAdapter())
                .register(202, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Renews certificate for the fabric.
     * Renews the connection certificate for the ASR replication fabric.
     *
     * @param fabricName fabric name to renew certs for.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the FabricInner object if successful.
     */
    public FabricInner renewCertificate(String fabricName) {
        return renewCertificateWithServiceResponseAsync(fabricName).toBlocking().last().body();
    }

    /**
     * Renews certificate for the fabric.
     * Renews the connection certificate for the ASR replication fabric.
     *
     * @param fabricName fabric name to renew certs for.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<FabricInner> renewCertificateAsync(String fabricName, final ServiceCallback<FabricInner> serviceCallback) {
        return ServiceFuture.fromResponse(renewCertificateWithServiceResponseAsync(fabricName), serviceCallback);
    }

    /**
     * Renews certificate for the fabric.
     * Renews the connection certificate for the ASR replication fabric.
     *
     * @param fabricName fabric name to renew certs for.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<FabricInner> renewCertificateAsync(String fabricName) {
        return renewCertificateWithServiceResponseAsync(fabricName).map(new Func1<ServiceResponse<FabricInner>, FabricInner>() {
            @Override
            public FabricInner call(ServiceResponse<FabricInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Renews certificate for the fabric.
     * Renews the connection certificate for the ASR replication fabric.
     *
     * @param fabricName fabric name to renew certs for.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<FabricInner>> renewCertificateWithServiceResponseAsync(String fabricName) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final RenewCertificateInputProperties properties = null;
        RenewCertificateInput renewCertificate = new RenewCertificateInput();
        renewCertificate.withProperties(null);
        Observable<Response<ResponseBody>> observable = service.renewCertificate(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, this.client.apiVersion(), this.client.acceptLanguage(), renewCertificate, this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<FabricInner>() { }.getType());
    }
    /**
     * Renews certificate for the fabric.
     * Renews the connection certificate for the ASR replication fabric.
     *
     * @param fabricName fabric name to renew certs for.
     * @param properties Renew certificate input properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the FabricInner object if successful.
     */
    public FabricInner renewCertificate(String fabricName, RenewCertificateInputProperties properties) {
        return renewCertificateWithServiceResponseAsync(fabricName, properties).toBlocking().last().body();
    }

    /**
     * Renews certificate for the fabric.
     * Renews the connection certificate for the ASR replication fabric.
     *
     * @param fabricName fabric name to renew certs for.
     * @param properties Renew certificate input properties.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<FabricInner> renewCertificateAsync(String fabricName, RenewCertificateInputProperties properties, final ServiceCallback<FabricInner> serviceCallback) {
        return ServiceFuture.fromResponse(renewCertificateWithServiceResponseAsync(fabricName, properties), serviceCallback);
    }

    /**
     * Renews certificate for the fabric.
     * Renews the connection certificate for the ASR replication fabric.
     *
     * @param fabricName fabric name to renew certs for.
     * @param properties Renew certificate input properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<FabricInner> renewCertificateAsync(String fabricName, RenewCertificateInputProperties properties) {
        return renewCertificateWithServiceResponseAsync(fabricName, properties).map(new Func1<ServiceResponse<FabricInner>, FabricInner>() {
            @Override
            public FabricInner call(ServiceResponse<FabricInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Renews certificate for the fabric.
     * Renews the connection certificate for the ASR replication fabric.
     *
     * @param fabricName fabric name to renew certs for.
     * @param properties Renew certificate input properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<FabricInner>> renewCertificateWithServiceResponseAsync(String fabricName, RenewCertificateInputProperties properties) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(properties);
        RenewCertificateInput renewCertificate = new RenewCertificateInput();
        renewCertificate.withProperties(properties);
        Observable<Response<ResponseBody>> observable = service.renewCertificate(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, this.client.apiVersion(), this.client.acceptLanguage(), renewCertificate, this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<FabricInner>() { }.getType());
    }

    /**
     * Renews certificate for the fabric.
     * Renews the connection certificate for the ASR replication fabric.
     *
     * @param fabricName fabric name to renew certs for.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the FabricInner object if successful.
     */
    public FabricInner beginRenewCertificate(String fabricName) {
        return beginRenewCertificateWithServiceResponseAsync(fabricName).toBlocking().single().body();
    }

    /**
     * Renews certificate for the fabric.
     * Renews the connection certificate for the ASR replication fabric.
     *
     * @param fabricName fabric name to renew certs for.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<FabricInner> beginRenewCertificateAsync(String fabricName, final ServiceCallback<FabricInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginRenewCertificateWithServiceResponseAsync(fabricName), serviceCallback);
    }

    /**
     * Renews certificate for the fabric.
     * Renews the connection certificate for the ASR replication fabric.
     *
     * @param fabricName fabric name to renew certs for.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the FabricInner object
     */
    public Observable<FabricInner> beginRenewCertificateAsync(String fabricName) {
        return beginRenewCertificateWithServiceResponseAsync(fabricName).map(new Func1<ServiceResponse<FabricInner>, FabricInner>() {
            @Override
            public FabricInner call(ServiceResponse<FabricInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Renews certificate for the fabric.
     * Renews the connection certificate for the ASR replication fabric.
     *
     * @param fabricName fabric name to renew certs for.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the FabricInner object
     */
    public Observable<ServiceResponse<FabricInner>> beginRenewCertificateWithServiceResponseAsync(String fabricName) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final RenewCertificateInputProperties properties = null;
        RenewCertificateInput renewCertificate = new RenewCertificateInput();
        renewCertificate.withProperties(null);
        return service.beginRenewCertificate(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, this.client.apiVersion(), this.client.acceptLanguage(), renewCertificate, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<FabricInner>>>() {
                @Override
                public Observable<ServiceResponse<FabricInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<FabricInner> clientResponse = beginRenewCertificateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Renews certificate for the fabric.
     * Renews the connection certificate for the ASR replication fabric.
     *
     * @param fabricName fabric name to renew certs for.
     * @param properties Renew certificate input properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the FabricInner object if successful.
     */
    public FabricInner beginRenewCertificate(String fabricName, RenewCertificateInputProperties properties) {
        return beginRenewCertificateWithServiceResponseAsync(fabricName, properties).toBlocking().single().body();
    }

    /**
     * Renews certificate for the fabric.
     * Renews the connection certificate for the ASR replication fabric.
     *
     * @param fabricName fabric name to renew certs for.
     * @param properties Renew certificate input properties.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<FabricInner> beginRenewCertificateAsync(String fabricName, RenewCertificateInputProperties properties, final ServiceCallback<FabricInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginRenewCertificateWithServiceResponseAsync(fabricName, properties), serviceCallback);
    }

    /**
     * Renews certificate for the fabric.
     * Renews the connection certificate for the ASR replication fabric.
     *
     * @param fabricName fabric name to renew certs for.
     * @param properties Renew certificate input properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the FabricInner object
     */
    public Observable<FabricInner> beginRenewCertificateAsync(String fabricName, RenewCertificateInputProperties properties) {
        return beginRenewCertificateWithServiceResponseAsync(fabricName, properties).map(new Func1<ServiceResponse<FabricInner>, FabricInner>() {
            @Override
            public FabricInner call(ServiceResponse<FabricInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Renews certificate for the fabric.
     * Renews the connection certificate for the ASR replication fabric.
     *
     * @param fabricName fabric name to renew certs for.
     * @param properties Renew certificate input properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the FabricInner object
     */
    public Observable<ServiceResponse<FabricInner>> beginRenewCertificateWithServiceResponseAsync(String fabricName, RenewCertificateInputProperties properties) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(properties);
        RenewCertificateInput renewCertificate = new RenewCertificateInput();
        renewCertificate.withProperties(properties);
        return service.beginRenewCertificate(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, this.client.apiVersion(), this.client.acceptLanguage(), renewCertificate, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<FabricInner>>>() {
                @Override
                public Observable<ServiceResponse<FabricInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<FabricInner> clientResponse = beginRenewCertificateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<FabricInner> beginRenewCertificateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<FabricInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<FabricInner>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Perform failover of the process server.
     * The operation to move replications from a process server to another process server.
     *
     * @param fabricName The name of the fabric containing the process server.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the FabricInner object if successful.
     */
    public FabricInner reassociateGateway(String fabricName) {
        return reassociateGatewayWithServiceResponseAsync(fabricName).toBlocking().last().body();
    }

    /**
     * Perform failover of the process server.
     * The operation to move replications from a process server to another process server.
     *
     * @param fabricName The name of the fabric containing the process server.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<FabricInner> reassociateGatewayAsync(String fabricName, final ServiceCallback<FabricInner> serviceCallback) {
        return ServiceFuture.fromResponse(reassociateGatewayWithServiceResponseAsync(fabricName), serviceCallback);
    }

    /**
     * Perform failover of the process server.
     * The operation to move replications from a process server to another process server.
     *
     * @param fabricName The name of the fabric containing the process server.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<FabricInner> reassociateGatewayAsync(String fabricName) {
        return reassociateGatewayWithServiceResponseAsync(fabricName).map(new Func1<ServiceResponse<FabricInner>, FabricInner>() {
            @Override
            public FabricInner call(ServiceResponse<FabricInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Perform failover of the process server.
     * The operation to move replications from a process server to another process server.
     *
     * @param fabricName The name of the fabric containing the process server.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<FabricInner>> reassociateGatewayWithServiceResponseAsync(String fabricName) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final FailoverProcessServerRequestProperties properties = null;
        FailoverProcessServerRequest failoverProcessServerRequest = new FailoverProcessServerRequest();
        failoverProcessServerRequest.withProperties(null);
        Observable<Response<ResponseBody>> observable = service.reassociateGateway(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, this.client.apiVersion(), this.client.acceptLanguage(), failoverProcessServerRequest, this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<FabricInner>() { }.getType());
    }
    /**
     * Perform failover of the process server.
     * The operation to move replications from a process server to another process server.
     *
     * @param fabricName The name of the fabric containing the process server.
     * @param properties The properties of the PS Failover request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the FabricInner object if successful.
     */
    public FabricInner reassociateGateway(String fabricName, FailoverProcessServerRequestProperties properties) {
        return reassociateGatewayWithServiceResponseAsync(fabricName, properties).toBlocking().last().body();
    }

    /**
     * Perform failover of the process server.
     * The operation to move replications from a process server to another process server.
     *
     * @param fabricName The name of the fabric containing the process server.
     * @param properties The properties of the PS Failover request.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<FabricInner> reassociateGatewayAsync(String fabricName, FailoverProcessServerRequestProperties properties, final ServiceCallback<FabricInner> serviceCallback) {
        return ServiceFuture.fromResponse(reassociateGatewayWithServiceResponseAsync(fabricName, properties), serviceCallback);
    }

    /**
     * Perform failover of the process server.
     * The operation to move replications from a process server to another process server.
     *
     * @param fabricName The name of the fabric containing the process server.
     * @param properties The properties of the PS Failover request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<FabricInner> reassociateGatewayAsync(String fabricName, FailoverProcessServerRequestProperties properties) {
        return reassociateGatewayWithServiceResponseAsync(fabricName, properties).map(new Func1<ServiceResponse<FabricInner>, FabricInner>() {
            @Override
            public FabricInner call(ServiceResponse<FabricInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Perform failover of the process server.
     * The operation to move replications from a process server to another process server.
     *
     * @param fabricName The name of the fabric containing the process server.
     * @param properties The properties of the PS Failover request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<FabricInner>> reassociateGatewayWithServiceResponseAsync(String fabricName, FailoverProcessServerRequestProperties properties) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(properties);
        FailoverProcessServerRequest failoverProcessServerRequest = new FailoverProcessServerRequest();
        failoverProcessServerRequest.withProperties(properties);
        Observable<Response<ResponseBody>> observable = service.reassociateGateway(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, this.client.apiVersion(), this.client.acceptLanguage(), failoverProcessServerRequest, this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<FabricInner>() { }.getType());
    }

    /**
     * Perform failover of the process server.
     * The operation to move replications from a process server to another process server.
     *
     * @param fabricName The name of the fabric containing the process server.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the FabricInner object if successful.
     */
    public FabricInner beginReassociateGateway(String fabricName) {
        return beginReassociateGatewayWithServiceResponseAsync(fabricName).toBlocking().single().body();
    }

    /**
     * Perform failover of the process server.
     * The operation to move replications from a process server to another process server.
     *
     * @param fabricName The name of the fabric containing the process server.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<FabricInner> beginReassociateGatewayAsync(String fabricName, final ServiceCallback<FabricInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginReassociateGatewayWithServiceResponseAsync(fabricName), serviceCallback);
    }

    /**
     * Perform failover of the process server.
     * The operation to move replications from a process server to another process server.
     *
     * @param fabricName The name of the fabric containing the process server.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the FabricInner object
     */
    public Observable<FabricInner> beginReassociateGatewayAsync(String fabricName) {
        return beginReassociateGatewayWithServiceResponseAsync(fabricName).map(new Func1<ServiceResponse<FabricInner>, FabricInner>() {
            @Override
            public FabricInner call(ServiceResponse<FabricInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Perform failover of the process server.
     * The operation to move replications from a process server to another process server.
     *
     * @param fabricName The name of the fabric containing the process server.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the FabricInner object
     */
    public Observable<ServiceResponse<FabricInner>> beginReassociateGatewayWithServiceResponseAsync(String fabricName) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final FailoverProcessServerRequestProperties properties = null;
        FailoverProcessServerRequest failoverProcessServerRequest = new FailoverProcessServerRequest();
        failoverProcessServerRequest.withProperties(null);
        return service.beginReassociateGateway(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, this.client.apiVersion(), this.client.acceptLanguage(), failoverProcessServerRequest, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<FabricInner>>>() {
                @Override
                public Observable<ServiceResponse<FabricInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<FabricInner> clientResponse = beginReassociateGatewayDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Perform failover of the process server.
     * The operation to move replications from a process server to another process server.
     *
     * @param fabricName The name of the fabric containing the process server.
     * @param properties The properties of the PS Failover request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the FabricInner object if successful.
     */
    public FabricInner beginReassociateGateway(String fabricName, FailoverProcessServerRequestProperties properties) {
        return beginReassociateGatewayWithServiceResponseAsync(fabricName, properties).toBlocking().single().body();
    }

    /**
     * Perform failover of the process server.
     * The operation to move replications from a process server to another process server.
     *
     * @param fabricName The name of the fabric containing the process server.
     * @param properties The properties of the PS Failover request.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<FabricInner> beginReassociateGatewayAsync(String fabricName, FailoverProcessServerRequestProperties properties, final ServiceCallback<FabricInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginReassociateGatewayWithServiceResponseAsync(fabricName, properties), serviceCallback);
    }

    /**
     * Perform failover of the process server.
     * The operation to move replications from a process server to another process server.
     *
     * @param fabricName The name of the fabric containing the process server.
     * @param properties The properties of the PS Failover request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the FabricInner object
     */
    public Observable<FabricInner> beginReassociateGatewayAsync(String fabricName, FailoverProcessServerRequestProperties properties) {
        return beginReassociateGatewayWithServiceResponseAsync(fabricName, properties).map(new Func1<ServiceResponse<FabricInner>, FabricInner>() {
            @Override
            public FabricInner call(ServiceResponse<FabricInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Perform failover of the process server.
     * The operation to move replications from a process server to another process server.
     *
     * @param fabricName The name of the fabric containing the process server.
     * @param properties The properties of the PS Failover request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the FabricInner object
     */
    public Observable<ServiceResponse<FabricInner>> beginReassociateGatewayWithServiceResponseAsync(String fabricName, FailoverProcessServerRequestProperties properties) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(properties);
        FailoverProcessServerRequest failoverProcessServerRequest = new FailoverProcessServerRequest();
        failoverProcessServerRequest.withProperties(properties);
        return service.beginReassociateGateway(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, this.client.apiVersion(), this.client.acceptLanguage(), failoverProcessServerRequest, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<FabricInner>>>() {
                @Override
                public Observable<ServiceResponse<FabricInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<FabricInner> clientResponse = beginReassociateGatewayDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<FabricInner> beginReassociateGatewayDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<FabricInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<FabricInner>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Checks the consistency of the ASR fabric.
     * The operation to perform a consistency check on the fabric.
     *
     * @param fabricName Fabric name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the FabricInner object if successful.
     */
    public FabricInner checkConsistency(String fabricName) {
        return checkConsistencyWithServiceResponseAsync(fabricName).toBlocking().last().body();
    }

    /**
     * Checks the consistency of the ASR fabric.
     * The operation to perform a consistency check on the fabric.
     *
     * @param fabricName Fabric name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<FabricInner> checkConsistencyAsync(String fabricName, final ServiceCallback<FabricInner> serviceCallback) {
        return ServiceFuture.fromResponse(checkConsistencyWithServiceResponseAsync(fabricName), serviceCallback);
    }

    /**
     * Checks the consistency of the ASR fabric.
     * The operation to perform a consistency check on the fabric.
     *
     * @param fabricName Fabric name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<FabricInner> checkConsistencyAsync(String fabricName) {
        return checkConsistencyWithServiceResponseAsync(fabricName).map(new Func1<ServiceResponse<FabricInner>, FabricInner>() {
            @Override
            public FabricInner call(ServiceResponse<FabricInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Checks the consistency of the ASR fabric.
     * The operation to perform a consistency check on the fabric.
     *
     * @param fabricName Fabric name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<FabricInner>> checkConsistencyWithServiceResponseAsync(String fabricName) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Observable<Response<ResponseBody>> observable = service.checkConsistency(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<FabricInner>() { }.getType());
    }

    /**
     * Checks the consistency of the ASR fabric.
     * The operation to perform a consistency check on the fabric.
     *
     * @param fabricName Fabric name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the FabricInner object if successful.
     */
    public FabricInner beginCheckConsistency(String fabricName) {
        return beginCheckConsistencyWithServiceResponseAsync(fabricName).toBlocking().single().body();
    }

    /**
     * Checks the consistency of the ASR fabric.
     * The operation to perform a consistency check on the fabric.
     *
     * @param fabricName Fabric name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<FabricInner> beginCheckConsistencyAsync(String fabricName, final ServiceCallback<FabricInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginCheckConsistencyWithServiceResponseAsync(fabricName), serviceCallback);
    }

    /**
     * Checks the consistency of the ASR fabric.
     * The operation to perform a consistency check on the fabric.
     *
     * @param fabricName Fabric name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the FabricInner object
     */
    public Observable<FabricInner> beginCheckConsistencyAsync(String fabricName) {
        return beginCheckConsistencyWithServiceResponseAsync(fabricName).map(new Func1<ServiceResponse<FabricInner>, FabricInner>() {
            @Override
            public FabricInner call(ServiceResponse<FabricInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Checks the consistency of the ASR fabric.
     * The operation to perform a consistency check on the fabric.
     *
     * @param fabricName Fabric name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the FabricInner object
     */
    public Observable<ServiceResponse<FabricInner>> beginCheckConsistencyWithServiceResponseAsync(String fabricName) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.beginCheckConsistency(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<FabricInner>>>() {
                @Override
                public Observable<ServiceResponse<FabricInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<FabricInner> clientResponse = beginCheckConsistencyDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<FabricInner> beginCheckConsistencyDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<FabricInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<FabricInner>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Deletes the site.
     * The operation to delete or remove an Azure Site Recovery fabric.
     *
     * @param fabricName ASR fabric to delete
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String fabricName) {
        deleteWithServiceResponseAsync(fabricName).toBlocking().last().body();
    }

    /**
     * Deletes the site.
     * The operation to delete or remove an Azure Site Recovery fabric.
     *
     * @param fabricName ASR fabric to delete
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String fabricName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(fabricName), serviceCallback);
    }

    /**
     * Deletes the site.
     * The operation to delete or remove an Azure Site Recovery fabric.
     *
     * @param fabricName ASR fabric to delete
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Void> deleteAsync(String fabricName) {
        return deleteWithServiceResponseAsync(fabricName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes the site.
     * The operation to delete or remove an Azure Site Recovery fabric.
     *
     * @param fabricName ASR fabric to delete
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String fabricName) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Observable<Response<ResponseBody>> observable = service.delete(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<Void>() { }.getType());
    }

    /**
     * Deletes the site.
     * The operation to delete or remove an Azure Site Recovery fabric.
     *
     * @param fabricName ASR fabric to delete
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void beginDelete(String fabricName) {
        beginDeleteWithServiceResponseAsync(fabricName).toBlocking().single().body();
    }

    /**
     * Deletes the site.
     * The operation to delete or remove an Azure Site Recovery fabric.
     *
     * @param fabricName ASR fabric to delete
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> beginDeleteAsync(String fabricName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(beginDeleteWithServiceResponseAsync(fabricName), serviceCallback);
    }

    /**
     * Deletes the site.
     * The operation to delete or remove an Azure Site Recovery fabric.
     *
     * @param fabricName ASR fabric to delete
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> beginDeleteAsync(String fabricName) {
        return beginDeleteWithServiceResponseAsync(fabricName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes the site.
     * The operation to delete or remove an Azure Site Recovery fabric.
     *
     * @param fabricName ASR fabric to delete
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> beginDeleteWithServiceResponseAsync(String fabricName) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.beginDelete(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = beginDeleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> beginDeleteDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CloudException>newInstance(this.client.serializerAdapter())
                .register(202, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets the details of an ASR fabric.
     * Gets the details of an Azure Site Recovery fabric.
     *
     * @param fabricName Fabric name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the FabricInner object if successful.
     */
    public FabricInner get(String fabricName) {
        return getWithServiceResponseAsync(fabricName).toBlocking().single().body();
    }

    /**
     * Gets the details of an ASR fabric.
     * Gets the details of an Azure Site Recovery fabric.
     *
     * @param fabricName Fabric name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<FabricInner> getAsync(String fabricName, final ServiceCallback<FabricInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(fabricName), serviceCallback);
    }

    /**
     * Gets the details of an ASR fabric.
     * Gets the details of an Azure Site Recovery fabric.
     *
     * @param fabricName Fabric name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the FabricInner object
     */
    public Observable<FabricInner> getAsync(String fabricName) {
        return getWithServiceResponseAsync(fabricName).map(new Func1<ServiceResponse<FabricInner>, FabricInner>() {
            @Override
            public FabricInner call(ServiceResponse<FabricInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets the details of an ASR fabric.
     * Gets the details of an Azure Site Recovery fabric.
     *
     * @param fabricName Fabric name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the FabricInner object
     */
    public Observable<ServiceResponse<FabricInner>> getWithServiceResponseAsync(String fabricName) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.get(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<FabricInner>>>() {
                @Override
                public Observable<ServiceResponse<FabricInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<FabricInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<FabricInner> getDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<FabricInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<FabricInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Creates an Azure Site Recovery fabric.
     * The operation to create an Azure Site Recovery fabric (for e.g. Hyper-V site).
     *
     * @param fabricName Name of the ASR fabric.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the FabricInner object if successful.
     */
    public FabricInner create(String fabricName) {
        return createWithServiceResponseAsync(fabricName).toBlocking().last().body();
    }

    /**
     * Creates an Azure Site Recovery fabric.
     * The operation to create an Azure Site Recovery fabric (for e.g. Hyper-V site).
     *
     * @param fabricName Name of the ASR fabric.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<FabricInner> createAsync(String fabricName, final ServiceCallback<FabricInner> serviceCallback) {
        return ServiceFuture.fromResponse(createWithServiceResponseAsync(fabricName), serviceCallback);
    }

    /**
     * Creates an Azure Site Recovery fabric.
     * The operation to create an Azure Site Recovery fabric (for e.g. Hyper-V site).
     *
     * @param fabricName Name of the ASR fabric.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<FabricInner> createAsync(String fabricName) {
        return createWithServiceResponseAsync(fabricName).map(new Func1<ServiceResponse<FabricInner>, FabricInner>() {
            @Override
            public FabricInner call(ServiceResponse<FabricInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates an Azure Site Recovery fabric.
     * The operation to create an Azure Site Recovery fabric (for e.g. Hyper-V site).
     *
     * @param fabricName Name of the ASR fabric.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<FabricInner>> createWithServiceResponseAsync(String fabricName) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final FabricCreationInputProperties properties = null;
        FabricCreationInput input = new FabricCreationInput();
        input.withProperties(null);
        Observable<Response<ResponseBody>> observable = service.create(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, this.client.apiVersion(), this.client.acceptLanguage(), input, this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<FabricInner>() { }.getType());
    }
    /**
     * Creates an Azure Site Recovery fabric.
     * The operation to create an Azure Site Recovery fabric (for e.g. Hyper-V site).
     *
     * @param fabricName Name of the ASR fabric.
     * @param properties Fabric creation input.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the FabricInner object if successful.
     */
    public FabricInner create(String fabricName, FabricCreationInputProperties properties) {
        return createWithServiceResponseAsync(fabricName, properties).toBlocking().last().body();
    }

    /**
     * Creates an Azure Site Recovery fabric.
     * The operation to create an Azure Site Recovery fabric (for e.g. Hyper-V site).
     *
     * @param fabricName Name of the ASR fabric.
     * @param properties Fabric creation input.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<FabricInner> createAsync(String fabricName, FabricCreationInputProperties properties, final ServiceCallback<FabricInner> serviceCallback) {
        return ServiceFuture.fromResponse(createWithServiceResponseAsync(fabricName, properties), serviceCallback);
    }

    /**
     * Creates an Azure Site Recovery fabric.
     * The operation to create an Azure Site Recovery fabric (for e.g. Hyper-V site).
     *
     * @param fabricName Name of the ASR fabric.
     * @param properties Fabric creation input.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<FabricInner> createAsync(String fabricName, FabricCreationInputProperties properties) {
        return createWithServiceResponseAsync(fabricName, properties).map(new Func1<ServiceResponse<FabricInner>, FabricInner>() {
            @Override
            public FabricInner call(ServiceResponse<FabricInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates an Azure Site Recovery fabric.
     * The operation to create an Azure Site Recovery fabric (for e.g. Hyper-V site).
     *
     * @param fabricName Name of the ASR fabric.
     * @param properties Fabric creation input.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<FabricInner>> createWithServiceResponseAsync(String fabricName, FabricCreationInputProperties properties) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(properties);
        FabricCreationInput input = new FabricCreationInput();
        input.withProperties(properties);
        Observable<Response<ResponseBody>> observable = service.create(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, this.client.apiVersion(), this.client.acceptLanguage(), input, this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<FabricInner>() { }.getType());
    }

    /**
     * Creates an Azure Site Recovery fabric.
     * The operation to create an Azure Site Recovery fabric (for e.g. Hyper-V site).
     *
     * @param fabricName Name of the ASR fabric.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the FabricInner object if successful.
     */
    public FabricInner beginCreate(String fabricName) {
        return beginCreateWithServiceResponseAsync(fabricName).toBlocking().single().body();
    }

    /**
     * Creates an Azure Site Recovery fabric.
     * The operation to create an Azure Site Recovery fabric (for e.g. Hyper-V site).
     *
     * @param fabricName Name of the ASR fabric.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<FabricInner> beginCreateAsync(String fabricName, final ServiceCallback<FabricInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginCreateWithServiceResponseAsync(fabricName), serviceCallback);
    }

    /**
     * Creates an Azure Site Recovery fabric.
     * The operation to create an Azure Site Recovery fabric (for e.g. Hyper-V site).
     *
     * @param fabricName Name of the ASR fabric.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the FabricInner object
     */
    public Observable<FabricInner> beginCreateAsync(String fabricName) {
        return beginCreateWithServiceResponseAsync(fabricName).map(new Func1<ServiceResponse<FabricInner>, FabricInner>() {
            @Override
            public FabricInner call(ServiceResponse<FabricInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates an Azure Site Recovery fabric.
     * The operation to create an Azure Site Recovery fabric (for e.g. Hyper-V site).
     *
     * @param fabricName Name of the ASR fabric.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the FabricInner object
     */
    public Observable<ServiceResponse<FabricInner>> beginCreateWithServiceResponseAsync(String fabricName) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final FabricCreationInputProperties properties = null;
        FabricCreationInput input = new FabricCreationInput();
        input.withProperties(null);
        return service.beginCreate(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, this.client.apiVersion(), this.client.acceptLanguage(), input, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<FabricInner>>>() {
                @Override
                public Observable<ServiceResponse<FabricInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<FabricInner> clientResponse = beginCreateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Creates an Azure Site Recovery fabric.
     * The operation to create an Azure Site Recovery fabric (for e.g. Hyper-V site).
     *
     * @param fabricName Name of the ASR fabric.
     * @param properties Fabric creation input.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the FabricInner object if successful.
     */
    public FabricInner beginCreate(String fabricName, FabricCreationInputProperties properties) {
        return beginCreateWithServiceResponseAsync(fabricName, properties).toBlocking().single().body();
    }

    /**
     * Creates an Azure Site Recovery fabric.
     * The operation to create an Azure Site Recovery fabric (for e.g. Hyper-V site).
     *
     * @param fabricName Name of the ASR fabric.
     * @param properties Fabric creation input.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<FabricInner> beginCreateAsync(String fabricName, FabricCreationInputProperties properties, final ServiceCallback<FabricInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginCreateWithServiceResponseAsync(fabricName, properties), serviceCallback);
    }

    /**
     * Creates an Azure Site Recovery fabric.
     * The operation to create an Azure Site Recovery fabric (for e.g. Hyper-V site).
     *
     * @param fabricName Name of the ASR fabric.
     * @param properties Fabric creation input.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the FabricInner object
     */
    public Observable<FabricInner> beginCreateAsync(String fabricName, FabricCreationInputProperties properties) {
        return beginCreateWithServiceResponseAsync(fabricName, properties).map(new Func1<ServiceResponse<FabricInner>, FabricInner>() {
            @Override
            public FabricInner call(ServiceResponse<FabricInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates an Azure Site Recovery fabric.
     * The operation to create an Azure Site Recovery fabric (for e.g. Hyper-V site).
     *
     * @param fabricName Name of the ASR fabric.
     * @param properties Fabric creation input.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the FabricInner object
     */
    public Observable<ServiceResponse<FabricInner>> beginCreateWithServiceResponseAsync(String fabricName, FabricCreationInputProperties properties) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(properties);
        FabricCreationInput input = new FabricCreationInput();
        input.withProperties(properties);
        return service.beginCreate(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, this.client.apiVersion(), this.client.acceptLanguage(), input, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<FabricInner>>>() {
                @Override
                public Observable<ServiceResponse<FabricInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<FabricInner> clientResponse = beginCreateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<FabricInner> beginCreateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<FabricInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<FabricInner>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Purges the site.
     * The operation to purge(force delete) an Azure Site Recovery fabric.
     *
     * @param fabricName ASR fabric to purge.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void purge(String fabricName) {
        purgeWithServiceResponseAsync(fabricName).toBlocking().last().body();
    }

    /**
     * Purges the site.
     * The operation to purge(force delete) an Azure Site Recovery fabric.
     *
     * @param fabricName ASR fabric to purge.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> purgeAsync(String fabricName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(purgeWithServiceResponseAsync(fabricName), serviceCallback);
    }

    /**
     * Purges the site.
     * The operation to purge(force delete) an Azure Site Recovery fabric.
     *
     * @param fabricName ASR fabric to purge.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Void> purgeAsync(String fabricName) {
        return purgeWithServiceResponseAsync(fabricName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Purges the site.
     * The operation to purge(force delete) an Azure Site Recovery fabric.
     *
     * @param fabricName ASR fabric to purge.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<Void>> purgeWithServiceResponseAsync(String fabricName) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Observable<Response<ResponseBody>> observable = service.purge(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<Void>() { }.getType());
    }

    /**
     * Purges the site.
     * The operation to purge(force delete) an Azure Site Recovery fabric.
     *
     * @param fabricName ASR fabric to purge.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void beginPurge(String fabricName) {
        beginPurgeWithServiceResponseAsync(fabricName).toBlocking().single().body();
    }

    /**
     * Purges the site.
     * The operation to purge(force delete) an Azure Site Recovery fabric.
     *
     * @param fabricName ASR fabric to purge.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> beginPurgeAsync(String fabricName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(beginPurgeWithServiceResponseAsync(fabricName), serviceCallback);
    }

    /**
     * Purges the site.
     * The operation to purge(force delete) an Azure Site Recovery fabric.
     *
     * @param fabricName ASR fabric to purge.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> beginPurgeAsync(String fabricName) {
        return beginPurgeWithServiceResponseAsync(fabricName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Purges the site.
     * The operation to purge(force delete) an Azure Site Recovery fabric.
     *
     * @param fabricName ASR fabric to purge.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> beginPurgeWithServiceResponseAsync(String fabricName) {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (fabricName == null) {
            throw new IllegalArgumentException("Parameter fabricName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.beginPurge(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), fabricName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = beginPurgeDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> beginPurgeDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CloudException>newInstance(this.client.serializerAdapter())
                .register(202, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets the list of ASR fabrics.
     * Gets a list of the Azure Site Recovery fabrics in the vault.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;FabricInner&gt; object if successful.
     */
    public PagedList<FabricInner> list() {
        ServiceResponse<Page<FabricInner>> response = listSinglePageAsync().toBlocking().single();
        return new PagedList<FabricInner>(response.body()) {
            @Override
            public Page<FabricInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets the list of ASR fabrics.
     * Gets a list of the Azure Site Recovery fabrics in the vault.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<FabricInner>> listAsync(final ListOperationCallback<FabricInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSinglePageAsync(),
            new Func1<String, Observable<ServiceResponse<Page<FabricInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<FabricInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets the list of ASR fabrics.
     * Gets a list of the Azure Site Recovery fabrics in the vault.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;FabricInner&gt; object
     */
    public Observable<Page<FabricInner>> listAsync() {
        return listWithServiceResponseAsync()
            .map(new Func1<ServiceResponse<Page<FabricInner>>, Page<FabricInner>>() {
                @Override
                public Page<FabricInner> call(ServiceResponse<Page<FabricInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets the list of ASR fabrics.
     * Gets a list of the Azure Site Recovery fabrics in the vault.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;FabricInner&gt; object
     */
    public Observable<ServiceResponse<Page<FabricInner>>> listWithServiceResponseAsync() {
        return listSinglePageAsync()
            .concatMap(new Func1<ServiceResponse<Page<FabricInner>>, Observable<ServiceResponse<Page<FabricInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<FabricInner>>> call(ServiceResponse<Page<FabricInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets the list of ASR fabrics.
     * Gets a list of the Azure Site Recovery fabrics in the vault.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;FabricInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<FabricInner>>> listSinglePageAsync() {
        if (this.client.resourceName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceName() is required and cannot be null.");
        }
        if (this.client.resourceGroupName() == null) {
            throw new IllegalArgumentException("Parameter this.client.resourceGroupName() is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.list(this.client.resourceName(), this.client.resourceGroupName(), this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<FabricInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<FabricInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<FabricInner>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<FabricInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<FabricInner>> listDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<FabricInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<FabricInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets the list of ASR fabrics.
     * Gets a list of the Azure Site Recovery fabrics in the vault.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;FabricInner&gt; object if successful.
     */
    public PagedList<FabricInner> listNext(final String nextPageLink) {
        ServiceResponse<Page<FabricInner>> response = listNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<FabricInner>(response.body()) {
            @Override
            public Page<FabricInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets the list of ASR fabrics.
     * Gets a list of the Azure Site Recovery fabrics in the vault.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<FabricInner>> listNextAsync(final String nextPageLink, final ServiceFuture<List<FabricInner>> serviceFuture, final ListOperationCallback<FabricInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<FabricInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<FabricInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets the list of ASR fabrics.
     * Gets a list of the Azure Site Recovery fabrics in the vault.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;FabricInner&gt; object
     */
    public Observable<Page<FabricInner>> listNextAsync(final String nextPageLink) {
        return listNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<FabricInner>>, Page<FabricInner>>() {
                @Override
                public Page<FabricInner> call(ServiceResponse<Page<FabricInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets the list of ASR fabrics.
     * Gets a list of the Azure Site Recovery fabrics in the vault.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;FabricInner&gt; object
     */
    public Observable<ServiceResponse<Page<FabricInner>>> listNextWithServiceResponseAsync(final String nextPageLink) {
        return listNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<FabricInner>>, Observable<ServiceResponse<Page<FabricInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<FabricInner>>> call(ServiceResponse<Page<FabricInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets the list of ASR fabrics.
     * Gets a list of the Azure Site Recovery fabrics in the vault.
     *
    ServiceResponse<PageImpl<FabricInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;FabricInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<FabricInner>>> listNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<FabricInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<FabricInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<FabricInner>> result = listNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<FabricInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<FabricInner>> listNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<FabricInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<FabricInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
