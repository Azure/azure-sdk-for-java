// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.privatedns.generated.models;

import com.azure.core.management.Region;
import com.azure.core.management.SubResource;
import com.azure.core.util.Context;
import com.azure.resourcemanager.privatedns.generated.fluent.models.VirtualNetworkLinkInner;
import java.util.Map;

/** An immutable client-side representation of VirtualNetworkLink. */
public interface VirtualNetworkLink {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     *
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     *
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     *
     * @return the type value.
     */
    String type();

    /**
     * Gets the location property: The geo-location where the resource lives.
     *
     * @return the location value.
     */
    String location();

    /**
     * Gets the tags property: Resource tags.
     *
     * @return the tags value.
     */
    Map<String, String> tags();

    /**
     * Gets the etag property: The ETag of the virtual network link.
     *
     * @return the etag value.
     */
    String etag();

    /**
     * Gets the virtualNetwork property: The reference of the virtual network.
     *
     * @return the virtualNetwork value.
     */
    SubResource virtualNetwork();

    /**
     * Gets the registrationEnabled property: Is auto-registration of virtual machine records in the virtual network in
     * the Private DNS zone enabled?.
     *
     * @return the registrationEnabled value.
     */
    Boolean registrationEnabled();

    /**
     * Gets the virtualNetworkLinkState property: The status of the virtual network link to the Private DNS zone.
     * Possible values are 'InProgress' and 'Done'. This is a read-only property and any attempt to set this value will
     * be ignored.
     *
     * @return the virtualNetworkLinkState value.
     */
    VirtualNetworkLinkState virtualNetworkLinkState();

    /**
     * Gets the provisioningState property: The provisioning state of the resource. This is a read-only property and any
     * attempt to set this value will be ignored.
     *
     * @return the provisioningState value.
     */
    ProvisioningState provisioningState();

    /**
     * Gets the region of the resource.
     *
     * @return the region of the resource.
     */
    Region region();

    /**
     * Gets the name of the resource region.
     *
     * @return the name of the resource region.
     */
    String regionName();

    /**
     * Gets the inner com.azure.resourcemanager.privatedns.generated.fluent.models.VirtualNetworkLinkInner object.
     *
     * @return the inner object.
     */
    VirtualNetworkLinkInner innerModel();

    /** The entirety of the VirtualNetworkLink definition. */
    interface Definition
        extends DefinitionStages.Blank,
            DefinitionStages.WithLocation,
            DefinitionStages.WithParentResource,
            DefinitionStages.WithCreate {
    }
    /** The VirtualNetworkLink definition stages. */
    interface DefinitionStages {
        /** The first stage of the VirtualNetworkLink definition. */
        interface Blank extends WithLocation {
        }
        /** The stage of the VirtualNetworkLink definition allowing to specify location. */
        interface WithLocation {
            /**
             * Specifies the region for the resource.
             *
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithParentResource withRegion(Region location);

            /**
             * Specifies the region for the resource.
             *
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithParentResource withRegion(String location);
        }
        /** The stage of the VirtualNetworkLink definition allowing to specify parent resource. */
        interface WithParentResource {
            /**
             * Specifies resourceGroupName, privateZoneName.
             *
             * @param resourceGroupName The name of the resource group.
             * @param privateZoneName The name of the Private DNS zone (without a terminating dot).
             * @return the next definition stage.
             */
            WithCreate withExistingPrivateDnsZone(String resourceGroupName, String privateZoneName);
        }
        /**
         * The stage of the VirtualNetworkLink definition which contains all the minimum required properties for the
         * resource to be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate
            extends DefinitionStages.WithTags,
                DefinitionStages.WithEtag,
                DefinitionStages.WithVirtualNetwork,
                DefinitionStages.WithRegistrationEnabled,
                DefinitionStages.WithIfMatch,
                DefinitionStages.WithIfNoneMatch {
            /**
             * Executes the create request.
             *
             * @return the created resource.
             */
            VirtualNetworkLink create();

            /**
             * Executes the create request.
             *
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            VirtualNetworkLink create(Context context);
        }
        /** The stage of the VirtualNetworkLink definition allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             *
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            WithCreate withTags(Map<String, String> tags);
        }
        /** The stage of the VirtualNetworkLink definition allowing to specify etag. */
        interface WithEtag {
            /**
             * Specifies the etag property: The ETag of the virtual network link..
             *
             * @param etag The ETag of the virtual network link.
             * @return the next definition stage.
             */
            WithCreate withEtag(String etag);
        }
        /** The stage of the VirtualNetworkLink definition allowing to specify virtualNetwork. */
        interface WithVirtualNetwork {
            /**
             * Specifies the virtualNetwork property: The reference of the virtual network..
             *
             * @param virtualNetwork The reference of the virtual network.
             * @return the next definition stage.
             */
            WithCreate withVirtualNetwork(SubResource virtualNetwork);
        }
        /** The stage of the VirtualNetworkLink definition allowing to specify registrationEnabled. */
        interface WithRegistrationEnabled {
            /**
             * Specifies the registrationEnabled property: Is auto-registration of virtual machine records in the
             * virtual network in the Private DNS zone enabled?.
             *
             * @param registrationEnabled Is auto-registration of virtual machine records in the virtual network in the
             *     Private DNS zone enabled?.
             * @return the next definition stage.
             */
            WithCreate withRegistrationEnabled(Boolean registrationEnabled);
        }
        /** The stage of the VirtualNetworkLink definition allowing to specify ifMatch. */
        interface WithIfMatch {
            /**
             * Specifies the ifMatch property: The ETag of the virtual network link to the Private DNS zone. Omit this
             * value to always overwrite the current virtual network link. Specify the last-seen ETag value to prevent
             * accidentally overwriting any concurrent changes..
             *
             * @param ifMatch The ETag of the virtual network link to the Private DNS zone. Omit this value to always
             *     overwrite the current virtual network link. Specify the last-seen ETag value to prevent accidentally
             *     overwriting any concurrent changes.
             * @return the next definition stage.
             */
            WithCreate withIfMatch(String ifMatch);
        }
        /** The stage of the VirtualNetworkLink definition allowing to specify ifNoneMatch. */
        interface WithIfNoneMatch {
            /**
             * Specifies the ifNoneMatch property: Set to '*' to allow a new virtual network link to the Private DNS
             * zone to be created, but to prevent updating an existing link. Other values will be ignored..
             *
             * @param ifNoneMatch Set to '*' to allow a new virtual network link to the Private DNS zone to be created,
             *     but to prevent updating an existing link. Other values will be ignored.
             * @return the next definition stage.
             */
            WithCreate withIfNoneMatch(String ifNoneMatch);
        }
    }
    /**
     * Begins update for the VirtualNetworkLink resource.
     *
     * @return the stage of resource update.
     */
    VirtualNetworkLink.Update update();

    /** The template for VirtualNetworkLink update. */
    interface Update
        extends UpdateStages.WithTags,
            UpdateStages.WithEtag,
            UpdateStages.WithVirtualNetwork,
            UpdateStages.WithRegistrationEnabled,
            UpdateStages.WithIfMatch {
        /**
         * Executes the update request.
         *
         * @return the updated resource.
         */
        VirtualNetworkLink apply();

        /**
         * Executes the update request.
         *
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        VirtualNetworkLink apply(Context context);
    }
    /** The VirtualNetworkLink update stages. */
    interface UpdateStages {
        /** The stage of the VirtualNetworkLink update allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             *
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            Update withTags(Map<String, String> tags);
        }
        /** The stage of the VirtualNetworkLink update allowing to specify etag. */
        interface WithEtag {
            /**
             * Specifies the etag property: The ETag of the virtual network link..
             *
             * @param etag The ETag of the virtual network link.
             * @return the next definition stage.
             */
            Update withEtag(String etag);
        }
        /** The stage of the VirtualNetworkLink update allowing to specify virtualNetwork. */
        interface WithVirtualNetwork {
            /**
             * Specifies the virtualNetwork property: The reference of the virtual network..
             *
             * @param virtualNetwork The reference of the virtual network.
             * @return the next definition stage.
             */
            Update withVirtualNetwork(SubResource virtualNetwork);
        }
        /** The stage of the VirtualNetworkLink update allowing to specify registrationEnabled. */
        interface WithRegistrationEnabled {
            /**
             * Specifies the registrationEnabled property: Is auto-registration of virtual machine records in the
             * virtual network in the Private DNS zone enabled?.
             *
             * @param registrationEnabled Is auto-registration of virtual machine records in the virtual network in the
             *     Private DNS zone enabled?.
             * @return the next definition stage.
             */
            Update withRegistrationEnabled(Boolean registrationEnabled);
        }
        /** The stage of the VirtualNetworkLink update allowing to specify ifMatch. */
        interface WithIfMatch {
            /**
             * Specifies the ifMatch property: The ETag of the virtual network link to the Private DNS zone. Omit this
             * value to always overwrite the current virtual network link. Specify the last-seen ETag value to prevent
             * accidentally overwriting any concurrent changes..
             *
             * @param ifMatch The ETag of the virtual network link to the Private DNS zone. Omit this value to always
             *     overwrite the current virtual network link. Specify the last-seen ETag value to prevent accidentally
             *     overwriting any concurrent changes.
             * @return the next definition stage.
             */
            Update withIfMatch(String ifMatch);
        }
    }
    /**
     * Refreshes the resource to sync with Azure.
     *
     * @return the refreshed resource.
     */
    VirtualNetworkLink refresh();

    /**
     * Refreshes the resource to sync with Azure.
     *
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    VirtualNetworkLink refresh(Context context);
}
