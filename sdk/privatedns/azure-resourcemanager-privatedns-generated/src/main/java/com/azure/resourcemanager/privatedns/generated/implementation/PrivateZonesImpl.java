// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.privatedns.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.privatedns.generated.fluent.PrivateZonesClient;
import com.azure.resourcemanager.privatedns.generated.fluent.models.PrivateZoneInner;
import com.azure.resourcemanager.privatedns.generated.models.PrivateZone;
import com.azure.resourcemanager.privatedns.generated.models.PrivateZones;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class PrivateZonesImpl implements PrivateZones {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(PrivateZonesImpl.class);

    private final PrivateZonesClient innerClient;

    private final com.azure.resourcemanager.privatedns.generated.PrivateDnsManager serviceManager;

    public PrivateZonesImpl(
        PrivateZonesClient innerClient,
        com.azure.resourcemanager.privatedns.generated.PrivateDnsManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public void delete(String resourceGroupName, String privateZoneName, String ifMatch) {
        this.serviceClient().delete(resourceGroupName, privateZoneName, ifMatch);
    }

    public void delete(String resourceGroupName, String privateZoneName) {
        this.serviceClient().delete(resourceGroupName, privateZoneName);
    }

    public void delete(String resourceGroupName, String privateZoneName, String ifMatch, Context context) {
        this.serviceClient().delete(resourceGroupName, privateZoneName, ifMatch, context);
    }

    public PrivateZone getByResourceGroup(String resourceGroupName, String privateZoneName) {
        PrivateZoneInner inner = this.serviceClient().getByResourceGroup(resourceGroupName, privateZoneName);
        if (inner != null) {
            return new PrivateZoneImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<PrivateZone> getByResourceGroupWithResponse(
        String resourceGroupName, String privateZoneName, Context context) {
        Response<PrivateZoneInner> inner =
            this.serviceClient().getByResourceGroupWithResponse(resourceGroupName, privateZoneName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new PrivateZoneImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PagedIterable<PrivateZone> list() {
        PagedIterable<PrivateZoneInner> inner = this.serviceClient().list();
        return Utils.mapPage(inner, inner1 -> new PrivateZoneImpl(inner1, this.manager()));
    }

    public PagedIterable<PrivateZone> list(Integer top, Context context) {
        PagedIterable<PrivateZoneInner> inner = this.serviceClient().list(top, context);
        return Utils.mapPage(inner, inner1 -> new PrivateZoneImpl(inner1, this.manager()));
    }

    public PagedIterable<PrivateZone> listByResourceGroup(String resourceGroupName) {
        PagedIterable<PrivateZoneInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName);
        return Utils.mapPage(inner, inner1 -> new PrivateZoneImpl(inner1, this.manager()));
    }

    public PagedIterable<PrivateZone> listByResourceGroup(String resourceGroupName, Integer top, Context context) {
        PagedIterable<PrivateZoneInner> inner =
            this.serviceClient().listByResourceGroup(resourceGroupName, top, context);
        return Utils.mapPage(inner, inner1 -> new PrivateZoneImpl(inner1, this.manager()));
    }

    public PrivateZone getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String privateZoneName = Utils.getValueFromIdByName(id, "privateDnsZones");
        if (privateZoneName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'privateDnsZones'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, privateZoneName, Context.NONE).getValue();
    }

    public Response<PrivateZone> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String privateZoneName = Utils.getValueFromIdByName(id, "privateDnsZones");
        if (privateZoneName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'privateDnsZones'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, privateZoneName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String privateZoneName = Utils.getValueFromIdByName(id, "privateDnsZones");
        if (privateZoneName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'privateDnsZones'.", id)));
        }
        String localIfMatch = null;
        this.delete(resourceGroupName, privateZoneName, localIfMatch, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, String ifMatch, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String privateZoneName = Utils.getValueFromIdByName(id, "privateDnsZones");
        if (privateZoneName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'privateDnsZones'.", id)));
        }
        this.delete(resourceGroupName, privateZoneName, ifMatch, context);
    }

    private PrivateZonesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.privatedns.generated.PrivateDnsManager manager() {
        return this.serviceManager;
    }

    public PrivateZoneImpl define(String name) {
        return new PrivateZoneImpl(name, this.manager());
    }
}
