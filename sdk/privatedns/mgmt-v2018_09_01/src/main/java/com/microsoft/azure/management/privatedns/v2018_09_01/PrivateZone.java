/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.privatedns.v2018_09_01;

import com.microsoft.azure.arm.model.HasInner;
import com.microsoft.azure.arm.resources.models.Resource;
import com.microsoft.azure.arm.resources.models.GroupableResourceCore;
import com.microsoft.azure.arm.resources.models.HasResourceGroup;
import com.microsoft.azure.arm.model.Refreshable;
import com.microsoft.azure.arm.model.Updatable;
import com.microsoft.azure.arm.model.Appliable;
import com.microsoft.azure.arm.model.Creatable;
import com.microsoft.azure.arm.resources.models.HasManager;
import com.microsoft.azure.management.privatedns.v2018_09_01.implementation.privatednsManager;
import com.microsoft.azure.management.privatedns.v2018_09_01.implementation.PrivateZoneInner;

/**
 * Type representing PrivateZone.
 */
public interface PrivateZone extends HasInner<PrivateZoneInner>, Resource, GroupableResourceCore<privatednsManager, PrivateZoneInner>, HasResourceGroup, Refreshable<PrivateZone>, Updatable<PrivateZone.Update>, HasManager<privatednsManager> {
    /**
     * @return the etag value.
     */
    String etag();

    /**
     * @return the maxNumberOfRecordSets value.
     */
    Long maxNumberOfRecordSets();

    /**
     * @return the maxNumberOfVirtualNetworkLinks value.
     */
    Long maxNumberOfVirtualNetworkLinks();

    /**
     * @return the maxNumberOfVirtualNetworkLinksWithRegistration value.
     */
    Long maxNumberOfVirtualNetworkLinksWithRegistration();

    /**
     * @return the numberOfRecordSets value.
     */
    Long numberOfRecordSets();

    /**
     * @return the numberOfVirtualNetworkLinks value.
     */
    Long numberOfVirtualNetworkLinks();

    /**
     * @return the numberOfVirtualNetworkLinksWithRegistration value.
     */
    Long numberOfVirtualNetworkLinksWithRegistration();

    /**
     * @return the provisioningState value.
     */
    ProvisioningState provisioningState();

    /**
     * The entirety of the PrivateZone definition.
     */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithGroup, DefinitionStages.WithIfMatch, DefinitionStages.WithIfNoneMatch, DefinitionStages.WithCreate {
    }

    /**
     * Grouping of PrivateZone definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of a PrivateZone definition.
         */
        interface Blank extends GroupableResourceCore.DefinitionWithRegion<WithGroup> {
        }

        /**
         * The stage of the PrivateZone definition allowing to specify the resource group.
         */
        interface WithGroup extends GroupableResourceCore.DefinitionStages.WithGroup<WithIfMatch> {
        }

        /**
         * The stage of the privatezone definition allowing to specify IfMatch.
         */
        interface WithIfMatch {
           /**
            * Specifies ifMatch.
            * @param ifMatch The ETag of the Private DNS zone. Omit this value to always overwrite the current zone. Specify the last-seen ETag value to prevent accidentally overwriting any concurrent changes
            * @return the next definition stage
*/
            WithIfNoneMatch withIfMatch(String ifMatch);
        }

        /**
         * The stage of the privatezone definition allowing to specify IfNoneMatch.
         */
        interface WithIfNoneMatch {
           /**
            * Specifies ifNoneMatch.
            * @param ifNoneMatch Set to '*' to allow a new Private DNS zone to be created, but to prevent updating an existing zone. Other values will be ignored
            * @return the next definition stage
*/
            WithCreate withIfNoneMatch(String ifNoneMatch);
        }

        /**
         * The stage of the privatezone definition allowing to specify Etag.
         */
        interface WithEtag {
            /**
             * Specifies etag.
             * @param etag The ETag of the zone
             * @return the next definition stage
             */
            WithCreate withEtag(String etag);
        }

        /**
         * The stage of the definition which contains all the minimum required inputs for
         * the resource to be created (via {@link WithCreate#create()}), but also allows
         * for any other optional settings to be specified.
         */
        interface WithCreate extends Creatable<PrivateZone>, Resource.DefinitionWithTags<WithCreate>, DefinitionStages.WithEtag {
        }
    }
    /**
     * The template for a PrivateZone update operation, containing all the settings that can be modified.
     */
    interface Update extends Appliable<PrivateZone>, Resource.UpdateWithTags<Update>, UpdateStages.WithIfMatch, UpdateStages.WithEtag {
    }

    /**
     * Grouping of PrivateZone update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the privatezone update allowing to specify IfMatch.
         */
        interface WithIfMatch {
            /**
             * Specifies ifMatch.
             * @param ifMatch The ETag of the Private DNS zone. Omit this value to always overwrite the current zone. Specify the last-seen ETag value to prevent accidentally overwriting any concurrent changes
             * @return the next update stage
             */
            Update withIfMatch(String ifMatch);
        }

        /**
         * The stage of the privatezone update allowing to specify Etag.
         */
        interface WithEtag {
            /**
             * Specifies etag.
             * @param etag The ETag of the zone
             * @return the next update stage
             */
            Update withEtag(String etag);
        }

    }
}
