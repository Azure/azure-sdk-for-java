/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * abc
 */

package com.microsoft.azure.management.privatedns.v2018_09_01.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.privatedns.v2018_09_01.RecordSets;
import rx.Completable;
import rx.functions.Func1;
import rx.Observable;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.privatedns.v2018_09_01.RecordSet;
import com.microsoft.azure.management.privatedns.v2018_09_01.RecordType;

class RecordSetsImpl extends WrapperImpl<RecordSetsInner> implements RecordSets {
    private final privatednsManager manager;

    RecordSetsImpl(privatednsManager manager) {
        super(manager.inner().recordSets());
        this.manager = manager;
    }

    public privatednsManager manager() {
        return this.manager;
    }

    @Override
    public Observable<RecordSet> createOrUpdateAsync(String resourceGroupName, String privateZoneName, RecordType recordType, String relativeRecordSetName, RecordSetInner parameters) {
        RecordSetsInner client = this.inner();
        return client.createOrUpdateAsync(resourceGroupName, privateZoneName, recordType, relativeRecordSetName, parameters)
        .map(new Func1<RecordSetInner, RecordSet>() {
            @Override
            public RecordSet call(RecordSetInner inner) {
                return new RecordSetImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<RecordSet> updateAsync(String resourceGroupName, String privateZoneName, RecordType recordType, String relativeRecordSetName, RecordSetInner parameters) {
        RecordSetsInner client = this.inner();
        return client.updateAsync(resourceGroupName, privateZoneName, recordType, relativeRecordSetName, parameters)
        .map(new Func1<RecordSetInner, RecordSet>() {
            @Override
            public RecordSet call(RecordSetInner inner) {
                return new RecordSetImpl(inner, manager());
            }
        });
    }

    @Override
    public Completable deleteAsync(String resourceGroupName, String privateZoneName, RecordType recordType, String relativeRecordSetName) {
        RecordSetsInner client = this.inner();
        return client.deleteAsync(resourceGroupName, privateZoneName, recordType, relativeRecordSetName).toCompletable();
    }

    @Override
    public Observable<RecordSet> getAsync(String resourceGroupName, String privateZoneName, RecordType recordType, String relativeRecordSetName) {
        RecordSetsInner client = this.inner();
        return client.getAsync(resourceGroupName, privateZoneName, recordType, relativeRecordSetName)
        .map(new Func1<RecordSetInner, RecordSet>() {
            @Override
            public RecordSet call(RecordSetInner inner) {
                return new RecordSetImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<RecordSet> listByTypeAsync(final String resourceGroupName, final String privateZoneName, final RecordType recordType) {
        RecordSetsInner client = this.inner();
        return client.listByTypeAsync(resourceGroupName, privateZoneName, recordType)
        .flatMapIterable(new Func1<Page<RecordSetInner>, Iterable<RecordSetInner>>() {
            @Override
            public Iterable<RecordSetInner> call(Page<RecordSetInner> page) {
                return page.items();
            }
        })
        .map(new Func1<RecordSetInner, RecordSet>() {
            @Override
            public RecordSet call(RecordSetInner inner) {
                return new RecordSetImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<RecordSet> listAsync(final String resourceGroupName, final String privateZoneName) {
        RecordSetsInner client = this.inner();
        return client.listAsync(resourceGroupName, privateZoneName)
        .flatMapIterable(new Func1<Page<RecordSetInner>, Iterable<RecordSetInner>>() {
            @Override
            public Iterable<RecordSetInner> call(Page<RecordSetInner> page) {
                return page.items();
            }
        })
        .map(new Func1<RecordSetInner, RecordSet>() {
            @Override
            public RecordSet call(RecordSetInner inner) {
                return new RecordSetImpl(inner, manager());
            }
        });
    }

}
