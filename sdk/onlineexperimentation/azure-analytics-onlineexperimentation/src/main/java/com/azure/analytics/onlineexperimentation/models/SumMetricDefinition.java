// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.analytics.onlineexperimentation.models;

import com.azure.analytics.onlineexperimentation.implementation.JsonMergePatchHelper;
import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.HashSet;
import java.util.Set;

/**
 * The definition of a Sum metric definition. Calculates the sum of a specified event property. Experiment analysis
 * accounts for unequal traffic allocation.
 */
@Fluent
public final class SumMetricDefinition extends ExperimentMetricDefinition {

    /*
     * Discriminator property for ExperimentMetricDefinition.
     */
    @Generated
    private ExperimentMetricType type = ExperimentMetricType.SUM;

    /*
     * The value to aggregate.
     */
    @Generated
    private AggregatedValue value;

    /**
     * Stores updated model property, the value is property name, not serialized name.
     */
    @Generated
    private final Set<String> updatedProperties = new HashSet<>();

    /**
     * Creates an instance of SumMetricDefinition class.
     */
    @Generated
    public SumMetricDefinition() {
    }

    /**
     * Creates an instance of SumMetricDefinition with the specified event name and property.
     *
     * @param eventName The name of the event.
     * @param eventProperty The key of the event property to aggregate.
     */
    public SumMetricDefinition(String eventName, String eventProperty) {
        this.setValue(new AggregatedValue().setEventName(eventName).setEventProperty(eventProperty));
    }

    /**
     * Get the type property: Discriminator property for ExperimentMetricDefinition.
     *
     * @return the type value.
     */
    @Generated
    @Override
    public ExperimentMetricType getType() {
        return this.type;
    }

    /**
     * Get the value property: The value to aggregate.
     *
     * @return the value value.
     */
    @Generated
    public AggregatedValue getValue() {
        return this.value;
    }

    /**
     * Set the value property: The value to aggregate.
     * <p>Required when create the resource.</p>
     *
     * @param value the value value to set.
     * @return the SumMetricDefinition object itself.
     */
    @Generated
    public SumMetricDefinition setValue(AggregatedValue value) {
        this.value = value;
        this.updatedProperties.add("value");
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        if (JsonMergePatchHelper.getExperimentMetricDefinitionAccessor().isJsonMergePatch(this)) {
            return toJsonMergePatch(jsonWriter);
        } else {
            jsonWriter.writeStartObject();
            jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
            jsonWriter.writeJsonField("value", this.value);
            return jsonWriter.writeEndObject();
        }
    }

    @Generated
    private JsonWriter toJsonMergePatch(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type.toString());
        if (updatedProperties.contains("value")) {
            if (this.value == null) {
                jsonWriter.writeNullField("value");
            } else {
                JsonMergePatchHelper.getAggregatedValueAccessor().prepareModelForJsonMergePatch(this.value, true);
                jsonWriter.writeJsonField("value", this.value);
                JsonMergePatchHelper.getAggregatedValueAccessor().prepareModelForJsonMergePatch(this.value, false);
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SumMetricDefinition from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of SumMetricDefinition if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the SumMetricDefinition.
     */
    @Generated
    public static SumMetricDefinition fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SumMetricDefinition deserializedSumMetricDefinition = new SumMetricDefinition();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("type".equals(fieldName)) {
                    deserializedSumMetricDefinition.type = ExperimentMetricType.fromString(reader.getString());
                } else if ("value".equals(fieldName)) {
                    deserializedSumMetricDefinition.value = AggregatedValue.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedSumMetricDefinition;
        });
    }
}
