// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.analytics.onlineexperimentation.models;

import com.azure.analytics.onlineexperimentation.implementation.JsonMergePatchHelper;
import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.HashSet;
import java.util.Set;

/**
 * The metric definition, which determines how the metric value is calculated from event data.
 */
@Immutable
public class ExperimentMetricDefinition implements JsonSerializable<ExperimentMetricDefinition> {

    /*
     * Discriminator property for ExperimentMetricDefinition.
     */
    @Generated
    private ExperimentMetricType type = ExperimentMetricType.fromString("ExperimentMetricDefinition");

    /**
     * Stores updated model property, the value is property name, not serialized name.
     */
    @Generated
    private final Set<String> updatedProperties = new HashSet<>();

    @Generated
    private boolean jsonMergePatch;

    @Generated
    private void serializeAsJsonMergePatch(boolean jsonMergePatch) {
        this.jsonMergePatch = jsonMergePatch;
    }

    static {
        JsonMergePatchHelper
            .setExperimentMetricDefinitionAccessor(new JsonMergePatchHelper.ExperimentMetricDefinitionAccessor() {

                @Override
                public ExperimentMetricDefinition prepareModelForJsonMergePatch(ExperimentMetricDefinition model,
                    boolean jsonMergePatchEnabled) {
                    model.serializeAsJsonMergePatch(jsonMergePatchEnabled);
                    return model;
                }

                @Override
                public boolean isJsonMergePatch(ExperimentMetricDefinition model) {
                    return model.jsonMergePatch;
                }
            });
    }

    /**
     * Creates an instance of ExperimentMetricDefinition class.
     */
    @Generated
    public ExperimentMetricDefinition() {
    }

    /**
     * Get the type property: Discriminator property for ExperimentMetricDefinition.
     *
     * @return the type value.
     */
    @Generated
    public ExperimentMetricType getType() {
        return this.type;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        if (jsonMergePatch) {
            return toJsonMergePatch(jsonWriter);
        } else {
            jsonWriter.writeStartObject();
            jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
            return jsonWriter.writeEndObject();
        }
    }

    @Generated
    private JsonWriter toJsonMergePatch(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ExperimentMetricDefinition from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of ExperimentMetricDefinition if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ExperimentMetricDefinition.
     */
    @Generated
    public static ExperimentMetricDefinition fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String discriminatorValue = null;
            try (JsonReader readerToUse = reader.bufferObject()) {
                // Prepare for reading
                readerToUse.nextToken();
                while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                    String fieldName = readerToUse.getFieldName();
                    readerToUse.nextToken();
                    if ("type".equals(fieldName)) {
                        discriminatorValue = readerToUse.getString();
                        break;
                    } else {
                        readerToUse.skipChildren();
                    }
                }
                // Use the discriminator value to determine which subtype should be deserialized.
                if ("EventCount".equals(discriminatorValue)) {
                    return EventCountMetricDefinition.fromJson(readerToUse.reset());
                } else if ("UserCount".equals(discriminatorValue)) {
                    return UserCountMetricDefinition.fromJson(readerToUse.reset());
                } else if ("EventRate".equals(discriminatorValue)) {
                    return EventRateMetricDefinition.fromJson(readerToUse.reset());
                } else if ("UserRate".equals(discriminatorValue)) {
                    return UserRateMetricDefinition.fromJson(readerToUse.reset());
                } else if ("Sum".equals(discriminatorValue)) {
                    return SumMetricDefinition.fromJson(readerToUse.reset());
                } else if ("Average".equals(discriminatorValue)) {
                    return AverageMetricDefinition.fromJson(readerToUse.reset());
                } else if ("Percentile".equals(discriminatorValue)) {
                    return PercentileMetricDefinition.fromJson(readerToUse.reset());
                } else {
                    return fromJsonKnownDiscriminator(readerToUse.reset());
                }
            }
        });
    }

    @Generated
    static ExperimentMetricDefinition fromJsonKnownDiscriminator(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ExperimentMetricDefinition deserializedExperimentMetricDefinition = new ExperimentMetricDefinition();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("type".equals(fieldName)) {
                    deserializedExperimentMetricDefinition.type = ExperimentMetricType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedExperimentMetricDefinition;
        });
    }
}
