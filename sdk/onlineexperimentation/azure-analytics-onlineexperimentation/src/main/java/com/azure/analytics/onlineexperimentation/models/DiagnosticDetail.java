// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.analytics.onlineexperimentation.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Diagnostic details for validation errors.
 */
@Immutable
public final class DiagnosticDetail implements JsonSerializable<DiagnosticDetail> {

    /*
     * A human-readable error message.
     */
    @Generated
    private String message;

    /*
     * The diagnostic error code.
     */
    @Generated
    private DiagnosticCode code;

    /**
     * Creates an instance of DiagnosticDetail class.
     */
    @Generated
    private DiagnosticDetail() {
    }

    /**
     * Get the message property: A human-readable error message.
     *
     * @return the message value.
     */
    @Generated
    public String getMessage() {
        return this.message;
    }

    /**
     * Get the code property: The diagnostic error code.
     *
     * @return the code value.
     */
    @Generated
    public DiagnosticCode getCode() {
        return this.code;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DiagnosticDetail from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of DiagnosticDetail if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DiagnosticDetail.
     */
    @Generated
    public static DiagnosticDetail fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DiagnosticDetail deserializedDiagnosticDetail = new DiagnosticDetail();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("message".equals(fieldName)) {
                    deserializedDiagnosticDetail.message = reader.getString();
                } else if ("code".equals(fieldName)) {
                    deserializedDiagnosticDetail.code = DiagnosticCode.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedDiagnosticDetail;
        });
    }
}
