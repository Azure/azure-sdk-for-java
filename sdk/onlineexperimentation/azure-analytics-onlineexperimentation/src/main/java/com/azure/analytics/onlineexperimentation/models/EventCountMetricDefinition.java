// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.analytics.onlineexperimentation.models;

import com.azure.analytics.onlineexperimentation.implementation.JsonMergePatchHelper;
import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.HashSet;
import java.util.Set;

/**
 * The definition of an EventCount metric definition. Counts the occurrences of a specified event.
 */
@Fluent
public final class EventCountMetricDefinition extends ExperimentMetricDefinition {

    /*
     * Discriminator property for ExperimentMetricDefinition.
     */
    @Generated
    private ExperimentMetricType type = ExperimentMetricType.EVENT_COUNT;

    /*
     * Event to observe.
     */
    @Generated
    private ObservedEvent event;

    /**
     * Stores updated model property, the value is property name, not serialized name.
     */
    @Generated
    private final Set<String> updatedProperties = new HashSet<>();

    /**
     * Creates an instance of EventCountMetricDefinition class.
     */
    @Generated
    public EventCountMetricDefinition() {
    }

    /**
     * Creates an instance of EventCountMetricDefinition with the specified event name.
     *
     * @param eventName Name of the event to observe.
     */
    public EventCountMetricDefinition(String eventName) {
        this.setEvent(new ObservedEvent().setEventName(eventName));
    }

    /**
     * Get the type property: Discriminator property for ExperimentMetricDefinition.
     *
     * @return the type value.
     */
    @Generated
    @Override
    public ExperimentMetricType getType() {
        return this.type;
    }

    /**
     * Get the event property: Event to observe.
     *
     * @return the event value.
     */
    @Generated
    public ObservedEvent getEvent() {
        return this.event;
    }

    /**
     * Set the event property: Event to observe.
     * <p>Required when create the resource.</p>
     *
     * @param event the event value to set.
     * @return the EventCountMetricDefinition object itself.
     */
    @Generated
    public EventCountMetricDefinition setEvent(ObservedEvent event) {
        this.event = event;
        this.updatedProperties.add("event");
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        if (JsonMergePatchHelper.getExperimentMetricDefinitionAccessor().isJsonMergePatch(this)) {
            return toJsonMergePatch(jsonWriter);
        } else {
            jsonWriter.writeStartObject();
            jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
            jsonWriter.writeJsonField("event", this.event);
            return jsonWriter.writeEndObject();
        }
    }

    @Generated
    private JsonWriter toJsonMergePatch(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type.toString());
        if (updatedProperties.contains("event")) {
            if (this.event == null) {
                jsonWriter.writeNullField("event");
            } else {
                JsonMergePatchHelper.getObservedEventAccessor().prepareModelForJsonMergePatch(this.event, true);
                jsonWriter.writeJsonField("event", this.event);
                JsonMergePatchHelper.getObservedEventAccessor().prepareModelForJsonMergePatch(this.event, false);
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EventCountMetricDefinition from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of EventCountMetricDefinition if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the EventCountMetricDefinition.
     */
    @Generated
    public static EventCountMetricDefinition fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            EventCountMetricDefinition deserializedEventCountMetricDefinition = new EventCountMetricDefinition();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("type".equals(fieldName)) {
                    deserializedEventCountMetricDefinition.type = ExperimentMetricType.fromString(reader.getString());
                } else if ("event".equals(fieldName)) {
                    deserializedEventCountMetricDefinition.event = ObservedEvent.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedEventCountMetricDefinition;
        });
    }
}
