// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.analytics.onlineexperimentation;

import com.azure.analytics.onlineexperimentation.implementation.JsonMergePatchHelper;
import com.azure.analytics.onlineexperimentation.implementation.OnlineExperimentationClientImpl;
import com.azure.analytics.onlineexperimentation.models.ExperimentMetric;
import com.azure.analytics.onlineexperimentation.models.ExperimentMetricValidationResult;
import com.azure.analytics.onlineexperimentation.models.LifecycleStage;
import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.HttpHeaderName;
import com.azure.core.http.RequestConditions;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.BinaryData;
import com.azure.core.util.DateTimeRfc1123;
import com.azure.core.util.ETag;
import java.time.OffsetDateTime;

/**
 * Initializes a new instance of the synchronous OnlineExperimentationClient type.
 */
@ServiceClient(builder = OnlineExperimentationClientBuilder.class)
public final class OnlineExperimentationClient {

    @Generated
    private final OnlineExperimentationClientImpl serviceClient;

    /**
     * Initializes an instance of OnlineExperimentationClient class.
     *
     * @param serviceClient the service client implementation.
     */
    @Generated
    OnlineExperimentationClient(OnlineExperimentationClientImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Fetches an experiment metric by ID.
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>The request should only proceed if an entity matches this
     * string.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>The request should only proceed if no entity matches this
     * string.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>The request should only proceed if the
     * entity was not modified after this time.</td></tr>
     * <tr><td>If-Modified-Since</td><td>OffsetDateTime</td><td>No</td><td>The request should only proceed if the entity
     * was modified after this time.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Response Body Schema</strong></p>
     *
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     lifecycle: String(Active/Inactive) (Optional, Required on create)
     *     displayName: String (Optional, Required on create)
     *     description: String (Optional, Required on create)
     *     categories (Optional, Required on create): [
     *         String (Optional, Required on create)
     *     ]
     *     desiredDirection: String(Increase/Decrease/Neutral) (Optional, Required on create)
     *     definition (Optional, Required on create): {
     *         type: String(EventCount/UserCount/EventRate/UserRate/Sum/Average/Percentile) (Required)
     *     }
     *     eTag: String (Required)
     *     lastModifiedAt: OffsetDateTime (Required)
     * }
     * }
     * </pre>
     *
     * @param experimentMetricId Identifier for this experiment metric. Must start with a lowercase letter and contain
     * only lowercase letters, numbers, and underscores.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return defines experiment metric metadata and computation details along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getMetricWithResponse(String experimentMetricId, RequestOptions requestOptions) {
        return this.serviceClient.getMetricWithResponse(experimentMetricId, requestOptions);
    }

    /**
     * Creates or updates an experiment metric.
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>The request should only proceed if an entity matches this
     * string.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>The request should only proceed if no entity matches this
     * string.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>The request should only proceed if the
     * entity was not modified after this time.</td></tr>
     * <tr><td>If-Modified-Since</td><td>OffsetDateTime</td><td>No</td><td>The request should only proceed if the entity
     * was modified after this time.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Request Body Schema</strong></p>
     *
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     lifecycle: String(Active/Inactive) (Optional, Required on create)
     *     displayName: String (Optional, Required on create)
     *     description: String (Optional, Required on create)
     *     categories (Optional, Required on create): [
     *         String (Optional, Required on create)
     *     ]
     *     desiredDirection: String(Increase/Decrease/Neutral) (Optional, Required on create)
     *     definition (Optional, Required on create): {
     *         type: String(EventCount/UserCount/EventRate/UserRate/Sum/Average/Percentile) (Required)
     *     }
     *     eTag: String (Required)
     *     lastModifiedAt: OffsetDateTime (Required)
     * }
     * }
     * </pre>
     *
     * <p><strong>Response Body Schema</strong></p>
     *
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     lifecycle: String(Active/Inactive) (Optional, Required on create)
     *     displayName: String (Optional, Required on create)
     *     description: String (Optional, Required on create)
     *     categories (Optional, Required on create): [
     *         String (Optional, Required on create)
     *     ]
     *     desiredDirection: String(Increase/Decrease/Neutral) (Optional, Required on create)
     *     definition (Optional, Required on create): {
     *         type: String(EventCount/UserCount/EventRate/UserRate/Sum/Average/Percentile) (Required)
     *     }
     *     eTag: String (Required)
     *     lastModifiedAt: OffsetDateTime (Required)
     * }
     * }
     * </pre>
     *
     * @param experimentMetricId Identifier for this experiment metric. Must start with a lowercase letter and contain
     * only lowercase letters, numbers, and underscores.
     * @param resource The resource instance.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return defines experiment metric metadata and computation details along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createOrUpdateMetricWithResponse(String experimentMetricId, BinaryData resource,
        RequestOptions requestOptions) {
        return this.serviceClient.createOrUpdateMetricWithResponse(experimentMetricId, resource, requestOptions);
    }

    /**
     * Validates an experiment metric definition.
     * <p><strong>Request Body Schema</strong></p>
     *
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     lifecycle: String(Active/Inactive) (Optional, Required on create)
     *     displayName: String (Optional, Required on create)
     *     description: String (Optional, Required on create)
     *     categories (Optional, Required on create): [
     *         String (Optional, Required on create)
     *     ]
     *     desiredDirection: String(Increase/Decrease/Neutral) (Optional, Required on create)
     *     definition (Optional, Required on create): {
     *         type: String(EventCount/UserCount/EventRate/UserRate/Sum/Average/Percentile) (Required)
     *     }
     *     eTag: String (Required)
     *     lastModifiedAt: OffsetDateTime (Required)
     * }
     * }
     * </pre>
     *
     * <p><strong>Response Body Schema</strong></p>
     *
     * <pre>
     * {@code
     * {
     *     isValid: boolean (Required)
     *     diagnostics (Required): [
     *          (Required){
     *             message: String (Required)
     *             code: String(FailedSchemaValidation/InvalidEventCondition/UnsupportedEventCondition/InvalidExperimentMetricDefinition) (Required)
     *         }
     *     ]
     * }
     * }
     * </pre>
     *
     * @param body Experiment metric input to validate.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the result of validating an experiment metric along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> validateMetricWithResponse(BinaryData body, RequestOptions requestOptions) {
        return this.serviceClient.validateMetricWithResponse(body, requestOptions);
    }

    /**
     * Deletes an experiment metric.
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>The request should only proceed if an entity matches this
     * string.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>The request should only proceed if no entity matches this
     * string.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>The request should only proceed if the
     * entity was not modified after this time.</td></tr>
     * <tr><td>If-Modified-Since</td><td>OffsetDateTime</td><td>No</td><td>The request should only proceed if the entity
     * was modified after this time.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * @param experimentMetricId Identifier for this experiment metric. Must start with a lowercase letter and contain
     * only lowercase letters, numbers, and underscores.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteMetricWithResponse(String experimentMetricId, RequestOptions requestOptions) {
        return this.serviceClient.deleteMetricWithResponse(experimentMetricId, requestOptions);
    }

    /**
     * Lists experiment metrics.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>The number of result items to return.</td></tr>
     * <tr><td>skip</td><td>Integer</td><td>No</td><td>The number of result items to skip.</td></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maximum number of result items per page.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     *
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     lifecycle: String(Active/Inactive) (Optional, Required on create)
     *     displayName: String (Optional, Required on create)
     *     description: String (Optional, Required on create)
     *     categories (Optional, Required on create): [
     *         String (Optional, Required on create)
     *     ]
     *     desiredDirection: String(Increase/Decrease/Neutral) (Optional, Required on create)
     *     definition (Optional, Required on create): {
     *         type: String(EventCount/UserCount/EventRate/UserRate/Sum/Average/Percentile) (Required)
     *     }
     *     eTag: String (Required)
     *     lastModifiedAt: OffsetDateTime (Required)
     * }
     * }
     * </pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of ExperimentMetric items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listMetrics(RequestOptions requestOptions) {
        return this.serviceClient.listMetrics(requestOptions);
    }

    /**
     * Fetches an experiment metric by ID.
     *
     * @param experimentMetricId Identifier for this experiment metric. Must start with a lowercase letter and contain
     * only lowercase letters, numbers, and underscores.
     * @param requestConditions Specifies HTTP options for conditional requests based on modification time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return defines experiment metric metadata and computation details.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ExperimentMetric getMetric(String experimentMetricId, RequestConditions requestConditions) {
        // Generated convenience method for getMetricWithResponse
        RequestOptions requestOptions = new RequestOptions();
        String ifMatch = requestConditions == null ? null : requestConditions.getIfMatch();
        String ifNoneMatch = requestConditions == null ? null : requestConditions.getIfNoneMatch();
        OffsetDateTime ifUnmodifiedSince = requestConditions == null ? null : requestConditions.getIfUnmodifiedSince();
        OffsetDateTime ifModifiedSince = requestConditions == null ? null : requestConditions.getIfModifiedSince();
        if (ifMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MATCH, ifMatch);
        }
        if (ifNoneMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_NONE_MATCH, ifNoneMatch);
        }
        if (ifUnmodifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_UNMODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifUnmodifiedSince)));
        }
        if (ifModifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifModifiedSince)));
        }
        return getMetricWithResponse(experimentMetricId, requestOptions).getValue().toObject(ExperimentMetric.class);
    }

    /**
     * Fetches an experiment metric by ID.
     *
     * @param experimentMetricId Identifier for this experiment metric. Must start with a lowercase letter and contain
     * only lowercase letters, numbers, and underscores.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return defines experiment metric metadata and computation details.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ExperimentMetric getMetric(String experimentMetricId) {
        // Generated convenience method for getMetricWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getMetricWithResponse(experimentMetricId, requestOptions).getValue().toObject(ExperimentMetric.class);
    }

    /**
     * Creates or updates an experiment metric.
     *
     * @param experimentMetricId Identifier for this experiment metric. Must start with a lowercase letter and contain
     * only lowercase letters, numbers, and underscores.
     * @param resource The resource instance.
     * @param requestConditions Specifies HTTP options for conditional requests based on modification time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return defines experiment metric metadata and computation details.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ExperimentMetric createOrUpdateMetric(String experimentMetricId, ExperimentMetric resource,
        RequestConditions requestConditions) {
        // Generated convenience method for createOrUpdateMetricWithResponse
        RequestOptions requestOptions = new RequestOptions();
        String ifMatch = requestConditions == null ? null : requestConditions.getIfMatch();
        String ifNoneMatch = requestConditions == null ? null : requestConditions.getIfNoneMatch();
        OffsetDateTime ifUnmodifiedSince = requestConditions == null ? null : requestConditions.getIfUnmodifiedSince();
        OffsetDateTime ifModifiedSince = requestConditions == null ? null : requestConditions.getIfModifiedSince();
        if (ifMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MATCH, ifMatch);
        }
        if (ifNoneMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_NONE_MATCH, ifNoneMatch);
        }
        if (ifUnmodifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_UNMODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifUnmodifiedSince)));
        }
        if (ifModifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifModifiedSince)));
        }
        JsonMergePatchHelper.getExperimentMetricAccessor().prepareModelForJsonMergePatch(resource, true);
        BinaryData resourceInBinaryData = BinaryData.fromObject(resource);
        // BinaryData.fromObject() will not fire serialization, use getLength() to fire serialization.
        resourceInBinaryData.getLength();
        JsonMergePatchHelper.getExperimentMetricAccessor().prepareModelForJsonMergePatch(resource, false);
        return createOrUpdateMetricWithResponse(experimentMetricId, resourceInBinaryData, requestOptions).getValue()
            .toObject(ExperimentMetric.class);
    }

    /**
     * Creates or updates an experiment metric.
     *
     * @param experimentMetricId Identifier for this experiment metric. Must start with a lowercase letter and contain
     * only lowercase letters, numbers, and underscores.
     * @param resource The resource instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return defines experiment metric metadata and computation details.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ExperimentMetric createOrUpdateMetric(String experimentMetricId, ExperimentMetric resource) {
        // Generated convenience method for createOrUpdateMetricWithResponse
        RequestOptions requestOptions = new RequestOptions();
        JsonMergePatchHelper.getExperimentMetricAccessor().prepareModelForJsonMergePatch(resource, true);
        BinaryData resourceInBinaryData = BinaryData.fromObject(resource);
        // BinaryData.fromObject() will not fire serialization, use getLength() to fire serialization.
        resourceInBinaryData.getLength();
        JsonMergePatchHelper.getExperimentMetricAccessor().prepareModelForJsonMergePatch(resource, false);
        return createOrUpdateMetricWithResponse(experimentMetricId, resourceInBinaryData, requestOptions).getValue()
            .toObject(ExperimentMetric.class);
    }

    /**
     * Validates an experiment metric definition.
     *
     * @param body Experiment metric input to validate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of validating an experiment metric.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ExperimentMetricValidationResult validateMetric(ExperimentMetric body) {
        // Generated convenience method for validateMetricWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return validateMetricWithResponse(BinaryData.fromObject(body), requestOptions).getValue()
            .toObject(ExperimentMetricValidationResult.class);
    }

    /**
     * Deletes an experiment metric.
     *
     * @param experimentMetricId Identifier for this experiment metric. Must start with a lowercase letter and contain
     * only lowercase letters, numbers, and underscores.
     * @param requestConditions Specifies HTTP options for conditional requests based on modification time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteMetric(String experimentMetricId, RequestConditions requestConditions) {
        // Generated convenience method for deleteMetricWithResponse
        RequestOptions requestOptions = new RequestOptions();
        String ifMatch = requestConditions == null ? null : requestConditions.getIfMatch();
        String ifNoneMatch = requestConditions == null ? null : requestConditions.getIfNoneMatch();
        OffsetDateTime ifUnmodifiedSince = requestConditions == null ? null : requestConditions.getIfUnmodifiedSince();
        OffsetDateTime ifModifiedSince = requestConditions == null ? null : requestConditions.getIfModifiedSince();
        if (ifMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MATCH, ifMatch);
        }
        if (ifNoneMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_NONE_MATCH, ifNoneMatch);
        }
        if (ifUnmodifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_UNMODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifUnmodifiedSince)));
        }
        if (ifModifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifModifiedSince)));
        }
        deleteMetricWithResponse(experimentMetricId, requestOptions).getValue();
    }

    /**
     * Deletes an experiment metric.
     *
     * @param experimentMetricId Identifier for this experiment metric. Must start with a lowercase letter and contain
     * only lowercase letters, numbers, and underscores.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteMetric(String experimentMetricId) {
        // Generated convenience method for deleteMetricWithResponse
        RequestOptions requestOptions = new RequestOptions();
        deleteMetricWithResponse(experimentMetricId, requestOptions).getValue();
    }

    /**
     * Lists experiment metrics.
     *
     * @param top The number of result items to return.
     * @param skip The number of result items to skip.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of ExperimentMetric items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ExperimentMetric> listMetrics(Integer top, Integer skip) {
        // Generated convenience method for listMetrics
        RequestOptions requestOptions = new RequestOptions();
        if (top != null) {
            requestOptions.addQueryParam("top", String.valueOf(top), false);
        }
        if (skip != null) {
            requestOptions.addQueryParam("skip", String.valueOf(skip), false);
        }
        return serviceClient.listMetrics(requestOptions)
            .mapPage(bodyItemValue -> bodyItemValue.toObject(ExperimentMetric.class));
    }

    /**
     * Lists experiment metrics.
     *
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of ExperimentMetric items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ExperimentMetric> listMetrics() {
        // Generated convenience method for listMetrics
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.listMetrics(requestOptions)
            .mapPage(bodyItemValue -> bodyItemValue.toObject(ExperimentMetric.class));
    }

    /**
     * Creates or updates an experiment metric with response and conditional headers from RequestConditions.
     *
     * @param experimentMetricId Identifier for this experiment metric. Must start with a lowercase letter and contain
     * only lowercase letters, numbers, and underscores.
     * @param resource The resource instance.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return defines experiment metric metadata and computation details along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ExperimentMetric> createOrUpdateMetricWithResponse(String experimentMetricId,
        ExperimentMetric resource, RequestOptions requestOptions) {

        JsonMergePatchHelper.getExperimentMetricAccessor().prepareModelForJsonMergePatch(resource, true);
        BinaryData resourceInBinaryData = BinaryData.fromObject(resource);
        resourceInBinaryData.getLength(); // Force serialization
        JsonMergePatchHelper.getExperimentMetricAccessor().prepareModelForJsonMergePatch(resource, false);

        Response<BinaryData> response
            = createOrUpdateMetricWithResponse(experimentMetricId, resourceInBinaryData, requestOptions);

        return new SimpleResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(),
            response.getValue().toObject(ExperimentMetric.class));
    }

    /**
     * Creates or updates an experiment metric.
     *
     * @param experimentMetricId Identifier for this experiment metric. Must start with a lowercase letter and contain
     * only lowercase letters, numbers, and underscores.
     * @param resource The resource instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return defines experiment metric metadata and computation details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ExperimentMetric createMetric(String experimentMetricId, ExperimentMetric resource) {
        return createOrUpdateMetric(experimentMetricId, resource,
            new RequestConditions().setIfNoneMatch(ETag.ALL.toString()));
    }

    /**
     * Creates an experiment metric with a response.
     *
     * @param experimentMetricId Identifier for this experiment metric. Must start with a lowercase letter and contain
     * only lowercase letters, numbers, and underscores.
     * @param resource The resource instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return defines experiment metric metadata and computation details along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ExperimentMetric> createMetricWithResponse(String experimentMetricId, ExperimentMetric resource) {
        RequestOptions requestOptions = new RequestOptions();
        requestOptions.setHeader(HttpHeaderName.IF_NONE_MATCH, ETag.ALL.toString());

        return createOrUpdateMetricWithResponse(experimentMetricId, resource, requestOptions);
    }

    /**
     * Creates or updates an experiment metric.
     *
     * @param experimentMetricId Identifier for this experiment metric. Must start with a lowercase letter and contain
     * only lowercase letters, numbers, and underscores.
     * @param resource The resource instance.
     * @param ifMatch The ETag value to match for the request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return defines experiment metric metadata and computation details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ExperimentMetric updateMetric(String experimentMetricId, ExperimentMetric resource, String ifMatch) {
        return createOrUpdateMetric(experimentMetricId, resource, new RequestConditions().setIfMatch(ifMatch));
    }

    /**
     * Creates or updates an experiment metric.
     *
     * @param experimentMetricId Identifier for this experiment metric. Must start with a lowercase letter and contain
     * only lowercase letters, numbers, and underscores.
     * @param resource The resource instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return defines experiment metric metadata and computation details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ExperimentMetric updateMetric(String experimentMetricId, ExperimentMetric resource) {
        return updateMetric(experimentMetricId, resource, ETag.ALL.toString());
    }

    /**
     * Updates an experiment metric with a response.
     *
     * @param experimentMetricId Identifier for this experiment metric. Must start with a lowercase letter and contain
     * only lowercase letters, numbers, and underscores.
     * @param resource The resource instance.
     * @param ifMatch The ETag value to match for the request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return defines experiment metric metadata and computation details along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ExperimentMetric> updateMetricWithResponse(String experimentMetricId, ExperimentMetric resource,
        String ifMatch) {
        RequestOptions requestOptions = new RequestOptions();
        requestOptions.setHeader(HttpHeaderName.IF_MATCH, ifMatch);

        return createOrUpdateMetricWithResponse(experimentMetricId, resource, requestOptions);
    }

    /**
     * Updates an experiment metric with a response.
     *
     * @param experimentMetricId Identifier for this experiment metric. Must start with a lowercase letter and contain
     * only lowercase letters, numbers, and underscores.
     * @param resource The resource instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return defines experiment metric metadata and computation details along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ExperimentMetric> updateMetricWithResponse(String experimentMetricId, ExperimentMetric resource) {
        return updateMetricWithResponse(experimentMetricId, resource, ETag.ALL.toString());
    }

    /**
     * Updates the experiment metric lifecycle to {@link LifecycleStage#ACTIVE}.
     *
     * @param experimentMetricId Identifier for this experiment metric. Must start with a lowercase letter and contain
     * only lowercase letters, numbers, and underscores.
     * @param ifMatch The ETag value to match for the request.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return defines experiment metric metadata and computation details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ExperimentMetric activateMetric(String experimentMetricId, String ifMatch) {
        return updateMetric(experimentMetricId, new ExperimentMetric().setLifecycle(LifecycleStage.ACTIVE), ifMatch);
    }

    /**
     * Updates the experiment metric lifecycle to {@link LifecycleStage#ACTIVE}.
     *
     * @param experimentMetricId Identifier for this experiment metric. Must start with a lowercase letter and contain
     * only lowercase letters, numbers, and underscores.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return defines experiment metric metadata and computation details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ExperimentMetric activateMetric(String experimentMetricId) {
        return activateMetric(experimentMetricId, ETag.ALL.toString());
    }

    /**
     * Activates an experiment metric with a response.
     *
     * @param experimentMetricId Identifier for this experiment metric. Must start with a lowercase letter and contain
     * only lowercase letters, numbers, and underscores.
     * @param ifMatch The ETag value to match for the request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return defines experiment metric metadata and computation details along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ExperimentMetric> activateMetricWithResponse(String experimentMetricId, String ifMatch) {
        ExperimentMetric resource = new ExperimentMetric().setLifecycle(LifecycleStage.ACTIVE);
        return updateMetricWithResponse(experimentMetricId, resource, ifMatch);
    }

    /**
     * Activates an experiment metric with a response.
     *
     * @param experimentMetricId Identifier for this experiment metric. Must start with a lowercase letter and contain
     * only lowercase letters, numbers, and underscores.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return defines experiment metric metadata and computation details along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ExperimentMetric> activateMetricWithResponse(String experimentMetricId) {
        return activateMetricWithResponse(experimentMetricId, ETag.ALL.toString());
    }

    /**
     * Updates the experiment metric lifecycle to {@link LifecycleStage#INACTIVE}.
     *
     * @param experimentMetricId Identifier for this experiment metric. Must start with a lowercase letter and contain
     * only lowercase letters, numbers, and underscores.
     * @param ifMatch The ETag value to match for the request.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return defines experiment metric metadata and computation details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ExperimentMetric deactivateMetric(String experimentMetricId, String ifMatch) {
        return updateMetric(experimentMetricId, new ExperimentMetric().setLifecycle(LifecycleStage.INACTIVE), ifMatch);
    }

    /**
     * Updates the experiment metric lifecycle to {@link LifecycleStage#INACTIVE}.
     *o
     * @param experimentMetricId Identifier for this experiment metric. Must start with a lowercase letter and contain
     * only lowercase letters, numbers, and underscores.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return defines experiment metric metadata and computation details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ExperimentMetric deactivateMetric(String experimentMetricId) {
        return deactivateMetric(experimentMetricId, ETag.ALL.toString());
    }

    /**
     * Deactivates an experiment metric with a response.
     *
     * @param experimentMetricId Identifier for this experiment metric. Must start with a lowercase letter and contain
     * only lowercase letters, numbers, and underscores.
     * @param ifMatch The ETag value to match for the request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return defines experiment metric metadata and computation details along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ExperimentMetric> deactivateMetricWithResponse(String experimentMetricId, String ifMatch) {
        ExperimentMetric resource = new ExperimentMetric().setLifecycle(LifecycleStage.INACTIVE);
        return updateMetricWithResponse(experimentMetricId, resource, ifMatch);
    }

    /**
     * Deactivates an experiment metric with a response.
     *
     * @param experimentMetricId Identifier for this experiment metric. Must start with a lowercase letter and contain
     * only lowercase letters, numbers, and underscores.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return defines experiment metric metadata and computation details along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ExperimentMetric> deactivateMetricWithResponse(String experimentMetricId) {
        return deactivateMetricWithResponse(experimentMetricId, ETag.ALL.toString());
    }
}
