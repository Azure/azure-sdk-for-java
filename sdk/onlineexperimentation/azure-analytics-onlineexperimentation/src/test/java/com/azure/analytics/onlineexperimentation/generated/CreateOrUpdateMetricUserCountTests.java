// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.analytics.onlineexperimentation.generated;

import com.azure.analytics.onlineexperimentation.models.DesiredDirection;
import com.azure.analytics.onlineexperimentation.models.ExperimentMetric;
import com.azure.analytics.onlineexperimentation.models.ExperimentMetricDefinition;
import com.azure.analytics.onlineexperimentation.models.ExperimentMetricType;
import com.azure.analytics.onlineexperimentation.models.LifecycleStage;
import com.azure.analytics.onlineexperimentation.models.ObservedEvent;
import com.azure.analytics.onlineexperimentation.models.UserCountMetricDefinition;
import com.azure.core.http.RequestConditions;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

@Disabled
public final class CreateOrUpdateMetricUserCountTests extends OnlineExperimentationClientTestBase {
    @Test
    @Disabled
    public void testCreateOrUpdateMetricUserCountTests() {
        // method invocation
        ExperimentMetric response = onlineExperimentationClient.createOrUpdateMetric("users_purchase",
            new ExperimentMetric().setLifecycle(LifecycleStage.ACTIVE)
                .setDisplayName("Users with purchase")
                .setDescription(
                    "The number of users who have made at least one purchase transaction. Refund transactions are excluded from this metric. As the analysis period grows, this metric begins to saturate as users making multiple purchases no longer contribute.")
                .setCategories(Arrays.asList("Monetization"))
                .setDesiredDirection(DesiredDirection.INCREASE)
                .setDefinition(new UserCountMetricDefinition()
                    .setEvent(new ObservedEvent().setEventName("Transaction").setFilter("Revenue > 0"))),
            new RequestConditions().setIfMatch("vxexdn")
                .setIfNoneMatch("ijchzdh")
                .setIfUnmodifiedSince(OffsetDateTime.parse("2024-08-22T02:02:11Z"))
                .setIfModifiedSince(OffsetDateTime.parse("2024-08-22T02:02:11Z")));

        // response assertion
        Assertions.assertNotNull(response);
        // verify property "id"
        Assertions.assertEquals("users_purchase", response.getId());
        // verify property "lifecycle"
        Assertions.assertEquals(LifecycleStage.ACTIVE, response.getLifecycle());
        // verify property "displayName"
        Assertions.assertEquals("Users with purchase", response.getDisplayName());
        // verify property "description"
        Assertions.assertEquals(
            "The number of users who have made at least one purchase transaction. Refund transactions are excluded from this metric. As the analysis period grows, this metric begins to saturate as users making multiple purchases no longer contribute.",
            response.getDescription());
        // verify property "categories"
        List<String> responseCategories = response.getCategories();
        Assertions.assertEquals("Monetization", responseCategories.iterator().next());
        // verify property "desiredDirection"
        Assertions.assertEquals(DesiredDirection.INCREASE, response.getDesiredDirection());
        // verify property "definition"
        ExperimentMetricDefinition responseDefinition = response.getDefinition();
        Assertions.assertNotNull(responseDefinition);
        Assertions.assertEquals(ExperimentMetricType.USER_COUNT, responseDefinition.getType());
        // verify property "eTag"
        Assertions.assertEquals("ckswkavwgassdlocwuzxz", response.getETag());
        // verify property "lastModifiedAt"
        Assertions.assertNotNull(response.getLastModifiedAt());
    }
}
