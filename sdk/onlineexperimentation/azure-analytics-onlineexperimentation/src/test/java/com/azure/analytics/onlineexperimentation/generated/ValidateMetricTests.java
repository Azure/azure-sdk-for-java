// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.analytics.onlineexperimentation.generated;

import com.azure.analytics.onlineexperimentation.models.AggregatedValue;
import com.azure.analytics.onlineexperimentation.models.AverageMetricDefinition;
import com.azure.analytics.onlineexperimentation.models.DesiredDirection;
import com.azure.analytics.onlineexperimentation.models.DiagnosticCode;
import com.azure.analytics.onlineexperimentation.models.DiagnosticDetail;
import com.azure.analytics.onlineexperimentation.models.ExperimentMetric;
import com.azure.analytics.onlineexperimentation.models.ExperimentMetricValidationResult;
import com.azure.analytics.onlineexperimentation.models.LifecycleStage;
import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

@Disabled
public final class ValidateMetricTests extends OnlineExperimentationClientTestBase {
    @Test
    @Disabled
    public void testValidateMetricTests() {
        // method invocation
        ExperimentMetricValidationResult response = onlineExperimentationClient.validateMetric(new ExperimentMetric()
            .setLifecycle(LifecycleStage.ACTIVE)
            .setDisplayName("Average revenue per purchase [USD]")
            .setDescription(
                "The average revenue per purchase transaction in USD. Refund transactions are excluded from this metric. The total revenue might increase while this metric decreases if the number of purchases increases.")
            .setCategories(Arrays.asList("Monetization"))
            .setDesiredDirection(DesiredDirection.INCREASE)
            .setDefinition(new AverageMetricDefinition().setValue(
                new AggregatedValue().setEventName("Transaction").setFilter("Revenue >").setEventProperty("Revenue"))));

        // response assertion
        Assertions.assertNotNull(response);
        // verify property "isValid"
        Assertions.assertEquals(false, response.isValid());
        // verify property "diagnostics"
        List<DiagnosticDetail> responseDiagnostics = response.getDiagnostics();
        DiagnosticDetail responseDiagnosticsFirstItem = responseDiagnostics.iterator().next();
        Assertions.assertNotNull(responseDiagnosticsFirstItem);
        Assertions.assertEquals("The filter condition 'Revenue >' is invalid",
            responseDiagnosticsFirstItem.getMessage());
        Assertions.assertEquals(DiagnosticCode.INVALID_EVENT_CONDITION, responseDiagnosticsFirstItem.getCode());
    }
}
