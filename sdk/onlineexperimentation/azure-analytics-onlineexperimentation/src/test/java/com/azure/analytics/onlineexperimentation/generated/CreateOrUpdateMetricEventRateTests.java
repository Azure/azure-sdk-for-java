// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.analytics.onlineexperimentation.generated;

import com.azure.analytics.onlineexperimentation.models.DesiredDirection;
import com.azure.analytics.onlineexperimentation.models.EventRateMetricDefinition;
import com.azure.analytics.onlineexperimentation.models.ExperimentMetric;
import com.azure.analytics.onlineexperimentation.models.ExperimentMetricDefinition;
import com.azure.analytics.onlineexperimentation.models.ExperimentMetricType;
import com.azure.analytics.onlineexperimentation.models.LifecycleStage;
import com.azure.analytics.onlineexperimentation.models.ObservedEvent;
import com.azure.core.http.RequestConditions;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

@Disabled
public final class CreateOrUpdateMetricEventRateTests extends OnlineExperimentationClientTestBase {
    @Test
    @Disabled
    public void testCreateOrUpdateMetricEventRateTests() {
        // method invocation
        ExperimentMetric response = onlineExperimentationClient.createOrUpdateMetric("rate_refund",
            new ExperimentMetric().setLifecycle(LifecycleStage.ACTIVE)
                .setDisplayName("Refund rate")
                .setDescription(
                    "The percentage of transactions that are refunds. This metric is calculated as the number of refund transactions divided by the total number of transactions.")
                .setCategories(Arrays.asList("Monetization"))
                .setDesiredDirection(DesiredDirection.NEUTRAL)
                .setDefinition(new EventRateMetricDefinition().setEvent(new ObservedEvent().setEventName("Transaction"))
                    .setRateCondition("Revenue < 0")),
            new RequestConditions().setIfMatch("vxexdn")
                .setIfNoneMatch("ijchzdh")
                .setIfUnmodifiedSince(OffsetDateTime.parse("2024-08-22T02:02:11Z"))
                .setIfModifiedSince(OffsetDateTime.parse("2024-08-22T02:02:11Z")));

        // response assertion
        Assertions.assertNotNull(response);
        // verify property "id"
        Assertions.assertEquals("rate_refund", response.getId());
        // verify property "lifecycle"
        Assertions.assertEquals(LifecycleStage.ACTIVE, response.getLifecycle());
        // verify property "displayName"
        Assertions.assertEquals("Refund rate", response.getDisplayName());
        // verify property "description"
        Assertions.assertEquals(
            "The percentage of transactions that are refunds. This metric is calculated as the number of refund transactions divided by the total number of transactions.",
            response.getDescription());
        // verify property "categories"
        List<String> responseCategories = response.getCategories();
        Assertions.assertEquals("Monetization", responseCategories.iterator().next());
        // verify property "desiredDirection"
        Assertions.assertEquals(DesiredDirection.NEUTRAL, response.getDesiredDirection());
        // verify property "definition"
        ExperimentMetricDefinition responseDefinition = response.getDefinition();
        Assertions.assertNotNull(responseDefinition);
        Assertions.assertEquals(ExperimentMetricType.EVENT_RATE, responseDefinition.getType());
        // verify property "eTag"
        Assertions.assertEquals("ckswkavwgassdlocwuzxz", response.getETag());
        // verify property "lastModifiedAt"
        Assertions.assertNotNull(response.getLastModifiedAt());
    }
}
