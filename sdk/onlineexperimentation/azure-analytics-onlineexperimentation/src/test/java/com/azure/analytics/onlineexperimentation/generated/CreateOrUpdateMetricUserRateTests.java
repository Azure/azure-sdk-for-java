// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.analytics.onlineexperimentation.generated;

import com.azure.analytics.onlineexperimentation.models.DesiredDirection;
import com.azure.analytics.onlineexperimentation.models.ExperimentMetric;
import com.azure.analytics.onlineexperimentation.models.ExperimentMetricDefinition;
import com.azure.analytics.onlineexperimentation.models.ExperimentMetricType;
import com.azure.analytics.onlineexperimentation.models.LifecycleStage;
import com.azure.analytics.onlineexperimentation.models.ObservedEvent;
import com.azure.analytics.onlineexperimentation.models.UserRateMetricDefinition;
import com.azure.core.http.RequestConditions;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

@Disabled
public final class CreateOrUpdateMetricUserRateTests extends OnlineExperimentationClientTestBase {
    @Test
    @Disabled
    public void testCreateOrUpdateMetricUserRateTests() {
        // method invocation
        ExperimentMetric response = onlineExperimentationClient.createOrUpdateMetric("rate_subscription_ad",
            new ExperimentMetric().setLifecycle(LifecycleStage.ACTIVE)
                .setDisplayName("Subscription ad conversion rate")
                .setDescription(
                    "The percentage of users who saw an advertisement for a subscription promotion and then later successfully subscribed. This metric is calculated as the number of users who successfully subscribed after seeing the advert divided by the total number of users who saw the advert. Users who saw multiple adverts or subscribed multiple times are counted only once. Users who saw the advert before the analysis period starts are excluded from this metric.")
                .setCategories(Arrays.asList("Monetization"))
                .setDesiredDirection(DesiredDirection.INCREASE)
                .setDefinition(new UserRateMetricDefinition()
                    .setStartEvent(
                        new ObservedEvent().setEventName("AdView").setFilter("Source == 'subscription_promo'"))
                    .setEndEvent(new ObservedEvent().setEventName("Subscribe").setFilter("Status == 'Success'"))),
            new RequestConditions().setIfMatch("vxexdn")
                .setIfNoneMatch("ijchzdh")
                .setIfUnmodifiedSince(OffsetDateTime.parse("2024-08-22T02:02:11Z"))
                .setIfModifiedSince(OffsetDateTime.parse("2024-08-22T02:02:11Z")));

        // response assertion
        Assertions.assertNotNull(response);
        // verify property "id"
        Assertions.assertEquals("rate_subscription_ad", response.getId());
        // verify property "lifecycle"
        Assertions.assertEquals(LifecycleStage.ACTIVE, response.getLifecycle());
        // verify property "displayName"
        Assertions.assertEquals("Subscription ad conversion rate", response.getDisplayName());
        // verify property "description"
        Assertions.assertEquals(
            "The percentage of users who saw an advertisement for a subscription promotion and then later successfully subscribed. This metric is calculated as the number of users who successfully subscribed after seeing the advert divided by the total number of users who saw the advert. Users who saw multiple adverts or subscribed multiple times are counted only once. Users who saw the advert before the analysis period starts are excluded from this metric.",
            response.getDescription());
        // verify property "categories"
        List<String> responseCategories = response.getCategories();
        Assertions.assertEquals("Monetization", responseCategories.iterator().next());
        // verify property "desiredDirection"
        Assertions.assertEquals(DesiredDirection.INCREASE, response.getDesiredDirection());
        // verify property "definition"
        ExperimentMetricDefinition responseDefinition = response.getDefinition();
        Assertions.assertNotNull(responseDefinition);
        Assertions.assertEquals(ExperimentMetricType.USER_RATE, responseDefinition.getType());
        // verify property "eTag"
        Assertions.assertEquals("ckswkavwgassdlocwuzxz", response.getETag());
        // verify property "lastModifiedAt"
        Assertions.assertNotNull(response.getLastModifiedAt());
    }
}
