// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.onlineexperimentation.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * All identity configuration for Customer-managed key settings defining which identity should be used to auth to Key
 * Vault.
 */
@Fluent
public final class KeyEncryptionKeyIdentity implements JsonSerializable<KeyEncryptionKeyIdentity> {
    /*
     * The type of identity to use. Values can be systemAssignedIdentity, userAssignedIdentity, or
     * delegatedResourceIdentity.
     */
    @Generated
    private KeyEncryptionKeyIdentityType identityType;

    /*
     * User assigned identity to use for accessing key encryption key Url. Ex:
     * /subscriptions/fa5fc227-a624-475e-b696-cdd604c735bc/resourceGroups/<resource
     * group>/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myId. Mutually exclusive with identityType
     * systemAssignedIdentity.
     */
    @Generated
    private String userAssignedIdentityResourceId;

    /*
     * application client identity to use for accessing key encryption key Url in a different tenant. Ex:
     * f83c6b1b-4d34-47e4-bb34-9d83df58b540
     */
    @Generated
    private String federatedClientId;

    /**
     * Creates an instance of KeyEncryptionKeyIdentity class.
     */
    @Generated
    public KeyEncryptionKeyIdentity() {
    }

    /**
     * Get the identityType property: The type of identity to use. Values can be systemAssignedIdentity,
     * userAssignedIdentity, or delegatedResourceIdentity.
     * 
     * @return the identityType value.
     */
    @Generated
    public KeyEncryptionKeyIdentityType identityType() {
        return this.identityType;
    }

    /**
     * Set the identityType property: The type of identity to use. Values can be systemAssignedIdentity,
     * userAssignedIdentity, or delegatedResourceIdentity.
     * 
     * @param identityType the identityType value to set.
     * @return the KeyEncryptionKeyIdentity object itself.
     */
    @Generated
    public KeyEncryptionKeyIdentity withIdentityType(KeyEncryptionKeyIdentityType identityType) {
        this.identityType = identityType;
        return this;
    }

    /**
     * Get the userAssignedIdentityResourceId property: User assigned identity to use for accessing key encryption key
     * Url. Ex: /subscriptions/fa5fc227-a624-475e-b696-cdd604c735bc/resourceGroups/&lt;resource
     * group&gt;/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myId. Mutually exclusive with identityType
     * systemAssignedIdentity.
     * 
     * @return the userAssignedIdentityResourceId value.
     */
    @Generated
    public String userAssignedIdentityResourceId() {
        return this.userAssignedIdentityResourceId;
    }

    /**
     * Set the userAssignedIdentityResourceId property: User assigned identity to use for accessing key encryption key
     * Url. Ex: /subscriptions/fa5fc227-a624-475e-b696-cdd604c735bc/resourceGroups/&lt;resource
     * group&gt;/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myId. Mutually exclusive with identityType
     * systemAssignedIdentity.
     * 
     * @param userAssignedIdentityResourceId the userAssignedIdentityResourceId value to set.
     * @return the KeyEncryptionKeyIdentity object itself.
     */
    @Generated
    public KeyEncryptionKeyIdentity withUserAssignedIdentityResourceId(String userAssignedIdentityResourceId) {
        this.userAssignedIdentityResourceId = userAssignedIdentityResourceId;
        return this;
    }

    /**
     * Get the federatedClientId property: application client identity to use for accessing key encryption key Url in a
     * different tenant. Ex: f83c6b1b-4d34-47e4-bb34-9d83df58b540.
     * 
     * @return the federatedClientId value.
     */
    @Generated
    public String federatedClientId() {
        return this.federatedClientId;
    }

    /**
     * Set the federatedClientId property: application client identity to use for accessing key encryption key Url in a
     * different tenant. Ex: f83c6b1b-4d34-47e4-bb34-9d83df58b540.
     * 
     * @param federatedClientId the federatedClientId value to set.
     * @return the KeyEncryptionKeyIdentity object itself.
     */
    @Generated
    public KeyEncryptionKeyIdentity withFederatedClientId(String federatedClientId) {
        this.federatedClientId = federatedClientId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("identityType", this.identityType == null ? null : this.identityType.toString());
        jsonWriter.writeStringField("userAssignedIdentityResourceId", this.userAssignedIdentityResourceId);
        jsonWriter.writeStringField("federatedClientId", this.federatedClientId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of KeyEncryptionKeyIdentity from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of KeyEncryptionKeyIdentity if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the KeyEncryptionKeyIdentity.
     */
    public static KeyEncryptionKeyIdentity fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            KeyEncryptionKeyIdentity deserializedKeyEncryptionKeyIdentity = new KeyEncryptionKeyIdentity();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("identityType".equals(fieldName)) {
                    deserializedKeyEncryptionKeyIdentity.identityType
                        = KeyEncryptionKeyIdentityType.fromString(reader.getString());
                } else if ("userAssignedIdentityResourceId".equals(fieldName)) {
                    deserializedKeyEncryptionKeyIdentity.userAssignedIdentityResourceId = reader.getString();
                } else if ("federatedClientId".equals(fieldName)) {
                    deserializedKeyEncryptionKeyIdentity.federatedClientId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedKeyEncryptionKeyIdentity;
        });
    }
}
