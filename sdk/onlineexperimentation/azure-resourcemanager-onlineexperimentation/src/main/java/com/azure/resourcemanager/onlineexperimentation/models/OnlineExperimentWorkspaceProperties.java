// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.onlineexperimentation.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The properties of an online experiment workspace.
 */
@Fluent
public final class OnlineExperimentWorkspaceProperties
    implements JsonSerializable<OnlineExperimentWorkspaceProperties> {
    /*
     * The Id of the workspace.
     */
    private String workspaceId;

    /*
     * The provisioning state for the resource
     */
    private ResourceProvisioningState provisioningState;

    /*
     * The resource identifier of the Log Analytics workspace which online experiment workspace uses for generating
     * experiment analysis results.
     */
    private String logAnalyticsWorkspaceResourceId;

    /*
     * The resource identifier of storage account where logs are exported from Log Analytics workspace. Online
     * Experiment workspace uses it generating experiment analysis results.
     */
    private String logsExporterStorageAccountResourceId;

    /*
     * The resource identifier of App Configuration with which this online experiment workspace is tied for
     * experimentation. This is a required field for creating an online experiment workspace.
     */
    private String appConfigurationResourceId;

    /*
     * The encryption configuration for the online experiment workspace resource.
     */
    private ResourceEncryptionConfiguration encryption;

    /*
     * The data plane endpoint for the online experiment workspace resource.
     */
    private String endpoint;

    /**
     * Creates an instance of OnlineExperimentWorkspaceProperties class.
     */
    public OnlineExperimentWorkspaceProperties() {
    }

    /**
     * Get the workspaceId property: The Id of the workspace.
     * 
     * @return the workspaceId value.
     */
    public String workspaceId() {
        return this.workspaceId;
    }

    /**
     * Get the provisioningState property: The provisioning state for the resource.
     * 
     * @return the provisioningState value.
     */
    public ResourceProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the logAnalyticsWorkspaceResourceId property: The resource identifier of the Log Analytics workspace which
     * online experiment workspace uses for generating experiment analysis results.
     * 
     * @return the logAnalyticsWorkspaceResourceId value.
     */
    public String logAnalyticsWorkspaceResourceId() {
        return this.logAnalyticsWorkspaceResourceId;
    }

    /**
     * Set the logAnalyticsWorkspaceResourceId property: The resource identifier of the Log Analytics workspace which
     * online experiment workspace uses for generating experiment analysis results.
     * 
     * @param logAnalyticsWorkspaceResourceId the logAnalyticsWorkspaceResourceId value to set.
     * @return the OnlineExperimentWorkspaceProperties object itself.
     */
    public OnlineExperimentWorkspaceProperties
        withLogAnalyticsWorkspaceResourceId(String logAnalyticsWorkspaceResourceId) {
        this.logAnalyticsWorkspaceResourceId = logAnalyticsWorkspaceResourceId;
        return this;
    }

    /**
     * Get the logsExporterStorageAccountResourceId property: The resource identifier of storage account where logs are
     * exported from Log Analytics workspace. Online Experiment workspace uses it generating experiment analysis
     * results.
     * 
     * @return the logsExporterStorageAccountResourceId value.
     */
    public String logsExporterStorageAccountResourceId() {
        return this.logsExporterStorageAccountResourceId;
    }

    /**
     * Set the logsExporterStorageAccountResourceId property: The resource identifier of storage account where logs are
     * exported from Log Analytics workspace. Online Experiment workspace uses it generating experiment analysis
     * results.
     * 
     * @param logsExporterStorageAccountResourceId the logsExporterStorageAccountResourceId value to set.
     * @return the OnlineExperimentWorkspaceProperties object itself.
     */
    public OnlineExperimentWorkspaceProperties
        withLogsExporterStorageAccountResourceId(String logsExporterStorageAccountResourceId) {
        this.logsExporterStorageAccountResourceId = logsExporterStorageAccountResourceId;
        return this;
    }

    /**
     * Get the appConfigurationResourceId property: The resource identifier of App Configuration with which this online
     * experiment workspace is tied for experimentation. This is a required field for creating an online experiment
     * workspace.
     * 
     * @return the appConfigurationResourceId value.
     */
    public String appConfigurationResourceId() {
        return this.appConfigurationResourceId;
    }

    /**
     * Set the appConfigurationResourceId property: The resource identifier of App Configuration with which this online
     * experiment workspace is tied for experimentation. This is a required field for creating an online experiment
     * workspace.
     * 
     * @param appConfigurationResourceId the appConfigurationResourceId value to set.
     * @return the OnlineExperimentWorkspaceProperties object itself.
     */
    public OnlineExperimentWorkspaceProperties withAppConfigurationResourceId(String appConfigurationResourceId) {
        this.appConfigurationResourceId = appConfigurationResourceId;
        return this;
    }

    /**
     * Get the encryption property: The encryption configuration for the online experiment workspace resource.
     * 
     * @return the encryption value.
     */
    public ResourceEncryptionConfiguration encryption() {
        return this.encryption;
    }

    /**
     * Set the encryption property: The encryption configuration for the online experiment workspace resource.
     * 
     * @param encryption the encryption value to set.
     * @return the OnlineExperimentWorkspaceProperties object itself.
     */
    public OnlineExperimentWorkspaceProperties withEncryption(ResourceEncryptionConfiguration encryption) {
        this.encryption = encryption;
        return this;
    }

    /**
     * Get the endpoint property: The data plane endpoint for the online experiment workspace resource.
     * 
     * @return the endpoint value.
     */
    public String endpoint() {
        return this.endpoint;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (logAnalyticsWorkspaceResourceId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property logAnalyticsWorkspaceResourceId in model OnlineExperimentWorkspaceProperties"));
        }
        if (logsExporterStorageAccountResourceId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property logsExporterStorageAccountResourceId in model OnlineExperimentWorkspaceProperties"));
        }
        if (appConfigurationResourceId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property appConfigurationResourceId in model OnlineExperimentWorkspaceProperties"));
        }
        if (encryption() != null) {
            encryption().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(OnlineExperimentWorkspaceProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("logAnalyticsWorkspaceResourceId", this.logAnalyticsWorkspaceResourceId);
        jsonWriter.writeStringField("logsExporterStorageAccountResourceId", this.logsExporterStorageAccountResourceId);
        jsonWriter.writeStringField("appConfigurationResourceId", this.appConfigurationResourceId);
        jsonWriter.writeJsonField("encryption", this.encryption);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of OnlineExperimentWorkspaceProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of OnlineExperimentWorkspaceProperties if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the OnlineExperimentWorkspaceProperties.
     */
    public static OnlineExperimentWorkspaceProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            OnlineExperimentWorkspaceProperties deserializedOnlineExperimentWorkspaceProperties
                = new OnlineExperimentWorkspaceProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("logAnalyticsWorkspaceResourceId".equals(fieldName)) {
                    deserializedOnlineExperimentWorkspaceProperties.logAnalyticsWorkspaceResourceId
                        = reader.getString();
                } else if ("logsExporterStorageAccountResourceId".equals(fieldName)) {
                    deserializedOnlineExperimentWorkspaceProperties.logsExporterStorageAccountResourceId
                        = reader.getString();
                } else if ("appConfigurationResourceId".equals(fieldName)) {
                    deserializedOnlineExperimentWorkspaceProperties.appConfigurationResourceId = reader.getString();
                } else if ("workspaceId".equals(fieldName)) {
                    deserializedOnlineExperimentWorkspaceProperties.workspaceId = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedOnlineExperimentWorkspaceProperties.provisioningState
                        = ResourceProvisioningState.fromString(reader.getString());
                } else if ("encryption".equals(fieldName)) {
                    deserializedOnlineExperimentWorkspaceProperties.encryption
                        = ResourceEncryptionConfiguration.fromJson(reader);
                } else if ("endpoint".equals(fieldName)) {
                    deserializedOnlineExperimentWorkspaceProperties.endpoint = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedOnlineExperimentWorkspaceProperties;
        });
    }
}
