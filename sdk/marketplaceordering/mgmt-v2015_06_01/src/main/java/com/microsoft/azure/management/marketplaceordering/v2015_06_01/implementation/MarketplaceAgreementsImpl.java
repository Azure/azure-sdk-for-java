/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * abc
 */

package com.microsoft.azure.management.marketplaceordering.v2015_06_01.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.marketplaceordering.v2015_06_01.MarketplaceAgreements;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.management.marketplaceordering.v2015_06_01.AgreementTerms;
import com.microsoft.azure.Page;

class MarketplaceAgreementsImpl extends WrapperImpl<MarketplaceAgreementsInner> implements MarketplaceAgreements {
    private final MarketplaceOrderingManager manager;

    MarketplaceAgreementsImpl(MarketplaceOrderingManager manager) {
        super(manager.inner().marketplaceAgreements());
        this.manager = manager;
    }

    public MarketplaceOrderingManager manager() {
        return this.manager;
    }

    private AgreementTermsImpl wrapAgreementTermsModel(AgreementTermsInner inner) {
        return  new AgreementTermsImpl(inner, manager());
    }

    private Observable<AgreementTermsInner> getAgreementTermsInnerUsingMarketplaceAgreementsInnerAsync(String id) {
        String publisherId = IdParsingUtils.getValueFromIdByName(id, "agreements");
        String offerId = IdParsingUtils.getValueFromIdByName(id, "offers");
        String planId = IdParsingUtils.getValueFromIdByName(id, "plans");
        MarketplaceAgreementsInner client = this.inner();
        return client.getAgreementAsync(publisherId, offerId, planId);
    }

    @Override
    public Observable<AgreementTerms> getAgreementAsync(String publisherId, String offerId, String planId) {
        MarketplaceAgreementsInner client = this.inner();
        return client.getAgreementAsync(publisherId, offerId, planId)
        .map(new Func1<AgreementTermsInner, AgreementTerms>() {
            @Override
            public AgreementTerms call(AgreementTermsInner inner) {
                return wrapAgreementTermsModel(inner);
            }
       });
    }

    @Override
    public Observable<AgreementTerms> signAsync(String publisherId, String offerId, String planId) {
        MarketplaceAgreementsInner client = this.inner();
        return client.signAsync(publisherId, offerId, planId)
        .map(new Func1<AgreementTermsInner, AgreementTerms>() {
            @Override
            public AgreementTerms call(AgreementTermsInner inner) {
                return new AgreementTermsImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<AgreementTerms> cancelAsync(String publisherId, String offerId, String planId) {
        MarketplaceAgreementsInner client = this.inner();
        return client.cancelAsync(publisherId, offerId, planId)
        .map(new Func1<AgreementTermsInner, AgreementTerms>() {
            @Override
            public AgreementTerms call(AgreementTermsInner inner) {
                return new AgreementTermsImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<AgreementTerms> getAsync(String publisherId, String offerId, String planId) {
        MarketplaceAgreementsInner client = this.inner();
        return client.getAsync(publisherId, offerId, planId)
        .map(new Func1<AgreementTermsInner, AgreementTerms>() {
            @Override
            public AgreementTerms call(AgreementTermsInner inner) {
                return new AgreementTermsImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<AgreementTerms> createAsync(String publisherId, String offerId, String planId, AgreementTermsInner parameters) {
        MarketplaceAgreementsInner client = this.inner();
        return client.createAsync(publisherId, offerId, planId, parameters)
        .map(new Func1<AgreementTermsInner, AgreementTerms>() {
            @Override
            public AgreementTerms call(AgreementTermsInner inner) {
                return new AgreementTermsImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<AgreementTerms> listAsync() {
        MarketplaceAgreementsInner client = this.inner();
        return client.listAsync()
        .flatMap(new Func1<Page<AgreementTermsInner>, Observable<AgreementTermsInner>>() {
            @Override
            public Observable<AgreementTermsInner> call(Page<AgreementTermsInner> innerPage) {
                return Observable.from(innerPage.items());
            }
        })
        .map(new Func1<AgreementTermsInner, AgreementTerms>() {
            @Override
            public AgreementTerms call(AgreementTermsInner inner) {
                return new AgreementTermsImpl(inner, manager());
            }
        });
    }

}
