// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.marketplaceordering.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.marketplaceordering.fluent.MarketplaceAgreementsClient;
import com.azure.resourcemanager.marketplaceordering.fluent.models.AgreementTermsInner;
import com.azure.resourcemanager.marketplaceordering.fluent.models.OldAgreementTermsInner;
import com.azure.resourcemanager.marketplaceordering.fluent.models.OldAgreementTermsListInner;
import com.azure.resourcemanager.marketplaceordering.models.AgreementTerms;
import com.azure.resourcemanager.marketplaceordering.models.MarketplaceAgreements;
import com.azure.resourcemanager.marketplaceordering.models.OfferType;
import com.azure.resourcemanager.marketplaceordering.models.OldAgreementTerms;
import com.azure.resourcemanager.marketplaceordering.models.OldAgreementTermsList;

public final class MarketplaceAgreementsImpl implements MarketplaceAgreements {
    private static final ClientLogger LOGGER = new ClientLogger(MarketplaceAgreementsImpl.class);

    private final MarketplaceAgreementsClient innerClient;

    private final com.azure.resourcemanager.marketplaceordering.MarketplaceOrderingManager serviceManager;

    public MarketplaceAgreementsImpl(MarketplaceAgreementsClient innerClient,
        com.azure.resourcemanager.marketplaceordering.MarketplaceOrderingManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<AgreementTerms> getWithResponse(OfferType offerType, String publisherId, String offerId,
        String planId, Context context) {
        Response<AgreementTermsInner> inner
            = this.serviceClient().getWithResponse(offerType, publisherId, offerId, planId, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new AgreementTermsImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public AgreementTerms get(OfferType offerType, String publisherId, String offerId, String planId) {
        AgreementTermsInner inner = this.serviceClient().get(offerType, publisherId, offerId, planId);
        if (inner != null) {
            return new AgreementTermsImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<AgreementTerms> createWithResponse(OfferType offerType, String publisherId, String offerId,
        String planId, AgreementTermsInner parameters, Context context) {
        Response<AgreementTermsInner> inner
            = this.serviceClient().createWithResponse(offerType, publisherId, offerId, planId, parameters, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new AgreementTermsImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public AgreementTerms create(OfferType offerType, String publisherId, String offerId, String planId,
        AgreementTermsInner parameters) {
        AgreementTermsInner inner = this.serviceClient().create(offerType, publisherId, offerId, planId, parameters);
        if (inner != null) {
            return new AgreementTermsImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<OldAgreementTerms> signWithResponse(String publisherId, String offerId, String planId,
        Context context) {
        Response<OldAgreementTermsInner> inner
            = this.serviceClient().signWithResponse(publisherId, offerId, planId, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new OldAgreementTermsImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public OldAgreementTerms sign(String publisherId, String offerId, String planId) {
        OldAgreementTermsInner inner = this.serviceClient().sign(publisherId, offerId, planId);
        if (inner != null) {
            return new OldAgreementTermsImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<OldAgreementTerms> cancelWithResponse(String publisherId, String offerId, String planId,
        Context context) {
        Response<OldAgreementTermsInner> inner
            = this.serviceClient().cancelWithResponse(publisherId, offerId, planId, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new OldAgreementTermsImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public OldAgreementTerms cancel(String publisherId, String offerId, String planId) {
        OldAgreementTermsInner inner = this.serviceClient().cancel(publisherId, offerId, planId);
        if (inner != null) {
            return new OldAgreementTermsImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<OldAgreementTerms> getAgreementWithResponse(String publisherId, String offerId, String planId,
        Context context) {
        Response<OldAgreementTermsInner> inner
            = this.serviceClient().getAgreementWithResponse(publisherId, offerId, planId, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new OldAgreementTermsImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public OldAgreementTerms getAgreement(String publisherId, String offerId, String planId) {
        OldAgreementTermsInner inner = this.serviceClient().getAgreement(publisherId, offerId, planId);
        if (inner != null) {
            return new OldAgreementTermsImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<OldAgreementTermsList> listWithResponse(Context context) {
        Response<OldAgreementTermsListInner> inner = this.serviceClient().listWithResponse(context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new OldAgreementTermsListImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public OldAgreementTermsList list() {
        OldAgreementTermsListInner inner = this.serviceClient().list();
        if (inner != null) {
            return new OldAgreementTermsListImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    private MarketplaceAgreementsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.marketplaceordering.MarketplaceOrderingManager manager() {
        return this.serviceManager;
    }
}
