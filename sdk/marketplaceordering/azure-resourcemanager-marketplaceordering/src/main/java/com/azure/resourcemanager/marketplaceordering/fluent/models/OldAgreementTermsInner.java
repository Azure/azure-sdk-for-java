// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.marketplaceordering.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.ProxyResource;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.marketplaceordering.models.State;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * Terms properties for provided Publisher/Offer/Plan tuple.
 */
@Fluent
public final class OldAgreementTermsInner extends ProxyResource {
    /*
     * Represents the properties of the resource.
     */
    private OldAgreementProperties innerProperties;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of OldAgreementTermsInner class.
     */
    public OldAgreementTermsInner() {
    }

    /**
     * Get the innerProperties property: Represents the properties of the resource.
     * 
     * @return the innerProperties value.
     */
    private OldAgreementProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * Get the id property: A unique identifier of the agreement.
     * 
     * @return the id value.
     */
    public String idPropertiesId() {
        return this.innerProperties() == null ? null : this.innerProperties().id();
    }

    /**
     * Set the id property: A unique identifier of the agreement.
     * 
     * @param id the id value to set.
     * @return the OldAgreementTermsInner object itself.
     */
    public OldAgreementTermsInner withIdPropertiesId(String id) {
        if (this.innerProperties() == null) {
            this.innerProperties = new OldAgreementProperties();
        }
        this.innerProperties().withId(id);
        return this;
    }

    /**
     * Get the publisher property: Publisher identifier string of image being deployed.
     * 
     * @return the publisher value.
     */
    public String publisher() {
        return this.innerProperties() == null ? null : this.innerProperties().publisher();
    }

    /**
     * Set the publisher property: Publisher identifier string of image being deployed.
     * 
     * @param publisher the publisher value to set.
     * @return the OldAgreementTermsInner object itself.
     */
    public OldAgreementTermsInner withPublisher(String publisher) {
        if (this.innerProperties() == null) {
            this.innerProperties = new OldAgreementProperties();
        }
        this.innerProperties().withPublisher(publisher);
        return this;
    }

    /**
     * Get the offer property: Offer identifier string of image being deployed.
     * 
     * @return the offer value.
     */
    public String offer() {
        return this.innerProperties() == null ? null : this.innerProperties().offer();
    }

    /**
     * Set the offer property: Offer identifier string of image being deployed.
     * 
     * @param offer the offer value to set.
     * @return the OldAgreementTermsInner object itself.
     */
    public OldAgreementTermsInner withOffer(String offer) {
        if (this.innerProperties() == null) {
            this.innerProperties = new OldAgreementProperties();
        }
        this.innerProperties().withOffer(offer);
        return this;
    }

    /**
     * Get the signDate property: Date and time in UTC of when the terms were accepted. This is empty if state is
     * cancelled.
     * 
     * @return the signDate value.
     */
    public OffsetDateTime signDate() {
        return this.innerProperties() == null ? null : this.innerProperties().signDate();
    }

    /**
     * Set the signDate property: Date and time in UTC of when the terms were accepted. This is empty if state is
     * cancelled.
     * 
     * @param signDate the signDate value to set.
     * @return the OldAgreementTermsInner object itself.
     */
    public OldAgreementTermsInner withSignDate(OffsetDateTime signDate) {
        if (this.innerProperties() == null) {
            this.innerProperties = new OldAgreementProperties();
        }
        this.innerProperties().withSignDate(signDate);
        return this;
    }

    /**
     * Get the cancelDate property: Date and time in UTC of when the terms were cancelled. This is empty if state is
     * active.
     * 
     * @return the cancelDate value.
     */
    public OffsetDateTime cancelDate() {
        return this.innerProperties() == null ? null : this.innerProperties().cancelDate();
    }

    /**
     * Set the cancelDate property: Date and time in UTC of when the terms were cancelled. This is empty if state is
     * active.
     * 
     * @param cancelDate the cancelDate value to set.
     * @return the OldAgreementTermsInner object itself.
     */
    public OldAgreementTermsInner withCancelDate(OffsetDateTime cancelDate) {
        if (this.innerProperties() == null) {
            this.innerProperties = new OldAgreementProperties();
        }
        this.innerProperties().withCancelDate(cancelDate);
        return this;
    }

    /**
     * Get the state property: Whether the agreement is active or cancelled.
     * 
     * @return the state value.
     */
    public State state() {
        return this.innerProperties() == null ? null : this.innerProperties().state();
    }

    /**
     * Set the state property: Whether the agreement is active or cancelled.
     * 
     * @param state the state value to set.
     * @return the OldAgreementTermsInner object itself.
     */
    public OldAgreementTermsInner withState(State state) {
        if (this.innerProperties() == null) {
            this.innerProperties = new OldAgreementProperties();
        }
        this.innerProperties().withState(state);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of OldAgreementTermsInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of OldAgreementTermsInner if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the OldAgreementTermsInner.
     */
    public static OldAgreementTermsInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            OldAgreementTermsInner deserializedOldAgreementTermsInner = new OldAgreementTermsInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedOldAgreementTermsInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedOldAgreementTermsInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedOldAgreementTermsInner.type = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    deserializedOldAgreementTermsInner.innerProperties = OldAgreementProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedOldAgreementTermsInner;
        });
    }
}
