// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.marketplaceordering.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.marketplaceordering.models.State;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Old Agreement Terms definition.
 */
@Fluent
public final class OldAgreementProperties implements JsonSerializable<OldAgreementProperties> {
    /*
     * A unique identifier of the agreement.
     */
    private String id;

    /*
     * Publisher identifier string of image being deployed.
     */
    private String publisher;

    /*
     * Offer identifier string of image being deployed.
     */
    private String offer;

    /*
     * Date and time in UTC of when the terms were accepted. This is empty if state is cancelled.
     */
    private OffsetDateTime signDate;

    /*
     * Date and time in UTC of when the terms were cancelled. This is empty if state is active.
     */
    private OffsetDateTime cancelDate;

    /*
     * Whether the agreement is active or cancelled
     */
    private State state;

    /**
     * Creates an instance of OldAgreementProperties class.
     */
    public OldAgreementProperties() {
    }

    /**
     * Get the id property: A unique identifier of the agreement.
     * 
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Set the id property: A unique identifier of the agreement.
     * 
     * @param id the id value to set.
     * @return the OldAgreementProperties object itself.
     */
    public OldAgreementProperties withId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get the publisher property: Publisher identifier string of image being deployed.
     * 
     * @return the publisher value.
     */
    public String publisher() {
        return this.publisher;
    }

    /**
     * Set the publisher property: Publisher identifier string of image being deployed.
     * 
     * @param publisher the publisher value to set.
     * @return the OldAgreementProperties object itself.
     */
    public OldAgreementProperties withPublisher(String publisher) {
        this.publisher = publisher;
        return this;
    }

    /**
     * Get the offer property: Offer identifier string of image being deployed.
     * 
     * @return the offer value.
     */
    public String offer() {
        return this.offer;
    }

    /**
     * Set the offer property: Offer identifier string of image being deployed.
     * 
     * @param offer the offer value to set.
     * @return the OldAgreementProperties object itself.
     */
    public OldAgreementProperties withOffer(String offer) {
        this.offer = offer;
        return this;
    }

    /**
     * Get the signDate property: Date and time in UTC of when the terms were accepted. This is empty if state is
     * cancelled.
     * 
     * @return the signDate value.
     */
    public OffsetDateTime signDate() {
        return this.signDate;
    }

    /**
     * Set the signDate property: Date and time in UTC of when the terms were accepted. This is empty if state is
     * cancelled.
     * 
     * @param signDate the signDate value to set.
     * @return the OldAgreementProperties object itself.
     */
    public OldAgreementProperties withSignDate(OffsetDateTime signDate) {
        this.signDate = signDate;
        return this;
    }

    /**
     * Get the cancelDate property: Date and time in UTC of when the terms were cancelled. This is empty if state is
     * active.
     * 
     * @return the cancelDate value.
     */
    public OffsetDateTime cancelDate() {
        return this.cancelDate;
    }

    /**
     * Set the cancelDate property: Date and time in UTC of when the terms were cancelled. This is empty if state is
     * active.
     * 
     * @param cancelDate the cancelDate value to set.
     * @return the OldAgreementProperties object itself.
     */
    public OldAgreementProperties withCancelDate(OffsetDateTime cancelDate) {
        this.cancelDate = cancelDate;
        return this;
    }

    /**
     * Get the state property: Whether the agreement is active or cancelled.
     * 
     * @return the state value.
     */
    public State state() {
        return this.state;
    }

    /**
     * Set the state property: Whether the agreement is active or cancelled.
     * 
     * @param state the state value to set.
     * @return the OldAgreementProperties object itself.
     */
    public OldAgreementProperties withState(State state) {
        this.state = state;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeStringField("publisher", this.publisher);
        jsonWriter.writeStringField("offer", this.offer);
        jsonWriter.writeStringField("signDate",
            this.signDate == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.signDate));
        jsonWriter.writeStringField("cancelDate",
            this.cancelDate == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.cancelDate));
        jsonWriter.writeStringField("state", this.state == null ? null : this.state.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of OldAgreementProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of OldAgreementProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the OldAgreementProperties.
     */
    public static OldAgreementProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            OldAgreementProperties deserializedOldAgreementProperties = new OldAgreementProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedOldAgreementProperties.id = reader.getString();
                } else if ("publisher".equals(fieldName)) {
                    deserializedOldAgreementProperties.publisher = reader.getString();
                } else if ("offer".equals(fieldName)) {
                    deserializedOldAgreementProperties.offer = reader.getString();
                } else if ("signDate".equals(fieldName)) {
                    deserializedOldAgreementProperties.signDate = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("cancelDate".equals(fieldName)) {
                    deserializedOldAgreementProperties.cancelDate = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("state".equals(fieldName)) {
                    deserializedOldAgreementProperties.state = State.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedOldAgreementProperties;
        });
    }
}
