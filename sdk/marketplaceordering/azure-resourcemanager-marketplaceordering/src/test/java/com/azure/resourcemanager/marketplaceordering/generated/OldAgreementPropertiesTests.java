// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.marketplaceordering.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.marketplaceordering.fluent.models.OldAgreementProperties;
import com.azure.resourcemanager.marketplaceordering.models.State;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;

public final class OldAgreementPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        OldAgreementProperties model = BinaryData.fromString(
            "{\"id\":\"ixjsprozvcputeg\",\"publisher\":\"wmfdatscmdvpjhul\",\"offer\":\"uvm\",\"signDate\":\"2021-08-30T14:27:09Z\",\"cancelDate\":\"2021-07-24T14:38:57Z\",\"state\":\"Canceled\"}")
            .toObject(OldAgreementProperties.class);
        Assertions.assertEquals("ixjsprozvcputeg", model.id());
        Assertions.assertEquals("wmfdatscmdvpjhul", model.publisher());
        Assertions.assertEquals("uvm", model.offer());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-30T14:27:09Z"), model.signDate());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-24T14:38:57Z"), model.cancelDate());
        Assertions.assertEquals(State.CANCELED, model.state());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        OldAgreementProperties model = new OldAgreementProperties().withId("ixjsprozvcputeg")
            .withPublisher("wmfdatscmdvpjhul")
            .withOffer("uvm")
            .withSignDate(OffsetDateTime.parse("2021-08-30T14:27:09Z"))
            .withCancelDate(OffsetDateTime.parse("2021-07-24T14:38:57Z"))
            .withState(State.CANCELED);
        model = BinaryData.fromObject(model).toObject(OldAgreementProperties.class);
        Assertions.assertEquals("ixjsprozvcputeg", model.id());
        Assertions.assertEquals("wmfdatscmdvpjhul", model.publisher());
        Assertions.assertEquals("uvm", model.offer());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-30T14:27:09Z"), model.signDate());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-24T14:38:57Z"), model.cancelDate());
        Assertions.assertEquals(State.CANCELED, model.state());
    }
}
