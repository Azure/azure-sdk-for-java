// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.marketplaceordering.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.marketplaceordering.MarketplaceOrderingManager;
import com.azure.resourcemanager.marketplaceordering.models.OldAgreementTerms;
import com.azure.resourcemanager.marketplaceordering.models.State;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class MarketplaceAgreementsGetAgreementWithResponseMockTests {
    @Test
    public void testGetAgreementWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"id\":\"h\",\"publisher\":\"oifiyipjxsqwpgr\",\"offer\":\"znorcj\",\"signDate\":\"2021-01-31T18:34:57Z\",\"cancelDate\":\"2021-11-14T01:20:47Z\",\"state\":\"Canceled\"},\"id\":\"qabnmoc\",\"name\":\"cyshurzafbljjgp\",\"type\":\"toqcjmklja\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        MarketplaceOrderingManager manager = MarketplaceOrderingManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        OldAgreementTerms response = manager.marketplaceAgreements()
            .getAgreementWithResponse("wjdk", "rsoodqxhcrmnoh", "t", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("h", response.idPropertiesId());
        Assertions.assertEquals("oifiyipjxsqwpgr", response.publisher());
        Assertions.assertEquals("znorcj", response.offer());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-31T18:34:57Z"), response.signDate());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-14T01:20:47Z"), response.cancelDate());
        Assertions.assertEquals(State.CANCELED, response.state());
    }
}
