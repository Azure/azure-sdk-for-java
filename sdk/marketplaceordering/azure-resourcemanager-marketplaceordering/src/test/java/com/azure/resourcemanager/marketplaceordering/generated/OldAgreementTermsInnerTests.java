// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.marketplaceordering.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.marketplaceordering.fluent.models.OldAgreementTermsInner;
import com.azure.resourcemanager.marketplaceordering.models.State;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;

public final class OldAgreementTermsInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        OldAgreementTermsInner model = BinaryData.fromString(
            "{\"properties\":{\"id\":\"yejhk\",\"publisher\":\"htnapczwlokjyem\",\"offer\":\"vnipjox\",\"signDate\":\"2020-12-27T04:20:57Z\",\"cancelDate\":\"2021-05-06T13:14:58Z\",\"state\":\"Canceled\"},\"id\":\"jspodmailzyde\",\"name\":\"o\",\"type\":\"wyahuxinpmqnja\"}")
            .toObject(OldAgreementTermsInner.class);
        Assertions.assertEquals("yejhk", model.idPropertiesId());
        Assertions.assertEquals("htnapczwlokjyem", model.publisher());
        Assertions.assertEquals("vnipjox", model.offer());
        Assertions.assertEquals(OffsetDateTime.parse("2020-12-27T04:20:57Z"), model.signDate());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-06T13:14:58Z"), model.cancelDate());
        Assertions.assertEquals(State.CANCELED, model.state());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        OldAgreementTermsInner model = new OldAgreementTermsInner().withIdPropertiesId("yejhk")
            .withPublisher("htnapczwlokjyem")
            .withOffer("vnipjox")
            .withSignDate(OffsetDateTime.parse("2020-12-27T04:20:57Z"))
            .withCancelDate(OffsetDateTime.parse("2021-05-06T13:14:58Z"))
            .withState(State.CANCELED);
        model = BinaryData.fromObject(model).toObject(OldAgreementTermsInner.class);
        Assertions.assertEquals("yejhk", model.idPropertiesId());
        Assertions.assertEquals("htnapczwlokjyem", model.publisher());
        Assertions.assertEquals("vnipjox", model.offer());
        Assertions.assertEquals(OffsetDateTime.parse("2020-12-27T04:20:57Z"), model.signDate());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-06T13:14:58Z"), model.cancelDate());
        Assertions.assertEquals(State.CANCELED, model.state());
    }
}
