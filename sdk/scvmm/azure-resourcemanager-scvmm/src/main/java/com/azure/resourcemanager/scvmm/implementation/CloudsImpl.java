// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.scvmm.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.scvmm.fluent.CloudsClient;
import com.azure.resourcemanager.scvmm.fluent.models.CloudInner;
import com.azure.resourcemanager.scvmm.models.Cloud;
import com.azure.resourcemanager.scvmm.models.Clouds;
import com.azure.resourcemanager.scvmm.models.ForceDelete;

public final class CloudsImpl implements Clouds {
    private static final ClientLogger LOGGER = new ClientLogger(CloudsImpl.class);

    private final CloudsClient innerClient;

    private final com.azure.resourcemanager.scvmm.ScvmmManager serviceManager;

    public CloudsImpl(CloudsClient innerClient, com.azure.resourcemanager.scvmm.ScvmmManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<Cloud> list() {
        PagedIterable<CloudInner> inner = this.serviceClient().list();
        return ResourceManagerUtils.mapPage(inner, inner1 -> new CloudImpl(inner1, this.manager()));
    }

    public PagedIterable<Cloud> list(Context context) {
        PagedIterable<CloudInner> inner = this.serviceClient().list(context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new CloudImpl(inner1, this.manager()));
    }

    public PagedIterable<Cloud> listByResourceGroup(String resourceGroupName) {
        PagedIterable<CloudInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new CloudImpl(inner1, this.manager()));
    }

    public PagedIterable<Cloud> listByResourceGroup(String resourceGroupName, Context context) {
        PagedIterable<CloudInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new CloudImpl(inner1, this.manager()));
    }

    public Response<Cloud> getByResourceGroupWithResponse(String resourceGroupName, String cloudResourceName,
        Context context) {
        Response<CloudInner> inner
            = this.serviceClient().getByResourceGroupWithResponse(resourceGroupName, cloudResourceName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new CloudImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public Cloud getByResourceGroup(String resourceGroupName, String cloudResourceName) {
        CloudInner inner = this.serviceClient().getByResourceGroup(resourceGroupName, cloudResourceName);
        if (inner != null) {
            return new CloudImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String cloudResourceName) {
        this.serviceClient().delete(resourceGroupName, cloudResourceName);
    }

    public void delete(String resourceGroupName, String cloudResourceName, ForceDelete force, Context context) {
        this.serviceClient().delete(resourceGroupName, cloudResourceName, force, context);
    }

    public Cloud getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String cloudResourceName = ResourceManagerUtils.getValueFromIdByName(id, "clouds");
        if (cloudResourceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'clouds'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, cloudResourceName, Context.NONE).getValue();
    }

    public Response<Cloud> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String cloudResourceName = ResourceManagerUtils.getValueFromIdByName(id, "clouds");
        if (cloudResourceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'clouds'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, cloudResourceName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String cloudResourceName = ResourceManagerUtils.getValueFromIdByName(id, "clouds");
        if (cloudResourceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'clouds'.", id)));
        }
        ForceDelete localForce = null;
        this.delete(resourceGroupName, cloudResourceName, localForce, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, ForceDelete force, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String cloudResourceName = ResourceManagerUtils.getValueFromIdByName(id, "clouds");
        if (cloudResourceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'clouds'.", id)));
        }
        this.delete(resourceGroupName, cloudResourceName, force, context);
    }

    private CloudsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.scvmm.ScvmmManager manager() {
        return this.serviceManager;
    }

    public CloudImpl define(String name) {
        return new CloudImpl(name, this.manager());
    }
}
