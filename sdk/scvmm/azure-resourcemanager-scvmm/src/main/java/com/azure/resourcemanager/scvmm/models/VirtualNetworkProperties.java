// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.scvmm.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Defines the resource properties.
 */
@Fluent
public final class VirtualNetworkProperties implements JsonSerializable<VirtualNetworkProperties> {
    /*
     * Gets or sets the inventory Item ID for the resource.
     */
    private String inventoryItemId;

    /*
     * Unique ID of the virtual network.
     */
    private String uuid;

    /*
     * ARM Id of the vmmServer resource in which this resource resides.
     */
    private String vmmServerId;

    /*
     * Name of the virtual network in vmmServer.
     */
    private String networkName;

    /*
     * Provisioning state of the resource.
     */
    private ProvisioningState provisioningState;

    /**
     * Creates an instance of VirtualNetworkProperties class.
     */
    public VirtualNetworkProperties() {
    }

    /**
     * Get the inventoryItemId property: Gets or sets the inventory Item ID for the resource.
     * 
     * @return the inventoryItemId value.
     */
    public String inventoryItemId() {
        return this.inventoryItemId;
    }

    /**
     * Set the inventoryItemId property: Gets or sets the inventory Item ID for the resource.
     * 
     * @param inventoryItemId the inventoryItemId value to set.
     * @return the VirtualNetworkProperties object itself.
     */
    public VirtualNetworkProperties withInventoryItemId(String inventoryItemId) {
        this.inventoryItemId = inventoryItemId;
        return this;
    }

    /**
     * Get the uuid property: Unique ID of the virtual network.
     * 
     * @return the uuid value.
     */
    public String uuid() {
        return this.uuid;
    }

    /**
     * Set the uuid property: Unique ID of the virtual network.
     * 
     * @param uuid the uuid value to set.
     * @return the VirtualNetworkProperties object itself.
     */
    public VirtualNetworkProperties withUuid(String uuid) {
        this.uuid = uuid;
        return this;
    }

    /**
     * Get the vmmServerId property: ARM Id of the vmmServer resource in which this resource resides.
     * 
     * @return the vmmServerId value.
     */
    public String vmmServerId() {
        return this.vmmServerId;
    }

    /**
     * Set the vmmServerId property: ARM Id of the vmmServer resource in which this resource resides.
     * 
     * @param vmmServerId the vmmServerId value to set.
     * @return the VirtualNetworkProperties object itself.
     */
    public VirtualNetworkProperties withVmmServerId(String vmmServerId) {
        this.vmmServerId = vmmServerId;
        return this;
    }

    /**
     * Get the networkName property: Name of the virtual network in vmmServer.
     * 
     * @return the networkName value.
     */
    public String networkName() {
        return this.networkName;
    }

    /**
     * Get the provisioningState property: Provisioning state of the resource.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("inventoryItemId", this.inventoryItemId);
        jsonWriter.writeStringField("uuid", this.uuid);
        jsonWriter.writeStringField("vmmServerId", this.vmmServerId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of VirtualNetworkProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of VirtualNetworkProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the VirtualNetworkProperties.
     */
    public static VirtualNetworkProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            VirtualNetworkProperties deserializedVirtualNetworkProperties = new VirtualNetworkProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("inventoryItemId".equals(fieldName)) {
                    deserializedVirtualNetworkProperties.inventoryItemId = reader.getString();
                } else if ("uuid".equals(fieldName)) {
                    deserializedVirtualNetworkProperties.uuid = reader.getString();
                } else if ("vmmServerId".equals(fieldName)) {
                    deserializedVirtualNetworkProperties.vmmServerId = reader.getString();
                } else if ("networkName".equals(fieldName)) {
                    deserializedVirtualNetworkProperties.networkName = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedVirtualNetworkProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedVirtualNetworkProperties;
        });
    }
}
