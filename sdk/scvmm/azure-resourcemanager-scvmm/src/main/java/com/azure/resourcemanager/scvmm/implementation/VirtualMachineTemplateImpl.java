// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.scvmm.implementation;

import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.scvmm.fluent.models.VirtualMachineTemplateInner;
import com.azure.resourcemanager.scvmm.models.DynamicMemoryEnabled;
import com.azure.resourcemanager.scvmm.models.ExtendedLocation;
import com.azure.resourcemanager.scvmm.models.IsCustomizable;
import com.azure.resourcemanager.scvmm.models.LimitCpuForMigration;
import com.azure.resourcemanager.scvmm.models.NetworkInterfaces;
import com.azure.resourcemanager.scvmm.models.OsType;
import com.azure.resourcemanager.scvmm.models.ResourcePatch;
import com.azure.resourcemanager.scvmm.models.VirtualDisk;
import com.azure.resourcemanager.scvmm.models.VirtualMachineTemplate;
import java.util.Collections;
import java.util.List;
import java.util.Map;

public final class VirtualMachineTemplateImpl
    implements VirtualMachineTemplate, VirtualMachineTemplate.Definition, VirtualMachineTemplate.Update {
    private VirtualMachineTemplateInner innerObject;

    private final com.azure.resourcemanager.scvmm.ScvmmManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public ExtendedLocation extendedLocation() {
        return this.innerModel().extendedLocation();
    }

    public String inventoryItemId() {
        return this.innerModel().inventoryItemId();
    }

    public String uuid() {
        return this.innerModel().uuid();
    }

    public String vmmServerId() {
        return this.innerModel().vmmServerId();
    }

    public OsType osType() {
        return this.innerModel().osType();
    }

    public String osName() {
        return this.innerModel().osName();
    }

    public String computerName() {
        return this.innerModel().computerName();
    }

    public Integer memoryMB() {
        return this.innerModel().memoryMB();
    }

    public Integer cpuCount() {
        return this.innerModel().cpuCount();
    }

    public LimitCpuForMigration limitCpuForMigration() {
        return this.innerModel().limitCpuForMigration();
    }

    public DynamicMemoryEnabled dynamicMemoryEnabled() {
        return this.innerModel().dynamicMemoryEnabled();
    }

    public IsCustomizable isCustomizable() {
        return this.innerModel().isCustomizable();
    }

    public Integer dynamicMemoryMaxMB() {
        return this.innerModel().dynamicMemoryMaxMB();
    }

    public Integer dynamicMemoryMinMB() {
        return this.innerModel().dynamicMemoryMinMB();
    }

    public String isHighlyAvailable() {
        return this.innerModel().isHighlyAvailable();
    }

    public Integer generation() {
        return this.innerModel().generation();
    }

    public List<NetworkInterfaces> networkInterfaces() {
        List<NetworkInterfaces> inner = this.innerModel().networkInterfaces();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public List<VirtualDisk> disks() {
        List<VirtualDisk> inner = this.innerModel().disks();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public String provisioningState() {
        return this.innerModel().provisioningState();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public VirtualMachineTemplateInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.scvmm.ScvmmManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String virtualMachineTemplateName;

    private ResourcePatch updateBody;

    public VirtualMachineTemplateImpl withExistingResourceGroup(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public VirtualMachineTemplate create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getVirtualMachineTemplates()
                .createOrUpdate(resourceGroupName, virtualMachineTemplateName, this.innerModel(), Context.NONE);
        return this;
    }

    public VirtualMachineTemplate create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getVirtualMachineTemplates()
                .createOrUpdate(resourceGroupName, virtualMachineTemplateName, this.innerModel(), context);
        return this;
    }

    VirtualMachineTemplateImpl(String name, com.azure.resourcemanager.scvmm.ScvmmManager serviceManager) {
        this.innerObject = new VirtualMachineTemplateInner();
        this.serviceManager = serviceManager;
        this.virtualMachineTemplateName = name;
    }

    public VirtualMachineTemplateImpl update() {
        this.updateBody = new ResourcePatch();
        return this;
    }

    public VirtualMachineTemplate apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getVirtualMachineTemplates()
                .update(resourceGroupName, virtualMachineTemplateName, updateBody, Context.NONE);
        return this;
    }

    public VirtualMachineTemplate apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getVirtualMachineTemplates()
                .update(resourceGroupName, virtualMachineTemplateName, updateBody, context);
        return this;
    }

    VirtualMachineTemplateImpl(
        VirtualMachineTemplateInner innerObject, com.azure.resourcemanager.scvmm.ScvmmManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.virtualMachineTemplateName = Utils.getValueFromIdByName(innerObject.id(), "virtualMachineTemplates");
    }

    public VirtualMachineTemplate refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getVirtualMachineTemplates()
                .getByResourceGroupWithResponse(resourceGroupName, virtualMachineTemplateName, Context.NONE)
                .getValue();
        return this;
    }

    public VirtualMachineTemplate refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getVirtualMachineTemplates()
                .getByResourceGroupWithResponse(resourceGroupName, virtualMachineTemplateName, context)
                .getValue();
        return this;
    }

    public VirtualMachineTemplateImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public VirtualMachineTemplateImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public VirtualMachineTemplateImpl withExtendedLocation(ExtendedLocation extendedLocation) {
        this.innerModel().withExtendedLocation(extendedLocation);
        return this;
    }

    public VirtualMachineTemplateImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateBody.withTags(tags);
            return this;
        }
    }

    public VirtualMachineTemplateImpl withInventoryItemId(String inventoryItemId) {
        this.innerModel().withInventoryItemId(inventoryItemId);
        return this;
    }

    public VirtualMachineTemplateImpl withUuid(String uuid) {
        this.innerModel().withUuid(uuid);
        return this;
    }

    public VirtualMachineTemplateImpl withVmmServerId(String vmmServerId) {
        this.innerModel().withVmmServerId(vmmServerId);
        return this;
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
