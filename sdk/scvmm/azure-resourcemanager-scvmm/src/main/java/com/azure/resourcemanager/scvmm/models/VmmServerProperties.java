// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.scvmm.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Defines the resource properties.
 */
@Fluent
public final class VmmServerProperties implements JsonSerializable<VmmServerProperties> {
    /*
     * Credentials to connect to VmmServer.
     */
    private VmmCredential credentials;

    /*
     * Fqdn is the hostname/ip of the vmmServer.
     */
    private String fqdn;

    /*
     * Port is the port on which the vmmServer is listening.
     */
    private Integer port;

    /*
     * Gets the connection status to the vmmServer.
     */
    private String connectionStatus;

    /*
     * Gets any error message if connection to vmmServer is having any issue.
     */
    private String errorMessage;

    /*
     * Unique ID of vmmServer.
     */
    private String uuid;

    /*
     * Version is the version of the vmmSever.
     */
    private String version;

    /*
     * Provisioning state of the resource.
     */
    private ProvisioningState provisioningState;

    /**
     * Creates an instance of VmmServerProperties class.
     */
    public VmmServerProperties() {
    }

    /**
     * Get the credentials property: Credentials to connect to VmmServer.
     * 
     * @return the credentials value.
     */
    public VmmCredential credentials() {
        return this.credentials;
    }

    /**
     * Set the credentials property: Credentials to connect to VmmServer.
     * 
     * @param credentials the credentials value to set.
     * @return the VmmServerProperties object itself.
     */
    public VmmServerProperties withCredentials(VmmCredential credentials) {
        this.credentials = credentials;
        return this;
    }

    /**
     * Get the fqdn property: Fqdn is the hostname/ip of the vmmServer.
     * 
     * @return the fqdn value.
     */
    public String fqdn() {
        return this.fqdn;
    }

    /**
     * Set the fqdn property: Fqdn is the hostname/ip of the vmmServer.
     * 
     * @param fqdn the fqdn value to set.
     * @return the VmmServerProperties object itself.
     */
    public VmmServerProperties withFqdn(String fqdn) {
        this.fqdn = fqdn;
        return this;
    }

    /**
     * Get the port property: Port is the port on which the vmmServer is listening.
     * 
     * @return the port value.
     */
    public Integer port() {
        return this.port;
    }

    /**
     * Set the port property: Port is the port on which the vmmServer is listening.
     * 
     * @param port the port value to set.
     * @return the VmmServerProperties object itself.
     */
    public VmmServerProperties withPort(Integer port) {
        this.port = port;
        return this;
    }

    /**
     * Get the connectionStatus property: Gets the connection status to the vmmServer.
     * 
     * @return the connectionStatus value.
     */
    public String connectionStatus() {
        return this.connectionStatus;
    }

    /**
     * Get the errorMessage property: Gets any error message if connection to vmmServer is having any issue.
     * 
     * @return the errorMessage value.
     */
    public String errorMessage() {
        return this.errorMessage;
    }

    /**
     * Get the uuid property: Unique ID of vmmServer.
     * 
     * @return the uuid value.
     */
    public String uuid() {
        return this.uuid;
    }

    /**
     * Get the version property: Version is the version of the vmmSever.
     * 
     * @return the version value.
     */
    public String version() {
        return this.version;
    }

    /**
     * Get the provisioningState property: Provisioning state of the resource.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (credentials() != null) {
            credentials().validate();
        }
        if (fqdn() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property fqdn in model VmmServerProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(VmmServerProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("fqdn", this.fqdn);
        jsonWriter.writeJsonField("credentials", this.credentials);
        jsonWriter.writeNumberField("port", this.port);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of VmmServerProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of VmmServerProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the VmmServerProperties.
     */
    public static VmmServerProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            VmmServerProperties deserializedVmmServerProperties = new VmmServerProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("fqdn".equals(fieldName)) {
                    deserializedVmmServerProperties.fqdn = reader.getString();
                } else if ("credentials".equals(fieldName)) {
                    deserializedVmmServerProperties.credentials = VmmCredential.fromJson(reader);
                } else if ("port".equals(fieldName)) {
                    deserializedVmmServerProperties.port = reader.getNullable(JsonReader::getInt);
                } else if ("connectionStatus".equals(fieldName)) {
                    deserializedVmmServerProperties.connectionStatus = reader.getString();
                } else if ("errorMessage".equals(fieldName)) {
                    deserializedVmmServerProperties.errorMessage = reader.getString();
                } else if ("uuid".equals(fieldName)) {
                    deserializedVmmServerProperties.uuid = reader.getString();
                } else if ("version".equals(fieldName)) {
                    deserializedVmmServerProperties.version = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedVmmServerProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedVmmServerProperties;
        });
    }
}
