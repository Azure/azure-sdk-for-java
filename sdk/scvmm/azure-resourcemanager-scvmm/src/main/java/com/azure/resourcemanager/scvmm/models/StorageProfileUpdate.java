// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.scvmm.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Defines the resource update properties.
 */
@Fluent
public final class StorageProfileUpdate implements JsonSerializable<StorageProfileUpdate> {
    /*
     * Gets or sets the list of virtual disks associated with the virtual machine.
     */
    private List<VirtualDiskUpdate> disks;

    /**
     * Creates an instance of StorageProfileUpdate class.
     */
    public StorageProfileUpdate() {
    }

    /**
     * Get the disks property: Gets or sets the list of virtual disks associated with the virtual machine.
     * 
     * @return the disks value.
     */
    public List<VirtualDiskUpdate> disks() {
        return this.disks;
    }

    /**
     * Set the disks property: Gets or sets the list of virtual disks associated with the virtual machine.
     * 
     * @param disks the disks value to set.
     * @return the StorageProfileUpdate object itself.
     */
    public StorageProfileUpdate withDisks(List<VirtualDiskUpdate> disks) {
        this.disks = disks;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (disks() != null) {
            disks().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("disks", this.disks, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StorageProfileUpdate from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of StorageProfileUpdate if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the StorageProfileUpdate.
     */
    public static StorageProfileUpdate fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            StorageProfileUpdate deserializedStorageProfileUpdate = new StorageProfileUpdate();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("disks".equals(fieldName)) {
                    List<VirtualDiskUpdate> disks = reader.readArray(reader1 -> VirtualDiskUpdate.fromJson(reader1));
                    deserializedStorageProfileUpdate.disks = disks;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedStorageProfileUpdate;
        });
    }
}
