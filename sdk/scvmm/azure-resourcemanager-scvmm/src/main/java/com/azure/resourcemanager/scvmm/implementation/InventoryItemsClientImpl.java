// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.scvmm.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.resourcemanager.scvmm.fluent.InventoryItemsClient;
import com.azure.resourcemanager.scvmm.fluent.models.InventoryItemInner;
import com.azure.resourcemanager.scvmm.models.InventoryItemListResult;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in InventoryItemsClient.
 */
public final class InventoryItemsClientImpl implements InventoryItemsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final InventoryItemsService service;

    /**
     * The service client containing this operation class.
     */
    private final ScvmmClientImpl client;

    /**
     * Initializes an instance of InventoryItemsClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    InventoryItemsClientImpl(ScvmmClientImpl client) {
        this.service
            = RestProxy.create(InventoryItemsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for ScvmmClientInventoryItems to be used by the proxy service to perform
     * REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "ScvmmClientInventory")
    public interface InventoryItemsService {
        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ScVmm/vmmServers/{vmmServerName}/inventoryItems")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<InventoryItemListResult>> listByVmmServer(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("vmmServerName") String vmmServerName,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ScVmm/vmmServers/{vmmServerName}/inventoryItems/{inventoryItemResourceName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<InventoryItemInner>> get(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("vmmServerName") String vmmServerName,
            @PathParam("inventoryItemResourceName") String inventoryItemResourceName,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ScVmm/vmmServers/{vmmServerName}/inventoryItems/{inventoryItemResourceName}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<InventoryItemInner>> create(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("vmmServerName") String vmmServerName,
            @PathParam("inventoryItemResourceName") String inventoryItemResourceName,
            @BodyParam("application/json") InventoryItemInner resource, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ScVmm/vmmServers/{vmmServerName}/inventoryItems/{inventoryItemResourceName}")
        @ExpectedResponses({ 200, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Void>> delete(@HostParam("$host") String endpoint, @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("vmmServerName") String vmmServerName,
            @PathParam("inventoryItemResourceName") String inventoryItemResourceName,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<InventoryItemListResult>> listByVmmServerNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Implements GET for the list of Inventory Items in the VMMServer.
     * 
     * Returns the list of inventoryItems in the given VmmServer.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param vmmServerName Name of the VmmServer.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a InventoryItem list operation along with {@link PagedResponse} on successful completion
     * of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<InventoryItemInner>> listByVmmServerSinglePageAsync(String resourceGroupName,
        String vmmServerName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (vmmServerName == null) {
            return Mono.error(new IllegalArgumentException("Parameter vmmServerName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listByVmmServer(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, vmmServerName, accept, context))
            .<PagedResponse<InventoryItemInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Implements GET for the list of Inventory Items in the VMMServer.
     * 
     * Returns the list of inventoryItems in the given VmmServer.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param vmmServerName Name of the VmmServer.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a InventoryItem list operation along with {@link PagedResponse} on successful completion
     * of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<InventoryItemInner>> listByVmmServerSinglePageAsync(String resourceGroupName,
        String vmmServerName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (vmmServerName == null) {
            return Mono.error(new IllegalArgumentException("Parameter vmmServerName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listByVmmServer(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
                resourceGroupName, vmmServerName, accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }

    /**
     * Implements GET for the list of Inventory Items in the VMMServer.
     * 
     * Returns the list of inventoryItems in the given VmmServer.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param vmmServerName Name of the VmmServer.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a InventoryItem list operation as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<InventoryItemInner> listByVmmServerAsync(String resourceGroupName, String vmmServerName) {
        return new PagedFlux<>(() -> listByVmmServerSinglePageAsync(resourceGroupName, vmmServerName),
            nextLink -> listByVmmServerNextSinglePageAsync(nextLink));
    }

    /**
     * Implements GET for the list of Inventory Items in the VMMServer.
     * 
     * Returns the list of inventoryItems in the given VmmServer.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param vmmServerName Name of the VmmServer.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a InventoryItem list operation as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<InventoryItemInner> listByVmmServerAsync(String resourceGroupName, String vmmServerName,
        Context context) {
        return new PagedFlux<>(() -> listByVmmServerSinglePageAsync(resourceGroupName, vmmServerName, context),
            nextLink -> listByVmmServerNextSinglePageAsync(nextLink, context));
    }

    /**
     * Implements GET for the list of Inventory Items in the VMMServer.
     * 
     * Returns the list of inventoryItems in the given VmmServer.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param vmmServerName Name of the VmmServer.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a InventoryItem list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<InventoryItemInner> listByVmmServer(String resourceGroupName, String vmmServerName) {
        return new PagedIterable<>(listByVmmServerAsync(resourceGroupName, vmmServerName));
    }

    /**
     * Implements GET for the list of Inventory Items in the VMMServer.
     * 
     * Returns the list of inventoryItems in the given VmmServer.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param vmmServerName Name of the VmmServer.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a InventoryItem list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<InventoryItemInner> listByVmmServer(String resourceGroupName, String vmmServerName,
        Context context) {
        return new PagedIterable<>(listByVmmServerAsync(resourceGroupName, vmmServerName, context));
    }

    /**
     * Implements GET InventoryItem method.
     * 
     * Shows an inventory item.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param vmmServerName Name of the VmmServer.
     * @param inventoryItemResourceName Name of the inventoryItem.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return defines the inventory item along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<InventoryItemInner>> getWithResponseAsync(String resourceGroupName, String vmmServerName,
        String inventoryItemResourceName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (vmmServerName == null) {
            return Mono.error(new IllegalArgumentException("Parameter vmmServerName is required and cannot be null."));
        }
        if (inventoryItemResourceName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter inventoryItemResourceName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.get(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, vmmServerName, inventoryItemResourceName, accept,
                context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Implements GET InventoryItem method.
     * 
     * Shows an inventory item.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param vmmServerName Name of the VmmServer.
     * @param inventoryItemResourceName Name of the inventoryItem.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return defines the inventory item along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<InventoryItemInner>> getWithResponseAsync(String resourceGroupName, String vmmServerName,
        String inventoryItemResourceName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (vmmServerName == null) {
            return Mono.error(new IllegalArgumentException("Parameter vmmServerName is required and cannot be null."));
        }
        if (inventoryItemResourceName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter inventoryItemResourceName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.get(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
            resourceGroupName, vmmServerName, inventoryItemResourceName, accept, context);
    }

    /**
     * Implements GET InventoryItem method.
     * 
     * Shows an inventory item.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param vmmServerName Name of the VmmServer.
     * @param inventoryItemResourceName Name of the inventoryItem.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return defines the inventory item on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<InventoryItemInner> getAsync(String resourceGroupName, String vmmServerName,
        String inventoryItemResourceName) {
        return getWithResponseAsync(resourceGroupName, vmmServerName, inventoryItemResourceName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Implements GET InventoryItem method.
     * 
     * Shows an inventory item.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param vmmServerName Name of the VmmServer.
     * @param inventoryItemResourceName Name of the inventoryItem.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return defines the inventory item along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<InventoryItemInner> getWithResponse(String resourceGroupName, String vmmServerName,
        String inventoryItemResourceName, Context context) {
        return getWithResponseAsync(resourceGroupName, vmmServerName, inventoryItemResourceName, context).block();
    }

    /**
     * Implements GET InventoryItem method.
     * 
     * Shows an inventory item.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param vmmServerName Name of the VmmServer.
     * @param inventoryItemResourceName Name of the inventoryItem.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return defines the inventory item.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public InventoryItemInner get(String resourceGroupName, String vmmServerName, String inventoryItemResourceName) {
        return getWithResponse(resourceGroupName, vmmServerName, inventoryItemResourceName, Context.NONE).getValue();
    }

    /**
     * Implements InventoryItem PUT method.
     * 
     * Create Or Update InventoryItem.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param vmmServerName Name of the VmmServer.
     * @param inventoryItemResourceName Name of the inventoryItem.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return defines the inventory item along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<InventoryItemInner>> createWithResponseAsync(String resourceGroupName, String vmmServerName,
        String inventoryItemResourceName, InventoryItemInner resource) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (vmmServerName == null) {
            return Mono.error(new IllegalArgumentException("Parameter vmmServerName is required and cannot be null."));
        }
        if (inventoryItemResourceName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter inventoryItemResourceName is required and cannot be null."));
        }
        if (resource == null) {
            return Mono.error(new IllegalArgumentException("Parameter resource is required and cannot be null."));
        } else {
            resource.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.create(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, vmmServerName, inventoryItemResourceName, resource,
                accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Implements InventoryItem PUT method.
     * 
     * Create Or Update InventoryItem.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param vmmServerName Name of the VmmServer.
     * @param inventoryItemResourceName Name of the inventoryItem.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return defines the inventory item along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<InventoryItemInner>> createWithResponseAsync(String resourceGroupName, String vmmServerName,
        String inventoryItemResourceName, InventoryItemInner resource, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (vmmServerName == null) {
            return Mono.error(new IllegalArgumentException("Parameter vmmServerName is required and cannot be null."));
        }
        if (inventoryItemResourceName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter inventoryItemResourceName is required and cannot be null."));
        }
        if (resource == null) {
            return Mono.error(new IllegalArgumentException("Parameter resource is required and cannot be null."));
        } else {
            resource.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.create(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
            resourceGroupName, vmmServerName, inventoryItemResourceName, resource, accept, context);
    }

    /**
     * Implements InventoryItem PUT method.
     * 
     * Create Or Update InventoryItem.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param vmmServerName Name of the VmmServer.
     * @param inventoryItemResourceName Name of the inventoryItem.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return defines the inventory item on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<InventoryItemInner> createAsync(String resourceGroupName, String vmmServerName,
        String inventoryItemResourceName, InventoryItemInner resource) {
        return createWithResponseAsync(resourceGroupName, vmmServerName, inventoryItemResourceName, resource)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Implements InventoryItem PUT method.
     * 
     * Create Or Update InventoryItem.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param vmmServerName Name of the VmmServer.
     * @param inventoryItemResourceName Name of the inventoryItem.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return defines the inventory item along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<InventoryItemInner> createWithResponse(String resourceGroupName, String vmmServerName,
        String inventoryItemResourceName, InventoryItemInner resource, Context context) {
        return createWithResponseAsync(resourceGroupName, vmmServerName, inventoryItemResourceName, resource, context)
            .block();
    }

    /**
     * Implements InventoryItem PUT method.
     * 
     * Create Or Update InventoryItem.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param vmmServerName Name of the VmmServer.
     * @param inventoryItemResourceName Name of the inventoryItem.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return defines the inventory item.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public InventoryItemInner create(String resourceGroupName, String vmmServerName, String inventoryItemResourceName,
        InventoryItemInner resource) {
        return createWithResponse(resourceGroupName, vmmServerName, inventoryItemResourceName, resource, Context.NONE)
            .getValue();
    }

    /**
     * Implements inventoryItem DELETE method.
     * 
     * Deletes an inventoryItem.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param vmmServerName Name of the VmmServer.
     * @param inventoryItemResourceName Name of the inventoryItem.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteWithResponseAsync(String resourceGroupName, String vmmServerName,
        String inventoryItemResourceName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (vmmServerName == null) {
            return Mono.error(new IllegalArgumentException("Parameter vmmServerName is required and cannot be null."));
        }
        if (inventoryItemResourceName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter inventoryItemResourceName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.delete(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, vmmServerName, inventoryItemResourceName, accept,
                context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Implements inventoryItem DELETE method.
     * 
     * Deletes an inventoryItem.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param vmmServerName Name of the VmmServer.
     * @param inventoryItemResourceName Name of the inventoryItem.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteWithResponseAsync(String resourceGroupName, String vmmServerName,
        String inventoryItemResourceName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (vmmServerName == null) {
            return Mono.error(new IllegalArgumentException("Parameter vmmServerName is required and cannot be null."));
        }
        if (inventoryItemResourceName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter inventoryItemResourceName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.delete(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
            resourceGroupName, vmmServerName, inventoryItemResourceName, accept, context);
    }

    /**
     * Implements inventoryItem DELETE method.
     * 
     * Deletes an inventoryItem.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param vmmServerName Name of the VmmServer.
     * @param inventoryItemResourceName Name of the inventoryItem.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String vmmServerName, String inventoryItemResourceName) {
        return deleteWithResponseAsync(resourceGroupName, vmmServerName, inventoryItemResourceName)
            .flatMap(ignored -> Mono.empty());
    }

    /**
     * Implements inventoryItem DELETE method.
     * 
     * Deletes an inventoryItem.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param vmmServerName Name of the VmmServer.
     * @param inventoryItemResourceName Name of the inventoryItem.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteWithResponse(String resourceGroupName, String vmmServerName,
        String inventoryItemResourceName, Context context) {
        return deleteWithResponseAsync(resourceGroupName, vmmServerName, inventoryItemResourceName, context).block();
    }

    /**
     * Implements inventoryItem DELETE method.
     * 
     * Deletes an inventoryItem.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param vmmServerName Name of the VmmServer.
     * @param inventoryItemResourceName Name of the inventoryItem.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String vmmServerName, String inventoryItemResourceName) {
        deleteWithResponse(resourceGroupName, vmmServerName, inventoryItemResourceName, Context.NONE);
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a InventoryItem list operation along with {@link PagedResponse} on successful completion
     * of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<InventoryItemInner>> listByVmmServerNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listByVmmServerNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<InventoryItemInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a InventoryItem list operation along with {@link PagedResponse} on successful completion
     * of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<InventoryItemInner>> listByVmmServerNextSinglePageAsync(String nextLink,
        Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.listByVmmServerNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }
}
