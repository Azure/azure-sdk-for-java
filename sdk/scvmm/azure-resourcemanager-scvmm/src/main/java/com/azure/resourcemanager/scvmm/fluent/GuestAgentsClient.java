// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.scvmm.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.scvmm.fluent.models.GuestAgentInner;

/**
 * An instance of this class provides access to all the operations defined in GuestAgentsClient.
 */
public interface GuestAgentsClient {
    /**
     * Implements GET GuestAgent in a vm.
     * 
     * Returns the list of GuestAgent of the given vm.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a GuestAgent list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<GuestAgentInner> listByVirtualMachineInstance(String resourceUri);

    /**
     * Implements GET GuestAgent in a vm.
     * 
     * Returns the list of GuestAgent of the given vm.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a GuestAgent list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<GuestAgentInner> listByVirtualMachineInstance(String resourceUri, Context context);

    /**
     * Gets GuestAgent.
     * 
     * Implements GuestAgent GET method.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return defines the GuestAgent along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<GuestAgentInner> getWithResponse(String resourceUri, Context context);

    /**
     * Gets GuestAgent.
     * 
     * Implements GuestAgent GET method.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return defines the GuestAgent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    GuestAgentInner get(String resourceUri);

    /**
     * Implements GuestAgent PUT method.
     * 
     * Create Or Update GuestAgent.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of defines the GuestAgent.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<GuestAgentInner>, GuestAgentInner> beginCreate(String resourceUri, GuestAgentInner resource);

    /**
     * Implements GuestAgent PUT method.
     * 
     * Create Or Update GuestAgent.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of defines the GuestAgent.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<GuestAgentInner>, GuestAgentInner> beginCreate(String resourceUri, GuestAgentInner resource,
        Context context);

    /**
     * Implements GuestAgent PUT method.
     * 
     * Create Or Update GuestAgent.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return defines the GuestAgent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    GuestAgentInner create(String resourceUri, GuestAgentInner resource);

    /**
     * Implements GuestAgent PUT method.
     * 
     * Create Or Update GuestAgent.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return defines the GuestAgent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    GuestAgentInner create(String resourceUri, GuestAgentInner resource, Context context);

    /**
     * Deletes a GuestAgent resource.
     * 
     * Implements GuestAgent DELETE method.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<Void> deleteWithResponse(String resourceUri, Context context);

    /**
     * Deletes a GuestAgent resource.
     * 
     * Implements GuestAgent DELETE method.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceUri);
}
