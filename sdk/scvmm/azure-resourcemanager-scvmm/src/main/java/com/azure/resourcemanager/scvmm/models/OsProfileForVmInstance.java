// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.scvmm.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Defines the resource properties.
 */
@Fluent
public final class OsProfileForVmInstance implements JsonSerializable<OsProfileForVmInstance> {
    /*
     * Admin password of the virtual machine.
     */
    private String adminPassword;

    /*
     * Gets or sets computer name.
     */
    private String computerName;

    /*
     * Gets the type of the os.
     */
    private OsType osType;

    /*
     * Gets os sku.
     */
    private String osSku;

    /*
     * Gets os version.
     */
    private String osVersion;

    /**
     * Creates an instance of OsProfileForVmInstance class.
     */
    public OsProfileForVmInstance() {
    }

    /**
     * Get the adminPassword property: Admin password of the virtual machine.
     * 
     * @return the adminPassword value.
     */
    public String adminPassword() {
        return this.adminPassword;
    }

    /**
     * Set the adminPassword property: Admin password of the virtual machine.
     * 
     * @param adminPassword the adminPassword value to set.
     * @return the OsProfileForVmInstance object itself.
     */
    public OsProfileForVmInstance withAdminPassword(String adminPassword) {
        this.adminPassword = adminPassword;
        return this;
    }

    /**
     * Get the computerName property: Gets or sets computer name.
     * 
     * @return the computerName value.
     */
    public String computerName() {
        return this.computerName;
    }

    /**
     * Set the computerName property: Gets or sets computer name.
     * 
     * @param computerName the computerName value to set.
     * @return the OsProfileForVmInstance object itself.
     */
    public OsProfileForVmInstance withComputerName(String computerName) {
        this.computerName = computerName;
        return this;
    }

    /**
     * Get the osType property: Gets the type of the os.
     * 
     * @return the osType value.
     */
    public OsType osType() {
        return this.osType;
    }

    /**
     * Get the osSku property: Gets os sku.
     * 
     * @return the osSku value.
     */
    public String osSku() {
        return this.osSku;
    }

    /**
     * Get the osVersion property: Gets os version.
     * 
     * @return the osVersion value.
     */
    public String osVersion() {
        return this.osVersion;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("adminPassword", this.adminPassword);
        jsonWriter.writeStringField("computerName", this.computerName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of OsProfileForVmInstance from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of OsProfileForVmInstance if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the OsProfileForVmInstance.
     */
    public static OsProfileForVmInstance fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            OsProfileForVmInstance deserializedOsProfileForVmInstance = new OsProfileForVmInstance();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("adminPassword".equals(fieldName)) {
                    deserializedOsProfileForVmInstance.adminPassword = reader.getString();
                } else if ("computerName".equals(fieldName)) {
                    deserializedOsProfileForVmInstance.computerName = reader.getString();
                } else if ("osType".equals(fieldName)) {
                    deserializedOsProfileForVmInstance.osType = OsType.fromString(reader.getString());
                } else if ("osSku".equals(fieldName)) {
                    deserializedOsProfileForVmInstance.osSku = reader.getString();
                } else if ("osVersion".equals(fieldName)) {
                    deserializedOsProfileForVmInstance.osVersion = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedOsProfileForVmInstance;
        });
    }
}
