// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.scvmm.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** Specifies the vmmServer infrastructure specific settings for the virtual machine instance. */
@Fluent
public final class InfrastructureProfile {
    /*
     * Gets or sets the inventory Item ID for the resource.
     */
    @JsonProperty(value = "inventoryItemId")
    private String inventoryItemId;

    /*
     * ARM Id of the vmmServer resource in which this resource resides.
     */
    @JsonProperty(value = "vmmServerId")
    private String vmmServerId;

    /*
     * ARM Id of the cloud resource to use for deploying the vm.
     */
    @JsonProperty(value = "cloudId")
    private String cloudId;

    /*
     * ARM Id of the template resource to use for deploying the vm.
     */
    @JsonProperty(value = "templateId")
    private String templateId;

    /*
     * VMName is the name of VM on the SCVMM server.
     */
    @JsonProperty(value = "vmName")
    private String vmName;

    /*
     * Unique ID of the virtual machine.
     */
    @JsonProperty(value = "uuid")
    private String uuid;

    /*
     * Last restored checkpoint in the vm.
     */
    @JsonProperty(value = "lastRestoredVMCheckpoint", access = JsonProperty.Access.WRITE_ONLY)
    private Checkpoint lastRestoredVMCheckpoint;

    /*
     * Checkpoints in the vm.
     */
    @JsonProperty(value = "checkpoints")
    private List<Checkpoint> checkpoints;

    /*
     * Type of checkpoint supported for the vm.
     */
    @JsonProperty(value = "checkpointType")
    private String checkpointType;

    /*
     * Gets or sets the generation for the vm.
     */
    @JsonProperty(value = "generation")
    private Integer generation;

    /*
     * Gets or sets the bios guid for the vm.
     */
    @JsonProperty(value = "biosGuid")
    private String biosGuid;

    /** Creates an instance of InfrastructureProfile class. */
    public InfrastructureProfile() {
    }

    /**
     * Get the inventoryItemId property: Gets or sets the inventory Item ID for the resource.
     *
     * @return the inventoryItemId value.
     */
    public String inventoryItemId() {
        return this.inventoryItemId;
    }

    /**
     * Set the inventoryItemId property: Gets or sets the inventory Item ID for the resource.
     *
     * @param inventoryItemId the inventoryItemId value to set.
     * @return the InfrastructureProfile object itself.
     */
    public InfrastructureProfile withInventoryItemId(String inventoryItemId) {
        this.inventoryItemId = inventoryItemId;
        return this;
    }

    /**
     * Get the vmmServerId property: ARM Id of the vmmServer resource in which this resource resides.
     *
     * @return the vmmServerId value.
     */
    public String vmmServerId() {
        return this.vmmServerId;
    }

    /**
     * Set the vmmServerId property: ARM Id of the vmmServer resource in which this resource resides.
     *
     * @param vmmServerId the vmmServerId value to set.
     * @return the InfrastructureProfile object itself.
     */
    public InfrastructureProfile withVmmServerId(String vmmServerId) {
        this.vmmServerId = vmmServerId;
        return this;
    }

    /**
     * Get the cloudId property: ARM Id of the cloud resource to use for deploying the vm.
     *
     * @return the cloudId value.
     */
    public String cloudId() {
        return this.cloudId;
    }

    /**
     * Set the cloudId property: ARM Id of the cloud resource to use for deploying the vm.
     *
     * @param cloudId the cloudId value to set.
     * @return the InfrastructureProfile object itself.
     */
    public InfrastructureProfile withCloudId(String cloudId) {
        this.cloudId = cloudId;
        return this;
    }

    /**
     * Get the templateId property: ARM Id of the template resource to use for deploying the vm.
     *
     * @return the templateId value.
     */
    public String templateId() {
        return this.templateId;
    }

    /**
     * Set the templateId property: ARM Id of the template resource to use for deploying the vm.
     *
     * @param templateId the templateId value to set.
     * @return the InfrastructureProfile object itself.
     */
    public InfrastructureProfile withTemplateId(String templateId) {
        this.templateId = templateId;
        return this;
    }

    /**
     * Get the vmName property: VMName is the name of VM on the SCVMM server.
     *
     * @return the vmName value.
     */
    public String vmName() {
        return this.vmName;
    }

    /**
     * Set the vmName property: VMName is the name of VM on the SCVMM server.
     *
     * @param vmName the vmName value to set.
     * @return the InfrastructureProfile object itself.
     */
    public InfrastructureProfile withVmName(String vmName) {
        this.vmName = vmName;
        return this;
    }

    /**
     * Get the uuid property: Unique ID of the virtual machine.
     *
     * @return the uuid value.
     */
    public String uuid() {
        return this.uuid;
    }

    /**
     * Set the uuid property: Unique ID of the virtual machine.
     *
     * @param uuid the uuid value to set.
     * @return the InfrastructureProfile object itself.
     */
    public InfrastructureProfile withUuid(String uuid) {
        this.uuid = uuid;
        return this;
    }

    /**
     * Get the lastRestoredVMCheckpoint property: Last restored checkpoint in the vm.
     *
     * @return the lastRestoredVMCheckpoint value.
     */
    public Checkpoint lastRestoredVMCheckpoint() {
        return this.lastRestoredVMCheckpoint;
    }

    /**
     * Get the checkpoints property: Checkpoints in the vm.
     *
     * @return the checkpoints value.
     */
    public List<Checkpoint> checkpoints() {
        return this.checkpoints;
    }

    /**
     * Set the checkpoints property: Checkpoints in the vm.
     *
     * @param checkpoints the checkpoints value to set.
     * @return the InfrastructureProfile object itself.
     */
    public InfrastructureProfile withCheckpoints(List<Checkpoint> checkpoints) {
        this.checkpoints = checkpoints;
        return this;
    }

    /**
     * Get the checkpointType property: Type of checkpoint supported for the vm.
     *
     * @return the checkpointType value.
     */
    public String checkpointType() {
        return this.checkpointType;
    }

    /**
     * Set the checkpointType property: Type of checkpoint supported for the vm.
     *
     * @param checkpointType the checkpointType value to set.
     * @return the InfrastructureProfile object itself.
     */
    public InfrastructureProfile withCheckpointType(String checkpointType) {
        this.checkpointType = checkpointType;
        return this;
    }

    /**
     * Get the generation property: Gets or sets the generation for the vm.
     *
     * @return the generation value.
     */
    public Integer generation() {
        return this.generation;
    }

    /**
     * Set the generation property: Gets or sets the generation for the vm.
     *
     * @param generation the generation value to set.
     * @return the InfrastructureProfile object itself.
     */
    public InfrastructureProfile withGeneration(Integer generation) {
        this.generation = generation;
        return this;
    }

    /**
     * Get the biosGuid property: Gets or sets the bios guid for the vm.
     *
     * @return the biosGuid value.
     */
    public String biosGuid() {
        return this.biosGuid;
    }

    /**
     * Set the biosGuid property: Gets or sets the bios guid for the vm.
     *
     * @param biosGuid the biosGuid value to set.
     * @return the InfrastructureProfile object itself.
     */
    public InfrastructureProfile withBiosGuid(String biosGuid) {
        this.biosGuid = biosGuid;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (lastRestoredVMCheckpoint() != null) {
            lastRestoredVMCheckpoint().validate();
        }
        if (checkpoints() != null) {
            checkpoints().forEach(e -> e.validate());
        }
    }
}
