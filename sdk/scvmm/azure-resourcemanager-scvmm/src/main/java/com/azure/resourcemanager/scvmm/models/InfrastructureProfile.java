// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.scvmm.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Specifies the vmmServer infrastructure specific settings for the virtual machine instance.
 */
@Fluent
public final class InfrastructureProfile implements JsonSerializable<InfrastructureProfile> {
    /*
     * Gets or sets the inventory Item ID for the resource.
     */
    private String inventoryItemId;

    /*
     * ARM Id of the vmmServer resource in which this resource resides.
     */
    private String vmmServerId;

    /*
     * ARM Id of the cloud resource to use for deploying the vm.
     */
    private String cloudId;

    /*
     * ARM Id of the template resource to use for deploying the vm.
     */
    private String templateId;

    /*
     * VMName is the name of VM on the SCVmm server.
     */
    private String vmName;

    /*
     * Unique ID of the virtual machine.
     */
    private String uuid;

    /*
     * Last restored checkpoint in the vm.
     */
    private Checkpoint lastRestoredVmCheckpoint;

    /*
     * Checkpoints in the vm.
     */
    private List<Checkpoint> checkpoints;

    /*
     * Type of checkpoint supported for the vm.
     */
    private String checkpointType;

    /*
     * Gets or sets the generation for the vm.
     */
    private Integer generation;

    /*
     * Gets or sets the bios guid for the vm.
     */
    private String biosGuid;

    /**
     * Creates an instance of InfrastructureProfile class.
     */
    public InfrastructureProfile() {
    }

    /**
     * Get the inventoryItemId property: Gets or sets the inventory Item ID for the resource.
     * 
     * @return the inventoryItemId value.
     */
    public String inventoryItemId() {
        return this.inventoryItemId;
    }

    /**
     * Set the inventoryItemId property: Gets or sets the inventory Item ID for the resource.
     * 
     * @param inventoryItemId the inventoryItemId value to set.
     * @return the InfrastructureProfile object itself.
     */
    public InfrastructureProfile withInventoryItemId(String inventoryItemId) {
        this.inventoryItemId = inventoryItemId;
        return this;
    }

    /**
     * Get the vmmServerId property: ARM Id of the vmmServer resource in which this resource resides.
     * 
     * @return the vmmServerId value.
     */
    public String vmmServerId() {
        return this.vmmServerId;
    }

    /**
     * Set the vmmServerId property: ARM Id of the vmmServer resource in which this resource resides.
     * 
     * @param vmmServerId the vmmServerId value to set.
     * @return the InfrastructureProfile object itself.
     */
    public InfrastructureProfile withVmmServerId(String vmmServerId) {
        this.vmmServerId = vmmServerId;
        return this;
    }

    /**
     * Get the cloudId property: ARM Id of the cloud resource to use for deploying the vm.
     * 
     * @return the cloudId value.
     */
    public String cloudId() {
        return this.cloudId;
    }

    /**
     * Set the cloudId property: ARM Id of the cloud resource to use for deploying the vm.
     * 
     * @param cloudId the cloudId value to set.
     * @return the InfrastructureProfile object itself.
     */
    public InfrastructureProfile withCloudId(String cloudId) {
        this.cloudId = cloudId;
        return this;
    }

    /**
     * Get the templateId property: ARM Id of the template resource to use for deploying the vm.
     * 
     * @return the templateId value.
     */
    public String templateId() {
        return this.templateId;
    }

    /**
     * Set the templateId property: ARM Id of the template resource to use for deploying the vm.
     * 
     * @param templateId the templateId value to set.
     * @return the InfrastructureProfile object itself.
     */
    public InfrastructureProfile withTemplateId(String templateId) {
        this.templateId = templateId;
        return this;
    }

    /**
     * Get the vmName property: VMName is the name of VM on the SCVmm server.
     * 
     * @return the vmName value.
     */
    public String vmName() {
        return this.vmName;
    }

    /**
     * Set the vmName property: VMName is the name of VM on the SCVmm server.
     * 
     * @param vmName the vmName value to set.
     * @return the InfrastructureProfile object itself.
     */
    public InfrastructureProfile withVmName(String vmName) {
        this.vmName = vmName;
        return this;
    }

    /**
     * Get the uuid property: Unique ID of the virtual machine.
     * 
     * @return the uuid value.
     */
    public String uuid() {
        return this.uuid;
    }

    /**
     * Set the uuid property: Unique ID of the virtual machine.
     * 
     * @param uuid the uuid value to set.
     * @return the InfrastructureProfile object itself.
     */
    public InfrastructureProfile withUuid(String uuid) {
        this.uuid = uuid;
        return this;
    }

    /**
     * Get the lastRestoredVmCheckpoint property: Last restored checkpoint in the vm.
     * 
     * @return the lastRestoredVmCheckpoint value.
     */
    public Checkpoint lastRestoredVmCheckpoint() {
        return this.lastRestoredVmCheckpoint;
    }

    /**
     * Get the checkpoints property: Checkpoints in the vm.
     * 
     * @return the checkpoints value.
     */
    public List<Checkpoint> checkpoints() {
        return this.checkpoints;
    }

    /**
     * Get the checkpointType property: Type of checkpoint supported for the vm.
     * 
     * @return the checkpointType value.
     */
    public String checkpointType() {
        return this.checkpointType;
    }

    /**
     * Set the checkpointType property: Type of checkpoint supported for the vm.
     * 
     * @param checkpointType the checkpointType value to set.
     * @return the InfrastructureProfile object itself.
     */
    public InfrastructureProfile withCheckpointType(String checkpointType) {
        this.checkpointType = checkpointType;
        return this;
    }

    /**
     * Get the generation property: Gets or sets the generation for the vm.
     * 
     * @return the generation value.
     */
    public Integer generation() {
        return this.generation;
    }

    /**
     * Set the generation property: Gets or sets the generation for the vm.
     * 
     * @param generation the generation value to set.
     * @return the InfrastructureProfile object itself.
     */
    public InfrastructureProfile withGeneration(Integer generation) {
        this.generation = generation;
        return this;
    }

    /**
     * Get the biosGuid property: Gets or sets the bios guid for the vm.
     * 
     * @return the biosGuid value.
     */
    public String biosGuid() {
        return this.biosGuid;
    }

    /**
     * Set the biosGuid property: Gets or sets the bios guid for the vm.
     * 
     * @param biosGuid the biosGuid value to set.
     * @return the InfrastructureProfile object itself.
     */
    public InfrastructureProfile withBiosGuid(String biosGuid) {
        this.biosGuid = biosGuid;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (lastRestoredVmCheckpoint() != null) {
            lastRestoredVmCheckpoint().validate();
        }
        if (checkpoints() != null) {
            checkpoints().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("inventoryItemId", this.inventoryItemId);
        jsonWriter.writeStringField("vmmServerId", this.vmmServerId);
        jsonWriter.writeStringField("cloudId", this.cloudId);
        jsonWriter.writeStringField("templateId", this.templateId);
        jsonWriter.writeStringField("vmName", this.vmName);
        jsonWriter.writeStringField("uuid", this.uuid);
        jsonWriter.writeStringField("checkpointType", this.checkpointType);
        jsonWriter.writeNumberField("generation", this.generation);
        jsonWriter.writeStringField("biosGuid", this.biosGuid);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of InfrastructureProfile from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of InfrastructureProfile if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the InfrastructureProfile.
     */
    public static InfrastructureProfile fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            InfrastructureProfile deserializedInfrastructureProfile = new InfrastructureProfile();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("inventoryItemId".equals(fieldName)) {
                    deserializedInfrastructureProfile.inventoryItemId = reader.getString();
                } else if ("vmmServerId".equals(fieldName)) {
                    deserializedInfrastructureProfile.vmmServerId = reader.getString();
                } else if ("cloudId".equals(fieldName)) {
                    deserializedInfrastructureProfile.cloudId = reader.getString();
                } else if ("templateId".equals(fieldName)) {
                    deserializedInfrastructureProfile.templateId = reader.getString();
                } else if ("vmName".equals(fieldName)) {
                    deserializedInfrastructureProfile.vmName = reader.getString();
                } else if ("uuid".equals(fieldName)) {
                    deserializedInfrastructureProfile.uuid = reader.getString();
                } else if ("lastRestoredVMCheckpoint".equals(fieldName)) {
                    deserializedInfrastructureProfile.lastRestoredVmCheckpoint = Checkpoint.fromJson(reader);
                } else if ("checkpoints".equals(fieldName)) {
                    List<Checkpoint> checkpoints = reader.readArray(reader1 -> Checkpoint.fromJson(reader1));
                    deserializedInfrastructureProfile.checkpoints = checkpoints;
                } else if ("checkpointType".equals(fieldName)) {
                    deserializedInfrastructureProfile.checkpointType = reader.getString();
                } else if ("generation".equals(fieldName)) {
                    deserializedInfrastructureProfile.generation = reader.getNullable(JsonReader::getInt);
                } else if ("biosGuid".equals(fieldName)) {
                    deserializedInfrastructureProfile.biosGuid = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedInfrastructureProfile;
        });
    }
}
