// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.scvmm.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.scvmm.models.AvailabilitySetListItem;
import com.azure.resourcemanager.scvmm.models.HardwareProfile;
import com.azure.resourcemanager.scvmm.models.InfrastructureProfile;
import com.azure.resourcemanager.scvmm.models.NetworkProfile;
import com.azure.resourcemanager.scvmm.models.OsProfileForVMInstance;
import com.azure.resourcemanager.scvmm.models.ProvisioningState;
import com.azure.resourcemanager.scvmm.models.StorageProfile;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** Defines the resource properties. */
@Fluent
public final class VirtualMachineInstanceProperties {
    /*
     * Availability Sets in vm.
     */
    @JsonProperty(value = "availabilitySets")
    private List<AvailabilitySetListItem> availabilitySets;

    /*
     * OS properties.
     */
    @JsonProperty(value = "osProfile")
    private OsProfileForVMInstance osProfile;

    /*
     * Hardware properties.
     */
    @JsonProperty(value = "hardwareProfile")
    private HardwareProfile hardwareProfile;

    /*
     * Network properties.
     */
    @JsonProperty(value = "networkProfile")
    private NetworkProfile networkProfile;

    /*
     * Storage properties.
     */
    @JsonProperty(value = "storageProfile")
    private StorageProfile storageProfile;

    /*
     * Gets the infrastructure profile.
     */
    @JsonProperty(value = "infrastructureProfile")
    private InfrastructureProfile infrastructureProfile;

    /*
     * Gets the power state of the virtual machine.
     */
    @JsonProperty(value = "powerState", access = JsonProperty.Access.WRITE_ONLY)
    private String powerState;

    /*
     * Provisioning state of the resource.
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private ProvisioningState provisioningState;

    /** Creates an instance of VirtualMachineInstanceProperties class. */
    public VirtualMachineInstanceProperties() {
    }

    /**
     * Get the availabilitySets property: Availability Sets in vm.
     *
     * @return the availabilitySets value.
     */
    public List<AvailabilitySetListItem> availabilitySets() {
        return this.availabilitySets;
    }

    /**
     * Set the availabilitySets property: Availability Sets in vm.
     *
     * @param availabilitySets the availabilitySets value to set.
     * @return the VirtualMachineInstanceProperties object itself.
     */
    public VirtualMachineInstanceProperties withAvailabilitySets(List<AvailabilitySetListItem> availabilitySets) {
        this.availabilitySets = availabilitySets;
        return this;
    }

    /**
     * Get the osProfile property: OS properties.
     *
     * @return the osProfile value.
     */
    public OsProfileForVMInstance osProfile() {
        return this.osProfile;
    }

    /**
     * Set the osProfile property: OS properties.
     *
     * @param osProfile the osProfile value to set.
     * @return the VirtualMachineInstanceProperties object itself.
     */
    public VirtualMachineInstanceProperties withOsProfile(OsProfileForVMInstance osProfile) {
        this.osProfile = osProfile;
        return this;
    }

    /**
     * Get the hardwareProfile property: Hardware properties.
     *
     * @return the hardwareProfile value.
     */
    public HardwareProfile hardwareProfile() {
        return this.hardwareProfile;
    }

    /**
     * Set the hardwareProfile property: Hardware properties.
     *
     * @param hardwareProfile the hardwareProfile value to set.
     * @return the VirtualMachineInstanceProperties object itself.
     */
    public VirtualMachineInstanceProperties withHardwareProfile(HardwareProfile hardwareProfile) {
        this.hardwareProfile = hardwareProfile;
        return this;
    }

    /**
     * Get the networkProfile property: Network properties.
     *
     * @return the networkProfile value.
     */
    public NetworkProfile networkProfile() {
        return this.networkProfile;
    }

    /**
     * Set the networkProfile property: Network properties.
     *
     * @param networkProfile the networkProfile value to set.
     * @return the VirtualMachineInstanceProperties object itself.
     */
    public VirtualMachineInstanceProperties withNetworkProfile(NetworkProfile networkProfile) {
        this.networkProfile = networkProfile;
        return this;
    }

    /**
     * Get the storageProfile property: Storage properties.
     *
     * @return the storageProfile value.
     */
    public StorageProfile storageProfile() {
        return this.storageProfile;
    }

    /**
     * Set the storageProfile property: Storage properties.
     *
     * @param storageProfile the storageProfile value to set.
     * @return the VirtualMachineInstanceProperties object itself.
     */
    public VirtualMachineInstanceProperties withStorageProfile(StorageProfile storageProfile) {
        this.storageProfile = storageProfile;
        return this;
    }

    /**
     * Get the infrastructureProfile property: Gets the infrastructure profile.
     *
     * @return the infrastructureProfile value.
     */
    public InfrastructureProfile infrastructureProfile() {
        return this.infrastructureProfile;
    }

    /**
     * Set the infrastructureProfile property: Gets the infrastructure profile.
     *
     * @param infrastructureProfile the infrastructureProfile value to set.
     * @return the VirtualMachineInstanceProperties object itself.
     */
    public VirtualMachineInstanceProperties withInfrastructureProfile(InfrastructureProfile infrastructureProfile) {
        this.infrastructureProfile = infrastructureProfile;
        return this;
    }

    /**
     * Get the powerState property: Gets the power state of the virtual machine.
     *
     * @return the powerState value.
     */
    public String powerState() {
        return this.powerState;
    }

    /**
     * Get the provisioningState property: Provisioning state of the resource.
     *
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (availabilitySets() != null) {
            availabilitySets().forEach(e -> e.validate());
        }
        if (osProfile() != null) {
            osProfile().validate();
        }
        if (hardwareProfile() != null) {
            hardwareProfile().validate();
        }
        if (networkProfile() != null) {
            networkProfile().validate();
        }
        if (storageProfile() != null) {
            storageProfile().validate();
        }
        if (infrastructureProfile() != null) {
            infrastructureProfile().validate();
        }
    }
}
