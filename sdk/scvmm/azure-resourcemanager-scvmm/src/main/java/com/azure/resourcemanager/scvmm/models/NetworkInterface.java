// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.scvmm.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Network Interface model.
 */
@Fluent
public final class NetworkInterface implements JsonSerializable<NetworkInterface> {
    /*
     * Gets or sets the name of the network interface.
     */
    private String name;

    /*
     * Gets the display name of the network interface as shown in the vmmServer. This is the fallback label for a NIC
     * when the name is not set.
     */
    private String displayName;

    /*
     * Gets the nic ipv4 addresses.
     */
    private List<String> ipv4Addresses;

    /*
     * Gets the nic ipv6 addresses.
     */
    private List<String> ipv6Addresses;

    /*
     * Gets or sets the nic MAC address.
     */
    private String macAddress;

    /*
     * Gets or sets the ARM Id of the Microsoft.ScVmm/virtualNetwork resource to connect the nic.
     */
    private String virtualNetworkId;

    /*
     * Gets the name of the virtual network in vmmServer that the nic is connected to.
     */
    private String networkName;

    /*
     * Gets or sets the ipv4 address type.
     */
    private AllocationMethod ipv4AddressType;

    /*
     * Gets or sets the ipv6 address type.
     */
    private AllocationMethod ipv6AddressType;

    /*
     * Gets or sets the mac address type.
     */
    private AllocationMethod macAddressType;

    /*
     * Gets or sets the nic id.
     */
    private String nicId;

    /**
     * Creates an instance of NetworkInterface class.
     */
    public NetworkInterface() {
    }

    /**
     * Get the name property: Gets or sets the name of the network interface.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: Gets or sets the name of the network interface.
     * 
     * @param name the name value to set.
     * @return the NetworkInterface object itself.
     */
    public NetworkInterface withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the displayName property: Gets the display name of the network interface as shown in the vmmServer. This is
     * the fallback label for a NIC when the name is not set.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Get the ipv4Addresses property: Gets the nic ipv4 addresses.
     * 
     * @return the ipv4Addresses value.
     */
    public List<String> ipv4Addresses() {
        return this.ipv4Addresses;
    }

    /**
     * Get the ipv6Addresses property: Gets the nic ipv6 addresses.
     * 
     * @return the ipv6Addresses value.
     */
    public List<String> ipv6Addresses() {
        return this.ipv6Addresses;
    }

    /**
     * Get the macAddress property: Gets or sets the nic MAC address.
     * 
     * @return the macAddress value.
     */
    public String macAddress() {
        return this.macAddress;
    }

    /**
     * Set the macAddress property: Gets or sets the nic MAC address.
     * 
     * @param macAddress the macAddress value to set.
     * @return the NetworkInterface object itself.
     */
    public NetworkInterface withMacAddress(String macAddress) {
        this.macAddress = macAddress;
        return this;
    }

    /**
     * Get the virtualNetworkId property: Gets or sets the ARM Id of the Microsoft.ScVmm/virtualNetwork resource to
     * connect the nic.
     * 
     * @return the virtualNetworkId value.
     */
    public String virtualNetworkId() {
        return this.virtualNetworkId;
    }

    /**
     * Set the virtualNetworkId property: Gets or sets the ARM Id of the Microsoft.ScVmm/virtualNetwork resource to
     * connect the nic.
     * 
     * @param virtualNetworkId the virtualNetworkId value to set.
     * @return the NetworkInterface object itself.
     */
    public NetworkInterface withVirtualNetworkId(String virtualNetworkId) {
        this.virtualNetworkId = virtualNetworkId;
        return this;
    }

    /**
     * Get the networkName property: Gets the name of the virtual network in vmmServer that the nic is connected to.
     * 
     * @return the networkName value.
     */
    public String networkName() {
        return this.networkName;
    }

    /**
     * Get the ipv4AddressType property: Gets or sets the ipv4 address type.
     * 
     * @return the ipv4AddressType value.
     */
    public AllocationMethod ipv4AddressType() {
        return this.ipv4AddressType;
    }

    /**
     * Set the ipv4AddressType property: Gets or sets the ipv4 address type.
     * 
     * @param ipv4AddressType the ipv4AddressType value to set.
     * @return the NetworkInterface object itself.
     */
    public NetworkInterface withIpv4AddressType(AllocationMethod ipv4AddressType) {
        this.ipv4AddressType = ipv4AddressType;
        return this;
    }

    /**
     * Get the ipv6AddressType property: Gets or sets the ipv6 address type.
     * 
     * @return the ipv6AddressType value.
     */
    public AllocationMethod ipv6AddressType() {
        return this.ipv6AddressType;
    }

    /**
     * Set the ipv6AddressType property: Gets or sets the ipv6 address type.
     * 
     * @param ipv6AddressType the ipv6AddressType value to set.
     * @return the NetworkInterface object itself.
     */
    public NetworkInterface withIpv6AddressType(AllocationMethod ipv6AddressType) {
        this.ipv6AddressType = ipv6AddressType;
        return this;
    }

    /**
     * Get the macAddressType property: Gets or sets the mac address type.
     * 
     * @return the macAddressType value.
     */
    public AllocationMethod macAddressType() {
        return this.macAddressType;
    }

    /**
     * Set the macAddressType property: Gets or sets the mac address type.
     * 
     * @param macAddressType the macAddressType value to set.
     * @return the NetworkInterface object itself.
     */
    public NetworkInterface withMacAddressType(AllocationMethod macAddressType) {
        this.macAddressType = macAddressType;
        return this;
    }

    /**
     * Get the nicId property: Gets or sets the nic id.
     * 
     * @return the nicId value.
     */
    public String nicId() {
        return this.nicId;
    }

    /**
     * Set the nicId property: Gets or sets the nic id.
     * 
     * @param nicId the nicId value to set.
     * @return the NetworkInterface object itself.
     */
    public NetworkInterface withNicId(String nicId) {
        this.nicId = nicId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("macAddress", this.macAddress);
        jsonWriter.writeStringField("virtualNetworkId", this.virtualNetworkId);
        jsonWriter.writeStringField("ipv4AddressType",
            this.ipv4AddressType == null ? null : this.ipv4AddressType.toString());
        jsonWriter.writeStringField("ipv6AddressType",
            this.ipv6AddressType == null ? null : this.ipv6AddressType.toString());
        jsonWriter.writeStringField("macAddressType",
            this.macAddressType == null ? null : this.macAddressType.toString());
        jsonWriter.writeStringField("nicId", this.nicId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NetworkInterface from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NetworkInterface if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the NetworkInterface.
     */
    public static NetworkInterface fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NetworkInterface deserializedNetworkInterface = new NetworkInterface();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedNetworkInterface.name = reader.getString();
                } else if ("displayName".equals(fieldName)) {
                    deserializedNetworkInterface.displayName = reader.getString();
                } else if ("ipv4Addresses".equals(fieldName)) {
                    List<String> ipv4Addresses = reader.readArray(reader1 -> reader1.getString());
                    deserializedNetworkInterface.ipv4Addresses = ipv4Addresses;
                } else if ("ipv6Addresses".equals(fieldName)) {
                    List<String> ipv6Addresses = reader.readArray(reader1 -> reader1.getString());
                    deserializedNetworkInterface.ipv6Addresses = ipv6Addresses;
                } else if ("macAddress".equals(fieldName)) {
                    deserializedNetworkInterface.macAddress = reader.getString();
                } else if ("virtualNetworkId".equals(fieldName)) {
                    deserializedNetworkInterface.virtualNetworkId = reader.getString();
                } else if ("networkName".equals(fieldName)) {
                    deserializedNetworkInterface.networkName = reader.getString();
                } else if ("ipv4AddressType".equals(fieldName)) {
                    deserializedNetworkInterface.ipv4AddressType = AllocationMethod.fromString(reader.getString());
                } else if ("ipv6AddressType".equals(fieldName)) {
                    deserializedNetworkInterface.ipv6AddressType = AllocationMethod.fromString(reader.getString());
                } else if ("macAddressType".equals(fieldName)) {
                    deserializedNetworkInterface.macAddressType = AllocationMethod.fromString(reader.getString());
                } else if ("nicId".equals(fieldName)) {
                    deserializedNetworkInterface.nicId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNetworkInterface;
        });
    }
}
