// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.scvmm.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Defines the resource properties.
 */
@Fluent
public final class VirtualMachineTemplateProperties implements JsonSerializable<VirtualMachineTemplateProperties> {
    /*
     * Gets or sets the inventory Item ID for the resource.
     */
    private String inventoryItemId;

    /*
     * Unique ID of the virtual machine template.
     */
    private String uuid;

    /*
     * ARM Id of the vmmServer resource in which this resource resides.
     */
    private String vmmServerId;

    /*
     * Gets the type of the os.
     */
    private OsType osType;

    /*
     * Gets os name.
     */
    private String osName;

    /*
     * Gets computer name.
     */
    private String computerName;

    /*
     * MemoryMB is the desired size of a virtual machine's memory, in MB.
     */
    private Integer memoryMB;

    /*
     * Gets the desired number of vCPUs for the vm.
     */
    private Integer cpuCount;

    /*
     * Gets a value indicating whether to enable processor compatibility mode for live migration of VMs.
     */
    private LimitCpuForMigration limitCpuForMigration;

    /*
     * Gets a value indicating whether to enable dynamic memory or not.
     */
    private DynamicMemoryEnabled dynamicMemoryEnabled;

    /*
     * Gets a value indicating whether the vm template is customizable or not.
     */
    private IsCustomizable isCustomizable;

    /*
     * Gets the max dynamic memory for the vm.
     */
    private Integer dynamicMemoryMaxMB;

    /*
     * Gets the min dynamic memory for the vm.
     */
    private Integer dynamicMemoryMinMB;

    /*
     * Gets highly available property.
     */
    private IsHighlyAvailable isHighlyAvailable;

    /*
     * Gets the generation for the vm.
     */
    private Integer generation;

    /*
     * Gets the network interfaces of the template.
     */
    private List<NetworkInterface> networkInterfaces;

    /*
     * Gets the disks of the template.
     */
    private List<VirtualDisk> disks;

    /*
     * Provisioning state of the resource.
     */
    private ProvisioningState provisioningState;

    /**
     * Creates an instance of VirtualMachineTemplateProperties class.
     */
    public VirtualMachineTemplateProperties() {
    }

    /**
     * Get the inventoryItemId property: Gets or sets the inventory Item ID for the resource.
     * 
     * @return the inventoryItemId value.
     */
    public String inventoryItemId() {
        return this.inventoryItemId;
    }

    /**
     * Set the inventoryItemId property: Gets or sets the inventory Item ID for the resource.
     * 
     * @param inventoryItemId the inventoryItemId value to set.
     * @return the VirtualMachineTemplateProperties object itself.
     */
    public VirtualMachineTemplateProperties withInventoryItemId(String inventoryItemId) {
        this.inventoryItemId = inventoryItemId;
        return this;
    }

    /**
     * Get the uuid property: Unique ID of the virtual machine template.
     * 
     * @return the uuid value.
     */
    public String uuid() {
        return this.uuid;
    }

    /**
     * Set the uuid property: Unique ID of the virtual machine template.
     * 
     * @param uuid the uuid value to set.
     * @return the VirtualMachineTemplateProperties object itself.
     */
    public VirtualMachineTemplateProperties withUuid(String uuid) {
        this.uuid = uuid;
        return this;
    }

    /**
     * Get the vmmServerId property: ARM Id of the vmmServer resource in which this resource resides.
     * 
     * @return the vmmServerId value.
     */
    public String vmmServerId() {
        return this.vmmServerId;
    }

    /**
     * Set the vmmServerId property: ARM Id of the vmmServer resource in which this resource resides.
     * 
     * @param vmmServerId the vmmServerId value to set.
     * @return the VirtualMachineTemplateProperties object itself.
     */
    public VirtualMachineTemplateProperties withVmmServerId(String vmmServerId) {
        this.vmmServerId = vmmServerId;
        return this;
    }

    /**
     * Get the osType property: Gets the type of the os.
     * 
     * @return the osType value.
     */
    public OsType osType() {
        return this.osType;
    }

    /**
     * Get the osName property: Gets os name.
     * 
     * @return the osName value.
     */
    public String osName() {
        return this.osName;
    }

    /**
     * Get the computerName property: Gets computer name.
     * 
     * @return the computerName value.
     */
    public String computerName() {
        return this.computerName;
    }

    /**
     * Get the memoryMB property: MemoryMB is the desired size of a virtual machine's memory, in MB.
     * 
     * @return the memoryMB value.
     */
    public Integer memoryMB() {
        return this.memoryMB;
    }

    /**
     * Get the cpuCount property: Gets the desired number of vCPUs for the vm.
     * 
     * @return the cpuCount value.
     */
    public Integer cpuCount() {
        return this.cpuCount;
    }

    /**
     * Get the limitCpuForMigration property: Gets a value indicating whether to enable processor compatibility mode for
     * live migration of VMs.
     * 
     * @return the limitCpuForMigration value.
     */
    public LimitCpuForMigration limitCpuForMigration() {
        return this.limitCpuForMigration;
    }

    /**
     * Get the dynamicMemoryEnabled property: Gets a value indicating whether to enable dynamic memory or not.
     * 
     * @return the dynamicMemoryEnabled value.
     */
    public DynamicMemoryEnabled dynamicMemoryEnabled() {
        return this.dynamicMemoryEnabled;
    }

    /**
     * Get the isCustomizable property: Gets a value indicating whether the vm template is customizable or not.
     * 
     * @return the isCustomizable value.
     */
    public IsCustomizable isCustomizable() {
        return this.isCustomizable;
    }

    /**
     * Get the dynamicMemoryMaxMB property: Gets the max dynamic memory for the vm.
     * 
     * @return the dynamicMemoryMaxMB value.
     */
    public Integer dynamicMemoryMaxMB() {
        return this.dynamicMemoryMaxMB;
    }

    /**
     * Get the dynamicMemoryMinMB property: Gets the min dynamic memory for the vm.
     * 
     * @return the dynamicMemoryMinMB value.
     */
    public Integer dynamicMemoryMinMB() {
        return this.dynamicMemoryMinMB;
    }

    /**
     * Get the isHighlyAvailable property: Gets highly available property.
     * 
     * @return the isHighlyAvailable value.
     */
    public IsHighlyAvailable isHighlyAvailable() {
        return this.isHighlyAvailable;
    }

    /**
     * Get the generation property: Gets the generation for the vm.
     * 
     * @return the generation value.
     */
    public Integer generation() {
        return this.generation;
    }

    /**
     * Get the networkInterfaces property: Gets the network interfaces of the template.
     * 
     * @return the networkInterfaces value.
     */
    public List<NetworkInterface> networkInterfaces() {
        return this.networkInterfaces;
    }

    /**
     * Get the disks property: Gets the disks of the template.
     * 
     * @return the disks value.
     */
    public List<VirtualDisk> disks() {
        return this.disks;
    }

    /**
     * Get the provisioningState property: Provisioning state of the resource.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (networkInterfaces() != null) {
            networkInterfaces().forEach(e -> e.validate());
        }
        if (disks() != null) {
            disks().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("inventoryItemId", this.inventoryItemId);
        jsonWriter.writeStringField("uuid", this.uuid);
        jsonWriter.writeStringField("vmmServerId", this.vmmServerId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of VirtualMachineTemplateProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of VirtualMachineTemplateProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the VirtualMachineTemplateProperties.
     */
    public static VirtualMachineTemplateProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            VirtualMachineTemplateProperties deserializedVirtualMachineTemplateProperties
                = new VirtualMachineTemplateProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("inventoryItemId".equals(fieldName)) {
                    deserializedVirtualMachineTemplateProperties.inventoryItemId = reader.getString();
                } else if ("uuid".equals(fieldName)) {
                    deserializedVirtualMachineTemplateProperties.uuid = reader.getString();
                } else if ("vmmServerId".equals(fieldName)) {
                    deserializedVirtualMachineTemplateProperties.vmmServerId = reader.getString();
                } else if ("osType".equals(fieldName)) {
                    deserializedVirtualMachineTemplateProperties.osType = OsType.fromString(reader.getString());
                } else if ("osName".equals(fieldName)) {
                    deserializedVirtualMachineTemplateProperties.osName = reader.getString();
                } else if ("computerName".equals(fieldName)) {
                    deserializedVirtualMachineTemplateProperties.computerName = reader.getString();
                } else if ("memoryMB".equals(fieldName)) {
                    deserializedVirtualMachineTemplateProperties.memoryMB = reader.getNullable(JsonReader::getInt);
                } else if ("cpuCount".equals(fieldName)) {
                    deserializedVirtualMachineTemplateProperties.cpuCount = reader.getNullable(JsonReader::getInt);
                } else if ("limitCpuForMigration".equals(fieldName)) {
                    deserializedVirtualMachineTemplateProperties.limitCpuForMigration
                        = LimitCpuForMigration.fromString(reader.getString());
                } else if ("dynamicMemoryEnabled".equals(fieldName)) {
                    deserializedVirtualMachineTemplateProperties.dynamicMemoryEnabled
                        = DynamicMemoryEnabled.fromString(reader.getString());
                } else if ("isCustomizable".equals(fieldName)) {
                    deserializedVirtualMachineTemplateProperties.isCustomizable
                        = IsCustomizable.fromString(reader.getString());
                } else if ("dynamicMemoryMaxMB".equals(fieldName)) {
                    deserializedVirtualMachineTemplateProperties.dynamicMemoryMaxMB
                        = reader.getNullable(JsonReader::getInt);
                } else if ("dynamicMemoryMinMB".equals(fieldName)) {
                    deserializedVirtualMachineTemplateProperties.dynamicMemoryMinMB
                        = reader.getNullable(JsonReader::getInt);
                } else if ("isHighlyAvailable".equals(fieldName)) {
                    deserializedVirtualMachineTemplateProperties.isHighlyAvailable
                        = IsHighlyAvailable.fromString(reader.getString());
                } else if ("generation".equals(fieldName)) {
                    deserializedVirtualMachineTemplateProperties.generation = reader.getNullable(JsonReader::getInt);
                } else if ("networkInterfaces".equals(fieldName)) {
                    List<NetworkInterface> networkInterfaces
                        = reader.readArray(reader1 -> NetworkInterface.fromJson(reader1));
                    deserializedVirtualMachineTemplateProperties.networkInterfaces = networkInterfaces;
                } else if ("disks".equals(fieldName)) {
                    List<VirtualDisk> disks = reader.readArray(reader1 -> VirtualDisk.fromJson(reader1));
                    deserializedVirtualMachineTemplateProperties.disks = disks;
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedVirtualMachineTemplateProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedVirtualMachineTemplateProperties;
        });
    }
}
