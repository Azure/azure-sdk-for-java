// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.scvmm.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Cloud Capacity model.
 */
@Immutable
public final class CloudCapacity implements JsonSerializable<CloudCapacity> {
    /*
     * CPUCount specifies the maximum number of CPUs that can be allocated in the cloud.
     */
    private Long cpuCount;

    /*
     * MemoryMB specifies a memory usage limit in megabytes.
     */
    private Long memoryMB;

    /*
     * VMCount gives the max number of VMs that can be deployed in the cloud.
     */
    private Long vmCount;

    /**
     * Creates an instance of CloudCapacity class.
     */
    public CloudCapacity() {
    }

    /**
     * Get the cpuCount property: CPUCount specifies the maximum number of CPUs that can be allocated in the cloud.
     * 
     * @return the cpuCount value.
     */
    public Long cpuCount() {
        return this.cpuCount;
    }

    /**
     * Get the memoryMB property: MemoryMB specifies a memory usage limit in megabytes.
     * 
     * @return the memoryMB value.
     */
    public Long memoryMB() {
        return this.memoryMB;
    }

    /**
     * Get the vmCount property: VMCount gives the max number of VMs that can be deployed in the cloud.
     * 
     * @return the vmCount value.
     */
    public Long vmCount() {
        return this.vmCount;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CloudCapacity from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CloudCapacity if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the CloudCapacity.
     */
    public static CloudCapacity fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CloudCapacity deserializedCloudCapacity = new CloudCapacity();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("cpuCount".equals(fieldName)) {
                    deserializedCloudCapacity.cpuCount = reader.getNullable(JsonReader::getLong);
                } else if ("memoryMB".equals(fieldName)) {
                    deserializedCloudCapacity.memoryMB = reader.getNullable(JsonReader::getLong);
                } else if ("vmCount".equals(fieldName)) {
                    deserializedCloudCapacity.vmCount = reader.getNullable(JsonReader::getLong);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCloudCapacity;
        });
    }
}
