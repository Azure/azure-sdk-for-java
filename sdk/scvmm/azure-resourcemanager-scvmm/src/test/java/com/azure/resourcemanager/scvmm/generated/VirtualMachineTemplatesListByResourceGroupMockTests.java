// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.scvmm.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.scvmm.ScvmmManager;
import com.azure.resourcemanager.scvmm.models.VirtualMachineTemplate;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class VirtualMachineTemplatesListByResourceGroupMockTests {
    @Test
    public void testListByResourceGroup() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"value\":[{\"properties\":{\"inventoryItemId\":\"wmqtibx\",\"uuid\":\"jddtvqct\",\"vmmServerId\":\"dija\",\"osType\":\"Windows\",\"osName\":\"rsiee\",\"computerName\":\"ndzaapmudq\",\"memoryMB\":1473376981,\"cpuCount\":1760107744,\"limitCpuForMigration\":\"true\",\"dynamicMemoryEnabled\":\"false\",\"isCustomizable\":\"false\",\"dynamicMemoryMaxMB\":1062514292,\"dynamicMemoryMinMB\":44660068,\"isHighlyAvailable\":\"true\",\"generation\":1568036168,\"networkInterfaces\":[{\"name\":\"zznrtffyaqi\",\"displayName\":\"hheioqaqhvseuf\",\"ipv4Addresses\":[\"rxpdlcgqlsi\",\"mjqfrddgamquhio\",\"rsjuivfcdisyir\"],\"ipv6Addresses\":[\"hcz\",\"xrxzbujrtr\",\"qvwre\",\"khgn\"],\"macAddress\":\"zonzlrpiqywnc\",\"virtualNetworkId\":\"tszcofizehtdhgb\",\"networkName\":\"vreljea\",\"ipv4AddressType\":\"Static\",\"ipv6AddressType\":\"Static\",\"macAddressType\":\"Dynamic\",\"nicId\":\"vuanashcxlp\"},{\"name\":\"erbdk\",\"displayName\":\"vidizozsdb\",\"ipv4Addresses\":[\"jmonfdgn\",\"n\"],\"ipv6Addresses\":[\"uuwwltv\"],\"macAddress\":\"jctzenkei\",\"virtualNetworkId\":\"zhmkdasvflyh\",\"networkName\":\"cu\",\"ipv4AddressType\":\"Static\",\"ipv6AddressType\":\"Static\",\"macAddressType\":\"Dynamic\",\"nicId\":\"oldforobw\"},{\"name\":\"vizbfhfo\",\"displayName\":\"acqpbtuodxesza\",\"ipv4Addresses\":[\"l\",\"wumuaslzk\"],\"ipv6Addresses\":[\"woycqucwyha\",\"nomdrkywuhpsv\",\"uurutlwexxwlalni\"],\"macAddress\":\"zsrzpgepq\",\"virtualNetworkId\":\"bb\",\"networkName\":\"pgdakchzyvli\",\"ipv4AddressType\":\"Dynamic\",\"ipv6AddressType\":\"Dynamic\",\"macAddressType\":\"Static\",\"nicId\":\"jibnxmysu\"}],\"disks\":[{\"name\":\"rntvlwijp\",\"displayName\":\"texoqqpwc\",\"diskId\":\"ufmhrunc\",\"diskSizeGB\":1652679465,\"maxDiskSizeGB\":2077646980,\"bus\":109210510,\"lun\":892310228,\"busType\":\"zhlctddunqndyfpc\",\"vhdType\":\"qbnj\",\"volumeType\":\"cgegydcwbo\",\"vhdFormatType\":\"umvq\",\"templateDiskId\":\"lihrraiouaubr\",\"storageQoSPolicy\":{\"name\":\"oq\",\"id\":\"uojrngiflr\"},\"createDiffDisk\":\"false\"}],\"provisioningState\":\"Created\"},\"extendedLocation\":{\"type\":\"biuimzdlyjdfq\",\"name\":\"kyoqufdv\"},\"location\":\"zslzojhp\",\"tags\":{\"ugeyzihgrkyuiza\":\"nmdxotngfd\",\"yhsgz\":\"snmfpphojeevy\"},\"id\":\"czbgomfgbeg\",\"name\":\"qgleohibetnluank\",\"type\":\"rfxeeebtij\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        ScvmmManager manager =
            ScvmmManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<VirtualMachineTemplate> response =
            manager.virtualMachineTemplates().listByResourceGroup("lxveabfqx", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("zslzojhp", response.iterator().next().location());
        Assertions.assertEquals("nmdxotngfd", response.iterator().next().tags().get("ugeyzihgrkyuiza"));
        Assertions.assertEquals("biuimzdlyjdfq", response.iterator().next().extendedLocation().type());
        Assertions.assertEquals("kyoqufdv", response.iterator().next().extendedLocation().name());
        Assertions.assertEquals("wmqtibx", response.iterator().next().inventoryItemId());
        Assertions.assertEquals("jddtvqct", response.iterator().next().uuid());
        Assertions.assertEquals("dija", response.iterator().next().vmmServerId());
    }
}
