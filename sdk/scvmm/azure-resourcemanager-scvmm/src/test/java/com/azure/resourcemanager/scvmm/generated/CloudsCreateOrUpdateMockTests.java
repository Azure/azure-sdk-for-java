// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.scvmm.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.scvmm.ScvmmManager;
import com.azure.resourcemanager.scvmm.models.Cloud;
import com.azure.resourcemanager.scvmm.models.CloudProperties;
import com.azure.resourcemanager.scvmm.models.ExtendedLocation;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class CloudsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"inventoryItemId\":\"vpbdbzqgq\",\"uuid\":\"hedsvqwthmkyib\",\"vmmServerId\":\"sihsgqcwdhohsd\",\"cloudName\":\"cdzsu\",\"cloudCapacity\":{\"cpuCount\":7117215511818462498,\"memoryMB\":6915667068183243162,\"vmCount\":7808079684010366581},\"storageQoSPolicies\":[{\"name\":\"pcvhdbevwqqxeys\",\"id\":\"nqzi\",\"iopsMaximum\":4259363860416490102,\"iopsMinimum\":1183436721296067733,\"bandwidthLimit\":4864080345534775106,\"policyId\":\"xeqoc\"},{\"name\":\"mygvkzqkj\",\"id\":\"okbzef\",\"iopsMaximum\":2200731602352647038,\"iopsMinimum\":8813876269554898921,\"bandwidthLimit\":4509675475426678163,\"policyId\":\"e\"},{\"name\":\"q\",\"id\":\"kwv\",\"iopsMaximum\":5672897057063193378,\"iopsMinimum\":1846786260892387923,\"bandwidthLimit\":4435864913823432479,\"policyId\":\"xzmqpnodawop\"},{\"name\":\"ewjptmcg\",\"id\":\"ostzelndlatu\",\"iopsMaximum\":6922803194395266051,\"iopsMinimum\":879063471631285932,\"bandwidthLimit\":8308748747055589302,\"policyId\":\"hrbbpneqvcwwyy\"}],\"provisioningState\":\"Succeeded\"},\"extendedLocation\":{\"type\":\"chpp\",\"name\":\"rsnm\"},\"location\":\"ayzejnhlbkpbz\",\"tags\":{\"echndbnwieholew\":\"iljhahz\",\"efqsfapaqtferrqw\":\"wiuub\",\"kmfx\":\"x\"},\"id\":\"pjwogqqno\",\"name\":\"pud\",\"type\":\"dabtqwp\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ScvmmManager manager = ScvmmManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        Cloud response = manager.clouds()
            .define("hpc")
            .withRegion("uciqdsme")
            .withExistingResourceGroup("lzo")
            .withExtendedLocation(new ExtendedLocation().withType("ypoq").withName("hlqhykprlpy"))
            .withTags(mapOf("asiibmiybnnust", "tdfuxt", "nmgixh", "nlj", "oudorhcgyyp", "mavmq", "hu", "otwypundmb"))
            .withProperties(new CloudProperties().withInventoryItemId("mdxotngfdgu")
                .withUuid("yzihgrkyuizabsn")
                .withVmmServerId("pphoj"))
            .create();

        Assertions.assertEquals("ayzejnhlbkpbz", response.location());
        Assertions.assertEquals("iljhahz", response.tags().get("echndbnwieholew"));
        Assertions.assertEquals("vpbdbzqgq", response.properties().inventoryItemId());
        Assertions.assertEquals("hedsvqwthmkyib", response.properties().uuid());
        Assertions.assertEquals("sihsgqcwdhohsd", response.properties().vmmServerId());
        Assertions.assertEquals("chpp", response.extendedLocation().type());
        Assertions.assertEquals("rsnm", response.extendedLocation().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
