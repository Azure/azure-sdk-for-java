// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.scvmm.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.scvmm.ScvmmManager;
import com.azure.resourcemanager.scvmm.models.Cloud;
import com.azure.resourcemanager.scvmm.models.ExtendedLocation;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class CloudsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"inventoryItemId\":\"jvlpjxxkzbr\",\"uuid\":\"geivsiykzkdncj\",\"vmmServerId\":\"onbzoggculapzwy\",\"cloudName\":\"gogtqxepnylbf\",\"cloudCapacity\":{\"cpuCount\":4288805423165621642,\"memoryMB\":6143665732842800570,\"vmCount\":1201572739388365777},\"storageQoSPolicies\":[{\"name\":\"vfcibyfmowux\",\"id\":\"jpvd\",\"iopsMaximum\":5188181400019760142,\"iopsMinimum\":9040698043592142501,\"bandwidthLimit\":4970789347057836253,\"policyId\":\"bhyzsxjr\"},{\"name\":\"mbtrnegvmnvu\",\"id\":\"qvldspastjbkkd\",\"iopsMaximum\":3638902775538009803,\"iopsMinimum\":3963298330756380,\"bandwidthLimit\":3734568678043826451,\"policyId\":\"rriloz\"},{\"name\":\"eewchpxlktw\",\"id\":\"ziycslevufuztck\",\"iopsMaximum\":295918315002308006,\"iopsMinimum\":1721083414571377140,\"bandwidthLimit\":5738549328239140428,\"policyId\":\"ulwm\"},{\"name\":\"qzz\",\"id\":\"jvpglydzgk\",\"iopsMaximum\":4622170098850979496,\"iopsMinimum\":2413283043718257207,\"bandwidthLimit\":3439283080051400137,\"policyId\":\"yutnwytpzdmov\"}],\"provisioningState\":\"Succeeded\"},\"extendedLocation\":{\"type\":\"aawzqadfl\",\"name\":\"ur\"},\"location\":\"laecxndticok\",\"tags\":{\"irclnpk\":\"mlqtmldgxob\",\"iykhy\":\"iayz\",\"jlb\":\"wf\"},\"id\":\"xqvkjlmxhomdyn\",\"name\":\"dwdigumb\",\"type\":\"raauzzpt\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        ScvmmManager manager =
            ScvmmManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        Cloud response =
            manager
                .clouds()
                .define("atnwxyiopi")
                .withRegion("fcvlerch")
                .withExistingResourceGroup("azivjlfrqttbajl")
                .withExtendedLocation(new ExtendedLocation().withType("kuvsjcswsm").withName("tuluq"))
                .withTags(mapOf("dfc", "mfpjbabw"))
                .withInventoryItemId("qqfkuv")
                .withUuid("xkdmligo")
                .withVmmServerId("brxk")
                .create();

        Assertions.assertEquals("laecxndticok", response.location());
        Assertions.assertEquals("mlqtmldgxob", response.tags().get("irclnpk"));
        Assertions.assertEquals("aawzqadfl", response.extendedLocation().type());
        Assertions.assertEquals("ur", response.extendedLocation().name());
        Assertions.assertEquals("jvlpjxxkzbr", response.inventoryItemId());
        Assertions.assertEquals("geivsiykzkdncj", response.uuid());
        Assertions.assertEquals("onbzoggculapzwy", response.vmmServerId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
