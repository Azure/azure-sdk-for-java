// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.scvmm.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.scvmm.fluent.models.AvailabilitySetInner;
import com.azure.resourcemanager.scvmm.models.ExtendedLocation;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AvailabilitySetInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AvailabilitySetInner model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"availabilitySetName\":\"qxn\",\"vmmServerId\":\"kzgxhurip\",\"provisioningState\":\"Provisioning\"},\"extendedLocation\":{\"type\":\"dxunkbebxmubyyn\",\"name\":\"lrb\"},\"location\":\"koievseo\",\"tags\":{\"mpgcjefuzmuvpbt\":\"rlltmuwlauwzizx\"},\"id\":\"d\",\"name\":\"morppxebmnzbtbh\",\"type\":\"pglkf\"}")
                .toObject(AvailabilitySetInner.class);
        Assertions.assertEquals("koievseo", model.location());
        Assertions.assertEquals("rlltmuwlauwzizx", model.tags().get("mpgcjefuzmuvpbt"));
        Assertions.assertEquals("dxunkbebxmubyyn", model.extendedLocation().type());
        Assertions.assertEquals("lrb", model.extendedLocation().name());
        Assertions.assertEquals("qxn", model.availabilitySetName());
        Assertions.assertEquals("kzgxhurip", model.vmmServerId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AvailabilitySetInner model =
            new AvailabilitySetInner()
                .withLocation("koievseo")
                .withTags(mapOf("mpgcjefuzmuvpbt", "rlltmuwlauwzizx"))
                .withExtendedLocation(new ExtendedLocation().withType("dxunkbebxmubyyn").withName("lrb"))
                .withAvailabilitySetName("qxn")
                .withVmmServerId("kzgxhurip");
        model = BinaryData.fromObject(model).toObject(AvailabilitySetInner.class);
        Assertions.assertEquals("koievseo", model.location());
        Assertions.assertEquals("rlltmuwlauwzizx", model.tags().get("mpgcjefuzmuvpbt"));
        Assertions.assertEquals("dxunkbebxmubyyn", model.extendedLocation().type());
        Assertions.assertEquals("lrb", model.extendedLocation().name());
        Assertions.assertEquals("qxn", model.availabilitySetName());
        Assertions.assertEquals("kzgxhurip", model.vmmServerId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
