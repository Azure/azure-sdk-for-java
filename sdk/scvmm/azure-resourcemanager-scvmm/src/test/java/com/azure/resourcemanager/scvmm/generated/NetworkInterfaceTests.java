// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.scvmm.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.scvmm.models.AllocationMethod;
import com.azure.resourcemanager.scvmm.models.NetworkInterface;
import org.junit.jupiter.api.Assertions;

public final class NetworkInterfaceTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        NetworkInterface model = BinaryData.fromString(
            "{\"name\":\"si\",\"displayName\":\"evcciqihnhun\",\"ipv4Addresses\":[\"jzrnf\",\"gxg\",\"spemvtzfk\",\"fublj\"],\"ipv6Addresses\":[\"qeof\",\"aeqjhqjbasvms\",\"jqul\",\"gsntnbybkzgcwr\"],\"macAddress\":\"lxxwrljdouskc\",\"virtualNetworkId\":\"kocrcjdkwtnhx\",\"networkName\":\"jbiksqrglssai\",\"ipv4AddressType\":\"Dynamic\",\"ipv6AddressType\":\"Static\",\"macAddressType\":\"Static\",\"nicId\":\"ljfmppee\"}")
            .toObject(NetworkInterface.class);
        Assertions.assertEquals("si", model.name());
        Assertions.assertEquals("lxxwrljdouskc", model.macAddress());
        Assertions.assertEquals("kocrcjdkwtnhx", model.virtualNetworkId());
        Assertions.assertEquals(AllocationMethod.DYNAMIC, model.ipv4AddressType());
        Assertions.assertEquals(AllocationMethod.STATIC, model.ipv6AddressType());
        Assertions.assertEquals(AllocationMethod.STATIC, model.macAddressType());
        Assertions.assertEquals("ljfmppee", model.nicId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        NetworkInterface model = new NetworkInterface().withName("si")
            .withMacAddress("lxxwrljdouskc")
            .withVirtualNetworkId("kocrcjdkwtnhx")
            .withIpv4AddressType(AllocationMethod.DYNAMIC)
            .withIpv6AddressType(AllocationMethod.STATIC)
            .withMacAddressType(AllocationMethod.STATIC)
            .withNicId("ljfmppee");
        model = BinaryData.fromObject(model).toObject(NetworkInterface.class);
        Assertions.assertEquals("si", model.name());
        Assertions.assertEquals("lxxwrljdouskc", model.macAddress());
        Assertions.assertEquals("kocrcjdkwtnhx", model.virtualNetworkId());
        Assertions.assertEquals(AllocationMethod.DYNAMIC, model.ipv4AddressType());
        Assertions.assertEquals(AllocationMethod.STATIC, model.ipv6AddressType());
        Assertions.assertEquals(AllocationMethod.STATIC, model.macAddressType());
        Assertions.assertEquals("ljfmppee", model.nicId());
    }
}
