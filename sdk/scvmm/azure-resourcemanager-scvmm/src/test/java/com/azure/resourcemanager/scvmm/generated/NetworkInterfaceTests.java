// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.scvmm.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.scvmm.models.AllocationMethod;
import com.azure.resourcemanager.scvmm.models.NetworkInterface;
import org.junit.jupiter.api.Assertions;

public final class NetworkInterfaceTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        NetworkInterface model =
            BinaryData
                .fromString(
                    "{\"name\":\"lve\",\"displayName\":\"lupj\",\"ipv4Addresses\":[\"fxobbcsws\",\"tjrip\",\"rbpbewtghfgblcg\",\"xzvlvqhjkbegib\"],\"ipv6Addresses\":[\"xiebwwaloayqcg\",\"rtzju\"],\"macAddress\":\"wyzmhtxon\",\"virtualNetworkId\":\"ts\",\"networkName\":\"jcbpwxqpsrknft\",\"ipv4AddressType\":\"Static\",\"ipv6AddressType\":\"Static\",\"macAddressType\":\"Dynamic\",\"nicId\":\"rwmdyvxqtay\"}")
                .toObject(NetworkInterface.class);
        Assertions.assertEquals("lve", model.name());
        Assertions.assertEquals("wyzmhtxon", model.macAddress());
        Assertions.assertEquals("ts", model.virtualNetworkId());
        Assertions.assertEquals(AllocationMethod.STATIC, model.ipv4AddressType());
        Assertions.assertEquals(AllocationMethod.STATIC, model.ipv6AddressType());
        Assertions.assertEquals(AllocationMethod.DYNAMIC, model.macAddressType());
        Assertions.assertEquals("rwmdyvxqtay", model.nicId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        NetworkInterface model =
            new NetworkInterface()
                .withName("lve")
                .withMacAddress("wyzmhtxon")
                .withVirtualNetworkId("ts")
                .withIpv4AddressType(AllocationMethod.STATIC)
                .withIpv6AddressType(AllocationMethod.STATIC)
                .withMacAddressType(AllocationMethod.DYNAMIC)
                .withNicId("rwmdyvxqtay");
        model = BinaryData.fromObject(model).toObject(NetworkInterface.class);
        Assertions.assertEquals("lve", model.name());
        Assertions.assertEquals("wyzmhtxon", model.macAddress());
        Assertions.assertEquals("ts", model.virtualNetworkId());
        Assertions.assertEquals(AllocationMethod.STATIC, model.ipv4AddressType());
        Assertions.assertEquals(AllocationMethod.STATIC, model.ipv6AddressType());
        Assertions.assertEquals(AllocationMethod.DYNAMIC, model.macAddressType());
        Assertions.assertEquals("rwmdyvxqtay", model.nicId());
    }
}
