// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.scvmm.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.scvmm.ScvmmManager;
import com.azure.resourcemanager.scvmm.models.ExtendedLocation;
import com.azure.resourcemanager.scvmm.models.VirtualMachineTemplate;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class VirtualMachineTemplatesCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"inventoryItemId\":\"awtxxpk\",\"uuid\":\"cxcjxgry\",\"vmmServerId\":\"mpcycilrmcaykgg\",\"osType\":\"Linux\",\"osName\":\"ztrksxwpndf\",\"computerName\":\"fnznth\",\"memoryMB\":1440245755,\"cpuCount\":253945688,\"limitCpuForMigration\":\"true\",\"dynamicMemoryEnabled\":\"false\",\"isCustomizable\":\"true\",\"dynamicMemoryMaxMB\":1335142199,\"dynamicMemoryMinMB\":1634012333,\"isHighlyAvailable\":\"false\",\"generation\":467574810,\"networkInterfaces\":[{\"name\":\"smgbzahgxqdl\",\"displayName\":\"tlt\",\"ipv4Addresses\":[\"rltzkatbhjmz\",\"nbsoqeqalarv\",\"agunbtgfebw\",\"nbmhyree\"],\"ipv6Addresses\":[\"qavbpdqmj\",\"lyyzglgouwtlmjj\",\"uojqt\"],\"macAddress\":\"axkjeytunlbfjk\",\"virtualNetworkId\":\"u\",\"networkName\":\"kqbh\",\"ipv4AddressType\":\"Dynamic\",\"ipv6AddressType\":\"Dynamic\",\"macAddressType\":\"Dynamic\",\"nicId\":\"hdenxaulk\"},{\"name\":\"kdk\",\"displayName\":\"mjnnawtq\",\"ipv4Addresses\":[\"xuckpggqoweyir\",\"hlisngw\",\"lqqmpiz\"],\"ipv6Addresses\":[\"n\"],\"macAddress\":\"xpxiwfcngjs\",\"virtualNetworkId\":\"sii\",\"networkName\":\"mkzjvkviir\",\"ipv4AddressType\":\"Static\",\"ipv6AddressType\":\"Dynamic\",\"macAddressType\":\"Dynamic\",\"nicId\":\"pgratzvzbglbyvi\"},{\"name\":\"ctbrxkjzwrgxffm\",\"displayName\":\"kwfbkgo\",\"ipv4Addresses\":[\"opdbydpizqac\",\"napxbiygnug\",\"knfsmfcttuxuuyil\"],\"ipv6Addresses\":[\"oiquvrehmrnjhvs\",\"jztczytqj\",\"w\",\"auunfprnjletlx\"],\"macAddress\":\"rpddouifamo\",\"virtualNetworkId\":\"z\",\"networkName\":\"nknlqwzdvpi\",\"ipv4AddressType\":\"Static\",\"ipv6AddressType\":\"Static\",\"macAddressType\":\"Dynamic\",\"nicId\":\"maajquhuxylr\"},{\"name\":\"m\",\"displayName\":\"g\",\"ipv4Addresses\":[\"zyos\",\"spshckfkyjp\",\"sp\"],\"ipv6Addresses\":[\"sdfppyogtie\",\"ujtv\"],\"macAddress\":\"kcnyx\",\"virtualNetworkId\":\"munjdxvglnkvx\",\"networkName\":\"paglqivbgk\",\"ipv4AddressType\":\"Static\",\"ipv6AddressType\":\"Static\",\"macAddressType\":\"Dynamic\",\"nicId\":\"qdf\"}],\"disks\":[{\"name\":\"iypfp\",\"displayName\":\"cpzgpxtiv\",\"diskId\":\"knidib\",\"diskSizeGB\":1035678028,\"maxDiskSizeGB\":2098514959,\"bus\":110670070,\"lun\":1796860242,\"busType\":\"ov\",\"vhdType\":\"pikqmh\",\"volumeType\":\"owjrmzvuporqz\",\"vhdFormatType\":\"uydzvk\",\"templateDiskId\":\"xcnqmxqpswokmvkh\",\"storageQoSPolicy\":{\"name\":\"dhbemzqkzszu\",\"id\":\"wtglxx\"},\"createDiffDisk\":\"true\"},{\"name\":\"pg\",\"displayName\":\"crmnzhrgmqgjs\",\"diskId\":\"pqcbfrmbodthsq\",\"diskSizeGB\":1490710976,\"maxDiskSizeGB\":1847709743,\"bus\":1825879009,\"lun\":10992776,\"busType\":\"lacjfrnxo\",\"vhdType\":\"xauzlwvsgmwohqfz\",\"volumeType\":\"vux\",\"vhdFormatType\":\"kjsvthnwpzteko\",\"templateDiskId\":\"ribi\",\"storageQoSPolicy\":{\"name\":\"gplucfotangcfhny\",\"id\":\"cugswvxwlmzqw\"},\"createDiffDisk\":\"false\"},{\"name\":\"njmxmcuqudtcvcl\",\"displayName\":\"npdkv\",\"diskId\":\"abuiy\",\"diskSizeGB\":214346592,\"maxDiskSizeGB\":850664792,\"bus\":593163747,\"lun\":1714041739,\"busType\":\"neiknpg\",\"vhdType\":\"gjiuqhibto\",\"volumeType\":\"pqwjedm\",\"vhdFormatType\":\"r\",\"templateDiskId\":\"g\",\"storageQoSPolicy\":{\"name\":\"ktvqylkmqpzoy\",\"id\":\"fbcgwgcloxoebqin\"},\"createDiffDisk\":\"false\"},{\"name\":\"wjfuj\",\"displayName\":\"afcba\",\"diskId\":\"pzpofoiyjw\",\"diskSizeGB\":1217605698,\"maxDiskSizeGB\":716390375,\"bus\":1008375264,\"lun\":1510318129,\"busType\":\"l\",\"vhdType\":\"ndviauogphuartvt\",\"volumeType\":\"kyefchnmnahmnxhk\",\"vhdFormatType\":\"qirwrweoox\",\"templateDiskId\":\"i\",\"storageQoSPolicy\":{\"name\":\"wrsnewmozqvbu\",\"id\":\"ma\"},\"createDiffDisk\":\"true\"}],\"provisioningState\":\"Succeeded\"},\"extendedLocation\":{\"type\":\"hxzga\",\"name\":\"taboidvmf\"},\"location\":\"ppu\",\"tags\":{\"tdherngbtcjuahok\":\"sepdfgk\"},\"id\":\"tobkauxofshfph\",\"name\":\"pnulaiywzej\",\"type\":\"whslwkoj\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        ScvmmManager manager =
            ScvmmManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        VirtualMachineTemplate response =
            manager
                .virtualMachineTemplates()
                .define("fgtayxonsup")
                .withRegion("i")
                .withExistingResourceGroup("mv")
                .withExtendedLocation(new ExtendedLocation().withType("zruswh").withName("czznvfbycjsxj"))
                .withTags(mapOf("noamldsehaohdj", "umwmxqhnd", "pelnjetag", "hflzokxco"))
                .withInventoryItemId("jlzqnhc")
                .withUuid("ql")
                .withVmmServerId("zoibgsxg")
                .create();

        Assertions.assertEquals("ppu", response.location());
        Assertions.assertEquals("sepdfgk", response.tags().get("tdherngbtcjuahok"));
        Assertions.assertEquals("hxzga", response.extendedLocation().type());
        Assertions.assertEquals("taboidvmf", response.extendedLocation().name());
        Assertions.assertEquals("awtxxpk", response.inventoryItemId());
        Assertions.assertEquals("cxcjxgry", response.uuid());
        Assertions.assertEquals("mpcycilrmcaykgg", response.vmmServerId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
