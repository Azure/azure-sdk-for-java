// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.scvmm.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.scvmm.models.StorageQoSPolicy;
import org.junit.jupiter.api.Assertions;

public final class StorageQoSPolicyTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        StorageQoSPolicy model =
            BinaryData
                .fromString(
                    "{\"name\":\"dhkrwpdappdsbdk\",\"id\":\"rwjfe\",\"iopsMaximum\":8087000369487039234,\"iopsMinimum\":5558562364469410639,\"bandwidthLimit\":7488631932267615574,\"policyId\":\"rl\"}")
                .toObject(StorageQoSPolicy.class);
        Assertions.assertEquals("dhkrwpdappdsbdk", model.name());
        Assertions.assertEquals("rwjfe", model.id());
        Assertions.assertEquals(8087000369487039234L, model.iopsMaximum());
        Assertions.assertEquals(5558562364469410639L, model.iopsMinimum());
        Assertions.assertEquals(7488631932267615574L, model.bandwidthLimit());
        Assertions.assertEquals("rl", model.policyId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        StorageQoSPolicy model =
            new StorageQoSPolicy()
                .withName("dhkrwpdappdsbdk")
                .withId("rwjfe")
                .withIopsMaximum(8087000369487039234L)
                .withIopsMinimum(5558562364469410639L)
                .withBandwidthLimit(7488631932267615574L)
                .withPolicyId("rl");
        model = BinaryData.fromObject(model).toObject(StorageQoSPolicy.class);
        Assertions.assertEquals("dhkrwpdappdsbdk", model.name());
        Assertions.assertEquals("rwjfe", model.id());
        Assertions.assertEquals(8087000369487039234L, model.iopsMaximum());
        Assertions.assertEquals(5558562364469410639L, model.iopsMinimum());
        Assertions.assertEquals(7488631932267615574L, model.bandwidthLimit());
        Assertions.assertEquals("rl", model.policyId());
    }
}
