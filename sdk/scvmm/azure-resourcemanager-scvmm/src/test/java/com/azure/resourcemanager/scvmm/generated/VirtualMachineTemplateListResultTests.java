// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.scvmm.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.scvmm.fluent.models.VirtualMachineTemplateInner;
import com.azure.resourcemanager.scvmm.models.ExtendedLocation;
import com.azure.resourcemanager.scvmm.models.VirtualMachineTemplateListResult;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class VirtualMachineTemplateListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        VirtualMachineTemplateListResult model =
            BinaryData
                .fromString(
                    "{\"value\":[{\"properties\":{\"inventoryItemId\":\"kfpbs\",\"uuid\":\"ofd\",\"vmmServerId\":\"uusdttouwa\",\"osType\":\"Linux\",\"osName\":\"qvkelnsm\",\"computerName\":\"xwyjsflhhc\",\"memoryMB\":290339428,\"cpuCount\":2013755278,\"limitCpuForMigration\":\"true\",\"dynamicMemoryEnabled\":\"true\",\"isCustomizable\":\"false\",\"dynamicMemoryMaxMB\":663464413,\"dynamicMemoryMinMB\":1486510526,\"isHighlyAvailable\":\"false\",\"generation\":1772436776,\"networkInterfaces\":[{\"name\":\"jpkiidzyexznelix\",\"displayName\":\"rzt\",\"ipv4Addresses\":[\"hb\",\"xknalaulppg\"],\"ipv6Addresses\":[\"pnapnyiropuh\",\"igvpgylg\",\"git\",\"medjvcslynqwwncw\"],\"macAddress\":\"hxg\",\"virtualNetworkId\":\"rmgucnap\",\"networkName\":\"eoellwptfdygp\",\"ipv4AddressType\":\"Dynamic\",\"ipv6AddressType\":\"Dynamic\",\"macAddressType\":\"Static\",\"nicId\":\"pzfqrhhuaoppp\"},{\"name\":\"eqx\",\"displayName\":\"z\",\"ipv4Addresses\":[\"zxctobgb\",\"dmoizpostmg\"],\"ipv6Addresses\":[\"bunrmfqjhhk\",\"bpvjymjhx\",\"j\"],\"macAddress\":\"gudivkrtswbxqz\",\"virtualNetworkId\":\"zjf\",\"networkName\":\"vjfdx\",\"ipv4AddressType\":\"Dynamic\",\"ipv6AddressType\":\"Dynamic\",\"macAddressType\":\"Dynamic\",\"nicId\":\"qaqtdoqmcbxvwvxy\"}],\"disks\":[{\"name\":\"hsfxoblytkb\",\"displayName\":\"pe\",\"diskId\":\"wfbkrvrns\",\"diskSizeGB\":1344598384,\"maxDiskSizeGB\":2131802432,\"bus\":925506689,\"lun\":392993819,\"busType\":\"sbfov\",\"vhdType\":\"rruvwbhsq\",\"volumeType\":\"ubcgjbirxb\",\"vhdFormatType\":\"bsrfbj\",\"templateDiskId\":\"twss\",\"storageQoSPolicy\":{},\"createDiffDisk\":\"true\"},{\"name\":\"vjz\",\"displayName\":\"xilzznf\",\"diskId\":\"nvwpmqtaruouj\",\"diskSizeGB\":1203309297,\"maxDiskSizeGB\":1426920839,\"bus\":1589023977,\"lun\":1209878928,\"busType\":\"r\",\"vhdType\":\"n\",\"volumeType\":\"ewgdrjervn\",\"vhdFormatType\":\"nqpeh\",\"templateDiskId\":\"doy\",\"storageQoSPolicy\":{},\"createDiffDisk\":\"false\"},{\"name\":\"hnzdndslgnayqi\",\"displayName\":\"nduhavhqlkthum\",\"diskId\":\"olbgycduiertgccy\",\"diskSizeGB\":1297199271,\"maxDiskSizeGB\":6018093,\"bus\":585310107,\"lun\":1282949861,\"busType\":\"lfmmdnbbglzpswi\",\"vhdType\":\"mcwyhzdxssadb\",\"volumeType\":\"nvdfznuda\",\"vhdFormatType\":\"vxzbncb\",\"templateDiskId\":\"lpstdbhhxsrzdz\",\"storageQoSPolicy\":{},\"createDiffDisk\":\"false\"}],\"provisioningState\":\"Accepted\"},\"extendedLocation\":{\"type\":\"ntnev\",\"name\":\"wjmy\"},\"location\":\"dsslswt\",\"tags\":{\"wab\":\"riofzpyqse\",\"hszhedplvwiwu\":\"ets\",\"dnkwwtppjflcxog\":\"mwmbes\"},\"id\":\"okonzmnsikvmkqz\",\"name\":\"qqkdltfzxmhhvhgu\",\"type\":\"eodkwobda\"}],\"nextLink\":\"tibqdxbxwakb\"}")
                .toObject(VirtualMachineTemplateListResult.class);
        Assertions.assertEquals("dsslswt", model.value().get(0).location());
        Assertions.assertEquals("riofzpyqse", model.value().get(0).tags().get("wab"));
        Assertions.assertEquals("ntnev", model.value().get(0).extendedLocation().type());
        Assertions.assertEquals("wjmy", model.value().get(0).extendedLocation().name());
        Assertions.assertEquals("kfpbs", model.value().get(0).inventoryItemId());
        Assertions.assertEquals("ofd", model.value().get(0).uuid());
        Assertions.assertEquals("uusdttouwa", model.value().get(0).vmmServerId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        VirtualMachineTemplateListResult model =
            new VirtualMachineTemplateListResult()
                .withValue(
                    Arrays
                        .asList(
                            new VirtualMachineTemplateInner()
                                .withLocation("dsslswt")
                                .withTags(
                                    mapOf("wab", "riofzpyqse", "hszhedplvwiwu", "ets", "dnkwwtppjflcxog", "mwmbes"))
                                .withExtendedLocation(new ExtendedLocation().withType("ntnev").withName("wjmy"))
                                .withInventoryItemId("kfpbs")
                                .withUuid("ofd")
                                .withVmmServerId("uusdttouwa")));
        model = BinaryData.fromObject(model).toObject(VirtualMachineTemplateListResult.class);
        Assertions.assertEquals("dsslswt", model.value().get(0).location());
        Assertions.assertEquals("riofzpyqse", model.value().get(0).tags().get("wab"));
        Assertions.assertEquals("ntnev", model.value().get(0).extendedLocation().type());
        Assertions.assertEquals("wjmy", model.value().get(0).extendedLocation().name());
        Assertions.assertEquals("kfpbs", model.value().get(0).inventoryItemId());
        Assertions.assertEquals("ofd", model.value().get(0).uuid());
        Assertions.assertEquals("uusdttouwa", model.value().get(0).vmmServerId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
