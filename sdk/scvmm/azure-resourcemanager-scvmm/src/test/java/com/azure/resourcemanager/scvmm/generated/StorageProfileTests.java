// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.scvmm.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.scvmm.models.CreateDiffDisk;
import com.azure.resourcemanager.scvmm.models.StorageProfile;
import com.azure.resourcemanager.scvmm.models.StorageQoSPolicyDetails;
import com.azure.resourcemanager.scvmm.models.VirtualDisk;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class StorageProfileTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        StorageProfile model =
            BinaryData
                .fromString(
                    "{\"disks\":[{\"name\":\"wxuqlcvydypatdoo\",\"displayName\":\"jkniodko\",\"diskId\":\"bw\",\"diskSizeGB\":1480895301,\"maxDiskSizeGB\":214137082,\"bus\":1628734797,\"lun\":895181053,\"busType\":\"dkcrodt\",\"vhdType\":\"nfwjlfltkacjvefk\",\"volumeType\":\"foakgg\",\"vhdFormatType\":\"pagao\",\"templateDiskId\":\"ulpqblylsyxkqjn\",\"storageQoSPolicy\":{\"name\":\"r\",\"id\":\"iagxsdszuempsbz\"},\"createDiffDisk\":\"false\"},{\"name\":\"eyvpnqicvinvkj\",\"displayName\":\"dxrbuukzcle\",\"diskId\":\"hmlwpaztzpo\",\"diskSizeGB\":1425896475,\"maxDiskSizeGB\":2098727625,\"bus\":484940684,\"lun\":2069096730,\"busType\":\"whxxbuyqax\",\"vhdType\":\"eqz\",\"volumeType\":\"priolx\",\"vhdFormatType\":\"jaltolmnc\",\"templateDiskId\":\"obqwcsdbnwdcfh\",\"storageQoSPolicy\":{\"name\":\"dpfuvg\",\"id\":\"bjj\"},\"createDiffDisk\":\"false\"},{\"name\":\"xbvtvudu\",\"displayName\":\"cormr\",\"diskId\":\"qtvcofudflvkgj\",\"diskSizeGB\":1622767746,\"maxDiskSizeGB\":310195791,\"bus\":612947091,\"lun\":1588096441,\"busType\":\"aznqntoru\",\"vhdType\":\"gsahmkycgrauw\",\"volumeType\":\"etaebu\",\"vhdFormatType\":\"vdmovsmzlxwabm\",\"templateDiskId\":\"efkifr\",\"storageQoSPolicy\":{\"name\":\"u\",\"id\":\"jmqlgkfb\"},\"createDiffDisk\":\"false\"}]}")
                .toObject(StorageProfile.class);
        Assertions.assertEquals("wxuqlcvydypatdoo", model.disks().get(0).name());
        Assertions.assertEquals("bw", model.disks().get(0).diskId());
        Assertions.assertEquals(1480895301, model.disks().get(0).diskSizeGB());
        Assertions.assertEquals(1628734797, model.disks().get(0).bus());
        Assertions.assertEquals(895181053, model.disks().get(0).lun());
        Assertions.assertEquals("dkcrodt", model.disks().get(0).busType());
        Assertions.assertEquals("nfwjlfltkacjvefk", model.disks().get(0).vhdType());
        Assertions.assertEquals("ulpqblylsyxkqjn", model.disks().get(0).templateDiskId());
        Assertions.assertEquals("r", model.disks().get(0).storageQoSPolicy().name());
        Assertions.assertEquals("iagxsdszuempsbz", model.disks().get(0).storageQoSPolicy().id());
        Assertions.assertEquals(CreateDiffDisk.FALSE, model.disks().get(0).createDiffDisk());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        StorageProfile model =
            new StorageProfile()
                .withDisks(
                    Arrays
                        .asList(
                            new VirtualDisk()
                                .withName("wxuqlcvydypatdoo")
                                .withDiskId("bw")
                                .withDiskSizeGB(1480895301)
                                .withBus(1628734797)
                                .withLun(895181053)
                                .withBusType("dkcrodt")
                                .withVhdType("nfwjlfltkacjvefk")
                                .withTemplateDiskId("ulpqblylsyxkqjn")
                                .withStorageQoSPolicy(
                                    new StorageQoSPolicyDetails().withName("r").withId("iagxsdszuempsbz"))
                                .withCreateDiffDisk(CreateDiffDisk.FALSE),
                            new VirtualDisk()
                                .withName("eyvpnqicvinvkj")
                                .withDiskId("hmlwpaztzpo")
                                .withDiskSizeGB(1425896475)
                                .withBus(484940684)
                                .withLun(2069096730)
                                .withBusType("whxxbuyqax")
                                .withVhdType("eqz")
                                .withTemplateDiskId("obqwcsdbnwdcfh")
                                .withStorageQoSPolicy(new StorageQoSPolicyDetails().withName("dpfuvg").withId("bjj"))
                                .withCreateDiffDisk(CreateDiffDisk.FALSE),
                            new VirtualDisk()
                                .withName("xbvtvudu")
                                .withDiskId("qtvcofudflvkgj")
                                .withDiskSizeGB(1622767746)
                                .withBus(612947091)
                                .withLun(1588096441)
                                .withBusType("aznqntoru")
                                .withVhdType("gsahmkycgrauw")
                                .withTemplateDiskId("efkifr")
                                .withStorageQoSPolicy(new StorageQoSPolicyDetails().withName("u").withId("jmqlgkfb"))
                                .withCreateDiffDisk(CreateDiffDisk.FALSE)));
        model = BinaryData.fromObject(model).toObject(StorageProfile.class);
        Assertions.assertEquals("wxuqlcvydypatdoo", model.disks().get(0).name());
        Assertions.assertEquals("bw", model.disks().get(0).diskId());
        Assertions.assertEquals(1480895301, model.disks().get(0).diskSizeGB());
        Assertions.assertEquals(1628734797, model.disks().get(0).bus());
        Assertions.assertEquals(895181053, model.disks().get(0).lun());
        Assertions.assertEquals("dkcrodt", model.disks().get(0).busType());
        Assertions.assertEquals("nfwjlfltkacjvefk", model.disks().get(0).vhdType());
        Assertions.assertEquals("ulpqblylsyxkqjn", model.disks().get(0).templateDiskId());
        Assertions.assertEquals("r", model.disks().get(0).storageQoSPolicy().name());
        Assertions.assertEquals("iagxsdszuempsbz", model.disks().get(0).storageQoSPolicy().id());
        Assertions.assertEquals(CreateDiffDisk.FALSE, model.disks().get(0).createDiffDisk());
    }
}
