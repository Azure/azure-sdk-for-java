// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.scvmm.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.scvmm.fluent.models.VirtualNetworkInner;
import com.azure.resourcemanager.scvmm.models.ExtendedLocation;
import com.azure.resourcemanager.scvmm.models.VirtualNetworkListResult;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class VirtualNetworkListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        VirtualNetworkListResult model =
            BinaryData
                .fromString(
                    "{\"value\":[{\"properties\":{\"inventoryItemId\":\"jrefovgmkqsle\",\"uuid\":\"vxyqjpkcattpngjc\",\"vmmServerId\":\"czsqpjhvm\",\"networkName\":\"jvnysounqe\",\"provisioningState\":\"Failed\"},\"extendedLocation\":{\"type\":\"ae\",\"name\":\"fhyhltrpmopjmcma\"},\"location\":\"okth\",\"tags\":{\"xodpuozmyzydagfu\":\"uaodsfcpk\",\"dxwzywqsmbsurexi\":\"xbezyiuokktwh\"},\"id\":\"o\",\"name\":\"yocf\",\"type\":\"fksymddystki\"},{\"properties\":{\"inventoryItemId\":\"xhqyudxorrqnb\",\"uuid\":\"czvyifq\",\"vmmServerId\":\"kdvjsll\",\"networkName\":\"vvdfwatkpnpul\",\"provisioningState\":\"Deleting\"},\"extendedLocation\":{\"type\":\"czwtruwiqzbqjv\",\"name\":\"vmyokacspkwl\"},\"location\":\"dobpxjmflbvvn\",\"tags\":{\"ajiwkuo\":\"kcciwwzjuqkhr\",\"sauuimj\":\"oskg\",\"rfbyaosvexcso\":\"vxieduugidyj\"},\"id\":\"pclhocohslk\",\"name\":\"vleggzfbuhfmvfax\",\"type\":\"ffeii\"},{\"properties\":{\"inventoryItemId\":\"lvmezyvshxmzsbbz\",\"uuid\":\"gigr\",\"vmmServerId\":\"burvjxxjnspy\",\"networkName\":\"tko\",\"provisioningState\":\"Deleting\"},\"extendedLocation\":{\"type\":\"uknvudwti\",\"name\":\"bldngkpoc\"},\"location\":\"azyxoegukg\",\"tags\":{\"yp\":\"iucgygevqzn\"},\"id\":\"rbpizc\",\"name\":\"r\",\"type\":\"j\"}],\"nextLink\":\"pyd\"}")
                .toObject(VirtualNetworkListResult.class);
        Assertions.assertEquals("okth", model.value().get(0).location());
        Assertions.assertEquals("uaodsfcpk", model.value().get(0).tags().get("xodpuozmyzydagfu"));
        Assertions.assertEquals("ae", model.value().get(0).extendedLocation().type());
        Assertions.assertEquals("fhyhltrpmopjmcma", model.value().get(0).extendedLocation().name());
        Assertions.assertEquals("jrefovgmkqsle", model.value().get(0).inventoryItemId());
        Assertions.assertEquals("vxyqjpkcattpngjc", model.value().get(0).uuid());
        Assertions.assertEquals("czsqpjhvm", model.value().get(0).vmmServerId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        VirtualNetworkListResult model =
            new VirtualNetworkListResult()
                .withValue(
                    Arrays
                        .asList(
                            new VirtualNetworkInner()
                                .withLocation("okth")
                                .withTags(mapOf("xodpuozmyzydagfu", "uaodsfcpk", "dxwzywqsmbsurexi", "xbezyiuokktwh"))
                                .withExtendedLocation(
                                    new ExtendedLocation().withType("ae").withName("fhyhltrpmopjmcma"))
                                .withInventoryItemId("jrefovgmkqsle")
                                .withUuid("vxyqjpkcattpngjc")
                                .withVmmServerId("czsqpjhvm"),
                            new VirtualNetworkInner()
                                .withLocation("dobpxjmflbvvn")
                                .withTags(
                                    mapOf(
                                        "ajiwkuo", "kcciwwzjuqkhr", "sauuimj", "oskg", "rfbyaosvexcso", "vxieduugidyj"))
                                .withExtendedLocation(
                                    new ExtendedLocation().withType("czwtruwiqzbqjv").withName("vmyokacspkwl"))
                                .withInventoryItemId("xhqyudxorrqnb")
                                .withUuid("czvyifq")
                                .withVmmServerId("kdvjsll"),
                            new VirtualNetworkInner()
                                .withLocation("azyxoegukg")
                                .withTags(mapOf("yp", "iucgygevqzn"))
                                .withExtendedLocation(
                                    new ExtendedLocation().withType("uknvudwti").withName("bldngkpoc"))
                                .withInventoryItemId("lvmezyvshxmzsbbz")
                                .withUuid("gigr")
                                .withVmmServerId("burvjxxjnspy")));
        model = BinaryData.fromObject(model).toObject(VirtualNetworkListResult.class);
        Assertions.assertEquals("okth", model.value().get(0).location());
        Assertions.assertEquals("uaodsfcpk", model.value().get(0).tags().get("xodpuozmyzydagfu"));
        Assertions.assertEquals("ae", model.value().get(0).extendedLocation().type());
        Assertions.assertEquals("fhyhltrpmopjmcma", model.value().get(0).extendedLocation().name());
        Assertions.assertEquals("jrefovgmkqsle", model.value().get(0).inventoryItemId());
        Assertions.assertEquals("vxyqjpkcattpngjc", model.value().get(0).uuid());
        Assertions.assertEquals("czsqpjhvm", model.value().get(0).vmmServerId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
