// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.scvmm.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.scvmm.fluent.models.VirtualNetworkInner;
import com.azure.resourcemanager.scvmm.models.ExtendedLocation;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class VirtualNetworkInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        VirtualNetworkInner model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"inventoryItemId\":\"lokeyy\",\"uuid\":\"nj\",\"vmmServerId\":\"lwtgrhpdj\",\"networkName\":\"umasxazjpq\",\"provisioningState\":\"Failed\"},\"extendedLocation\":{\"type\":\"alhbx\",\"name\":\"e\"},\"location\":\"zzvdudgwds\",\"tags\":{\"wlbjnpgacftade\":\"otwmcyn\",\"uesnzwdejbavo\":\"xnltyfsoppu\",\"vudwx\":\"xzdmohctb\",\"gujjugwdkcglh\":\"ndnvo\"},\"id\":\"lazjdyggdtjixhbk\",\"name\":\"ofqweykhmenevfye\",\"type\":\"fwhybcibvy\"}")
                .toObject(VirtualNetworkInner.class);
        Assertions.assertEquals("zzvdudgwds", model.location());
        Assertions.assertEquals("otwmcyn", model.tags().get("wlbjnpgacftade"));
        Assertions.assertEquals("alhbx", model.extendedLocation().type());
        Assertions.assertEquals("e", model.extendedLocation().name());
        Assertions.assertEquals("lokeyy", model.inventoryItemId());
        Assertions.assertEquals("nj", model.uuid());
        Assertions.assertEquals("lwtgrhpdj", model.vmmServerId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        VirtualNetworkInner model =
            new VirtualNetworkInner()
                .withLocation("zzvdudgwds")
                .withTags(
                    mapOf(
                        "wlbjnpgacftade",
                        "otwmcyn",
                        "uesnzwdejbavo",
                        "xnltyfsoppu",
                        "vudwx",
                        "xzdmohctb",
                        "gujjugwdkcglh",
                        "ndnvo"))
                .withExtendedLocation(new ExtendedLocation().withType("alhbx").withName("e"))
                .withInventoryItemId("lokeyy")
                .withUuid("nj")
                .withVmmServerId("lwtgrhpdj");
        model = BinaryData.fromObject(model).toObject(VirtualNetworkInner.class);
        Assertions.assertEquals("zzvdudgwds", model.location());
        Assertions.assertEquals("otwmcyn", model.tags().get("wlbjnpgacftade"));
        Assertions.assertEquals("alhbx", model.extendedLocation().type());
        Assertions.assertEquals("e", model.extendedLocation().name());
        Assertions.assertEquals("lokeyy", model.inventoryItemId());
        Assertions.assertEquals("nj", model.uuid());
        Assertions.assertEquals("lwtgrhpdj", model.vmmServerId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
