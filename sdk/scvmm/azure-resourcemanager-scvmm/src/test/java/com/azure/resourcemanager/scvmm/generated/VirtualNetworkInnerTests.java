// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.scvmm.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.scvmm.fluent.models.VirtualNetworkInner;
import com.azure.resourcemanager.scvmm.models.ExtendedLocation;
import com.azure.resourcemanager.scvmm.models.VirtualNetworkProperties;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class VirtualNetworkInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        VirtualNetworkInner model = BinaryData.fromString(
            "{\"properties\":{\"inventoryItemId\":\"vwpklvxwmygdxp\",\"uuid\":\"qchiszep\",\"vmmServerId\":\"bjcrxgibbdaxco\",\"networkName\":\"ozauorsukokwb\",\"provisioningState\":\"Failed\"},\"extendedLocation\":{\"type\":\"lvnuuepzlrph\",\"name\":\"soldweyuqdunv\"},\"location\":\"nrwrbiork\",\"tags\":{\"sivfomilo\":\"ywjhhgdnhx\",\"ao\":\"ggdufiqndieu\"},\"id\":\"jchvcyy\",\"name\":\"s\",\"type\":\"gdotcubiipuipwo\"}")
            .toObject(VirtualNetworkInner.class);
        Assertions.assertEquals("nrwrbiork", model.location());
        Assertions.assertEquals("ywjhhgdnhx", model.tags().get("sivfomilo"));
        Assertions.assertEquals("vwpklvxwmygdxp", model.properties().inventoryItemId());
        Assertions.assertEquals("qchiszep", model.properties().uuid());
        Assertions.assertEquals("bjcrxgibbdaxco", model.properties().vmmServerId());
        Assertions.assertEquals("lvnuuepzlrph", model.extendedLocation().type());
        Assertions.assertEquals("soldweyuqdunv", model.extendedLocation().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        VirtualNetworkInner model = new VirtualNetworkInner().withLocation("nrwrbiork")
            .withTags(mapOf("sivfomilo", "ywjhhgdnhx", "ao", "ggdufiqndieu"))
            .withProperties(new VirtualNetworkProperties().withInventoryItemId("vwpklvxwmygdxp")
                .withUuid("qchiszep")
                .withVmmServerId("bjcrxgibbdaxco"))
            .withExtendedLocation(new ExtendedLocation().withType("lvnuuepzlrph").withName("soldweyuqdunv"));
        model = BinaryData.fromObject(model).toObject(VirtualNetworkInner.class);
        Assertions.assertEquals("nrwrbiork", model.location());
        Assertions.assertEquals("ywjhhgdnhx", model.tags().get("sivfomilo"));
        Assertions.assertEquals("vwpklvxwmygdxp", model.properties().inventoryItemId());
        Assertions.assertEquals("qchiszep", model.properties().uuid());
        Assertions.assertEquals("bjcrxgibbdaxco", model.properties().vmmServerId());
        Assertions.assertEquals("lvnuuepzlrph", model.extendedLocation().type());
        Assertions.assertEquals("soldweyuqdunv", model.extendedLocation().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
