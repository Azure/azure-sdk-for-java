// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.scvmm.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.scvmm.fluent.models.AvailabilitySetInner;
import com.azure.resourcemanager.scvmm.models.AvailabilitySetListResult;
import com.azure.resourcemanager.scvmm.models.ExtendedLocation;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AvailabilitySetListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AvailabilitySetListResult model =
            BinaryData
                .fromString(
                    "{\"value\":[{\"properties\":{\"availabilitySetName\":\"lvithhqzonosgg\",\"vmmServerId\":\"c\",\"provisioningState\":\"Canceled\"},\"extendedLocation\":{\"type\":\"dsjnka\",\"name\":\"utiiswacf\"},\"location\":\"dkzzewkfvhqcrail\",\"tags\":{\"wdmhdlxyjrxs\":\"ppfufl\"},\"id\":\"gafcnihgwqapnedg\",\"name\":\"bcvkcvqvpkeq\",\"type\":\"cvdrhvoodsot\"},{\"properties\":{\"availabilitySetName\":\"bzdopcj\",\"vmmServerId\":\"nhdldwmgxcx\",\"provisioningState\":\"Created\"},\"extendedLocation\":{\"type\":\"mutwuoe\",\"name\":\"pkhjwni\"},\"location\":\"sluicpdggkzz\",\"tags\":{\"fy\":\"bmpaxmodfvu\",\"ouyftaakc\":\"sbpfvmwyhr\",\"ksmond\":\"wiyzvqtmnubexkp\",\"gkopkwhojvpajqgx\":\"mquxvypo\"},\"id\":\"smocmbq\",\"name\":\"qvmkcxo\",\"type\":\"apvhelxprgly\"}],\"nextLink\":\"dd\"}")
                .toObject(AvailabilitySetListResult.class);
        Assertions.assertEquals("dkzzewkfvhqcrail", model.value().get(0).location());
        Assertions.assertEquals("ppfufl", model.value().get(0).tags().get("wdmhdlxyjrxs"));
        Assertions.assertEquals("dsjnka", model.value().get(0).extendedLocation().type());
        Assertions.assertEquals("utiiswacf", model.value().get(0).extendedLocation().name());
        Assertions.assertEquals("lvithhqzonosgg", model.value().get(0).availabilitySetName());
        Assertions.assertEquals("c", model.value().get(0).vmmServerId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AvailabilitySetListResult model =
            new AvailabilitySetListResult()
                .withValue(
                    Arrays
                        .asList(
                            new AvailabilitySetInner()
                                .withLocation("dkzzewkfvhqcrail")
                                .withTags(mapOf("wdmhdlxyjrxs", "ppfufl"))
                                .withExtendedLocation(new ExtendedLocation().withType("dsjnka").withName("utiiswacf"))
                                .withAvailabilitySetName("lvithhqzonosgg")
                                .withVmmServerId("c"),
                            new AvailabilitySetInner()
                                .withLocation("sluicpdggkzz")
                                .withTags(
                                    mapOf(
                                        "fy",
                                        "bmpaxmodfvu",
                                        "ouyftaakc",
                                        "sbpfvmwyhr",
                                        "ksmond",
                                        "wiyzvqtmnubexkp",
                                        "gkopkwhojvpajqgx",
                                        "mquxvypo"))
                                .withExtendedLocation(new ExtendedLocation().withType("mutwuoe").withName("pkhjwni"))
                                .withAvailabilitySetName("bzdopcj")
                                .withVmmServerId("nhdldwmgxcx")));
        model = BinaryData.fromObject(model).toObject(AvailabilitySetListResult.class);
        Assertions.assertEquals("dkzzewkfvhqcrail", model.value().get(0).location());
        Assertions.assertEquals("ppfufl", model.value().get(0).tags().get("wdmhdlxyjrxs"));
        Assertions.assertEquals("dsjnka", model.value().get(0).extendedLocation().type());
        Assertions.assertEquals("utiiswacf", model.value().get(0).extendedLocation().name());
        Assertions.assertEquals("lvithhqzonosgg", model.value().get(0).availabilitySetName());
        Assertions.assertEquals("c", model.value().get(0).vmmServerId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
