// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.scvmm.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.scvmm.ScvmmManager;
import com.azure.resourcemanager.scvmm.models.AvailabilitySet;
import com.azure.resourcemanager.scvmm.models.AvailabilitySetProperties;
import com.azure.resourcemanager.scvmm.models.ExtendedLocation;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class AvailabilitySetsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"availabilitySetName\":\"v\",\"vmmServerId\":\"eexavo\",\"provisioningState\":\"Succeeded\"},\"extendedLocation\":{\"type\":\"lecdmdqbw\",\"name\":\"pqtgsfjac\"},\"location\":\"lhhxudbxvodhtnsi\",\"tags\":{\"ckdlpag\":\"hzmme\",\"xdfgsftufqobr\":\"rcxfailcfxwmdb\",\"knh\":\"lnacgcc\"},\"id\":\"kizvytn\",\"name\":\"zvulj\",\"type\":\"aaeranokqgukk\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ScvmmManager manager = ScvmmManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        AvailabilitySet response = manager.availabilitySets()
            .define("yxkyxvx")
            .withRegion("lnsrmffe")
            .withExistingResourceGroup("jjidjk")
            .withExtendedLocation(new ExtendedLocation().withType("jbnkpp").withName("nenlsvxeizzg"))
            .withTags(mapOf("iymerteeammxqi", "ckt", "zddrt", "kk", "ojbmxv", "g", "cuijpxt", "vrefdeesv"))
            .withProperties(
                new AvailabilitySetProperties().withAvailabilitySetName("lbj").withVmmServerId("nljlageuaulx"))
            .create();

        Assertions.assertEquals("lhhxudbxvodhtnsi", response.location());
        Assertions.assertEquals("hzmme", response.tags().get("ckdlpag"));
        Assertions.assertEquals("v", response.properties().availabilitySetName());
        Assertions.assertEquals("eexavo", response.properties().vmmServerId());
        Assertions.assertEquals("lecdmdqbw", response.extendedLocation().type());
        Assertions.assertEquals("pqtgsfjac", response.extendedLocation().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
