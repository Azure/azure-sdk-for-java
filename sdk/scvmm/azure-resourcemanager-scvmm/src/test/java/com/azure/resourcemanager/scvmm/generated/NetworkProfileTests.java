// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.scvmm.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.scvmm.models.AllocationMethod;
import com.azure.resourcemanager.scvmm.models.NetworkInterface;
import com.azure.resourcemanager.scvmm.models.NetworkProfile;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class NetworkProfileTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        NetworkProfile model =
            BinaryData
                .fromString(
                    "{\"networkInterfaces\":[{\"name\":\"irels\",\"displayName\":\"aenwabf\",\"ipv4Addresses\":[\"lddxbjhwua\"],\"ipv6Addresses\":[\"zjosp\"],\"macAddress\":\"oulpjrv\",\"virtualNetworkId\":\"glrvimjwosytxi\",\"networkName\":\"skfc\",\"ipv4AddressType\":\"Dynamic\",\"ipv6AddressType\":\"Static\",\"macAddressType\":\"Static\",\"nicId\":\"ke\"},{\"name\":\"ikh\",\"displayName\":\"fjhdg\",\"ipv4Addresses\":[\"ebdunyg\",\"eqidbqfatpx\",\"lr\"],\"ipv6Addresses\":[\"jmoadsuv\",\"r\"],\"macAddress\":\"wdmjsjqbjhhyx\",\"virtualNetworkId\":\"wlycoduhpkxkg\",\"networkName\":\"areqna\",\"ipv4AddressType\":\"Static\",\"ipv6AddressType\":\"Static\",\"macAddressType\":\"Dynamic\",\"nicId\":\"ycubeddgs\"},{\"name\":\"fwqmzqalkrmn\",\"displayName\":\"jpxac\",\"ipv4Addresses\":[\"dfnbyxbaaabjyv\",\"yffimrzrtuzqogs\",\"xnevfdnwn\"],\"ipv6Addresses\":[\"wzsyyceuzs\",\"i\",\"judpfrxt\",\"thzvaytdwkqbrqu\"],\"macAddress\":\"axhexiilivp\",\"virtualNetworkId\":\"iirqtd\",\"networkName\":\"axoruzfgsquy\",\"ipv4AddressType\":\"Dynamic\",\"ipv6AddressType\":\"Static\",\"macAddressType\":\"Dynamic\",\"nicId\":\"tramxjez\"}]}")
                .toObject(NetworkProfile.class);
        Assertions.assertEquals("irels", model.networkInterfaces().get(0).name());
        Assertions.assertEquals("oulpjrv", model.networkInterfaces().get(0).macAddress());
        Assertions.assertEquals("glrvimjwosytxi", model.networkInterfaces().get(0).virtualNetworkId());
        Assertions.assertEquals(AllocationMethod.DYNAMIC, model.networkInterfaces().get(0).ipv4AddressType());
        Assertions.assertEquals(AllocationMethod.STATIC, model.networkInterfaces().get(0).ipv6AddressType());
        Assertions.assertEquals(AllocationMethod.STATIC, model.networkInterfaces().get(0).macAddressType());
        Assertions.assertEquals("ke", model.networkInterfaces().get(0).nicId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        NetworkProfile model =
            new NetworkProfile()
                .withNetworkInterfaces(
                    Arrays
                        .asList(
                            new NetworkInterface()
                                .withName("irels")
                                .withMacAddress("oulpjrv")
                                .withVirtualNetworkId("glrvimjwosytxi")
                                .withIpv4AddressType(AllocationMethod.DYNAMIC)
                                .withIpv6AddressType(AllocationMethod.STATIC)
                                .withMacAddressType(AllocationMethod.STATIC)
                                .withNicId("ke"),
                            new NetworkInterface()
                                .withName("ikh")
                                .withMacAddress("wdmjsjqbjhhyx")
                                .withVirtualNetworkId("wlycoduhpkxkg")
                                .withIpv4AddressType(AllocationMethod.STATIC)
                                .withIpv6AddressType(AllocationMethod.STATIC)
                                .withMacAddressType(AllocationMethod.DYNAMIC)
                                .withNicId("ycubeddgs"),
                            new NetworkInterface()
                                .withName("fwqmzqalkrmn")
                                .withMacAddress("axhexiilivp")
                                .withVirtualNetworkId("iirqtd")
                                .withIpv4AddressType(AllocationMethod.DYNAMIC)
                                .withIpv6AddressType(AllocationMethod.STATIC)
                                .withMacAddressType(AllocationMethod.DYNAMIC)
                                .withNicId("tramxjez")));
        model = BinaryData.fromObject(model).toObject(NetworkProfile.class);
        Assertions.assertEquals("irels", model.networkInterfaces().get(0).name());
        Assertions.assertEquals("oulpjrv", model.networkInterfaces().get(0).macAddress());
        Assertions.assertEquals("glrvimjwosytxi", model.networkInterfaces().get(0).virtualNetworkId());
        Assertions.assertEquals(AllocationMethod.DYNAMIC, model.networkInterfaces().get(0).ipv4AddressType());
        Assertions.assertEquals(AllocationMethod.STATIC, model.networkInterfaces().get(0).ipv6AddressType());
        Assertions.assertEquals(AllocationMethod.STATIC, model.networkInterfaces().get(0).macAddressType());
        Assertions.assertEquals("ke", model.networkInterfaces().get(0).nicId());
    }
}
